
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800ff70  0800ff70  0001ff70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104c4  080104c4  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080104c4  080104c4  000204c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104cc  080104cc  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104cc  080104cc  000204cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104d0  080104d0  000204d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080104d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  200001e4  080106b8  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000af4  080106b8  00030af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002638b  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a96  00000000  00000000  0005659f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  0005b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  0005ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d54a  00000000  00000000  0005ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251c6  00000000  00000000  0008bf6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dd91  00000000  00000000  000b1130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ceec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090e4  00000000  00000000  001cef14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ff58 	.word	0x0800ff58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800ff58 	.word	0x0800ff58

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fe6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fd00 	bl	80059f8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	ed97 0a00 	vldr	s0, [r7]
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fcf9 	bl	80059f8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001016:	7a3b      	ldrb	r3, [r7, #8]
 8001018:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800101a:	7a7b      	ldrb	r3, [r7, #9]
 800101c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	75fb      	strb	r3, [r7, #23]

	can1_send(0x100, senddata_motor);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001030:	f000 fc40 	bl	80018b4 <can1_send>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
 8001046:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fcd0 	bl	80059f8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	ed97 0a00 	vldr	s0, [r7]
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fcc9 	bl	80059f8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001076:	7a3b      	ldrb	r3, [r7, #8]
 8001078:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800107a:	7a7b      	ldrb	r3, [r7, #9]
 800107c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	75fb      	strb	r3, [r7, #23]

	can1_send(0x101, senddata_motor);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	f240 1001 	movw	r0, #257	; 0x101
 8001090:	f000 fc10 	bl	80018b4 <can1_send>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fca0 	bl	80059f8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	ed97 0a00 	vldr	s0, [r7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fc99 	bl	80059f8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	75fb      	strb	r3, [r7, #23]

	can2_send(0x102, senddata_motor);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	f44f 7081 	mov.w	r0, #258	; 0x102
 80010f0:	f000 fc40 	bl	8001974 <can2_send>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0a01 	vstr	s0, [r7, #4]
 8001106:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fc70 	bl	80059f8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	ed97 0a00 	vldr	s0, [r7]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fc69 	bl	80059f8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001126:	7b3b      	ldrb	r3, [r7, #12]
 8001128:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001136:	7a3b      	ldrb	r3, [r7, #8]
 8001138:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800113a:	7a7b      	ldrb	r3, [r7, #9]
 800113c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	75fb      	strb	r3, [r7, #23]

	can2_send(0x103, senddata_motor);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	f240 1003 	movw	r0, #259	; 0x103
 8001150:	f000 fc10 	bl	8001974 <can2_send>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	ed87 0a01 	vstr	s0, [r7, #4]
 8001166:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f004 fc40 	bl	80059f8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	ed97 0a00 	vldr	s0, [r7]
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fc39 	bl	80059f8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800118a:	7b7b      	ldrb	r3, [r7, #13]
 800118c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800119a:	7a7b      	ldrb	r3, [r7, #9]
 800119c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800119e:	7abb      	ldrb	r3, [r7, #10]
 80011a0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	75fb      	strb	r3, [r7, #23]

	can1_send(0x104, senddata_motor);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	f44f 7082 	mov.w	r0, #260	; 0x104
 80011b0:	f000 fb80 	bl	80018b4 <can1_send>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fc12 	bl	80059f8 <float_to_uchar4>

	senddata_kick[0]=0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	743b      	strb	r3, [r7, #16]
	senddata_kick[1]=senddata_voltage[0];
 80011d8:	7b3b      	ldrb	r3, [r7, #12]
 80011da:	747b      	strb	r3, [r7, #17]
	senddata_kick[2]=senddata_voltage[1];
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	74bb      	strb	r3, [r7, #18]
	senddata_kick[3]=senddata_voltage[2];
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	74fb      	strb	r3, [r7, #19]
	senddata_kick[4]=senddata_voltage[3];
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	753b      	strb	r3, [r7, #20]
	can1_send(0x110, senddata_kick);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 7088 	mov.w	r0, #272	; 0x110
 80011f2:	f000 fb5f 	bl	80018b4 <can1_send>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	460a      	mov	r2, r1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
	/* id 1: 0=>standby   1=>charge
	 * id 2: 0=>straight  1=>chip
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	723b      	strb	r3, [r7, #8]
	senddata_kick[1]=param;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	727b      	strb	r3, [r7, #9]
	can1_send(0x110, senddata_kick);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001220:	f000 fb48 	bl	80018b4 <can1_send>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 8001236:	2300      	movs	r3, #0
 8001238:	723b      	strb	r3, [r7, #8]
	senddata_power[1]=power_on;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	727b      	strb	r3, [r7, #9]
	can1_send(0x010, senddata_power);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4619      	mov	r1, r3
 8001244:	2010      	movs	r0, #16
 8001246:	f000 fb35 	bl	80018b4 <can1_send>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	ed87 0a00 	vstr	s0, [r7]
 800125e:	71fb      	strb	r3, [r7, #7]
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	ed97 0a00 	vldr	s0, [r7]
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fbc5 	bl	80059f8 <float_to_uchar4>
	senddata_power_param[0]=id;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	723b      	strb	r3, [r7, #8]
	senddata_power_param[1]=senddata_power_param_temp[0];
 8001272:	7c3b      	ldrb	r3, [r7, #16]
 8001274:	727b      	strb	r3, [r7, #9]
	senddata_power_param[2]=senddata_power_param_temp[1];
 8001276:	7c7b      	ldrb	r3, [r7, #17]
 8001278:	72bb      	strb	r3, [r7, #10]
	senddata_power_param[3]=senddata_power_param_temp[2];
 800127a:	7cbb      	ldrb	r3, [r7, #18]
 800127c:	72fb      	strb	r3, [r7, #11]
	senddata_power_param[4]=senddata_power_param_temp[3];
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	733b      	strb	r3, [r7, #12]

	can1_send(0x010, senddata_power_param);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4619      	mov	r1, r3
 8001288:	2010      	movs	r0, #16
 800128a:	f000 fb13 	bl	80018b4 <can1_send>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <actuator_buzzer+0x38>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	22fa      	movs	r2, #250	; 0xfa
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(ontime);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fc78 	bl	8005ba8 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <actuator_buzzer+0x38>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fc70 	bl	8005ba8 <HAL_Delay>

}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200007d4 	.word	0x200007d4

080012d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00b ff75 	bl	800d1dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_ADC1_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_ADC1_Init+0xe8>)
 800131c:	2204      	movs	r2, #4
 800131e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001328:	2201      	movs	r2, #1
 800132a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_ADC1_Init+0xe8>)
 800132e:	2201      	movs	r2, #1
 8001330:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_ADC1_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	4817      	ldr	r0, [pc, #92]	; (80013bc <MX_ADC1_Init+0xe8>)
 800135e:	f004 fe67 	bl	8006030 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001368:	f003 fcb0 	bl	8004ccc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001378:	f005 fe6a 	bl	8007050 <HAL_ADCEx_MultiModeConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001382:	f003 fca3 	bl	8004ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_ADC1_Init+0xec>)
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	2306      	movs	r3, #6
 800138c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800138e:	2307      	movs	r3, #7
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001392:	237f      	movs	r3, #127	; 0x7f
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001396:	2304      	movs	r3, #4
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_ADC1_Init+0xe8>)
 80013a4:	f005 f8f8 	bl	8006598 <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013ae:	f003 fc8d 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000200 	.word	0x20000200
 80013c0:	3ef08000 	.word	0x3ef08000

080013c4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00b fefd 	bl	800d1dc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013e4:	4a31      	ldr	r2, [pc, #196]	; (80014ac <MX_ADC3_Init+0xe8>)
 80013e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800140a:	2204      	movs	r2, #4
 800140c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001410:	2200      	movs	r2, #0
 8001412:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001416:	2201      	movs	r2, #1
 8001418:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800141c:	2201      	movs	r2, #1
 800141e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800144c:	f004 fdf0 	bl	8006030 <HAL_ADC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001456:	f003 fc39 	bl	8004ccc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4810      	ldr	r0, [pc, #64]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001466:	f005 fdf3 	bl	8007050 <HAL_ADCEx_MultiModeConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001470:	f003 fc2c 	bl	8004ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_ADC3_Init+0xec>)
 8001476:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001478:	2306      	movs	r3, #6
 800147a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800147c:	2307      	movs	r3, #7
 800147e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001480:	237f      	movs	r3, #127	; 0x7f
 8001482:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001484:	2304      	movs	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001492:	f005 f881 	bl	8006598 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800149c:	f003 fc16 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000026c 	.word	0x2000026c
 80014ac:	50000400 	.word	0x50000400
 80014b0:	04300002 	.word	0x04300002

080014b4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00b fe8b 	bl	800d1dc <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014c8:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <MX_ADC5_Init+0xc4>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001500:	2201      	movs	r2, #1
 8001502:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_ADC5_Init+0xc0>)
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_ADC5_Init+0xc0>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001530:	f004 fd7e 	bl	8006030 <HAL_ADC_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800153a:	f003 fbc7 	bl	8004ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_ADC5_Init+0xc8>)
 8001540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001542:	2306      	movs	r3, #6
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001546:	2307      	movs	r3, #7
 8001548:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154a:	237f      	movs	r3, #127	; 0x7f
 800154c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800154e:	2304      	movs	r3, #4
 8001550:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_ADC5_Init+0xc0>)
 800155c:	f005 f81c 	bl	8006598 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001566:	f003 fbb1 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002d8 	.word	0x200002d8
 8001578:	50000600 	.word	0x50000600
 800157c:	08600004 	.word	0x08600004

08001580 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0a2      	sub	sp, #136	; 0x88
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	2254      	movs	r2, #84	; 0x54
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00b fe1b 	bl	800d1dc <memset>
  if(adcHandle->Instance==ADC1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ae:	d15f      	bne.n	8001670 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4618      	mov	r0, r3
 80015c2:	f008 f8d7 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015cc:	f003 fb7e 	bl	8004ccc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015d0:	4b98      	ldr	r3, [pc, #608]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a97      	ldr	r2, [pc, #604]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a91      	ldr	r2, [pc, #580]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b8f      	ldr	r3, [pc, #572]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001600:	2301      	movs	r3, #1
 8001602:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001610:	4619      	mov	r1, r3
 8001612:	4889      	ldr	r0, [pc, #548]	; (8001838 <HAL_ADC_MspInit+0x2b8>)
 8001614:	f007 f8e2 	bl	80087dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 8001618:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800161a:	4a89      	ldr	r2, [pc, #548]	; (8001840 <HAL_ADC_MspInit+0x2c0>)
 800161c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800161e:	4b87      	ldr	r3, [pc, #540]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001620:	2205      	movs	r2, #5
 8001622:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001624:	4b85      	ldr	r3, [pc, #532]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800162a:	4b84      	ldr	r3, [pc, #528]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001630:	4b82      	ldr	r3, [pc, #520]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001636:	4b81      	ldr	r3, [pc, #516]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163e:	4b7f      	ldr	r3, [pc, #508]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001644:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001646:	4b7d      	ldr	r3, [pc, #500]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001648:	2220      	movs	r2, #32
 800164a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001652:	487a      	ldr	r0, [pc, #488]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001654:	f005 ff14 	bl	8007480 <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800165e:	f003 fb35 	bl	8004ccc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a75      	ldr	r2, [pc, #468]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001666:	655a      	str	r2, [r3, #84]	; 0x54
 8001668:	4a74      	ldr	r2, [pc, #464]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800166e:	e0dc      	b.n	800182a <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_ADC_MspInit+0x2c4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d168      	bne.n	800174c <HAL_ADC_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800167a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800167e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001684:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	4618      	mov	r0, r3
 800168c:	f008 f872 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 8001696:	f003 fb19 	bl	8004ccc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800169a:	4b6b      	ldr	r3, [pc, #428]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a69      	ldr	r2, [pc, #420]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 80016a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d10b      	bne.n	80016c4 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016ac:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a60      	ldr	r2, [pc, #384]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80016dc:	2302      	movs	r3, #2
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e0:	2303      	movs	r3, #3
 80016e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ec:	4619      	mov	r1, r3
 80016ee:	4852      	ldr	r0, [pc, #328]	; (8001838 <HAL_ADC_MspInit+0x2b8>)
 80016f0:	f007 f874 	bl	80087dc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 80016f6:	4a56      	ldr	r2, [pc, #344]	; (8001850 <HAL_ADC_MspInit+0x2d0>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80016fa:	4b54      	ldr	r3, [pc, #336]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 80016fc:	2225      	movs	r2, #37	; 0x25
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001700:	4b52      	ldr	r3, [pc, #328]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001718:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001722:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001724:	2220      	movs	r2, #32
 8001726:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800172e:	4847      	ldr	r0, [pc, #284]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001730:	f005 fea6 	bl	8007480 <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 800173a:	f003 fac7 	bl	8004ccc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a42      	ldr	r2, [pc, #264]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6293      	str	r3, [r2, #40]	; 0x28
}
 800174a:	e06e      	b.n	800182a <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC5)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_ADC_MspInit+0x2d4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d169      	bne.n	800182a <HAL_ADC_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800175c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001760:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	4618      	mov	r0, r3
 8001768:	f008 f804 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_ADC_MspInit+0x1f6>
      Error_Handler();
 8001772:	f003 faab 	bl	8004ccc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a32      	ldr	r2, [pc, #200]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 800177e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10b      	bne.n	80017a0 <HAL_ADC_MspInit+0x220>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	4a29      	ldr	r2, [pc, #164]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 800178e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017be:	2303      	movs	r3, #3
 80017c0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f007 f804 	bl	80087dc <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_ADC_MspInit+0x2dc>)
 80017d8:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017dc:	2227      	movs	r2, #39	; 0x27
 80017de:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f8:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001800:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001804:	2220      	movs	r2, #32
 8001806:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001810:	f005 fe36 	bl	8007480 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_ADC_MspInit+0x29e>
      Error_Handler();
 800181a:	f003 fa57 	bl	8004ccc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6293      	str	r3, [r2, #40]	; 0x28
}
 800182a:	bf00      	nop
 800182c:	3788      	adds	r7, #136	; 0x88
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400
 800183c:	20000344 	.word	0x20000344
 8001840:	40020058 	.word	0x40020058
 8001844:	50000400 	.word	0x50000400
 8001848:	20000464 	.word	0x20000464
 800184c:	200003a4 	.word	0x200003a4
 8001850:	40020030 	.word	0x40020030
 8001854:	50000600 	.word	0x50000600
 8001858:	20000404 	.word	0x20000404
 800185c:	40020044 	.word	0x40020044

08001860 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001874:	2301      	movs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	480a      	ldr	r0, [pc, #40]	; (80018b0 <can1_init_ibis+0x50>)
 8001888:	f006 fa86 	bl	8007d98 <HAL_FDCAN_ConfigFilter>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <can1_init_ibis+0x36>
		  {
			  Error_Handler();
 8001892:	f003 fa1b 	bl	8004ccc <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <can1_init_ibis+0x50>)
 8001898:	f006 fad8 	bl	8007e4c <HAL_FDCAN_Start>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <can1_init_ibis+0x46>
 80018a2:	f003 fa13 	bl	8004ccc <Error_Handler>
}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000468 	.word	0x20000468

080018b4 <can1_send>:

void can1_send(int id, uint8_t senddata[]){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <can1_send+0x64>)
 80018c2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <can1_send+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <can1_send+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <can1_send+0x64>)
 80018d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018d6:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <can1_send+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <can1_send+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <can1_send+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <can1_send+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <can1_send+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 80018f6:	bf00      	nop
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <can1_send+0x68>)
 80018fa:	f006 fbed 	bl	80080d8 <HAL_FDCAN_GetTxFifoFreeLevel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b03      	cmp	r3, #3
 8001902:	d1f9      	bne.n	80018f8 <can1_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	4904      	ldr	r1, [pc, #16]	; (8001918 <can1_send+0x64>)
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <can1_send+0x68>)
 800190a:	f006 fac7 	bl	8007e9c <HAL_FDCAN_AddMessageToTxFifoQ>

}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000071c 	.word	0x2000071c
 800191c:	20000468 	.word	0x20000468

08001920 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001934:	2301      	movs	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4619      	mov	r1, r3
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <can2_init_ibis+0x50>)
 8001948:	f006 fa26 	bl	8007d98 <HAL_FDCAN_ConfigFilter>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <can2_init_ibis+0x36>
		  {
			  Error_Handler();
 8001952:	f003 f9bb 	bl	8004ccc <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <can2_init_ibis+0x50>)
 8001958:	f006 fa78 	bl	8007e4c <HAL_FDCAN_Start>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <can2_init_ibis+0x46>
 8001962:	f003 f9b3 	bl	8004ccc <Error_Handler>
}
 8001966:	bf00      	nop
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200004cc 	.word	0x200004cc

08001974 <can2_send>:

void can2_send(int id, uint8_t senddata[]){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <can2_send+0x64>)
 8001982:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <can2_send+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <can2_send+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <can2_send+0x64>)
 8001992:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001996:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <can2_send+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <can2_send+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <can2_send+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <can2_send+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <can2_send+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 80019b6:	bf00      	nop
 80019b8:	4808      	ldr	r0, [pc, #32]	; (80019dc <can2_send+0x68>)
 80019ba:	f006 fb8d 	bl	80080d8 <HAL_FDCAN_GetTxFifoFreeLevel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d1f9      	bne.n	80019b8 <can2_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4904      	ldr	r1, [pc, #16]	; (80019d8 <can2_send+0x64>)
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <can2_send+0x68>)
 80019ca:	f006 fa67 	bl	8007e9c <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000071c 	.word	0x2000071c
 80019dc:	200004cc 	.word	0x200004cc

080019e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <MX_DMA_Init+0x90>)
 80019e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <MX_DMA_Init+0x90>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6493      	str	r3, [r2, #72]	; 0x48
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <MX_DMA_Init+0x90>)
 80019f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <MX_DMA_Init+0x90>)
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <MX_DMA_Init+0x90>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6493      	str	r3, [r2, #72]	; 0x48
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <MX_DMA_Init+0x90>)
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2102      	movs	r1, #2
 8001a1a:	200b      	movs	r0, #11
 8001a1c:	f005 fcfb 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a20:	200b      	movs	r0, #11
 8001a22:	f005 fd12 	bl	800744a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2105      	movs	r1, #5
 8001a2a:	200c      	movs	r0, #12
 8001a2c:	f005 fcf3 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a30:	200c      	movs	r0, #12
 8001a32:	f005 fd0a 	bl	800744a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2109      	movs	r1, #9
 8001a3a:	200d      	movs	r0, #13
 8001a3c:	f005 fceb 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a40:	200d      	movs	r0, #13
 8001a42:	f005 fd02 	bl	800744a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	210a      	movs	r1, #10
 8001a4a:	200e      	movs	r0, #14
 8001a4c:	f005 fce3 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a50:	200e      	movs	r0, #14
 8001a52:	f005 fcfa 	bl	800744a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	210b      	movs	r1, #11
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f005 fcdb 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a60:	200f      	movs	r0, #15
 8001a62:	f005 fcf2 	bl	800744a <HAL_NVIC_EnableIRQ>

}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a7a:	4a20      	ldr	r2, [pc, #128]	; (8001afc <MX_FDCAN1_Init+0x88>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001aa4:	220a      	movs	r2, #10
 8001aa6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ab0:	220e      	movs	r2, #14
 8001ab2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001abc:	220a      	movs	r2, #10
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ac8:	220c      	movs	r2, #12
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ae6:	f005 fffd 	bl	8007ae4 <HAL_FDCAN_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001af0:	f003 f8ec 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000468 	.word	0x20000468
 8001afc:	40006400 	.word	0x40006400

08001b00 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b06:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <MX_FDCAN2_Init+0x88>)
 8001b08:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b30:	220a      	movs	r2, #10
 8001b32:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b3c:	220e      	movs	r2, #14
 8001b3e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b42:	2202      	movs	r2, #2
 8001b44:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 10;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b48:	220a      	movs	r2, #10
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b54:	220c      	movs	r2, #12
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b72:	f005 ffb7 	bl	8007ae4 <HAL_FDCAN_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001b7c:	f003 f8a6 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200004cc 	.word	0x200004cc
 8001b88:	40006800 	.word	0x40006800

08001b8c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0a0      	sub	sp, #128	; 0x80
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	2254      	movs	r2, #84	; 0x54
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00b fb15 	bl	800d1dc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a59      	ldr	r2, [pc, #356]	; (8001d1c <HAL_FDCAN_MspInit+0x190>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d153      	bne.n	8001c64 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f007 fdd1 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001bd8:	f003 f878 	bl	8004ccc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001be4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10b      	bne.n	8001c06 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001bee:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c30:	2309      	movs	r3, #9
 8001c32:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3e:	f006 fdcd 	bl	80087dc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2103      	movs	r1, #3
 8001c46:	2015      	movs	r0, #21
 8001c48:	f005 fbe5 	bl	8007416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c4c:	2015      	movs	r0, #21
 8001c4e:	f005 fbfc 	bl	800744a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2104      	movs	r1, #4
 8001c56:	2016      	movs	r0, #22
 8001c58:	f005 fbdd 	bl	8007416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001c5c:	2016      	movs	r0, #22
 8001c5e:	f005 fbf4 	bl	800744a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001c62:	e056      	b.n	8001d12 <HAL_FDCAN_MspInit+0x186>
  else if(fdcanHandle->Instance==FDCAN2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_FDCAN_MspInit+0x19c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d151      	bne.n	8001d12 <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7a:	f107 0318 	add.w	r3, r7, #24
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f007 fd78 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8001c8a:	f003 f81f 	bl	8004ccc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001c96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001caa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001ce2:	2309      	movs	r3, #9
 8001ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cea:	4619      	mov	r1, r3
 8001cec:	480f      	ldr	r0, [pc, #60]	; (8001d2c <HAL_FDCAN_MspInit+0x1a0>)
 8001cee:	f006 fd75 	bl	80087dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2106      	movs	r1, #6
 8001cf6:	2056      	movs	r0, #86	; 0x56
 8001cf8:	f005 fb8d 	bl	8007416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001cfc:	2056      	movs	r0, #86	; 0x56
 8001cfe:	f005 fba4 	bl	800744a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2107      	movs	r1, #7
 8001d06:	2057      	movs	r0, #87	; 0x57
 8001d08:	f005 fb85 	bl	8007416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001d0c:	2057      	movs	r0, #87	; 0x57
 8001d0e:	f005 fb9c 	bl	800744a <HAL_NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3780      	adds	r7, #128	; 0x80
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40006400 	.word	0x40006400
 8001d20:	20000530 	.word	0x20000530
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40006800 	.word	0x40006800
 8001d2c:	48000400 	.word	0x48000400

08001d30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a63      	ldr	r2, [pc, #396]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a5d      	ldr	r2, [pc, #372]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d64:	f043 0320 	orr.w	r3, r3, #32
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b55      	ldr	r3, [pc, #340]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a4b      	ldr	r2, [pc, #300]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f246 0121 	movw	r1, #24609	; 0x6021
 8001dc4:	4845      	ldr	r0, [pc, #276]	; (8001edc <MX_GPIO_Init+0x1ac>)
 8001dc6:	f006 fea3 	bl	8008b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f248 0110 	movw	r1, #32784	; 0x8010
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f006 fe9c 	bl	8008b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f244 4184 	movw	r1, #17540	; 0x4484
 8001dde:	4840      	ldr	r0, [pc, #256]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001de0:	f006 fe96 	bl	8008b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
 8001de4:	f246 0321 	movw	r3, #24609	; 0x6021
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4837      	ldr	r0, [pc, #220]	; (8001edc <MX_GPIO_Init+0x1ac>)
 8001dfe:	f006 fced 	bl	80087dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001e02:	f248 0310 	movw	r3, #32784	; 0x8010
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f006 fcdd 	bl	80087dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e22:	2310      	movs	r3, #16
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4829      	ldr	r0, [pc, #164]	; (8001edc <MX_GPIO_Init+0x1ac>)
 8001e36:	f006 fcd1 	bl	80087dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001e3a:	f244 4384 	movw	r3, #17540	; 0x4484
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001e54:	f006 fcc2 	bl	80087dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f006 fcb4 	bl	80087dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e74:	2304      	movs	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <MX_GPIO_Init+0x1b4>)
 8001e88:	f006 fca8 	bl	80087dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e8c:	2360      	movs	r3, #96	; 0x60
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001ea0:	f006 fc9c 	bl	80087dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001ebc:	f006 fc8e 	bl	80087dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2017      	movs	r0, #23
 8001ec6:	f005 faa6 	bl	8007416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eca:	2017      	movs	r0, #23
 8001ecc:	f005 fabd 	bl	800744a <HAL_NVIC_EnableIRQ>

}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48000c00 	.word	0x48000c00

08001ee8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <__NVIC_SystemReset+0x24>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001efa:	4904      	ldr	r1, [pc, #16]	; (8001f0c <__NVIC_SystemReset+0x24>)
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_SystemReset+0x28>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f02:	f3bf 8f4f 	dsb	sy
}
 8001f06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <__NVIC_SystemReset+0x20>
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	05fa0004 	.word	0x05fa0004

08001f14 <ICM20602_writeByte>:
int Gscale = GFS_1000DPS;



void ICM20602_writeByte(uint8_t reg, uint8_t data)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
	uint8_t send_data[1];
	uint8_t RxBuffer[1];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2110      	movs	r1, #16
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2c:	f006 fdf0 	bl	8008b10 <HAL_GPIO_WritePin>

	send_data[0]=reg & 0x7F;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f3a:	f107 0208 	add.w	r2, r7, #8
 8001f3e:	f107 010c 	add.w	r1, r7, #12
 8001f42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <ICM20602_writeByte+0x6c>)
 8001f4c:	f007 ff0b 	bl	8009d66 <HAL_SPI_TransmitReceive>

	send_data[0]=data;
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	f107 010c 	add.w	r1, r7, #12
 8001f5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	4806      	ldr	r0, [pc, #24]	; (8001f80 <ICM20602_writeByte+0x6c>)
 8001f66:	f007 fefe 	bl	8009d66 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f006 fdcd 	bl	8008b10 <HAL_GPIO_WritePin>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000076c 	.word	0x2000076c

08001f84 <ICM20602_readByte>:

uint8_t ICM20602_readByte(uint8_t reg)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    uint8_t send_data[1];
    uint8_t RxBuffer[1];
    
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2110      	movs	r1, #16
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f006 fdbb 	bl	8008b10 <HAL_GPIO_WritePin>

    send_data[0]= reg | 0x80;
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fa4:	f107 0208 	add.w	r2, r7, #8
 8001fa8:	f107 010c 	add.w	r1, r7, #12
 8001fac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <ICM20602_readByte+0x6c>)
 8001fb6:	f007 fed6 	bl	8009d66 <HAL_SPI_TransmitReceive>

    send_data[0]=0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fbe:	f107 0208 	add.w	r2, r7, #8
 8001fc2:	f107 010c 	add.w	r1, r7, #12
 8001fc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <ICM20602_readByte+0x6c>)
 8001fd0:	f007 fec9 	bl	8009d66 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001fd4:	7a3b      	ldrb	r3, [r7, #8]
 8001fd6:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2110      	movs	r1, #16
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe0:	f006 fd96 	bl	8008b10 <HAL_GPIO_WritePin>
    
    return (val);
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000076c 	.word	0x2000076c

08001ff4 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <ICM20602_init+0x40>)
 8001ffe:	f006 fd87 	bl	8008b10 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
 8002002:	2100      	movs	r1, #0
 8002004:	206b      	movs	r0, #107	; 0x6b
 8002006:	f7ff ff85 	bl	8001f14 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
 800200a:	2107      	movs	r1, #7
 800200c:	2019      	movs	r0, #25
 800200e:	f7ff ff81 	bl	8001f14 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03
 8002012:	2101      	movs	r1, #1
 8002014:	201a      	movs	r0, #26
 8002016:	f7ff ff7d 	bl	8001f14 <ICM20602_writeByte>

	ICM20602_setAccRange(Ascale);
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <ICM20602_init+0x44>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f8b6 	bl	8002190 <ICM20602_setAccRange>
	ICM20602_setGyroRange(Gscale);
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <ICM20602_init+0x48>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f8eb 	bl	8002204 <ICM20602_setGyroRange>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	48000800 	.word	0x48000800
 8002038:	200005a8 	.word	0x200005a8
 800203c:	20000004 	.word	0x20000004

08002040 <ICM20602_getAccXvalue>:

int16_t ICM20602_getAccXvalue()
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_L); // read Accelerometer X_Low  value
 8002046:	203c      	movs	r0, #60	; 0x3c
 8002048:	f7ff ff9c 	bl	8001f84 <ICM20602_readByte>
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_H); // read Accelerometer X_High value
 8002050:	203b      	movs	r0, #59	; 0x3b
 8002052:	f7ff ff97 	bl	8001f84 <ICM20602_readByte>
 8002056:	4603      	mov	r3, r0
 8002058:	71bb      	strb	r3, [r7, #6]
    return((HiByte<<8) | LoByte);
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <ICM20602_getAccYvalue>:

int16_t ICM20602_getAccYvalue()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_L); // read Accelerometer X_Low  value
 8002076:	203e      	movs	r0, #62	; 0x3e
 8002078:	f7ff ff84 	bl	8001f84 <ICM20602_readByte>
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_H); // read Accelerometer X_High value
 8002080:	203d      	movs	r0, #61	; 0x3d
 8002082:	f7ff ff7f 	bl	8001f84 <ICM20602_readByte>
 8002086:	4603      	mov	r3, r0
 8002088:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	b21b      	sxth	r3, r3
 8002094:	4313      	orrs	r3, r2
 8002096:	b21b      	sxth	r3, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <ICM20602_getAccZvalue>:

int16_t ICM20602_getAccZvalue()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_L); // read Accelerometer X_Low  value
 80020a6:	2040      	movs	r0, #64	; 0x40
 80020a8:	f7ff ff6c 	bl	8001f84 <ICM20602_readByte>
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_H); // read Accelerometer X_High value
 80020b0:	203f      	movs	r0, #63	; 0x3f
 80020b2:	f7ff ff67 	bl	8001f84 <ICM20602_readByte>
 80020b6:	4603      	mov	r3, r0
 80020b8:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	b21a      	sxth	r2, r3
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b21b      	sxth	r3, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <ICM20602_getGyrXvalue>:

int16_t ICM20602_getGyrXvalue()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_XOUT_L); // read Accelerometer X_Low  value
 80020d6:	2044      	movs	r0, #68	; 0x44
 80020d8:	f7ff ff54 	bl	8001f84 <ICM20602_readByte>
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_XOUT_H); // read Accelerometer X_High value
 80020e0:	2043      	movs	r0, #67	; 0x43
 80020e2:	f7ff ff4f 	bl	8001f84 <ICM20602_readByte>
 80020e6:	4603      	mov	r3, r0
 80020e8:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b21b      	sxth	r3, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <ICM20602_getGyrYvalue>:

int16_t ICM20602_getGyrYvalue()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_YOUT_L); // read Accelerometer X_Low  value
 8002106:	2046      	movs	r0, #70	; 0x46
 8002108:	f7ff ff3c 	bl	8001f84 <ICM20602_readByte>
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_YOUT_H); // read Accelerometer X_High value
 8002110:	2045      	movs	r0, #69	; 0x45
 8002112:	f7ff ff37 	bl	8001f84 <ICM20602_readByte>
 8002116:	4603      	mov	r3, r0
 8002118:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800211a:	79bb      	ldrb	r3, [r7, #6]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21a      	sxth	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	b21b      	sxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b21b      	sxth	r3, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <ICM20602_getGyrZvalue>:

int16_t ICM20602_getGyrZvalue()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_L); // read Accelerometer X_Low  value
 8002136:	2048      	movs	r0, #72	; 0x48
 8002138:	f7ff ff24 	bl	8001f84 <ICM20602_readByte>
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_H); // read Accelerometer X_High value
 8002140:	2047      	movs	r0, #71	; 0x47
 8002142:	f7ff ff1f 	bl	8001f84 <ICM20602_readByte>
 8002146:	4603      	mov	r3, r0
 8002148:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21b      	sxth	r3, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <ICM20602_getIMUTemp>:

int16_t ICM20602_getIMUTemp()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_TEMP_OUT_L); // read Accelerometer X_Low  value
 8002166:	2042      	movs	r0, #66	; 0x42
 8002168:	f7ff ff0c 	bl	8001f84 <ICM20602_readByte>
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_TEMP_OUT_H); // read Accelerometer X_High value
 8002170:	2041      	movs	r0, #65	; 0x41
 8002172:	f7ff ff07 	bl	8001f84 <ICM20602_readByte>
 8002176:	4603      	mov	r3, r0
 8002178:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	b21b      	sxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b21b      	sxth	r3, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <ICM20602_setAccRange>:


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    switch(Ascale)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d81e      	bhi.n	80021dc <ICM20602_setAccRange+0x4c>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <ICM20602_setAccRange+0x14>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bf 	.word	0x080021bf
 80021ac:	080021c9 	.word	0x080021c9
 80021b0:	080021d3 	.word	0x080021d3
    {
        case AFS_2G:
            aRes = 2.0/32768.0;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021b6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80021ba:	601a      	str	r2, [r3, #0]
            break;
 80021bc:	e00e      	b.n	80021dc <ICM20602_setAccRange+0x4c>
        case AFS_4G:
            aRes = 4.0/32768.0;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021c0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80021c4:	601a      	str	r2, [r3, #0]
            break;
 80021c6:	e009      	b.n	80021dc <ICM20602_setAccRange+0x4c>
        case AFS_8G:
            aRes = 8.0/32768.0;
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021ca:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80021ce:	601a      	str	r2, [r3, #0]
            break;
 80021d0:	e004      	b.n	80021dc <ICM20602_setAccRange+0x4c>
        case AFS_16G:
            aRes = 16.0/32768.0;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021d4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80021d8:	601a      	str	r2, [r3, #0]
            break;         
 80021da:	bf00      	nop
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	201c      	movs	r0, #28
 80021e8:	f7ff fe94 	bl	8001f14 <ICM20602_writeByte>
    
    return aRes;
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	ee07 3a90 	vmov	s15, r3
}
 80021f4:	eeb0 0a67 	vmov.f32	s0, s15
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200005a0 	.word	0x200005a0

08002204 <ICM20602_setGyroRange>:

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    switch(Gscale)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d81a      	bhi.n	8002248 <ICM20602_setGyroRange+0x44>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <ICM20602_setGyroRange+0x14>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	08002231 	.word	0x08002231
 8002220:	08002239 	.word	0x08002239
 8002224:	08002241 	.word	0x08002241
    {
        case GFS_250DPS:
            gRes = 250.0/32768.0;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <ICM20602_setGyroRange+0x68>)
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <ICM20602_setGyroRange+0x6c>)
 800222c:	601a      	str	r2, [r3, #0]
            break;
 800222e:	e00b      	b.n	8002248 <ICM20602_setGyroRange+0x44>
        case GFS_500DPS:
            gRes = 500.0/32768.0;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <ICM20602_setGyroRange+0x68>)
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <ICM20602_setGyroRange+0x70>)
 8002234:	601a      	str	r2, [r3, #0]
            break;
 8002236:	e007      	b.n	8002248 <ICM20602_setGyroRange+0x44>
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <ICM20602_setGyroRange+0x68>)
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <ICM20602_setGyroRange+0x74>)
 800223c:	601a      	str	r2, [r3, #0]
            break;
 800223e:	e003      	b.n	8002248 <ICM20602_setGyroRange+0x44>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <ICM20602_setGyroRange+0x68>)
 8002242:	4a0e      	ldr	r2, [pc, #56]	; (800227c <ICM20602_setGyroRange+0x78>)
 8002244:	601a      	str	r2, [r3, #0]
            break;
 8002246:	bf00      	nop
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	201b      	movs	r0, #27
 8002254:	f7ff fe5e 	bl	8001f14 <ICM20602_writeByte>
    
    return gRes;
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <ICM20602_setGyroRange+0x68>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	ee07 3a90 	vmov	s15, r3
}
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200005a4 	.word	0x200005a4
 8002270:	3bfa0000 	.word	0x3bfa0000
 8002274:	3c7a0000 	.word	0x3c7a0000
 8002278:	3cfa0000 	.word	0x3cfa0000
 800227c:	3d7a0000 	.word	0x3d7a0000

08002280 <ICM20602_read_IMU_data>:
    Gscale = (Gscale & 0x18) >> 3;

    return Gscale;
}

void ICM20602_read_IMU_data() {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002284:	f7ff fedc 	bl	8002040 <ICM20602_getAccXvalue>
 8002288:	4603      	mov	r3, r0
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002292:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002490 <ICM20602_read_IMU_data+0x210>
 8002296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800229a:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <ICM20602_read_IMU_data+0x214>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a4:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <ICM20602_read_IMU_data+0x218>)
 80022a6:	edc3 7a00 	vstr	s15, [r3]
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80022aa:	f7ff fee1 	bl	8002070 <ICM20602_getAccYvalue>
 80022ae:	4603      	mov	r3, r0
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002490 <ICM20602_read_IMU_data+0x210>
 80022bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022c0:	4b74      	ldr	r3, [pc, #464]	; (8002494 <ICM20602_read_IMU_data+0x214>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	4b73      	ldr	r3, [pc, #460]	; (8002498 <ICM20602_read_IMU_data+0x218>)
 80022cc:	edc3 7a01 	vstr	s15, [r3, #4]
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80022d0:	f7ff fee6 	bl	80020a0 <ICM20602_getAccZvalue>
 80022d4:	4603      	mov	r3, r0
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022de:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002490 <ICM20602_read_IMU_data+0x210>
 80022e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022e6:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <ICM20602_read_IMU_data+0x214>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	4b69      	ldr	r3, [pc, #420]	; (8002498 <ICM20602_read_IMU_data+0x218>)
 80022f2:	edc3 7a02 	vstr	s15, [r3, #8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80022f6:	f7ff feeb 	bl	80020d0 <ICM20602_getGyrXvalue>
 80022fa:	4603      	mov	r3, r0
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002304:	4b65      	ldr	r3, [pc, #404]	; (800249c <ICM20602_read_IMU_data+0x21c>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 8002310:	edc3 7a00 	vstr	s15, [r3]
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002314:	f7ff fef4 	bl	8002100 <ICM20602_getGyrYvalue>
 8002318:	4603      	mov	r3, r0
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002322:	4b5e      	ldr	r3, [pc, #376]	; (800249c <ICM20602_read_IMU_data+0x21c>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 800232e:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002332:	f7ff fefd 	bl	8002130 <ICM20602_getGyrZvalue>
 8002336:	4603      	mov	r3, r0
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002340:	4b56      	ldr	r3, [pc, #344]	; (800249c <ICM20602_read_IMU_data+0x21c>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234a:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 800234c:	edc3 7a02 	vstr	s15, [r3, #8]

    ICM20602_medianFilter();
 8002350:	f000 f92c 	bl	80025ac <ICM20602_medianFilter>

    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002354:	f7ff ff04 	bl	8002160 <ICM20602_getIMUTemp>
 8002358:	4603      	mov	r3, r0
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002362:	eddf 6a50 	vldr	s13, [pc, #320]	; 80024a4 <ICM20602_read_IMU_data+0x224>
 8002366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800236e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <ICM20602_read_IMU_data+0x228>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
    ICM20602_IMU_compensate();
 8002378:	f000 fd46 	bl	8002e08 <ICM20602_IMU_compensate>

    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <ICM20602_read_IMU_data+0x234>)
 800238a:	edd3 6a00 	vldr	s13, [r3]
 800238e:	eeb0 1a66 	vmov.f32	s2, s13
 8002392:	eef0 0a47 	vmov.f32	s1, s14
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	f000 f893 	bl	80024c4 <ICM20602_integral>
 800239e:	eef0 7a40 	vmov.f32	s15, s0
 80023a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <ICM20602_read_IMU_data+0x238>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <ICM20602_read_IMU_data+0x238>)
 80023b2:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*2;
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 80023b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 80023be:	ed93 7a01 	vldr	s14, [r3, #4]
 80023c2:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <ICM20602_read_IMU_data+0x234>)
 80023c4:	edd3 6a00 	vldr	s13, [r3]
 80023c8:	eeb0 1a66 	vmov.f32	s2, s13
 80023cc:	eef0 0a47 	vmov.f32	s1, s14
 80023d0:	eeb0 0a67 	vmov.f32	s0, s15
 80023d4:	f000 f876 	bl	80024c4 <ICM20602_integral>
 80023d8:	eef0 7a40 	vmov.f32	s15, s0
 80023dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <ICM20602_read_IMU_data+0x23c>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <ICM20602_read_IMU_data+0x23c>)
 80023ec:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*2;
 80023f0:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 80023f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023f6:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 80023f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <ICM20602_read_IMU_data+0x234>)
 80023fe:	edd3 6a00 	vldr	s13, [r3]
 8002402:	eeb0 1a66 	vmov.f32	s2, s13
 8002406:	eef0 0a47 	vmov.f32	s1, s14
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f000 f859 	bl	80024c4 <ICM20602_integral>
 8002412:	eef0 7a40 	vmov.f32	s15, s0
 8002416:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800241a:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <ICM20602_read_IMU_data+0x240>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <ICM20602_read_IMU_data+0x240>)
 8002426:	edc3 7a00 	vstr	s15, [r3]

    pitchAngle = ICM20602_normAngle(pitchAngle);
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <ICM20602_read_IMU_data+0x238>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eeb0 0a67 	vmov.f32	s0, s15
 8002434:	f000 f880 	bl	8002538 <ICM20602_normAngle>
 8002438:	eef0 7a40 	vmov.f32	s15, s0
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <ICM20602_read_IMU_data+0x238>)
 800243e:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = ICM20602_normAngle(rollAngle);
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <ICM20602_read_IMU_data+0x23c>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eeb0 0a67 	vmov.f32	s0, s15
 800244c:	f000 f874 	bl	8002538 <ICM20602_normAngle>
 8002450:	eef0 7a40 	vmov.f32	s15, s0
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <ICM20602_read_IMU_data+0x23c>)
 8002456:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = ICM20602_normAngle(yawAngle);
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <ICM20602_read_IMU_data+0x240>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eeb0 0a67 	vmov.f32	s0, s15
 8002464:	f000 f868 	bl	8002538 <ICM20602_normAngle>
 8002468:	eef0 7a40 	vmov.f32	s15, s0
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <ICM20602_read_IMU_data+0x240>)
 800246e:	edc3 7a00 	vstr	s15, [r3]

    gyro_prv[0] = gyro_comp[0];
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 8002478:	6013      	str	r3, [r2, #0]
    gyro_prv[1] = gyro_comp[1];
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 8002480:	6053      	str	r3, [r2, #4]
    gyro_prv[2] = gyro_comp[2];
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 8002488:	6093      	str	r3, [r2, #8]
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	411ce80a 	.word	0x411ce80a
 8002494:	200005a0 	.word	0x200005a0
 8002498:	200005e4 	.word	0x200005e4
 800249c:	200005a4 	.word	0x200005a4
 80024a0:	200005f0 	.word	0x200005f0
 80024a4:	43a36666 	.word	0x43a36666
 80024a8:	20000614 	.word	0x20000614
 80024ac:	20000608 	.word	0x20000608
 80024b0:	20000534 	.word	0x20000534
 80024b4:	20000000 	.word	0x20000000
 80024b8:	200005d8 	.word	0x200005d8
 80024bc:	200005dc 	.word	0x200005dc
 80024c0:	200005e0 	.word	0x200005e0

080024c4 <ICM20602_integral>:



float ICM20602_integral(float val, float val_prv, float dt)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80024ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80024d2:	ed87 1a01 	vstr	s2, [r7, #4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80024da:	edd7 7a02 	vldr	s15, [r7, #8]
 80024de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80024ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024f2:	eef0 7a66 	vmov.f32	s15, s13
}
 80024f6:	eeb0 0a67 	vmov.f32	s0, s15
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <ICM20602_clearAngle>:

void ICM20602_clearAngle(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
    pitchAngle = 0.0f;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <ICM20602_clearAngle+0x28>)
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    rollAngle  = 0.0f;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <ICM20602_clearAngle+0x2c>)
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    yawAngle   = 0.0f;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <ICM20602_clearAngle+0x30>)
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200005d8 	.word	0x200005d8
 8002530:	200005dc 	.word	0x200005dc
 8002534:	200005e0 	.word	0x200005e0

08002538 <ICM20602_normAngle>:
    rollAngle  = roll;
    yawAngle   = yaw;
}

float ICM20602_normAngle(float deg)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	ed87 0a01 	vstr	s0, [r7, #4]
    while (deg < -180.0f) deg += 360.0f;
 8002542:	e007      	b.n	8002554 <ICM20602_normAngle+0x1c>
 8002544:	edd7 7a01 	vldr	s15, [r7, #4]
 8002548:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025a0 <ICM20602_normAngle+0x68>
 800254c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002550:	edc7 7a01 	vstr	s15, [r7, #4]
 8002554:	edd7 7a01 	vldr	s15, [r7, #4]
 8002558:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80025a4 <ICM20602_normAngle+0x6c>
 800255c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	d4ee      	bmi.n	8002544 <ICM20602_normAngle+0xc>
    while (deg >= 180.0f) deg -= 360.0f;
 8002566:	e007      	b.n	8002578 <ICM20602_normAngle+0x40>
 8002568:	edd7 7a01 	vldr	s15, [r7, #4]
 800256c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025a0 <ICM20602_normAngle+0x68>
 8002570:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002574:	edc7 7a01 	vstr	s15, [r7, #4]
 8002578:	edd7 7a01 	vldr	s15, [r7, #4]
 800257c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80025a8 <ICM20602_normAngle+0x70>
 8002580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	daee      	bge.n	8002568 <ICM20602_normAngle+0x30>

    return deg;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	ee07 3a90 	vmov	s15, r3
}
 8002590:	eeb0 0a67 	vmov.f32	s0, s15
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	43b40000 	.word	0x43b40000
 80025a4:	c3340000 	.word	0xc3340000
 80025a8:	43340000 	.word	0x43340000

080025ac <ICM20602_medianFilter>:
    return yawAngle;
}

// filter length : 3-only
void ICM20602_medianFilter(void)
{
 80025ac:	b490      	push	{r4, r7}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {
 80025b2:	2300      	movs	r3, #0
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	e123      	b.n	8002800 <ICM20602_medianFilter+0x254>

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 80025b8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025c0:	4895      	ldr	r0, [pc, #596]	; (8002818 <ICM20602_medianFilter+0x26c>)
 80025c2:	460b      	mov	r3, r1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	440b      	add	r3, r1
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4403      	add	r3, r0
 80025cc:	3304      	adds	r3, #4
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	4891      	ldr	r0, [pc, #580]	; (8002818 <ICM20602_medianFilter+0x26c>)
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4403      	add	r3, r0
 80025dc:	3308      	adds	r3, #8
 80025de:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 80025e0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025e8:	488b      	ldr	r0, [pc, #556]	; (8002818 <ICM20602_medianFilter+0x26c>)
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4403      	add	r3, r0
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	4888      	ldr	r0, [pc, #544]	; (8002818 <ICM20602_medianFilter+0x26c>)
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4403      	add	r3, r0
 8002602:	3304      	adds	r3, #4
 8002604:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][0] = gyro[i];
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800260e:	4983      	ldr	r1, [pc, #524]	; (800281c <ICM20602_medianFilter+0x270>)
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	4880      	ldr	r0, [pc, #512]	; (8002818 <ICM20602_medianFilter+0x26c>)
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4403      	add	r3, r0
 8002622:	6019      	str	r1, [r3, #0]

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8002624:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002628:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800262c:	487c      	ldr	r0, [pc, #496]	; (8002820 <ICM20602_medianFilter+0x274>)
 800262e:	460b      	mov	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	440b      	add	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4403      	add	r3, r0
 8002638:	3304      	adds	r3, #4
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	4878      	ldr	r0, [pc, #480]	; (8002820 <ICM20602_medianFilter+0x274>)
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4403      	add	r3, r0
 8002648:	3308      	adds	r3, #8
 800264a:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 800264c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002650:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002654:	4872      	ldr	r0, [pc, #456]	; (8002820 <ICM20602_medianFilter+0x274>)
 8002656:	460b      	mov	r3, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4403      	add	r3, r0
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	486f      	ldr	r0, [pc, #444]	; (8002820 <ICM20602_medianFilter+0x274>)
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4403      	add	r3, r0
 800266e:	3304      	adds	r3, #4
 8002670:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][0]  = acc[i];
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800267a:	496a      	ldr	r1, [pc, #424]	; (8002824 <ICM20602_medianFilter+0x278>)
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	4867      	ldr	r0, [pc, #412]	; (8002820 <ICM20602_medianFilter+0x274>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4403      	add	r3, r0
 800268e:	6019      	str	r1, [r3, #0]

    	for (j = 0; j < 3; j ++){
 8002690:	2300      	movs	r3, #0
 8002692:	71bb      	strb	r3, [r7, #6]
 8002694:	e029      	b.n	80026ea <ICM20602_medianFilter+0x13e>
    		gyro_tmp[j] = gyro_mdat[i][j];
 8002696:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800269a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 800269e:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026a2:	4c5d      	ldr	r4, [pc, #372]	; (8002818 <ICM20602_medianFilter+0x26c>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	4403      	add	r3, r0
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4423      	add	r3, r4
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	485d      	ldr	r0, [pc, #372]	; (8002828 <ICM20602_medianFilter+0x27c>)
 80026b4:	008b      	lsls	r3, r1, #2
 80026b6:	4403      	add	r3, r0
 80026b8:	601a      	str	r2, [r3, #0]
    		acc_tmp[j]  = acc_mdat[i][j];
 80026ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026be:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026c2:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026c6:	4c56      	ldr	r4, [pc, #344]	; (8002820 <ICM20602_medianFilter+0x274>)
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	4403      	add	r3, r0
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4423      	add	r3, r4
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4855      	ldr	r0, [pc, #340]	; (800282c <ICM20602_medianFilter+0x280>)
 80026d8:	008b      	lsls	r3, r1, #2
 80026da:	4403      	add	r3, r0
 80026dc:	601a      	str	r2, [r3, #0]
    	for (j = 0; j < 3; j ++){
 80026de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	71bb      	strb	r3, [r7, #6]
 80026ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	ddd1      	ble.n	8002696 <ICM20602_medianFilter+0xea>
    	}

    	a = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	717b      	strb	r3, [r7, #5]
    	b = 2;
 80026f6:	2302      	movs	r3, #2
 80026f8:	713b      	strb	r3, [r7, #4]

    	for (j = 2; j >= 0; j--) {
 80026fa:	2302      	movs	r3, #2
 80026fc:	71bb      	strb	r3, [r7, #6]
 80026fe:	e065      	b.n	80027cc <ICM20602_medianFilter+0x220>
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8002700:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002704:	4a48      	ldr	r2, [pc, #288]	; (8002828 <ICM20602_medianFilter+0x27c>)
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	ed93 7a00 	vldr	s14, [r3]
 800270e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002712:	4a45      	ldr	r2, [pc, #276]	; (8002828 <ICM20602_medianFilter+0x27c>)
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	dd19      	ble.n	800275a <ICM20602_medianFilter+0x1ae>
    			tmp         = gyro_tmp[a];
 8002726:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800272a:	4a3f      	ldr	r2, [pc, #252]	; (8002828 <ICM20602_medianFilter+0x27c>)
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	603b      	str	r3, [r7, #0]
    			gyro_tmp[a] = gyro_tmp[b];
 8002734:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8002738:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800273c:	493a      	ldr	r1, [pc, #232]	; (8002828 <ICM20602_medianFilter+0x27c>)
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	440a      	add	r2, r1
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4938      	ldr	r1, [pc, #224]	; (8002828 <ICM20602_medianFilter+0x27c>)
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	601a      	str	r2, [r3, #0]
    			gyro_tmp[b] = tmp;
 800274c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002750:	4a35      	ldr	r2, [pc, #212]	; (8002828 <ICM20602_medianFilter+0x27c>)
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	601a      	str	r2, [r3, #0]
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 800275a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800275e:	4a33      	ldr	r2, [pc, #204]	; (800282c <ICM20602_medianFilter+0x280>)
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800276c:	4a2f      	ldr	r2, [pc, #188]	; (800282c <ICM20602_medianFilter+0x280>)
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	dd19      	ble.n	80027b4 <ICM20602_medianFilter+0x208>
				tmp         = acc_tmp[a];
 8002780:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002784:	4a29      	ldr	r2, [pc, #164]	; (800282c <ICM20602_medianFilter+0x280>)
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	603b      	str	r3, [r7, #0]
				acc_tmp[a]  = acc_tmp[b];
 800278e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8002792:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002796:	4925      	ldr	r1, [pc, #148]	; (800282c <ICM20602_medianFilter+0x280>)
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	440a      	add	r2, r1
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	4923      	ldr	r1, [pc, #140]	; (800282c <ICM20602_medianFilter+0x280>)
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	601a      	str	r2, [r3, #0]
				acc_tmp[b]  = tmp;
 80027a6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <ICM20602_medianFilter+0x280>)
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	601a      	str	r2, [r3, #0]
			}
    		a = j-1;
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	717b      	strb	r3, [r7, #5]
    		b = j;
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	713b      	strb	r3, [r7, #4]
    	for (j = 2; j >= 0; j--) {
 80027c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	71bb      	strb	r3, [r7, #6]
 80027cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da95      	bge.n	8002700 <ICM20602_medianFilter+0x154>
    	}
    	gyro[i] = gyro_tmp[1];
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4a13      	ldr	r2, [pc, #76]	; (8002828 <ICM20602_medianFilter+0x27c>)
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	490f      	ldr	r1, [pc, #60]	; (800281c <ICM20602_medianFilter+0x270>)
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	601a      	str	r2, [r3, #0]
    	acc[i]  = acc_tmp[1];
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4a10      	ldr	r2, [pc, #64]	; (800282c <ICM20602_medianFilter+0x280>)
 80027ea:	6852      	ldr	r2, [r2, #4]
 80027ec:	490d      	ldr	r1, [pc, #52]	; (8002824 <ICM20602_medianFilter+0x278>)
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i ++) {
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	71fb      	strb	r3, [r7, #7]
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	2b02      	cmp	r3, #2
 8002806:	f77f aed7 	ble.w	80025b8 <ICM20602_medianFilter+0xc>
    }
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bc90      	pop	{r4, r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000540 	.word	0x20000540
 800281c:	200005f0 	.word	0x200005f0
 8002820:	20000564 	.word	0x20000564
 8002824:	200005e4 	.word	0x200005e4
 8002828:	20000588 	.word	0x20000588
 800282c:	20000594 	.word	0x20000594

08002830 <ICM20602_IMU_calibration2>:
    	gyro_off[j] = gyro_sum[j] / cal_len;
    }
}

void ICM20602_IMU_calibration2(void)
{
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8002838:	af00      	add	r7, sp, #0
	int i,j;
    double cal_len = 0.0f;
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
    double acc_sum[3]={0};
 8002846:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	615a      	str	r2, [r3, #20]
    double gyro_sum[3]={0};
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
 8002868:	615a      	str	r2, [r3, #20]

    double acc_ave[3][10] = {{0.0}};
 800286a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800286e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002872:	4618      	mov	r0, r3
 8002874:	23f0      	movs	r3, #240	; 0xf0
 8002876:	461a      	mov	r2, r3
 8002878:	2100      	movs	r1, #0
 800287a:	f00a fcaf 	bl	800d1dc <memset>
    double gyro_ave[3][10] = {{0.0}};
 800287e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002882:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002886:	4618      	mov	r0, r3
 8002888:	23f0      	movs	r3, #240	; 0xf0
 800288a:	461a      	mov	r2, r3
 800288c:	2100      	movs	r1, #0
 800288e:	f00a fca5 	bl	800d1dc <memset>

    printf("put the IMU still!\n");
 8002892:	4886      	ldr	r0, [pc, #536]	; (8002aac <ICM20602_IMU_calibration2+0x27c>)
 8002894:	f00b f99a 	bl	800dbcc <puts>
    HAL_Delay(1000);
 8002898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289c:	f003 f984 	bl	8005ba8 <HAL_Delay>

    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80028a0:	e183      	b.n	8002baa <ICM20602_IMU_calibration2+0x37a>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
		|| cal_len < 500.0
		){

    	printf("cal_len=%f\r\n",cal_len);
 80028a2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80028a6:	4882      	ldr	r0, [pc, #520]	; (8002ab0 <ICM20602_IMU_calibration2+0x280>)
 80028a8:	f00b f90a 	bl	800dac0 <iprintf>
    	for(j = 0; j < 3; j++){
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80028b2:	e15f      	b.n	8002b74 <ICM20602_IMU_calibration2+0x344>
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028b4:	f7ff fbc4 	bl	8002040 <ICM20602_getAccXvalue>
 80028b8:	4603      	mov	r3, r0
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002ab4 <ICM20602_IMU_calibration2+0x284>
 80028c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028ca:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <ICM20602_IMU_calibration2+0x288>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d4:	4b79      	ldr	r3, [pc, #484]	; (8002abc <ICM20602_IMU_calibration2+0x28c>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028da:	f7ff fbc9 	bl	8002070 <ICM20602_getAccYvalue>
 80028de:	4603      	mov	r3, r0
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002ab4 <ICM20602_IMU_calibration2+0x284>
 80028ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028f0:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <ICM20602_IMU_calibration2+0x288>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fa:	4b70      	ldr	r3, [pc, #448]	; (8002abc <ICM20602_IMU_calibration2+0x28c>)
 80028fc:	edc3 7a01 	vstr	s15, [r3, #4]
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002900:	f7ff fbce 	bl	80020a0 <ICM20602_getAccZvalue>
 8002904:	4603      	mov	r3, r0
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002ab4 <ICM20602_IMU_calibration2+0x284>
 8002912:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002916:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <ICM20602_IMU_calibration2+0x288>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	4b66      	ldr	r3, [pc, #408]	; (8002abc <ICM20602_IMU_calibration2+0x28c>)
 8002922:	edc3 7a02 	vstr	s15, [r3, #8]
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002926:	f7ff fbd3 	bl	80020d0 <ICM20602_getGyrXvalue>
 800292a:	4603      	mov	r3, r0
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002934:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <ICM20602_IMU_calibration2+0x290>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <ICM20602_IMU_calibration2+0x294>)
 8002940:	edc3 7a00 	vstr	s15, [r3]
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002944:	f7ff fbdc 	bl	8002100 <ICM20602_getGyrYvalue>
 8002948:	4603      	mov	r3, r0
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002952:	4b5b      	ldr	r3, [pc, #364]	; (8002ac0 <ICM20602_IMU_calibration2+0x290>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <ICM20602_IMU_calibration2+0x294>)
 800295e:	edc3 7a01 	vstr	s15, [r3, #4]
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002962:	f7ff fbe5 	bl	8002130 <ICM20602_getGyrZvalue>
 8002966:	4603      	mov	r3, r0
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <ICM20602_IMU_calibration2+0x290>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <ICM20602_IMU_calibration2+0x294>)
 800297c:	edc3 7a02 	vstr	s15, [r3, #8]

    		acc_sum[j]  += acc[j];
 8002980:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800298a:	f107 0220 	add.w	r2, r7, #32
 800298e:	4413      	add	r3, r2
 8002990:	3b28      	subs	r3, #40	; 0x28
 8002992:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002996:	4a49      	ldr	r2, [pc, #292]	; (8002abc <ICM20602_IMU_calibration2+0x28c>)
 8002998:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fdf8 	bl	8000598 <__aeabi_f2d>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fc94 	bl	80002dc <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029c6:	f107 0220 	add.w	r2, r7, #32
 80029ca:	4413      	add	r3, r2
 80029cc:	3b28      	subs	r3, #40	; 0x28
 80029ce:	e9c3 0100 	strd	r0, r1, [r3]
    		gyro_sum[j] += gyro[j];
 80029d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029dc:	f107 0220 	add.w	r2, r7, #32
 80029e0:	4413      	add	r3, r2
 80029e2:	3b40      	subs	r3, #64	; 0x40
 80029e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029e8:	4a36      	ldr	r2, [pc, #216]	; (8002ac4 <ICM20602_IMU_calibration2+0x294>)
 80029ea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdcf 	bl	8000598 <__aeabi_f2d>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4620      	mov	r0, r4
 8002a00:	4629      	mov	r1, r5
 8002a02:	f7fd fc6b 	bl	80002dc <__adddf3>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a18:	f107 0220 	add.w	r2, r7, #32
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b40      	subs	r3, #64	; 0x40
 8002a20:	e9c3 0100 	strd	r0, r1, [r3]

    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a24:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a2e:	f107 0220 	add.w	r2, r7, #32
 8002a32:	4413      	add	r3, r2
 8002a34:	3b28      	subs	r3, #40	; 0x28
 8002a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a3e:	f7fd ff2d 	bl	800089c <__aeabi_ddiv>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4614      	mov	r4, r2
 8002a48:	461d      	mov	r5, r3
 8002a4a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a4e:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8002a52:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	440b      	add	r3, r1
 8002a60:	e9c3 4500 	strd	r4, r5, [r3]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a64:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a6e:	f107 0220 	add.w	r2, r7, #32
 8002a72:	4413      	add	r3, r2
 8002a74:	3b40      	subs	r3, #64	; 0x40
 8002a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a7a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a7e:	f7fd ff0d 	bl	800089c <__aeabi_ddiv>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	461d      	mov	r5, r3
 8002a8a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a8e:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 8002a92:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	440b      	add	r3, r1
 8002aa0:	e9c3 4500 	strd	r4, r5, [r3]

    		for(i = 9; i > 0; i --){
 8002aa4:	2309      	movs	r3, #9
 8002aa6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002aaa:	e05a      	b.n	8002b62 <ICM20602_IMU_calibration2+0x332>
 8002aac:	0800ff70 	.word	0x0800ff70
 8002ab0:	0800ff84 	.word	0x0800ff84
 8002ab4:	411ce80a 	.word	0x411ce80a
 8002ab8:	200005a0 	.word	0x200005a0
 8002abc:	200005e4 	.word	0x200005e4
 8002ac0:	200005a4 	.word	0x200005a4
 8002ac4:	200005f0 	.word	0x200005f0
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002ac8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002acc:	1e59      	subs	r1, r3, #1
 8002ace:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ad2:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002ad6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	440b      	add	r3, r1
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4403      	add	r3, r0
 8002ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aec:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002af0:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 8002af4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002af8:	461a      	mov	r2, r3
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	0053      	lsls	r3, r2, #1
 8002b00:	461a      	mov	r2, r3
 8002b02:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4423      	add	r3, r4
 8002b0c:	e9c3 0100 	strd	r0, r1, [r3]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002b10:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b14:	1e59      	subs	r1, r3, #1
 8002b16:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b1a:	f5a3 7008 	sub.w	r0, r3, #544	; 0x220
 8002b1e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	440b      	add	r3, r1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4403      	add	r3, r0
 8002b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b34:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b38:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 8002b3c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b40:	461a      	mov	r2, r3
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	0053      	lsls	r3, r2, #1
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4423      	add	r3, r4
 8002b54:	e9c3 0100 	strd	r0, r1, [r3]
    		for(i = 9; i > 0; i --){
 8002b58:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002b62:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	dcae      	bgt.n	8002ac8 <ICM20602_IMU_calibration2+0x298>
    	for(j = 0; j < 3; j++){
 8002b6a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002b74:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	f77f ae9b 	ble.w	80028b4 <ICM20602_IMU_calibration2+0x84>
    		}
    	}
    	cal_len ++;
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	4b9d      	ldr	r3, [pc, #628]	; (8002df8 <ICM20602_IMU_calibration2+0x5c8>)
 8002b84:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002b88:	f7fd fba8 	bl	80002dc <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230

    	if(cal_len>5000){break;}
 8002b94:	a394      	add	r3, pc, #592	; (adr r3, 8002de8 <ICM20602_IMU_calibration2+0x5b8>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002b9e:	f7fd ffe3 	bl	8000b68 <__aeabi_dcmpgt>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 80c4 	bne.w	8002d32 <ICM20602_IMU_calibration2+0x502>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002baa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bb2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002bb6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fb89 	bl	80002d8 <__aeabi_dsub>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4690      	mov	r8, r2
 8002bcc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002bd0:	a387      	add	r3, pc, #540	; (adr r3, 8002df0 <ICM20602_IMU_calibration2+0x5c0>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	4649      	mov	r1, r9
 8002bda:	f7fd ffc5 	bl	8000b68 <__aeabi_dcmpgt>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f ae5e 	bne.w	80028a2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002be6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bee:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002bf2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bfa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002bfe:	f7fd fb6b 	bl	80002d8 <__aeabi_dsub>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4692      	mov	sl, r2
 8002c08:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002c0c:	a378      	add	r3, pc, #480	; (adr r3, 8002df0 <ICM20602_IMU_calibration2+0x5c0>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	4650      	mov	r0, sl
 8002c14:	4659      	mov	r1, fp
 8002c16:	f7fd ffa7 	bl	8000b68 <__aeabi_dcmpgt>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f ae40 	bne.w	80028a2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 8002c22:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c2a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002c2e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c36:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c3a:	f7fd fb4d 	bl	80002d8 <__aeabi_dsub>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	61ba      	str	r2, [r7, #24]
 8002c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	a369      	add	r3, pc, #420	; (adr r3, 8002df0 <ICM20602_IMU_calibration2+0x5c0>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c54:	f7fd ff88 	bl	8000b68 <__aeabi_dcmpgt>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f47f ae21 	bne.w	80028a2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 8002c60:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c64:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c68:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c6c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c70:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f7fd fb2e 	bl	80002d8 <__aeabi_dsub>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	613a      	str	r2, [r7, #16]
 8002c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	a359      	add	r3, pc, #356	; (adr r3, 8002df0 <ICM20602_IMU_calibration2+0x5c0>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c92:	f7fd ff69 	bl	8000b68 <__aeabi_dcmpgt>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f ae02 	bne.w	80028a2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 8002c9e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ca2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002ca6:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002caa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cae:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cb2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002cb6:	f7fd fb0f 	bl	80002d8 <__aeabi_dsub>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	60ba      	str	r2, [r7, #8]
 8002cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	a34a      	add	r3, pc, #296	; (adr r3, 8002df0 <ICM20602_IMU_calibration2+0x5c0>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cd0:	f7fd ff4a 	bl	8000b68 <__aeabi_dcmpgt>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f47f ade3 	bne.w	80028a2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002cdc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ce0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002ce4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002ce8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cec:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cf0:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002cf4:	f7fd faf0 	bl	80002d8 <__aeabi_dsub>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	603a      	str	r2, [r7, #0]
 8002cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	a33a      	add	r3, pc, #232	; (adr r3, 8002df0 <ICM20602_IMU_calibration2+0x5c0>)
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d0e:	f7fd ff2b 	bl	8000b68 <__aeabi_dcmpgt>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f adc4 	bne.w	80028a2 <ICM20602_IMU_calibration2+0x72>
		|| cal_len < 500.0
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <ICM20602_IMU_calibration2+0x5cc>)
 8002d20:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d24:	f7fd ff02 	bl	8000b2c <__aeabi_dcmplt>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f adb9 	bne.w	80028a2 <ICM20602_IMU_calibration2+0x72>
 8002d30:	e000      	b.n	8002d34 <ICM20602_IMU_calibration2+0x504>
    	if(cal_len>5000){break;}
 8002d32:	bf00      	nop
    }

    if(cal_len==500){NVIC_SystemReset();}
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <ICM20602_IMU_calibration2+0x5cc>)
 8002d3a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d3e:	f7fd feeb 	bl	8000b18 <__aeabi_dcmpeq>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <ICM20602_IMU_calibration2+0x51c>
 8002d48:	f7ff f8ce 	bl	8001ee8 <__NVIC_SystemReset>

    for(j = 0; j < 3; j++){
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002d52:	e03c      	b.n	8002dce <ICM20602_IMU_calibration2+0x59e>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d54:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d5e:	f107 0220 	add.w	r2, r7, #32
 8002d62:	4413      	add	r3, r2
 8002d64:	3b28      	subs	r3, #40	; 0x28
 8002d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d6a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002d6e:	f7fd fd95 	bl	800089c <__aeabi_ddiv>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd ff5d 	bl	8000c38 <__aeabi_d2f>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	491f      	ldr	r1, [pc, #124]	; (8002e00 <ICM20602_IMU_calibration2+0x5d0>)
 8002d82:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	601a      	str	r2, [r3, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d8c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d96:	f107 0220 	add.w	r2, r7, #32
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b40      	subs	r3, #64	; 0x40
 8002d9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002da2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002da6:	f7fd fd79 	bl	800089c <__aeabi_ddiv>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff41 	bl	8000c38 <__aeabi_d2f>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4912      	ldr	r1, [pc, #72]	; (8002e04 <ICM20602_IMU_calibration2+0x5d4>)
 8002dba:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 3; j++){
 8002dc4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002dce:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	ddbe      	ble.n	8002d54 <ICM20602_IMU_calibration2+0x524>
    }
}
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
 8002dda:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8002dde:	46bd      	mov	sp, r7
 8002de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de4:	f3af 8000 	nop.w
 8002de8:	00000000 	.word	0x00000000
 8002dec:	40b38800 	.word	0x40b38800
 8002df0:	eb1c432d 	.word	0xeb1c432d
 8002df4:	3f1a36e2 	.word	0x3f1a36e2
 8002df8:	3ff00000 	.word	0x3ff00000
 8002dfc:	407f4000 	.word	0x407f4000
 8002e00:	20000618 	.word	0x20000618
 8002e04:	20000624 	.word	0x20000624

08002e08 <ICM20602_IMU_compensate>:

void ICM20602_IMU_compensate(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
    int k;
    for(k=0;k<3;k++){
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	e02a      	b.n	8002e6a <ICM20602_IMU_compensate+0x62>
        acc_comp[k] = acc[k] - acc_off[k];
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <ICM20602_IMU_compensate+0x78>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <ICM20602_IMU_compensate+0x7c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <ICM20602_IMU_compensate+0x80>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	edc3 7a00 	vstr	s15, [r3]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <ICM20602_IMU_compensate+0x84>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	ed93 7a00 	vldr	s14, [r3]
 8002e48:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <ICM20602_IMU_compensate+0x88>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e58:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <ICM20602_IMU_compensate+0x8c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	edc3 7a00 	vstr	s15, [r3]
    for(k=0;k<3;k++){
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3301      	adds	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	ddd1      	ble.n	8002e14 <ICM20602_IMU_compensate+0xc>
    }

}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	200005e4 	.word	0x200005e4
 8002e84:	20000618 	.word	0x20000618
 8002e88:	200005fc 	.word	0x200005fc
 8002e8c:	200005f0 	.word	0x200005f0
 8002e90:	20000624 	.word	0x20000624
 8002e94:	20000608 	.word	0x20000608

08002e98 <__NVIC_SystemReset>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002e9c:	f3bf 8f4f 	dsb	sy
}
 8002ea0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <__NVIC_SystemReset+0x24>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002eaa:	4904      	ldr	r1, [pc, #16]	; (8002ebc <__NVIC_SystemReset+0x24>)
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <__NVIC_SystemReset+0x28>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eb2:	f3bf 8f4f 	dsb	sy
}
 8002eb6:	bf00      	nop
    __NOP();
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <__NVIC_SystemReset+0x20>
 8002ebc:	e000ed00 	.word	0xe000ed00
 8002ec0:	05fa0004 	.word	0x05fa0004

08002ec4 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002ece:	1df9      	adds	r1, r7, #7
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4803      	ldr	r0, [pc, #12]	; (8002ee4 <__io_putchar+0x20>)
 8002ed6:	f008 fcd7 	bl	800b888 <HAL_UART_Transmit>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000086c 	.word	0x2000086c

08002ee8 <HAL_GetTick>:
void maintask_state_stop();
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2) ;
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
 {
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
   return uwTick;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_GetTick+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 }
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000ae0 	.word	0x20000ae0

08002f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f06:	f002 fdea 	bl	8005ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f0a:	f000 f939 	bl	8003180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f0e:	f7fe ff0f 	bl	8001d30 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f12:	f7fe fd65 	bl	80019e0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002f16:	f7fe fdad 	bl	8001a74 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8002f1a:	f002 fb29 	bl	8005570 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8002f1e:	f002 fb75 	bl	800560c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002f22:	f002 fbc3 	bl	80056ac <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002f26:	f001 fffb 	bl	8004f20 <MX_SPI1_Init>
  MX_TIM5_Init();
 8002f2a:	f002 fa13 	bl	8005354 <MX_TIM5_Init>
  MX_TIM7_Init();
 8002f2e:	f002 fa6b 	bl	8005408 <MX_TIM7_Init>
  MX_ADC5_Init();
 8002f32:	f7fe fabf 	bl	80014b4 <MX_ADC5_Init>
  MX_ADC3_Init();
 8002f36:	f7fe fa45 	bl	80013c4 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8002f3a:	f7fe fde1 	bl	8001b00 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8002f3e:	f7fe f9c9 	bl	80012d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  check_motor1=0;
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <main+0x20c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
  check_motor2=0;
 8002f48:	4b71      	ldr	r3, [pc, #452]	; (8003110 <main+0x210>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
  check_motor3=0;
 8002f4e:	4b71      	ldr	r3, [pc, #452]	; (8003114 <main+0x214>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
  check_motor4=0;
 8002f54:	4b70      	ldr	r3, [pc, #448]	; (8003118 <main+0x218>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
  check_power=0;
 8002f5a:	4b70      	ldr	r3, [pc, #448]	; (800311c <main+0x21c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
  check_FC=0;
 8002f60:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <main+0x220>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
  kick_state=0;
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <main+0x224>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	486e      	ldr	r0, [pc, #440]	; (8003128 <main+0x228>)
 8002f70:	f007 fb98 	bl	800a6a4 <HAL_TIM_PWM_Start>
    for(int i=0;i<3;i++){
 8002f74:	2300      	movs	r3, #0
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	e006      	b.n	8002f88 <main+0x88>
      actuator_buzzer(20, 20);
 8002f7a:	2114      	movs	r1, #20
 8002f7c:	2014      	movs	r0, #20
 8002f7e:	f7fe f98b 	bl	8001298 <actuator_buzzer>
    for(int i=0;i<3;i++){
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3301      	adds	r3, #1
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	ddf5      	ble.n	8002f7a <main+0x7a>
    }
    setbuf(stdout, NULL);
 8002f8e:	4b67      	ldr	r3, [pc, #412]	; (800312c <main+0x22c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f00a fe20 	bl	800dbdc <setbuf>
    printf("start\r\n");
 8002f9c:	4864      	ldr	r0, [pc, #400]	; (8003130 <main+0x230>)
 8002f9e:	f00a fe15 	bl	800dbcc <puts>
    can1_init_ibis(&hfdcan1);
 8002fa2:	4864      	ldr	r0, [pc, #400]	; (8003134 <main+0x234>)
 8002fa4:	f7fe fc5c 	bl	8001860 <can1_init_ibis>
    can2_init_ibis(&hfdcan2);
 8002fa8:	4863      	ldr	r0, [pc, #396]	; (8003138 <main+0x238>)
 8002faa:	f7fe fcb9 	bl	8001920 <can2_init_ibis>

    HAL_FDCAN_Start(&hfdcan1);
 8002fae:	4861      	ldr	r0, [pc, #388]	; (8003134 <main+0x234>)
 8002fb0:	f004 ff4c 	bl	8007e4c <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	485e      	ldr	r0, [pc, #376]	; (8003134 <main+0x234>)
 8002fba:	f005 f89f 	bl	80080fc <HAL_FDCAN_ActivateNotification>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <main+0xc8>
    {
      Error_Handler();
 8002fc4:	f001 fe82 	bl	8004ccc <Error_Handler>
    }

    HAL_FDCAN_Start(&hfdcan2);
 8002fc8:	485b      	ldr	r0, [pc, #364]	; (8003138 <main+0x238>)
 8002fca:	f004 ff3f 	bl	8007e4c <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4859      	ldr	r0, [pc, #356]	; (8003138 <main+0x238>)
 8002fd4:	f005 f892 	bl	80080fc <HAL_FDCAN_ActivateNotification>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <main+0xe2>
    {
      Error_Handler();
 8002fde:	f001 fe75 	bl	8004ccc <Error_Handler>
    }

    HAL_UART_Init(&hlpuart1);
 8002fe2:	4856      	ldr	r0, [pc, #344]	; (800313c <main+0x23c>)
 8002fe4:	f008 fc00 	bl	800b7e8 <HAL_UART_Init>
    xprintf_init(&hlpuart1);
 8002fe8:	4854      	ldr	r0, [pc, #336]	; (800313c <main+0x23c>)
 8002fea:	f002 fd23 	bl	8005a34 <xprintf_init>


    HAL_UART_Init(&huart2);
 8002fee:	4854      	ldr	r0, [pc, #336]	; (8003140 <main+0x240>)
 8002ff0:	f008 fbfa 	bl	800b7e8 <HAL_UART_Init>
    HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_Ether,Rxbufsize_from_Ether);
 8002ff4:	220e      	movs	r2, #14
 8002ff6:	4953      	ldr	r1, [pc, #332]	; (8003144 <main+0x244>)
 8002ff8:	4851      	ldr	r0, [pc, #324]	; (8003140 <main+0x240>)
 8002ffa:	f008 fcdb 	bl	800b9b4 <HAL_UART_Receive_DMA>


    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense,1);
 8002ffe:	2201      	movs	r2, #1
 8003000:	4951      	ldr	r1, [pc, #324]	; (8003148 <main+0x248>)
 8003002:	4852      	ldr	r0, [pc, #328]	; (800314c <main+0x24c>)
 8003004:	f003 f9d6 	bl	80063b4 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense,1);
 8003008:	2201      	movs	r2, #1
 800300a:	4951      	ldr	r1, [pc, #324]	; (8003150 <main+0x250>)
 800300c:	4851      	ldr	r0, [pc, #324]	; (8003154 <main+0x254>)
 800300e:	f003 f9d1 	bl	80063b4 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata,1);
 8003012:	2201      	movs	r2, #1
 8003014:	4950      	ldr	r1, [pc, #320]	; (8003158 <main+0x258>)
 8003016:	4851      	ldr	r0, [pc, #324]	; (800315c <main+0x25c>)
 8003018:	f003 f9cc 	bl	80063b4 <HAL_ADC_Start_DMA>
    	//if(HAL_GetTick()>1000){
    	//	Error_Handler();
    	//}
   // }

    actuator_power_ONOFF(0);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fe f905 	bl	800122c <actuator_power_ONOFF>
    HAL_Delay(20);
 8003022:	2014      	movs	r0, #20
 8003024:	f002 fdc0 	bl	8005ba8 <HAL_Delay>


    actuator_motor1(0.0,0.0);
 8003028:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8003160 <main+0x260>
 800302c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8003160 <main+0x260>
 8003030:	f7fd ffd4 	bl	8000fdc <actuator_motor1>
    actuator_motor2(0.0,0.0);
 8003034:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8003160 <main+0x260>
 8003038:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003160 <main+0x260>
 800303c:	f7fd fffe 	bl	800103c <actuator_motor2>
    actuator_motor3(0.0,0.0);
 8003040:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003160 <main+0x260>
 8003044:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8003160 <main+0x260>
 8003048:	f7fe f828 	bl	800109c <actuator_motor3>
    actuator_motor4(0.0,0.0);
 800304c:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003160 <main+0x260>
 8003050:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003160 <main+0x260>
 8003054:	f7fe f852 	bl	80010fc <actuator_motor4>
    actuator_motor5(0.0,0.0);
 8003058:	eddf 0a41 	vldr	s1, [pc, #260]	; 8003160 <main+0x260>
 800305c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003160 <main+0x260>
 8003060:	f7fe f87c 	bl	800115c <actuator_motor5>

    actuator_kicker(1, 1);
 8003064:	2101      	movs	r1, #1
 8003066:	2001      	movs	r0, #1
 8003068:	f7fe f8c9 	bl	80011fe <actuator_kicker>
    actuator_kicker_voltage(250.0);
 800306c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003164 <main+0x264>
 8003070:	f7fe f8a4 	bl	80011bc <actuator_kicker_voltage>
    actuator_power_param(1,15.0);//min voltage
 8003074:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003078:	2001      	movs	r0, #1
 800307a:	f7fe f8ea 	bl	8001252 <actuator_power_param>
    actuator_power_param(2,35.0);//max voltage
 800307e:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8003168 <main+0x268>
 8003082:	2002      	movs	r0, #2
 8003084:	f7fe f8e5 	bl	8001252 <actuator_power_param>
    actuator_power_param(3,50.0);//max current
 8003088:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800316c <main+0x26c>
 800308c:	2003      	movs	r0, #3
 800308e:	f7fe f8e0 	bl	8001252 <actuator_power_param>
    actuator_power_param(4,90.0);//max temp(fet)
 8003092:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003170 <main+0x270>
 8003096:	2004      	movs	r0, #4
 8003098:	f7fe f8db 	bl	8001252 <actuator_power_param>
    actuator_power_param(5,90.0);//max temp(solenoid)
 800309c:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8003170 <main+0x270>
 80030a0:	2005      	movs	r0, #5
 80030a2:	f7fe f8d6 	bl	8001252 <actuator_power_param>


    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80030a6:	2201      	movs	r2, #1
 80030a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ac:	4831      	ldr	r0, [pc, #196]	; (8003174 <main+0x274>)
 80030ae:	f005 fd2f 	bl	8008b10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80030b2:	2201      	movs	r2, #1
 80030b4:	2101      	movs	r1, #1
 80030b6:	482f      	ldr	r0, [pc, #188]	; (8003174 <main+0x274>)
 80030b8:	f005 fd2a 	bl	8008b10 <HAL_GPIO_WritePin>
    ICM20602_init();
 80030bc:	f7fe ff9a 	bl	8001ff4 <ICM20602_init>
    ICM20602_IMU_calibration2();
 80030c0:	f7ff fbb6 	bl	8002830 <ICM20602_IMU_calibration2>
    ICM20602_clearAngle();
 80030c4:	f7ff fa1e 	bl	8002504 <ICM20602_clearAngle>

    //uint8_t senddata_calib[8];
    //can1_send(0x340, senddata_calib);
    //can2_send(0x340, senddata_calib);

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ce:	4829      	ldr	r0, [pc, #164]	; (8003174 <main+0x274>)
 80030d0:	f005 fd1e 	bl	8008b10 <HAL_GPIO_WritePin>
    actuator_power_ONOFF(1);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7fe f8a9 	bl	800122c <actuator_power_ONOFF>


    for(int i=0;i<3;i++){
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	e006      	b.n	80030ee <main+0x1ee>
    	actuator_buzzer(40, 40);
 80030e0:	2128      	movs	r1, #40	; 0x28
 80030e2:	2028      	movs	r0, #40	; 0x28
 80030e4:	f7fe f8d8 	bl	8001298 <actuator_buzzer>
    for(int i=0;i<3;i++){
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	ddf5      	ble.n	80030e0 <main+0x1e0>
    }

    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <main+0x278>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	72da      	strb	r2, [r3, #11]
    HAL_Delay(500);
 80030fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030fe:	f002 fd53 	bl	8005ba8 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim7);
 8003102:	481e      	ldr	r0, [pc, #120]	; (800317c <main+0x27c>)
 8003104:	f007 f9fe 	bl	800a504 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003108:	e7fe      	b.n	8003108 <main+0x208>
 800310a:	bf00      	nop
 800310c:	20000715 	.word	0x20000715
 8003110:	20000716 	.word	0x20000716
 8003114:	20000717 	.word	0x20000717
 8003118:	20000718 	.word	0x20000718
 800311c:	20000719 	.word	0x20000719
 8003120:	2000071a 	.word	0x2000071a
 8003124:	20000630 	.word	0x20000630
 8003128:	200007d4 	.word	0x200007d4
 800312c:	20000014 	.word	0x20000014
 8003130:	0800ff94 	.word	0x0800ff94
 8003134:	20000468 	.word	0x20000468
 8003138:	200004cc 	.word	0x200004cc
 800313c:	2000086c 	.word	0x2000086c
 8003140:	200008fc 	.word	0x200008fc
 8003144:	200005ac 	.word	0x200005ac
 8003148:	20000658 	.word	0x20000658
 800314c:	20000200 	.word	0x20000200
 8003150:	20000654 	.word	0x20000654
 8003154:	2000026c 	.word	0x2000026c
 8003158:	2000065c 	.word	0x2000065c
 800315c:	200002d8 	.word	0x200002d8
 8003160:	00000000 	.word	0x00000000
 8003164:	437a0000 	.word	0x437a0000
 8003168:	420c0000 	.word	0x420c0000
 800316c:	42480000 	.word	0x42480000
 8003170:	42b40000 	.word	0x42b40000
 8003174:	48000800 	.word	0x48000800
 8003178:	20000638 	.word	0x20000638
 800317c:	20000820 	.word	0x20000820

08003180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b094      	sub	sp, #80	; 0x50
 8003184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003186:	f107 0318 	add.w	r3, r7, #24
 800318a:	2238      	movs	r2, #56	; 0x38
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f00a f824 	bl	800d1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f005 fcfe 	bl	8008ba4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b2:	2302      	movs	r3, #2
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031b6:	2303      	movs	r3, #3
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80031ba:	2302      	movs	r3, #2
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80031be:	2355      	movs	r3, #85	; 0x55
 80031c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031c2:	2302      	movs	r3, #2
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031c6:	2302      	movs	r3, #2
 80031c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031ca:	2302      	movs	r3, #2
 80031cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ce:	f107 0318 	add.w	r3, r7, #24
 80031d2:	4618      	mov	r0, r3
 80031d4:	f005 fd9a 	bl	8008d0c <HAL_RCC_OscConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80031de:	f001 fd75 	bl	8004ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031e2:	230f      	movs	r3, #15
 80031e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e6:	2303      	movs	r3, #3
 80031e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2104      	movs	r1, #4
 80031fa:	4618      	mov	r0, r3
 80031fc:	f006 f89e 	bl	800933c <HAL_RCC_ClockConfig>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003206:	f001 fd61 	bl	8004ccc <Error_Handler>
  }
}
 800320a:	bf00      	nop
 800320c:	3750      	adds	r7, #80	; 0x50
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	0000      	movs	r0, r0
 8003214:	0000      	movs	r0, r0
	...

08003218 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800321c:	b089      	sub	sp, #36	; 0x24
 800321e:	af04      	add	r7, sp, #16
 8003220:	6078      	str	r0, [r7, #4]
	 ICM20602_read_IMU_data();
 8003222:	f7ff f82d 	bl	8002280 <ICM20602_read_IMU_data>
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 8003226:	2120      	movs	r1, #32
 8003228:	48c9      	ldr	r0, [pc, #804]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800322a:	f005 fc59 	bl	8008ae0 <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	461c      	mov	r4, r3
 8003232:	2140      	movs	r1, #64	; 0x40
 8003234:	48c6      	ldr	r0, [pc, #792]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003236:	f005 fc53 	bl	8008ae0 <HAL_GPIO_ReadPin>
 800323a:	4603      	mov	r3, r0
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	4423      	add	r3, r4
 8003242:	b2dc      	uxtb	r4, r3
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 8003244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800324c:	f005 fc48 	bl	8008ae0 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4423      	add	r3, r4
 8003258:	b2dc      	uxtb	r4, r3
 800325a:	2104      	movs	r1, #4
 800325c:	48bd      	ldr	r0, [pc, #756]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800325e:	f005 fc3f 	bl	8008ae0 <HAL_GPIO_ReadPin>
 8003262:	4603      	mov	r3, r0
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4423      	add	r3, r4
 800326a:	b2db      	uxtb	r3, r3
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 800326c:	f1c3 030f 	rsb	r3, r3, #15
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4bb9      	ldr	r3, [pc, #740]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003274:	701a      	strb	r2, [r3, #0]

	 switch (sw_mode){
 8003276:	4bb8      	ldr	r3, [pc, #736]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b06      	cmp	r3, #6
 800327c:	f200 8300 	bhi.w	8003880 <HAL_TIM_PeriodElapsedCallback+0x668>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032a5 	.word	0x080032a5
 800328c:	0800339d 	.word	0x0800339d
 8003290:	08003495 	.word	0x08003495
 8003294:	08003501 	.word	0x08003501
 8003298:	0800367f 	.word	0x0800367f
 800329c:	080036db 	.word	0x080036db
 80032a0:	0800379f 	.word	0x0800379f
	 	 case 0:  //main without debug
	 		if(Ether_connect==1){
 80032a4:	4bad      	ldr	r3, [pc, #692]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d13b      	bne.n	8003324 <HAL_TIM_PeriodElapsedCallback+0x10c>
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
 80032ac:	4bac      	ldr	r3, [pc, #688]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f971 	bl	8000598 <__aeabi_f2d>
 80032b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003538 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fd f9c4 	bl	8000648 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4614      	mov	r4, r2
 80032c6:	461d      	mov	r5, r3
 80032c8:	4ba6      	ldr	r3, [pc, #664]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f963 	bl	8000598 <__aeabi_f2d>
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	4ba4      	ldr	r3, [pc, #656]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80032d8:	f7fd f9b6 	bl	8000648 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	a396      	add	r3, pc, #600	; (adr r3, 8003540 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fd fad7 	bl	800089c <__aeabi_ddiv>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	a394      	add	r3, pc, #592	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f7fd f9a4 	bl	8000648 <__aeabi_dmul>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4620      	mov	r0, r4
 8003306:	4629      	mov	r1, r5
 8003308:	f7fc ffe8 	bl	80002dc <__adddf3>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f7fd fc90 	bl	8000c38 <__aeabi_d2f>
 8003318:	4603      	mov	r3, r0
 800331a:	4a91      	ldr	r2, [pc, #580]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800331c:	6013      	str	r3, [r2, #0]
	 			maintask_run();
 800331e:	f000 fe9b 	bl	8004058 <maintask_run>
	 		}
	 		else{
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
	 			maintask_state_stop();
	 		}
	 		break;
 8003322:	e2b0      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
 8003324:	4b8e      	ldr	r3, [pc, #568]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f935 	bl	8000598 <__aeabi_f2d>
 800332e:	a382      	add	r3, pc, #520	; (adr r3, 8003538 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f7fd f988 	bl	8000648 <__aeabi_dmul>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd f927 	bl	8000598 <__aeabi_f2d>
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	4b86      	ldr	r3, [pc, #536]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003350:	f7fd f97a 	bl	8000648 <__aeabi_dmul>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	a378      	add	r3, pc, #480	; (adr r3, 8003540 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f7fd fa9b 	bl	800089c <__aeabi_ddiv>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	a376      	add	r3, pc, #472	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f7fd f968 	bl	8000648 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fc ffac 	bl	80002dc <__adddf3>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	f7fd fc54 	bl	8000c38 <__aeabi_d2f>
 8003390:	4603      	mov	r3, r0
 8003392:	4a73      	ldr	r2, [pc, #460]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003394:	6013      	str	r3, [r2, #0]
	 			maintask_state_stop();
 8003396:	f001 f8cb 	bl	8004530 <maintask_state_stop>
	 		break;
 800339a:	e274      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>

	 	 case 1:  //main debug
	 		if(Ether_connect==1){
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d13b      	bne.n	800341c <HAL_TIM_PeriodElapsedCallback+0x204>
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
 80033a4:	4b6e      	ldr	r3, [pc, #440]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f8f5 	bl	8000598 <__aeabi_f2d>
 80033ae:	a362      	add	r3, pc, #392	; (adr r3, 8003538 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f7fd f948 	bl	8000648 <__aeabi_dmul>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4614      	mov	r4, r2
 80033be:	461d      	mov	r5, r3
 80033c0:	4b68      	ldr	r3, [pc, #416]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f8e7 	bl	8000598 <__aeabi_f2d>
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80033d0:	f7fd f93a 	bl	8000648 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	a358      	add	r3, pc, #352	; (adr r3, 8003540 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fd fa5b 	bl	800089c <__aeabi_ddiv>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	a356      	add	r3, pc, #344	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fd f928 	bl	8000648 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fc ff6c 	bl	80002dc <__adddf3>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fc14 	bl	8000c38 <__aeabi_d2f>
 8003410:	4603      	mov	r3, r0
 8003412:	4a53      	ldr	r2, [pc, #332]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003414:	6013      	str	r3, [r2, #0]
	 			maintask_run();
 8003416:	f000 fe1f 	bl	8004058 <maintask_run>
	 		else{
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
	 			//maintask_run();
	 			maintask_state_stop();
	 		}
	 		break;
 800341a:	e234      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd f8b9 	bl	8000598 <__aeabi_f2d>
 8003426:	a344      	add	r3, pc, #272	; (adr r3, 8003538 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f7fd f90c 	bl	8000648 <__aeabi_dmul>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4614      	mov	r4, r2
 8003436:	461d      	mov	r5, r3
 8003438:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f8ab 	bl	8000598 <__aeabi_f2d>
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	4b48      	ldr	r3, [pc, #288]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003448:	f7fd f8fe 	bl	8000648 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	a33a      	add	r3, pc, #232	; (adr r3, 8003540 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd fa1f 	bl	800089c <__aeabi_ddiv>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	a338      	add	r3, pc, #224	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	f7fd f8ec 	bl	8000648 <__aeabi_dmul>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fc ff30 	bl	80002dc <__adddf3>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f7fd fbd8 	bl	8000c38 <__aeabi_d2f>
 8003488:	4603      	mov	r3, r0
 800348a:	4a35      	ldr	r2, [pc, #212]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800348c:	6013      	str	r3, [r2, #0]
	 			maintask_state_stop();
 800348e:	f001 f84f 	bl	8004530 <maintask_state_stop>
	 		break;
 8003492:	e1f8      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>

	 	 case 2:  //calibration motor
			if(decode_SW(SWdata[0])&0b00010000){
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fa65 	bl	8004968 <decode_SW>
 800349e:	4603      	mov	r3, r0
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d014      	beq.n	80034d2 <HAL_TIM_PeriodElapsedCallback+0x2ba>
				 uint8_t senddata_calib[8];
				 can1_send(0x310,senddata_calib);//calibration
 80034a8:	f107 0308 	add.w	r3, r7, #8
 80034ac:	4619      	mov	r1, r3
 80034ae:	f44f 7044 	mov.w	r0, #784	; 0x310
 80034b2:	f7fe f9ff 	bl	80018b4 <can1_send>
				 can2_send(0x310,senddata_calib);//calibration
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	4619      	mov	r1, r3
 80034bc:	f44f 7044 	mov.w	r0, #784	; 0x310
 80034c0:	f7fe fa58 	bl	8001974 <can2_send>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80034c4:	2201      	movs	r2, #1
 80034c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ca:	4829      	ldr	r0, [pc, #164]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80034cc:	f005 fb20 	bl	8008b10 <HAL_GPIO_WritePin>
			else{
				omni_move(0.0, 0.0, 0.0,0.0);
				actuator_motor5(0.0,0.0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
			}
			break;
 80034d0:	e1d9      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>
				omni_move(0.0, 0.0, 0.0,0.0);
 80034d2:	eddf 1a28 	vldr	s3, [pc, #160]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80034d6:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80034da:	eddf 0a26 	vldr	s1, [pc, #152]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80034de:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80034e2:	f001 fc49 	bl	8004d78 <omni_move>
				actuator_motor5(0.0,0.0);
 80034e6:	eddf 0a23 	vldr	s1, [pc, #140]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80034ea:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80034ee:	f7fd fe35 	bl	800115c <actuator_motor5>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034f8:	481d      	ldr	r0, [pc, #116]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80034fa:	f005 fb09 	bl	8008b10 <HAL_GPIO_WritePin>
			break;
 80034fe:	e1c2      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>

	 	 case 3:  //motor test
			if(decode_SW(SWdata[0])&0b00000001){
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fa2f 	bl	8004968 <decode_SW>
 800350a:	4603      	mov	r3, r0
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d031      	beq.n	8003578 <HAL_TIM_PeriodElapsedCallback+0x360>
				 omni_move(1.0, 0.0, 0.0,1.0);//fwd
 8003514:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003518:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 800351c:	eddf 0a15 	vldr	s1, [pc, #84]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0x35c>
 8003520:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003524:	f001 fc28 	bl	8004d78 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003528:	2201      	movs	r2, #1
 800352a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800352e:	4810      	ldr	r0, [pc, #64]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003530:	f005 faee 	bl	8008b10 <HAL_GPIO_WritePin>
 8003534:	e09c      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0x458>
 8003536:	bf00      	nop
 8003538:	d916872b 	.word	0xd916872b
 800353c:	3feff7ce 	.word	0x3feff7ce
 8003540:	60000000 	.word	0x60000000
 8003544:	400921fb 	.word	0x400921fb
 8003548:	d2f1a9fc 	.word	0xd2f1a9fc
 800354c:	3f50624d 	.word	0x3f50624d
 8003550:	48000400 	.word	0x48000400
 8003554:	48000c00 	.word	0x48000c00
 8003558:	200005ce 	.word	0x200005ce
 800355c:	200005c9 	.word	0x200005c9
 8003560:	200005e0 	.word	0x200005e0
 8003564:	200006e8 	.word	0x200006e8
 8003568:	40668000 	.word	0x40668000
 800356c:	2000065c 	.word	0x2000065c
 8003570:	48000800 	.word	0x48000800
 8003574:	00000000 	.word	0x00000000
			 }
			else if(decode_SW(SWdata[0])&0b00000010){
 8003578:	4bba      	ldr	r3, [pc, #744]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f001 f9f3 	bl	8004968 <decode_SW>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d010      	beq.n	80035ae <HAL_TIM_PeriodElapsedCallback+0x396>
				 omni_move(-1.0, 0.0, 0.0,1.0);//back
 800358c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003590:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003594:	eddf 0ab4 	vldr	s1, [pc, #720]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003598:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800359c:	f001 fbec 	bl	8004d78 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80035a0:	2201      	movs	r2, #1
 80035a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035a6:	48b1      	ldr	r0, [pc, #708]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 80035a8:	f005 fab2 	bl	8008b10 <HAL_GPIO_WritePin>
 80035ac:	e060      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0x458>
			 }
			else if(decode_SW(SWdata[0])&0b00000100){
 80035ae:	4bad      	ldr	r3, [pc, #692]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 f9d8 	bl	8004968 <decode_SW>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d010      	beq.n	80035e4 <HAL_TIM_PeriodElapsedCallback+0x3cc>
				 omni_move(0.0, -1.0, 0.0,1.0);//left
 80035c2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80035c6:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80035ca:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80035ce:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80035d2:	f001 fbd1 	bl	8004d78 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80035d6:	2201      	movs	r2, #1
 80035d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035dc:	48a3      	ldr	r0, [pc, #652]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 80035de:	f005 fa97 	bl	8008b10 <HAL_GPIO_WritePin>
 80035e2:	e045      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0x458>
			 }
			else if(decode_SW(SWdata[0])&0b00001000){
 80035e4:	4b9f      	ldr	r3, [pc, #636]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 f9bd 	bl	8004968 <decode_SW>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <HAL_TIM_PeriodElapsedCallback+0x402>
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 80035f8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80035fc:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003600:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003604:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003608:	f001 fbb6 	bl	8004d78 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800360c:	2201      	movs	r2, #1
 800360e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003612:	4896      	ldr	r0, [pc, #600]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003614:	f005 fa7c 	bl	8008b10 <HAL_GPIO_WritePin>
 8003618:	e02a      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0x458>
			 }
			else if(decode_SW(SWdata[0])&0b00010000){
 800361a:	4b92      	ldr	r3, [pc, #584]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f001 f9a2 	bl	8004968 <decode_SW>
 8003624:	4603      	mov	r3, r0
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <HAL_TIM_PeriodElapsedCallback+0x438>
				 omni_move(0.0, 0.0, 7.0,1.0);//spin
 800362e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003632:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003636:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 800363a:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 800363e:	f001 fb9b 	bl	8004d78 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003642:	2201      	movs	r2, #1
 8003644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003648:	4888      	ldr	r0, [pc, #544]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800364a:	f005 fa61 	bl	8008b10 <HAL_GPIO_WritePin>
 800364e:	e00f      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0x458>
			 }
			else{
				omni_move(0.0, 0.0, 0.0,0.0);
 8003650:	eddf 1a85 	vldr	s3, [pc, #532]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003654:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003658:	eddf 0a83 	vldr	s1, [pc, #524]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 800365c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003660:	f001 fb8a 	bl	8004d78 <omni_move>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003664:	2200      	movs	r2, #0
 8003666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800366a:	4880      	ldr	r0, [pc, #512]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800366c:	f005 fa50 	bl	8008b10 <HAL_GPIO_WritePin>
			}
			actuator_motor5(0.0,0.0);
 8003670:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003674:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003678:	f7fd fd70 	bl	800115c <actuator_motor5>
			break;
 800367c:	e103      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>

	 	 case 4://drible test
	 		 if(decode_SW(SWdata[0])&0b00010000){
 800367e:	4b79      	ldr	r3, [pc, #484]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f970 	bl	8004968 <decode_SW>
 8003688:	4603      	mov	r3, r0
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <HAL_TIM_PeriodElapsedCallback+0x494>
	 			actuator_motor5(0.5,1.0);
 8003692:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003696:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800369a:	f7fd fd5f 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800369e:	2201      	movs	r2, #1
 80036a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036a4:	4871      	ldr	r0, [pc, #452]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 80036a6:	f005 fa33 	bl	8008b10 <HAL_GPIO_WritePin>
 80036aa:	e00b      	b.n	80036c4 <HAL_TIM_PeriodElapsedCallback+0x4ac>
			 }
			 else{
				actuator_motor5(0.0,0.0);
 80036ac:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036b0:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036b4:	f7fd fd52 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036be:	486b      	ldr	r0, [pc, #428]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 80036c0:	f005 fa26 	bl	8008b10 <HAL_GPIO_WritePin>
			 }
				omni_move(0.0, 0.0, 0.0,0.0);
 80036c4:	eddf 1a68 	vldr	s3, [pc, #416]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036c8:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036cc:	eddf 0a66 	vldr	s1, [pc, #408]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036d0:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036d4:	f001 fb50 	bl	8004d78 <omni_move>
	 		 break;
 80036d8:	e0d5      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>

	 	 case 5:
	 		 if(decode_SW(SWdata[0])&0b00010000){
 80036da:	4b62      	ldr	r3, [pc, #392]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f942 	bl	8004968 <decode_SW>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d02e      	beq.n	800374c <HAL_TIM_PeriodElapsedCallback+0x534>
		 		actuator_motor5(0.5,1.0);
 80036ee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80036f2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80036f6:	f7fd fd31 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80036fa:	2201      	movs	r2, #1
 80036fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003700:	485a      	ldr	r0, [pc, #360]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003702:	f005 fa05 	bl	8008b10 <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 8003706:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10a      	bne.n	8003724 <HAL_TIM_PeriodElapsedCallback+0x50c>
					if(kick_state==0){
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_TIM_PeriodElapsedCallback+0x50c>
						actuator_kicker(3, 100);
 8003716:	2164      	movs	r1, #100	; 0x64
 8003718:	2003      	movs	r0, #3
 800371a:	f7fd fd70 	bl	80011fe <actuator_kicker>
						kick_state=1;
 800371e:	4b55      	ldr	r3, [pc, #340]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
					}
				}
	 			if(kick_state==1){
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d12d      	bne.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x570>
	 				kick_time++;
 800372c:	4b52      	ldr	r3, [pc, #328]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a51      	ldr	r2, [pc, #324]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003734:	6013      	str	r3, [r2, #0]
	 				if(kick_time>100){
 8003736:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	dd24      	ble.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x570>
	 					kick_state=0;
 800373e:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
	 					kick_time=0;
 8003744:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e01d      	b.n	8003788 <HAL_TIM_PeriodElapsedCallback+0x570>
	 				}
	 			}

	 		 }
	 		 else{
				 actuator_motor5(0.0,0.0);
 800374c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003750:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003754:	f7fd fd02 	bl	800115c <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800375e:	4843      	ldr	r0, [pc, #268]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003760:	f005 f9d6 	bl	8008b10 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003764:	2101      	movs	r1, #1
 8003766:	2001      	movs	r0, #1
 8003768:	f7fd fd49 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker(2, 0);
 800376c:	2100      	movs	r1, #0
 800376e:	2002      	movs	r0, #2
 8003770:	f7fd fd45 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker_voltage(250.0);
 8003774:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800387c <HAL_TIM_PeriodElapsedCallback+0x664>
 8003778:	f7fd fd20 	bl	80011bc <actuator_kicker_voltage>
				 kick_state=0;
 800377c:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
				 kick_time=0;
 8003782:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
	 		 }
				omni_move(0.0, 0.0, 0.0,0.0);
 8003788:	eddf 1a37 	vldr	s3, [pc, #220]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 800378c:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003790:	eddf 0a35 	vldr	s1, [pc, #212]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003794:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003798:	f001 faee 	bl	8004d78 <omni_move>
	 		break;
 800379c:	e073      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>

	 	 case 6:
	 		 if(decode_SW(SWdata[0])&0b00010000){
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 f8e0 	bl	8004968 <decode_SW>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02e      	beq.n	8003810 <HAL_TIM_PeriodElapsedCallback+0x5f8>
	 			actuator_motor5(0.5,1.0);
 80037b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037b6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80037ba:	f7fd fccf 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80037be:	2201      	movs	r2, #1
 80037c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037c4:	4829      	ldr	r0, [pc, #164]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 80037c6:	f005 f9a3 	bl	8008b10 <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 80037ca:	4b29      	ldr	r3, [pc, #164]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10a      	bne.n	80037e8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
					if(kick_state==0){
 80037d2:	4b28      	ldr	r3, [pc, #160]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
						actuator_kicker(3, 100);
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	2003      	movs	r0, #3
 80037de:	f7fd fd0e 	bl	80011fe <actuator_kicker>
						kick_state=1;
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
					}
				}
				if(kick_state==1){
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d12d      	bne.n	800384c <HAL_TIM_PeriodElapsedCallback+0x634>
					kick_time++;
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a20      	ldr	r2, [pc, #128]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80037f8:	6013      	str	r3, [r2, #0]
					if(kick_time>100){
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	dd24      	ble.n	800384c <HAL_TIM_PeriodElapsedCallback+0x634>
						kick_state=0;
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
						kick_time=0;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e01d      	b.n	800384c <HAL_TIM_PeriodElapsedCallback+0x634>
					}
				}
	 		 }
	 		 else{
	 			 actuator_motor5(0.0,0.0);
 8003810:	eddf 0a15 	vldr	s1, [pc, #84]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003814:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003818:	f7fd fca0 	bl	800115c <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800381c:	2200      	movs	r2, #0
 800381e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003822:	4812      	ldr	r0, [pc, #72]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003824:	f005 f974 	bl	8008b10 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003828:	2101      	movs	r1, #1
 800382a:	2001      	movs	r0, #1
 800382c:	f7fd fce7 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker(2, 1);
 8003830:	2101      	movs	r1, #1
 8003832:	2002      	movs	r0, #2
 8003834:	f7fd fce3 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker_voltage(0.0);
 8003838:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 800383c:	f7fd fcbe 	bl	80011bc <actuator_kicker_voltage>
					kick_state=0;
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
					kick_time=0;
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
	 		 }
				omni_move(0.0, 0.0, 0.0,0.0);
 800384c:	eddf 1a06 	vldr	s3, [pc, #24]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003850:	ed9f 1a05 	vldr	s2, [pc, #20]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003854:	eddf 0a04 	vldr	s1, [pc, #16]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003858:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0x650>
 800385c:	f001 fa8c 	bl	8004d78 <omni_move>
	 		break;
 8003860:	e011      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x66e>
 8003862:	bf00      	nop
 8003864:	2000065c 	.word	0x2000065c
 8003868:	00000000 	.word	0x00000000
 800386c:	48000800 	.word	0x48000800
 8003870:	200006f4 	.word	0x200006f4
 8003874:	20000630 	.word	0x20000630
 8003878:	20000634 	.word	0x20000634
 800387c:	437a0000 	.word	0x437a0000

	 	 default:
	 		maintask_stop();
 8003880:	f000 fefe 	bl	8004680 <maintask_stop>
	 		 break;
 8003884:	bf00      	nop
	}

	 if(cnt_time_tim>50){
 8003886:	4b78      	ldr	r3, [pc, #480]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2b32      	cmp	r3, #50	; 0x32
 800388c:	d91f      	bls.n	80038ce <HAL_TIM_PeriodElapsedCallback+0x6b6>
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 800388e:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003890:	7ada      	ldrb	r2, [r3, #11]
 8003892:	4b77      	ldr	r3, [pc, #476]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d009      	beq.n	80038ae <HAL_TIM_PeriodElapsedCallback+0x696>
		 Ether_connect=1;
 800389a:	4b76      	ldr	r3, [pc, #472]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 80038a0:	2201      	movs	r2, #1
 80038a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038a6:	4874      	ldr	r0, [pc, #464]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80038a8:	f005 f932 	bl	8008b10 <HAL_GPIO_WritePin>
 80038ac:	e008      	b.n	80038c0 <HAL_TIM_PeriodElapsedCallback+0x6a8>
	 }
	 else{
		 Ether_connect=0;
 80038ae:	4b71      	ldr	r3, [pc, #452]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ba:	486f      	ldr	r0, [pc, #444]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80038bc:	f005 f928 	bl	8008b10 <HAL_GPIO_WritePin>
	 }
	 Ether_connect_check=data_from_ether[Rxbufsize_from_Ether-3];
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_TIM_PeriodElapsedCallback+0x854>)
 80038c2:	7ada      	ldrb	r2, [r3, #11]
 80038c4:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80038c6:	701a      	strb	r2, [r3, #0]
	 cnt_time_tim=0;
 80038c8:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x850>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	801a      	strh	r2, [r3, #0]

	 }

	 if(cnt_time_50Hz>50){
 80038ce:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x864>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	2b32      	cmp	r3, #50	; 0x32
 80038d4:	f240 80a3 	bls.w	8003a1e <HAL_TIM_PeriodElapsedCallback+0x806>
       if(sw_mode>0){
 80038d8:	4b69      	ldr	r3, [pc, #420]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x868>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8094 	beq.w	8003a0a <HAL_TIM_PeriodElapsedCallback+0x7f2>
    	   printf(" kicktime=%d, state=%d ",kick_time,kick_state);
 80038e2:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a68      	ldr	r2, [pc, #416]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4867      	ldr	r0, [pc, #412]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x874>)
 80038ee:	f00a f8e7 	bl	800dac0 <iprintf>
		 //printf("data: acc0=%f,acc1=%f,acc2=%f,gyro0=%f,gyro1=%f,gyro2=%f,tmp=%f",acc[0],acc[1],acc[2],gyro[0],gyro[1],gyro[2],IMU_tmp);
		 //printf(" pich=%f roll=%f yaw=%f",pitchAngle,rollAngle,yawAngle);
    	 printf(" yaw=%f",yawAngle);
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fc fe4e 	bl	8000598 <__aeabi_f2d>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4864      	ldr	r0, [pc, #400]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8003902:	f00a f8dd 	bl	800dac0 <iprintf>
		 //printf(" v0=%.3f v1=%.3f v2=%.3f v3=%.3f",voltage[0],voltage[1],voltage[2],voltage[3]);
		 //printf(" t0=%.3f t1=%.3f t2=%.3f t3=%.3f",tempercher[0],tempercher[1],tempercher[2],tempercher[3]);
		 //printf(" A=%.3f",power_amp);
		 //printf(" ball=%d",ball[0]);
		 //printf(" yaw=%f",yawAngle/180.0*M_PI);
		 printf(" connect=%d vel_surge=%.4f vel_sway=%.4f ",Ether_connect,vel_surge,vel_sway);
 8003906:	4b5b      	ldr	r3, [pc, #364]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	461e      	mov	r6, r3
 800390c:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x880>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fe41 	bl	8000598 <__aeabi_f2d>
 8003916:	4604      	mov	r4, r0
 8003918:	460d      	mov	r5, r1
 800391a:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x884>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fe3a 	bl	8000598 <__aeabi_f2d>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	e9cd 2300 	strd	r2, r3, [sp]
 800392c:	4622      	mov	r2, r4
 800392e:	462b      	mov	r3, r5
 8003930:	4631      	mov	r1, r6
 8003932:	485b      	ldr	r0, [pc, #364]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003934:	f00a f8c4 	bl	800dac0 <iprintf>
		 printf(" theta_vision=%.4f theta_AI=%.4f drible_power=%.4f",(theta_vision*180.0/PI),(theta_target*180.0/PI),drible_power);
 8003938:	4b5a      	ldr	r3, [pc, #360]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7fc fe2b 	bl	8000598 <__aeabi_f2d>
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	4b58      	ldr	r3, [pc, #352]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003948:	f7fc fe7e 	bl	8000648 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	a342      	add	r3, pc, #264	; (adr r3, 8003a60 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f7fc ff9f 	bl	800089c <__aeabi_ddiv>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4690      	mov	r8, r2
 8003964:	4699      	mov	r9, r3
 8003966:	4b51      	ldr	r3, [pc, #324]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x894>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fc fe14 	bl	8000598 <__aeabi_f2d>
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003976:	f7fc fe67 	bl	8000648 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	a337      	add	r3, pc, #220	; (adr r3, 8003a60 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc ff88 	bl	800089c <__aeabi_ddiv>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4614      	mov	r4, r2
 8003992:	461d      	mov	r5, r3
 8003994:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fdfd 	bl	8000598 <__aeabi_f2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039a6:	e9cd 4500 	strd	r4, r5, [sp]
 80039aa:	4642      	mov	r2, r8
 80039ac:	464b      	mov	r3, r9
 80039ae:	4841      	ldr	r0, [pc, #260]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80039b0:	f00a f886 	bl	800dac0 <iprintf>
    	  printf(" v_power=%.3f",Power_voltage[4]);
 80039b4:	4b40      	ldr	r3, [pc, #256]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fc fded 	bl	8000598 <__aeabi_f2d>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	483e      	ldr	r0, [pc, #248]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 80039c4:	f00a f87c 	bl	800dac0 <iprintf>
    	 // printf(" v_charge=%.3f",voltage[5]);
		 printf(" kick_power=%.4f chip=%d",kick_power,chipEN);
 80039c8:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fde3 	bl	8000598 <__aeabi_f2d>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	493b      	ldr	r1, [pc, #236]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80039d8:	7809      	ldrb	r1, [r1, #0]
 80039da:	9100      	str	r1, [sp, #0]
 80039dc:	483a      	ldr	r0, [pc, #232]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 80039de:	f00a f86f 	bl	800dac0 <iprintf>
		 //		 Rxbuf_from_Ether[8] ,Rxbuf_from_Ether[9],Rxbuf_from_Ether[10],Rxbuf_from_Ether[11],Rxbuf_from_Ether[12]
	     //		,Rxbuf_from_Ether[13],Rxbuf_from_Ether[14]);

		 //printf(" C=%d V=%d SW=%d",Csense[0],Vsense[0],SWdata[0]);
		 //printf(" A=%f",amplitude[4]);
		 printf(" ball:0=%d",ball[0]);
 80039e2:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	4619      	mov	r1, r3
 80039e8:	4839      	ldr	r0, [pc, #228]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 80039ea:	f00a f869 	bl	800dac0 <iprintf>
		 printf(" mouse:x=%d, y=%d",mouse[0],mouse[1]);
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 80039f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f4:	4619      	mov	r1, r3
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 80039f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4836      	ldr	r0, [pc, #216]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8003a00:	f00a f85e 	bl	800dac0 <iprintf>
		 printf("\r\n");
 8003a04:	4835      	ldr	r0, [pc, #212]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 8003a06:	f00a f8e1 	bl	800dbcc <puts>
	 }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	4834      	ldr	r0, [pc, #208]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8003a0e:	f005 f897 	bl	8008b40 <HAL_GPIO_TogglePin>
		  cnt_time_50Hz=0;
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]

		  actuator_power_ONOFF(1);
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f7fd fc07 	bl	800122c <actuator_power_ONOFF>
	 }
	 cnt_time_50Hz++;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003a28:	801a      	strh	r2, [r3, #0]
	 cnt_time_tim++;
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003a34:	801a      	strh	r2, [r3, #0]

	 if(Power_voltage[4]<22.0){
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8003a38:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a3c:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8003a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	d400      	bmi.n	8003a4c <HAL_TIM_PeriodElapsedCallback+0x834>
		 actuator_buzzer(100,100);
	 }

}
 8003a4a:	e003      	b.n	8003a54 <HAL_TIM_PeriodElapsedCallback+0x83c>
		 actuator_buzzer(100,100);
 8003a4c:	2164      	movs	r1, #100	; 0x64
 8003a4e:	2064      	movs	r0, #100	; 0x64
 8003a50:	f7fd fc22 	bl	8001298 <actuator_buzzer>
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a5e:	bf00      	nop
 8003a60:	60000000 	.word	0x60000000
 8003a64:	400921fb 	.word	0x400921fb
 8003a68:	200005cc 	.word	0x200005cc
 8003a6c:	20000638 	.word	0x20000638
 8003a70:	200005ca 	.word	0x200005ca
 8003a74:	200005c9 	.word	0x200005c9
 8003a78:	48000800 	.word	0x48000800
 8003a7c:	200005d4 	.word	0x200005d4
 8003a80:	200005ce 	.word	0x200005ce
 8003a84:	20000634 	.word	0x20000634
 8003a88:	20000630 	.word	0x20000630
 8003a8c:	0800ff9c 	.word	0x0800ff9c
 8003a90:	200005e0 	.word	0x200005e0
 8003a94:	0800ffb4 	.word	0x0800ffb4
 8003a98:	200006d4 	.word	0x200006d4
 8003a9c:	200006d8 	.word	0x200006d8
 8003aa0:	0800ffbc 	.word	0x0800ffbc
 8003aa4:	200006e8 	.word	0x200006e8
 8003aa8:	40668000 	.word	0x40668000
 8003aac:	200006ec 	.word	0x200006ec
 8003ab0:	200006e0 	.word	0x200006e0
 8003ab4:	0800ffe8 	.word	0x0800ffe8
 8003ab8:	20000690 	.word	0x20000690
 8003abc:	0801001c 	.word	0x0801001c
 8003ac0:	200006e4 	.word	0x200006e4
 8003ac4:	200006f0 	.word	0x200006f0
 8003ac8:	0801002c 	.word	0x0801002c
 8003acc:	200006f4 	.word	0x200006f4
 8003ad0:	08010048 	.word	0x08010048
 8003ad4:	200006f8 	.word	0x200006f8
 8003ad8:	08010054 	.word	0x08010054
 8003adc:	08010068 	.word	0x08010068
 8003ae0:	48000400 	.word	0x48000400

08003ae4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	80fb      	strh	r3, [r7, #6]
	if(HAL_GetTick()>2000){
 8003aee:	f7ff f9fb 	bl	8002ee8 <HAL_GetTick>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003af8:	d934      	bls.n	8003b64 <HAL_GPIO_EXTI_Callback+0x80>
		uint8_t cnt=0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
		while(cnt<100){
 8003afe:	e00d      	b.n	8003b1c <HAL_GPIO_EXTI_Callback+0x38>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 8003b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b04:	4819      	ldr	r0, [pc, #100]	; (8003b6c <HAL_GPIO_EXTI_Callback+0x88>)
 8003b06:	f004 ffeb 	bl	8008ae0 <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d109      	bne.n	8003b24 <HAL_GPIO_EXTI_Callback+0x40>
				cnt++;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	3301      	adds	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
				delayUs(1);
 8003b16:	2001      	movs	r0, #1
 8003b18:	f001 f916 	bl	8004d48 <delayUs>
		while(cnt<100){
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b63      	cmp	r3, #99	; 0x63
 8003b20:	d9ee      	bls.n	8003b00 <HAL_GPIO_EXTI_Callback+0x1c>
 8003b22:	e000      	b.n	8003b26 <HAL_GPIO_EXTI_Callback+0x42>
			}
			else{
				break;
 8003b24:	bf00      	nop
			}
		}

		if(cnt>=100){
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b63      	cmp	r3, #99	; 0x63
 8003b2a:	d918      	bls.n	8003b5e <HAL_GPIO_EXTI_Callback+0x7a>
			Emargency=1;
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 8003b32:	4810      	ldr	r0, [pc, #64]	; (8003b74 <HAL_GPIO_EXTI_Callback+0x90>)
 8003b34:	f009 ffc4 	bl	800dac0 <iprintf>
			for(int i=0;i<50;i++){
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	e004      	b.n	8003b48 <HAL_GPIO_EXTI_Callback+0x64>
				maintask_emargency();
 8003b3e:	f000 fc87 	bl	8004450 <maintask_emargency>
			for(int i=0;i<50;i++){
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b31      	cmp	r3, #49	; 0x31
 8003b4c:	ddf7      	ble.n	8003b3e <HAL_GPIO_EXTI_Callback+0x5a>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b54:	4805      	ldr	r0, [pc, #20]	; (8003b6c <HAL_GPIO_EXTI_Callback+0x88>)
 8003b56:	f004 ffdb 	bl	8008b10 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8003b5a:	f7ff f99d 	bl	8002e98 <__NVIC_SystemReset>
			Emargency=0;
		}
		else{
			Emargency=0;
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	48000400 	.word	0x48000400
 8003b70:	2000065e 	.word	0x2000065e
 8003b74:	0801006c 	.word	0x0801006c

08003b78 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8248 	beq.w	800401e <HAL_FDCAN_RxFifo0Callback+0x4a6>
	  {
   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003b8e:	4bbb      	ldr	r3, [pc, #748]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003b90:	4abb      	ldr	r2, [pc, #748]	; (8003e80 <HAL_FDCAN_RxFifo0Callback+0x308>)
 8003b92:	2140      	movs	r1, #64	; 0x40
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f004 f9c5 	bl	8007f24 <HAL_FDCAN_GetRxMessage>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    Error_Handler();
 8003ba0:	f001 f894 	bl	8004ccc <Error_Handler>
    }
	switch (RxHeader.Identifier){
 8003ba4:	4bb6      	ldr	r3, [pc, #728]	; (8003e80 <HAL_FDCAN_RxFifo0Callback+0x308>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f240 4201 	movw	r2, #1025	; 0x401
 8003bac:	4293      	cmp	r3, r2
 8003bae:	f000 8109 	beq.w	8003dc4 <HAL_FDCAN_RxFifo0Callback+0x24c>
 8003bb2:	f240 4201 	movw	r2, #1025	; 0x401
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f200 8234 	bhi.w	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	f200 809d 	bhi.w	8003cfc <HAL_FDCAN_RxFifo0Callback+0x184>
 8003bc2:	e08b      	b.n	8003cdc <HAL_FDCAN_RxFifo0Callback+0x164>
 8003bc4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003bc8:	2b41      	cmp	r3, #65	; 0x41
 8003bca:	f200 822b 	bhi.w	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003eb9 	.word	0x08003eb9
 8003bd8:	08003edf 	.word	0x08003edf
 8003bdc:	08003f05 	.word	0x08003f05
 8003be0:	08003f2b 	.word	0x08003f2b
 8003be4:	08003f51 	.word	0x08003f51
 8003be8:	08004025 	.word	0x08004025
 8003bec:	08004025 	.word	0x08004025
 8003bf0:	08004025 	.word	0x08004025
 8003bf4:	08004025 	.word	0x08004025
 8003bf8:	08004025 	.word	0x08004025
 8003bfc:	08004025 	.word	0x08004025
 8003c00:	08004025 	.word	0x08004025
 8003c04:	08004025 	.word	0x08004025
 8003c08:	08004025 	.word	0x08004025
 8003c0c:	08004025 	.word	0x08004025
 8003c10:	08004025 	.word	0x08004025
 8003c14:	08003d65 	.word	0x08003d65
 8003c18:	08004025 	.word	0x08004025
 8003c1c:	08004025 	.word	0x08004025
 8003c20:	08004025 	.word	0x08004025
 8003c24:	08004025 	.word	0x08004025
 8003c28:	08003d77 	.word	0x08003d77
 8003c2c:	08004025 	.word	0x08004025
 8003c30:	08004025 	.word	0x08004025
 8003c34:	08004025 	.word	0x08004025
 8003c38:	08004025 	.word	0x08004025
 8003c3c:	08004025 	.word	0x08004025
 8003c40:	08004025 	.word	0x08004025
 8003c44:	08004025 	.word	0x08004025
 8003c48:	08004025 	.word	0x08004025
 8003c4c:	08004025 	.word	0x08004025
 8003c50:	08004025 	.word	0x08004025
 8003c54:	08003f77 	.word	0x08003f77
 8003c58:	08003f89 	.word	0x08003f89
 8003c5c:	08003f9b 	.word	0x08003f9b
 8003c60:	08003fad 	.word	0x08003fad
 8003c64:	08003d89 	.word	0x08003d89
 8003c68:	08003d9b 	.word	0x08003d9b
 8003c6c:	08004025 	.word	0x08004025
 8003c70:	08004025 	.word	0x08004025
 8003c74:	08004025 	.word	0x08004025
 8003c78:	08004025 	.word	0x08004025
 8003c7c:	08004025 	.word	0x08004025
 8003c80:	08004025 	.word	0x08004025
 8003c84:	08004025 	.word	0x08004025
 8003c88:	08004025 	.word	0x08004025
 8003c8c:	08004025 	.word	0x08004025
 8003c90:	08004025 	.word	0x08004025
 8003c94:	08003fbf 	.word	0x08003fbf
 8003c98:	08003fd7 	.word	0x08003fd7
 8003c9c:	08003fef 	.word	0x08003fef
 8003ca0:	08004007 	.word	0x08004007
 8003ca4:	08003dad 	.word	0x08003dad
 8003ca8:	08004025 	.word	0x08004025
 8003cac:	08004025 	.word	0x08004025
 8003cb0:	08004025 	.word	0x08004025
 8003cb4:	08004025 	.word	0x08004025
 8003cb8:	08004025 	.word	0x08004025
 8003cbc:	08004025 	.word	0x08004025
 8003cc0:	08004025 	.word	0x08004025
 8003cc4:	08004025 	.word	0x08004025
 8003cc8:	08004025 	.word	0x08004025
 8003ccc:	08004025 	.word	0x08004025
 8003cd0:	08004025 	.word	0x08004025
 8003cd4:	08003d3d 	.word	0x08003d3d
 8003cd8:	08003e4d 	.word	0x08003e4d
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	f200 81a1 	bhi.w	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <HAL_FDCAN_RxFifo0Callback+0x170>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d11 	.word	0x08003d11
 8003cec:	08003d27 	.word	0x08003d27
 8003cf0:	08004023 	.word	0x08004023
 8003cf4:	08004023 	.word	0x08004023
 8003cf8:	08004023 	.word	0x08004023
 8003cfc:	f240 2241 	movw	r2, #577	; 0x241
 8003d00:	4293      	cmp	r3, r2
 8003d02:	f200 818f 	bhi.w	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
 8003d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0a:	f4bf af5b 	bcs.w	8003bc4 <HAL_FDCAN_RxFifo0Callback+0x4c>

	}
	}


}
 8003d0e:	e189      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		error_No[0]=RxData[0];
 8003d10:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	4b5b      	ldr	r3, [pc, #364]	; (8003e84 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 8003d16:	701a      	strb	r2, [r3, #0]
		error_No[1]=RxData[1];
 8003d18:	4b58      	ldr	r3, [pc, #352]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d1a:	785a      	ldrb	r2, [r3, #1]
 8003d1c:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 8003d1e:	705a      	strb	r2, [r3, #1]
		Error_Handler();
 8003d20:	f000 ffd4 	bl	8004ccc <Error_Handler>
		break;
 8003d24:	e17e      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		error_No[0]=RxData[0];
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	4b56      	ldr	r3, [pc, #344]	; (8003e84 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 8003d2c:	701a      	strb	r2, [r3, #0]
		error_No[1]=RxData[1];
 8003d2e:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d30:	785a      	ldrb	r2, [r3, #1]
 8003d32:	4b54      	ldr	r3, [pc, #336]	; (8003e84 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 8003d34:	705a      	strb	r2, [r3, #1]
		maintask_stop();
 8003d36:	f000 fca3 	bl	8004680 <maintask_stop>
		break;
 8003d3a:	e173      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		ball[0]=RxData[0];
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <HAL_FDCAN_RxFifo0Callback+0x310>)
 8003d42:	701a      	strb	r2, [r3, #0]
		ball[1]=RxData[1];
 8003d44:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d46:	785a      	ldrb	r2, [r3, #1]
 8003d48:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <HAL_FDCAN_RxFifo0Callback+0x310>)
 8003d4a:	705a      	strb	r2, [r3, #1]
		ball[2]=RxData[2];
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d4e:	789a      	ldrb	r2, [r3, #2]
 8003d50:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <HAL_FDCAN_RxFifo0Callback+0x310>)
 8003d52:	709a      	strb	r2, [r3, #2]
		ball[3]=RxData[3];
 8003d54:	4b49      	ldr	r3, [pc, #292]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d56:	78da      	ldrb	r2, [r3, #3]
 8003d58:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_FDCAN_RxFifo0Callback+0x310>)
 8003d5a:	70da      	strb	r2, [r3, #3]
		check_FC=1;
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <HAL_FDCAN_RxFifo0Callback+0x314>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
		break;
 8003d62:	e15f      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		Power_voltage[4]=uchar4_to_float(RxData);
 8003d64:	4845      	ldr	r0, [pc, #276]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d66:	f001 fe2d 	bl	80059c4 <uchar4_to_float>
 8003d6a:	eef0 7a40 	vmov.f32	s15, s0
 8003d6e:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <HAL_FDCAN_RxFifo0Callback+0x318>)
 8003d70:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8003d74:	e156      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		Power_voltage[5]=uchar4_to_float(RxData);
 8003d76:	4841      	ldr	r0, [pc, #260]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d78:	f001 fe24 	bl	80059c4 <uchar4_to_float>
 8003d7c:	eef0 7a40 	vmov.f32	s15, s0
 8003d80:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_FDCAN_RxFifo0Callback+0x318>)
 8003d82:	edc3 7a05 	vstr	s15, [r3, #20]
		break;
 8003d86:	e14d      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		tempercher[4]=uchar4_to_float(RxData);
 8003d88:	483c      	ldr	r0, [pc, #240]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d8a:	f001 fe1b 	bl	80059c4 <uchar4_to_float>
 8003d8e:	eef0 7a40 	vmov.f32	s15, s0
 8003d92:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <HAL_FDCAN_RxFifo0Callback+0x31c>)
 8003d94:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8003d98:	e144      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		tempercher[5]=uchar4_to_float(RxData);
 8003d9a:	4838      	ldr	r0, [pc, #224]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003d9c:	f001 fe12 	bl	80059c4 <uchar4_to_float>
 8003da0:	eef0 7a40 	vmov.f32	s15, s0
 8003da4:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <HAL_FDCAN_RxFifo0Callback+0x31c>)
 8003da6:	edc3 7a05 	vstr	s15, [r3, #20]
		break;
 8003daa:	e13b      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		amplitude[4]=uchar4_to_float(RxData);
 8003dac:	4833      	ldr	r0, [pc, #204]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003dae:	f001 fe09 	bl	80059c4 <uchar4_to_float>
 8003db2:	eef0 7a40 	vmov.f32	s15, s0
 8003db6:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <HAL_FDCAN_RxFifo0Callback+0x320>)
 8003db8:	edc3 7a04 	vstr	s15, [r3, #16]
		check_power=1;
 8003dbc:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_FDCAN_RxFifo0Callback+0x324>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
		break;
 8003dc2:	e12f      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		data_from_ether[8]=RxData[0];
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003dca:	721a      	strb	r2, [r3, #8]
		data_from_ether[9]=RxData[1];
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003dce:	785a      	ldrb	r2, [r3, #1]
 8003dd0:	4b33      	ldr	r3, [pc, #204]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003dd2:	725a      	strb	r2, [r3, #9]
		data_from_ether[10]=RxData[2];
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003dd6:	789a      	ldrb	r2, [r3, #2]
 8003dd8:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003dda:	729a      	strb	r2, [r3, #10]
		data_from_ether[11]=RxData[3];
 8003ddc:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003dde:	78da      	ldrb	r2, [r3, #3]
 8003de0:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003de2:	72da      	strb	r2, [r3, #11]
		data_from_ether[12]=RxData[4];
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003de6:	791a      	ldrb	r2, [r3, #4]
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003dea:	731a      	strb	r2, [r3, #12]
		if(data_from_ether[8]>100){
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003dee:	7a1b      	ldrb	r3, [r3, #8]
 8003df0:	2b64      	cmp	r3, #100	; 0x64
 8003df2:	d909      	bls.n	8003e08 <HAL_FDCAN_RxFifo0Callback+0x290>
			chipEN=1;
 8003df4:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
			data_from_ether[8]=data_from_ether[8]-100;
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003dfc:	7a1b      	ldrb	r3, [r3, #8]
 8003dfe:	3b64      	subs	r3, #100	; 0x64
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003e04:	721a      	strb	r2, [r3, #8]
 8003e06:	e002      	b.n	8003e0e <HAL_FDCAN_RxFifo0Callback+0x296>
			chipEN=0;
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_FDCAN_RxFifo0Callback+0x32c>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
		kick_power=(float32_t)data_from_ether[8]/20.0;
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003e10:	7a1b      	ldrb	r3, [r3, #8]
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e1a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e22:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_FDCAN_RxFifo0Callback+0x330>)
 8003e24:	edc3 7a00 	vstr	s15, [r3]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003e2a:	7a5b      	ldrb	r3, [r3, #9]
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e34:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_FDCAN_RxFifo0Callback+0x334>)
 8003e3e:	edc3 7a00 	vstr	s15, [r3]
		keeper_EN=data_from_ether[10];
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_FDCAN_RxFifo0Callback+0x328>)
 8003e44:	7a9a      	ldrb	r2, [r3, #10]
 8003e46:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <HAL_FDCAN_RxFifo0Callback+0x338>)
 8003e48:	701a      	strb	r2, [r3, #0]
	break;
 8003e4a:	e0eb      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			mouse[0]=(int16_t)(RxData[0]<<8)|RxData[1];
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003e56:	785b      	ldrb	r3, [r3, #1]
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b21a      	sxth	r2, r3
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_FDCAN_RxFifo0Callback+0x33c>)
 8003e60:	801a      	strh	r2, [r3, #0]
			mouse[1]=(int16_t)(RxData[2]<<8)|RxData[3];
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003e64:	789b      	ldrb	r3, [r3, #2]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	b21a      	sxth	r2, r3
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003e6c:	78db      	ldrb	r3, [r3, #3]
 8003e6e:	b21b      	sxth	r3, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b21a      	sxth	r2, r3
 8003e74:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_FDCAN_RxFifo0Callback+0x33c>)
 8003e76:	805a      	strh	r2, [r3, #2]
			break;
 8003e78:	e0d4      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
 8003e7a:	bf00      	nop
 8003e7c:	20000660 	.word	0x20000660
 8003e80:	20000740 	.word	0x20000740
 8003e84:	200006fc 	.word	0x200006fc
 8003e88:	200006f4 	.word	0x200006f4
 8003e8c:	2000071a 	.word	0x2000071a
 8003e90:	20000690 	.word	0x20000690
 8003e94:	200006a8 	.word	0x200006a8
 8003e98:	200006c0 	.word	0x200006c0
 8003e9c:	20000719 	.word	0x20000719
 8003ea0:	20000638 	.word	0x20000638
 8003ea4:	200006f0 	.word	0x200006f0
 8003ea8:	200006e4 	.word	0x200006e4
 8003eac:	200006e0 	.word	0x200006e0
 8003eb0:	20000714 	.word	0x20000714
 8003eb4:	200006f8 	.word	0x200006f8
			  motor_feedback[0]=uchar4_to_float(RxData);
 8003eb8:	485c      	ldr	r0, [pc, #368]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003eba:	f001 fd83 	bl	80059c4 <uchar4_to_float>
 8003ebe:	eef0 7a40 	vmov.f32	s15, s0
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003ec4:	edc3 7a00 	vstr	s15, [r3]
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8003ec8:	4b59      	ldr	r3, [pc, #356]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003eca:	edd3 7a00 	vldr	s15, [r3]
 8003ece:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004034 <HAL_FDCAN_RxFifo0Callback+0x4bc>
 8003ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed6:	4b58      	ldr	r3, [pc, #352]	; (8004038 <HAL_FDCAN_RxFifo0Callback+0x4c0>)
 8003ed8:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8003edc:	e0a2      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  motor_feedback[1]=uchar4_to_float(RxData);
 8003ede:	4853      	ldr	r0, [pc, #332]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003ee0:	f001 fd70 	bl	80059c4 <uchar4_to_float>
 8003ee4:	eef0 7a40 	vmov.f32	s15, s0
 8003ee8:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003eea:	edc3 7a01 	vstr	s15, [r3, #4]
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8003eee:	4b50      	ldr	r3, [pc, #320]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003ef0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ef4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004034 <HAL_FDCAN_RxFifo0Callback+0x4bc>
 8003ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efc:	4b4e      	ldr	r3, [pc, #312]	; (8004038 <HAL_FDCAN_RxFifo0Callback+0x4c0>)
 8003efe:	edc3 7a01 	vstr	s15, [r3, #4]
			  break;
 8003f02:	e08f      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  motor_feedback[2]=uchar4_to_float(RxData);
 8003f04:	4849      	ldr	r0, [pc, #292]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f06:	f001 fd5d 	bl	80059c4 <uchar4_to_float>
 8003f0a:	eef0 7a40 	vmov.f32	s15, s0
 8003f0e:	4b48      	ldr	r3, [pc, #288]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f10:	edc3 7a02 	vstr	s15, [r3, #8]
			  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8003f14:	4b46      	ldr	r3, [pc, #280]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f16:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f1a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004034 <HAL_FDCAN_RxFifo0Callback+0x4bc>
 8003f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f22:	4b45      	ldr	r3, [pc, #276]	; (8004038 <HAL_FDCAN_RxFifo0Callback+0x4c0>)
 8003f24:	edc3 7a02 	vstr	s15, [r3, #8]
			  break;
 8003f28:	e07c      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  motor_feedback[3]=uchar4_to_float(RxData);
 8003f2a:	4840      	ldr	r0, [pc, #256]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f2c:	f001 fd4a 	bl	80059c4 <uchar4_to_float>
 8003f30:	eef0 7a40 	vmov.f32	s15, s0
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f36:	edc3 7a03 	vstr	s15, [r3, #12]
			  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f40:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004034 <HAL_FDCAN_RxFifo0Callback+0x4bc>
 8003f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f48:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <HAL_FDCAN_RxFifo0Callback+0x4c0>)
 8003f4a:	edc3 7a03 	vstr	s15, [r3, #12]
			  break;
 8003f4e:	e069      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  motor_feedback[4]=uchar4_to_float(RxData);
 8003f50:	4836      	ldr	r0, [pc, #216]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f52:	f001 fd37 	bl	80059c4 <uchar4_to_float>
 8003f56:	eef0 7a40 	vmov.f32	s15, s0
 8003f5a:	4b35      	ldr	r3, [pc, #212]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f5c:	edc3 7a04 	vstr	s15, [r3, #16]
			  motor_feedback_velocity[4]=motor_feedback[3]*rotation_longth;
 8003f60:	4b33      	ldr	r3, [pc, #204]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f66:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004034 <HAL_FDCAN_RxFifo0Callback+0x4bc>
 8003f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f6e:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_FDCAN_RxFifo0Callback+0x4c0>)
 8003f70:	edc3 7a04 	vstr	s15, [r3, #16]
			  break;
 8003f74:	e056      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  tempercher[0]=uchar4_to_float(RxData);
 8003f76:	482d      	ldr	r0, [pc, #180]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f78:	f001 fd24 	bl	80059c4 <uchar4_to_float>
 8003f7c:	eef0 7a40 	vmov.f32	s15, s0
 8003f80:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_FDCAN_RxFifo0Callback+0x4c4>)
 8003f82:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8003f86:	e04d      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  tempercher[1]=uchar4_to_float(RxData);
 8003f88:	4828      	ldr	r0, [pc, #160]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f8a:	f001 fd1b 	bl	80059c4 <uchar4_to_float>
 8003f8e:	eef0 7a40 	vmov.f32	s15, s0
 8003f92:	4b2a      	ldr	r3, [pc, #168]	; (800403c <HAL_FDCAN_RxFifo0Callback+0x4c4>)
 8003f94:	edc3 7a01 	vstr	s15, [r3, #4]
			  break;
 8003f98:	e044      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  tempercher[2]=uchar4_to_float(RxData);
 8003f9a:	4824      	ldr	r0, [pc, #144]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f9c:	f001 fd12 	bl	80059c4 <uchar4_to_float>
 8003fa0:	eef0 7a40 	vmov.f32	s15, s0
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_FDCAN_RxFifo0Callback+0x4c4>)
 8003fa6:	edc3 7a02 	vstr	s15, [r3, #8]
			  break;
 8003faa:	e03b      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  tempercher[3]=uchar4_to_float(RxData);
 8003fac:	481f      	ldr	r0, [pc, #124]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003fae:	f001 fd09 	bl	80059c4 <uchar4_to_float>
 8003fb2:	eef0 7a40 	vmov.f32	s15, s0
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <HAL_FDCAN_RxFifo0Callback+0x4c4>)
 8003fb8:	edc3 7a03 	vstr	s15, [r3, #12]
			  break;
 8003fbc:	e032      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  amplitude[0]=uchar4_to_float(RxData);
 8003fbe:	481b      	ldr	r0, [pc, #108]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003fc0:	f001 fd00 	bl	80059c4 <uchar4_to_float>
 8003fc4:	eef0 7a40 	vmov.f32	s15, s0
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <HAL_FDCAN_RxFifo0Callback+0x4c8>)
 8003fca:	edc3 7a00 	vstr	s15, [r3]
			  check_motor1=1;
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_FDCAN_RxFifo0Callback+0x4cc>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
			  break;
 8003fd4:	e026      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  amplitude[1]=uchar4_to_float(RxData);
 8003fd6:	4815      	ldr	r0, [pc, #84]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003fd8:	f001 fcf4 	bl	80059c4 <uchar4_to_float>
 8003fdc:	eef0 7a40 	vmov.f32	s15, s0
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_FDCAN_RxFifo0Callback+0x4c8>)
 8003fe2:	edc3 7a01 	vstr	s15, [r3, #4]
			  check_motor2=1;
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_FDCAN_RxFifo0Callback+0x4d0>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
			  break;
 8003fec:	e01a      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  amplitude[2]=uchar4_to_float(RxData);
 8003fee:	480f      	ldr	r0, [pc, #60]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003ff0:	f001 fce8 	bl	80059c4 <uchar4_to_float>
 8003ff4:	eef0 7a40 	vmov.f32	s15, s0
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_FDCAN_RxFifo0Callback+0x4c8>)
 8003ffa:	edc3 7a02 	vstr	s15, [r3, #8]
			  check_motor3=1;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_FDCAN_RxFifo0Callback+0x4d4>)
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
			  break;
 8004004:	e00e      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
			  amplitude[3]=uchar4_to_float(RxData);
 8004006:	4809      	ldr	r0, [pc, #36]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8004008:	f001 fcdc 	bl	80059c4 <uchar4_to_float>
 800400c:	eef0 7a40 	vmov.f32	s15, s0
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_FDCAN_RxFifo0Callback+0x4c8>)
 8004012:	edc3 7a03 	vstr	s15, [r3, #12]
			  check_motor4=1;
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4d8>)
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
			  break;
 800401c:	e002      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
	}
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <HAL_FDCAN_RxFifo0Callback+0x4ac>
		break;
 8004022:	bf00      	nop
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000660 	.word	0x20000660
 8004030:	20000668 	.word	0x20000668
 8004034:	3e3426c8 	.word	0x3e3426c8
 8004038:	2000067c 	.word	0x2000067c
 800403c:	200006a8 	.word	0x200006a8
 8004040:	200006c0 	.word	0x200006c0
 8004044:	20000715 	.word	0x20000715
 8004048:	20000716 	.word	0x20000716
 800404c:	20000717 	.word	0x20000717
 8004050:	20000718 	.word	0x20000718
 8004054:	00000000 	.word	0x00000000

08004058 <maintask_run>:


void maintask_run(){
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	ed2d 8b02 	vpush	{d8}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
	//theta_target=0.0;
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*20.0)
 8004062:	4bb7      	ldr	r3, [pc, #732]	; (8004340 <maintask_run+0x2e8>)
 8004064:	ed93 8a00 	vldr	s16, [r3]
 8004068:	4bb6      	ldr	r3, [pc, #728]	; (8004344 <maintask_run+0x2ec>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa93 	bl	8000598 <__aeabi_f2d>
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	4bb4      	ldr	r3, [pc, #720]	; (8004348 <maintask_run+0x2f0>)
 8004078:	f7fc fc10 	bl	800089c <__aeabi_ddiv>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	a3a2      	add	r3, pc, #648	; (adr r3, 8004310 <maintask_run+0x2b8>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f7fc fadd 	bl	8000648 <__aeabi_dmul>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7fc fdcf 	bl	8000c38 <__aeabi_d2f>
 800409a:	4603      	mov	r3, r0
 800409c:	ee00 3a90 	vmov	s1, r3
 80040a0:	eeb0 0a48 	vmov.f32	s0, s16
 80040a4:	f000 fbe8 	bl	8004878 <getAngleDiff>
 80040a8:	ee10 3a10 	vmov	r3, s0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fa73 	bl	8000598 <__aeabi_f2d>
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	4ba5      	ldr	r3, [pc, #660]	; (800434c <maintask_run+0x2f4>)
 80040b8:	f7fc fac6 	bl	8000648 <__aeabi_dmul>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	461d      	mov	r5, r3
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*4.5*57.29);
 80040c4:	4b9f      	ldr	r3, [pc, #636]	; (8004344 <maintask_run+0x2ec>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc fa65 	bl	8000598 <__aeabi_f2d>
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	4b9d      	ldr	r3, [pc, #628]	; (8004348 <maintask_run+0x2f0>)
 80040d4:	f7fc fbe2 	bl	800089c <__aeabi_ddiv>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	a38b      	add	r3, pc, #556	; (adr r3, 8004310 <maintask_run+0x2b8>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f7fc faaf 	bl	8000648 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fc fda1 	bl	8000c38 <__aeabi_d2f>
 80040f6:	4606      	mov	r6, r0
 80040f8:	4b95      	ldr	r3, [pc, #596]	; (8004350 <maintask_run+0x2f8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc fa4b 	bl	8000598 <__aeabi_f2d>
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	4b90      	ldr	r3, [pc, #576]	; (8004348 <maintask_run+0x2f0>)
 8004108:	f7fc fbc8 	bl	800089c <__aeabi_ddiv>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	a37e      	add	r3, pc, #504	; (adr r3, 8004310 <maintask_run+0x2b8>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc fa95 	bl	8000648 <__aeabi_dmul>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	f7fc fd87 	bl	8000c38 <__aeabi_d2f>
 800412a:	4603      	mov	r3, r0
 800412c:	ee00 3a90 	vmov	s1, r3
 8004130:	ee00 6a10 	vmov	s0, r6
 8004134:	f000 fba0 	bl	8004878 <getAngleDiff>
 8004138:	ee10 3a10 	vmov	r3, s0
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc fa2b 	bl	8000598 <__aeabi_f2d>
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	4b83      	ldr	r3, [pc, #524]	; (8004354 <maintask_run+0x2fc>)
 8004148:	f7fc fa7e 	bl	8000648 <__aeabi_dmul>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	a370      	add	r3, pc, #448	; (adr r3, 8004318 <maintask_run+0x2c0>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc fa75 	bl	8000648 <__aeabi_dmul>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f7fc f8b7 	bl	80002d8 <__aeabi_dsub>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	f7fc fd61 	bl	8000c38 <__aeabi_d2f>
 8004176:	4603      	mov	r3, r0
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*20.0)
 8004178:	4a77      	ldr	r2, [pc, #476]	; (8004358 <maintask_run+0x300>)
 800417a:	6013      	str	r3, [r2, #0]

	if(omega>6*M_PI){omega=6*M_PI;}
 800417c:	4b76      	ldr	r3, [pc, #472]	; (8004358 <maintask_run+0x300>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc fa09 	bl	8000598 <__aeabi_f2d>
 8004186:	a366      	add	r3, pc, #408	; (adr r3, 8004320 <maintask_run+0x2c8>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f7fc fcec 	bl	8000b68 <__aeabi_dcmpgt>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <maintask_run+0x144>
 8004196:	4b70      	ldr	r3, [pc, #448]	; (8004358 <maintask_run+0x300>)
 8004198:	4a70      	ldr	r2, [pc, #448]	; (800435c <maintask_run+0x304>)
 800419a:	601a      	str	r2, [r3, #0]
	if(omega<-6*M_PI){omega=-6*M_PI;}
 800419c:	4b6e      	ldr	r3, [pc, #440]	; (8004358 <maintask_run+0x300>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc f9f9 	bl	8000598 <__aeabi_f2d>
 80041a6:	a360      	add	r3, pc, #384	; (adr r3, 8004328 <maintask_run+0x2d0>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc fcbe 	bl	8000b2c <__aeabi_dcmplt>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <maintask_run+0x164>
 80041b6:	4b68      	ldr	r3, [pc, #416]	; (8004358 <maintask_run+0x300>)
 80041b8:	4a69      	ldr	r2, [pc, #420]	; (8004360 <maintask_run+0x308>)
 80041ba:	601a      	str	r2, [r3, #0]

	omni_move(vel_surge, vel_sway, omega,1.0);
 80041bc:	4b69      	ldr	r3, [pc, #420]	; (8004364 <maintask_run+0x30c>)
 80041be:	edd3 7a00 	vldr	s15, [r3]
 80041c2:	4b69      	ldr	r3, [pc, #420]	; (8004368 <maintask_run+0x310>)
 80041c4:	ed93 7a00 	vldr	s14, [r3]
 80041c8:	4b63      	ldr	r3, [pc, #396]	; (8004358 <maintask_run+0x300>)
 80041ca:	edd3 6a00 	vldr	s13, [r3]
 80041ce:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80041d2:	eeb0 1a66 	vmov.f32	s2, s13
 80041d6:	eef0 0a47 	vmov.f32	s1, s14
 80041da:	eeb0 0a67 	vmov.f32	s0, s15
 80041de:	f000 fdcb 	bl	8004d78 <omni_move>
	  if(kick_power>0){
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <maintask_run+0x314>)
 80041e4:	edd3 7a00 	vldr	s15, [r3]
 80041e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f0:	dd39      	ble.n	8004266 <maintask_run+0x20e>
			if(ball[0]==1){
 80041f2:	4b5f      	ldr	r3, [pc, #380]	; (8004370 <maintask_run+0x318>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d122      	bne.n	8004240 <maintask_run+0x1e8>
				if(kick_state==0){
 80041fa:	4b5e      	ldr	r3, [pc, #376]	; (8004374 <maintask_run+0x31c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11e      	bne.n	8004240 <maintask_run+0x1e8>
				  uint8_t kick_power_param=(float)kick_power*255.0;
 8004202:	4b5a      	ldr	r3, [pc, #360]	; (800436c <maintask_run+0x314>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f9c6 	bl	8000598 <__aeabi_f2d>
 800420c:	a348      	add	r3, pc, #288	; (adr r3, 8004330 <maintask_run+0x2d8>)
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f7fc fa19 	bl	8000648 <__aeabi_dmul>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fceb 	bl	8000bf8 <__aeabi_d2uiz>
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
				  printf(" kick=%d\r\n",kick_power_param);
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	4619      	mov	r1, r3
 800422a:	4853      	ldr	r0, [pc, #332]	; (8004378 <maintask_run+0x320>)
 800422c:	f009 fc48 	bl	800dac0 <iprintf>
				  actuator_kicker(3, (uint8_t)kick_power_param);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	4619      	mov	r1, r3
 8004234:	2003      	movs	r0, #3
 8004236:	f7fc ffe2 	bl	80011fe <actuator_kicker>
				kick_state=1;
 800423a:	4b4e      	ldr	r3, [pc, #312]	; (8004374 <maintask_run+0x31c>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
				}
			}
			if(kick_state==1){
 8004240:	4b4c      	ldr	r3, [pc, #304]	; (8004374 <maintask_run+0x31c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10e      	bne.n	8004266 <maintask_run+0x20e>
				kick_time++;
 8004248:	4b4c      	ldr	r3, [pc, #304]	; (800437c <maintask_run+0x324>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a4b      	ldr	r2, [pc, #300]	; (800437c <maintask_run+0x324>)
 8004250:	6013      	str	r3, [r2, #0]
				if(kick_time>100){
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <maintask_run+0x324>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	dd05      	ble.n	8004266 <maintask_run+0x20e>
					kick_state=0;
 800425a:	4b46      	ldr	r3, [pc, #280]	; (8004374 <maintask_run+0x31c>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
					kick_time=0;
 8004260:	4b46      	ldr	r3, [pc, #280]	; (800437c <maintask_run+0x324>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
				}
			}
	  }

	  if(chipEN==1){
 8004266:	4b46      	ldr	r3, [pc, #280]	; (8004380 <maintask_run+0x328>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d104      	bne.n	8004278 <maintask_run+0x220>
		  actuator_kicker(2, 1);
 800426e:	2101      	movs	r1, #1
 8004270:	2002      	movs	r0, #2
 8004272:	f7fc ffc4 	bl	80011fe <actuator_kicker>
 8004276:	e003      	b.n	8004280 <maintask_run+0x228>
	  }
	  else{
		  actuator_kicker(2, 0);
 8004278:	2100      	movs	r1, #0
 800427a:	2002      	movs	r0, #2
 800427c:	f7fc ffbf 	bl	80011fe <actuator_kicker>
	  }
	  actuator_kicker(1, 1);
 8004280:	2101      	movs	r1, #1
 8004282:	2001      	movs	r0, #1
 8004284:	f7fc ffbb 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(250.0);
 8004288:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004384 <maintask_run+0x32c>
 800428c:	f7fc ff96 	bl	80011bc <actuator_kicker_voltage>

	  actuator_motor5(drible_power,1.0);
 8004290:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <maintask_run+0x330>)
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800429a:	eeb0 0a67 	vmov.f32	s0, s15
 800429e:	f7fc ff5d 	bl	800115c <actuator_motor5>

	  if(yawAngle<0){
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <maintask_run+0x2ec>)
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b0:	d56e      	bpl.n	8004390 <maintask_run+0x338>
		  yawAngle_send=(float)(round((yawAngle+359.0)/2.0));
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <maintask_run+0x2ec>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc f96e 	bl	8000598 <__aeabi_f2d>
 80042bc:	a31e      	add	r3, pc, #120	; (adr r3, 8004338 <maintask_run+0x2e0>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f7fc f80b 	bl	80002dc <__adddf3>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042d6:	f7fc fae1 	bl	800089c <__aeabi_ddiv>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	ec43 2b17 	vmov	d7, r2, r3
 80042e2:	eeb0 0a47 	vmov.f32	s0, s14
 80042e6:	eef0 0a67 	vmov.f32	s1, s15
 80042ea:	f00b fdef 	bl	800fecc <round>
 80042ee:	ec53 2b10 	vmov	r2, r3, d0
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fc fc9f 	bl	8000c38 <__aeabi_d2f>
 80042fa:	ee07 0a90 	vmov	s15, r0
 80042fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004302:	ee17 3a90 	vmov	r3, s15
 8004306:	b29a      	uxth	r2, r3
 8004308:	4b20      	ldr	r3, [pc, #128]	; (800438c <maintask_run+0x334>)
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e064      	b.n	80043d8 <maintask_run+0x380>
 800430e:	bf00      	nop
 8004310:	54442d18 	.word	0x54442d18
 8004314:	400921fb 	.word	0x400921fb
 8004318:	b851eb85 	.word	0xb851eb85
 800431c:	404ca51e 	.word	0x404ca51e
 8004320:	7f3321d2 	.word	0x7f3321d2
 8004324:	4032d97c 	.word	0x4032d97c
 8004328:	7f3321d2 	.word	0x7f3321d2
 800432c:	c032d97c 	.word	0xc032d97c
 8004330:	00000000 	.word	0x00000000
 8004334:	406fe000 	.word	0x406fe000
 8004338:	00000000 	.word	0x00000000
 800433c:	40767000 	.word	0x40767000
 8004340:	200006ec 	.word	0x200006ec
 8004344:	200005e0 	.word	0x200005e0
 8004348:	40668000 	.word	0x40668000
 800434c:	40340000 	.word	0x40340000
 8004350:	200005d0 	.word	0x200005d0
 8004354:	40120000 	.word	0x40120000
 8004358:	200006dc 	.word	0x200006dc
 800435c:	4196cbe4 	.word	0x4196cbe4
 8004360:	c196cbe4 	.word	0xc196cbe4
 8004364:	200006d4 	.word	0x200006d4
 8004368:	200006d8 	.word	0x200006d8
 800436c:	200006e4 	.word	0x200006e4
 8004370:	200006f4 	.word	0x200006f4
 8004374:	20000630 	.word	0x20000630
 8004378:	0801008c 	.word	0x0801008c
 800437c:	20000634 	.word	0x20000634
 8004380:	200006f0 	.word	0x200006f0
 8004384:	437a0000 	.word	0x437a0000
 8004388:	200006e0 	.word	0x200006e0
 800438c:	200005d6 	.word	0x200005d6
	  }
	  else{
		  yawAngle_send=(float)(round(yawAngle/2.0));
 8004390:	4b29      	ldr	r3, [pc, #164]	; (8004438 <maintask_run+0x3e0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc f8ff 	bl	8000598 <__aeabi_f2d>
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043a2:	f7fc fa7b 	bl	800089c <__aeabi_ddiv>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	ec43 2b17 	vmov	d7, r2, r3
 80043ae:	eeb0 0a47 	vmov.f32	s0, s14
 80043b2:	eef0 0a67 	vmov.f32	s1, s15
 80043b6:	f00b fd89 	bl	800fecc <round>
 80043ba:	ec53 2b10 	vmov	r2, r3, d0
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7fc fc39 	bl	8000c38 <__aeabi_d2f>
 80043c6:	ee07 0a90 	vmov	s15, r0
 80043ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ce:	ee17 3a90 	vmov	r3, s15
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	4b19      	ldr	r3, [pc, #100]	; (800443c <maintask_run+0x3e4>)
 80043d6:	801a      	strh	r2, [r3, #0]
	  }
	  TX_data_UART[0]=254;
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <maintask_run+0x3e8>)
 80043da:	22fe      	movs	r2, #254	; 0xfe
 80043dc:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=(uint8_t)yawAngle_send;
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <maintask_run+0x3e4>)
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <maintask_run+0x3e8>)
 80043e6:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=ball[0];
 80043e8:	4b16      	ldr	r3, [pc, #88]	; (8004444 <maintask_run+0x3ec>)
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <maintask_run+0x3e8>)
 80043ee:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=ball[1];
 80043f0:	4b14      	ldr	r3, [pc, #80]	; (8004444 <maintask_run+0x3ec>)
 80043f2:	785a      	ldrb	r2, [r3, #1]
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <maintask_run+0x3e8>)
 80043f6:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=ball[2];
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <maintask_run+0x3ec>)
 80043fa:	789a      	ldrb	r2, [r3, #2]
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <maintask_run+0x3e8>)
 80043fe:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=ball[0];
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <maintask_run+0x3ec>)
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <maintask_run+0x3e8>)
 8004406:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=ball[1];
 8004408:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <maintask_run+0x3ec>)
 800440a:	785a      	ldrb	r2, [r3, #1]
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <maintask_run+0x3e8>)
 800440e:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=ball[2];
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <maintask_run+0x3ec>)
 8004412:	789a      	ldrb	r2, [r3, #2]
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <maintask_run+0x3e8>)
 8004416:	71da      	strb	r2, [r3, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8004418:	23ff      	movs	r3, #255	; 0xff
 800441a:	2208      	movs	r2, #8
 800441c:	4908      	ldr	r1, [pc, #32]	; (8004440 <maintask_run+0x3e8>)
 800441e:	480a      	ldr	r0, [pc, #40]	; (8004448 <maintask_run+0x3f0>)
 8004420:	f007 fa32 	bl	800b888 <HAL_UART_Transmit>

	  yawAngle_temp=yawAngle;
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <maintask_run+0x3e0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <maintask_run+0x3f4>)
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	ecbd 8b02 	vpop	{d8}
 8004436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004438:	200005e0 	.word	0x200005e0
 800443c:	200005d6 	.word	0x200005d6
 8004440:	20000648 	.word	0x20000648
 8004444:	200006f4 	.word	0x200006f4
 8004448:	200008fc 	.word	0x200008fc
 800444c:	200005d0 	.word	0x200005d0

08004450 <maintask_emargency>:


void maintask_emargency(){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
	  actuator_motor1(0.0,0.0);
 8004456:	eddf 0a30 	vldr	s1, [pc, #192]	; 8004518 <maintask_emargency+0xc8>
 800445a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8004518 <maintask_emargency+0xc8>
 800445e:	f7fc fdbd 	bl	8000fdc <actuator_motor1>
	  actuator_motor2(0.0,0.0);
 8004462:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8004518 <maintask_emargency+0xc8>
 8004466:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004518 <maintask_emargency+0xc8>
 800446a:	f7fc fde7 	bl	800103c <actuator_motor2>
	  actuator_motor3(0.0,0.0);
 800446e:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8004518 <maintask_emargency+0xc8>
 8004472:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8004518 <maintask_emargency+0xc8>
 8004476:	f7fc fe11 	bl	800109c <actuator_motor3>
	  actuator_motor4(0.0,0.0);
 800447a:	eddf 0a27 	vldr	s1, [pc, #156]	; 8004518 <maintask_emargency+0xc8>
 800447e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8004518 <maintask_emargency+0xc8>
 8004482:	f7fc fe3b 	bl	80010fc <actuator_motor4>
	  actuator_motor5(0.0,0.0);
 8004486:	eddf 0a24 	vldr	s1, [pc, #144]	; 8004518 <maintask_emargency+0xc8>
 800448a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004518 <maintask_emargency+0xc8>
 800448e:	f7fc fe65 	bl	800115c <actuator_motor5>

	  TX_data_UART[0]=254;
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <maintask_emargency+0xcc>)
 8004494:	22fe      	movs	r2, #254	; 0xfe
 8004496:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=error_No[0];
 8004498:	4b21      	ldr	r3, [pc, #132]	; (8004520 <maintask_emargency+0xd0>)
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	4b1f      	ldr	r3, [pc, #124]	; (800451c <maintask_emargency+0xcc>)
 800449e:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=error_No[1];
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <maintask_emargency+0xd0>)
 80044a2:	785a      	ldrb	r2, [r3, #1]
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <maintask_emargency+0xcc>)
 80044a6:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=error_No[2];
 80044a8:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <maintask_emargency+0xd0>)
 80044aa:	789a      	ldrb	r2, [r3, #2]
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <maintask_emargency+0xcc>)
 80044ae:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=error_No[3];
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <maintask_emargency+0xd0>)
 80044b2:	78da      	ldrb	r2, [r3, #3]
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <maintask_emargency+0xcc>)
 80044b6:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=252;
 80044b8:	4b18      	ldr	r3, [pc, #96]	; (800451c <maintask_emargency+0xcc>)
 80044ba:	22fc      	movs	r2, #252	; 0xfc
 80044bc:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=122;
 80044be:	4b17      	ldr	r3, [pc, #92]	; (800451c <maintask_emargency+0xcc>)
 80044c0:	227a      	movs	r2, #122	; 0x7a
 80044c2:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=200;
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <maintask_emargency+0xcc>)
 80044c6:	22c8      	movs	r2, #200	; 0xc8
 80044c8:	71da      	strb	r2, [r3, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80044ca:	23ff      	movs	r3, #255	; 0xff
 80044cc:	2208      	movs	r2, #8
 80044ce:	4913      	ldr	r1, [pc, #76]	; (800451c <maintask_emargency+0xcc>)
 80044d0:	4814      	ldr	r0, [pc, #80]	; (8004524 <maintask_emargency+0xd4>)
 80044d2:	f007 f9d9 	bl	800b888 <HAL_UART_Transmit>

	  actuator_buzzer(150, 150);
 80044d6:	2196      	movs	r1, #150	; 0x96
 80044d8:	2096      	movs	r0, #150	; 0x96
 80044da:	f7fc fedd 	bl	8001298 <actuator_buzzer>

	  uint8_t senddata_error[8];

	  can1_send(0x000, senddata_error);
 80044de:	463b      	mov	r3, r7
 80044e0:	4619      	mov	r1, r3
 80044e2:	2000      	movs	r0, #0
 80044e4:	f7fd f9e6 	bl	80018b4 <can1_send>
	  can2_send(0x000, senddata_error);
 80044e8:	463b      	mov	r3, r7
 80044ea:	4619      	mov	r1, r3
 80044ec:	2000      	movs	r0, #0
 80044ee:	f7fd fa41 	bl	8001974 <can2_send>

	  actuator_kicker(1, 0);
 80044f2:	2100      	movs	r1, #0
 80044f4:	2001      	movs	r0, #1
 80044f6:	f7fc fe82 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80044fa:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004518 <maintask_emargency+0xc8>
 80044fe:	f7fc fe5d 	bl	80011bc <actuator_kicker_voltage>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8004502:	2201      	movs	r2, #1
 8004504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004508:	4807      	ldr	r0, [pc, #28]	; (8004528 <maintask_emargency+0xd8>)
 800450a:	f004 fb01 	bl	8008b10 <HAL_GPIO_WritePin>

}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	00000000 	.word	0x00000000
 800451c:	20000648 	.word	0x20000648
 8004520:	200006fc 	.word	0x200006fc
 8004524:	200008fc 	.word	0x200008fc
 8004528:	48000400 	.word	0x48000400
 800452c:	00000000 	.word	0x00000000

08004530 <maintask_state_stop>:


void maintask_state_stop(){
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0

	  if(yawAngle<0){
 8004534:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <maintask_state_stop+0x138>)
 8004536:	edd3 7a00 	vldr	s15, [r3]
 800453a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	d52d      	bpl.n	80045a0 <maintask_state_stop+0x70>
		  yawAngle_send=(float)(round((yawAngle+359.0)/2.0));
 8004544:	4b48      	ldr	r3, [pc, #288]	; (8004668 <maintask_state_stop+0x138>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7fc f825 	bl	8000598 <__aeabi_f2d>
 800454e:	a344      	add	r3, pc, #272	; (adr r3, 8004660 <maintask_state_stop+0x130>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fb fec2 	bl	80002dc <__adddf3>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004568:	f7fc f998 	bl	800089c <__aeabi_ddiv>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	ec43 2b17 	vmov	d7, r2, r3
 8004574:	eeb0 0a47 	vmov.f32	s0, s14
 8004578:	eef0 0a67 	vmov.f32	s1, s15
 800457c:	f00b fca6 	bl	800fecc <round>
 8004580:	ec53 2b10 	vmov	r2, r3, d0
 8004584:	4610      	mov	r0, r2
 8004586:	4619      	mov	r1, r3
 8004588:	f7fc fb56 	bl	8000c38 <__aeabi_d2f>
 800458c:	ee07 0a90 	vmov	s15, r0
 8004590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004594:	ee17 3a90 	vmov	r3, s15
 8004598:	b29a      	uxth	r2, r3
 800459a:	4b34      	ldr	r3, [pc, #208]	; (800466c <maintask_state_stop+0x13c>)
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	e023      	b.n	80045e8 <maintask_state_stop+0xb8>
	  }
	  else{
		  yawAngle_send=(float)(round(yawAngle/2.0));
 80045a0:	4b31      	ldr	r3, [pc, #196]	; (8004668 <maintask_state_stop+0x138>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fb fff7 	bl	8000598 <__aeabi_f2d>
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045b2:	f7fc f973 	bl	800089c <__aeabi_ddiv>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	ec43 2b17 	vmov	d7, r2, r3
 80045be:	eeb0 0a47 	vmov.f32	s0, s14
 80045c2:	eef0 0a67 	vmov.f32	s1, s15
 80045c6:	f00b fc81 	bl	800fecc <round>
 80045ca:	ec53 2b10 	vmov	r2, r3, d0
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	f7fc fb31 	bl	8000c38 <__aeabi_d2f>
 80045d6:	ee07 0a90 	vmov	s15, r0
 80045da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045de:	ee17 3a90 	vmov	r3, s15
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <maintask_state_stop+0x13c>)
 80045e6:	801a      	strh	r2, [r3, #0]
	  }

	  omni_move(0.0, 0.0, 0.0,0.0);
 80045e8:	eddf 1a21 	vldr	s3, [pc, #132]	; 8004670 <maintask_state_stop+0x140>
 80045ec:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8004670 <maintask_state_stop+0x140>
 80045f0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004670 <maintask_state_stop+0x140>
 80045f4:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004670 <maintask_state_stop+0x140>
 80045f8:	f000 fbbe 	bl	8004d78 <omni_move>
	  actuator_motor5(0.0,0.0);
 80045fc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004670 <maintask_state_stop+0x140>
 8004600:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8004670 <maintask_state_stop+0x140>
 8004604:	f7fc fdaa 	bl	800115c <actuator_motor5>

	  TX_data_UART[0]=254;
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <maintask_state_stop+0x144>)
 800460a:	22fe      	movs	r2, #254	; 0xfe
 800460c:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=(uint8_t)yawAngle_send;
 800460e:	4b17      	ldr	r3, [pc, #92]	; (800466c <maintask_state_stop+0x13c>)
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <maintask_state_stop+0x144>)
 8004616:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=error_No[0];
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <maintask_state_stop+0x148>)
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	4b15      	ldr	r3, [pc, #84]	; (8004674 <maintask_state_stop+0x144>)
 800461e:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=error_No[1];
 8004620:	4b15      	ldr	r3, [pc, #84]	; (8004678 <maintask_state_stop+0x148>)
 8004622:	785a      	ldrb	r2, [r3, #1]
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <maintask_state_stop+0x144>)
 8004626:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=1;
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <maintask_state_stop+0x144>)
 800462a:	2201      	movs	r2, #1
 800462c:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=1;
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <maintask_state_stop+0x144>)
 8004630:	2201      	movs	r2, #1
 8004632:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=1;
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <maintask_state_stop+0x144>)
 8004636:	2201      	movs	r2, #1
 8004638:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=1;
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <maintask_state_stop+0x144>)
 800463c:	2201      	movs	r2, #1
 800463e:	71da      	strb	r2, [r3, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8004640:	23ff      	movs	r3, #255	; 0xff
 8004642:	2208      	movs	r2, #8
 8004644:	490b      	ldr	r1, [pc, #44]	; (8004674 <maintask_state_stop+0x144>)
 8004646:	480d      	ldr	r0, [pc, #52]	; (800467c <maintask_state_stop+0x14c>)
 8004648:	f007 f91e 	bl	800b888 <HAL_UART_Transmit>

	  actuator_kicker(1, 0);
 800464c:	2100      	movs	r1, #0
 800464e:	2001      	movs	r0, #1
 8004650:	f7fc fdd5 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 8004654:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004670 <maintask_state_stop+0x140>
 8004658:	f7fc fdb0 	bl	80011bc <actuator_kicker_voltage>
}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}
 8004660:	00000000 	.word	0x00000000
 8004664:	40767000 	.word	0x40767000
 8004668:	200005e0 	.word	0x200005e0
 800466c:	200005d6 	.word	0x200005d6
 8004670:	00000000 	.word	0x00000000
 8004674:	20000648 	.word	0x20000648
 8004678:	200006fc 	.word	0x200006fc
 800467c:	200008fc 	.word	0x200008fc

08004680 <maintask_stop>:

void maintask_stop(){
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
	  omni_move(0.0, 0.0, 0.0,0.0);
 8004684:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80047b8 <maintask_stop+0x138>
 8004688:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80047b8 <maintask_stop+0x138>
 800468c:	eddf 0a4a 	vldr	s1, [pc, #296]	; 80047b8 <maintask_stop+0x138>
 8004690:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80047b8 <maintask_stop+0x138>
 8004694:	f000 fb70 	bl	8004d78 <omni_move>
	  actuator_motor5(0.0,0.0);
 8004698:	eddf 0a47 	vldr	s1, [pc, #284]	; 80047b8 <maintask_stop+0x138>
 800469c:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80047b8 <maintask_stop+0x138>
 80046a0:	f7fc fd5c 	bl	800115c <actuator_motor5>


	  if(yawAngle<0){
 80046a4:	4b45      	ldr	r3, [pc, #276]	; (80047bc <maintask_stop+0x13c>)
 80046a6:	edd3 7a00 	vldr	s15, [r3]
 80046aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	d52d      	bpl.n	8004710 <maintask_stop+0x90>
		  yawAngle_send=(float)(round((yawAngle+359.0)/2.0));
 80046b4:	4b41      	ldr	r3, [pc, #260]	; (80047bc <maintask_stop+0x13c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff6d 	bl	8000598 <__aeabi_f2d>
 80046be:	a33c      	add	r3, pc, #240	; (adr r3, 80047b0 <maintask_stop+0x130>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb fe0a 	bl	80002dc <__adddf3>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046d8:	f7fc f8e0 	bl	800089c <__aeabi_ddiv>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	ec43 2b17 	vmov	d7, r2, r3
 80046e4:	eeb0 0a47 	vmov.f32	s0, s14
 80046e8:	eef0 0a67 	vmov.f32	s1, s15
 80046ec:	f00b fbee 	bl	800fecc <round>
 80046f0:	ec53 2b10 	vmov	r2, r3, d0
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	f7fc fa9e 	bl	8000c38 <__aeabi_d2f>
 80046fc:	ee07 0a90 	vmov	s15, r0
 8004700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004704:	ee17 3a90 	vmov	r3, s15
 8004708:	b29a      	uxth	r2, r3
 800470a:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <maintask_stop+0x140>)
 800470c:	801a      	strh	r2, [r3, #0]
 800470e:	e023      	b.n	8004758 <maintask_stop+0xd8>
	  }
	  else{
		  yawAngle_send=(float)(round(yawAngle/2.0));
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <maintask_stop+0x13c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb ff3f 	bl	8000598 <__aeabi_f2d>
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004722:	f7fc f8bb 	bl	800089c <__aeabi_ddiv>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	ec43 2b17 	vmov	d7, r2, r3
 800472e:	eeb0 0a47 	vmov.f32	s0, s14
 8004732:	eef0 0a67 	vmov.f32	s1, s15
 8004736:	f00b fbc9 	bl	800fecc <round>
 800473a:	ec53 2b10 	vmov	r2, r3, d0
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	f7fc fa79 	bl	8000c38 <__aeabi_d2f>
 8004746:	ee07 0a90 	vmov	s15, r0
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 3a90 	vmov	r3, s15
 8004752:	b29a      	uxth	r2, r3
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <maintask_stop+0x140>)
 8004756:	801a      	strh	r2, [r3, #0]
	  }
	  TX_data_UART[0]=254;
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <maintask_stop+0x144>)
 800475a:	22fe      	movs	r2, #254	; 0xfe
 800475c:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=(uint8_t)yawAngle_send;
 800475e:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <maintask_stop+0x140>)
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <maintask_stop+0x144>)
 8004766:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=0;
 8004768:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <maintask_stop+0x144>)
 800476a:	2200      	movs	r2, #0
 800476c:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=0;
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <maintask_stop+0x144>)
 8004770:	2200      	movs	r2, #0
 8004772:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=0;
 8004774:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <maintask_stop+0x144>)
 8004776:	2200      	movs	r2, #0
 8004778:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=0;
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <maintask_stop+0x144>)
 800477c:	2200      	movs	r2, #0
 800477e:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=0;
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <maintask_stop+0x144>)
 8004782:	2200      	movs	r2, #0
 8004784:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=0;
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <maintask_stop+0x144>)
 8004788:	2200      	movs	r2, #0
 800478a:	71da      	strb	r2, [r3, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 800478c:	23ff      	movs	r3, #255	; 0xff
 800478e:	2208      	movs	r2, #8
 8004790:	490c      	ldr	r1, [pc, #48]	; (80047c4 <maintask_stop+0x144>)
 8004792:	480d      	ldr	r0, [pc, #52]	; (80047c8 <maintask_stop+0x148>)
 8004794:	f007 f878 	bl	800b888 <HAL_UART_Transmit>

	  actuator_kicker(1, 0);
 8004798:	2100      	movs	r1, #0
 800479a:	2001      	movs	r0, #1
 800479c:	f7fc fd2f 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80047a0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80047b8 <maintask_stop+0x138>
 80047a4:	f7fc fd0a 	bl	80011bc <actuator_kicker_voltage>
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	f3af 8000 	nop.w
 80047b0:	00000000 	.word	0x00000000
 80047b4:	40767000 	.word	0x40767000
 80047b8:	00000000 	.word	0x00000000
 80047bc:	200005e0 	.word	0x200005e0
 80047c0:	200005d6 	.word	0x200005d6
 80047c4:	20000648 	.word	0x20000648
 80047c8:	200008fc 	.word	0x200008fc
 80047cc:	00000000 	.word	0x00000000

080047d0 <normalizeAngle>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

float normalizeAngle(float angle_rad) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle_rad > M_PI) {
 80047da:	e00f      	b.n	80047fc <normalizeAngle+0x2c>
        angle_rad -= 2.0f * M_PI;
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fb fedb 	bl	8000598 <__aeabi_f2d>
 80047e2:	a31f      	add	r3, pc, #124	; (adr r3, 8004860 <normalizeAngle+0x90>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f7fb fd76 	bl	80002d8 <__aeabi_dsub>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	f7fc fa20 	bl	8000c38 <__aeabi_d2f>
 80047f8:	4603      	mov	r3, r0
 80047fa:	607b      	str	r3, [r7, #4]
    while (angle_rad > M_PI) {
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fb fecb 	bl	8000598 <__aeabi_f2d>
 8004802:	a319      	add	r3, pc, #100	; (adr r3, 8004868 <normalizeAngle+0x98>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fc f9ae 	bl	8000b68 <__aeabi_dcmpgt>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e4      	bne.n	80047dc <normalizeAngle+0xc>
    }
    while (angle_rad < -M_PI) {
 8004812:	e00f      	b.n	8004834 <normalizeAngle+0x64>
        angle_rad += 2.0f * M_PI;
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fb febf 	bl	8000598 <__aeabi_f2d>
 800481a:	a311      	add	r3, pc, #68	; (adr r3, 8004860 <normalizeAngle+0x90>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f7fb fd5c 	bl	80002dc <__adddf3>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	f7fc fa04 	bl	8000c38 <__aeabi_d2f>
 8004830:	4603      	mov	r3, r0
 8004832:	607b      	str	r3, [r7, #4]
    while (angle_rad < -M_PI) {
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fb feaf 	bl	8000598 <__aeabi_f2d>
 800483a:	a30d      	add	r3, pc, #52	; (adr r3, 8004870 <normalizeAngle+0xa0>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fc f974 	bl	8000b2c <__aeabi_dcmplt>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e4      	bne.n	8004814 <normalizeAngle+0x44>
    }
    return angle_rad;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	ee07 3a90 	vmov	s15, r3
}
 8004850:	eeb0 0a67 	vmov.f32	s0, s15
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w
 8004860:	54442d18 	.word	0x54442d18
 8004864:	401921fb 	.word	0x401921fb
 8004868:	54442d18 	.word	0x54442d18
 800486c:	400921fb 	.word	0x400921fb
 8004870:	54442d18 	.word	0x54442d18
 8004874:	c00921fb 	.word	0xc00921fb

08004878 <getAngleDiff>:

float getAngleDiff(float angle_rad1, float angle_rad2){
 8004878:	b5b0      	push	{r4, r5, r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004882:	edc7 0a00 	vstr	s1, [r7]
    angle_rad1 = normalizeAngle(angle_rad1);
 8004886:	ed97 0a01 	vldr	s0, [r7, #4]
 800488a:	f7ff ffa1 	bl	80047d0 <normalizeAngle>
 800488e:	ed87 0a01 	vstr	s0, [r7, #4]
    angle_rad2 = normalizeAngle(angle_rad2);
 8004892:	ed97 0a00 	vldr	s0, [r7]
 8004896:	f7ff ff9b 	bl	80047d0 <normalizeAngle>
 800489a:	ed87 0a00 	vstr	s0, [r7]
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 800489e:	ed97 7a01 	vldr	s14, [r7, #4]
 80048a2:	edd7 7a00 	vldr	s15, [r7]
 80048a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ae:	ee17 3a90 	vmov	r3, s15
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bfb8      	it	lt
 80048b6:	425b      	neglt	r3, r3
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	dd40      	ble.n	800493e <getAngleDiff+0xc6>
    	if(angle_rad1 > angle_rad2){
 80048bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80048c0:	edd7 7a00 	vldr	s15, [r7]
 80048c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	dd1a      	ble.n	8004904 <getAngleDiff+0x8c>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fb fe62 	bl	8000598 <__aeabi_f2d>
 80048d4:	4604      	mov	r4, r0
 80048d6:	460d      	mov	r5, r1
 80048d8:	6838      	ldr	r0, [r7, #0]
 80048da:	f7fb fe5d 	bl	8000598 <__aeabi_f2d>
 80048de:	a320      	add	r3, pc, #128	; (adr r3, 8004960 <getAngleDiff+0xe8>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f7fb fcfa 	bl	80002dc <__adddf3>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4620      	mov	r0, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	f7fb fcf2 	bl	80002d8 <__aeabi_dsub>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	f7fc f99c 	bl	8000c38 <__aeabi_d2f>
 8004900:	4603      	mov	r3, r0
 8004902:	e024      	b.n	800494e <getAngleDiff+0xd6>
    	}else{
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fb fe47 	bl	8000598 <__aeabi_f2d>
 800490a:	a315      	add	r3, pc, #84	; (adr r3, 8004960 <getAngleDiff+0xe8>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb fce4 	bl	80002dc <__adddf3>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4614      	mov	r4, r2
 800491a:	461d      	mov	r5, r3
 800491c:	6838      	ldr	r0, [r7, #0]
 800491e:	f7fb fe3b 	bl	8000598 <__aeabi_f2d>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f7fb fcd5 	bl	80002d8 <__aeabi_dsub>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	f7fc f97f 	bl	8000c38 <__aeabi_d2f>
 800493a:	4603      	mov	r3, r0
 800493c:	e007      	b.n	800494e <getAngleDiff+0xd6>
    	}
    } else {
        return angle_rad1 - angle_rad2;
 800493e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004942:	edd7 7a00 	vldr	s15, [r7]
 8004946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494a:	ee17 3a90 	vmov	r3, s15
    }
}
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eeb0 0a67 	vmov.f32	s0, s15
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bdb0      	pop	{r4, r5, r7, pc}
 800495c:	f3af 8000 	nop.w
 8004960:	54442d18 	.word	0x54442d18
 8004964:	401921fb 	.word	0x401921fb

08004968 <decode_SW>:

uint8_t decode_SW(uint16_t SW_data){
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	80fb      	strh	r3, [r7, #6]
	int data;
	if(SW_data<100){
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b63      	cmp	r3, #99	; 0x63
 8004976:	d802      	bhi.n	800497e <decode_SW+0x16>
		data=0b00010000;//C
 8004978:	2310      	movs	r3, #16
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e02e      	b.n	80049dc <decode_SW+0x74>
	}
	else if(SW_data<500 && SW_data>100){
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004984:	d205      	bcs.n	8004992 <decode_SW+0x2a>
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b64      	cmp	r3, #100	; 0x64
 800498a:	d902      	bls.n	8004992 <decode_SW+0x2a>
		data=0b00000010;//B
 800498c:	2302      	movs	r3, #2
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e024      	b.n	80049dc <decode_SW+0x74>
	}
	else if(SW_data<2000 && SW_data>500){
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004998:	d206      	bcs.n	80049a8 <decode_SW+0x40>
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049a0:	d902      	bls.n	80049a8 <decode_SW+0x40>
		data=0b00000100;//R
 80049a2:	2304      	movs	r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e019      	b.n	80049dc <decode_SW+0x74>
	}
	else if(SW_data<3000 && SW_data>2000){
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d806      	bhi.n	80049c0 <decode_SW+0x58>
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049b8:	d902      	bls.n	80049c0 <decode_SW+0x58>
		data=0b00000001;//F
 80049ba:	2301      	movs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e00d      	b.n	80049dc <decode_SW+0x74>
	}
	else if(SW_data<4000 && SW_data>3000){
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80049c6:	d207      	bcs.n	80049d8 <decode_SW+0x70>
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d902      	bls.n	80049d8 <decode_SW+0x70>
		data=0b00001000;//L
 80049d2:	2308      	movs	r3, #8
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e001      	b.n	80049dc <decode_SW+0x74>
	}
	else{
		data=0b00000000;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	b2db      	uxtb	r3, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	0000      	movs	r0, r0
	...

080049f0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80049fc:	e002      	b.n	8004a04 <HAL_UART_RxCpltCallback+0x14>
		j++;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	3301      	adds	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	4aa4      	ldr	r2, [pc, #656]	; (8004c98 <HAL_UART_RxCpltCallback+0x2a8>)
 8004a08:	5cd3      	ldrb	r3, [r2, r3]
 8004a0a:	2bfe      	cmp	r3, #254	; 0xfe
 8004a0c:	d002      	beq.n	8004a14 <HAL_UART_RxCpltCallback+0x24>
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b0d      	cmp	r3, #13
 8004a12:	d9f4      	bls.n	80049fe <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_from_Ether)){
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b0d      	cmp	r3, #13
 8004a18:	d90d      	bls.n	8004a36 <HAL_UART_RxCpltCallback+0x46>
		for(uint8_t k=0;k<(sizeof(data_from_ether));k++){
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73bb      	strb	r3, [r7, #14]
 8004a1e:	e006      	b.n	8004a2e <HAL_UART_RxCpltCallback+0x3e>
			data_from_ether[k]=0;
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	4a9e      	ldr	r2, [pc, #632]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a24:	2100      	movs	r1, #0
 8004a26:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_from_ether));k++){
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	73bb      	strb	r3, [r7, #14]
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d9f5      	bls.n	8004a20 <HAL_UART_RxCpltCallback+0x30>
 8004a34:	e021      	b.n	8004a7a <HAL_UART_RxCpltCallback+0x8a>
		}
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 8004a36:	2300      	movs	r3, #0
 8004a38:	737b      	strb	r3, [r7, #13]
 8004a3a:	e01b      	b.n	8004a74 <HAL_UART_RxCpltCallback+0x84>
			if ((j + k) >= sizeof(data_from_ether)) {
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	7b7b      	ldrb	r3, [r7, #13]
 8004a40:	4413      	add	r3, r2
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d90a      	bls.n	8004a5c <HAL_UART_RxCpltCallback+0x6c>
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004a46:	7b7a      	ldrb	r2, [r7, #13]
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f1a3 020d 	sub.w	r2, r3, #13
 8004a50:	7b7b      	ldrb	r3, [r7, #13]
 8004a52:	4991      	ldr	r1, [pc, #580]	; (8004c98 <HAL_UART_RxCpltCallback+0x2a8>)
 8004a54:	5c89      	ldrb	r1, [r1, r2]
 8004a56:	4a91      	ldr	r2, [pc, #580]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a58:	54d1      	strb	r1, [r2, r3]
 8004a5a:	e008      	b.n	8004a6e <HAL_UART_RxCpltCallback+0x7e>
			}
			else {
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004a5c:	7bfa      	ldrb	r2, [r7, #15]
 8004a5e:	7b7b      	ldrb	r3, [r7, #13]
 8004a60:	4413      	add	r3, r2
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	7b7b      	ldrb	r3, [r7, #13]
 8004a66:	498c      	ldr	r1, [pc, #560]	; (8004c98 <HAL_UART_RxCpltCallback+0x2a8>)
 8004a68:	5c89      	ldrb	r1, [r1, r2]
 8004a6a:	4a8c      	ldr	r2, [pc, #560]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a6c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 8004a6e:	7b7b      	ldrb	r3, [r7, #13]
 8004a70:	3301      	adds	r3, #1
 8004a72:	737b      	strb	r3, [r7, #13]
 8004a74:	7b7b      	ldrb	r3, [r7, #13]
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d9e0      	bls.n	8004a3c <HAL_UART_RxCpltCallback+0x4c>
			}
		}
	}
	if(data_from_ether[sizeof(data_from_ether)-1]==253){
 8004a7a:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a7c:	7b1b      	ldrb	r3, [r3, #12]
 8004a7e:	2bfd      	cmp	r3, #253	; 0xfd
 8004a80:	d10f      	bne.n	8004aa2 <HAL_UART_RxCpltCallback+0xb2>
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004a82:	2300      	movs	r3, #0
 8004a84:	733b      	strb	r3, [r7, #12]
 8004a86:	e008      	b.n	8004a9a <HAL_UART_RxCpltCallback+0xaa>
			Rxbuf_from_Ether_temp[k]=data_from_ether[k];
 8004a88:	7b3a      	ldrb	r2, [r7, #12]
 8004a8a:	7b3b      	ldrb	r3, [r7, #12]
 8004a8c:	4983      	ldr	r1, [pc, #524]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a8e:	5c89      	ldrb	r1, [r1, r2]
 8004a90:	4a83      	ldr	r2, [pc, #524]	; (8004ca0 <HAL_UART_RxCpltCallback+0x2b0>)
 8004a92:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004a94:	7b3b      	ldrb	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	733b      	strb	r3, [r7, #12]
 8004a9a:	7b3b      	ldrb	r3, [r7, #12]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d9f3      	bls.n	8004a88 <HAL_UART_RxCpltCallback+0x98>
 8004aa0:	e00e      	b.n	8004ac0 <HAL_UART_RxCpltCallback+0xd0>
		}
	}
	else{
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	72fb      	strb	r3, [r7, #11]
 8004aa6:	e008      	b.n	8004aba <HAL_UART_RxCpltCallback+0xca>
			data_from_ether[k]=Rxbuf_from_Ether_temp[k];
 8004aa8:	7afa      	ldrb	r2, [r7, #11]
 8004aaa:	7afb      	ldrb	r3, [r7, #11]
 8004aac:	497c      	ldr	r1, [pc, #496]	; (8004ca0 <HAL_UART_RxCpltCallback+0x2b0>)
 8004aae:	5c89      	ldrb	r1, [r1, r2]
 8004ab0:	4a7a      	ldr	r2, [pc, #488]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004ab2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004ab4:	7afb      	ldrb	r3, [r7, #11]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	72fb      	strb	r3, [r7, #11]
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d9f3      	bls.n	8004aa8 <HAL_UART_RxCpltCallback+0xb8>
		}
	}

	vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 8004ac0:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	4a75      	ldr	r2, [pc, #468]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004ac8:	7852      	ldrb	r2, [r2, #1]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad4:	ee17 0a90 	vmov	r0, s15
 8004ad8:	f7fb fd5e 	bl	8000598 <__aeabi_f2d>
 8004adc:	a36a      	add	r3, pc, #424	; (adr r3, 8004c88 <HAL_UART_RxCpltCallback+0x298>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f7fb fbf9 	bl	80002d8 <__aeabi_dsub>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	a366      	add	r3, pc, #408	; (adr r3, 8004c88 <HAL_UART_RxCpltCallback+0x298>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fed2 	bl	800089c <__aeabi_ddiv>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <HAL_UART_RxCpltCallback+0x2b4>)
 8004b06:	f7fb fd9f 	bl	8000648 <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	f7fc f891 	bl	8000c38 <__aeabi_d2f>
 8004b16:	4603      	mov	r3, r0
 8004b18:	4a63      	ldr	r2, [pc, #396]	; (8004ca8 <HAL_UART_RxCpltCallback+0x2b8>)
 8004b1a:	6013      	str	r3, [r2, #0]
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 8004b1c:	4b5f      	ldr	r3, [pc, #380]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004b1e:	789b      	ldrb	r3, [r3, #2]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	4a5e      	ldr	r2, [pc, #376]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004b24:	78d2      	ldrb	r2, [r2, #3]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b30:	ee17 0a90 	vmov	r0, s15
 8004b34:	f7fb fd30 	bl	8000598 <__aeabi_f2d>
 8004b38:	a353      	add	r3, pc, #332	; (adr r3, 8004c88 <HAL_UART_RxCpltCallback+0x298>)
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f7fb fbcb 	bl	80002d8 <__aeabi_dsub>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	a34f      	add	r3, pc, #316	; (adr r3, 8004c88 <HAL_UART_RxCpltCallback+0x298>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f7fb fea4 	bl	800089c <__aeabi_ddiv>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_UART_RxCpltCallback+0x2b4>)
 8004b62:	f7fb fd71 	bl	8000648 <__aeabi_dmul>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f7fc f863 	bl	8000c38 <__aeabi_d2f>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <HAL_UART_RxCpltCallback+0x2bc>)
 8004b76:	6013      	str	r3, [r2, #0]
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004b78:	4b48      	ldr	r3, [pc, #288]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004b7a:	791b      	ldrb	r3, [r3, #4]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	4a47      	ldr	r2, [pc, #284]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004b80:	7952      	ldrb	r2, [r2, #5]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b8c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004cb0 <HAL_UART_RxCpltCallback+0x2c0>
 8004b90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b94:	ee17 0a90 	vmov	r0, s15
 8004b98:	f7fb fcfe 	bl	8000598 <__aeabi_f2d>
 8004b9c:	a33a      	add	r3, pc, #232	; (adr r3, 8004c88 <HAL_UART_RxCpltCallback+0x298>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f7fb fe7b 	bl	800089c <__aeabi_ddiv>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	a338      	add	r3, pc, #224	; (adr r3, 8004c90 <HAL_UART_RxCpltCallback+0x2a0>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f7fb fd48 	bl	8000648 <__aeabi_dmul>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	f7fc f83a 	bl	8000c38 <__aeabi_d2f>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4a3b      	ldr	r2, [pc, #236]	; (8004cb4 <HAL_UART_RxCpltCallback+0x2c4>)
 8004bc8:	6013      	str	r3, [r2, #0]
	theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 8004bca:	4b34      	ldr	r3, [pc, #208]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004bcc:	799b      	ldrb	r3, [r3, #6]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	4a32      	ldr	r2, [pc, #200]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004bd2:	79d2      	ldrb	r2, [r2, #7]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bde:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004cb0 <HAL_UART_RxCpltCallback+0x2c0>
 8004be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004be6:	ee17 0a90 	vmov	r0, s15
 8004bea:	f7fb fcd5 	bl	8000598 <__aeabi_f2d>
 8004bee:	a326      	add	r3, pc, #152	; (adr r3, 8004c88 <HAL_UART_RxCpltCallback+0x298>)
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f7fb fe52 	bl	800089c <__aeabi_ddiv>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	a323      	add	r3, pc, #140	; (adr r3, 8004c90 <HAL_UART_RxCpltCallback+0x2a0>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f7fb fd1f 	bl	8000648 <__aeabi_dmul>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	f7fc f811 	bl	8000c38 <__aeabi_d2f>
 8004c16:	4603      	mov	r3, r0
 8004c18:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <HAL_UART_RxCpltCallback+0x2c8>)
 8004c1a:	6013      	str	r3, [r2, #0]

	if(data_from_ether[8]>100){
 8004c1c:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004c1e:	7a1b      	ldrb	r3, [r3, #8]
 8004c20:	2b64      	cmp	r3, #100	; 0x64
 8004c22:	d909      	bls.n	8004c38 <HAL_UART_RxCpltCallback+0x248>
		chipEN=1;
 8004c24:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <HAL_UART_RxCpltCallback+0x2cc>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
		data_from_ether[8]=data_from_ether[8]-100;
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004c2c:	7a1b      	ldrb	r3, [r3, #8]
 8004c2e:	3b64      	subs	r3, #100	; 0x64
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004c34:	721a      	strb	r2, [r3, #8]
 8004c36:	e002      	b.n	8004c3e <HAL_UART_RxCpltCallback+0x24e>
	}
	else{
		chipEN=0;
 8004c38:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <HAL_UART_RxCpltCallback+0x2cc>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
	}
	kick_power=(float32_t)data_from_ether[8]/20.0;
 8004c3e:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004c40:	7a1b      	ldrb	r3, [r3, #8]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c4a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004c4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c52:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_UART_RxCpltCallback+0x2d0>)
 8004c54:	edc3 7a00 	vstr	s15, [r3]
	drible_power=(float32_t)data_from_ether[9]/20.0;
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004c5a:	7a5b      	ldrb	r3, [r3, #9]
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c64:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <HAL_UART_RxCpltCallback+0x2d4>)
 8004c6e:	edc3 7a00 	vstr	s15, [r3]

	keeper_EN=data_from_ether[10];
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_UART_RxCpltCallback+0x2ac>)
 8004c74:	7a9a      	ldrb	r2, [r3, #10]
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <HAL_UART_RxCpltCallback+0x2d8>)
 8004c78:	701a      	strb	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	f3af 8000 	nop.w
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	40dfffc0 	.word	0x40dfffc0
 8004c90:	54442d18 	.word	0x54442d18
 8004c94:	400921fb 	.word	0x400921fb
 8004c98:	200005ac 	.word	0x200005ac
 8004c9c:	20000638 	.word	0x20000638
 8004ca0:	200005bc 	.word	0x200005bc
 8004ca4:	401c0000 	.word	0x401c0000
 8004ca8:	200006d4 	.word	0x200006d4
 8004cac:	200006d8 	.word	0x200006d8
 8004cb0:	46fffe00 	.word	0x46fffe00
 8004cb4:	200006e8 	.word	0x200006e8
 8004cb8:	200006ec 	.word	0x200006ec
 8004cbc:	200006f0 	.word	0x200006f0
 8004cc0:	200006e4 	.word	0x200006e4
 8004cc4:	200006e0 	.word	0x200006e0
 8004cc8:	20000714 	.word	0x20000714

08004ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		maintask_emargency();
 8004cd0:	f7ff fbbe 	bl	8004450 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cda:	4804      	ldr	r0, [pc, #16]	; (8004cec <Error_Handler+0x20>)
 8004cdc:	f003 ff18 	bl	8008b10 <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 8004ce0:	21c8      	movs	r1, #200	; 0xc8
 8004ce2:	20c8      	movs	r0, #200	; 0xc8
 8004ce4:	f7fc fad8 	bl	8001298 <actuator_buzzer>
		maintask_emargency();
 8004ce8:	e7f2      	b.n	8004cd0 <Error_Handler+0x4>
 8004cea:	bf00      	nop
 8004cec:	48000400 	.word	0x48000400

08004cf0 <getUs>:
 */
#include "microsectimer.h"



uint32_t getUs(void) {
 8004cf0:	b5b0      	push	{r4, r5, r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004cf6:	f004 fc5d 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	4a10      	ldr	r2, [pc, #64]	; (8004d40 <getUs+0x50>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	0c9b      	lsrs	r3, r3, #18
 8004d04:	607b      	str	r3, [r7, #4]
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
 8004d06:	f7fe f8ef 	bl	8002ee8 <HAL_GetTick>
 8004d0a:	4604      	mov	r4, r0
cycle_cnt = SysTick->VAL;
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <getUs+0x54>)
 8004d0e:	689d      	ldr	r5, [r3, #8]
} while (ms != HAL_GetTick());
 8004d10:	f7fe f8ea 	bl	8002ee8 <HAL_GetTick>
 8004d14:	4603      	mov	r3, r0
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d1f5      	bne.n	8004d06 <getUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1e:	fb03 f204 	mul.w	r2, r3, r4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	1b59      	subs	r1, r3, r5
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d34:	4413      	add	r3, r2
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	431bde83 	.word	0x431bde83
 8004d44:	e000e010 	.word	0xe000e010

08004d48 <delayUs>:

void delayUs(uint16_t micros) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	80fb      	strh	r3, [r7, #6]
uint32_t start = getUs();
 8004d52:	f7ff ffcd 	bl	8004cf0 <getUs>
 8004d56:	60f8      	str	r0, [r7, #12]
while (getUs()-start < (uint32_t) micros) {
 8004d58:	e000      	b.n	8004d5c <delayUs+0x14>
	asm("nop");
 8004d5a:	bf00      	nop
while (getUs()-start < (uint32_t) micros) {
 8004d5c:	f7ff ffc8 	bl	8004cf0 <getUs>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3f6      	bcc.n	8004d5a <delayUs+0x12>
}
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d82:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d86:	ed87 1a01 	vstr	s2, [r7, #4]
 8004d8a:	edc7 1a00 	vstr	s3, [r7]
	v_round=robot_radius*omega_omni;
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fb fc02 	bl	8000598 <__aeabi_f2d>
 8004d94:	a360      	add	r3, pc, #384	; (adr r3, 8004f18 <omni_move+0x1a0>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fc55 	bl	8000648 <__aeabi_dmul>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	f7fb ff47 	bl	8000c38 <__aeabi_d2f>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4a50      	ldr	r2, [pc, #320]	; (8004ef0 <omni_move+0x178>)
 8004dae:	6013      	str	r3, [r2, #0]

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004db0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004db4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dbc:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8004ef4 <omni_move+0x17c>
 8004dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dcc:	4b48      	ldr	r3, [pc, #288]	; (8004ef0 <omni_move+0x178>)
 8004dce:	edd3 7a00 	vldr	s15, [r3]
 8004dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dd6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ef8 <omni_move+0x180>
 8004dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de6:	4b45      	ldr	r3, [pc, #276]	; (8004efc <omni_move+0x184>)
 8004de8:	edc3 7a00 	vstr	s15, [r3]
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004dec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004f00 <omni_move+0x188>
 8004df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004df8:	eddf 6a42 	vldr	s13, [pc, #264]	; 8004f04 <omni_move+0x18c>
 8004dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e08:	4b39      	ldr	r3, [pc, #228]	; (8004ef0 <omni_move+0x178>)
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e12:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004ef8 <omni_move+0x180>
 8004e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e22:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <omni_move+0x190>)
 8004e24:	edc3 7a00 	vstr	s15, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004e28:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004f00 <omni_move+0x188>
 8004e2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e34:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004f00 <omni_move+0x188>
 8004e38:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e44:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <omni_move+0x178>)
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e4e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004ef8 <omni_move+0x180>
 8004e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <omni_move+0x194>)
 8004e60:	edc3 7a00 	vstr	s15, [r3]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004e64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e70:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004f10 <omni_move+0x198>
 8004e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e80:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <omni_move+0x178>)
 8004e82:	edd3 7a00 	vldr	s15, [r3]
 8004e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e8a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004ef8 <omni_move+0x180>
 8004e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <omni_move+0x19c>)
 8004e9c:	edc3 7a00 	vstr	s15, [r3]

	actuator_motor1(m1,duty_Limit);
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <omni_move+0x184>)
 8004ea2:	edd3 7a00 	vldr	s15, [r3]
 8004ea6:	edd7 0a00 	vldr	s1, [r7]
 8004eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004eae:	f7fc f895 	bl	8000fdc <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <omni_move+0x190>)
 8004eb4:	edd3 7a00 	vldr	s15, [r3]
 8004eb8:	edd7 0a00 	vldr	s1, [r7]
 8004ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec0:	f7fc f8bc 	bl	800103c <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <omni_move+0x194>)
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	edd7 0a00 	vldr	s1, [r7]
 8004ece:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed2:	f7fc f8e3 	bl	800109c <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <omni_move+0x19c>)
 8004ed8:	edd3 7a00 	vldr	s15, [r3]
 8004edc:	edd7 0a00 	vldr	s1, [r7]
 8004ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee4:	f7fc f90a 	bl	80010fc <actuator_motor4>

		cnt_motor=0;
		stall=0;
	}*/

}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000710 	.word	0x20000710
 8004ef4:	3f5db3d7 	.word	0x3f5db3d7
 8004ef8:	3e3426c8 	.word	0x3e3426c8
 8004efc:	20000700 	.word	0x20000700
 8004f00:	bf3504f3 	.word	0xbf3504f3
 8004f04:	3f3504f3 	.word	0x3f3504f3
 8004f08:	20000704 	.word	0x20000704
 8004f0c:	20000708 	.word	0x20000708
 8004f10:	bf5db3d7 	.word	0xbf5db3d7
 8004f14:	2000070c 	.word	0x2000070c
 8004f18:	47ae147b 	.word	0x47ae147b
 8004f1c:	3fb47ae1 	.word	0x3fb47ae1

08004f20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004f24:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f26:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <MX_SPI1_Init+0x78>)
 8004f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f32:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f38:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f56:	2230      	movs	r2, #48	; 0x30
 8004f58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f6e:	2207      	movs	r2, #7
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f7e:	4805      	ldr	r0, [pc, #20]	; (8004f94 <MX_SPI1_Init+0x74>)
 8004f80:	f004 fe46 	bl	8009c10 <HAL_SPI_Init>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004f8a:	f7ff fe9f 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	2000076c 	.word	0x2000076c
 8004f98:	40013000 	.word	0x40013000

08004f9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a17      	ldr	r2, [pc, #92]	; (8005018 <HAL_SPI_MspInit+0x7c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d128      	bne.n	8005010 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004fbe:	4b17      	ldr	r3, [pc, #92]	; (800501c <HAL_SPI_MspInit+0x80>)
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc2:	4a16      	ldr	r2, [pc, #88]	; (800501c <HAL_SPI_MspInit+0x80>)
 8004fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8004fca:	4b14      	ldr	r3, [pc, #80]	; (800501c <HAL_SPI_MspInit+0x80>)
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd6:	4b11      	ldr	r3, [pc, #68]	; (800501c <HAL_SPI_MspInit+0x80>)
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <HAL_SPI_MspInit+0x80>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	; (800501c <HAL_SPI_MspInit+0x80>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004fee:	23e0      	movs	r3, #224	; 0xe0
 8004ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ffe:	2305      	movs	r3, #5
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005002:	f107 0314 	add.w	r3, r7, #20
 8005006:	4619      	mov	r1, r3
 8005008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800500c:	f003 fbe6 	bl	80087dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005010:	bf00      	nop
 8005012:	3728      	adds	r7, #40	; 0x28
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40013000 	.word	0x40013000
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_MspInit+0x44>)
 8005028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502a:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <HAL_MspInit+0x44>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6613      	str	r3, [r2, #96]	; 0x60
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_MspInit+0x44>)
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_MspInit+0x44>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	4a08      	ldr	r2, [pc, #32]	; (8005064 <HAL_MspInit+0x44>)
 8005044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005048:	6593      	str	r3, [r2, #88]	; 0x58
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_MspInit+0x44>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005056:	f003 fe49 	bl	8008cec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000

08005068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005076:	b480      	push	{r7}
 8005078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800507a:	e7fe      	b.n	800507a <HardFault_Handler+0x4>

0800507c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005080:	e7fe      	b.n	8005080 <MemManage_Handler+0x4>

08005082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005082:	b480      	push	{r7}
 8005084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005086:	e7fe      	b.n	8005086 <BusFault_Handler+0x4>

08005088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800508c:	e7fe      	b.n	800508c <UsageFault_Handler+0x4>

0800508e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050aa:	b480      	push	{r7}
 80050ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050bc:	f000 fd62 	bl	8005b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80050c8:	4802      	ldr	r0, [pc, #8]	; (80050d4 <DMA1_Channel1_IRQHandler+0x10>)
 80050ca:	f002 fbbc 	bl	8007846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80050ce:	bf00      	nop
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000a1c 	.word	0x20000a1c

080050d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80050dc:	4802      	ldr	r0, [pc, #8]	; (80050e8 <DMA1_Channel2_IRQHandler+0x10>)
 80050de:	f002 fbb2 	bl	8007846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000a7c 	.word	0x20000a7c

080050ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80050f0:	4802      	ldr	r0, [pc, #8]	; (80050fc <DMA1_Channel3_IRQHandler+0x10>)
 80050f2:	f002 fba8 	bl	8007846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200003a4 	.word	0x200003a4

08005100 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8005104:	4802      	ldr	r0, [pc, #8]	; (8005110 <DMA1_Channel4_IRQHandler+0x10>)
 8005106:	f002 fb9e 	bl	8007846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000404 	.word	0x20000404

08005114 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005118:	4802      	ldr	r0, [pc, #8]	; (8005124 <DMA1_Channel5_IRQHandler+0x10>)
 800511a:	f002 fb94 	bl	8007846 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000344 	.word	0x20000344

08005128 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800512c:	4802      	ldr	r0, [pc, #8]	; (8005138 <FDCAN1_IT0_IRQHandler+0x10>)
 800512e:	f003 f8cb 	bl	80082c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000468 	.word	0x20000468

0800513c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005140:	4802      	ldr	r0, [pc, #8]	; (800514c <FDCAN1_IT1_IRQHandler+0x10>)
 8005142:	f003 f8c1 	bl	80082c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000468 	.word	0x20000468

08005150 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8005154:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005158:	f003 fd0c 	bl	8008b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800515c:	bf00      	nop
 800515e:	bd80      	pop	{r7, pc}

08005160 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005164:	4802      	ldr	r0, [pc, #8]	; (8005170 <USART2_IRQHandler+0x10>)
 8005166:	f006 fc7b 	bl	800ba60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200008fc 	.word	0x200008fc

08005174 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005178:	4802      	ldr	r0, [pc, #8]	; (8005184 <TIM7_DAC_IRQHandler+0x10>)
 800517a:	f005 fba5 	bl	800a8c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000820 	.word	0x20000820

08005188 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <FDCAN2_IT0_IRQHandler+0x10>)
 800518e:	f003 f89b 	bl	80082c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200004cc 	.word	0x200004cc

0800519c <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80051a0:	4802      	ldr	r0, [pc, #8]	; (80051ac <FDCAN2_IT1_IRQHandler+0x10>)
 80051a2:	f003 f891 	bl	80082c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	200004cc 	.word	0x200004cc

080051b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
	return 1;
 80051b4:	2301      	movs	r3, #1
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <_kill>:

int _kill(int pid, int sig)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051ca:	f007 ffdd 	bl	800d188 <__errno>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2216      	movs	r2, #22
 80051d2:	601a      	str	r2, [r3, #0]
	return -1;
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <_exit>:

void _exit (int status)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051e8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ffe7 	bl	80051c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051f2:	e7fe      	b.n	80051f2 <_exit+0x12>

080051f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e00a      	b.n	800521c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005206:	f3af 8000 	nop.w
 800520a:	4601      	mov	r1, r0
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	60ba      	str	r2, [r7, #8]
 8005212:	b2ca      	uxtb	r2, r1
 8005214:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	3301      	adds	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	dbf0      	blt.n	8005206 <_read+0x12>
	}

return len;
 8005224:	687b      	ldr	r3, [r7, #4]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e009      	b.n	8005254 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	60ba      	str	r2, [r7, #8]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f7fd fe3b 	bl	8002ec4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3301      	adds	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	dbf1      	blt.n	8005240 <_write+0x12>
	}
	return len;
 800525c:	687b      	ldr	r3, [r7, #4]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <_close>:

int _close(int file)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
	return -1;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800528e:	605a      	str	r2, [r3, #4]
	return 0;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <_isatty>:

int _isatty(int file)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
	return 1;
 80052a6:	2301      	movs	r3, #1
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
	return 0;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052d8:	4b11      	ldr	r3, [pc, #68]	; (8005320 <_sbrk+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <_sbrk+0x16>
		heap_end = &end;
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <_sbrk+0x50>)
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <_sbrk+0x54>)
 80052e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80052e6:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <_sbrk+0x50>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <_sbrk+0x50>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	466a      	mov	r2, sp
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d907      	bls.n	800530a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80052fa:	f007 ff45 	bl	800d188 <__errno>
 80052fe:	4603      	mov	r3, r0
 8005300:	220c      	movs	r2, #12
 8005302:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	e006      	b.n	8005318 <_sbrk+0x48>
	}

	heap_end += incr;
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <_sbrk+0x50>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	4a03      	ldr	r2, [pc, #12]	; (8005320 <_sbrk+0x50>)
 8005314:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005316:	68fb      	ldr	r3, [r7, #12]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	200007d0 	.word	0x200007d0
 8005324:	20000af8 	.word	0x20000af8

08005328 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <SystemInit+0x28>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <SystemInit+0x28>)
 8005334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <SystemInit+0x28>)
 800533e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005342:	609a      	str	r2, [r3, #8]
#endif
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800535a:	f107 031c 	add.w	r3, r7, #28
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005366:	463b      	mov	r3, r7
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]
 8005374:	615a      	str	r2, [r3, #20]
 8005376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005378:	4b21      	ldr	r3, [pc, #132]	; (8005400 <MX_TIM5_Init+0xac>)
 800537a:	4a22      	ldr	r2, [pc, #136]	; (8005404 <MX_TIM5_Init+0xb0>)
 800537c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170;
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <MX_TIM5_Init+0xac>)
 8005380:	22aa      	movs	r2, #170	; 0xaa
 8005382:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <MX_TIM5_Init+0xac>)
 8005386:	2200      	movs	r2, #0
 8005388:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500;
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <MX_TIM5_Init+0xac>)
 800538c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005390:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <MX_TIM5_Init+0xac>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <MX_TIM5_Init+0xac>)
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800539e:	4818      	ldr	r0, [pc, #96]	; (8005400 <MX_TIM5_Init+0xac>)
 80053a0:	f005 f928 	bl	800a5f4 <HAL_TIM_PWM_Init>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80053aa:	f7ff fc8f 	bl	8004ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80053b6:	f107 031c 	add.w	r3, r7, #28
 80053ba:	4619      	mov	r1, r3
 80053bc:	4810      	ldr	r0, [pc, #64]	; (8005400 <MX_TIM5_Init+0xac>)
 80053be:	f006 f937 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80053c8:	f7ff fc80 	bl	8004ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053cc:	2360      	movs	r3, #96	; 0x60
 80053ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053dc:	463b      	mov	r3, r7
 80053de:	2204      	movs	r2, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4807      	ldr	r0, [pc, #28]	; (8005400 <MX_TIM5_Init+0xac>)
 80053e4:	f005 fbf0 	bl	800abc8 <HAL_TIM_PWM_ConfigChannel>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80053ee:	f7ff fc6d 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80053f2:	4803      	ldr	r0, [pc, #12]	; (8005400 <MX_TIM5_Init+0xac>)
 80053f4:	f000 f884 	bl	8005500 <HAL_TIM_MspPostInit>

}
 80053f8:	bf00      	nop
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200007d4 	.word	0x200007d4
 8005404:	40000c00 	.word	0x40000c00

08005408 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800540e:	1d3b      	adds	r3, r7, #4
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <MX_TIM7_Init+0x64>)
 800541a:	4a15      	ldr	r2, [pc, #84]	; (8005470 <MX_TIM7_Init+0x68>)
 800541c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170;
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <MX_TIM7_Init+0x64>)
 8005420:	22aa      	movs	r2, #170	; 0xaa
 8005422:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <MX_TIM7_Init+0x64>)
 8005426:	2200      	movs	r2, #0
 8005428:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800542a:	4b10      	ldr	r3, [pc, #64]	; (800546c <MX_TIM7_Init+0x64>)
 800542c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005430:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005432:	4b0e      	ldr	r3, [pc, #56]	; (800546c <MX_TIM7_Init+0x64>)
 8005434:	2200      	movs	r2, #0
 8005436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005438:	480c      	ldr	r0, [pc, #48]	; (800546c <MX_TIM7_Init+0x64>)
 800543a:	f005 f80b 	bl	800a454 <HAL_TIM_Base_Init>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005444:	f7ff fc42 	bl	8004ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005448:	2300      	movs	r3, #0
 800544a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005450:	1d3b      	adds	r3, r7, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4805      	ldr	r0, [pc, #20]	; (800546c <MX_TIM7_Init+0x64>)
 8005456:	f006 f8eb 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005460:	f7ff fc34 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000820 	.word	0x20000820
 8005470:	40001400 	.word	0x40001400

08005474 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <HAL_TIM_PWM_MspInit+0x38>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10b      	bne.n	800549e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800548c:	f043 0308 	orr.w	r3, r3, #8
 8005490:	6593      	str	r3, [r2, #88]	; 0x58
 8005492:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40021000 	.word	0x40021000

080054b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <HAL_TIM_Base_MspInit+0x44>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d113      	bne.n	80054ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80054c6:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <HAL_TIM_Base_MspInit+0x48>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	4a0c      	ldr	r2, [pc, #48]	; (80054fc <HAL_TIM_Base_MspInit+0x48>)
 80054cc:	f043 0320 	orr.w	r3, r3, #32
 80054d0:	6593      	str	r3, [r2, #88]	; 0x58
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <HAL_TIM_Base_MspInit+0x48>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80054de:	2200      	movs	r2, #0
 80054e0:	2108      	movs	r1, #8
 80054e2:	2037      	movs	r0, #55	; 0x37
 80054e4:	f001 ff97 	bl	8007416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80054e8:	2037      	movs	r0, #55	; 0x37
 80054ea:	f001 ffae 	bl	800744a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40001400 	.word	0x40001400
 80054fc:	40021000 	.word	0x40021000

08005500 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a11      	ldr	r2, [pc, #68]	; (8005564 <HAL_TIM_MspPostInit+0x64>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d11c      	bne.n	800555c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <HAL_TIM_MspPostInit+0x68>)
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	4a10      	ldr	r2, [pc, #64]	; (8005568 <HAL_TIM_MspPostInit+0x68>)
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800552e:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <HAL_TIM_MspPostInit+0x68>)
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 800553a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005540:	2302      	movs	r3, #2
 8005542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800554c:	2301      	movs	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	4619      	mov	r1, r3
 8005556:	4805      	ldr	r0, [pc, #20]	; (800556c <HAL_TIM_MspPostInit+0x6c>)
 8005558:	f003 f940 	bl	80087dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800555c:	bf00      	nop
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40021000 	.word	0x40021000
 800556c:	48000800 	.word	0x48000800

08005570 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005574:	4b23      	ldr	r3, [pc, #140]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 8005576:	4a24      	ldr	r2, [pc, #144]	; (8005608 <MX_LPUART1_UART_Init+0x98>)
 8005578:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800557a:	4b22      	ldr	r3, [pc, #136]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 800557c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005580:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005582:	4b20      	ldr	r3, [pc, #128]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 8005584:	2200      	movs	r2, #0
 8005586:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005588:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 800558a:	2200      	movs	r2, #0
 800558c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800558e:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 8005590:	2200      	movs	r2, #0
 8005592:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005594:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 8005596:	220c      	movs	r2, #12
 8005598:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 800559c:	2200      	movs	r2, #0
 800559e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80055ac:	4b15      	ldr	r3, [pc, #84]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055ae:	2220      	movs	r2, #32
 80055b0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80055ba:	4812      	ldr	r0, [pc, #72]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055bc:	f006 f914 	bl	800b7e8 <HAL_UART_Init>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 80055c6:	f7ff fb81 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055ca:	2100      	movs	r1, #0
 80055cc:	480d      	ldr	r0, [pc, #52]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055ce:	f007 fd11 	bl	800cff4 <HAL_UARTEx_SetTxFifoThreshold>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 80055d8:	f7ff fb78 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055dc:	2100      	movs	r1, #0
 80055de:	4809      	ldr	r0, [pc, #36]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055e0:	f007 fd46 	bl	800d070 <HAL_UARTEx_SetRxFifoThreshold>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 80055ea:	f7ff fb6f 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80055ee:	4805      	ldr	r0, [pc, #20]	; (8005604 <MX_LPUART1_UART_Init+0x94>)
 80055f0:	f007 fcc7 	bl	800cf82 <HAL_UARTEx_DisableFifoMode>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 80055fa:	f7ff fb67 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80055fe:	bf00      	nop
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	2000086c 	.word	0x2000086c
 8005608:	40008000 	.word	0x40008000

0800560c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005610:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005612:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <MX_USART2_UART_Init+0x9c>)
 8005614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8005616:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005618:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800561c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800561e:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005620:	2200      	movs	r2, #0
 8005622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005624:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005626:	2200      	movs	r2, #0
 8005628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800562a:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 800562c:	2200      	movs	r2, #0
 800562e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005630:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005632:	220c      	movs	r2, #12
 8005634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005636:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005638:	2200      	movs	r2, #0
 800563a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800563c:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 800563e:	2200      	movs	r2, #0
 8005640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005642:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005644:	2200      	movs	r2, #0
 8005646:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005648:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 800564a:	2200      	movs	r2, #0
 800564c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005650:	2208      	movs	r2, #8
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005654:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800565c:	4811      	ldr	r0, [pc, #68]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 800565e:	f006 f8c3 	bl	800b7e8 <HAL_UART_Init>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8005668:	f7ff fb30 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800566c:	2100      	movs	r1, #0
 800566e:	480d      	ldr	r0, [pc, #52]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005670:	f007 fcc0 	bl	800cff4 <HAL_UARTEx_SetTxFifoThreshold>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800567a:	f7ff fb27 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800567e:	2100      	movs	r1, #0
 8005680:	4808      	ldr	r0, [pc, #32]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005682:	f007 fcf5 	bl	800d070 <HAL_UARTEx_SetRxFifoThreshold>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800568c:	f7ff fb1e 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005690:	4804      	ldr	r0, [pc, #16]	; (80056a4 <MX_USART2_UART_Init+0x98>)
 8005692:	f007 fc76 	bl	800cf82 <HAL_UARTEx_DisableFifoMode>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800569c:	f7ff fb16 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80056a0:	bf00      	nop
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200008fc 	.word	0x200008fc
 80056a8:	40004400 	.word	0x40004400

080056ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80056b0:	4b22      	ldr	r3, [pc, #136]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056b2:	4a23      	ldr	r2, [pc, #140]	; (8005740 <MX_USART3_UART_Init+0x94>)
 80056b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80056b6:	4b21      	ldr	r3, [pc, #132]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80056be:	4b1f      	ldr	r3, [pc, #124]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80056c4:	4b1d      	ldr	r3, [pc, #116]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80056ca:	4b1c      	ldr	r3, [pc, #112]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056d2:	220c      	movs	r2, #12
 80056d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056d6:	4b19      	ldr	r3, [pc, #100]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056d8:	2200      	movs	r2, #0
 80056da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056de:	2200      	movs	r2, #0
 80056e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056e2:	4b16      	ldr	r3, [pc, #88]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80056e8:	4b14      	ldr	r3, [pc, #80]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80056f4:	4811      	ldr	r0, [pc, #68]	; (800573c <MX_USART3_UART_Init+0x90>)
 80056f6:	f006 f877 	bl	800b7e8 <HAL_UART_Init>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005700:	f7ff fae4 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005704:	2100      	movs	r1, #0
 8005706:	480d      	ldr	r0, [pc, #52]	; (800573c <MX_USART3_UART_Init+0x90>)
 8005708:	f007 fc74 	bl	800cff4 <HAL_UARTEx_SetTxFifoThreshold>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005712:	f7ff fadb 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005716:	2100      	movs	r1, #0
 8005718:	4808      	ldr	r0, [pc, #32]	; (800573c <MX_USART3_UART_Init+0x90>)
 800571a:	f007 fca9 	bl	800d070 <HAL_UARTEx_SetRxFifoThreshold>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005724:	f7ff fad2 	bl	8004ccc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005728:	4804      	ldr	r0, [pc, #16]	; (800573c <MX_USART3_UART_Init+0x90>)
 800572a:	f007 fc2a 	bl	800cf82 <HAL_UARTEx_DisableFifoMode>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005734:	f7ff faca 	bl	8004ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005738:	bf00      	nop
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2000098c 	.word	0x2000098c
 8005740:	40004800 	.word	0x40004800

08005744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b0a2      	sub	sp, #136	; 0x88
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800574c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	60da      	str	r2, [r3, #12]
 800575a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800575c:	f107 0320 	add.w	r3, r7, #32
 8005760:	2254      	movs	r2, #84	; 0x54
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f007 fd39 	bl	800d1dc <memset>
  if(uartHandle->Instance==LPUART1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a8b      	ldr	r2, [pc, #556]	; (800599c <HAL_UART_MspInit+0x258>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d139      	bne.n	80057e8 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005774:	2320      	movs	r3, #32
 8005776:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005778:	2300      	movs	r3, #0
 800577a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800577c:	f107 0320 	add.w	r3, r7, #32
 8005780:	4618      	mov	r0, r3
 8005782:	f003 fff7 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800578c:	f7ff fa9e 	bl	8004ccc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005790:	4b83      	ldr	r3, [pc, #524]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005794:	4a82      	ldr	r2, [pc, #520]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800579c:	4b80      	ldr	r3, [pc, #512]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 800579e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057a8:	4b7d      	ldr	r3, [pc, #500]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	4a7c      	ldr	r2, [pc, #496]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057b4:	4b7a      	ldr	r3, [pc, #488]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 80057b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80057c0:	230c      	movs	r3, #12
 80057c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c4:	2302      	movs	r3, #2
 80057c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80057d2:	230c      	movs	r3, #12
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057dc:	4619      	mov	r1, r3
 80057de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057e2:	f002 fffb 	bl	80087dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80057e6:	e0d5      	b.n	8005994 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6d      	ldr	r2, [pc, #436]	; (80059a4 <HAL_UART_MspInit+0x260>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d169      	bne.n	80058c6 <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80057f2:	2302      	movs	r3, #2
 80057f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80057f6:	2300      	movs	r3, #0
 80057f8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057fa:	f107 0320 	add.w	r3, r7, #32
 80057fe:	4618      	mov	r0, r3
 8005800:	f003 ffb8 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_UART_MspInit+0xca>
      Error_Handler();
 800580a:	f7ff fa5f 	bl	8004ccc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800580e:	4b64      	ldr	r3, [pc, #400]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005818:	6593      	str	r3, [r2, #88]	; 0x58
 800581a:	4b61      	ldr	r3, [pc, #388]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 800581c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005826:	4b5e      	ldr	r3, [pc, #376]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582a:	4a5d      	ldr	r2, [pc, #372]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 800582c:	f043 0302 	orr.w	r3, r3, #2
 8005830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005832:	4b5b      	ldr	r3, [pc, #364]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 800583e:	2318      	movs	r3, #24
 8005840:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005842:	2302      	movs	r3, #2
 8005844:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005846:	2300      	movs	r3, #0
 8005848:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584a:	2300      	movs	r3, #0
 800584c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005850:	2307      	movs	r3, #7
 8005852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005856:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800585a:	4619      	mov	r1, r3
 800585c:	4852      	ldr	r0, [pc, #328]	; (80059a8 <HAL_UART_MspInit+0x264>)
 800585e:	f002 ffbd 	bl	80087dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005862:	4b52      	ldr	r3, [pc, #328]	; (80059ac <HAL_UART_MspInit+0x268>)
 8005864:	4a52      	ldr	r2, [pc, #328]	; (80059b0 <HAL_UART_MspInit+0x26c>)
 8005866:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005868:	4b50      	ldr	r3, [pc, #320]	; (80059ac <HAL_UART_MspInit+0x268>)
 800586a:	221a      	movs	r2, #26
 800586c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800586e:	4b4f      	ldr	r3, [pc, #316]	; (80059ac <HAL_UART_MspInit+0x268>)
 8005870:	2200      	movs	r2, #0
 8005872:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_UART_MspInit+0x268>)
 8005876:	2200      	movs	r2, #0
 8005878:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800587a:	4b4c      	ldr	r3, [pc, #304]	; (80059ac <HAL_UART_MspInit+0x268>)
 800587c:	2280      	movs	r2, #128	; 0x80
 800587e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005880:	4b4a      	ldr	r3, [pc, #296]	; (80059ac <HAL_UART_MspInit+0x268>)
 8005882:	2200      	movs	r2, #0
 8005884:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005886:	4b49      	ldr	r3, [pc, #292]	; (80059ac <HAL_UART_MspInit+0x268>)
 8005888:	2200      	movs	r2, #0
 800588a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800588c:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_UART_MspInit+0x268>)
 800588e:	2220      	movs	r2, #32
 8005890:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005892:	4b46      	ldr	r3, [pc, #280]	; (80059ac <HAL_UART_MspInit+0x268>)
 8005894:	2200      	movs	r2, #0
 8005896:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005898:	4844      	ldr	r0, [pc, #272]	; (80059ac <HAL_UART_MspInit+0x268>)
 800589a:	f001 fdf1 	bl	8007480 <HAL_DMA_Init>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_UART_MspInit+0x164>
      Error_Handler();
 80058a4:	f7ff fa12 	bl	8004ccc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a40      	ldr	r2, [pc, #256]	; (80059ac <HAL_UART_MspInit+0x268>)
 80058ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80058ae:	4a3f      	ldr	r2, [pc, #252]	; (80059ac <HAL_UART_MspInit+0x268>)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 80058b4:	2200      	movs	r2, #0
 80058b6:	210c      	movs	r1, #12
 80058b8:	2026      	movs	r0, #38	; 0x26
 80058ba:	f001 fdac 	bl	8007416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80058be:	2026      	movs	r0, #38	; 0x26
 80058c0:	f001 fdc3 	bl	800744a <HAL_NVIC_EnableIRQ>
}
 80058c4:	e066      	b.n	8005994 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART3)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3a      	ldr	r2, [pc, #232]	; (80059b4 <HAL_UART_MspInit+0x270>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d161      	bne.n	8005994 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80058d0:	2304      	movs	r3, #4
 80058d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058d8:	f107 0320 	add.w	r3, r7, #32
 80058dc:	4618      	mov	r0, r3
 80058de:	f003 ff49 	bl	8009774 <HAL_RCCEx_PeriphCLKConfig>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80058e8:	f7ff f9f0 	bl	8004ccc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80058ec:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 80058f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f6:	6593      	str	r3, [r2, #88]	; 0x58
 80058f8:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005904:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 800590a:	f043 0304 	orr.w	r3, r3, #4
 800590e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005910:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <HAL_UART_MspInit+0x25c>)
 8005912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 800591c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005920:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005922:	2302      	movs	r3, #2
 8005924:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005926:	2300      	movs	r3, #0
 8005928:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800592a:	2300      	movs	r3, #0
 800592c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005930:	2307      	movs	r3, #7
 8005932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005936:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800593a:	4619      	mov	r1, r3
 800593c:	481e      	ldr	r0, [pc, #120]	; (80059b8 <HAL_UART_MspInit+0x274>)
 800593e:	f002 ff4d 	bl	80087dc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_UART_MspInit+0x278>)
 8005944:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_UART_MspInit+0x27c>)
 8005946:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005948:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <HAL_UART_MspInit+0x278>)
 800594a:	221c      	movs	r2, #28
 800594c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800594e:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_UART_MspInit+0x278>)
 8005950:	2200      	movs	r2, #0
 8005952:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_UART_MspInit+0x278>)
 8005956:	2200      	movs	r2, #0
 8005958:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800595a:	4b18      	ldr	r3, [pc, #96]	; (80059bc <HAL_UART_MspInit+0x278>)
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005960:	4b16      	ldr	r3, [pc, #88]	; (80059bc <HAL_UART_MspInit+0x278>)
 8005962:	2200      	movs	r2, #0
 8005964:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <HAL_UART_MspInit+0x278>)
 8005968:	2200      	movs	r2, #0
 800596a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_UART_MspInit+0x278>)
 800596e:	2220      	movs	r2, #32
 8005970:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_UART_MspInit+0x278>)
 8005974:	2200      	movs	r2, #0
 8005976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005978:	4810      	ldr	r0, [pc, #64]	; (80059bc <HAL_UART_MspInit+0x278>)
 800597a:	f001 fd81 	bl	8007480 <HAL_DMA_Init>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_MspInit+0x244>
      Error_Handler();
 8005984:	f7ff f9a2 	bl	8004ccc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <HAL_UART_MspInit+0x278>)
 800598c:	67da      	str	r2, [r3, #124]	; 0x7c
 800598e:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <HAL_UART_MspInit+0x278>)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005994:	bf00      	nop
 8005996:	3788      	adds	r7, #136	; 0x88
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40008000 	.word	0x40008000
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40004400 	.word	0x40004400
 80059a8:	48000400 	.word	0x48000400
 80059ac:	20000a1c 	.word	0x20000a1c
 80059b0:	40020008 	.word	0x40020008
 80059b4:	40004800 	.word	0x40004800
 80059b8:	48000800 	.word	0x48000800
 80059bc:	20000a7c 	.word	0x20000a7c
 80059c0:	4002001c 	.word	0x4002001c

080059c4 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	789b      	ldrb	r3, [r3, #2]
 80059dc:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	78db      	ldrb	r3, [r3, #3]
 80059e2:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	ee07 3a90 	vmov	s15, r3
}
 80059ea:	eeb0 0a67 	vmov.f32	s0, s15
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	ed87 0a00 	vstr	s0, [r7]
    Float_char4 tmp;
    tmp.float_value=float_value;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	60fb      	str	r3, [r7, #12]
    value[0]=tmp.char4_value[0];
 8005a08:	7b3a      	ldrb	r2, [r7, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	701a      	strb	r2, [r3, #0]
    value[1]=tmp.char4_value[1];
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3301      	adds	r3, #1
 8005a12:	7b7a      	ldrb	r2, [r7, #13]
 8005a14:	701a      	strb	r2, [r3, #0]
    value[2]=tmp.char4_value[2];
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3302      	adds	r3, #2
 8005a1a:	7bba      	ldrb	r2, [r7, #14]
 8005a1c:	701a      	strb	r2, [r3, #0]
    value[3]=tmp.char4_value[3];
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3303      	adds	r3, #3
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	701a      	strb	r2, [r3, #0]
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <xprintf_init>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/


void xprintf_init(UART_HandleTypeDef *handler){
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	huart_xprintf = handler;
 8005a3c:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <xprintf_init+0x20>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6013      	str	r3, [r2, #0]
	xdev_out(uart_putc);
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <xprintf_init+0x24>)
 8005a44:	4a05      	ldr	r2, [pc, #20]	; (8005a5c <xprintf_init+0x28>)
 8005a46:	601a      	str	r2, [r3, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	20000768 	.word	0x20000768
 8005a58:	20000adc 	.word	0x20000adc
 8005a5c:	08005a61 	.word	0x08005a61

08005a60 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
	 char buf[1];
	 buf[0] = c;
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <uart_putc+0x28>)
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	f107 010c 	add.w	r1, r7, #12
 8005a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f005 ff04 	bl	800b888 <HAL_UART_Transmit>
	}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000768 	.word	0x20000768

08005a8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a8c:	480d      	ldr	r0, [pc, #52]	; (8005ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a90:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a92:	490e      	ldr	r1, [pc, #56]	; (8005acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a94:	4a0e      	ldr	r2, [pc, #56]	; (8005ad0 <LoopForever+0xe>)
  movs r3, #0
 8005a96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005a98:	e002      	b.n	8005aa0 <LoopCopyDataInit>

08005a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a9e:	3304      	adds	r3, #4

08005aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005aa4:	d3f9      	bcc.n	8005a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005aa8:	4c0b      	ldr	r4, [pc, #44]	; (8005ad8 <LoopForever+0x16>)
  movs r3, #0
 8005aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005aac:	e001      	b.n	8005ab2 <LoopFillZerobss>

08005aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ab0:	3204      	adds	r2, #4

08005ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ab4:	d3fb      	bcc.n	8005aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ab6:	f7ff fc37 	bl	8005328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aba:	f007 fb6b 	bl	800d194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005abe:	f7fd fa1f 	bl	8002f00 <main>

08005ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8005ac2:	e7fe      	b.n	8005ac2 <LoopForever>
  ldr   r0, =_estack
 8005ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005acc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005ad0:	080104d4 	.word	0x080104d4
  ldr r2, =_sbss
 8005ad4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005ad8:	20000af4 	.word	0x20000af4

08005adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005adc:	e7fe      	b.n	8005adc <ADC1_2_IRQHandler>

08005ade <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ae8:	2003      	movs	r0, #3
 8005aea:	f001 fc89 	bl	8007400 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aee:	2000      	movs	r0, #0
 8005af0:	f000 f80e 	bl	8005b10 <HAL_InitTick>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	71fb      	strb	r3, [r7, #7]
 8005afe:	e001      	b.n	8005b04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005b00:	f7ff fa8e 	bl	8005020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b04:	79fb      	ldrb	r3, [r7, #7]

}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005b1c:	4b16      	ldr	r3, [pc, #88]	; (8005b78 <HAL_InitTick+0x68>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d022      	beq.n	8005b6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <HAL_InitTick+0x6c>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <HAL_InitTick+0x68>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fc94 	bl	8007466 <HAL_SYSTICK_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10f      	bne.n	8005b64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b0f      	cmp	r3, #15
 8005b48:	d809      	bhi.n	8005b5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	f001 fc60 	bl	8007416 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b56:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <HAL_InitTick+0x70>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e007      	b.n	8005b6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
 8005b62:	e004      	b.n	8005b6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
 8005b68:	e001      	b.n	8005b6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000010 	.word	0x20000010
 8005b7c:	20000008 	.word	0x20000008
 8005b80:	2000000c 	.word	0x2000000c

08005b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_IncTick+0x1c>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <HAL_IncTick+0x20>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4413      	add	r3, r2
 8005b92:	4a03      	ldr	r2, [pc, #12]	; (8005ba0 <HAL_IncTick+0x1c>)
 8005b94:	6013      	str	r3, [r2, #0]
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	20000ae0 	.word	0x20000ae0
 8005ba4:	20000010 	.word	0x20000010

08005ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bb0:	f7fd f99a 	bl	8002ee8 <HAL_GetTick>
 8005bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d004      	beq.n	8005bcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bc2:	4b09      	ldr	r3, [pc, #36]	; (8005be8 <HAL_Delay+0x40>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bcc:	bf00      	nop
 8005bce:	f7fd f98b 	bl	8002ee8 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d8f7      	bhi.n	8005bce <HAL_Delay+0x26>
  {
  }
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000010 	.word	0x20000010

08005bec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	609a      	str	r2, [r3, #8]
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3360      	adds	r3, #96	; 0x60
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <LL_ADC_SetOffset+0x44>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	03fff000 	.word	0x03fff000

08005c9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3360      	adds	r3, #96	; 0x60
 8005caa:	461a      	mov	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3360      	adds	r3, #96	; 0x60
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b087      	sub	sp, #28
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3360      	adds	r3, #96	; 0x60
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3360      	adds	r3, #96	; 0x60
 8005d44:	461a      	mov	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	615a      	str	r2, [r3, #20]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3330      	adds	r3, #48	; 0x30
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	4413      	add	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	211f      	movs	r1, #31
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	401a      	ands	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	0e9b      	lsrs	r3, r3, #26
 8005dee:	f003 011f 	and.w	r1, r3, #31
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	0e5b      	lsrs	r3, r3, #25
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	4413      	add	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	0d1b      	lsrs	r3, r3, #20
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2107      	movs	r1, #7
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	0d1b      	lsrs	r3, r3, #20
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	431a      	orrs	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a0f      	ldr	r2, [pc, #60]	; (8005eb0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d10a      	bne.n	8005e8e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e84:	431a      	orrs	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8005e8c:	e00a      	b.n	8005ea4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	401a      	ands	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	407f0000 	.word	0x407f0000

08005eb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 031f 	and.w	r3, r3, #31
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6093      	str	r3, [r2, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f08:	d101      	bne.n	8005f0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f58:	d101      	bne.n	8005f5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f80:	f043 0201 	orr.w	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <LL_ADC_IsEnabled+0x18>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <LL_ADC_IsEnabled+0x1a>
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fce:	f043 0204 	orr.w	r2, r3, #4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d101      	bne.n	8005ffa <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d101      	bne.n	8006020 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b089      	sub	sp, #36	; 0x24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800603c:	2300      	movs	r3, #0
 800603e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e1af      	b.n	80063aa <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fb fa91 	bl	8001580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff ff3f 	bl	8005ef4 <LL_ADC_IsDeepPowerDownEnabled>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff ff25 	bl	8005ed0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff ff5a 	bl	8005f44 <LL_ADC_IsInternalRegulatorEnabled>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d115      	bne.n	80060c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff ff3e 	bl	8005f1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060a0:	4b9f      	ldr	r3, [pc, #636]	; (8006320 <HAL_ADC_Init+0x2f0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	099b      	lsrs	r3, r3, #6
 80060a6:	4a9f      	ldr	r2, [pc, #636]	; (8006324 <HAL_ADC_Init+0x2f4>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	3301      	adds	r3, #1
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80060b4:	e002      	b.n	80060bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f9      	bne.n	80060b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff ff3c 	bl	8005f44 <LL_ADC_IsInternalRegulatorEnabled>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d6:	f043 0210 	orr.w	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e2:	f043 0201 	orr.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff ff75 	bl	8005fe2 <LL_ADC_REG_IsConversionOngoing>
 80060f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	f040 8148 	bne.w	8006398 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f040 8144 	bne.w	8006398 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006114:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006118:	f043 0202 	orr.w	r2, r3, #2
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff35 	bl	8005f94 <LL_ADC_IsEnabled>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d141      	bne.n	80061b4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006138:	d004      	beq.n	8006144 <HAL_ADC_Init+0x114>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a7a      	ldr	r2, [pc, #488]	; (8006328 <HAL_ADC_Init+0x2f8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10f      	bne.n	8006164 <HAL_ADC_Init+0x134>
 8006144:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006148:	f7ff ff24 	bl	8005f94 <LL_ADC_IsEnabled>
 800614c:	4604      	mov	r4, r0
 800614e:	4876      	ldr	r0, [pc, #472]	; (8006328 <HAL_ADC_Init+0x2f8>)
 8006150:	f7ff ff20 	bl	8005f94 <LL_ADC_IsEnabled>
 8006154:	4603      	mov	r3, r0
 8006156:	4323      	orrs	r3, r4
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e012      	b.n	800618a <HAL_ADC_Init+0x15a>
 8006164:	4871      	ldr	r0, [pc, #452]	; (800632c <HAL_ADC_Init+0x2fc>)
 8006166:	f7ff ff15 	bl	8005f94 <LL_ADC_IsEnabled>
 800616a:	4604      	mov	r4, r0
 800616c:	4870      	ldr	r0, [pc, #448]	; (8006330 <HAL_ADC_Init+0x300>)
 800616e:	f7ff ff11 	bl	8005f94 <LL_ADC_IsEnabled>
 8006172:	4603      	mov	r3, r0
 8006174:	431c      	orrs	r4, r3
 8006176:	486f      	ldr	r0, [pc, #444]	; (8006334 <HAL_ADC_Init+0x304>)
 8006178:	f7ff ff0c 	bl	8005f94 <LL_ADC_IsEnabled>
 800617c:	4603      	mov	r3, r0
 800617e:	4323      	orrs	r3, r4
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d012      	beq.n	80061b4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006196:	d004      	beq.n	80061a2 <HAL_ADC_Init+0x172>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a62      	ldr	r2, [pc, #392]	; (8006328 <HAL_ADC_Init+0x2f8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d101      	bne.n	80061a6 <HAL_ADC_Init+0x176>
 80061a2:	4a65      	ldr	r2, [pc, #404]	; (8006338 <HAL_ADC_Init+0x308>)
 80061a4:	e000      	b.n	80061a8 <HAL_ADC_Init+0x178>
 80061a6:	4a65      	ldr	r2, [pc, #404]	; (800633c <HAL_ADC_Init+0x30c>)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7ff fd1c 	bl	8005bec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	7f5b      	ldrb	r3, [r3, #29]
 80061b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80061c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80061ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061d4:	4313      	orrs	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d106      	bne.n	80061f0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	3b01      	subs	r3, #1
 80061e8:	045b      	lsls	r3, r3, #17
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	4313      	orrs	r3, r2
 800620a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	4b4b      	ldr	r3, [pc, #300]	; (8006340 <HAL_ADC_Init+0x310>)
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	430b      	orrs	r3, r1
 800621e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fed1 	bl	8005fe2 <LL_ADC_REG_IsConversionOngoing>
 8006240:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fede 	bl	8006008 <LL_ADC_INJ_IsConversionOngoing>
 800624c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d17f      	bne.n	8006354 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d17c      	bne.n	8006354 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800625e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006266:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006268:	4313      	orrs	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006276:	f023 0302 	bic.w	r3, r3, #2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	430b      	orrs	r3, r1
 8006282:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800629a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6911      	ldr	r1, [r2, #16]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	430b      	orrs	r3, r1
 80062b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80062ba:	e013      	b.n	80062e4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d12a      	bne.n	8006344 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006304:	4311      	orrs	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800630a:	4311      	orrs	r1, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006310:	430a      	orrs	r2, r1
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	611a      	str	r2, [r3, #16]
 800631e:	e019      	b.n	8006354 <HAL_ADC_Init+0x324>
 8006320:	20000008 	.word	0x20000008
 8006324:	053e2d63 	.word	0x053e2d63
 8006328:	50000100 	.word	0x50000100
 800632c:	50000400 	.word	0x50000400
 8006330:	50000500 	.word	0x50000500
 8006334:	50000600 	.word	0x50000600
 8006338:	50000300 	.word	0x50000300
 800633c:	50000700 	.word	0x50000700
 8006340:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10c      	bne.n	8006376 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f023 010f 	bic.w	r1, r3, #15
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
 8006374:	e007      	b.n	8006386 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 020f 	bic.w	r2, r2, #15
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	f043 0201 	orr.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	65da      	str	r2, [r3, #92]	; 0x5c
 8006396:	e007      	b.n	80063a8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639c:	f043 0210 	orr.w	r2, r3, #16
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3724      	adds	r7, #36	; 0x24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	bf00      	nop

080063b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063c8:	d004      	beq.n	80063d4 <HAL_ADC_Start_DMA+0x20>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a5a      	ldr	r2, [pc, #360]	; (8006538 <HAL_ADC_Start_DMA+0x184>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <HAL_ADC_Start_DMA+0x24>
 80063d4:	4b59      	ldr	r3, [pc, #356]	; (800653c <HAL_ADC_Start_DMA+0x188>)
 80063d6:	e000      	b.n	80063da <HAL_ADC_Start_DMA+0x26>
 80063d8:	4b59      	ldr	r3, [pc, #356]	; (8006540 <HAL_ADC_Start_DMA+0x18c>)
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fd6a 	bl	8005eb4 <LL_ADC_GetMultimode>
 80063e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fdfb 	bl	8005fe2 <LL_ADC_REG_IsConversionOngoing>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 809b 	bne.w	800652a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_Start_DMA+0x4e>
 80063fe:	2302      	movs	r3, #2
 8006400:	e096      	b.n	8006530 <HAL_ADC_Start_DMA+0x17c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a4d      	ldr	r2, [pc, #308]	; (8006544 <HAL_ADC_Start_DMA+0x190>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d008      	beq.n	8006426 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b05      	cmp	r3, #5
 800641e:	d002      	beq.n	8006426 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b09      	cmp	r3, #9
 8006424:	d17a      	bne.n	800651c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fcf6 	bl	8006e18 <ADC_Enable>
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d16d      	bne.n	8006512 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3a      	ldr	r2, [pc, #232]	; (8006538 <HAL_ADC_Start_DMA+0x184>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_ADC_Start_DMA+0xb4>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a3b      	ldr	r2, [pc, #236]	; (8006548 <HAL_ADC_Start_DMA+0x194>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d002      	beq.n	8006464 <HAL_ADC_Start_DMA+0xb0>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	e003      	b.n	800646c <HAL_ADC_Start_DMA+0xb8>
 8006464:	4b39      	ldr	r3, [pc, #228]	; (800654c <HAL_ADC_Start_DMA+0x198>)
 8006466:	e001      	b.n	800646c <HAL_ADC_Start_DMA+0xb8>
 8006468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	4293      	cmp	r3, r2
 8006472:	d002      	beq.n	800647a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006496:	f023 0206 	bic.w	r2, r3, #6
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	661a      	str	r2, [r3, #96]	; 0x60
 800649e:	e002      	b.n	80064a6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	4a29      	ldr	r2, [pc, #164]	; (8006550 <HAL_ADC_Start_DMA+0x19c>)
 80064ac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	4a28      	ldr	r2, [pc, #160]	; (8006554 <HAL_ADC_Start_DMA+0x1a0>)
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	4a27      	ldr	r2, [pc, #156]	; (8006558 <HAL_ADC_Start_DMA+0x1a4>)
 80064bc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	221c      	movs	r2, #28
 80064c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0210 	orr.w	r2, r2, #16
 80064dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3340      	adds	r3, #64	; 0x40
 80064f8:	4619      	mov	r1, r3
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f001 f867 	bl	80075d0 <HAL_DMA_Start_IT>
 8006502:	4603      	mov	r3, r0
 8006504:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fd55 	bl	8005fba <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006510:	e00d      	b.n	800652e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800651a:	e008      	b.n	800652e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006528:	e001      	b.n	800652e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800652a:	2302      	movs	r3, #2
 800652c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	50000100 	.word	0x50000100
 800653c:	50000300 	.word	0x50000300
 8006540:	50000700 	.word	0x50000700
 8006544:	50000600 	.word	0x50000600
 8006548:	50000500 	.word	0x50000500
 800654c:	50000400 	.word	0x50000400
 8006550:	08006edd 	.word	0x08006edd
 8006554:	08006fb5 	.word	0x08006fb5
 8006558:	08006fd1 	.word	0x08006fd1

0800655c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b0b6      	sub	sp, #216	; 0xd8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d102      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x24>
 80065b6:	2302      	movs	r3, #2
 80065b8:	f000 bc13 	b.w	8006de2 <HAL_ADC_ConfigChannel+0x84a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fd0a 	bl	8005fe2 <LL_ADC_REG_IsConversionOngoing>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 83f3 	bne.w	8006dbc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6859      	ldr	r1, [r3, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	f7ff fbe7 	bl	8005db6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fcf8 	bl	8005fe2 <LL_ADC_REG_IsConversionOngoing>
 80065f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fd04 	bl	8006008 <LL_ADC_INJ_IsConversionOngoing>
 8006600:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 81d9 	bne.w	80069c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800660e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006612:	2b00      	cmp	r3, #0
 8006614:	f040 81d4 	bne.w	80069c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006620:	d10f      	bne.n	8006642 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	4619      	mov	r1, r3
 800662e:	f7ff fbee 	bl	8005e0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fb95 	bl	8005d6a <LL_ADC_SetSamplingTimeCommonConfig>
 8006640:	e00e      	b.n	8006660 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	461a      	mov	r2, r3
 8006650:	f7ff fbdd 	bl	8005e0e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fb85 	bl	8005d6a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	695a      	ldr	r2, [r3, #20]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	08db      	lsrs	r3, r3, #3
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b04      	cmp	r3, #4
 8006680:	d022      	beq.n	80066c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6919      	ldr	r1, [r3, #16]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006692:	f7ff fadf 	bl	8005c54 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6919      	ldr	r1, [r3, #16]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f7ff fb2b 	bl	8005cfe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6919      	ldr	r1, [r3, #16]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	7f1b      	ldrb	r3, [r3, #28]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d102      	bne.n	80066be <HAL_ADC_ConfigChannel+0x126>
 80066b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066bc:	e000      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x128>
 80066be:	2300      	movs	r3, #0
 80066c0:	461a      	mov	r2, r3
 80066c2:	f7ff fb37 	bl	8005d34 <LL_ADC_SetOffsetSaturation>
 80066c6:	e17b      	b.n	80069c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2100      	movs	r1, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fae4 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_ADC_ConfigChannel+0x15c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2100      	movs	r1, #0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fad9 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 80066ea:	4603      	mov	r3, r0
 80066ec:	0e9b      	lsrs	r3, r3, #26
 80066ee:	f003 021f 	and.w	r2, r3, #31
 80066f2:	e01e      	b.n	8006732 <HAL_ADC_ConfigChannel+0x19a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2100      	movs	r1, #0
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff face 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 8006700:	4603      	mov	r3, r0
 8006702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800670a:	fa93 f3a3 	rbit	r3, r3
 800670e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800671a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006722:	2320      	movs	r3, #32
 8006724:	e004      	b.n	8006730 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800672a:	fab3 f383 	clz	r3, r3
 800672e:	b2db      	uxtb	r3, r3
 8006730:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800673a:	2b00      	cmp	r3, #0
 800673c:	d105      	bne.n	800674a <HAL_ADC_ConfigChannel+0x1b2>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	0e9b      	lsrs	r3, r3, #26
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	e018      	b.n	800677c <HAL_ADC_ConfigChannel+0x1e4>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006756:	fa93 f3a3 	rbit	r3, r3
 800675a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800675e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800676e:	2320      	movs	r3, #32
 8006770:	e004      	b.n	800677c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800677c:	429a      	cmp	r2, r3
 800677e:	d106      	bne.n	800678e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fa9d 	bl	8005cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fa81 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 800679a:	4603      	mov	r3, r0
 800679c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <HAL_ADC_ConfigChannel+0x222>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fa76 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 80067b0:	4603      	mov	r3, r0
 80067b2:	0e9b      	lsrs	r3, r3, #26
 80067b4:	f003 021f 	and.w	r2, r3, #31
 80067b8:	e01e      	b.n	80067f8 <HAL_ADC_ConfigChannel+0x260>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2101      	movs	r1, #1
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fa6b 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067d0:	fa93 f3a3 	rbit	r3, r3
 80067d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80067d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80067e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80067e8:	2320      	movs	r3, #32
 80067ea:	e004      	b.n	80067f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80067ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067f0:	fab3 f383 	clz	r3, r3
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <HAL_ADC_ConfigChannel+0x278>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	0e9b      	lsrs	r3, r3, #26
 800680a:	f003 031f 	and.w	r3, r3, #31
 800680e:	e018      	b.n	8006842 <HAL_ADC_ConfigChannel+0x2aa>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800681c:	fa93 f3a3 	rbit	r3, r3
 8006820:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800682c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006834:	2320      	movs	r3, #32
 8006836:	e004      	b.n	8006842 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800683c:	fab3 f383 	clz	r3, r3
 8006840:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006842:	429a      	cmp	r2, r3
 8006844:	d106      	bne.n	8006854 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2200      	movs	r2, #0
 800684c:	2101      	movs	r1, #1
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff fa3a 	bl	8005cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2102      	movs	r1, #2
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fa1e 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 8006860:	4603      	mov	r3, r0
 8006862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <HAL_ADC_ConfigChannel+0x2e8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2102      	movs	r1, #2
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff fa13 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 8006876:	4603      	mov	r3, r0
 8006878:	0e9b      	lsrs	r3, r3, #26
 800687a:	f003 021f 	and.w	r2, r3, #31
 800687e:	e01e      	b.n	80068be <HAL_ADC_ConfigChannel+0x326>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2102      	movs	r1, #2
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fa08 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 800688c:	4603      	mov	r3, r0
 800688e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006896:	fa93 f3a3 	rbit	r3, r3
 800689a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800689e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80068a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80068ae:	2320      	movs	r3, #32
 80068b0:	e004      	b.n	80068bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80068b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068b6:	fab3 f383 	clz	r3, r3
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d105      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x33e>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	0e9b      	lsrs	r3, r3, #26
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	e016      	b.n	8006904 <HAL_ADC_ConfigChannel+0x36c>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068e2:	fa93 f3a3 	rbit	r3, r3
 80068e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80068e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80068ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80068f6:	2320      	movs	r3, #32
 80068f8:	e004      	b.n	8006904 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80068fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068fe:	fab3 f383 	clz	r3, r3
 8006902:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006904:	429a      	cmp	r2, r3
 8006906:	d106      	bne.n	8006916 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2200      	movs	r2, #0
 800690e:	2102      	movs	r1, #2
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff f9d9 	bl	8005cc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2103      	movs	r1, #3
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff f9bd 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 8006922:	4603      	mov	r3, r0
 8006924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <HAL_ADC_ConfigChannel+0x3aa>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2103      	movs	r1, #3
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff f9b2 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 8006938:	4603      	mov	r3, r0
 800693a:	0e9b      	lsrs	r3, r3, #26
 800693c:	f003 021f 	and.w	r2, r3, #31
 8006940:	e017      	b.n	8006972 <HAL_ADC_ConfigChannel+0x3da>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2103      	movs	r1, #3
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff f9a7 	bl	8005c9c <LL_ADC_GetOffsetChannel>
 800694e:	4603      	mov	r3, r0
 8006950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006954:	fa93 f3a3 	rbit	r3, r3
 8006958:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800695a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800695e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006964:	2320      	movs	r3, #32
 8006966:	e003      	b.n	8006970 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800696a:	fab3 f383 	clz	r3, r3
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800697a:	2b00      	cmp	r3, #0
 800697c:	d105      	bne.n	800698a <HAL_ADC_ConfigChannel+0x3f2>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	0e9b      	lsrs	r3, r3, #26
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	e011      	b.n	80069ae <HAL_ADC_ConfigChannel+0x416>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006992:	fa93 f3a3 	rbit	r3, r3
 8006996:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80069a2:	2320      	movs	r3, #32
 80069a4:	e003      	b.n	80069ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80069a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a8:	fab3 f383 	clz	r3, r3
 80069ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d106      	bne.n	80069c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	2103      	movs	r1, #3
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff f984 	bl	8005cc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fae5 	bl	8005f94 <LL_ADC_IsEnabled>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 813d 	bne.w	8006c4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6819      	ldr	r1, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7ff fa40 	bl	8005e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4aa2      	ldr	r2, [pc, #648]	; (8006c74 <HAL_ADC_ConfigChannel+0x6dc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	f040 812e 	bne.w	8006c4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x480>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	0e9b      	lsrs	r3, r3, #26
 8006a06:	3301      	adds	r3, #1
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2b09      	cmp	r3, #9
 8006a0e:	bf94      	ite	ls
 8006a10:	2301      	movls	r3, #1
 8006a12:	2300      	movhi	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	e019      	b.n	8006a4c <HAL_ADC_ConfigChannel+0x4b4>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a20:	fa93 f3a3 	rbit	r3, r3
 8006a24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006a30:	2320      	movs	r3, #32
 8006a32:	e003      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a36:	fab3 f383 	clz	r3, r3
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2b09      	cmp	r3, #9
 8006a44:	bf94      	ite	ls
 8006a46:	2301      	movls	r3, #1
 8006a48:	2300      	movhi	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d079      	beq.n	8006b44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d107      	bne.n	8006a6c <HAL_ADC_ConfigChannel+0x4d4>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	0e9b      	lsrs	r3, r3, #26
 8006a62:	3301      	adds	r3, #1
 8006a64:	069b      	lsls	r3, r3, #26
 8006a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a6a:	e015      	b.n	8006a98 <HAL_ADC_ConfigChannel+0x500>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a74:	fa93 f3a3 	rbit	r3, r3
 8006a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006a84:	2320      	movs	r3, #32
 8006a86:	e003      	b.n	8006a90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a8a:	fab3 f383 	clz	r3, r3
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	3301      	adds	r3, #1
 8006a92:	069b      	lsls	r3, r3, #26
 8006a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <HAL_ADC_ConfigChannel+0x520>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	0e9b      	lsrs	r3, r3, #26
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab6:	e017      	b.n	8006ae8 <HAL_ADC_ConfigChannel+0x550>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac0:	fa93 f3a3 	rbit	r3, r3
 8006ac4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	e003      	b.n	8006adc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad6:	fab3 f383 	clz	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	3301      	adds	r3, #1
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	ea42 0103 	orr.w	r1, r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x576>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	0e9b      	lsrs	r3, r3, #26
 8006afe:	3301      	adds	r3, #1
 8006b00:	f003 021f 	and.w	r2, r3, #31
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	051b      	lsls	r3, r3, #20
 8006b0c:	e018      	b.n	8006b40 <HAL_ADC_ConfigChannel+0x5a8>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	fa93 f3a3 	rbit	r3, r3
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006b26:	2320      	movs	r3, #32
 8006b28:	e003      	b.n	8006b32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	fab3 f383 	clz	r3, r3
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	3301      	adds	r3, #1
 8006b34:	f003 021f 	and.w	r2, r3, #31
 8006b38:	4613      	mov	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b40:	430b      	orrs	r3, r1
 8006b42:	e07e      	b.n	8006c42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d107      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x5c8>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	0e9b      	lsrs	r3, r3, #26
 8006b56:	3301      	adds	r3, #1
 8006b58:	069b      	lsls	r3, r3, #26
 8006b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b5e:	e015      	b.n	8006b8c <HAL_ADC_ConfigChannel+0x5f4>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	fa93 f3a3 	rbit	r3, r3
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006b78:	2320      	movs	r3, #32
 8006b7a:	e003      	b.n	8006b84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	fab3 f383 	clz	r3, r3
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	3301      	adds	r3, #1
 8006b86:	069b      	lsls	r3, r3, #26
 8006b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <HAL_ADC_ConfigChannel+0x614>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	0e9b      	lsrs	r3, r3, #26
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	e017      	b.n	8006bdc <HAL_ADC_ConfigChannel+0x644>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	fa93 f3a3 	rbit	r3, r3
 8006bb8:	61fb      	str	r3, [r7, #28]
  return result;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006bc4:	2320      	movs	r3, #32
 8006bc6:	e003      	b.n	8006bd0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	fab3 f383 	clz	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	f003 031f 	and.w	r3, r3, #31
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bdc:	ea42 0103 	orr.w	r1, r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <HAL_ADC_ConfigChannel+0x670>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	0e9b      	lsrs	r3, r3, #26
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f003 021f 	and.w	r2, r3, #31
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3b1e      	subs	r3, #30
 8006c00:	051b      	lsls	r3, r3, #20
 8006c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c06:	e01b      	b.n	8006c40 <HAL_ADC_ConfigChannel+0x6a8>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	fa93 f3a3 	rbit	r3, r3
 8006c14:	613b      	str	r3, [r7, #16]
  return result;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006c20:	2320      	movs	r3, #32
 8006c22:	e003      	b.n	8006c2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	fab3 f383 	clz	r3, r3
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f003 021f 	and.w	r2, r3, #31
 8006c32:	4613      	mov	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4413      	add	r3, r2
 8006c38:	3b1e      	subs	r3, #30
 8006c3a:	051b      	lsls	r3, r3, #20
 8006c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c40:	430b      	orrs	r3, r1
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	6892      	ldr	r2, [r2, #8]
 8006c46:	4619      	mov	r1, r3
 8006c48:	f7ff f8e1 	bl	8005e0e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <HAL_ADC_ConfigChannel+0x6e0>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 80be 	beq.w	8006dd6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c62:	d004      	beq.n	8006c6e <HAL_ADC_ConfigChannel+0x6d6>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <HAL_ADC_ConfigChannel+0x6e4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d10a      	bne.n	8006c84 <HAL_ADC_ConfigChannel+0x6ec>
 8006c6e:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <HAL_ADC_ConfigChannel+0x6e8>)
 8006c70:	e009      	b.n	8006c86 <HAL_ADC_ConfigChannel+0x6ee>
 8006c72:	bf00      	nop
 8006c74:	407f0000 	.word	0x407f0000
 8006c78:	80080000 	.word	0x80080000
 8006c7c:	50000100 	.word	0x50000100
 8006c80:	50000300 	.word	0x50000300
 8006c84:	4b59      	ldr	r3, [pc, #356]	; (8006dec <HAL_ADC_ConfigChannel+0x854>)
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe ffd6 	bl	8005c38 <LL_ADC_GetCommonPathInternalCh>
 8006c8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a56      	ldr	r2, [pc, #344]	; (8006df0 <HAL_ADC_ConfigChannel+0x858>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <HAL_ADC_ConfigChannel+0x70c>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a55      	ldr	r2, [pc, #340]	; (8006df4 <HAL_ADC_ConfigChannel+0x85c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d13a      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d134      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb8:	d005      	beq.n	8006cc6 <HAL_ADC_ConfigChannel+0x72e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a4e      	ldr	r2, [pc, #312]	; (8006df8 <HAL_ADC_ConfigChannel+0x860>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	f040 8085 	bne.w	8006dd0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cce:	d004      	beq.n	8006cda <HAL_ADC_ConfigChannel+0x742>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a49      	ldr	r2, [pc, #292]	; (8006dfc <HAL_ADC_ConfigChannel+0x864>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d101      	bne.n	8006cde <HAL_ADC_ConfigChannel+0x746>
 8006cda:	4a49      	ldr	r2, [pc, #292]	; (8006e00 <HAL_ADC_ConfigChannel+0x868>)
 8006cdc:	e000      	b.n	8006ce0 <HAL_ADC_ConfigChannel+0x748>
 8006cde:	4a43      	ldr	r2, [pc, #268]	; (8006dec <HAL_ADC_ConfigChannel+0x854>)
 8006ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f7fe ff91 	bl	8005c12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006cf0:	4b44      	ldr	r3, [pc, #272]	; (8006e04 <HAL_ADC_ConfigChannel+0x86c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	099b      	lsrs	r3, r3, #6
 8006cf6:	4a44      	ldr	r2, [pc, #272]	; (8006e08 <HAL_ADC_ConfigChannel+0x870>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	099b      	lsrs	r3, r3, #6
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d0a:	e002      	b.n	8006d12 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f9      	bne.n	8006d0c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d18:	e05a      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a3b      	ldr	r2, [pc, #236]	; (8006e0c <HAL_ADC_ConfigChannel+0x874>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d125      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x7d8>
 8006d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11f      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a31      	ldr	r2, [pc, #196]	; (8006dfc <HAL_ADC_ConfigChannel+0x864>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d104      	bne.n	8006d44 <HAL_ADC_ConfigChannel+0x7ac>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a34      	ldr	r2, [pc, #208]	; (8006e10 <HAL_ADC_ConfigChannel+0x878>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d047      	beq.n	8006dd4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d4c:	d004      	beq.n	8006d58 <HAL_ADC_ConfigChannel+0x7c0>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a2a      	ldr	r2, [pc, #168]	; (8006dfc <HAL_ADC_ConfigChannel+0x864>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d101      	bne.n	8006d5c <HAL_ADC_ConfigChannel+0x7c4>
 8006d58:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <HAL_ADC_ConfigChannel+0x868>)
 8006d5a:	e000      	b.n	8006d5e <HAL_ADC_ConfigChannel+0x7c6>
 8006d5c:	4a23      	ldr	r2, [pc, #140]	; (8006dec <HAL_ADC_ConfigChannel+0x854>)
 8006d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f7fe ff52 	bl	8005c12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d6e:	e031      	b.n	8006dd4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a27      	ldr	r2, [pc, #156]	; (8006e14 <HAL_ADC_ConfigChannel+0x87c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d12d      	bne.n	8006dd6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d127      	bne.n	8006dd6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <HAL_ADC_ConfigChannel+0x864>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d98:	d004      	beq.n	8006da4 <HAL_ADC_ConfigChannel+0x80c>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <HAL_ADC_ConfigChannel+0x864>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d101      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x810>
 8006da4:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <HAL_ADC_ConfigChannel+0x868>)
 8006da6:	e000      	b.n	8006daa <HAL_ADC_ConfigChannel+0x812>
 8006da8:	4a10      	ldr	r2, [pc, #64]	; (8006dec <HAL_ADC_ConfigChannel+0x854>)
 8006daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f7fe ff2c 	bl	8005c12 <LL_ADC_SetCommonPathInternalCh>
 8006dba:	e00c      	b.n	8006dd6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	f043 0220 	orr.w	r2, r3, #32
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006dce:	e002      	b.n	8006dd6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006dd0:	bf00      	nop
 8006dd2:	e000      	b.n	8006dd6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006dde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	37d8      	adds	r7, #216	; 0xd8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	50000700 	.word	0x50000700
 8006df0:	c3210000 	.word	0xc3210000
 8006df4:	90c00010 	.word	0x90c00010
 8006df8:	50000600 	.word	0x50000600
 8006dfc:	50000100 	.word	0x50000100
 8006e00:	50000300 	.word	0x50000300
 8006e04:	20000008 	.word	0x20000008
 8006e08:	053e2d63 	.word	0x053e2d63
 8006e0c:	c7520000 	.word	0xc7520000
 8006e10:	50000500 	.word	0x50000500
 8006e14:	cb840000 	.word	0xcb840000

08006e18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff f8b5 	bl	8005f94 <LL_ADC_IsEnabled>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d14d      	bne.n	8006ecc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	4b28      	ldr	r3, [pc, #160]	; (8006ed8 <ADC_Enable+0xc0>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00d      	beq.n	8006e5a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e42:	f043 0210 	orr.w	r2, r3, #16
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4e:	f043 0201 	orr.w	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e039      	b.n	8006ece <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff f884 	bl	8005f6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006e64:	f7fc f840 	bl	8002ee8 <HAL_GetTick>
 8006e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e6a:	e028      	b.n	8006ebe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff f88f 	bl	8005f94 <LL_ADC_IsEnabled>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff f873 	bl	8005f6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e86:	f7fc f82f 	bl	8002ee8 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d914      	bls.n	8006ebe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d00d      	beq.n	8006ebe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea6:	f043 0210 	orr.w	r2, r3, #16
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb2:	f043 0201 	orr.w	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e007      	b.n	8006ece <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d1cf      	bne.n	8006e6c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	8000003f 	.word	0x8000003f

08006edc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d14b      	bne.n	8006f8e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d021      	beq.n	8006f54 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe ff3b 	bl	8005d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d032      	beq.n	8006f86 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d12b      	bne.n	8006f86 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d11f      	bne.n	8006f86 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f52:	e018      	b.n	8006f86 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d111      	bne.n	8006f86 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d105      	bne.n	8006f86 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	f043 0201 	orr.w	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff fae8 	bl	800655c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f8c:	e00e      	b.n	8006fac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff faf2 	bl	8006584 <HAL_ADC_ErrorCallback>
}
 8006fa0:	e004      	b.n	8006fac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fad4 	bl	8006570 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fee:	f043 0204 	orr.w	r2, r3, #4
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff fac4 	bl	8006584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <LL_ADC_IsEnabled>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <LL_ADC_IsEnabled+0x18>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <LL_ADC_IsEnabled+0x1a>
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <LL_ADC_REG_IsConversionOngoing>:
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b04      	cmp	r3, #4
 800703c:	d101      	bne.n	8007042 <LL_ADC_REG_IsConversionOngoing+0x18>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b0a1      	sub	sp, #132	; 0x84
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800706a:	2302      	movs	r3, #2
 800706c:	e0e7      	b.n	800723e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007076:	2300      	movs	r3, #0
 8007078:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800707a:	2300      	movs	r3, #0
 800707c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007086:	d102      	bne.n	800708e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007088:	4b6f      	ldr	r3, [pc, #444]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800708a:	60bb      	str	r3, [r7, #8]
 800708c:	e009      	b.n	80070a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a6e      	ldr	r2, [pc, #440]	; (800724c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d102      	bne.n	800709e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007098:	4b6d      	ldr	r3, [pc, #436]	; (8007250 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800709a:	60bb      	str	r3, [r7, #8]
 800709c:	e001      	b.n	80070a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800709e:	2300      	movs	r3, #0
 80070a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ac:	f043 0220 	orr.w	r2, r3, #32
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e0be      	b.n	800723e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff ffb1 	bl	800702a <LL_ADC_REG_IsConversionOngoing>
 80070c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff ffab 	bl	800702a <LL_ADC_REG_IsConversionOngoing>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 80a0 	bne.w	800721c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80070dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 809c 	bne.w	800721c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ec:	d004      	beq.n	80070f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a55      	ldr	r2, [pc, #340]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d101      	bne.n	80070fc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80070f8:	4b56      	ldr	r3, [pc, #344]	; (8007254 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80070fa:	e000      	b.n	80070fe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80070fc:	4b56      	ldr	r3, [pc, #344]	; (8007258 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80070fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d04b      	beq.n	80071a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6859      	ldr	r1, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800711a:	035b      	lsls	r3, r3, #13
 800711c:	430b      	orrs	r3, r1
 800711e:	431a      	orrs	r2, r3
 8007120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007122:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800712c:	d004      	beq.n	8007138 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a45      	ldr	r2, [pc, #276]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d10f      	bne.n	8007158 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007138:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800713c:	f7ff ff62 	bl	8007004 <LL_ADC_IsEnabled>
 8007140:	4604      	mov	r4, r0
 8007142:	4841      	ldr	r0, [pc, #260]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007144:	f7ff ff5e 	bl	8007004 <LL_ADC_IsEnabled>
 8007148:	4603      	mov	r3, r0
 800714a:	4323      	orrs	r3, r4
 800714c:	2b00      	cmp	r3, #0
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	e012      	b.n	800717e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007158:	483c      	ldr	r0, [pc, #240]	; (800724c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800715a:	f7ff ff53 	bl	8007004 <LL_ADC_IsEnabled>
 800715e:	4604      	mov	r4, r0
 8007160:	483b      	ldr	r0, [pc, #236]	; (8007250 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007162:	f7ff ff4f 	bl	8007004 <LL_ADC_IsEnabled>
 8007166:	4603      	mov	r3, r0
 8007168:	431c      	orrs	r4, r3
 800716a:	483c      	ldr	r0, [pc, #240]	; (800725c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800716c:	f7ff ff4a 	bl	8007004 <LL_ADC_IsEnabled>
 8007170:	4603      	mov	r3, r0
 8007172:	4323      	orrs	r3, r4
 8007174:	2b00      	cmp	r3, #0
 8007176:	bf0c      	ite	eq
 8007178:	2301      	moveq	r3, #1
 800717a:	2300      	movne	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d056      	beq.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800718a:	f023 030f 	bic.w	r3, r3, #15
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	6811      	ldr	r1, [r2, #0]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	6892      	ldr	r2, [r2, #8]
 8007196:	430a      	orrs	r2, r1
 8007198:	431a      	orrs	r2, r3
 800719a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800719c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800719e:	e047      	b.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80071a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071b4:	d004      	beq.n	80071c0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a23      	ldr	r2, [pc, #140]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10f      	bne.n	80071e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80071c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80071c4:	f7ff ff1e 	bl	8007004 <LL_ADC_IsEnabled>
 80071c8:	4604      	mov	r4, r0
 80071ca:	481f      	ldr	r0, [pc, #124]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80071cc:	f7ff ff1a 	bl	8007004 <LL_ADC_IsEnabled>
 80071d0:	4603      	mov	r3, r0
 80071d2:	4323      	orrs	r3, r4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	e012      	b.n	8007206 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80071e0:	481a      	ldr	r0, [pc, #104]	; (800724c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80071e2:	f7ff ff0f 	bl	8007004 <LL_ADC_IsEnabled>
 80071e6:	4604      	mov	r4, r0
 80071e8:	4819      	ldr	r0, [pc, #100]	; (8007250 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80071ea:	f7ff ff0b 	bl	8007004 <LL_ADC_IsEnabled>
 80071ee:	4603      	mov	r3, r0
 80071f0:	431c      	orrs	r4, r3
 80071f2:	481a      	ldr	r0, [pc, #104]	; (800725c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80071f4:	f7ff ff06 	bl	8007004 <LL_ADC_IsEnabled>
 80071f8:	4603      	mov	r3, r0
 80071fa:	4323      	orrs	r3, r4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf0c      	ite	eq
 8007200:	2301      	moveq	r3, #1
 8007202:	2300      	movne	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d012      	beq.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800720a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007212:	f023 030f 	bic.w	r3, r3, #15
 8007216:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007218:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800721a:	e009      	b.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800722e:	e000      	b.n	8007232 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007230:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800723a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800723e:	4618      	mov	r0, r3
 8007240:	3784      	adds	r7, #132	; 0x84
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}
 8007246:	bf00      	nop
 8007248:	50000100 	.word	0x50000100
 800724c:	50000400 	.word	0x50000400
 8007250:	50000500 	.word	0x50000500
 8007254:	50000300 	.word	0x50000300
 8007258:	50000700 	.word	0x50000700
 800725c:	50000600 	.word	0x50000600

08007260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007270:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800727c:	4013      	ands	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800728c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007292:	4a04      	ldr	r2, [pc, #16]	; (80072a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	60d3      	str	r3, [r2, #12]
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	e000ed00 	.word	0xe000ed00

080072a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <__NVIC_GetPriorityGrouping+0x18>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	f003 0307 	and.w	r3, r3, #7
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	e000ed00 	.word	0xe000ed00

080072c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	db0b      	blt.n	80072ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	f003 021f 	and.w	r2, r3, #31
 80072dc:	4907      	ldr	r1, [pc, #28]	; (80072fc <__NVIC_EnableIRQ+0x38>)
 80072de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2001      	movs	r0, #1
 80072e6:	fa00 f202 	lsl.w	r2, r0, r2
 80072ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	e000e100 	.word	0xe000e100

08007300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800730c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007310:	2b00      	cmp	r3, #0
 8007312:	db0a      	blt.n	800732a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	490c      	ldr	r1, [pc, #48]	; (800734c <__NVIC_SetPriority+0x4c>)
 800731a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731e:	0112      	lsls	r2, r2, #4
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	440b      	add	r3, r1
 8007324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007328:	e00a      	b.n	8007340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	4908      	ldr	r1, [pc, #32]	; (8007350 <__NVIC_SetPriority+0x50>)
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	3b04      	subs	r3, #4
 8007338:	0112      	lsls	r2, r2, #4
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	440b      	add	r3, r1
 800733e:	761a      	strb	r2, [r3, #24]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	e000e100 	.word	0xe000e100
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f1c3 0307 	rsb	r3, r3, #7
 800736e:	2b04      	cmp	r3, #4
 8007370:	bf28      	it	cs
 8007372:	2304      	movcs	r3, #4
 8007374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	3304      	adds	r3, #4
 800737a:	2b06      	cmp	r3, #6
 800737c:	d902      	bls.n	8007384 <NVIC_EncodePriority+0x30>
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	3b03      	subs	r3, #3
 8007382:	e000      	b.n	8007386 <NVIC_EncodePriority+0x32>
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007388:	f04f 32ff 	mov.w	r2, #4294967295
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	43da      	mvns	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	401a      	ands	r2, r3
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800739c:	f04f 31ff 	mov.w	r1, #4294967295
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	fa01 f303 	lsl.w	r3, r1, r3
 80073a6:	43d9      	mvns	r1, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073ac:	4313      	orrs	r3, r2
         );
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3724      	adds	r7, #36	; 0x24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073cc:	d301      	bcc.n	80073d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073ce:	2301      	movs	r3, #1
 80073d0:	e00f      	b.n	80073f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <SysTick_Config+0x40>)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073da:	210f      	movs	r1, #15
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	f7ff ff8e 	bl	8007300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <SysTick_Config+0x40>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073ea:	4b04      	ldr	r3, [pc, #16]	; (80073fc <SysTick_Config+0x40>)
 80073ec:	2207      	movs	r2, #7
 80073ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	e000e010 	.word	0xe000e010

08007400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ff29 	bl	8007260 <__NVIC_SetPriorityGrouping>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b086      	sub	sp, #24
 800741a:	af00      	add	r7, sp, #0
 800741c:	4603      	mov	r3, r0
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007424:	f7ff ff40 	bl	80072a8 <__NVIC_GetPriorityGrouping>
 8007428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	6978      	ldr	r0, [r7, #20]
 8007430:	f7ff ff90 	bl	8007354 <NVIC_EncodePriority>
 8007434:	4602      	mov	r2, r0
 8007436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff ff5f 	bl	8007300 <__NVIC_SetPriority>
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	4603      	mov	r3, r0
 8007452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff ff33 	bl	80072c4 <__NVIC_EnableIRQ>
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff ffa4 	bl	80073bc <SysTick_Config>
 8007474:	4603      	mov	r3, r0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e08d      	b.n	80075ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_DMA_Init+0x138>)
 800749a:	429a      	cmp	r2, r3
 800749c:	d80f      	bhi.n	80074be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	4b45      	ldr	r3, [pc, #276]	; (80075bc <HAL_DMA_Init+0x13c>)
 80074a6:	4413      	add	r3, r2
 80074a8:	4a45      	ldr	r2, [pc, #276]	; (80075c0 <HAL_DMA_Init+0x140>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	091b      	lsrs	r3, r3, #4
 80074b0:	009a      	lsls	r2, r3, #2
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a42      	ldr	r2, [pc, #264]	; (80075c4 <HAL_DMA_Init+0x144>)
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40
 80074bc:	e00e      	b.n	80074dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	4b40      	ldr	r3, [pc, #256]	; (80075c8 <HAL_DMA_Init+0x148>)
 80074c6:	4413      	add	r3, r2
 80074c8:	4a3d      	ldr	r2, [pc, #244]	; (80075c0 <HAL_DMA_Init+0x140>)
 80074ca:	fba2 2303 	umull	r2, r3, r2, r3
 80074ce:	091b      	lsrs	r3, r3, #4
 80074d0:	009a      	lsls	r2, r3, #2
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a3c      	ldr	r2, [pc, #240]	; (80075cc <HAL_DMA_Init+0x14c>)
 80074da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800750c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa76 	bl	8007a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800753c:	d102      	bne.n	8007544 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007558:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d010      	beq.n	8007584 <HAL_DMA_Init+0x104>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b04      	cmp	r3, #4
 8007568:	d80c      	bhi.n	8007584 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa96 	bl	8007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007580:	605a      	str	r2, [r3, #4]
 8007582:	e008      	b.n	8007596 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	40020407 	.word	0x40020407
 80075bc:	bffdfff8 	.word	0xbffdfff8
 80075c0:	cccccccd 	.word	0xcccccccd
 80075c4:	40020000 	.word	0x40020000
 80075c8:	bffdfbf8 	.word	0xbffdfbf8
 80075cc:	40020400 	.word	0x40020400

080075d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_DMA_Start_IT+0x20>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e066      	b.n	80076be <HAL_DMA_Start_IT+0xee>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d155      	bne.n	80076b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0201 	bic.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f9bb 	bl	80079a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	2b00      	cmp	r3, #0
 8007634:	d008      	beq.n	8007648 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 020e 	orr.w	r2, r2, #14
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	e00f      	b.n	8007668 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0204 	bic.w	r2, r2, #4
 8007656:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 020a 	orr.w	r2, r2, #10
 8007666:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007684:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800769c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0201 	orr.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e005      	b.n	80076bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80076b8:	2302      	movs	r3, #2
 80076ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d005      	beq.n	80076ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2204      	movs	r2, #4
 80076e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
 80076e8:	e037      	b.n	800775a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 020e 	bic.w	r2, r2, #14
 80076f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007708:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0201 	bic.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771e:	f003 021f 	and.w	r2, r3, #31
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	2101      	movs	r1, #1
 8007728:	fa01 f202 	lsl.w	r2, r1, r2
 800772c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007736:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00c      	beq.n	800775a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800774e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007758:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d00d      	beq.n	80077ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2204      	movs	r2, #4
 8007794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
 80077aa:	e047      	b.n	800783c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 020e 	bic.w	r2, r2, #14
 80077ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	f003 021f 	and.w	r2, r3, #31
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	2101      	movs	r1, #1
 80077ea:	fa01 f202 	lsl.w	r2, r1, r2
 80077ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00c      	beq.n	800781c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007810:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800781a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
    }
  }
  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2204      	movs	r2, #4
 8007868:	409a      	lsls	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4013      	ands	r3, r2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d026      	beq.n	80078c0 <HAL_DMA_IRQHandler+0x7a>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d021      	beq.n	80078c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d107      	bne.n	800789a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0204 	bic.w	r2, r2, #4
 8007898:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789e:	f003 021f 	and.w	r2, r3, #31
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	2104      	movs	r1, #4
 80078a8:	fa01 f202 	lsl.w	r2, r1, r2
 80078ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d071      	beq.n	800799a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80078be:	e06c      	b.n	800799a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	2202      	movs	r2, #2
 80078ca:	409a      	lsls	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4013      	ands	r3, r2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02e      	beq.n	8007932 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d029      	beq.n	8007932 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10b      	bne.n	8007904 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 020a 	bic.w	r2, r2, #10
 80078fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007908:	f003 021f 	and.w	r2, r3, #31
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	2102      	movs	r1, #2
 8007912:	fa01 f202 	lsl.w	r2, r1, r2
 8007916:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d038      	beq.n	800799a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007930:	e033      	b.n	800799a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	2208      	movs	r2, #8
 800793c:	409a      	lsls	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4013      	ands	r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d02a      	beq.n	800799c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d025      	beq.n	800799c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 020e 	bic.w	r2, r2, #14
 800795e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	f003 021f 	and.w	r2, r3, #31
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	2101      	movs	r1, #1
 800796e:	fa01 f202 	lsl.w	r2, r1, r2
 8007972:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800799a:	bf00      	nop
 800799c:	bf00      	nop
}
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	f003 021f 	and.w	r2, r3, #31
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	2101      	movs	r1, #1
 80079dc:	fa01 f202 	lsl.w	r2, r1, r2
 80079e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d108      	bne.n	8007a04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007a02:	e007      	b.n	8007a14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	60da      	str	r2, [r3, #12]
}
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d802      	bhi.n	8007a3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007a34:	4b15      	ldr	r3, [pc, #84]	; (8007a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e001      	b.n	8007a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007a3c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	3b08      	subs	r3, #8
 8007a4a:	4a12      	ldr	r2, [pc, #72]	; (8007a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	091b      	lsrs	r3, r3, #4
 8007a52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	009a      	lsls	r2, r3, #2
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	4413      	add	r3, r2
 8007a60:	461a      	mov	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a0b      	ldr	r2, [pc, #44]	; (8007a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007a6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	2201      	movs	r2, #1
 8007a74:	409a      	lsls	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40020407 	.word	0x40020407
 8007a8c:	40020800 	.word	0x40020800
 8007a90:	40020820 	.word	0x40020820
 8007a94:	cccccccd 	.word	0xcccccccd
 8007a98:	40020880 	.word	0x40020880

08007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007abe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	2201      	movs	r2, #1
 8007aca:	409a      	lsls	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	1000823f 	.word	0x1000823f
 8007ae0:	40020940 	.word	0x40020940

08007ae4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e147      	b.n	8007d86 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fa f83e 	bl	8001b8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0210 	bic.w	r2, r2, #16
 8007b1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b20:	f7fb f9e2 	bl	8002ee8 <HAL_GetTick>
 8007b24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007b26:	e012      	b.n	8007b4e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007b28:	f7fb f9de 	bl	8002ee8 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b0a      	cmp	r3, #10
 8007b34:	d90b      	bls.n	8007b4e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3a:	f043 0201 	orr.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2203      	movs	r2, #3
 8007b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e11b      	b.n	8007d86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d0e5      	beq.n	8007b28 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b6c:	f7fb f9bc 	bl	8002ee8 <HAL_GetTick>
 8007b70:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007b72:	e012      	b.n	8007b9a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007b74:	f7fb f9b8 	bl	8002ee8 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b0a      	cmp	r3, #10
 8007b80:	d90b      	bls.n	8007b9a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b86:	f043 0201 	orr.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2203      	movs	r2, #3
 8007b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e0f5      	b.n	8007d86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0e5      	beq.n	8007b74 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0202 	orr.w	r2, r2, #2
 8007bb6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a74      	ldr	r2, [pc, #464]	; (8007d90 <HAL_FDCAN_Init+0x2ac>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d103      	bne.n	8007bca <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007bc2:	4a74      	ldr	r2, [pc, #464]	; (8007d94 <HAL_FDCAN_Init+0x2b0>)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7c1b      	ldrb	r3, [r3, #16]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d108      	bne.n	8007be4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699a      	ldr	r2, [r3, #24]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be0:	619a      	str	r2, [r3, #24]
 8007be2:	e007      	b.n	8007bf4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bf2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7c5b      	ldrb	r3, [r3, #17]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d108      	bne.n	8007c0e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c0a:	619a      	str	r2, [r3, #24]
 8007c0c:	e007      	b.n	8007c1e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699a      	ldr	r2, [r3, #24]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c1c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7c9b      	ldrb	r3, [r3, #18]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d108      	bne.n	8007c38 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c34:	619a      	str	r2, [r3, #24]
 8007c36:	e007      	b.n	8007c48 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c46:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	699a      	ldr	r2, [r3, #24]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007c6c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0210 	bic.w	r2, r2, #16
 8007c7c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d108      	bne.n	8007c98 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0204 	orr.w	r2, r2, #4
 8007c94:	619a      	str	r2, [r3, #24]
 8007c96:	e02c      	b.n	8007cf2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d028      	beq.n	8007cf2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d01c      	beq.n	8007ce2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699a      	ldr	r2, [r3, #24]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cb6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0210 	orr.w	r2, r2, #16
 8007cc6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d110      	bne.n	8007cf2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0220 	orr.w	r2, r2, #32
 8007cde:	619a      	str	r2, [r3, #24]
 8007ce0:	e007      	b.n	8007cf2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0220 	orr.w	r2, r2, #32
 8007cf0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d02:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007d0a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007d1a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d1c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d26:	d115      	bne.n	8007d54 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	3b01      	subs	r3, #1
 8007d34:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007d36:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007d40:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007d50:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007d52:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fc4e 	bl	800860c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	40006400 	.word	0x40006400
 8007d94:	40006500 	.word	0x40006500

08007d98 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007da8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d002      	beq.n	8007db6 <HAL_FDCAN_ConfigFilter+0x1e>
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d13d      	bne.n	8007e32 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d119      	bne.n	8007df2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007dca:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007dd2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	e01d      	b.n	8007e2e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	075a      	lsls	r2, r3, #29
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	079a      	lsls	r2, r3, #30
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	3304      	adds	r3, #4
 8007e26:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e006      	b.n	8007e40 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e36:	f043 0202 	orr.w	r2, r3, #2
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
  }
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d110      	bne.n	8007e82 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0201 	bic.w	r2, r2, #1
 8007e76:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e006      	b.n	8007e90 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e86:	f043 0204 	orr.w	r2, r3, #4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
  }
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d12c      	bne.n	8007f0e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e023      	b.n	8007f1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007edc:	0c1b      	lsrs	r3, r3, #16
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fbfa 	bl	80086e4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8007efc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007f00:	2201      	movs	r2, #1
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	409a      	lsls	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e006      	b.n	8007f1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f12:	f043 0208 	orr.w	r2, r3, #8
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b08b      	sub	sp, #44	; 0x2c
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f38:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007f3a:	7efb      	ldrb	r3, [r7, #27]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	f040 80bc 	bne.w	80080ba <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d121      	bne.n	8007f8c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d107      	bne.n	8007f68 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e0af      	b.n	80080c8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f70:	0a1b      	lsrs	r3, r3, #8
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007f7c:	69fa      	ldr	r2, [r7, #28]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	4413      	add	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	440b      	add	r3, r1
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
 8007f8a:	e020      	b.n	8007fce <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d107      	bne.n	8007fac <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e08d      	b.n	80080c8 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fb4:	0a1b      	lsrs	r3, r3, #8
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	440b      	add	r3, r1
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d107      	bne.n	8007ff2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	0c9b      	lsrs	r3, r3, #18
 8007fe8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	e005      	b.n	8007ffe <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	3304      	adds	r3, #4
 800801a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	0e1b      	lsrs	r3, r3, #24
 8008050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	0fda      	lsrs	r2, r3, #31
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	3304      	adds	r3, #4
 8008066:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800806c:	2300      	movs	r3, #0
 800806e:	623b      	str	r3, [r7, #32]
 8008070:	e00a      	b.n	8008088 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	441a      	add	r2, r3
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	440b      	add	r3, r1
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	3301      	adds	r3, #1
 8008086:	623b      	str	r3, [r7, #32]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	4a11      	ldr	r2, [pc, #68]	; (80080d4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8008090:	5cd3      	ldrb	r3, [r2, r3]
 8008092:	461a      	mov	r2, r3
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	4293      	cmp	r3, r2
 8008098:	d3eb      	bcc.n	8008072 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b40      	cmp	r3, #64	; 0x40
 800809e:	d105      	bne.n	80080ac <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80080aa:	e004      	b.n	80080b6 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e006      	b.n	80080c8 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080be:	f043 0208 	orr.w	r2, r3, #8
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
  }
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	372c      	adds	r7, #44	; 0x2c
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	080100b0 	.word	0x080100b0

080080d8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80080ee:	68fb      	ldr	r3, [r7, #12]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800810e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d003      	beq.n	800811e <HAL_FDCAN_ActivateNotification+0x22>
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	2b02      	cmp	r3, #2
 800811a:	f040 80c8 	bne.w	80082ae <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008124:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d03b      	beq.n	80081b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d031      	beq.n	80081b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d027      	beq.n	80081b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01d      	beq.n	80081b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800817c:	2b00      	cmp	r3, #0
 800817e:	d004      	beq.n	800818a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	2b00      	cmp	r3, #0
 8008188:	d013      	beq.n	80081b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00c      	beq.n	80081c2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d107      	bne.n	80081c2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d13b      	bne.n	800824e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d004      	beq.n	80081ea <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d131      	bne.n	800824e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d127      	bne.n	800824e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d11d      	bne.n	800824e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008218:	2b00      	cmp	r3, #0
 800821a:	d004      	beq.n	8008226 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b00      	cmp	r3, #0
 8008224:	d113      	bne.n	800824e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00c      	beq.n	800825e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d007      	beq.n	800825e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0202 	orr.w	r2, r2, #2
 800825c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008264:	2b00      	cmp	r3, #0
 8008266:	d009      	beq.n	800827c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	430a      	orrs	r2, r1
 8008278:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	430a      	orrs	r2, r1
 8008296:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e006      	b.n	80082bc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b2:	f043 0202 	orr.w	r2, r3, #2
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
  }
}
 80082bc:	4618      	mov	r0, r3
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e4:	4013      	ands	r3, r2
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fa:	6a3a      	ldr	r2, [r7, #32]
 80082fc:	4013      	ands	r3, r2
 80082fe:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800830a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	4013      	ands	r3, r2
 8008316:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8008322:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	4013      	ands	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008336:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800833a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4013      	ands	r3, r2
 8008346:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d006      	beq.n	8008372 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2240      	movs	r2, #64	; 0x40
 800836a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f92e 	bl	80085ce <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01b      	beq.n	80083b8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838a:	2b00      	cmp	r3, #0
 800838c:	d014      	beq.n	80083b8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008396:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	4013      	ands	r3, r2
 80083a4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80083b0:	6939      	ldr	r1, [r7, #16]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8ec 	bl	8008590 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80083c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f8b6 	bl	800853a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6a3a      	ldr	r2, [r7, #32]
 80083da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80083dc:	6a39      	ldr	r1, [r7, #32]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7fb fbca 	bl	8003b78 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80083f2:	69f9      	ldr	r1, [r7, #28]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f8ab 	bl	8008550 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00e      	beq.n	8008426 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008412:	2b00      	cmp	r3, #0
 8008414:	d007      	beq.n	8008426 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800841e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f8a0 	bl	8008566 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01a      	beq.n	800846a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b00      	cmp	r3, #0
 8008440:	d013      	beq.n	800846a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800844a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4013      	ands	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2280      	movs	r2, #128	; 0x80
 8008460:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f888 	bl	800857a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800848e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f888 	bl	80085a6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00e      	beq.n	80084c2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f87c 	bl	80085ba <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d011      	beq.n	80084f4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80084e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f876 	bl	80085f6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f858 	bl	80085e2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008532:	bf00      	nop
 8008534:	3728      	adds	r7, #40	; 0x28
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008614:	4b30      	ldr	r3, [pc, #192]	; (80086d8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008616:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a2f      	ldr	r2, [pc, #188]	; (80086dc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d103      	bne.n	800862a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008628:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a2c      	ldr	r2, [pc, #176]	; (80086e0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d103      	bne.n	800863c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800863a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	041a      	lsls	r2, r3, #16
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008670:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	061a      	lsls	r2, r3, #24
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e005      	b.n	80086be <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3304      	adds	r3, #4
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d3f3      	bcc.n	80086b2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	4000a400 	.word	0x4000a400
 80086dc:	40006800 	.word	0x40006800
 80086e0:	40006c00 	.word	0x40006c00

080086e4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b089      	sub	sp, #36	; 0x24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008702:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800870a:	4313      	orrs	r3, r2
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	e00a      	b.n	8008726 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008718:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800871e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008724:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008730:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008736:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800873c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	4613      	mov	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	4413      	add	r3, r2
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	440b      	add	r3, r1
 8008756:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	3304      	adds	r3, #4
 8008762:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	3304      	adds	r3, #4
 800876e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	e020      	b.n	80087b8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	3303      	adds	r3, #3
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	4413      	add	r3, r2
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	3302      	adds	r3, #2
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	440b      	add	r3, r1
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800878e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	3301      	adds	r3, #1
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	440b      	add	r3, r1
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800879c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	440a      	add	r2, r1
 80087a4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80087a6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	3304      	adds	r3, #4
 80087b0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	3304      	adds	r3, #4
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	0c1b      	lsrs	r3, r3, #16
 80087be:	4a06      	ldr	r2, [pc, #24]	; (80087d8 <FDCAN_CopyMessageToRAM+0xf4>)
 80087c0:	5cd3      	ldrb	r3, [r2, r3]
 80087c2:	461a      	mov	r2, r3
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d3d5      	bcc.n	8008776 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80087ca:	bf00      	nop
 80087cc:	bf00      	nop
 80087ce:	3724      	adds	r7, #36	; 0x24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	080100b0 	.word	0x080100b0

080087dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80087ea:	e15a      	b.n	8008aa2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	2101      	movs	r1, #1
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	fa01 f303 	lsl.w	r3, r1, r3
 80087f8:	4013      	ands	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 814c 	beq.w	8008a9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d005      	beq.n	800881c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008818:	2b02      	cmp	r3, #2
 800881a:	d130      	bne.n	800887e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	2203      	movs	r2, #3
 8008828:	fa02 f303 	lsl.w	r3, r2, r3
 800882c:	43db      	mvns	r3, r3
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4013      	ands	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	fa02 f303 	lsl.w	r3, r2, r3
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008852:	2201      	movs	r2, #1
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	fa02 f303 	lsl.w	r3, r2, r3
 800885a:	43db      	mvns	r3, r3
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4013      	ands	r3, r2
 8008860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	091b      	lsrs	r3, r3, #4
 8008868:	f003 0201 	and.w	r2, r3, #1
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	2b03      	cmp	r3, #3
 8008888:	d017      	beq.n	80088ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	2203      	movs	r2, #3
 8008896:	fa02 f303 	lsl.w	r3, r2, r3
 800889a:	43db      	mvns	r3, r3
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4013      	ands	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	fa02 f303 	lsl.w	r3, r2, r3
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d123      	bne.n	800890e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	08da      	lsrs	r2, r3, #3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3208      	adds	r2, #8
 80088ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f003 0307 	and.w	r3, r3, #7
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	220f      	movs	r2, #15
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	43db      	mvns	r3, r3
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4013      	ands	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	691a      	ldr	r2, [r3, #16]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	08da      	lsrs	r2, r3, #3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3208      	adds	r2, #8
 8008908:	6939      	ldr	r1, [r7, #16]
 800890a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	2203      	movs	r2, #3
 800891a:	fa02 f303 	lsl.w	r3, r2, r3
 800891e:	43db      	mvns	r3, r3
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4013      	ands	r3, r2
 8008924:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f003 0203 	and.w	r2, r3, #3
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 80a6 	beq.w	8008a9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008950:	4b5b      	ldr	r3, [pc, #364]	; (8008ac0 <HAL_GPIO_Init+0x2e4>)
 8008952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008954:	4a5a      	ldr	r2, [pc, #360]	; (8008ac0 <HAL_GPIO_Init+0x2e4>)
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	6613      	str	r3, [r2, #96]	; 0x60
 800895c:	4b58      	ldr	r3, [pc, #352]	; (8008ac0 <HAL_GPIO_Init+0x2e4>)
 800895e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	60bb      	str	r3, [r7, #8]
 8008966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008968:	4a56      	ldr	r2, [pc, #344]	; (8008ac4 <HAL_GPIO_Init+0x2e8>)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	089b      	lsrs	r3, r3, #2
 800896e:	3302      	adds	r3, #2
 8008970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f003 0303 	and.w	r3, r3, #3
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	220f      	movs	r2, #15
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	43db      	mvns	r3, r3
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	4013      	ands	r3, r2
 800898a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008992:	d01f      	beq.n	80089d4 <HAL_GPIO_Init+0x1f8>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a4c      	ldr	r2, [pc, #304]	; (8008ac8 <HAL_GPIO_Init+0x2ec>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d019      	beq.n	80089d0 <HAL_GPIO_Init+0x1f4>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a4b      	ldr	r2, [pc, #300]	; (8008acc <HAL_GPIO_Init+0x2f0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d013      	beq.n	80089cc <HAL_GPIO_Init+0x1f0>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a4a      	ldr	r2, [pc, #296]	; (8008ad0 <HAL_GPIO_Init+0x2f4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00d      	beq.n	80089c8 <HAL_GPIO_Init+0x1ec>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a49      	ldr	r2, [pc, #292]	; (8008ad4 <HAL_GPIO_Init+0x2f8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d007      	beq.n	80089c4 <HAL_GPIO_Init+0x1e8>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a48      	ldr	r2, [pc, #288]	; (8008ad8 <HAL_GPIO_Init+0x2fc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d101      	bne.n	80089c0 <HAL_GPIO_Init+0x1e4>
 80089bc:	2305      	movs	r3, #5
 80089be:	e00a      	b.n	80089d6 <HAL_GPIO_Init+0x1fa>
 80089c0:	2306      	movs	r3, #6
 80089c2:	e008      	b.n	80089d6 <HAL_GPIO_Init+0x1fa>
 80089c4:	2304      	movs	r3, #4
 80089c6:	e006      	b.n	80089d6 <HAL_GPIO_Init+0x1fa>
 80089c8:	2303      	movs	r3, #3
 80089ca:	e004      	b.n	80089d6 <HAL_GPIO_Init+0x1fa>
 80089cc:	2302      	movs	r3, #2
 80089ce:	e002      	b.n	80089d6 <HAL_GPIO_Init+0x1fa>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <HAL_GPIO_Init+0x1fa>
 80089d4:	2300      	movs	r3, #0
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	f002 0203 	and.w	r2, r2, #3
 80089dc:	0092      	lsls	r2, r2, #2
 80089de:	4093      	lsls	r3, r2
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089e6:	4937      	ldr	r1, [pc, #220]	; (8008ac4 <HAL_GPIO_Init+0x2e8>)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	089b      	lsrs	r3, r3, #2
 80089ec:	3302      	adds	r3, #2
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089f4:	4b39      	ldr	r3, [pc, #228]	; (8008adc <HAL_GPIO_Init+0x300>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	43db      	mvns	r3, r3
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4013      	ands	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008a18:	4a30      	ldr	r2, [pc, #192]	; (8008adc <HAL_GPIO_Init+0x300>)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008a1e:	4b2f      	ldr	r3, [pc, #188]	; (8008adc <HAL_GPIO_Init+0x300>)
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	43db      	mvns	r3, r3
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008a42:	4a26      	ldr	r2, [pc, #152]	; (8008adc <HAL_GPIO_Init+0x300>)
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008a48:	4b24      	ldr	r3, [pc, #144]	; (8008adc <HAL_GPIO_Init+0x300>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	43db      	mvns	r3, r3
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4013      	ands	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008a6c:	4a1b      	ldr	r2, [pc, #108]	; (8008adc <HAL_GPIO_Init+0x300>)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008a72:	4b1a      	ldr	r3, [pc, #104]	; (8008adc <HAL_GPIO_Init+0x300>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a96:	4a11      	ldr	r2, [pc, #68]	; (8008adc <HAL_GPIO_Init+0x300>)
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f47f ae9d 	bne.w	80087ec <HAL_GPIO_Init+0x10>
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	371c      	adds	r7, #28
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	40021000 	.word	0x40021000
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	48000400 	.word	0x48000400
 8008acc:	48000800 	.word	0x48000800
 8008ad0:	48000c00 	.word	0x48000c00
 8008ad4:	48001000 	.word	0x48001000
 8008ad8:	48001400 	.word	0x48001400
 8008adc:	40010400 	.word	0x40010400

08008ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	691a      	ldr	r2, [r3, #16]
 8008af0:	887b      	ldrh	r3, [r7, #2]
 8008af2:	4013      	ands	r3, r2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008af8:	2301      	movs	r3, #1
 8008afa:	73fb      	strb	r3, [r7, #15]
 8008afc:	e001      	b.n	8008b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	807b      	strh	r3, [r7, #2]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b20:	787b      	ldrb	r3, [r7, #1]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008b26:	887a      	ldrh	r2, [r7, #2]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008b2c:	e002      	b.n	8008b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008b2e:	887a      	ldrh	r2, [r7, #2]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008b52:	887a      	ldrh	r2, [r7, #2]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4013      	ands	r3, r2
 8008b58:	041a      	lsls	r2, r3, #16
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	43d9      	mvns	r1, r3
 8008b5e:	887b      	ldrh	r3, [r7, #2]
 8008b60:	400b      	ands	r3, r1
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	619a      	str	r2, [r3, #24]
}
 8008b68:	bf00      	nop
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008b7e:	4b08      	ldr	r3, [pc, #32]	; (8008ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b80:	695a      	ldr	r2, [r3, #20]
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	4013      	ands	r3, r2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d006      	beq.n	8008b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b8a:	4a05      	ldr	r2, [pc, #20]	; (8008ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b8c:	88fb      	ldrh	r3, [r7, #6]
 8008b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fa ffa6 	bl	8003ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40010400 	.word	0x40010400

08008ba4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d141      	bne.n	8008c36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008bb2:	4b4b      	ldr	r3, [pc, #300]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bbe:	d131      	bne.n	8008c24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bc0:	4b47      	ldr	r3, [pc, #284]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc6:	4a46      	ldr	r2, [pc, #280]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008bd0:	4b43      	ldr	r3, [pc, #268]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008bd8:	4a41      	ldr	r2, [pc, #260]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008be0:	4b40      	ldr	r3, [pc, #256]	; (8008ce4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2232      	movs	r2, #50	; 0x32
 8008be6:	fb02 f303 	mul.w	r3, r2, r3
 8008bea:	4a3f      	ldr	r2, [pc, #252]	; (8008ce8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	0c9b      	lsrs	r3, r3, #18
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bf6:	e002      	b.n	8008bfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bfe:	4b38      	ldr	r3, [pc, #224]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c0a:	d102      	bne.n	8008c12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f2      	bne.n	8008bf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c12:	4b33      	ldr	r3, [pc, #204]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c1e:	d158      	bne.n	8008cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e057      	b.n	8008cd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c24:	4b2e      	ldr	r3, [pc, #184]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c2a:	4a2d      	ldr	r2, [pc, #180]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008c34:	e04d      	b.n	8008cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c3c:	d141      	bne.n	8008cc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c3e:	4b28      	ldr	r3, [pc, #160]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4a:	d131      	bne.n	8008cb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c4c:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c52:	4a23      	ldr	r2, [pc, #140]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c5c:	4b20      	ldr	r3, [pc, #128]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c64:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ce4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2232      	movs	r2, #50	; 0x32
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
 8008c76:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c78:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7c:	0c9b      	lsrs	r3, r3, #18
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c82:	e002      	b.n	8008c8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c8a:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c96:	d102      	bne.n	8008c9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f2      	bne.n	8008c84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c9e:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008caa:	d112      	bne.n	8008cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e011      	b.n	8008cd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008cb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008cc0:	e007      	b.n	8008cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008cc2:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008cca:	4a05      	ldr	r2, [pc, #20]	; (8008ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	40007000 	.word	0x40007000
 8008ce4:	20000008 	.word	0x20000008
 8008ce8:	431bde83 	.word	0x431bde83

08008cec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4a04      	ldr	r2, [pc, #16]	; (8008d08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cfa:	6093      	str	r3, [r2, #8]
}
 8008cfc:	bf00      	nop
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40007000 	.word	0x40007000

08008d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e306      	b.n	800932c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d075      	beq.n	8008e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d2a:	4b97      	ldr	r3, [pc, #604]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 030c 	and.w	r3, r3, #12
 8008d32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d34:	4b94      	ldr	r3, [pc, #592]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b0c      	cmp	r3, #12
 8008d42:	d102      	bne.n	8008d4a <HAL_RCC_OscConfig+0x3e>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d002      	beq.n	8008d50 <HAL_RCC_OscConfig+0x44>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d10b      	bne.n	8008d68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d50:	4b8d      	ldr	r3, [pc, #564]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d05b      	beq.n	8008e14 <HAL_RCC_OscConfig+0x108>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d157      	bne.n	8008e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e2e1      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d70:	d106      	bne.n	8008d80 <HAL_RCC_OscConfig+0x74>
 8008d72:	4b85      	ldr	r3, [pc, #532]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a84      	ldr	r2, [pc, #528]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	e01d      	b.n	8008dbc <HAL_RCC_OscConfig+0xb0>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d88:	d10c      	bne.n	8008da4 <HAL_RCC_OscConfig+0x98>
 8008d8a:	4b7f      	ldr	r3, [pc, #508]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a7e      	ldr	r2, [pc, #504]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	4b7c      	ldr	r3, [pc, #496]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a7b      	ldr	r2, [pc, #492]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	e00b      	b.n	8008dbc <HAL_RCC_OscConfig+0xb0>
 8008da4:	4b78      	ldr	r3, [pc, #480]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a77      	ldr	r2, [pc, #476]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	4b75      	ldr	r3, [pc, #468]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a74      	ldr	r2, [pc, #464]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d013      	beq.n	8008dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc4:	f7fa f890 	bl	8002ee8 <HAL_GetTick>
 8008dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dca:	e008      	b.n	8008dde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dcc:	f7fa f88c 	bl	8002ee8 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b64      	cmp	r3, #100	; 0x64
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e2a6      	b.n	800932c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dde:	4b6a      	ldr	r3, [pc, #424]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0f0      	beq.n	8008dcc <HAL_RCC_OscConfig+0xc0>
 8008dea:	e014      	b.n	8008e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dec:	f7fa f87c 	bl	8002ee8 <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008df2:	e008      	b.n	8008e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008df4:	f7fa f878 	bl	8002ee8 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b64      	cmp	r3, #100	; 0x64
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e292      	b.n	800932c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e06:	4b60      	ldr	r3, [pc, #384]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f0      	bne.n	8008df4 <HAL_RCC_OscConfig+0xe8>
 8008e12:	e000      	b.n	8008e16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d075      	beq.n	8008f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e22:	4b59      	ldr	r3, [pc, #356]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 030c 	and.w	r3, r3, #12
 8008e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e2c:	4b56      	ldr	r3, [pc, #344]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b0c      	cmp	r3, #12
 8008e3a:	d102      	bne.n	8008e42 <HAL_RCC_OscConfig+0x136>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d002      	beq.n	8008e48 <HAL_RCC_OscConfig+0x13c>
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d11f      	bne.n	8008e88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e48:	4b4f      	ldr	r3, [pc, #316]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <HAL_RCC_OscConfig+0x154>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e265      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e60:	4b49      	ldr	r3, [pc, #292]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	4946      	ldr	r1, [pc, #280]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008e74:	4b45      	ldr	r3, [pc, #276]	; (8008f8c <HAL_RCC_OscConfig+0x280>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fc fe49 	bl	8005b10 <HAL_InitTick>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d043      	beq.n	8008f0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e251      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d023      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e90:	4b3d      	ldr	r3, [pc, #244]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a3c      	ldr	r2, [pc, #240]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e9c:	f7fa f824 	bl	8002ee8 <HAL_GetTick>
 8008ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ea4:	f7fa f820 	bl	8002ee8 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e23a      	b.n	800932c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008eb6:	4b34      	ldr	r3, [pc, #208]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f0      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ec2:	4b31      	ldr	r3, [pc, #196]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	061b      	lsls	r3, r3, #24
 8008ed0:	492d      	ldr	r1, [pc, #180]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	604b      	str	r3, [r1, #4]
 8008ed6:	e01a      	b.n	8008f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ed8:	4b2b      	ldr	r3, [pc, #172]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a2a      	ldr	r2, [pc, #168]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee4:	f7fa f800 	bl	8002ee8 <HAL_GetTick>
 8008ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eec:	f7f9 fffc 	bl	8002ee8 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e216      	b.n	800932c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008efe:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f0      	bne.n	8008eec <HAL_RCC_OscConfig+0x1e0>
 8008f0a:	e000      	b.n	8008f0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0308 	and.w	r3, r3, #8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d041      	beq.n	8008f9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01c      	beq.n	8008f5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f22:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f28:	4a17      	ldr	r2, [pc, #92]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008f2a:	f043 0301 	orr.w	r3, r3, #1
 8008f2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f32:	f7f9 ffd9 	bl	8002ee8 <HAL_GetTick>
 8008f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f38:	e008      	b.n	8008f4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f3a:	f7f9 ffd5 	bl	8002ee8 <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d901      	bls.n	8008f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e1ef      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0ef      	beq.n	8008f3a <HAL_RCC_OscConfig+0x22e>
 8008f5a:	e020      	b.n	8008f9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f5c:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f62:	4a09      	ldr	r2, [pc, #36]	; (8008f88 <HAL_RCC_OscConfig+0x27c>)
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f6c:	f7f9 ffbc 	bl	8002ee8 <HAL_GetTick>
 8008f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f72:	e00d      	b.n	8008f90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f74:	f7f9 ffb8 	bl	8002ee8 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d906      	bls.n	8008f90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e1d2      	b.n	800932c <HAL_RCC_OscConfig+0x620>
 8008f86:	bf00      	nop
 8008f88:	40021000 	.word	0x40021000
 8008f8c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f90:	4b8c      	ldr	r3, [pc, #560]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8008f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1ea      	bne.n	8008f74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80a6 	beq.w	80090f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fac:	2300      	movs	r3, #0
 8008fae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008fb0:	4b84      	ldr	r3, [pc, #528]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8008fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x2b4>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCC_OscConfig+0x2b6>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00d      	beq.n	8008fe2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fc6:	4b7f      	ldr	r3, [pc, #508]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	4a7e      	ldr	r2, [pc, #504]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8008fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8008fd2:	4b7c      	ldr	r3, [pc, #496]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fe2:	4b79      	ldr	r3, [pc, #484]	; (80091c8 <HAL_RCC_OscConfig+0x4bc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d118      	bne.n	8009020 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fee:	4b76      	ldr	r3, [pc, #472]	; (80091c8 <HAL_RCC_OscConfig+0x4bc>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a75      	ldr	r2, [pc, #468]	; (80091c8 <HAL_RCC_OscConfig+0x4bc>)
 8008ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ffa:	f7f9 ff75 	bl	8002ee8 <HAL_GetTick>
 8008ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009000:	e008      	b.n	8009014 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009002:	f7f9 ff71 	bl	8002ee8 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	2b02      	cmp	r3, #2
 800900e:	d901      	bls.n	8009014 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e18b      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009014:	4b6c      	ldr	r3, [pc, #432]	; (80091c8 <HAL_RCC_OscConfig+0x4bc>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0f0      	beq.n	8009002 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d108      	bne.n	800903a <HAL_RCC_OscConfig+0x32e>
 8009028:	4b66      	ldr	r3, [pc, #408]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800902a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902e:	4a65      	ldr	r2, [pc, #404]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009030:	f043 0301 	orr.w	r3, r3, #1
 8009034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009038:	e024      	b.n	8009084 <HAL_RCC_OscConfig+0x378>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	2b05      	cmp	r3, #5
 8009040:	d110      	bne.n	8009064 <HAL_RCC_OscConfig+0x358>
 8009042:	4b60      	ldr	r3, [pc, #384]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009048:	4a5e      	ldr	r2, [pc, #376]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800904a:	f043 0304 	orr.w	r3, r3, #4
 800904e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009052:	4b5c      	ldr	r3, [pc, #368]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009058:	4a5a      	ldr	r2, [pc, #360]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800905a:	f043 0301 	orr.w	r3, r3, #1
 800905e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009062:	e00f      	b.n	8009084 <HAL_RCC_OscConfig+0x378>
 8009064:	4b57      	ldr	r3, [pc, #348]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800906a:	4a56      	ldr	r2, [pc, #344]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009074:	4b53      	ldr	r3, [pc, #332]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907a:	4a52      	ldr	r2, [pc, #328]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800907c:	f023 0304 	bic.w	r3, r3, #4
 8009080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d016      	beq.n	80090ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800908c:	f7f9 ff2c 	bl	8002ee8 <HAL_GetTick>
 8009090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009092:	e00a      	b.n	80090aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009094:	f7f9 ff28 	bl	8002ee8 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e140      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090aa:	4b46      	ldr	r3, [pc, #280]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 80090ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0ed      	beq.n	8009094 <HAL_RCC_OscConfig+0x388>
 80090b8:	e015      	b.n	80090e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ba:	f7f9 ff15 	bl	8002ee8 <HAL_GetTick>
 80090be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090c0:	e00a      	b.n	80090d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090c2:	f7f9 ff11 	bl	8002ee8 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d901      	bls.n	80090d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e129      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090d8:	4b3a      	ldr	r3, [pc, #232]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 80090da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1ed      	bne.n	80090c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090e6:	7ffb      	ldrb	r3, [r7, #31]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d105      	bne.n	80090f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090ec:	4b35      	ldr	r3, [pc, #212]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 80090ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f0:	4a34      	ldr	r2, [pc, #208]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 80090f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0320 	and.w	r3, r3, #32
 8009100:	2b00      	cmp	r3, #0
 8009102:	d03c      	beq.n	800917e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01c      	beq.n	8009146 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800910c:	4b2d      	ldr	r3, [pc, #180]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800910e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009112:	4a2c      	ldr	r2, [pc, #176]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009114:	f043 0301 	orr.w	r3, r3, #1
 8009118:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800911c:	f7f9 fee4 	bl	8002ee8 <HAL_GetTick>
 8009120:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009122:	e008      	b.n	8009136 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009124:	f7f9 fee0 	bl	8002ee8 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b02      	cmp	r3, #2
 8009130:	d901      	bls.n	8009136 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e0fa      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009136:	4b23      	ldr	r3, [pc, #140]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800913c:	f003 0302 	and.w	r3, r3, #2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0ef      	beq.n	8009124 <HAL_RCC_OscConfig+0x418>
 8009144:	e01b      	b.n	800917e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009146:	4b1f      	ldr	r3, [pc, #124]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800914e:	f023 0301 	bic.w	r3, r3, #1
 8009152:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009156:	f7f9 fec7 	bl	8002ee8 <HAL_GetTick>
 800915a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800915c:	e008      	b.n	8009170 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800915e:	f7f9 fec3 	bl	8002ee8 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e0dd      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009170:	4b14      	ldr	r3, [pc, #80]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 8009172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1ef      	bne.n	800915e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 80d1 	beq.w	800932a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f003 030c 	and.w	r3, r3, #12
 8009190:	2b0c      	cmp	r3, #12
 8009192:	f000 808b 	beq.w	80092ac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d15e      	bne.n	800925c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a08      	ldr	r2, [pc, #32]	; (80091c4 <HAL_RCC_OscConfig+0x4b8>)
 80091a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091aa:	f7f9 fe9d 	bl	8002ee8 <HAL_GetTick>
 80091ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091b0:	e00c      	b.n	80091cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091b2:	f7f9 fe99 	bl	8002ee8 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d905      	bls.n	80091cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e0b3      	b.n	800932c <HAL_RCC_OscConfig+0x620>
 80091c4:	40021000 	.word	0x40021000
 80091c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091cc:	4b59      	ldr	r3, [pc, #356]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1ec      	bne.n	80091b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091d8:	4b56      	ldr	r3, [pc, #344]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	4b56      	ldr	r3, [pc, #344]	; (8009338 <HAL_RCC_OscConfig+0x62c>)
 80091de:	4013      	ands	r3, r2
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6a11      	ldr	r1, [r2, #32]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091e8:	3a01      	subs	r2, #1
 80091ea:	0112      	lsls	r2, r2, #4
 80091ec:	4311      	orrs	r1, r2
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80091f2:	0212      	lsls	r2, r2, #8
 80091f4:	4311      	orrs	r1, r2
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80091fa:	0852      	lsrs	r2, r2, #1
 80091fc:	3a01      	subs	r2, #1
 80091fe:	0552      	lsls	r2, r2, #21
 8009200:	4311      	orrs	r1, r2
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009206:	0852      	lsrs	r2, r2, #1
 8009208:	3a01      	subs	r2, #1
 800920a:	0652      	lsls	r2, r2, #25
 800920c:	4311      	orrs	r1, r2
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009212:	06d2      	lsls	r2, r2, #27
 8009214:	430a      	orrs	r2, r1
 8009216:	4947      	ldr	r1, [pc, #284]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 8009218:	4313      	orrs	r3, r2
 800921a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800921c:	4b45      	ldr	r3, [pc, #276]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a44      	ldr	r2, [pc, #272]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 8009222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009226:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009228:	4b42      	ldr	r3, [pc, #264]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	4a41      	ldr	r2, [pc, #260]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 800922e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009232:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009234:	f7f9 fe58 	bl	8002ee8 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800923c:	f7f9 fe54 	bl	8002ee8 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e06e      	b.n	800932c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800924e:	4b39      	ldr	r3, [pc, #228]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <HAL_RCC_OscConfig+0x530>
 800925a:	e066      	b.n	800932a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800925c:	4b35      	ldr	r3, [pc, #212]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a34      	ldr	r2, [pc, #208]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 8009262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009266:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009268:	4b32      	ldr	r3, [pc, #200]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	4a31      	ldr	r2, [pc, #196]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 800926e:	f023 0303 	bic.w	r3, r3, #3
 8009272:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009274:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	4a2e      	ldr	r2, [pc, #184]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 800927a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800927e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009282:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009284:	f7f9 fe30 	bl	8002ee8 <HAL_GetTick>
 8009288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800928a:	e008      	b.n	800929e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800928c:	f7f9 fe2c 	bl	8002ee8 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e046      	b.n	800932c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800929e:	4b25      	ldr	r3, [pc, #148]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f0      	bne.n	800928c <HAL_RCC_OscConfig+0x580>
 80092aa:	e03e      	b.n	800932a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e039      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80092b8:	4b1e      	ldr	r3, [pc, #120]	; (8009334 <HAL_RCC_OscConfig+0x628>)
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f003 0203 	and.w	r2, r3, #3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d12c      	bne.n	8009326 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	3b01      	subs	r3, #1
 80092d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092da:	429a      	cmp	r2, r3
 80092dc:	d123      	bne.n	8009326 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d11b      	bne.n	8009326 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d113      	bne.n	8009326 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	085b      	lsrs	r3, r3, #1
 800930a:	3b01      	subs	r3, #1
 800930c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800930e:	429a      	cmp	r2, r3
 8009310:	d109      	bne.n	8009326 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931c:	085b      	lsrs	r3, r3, #1
 800931e:	3b01      	subs	r3, #1
 8009320:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009322:	429a      	cmp	r2, r3
 8009324:	d001      	beq.n	800932a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e000      	b.n	800932c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40021000 	.word	0x40021000
 8009338:	019f800c 	.word	0x019f800c

0800933c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e11e      	b.n	8009592 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009354:	4b91      	ldr	r3, [pc, #580]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 030f 	and.w	r3, r3, #15
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d910      	bls.n	8009384 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009362:	4b8e      	ldr	r3, [pc, #568]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f023 020f 	bic.w	r2, r3, #15
 800936a:	498c      	ldr	r1, [pc, #560]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	4313      	orrs	r3, r2
 8009370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009372:	4b8a      	ldr	r3, [pc, #552]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d001      	beq.n	8009384 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e106      	b.n	8009592 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b00      	cmp	r3, #0
 800938e:	d073      	beq.n	8009478 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2b03      	cmp	r3, #3
 8009396:	d129      	bne.n	80093ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009398:	4b81      	ldr	r3, [pc, #516]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e0f4      	b.n	8009592 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80093a8:	f000 f99e 	bl	80096e8 <RCC_GetSysClockFreqFromPLLSource>
 80093ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4a7c      	ldr	r2, [pc, #496]	; (80095a4 <HAL_RCC_ClockConfig+0x268>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d93f      	bls.n	8009436 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80093b6:	4b7a      	ldr	r3, [pc, #488]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d033      	beq.n	8009436 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d12f      	bne.n	8009436 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80093d6:	4b72      	ldr	r3, [pc, #456]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093de:	4a70      	ldr	r2, [pc, #448]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80093e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80093e6:	2380      	movs	r3, #128	; 0x80
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e024      	b.n	8009436 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d107      	bne.n	8009404 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093f4:	4b6a      	ldr	r3, [pc, #424]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e0c6      	b.n	8009592 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009404:	4b66      	ldr	r3, [pc, #408]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e0be      	b.n	8009592 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009414:	f000 f8ce 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 8009418:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	4a61      	ldr	r2, [pc, #388]	; (80095a4 <HAL_RCC_ClockConfig+0x268>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d909      	bls.n	8009436 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009422:	4b5f      	ldr	r3, [pc, #380]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800942a:	4a5d      	ldr	r2, [pc, #372]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 800942c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009430:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009432:	2380      	movs	r3, #128	; 0x80
 8009434:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009436:	4b5a      	ldr	r3, [pc, #360]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f023 0203 	bic.w	r2, r3, #3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4957      	ldr	r1, [pc, #348]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009444:	4313      	orrs	r3, r2
 8009446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009448:	f7f9 fd4e 	bl	8002ee8 <HAL_GetTick>
 800944c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800944e:	e00a      	b.n	8009466 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009450:	f7f9 fd4a 	bl	8002ee8 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	f241 3288 	movw	r2, #5000	; 0x1388
 800945e:	4293      	cmp	r3, r2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e095      	b.n	8009592 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009466:	4b4e      	ldr	r3, [pc, #312]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 020c 	and.w	r2, r3, #12
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	429a      	cmp	r2, r3
 8009476:	d1eb      	bne.n	8009450 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d023      	beq.n	80094cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d005      	beq.n	800949c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009490:	4b43      	ldr	r3, [pc, #268]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	4a42      	ldr	r2, [pc, #264]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800949a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80094a8:	4b3d      	ldr	r3, [pc, #244]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80094b0:	4a3b      	ldr	r2, [pc, #236]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80094b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80094b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094b8:	4b39      	ldr	r3, [pc, #228]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	4936      	ldr	r1, [pc, #216]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	608b      	str	r3, [r1, #8]
 80094ca:	e008      	b.n	80094de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b80      	cmp	r3, #128	; 0x80
 80094d0:	d105      	bne.n	80094de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80094d2:	4b33      	ldr	r3, [pc, #204]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	4a32      	ldr	r2, [pc, #200]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 80094d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094de:	4b2f      	ldr	r3, [pc, #188]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 030f 	and.w	r3, r3, #15
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d21d      	bcs.n	8009528 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094ec:	4b2b      	ldr	r3, [pc, #172]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f023 020f 	bic.w	r2, r3, #15
 80094f4:	4929      	ldr	r1, [pc, #164]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80094fc:	f7f9 fcf4 	bl	8002ee8 <HAL_GetTick>
 8009500:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009502:	e00a      	b.n	800951a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009504:	f7f9 fcf0 	bl	8002ee8 <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009512:	4293      	cmp	r3, r2
 8009514:	d901      	bls.n	800951a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e03b      	b.n	8009592 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800951a:	4b20      	ldr	r3, [pc, #128]	; (800959c <HAL_RCC_ClockConfig+0x260>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d1ed      	bne.n	8009504 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d008      	beq.n	8009546 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	4917      	ldr	r1, [pc, #92]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009542:	4313      	orrs	r3, r2
 8009544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d009      	beq.n	8009566 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	490f      	ldr	r1, [pc, #60]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 8009562:	4313      	orrs	r3, r2
 8009564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009566:	f000 f825 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800956a:	4602      	mov	r2, r0
 800956c:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <HAL_RCC_ClockConfig+0x264>)
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	091b      	lsrs	r3, r3, #4
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	490c      	ldr	r1, [pc, #48]	; (80095a8 <HAL_RCC_ClockConfig+0x26c>)
 8009578:	5ccb      	ldrb	r3, [r1, r3]
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <HAL_RCC_ClockConfig+0x270>)
 8009584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009586:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_RCC_ClockConfig+0x274>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f7fc fac0 	bl	8005b10 <HAL_InitTick>
 8009590:	4603      	mov	r3, r0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	40022000 	.word	0x40022000
 80095a0:	40021000 	.word	0x40021000
 80095a4:	04c4b400 	.word	0x04c4b400
 80095a8:	08010098 	.word	0x08010098
 80095ac:	20000008 	.word	0x20000008
 80095b0:	2000000c 	.word	0x2000000c

080095b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80095ba:	4b2c      	ldr	r3, [pc, #176]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 030c 	and.w	r3, r3, #12
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	d102      	bne.n	80095cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80095c6:	4b2a      	ldr	r3, [pc, #168]	; (8009670 <HAL_RCC_GetSysClockFreq+0xbc>)
 80095c8:	613b      	str	r3, [r7, #16]
 80095ca:	e047      	b.n	800965c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80095cc:	4b27      	ldr	r3, [pc, #156]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 030c 	and.w	r3, r3, #12
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d102      	bne.n	80095de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80095d8:	4b26      	ldr	r3, [pc, #152]	; (8009674 <HAL_RCC_GetSysClockFreq+0xc0>)
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	e03e      	b.n	800965c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80095de:	4b23      	ldr	r3, [pc, #140]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 030c 	and.w	r3, r3, #12
 80095e6:	2b0c      	cmp	r3, #12
 80095e8:	d136      	bne.n	8009658 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095ea:	4b20      	ldr	r3, [pc, #128]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095f4:	4b1d      	ldr	r3, [pc, #116]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	091b      	lsrs	r3, r3, #4
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	3301      	adds	r3, #1
 8009600:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b03      	cmp	r3, #3
 8009606:	d10c      	bne.n	8009622 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009608:	4a1a      	ldr	r2, [pc, #104]	; (8009674 <HAL_RCC_GetSysClockFreq+0xc0>)
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009610:	4a16      	ldr	r2, [pc, #88]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009612:	68d2      	ldr	r2, [r2, #12]
 8009614:	0a12      	lsrs	r2, r2, #8
 8009616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800961a:	fb02 f303 	mul.w	r3, r2, r3
 800961e:	617b      	str	r3, [r7, #20]
      break;
 8009620:	e00c      	b.n	800963c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009622:	4a13      	ldr	r2, [pc, #76]	; (8009670 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	fbb2 f3f3 	udiv	r3, r2, r3
 800962a:	4a10      	ldr	r2, [pc, #64]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 800962c:	68d2      	ldr	r2, [r2, #12]
 800962e:	0a12      	lsrs	r2, r2, #8
 8009630:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009634:	fb02 f303 	mul.w	r3, r2, r3
 8009638:	617b      	str	r3, [r7, #20]
      break;
 800963a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800963c:	4b0b      	ldr	r3, [pc, #44]	; (800966c <HAL_RCC_GetSysClockFreq+0xb8>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	0e5b      	lsrs	r3, r3, #25
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	3301      	adds	r3, #1
 8009648:	005b      	lsls	r3, r3, #1
 800964a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	fbb2 f3f3 	udiv	r3, r2, r3
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	e001      	b.n	800965c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800965c:	693b      	ldr	r3, [r7, #16]
}
 800965e:	4618      	mov	r0, r3
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40021000 	.word	0x40021000
 8009670:	00f42400 	.word	0x00f42400
 8009674:	007a1200 	.word	0x007a1200

08009678 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800967c:	4b03      	ldr	r3, [pc, #12]	; (800968c <HAL_RCC_GetHCLKFreq+0x14>)
 800967e:	681b      	ldr	r3, [r3, #0]
}
 8009680:	4618      	mov	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000008 	.word	0x20000008

08009690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009694:	f7ff fff0 	bl	8009678 <HAL_RCC_GetHCLKFreq>
 8009698:	4602      	mov	r2, r0
 800969a:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	f003 0307 	and.w	r3, r3, #7
 80096a4:	4904      	ldr	r1, [pc, #16]	; (80096b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80096a6:	5ccb      	ldrb	r3, [r1, r3]
 80096a8:	f003 031f 	and.w	r3, r3, #31
 80096ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	40021000 	.word	0x40021000
 80096b8:	080100a8 	.word	0x080100a8

080096bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80096c0:	f7ff ffda 	bl	8009678 <HAL_RCC_GetHCLKFreq>
 80096c4:	4602      	mov	r2, r0
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	0adb      	lsrs	r3, r3, #11
 80096cc:	f003 0307 	and.w	r3, r3, #7
 80096d0:	4904      	ldr	r1, [pc, #16]	; (80096e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80096d2:	5ccb      	ldrb	r3, [r1, r3]
 80096d4:	f003 031f 	and.w	r3, r3, #31
 80096d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096dc:	4618      	mov	r0, r3
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	40021000 	.word	0x40021000
 80096e4:	080100a8 	.word	0x080100a8

080096e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80096ee:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80096f8:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	091b      	lsrs	r3, r3, #4
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b03      	cmp	r3, #3
 800970a:	d10c      	bne.n	8009726 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800970c:	4a17      	ldr	r2, [pc, #92]	; (800976c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	fbb2 f3f3 	udiv	r3, r2, r3
 8009714:	4a14      	ldr	r2, [pc, #80]	; (8009768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009716:	68d2      	ldr	r2, [r2, #12]
 8009718:	0a12      	lsrs	r2, r2, #8
 800971a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800971e:	fb02 f303 	mul.w	r3, r2, r3
 8009722:	617b      	str	r3, [r7, #20]
    break;
 8009724:	e00c      	b.n	8009740 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009726:	4a12      	ldr	r2, [pc, #72]	; (8009770 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	fbb2 f3f3 	udiv	r3, r2, r3
 800972e:	4a0e      	ldr	r2, [pc, #56]	; (8009768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009730:	68d2      	ldr	r2, [r2, #12]
 8009732:	0a12      	lsrs	r2, r2, #8
 8009734:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009738:	fb02 f303 	mul.w	r3, r2, r3
 800973c:	617b      	str	r3, [r7, #20]
    break;
 800973e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009740:	4b09      	ldr	r3, [pc, #36]	; (8009768 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	0e5b      	lsrs	r3, r3, #25
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	3301      	adds	r3, #1
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	fbb2 f3f3 	udiv	r3, r2, r3
 8009758:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800975a:	687b      	ldr	r3, [r7, #4]
}
 800975c:	4618      	mov	r0, r3
 800975e:	371c      	adds	r7, #28
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	40021000 	.word	0x40021000
 800976c:	007a1200 	.word	0x007a1200
 8009770:	00f42400 	.word	0x00f42400

08009774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800977c:	2300      	movs	r3, #0
 800977e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009780:	2300      	movs	r3, #0
 8009782:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 8098 	beq.w	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009792:	2300      	movs	r3, #0
 8009794:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009796:	4b43      	ldr	r3, [pc, #268]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10d      	bne.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097a2:	4b40      	ldr	r3, [pc, #256]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a6:	4a3f      	ldr	r2, [pc, #252]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ac:	6593      	str	r3, [r2, #88]	; 0x58
 80097ae:	4b3d      	ldr	r3, [pc, #244]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b6:	60bb      	str	r3, [r7, #8]
 80097b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097ba:	2301      	movs	r3, #1
 80097bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097be:	4b3a      	ldr	r3, [pc, #232]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a39      	ldr	r2, [pc, #228]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80097c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097ca:	f7f9 fb8d 	bl	8002ee8 <HAL_GetTick>
 80097ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097d0:	e009      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097d2:	f7f9 fb89 	bl	8002ee8 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d902      	bls.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	74fb      	strb	r3, [r7, #19]
        break;
 80097e4:	e005      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097e6:	4b30      	ldr	r3, [pc, #192]	; (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ef      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80097f2:	7cfb      	ldrb	r3, [r7, #19]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d159      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80097f8:	4b2a      	ldr	r3, [pc, #168]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009802:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d01e      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	429a      	cmp	r2, r3
 8009812:	d019      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009814:	4b23      	ldr	r3, [pc, #140]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800981a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800981e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009820:	4b20      	ldr	r3, [pc, #128]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009826:	4a1f      	ldr	r2, [pc, #124]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800982c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009830:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009836:	4a1b      	ldr	r2, [pc, #108]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800983c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009840:	4a18      	ldr	r2, [pc, #96]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	d016      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009852:	f7f9 fb49 	bl	8002ee8 <HAL_GetTick>
 8009856:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009858:	e00b      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800985a:	f7f9 fb45 	bl	8002ee8 <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	f241 3288 	movw	r2, #5000	; 0x1388
 8009868:	4293      	cmp	r3, r2
 800986a:	d902      	bls.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	74fb      	strb	r3, [r7, #19]
            break;
 8009870:	e006      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009872:	4b0c      	ldr	r3, [pc, #48]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009878:	f003 0302 	and.w	r3, r3, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0ec      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009880:	7cfb      	ldrb	r3, [r7, #19]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009886:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800988c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009894:	4903      	ldr	r1, [pc, #12]	; (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009896:	4313      	orrs	r3, r2
 8009898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800989c:	e008      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800989e:	7cfb      	ldrb	r3, [r7, #19]
 80098a0:	74bb      	strb	r3, [r7, #18]
 80098a2:	e005      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80098a4:	40021000 	.word	0x40021000
 80098a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ac:	7cfb      	ldrb	r3, [r7, #19]
 80098ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098b0:	7c7b      	ldrb	r3, [r7, #17]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d105      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098b6:	4ba7      	ldr	r3, [pc, #668]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ba:	4aa6      	ldr	r2, [pc, #664]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80098ce:	4ba1      	ldr	r3, [pc, #644]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d4:	f023 0203 	bic.w	r2, r3, #3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	499d      	ldr	r1, [pc, #628]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00a      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80098f0:	4b98      	ldr	r3, [pc, #608]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f6:	f023 020c 	bic.w	r2, r3, #12
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	4995      	ldr	r1, [pc, #596]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009900:	4313      	orrs	r3, r2
 8009902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009912:	4b90      	ldr	r3, [pc, #576]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	498c      	ldr	r1, [pc, #560]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009922:	4313      	orrs	r3, r2
 8009924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0308 	and.w	r3, r3, #8
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00a      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009934:	4b87      	ldr	r3, [pc, #540]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	4984      	ldr	r1, [pc, #528]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009944:	4313      	orrs	r3, r2
 8009946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009956:	4b7f      	ldr	r3, [pc, #508]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	497b      	ldr	r1, [pc, #492]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009966:	4313      	orrs	r3, r2
 8009968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0320 	and.w	r3, r3, #32
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009978:	4b76      	ldr	r3, [pc, #472]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	4973      	ldr	r1, [pc, #460]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009988:	4313      	orrs	r3, r2
 800998a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800999a:	4b6e      	ldr	r3, [pc, #440]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	496a      	ldr	r1, [pc, #424]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00a      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80099bc:	4b65      	ldr	r3, [pc, #404]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	4962      	ldr	r1, [pc, #392]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00a      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099de:	4b5d      	ldr	r3, [pc, #372]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	4959      	ldr	r1, [pc, #356]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00a      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a00:	4b54      	ldr	r3, [pc, #336]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a06:	f023 0203 	bic.w	r2, r3, #3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	4951      	ldr	r1, [pc, #324]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a22:	4b4c      	ldr	r3, [pc, #304]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	4948      	ldr	r1, [pc, #288]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d015      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a44:	4b43      	ldr	r3, [pc, #268]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a52:	4940      	ldr	r1, [pc, #256]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a62:	d105      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a64:	4b3b      	ldr	r3, [pc, #236]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	4a3a      	ldr	r2, [pc, #232]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d015      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009a7c:	4b35      	ldr	r3, [pc, #212]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8a:	4932      	ldr	r1, [pc, #200]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a9a:	d105      	bne.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a9c:	4b2d      	ldr	r3, [pc, #180]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	4a2c      	ldr	r2, [pc, #176]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d015      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ab4:	4b27      	ldr	r3, [pc, #156]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	4924      	ldr	r1, [pc, #144]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ad2:	d105      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ad4:	4b1f      	ldr	r3, [pc, #124]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	4a1e      	ldr	r2, [pc, #120]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ade:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d015      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009aec:	4b19      	ldr	r3, [pc, #100]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	4916      	ldr	r1, [pc, #88]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b0a:	d105      	bne.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b0c:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	4a10      	ldr	r2, [pc, #64]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d019      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	4908      	ldr	r1, [pc, #32]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b42:	d109      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b44:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4a02      	ldr	r2, [pc, #8]	; (8009b54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b4e:	60d3      	str	r3, [r2, #12]
 8009b50:	e002      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009b52:	bf00      	nop
 8009b54:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d015      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009b64:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b72:	4926      	ldr	r1, [pc, #152]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b82:	d105      	bne.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009b84:	4b21      	ldr	r3, [pc, #132]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	4a20      	ldr	r2, [pc, #128]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b8e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d015      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009b9c:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009baa:	4918      	ldr	r1, [pc, #96]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bba:	d105      	bne.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009bbc:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4a12      	ldr	r2, [pc, #72]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bc6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d015      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009bd4:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be2:	490a      	ldr	r1, [pc, #40]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bf2:	d105      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bf4:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	4a04      	ldr	r2, [pc, #16]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009c00:	7cbb      	ldrb	r3, [r7, #18]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40021000 	.word	0x40021000

08009c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e09d      	b.n	8009d5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d108      	bne.n	8009c3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c32:	d009      	beq.n	8009c48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	61da      	str	r2, [r3, #28]
 8009c3a:	e005      	b.n	8009c48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d106      	bne.n	8009c68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7fb f99a 	bl	8004f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c88:	d902      	bls.n	8009c90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	e002      	b.n	8009c96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009c9e:	d007      	beq.n	8009cb0 <HAL_SPI_Init+0xa0>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ca8:	d002      	beq.n	8009cb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0302 	and.w	r3, r3, #2
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf2:	ea42 0103 	orr.w	r1, r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	430a      	orrs	r2, r1
 8009d04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	0c1b      	lsrs	r3, r3, #16
 8009d0c:	f003 0204 	and.w	r2, r3, #4
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	431a      	orrs	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d2c:	ea42 0103 	orr.w	r1, r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69da      	ldr	r2, [r3, #28]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b08a      	sub	sp, #40	; 0x28
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d74:	2301      	movs	r3, #1
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d101      	bne.n	8009d8c <HAL_SPI_TransmitReceive+0x26>
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e1fb      	b.n	800a184 <HAL_SPI_TransmitReceive+0x41e>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d94:	f7f9 f8a8 	bl	8002ee8 <HAL_GetTick>
 8009d98:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009da0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009da8:	887b      	ldrh	r3, [r7, #2]
 8009daa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009dac:	887b      	ldrh	r3, [r7, #2]
 8009dae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009db0:	7efb      	ldrb	r3, [r7, #27]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d00e      	beq.n	8009dd4 <HAL_SPI_TransmitReceive+0x6e>
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dbc:	d106      	bne.n	8009dcc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <HAL_SPI_TransmitReceive+0x66>
 8009dc6:	7efb      	ldrb	r3, [r7, #27]
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d003      	beq.n	8009dd4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009dd2:	e1cd      	b.n	800a170 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d005      	beq.n	8009de6 <HAL_SPI_TransmitReceive+0x80>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <HAL_SPI_TransmitReceive+0x80>
 8009de0:	887b      	ldrh	r3, [r7, #2]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d103      	bne.n	8009dee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009dec:	e1c0      	b.n	800a170 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d003      	beq.n	8009e02 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	887a      	ldrh	r2, [r7, #2]
 8009e12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	887a      	ldrh	r2, [r7, #2]
 8009e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	887a      	ldrh	r2, [r7, #2]
 8009e28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	887a      	ldrh	r2, [r7, #2]
 8009e2e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e44:	d802      	bhi.n	8009e4c <HAL_SPI_TransmitReceive+0xe6>
 8009e46:	8a3b      	ldrh	r3, [r7, #16]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d908      	bls.n	8009e5e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e5a:	605a      	str	r2, [r3, #4]
 8009e5c:	e007      	b.n	8009e6e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e6c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e78:	2b40      	cmp	r3, #64	; 0x40
 8009e7a:	d007      	beq.n	8009e8c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009e94:	d97c      	bls.n	8009f90 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <HAL_SPI_TransmitReceive+0x13e>
 8009e9e:	8a7b      	ldrh	r3, [r7, #18]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d169      	bne.n	8009f78 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	881a      	ldrh	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb4:	1c9a      	adds	r2, r3, #2
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ec8:	e056      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d11b      	bne.n	8009f10 <HAL_SPI_TransmitReceive+0x1aa>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d016      	beq.n	8009f10 <HAL_SPI_TransmitReceive+0x1aa>
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d113      	bne.n	8009f10 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eec:	881a      	ldrh	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	1c9a      	adds	r2, r3, #2
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d11c      	bne.n	8009f58 <HAL_SPI_TransmitReceive+0x1f2>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d016      	beq.n	8009f58 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f34:	b292      	uxth	r2, r2
 8009f36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3c:	1c9a      	adds	r2, r3, #2
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f54:	2301      	movs	r3, #1
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f58:	f7f8 ffc6 	bl	8002ee8 <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d807      	bhi.n	8009f78 <HAL_SPI_TransmitReceive+0x212>
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6e:	d003      	beq.n	8009f78 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009f76:	e0fb      	b.n	800a170 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1a3      	bne.n	8009eca <HAL_SPI_TransmitReceive+0x164>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d19d      	bne.n	8009eca <HAL_SPI_TransmitReceive+0x164>
 8009f8e:	e0df      	b.n	800a150 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_SPI_TransmitReceive+0x23a>
 8009f98:	8a7b      	ldrh	r3, [r7, #18]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	f040 80cb 	bne.w	800a136 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d912      	bls.n	8009fd0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fae:	881a      	ldrh	r2, [r3, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fba:	1c9a      	adds	r2, r3, #2
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3b02      	subs	r3, #2
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fce:	e0b2      	b.n	800a136 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	7812      	ldrb	r2, [r2, #0]
 8009fdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ff6:	e09e      	b.n	800a136 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b02      	cmp	r3, #2
 800a004:	d134      	bne.n	800a070 <HAL_SPI_TransmitReceive+0x30a>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d02f      	beq.n	800a070 <HAL_SPI_TransmitReceive+0x30a>
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	2b01      	cmp	r3, #1
 800a014:	d12c      	bne.n	800a070 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d912      	bls.n	800a046 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a024:	881a      	ldrh	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	1c9a      	adds	r2, r3, #2
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	3b02      	subs	r3, #2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a044:	e012      	b.n	800a06c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	330c      	adds	r3, #12
 800a050:	7812      	ldrb	r2, [r2, #0]
 800a052:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a062:	b29b      	uxth	r3, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d148      	bne.n	800a110 <HAL_SPI_TransmitReceive+0x3aa>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a084:	b29b      	uxth	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d042      	beq.n	800a110 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a090:	b29b      	uxth	r3, r3
 800a092:	2b01      	cmp	r3, #1
 800a094:	d923      	bls.n	800a0de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	b292      	uxth	r2, r2
 800a0a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a8:	1c9a      	adds	r2, r3, #2
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	3b02      	subs	r3, #2
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d81f      	bhi.n	800a10c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a0da:	605a      	str	r2, [r3, #4]
 800a0dc:	e016      	b.n	800a10c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f103 020c 	add.w	r2, r3, #12
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ea:	7812      	ldrb	r2, [r2, #0]
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a10c:	2301      	movs	r3, #1
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a110:	f7f8 feea 	bl	8002ee8 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d803      	bhi.n	800a128 <HAL_SPI_TransmitReceive+0x3c2>
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d102      	bne.n	800a12e <HAL_SPI_TransmitReceive+0x3c8>
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d103      	bne.n	800a136 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a134:	e01c      	b.n	800a170 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f47f af5b 	bne.w	8009ff8 <HAL_SPI_TransmitReceive+0x292>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a148:	b29b      	uxth	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f47f af54 	bne.w	8009ff8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f937 	bl	800a3c8 <SPI_EndRxTxTransaction>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d006      	beq.n	800a16e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2220      	movs	r2, #32
 800a16a:	661a      	str	r2, [r3, #96]	; 0x60
 800a16c:	e000      	b.n	800a170 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a16e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a184:	4618      	mov	r0, r3
 800a186:	3728      	adds	r7, #40	; 0x28
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	4613      	mov	r3, r2
 800a19a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a19c:	f7f8 fea4 	bl	8002ee8 <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a1ac:	f7f8 fe9c 	bl	8002ee8 <HAL_GetTick>
 800a1b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1b2:	4b39      	ldr	r3, [pc, #228]	; (800a298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	015b      	lsls	r3, r3, #5
 800a1b8:	0d1b      	lsrs	r3, r3, #20
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	fb02 f303 	mul.w	r3, r2, r3
 800a1c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1c2:	e054      	b.n	800a26e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ca:	d050      	beq.n	800a26e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1cc:	f7f8 fe8c 	bl	8002ee8 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d902      	bls.n	800a1e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d13d      	bne.n	800a25e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1fa:	d111      	bne.n	800a220 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a204:	d004      	beq.n	800a210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a20e:	d107      	bne.n	800a220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a21e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a228:	d10f      	bne.n	800a24a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e017      	b.n	800a28e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	4013      	ands	r3, r2
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	bf0c      	ite	eq
 800a27e:	2301      	moveq	r3, #1
 800a280:	2300      	movne	r3, #0
 800a282:	b2db      	uxtb	r3, r3
 800a284:	461a      	mov	r2, r3
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d19b      	bne.n	800a1c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3720      	adds	r7, #32
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000008 	.word	0x20000008

0800a29c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08a      	sub	sp, #40	; 0x28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a2ae:	f7f8 fe1b 	bl	8002ee8 <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	1a9b      	subs	r3, r3, r2
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a2be:	f7f8 fe13 	bl	8002ee8 <HAL_GetTick>
 800a2c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	330c      	adds	r3, #12
 800a2ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a2cc:	4b3d      	ldr	r3, [pc, #244]	; (800a3c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	00da      	lsls	r2, r3, #3
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	0d1b      	lsrs	r3, r3, #20
 800a2dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2de:	fb02 f303 	mul.w	r3, r2, r3
 800a2e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a2e4:	e060      	b.n	800a3a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a2ec:	d107      	bne.n	800a2fe <SPI_WaitFifoStateUntilTimeout+0x62>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a304:	d050      	beq.n	800a3a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a306:	f7f8 fdef 	bl	8002ee8 <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a312:	429a      	cmp	r2, r3
 800a314:	d902      	bls.n	800a31c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d13d      	bne.n	800a398 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a32a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a334:	d111      	bne.n	800a35a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a33e:	d004      	beq.n	800a34a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a348:	d107      	bne.n	800a35a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a358:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a362:	d10f      	bne.n	800a384 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a382:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e010      	b.n	800a3ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d196      	bne.n	800a2e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3728      	adds	r7, #40	; 0x28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000008 	.word	0x20000008

0800a3c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f7ff ff5b 	bl	800a29c <SPI_WaitFifoStateUntilTimeout>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d007      	beq.n	800a3fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f0:	f043 0220 	orr.w	r2, r3, #32
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e027      	b.n	800a44c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2200      	movs	r2, #0
 800a404:	2180      	movs	r1, #128	; 0x80
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff fec0 	bl	800a18c <SPI_WaitFlagStateUntilTimeout>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d007      	beq.n	800a422 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a416:	f043 0220 	orr.w	r2, r3, #32
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e014      	b.n	800a44c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff ff34 	bl	800a29c <SPI_WaitFifoStateUntilTimeout>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d007      	beq.n	800a44a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a43e:	f043 0220 	orr.w	r2, r3, #32
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e000      	b.n	800a44c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e049      	b.n	800a4fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7fb f81a 	bl	80054b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2202      	movs	r2, #2
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3304      	adds	r3, #4
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f000 fcd4 	bl	800ae40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b01      	cmp	r3, #1
 800a516:	d001      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e054      	b.n	800a5c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0201 	orr.w	r2, r2, #1
 800a532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a26      	ldr	r2, [pc, #152]	; (800a5d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d022      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a546:	d01d      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a22      	ldr	r2, [pc, #136]	; (800a5d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d018      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a21      	ldr	r2, [pc, #132]	; (800a5dc <HAL_TIM_Base_Start_IT+0xd8>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d013      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1f      	ldr	r2, [pc, #124]	; (800a5e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00e      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a1e      	ldr	r2, [pc, #120]	; (800a5e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d009      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a1c      	ldr	r2, [pc, #112]	; (800a5e8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d004      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a1b      	ldr	r2, [pc, #108]	; (800a5ec <HAL_TIM_Base_Start_IT+0xe8>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d115      	bne.n	800a5b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	4b19      	ldr	r3, [pc, #100]	; (800a5f0 <HAL_TIM_Base_Start_IT+0xec>)
 800a58c:	4013      	ands	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b06      	cmp	r3, #6
 800a594:	d015      	beq.n	800a5c2 <HAL_TIM_Base_Start_IT+0xbe>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59c:	d011      	beq.n	800a5c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f042 0201 	orr.w	r2, r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ae:	e008      	b.n	800a5c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f042 0201 	orr.w	r2, r2, #1
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	e000      	b.n	800a5c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	40012c00 	.word	0x40012c00
 800a5d8:	40000400 	.word	0x40000400
 800a5dc:	40000800 	.word	0x40000800
 800a5e0:	40000c00 	.word	0x40000c00
 800a5e4:	40013400 	.word	0x40013400
 800a5e8:	40014000 	.word	0x40014000
 800a5ec:	40015000 	.word	0x40015000
 800a5f0:	00010007 	.word	0x00010007

0800a5f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e049      	b.n	800a69a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7fa ff2a 	bl	8005474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	4619      	mov	r1, r3
 800a632:	4610      	mov	r0, r2
 800a634:	f000 fc04 	bl	800ae40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <HAL_TIM_PWM_Start+0x24>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	bf14      	ite	ne
 800a6c0:	2301      	movne	r3, #1
 800a6c2:	2300      	moveq	r3, #0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	e03c      	b.n	800a742 <HAL_TIM_PWM_Start+0x9e>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d109      	bne.n	800a6e2 <HAL_TIM_PWM_Start+0x3e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	bf14      	ite	ne
 800a6da:	2301      	movne	r3, #1
 800a6dc:	2300      	moveq	r3, #0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	e02f      	b.n	800a742 <HAL_TIM_PWM_Start+0x9e>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b08      	cmp	r3, #8
 800a6e6:	d109      	bne.n	800a6fc <HAL_TIM_PWM_Start+0x58>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	bf14      	ite	ne
 800a6f4:	2301      	movne	r3, #1
 800a6f6:	2300      	moveq	r3, #0
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	e022      	b.n	800a742 <HAL_TIM_PWM_Start+0x9e>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b0c      	cmp	r3, #12
 800a700:	d109      	bne.n	800a716 <HAL_TIM_PWM_Start+0x72>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	bf14      	ite	ne
 800a70e:	2301      	movne	r3, #1
 800a710:	2300      	moveq	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	e015      	b.n	800a742 <HAL_TIM_PWM_Start+0x9e>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d109      	bne.n	800a730 <HAL_TIM_PWM_Start+0x8c>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a722:	b2db      	uxtb	r3, r3
 800a724:	2b01      	cmp	r3, #1
 800a726:	bf14      	ite	ne
 800a728:	2301      	movne	r3, #1
 800a72a:	2300      	moveq	r3, #0
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	e008      	b.n	800a742 <HAL_TIM_PWM_Start+0x9e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b01      	cmp	r3, #1
 800a73a:	bf14      	ite	ne
 800a73c:	2301      	movne	r3, #1
 800a73e:	2300      	moveq	r3, #0
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e0a6      	b.n	800a898 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <HAL_TIM_PWM_Start+0xb6>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2202      	movs	r2, #2
 800a754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a758:	e023      	b.n	800a7a2 <HAL_TIM_PWM_Start+0xfe>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d104      	bne.n	800a76a <HAL_TIM_PWM_Start+0xc6>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a768:	e01b      	b.n	800a7a2 <HAL_TIM_PWM_Start+0xfe>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d104      	bne.n	800a77a <HAL_TIM_PWM_Start+0xd6>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2202      	movs	r2, #2
 800a774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a778:	e013      	b.n	800a7a2 <HAL_TIM_PWM_Start+0xfe>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b0c      	cmp	r3, #12
 800a77e:	d104      	bne.n	800a78a <HAL_TIM_PWM_Start+0xe6>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a788:	e00b      	b.n	800a7a2 <HAL_TIM_PWM_Start+0xfe>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b10      	cmp	r3, #16
 800a78e:	d104      	bne.n	800a79a <HAL_TIM_PWM_Start+0xf6>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a798:	e003      	b.n	800a7a2 <HAL_TIM_PWM_Start+0xfe>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2202      	movs	r2, #2
 800a79e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 ff1a 	bl	800b5e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a3a      	ldr	r2, [pc, #232]	; (800a8a0 <HAL_TIM_PWM_Start+0x1fc>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d018      	beq.n	800a7ec <HAL_TIM_PWM_Start+0x148>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a39      	ldr	r2, [pc, #228]	; (800a8a4 <HAL_TIM_PWM_Start+0x200>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d013      	beq.n	800a7ec <HAL_TIM_PWM_Start+0x148>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a37      	ldr	r2, [pc, #220]	; (800a8a8 <HAL_TIM_PWM_Start+0x204>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00e      	beq.n	800a7ec <HAL_TIM_PWM_Start+0x148>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a36      	ldr	r2, [pc, #216]	; (800a8ac <HAL_TIM_PWM_Start+0x208>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d009      	beq.n	800a7ec <HAL_TIM_PWM_Start+0x148>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a34      	ldr	r2, [pc, #208]	; (800a8b0 <HAL_TIM_PWM_Start+0x20c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d004      	beq.n	800a7ec <HAL_TIM_PWM_Start+0x148>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a33      	ldr	r2, [pc, #204]	; (800a8b4 <HAL_TIM_PWM_Start+0x210>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d101      	bne.n	800a7f0 <HAL_TIM_PWM_Start+0x14c>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e000      	b.n	800a7f2 <HAL_TIM_PWM_Start+0x14e>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a804:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a25      	ldr	r2, [pc, #148]	; (800a8a0 <HAL_TIM_PWM_Start+0x1fc>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d022      	beq.n	800a856 <HAL_TIM_PWM_Start+0x1b2>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a818:	d01d      	beq.n	800a856 <HAL_TIM_PWM_Start+0x1b2>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a26      	ldr	r2, [pc, #152]	; (800a8b8 <HAL_TIM_PWM_Start+0x214>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d018      	beq.n	800a856 <HAL_TIM_PWM_Start+0x1b2>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a24      	ldr	r2, [pc, #144]	; (800a8bc <HAL_TIM_PWM_Start+0x218>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d013      	beq.n	800a856 <HAL_TIM_PWM_Start+0x1b2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a23      	ldr	r2, [pc, #140]	; (800a8c0 <HAL_TIM_PWM_Start+0x21c>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d00e      	beq.n	800a856 <HAL_TIM_PWM_Start+0x1b2>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a19      	ldr	r2, [pc, #100]	; (800a8a4 <HAL_TIM_PWM_Start+0x200>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d009      	beq.n	800a856 <HAL_TIM_PWM_Start+0x1b2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a18      	ldr	r2, [pc, #96]	; (800a8a8 <HAL_TIM_PWM_Start+0x204>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d004      	beq.n	800a856 <HAL_TIM_PWM_Start+0x1b2>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a18      	ldr	r2, [pc, #96]	; (800a8b4 <HAL_TIM_PWM_Start+0x210>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d115      	bne.n	800a882 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	4b19      	ldr	r3, [pc, #100]	; (800a8c4 <HAL_TIM_PWM_Start+0x220>)
 800a85e:	4013      	ands	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b06      	cmp	r3, #6
 800a866:	d015      	beq.n	800a894 <HAL_TIM_PWM_Start+0x1f0>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86e:	d011      	beq.n	800a894 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0201 	orr.w	r2, r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a880:	e008      	b.n	800a894 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f042 0201 	orr.w	r2, r2, #1
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	e000      	b.n	800a896 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	40012c00 	.word	0x40012c00
 800a8a4:	40013400 	.word	0x40013400
 800a8a8:	40014000 	.word	0x40014000
 800a8ac:	40014400 	.word	0x40014400
 800a8b0:	40014800 	.word	0x40014800
 800a8b4:	40015000 	.word	0x40015000
 800a8b8:	40000400 	.word	0x40000400
 800a8bc:	40000800 	.word	0x40000800
 800a8c0:	40000c00 	.word	0x40000c00
 800a8c4:	00010007 	.word	0x00010007

0800a8c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	f003 0302 	and.w	r3, r3, #2
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d122      	bne.n	800a924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d11b      	bne.n	800a924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f06f 0202 	mvn.w	r2, #2
 800a8f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	f003 0303 	and.w	r3, r3, #3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fa7a 	bl	800ae04 <HAL_TIM_IC_CaptureCallback>
 800a910:	e005      	b.n	800a91e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fa6c 	bl	800adf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fa7d 	bl	800ae18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	f003 0304 	and.w	r3, r3, #4
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d122      	bne.n	800a978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d11b      	bne.n	800a978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f06f 0204 	mvn.w	r2, #4
 800a948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2202      	movs	r2, #2
 800a94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa50 	bl	800ae04 <HAL_TIM_IC_CaptureCallback>
 800a964:	e005      	b.n	800a972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fa42 	bl	800adf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fa53 	bl	800ae18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	f003 0308 	and.w	r3, r3, #8
 800a982:	2b08      	cmp	r3, #8
 800a984:	d122      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b08      	cmp	r3, #8
 800a992:	d11b      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f06f 0208 	mvn.w	r2, #8
 800a99c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2204      	movs	r2, #4
 800a9a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa26 	bl	800ae04 <HAL_TIM_IC_CaptureCallback>
 800a9b8:	e005      	b.n	800a9c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fa18 	bl	800adf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fa29 	bl	800ae18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0310 	and.w	r3, r3, #16
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d122      	bne.n	800aa20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f003 0310 	and.w	r3, r3, #16
 800a9e4:	2b10      	cmp	r3, #16
 800a9e6:	d11b      	bne.n	800aa20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0210 	mvn.w	r2, #16
 800a9f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2208      	movs	r2, #8
 800a9f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f9fc 	bl	800ae04 <HAL_TIM_IC_CaptureCallback>
 800aa0c:	e005      	b.n	800aa1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f9ee 	bl	800adf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f9ff 	bl	800ae18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d10e      	bne.n	800aa4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d107      	bne.n	800aa4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f06f 0201 	mvn.w	r2, #1
 800aa44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f8 fbe6 	bl	8003218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa56:	2b80      	cmp	r3, #128	; 0x80
 800aa58:	d10e      	bne.n	800aa78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa64:	2b80      	cmp	r3, #128	; 0x80
 800aa66:	d107      	bne.n	800aa78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fe7c 	bl	800b770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa86:	d10e      	bne.n	800aaa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d107      	bne.n	800aaa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 fe6f 	bl	800b784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab0:	2b40      	cmp	r3, #64	; 0x40
 800aab2:	d10e      	bne.n	800aad2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabe:	2b40      	cmp	r3, #64	; 0x40
 800aac0:	d107      	bne.n	800aad2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f9ad 	bl	800ae2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d10e      	bne.n	800aafe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	f003 0320 	and.w	r3, r3, #32
 800aaea:	2b20      	cmp	r3, #32
 800aaec:	d107      	bne.n	800aafe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f06f 0220 	mvn.w	r2, #32
 800aaf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fe2f 	bl	800b75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab0c:	d10f      	bne.n	800ab2e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab1c:	d107      	bne.n	800ab2e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ab26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fe35 	bl	800b798 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab3c:	d10f      	bne.n	800ab5e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab4c:	d107      	bne.n	800ab5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ab56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fe27 	bl	800b7ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab6c:	d10f      	bne.n	800ab8e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab7c:	d107      	bne.n	800ab8e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ab86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fe19 	bl	800b7c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab9c:	d10f      	bne.n	800abbe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abac:	d107      	bne.n	800abbe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800abb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fe0b 	bl	800b7d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d101      	bne.n	800abe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abe2:	2302      	movs	r3, #2
 800abe4:	e0ff      	b.n	800ade6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b14      	cmp	r3, #20
 800abf2:	f200 80f0 	bhi.w	800add6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800abf6:	a201      	add	r2, pc, #4	; (adr r2, 800abfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfc:	0800ac51 	.word	0x0800ac51
 800ac00:	0800add7 	.word	0x0800add7
 800ac04:	0800add7 	.word	0x0800add7
 800ac08:	0800add7 	.word	0x0800add7
 800ac0c:	0800ac91 	.word	0x0800ac91
 800ac10:	0800add7 	.word	0x0800add7
 800ac14:	0800add7 	.word	0x0800add7
 800ac18:	0800add7 	.word	0x0800add7
 800ac1c:	0800acd3 	.word	0x0800acd3
 800ac20:	0800add7 	.word	0x0800add7
 800ac24:	0800add7 	.word	0x0800add7
 800ac28:	0800add7 	.word	0x0800add7
 800ac2c:	0800ad13 	.word	0x0800ad13
 800ac30:	0800add7 	.word	0x0800add7
 800ac34:	0800add7 	.word	0x0800add7
 800ac38:	0800add7 	.word	0x0800add7
 800ac3c:	0800ad55 	.word	0x0800ad55
 800ac40:	0800add7 	.word	0x0800add7
 800ac44:	0800add7 	.word	0x0800add7
 800ac48:	0800add7 	.word	0x0800add7
 800ac4c:	0800ad95 	.word	0x0800ad95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68b9      	ldr	r1, [r7, #8]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 f99a 	bl	800af90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	699a      	ldr	r2, [r3, #24]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0208 	orr.w	r2, r2, #8
 800ac6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0204 	bic.w	r2, r2, #4
 800ac7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6999      	ldr	r1, [r3, #24]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	691a      	ldr	r2, [r3, #16]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	619a      	str	r2, [r3, #24]
      break;
 800ac8e:	e0a5      	b.n	800addc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68b9      	ldr	r1, [r7, #8]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 fa14 	bl	800b0c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	699a      	ldr	r2, [r3, #24]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	699a      	ldr	r2, [r3, #24]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6999      	ldr	r1, [r3, #24]
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	021a      	lsls	r2, r3, #8
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	430a      	orrs	r2, r1
 800acce:	619a      	str	r2, [r3, #24]
      break;
 800acd0:	e084      	b.n	800addc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68b9      	ldr	r1, [r7, #8]
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fa87 	bl	800b1ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	69da      	ldr	r2, [r3, #28]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f042 0208 	orr.w	r2, r2, #8
 800acec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f022 0204 	bic.w	r2, r2, #4
 800acfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	69d9      	ldr	r1, [r3, #28]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	691a      	ldr	r2, [r3, #16]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	61da      	str	r2, [r3, #28]
      break;
 800ad10:	e064      	b.n	800addc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 faf9 	bl	800b310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	69da      	ldr	r2, [r3, #28]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	69da      	ldr	r2, [r3, #28]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	69d9      	ldr	r1, [r3, #28]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	021a      	lsls	r2, r3, #8
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	61da      	str	r2, [r3, #28]
      break;
 800ad52:	e043      	b.n	800addc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 fb6c 	bl	800b438 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f042 0208 	orr.w	r2, r2, #8
 800ad6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 0204 	bic.w	r2, r2, #4
 800ad7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	691a      	ldr	r2, [r3, #16]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ad92:	e023      	b.n	800addc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68b9      	ldr	r1, [r7, #8]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fbb6 	bl	800b50c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adbe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	021a      	lsls	r2, r3, #8
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800add4:	e002      	b.n	800addc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	75fb      	strb	r3, [r7, #23]
      break;
 800adda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop

0800adf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a46      	ldr	r2, [pc, #280]	; (800af6c <TIM_Base_SetConfig+0x12c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d017      	beq.n	800ae88 <TIM_Base_SetConfig+0x48>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5e:	d013      	beq.n	800ae88 <TIM_Base_SetConfig+0x48>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a43      	ldr	r2, [pc, #268]	; (800af70 <TIM_Base_SetConfig+0x130>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d00f      	beq.n	800ae88 <TIM_Base_SetConfig+0x48>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a42      	ldr	r2, [pc, #264]	; (800af74 <TIM_Base_SetConfig+0x134>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d00b      	beq.n	800ae88 <TIM_Base_SetConfig+0x48>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a41      	ldr	r2, [pc, #260]	; (800af78 <TIM_Base_SetConfig+0x138>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d007      	beq.n	800ae88 <TIM_Base_SetConfig+0x48>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a40      	ldr	r2, [pc, #256]	; (800af7c <TIM_Base_SetConfig+0x13c>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d003      	beq.n	800ae88 <TIM_Base_SetConfig+0x48>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a3f      	ldr	r2, [pc, #252]	; (800af80 <TIM_Base_SetConfig+0x140>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d108      	bne.n	800ae9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a33      	ldr	r2, [pc, #204]	; (800af6c <TIM_Base_SetConfig+0x12c>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d023      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea8:	d01f      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a30      	ldr	r2, [pc, #192]	; (800af70 <TIM_Base_SetConfig+0x130>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d01b      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a2f      	ldr	r2, [pc, #188]	; (800af74 <TIM_Base_SetConfig+0x134>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d017      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a2e      	ldr	r2, [pc, #184]	; (800af78 <TIM_Base_SetConfig+0x138>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d013      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a2d      	ldr	r2, [pc, #180]	; (800af7c <TIM_Base_SetConfig+0x13c>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d00f      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a2d      	ldr	r2, [pc, #180]	; (800af84 <TIM_Base_SetConfig+0x144>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d00b      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a2c      	ldr	r2, [pc, #176]	; (800af88 <TIM_Base_SetConfig+0x148>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d007      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a2b      	ldr	r2, [pc, #172]	; (800af8c <TIM_Base_SetConfig+0x14c>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d003      	beq.n	800aeea <TIM_Base_SetConfig+0xaa>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a26      	ldr	r2, [pc, #152]	; (800af80 <TIM_Base_SetConfig+0x140>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d108      	bne.n	800aefc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	4313      	orrs	r3, r2
 800af08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a12      	ldr	r2, [pc, #72]	; (800af6c <TIM_Base_SetConfig+0x12c>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d013      	beq.n	800af50 <TIM_Base_SetConfig+0x110>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a14      	ldr	r2, [pc, #80]	; (800af7c <TIM_Base_SetConfig+0x13c>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00f      	beq.n	800af50 <TIM_Base_SetConfig+0x110>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a14      	ldr	r2, [pc, #80]	; (800af84 <TIM_Base_SetConfig+0x144>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00b      	beq.n	800af50 <TIM_Base_SetConfig+0x110>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a13      	ldr	r2, [pc, #76]	; (800af88 <TIM_Base_SetConfig+0x148>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d007      	beq.n	800af50 <TIM_Base_SetConfig+0x110>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a12      	ldr	r2, [pc, #72]	; (800af8c <TIM_Base_SetConfig+0x14c>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d003      	beq.n	800af50 <TIM_Base_SetConfig+0x110>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a0d      	ldr	r2, [pc, #52]	; (800af80 <TIM_Base_SetConfig+0x140>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d103      	bne.n	800af58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	615a      	str	r2, [r3, #20]
}
 800af5e:	bf00      	nop
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	40012c00 	.word	0x40012c00
 800af70:	40000400 	.word	0x40000400
 800af74:	40000800 	.word	0x40000800
 800af78:	40000c00 	.word	0x40000c00
 800af7c:	40013400 	.word	0x40013400
 800af80:	40015000 	.word	0x40015000
 800af84:	40014000 	.word	0x40014000
 800af88:	40014400 	.word	0x40014400
 800af8c:	40014800 	.word	0x40014800

0800af90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	f023 0201 	bic.w	r2, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f023 0303 	bic.w	r3, r3, #3
 800afca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f023 0302 	bic.w	r3, r3, #2
 800afdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a30      	ldr	r2, [pc, #192]	; (800b0ac <TIM_OC1_SetConfig+0x11c>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d013      	beq.n	800b018 <TIM_OC1_SetConfig+0x88>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a2f      	ldr	r2, [pc, #188]	; (800b0b0 <TIM_OC1_SetConfig+0x120>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d00f      	beq.n	800b018 <TIM_OC1_SetConfig+0x88>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a2e      	ldr	r2, [pc, #184]	; (800b0b4 <TIM_OC1_SetConfig+0x124>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d00b      	beq.n	800b018 <TIM_OC1_SetConfig+0x88>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a2d      	ldr	r2, [pc, #180]	; (800b0b8 <TIM_OC1_SetConfig+0x128>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d007      	beq.n	800b018 <TIM_OC1_SetConfig+0x88>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a2c      	ldr	r2, [pc, #176]	; (800b0bc <TIM_OC1_SetConfig+0x12c>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d003      	beq.n	800b018 <TIM_OC1_SetConfig+0x88>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a2b      	ldr	r2, [pc, #172]	; (800b0c0 <TIM_OC1_SetConfig+0x130>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d10c      	bne.n	800b032 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	f023 0308 	bic.w	r3, r3, #8
 800b01e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	4313      	orrs	r3, r2
 800b028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f023 0304 	bic.w	r3, r3, #4
 800b030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a1d      	ldr	r2, [pc, #116]	; (800b0ac <TIM_OC1_SetConfig+0x11c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d013      	beq.n	800b062 <TIM_OC1_SetConfig+0xd2>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a1c      	ldr	r2, [pc, #112]	; (800b0b0 <TIM_OC1_SetConfig+0x120>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00f      	beq.n	800b062 <TIM_OC1_SetConfig+0xd2>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a1b      	ldr	r2, [pc, #108]	; (800b0b4 <TIM_OC1_SetConfig+0x124>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d00b      	beq.n	800b062 <TIM_OC1_SetConfig+0xd2>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a1a      	ldr	r2, [pc, #104]	; (800b0b8 <TIM_OC1_SetConfig+0x128>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d007      	beq.n	800b062 <TIM_OC1_SetConfig+0xd2>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a19      	ldr	r2, [pc, #100]	; (800b0bc <TIM_OC1_SetConfig+0x12c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d003      	beq.n	800b062 <TIM_OC1_SetConfig+0xd2>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a18      	ldr	r2, [pc, #96]	; (800b0c0 <TIM_OC1_SetConfig+0x130>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d111      	bne.n	800b086 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4313      	orrs	r3, r2
 800b084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	621a      	str	r2, [r3, #32]
}
 800b0a0:	bf00      	nop
 800b0a2:	371c      	adds	r7, #28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	40012c00 	.word	0x40012c00
 800b0b0:	40013400 	.word	0x40013400
 800b0b4:	40014000 	.word	0x40014000
 800b0b8:	40014400 	.word	0x40014400
 800b0bc:	40014800 	.word	0x40014800
 800b0c0:	40015000 	.word	0x40015000

0800b0c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	f023 0210 	bic.w	r2, r3, #16
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	021b      	lsls	r3, r3, #8
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	f023 0320 	bic.w	r3, r3, #32
 800b112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	011b      	lsls	r3, r3, #4
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a2c      	ldr	r2, [pc, #176]	; (800b1d4 <TIM_OC2_SetConfig+0x110>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d007      	beq.n	800b138 <TIM_OC2_SetConfig+0x74>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a2b      	ldr	r2, [pc, #172]	; (800b1d8 <TIM_OC2_SetConfig+0x114>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d003      	beq.n	800b138 <TIM_OC2_SetConfig+0x74>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a2a      	ldr	r2, [pc, #168]	; (800b1dc <TIM_OC2_SetConfig+0x118>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d10d      	bne.n	800b154 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b13e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	011b      	lsls	r3, r3, #4
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	4313      	orrs	r3, r2
 800b14a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a1f      	ldr	r2, [pc, #124]	; (800b1d4 <TIM_OC2_SetConfig+0x110>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d013      	beq.n	800b184 <TIM_OC2_SetConfig+0xc0>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a1e      	ldr	r2, [pc, #120]	; (800b1d8 <TIM_OC2_SetConfig+0x114>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d00f      	beq.n	800b184 <TIM_OC2_SetConfig+0xc0>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a1e      	ldr	r2, [pc, #120]	; (800b1e0 <TIM_OC2_SetConfig+0x11c>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d00b      	beq.n	800b184 <TIM_OC2_SetConfig+0xc0>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a1d      	ldr	r2, [pc, #116]	; (800b1e4 <TIM_OC2_SetConfig+0x120>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d007      	beq.n	800b184 <TIM_OC2_SetConfig+0xc0>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a1c      	ldr	r2, [pc, #112]	; (800b1e8 <TIM_OC2_SetConfig+0x124>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d003      	beq.n	800b184 <TIM_OC2_SetConfig+0xc0>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a17      	ldr	r2, [pc, #92]	; (800b1dc <TIM_OC2_SetConfig+0x118>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d113      	bne.n	800b1ac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b18a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	621a      	str	r2, [r3, #32]
}
 800b1c6:	bf00      	nop
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	40012c00 	.word	0x40012c00
 800b1d8:	40013400 	.word	0x40013400
 800b1dc:	40015000 	.word	0x40015000
 800b1e0:	40014000 	.word	0x40014000
 800b1e4:	40014400 	.word	0x40014400
 800b1e8:	40014800 	.word	0x40014800

0800b1ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f023 0303 	bic.w	r3, r3, #3
 800b226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	021b      	lsls	r3, r3, #8
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	4313      	orrs	r3, r2
 800b244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a2b      	ldr	r2, [pc, #172]	; (800b2f8 <TIM_OC3_SetConfig+0x10c>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d007      	beq.n	800b25e <TIM_OC3_SetConfig+0x72>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a2a      	ldr	r2, [pc, #168]	; (800b2fc <TIM_OC3_SetConfig+0x110>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d003      	beq.n	800b25e <TIM_OC3_SetConfig+0x72>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a29      	ldr	r2, [pc, #164]	; (800b300 <TIM_OC3_SetConfig+0x114>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d10d      	bne.n	800b27a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	021b      	lsls	r3, r3, #8
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	4313      	orrs	r3, r2
 800b270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a1e      	ldr	r2, [pc, #120]	; (800b2f8 <TIM_OC3_SetConfig+0x10c>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d013      	beq.n	800b2aa <TIM_OC3_SetConfig+0xbe>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a1d      	ldr	r2, [pc, #116]	; (800b2fc <TIM_OC3_SetConfig+0x110>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d00f      	beq.n	800b2aa <TIM_OC3_SetConfig+0xbe>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a1d      	ldr	r2, [pc, #116]	; (800b304 <TIM_OC3_SetConfig+0x118>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d00b      	beq.n	800b2aa <TIM_OC3_SetConfig+0xbe>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a1c      	ldr	r2, [pc, #112]	; (800b308 <TIM_OC3_SetConfig+0x11c>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d007      	beq.n	800b2aa <TIM_OC3_SetConfig+0xbe>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a1b      	ldr	r2, [pc, #108]	; (800b30c <TIM_OC3_SetConfig+0x120>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d003      	beq.n	800b2aa <TIM_OC3_SetConfig+0xbe>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a16      	ldr	r2, [pc, #88]	; (800b300 <TIM_OC3_SetConfig+0x114>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d113      	bne.n	800b2d2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	011b      	lsls	r3, r3, #4
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	621a      	str	r2, [r3, #32]
}
 800b2ec:	bf00      	nop
 800b2ee:	371c      	adds	r7, #28
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	40012c00 	.word	0x40012c00
 800b2fc:	40013400 	.word	0x40013400
 800b300:	40015000 	.word	0x40015000
 800b304:	40014000 	.word	0x40014000
 800b308:	40014400 	.word	0x40014400
 800b30c:	40014800 	.word	0x40014800

0800b310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b33e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b34a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4313      	orrs	r3, r2
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b35e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	031b      	lsls	r3, r3, #12
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	4313      	orrs	r3, r2
 800b36a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a2c      	ldr	r2, [pc, #176]	; (800b420 <TIM_OC4_SetConfig+0x110>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d007      	beq.n	800b384 <TIM_OC4_SetConfig+0x74>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a2b      	ldr	r2, [pc, #172]	; (800b424 <TIM_OC4_SetConfig+0x114>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d003      	beq.n	800b384 <TIM_OC4_SetConfig+0x74>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a2a      	ldr	r2, [pc, #168]	; (800b428 <TIM_OC4_SetConfig+0x118>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d10d      	bne.n	800b3a0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	031b      	lsls	r3, r3, #12
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b39e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a1f      	ldr	r2, [pc, #124]	; (800b420 <TIM_OC4_SetConfig+0x110>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d013      	beq.n	800b3d0 <TIM_OC4_SetConfig+0xc0>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a1e      	ldr	r2, [pc, #120]	; (800b424 <TIM_OC4_SetConfig+0x114>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d00f      	beq.n	800b3d0 <TIM_OC4_SetConfig+0xc0>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a1e      	ldr	r2, [pc, #120]	; (800b42c <TIM_OC4_SetConfig+0x11c>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d00b      	beq.n	800b3d0 <TIM_OC4_SetConfig+0xc0>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a1d      	ldr	r2, [pc, #116]	; (800b430 <TIM_OC4_SetConfig+0x120>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d007      	beq.n	800b3d0 <TIM_OC4_SetConfig+0xc0>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a1c      	ldr	r2, [pc, #112]	; (800b434 <TIM_OC4_SetConfig+0x124>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d003      	beq.n	800b3d0 <TIM_OC4_SetConfig+0xc0>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a17      	ldr	r2, [pc, #92]	; (800b428 <TIM_OC4_SetConfig+0x118>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d113      	bne.n	800b3f8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	019b      	lsls	r3, r3, #6
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	019b      	lsls	r3, r3, #6
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	621a      	str	r2, [r3, #32]
}
 800b412:	bf00      	nop
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	40012c00 	.word	0x40012c00
 800b424:	40013400 	.word	0x40013400
 800b428:	40015000 	.word	0x40015000
 800b42c:	40014000 	.word	0x40014000
 800b430:	40014400 	.word	0x40014400
 800b434:	40014800 	.word	0x40014800

0800b438 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b438:	b480      	push	{r7}
 800b43a:	b087      	sub	sp, #28
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	4313      	orrs	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b47c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	041b      	lsls	r3, r3, #16
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a19      	ldr	r2, [pc, #100]	; (800b4f4 <TIM_OC5_SetConfig+0xbc>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d013      	beq.n	800b4ba <TIM_OC5_SetConfig+0x82>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a18      	ldr	r2, [pc, #96]	; (800b4f8 <TIM_OC5_SetConfig+0xc0>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d00f      	beq.n	800b4ba <TIM_OC5_SetConfig+0x82>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a17      	ldr	r2, [pc, #92]	; (800b4fc <TIM_OC5_SetConfig+0xc4>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d00b      	beq.n	800b4ba <TIM_OC5_SetConfig+0x82>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a16      	ldr	r2, [pc, #88]	; (800b500 <TIM_OC5_SetConfig+0xc8>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d007      	beq.n	800b4ba <TIM_OC5_SetConfig+0x82>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a15      	ldr	r2, [pc, #84]	; (800b504 <TIM_OC5_SetConfig+0xcc>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d003      	beq.n	800b4ba <TIM_OC5_SetConfig+0x82>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a14      	ldr	r2, [pc, #80]	; (800b508 <TIM_OC5_SetConfig+0xd0>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d109      	bne.n	800b4ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	693a      	ldr	r2, [r7, #16]
 800b4e6:	621a      	str	r2, [r3, #32]
}
 800b4e8:	bf00      	nop
 800b4ea:	371c      	adds	r7, #28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	40012c00 	.word	0x40012c00
 800b4f8:	40013400 	.word	0x40013400
 800b4fc:	40014000 	.word	0x40014000
 800b500:	40014400 	.word	0x40014400
 800b504:	40014800 	.word	0x40014800
 800b508:	40015000 	.word	0x40015000

0800b50c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b53e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	021b      	lsls	r3, r3, #8
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	051b      	lsls	r3, r3, #20
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a1a      	ldr	r2, [pc, #104]	; (800b5cc <TIM_OC6_SetConfig+0xc0>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d013      	beq.n	800b590 <TIM_OC6_SetConfig+0x84>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a19      	ldr	r2, [pc, #100]	; (800b5d0 <TIM_OC6_SetConfig+0xc4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d00f      	beq.n	800b590 <TIM_OC6_SetConfig+0x84>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a18      	ldr	r2, [pc, #96]	; (800b5d4 <TIM_OC6_SetConfig+0xc8>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d00b      	beq.n	800b590 <TIM_OC6_SetConfig+0x84>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a17      	ldr	r2, [pc, #92]	; (800b5d8 <TIM_OC6_SetConfig+0xcc>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d007      	beq.n	800b590 <TIM_OC6_SetConfig+0x84>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a16      	ldr	r2, [pc, #88]	; (800b5dc <TIM_OC6_SetConfig+0xd0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d003      	beq.n	800b590 <TIM_OC6_SetConfig+0x84>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a15      	ldr	r2, [pc, #84]	; (800b5e0 <TIM_OC6_SetConfig+0xd4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d109      	bne.n	800b5a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b596:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	695b      	ldr	r3, [r3, #20]
 800b59c:	029b      	lsls	r3, r3, #10
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	621a      	str	r2, [r3, #32]
}
 800b5be:	bf00      	nop
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	40012c00 	.word	0x40012c00
 800b5d0:	40013400 	.word	0x40013400
 800b5d4:	40014000 	.word	0x40014000
 800b5d8:	40014400 	.word	0x40014400
 800b5dc:	40014800 	.word	0x40014800
 800b5e0:	40015000 	.word	0x40015000

0800b5e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f003 031f 	and.w	r3, r3, #31
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6a1a      	ldr	r2, [r3, #32]
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	43db      	mvns	r3, r3
 800b606:	401a      	ands	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f003 031f 	and.w	r3, r3, #31
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	fa01 f303 	lsl.w	r3, r1, r3
 800b61c:	431a      	orrs	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	621a      	str	r2, [r3, #32]
}
 800b622:	bf00      	nop
 800b624:	371c      	adds	r7, #28
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b640:	2b01      	cmp	r3, #1
 800b642:	d101      	bne.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b644:	2302      	movs	r3, #2
 800b646:	e074      	b.n	800b732 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a34      	ldr	r2, [pc, #208]	; (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d009      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a33      	ldr	r2, [pc, #204]	; (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d004      	beq.n	800b686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a31      	ldr	r2, [pc, #196]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d108      	bne.n	800b698 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b68c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4313      	orrs	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b69e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a21      	ldr	r2, [pc, #132]	; (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d022      	beq.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c8:	d01d      	beq.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a1f      	ldr	r2, [pc, #124]	; (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d018      	beq.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a1d      	ldr	r2, [pc, #116]	; (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d013      	beq.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a1c      	ldr	r2, [pc, #112]	; (800b754 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d00e      	beq.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a15      	ldr	r2, [pc, #84]	; (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d009      	beq.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a18      	ldr	r2, [pc, #96]	; (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d004      	beq.n	800b706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a11      	ldr	r2, [pc, #68]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d10c      	bne.n	800b720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b70c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	4313      	orrs	r3, r2
 800b716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	40012c00 	.word	0x40012c00
 800b744:	40013400 	.word	0x40013400
 800b748:	40015000 	.word	0x40015000
 800b74c:	40000400 	.word	0x40000400
 800b750:	40000800 	.word	0x40000800
 800b754:	40000c00 	.word	0x40000c00
 800b758:	40014000 	.word	0x40014000

0800b75c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b778:	bf00      	nop
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b78c:	bf00      	nop
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e042      	b.n	800b880 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7f9 ff99 	bl	8005744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2224      	movs	r2, #36	; 0x24
 800b816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0201 	bic.w	r2, r2, #1
 800b828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fc5a 	bl	800c0e4 <UART_SetConfig>
 800b830:	4603      	mov	r3, r0
 800b832:	2b01      	cmp	r3, #1
 800b834:	d101      	bne.n	800b83a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e022      	b.n	800b880 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d002      	beq.n	800b848 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 ff4a 	bl	800c6dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	689a      	ldr	r2, [r3, #8]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 ffd1 	bl	800c820 <UART_CheckIdleState>
 800b87e:	4603      	mov	r3, r0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08a      	sub	sp, #40	; 0x28
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	4613      	mov	r3, r2
 800b896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	f040 8083 	bne.w	800b9aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <HAL_UART_Transmit+0x28>
 800b8aa:	88fb      	ldrh	r3, [r7, #6]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e07b      	b.n	800b9ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d101      	bne.n	800b8c2 <HAL_UART_Transmit+0x3a>
 800b8be:	2302      	movs	r3, #2
 800b8c0:	e074      	b.n	800b9ac <HAL_UART_Transmit+0x124>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2221      	movs	r2, #33	; 0x21
 800b8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8da:	f7f7 fb05 	bl	8002ee8 <HAL_GetTick>
 800b8de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	88fa      	ldrh	r2, [r7, #6]
 800b8e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	88fa      	ldrh	r2, [r7, #6]
 800b8ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8f8:	d108      	bne.n	800b90c <HAL_UART_Transmit+0x84>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d104      	bne.n	800b90c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	61bb      	str	r3, [r7, #24]
 800b90a:	e003      	b.n	800b914 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b91c:	e02c      	b.n	800b978 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2200      	movs	r2, #0
 800b926:	2180      	movs	r1, #128	; 0x80
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 ffc4 	bl	800c8b6 <UART_WaitOnFlagUntilTimeout>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	e039      	b.n	800b9ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10b      	bne.n	800b956 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b94c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	3302      	adds	r3, #2
 800b952:	61bb      	str	r3, [r7, #24]
 800b954:	e007      	b.n	800b966 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	3301      	adds	r3, #1
 800b964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	3b01      	subs	r3, #1
 800b970:	b29a      	uxth	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b97e:	b29b      	uxth	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1cc      	bne.n	800b91e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2200      	movs	r2, #0
 800b98c:	2140      	movs	r1, #64	; 0x40
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f000 ff91 	bl	800c8b6 <UART_WaitOnFlagUntilTimeout>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e006      	b.n	800b9ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e000      	b.n	800b9ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b9aa:	2302      	movs	r3, #2
  }
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08a      	sub	sp, #40	; 0x28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c8:	2b20      	cmp	r3, #32
 800b9ca:	d142      	bne.n	800ba52 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <HAL_UART_Receive_DMA+0x24>
 800b9d2:	88fb      	ldrh	r3, [r7, #6]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e03b      	b.n	800ba54 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d101      	bne.n	800b9ea <HAL_UART_Receive_DMA+0x36>
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	e034      	b.n	800ba54 <HAL_UART_Receive_DMA+0xa0>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a17      	ldr	r2, [pc, #92]	; (800ba5c <HAL_UART_Receive_DMA+0xa8>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d01f      	beq.n	800ba42 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d018      	beq.n	800ba42 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba24:	627b      	str	r3, [r7, #36]	; 0x24
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	623b      	str	r3, [r7, #32]
 800ba30:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	69f9      	ldr	r1, [r7, #28]
 800ba34:	6a3a      	ldr	r2, [r7, #32]
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e6      	bne.n	800ba10 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ba42:	88fb      	ldrh	r3, [r7, #6]
 800ba44:	461a      	mov	r2, r3
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 fffd 	bl	800ca48 <UART_Start_Receive_DMA>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	e000      	b.n	800ba54 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ba52:	2302      	movs	r3, #2
  }
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3728      	adds	r7, #40	; 0x28
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	40008000 	.word	0x40008000

0800ba60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b0ba      	sub	sp, #232	; 0xe8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	69db      	ldr	r3, [r3, #28]
 800ba6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ba8a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba8e:	4013      	ands	r3, r2
 800ba90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ba94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d11b      	bne.n	800bad4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa0:	f003 0320 	and.w	r3, r3, #32
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d015      	beq.n	800bad4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800baa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baac:	f003 0320 	and.w	r3, r3, #32
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d105      	bne.n	800bac0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 82d6 	beq.w	800c076 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	4798      	blx	r3
      }
      return;
 800bad2:	e2d0      	b.n	800c076 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 811f 	beq.w	800bd1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bade:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bae2:	4b8b      	ldr	r3, [pc, #556]	; (800bd10 <HAL_UART_IRQHandler+0x2b0>)
 800bae4:	4013      	ands	r3, r2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d106      	bne.n	800baf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800baea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800baee:	4b89      	ldr	r3, [pc, #548]	; (800bd14 <HAL_UART_IRQHandler+0x2b4>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f000 8112 	beq.w	800bd1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800baf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d011      	beq.n	800bb28 <HAL_UART_IRQHandler+0xc8>
 800bb04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2201      	movs	r2, #1
 800bb16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb1e:	f043 0201 	orr.w	r2, r3, #1
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb2c:	f003 0302 	and.w	r3, r3, #2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d011      	beq.n	800bb58 <HAL_UART_IRQHandler+0xf8>
 800bb34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00b      	beq.n	800bb58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2202      	movs	r2, #2
 800bb46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb4e:	f043 0204 	orr.w	r2, r3, #4
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d011      	beq.n	800bb88 <HAL_UART_IRQHandler+0x128>
 800bb64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2204      	movs	r2, #4
 800bb76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb7e:	f043 0202 	orr.w	r2, r3, #2
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb8c:	f003 0308 	and.w	r3, r3, #8
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d017      	beq.n	800bbc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bba0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bba4:	4b5a      	ldr	r3, [pc, #360]	; (800bd10 <HAL_UART_IRQHandler+0x2b0>)
 800bba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbba:	f043 0208 	orr.w	r2, r3, #8
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bbc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d012      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x196>
 800bbd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00c      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbec:	f043 0220 	orr.w	r2, r3, #32
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 823c 	beq.w	800c07a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc06:	f003 0320 	and.w	r3, r3, #32
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d013      	beq.n	800bc36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc12:	f003 0320 	and.w	r3, r3, #32
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d105      	bne.n	800bc26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	d005      	beq.n	800bc5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d04f      	beq.n	800bcfa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 ffdd 	bl	800cc1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6a:	2b40      	cmp	r3, #64	; 0x40
 800bc6c:	d141      	bne.n	800bcf2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3308      	adds	r3, #8
 800bc74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc7c:	e853 3f00 	ldrex	r3, [r3]
 800bc80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3308      	adds	r3, #8
 800bc96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bc9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bcaa:	e841 2300 	strex	r3, r2, [r1]
 800bcae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1d9      	bne.n	800bc6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d013      	beq.n	800bcea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc6:	4a14      	ldr	r2, [pc, #80]	; (800bd18 <HAL_UART_IRQHandler+0x2b8>)
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fb fd52 	bl	8007778 <HAL_DMA_Abort_IT>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d017      	beq.n	800bd0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bce4:	4610      	mov	r0, r2
 800bce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bce8:	e00f      	b.n	800bd0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f9e4 	bl	800c0b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf0:	e00b      	b.n	800bd0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 f9e0 	bl	800c0b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf8:	e007      	b.n	800bd0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f9dc 	bl	800c0b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bd08:	e1b7      	b.n	800c07a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd0a:	bf00      	nop
    return;
 800bd0c:	e1b5      	b.n	800c07a <HAL_UART_IRQHandler+0x61a>
 800bd0e:	bf00      	nop
 800bd10:	10000001 	.word	0x10000001
 800bd14:	04000120 	.word	0x04000120
 800bd18:	0800cec5 	.word	0x0800cec5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	f040 814a 	bne.w	800bfba <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd2a:	f003 0310 	and.w	r3, r3, #16
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f000 8143 	beq.w	800bfba <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd38:	f003 0310 	and.w	r3, r3, #16
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 813c 	beq.w	800bfba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2210      	movs	r2, #16
 800bd48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd54:	2b40      	cmp	r3, #64	; 0x40
 800bd56:	f040 80b5 	bne.w	800bec4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 8187 	beq.w	800c07e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	f080 817f 	bcs.w	800c07e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 0320 	and.w	r3, r3, #32
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 8086 	bne.w	800bea8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bda8:	e853 3f00 	ldrex	r3, [r3]
 800bdac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bdb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bdb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bdd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bdde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1da      	bne.n	800bd9c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3308      	adds	r3, #8
 800bdec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdf0:	e853 3f00 	ldrex	r3, [r3]
 800bdf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bdf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdf8:	f023 0301 	bic.w	r3, r3, #1
 800bdfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3308      	adds	r3, #8
 800be06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be16:	e841 2300 	strex	r3, r2, [r1]
 800be1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1e1      	bne.n	800bde6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3308      	adds	r3, #8
 800be28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be2c:	e853 3f00 	ldrex	r3, [r3]
 800be30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3308      	adds	r3, #8
 800be42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be46:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be4e:	e841 2300 	strex	r3, r2, [r1]
 800be52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1e3      	bne.n	800be22 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2220      	movs	r2, #32
 800be5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be70:	e853 3f00 	ldrex	r3, [r3]
 800be74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be78:	f023 0310 	bic.w	r3, r3, #16
 800be7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	461a      	mov	r2, r3
 800be86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be92:	e841 2300 	strex	r3, r2, [r1]
 800be96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1e4      	bne.n	800be68 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fb fc0f 	bl	80076c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	b29b      	uxth	r3, r3
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f905 	bl	800c0cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bec2:	e0dc      	b.n	800c07e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 80ce 	beq.w	800c082 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 80c9 	beq.w	800c082 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	e853 3f00 	ldrex	r3, [r3]
 800befc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800befe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf12:	647b      	str	r3, [r7, #68]	; 0x44
 800bf14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1e4      	bne.n	800bef0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	623b      	str	r3, [r7, #32]
   return(result);
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf3c:	f023 0301 	bic.w	r3, r3, #1
 800bf40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf4e:	633a      	str	r2, [r7, #48]	; 0x30
 800bf50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf56:	e841 2300 	strex	r3, r2, [r1]
 800bf5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1e1      	bne.n	800bf26 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2220      	movs	r2, #32
 800bf66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f023 0310 	bic.w	r3, r3, #16
 800bf8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf98:	61fb      	str	r3, [r7, #28]
 800bf9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	69b9      	ldr	r1, [r7, #24]
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	617b      	str	r3, [r7, #20]
   return(result);
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e4      	bne.n	800bf76 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f88a 	bl	800c0cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bfb8:	e063      	b.n	800c082 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00e      	beq.n	800bfe4 <HAL_UART_IRQHandler+0x584>
 800bfc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d008      	beq.n	800bfe4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bfda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 ffb2 	bl	800cf46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfe2:	e051      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bfe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d014      	beq.n	800c01a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d105      	bne.n	800c008 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c004:	2b00      	cmp	r3, #0
 800c006:	d008      	beq.n	800c01a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d03a      	beq.n	800c086 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
    }
    return;
 800c018:	e035      	b.n	800c086 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c022:	2b00      	cmp	r3, #0
 800c024:	d009      	beq.n	800c03a <HAL_UART_IRQHandler+0x5da>
 800c026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 ff5c 	bl	800cef0 <UART_EndTransmit_IT>
    return;
 800c038:	e026      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c03e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c042:	2b00      	cmp	r3, #0
 800c044:	d009      	beq.n	800c05a <HAL_UART_IRQHandler+0x5fa>
 800c046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c04a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 ff8b 	bl	800cf6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c058:	e016      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c05e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d010      	beq.n	800c088 <HAL_UART_IRQHandler+0x628>
 800c066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da0c      	bge.n	800c088 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 ff73 	bl	800cf5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c074:	e008      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
      return;
 800c076:	bf00      	nop
 800c078:	e006      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
    return;
 800c07a:	bf00      	nop
 800c07c:	e004      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
      return;
 800c07e:	bf00      	nop
 800c080:	e002      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
      return;
 800c082:	bf00      	nop
 800c084:	e000      	b.n	800c088 <HAL_UART_IRQHandler+0x628>
    return;
 800c086:	bf00      	nop
  }
}
 800c088:	37e8      	adds	r7, #232	; 0xe8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop

0800c090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0e8:	b08c      	sub	sp, #48	; 0x30
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	689a      	ldr	r2, [r3, #8]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	431a      	orrs	r2, r3
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	431a      	orrs	r2, r3
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	4313      	orrs	r3, r2
 800c10a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	4baa      	ldr	r3, [pc, #680]	; (800c3bc <UART_SetConfig+0x2d8>)
 800c114:	4013      	ands	r3, r2
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c11c:	430b      	orrs	r3, r1
 800c11e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	68da      	ldr	r2, [r3, #12]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	430a      	orrs	r2, r1
 800c134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a9f      	ldr	r2, [pc, #636]	; (800c3c0 <UART_SetConfig+0x2dc>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d004      	beq.n	800c150 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c14c:	4313      	orrs	r3, r2
 800c14e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c15a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	6812      	ldr	r2, [r2, #0]
 800c162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c164:	430b      	orrs	r3, r1
 800c166:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16e:	f023 010f 	bic.w	r1, r3, #15
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	430a      	orrs	r2, r1
 800c17c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a90      	ldr	r2, [pc, #576]	; (800c3c4 <UART_SetConfig+0x2e0>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d125      	bne.n	800c1d4 <UART_SetConfig+0xf0>
 800c188:	4b8f      	ldr	r3, [pc, #572]	; (800c3c8 <UART_SetConfig+0x2e4>)
 800c18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c18e:	f003 0303 	and.w	r3, r3, #3
 800c192:	2b03      	cmp	r3, #3
 800c194:	d81a      	bhi.n	800c1cc <UART_SetConfig+0xe8>
 800c196:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <UART_SetConfig+0xb8>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c1ad 	.word	0x0800c1ad
 800c1a0:	0800c1bd 	.word	0x0800c1bd
 800c1a4:	0800c1b5 	.word	0x0800c1b5
 800c1a8:	0800c1c5 	.word	0x0800c1c5
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1b2:	e116      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ba:	e112      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c1bc:	2304      	movs	r3, #4
 800c1be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1c2:	e10e      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c1c4:	2308      	movs	r3, #8
 800c1c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ca:	e10a      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c1cc:	2310      	movs	r3, #16
 800c1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1d2:	e106      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a7c      	ldr	r2, [pc, #496]	; (800c3cc <UART_SetConfig+0x2e8>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d138      	bne.n	800c250 <UART_SetConfig+0x16c>
 800c1de:	4b7a      	ldr	r3, [pc, #488]	; (800c3c8 <UART_SetConfig+0x2e4>)
 800c1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e4:	f003 030c 	and.w	r3, r3, #12
 800c1e8:	2b0c      	cmp	r3, #12
 800c1ea:	d82d      	bhi.n	800c248 <UART_SetConfig+0x164>
 800c1ec:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <UART_SetConfig+0x110>)
 800c1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f2:	bf00      	nop
 800c1f4:	0800c229 	.word	0x0800c229
 800c1f8:	0800c249 	.word	0x0800c249
 800c1fc:	0800c249 	.word	0x0800c249
 800c200:	0800c249 	.word	0x0800c249
 800c204:	0800c239 	.word	0x0800c239
 800c208:	0800c249 	.word	0x0800c249
 800c20c:	0800c249 	.word	0x0800c249
 800c210:	0800c249 	.word	0x0800c249
 800c214:	0800c231 	.word	0x0800c231
 800c218:	0800c249 	.word	0x0800c249
 800c21c:	0800c249 	.word	0x0800c249
 800c220:	0800c249 	.word	0x0800c249
 800c224:	0800c241 	.word	0x0800c241
 800c228:	2300      	movs	r3, #0
 800c22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c22e:	e0d8      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c230:	2302      	movs	r3, #2
 800c232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c236:	e0d4      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c238:	2304      	movs	r3, #4
 800c23a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c23e:	e0d0      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c240:	2308      	movs	r3, #8
 800c242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c246:	e0cc      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c248:	2310      	movs	r3, #16
 800c24a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c24e:	e0c8      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a5e      	ldr	r2, [pc, #376]	; (800c3d0 <UART_SetConfig+0x2ec>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d125      	bne.n	800c2a6 <UART_SetConfig+0x1c2>
 800c25a:	4b5b      	ldr	r3, [pc, #364]	; (800c3c8 <UART_SetConfig+0x2e4>)
 800c25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c260:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c264:	2b30      	cmp	r3, #48	; 0x30
 800c266:	d016      	beq.n	800c296 <UART_SetConfig+0x1b2>
 800c268:	2b30      	cmp	r3, #48	; 0x30
 800c26a:	d818      	bhi.n	800c29e <UART_SetConfig+0x1ba>
 800c26c:	2b20      	cmp	r3, #32
 800c26e:	d00a      	beq.n	800c286 <UART_SetConfig+0x1a2>
 800c270:	2b20      	cmp	r3, #32
 800c272:	d814      	bhi.n	800c29e <UART_SetConfig+0x1ba>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <UART_SetConfig+0x19a>
 800c278:	2b10      	cmp	r3, #16
 800c27a:	d008      	beq.n	800c28e <UART_SetConfig+0x1aa>
 800c27c:	e00f      	b.n	800c29e <UART_SetConfig+0x1ba>
 800c27e:	2300      	movs	r3, #0
 800c280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c284:	e0ad      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c286:	2302      	movs	r3, #2
 800c288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c28c:	e0a9      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c28e:	2304      	movs	r3, #4
 800c290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c294:	e0a5      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c296:	2308      	movs	r3, #8
 800c298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c29c:	e0a1      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c29e:	2310      	movs	r3, #16
 800c2a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2a4:	e09d      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a4a      	ldr	r2, [pc, #296]	; (800c3d4 <UART_SetConfig+0x2f0>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d125      	bne.n	800c2fc <UART_SetConfig+0x218>
 800c2b0:	4b45      	ldr	r3, [pc, #276]	; (800c3c8 <UART_SetConfig+0x2e4>)
 800c2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c2ba:	2bc0      	cmp	r3, #192	; 0xc0
 800c2bc:	d016      	beq.n	800c2ec <UART_SetConfig+0x208>
 800c2be:	2bc0      	cmp	r3, #192	; 0xc0
 800c2c0:	d818      	bhi.n	800c2f4 <UART_SetConfig+0x210>
 800c2c2:	2b80      	cmp	r3, #128	; 0x80
 800c2c4:	d00a      	beq.n	800c2dc <UART_SetConfig+0x1f8>
 800c2c6:	2b80      	cmp	r3, #128	; 0x80
 800c2c8:	d814      	bhi.n	800c2f4 <UART_SetConfig+0x210>
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d002      	beq.n	800c2d4 <UART_SetConfig+0x1f0>
 800c2ce:	2b40      	cmp	r3, #64	; 0x40
 800c2d0:	d008      	beq.n	800c2e4 <UART_SetConfig+0x200>
 800c2d2:	e00f      	b.n	800c2f4 <UART_SetConfig+0x210>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2da:	e082      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c2dc:	2302      	movs	r3, #2
 800c2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2e2:	e07e      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c2e4:	2304      	movs	r3, #4
 800c2e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2ea:	e07a      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2f2:	e076      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c2f4:	2310      	movs	r3, #16
 800c2f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2fa:	e072      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a35      	ldr	r2, [pc, #212]	; (800c3d8 <UART_SetConfig+0x2f4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d12a      	bne.n	800c35c <UART_SetConfig+0x278>
 800c306:	4b30      	ldr	r3, [pc, #192]	; (800c3c8 <UART_SetConfig+0x2e4>)
 800c308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c30c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c314:	d01a      	beq.n	800c34c <UART_SetConfig+0x268>
 800c316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c31a:	d81b      	bhi.n	800c354 <UART_SetConfig+0x270>
 800c31c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c320:	d00c      	beq.n	800c33c <UART_SetConfig+0x258>
 800c322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c326:	d815      	bhi.n	800c354 <UART_SetConfig+0x270>
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d003      	beq.n	800c334 <UART_SetConfig+0x250>
 800c32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c330:	d008      	beq.n	800c344 <UART_SetConfig+0x260>
 800c332:	e00f      	b.n	800c354 <UART_SetConfig+0x270>
 800c334:	2300      	movs	r3, #0
 800c336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c33a:	e052      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c33c:	2302      	movs	r3, #2
 800c33e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c342:	e04e      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c344:	2304      	movs	r3, #4
 800c346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c34a:	e04a      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c34c:	2308      	movs	r3, #8
 800c34e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c352:	e046      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c354:	2310      	movs	r3, #16
 800c356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c35a:	e042      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a17      	ldr	r2, [pc, #92]	; (800c3c0 <UART_SetConfig+0x2dc>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d13a      	bne.n	800c3dc <UART_SetConfig+0x2f8>
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <UART_SetConfig+0x2e4>)
 800c368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c36c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c374:	d01a      	beq.n	800c3ac <UART_SetConfig+0x2c8>
 800c376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c37a:	d81b      	bhi.n	800c3b4 <UART_SetConfig+0x2d0>
 800c37c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c380:	d00c      	beq.n	800c39c <UART_SetConfig+0x2b8>
 800c382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c386:	d815      	bhi.n	800c3b4 <UART_SetConfig+0x2d0>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d003      	beq.n	800c394 <UART_SetConfig+0x2b0>
 800c38c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c390:	d008      	beq.n	800c3a4 <UART_SetConfig+0x2c0>
 800c392:	e00f      	b.n	800c3b4 <UART_SetConfig+0x2d0>
 800c394:	2300      	movs	r3, #0
 800c396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c39a:	e022      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c39c:	2302      	movs	r3, #2
 800c39e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3a2:	e01e      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3aa:	e01a      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c3ac:	2308      	movs	r3, #8
 800c3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3b2:	e016      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3ba:	e012      	b.n	800c3e2 <UART_SetConfig+0x2fe>
 800c3bc:	cfff69f3 	.word	0xcfff69f3
 800c3c0:	40008000 	.word	0x40008000
 800c3c4:	40013800 	.word	0x40013800
 800c3c8:	40021000 	.word	0x40021000
 800c3cc:	40004400 	.word	0x40004400
 800c3d0:	40004800 	.word	0x40004800
 800c3d4:	40004c00 	.word	0x40004c00
 800c3d8:	40005000 	.word	0x40005000
 800c3dc:	2310      	movs	r3, #16
 800c3de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4aae      	ldr	r2, [pc, #696]	; (800c6a0 <UART_SetConfig+0x5bc>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	f040 8097 	bne.w	800c51c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3f2:	2b08      	cmp	r3, #8
 800c3f4:	d823      	bhi.n	800c43e <UART_SetConfig+0x35a>
 800c3f6:	a201      	add	r2, pc, #4	; (adr r2, 800c3fc <UART_SetConfig+0x318>)
 800c3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fc:	0800c421 	.word	0x0800c421
 800c400:	0800c43f 	.word	0x0800c43f
 800c404:	0800c429 	.word	0x0800c429
 800c408:	0800c43f 	.word	0x0800c43f
 800c40c:	0800c42f 	.word	0x0800c42f
 800c410:	0800c43f 	.word	0x0800c43f
 800c414:	0800c43f 	.word	0x0800c43f
 800c418:	0800c43f 	.word	0x0800c43f
 800c41c:	0800c437 	.word	0x0800c437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c420:	f7fd f936 	bl	8009690 <HAL_RCC_GetPCLK1Freq>
 800c424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c426:	e010      	b.n	800c44a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c428:	4b9e      	ldr	r3, [pc, #632]	; (800c6a4 <UART_SetConfig+0x5c0>)
 800c42a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c42c:	e00d      	b.n	800c44a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c42e:	f7fd f8c1 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800c432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c434:	e009      	b.n	800c44a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c43a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c43c:	e005      	b.n	800c44a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 8130 	beq.w	800c6b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c456:	4a94      	ldr	r2, [pc, #592]	; (800c6a8 <UART_SetConfig+0x5c4>)
 800c458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c45c:	461a      	mov	r2, r3
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	fbb3 f3f2 	udiv	r3, r3, r2
 800c464:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	4613      	mov	r3, r2
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	4413      	add	r3, r2
 800c470:	69ba      	ldr	r2, [r7, #24]
 800c472:	429a      	cmp	r2, r3
 800c474:	d305      	bcc.n	800c482 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d903      	bls.n	800c48a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c488:	e113      	b.n	800c6b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	2200      	movs	r2, #0
 800c48e:	60bb      	str	r3, [r7, #8]
 800c490:	60fa      	str	r2, [r7, #12]
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	4a84      	ldr	r2, [pc, #528]	; (800c6a8 <UART_SetConfig+0x5c4>)
 800c498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	2200      	movs	r2, #0
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	607a      	str	r2, [r7, #4]
 800c4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4ac:	f7f4 fc14 	bl	8000cd8 <__aeabi_uldivmod>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	f04f 0200 	mov.w	r2, #0
 800c4bc:	f04f 0300 	mov.w	r3, #0
 800c4c0:	020b      	lsls	r3, r1, #8
 800c4c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4c6:	0202      	lsls	r2, r0, #8
 800c4c8:	6979      	ldr	r1, [r7, #20]
 800c4ca:	6849      	ldr	r1, [r1, #4]
 800c4cc:	0849      	lsrs	r1, r1, #1
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	eb12 0804 	adds.w	r8, r2, r4
 800c4d8:	eb43 0905 	adc.w	r9, r3, r5
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	469a      	mov	sl, r3
 800c4e4:	4693      	mov	fp, r2
 800c4e6:	4652      	mov	r2, sl
 800c4e8:	465b      	mov	r3, fp
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	f7f4 fbf3 	bl	8000cd8 <__aeabi_uldivmod>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c500:	d308      	bcc.n	800c514 <UART_SetConfig+0x430>
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c508:	d204      	bcs.n	800c514 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6a3a      	ldr	r2, [r7, #32]
 800c510:	60da      	str	r2, [r3, #12]
 800c512:	e0ce      	b.n	800c6b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c51a:	e0ca      	b.n	800c6b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c524:	d166      	bne.n	800c5f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c526:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c52a:	2b08      	cmp	r3, #8
 800c52c:	d827      	bhi.n	800c57e <UART_SetConfig+0x49a>
 800c52e:	a201      	add	r2, pc, #4	; (adr r2, 800c534 <UART_SetConfig+0x450>)
 800c530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c534:	0800c559 	.word	0x0800c559
 800c538:	0800c561 	.word	0x0800c561
 800c53c:	0800c569 	.word	0x0800c569
 800c540:	0800c57f 	.word	0x0800c57f
 800c544:	0800c56f 	.word	0x0800c56f
 800c548:	0800c57f 	.word	0x0800c57f
 800c54c:	0800c57f 	.word	0x0800c57f
 800c550:	0800c57f 	.word	0x0800c57f
 800c554:	0800c577 	.word	0x0800c577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c558:	f7fd f89a 	bl	8009690 <HAL_RCC_GetPCLK1Freq>
 800c55c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c55e:	e014      	b.n	800c58a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c560:	f7fd f8ac 	bl	80096bc <HAL_RCC_GetPCLK2Freq>
 800c564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c566:	e010      	b.n	800c58a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c568:	4b4e      	ldr	r3, [pc, #312]	; (800c6a4 <UART_SetConfig+0x5c0>)
 800c56a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c56c:	e00d      	b.n	800c58a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c56e:	f7fd f821 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800c572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c574:	e009      	b.n	800c58a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c57a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c57c:	e005      	b.n	800c58a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c57e:	2300      	movs	r3, #0
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 8090 	beq.w	800c6b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c596:	4a44      	ldr	r2, [pc, #272]	; (800c6a8 <UART_SetConfig+0x5c4>)
 800c598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c59c:	461a      	mov	r2, r3
 800c59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5a4:	005a      	lsls	r2, r3, #1
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	441a      	add	r2, r3
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	2b0f      	cmp	r3, #15
 800c5bc:	d916      	bls.n	800c5ec <UART_SetConfig+0x508>
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5c4:	d212      	bcs.n	800c5ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f023 030f 	bic.w	r3, r3, #15
 800c5ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	085b      	lsrs	r3, r3, #1
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	f003 0307 	and.w	r3, r3, #7
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	8bfb      	ldrh	r3, [r7, #30]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	8bfa      	ldrh	r2, [r7, #30]
 800c5e8:	60da      	str	r2, [r3, #12]
 800c5ea:	e062      	b.n	800c6b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c5f2:	e05e      	b.n	800c6b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5f8:	2b08      	cmp	r3, #8
 800c5fa:	d828      	bhi.n	800c64e <UART_SetConfig+0x56a>
 800c5fc:	a201      	add	r2, pc, #4	; (adr r2, 800c604 <UART_SetConfig+0x520>)
 800c5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c602:	bf00      	nop
 800c604:	0800c629 	.word	0x0800c629
 800c608:	0800c631 	.word	0x0800c631
 800c60c:	0800c639 	.word	0x0800c639
 800c610:	0800c64f 	.word	0x0800c64f
 800c614:	0800c63f 	.word	0x0800c63f
 800c618:	0800c64f 	.word	0x0800c64f
 800c61c:	0800c64f 	.word	0x0800c64f
 800c620:	0800c64f 	.word	0x0800c64f
 800c624:	0800c647 	.word	0x0800c647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c628:	f7fd f832 	bl	8009690 <HAL_RCC_GetPCLK1Freq>
 800c62c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c62e:	e014      	b.n	800c65a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c630:	f7fd f844 	bl	80096bc <HAL_RCC_GetPCLK2Freq>
 800c634:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c636:	e010      	b.n	800c65a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <UART_SetConfig+0x5c0>)
 800c63a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c63c:	e00d      	b.n	800c65a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c63e:	f7fc ffb9 	bl	80095b4 <HAL_RCC_GetSysClockFreq>
 800c642:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c644:	e009      	b.n	800c65a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c64c:	e005      	b.n	800c65a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c64e:	2300      	movs	r3, #0
 800c650:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c658:	bf00      	nop
    }

    if (pclk != 0U)
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d028      	beq.n	800c6b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	4a10      	ldr	r2, [pc, #64]	; (800c6a8 <UART_SetConfig+0x5c4>)
 800c666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c66a:	461a      	mov	r2, r3
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	085b      	lsrs	r3, r3, #1
 800c678:	441a      	add	r2, r3
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c682:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	2b0f      	cmp	r3, #15
 800c688:	d910      	bls.n	800c6ac <UART_SetConfig+0x5c8>
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c690:	d20c      	bcs.n	800c6ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	b29a      	uxth	r2, r3
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	60da      	str	r2, [r3, #12]
 800c69c:	e009      	b.n	800c6b2 <UART_SetConfig+0x5ce>
 800c69e:	bf00      	nop
 800c6a0:	40008000 	.word	0x40008000
 800c6a4:	00f42400 	.word	0x00f42400
 800c6a8:	080100c0 	.word	0x080100c0
      }
      else
      {
        ret = HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c6ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3730      	adds	r7, #48	; 0x30
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c6dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00a      	beq.n	800c706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	430a      	orrs	r2, r1
 800c704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00a      	beq.n	800c728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	430a      	orrs	r2, r1
 800c726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00a      	beq.n	800c74a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	430a      	orrs	r2, r1
 800c748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74e:	f003 0308 	and.w	r3, r3, #8
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00a      	beq.n	800c76c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	430a      	orrs	r2, r1
 800c76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c770:	f003 0310 	and.w	r3, r3, #16
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00a      	beq.n	800c78e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	430a      	orrs	r2, r1
 800c78c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c792:	f003 0320 	and.w	r3, r3, #32
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00a      	beq.n	800c7b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	430a      	orrs	r2, r1
 800c7ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01a      	beq.n	800c7f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7da:	d10a      	bne.n	800c7f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00a      	beq.n	800c814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	430a      	orrs	r2, r1
 800c812:	605a      	str	r2, [r3, #4]
  }
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af02      	add	r7, sp, #8
 800c826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c830:	f7f6 fb5a 	bl	8002ee8 <HAL_GetTick>
 800c834:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 0308 	and.w	r3, r3, #8
 800c840:	2b08      	cmp	r3, #8
 800c842:	d10e      	bne.n	800c862 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f82f 	bl	800c8b6 <UART_WaitOnFlagUntilTimeout>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c85e:	2303      	movs	r3, #3
 800c860:	e025      	b.n	800c8ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0304 	and.w	r3, r3, #4
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d10e      	bne.n	800c88e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 f819 	bl	800c8b6 <UART_WaitOnFlagUntilTimeout>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e00f      	b.n	800c8ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2220      	movs	r2, #32
 800c892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2220      	movs	r2, #32
 800c89a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b09c      	sub	sp, #112	; 0x70
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	60f8      	str	r0, [r7, #12]
 800c8be:	60b9      	str	r1, [r7, #8]
 800c8c0:	603b      	str	r3, [r7, #0]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8c6:	e0a9      	b.n	800ca1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ce:	f000 80a5 	beq.w	800ca1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8d2:	f7f6 fb09 	bl	8002ee8 <HAL_GetTick>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d302      	bcc.n	800c8e8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c8e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d140      	bne.n	800c96a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8f0:	e853 3f00 	ldrex	r3, [r3]
 800c8f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c8fc:	667b      	str	r3, [r7, #100]	; 0x64
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c906:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c908:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c90c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c90e:	e841 2300 	strex	r3, r2, [r1]
 800c912:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1e6      	bne.n	800c8e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3308      	adds	r3, #8
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c924:	e853 3f00 	ldrex	r3, [r3]
 800c928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	f023 0301 	bic.w	r3, r3, #1
 800c930:	663b      	str	r3, [r7, #96]	; 0x60
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3308      	adds	r3, #8
 800c938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c93a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c93c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c942:	e841 2300 	strex	r3, r2, [r1]
 800c946:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1e5      	bne.n	800c91a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2220      	movs	r2, #32
 800c952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2220      	movs	r2, #32
 800c95a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c966:	2303      	movs	r3, #3
 800c968:	e069      	b.n	800ca3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b00      	cmp	r3, #0
 800c976:	d051      	beq.n	800ca1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	69db      	ldr	r3, [r3, #28]
 800c97e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c986:	d149      	bne.n	800ca1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c990:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	e853 3f00 	ldrex	r3, [r3]
 800c99e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9b8:	e841 2300 	strex	r3, r2, [r1]
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1e6      	bne.n	800c992 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	e853 3f00 	ldrex	r3, [r3]
 800c9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f023 0301 	bic.w	r3, r3, #1
 800c9da:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9e4:	623a      	str	r2, [r7, #32]
 800c9e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e8:	69f9      	ldr	r1, [r7, #28]
 800c9ea:	6a3a      	ldr	r2, [r7, #32]
 800c9ec:	e841 2300 	strex	r3, r2, [r1]
 800c9f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1e5      	bne.n	800c9c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2220      	movs	r2, #32
 800ca04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2220      	movs	r2, #32
 800ca0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e010      	b.n	800ca3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	69da      	ldr	r2, [r3, #28]
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	4013      	ands	r3, r2
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	bf0c      	ite	eq
 800ca2c:	2301      	moveq	r3, #1
 800ca2e:	2300      	movne	r3, #0
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	461a      	mov	r2, r3
 800ca34:	79fb      	ldrb	r3, [r7, #7]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	f43f af46 	beq.w	800c8c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3770      	adds	r7, #112	; 0x70
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
	...

0800ca48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b096      	sub	sp, #88	; 0x58
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	4613      	mov	r3, r2
 800ca54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	88fa      	ldrh	r2, [r7, #6]
 800ca60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2222      	movs	r2, #34	; 0x22
 800ca70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d02c      	beq.n	800cad6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca80:	4a42      	ldr	r2, [pc, #264]	; (800cb8c <UART_Start_Receive_DMA+0x144>)
 800ca82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca88:	4a41      	ldr	r2, [pc, #260]	; (800cb90 <UART_Start_Receive_DMA+0x148>)
 800ca8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca90:	4a40      	ldr	r2, [pc, #256]	; (800cb94 <UART_Start_Receive_DMA+0x14c>)
 800ca92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca98:	2200      	movs	r2, #0
 800ca9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3324      	adds	r3, #36	; 0x24
 800caa6:	4619      	mov	r1, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caac:	461a      	mov	r2, r3
 800caae:	88fb      	ldrh	r3, [r7, #6]
 800cab0:	f7fa fd8e 	bl	80075d0 <HAL_DMA_Start_IT>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00d      	beq.n	800cad6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2210      	movs	r2, #16
 800cabe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2220      	movs	r2, #32
 800cace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e055      	b.n	800cb82 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d018      	beq.n	800cb18 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caee:	e853 3f00 	ldrex	r3, [r3]
 800caf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cafa:	657b      	str	r3, [r7, #84]	; 0x54
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb04:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb06:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb0c:	e841 2300 	strex	r3, r2, [r1]
 800cb10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1e6      	bne.n	800cae6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	e853 3f00 	ldrex	r3, [r3]
 800cb26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	f043 0301 	orr.w	r3, r3, #1
 800cb2e:	653b      	str	r3, [r7, #80]	; 0x50
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3308      	adds	r3, #8
 800cb36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb38:	637a      	str	r2, [r7, #52]	; 0x34
 800cb3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb40:	e841 2300 	strex	r3, r2, [r1]
 800cb44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e5      	bne.n	800cb18 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3308      	adds	r3, #8
 800cb52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	e853 3f00 	ldrex	r3, [r3]
 800cb5a:	613b      	str	r3, [r7, #16]
   return(result);
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	3308      	adds	r3, #8
 800cb6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb6c:	623a      	str	r2, [r7, #32]
 800cb6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb70:	69f9      	ldr	r1, [r7, #28]
 800cb72:	6a3a      	ldr	r2, [r7, #32]
 800cb74:	e841 2300 	strex	r3, r2, [r1]
 800cb78:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1e5      	bne.n	800cb4c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3758      	adds	r7, #88	; 0x58
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	0800cce7 	.word	0x0800cce7
 800cb90:	0800ce0d 	.word	0x0800ce0d
 800cb94:	0800ce45 	.word	0x0800ce45

0800cb98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b08f      	sub	sp, #60	; 0x3c
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	e853 3f00 	ldrex	r3, [r3]
 800cbac:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cbb4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbc0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc6:	e841 2300 	strex	r3, r2, [r1]
 800cbca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1e6      	bne.n	800cba0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	3308      	adds	r3, #8
 800cbd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	e853 3f00 	ldrex	r3, [r3]
 800cbe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cbe8:	633b      	str	r3, [r7, #48]	; 0x30
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	3308      	adds	r3, #8
 800cbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf2:	61ba      	str	r2, [r7, #24]
 800cbf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf6:	6979      	ldr	r1, [r7, #20]
 800cbf8:	69ba      	ldr	r2, [r7, #24]
 800cbfa:	e841 2300 	strex	r3, r2, [r1]
 800cbfe:	613b      	str	r3, [r7, #16]
   return(result);
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1e5      	bne.n	800cbd2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2220      	movs	r2, #32
 800cc0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cc0e:	bf00      	nop
 800cc10:	373c      	adds	r7, #60	; 0x3c
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b095      	sub	sp, #84	; 0x54
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2a:	e853 3f00 	ldrex	r3, [r3]
 800cc2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc40:	643b      	str	r3, [r7, #64]	; 0x40
 800cc42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc48:	e841 2300 	strex	r3, r2, [r1]
 800cc4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1e6      	bne.n	800cc22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3308      	adds	r3, #8
 800cc5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc6a:	f023 0301 	bic.w	r3, r3, #1
 800cc6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3308      	adds	r3, #8
 800cc76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc80:	e841 2300 	strex	r3, r2, [r1]
 800cc84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1e3      	bne.n	800cc54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d118      	bne.n	800ccc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	e853 3f00 	ldrex	r3, [r3]
 800cca0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	f023 0310 	bic.w	r3, r3, #16
 800cca8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb6:	6979      	ldr	r1, [r7, #20]
 800ccb8:	69ba      	ldr	r2, [r7, #24]
 800ccba:	e841 2300 	strex	r3, r2, [r1]
 800ccbe:	613b      	str	r3, [r7, #16]
   return(result);
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1e6      	bne.n	800cc94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2220      	movs	r2, #32
 800ccca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ccda:	bf00      	nop
 800ccdc:	3754      	adds	r7, #84	; 0x54
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b09c      	sub	sp, #112	; 0x70
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 0320 	and.w	r3, r3, #32
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d171      	bne.n	800cde6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800cd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd12:	e853 3f00 	ldrex	r3, [r3]
 800cd16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	461a      	mov	r2, r3
 800cd26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd28:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd30:	e841 2300 	strex	r3, r2, [r1]
 800cd34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1e6      	bne.n	800cd0a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3308      	adds	r3, #8
 800cd42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	e853 3f00 	ldrex	r3, [r3]
 800cd4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	f023 0301 	bic.w	r3, r3, #1
 800cd52:	667b      	str	r3, [r7, #100]	; 0x64
 800cd54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3308      	adds	r3, #8
 800cd5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd5c:	647a      	str	r2, [r7, #68]	; 0x44
 800cd5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd64:	e841 2300 	strex	r3, r2, [r1]
 800cd68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e5      	bne.n	800cd3c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3308      	adds	r3, #8
 800cd76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	e853 3f00 	ldrex	r3, [r3]
 800cd7e:	623b      	str	r3, [r7, #32]
   return(result);
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd86:	663b      	str	r3, [r7, #96]	; 0x60
 800cd88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd90:	633a      	str	r2, [r7, #48]	; 0x30
 800cd92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd98:	e841 2300 	strex	r3, r2, [r1]
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1e5      	bne.n	800cd70 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cda4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cda6:	2220      	movs	r2, #32
 800cda8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d118      	bne.n	800cde6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	e853 3f00 	ldrex	r3, [r3]
 800cdc0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f023 0310 	bic.w	r3, r3, #16
 800cdc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdd2:	61fb      	str	r3, [r7, #28]
 800cdd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd6:	69b9      	ldr	r1, [r7, #24]
 800cdd8:	69fa      	ldr	r2, [r7, #28]
 800cdda:	e841 2300 	strex	r3, r2, [r1]
 800cdde:	617b      	str	r3, [r7, #20]
   return(result);
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1e6      	bne.n	800cdb4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cde6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d107      	bne.n	800cdfe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cdf8:	f7ff f968 	bl	800c0cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdfc:	e002      	b.n	800ce04 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cdfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ce00:	f7f7 fdf6 	bl	80049f0 <HAL_UART_RxCpltCallback>
}
 800ce04:	bf00      	nop
 800ce06:	3770      	adds	r7, #112	; 0x70
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce18:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d109      	bne.n	800ce36 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce28:	085b      	lsrs	r3, r3, #1
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7ff f94c 	bl	800c0cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ce34:	e002      	b.n	800ce3c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f7ff f934 	bl	800c0a4 <HAL_UART_RxHalfCpltCallback>
}
 800ce3c:	bf00      	nop
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce6c:	2b80      	cmp	r3, #128	; 0x80
 800ce6e:	d109      	bne.n	800ce84 <UART_DMAError+0x40>
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	2b21      	cmp	r3, #33	; 0x21
 800ce74:	d106      	bne.n	800ce84 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ce7e:	6978      	ldr	r0, [r7, #20]
 800ce80:	f7ff fe8a 	bl	800cb98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce8e:	2b40      	cmp	r3, #64	; 0x40
 800ce90:	d109      	bne.n	800cea6 <UART_DMAError+0x62>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b22      	cmp	r3, #34	; 0x22
 800ce96:	d106      	bne.n	800cea6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cea0:	6978      	ldr	r0, [r7, #20]
 800cea2:	f7ff feba 	bl	800cc1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceac:	f043 0210 	orr.w	r2, r3, #16
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ceb6:	6978      	ldr	r0, [r7, #20]
 800ceb8:	f7ff f8fe 	bl	800c0b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cebc:	bf00      	nop
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f7ff f8e8 	bl	800c0b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cee8:	bf00      	nop
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	e853 3f00 	ldrex	r3, [r3]
 800cf04:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf0c:	61fb      	str	r3, [r7, #28]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	61bb      	str	r3, [r7, #24]
 800cf18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1a:	6979      	ldr	r1, [r7, #20]
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	613b      	str	r3, [r7, #16]
   return(result);
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e6      	bne.n	800cef8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff f8a9 	bl	800c090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf3e:	bf00      	nop
 800cf40:	3720      	adds	r7, #32
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf46:	b480      	push	{r7}
 800cf48:	b083      	sub	sp, #12
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf4e:	bf00      	nop
 800cf50:	370c      	adds	r7, #12
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b083      	sub	sp, #12
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf62:	bf00      	nop
 800cf64:	370c      	adds	r7, #12
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b083      	sub	sp, #12
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cf76:	bf00      	nop
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b085      	sub	sp, #20
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d101      	bne.n	800cf98 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf94:	2302      	movs	r3, #2
 800cf96:	e027      	b.n	800cfe8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2224      	movs	r2, #36	; 0x24
 800cfa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f022 0201 	bic.w	r2, r2, #1
 800cfbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cfc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d004:	2b01      	cmp	r3, #1
 800d006:	d101      	bne.n	800d00c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d008:	2302      	movs	r3, #2
 800d00a:	e02d      	b.n	800d068 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2224      	movs	r2, #36	; 0x24
 800d018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f022 0201 	bic.w	r2, r2, #1
 800d032:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	430a      	orrs	r2, r1
 800d046:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f84f 	bl	800d0ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2220      	movs	r2, #32
 800d05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d080:	2b01      	cmp	r3, #1
 800d082:	d101      	bne.n	800d088 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d084:	2302      	movs	r3, #2
 800d086:	e02d      	b.n	800d0e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2224      	movs	r2, #36	; 0x24
 800d094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f022 0201 	bic.w	r2, r2, #1
 800d0ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f811 	bl	800d0ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2220      	movs	r2, #32
 800d0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d108      	bne.n	800d10e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d10c:	e031      	b.n	800d172 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d10e:	2308      	movs	r3, #8
 800d110:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d112:	2308      	movs	r3, #8
 800d114:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	0e5b      	lsrs	r3, r3, #25
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	f003 0307 	and.w	r3, r3, #7
 800d124:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	0f5b      	lsrs	r3, r3, #29
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	f003 0307 	and.w	r3, r3, #7
 800d134:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d136:	7bbb      	ldrb	r3, [r7, #14]
 800d138:	7b3a      	ldrb	r2, [r7, #12]
 800d13a:	4911      	ldr	r1, [pc, #68]	; (800d180 <UARTEx_SetNbDataToProcess+0x94>)
 800d13c:	5c8a      	ldrb	r2, [r1, r2]
 800d13e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d142:	7b3a      	ldrb	r2, [r7, #12]
 800d144:	490f      	ldr	r1, [pc, #60]	; (800d184 <UARTEx_SetNbDataToProcess+0x98>)
 800d146:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d148:	fb93 f3f2 	sdiv	r3, r3, r2
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	7b7a      	ldrb	r2, [r7, #13]
 800d158:	4909      	ldr	r1, [pc, #36]	; (800d180 <UARTEx_SetNbDataToProcess+0x94>)
 800d15a:	5c8a      	ldrb	r2, [r1, r2]
 800d15c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d160:	7b7a      	ldrb	r2, [r7, #13]
 800d162:	4908      	ldr	r1, [pc, #32]	; (800d184 <UARTEx_SetNbDataToProcess+0x98>)
 800d164:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d166:	fb93 f3f2 	sdiv	r3, r3, r2
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d172:	bf00      	nop
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	080100d8 	.word	0x080100d8
 800d184:	080100e0 	.word	0x080100e0

0800d188 <__errno>:
 800d188:	4b01      	ldr	r3, [pc, #4]	; (800d190 <__errno+0x8>)
 800d18a:	6818      	ldr	r0, [r3, #0]
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	20000014 	.word	0x20000014

0800d194 <__libc_init_array>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	4d0d      	ldr	r5, [pc, #52]	; (800d1cc <__libc_init_array+0x38>)
 800d198:	4c0d      	ldr	r4, [pc, #52]	; (800d1d0 <__libc_init_array+0x3c>)
 800d19a:	1b64      	subs	r4, r4, r5
 800d19c:	10a4      	asrs	r4, r4, #2
 800d19e:	2600      	movs	r6, #0
 800d1a0:	42a6      	cmp	r6, r4
 800d1a2:	d109      	bne.n	800d1b8 <__libc_init_array+0x24>
 800d1a4:	4d0b      	ldr	r5, [pc, #44]	; (800d1d4 <__libc_init_array+0x40>)
 800d1a6:	4c0c      	ldr	r4, [pc, #48]	; (800d1d8 <__libc_init_array+0x44>)
 800d1a8:	f002 fed6 	bl	800ff58 <_init>
 800d1ac:	1b64      	subs	r4, r4, r5
 800d1ae:	10a4      	asrs	r4, r4, #2
 800d1b0:	2600      	movs	r6, #0
 800d1b2:	42a6      	cmp	r6, r4
 800d1b4:	d105      	bne.n	800d1c2 <__libc_init_array+0x2e>
 800d1b6:	bd70      	pop	{r4, r5, r6, pc}
 800d1b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1bc:	4798      	blx	r3
 800d1be:	3601      	adds	r6, #1
 800d1c0:	e7ee      	b.n	800d1a0 <__libc_init_array+0xc>
 800d1c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c6:	4798      	blx	r3
 800d1c8:	3601      	adds	r6, #1
 800d1ca:	e7f2      	b.n	800d1b2 <__libc_init_array+0x1e>
 800d1cc:	080104cc 	.word	0x080104cc
 800d1d0:	080104cc 	.word	0x080104cc
 800d1d4:	080104cc 	.word	0x080104cc
 800d1d8:	080104d0 	.word	0x080104d0

0800d1dc <memset>:
 800d1dc:	4402      	add	r2, r0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d100      	bne.n	800d1e6 <memset+0xa>
 800d1e4:	4770      	bx	lr
 800d1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ea:	e7f9      	b.n	800d1e0 <memset+0x4>

0800d1ec <__cvt>:
 800d1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f0:	ec55 4b10 	vmov	r4, r5, d0
 800d1f4:	2d00      	cmp	r5, #0
 800d1f6:	460e      	mov	r6, r1
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	462b      	mov	r3, r5
 800d1fc:	bfbb      	ittet	lt
 800d1fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d202:	461d      	movlt	r5, r3
 800d204:	2300      	movge	r3, #0
 800d206:	232d      	movlt	r3, #45	; 0x2d
 800d208:	700b      	strb	r3, [r1, #0]
 800d20a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d20c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d210:	4691      	mov	r9, r2
 800d212:	f023 0820 	bic.w	r8, r3, #32
 800d216:	bfbc      	itt	lt
 800d218:	4622      	movlt	r2, r4
 800d21a:	4614      	movlt	r4, r2
 800d21c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d220:	d005      	beq.n	800d22e <__cvt+0x42>
 800d222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d226:	d100      	bne.n	800d22a <__cvt+0x3e>
 800d228:	3601      	adds	r6, #1
 800d22a:	2102      	movs	r1, #2
 800d22c:	e000      	b.n	800d230 <__cvt+0x44>
 800d22e:	2103      	movs	r1, #3
 800d230:	ab03      	add	r3, sp, #12
 800d232:	9301      	str	r3, [sp, #4]
 800d234:	ab02      	add	r3, sp, #8
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	ec45 4b10 	vmov	d0, r4, r5
 800d23c:	4653      	mov	r3, sl
 800d23e:	4632      	mov	r2, r6
 800d240:	f000 fee6 	bl	800e010 <_dtoa_r>
 800d244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d248:	4607      	mov	r7, r0
 800d24a:	d102      	bne.n	800d252 <__cvt+0x66>
 800d24c:	f019 0f01 	tst.w	r9, #1
 800d250:	d022      	beq.n	800d298 <__cvt+0xac>
 800d252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d256:	eb07 0906 	add.w	r9, r7, r6
 800d25a:	d110      	bne.n	800d27e <__cvt+0x92>
 800d25c:	783b      	ldrb	r3, [r7, #0]
 800d25e:	2b30      	cmp	r3, #48	; 0x30
 800d260:	d10a      	bne.n	800d278 <__cvt+0x8c>
 800d262:	2200      	movs	r2, #0
 800d264:	2300      	movs	r3, #0
 800d266:	4620      	mov	r0, r4
 800d268:	4629      	mov	r1, r5
 800d26a:	f7f3 fc55 	bl	8000b18 <__aeabi_dcmpeq>
 800d26e:	b918      	cbnz	r0, 800d278 <__cvt+0x8c>
 800d270:	f1c6 0601 	rsb	r6, r6, #1
 800d274:	f8ca 6000 	str.w	r6, [sl]
 800d278:	f8da 3000 	ldr.w	r3, [sl]
 800d27c:	4499      	add	r9, r3
 800d27e:	2200      	movs	r2, #0
 800d280:	2300      	movs	r3, #0
 800d282:	4620      	mov	r0, r4
 800d284:	4629      	mov	r1, r5
 800d286:	f7f3 fc47 	bl	8000b18 <__aeabi_dcmpeq>
 800d28a:	b108      	cbz	r0, 800d290 <__cvt+0xa4>
 800d28c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d290:	2230      	movs	r2, #48	; 0x30
 800d292:	9b03      	ldr	r3, [sp, #12]
 800d294:	454b      	cmp	r3, r9
 800d296:	d307      	bcc.n	800d2a8 <__cvt+0xbc>
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d29c:	1bdb      	subs	r3, r3, r7
 800d29e:	4638      	mov	r0, r7
 800d2a0:	6013      	str	r3, [r2, #0]
 800d2a2:	b004      	add	sp, #16
 800d2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a8:	1c59      	adds	r1, r3, #1
 800d2aa:	9103      	str	r1, [sp, #12]
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	e7f0      	b.n	800d292 <__cvt+0xa6>

0800d2b0 <__exponent>:
 800d2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2900      	cmp	r1, #0
 800d2b6:	bfb8      	it	lt
 800d2b8:	4249      	neglt	r1, r1
 800d2ba:	f803 2b02 	strb.w	r2, [r3], #2
 800d2be:	bfb4      	ite	lt
 800d2c0:	222d      	movlt	r2, #45	; 0x2d
 800d2c2:	222b      	movge	r2, #43	; 0x2b
 800d2c4:	2909      	cmp	r1, #9
 800d2c6:	7042      	strb	r2, [r0, #1]
 800d2c8:	dd2a      	ble.n	800d320 <__exponent+0x70>
 800d2ca:	f10d 0407 	add.w	r4, sp, #7
 800d2ce:	46a4      	mov	ip, r4
 800d2d0:	270a      	movs	r7, #10
 800d2d2:	46a6      	mov	lr, r4
 800d2d4:	460a      	mov	r2, r1
 800d2d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d2da:	fb07 1516 	mls	r5, r7, r6, r1
 800d2de:	3530      	adds	r5, #48	; 0x30
 800d2e0:	2a63      	cmp	r2, #99	; 0x63
 800d2e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d2e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d2ea:	4631      	mov	r1, r6
 800d2ec:	dcf1      	bgt.n	800d2d2 <__exponent+0x22>
 800d2ee:	3130      	adds	r1, #48	; 0x30
 800d2f0:	f1ae 0502 	sub.w	r5, lr, #2
 800d2f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d2f8:	1c44      	adds	r4, r0, #1
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	4561      	cmp	r1, ip
 800d2fe:	d30a      	bcc.n	800d316 <__exponent+0x66>
 800d300:	f10d 0209 	add.w	r2, sp, #9
 800d304:	eba2 020e 	sub.w	r2, r2, lr
 800d308:	4565      	cmp	r5, ip
 800d30a:	bf88      	it	hi
 800d30c:	2200      	movhi	r2, #0
 800d30e:	4413      	add	r3, r2
 800d310:	1a18      	subs	r0, r3, r0
 800d312:	b003      	add	sp, #12
 800d314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d31a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d31e:	e7ed      	b.n	800d2fc <__exponent+0x4c>
 800d320:	2330      	movs	r3, #48	; 0x30
 800d322:	3130      	adds	r1, #48	; 0x30
 800d324:	7083      	strb	r3, [r0, #2]
 800d326:	70c1      	strb	r1, [r0, #3]
 800d328:	1d03      	adds	r3, r0, #4
 800d32a:	e7f1      	b.n	800d310 <__exponent+0x60>

0800d32c <_printf_float>:
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	ed2d 8b02 	vpush	{d8}
 800d334:	b08d      	sub	sp, #52	; 0x34
 800d336:	460c      	mov	r4, r1
 800d338:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d33c:	4616      	mov	r6, r2
 800d33e:	461f      	mov	r7, r3
 800d340:	4605      	mov	r5, r0
 800d342:	f001 fe0b 	bl	800ef5c <_localeconv_r>
 800d346:	f8d0 a000 	ldr.w	sl, [r0]
 800d34a:	4650      	mov	r0, sl
 800d34c:	f7f2 ff68 	bl	8000220 <strlen>
 800d350:	2300      	movs	r3, #0
 800d352:	930a      	str	r3, [sp, #40]	; 0x28
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	9305      	str	r3, [sp, #20]
 800d358:	f8d8 3000 	ldr.w	r3, [r8]
 800d35c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d360:	3307      	adds	r3, #7
 800d362:	f023 0307 	bic.w	r3, r3, #7
 800d366:	f103 0208 	add.w	r2, r3, #8
 800d36a:	f8c8 2000 	str.w	r2, [r8]
 800d36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d376:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d37a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d37e:	9307      	str	r3, [sp, #28]
 800d380:	f8cd 8018 	str.w	r8, [sp, #24]
 800d384:	ee08 0a10 	vmov	s16, r0
 800d388:	4b9f      	ldr	r3, [pc, #636]	; (800d608 <_printf_float+0x2dc>)
 800d38a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d38e:	f04f 32ff 	mov.w	r2, #4294967295
 800d392:	f7f3 fbf3 	bl	8000b7c <__aeabi_dcmpun>
 800d396:	bb88      	cbnz	r0, 800d3fc <_printf_float+0xd0>
 800d398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d39c:	4b9a      	ldr	r3, [pc, #616]	; (800d608 <_printf_float+0x2dc>)
 800d39e:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a2:	f7f3 fbcd 	bl	8000b40 <__aeabi_dcmple>
 800d3a6:	bb48      	cbnz	r0, 800d3fc <_printf_float+0xd0>
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	f7f3 fbbc 	bl	8000b2c <__aeabi_dcmplt>
 800d3b4:	b110      	cbz	r0, 800d3bc <_printf_float+0x90>
 800d3b6:	232d      	movs	r3, #45	; 0x2d
 800d3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3bc:	4b93      	ldr	r3, [pc, #588]	; (800d60c <_printf_float+0x2e0>)
 800d3be:	4894      	ldr	r0, [pc, #592]	; (800d610 <_printf_float+0x2e4>)
 800d3c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d3c4:	bf94      	ite	ls
 800d3c6:	4698      	movls	r8, r3
 800d3c8:	4680      	movhi	r8, r0
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	6123      	str	r3, [r4, #16]
 800d3ce:	9b05      	ldr	r3, [sp, #20]
 800d3d0:	f023 0204 	bic.w	r2, r3, #4
 800d3d4:	6022      	str	r2, [r4, #0]
 800d3d6:	f04f 0900 	mov.w	r9, #0
 800d3da:	9700      	str	r7, [sp, #0]
 800d3dc:	4633      	mov	r3, r6
 800d3de:	aa0b      	add	r2, sp, #44	; 0x2c
 800d3e0:	4621      	mov	r1, r4
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f000 f9d8 	bl	800d798 <_printf_common>
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f040 8090 	bne.w	800d50e <_printf_float+0x1e2>
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f2:	b00d      	add	sp, #52	; 0x34
 800d3f4:	ecbd 8b02 	vpop	{d8}
 800d3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3fc:	4642      	mov	r2, r8
 800d3fe:	464b      	mov	r3, r9
 800d400:	4640      	mov	r0, r8
 800d402:	4649      	mov	r1, r9
 800d404:	f7f3 fbba 	bl	8000b7c <__aeabi_dcmpun>
 800d408:	b140      	cbz	r0, 800d41c <_printf_float+0xf0>
 800d40a:	464b      	mov	r3, r9
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bfbc      	itt	lt
 800d410:	232d      	movlt	r3, #45	; 0x2d
 800d412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d416:	487f      	ldr	r0, [pc, #508]	; (800d614 <_printf_float+0x2e8>)
 800d418:	4b7f      	ldr	r3, [pc, #508]	; (800d618 <_printf_float+0x2ec>)
 800d41a:	e7d1      	b.n	800d3c0 <_printf_float+0x94>
 800d41c:	6863      	ldr	r3, [r4, #4]
 800d41e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d422:	9206      	str	r2, [sp, #24]
 800d424:	1c5a      	adds	r2, r3, #1
 800d426:	d13f      	bne.n	800d4a8 <_printf_float+0x17c>
 800d428:	2306      	movs	r3, #6
 800d42a:	6063      	str	r3, [r4, #4]
 800d42c:	9b05      	ldr	r3, [sp, #20]
 800d42e:	6861      	ldr	r1, [r4, #4]
 800d430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d434:	2300      	movs	r3, #0
 800d436:	9303      	str	r3, [sp, #12]
 800d438:	ab0a      	add	r3, sp, #40	; 0x28
 800d43a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d43e:	ab09      	add	r3, sp, #36	; 0x24
 800d440:	ec49 8b10 	vmov	d0, r8, r9
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	6022      	str	r2, [r4, #0]
 800d448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d44c:	4628      	mov	r0, r5
 800d44e:	f7ff fecd 	bl	800d1ec <__cvt>
 800d452:	9b06      	ldr	r3, [sp, #24]
 800d454:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d456:	2b47      	cmp	r3, #71	; 0x47
 800d458:	4680      	mov	r8, r0
 800d45a:	d108      	bne.n	800d46e <_printf_float+0x142>
 800d45c:	1cc8      	adds	r0, r1, #3
 800d45e:	db02      	blt.n	800d466 <_printf_float+0x13a>
 800d460:	6863      	ldr	r3, [r4, #4]
 800d462:	4299      	cmp	r1, r3
 800d464:	dd41      	ble.n	800d4ea <_printf_float+0x1be>
 800d466:	f1ab 0b02 	sub.w	fp, fp, #2
 800d46a:	fa5f fb8b 	uxtb.w	fp, fp
 800d46e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d472:	d820      	bhi.n	800d4b6 <_printf_float+0x18a>
 800d474:	3901      	subs	r1, #1
 800d476:	465a      	mov	r2, fp
 800d478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d47c:	9109      	str	r1, [sp, #36]	; 0x24
 800d47e:	f7ff ff17 	bl	800d2b0 <__exponent>
 800d482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d484:	1813      	adds	r3, r2, r0
 800d486:	2a01      	cmp	r2, #1
 800d488:	4681      	mov	r9, r0
 800d48a:	6123      	str	r3, [r4, #16]
 800d48c:	dc02      	bgt.n	800d494 <_printf_float+0x168>
 800d48e:	6822      	ldr	r2, [r4, #0]
 800d490:	07d2      	lsls	r2, r2, #31
 800d492:	d501      	bpl.n	800d498 <_printf_float+0x16c>
 800d494:	3301      	adds	r3, #1
 800d496:	6123      	str	r3, [r4, #16]
 800d498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d09c      	beq.n	800d3da <_printf_float+0xae>
 800d4a0:	232d      	movs	r3, #45	; 0x2d
 800d4a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4a6:	e798      	b.n	800d3da <_printf_float+0xae>
 800d4a8:	9a06      	ldr	r2, [sp, #24]
 800d4aa:	2a47      	cmp	r2, #71	; 0x47
 800d4ac:	d1be      	bne.n	800d42c <_printf_float+0x100>
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1bc      	bne.n	800d42c <_printf_float+0x100>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e7b9      	b.n	800d42a <_printf_float+0xfe>
 800d4b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d4ba:	d118      	bne.n	800d4ee <_printf_float+0x1c2>
 800d4bc:	2900      	cmp	r1, #0
 800d4be:	6863      	ldr	r3, [r4, #4]
 800d4c0:	dd0b      	ble.n	800d4da <_printf_float+0x1ae>
 800d4c2:	6121      	str	r1, [r4, #16]
 800d4c4:	b913      	cbnz	r3, 800d4cc <_printf_float+0x1a0>
 800d4c6:	6822      	ldr	r2, [r4, #0]
 800d4c8:	07d0      	lsls	r0, r2, #31
 800d4ca:	d502      	bpl.n	800d4d2 <_printf_float+0x1a6>
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	440b      	add	r3, r1
 800d4d0:	6123      	str	r3, [r4, #16]
 800d4d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d4d4:	f04f 0900 	mov.w	r9, #0
 800d4d8:	e7de      	b.n	800d498 <_printf_float+0x16c>
 800d4da:	b913      	cbnz	r3, 800d4e2 <_printf_float+0x1b6>
 800d4dc:	6822      	ldr	r2, [r4, #0]
 800d4de:	07d2      	lsls	r2, r2, #31
 800d4e0:	d501      	bpl.n	800d4e6 <_printf_float+0x1ba>
 800d4e2:	3302      	adds	r3, #2
 800d4e4:	e7f4      	b.n	800d4d0 <_printf_float+0x1a4>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e7f2      	b.n	800d4d0 <_printf_float+0x1a4>
 800d4ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4f0:	4299      	cmp	r1, r3
 800d4f2:	db05      	blt.n	800d500 <_printf_float+0x1d4>
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	6121      	str	r1, [r4, #16]
 800d4f8:	07d8      	lsls	r0, r3, #31
 800d4fa:	d5ea      	bpl.n	800d4d2 <_printf_float+0x1a6>
 800d4fc:	1c4b      	adds	r3, r1, #1
 800d4fe:	e7e7      	b.n	800d4d0 <_printf_float+0x1a4>
 800d500:	2900      	cmp	r1, #0
 800d502:	bfd4      	ite	le
 800d504:	f1c1 0202 	rsble	r2, r1, #2
 800d508:	2201      	movgt	r2, #1
 800d50a:	4413      	add	r3, r2
 800d50c:	e7e0      	b.n	800d4d0 <_printf_float+0x1a4>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	055a      	lsls	r2, r3, #21
 800d512:	d407      	bmi.n	800d524 <_printf_float+0x1f8>
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	4642      	mov	r2, r8
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	47b8      	blx	r7
 800d51e:	3001      	adds	r0, #1
 800d520:	d12c      	bne.n	800d57c <_printf_float+0x250>
 800d522:	e764      	b.n	800d3ee <_printf_float+0xc2>
 800d524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d528:	f240 80e0 	bls.w	800d6ec <_printf_float+0x3c0>
 800d52c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d530:	2200      	movs	r2, #0
 800d532:	2300      	movs	r3, #0
 800d534:	f7f3 faf0 	bl	8000b18 <__aeabi_dcmpeq>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d034      	beq.n	800d5a6 <_printf_float+0x27a>
 800d53c:	4a37      	ldr	r2, [pc, #220]	; (800d61c <_printf_float+0x2f0>)
 800d53e:	2301      	movs	r3, #1
 800d540:	4631      	mov	r1, r6
 800d542:	4628      	mov	r0, r5
 800d544:	47b8      	blx	r7
 800d546:	3001      	adds	r0, #1
 800d548:	f43f af51 	beq.w	800d3ee <_printf_float+0xc2>
 800d54c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d550:	429a      	cmp	r2, r3
 800d552:	db02      	blt.n	800d55a <_printf_float+0x22e>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	07d8      	lsls	r0, r3, #31
 800d558:	d510      	bpl.n	800d57c <_printf_float+0x250>
 800d55a:	ee18 3a10 	vmov	r3, s16
 800d55e:	4652      	mov	r2, sl
 800d560:	4631      	mov	r1, r6
 800d562:	4628      	mov	r0, r5
 800d564:	47b8      	blx	r7
 800d566:	3001      	adds	r0, #1
 800d568:	f43f af41 	beq.w	800d3ee <_printf_float+0xc2>
 800d56c:	f04f 0800 	mov.w	r8, #0
 800d570:	f104 091a 	add.w	r9, r4, #26
 800d574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d576:	3b01      	subs	r3, #1
 800d578:	4543      	cmp	r3, r8
 800d57a:	dc09      	bgt.n	800d590 <_printf_float+0x264>
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	079b      	lsls	r3, r3, #30
 800d580:	f100 8105 	bmi.w	800d78e <_printf_float+0x462>
 800d584:	68e0      	ldr	r0, [r4, #12]
 800d586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d588:	4298      	cmp	r0, r3
 800d58a:	bfb8      	it	lt
 800d58c:	4618      	movlt	r0, r3
 800d58e:	e730      	b.n	800d3f2 <_printf_float+0xc6>
 800d590:	2301      	movs	r3, #1
 800d592:	464a      	mov	r2, r9
 800d594:	4631      	mov	r1, r6
 800d596:	4628      	mov	r0, r5
 800d598:	47b8      	blx	r7
 800d59a:	3001      	adds	r0, #1
 800d59c:	f43f af27 	beq.w	800d3ee <_printf_float+0xc2>
 800d5a0:	f108 0801 	add.w	r8, r8, #1
 800d5a4:	e7e6      	b.n	800d574 <_printf_float+0x248>
 800d5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dc39      	bgt.n	800d620 <_printf_float+0x2f4>
 800d5ac:	4a1b      	ldr	r2, [pc, #108]	; (800d61c <_printf_float+0x2f0>)
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	47b8      	blx	r7
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	f43f af19 	beq.w	800d3ee <_printf_float+0xc2>
 800d5bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	d102      	bne.n	800d5ca <_printf_float+0x29e>
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	07d9      	lsls	r1, r3, #31
 800d5c8:	d5d8      	bpl.n	800d57c <_printf_float+0x250>
 800d5ca:	ee18 3a10 	vmov	r3, s16
 800d5ce:	4652      	mov	r2, sl
 800d5d0:	4631      	mov	r1, r6
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	47b8      	blx	r7
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	f43f af09 	beq.w	800d3ee <_printf_float+0xc2>
 800d5dc:	f04f 0900 	mov.w	r9, #0
 800d5e0:	f104 0a1a 	add.w	sl, r4, #26
 800d5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5e6:	425b      	negs	r3, r3
 800d5e8:	454b      	cmp	r3, r9
 800d5ea:	dc01      	bgt.n	800d5f0 <_printf_float+0x2c4>
 800d5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ee:	e792      	b.n	800d516 <_printf_float+0x1ea>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	4652      	mov	r2, sl
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	47b8      	blx	r7
 800d5fa:	3001      	adds	r0, #1
 800d5fc:	f43f aef7 	beq.w	800d3ee <_printf_float+0xc2>
 800d600:	f109 0901 	add.w	r9, r9, #1
 800d604:	e7ee      	b.n	800d5e4 <_printf_float+0x2b8>
 800d606:	bf00      	nop
 800d608:	7fefffff 	.word	0x7fefffff
 800d60c:	080100ec 	.word	0x080100ec
 800d610:	080100f0 	.word	0x080100f0
 800d614:	080100f8 	.word	0x080100f8
 800d618:	080100f4 	.word	0x080100f4
 800d61c:	080100fc 	.word	0x080100fc
 800d620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d624:	429a      	cmp	r2, r3
 800d626:	bfa8      	it	ge
 800d628:	461a      	movge	r2, r3
 800d62a:	2a00      	cmp	r2, #0
 800d62c:	4691      	mov	r9, r2
 800d62e:	dc37      	bgt.n	800d6a0 <_printf_float+0x374>
 800d630:	f04f 0b00 	mov.w	fp, #0
 800d634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d638:	f104 021a 	add.w	r2, r4, #26
 800d63c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d63e:	9305      	str	r3, [sp, #20]
 800d640:	eba3 0309 	sub.w	r3, r3, r9
 800d644:	455b      	cmp	r3, fp
 800d646:	dc33      	bgt.n	800d6b0 <_printf_float+0x384>
 800d648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d64c:	429a      	cmp	r2, r3
 800d64e:	db3b      	blt.n	800d6c8 <_printf_float+0x39c>
 800d650:	6823      	ldr	r3, [r4, #0]
 800d652:	07da      	lsls	r2, r3, #31
 800d654:	d438      	bmi.n	800d6c8 <_printf_float+0x39c>
 800d656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d658:	9a05      	ldr	r2, [sp, #20]
 800d65a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d65c:	1a9a      	subs	r2, r3, r2
 800d65e:	eba3 0901 	sub.w	r9, r3, r1
 800d662:	4591      	cmp	r9, r2
 800d664:	bfa8      	it	ge
 800d666:	4691      	movge	r9, r2
 800d668:	f1b9 0f00 	cmp.w	r9, #0
 800d66c:	dc35      	bgt.n	800d6da <_printf_float+0x3ae>
 800d66e:	f04f 0800 	mov.w	r8, #0
 800d672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d676:	f104 0a1a 	add.w	sl, r4, #26
 800d67a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d67e:	1a9b      	subs	r3, r3, r2
 800d680:	eba3 0309 	sub.w	r3, r3, r9
 800d684:	4543      	cmp	r3, r8
 800d686:	f77f af79 	ble.w	800d57c <_printf_float+0x250>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4652      	mov	r2, sl
 800d68e:	4631      	mov	r1, r6
 800d690:	4628      	mov	r0, r5
 800d692:	47b8      	blx	r7
 800d694:	3001      	adds	r0, #1
 800d696:	f43f aeaa 	beq.w	800d3ee <_printf_float+0xc2>
 800d69a:	f108 0801 	add.w	r8, r8, #1
 800d69e:	e7ec      	b.n	800d67a <_printf_float+0x34e>
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	4642      	mov	r2, r8
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	47b8      	blx	r7
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	d1c0      	bne.n	800d630 <_printf_float+0x304>
 800d6ae:	e69e      	b.n	800d3ee <_printf_float+0xc2>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	4631      	mov	r1, r6
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	9205      	str	r2, [sp, #20]
 800d6b8:	47b8      	blx	r7
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	f43f ae97 	beq.w	800d3ee <_printf_float+0xc2>
 800d6c0:	9a05      	ldr	r2, [sp, #20]
 800d6c2:	f10b 0b01 	add.w	fp, fp, #1
 800d6c6:	e7b9      	b.n	800d63c <_printf_float+0x310>
 800d6c8:	ee18 3a10 	vmov	r3, s16
 800d6cc:	4652      	mov	r2, sl
 800d6ce:	4631      	mov	r1, r6
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	47b8      	blx	r7
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	d1be      	bne.n	800d656 <_printf_float+0x32a>
 800d6d8:	e689      	b.n	800d3ee <_printf_float+0xc2>
 800d6da:	9a05      	ldr	r2, [sp, #20]
 800d6dc:	464b      	mov	r3, r9
 800d6de:	4442      	add	r2, r8
 800d6e0:	4631      	mov	r1, r6
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	47b8      	blx	r7
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	d1c1      	bne.n	800d66e <_printf_float+0x342>
 800d6ea:	e680      	b.n	800d3ee <_printf_float+0xc2>
 800d6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6ee:	2a01      	cmp	r2, #1
 800d6f0:	dc01      	bgt.n	800d6f6 <_printf_float+0x3ca>
 800d6f2:	07db      	lsls	r3, r3, #31
 800d6f4:	d538      	bpl.n	800d768 <_printf_float+0x43c>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	47b8      	blx	r7
 800d700:	3001      	adds	r0, #1
 800d702:	f43f ae74 	beq.w	800d3ee <_printf_float+0xc2>
 800d706:	ee18 3a10 	vmov	r3, s16
 800d70a:	4652      	mov	r2, sl
 800d70c:	4631      	mov	r1, r6
 800d70e:	4628      	mov	r0, r5
 800d710:	47b8      	blx	r7
 800d712:	3001      	adds	r0, #1
 800d714:	f43f ae6b 	beq.w	800d3ee <_printf_float+0xc2>
 800d718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d71c:	2200      	movs	r2, #0
 800d71e:	2300      	movs	r3, #0
 800d720:	f7f3 f9fa 	bl	8000b18 <__aeabi_dcmpeq>
 800d724:	b9d8      	cbnz	r0, 800d75e <_printf_float+0x432>
 800d726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d728:	f108 0201 	add.w	r2, r8, #1
 800d72c:	3b01      	subs	r3, #1
 800d72e:	4631      	mov	r1, r6
 800d730:	4628      	mov	r0, r5
 800d732:	47b8      	blx	r7
 800d734:	3001      	adds	r0, #1
 800d736:	d10e      	bne.n	800d756 <_printf_float+0x42a>
 800d738:	e659      	b.n	800d3ee <_printf_float+0xc2>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4652      	mov	r2, sl
 800d73e:	4631      	mov	r1, r6
 800d740:	4628      	mov	r0, r5
 800d742:	47b8      	blx	r7
 800d744:	3001      	adds	r0, #1
 800d746:	f43f ae52 	beq.w	800d3ee <_printf_float+0xc2>
 800d74a:	f108 0801 	add.w	r8, r8, #1
 800d74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d750:	3b01      	subs	r3, #1
 800d752:	4543      	cmp	r3, r8
 800d754:	dcf1      	bgt.n	800d73a <_printf_float+0x40e>
 800d756:	464b      	mov	r3, r9
 800d758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d75c:	e6dc      	b.n	800d518 <_printf_float+0x1ec>
 800d75e:	f04f 0800 	mov.w	r8, #0
 800d762:	f104 0a1a 	add.w	sl, r4, #26
 800d766:	e7f2      	b.n	800d74e <_printf_float+0x422>
 800d768:	2301      	movs	r3, #1
 800d76a:	4642      	mov	r2, r8
 800d76c:	e7df      	b.n	800d72e <_printf_float+0x402>
 800d76e:	2301      	movs	r3, #1
 800d770:	464a      	mov	r2, r9
 800d772:	4631      	mov	r1, r6
 800d774:	4628      	mov	r0, r5
 800d776:	47b8      	blx	r7
 800d778:	3001      	adds	r0, #1
 800d77a:	f43f ae38 	beq.w	800d3ee <_printf_float+0xc2>
 800d77e:	f108 0801 	add.w	r8, r8, #1
 800d782:	68e3      	ldr	r3, [r4, #12]
 800d784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d786:	1a5b      	subs	r3, r3, r1
 800d788:	4543      	cmp	r3, r8
 800d78a:	dcf0      	bgt.n	800d76e <_printf_float+0x442>
 800d78c:	e6fa      	b.n	800d584 <_printf_float+0x258>
 800d78e:	f04f 0800 	mov.w	r8, #0
 800d792:	f104 0919 	add.w	r9, r4, #25
 800d796:	e7f4      	b.n	800d782 <_printf_float+0x456>

0800d798 <_printf_common>:
 800d798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d79c:	4616      	mov	r6, r2
 800d79e:	4699      	mov	r9, r3
 800d7a0:	688a      	ldr	r2, [r1, #8]
 800d7a2:	690b      	ldr	r3, [r1, #16]
 800d7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	bfb8      	it	lt
 800d7ac:	4613      	movlt	r3, r2
 800d7ae:	6033      	str	r3, [r6, #0]
 800d7b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7b4:	4607      	mov	r7, r0
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	b10a      	cbz	r2, 800d7be <_printf_common+0x26>
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	6033      	str	r3, [r6, #0]
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	0699      	lsls	r1, r3, #26
 800d7c2:	bf42      	ittt	mi
 800d7c4:	6833      	ldrmi	r3, [r6, #0]
 800d7c6:	3302      	addmi	r3, #2
 800d7c8:	6033      	strmi	r3, [r6, #0]
 800d7ca:	6825      	ldr	r5, [r4, #0]
 800d7cc:	f015 0506 	ands.w	r5, r5, #6
 800d7d0:	d106      	bne.n	800d7e0 <_printf_common+0x48>
 800d7d2:	f104 0a19 	add.w	sl, r4, #25
 800d7d6:	68e3      	ldr	r3, [r4, #12]
 800d7d8:	6832      	ldr	r2, [r6, #0]
 800d7da:	1a9b      	subs	r3, r3, r2
 800d7dc:	42ab      	cmp	r3, r5
 800d7de:	dc26      	bgt.n	800d82e <_printf_common+0x96>
 800d7e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7e4:	1e13      	subs	r3, r2, #0
 800d7e6:	6822      	ldr	r2, [r4, #0]
 800d7e8:	bf18      	it	ne
 800d7ea:	2301      	movne	r3, #1
 800d7ec:	0692      	lsls	r2, r2, #26
 800d7ee:	d42b      	bmi.n	800d848 <_printf_common+0xb0>
 800d7f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	4638      	mov	r0, r7
 800d7f8:	47c0      	blx	r8
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	d01e      	beq.n	800d83c <_printf_common+0xa4>
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	68e5      	ldr	r5, [r4, #12]
 800d802:	6832      	ldr	r2, [r6, #0]
 800d804:	f003 0306 	and.w	r3, r3, #6
 800d808:	2b04      	cmp	r3, #4
 800d80a:	bf08      	it	eq
 800d80c:	1aad      	subeq	r5, r5, r2
 800d80e:	68a3      	ldr	r3, [r4, #8]
 800d810:	6922      	ldr	r2, [r4, #16]
 800d812:	bf0c      	ite	eq
 800d814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d818:	2500      	movne	r5, #0
 800d81a:	4293      	cmp	r3, r2
 800d81c:	bfc4      	itt	gt
 800d81e:	1a9b      	subgt	r3, r3, r2
 800d820:	18ed      	addgt	r5, r5, r3
 800d822:	2600      	movs	r6, #0
 800d824:	341a      	adds	r4, #26
 800d826:	42b5      	cmp	r5, r6
 800d828:	d11a      	bne.n	800d860 <_printf_common+0xc8>
 800d82a:	2000      	movs	r0, #0
 800d82c:	e008      	b.n	800d840 <_printf_common+0xa8>
 800d82e:	2301      	movs	r3, #1
 800d830:	4652      	mov	r2, sl
 800d832:	4649      	mov	r1, r9
 800d834:	4638      	mov	r0, r7
 800d836:	47c0      	blx	r8
 800d838:	3001      	adds	r0, #1
 800d83a:	d103      	bne.n	800d844 <_printf_common+0xac>
 800d83c:	f04f 30ff 	mov.w	r0, #4294967295
 800d840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d844:	3501      	adds	r5, #1
 800d846:	e7c6      	b.n	800d7d6 <_printf_common+0x3e>
 800d848:	18e1      	adds	r1, r4, r3
 800d84a:	1c5a      	adds	r2, r3, #1
 800d84c:	2030      	movs	r0, #48	; 0x30
 800d84e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d852:	4422      	add	r2, r4
 800d854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d85c:	3302      	adds	r3, #2
 800d85e:	e7c7      	b.n	800d7f0 <_printf_common+0x58>
 800d860:	2301      	movs	r3, #1
 800d862:	4622      	mov	r2, r4
 800d864:	4649      	mov	r1, r9
 800d866:	4638      	mov	r0, r7
 800d868:	47c0      	blx	r8
 800d86a:	3001      	adds	r0, #1
 800d86c:	d0e6      	beq.n	800d83c <_printf_common+0xa4>
 800d86e:	3601      	adds	r6, #1
 800d870:	e7d9      	b.n	800d826 <_printf_common+0x8e>
	...

0800d874 <_printf_i>:
 800d874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d878:	7e0f      	ldrb	r7, [r1, #24]
 800d87a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d87c:	2f78      	cmp	r7, #120	; 0x78
 800d87e:	4691      	mov	r9, r2
 800d880:	4680      	mov	r8, r0
 800d882:	460c      	mov	r4, r1
 800d884:	469a      	mov	sl, r3
 800d886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d88a:	d807      	bhi.n	800d89c <_printf_i+0x28>
 800d88c:	2f62      	cmp	r7, #98	; 0x62
 800d88e:	d80a      	bhi.n	800d8a6 <_printf_i+0x32>
 800d890:	2f00      	cmp	r7, #0
 800d892:	f000 80d8 	beq.w	800da46 <_printf_i+0x1d2>
 800d896:	2f58      	cmp	r7, #88	; 0x58
 800d898:	f000 80a3 	beq.w	800d9e2 <_printf_i+0x16e>
 800d89c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8a4:	e03a      	b.n	800d91c <_printf_i+0xa8>
 800d8a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8aa:	2b15      	cmp	r3, #21
 800d8ac:	d8f6      	bhi.n	800d89c <_printf_i+0x28>
 800d8ae:	a101      	add	r1, pc, #4	; (adr r1, 800d8b4 <_printf_i+0x40>)
 800d8b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8b4:	0800d90d 	.word	0x0800d90d
 800d8b8:	0800d921 	.word	0x0800d921
 800d8bc:	0800d89d 	.word	0x0800d89d
 800d8c0:	0800d89d 	.word	0x0800d89d
 800d8c4:	0800d89d 	.word	0x0800d89d
 800d8c8:	0800d89d 	.word	0x0800d89d
 800d8cc:	0800d921 	.word	0x0800d921
 800d8d0:	0800d89d 	.word	0x0800d89d
 800d8d4:	0800d89d 	.word	0x0800d89d
 800d8d8:	0800d89d 	.word	0x0800d89d
 800d8dc:	0800d89d 	.word	0x0800d89d
 800d8e0:	0800da2d 	.word	0x0800da2d
 800d8e4:	0800d951 	.word	0x0800d951
 800d8e8:	0800da0f 	.word	0x0800da0f
 800d8ec:	0800d89d 	.word	0x0800d89d
 800d8f0:	0800d89d 	.word	0x0800d89d
 800d8f4:	0800da4f 	.word	0x0800da4f
 800d8f8:	0800d89d 	.word	0x0800d89d
 800d8fc:	0800d951 	.word	0x0800d951
 800d900:	0800d89d 	.word	0x0800d89d
 800d904:	0800d89d 	.word	0x0800d89d
 800d908:	0800da17 	.word	0x0800da17
 800d90c:	682b      	ldr	r3, [r5, #0]
 800d90e:	1d1a      	adds	r2, r3, #4
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	602a      	str	r2, [r5, #0]
 800d914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d91c:	2301      	movs	r3, #1
 800d91e:	e0a3      	b.n	800da68 <_printf_i+0x1f4>
 800d920:	6820      	ldr	r0, [r4, #0]
 800d922:	6829      	ldr	r1, [r5, #0]
 800d924:	0606      	lsls	r6, r0, #24
 800d926:	f101 0304 	add.w	r3, r1, #4
 800d92a:	d50a      	bpl.n	800d942 <_printf_i+0xce>
 800d92c:	680e      	ldr	r6, [r1, #0]
 800d92e:	602b      	str	r3, [r5, #0]
 800d930:	2e00      	cmp	r6, #0
 800d932:	da03      	bge.n	800d93c <_printf_i+0xc8>
 800d934:	232d      	movs	r3, #45	; 0x2d
 800d936:	4276      	negs	r6, r6
 800d938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d93c:	485e      	ldr	r0, [pc, #376]	; (800dab8 <_printf_i+0x244>)
 800d93e:	230a      	movs	r3, #10
 800d940:	e019      	b.n	800d976 <_printf_i+0x102>
 800d942:	680e      	ldr	r6, [r1, #0]
 800d944:	602b      	str	r3, [r5, #0]
 800d946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d94a:	bf18      	it	ne
 800d94c:	b236      	sxthne	r6, r6
 800d94e:	e7ef      	b.n	800d930 <_printf_i+0xbc>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	6820      	ldr	r0, [r4, #0]
 800d954:	1d19      	adds	r1, r3, #4
 800d956:	6029      	str	r1, [r5, #0]
 800d958:	0601      	lsls	r1, r0, #24
 800d95a:	d501      	bpl.n	800d960 <_printf_i+0xec>
 800d95c:	681e      	ldr	r6, [r3, #0]
 800d95e:	e002      	b.n	800d966 <_printf_i+0xf2>
 800d960:	0646      	lsls	r6, r0, #25
 800d962:	d5fb      	bpl.n	800d95c <_printf_i+0xe8>
 800d964:	881e      	ldrh	r6, [r3, #0]
 800d966:	4854      	ldr	r0, [pc, #336]	; (800dab8 <_printf_i+0x244>)
 800d968:	2f6f      	cmp	r7, #111	; 0x6f
 800d96a:	bf0c      	ite	eq
 800d96c:	2308      	moveq	r3, #8
 800d96e:	230a      	movne	r3, #10
 800d970:	2100      	movs	r1, #0
 800d972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d976:	6865      	ldr	r5, [r4, #4]
 800d978:	60a5      	str	r5, [r4, #8]
 800d97a:	2d00      	cmp	r5, #0
 800d97c:	bfa2      	ittt	ge
 800d97e:	6821      	ldrge	r1, [r4, #0]
 800d980:	f021 0104 	bicge.w	r1, r1, #4
 800d984:	6021      	strge	r1, [r4, #0]
 800d986:	b90e      	cbnz	r6, 800d98c <_printf_i+0x118>
 800d988:	2d00      	cmp	r5, #0
 800d98a:	d04d      	beq.n	800da28 <_printf_i+0x1b4>
 800d98c:	4615      	mov	r5, r2
 800d98e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d992:	fb03 6711 	mls	r7, r3, r1, r6
 800d996:	5dc7      	ldrb	r7, [r0, r7]
 800d998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d99c:	4637      	mov	r7, r6
 800d99e:	42bb      	cmp	r3, r7
 800d9a0:	460e      	mov	r6, r1
 800d9a2:	d9f4      	bls.n	800d98e <_printf_i+0x11a>
 800d9a4:	2b08      	cmp	r3, #8
 800d9a6:	d10b      	bne.n	800d9c0 <_printf_i+0x14c>
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	07de      	lsls	r6, r3, #31
 800d9ac:	d508      	bpl.n	800d9c0 <_printf_i+0x14c>
 800d9ae:	6923      	ldr	r3, [r4, #16]
 800d9b0:	6861      	ldr	r1, [r4, #4]
 800d9b2:	4299      	cmp	r1, r3
 800d9b4:	bfde      	ittt	le
 800d9b6:	2330      	movle	r3, #48	; 0x30
 800d9b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d9bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d9c0:	1b52      	subs	r2, r2, r5
 800d9c2:	6122      	str	r2, [r4, #16]
 800d9c4:	f8cd a000 	str.w	sl, [sp]
 800d9c8:	464b      	mov	r3, r9
 800d9ca:	aa03      	add	r2, sp, #12
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	4640      	mov	r0, r8
 800d9d0:	f7ff fee2 	bl	800d798 <_printf_common>
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	d14c      	bne.n	800da72 <_printf_i+0x1fe>
 800d9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9dc:	b004      	add	sp, #16
 800d9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e2:	4835      	ldr	r0, [pc, #212]	; (800dab8 <_printf_i+0x244>)
 800d9e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d9e8:	6829      	ldr	r1, [r5, #0]
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800d9f0:	6029      	str	r1, [r5, #0]
 800d9f2:	061d      	lsls	r5, r3, #24
 800d9f4:	d514      	bpl.n	800da20 <_printf_i+0x1ac>
 800d9f6:	07df      	lsls	r7, r3, #31
 800d9f8:	bf44      	itt	mi
 800d9fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d9fe:	6023      	strmi	r3, [r4, #0]
 800da00:	b91e      	cbnz	r6, 800da0a <_printf_i+0x196>
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	f023 0320 	bic.w	r3, r3, #32
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	2310      	movs	r3, #16
 800da0c:	e7b0      	b.n	800d970 <_printf_i+0xfc>
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	f043 0320 	orr.w	r3, r3, #32
 800da14:	6023      	str	r3, [r4, #0]
 800da16:	2378      	movs	r3, #120	; 0x78
 800da18:	4828      	ldr	r0, [pc, #160]	; (800dabc <_printf_i+0x248>)
 800da1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da1e:	e7e3      	b.n	800d9e8 <_printf_i+0x174>
 800da20:	0659      	lsls	r1, r3, #25
 800da22:	bf48      	it	mi
 800da24:	b2b6      	uxthmi	r6, r6
 800da26:	e7e6      	b.n	800d9f6 <_printf_i+0x182>
 800da28:	4615      	mov	r5, r2
 800da2a:	e7bb      	b.n	800d9a4 <_printf_i+0x130>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	6826      	ldr	r6, [r4, #0]
 800da30:	6961      	ldr	r1, [r4, #20]
 800da32:	1d18      	adds	r0, r3, #4
 800da34:	6028      	str	r0, [r5, #0]
 800da36:	0635      	lsls	r5, r6, #24
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	d501      	bpl.n	800da40 <_printf_i+0x1cc>
 800da3c:	6019      	str	r1, [r3, #0]
 800da3e:	e002      	b.n	800da46 <_printf_i+0x1d2>
 800da40:	0670      	lsls	r0, r6, #25
 800da42:	d5fb      	bpl.n	800da3c <_printf_i+0x1c8>
 800da44:	8019      	strh	r1, [r3, #0]
 800da46:	2300      	movs	r3, #0
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	4615      	mov	r5, r2
 800da4c:	e7ba      	b.n	800d9c4 <_printf_i+0x150>
 800da4e:	682b      	ldr	r3, [r5, #0]
 800da50:	1d1a      	adds	r2, r3, #4
 800da52:	602a      	str	r2, [r5, #0]
 800da54:	681d      	ldr	r5, [r3, #0]
 800da56:	6862      	ldr	r2, [r4, #4]
 800da58:	2100      	movs	r1, #0
 800da5a:	4628      	mov	r0, r5
 800da5c:	f7f2 fbe8 	bl	8000230 <memchr>
 800da60:	b108      	cbz	r0, 800da66 <_printf_i+0x1f2>
 800da62:	1b40      	subs	r0, r0, r5
 800da64:	6060      	str	r0, [r4, #4]
 800da66:	6863      	ldr	r3, [r4, #4]
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	2300      	movs	r3, #0
 800da6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da70:	e7a8      	b.n	800d9c4 <_printf_i+0x150>
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	462a      	mov	r2, r5
 800da76:	4649      	mov	r1, r9
 800da78:	4640      	mov	r0, r8
 800da7a:	47d0      	blx	sl
 800da7c:	3001      	adds	r0, #1
 800da7e:	d0ab      	beq.n	800d9d8 <_printf_i+0x164>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	079b      	lsls	r3, r3, #30
 800da84:	d413      	bmi.n	800daae <_printf_i+0x23a>
 800da86:	68e0      	ldr	r0, [r4, #12]
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	4298      	cmp	r0, r3
 800da8c:	bfb8      	it	lt
 800da8e:	4618      	movlt	r0, r3
 800da90:	e7a4      	b.n	800d9dc <_printf_i+0x168>
 800da92:	2301      	movs	r3, #1
 800da94:	4632      	mov	r2, r6
 800da96:	4649      	mov	r1, r9
 800da98:	4640      	mov	r0, r8
 800da9a:	47d0      	blx	sl
 800da9c:	3001      	adds	r0, #1
 800da9e:	d09b      	beq.n	800d9d8 <_printf_i+0x164>
 800daa0:	3501      	adds	r5, #1
 800daa2:	68e3      	ldr	r3, [r4, #12]
 800daa4:	9903      	ldr	r1, [sp, #12]
 800daa6:	1a5b      	subs	r3, r3, r1
 800daa8:	42ab      	cmp	r3, r5
 800daaa:	dcf2      	bgt.n	800da92 <_printf_i+0x21e>
 800daac:	e7eb      	b.n	800da86 <_printf_i+0x212>
 800daae:	2500      	movs	r5, #0
 800dab0:	f104 0619 	add.w	r6, r4, #25
 800dab4:	e7f5      	b.n	800daa2 <_printf_i+0x22e>
 800dab6:	bf00      	nop
 800dab8:	080100fe 	.word	0x080100fe
 800dabc:	0801010f 	.word	0x0801010f

0800dac0 <iprintf>:
 800dac0:	b40f      	push	{r0, r1, r2, r3}
 800dac2:	4b0a      	ldr	r3, [pc, #40]	; (800daec <iprintf+0x2c>)
 800dac4:	b513      	push	{r0, r1, r4, lr}
 800dac6:	681c      	ldr	r4, [r3, #0]
 800dac8:	b124      	cbz	r4, 800dad4 <iprintf+0x14>
 800daca:	69a3      	ldr	r3, [r4, #24]
 800dacc:	b913      	cbnz	r3, 800dad4 <iprintf+0x14>
 800dace:	4620      	mov	r0, r4
 800dad0:	f001 f9a6 	bl	800ee20 <__sinit>
 800dad4:	ab05      	add	r3, sp, #20
 800dad6:	9a04      	ldr	r2, [sp, #16]
 800dad8:	68a1      	ldr	r1, [r4, #8]
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	4620      	mov	r0, r4
 800dade:	f001 ff63 	bl	800f9a8 <_vfiprintf_r>
 800dae2:	b002      	add	sp, #8
 800dae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dae8:	b004      	add	sp, #16
 800daea:	4770      	bx	lr
 800daec:	20000014 	.word	0x20000014

0800daf0 <_puts_r>:
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	460e      	mov	r6, r1
 800daf4:	4605      	mov	r5, r0
 800daf6:	b118      	cbz	r0, 800db00 <_puts_r+0x10>
 800daf8:	6983      	ldr	r3, [r0, #24]
 800dafa:	b90b      	cbnz	r3, 800db00 <_puts_r+0x10>
 800dafc:	f001 f990 	bl	800ee20 <__sinit>
 800db00:	69ab      	ldr	r3, [r5, #24]
 800db02:	68ac      	ldr	r4, [r5, #8]
 800db04:	b913      	cbnz	r3, 800db0c <_puts_r+0x1c>
 800db06:	4628      	mov	r0, r5
 800db08:	f001 f98a 	bl	800ee20 <__sinit>
 800db0c:	4b2c      	ldr	r3, [pc, #176]	; (800dbc0 <_puts_r+0xd0>)
 800db0e:	429c      	cmp	r4, r3
 800db10:	d120      	bne.n	800db54 <_puts_r+0x64>
 800db12:	686c      	ldr	r4, [r5, #4]
 800db14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db16:	07db      	lsls	r3, r3, #31
 800db18:	d405      	bmi.n	800db26 <_puts_r+0x36>
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	0598      	lsls	r0, r3, #22
 800db1e:	d402      	bmi.n	800db26 <_puts_r+0x36>
 800db20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db22:	f001 fa20 	bl	800ef66 <__retarget_lock_acquire_recursive>
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	0719      	lsls	r1, r3, #28
 800db2a:	d51d      	bpl.n	800db68 <_puts_r+0x78>
 800db2c:	6923      	ldr	r3, [r4, #16]
 800db2e:	b1db      	cbz	r3, 800db68 <_puts_r+0x78>
 800db30:	3e01      	subs	r6, #1
 800db32:	68a3      	ldr	r3, [r4, #8]
 800db34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db38:	3b01      	subs	r3, #1
 800db3a:	60a3      	str	r3, [r4, #8]
 800db3c:	bb39      	cbnz	r1, 800db8e <_puts_r+0x9e>
 800db3e:	2b00      	cmp	r3, #0
 800db40:	da38      	bge.n	800dbb4 <_puts_r+0xc4>
 800db42:	4622      	mov	r2, r4
 800db44:	210a      	movs	r1, #10
 800db46:	4628      	mov	r0, r5
 800db48:	f000 f916 	bl	800dd78 <__swbuf_r>
 800db4c:	3001      	adds	r0, #1
 800db4e:	d011      	beq.n	800db74 <_puts_r+0x84>
 800db50:	250a      	movs	r5, #10
 800db52:	e011      	b.n	800db78 <_puts_r+0x88>
 800db54:	4b1b      	ldr	r3, [pc, #108]	; (800dbc4 <_puts_r+0xd4>)
 800db56:	429c      	cmp	r4, r3
 800db58:	d101      	bne.n	800db5e <_puts_r+0x6e>
 800db5a:	68ac      	ldr	r4, [r5, #8]
 800db5c:	e7da      	b.n	800db14 <_puts_r+0x24>
 800db5e:	4b1a      	ldr	r3, [pc, #104]	; (800dbc8 <_puts_r+0xd8>)
 800db60:	429c      	cmp	r4, r3
 800db62:	bf08      	it	eq
 800db64:	68ec      	ldreq	r4, [r5, #12]
 800db66:	e7d5      	b.n	800db14 <_puts_r+0x24>
 800db68:	4621      	mov	r1, r4
 800db6a:	4628      	mov	r0, r5
 800db6c:	f000 f956 	bl	800de1c <__swsetup_r>
 800db70:	2800      	cmp	r0, #0
 800db72:	d0dd      	beq.n	800db30 <_puts_r+0x40>
 800db74:	f04f 35ff 	mov.w	r5, #4294967295
 800db78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db7a:	07da      	lsls	r2, r3, #31
 800db7c:	d405      	bmi.n	800db8a <_puts_r+0x9a>
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	059b      	lsls	r3, r3, #22
 800db82:	d402      	bmi.n	800db8a <_puts_r+0x9a>
 800db84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db86:	f001 f9ef 	bl	800ef68 <__retarget_lock_release_recursive>
 800db8a:	4628      	mov	r0, r5
 800db8c:	bd70      	pop	{r4, r5, r6, pc}
 800db8e:	2b00      	cmp	r3, #0
 800db90:	da04      	bge.n	800db9c <_puts_r+0xac>
 800db92:	69a2      	ldr	r2, [r4, #24]
 800db94:	429a      	cmp	r2, r3
 800db96:	dc06      	bgt.n	800dba6 <_puts_r+0xb6>
 800db98:	290a      	cmp	r1, #10
 800db9a:	d004      	beq.n	800dba6 <_puts_r+0xb6>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	6022      	str	r2, [r4, #0]
 800dba2:	7019      	strb	r1, [r3, #0]
 800dba4:	e7c5      	b.n	800db32 <_puts_r+0x42>
 800dba6:	4622      	mov	r2, r4
 800dba8:	4628      	mov	r0, r5
 800dbaa:	f000 f8e5 	bl	800dd78 <__swbuf_r>
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d1bf      	bne.n	800db32 <_puts_r+0x42>
 800dbb2:	e7df      	b.n	800db74 <_puts_r+0x84>
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	250a      	movs	r5, #10
 800dbb8:	1c5a      	adds	r2, r3, #1
 800dbba:	6022      	str	r2, [r4, #0]
 800dbbc:	701d      	strb	r5, [r3, #0]
 800dbbe:	e7db      	b.n	800db78 <_puts_r+0x88>
 800dbc0:	080101d0 	.word	0x080101d0
 800dbc4:	080101f0 	.word	0x080101f0
 800dbc8:	080101b0 	.word	0x080101b0

0800dbcc <puts>:
 800dbcc:	4b02      	ldr	r3, [pc, #8]	; (800dbd8 <puts+0xc>)
 800dbce:	4601      	mov	r1, r0
 800dbd0:	6818      	ldr	r0, [r3, #0]
 800dbd2:	f7ff bf8d 	b.w	800daf0 <_puts_r>
 800dbd6:	bf00      	nop
 800dbd8:	20000014 	.word	0x20000014

0800dbdc <setbuf>:
 800dbdc:	2900      	cmp	r1, #0
 800dbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbe2:	bf0c      	ite	eq
 800dbe4:	2202      	moveq	r2, #2
 800dbe6:	2200      	movne	r2, #0
 800dbe8:	f000 b800 	b.w	800dbec <setvbuf>

0800dbec <setvbuf>:
 800dbec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbf0:	461d      	mov	r5, r3
 800dbf2:	4b5d      	ldr	r3, [pc, #372]	; (800dd68 <setvbuf+0x17c>)
 800dbf4:	681f      	ldr	r7, [r3, #0]
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460e      	mov	r6, r1
 800dbfa:	4690      	mov	r8, r2
 800dbfc:	b127      	cbz	r7, 800dc08 <setvbuf+0x1c>
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	b913      	cbnz	r3, 800dc08 <setvbuf+0x1c>
 800dc02:	4638      	mov	r0, r7
 800dc04:	f001 f90c 	bl	800ee20 <__sinit>
 800dc08:	4b58      	ldr	r3, [pc, #352]	; (800dd6c <setvbuf+0x180>)
 800dc0a:	429c      	cmp	r4, r3
 800dc0c:	d167      	bne.n	800dcde <setvbuf+0xf2>
 800dc0e:	687c      	ldr	r4, [r7, #4]
 800dc10:	f1b8 0f02 	cmp.w	r8, #2
 800dc14:	d006      	beq.n	800dc24 <setvbuf+0x38>
 800dc16:	f1b8 0f01 	cmp.w	r8, #1
 800dc1a:	f200 809f 	bhi.w	800dd5c <setvbuf+0x170>
 800dc1e:	2d00      	cmp	r5, #0
 800dc20:	f2c0 809c 	blt.w	800dd5c <setvbuf+0x170>
 800dc24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc26:	07db      	lsls	r3, r3, #31
 800dc28:	d405      	bmi.n	800dc36 <setvbuf+0x4a>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	0598      	lsls	r0, r3, #22
 800dc2e:	d402      	bmi.n	800dc36 <setvbuf+0x4a>
 800dc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc32:	f001 f998 	bl	800ef66 <__retarget_lock_acquire_recursive>
 800dc36:	4621      	mov	r1, r4
 800dc38:	4638      	mov	r0, r7
 800dc3a:	f001 f85d 	bl	800ecf8 <_fflush_r>
 800dc3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc40:	b141      	cbz	r1, 800dc54 <setvbuf+0x68>
 800dc42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc46:	4299      	cmp	r1, r3
 800dc48:	d002      	beq.n	800dc50 <setvbuf+0x64>
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	f001 fda2 	bl	800f794 <_free_r>
 800dc50:	2300      	movs	r3, #0
 800dc52:	6363      	str	r3, [r4, #52]	; 0x34
 800dc54:	2300      	movs	r3, #0
 800dc56:	61a3      	str	r3, [r4, #24]
 800dc58:	6063      	str	r3, [r4, #4]
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	0619      	lsls	r1, r3, #24
 800dc5e:	d503      	bpl.n	800dc68 <setvbuf+0x7c>
 800dc60:	6921      	ldr	r1, [r4, #16]
 800dc62:	4638      	mov	r0, r7
 800dc64:	f001 fd96 	bl	800f794 <_free_r>
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800dc6e:	f023 0303 	bic.w	r3, r3, #3
 800dc72:	f1b8 0f02 	cmp.w	r8, #2
 800dc76:	81a3      	strh	r3, [r4, #12]
 800dc78:	d06c      	beq.n	800dd54 <setvbuf+0x168>
 800dc7a:	ab01      	add	r3, sp, #4
 800dc7c:	466a      	mov	r2, sp
 800dc7e:	4621      	mov	r1, r4
 800dc80:	4638      	mov	r0, r7
 800dc82:	f001 f972 	bl	800ef6a <__swhatbuf_r>
 800dc86:	89a3      	ldrh	r3, [r4, #12]
 800dc88:	4318      	orrs	r0, r3
 800dc8a:	81a0      	strh	r0, [r4, #12]
 800dc8c:	2d00      	cmp	r5, #0
 800dc8e:	d130      	bne.n	800dcf2 <setvbuf+0x106>
 800dc90:	9d00      	ldr	r5, [sp, #0]
 800dc92:	4628      	mov	r0, r5
 800dc94:	f001 f9ce 	bl	800f034 <malloc>
 800dc98:	4606      	mov	r6, r0
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d155      	bne.n	800dd4a <setvbuf+0x15e>
 800dc9e:	f8dd 9000 	ldr.w	r9, [sp]
 800dca2:	45a9      	cmp	r9, r5
 800dca4:	d14a      	bne.n	800dd3c <setvbuf+0x150>
 800dca6:	f04f 35ff 	mov.w	r5, #4294967295
 800dcaa:	2200      	movs	r2, #0
 800dcac:	60a2      	str	r2, [r4, #8]
 800dcae:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800dcb2:	6022      	str	r2, [r4, #0]
 800dcb4:	6122      	str	r2, [r4, #16]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcbc:	6162      	str	r2, [r4, #20]
 800dcbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcc0:	f043 0302 	orr.w	r3, r3, #2
 800dcc4:	07d2      	lsls	r2, r2, #31
 800dcc6:	81a3      	strh	r3, [r4, #12]
 800dcc8:	d405      	bmi.n	800dcd6 <setvbuf+0xea>
 800dcca:	f413 7f00 	tst.w	r3, #512	; 0x200
 800dcce:	d102      	bne.n	800dcd6 <setvbuf+0xea>
 800dcd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcd2:	f001 f949 	bl	800ef68 <__retarget_lock_release_recursive>
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	b003      	add	sp, #12
 800dcda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcde:	4b24      	ldr	r3, [pc, #144]	; (800dd70 <setvbuf+0x184>)
 800dce0:	429c      	cmp	r4, r3
 800dce2:	d101      	bne.n	800dce8 <setvbuf+0xfc>
 800dce4:	68bc      	ldr	r4, [r7, #8]
 800dce6:	e793      	b.n	800dc10 <setvbuf+0x24>
 800dce8:	4b22      	ldr	r3, [pc, #136]	; (800dd74 <setvbuf+0x188>)
 800dcea:	429c      	cmp	r4, r3
 800dcec:	bf08      	it	eq
 800dcee:	68fc      	ldreq	r4, [r7, #12]
 800dcf0:	e78e      	b.n	800dc10 <setvbuf+0x24>
 800dcf2:	2e00      	cmp	r6, #0
 800dcf4:	d0cd      	beq.n	800dc92 <setvbuf+0xa6>
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	b913      	cbnz	r3, 800dd00 <setvbuf+0x114>
 800dcfa:	4638      	mov	r0, r7
 800dcfc:	f001 f890 	bl	800ee20 <__sinit>
 800dd00:	f1b8 0f01 	cmp.w	r8, #1
 800dd04:	bf08      	it	eq
 800dd06:	89a3      	ldrheq	r3, [r4, #12]
 800dd08:	6026      	str	r6, [r4, #0]
 800dd0a:	bf04      	itt	eq
 800dd0c:	f043 0301 	orreq.w	r3, r3, #1
 800dd10:	81a3      	strheq	r3, [r4, #12]
 800dd12:	89a2      	ldrh	r2, [r4, #12]
 800dd14:	f012 0308 	ands.w	r3, r2, #8
 800dd18:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800dd1c:	d01c      	beq.n	800dd58 <setvbuf+0x16c>
 800dd1e:	07d3      	lsls	r3, r2, #31
 800dd20:	bf41      	itttt	mi
 800dd22:	2300      	movmi	r3, #0
 800dd24:	426d      	negmi	r5, r5
 800dd26:	60a3      	strmi	r3, [r4, #8]
 800dd28:	61a5      	strmi	r5, [r4, #24]
 800dd2a:	bf58      	it	pl
 800dd2c:	60a5      	strpl	r5, [r4, #8]
 800dd2e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800dd30:	f015 0501 	ands.w	r5, r5, #1
 800dd34:	d115      	bne.n	800dd62 <setvbuf+0x176>
 800dd36:	f412 7f00 	tst.w	r2, #512	; 0x200
 800dd3a:	e7c8      	b.n	800dcce <setvbuf+0xe2>
 800dd3c:	4648      	mov	r0, r9
 800dd3e:	f001 f979 	bl	800f034 <malloc>
 800dd42:	4606      	mov	r6, r0
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d0ae      	beq.n	800dca6 <setvbuf+0xba>
 800dd48:	464d      	mov	r5, r9
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd50:	81a3      	strh	r3, [r4, #12]
 800dd52:	e7d0      	b.n	800dcf6 <setvbuf+0x10a>
 800dd54:	2500      	movs	r5, #0
 800dd56:	e7a8      	b.n	800dcaa <setvbuf+0xbe>
 800dd58:	60a3      	str	r3, [r4, #8]
 800dd5a:	e7e8      	b.n	800dd2e <setvbuf+0x142>
 800dd5c:	f04f 35ff 	mov.w	r5, #4294967295
 800dd60:	e7b9      	b.n	800dcd6 <setvbuf+0xea>
 800dd62:	2500      	movs	r5, #0
 800dd64:	e7b7      	b.n	800dcd6 <setvbuf+0xea>
 800dd66:	bf00      	nop
 800dd68:	20000014 	.word	0x20000014
 800dd6c:	080101d0 	.word	0x080101d0
 800dd70:	080101f0 	.word	0x080101f0
 800dd74:	080101b0 	.word	0x080101b0

0800dd78 <__swbuf_r>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	460e      	mov	r6, r1
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	4605      	mov	r5, r0
 800dd80:	b118      	cbz	r0, 800dd8a <__swbuf_r+0x12>
 800dd82:	6983      	ldr	r3, [r0, #24]
 800dd84:	b90b      	cbnz	r3, 800dd8a <__swbuf_r+0x12>
 800dd86:	f001 f84b 	bl	800ee20 <__sinit>
 800dd8a:	4b21      	ldr	r3, [pc, #132]	; (800de10 <__swbuf_r+0x98>)
 800dd8c:	429c      	cmp	r4, r3
 800dd8e:	d12b      	bne.n	800dde8 <__swbuf_r+0x70>
 800dd90:	686c      	ldr	r4, [r5, #4]
 800dd92:	69a3      	ldr	r3, [r4, #24]
 800dd94:	60a3      	str	r3, [r4, #8]
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	071a      	lsls	r2, r3, #28
 800dd9a:	d52f      	bpl.n	800ddfc <__swbuf_r+0x84>
 800dd9c:	6923      	ldr	r3, [r4, #16]
 800dd9e:	b36b      	cbz	r3, 800ddfc <__swbuf_r+0x84>
 800dda0:	6923      	ldr	r3, [r4, #16]
 800dda2:	6820      	ldr	r0, [r4, #0]
 800dda4:	1ac0      	subs	r0, r0, r3
 800dda6:	6963      	ldr	r3, [r4, #20]
 800dda8:	b2f6      	uxtb	r6, r6
 800ddaa:	4283      	cmp	r3, r0
 800ddac:	4637      	mov	r7, r6
 800ddae:	dc04      	bgt.n	800ddba <__swbuf_r+0x42>
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	f000 ffa0 	bl	800ecf8 <_fflush_r>
 800ddb8:	bb30      	cbnz	r0, 800de08 <__swbuf_r+0x90>
 800ddba:	68a3      	ldr	r3, [r4, #8]
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	60a3      	str	r3, [r4, #8]
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	6022      	str	r2, [r4, #0]
 800ddc6:	701e      	strb	r6, [r3, #0]
 800ddc8:	6963      	ldr	r3, [r4, #20]
 800ddca:	3001      	adds	r0, #1
 800ddcc:	4283      	cmp	r3, r0
 800ddce:	d004      	beq.n	800ddda <__swbuf_r+0x62>
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	07db      	lsls	r3, r3, #31
 800ddd4:	d506      	bpl.n	800dde4 <__swbuf_r+0x6c>
 800ddd6:	2e0a      	cmp	r6, #10
 800ddd8:	d104      	bne.n	800dde4 <__swbuf_r+0x6c>
 800ddda:	4621      	mov	r1, r4
 800dddc:	4628      	mov	r0, r5
 800ddde:	f000 ff8b 	bl	800ecf8 <_fflush_r>
 800dde2:	b988      	cbnz	r0, 800de08 <__swbuf_r+0x90>
 800dde4:	4638      	mov	r0, r7
 800dde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde8:	4b0a      	ldr	r3, [pc, #40]	; (800de14 <__swbuf_r+0x9c>)
 800ddea:	429c      	cmp	r4, r3
 800ddec:	d101      	bne.n	800ddf2 <__swbuf_r+0x7a>
 800ddee:	68ac      	ldr	r4, [r5, #8]
 800ddf0:	e7cf      	b.n	800dd92 <__swbuf_r+0x1a>
 800ddf2:	4b09      	ldr	r3, [pc, #36]	; (800de18 <__swbuf_r+0xa0>)
 800ddf4:	429c      	cmp	r4, r3
 800ddf6:	bf08      	it	eq
 800ddf8:	68ec      	ldreq	r4, [r5, #12]
 800ddfa:	e7ca      	b.n	800dd92 <__swbuf_r+0x1a>
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	4628      	mov	r0, r5
 800de00:	f000 f80c 	bl	800de1c <__swsetup_r>
 800de04:	2800      	cmp	r0, #0
 800de06:	d0cb      	beq.n	800dda0 <__swbuf_r+0x28>
 800de08:	f04f 37ff 	mov.w	r7, #4294967295
 800de0c:	e7ea      	b.n	800dde4 <__swbuf_r+0x6c>
 800de0e:	bf00      	nop
 800de10:	080101d0 	.word	0x080101d0
 800de14:	080101f0 	.word	0x080101f0
 800de18:	080101b0 	.word	0x080101b0

0800de1c <__swsetup_r>:
 800de1c:	4b32      	ldr	r3, [pc, #200]	; (800dee8 <__swsetup_r+0xcc>)
 800de1e:	b570      	push	{r4, r5, r6, lr}
 800de20:	681d      	ldr	r5, [r3, #0]
 800de22:	4606      	mov	r6, r0
 800de24:	460c      	mov	r4, r1
 800de26:	b125      	cbz	r5, 800de32 <__swsetup_r+0x16>
 800de28:	69ab      	ldr	r3, [r5, #24]
 800de2a:	b913      	cbnz	r3, 800de32 <__swsetup_r+0x16>
 800de2c:	4628      	mov	r0, r5
 800de2e:	f000 fff7 	bl	800ee20 <__sinit>
 800de32:	4b2e      	ldr	r3, [pc, #184]	; (800deec <__swsetup_r+0xd0>)
 800de34:	429c      	cmp	r4, r3
 800de36:	d10f      	bne.n	800de58 <__swsetup_r+0x3c>
 800de38:	686c      	ldr	r4, [r5, #4]
 800de3a:	89a3      	ldrh	r3, [r4, #12]
 800de3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de40:	0719      	lsls	r1, r3, #28
 800de42:	d42c      	bmi.n	800de9e <__swsetup_r+0x82>
 800de44:	06dd      	lsls	r5, r3, #27
 800de46:	d411      	bmi.n	800de6c <__swsetup_r+0x50>
 800de48:	2309      	movs	r3, #9
 800de4a:	6033      	str	r3, [r6, #0]
 800de4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	f04f 30ff 	mov.w	r0, #4294967295
 800de56:	e03e      	b.n	800ded6 <__swsetup_r+0xba>
 800de58:	4b25      	ldr	r3, [pc, #148]	; (800def0 <__swsetup_r+0xd4>)
 800de5a:	429c      	cmp	r4, r3
 800de5c:	d101      	bne.n	800de62 <__swsetup_r+0x46>
 800de5e:	68ac      	ldr	r4, [r5, #8]
 800de60:	e7eb      	b.n	800de3a <__swsetup_r+0x1e>
 800de62:	4b24      	ldr	r3, [pc, #144]	; (800def4 <__swsetup_r+0xd8>)
 800de64:	429c      	cmp	r4, r3
 800de66:	bf08      	it	eq
 800de68:	68ec      	ldreq	r4, [r5, #12]
 800de6a:	e7e6      	b.n	800de3a <__swsetup_r+0x1e>
 800de6c:	0758      	lsls	r0, r3, #29
 800de6e:	d512      	bpl.n	800de96 <__swsetup_r+0x7a>
 800de70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de72:	b141      	cbz	r1, 800de86 <__swsetup_r+0x6a>
 800de74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de78:	4299      	cmp	r1, r3
 800de7a:	d002      	beq.n	800de82 <__swsetup_r+0x66>
 800de7c:	4630      	mov	r0, r6
 800de7e:	f001 fc89 	bl	800f794 <_free_r>
 800de82:	2300      	movs	r3, #0
 800de84:	6363      	str	r3, [r4, #52]	; 0x34
 800de86:	89a3      	ldrh	r3, [r4, #12]
 800de88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de8c:	81a3      	strh	r3, [r4, #12]
 800de8e:	2300      	movs	r3, #0
 800de90:	6063      	str	r3, [r4, #4]
 800de92:	6923      	ldr	r3, [r4, #16]
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	f043 0308 	orr.w	r3, r3, #8
 800de9c:	81a3      	strh	r3, [r4, #12]
 800de9e:	6923      	ldr	r3, [r4, #16]
 800dea0:	b94b      	cbnz	r3, 800deb6 <__swsetup_r+0x9a>
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deac:	d003      	beq.n	800deb6 <__swsetup_r+0x9a>
 800deae:	4621      	mov	r1, r4
 800deb0:	4630      	mov	r0, r6
 800deb2:	f001 f87f 	bl	800efb4 <__smakebuf_r>
 800deb6:	89a0      	ldrh	r0, [r4, #12]
 800deb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800debc:	f010 0301 	ands.w	r3, r0, #1
 800dec0:	d00a      	beq.n	800ded8 <__swsetup_r+0xbc>
 800dec2:	2300      	movs	r3, #0
 800dec4:	60a3      	str	r3, [r4, #8]
 800dec6:	6963      	ldr	r3, [r4, #20]
 800dec8:	425b      	negs	r3, r3
 800deca:	61a3      	str	r3, [r4, #24]
 800decc:	6923      	ldr	r3, [r4, #16]
 800dece:	b943      	cbnz	r3, 800dee2 <__swsetup_r+0xc6>
 800ded0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ded4:	d1ba      	bne.n	800de4c <__swsetup_r+0x30>
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
 800ded8:	0781      	lsls	r1, r0, #30
 800deda:	bf58      	it	pl
 800dedc:	6963      	ldrpl	r3, [r4, #20]
 800dede:	60a3      	str	r3, [r4, #8]
 800dee0:	e7f4      	b.n	800decc <__swsetup_r+0xb0>
 800dee2:	2000      	movs	r0, #0
 800dee4:	e7f7      	b.n	800ded6 <__swsetup_r+0xba>
 800dee6:	bf00      	nop
 800dee8:	20000014 	.word	0x20000014
 800deec:	080101d0 	.word	0x080101d0
 800def0:	080101f0 	.word	0x080101f0
 800def4:	080101b0 	.word	0x080101b0

0800def8 <quorem>:
 800def8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	6903      	ldr	r3, [r0, #16]
 800defe:	690c      	ldr	r4, [r1, #16]
 800df00:	42a3      	cmp	r3, r4
 800df02:	4607      	mov	r7, r0
 800df04:	f2c0 8081 	blt.w	800e00a <quorem+0x112>
 800df08:	3c01      	subs	r4, #1
 800df0a:	f101 0814 	add.w	r8, r1, #20
 800df0e:	f100 0514 	add.w	r5, r0, #20
 800df12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df16:	9301      	str	r3, [sp, #4]
 800df18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df20:	3301      	adds	r3, #1
 800df22:	429a      	cmp	r2, r3
 800df24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800df28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df2c:	fbb2 f6f3 	udiv	r6, r2, r3
 800df30:	d331      	bcc.n	800df96 <quorem+0x9e>
 800df32:	f04f 0e00 	mov.w	lr, #0
 800df36:	4640      	mov	r0, r8
 800df38:	46ac      	mov	ip, r5
 800df3a:	46f2      	mov	sl, lr
 800df3c:	f850 2b04 	ldr.w	r2, [r0], #4
 800df40:	b293      	uxth	r3, r2
 800df42:	fb06 e303 	mla	r3, r6, r3, lr
 800df46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	ebaa 0303 	sub.w	r3, sl, r3
 800df50:	f8dc a000 	ldr.w	sl, [ip]
 800df54:	0c12      	lsrs	r2, r2, #16
 800df56:	fa13 f38a 	uxtah	r3, r3, sl
 800df5a:	fb06 e202 	mla	r2, r6, r2, lr
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	9b00      	ldr	r3, [sp, #0]
 800df62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800df66:	b292      	uxth	r2, r2
 800df68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800df6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df70:	f8bd 3000 	ldrh.w	r3, [sp]
 800df74:	4581      	cmp	r9, r0
 800df76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df7a:	f84c 3b04 	str.w	r3, [ip], #4
 800df7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800df82:	d2db      	bcs.n	800df3c <quorem+0x44>
 800df84:	f855 300b 	ldr.w	r3, [r5, fp]
 800df88:	b92b      	cbnz	r3, 800df96 <quorem+0x9e>
 800df8a:	9b01      	ldr	r3, [sp, #4]
 800df8c:	3b04      	subs	r3, #4
 800df8e:	429d      	cmp	r5, r3
 800df90:	461a      	mov	r2, r3
 800df92:	d32e      	bcc.n	800dff2 <quorem+0xfa>
 800df94:	613c      	str	r4, [r7, #16]
 800df96:	4638      	mov	r0, r7
 800df98:	f001 fae4 	bl	800f564 <__mcmp>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	db24      	blt.n	800dfea <quorem+0xf2>
 800dfa0:	3601      	adds	r6, #1
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	f04f 0c00 	mov.w	ip, #0
 800dfa8:	f858 2b04 	ldr.w	r2, [r8], #4
 800dfac:	f8d0 e000 	ldr.w	lr, [r0]
 800dfb0:	b293      	uxth	r3, r2
 800dfb2:	ebac 0303 	sub.w	r3, ip, r3
 800dfb6:	0c12      	lsrs	r2, r2, #16
 800dfb8:	fa13 f38e 	uxtah	r3, r3, lr
 800dfbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dfc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfca:	45c1      	cmp	r9, r8
 800dfcc:	f840 3b04 	str.w	r3, [r0], #4
 800dfd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dfd4:	d2e8      	bcs.n	800dfa8 <quorem+0xb0>
 800dfd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfde:	b922      	cbnz	r2, 800dfea <quorem+0xf2>
 800dfe0:	3b04      	subs	r3, #4
 800dfe2:	429d      	cmp	r5, r3
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	d30a      	bcc.n	800dffe <quorem+0x106>
 800dfe8:	613c      	str	r4, [r7, #16]
 800dfea:	4630      	mov	r0, r6
 800dfec:	b003      	add	sp, #12
 800dfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff2:	6812      	ldr	r2, [r2, #0]
 800dff4:	3b04      	subs	r3, #4
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	d1cc      	bne.n	800df94 <quorem+0x9c>
 800dffa:	3c01      	subs	r4, #1
 800dffc:	e7c7      	b.n	800df8e <quorem+0x96>
 800dffe:	6812      	ldr	r2, [r2, #0]
 800e000:	3b04      	subs	r3, #4
 800e002:	2a00      	cmp	r2, #0
 800e004:	d1f0      	bne.n	800dfe8 <quorem+0xf0>
 800e006:	3c01      	subs	r4, #1
 800e008:	e7eb      	b.n	800dfe2 <quorem+0xea>
 800e00a:	2000      	movs	r0, #0
 800e00c:	e7ee      	b.n	800dfec <quorem+0xf4>
	...

0800e010 <_dtoa_r>:
 800e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	ed2d 8b04 	vpush	{d8-d9}
 800e018:	ec57 6b10 	vmov	r6, r7, d0
 800e01c:	b093      	sub	sp, #76	; 0x4c
 800e01e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e020:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e024:	9106      	str	r1, [sp, #24]
 800e026:	ee10 aa10 	vmov	sl, s0
 800e02a:	4604      	mov	r4, r0
 800e02c:	9209      	str	r2, [sp, #36]	; 0x24
 800e02e:	930c      	str	r3, [sp, #48]	; 0x30
 800e030:	46bb      	mov	fp, r7
 800e032:	b975      	cbnz	r5, 800e052 <_dtoa_r+0x42>
 800e034:	2010      	movs	r0, #16
 800e036:	f000 fffd 	bl	800f034 <malloc>
 800e03a:	4602      	mov	r2, r0
 800e03c:	6260      	str	r0, [r4, #36]	; 0x24
 800e03e:	b920      	cbnz	r0, 800e04a <_dtoa_r+0x3a>
 800e040:	4ba7      	ldr	r3, [pc, #668]	; (800e2e0 <_dtoa_r+0x2d0>)
 800e042:	21ea      	movs	r1, #234	; 0xea
 800e044:	48a7      	ldr	r0, [pc, #668]	; (800e2e4 <_dtoa_r+0x2d4>)
 800e046:	f001 fe45 	bl	800fcd4 <__assert_func>
 800e04a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e04e:	6005      	str	r5, [r0, #0]
 800e050:	60c5      	str	r5, [r0, #12]
 800e052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e054:	6819      	ldr	r1, [r3, #0]
 800e056:	b151      	cbz	r1, 800e06e <_dtoa_r+0x5e>
 800e058:	685a      	ldr	r2, [r3, #4]
 800e05a:	604a      	str	r2, [r1, #4]
 800e05c:	2301      	movs	r3, #1
 800e05e:	4093      	lsls	r3, r2
 800e060:	608b      	str	r3, [r1, #8]
 800e062:	4620      	mov	r0, r4
 800e064:	f001 f83c 	bl	800f0e0 <_Bfree>
 800e068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e06a:	2200      	movs	r2, #0
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	1e3b      	subs	r3, r7, #0
 800e070:	bfaa      	itet	ge
 800e072:	2300      	movge	r3, #0
 800e074:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e078:	f8c8 3000 	strge.w	r3, [r8]
 800e07c:	4b9a      	ldr	r3, [pc, #616]	; (800e2e8 <_dtoa_r+0x2d8>)
 800e07e:	bfbc      	itt	lt
 800e080:	2201      	movlt	r2, #1
 800e082:	f8c8 2000 	strlt.w	r2, [r8]
 800e086:	ea33 030b 	bics.w	r3, r3, fp
 800e08a:	d11b      	bne.n	800e0c4 <_dtoa_r+0xb4>
 800e08c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e08e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e092:	6013      	str	r3, [r2, #0]
 800e094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e098:	4333      	orrs	r3, r6
 800e09a:	f000 8592 	beq.w	800ebc2 <_dtoa_r+0xbb2>
 800e09e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0a0:	b963      	cbnz	r3, 800e0bc <_dtoa_r+0xac>
 800e0a2:	4b92      	ldr	r3, [pc, #584]	; (800e2ec <_dtoa_r+0x2dc>)
 800e0a4:	e022      	b.n	800e0ec <_dtoa_r+0xdc>
 800e0a6:	4b92      	ldr	r3, [pc, #584]	; (800e2f0 <_dtoa_r+0x2e0>)
 800e0a8:	9301      	str	r3, [sp, #4]
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e0ae:	6013      	str	r3, [r2, #0]
 800e0b0:	9801      	ldr	r0, [sp, #4]
 800e0b2:	b013      	add	sp, #76	; 0x4c
 800e0b4:	ecbd 8b04 	vpop	{d8-d9}
 800e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0bc:	4b8b      	ldr	r3, [pc, #556]	; (800e2ec <_dtoa_r+0x2dc>)
 800e0be:	9301      	str	r3, [sp, #4]
 800e0c0:	3303      	adds	r3, #3
 800e0c2:	e7f3      	b.n	800e0ac <_dtoa_r+0x9c>
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	4650      	mov	r0, sl
 800e0ca:	4659      	mov	r1, fp
 800e0cc:	f7f2 fd24 	bl	8000b18 <__aeabi_dcmpeq>
 800e0d0:	ec4b ab19 	vmov	d9, sl, fp
 800e0d4:	4680      	mov	r8, r0
 800e0d6:	b158      	cbz	r0, 800e0f0 <_dtoa_r+0xe0>
 800e0d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0da:	2301      	movs	r3, #1
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 856b 	beq.w	800ebbc <_dtoa_r+0xbac>
 800e0e6:	4883      	ldr	r0, [pc, #524]	; (800e2f4 <_dtoa_r+0x2e4>)
 800e0e8:	6018      	str	r0, [r3, #0]
 800e0ea:	1e43      	subs	r3, r0, #1
 800e0ec:	9301      	str	r3, [sp, #4]
 800e0ee:	e7df      	b.n	800e0b0 <_dtoa_r+0xa0>
 800e0f0:	ec4b ab10 	vmov	d0, sl, fp
 800e0f4:	aa10      	add	r2, sp, #64	; 0x40
 800e0f6:	a911      	add	r1, sp, #68	; 0x44
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f001 fad9 	bl	800f6b0 <__d2b>
 800e0fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e102:	ee08 0a10 	vmov	s16, r0
 800e106:	2d00      	cmp	r5, #0
 800e108:	f000 8084 	beq.w	800e214 <_dtoa_r+0x204>
 800e10c:	ee19 3a90 	vmov	r3, s19
 800e110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e114:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e118:	4656      	mov	r6, sl
 800e11a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e11e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e122:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e126:	4b74      	ldr	r3, [pc, #464]	; (800e2f8 <_dtoa_r+0x2e8>)
 800e128:	2200      	movs	r2, #0
 800e12a:	4630      	mov	r0, r6
 800e12c:	4639      	mov	r1, r7
 800e12e:	f7f2 f8d3 	bl	80002d8 <__aeabi_dsub>
 800e132:	a365      	add	r3, pc, #404	; (adr r3, 800e2c8 <_dtoa_r+0x2b8>)
 800e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e138:	f7f2 fa86 	bl	8000648 <__aeabi_dmul>
 800e13c:	a364      	add	r3, pc, #400	; (adr r3, 800e2d0 <_dtoa_r+0x2c0>)
 800e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e142:	f7f2 f8cb 	bl	80002dc <__adddf3>
 800e146:	4606      	mov	r6, r0
 800e148:	4628      	mov	r0, r5
 800e14a:	460f      	mov	r7, r1
 800e14c:	f7f2 fa12 	bl	8000574 <__aeabi_i2d>
 800e150:	a361      	add	r3, pc, #388	; (adr r3, 800e2d8 <_dtoa_r+0x2c8>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 fa77 	bl	8000648 <__aeabi_dmul>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4630      	mov	r0, r6
 800e160:	4639      	mov	r1, r7
 800e162:	f7f2 f8bb 	bl	80002dc <__adddf3>
 800e166:	4606      	mov	r6, r0
 800e168:	460f      	mov	r7, r1
 800e16a:	f7f2 fd1d 	bl	8000ba8 <__aeabi_d2iz>
 800e16e:	2200      	movs	r2, #0
 800e170:	9000      	str	r0, [sp, #0]
 800e172:	2300      	movs	r3, #0
 800e174:	4630      	mov	r0, r6
 800e176:	4639      	mov	r1, r7
 800e178:	f7f2 fcd8 	bl	8000b2c <__aeabi_dcmplt>
 800e17c:	b150      	cbz	r0, 800e194 <_dtoa_r+0x184>
 800e17e:	9800      	ldr	r0, [sp, #0]
 800e180:	f7f2 f9f8 	bl	8000574 <__aeabi_i2d>
 800e184:	4632      	mov	r2, r6
 800e186:	463b      	mov	r3, r7
 800e188:	f7f2 fcc6 	bl	8000b18 <__aeabi_dcmpeq>
 800e18c:	b910      	cbnz	r0, 800e194 <_dtoa_r+0x184>
 800e18e:	9b00      	ldr	r3, [sp, #0]
 800e190:	3b01      	subs	r3, #1
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	9b00      	ldr	r3, [sp, #0]
 800e196:	2b16      	cmp	r3, #22
 800e198:	d85a      	bhi.n	800e250 <_dtoa_r+0x240>
 800e19a:	9a00      	ldr	r2, [sp, #0]
 800e19c:	4b57      	ldr	r3, [pc, #348]	; (800e2fc <_dtoa_r+0x2ec>)
 800e19e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a6:	ec51 0b19 	vmov	r0, r1, d9
 800e1aa:	f7f2 fcbf 	bl	8000b2c <__aeabi_dcmplt>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d050      	beq.n	800e254 <_dtoa_r+0x244>
 800e1b2:	9b00      	ldr	r3, [sp, #0]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1be:	1b5d      	subs	r5, r3, r5
 800e1c0:	1e6b      	subs	r3, r5, #1
 800e1c2:	9305      	str	r3, [sp, #20]
 800e1c4:	bf45      	ittet	mi
 800e1c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e1ca:	9304      	strmi	r3, [sp, #16]
 800e1cc:	2300      	movpl	r3, #0
 800e1ce:	2300      	movmi	r3, #0
 800e1d0:	bf4c      	ite	mi
 800e1d2:	9305      	strmi	r3, [sp, #20]
 800e1d4:	9304      	strpl	r3, [sp, #16]
 800e1d6:	9b00      	ldr	r3, [sp, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	db3d      	blt.n	800e258 <_dtoa_r+0x248>
 800e1dc:	9b05      	ldr	r3, [sp, #20]
 800e1de:	9a00      	ldr	r2, [sp, #0]
 800e1e0:	920a      	str	r2, [sp, #40]	; 0x28
 800e1e2:	4413      	add	r3, r2
 800e1e4:	9305      	str	r3, [sp, #20]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	9307      	str	r3, [sp, #28]
 800e1ea:	9b06      	ldr	r3, [sp, #24]
 800e1ec:	2b09      	cmp	r3, #9
 800e1ee:	f200 8089 	bhi.w	800e304 <_dtoa_r+0x2f4>
 800e1f2:	2b05      	cmp	r3, #5
 800e1f4:	bfc4      	itt	gt
 800e1f6:	3b04      	subgt	r3, #4
 800e1f8:	9306      	strgt	r3, [sp, #24]
 800e1fa:	9b06      	ldr	r3, [sp, #24]
 800e1fc:	f1a3 0302 	sub.w	r3, r3, #2
 800e200:	bfcc      	ite	gt
 800e202:	2500      	movgt	r5, #0
 800e204:	2501      	movle	r5, #1
 800e206:	2b03      	cmp	r3, #3
 800e208:	f200 8087 	bhi.w	800e31a <_dtoa_r+0x30a>
 800e20c:	e8df f003 	tbb	[pc, r3]
 800e210:	59383a2d 	.word	0x59383a2d
 800e214:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e218:	441d      	add	r5, r3
 800e21a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e21e:	2b20      	cmp	r3, #32
 800e220:	bfc1      	itttt	gt
 800e222:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e226:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e22a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e22e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e232:	bfda      	itte	le
 800e234:	f1c3 0320 	rsble	r3, r3, #32
 800e238:	fa06 f003 	lslle.w	r0, r6, r3
 800e23c:	4318      	orrgt	r0, r3
 800e23e:	f7f2 f989 	bl	8000554 <__aeabi_ui2d>
 800e242:	2301      	movs	r3, #1
 800e244:	4606      	mov	r6, r0
 800e246:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e24a:	3d01      	subs	r5, #1
 800e24c:	930e      	str	r3, [sp, #56]	; 0x38
 800e24e:	e76a      	b.n	800e126 <_dtoa_r+0x116>
 800e250:	2301      	movs	r3, #1
 800e252:	e7b2      	b.n	800e1ba <_dtoa_r+0x1aa>
 800e254:	900b      	str	r0, [sp, #44]	; 0x2c
 800e256:	e7b1      	b.n	800e1bc <_dtoa_r+0x1ac>
 800e258:	9b04      	ldr	r3, [sp, #16]
 800e25a:	9a00      	ldr	r2, [sp, #0]
 800e25c:	1a9b      	subs	r3, r3, r2
 800e25e:	9304      	str	r3, [sp, #16]
 800e260:	4253      	negs	r3, r2
 800e262:	9307      	str	r3, [sp, #28]
 800e264:	2300      	movs	r3, #0
 800e266:	930a      	str	r3, [sp, #40]	; 0x28
 800e268:	e7bf      	b.n	800e1ea <_dtoa_r+0x1da>
 800e26a:	2300      	movs	r3, #0
 800e26c:	9308      	str	r3, [sp, #32]
 800e26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e270:	2b00      	cmp	r3, #0
 800e272:	dc55      	bgt.n	800e320 <_dtoa_r+0x310>
 800e274:	2301      	movs	r3, #1
 800e276:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e27a:	461a      	mov	r2, r3
 800e27c:	9209      	str	r2, [sp, #36]	; 0x24
 800e27e:	e00c      	b.n	800e29a <_dtoa_r+0x28a>
 800e280:	2301      	movs	r3, #1
 800e282:	e7f3      	b.n	800e26c <_dtoa_r+0x25c>
 800e284:	2300      	movs	r3, #0
 800e286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e288:	9308      	str	r3, [sp, #32]
 800e28a:	9b00      	ldr	r3, [sp, #0]
 800e28c:	4413      	add	r3, r2
 800e28e:	9302      	str	r3, [sp, #8]
 800e290:	3301      	adds	r3, #1
 800e292:	2b01      	cmp	r3, #1
 800e294:	9303      	str	r3, [sp, #12]
 800e296:	bfb8      	it	lt
 800e298:	2301      	movlt	r3, #1
 800e29a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e29c:	2200      	movs	r2, #0
 800e29e:	6042      	str	r2, [r0, #4]
 800e2a0:	2204      	movs	r2, #4
 800e2a2:	f102 0614 	add.w	r6, r2, #20
 800e2a6:	429e      	cmp	r6, r3
 800e2a8:	6841      	ldr	r1, [r0, #4]
 800e2aa:	d93d      	bls.n	800e328 <_dtoa_r+0x318>
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f000 fed7 	bl	800f060 <_Balloc>
 800e2b2:	9001      	str	r0, [sp, #4]
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d13b      	bne.n	800e330 <_dtoa_r+0x320>
 800e2b8:	4b11      	ldr	r3, [pc, #68]	; (800e300 <_dtoa_r+0x2f0>)
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e2c0:	e6c0      	b.n	800e044 <_dtoa_r+0x34>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e7df      	b.n	800e286 <_dtoa_r+0x276>
 800e2c6:	bf00      	nop
 800e2c8:	636f4361 	.word	0x636f4361
 800e2cc:	3fd287a7 	.word	0x3fd287a7
 800e2d0:	8b60c8b3 	.word	0x8b60c8b3
 800e2d4:	3fc68a28 	.word	0x3fc68a28
 800e2d8:	509f79fb 	.word	0x509f79fb
 800e2dc:	3fd34413 	.word	0x3fd34413
 800e2e0:	0801012d 	.word	0x0801012d
 800e2e4:	08010144 	.word	0x08010144
 800e2e8:	7ff00000 	.word	0x7ff00000
 800e2ec:	08010129 	.word	0x08010129
 800e2f0:	08010120 	.word	0x08010120
 800e2f4:	080100fd 	.word	0x080100fd
 800e2f8:	3ff80000 	.word	0x3ff80000
 800e2fc:	08010298 	.word	0x08010298
 800e300:	0801019f 	.word	0x0801019f
 800e304:	2501      	movs	r5, #1
 800e306:	2300      	movs	r3, #0
 800e308:	9306      	str	r3, [sp, #24]
 800e30a:	9508      	str	r5, [sp, #32]
 800e30c:	f04f 33ff 	mov.w	r3, #4294967295
 800e310:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e314:	2200      	movs	r2, #0
 800e316:	2312      	movs	r3, #18
 800e318:	e7b0      	b.n	800e27c <_dtoa_r+0x26c>
 800e31a:	2301      	movs	r3, #1
 800e31c:	9308      	str	r3, [sp, #32]
 800e31e:	e7f5      	b.n	800e30c <_dtoa_r+0x2fc>
 800e320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e322:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e326:	e7b8      	b.n	800e29a <_dtoa_r+0x28a>
 800e328:	3101      	adds	r1, #1
 800e32a:	6041      	str	r1, [r0, #4]
 800e32c:	0052      	lsls	r2, r2, #1
 800e32e:	e7b8      	b.n	800e2a2 <_dtoa_r+0x292>
 800e330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e332:	9a01      	ldr	r2, [sp, #4]
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	9b03      	ldr	r3, [sp, #12]
 800e338:	2b0e      	cmp	r3, #14
 800e33a:	f200 809d 	bhi.w	800e478 <_dtoa_r+0x468>
 800e33e:	2d00      	cmp	r5, #0
 800e340:	f000 809a 	beq.w	800e478 <_dtoa_r+0x468>
 800e344:	9b00      	ldr	r3, [sp, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	dd32      	ble.n	800e3b0 <_dtoa_r+0x3a0>
 800e34a:	4ab7      	ldr	r2, [pc, #732]	; (800e628 <_dtoa_r+0x618>)
 800e34c:	f003 030f 	and.w	r3, r3, #15
 800e350:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e354:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e358:	9b00      	ldr	r3, [sp, #0]
 800e35a:	05d8      	lsls	r0, r3, #23
 800e35c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e360:	d516      	bpl.n	800e390 <_dtoa_r+0x380>
 800e362:	4bb2      	ldr	r3, [pc, #712]	; (800e62c <_dtoa_r+0x61c>)
 800e364:	ec51 0b19 	vmov	r0, r1, d9
 800e368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e36c:	f7f2 fa96 	bl	800089c <__aeabi_ddiv>
 800e370:	f007 070f 	and.w	r7, r7, #15
 800e374:	4682      	mov	sl, r0
 800e376:	468b      	mov	fp, r1
 800e378:	2503      	movs	r5, #3
 800e37a:	4eac      	ldr	r6, [pc, #688]	; (800e62c <_dtoa_r+0x61c>)
 800e37c:	b957      	cbnz	r7, 800e394 <_dtoa_r+0x384>
 800e37e:	4642      	mov	r2, r8
 800e380:	464b      	mov	r3, r9
 800e382:	4650      	mov	r0, sl
 800e384:	4659      	mov	r1, fp
 800e386:	f7f2 fa89 	bl	800089c <__aeabi_ddiv>
 800e38a:	4682      	mov	sl, r0
 800e38c:	468b      	mov	fp, r1
 800e38e:	e028      	b.n	800e3e2 <_dtoa_r+0x3d2>
 800e390:	2502      	movs	r5, #2
 800e392:	e7f2      	b.n	800e37a <_dtoa_r+0x36a>
 800e394:	07f9      	lsls	r1, r7, #31
 800e396:	d508      	bpl.n	800e3aa <_dtoa_r+0x39a>
 800e398:	4640      	mov	r0, r8
 800e39a:	4649      	mov	r1, r9
 800e39c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e3a0:	f7f2 f952 	bl	8000648 <__aeabi_dmul>
 800e3a4:	3501      	adds	r5, #1
 800e3a6:	4680      	mov	r8, r0
 800e3a8:	4689      	mov	r9, r1
 800e3aa:	107f      	asrs	r7, r7, #1
 800e3ac:	3608      	adds	r6, #8
 800e3ae:	e7e5      	b.n	800e37c <_dtoa_r+0x36c>
 800e3b0:	f000 809b 	beq.w	800e4ea <_dtoa_r+0x4da>
 800e3b4:	9b00      	ldr	r3, [sp, #0]
 800e3b6:	4f9d      	ldr	r7, [pc, #628]	; (800e62c <_dtoa_r+0x61c>)
 800e3b8:	425e      	negs	r6, r3
 800e3ba:	4b9b      	ldr	r3, [pc, #620]	; (800e628 <_dtoa_r+0x618>)
 800e3bc:	f006 020f 	and.w	r2, r6, #15
 800e3c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c8:	ec51 0b19 	vmov	r0, r1, d9
 800e3cc:	f7f2 f93c 	bl	8000648 <__aeabi_dmul>
 800e3d0:	1136      	asrs	r6, r6, #4
 800e3d2:	4682      	mov	sl, r0
 800e3d4:	468b      	mov	fp, r1
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	2502      	movs	r5, #2
 800e3da:	2e00      	cmp	r6, #0
 800e3dc:	d17a      	bne.n	800e4d4 <_dtoa_r+0x4c4>
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1d3      	bne.n	800e38a <_dtoa_r+0x37a>
 800e3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	f000 8082 	beq.w	800e4ee <_dtoa_r+0x4de>
 800e3ea:	4b91      	ldr	r3, [pc, #580]	; (800e630 <_dtoa_r+0x620>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	4650      	mov	r0, sl
 800e3f0:	4659      	mov	r1, fp
 800e3f2:	f7f2 fb9b 	bl	8000b2c <__aeabi_dcmplt>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d079      	beq.n	800e4ee <_dtoa_r+0x4de>
 800e3fa:	9b03      	ldr	r3, [sp, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d076      	beq.n	800e4ee <_dtoa_r+0x4de>
 800e400:	9b02      	ldr	r3, [sp, #8]
 800e402:	2b00      	cmp	r3, #0
 800e404:	dd36      	ble.n	800e474 <_dtoa_r+0x464>
 800e406:	9b00      	ldr	r3, [sp, #0]
 800e408:	4650      	mov	r0, sl
 800e40a:	4659      	mov	r1, fp
 800e40c:	1e5f      	subs	r7, r3, #1
 800e40e:	2200      	movs	r2, #0
 800e410:	4b88      	ldr	r3, [pc, #544]	; (800e634 <_dtoa_r+0x624>)
 800e412:	f7f2 f919 	bl	8000648 <__aeabi_dmul>
 800e416:	9e02      	ldr	r6, [sp, #8]
 800e418:	4682      	mov	sl, r0
 800e41a:	468b      	mov	fp, r1
 800e41c:	3501      	adds	r5, #1
 800e41e:	4628      	mov	r0, r5
 800e420:	f7f2 f8a8 	bl	8000574 <__aeabi_i2d>
 800e424:	4652      	mov	r2, sl
 800e426:	465b      	mov	r3, fp
 800e428:	f7f2 f90e 	bl	8000648 <__aeabi_dmul>
 800e42c:	4b82      	ldr	r3, [pc, #520]	; (800e638 <_dtoa_r+0x628>)
 800e42e:	2200      	movs	r2, #0
 800e430:	f7f1 ff54 	bl	80002dc <__adddf3>
 800e434:	46d0      	mov	r8, sl
 800e436:	46d9      	mov	r9, fp
 800e438:	4682      	mov	sl, r0
 800e43a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e43e:	2e00      	cmp	r6, #0
 800e440:	d158      	bne.n	800e4f4 <_dtoa_r+0x4e4>
 800e442:	4b7e      	ldr	r3, [pc, #504]	; (800e63c <_dtoa_r+0x62c>)
 800e444:	2200      	movs	r2, #0
 800e446:	4640      	mov	r0, r8
 800e448:	4649      	mov	r1, r9
 800e44a:	f7f1 ff45 	bl	80002d8 <__aeabi_dsub>
 800e44e:	4652      	mov	r2, sl
 800e450:	465b      	mov	r3, fp
 800e452:	4680      	mov	r8, r0
 800e454:	4689      	mov	r9, r1
 800e456:	f7f2 fb87 	bl	8000b68 <__aeabi_dcmpgt>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	f040 8295 	bne.w	800e98a <_dtoa_r+0x97a>
 800e460:	4652      	mov	r2, sl
 800e462:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e466:	4640      	mov	r0, r8
 800e468:	4649      	mov	r1, r9
 800e46a:	f7f2 fb5f 	bl	8000b2c <__aeabi_dcmplt>
 800e46e:	2800      	cmp	r0, #0
 800e470:	f040 8289 	bne.w	800e986 <_dtoa_r+0x976>
 800e474:	ec5b ab19 	vmov	sl, fp, d9
 800e478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f2c0 8148 	blt.w	800e710 <_dtoa_r+0x700>
 800e480:	9a00      	ldr	r2, [sp, #0]
 800e482:	2a0e      	cmp	r2, #14
 800e484:	f300 8144 	bgt.w	800e710 <_dtoa_r+0x700>
 800e488:	4b67      	ldr	r3, [pc, #412]	; (800e628 <_dtoa_r+0x618>)
 800e48a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e48e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e494:	2b00      	cmp	r3, #0
 800e496:	f280 80d5 	bge.w	800e644 <_dtoa_r+0x634>
 800e49a:	9b03      	ldr	r3, [sp, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f300 80d1 	bgt.w	800e644 <_dtoa_r+0x634>
 800e4a2:	f040 826f 	bne.w	800e984 <_dtoa_r+0x974>
 800e4a6:	4b65      	ldr	r3, [pc, #404]	; (800e63c <_dtoa_r+0x62c>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	f7f2 f8cb 	bl	8000648 <__aeabi_dmul>
 800e4b2:	4652      	mov	r2, sl
 800e4b4:	465b      	mov	r3, fp
 800e4b6:	f7f2 fb4d 	bl	8000b54 <__aeabi_dcmpge>
 800e4ba:	9e03      	ldr	r6, [sp, #12]
 800e4bc:	4637      	mov	r7, r6
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	f040 8245 	bne.w	800e94e <_dtoa_r+0x93e>
 800e4c4:	9d01      	ldr	r5, [sp, #4]
 800e4c6:	2331      	movs	r3, #49	; 0x31
 800e4c8:	f805 3b01 	strb.w	r3, [r5], #1
 800e4cc:	9b00      	ldr	r3, [sp, #0]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	e240      	b.n	800e956 <_dtoa_r+0x946>
 800e4d4:	07f2      	lsls	r2, r6, #31
 800e4d6:	d505      	bpl.n	800e4e4 <_dtoa_r+0x4d4>
 800e4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4dc:	f7f2 f8b4 	bl	8000648 <__aeabi_dmul>
 800e4e0:	3501      	adds	r5, #1
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	1076      	asrs	r6, r6, #1
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	e777      	b.n	800e3da <_dtoa_r+0x3ca>
 800e4ea:	2502      	movs	r5, #2
 800e4ec:	e779      	b.n	800e3e2 <_dtoa_r+0x3d2>
 800e4ee:	9f00      	ldr	r7, [sp, #0]
 800e4f0:	9e03      	ldr	r6, [sp, #12]
 800e4f2:	e794      	b.n	800e41e <_dtoa_r+0x40e>
 800e4f4:	9901      	ldr	r1, [sp, #4]
 800e4f6:	4b4c      	ldr	r3, [pc, #304]	; (800e628 <_dtoa_r+0x618>)
 800e4f8:	4431      	add	r1, r6
 800e4fa:	910d      	str	r1, [sp, #52]	; 0x34
 800e4fc:	9908      	ldr	r1, [sp, #32]
 800e4fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e502:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e506:	2900      	cmp	r1, #0
 800e508:	d043      	beq.n	800e592 <_dtoa_r+0x582>
 800e50a:	494d      	ldr	r1, [pc, #308]	; (800e640 <_dtoa_r+0x630>)
 800e50c:	2000      	movs	r0, #0
 800e50e:	f7f2 f9c5 	bl	800089c <__aeabi_ddiv>
 800e512:	4652      	mov	r2, sl
 800e514:	465b      	mov	r3, fp
 800e516:	f7f1 fedf 	bl	80002d8 <__aeabi_dsub>
 800e51a:	9d01      	ldr	r5, [sp, #4]
 800e51c:	4682      	mov	sl, r0
 800e51e:	468b      	mov	fp, r1
 800e520:	4649      	mov	r1, r9
 800e522:	4640      	mov	r0, r8
 800e524:	f7f2 fb40 	bl	8000ba8 <__aeabi_d2iz>
 800e528:	4606      	mov	r6, r0
 800e52a:	f7f2 f823 	bl	8000574 <__aeabi_i2d>
 800e52e:	4602      	mov	r2, r0
 800e530:	460b      	mov	r3, r1
 800e532:	4640      	mov	r0, r8
 800e534:	4649      	mov	r1, r9
 800e536:	f7f1 fecf 	bl	80002d8 <__aeabi_dsub>
 800e53a:	3630      	adds	r6, #48	; 0x30
 800e53c:	f805 6b01 	strb.w	r6, [r5], #1
 800e540:	4652      	mov	r2, sl
 800e542:	465b      	mov	r3, fp
 800e544:	4680      	mov	r8, r0
 800e546:	4689      	mov	r9, r1
 800e548:	f7f2 faf0 	bl	8000b2c <__aeabi_dcmplt>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d163      	bne.n	800e618 <_dtoa_r+0x608>
 800e550:	4642      	mov	r2, r8
 800e552:	464b      	mov	r3, r9
 800e554:	4936      	ldr	r1, [pc, #216]	; (800e630 <_dtoa_r+0x620>)
 800e556:	2000      	movs	r0, #0
 800e558:	f7f1 febe 	bl	80002d8 <__aeabi_dsub>
 800e55c:	4652      	mov	r2, sl
 800e55e:	465b      	mov	r3, fp
 800e560:	f7f2 fae4 	bl	8000b2c <__aeabi_dcmplt>
 800e564:	2800      	cmp	r0, #0
 800e566:	f040 80b5 	bne.w	800e6d4 <_dtoa_r+0x6c4>
 800e56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e56c:	429d      	cmp	r5, r3
 800e56e:	d081      	beq.n	800e474 <_dtoa_r+0x464>
 800e570:	4b30      	ldr	r3, [pc, #192]	; (800e634 <_dtoa_r+0x624>)
 800e572:	2200      	movs	r2, #0
 800e574:	4650      	mov	r0, sl
 800e576:	4659      	mov	r1, fp
 800e578:	f7f2 f866 	bl	8000648 <__aeabi_dmul>
 800e57c:	4b2d      	ldr	r3, [pc, #180]	; (800e634 <_dtoa_r+0x624>)
 800e57e:	4682      	mov	sl, r0
 800e580:	468b      	mov	fp, r1
 800e582:	4640      	mov	r0, r8
 800e584:	4649      	mov	r1, r9
 800e586:	2200      	movs	r2, #0
 800e588:	f7f2 f85e 	bl	8000648 <__aeabi_dmul>
 800e58c:	4680      	mov	r8, r0
 800e58e:	4689      	mov	r9, r1
 800e590:	e7c6      	b.n	800e520 <_dtoa_r+0x510>
 800e592:	4650      	mov	r0, sl
 800e594:	4659      	mov	r1, fp
 800e596:	f7f2 f857 	bl	8000648 <__aeabi_dmul>
 800e59a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e59c:	9d01      	ldr	r5, [sp, #4]
 800e59e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5a0:	4682      	mov	sl, r0
 800e5a2:	468b      	mov	fp, r1
 800e5a4:	4649      	mov	r1, r9
 800e5a6:	4640      	mov	r0, r8
 800e5a8:	f7f2 fafe 	bl	8000ba8 <__aeabi_d2iz>
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	f7f1 ffe1 	bl	8000574 <__aeabi_i2d>
 800e5b2:	3630      	adds	r6, #48	; 0x30
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	4649      	mov	r1, r9
 800e5bc:	f7f1 fe8c 	bl	80002d8 <__aeabi_dsub>
 800e5c0:	f805 6b01 	strb.w	r6, [r5], #1
 800e5c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5c6:	429d      	cmp	r5, r3
 800e5c8:	4680      	mov	r8, r0
 800e5ca:	4689      	mov	r9, r1
 800e5cc:	f04f 0200 	mov.w	r2, #0
 800e5d0:	d124      	bne.n	800e61c <_dtoa_r+0x60c>
 800e5d2:	4b1b      	ldr	r3, [pc, #108]	; (800e640 <_dtoa_r+0x630>)
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	4659      	mov	r1, fp
 800e5d8:	f7f1 fe80 	bl	80002dc <__adddf3>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4640      	mov	r0, r8
 800e5e2:	4649      	mov	r1, r9
 800e5e4:	f7f2 fac0 	bl	8000b68 <__aeabi_dcmpgt>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	d173      	bne.n	800e6d4 <_dtoa_r+0x6c4>
 800e5ec:	4652      	mov	r2, sl
 800e5ee:	465b      	mov	r3, fp
 800e5f0:	4913      	ldr	r1, [pc, #76]	; (800e640 <_dtoa_r+0x630>)
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	f7f1 fe70 	bl	80002d8 <__aeabi_dsub>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	4649      	mov	r1, r9
 800e600:	f7f2 fa94 	bl	8000b2c <__aeabi_dcmplt>
 800e604:	2800      	cmp	r0, #0
 800e606:	f43f af35 	beq.w	800e474 <_dtoa_r+0x464>
 800e60a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e60c:	1e6b      	subs	r3, r5, #1
 800e60e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e610:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e614:	2b30      	cmp	r3, #48	; 0x30
 800e616:	d0f8      	beq.n	800e60a <_dtoa_r+0x5fa>
 800e618:	9700      	str	r7, [sp, #0]
 800e61a:	e049      	b.n	800e6b0 <_dtoa_r+0x6a0>
 800e61c:	4b05      	ldr	r3, [pc, #20]	; (800e634 <_dtoa_r+0x624>)
 800e61e:	f7f2 f813 	bl	8000648 <__aeabi_dmul>
 800e622:	4680      	mov	r8, r0
 800e624:	4689      	mov	r9, r1
 800e626:	e7bd      	b.n	800e5a4 <_dtoa_r+0x594>
 800e628:	08010298 	.word	0x08010298
 800e62c:	08010270 	.word	0x08010270
 800e630:	3ff00000 	.word	0x3ff00000
 800e634:	40240000 	.word	0x40240000
 800e638:	401c0000 	.word	0x401c0000
 800e63c:	40140000 	.word	0x40140000
 800e640:	3fe00000 	.word	0x3fe00000
 800e644:	9d01      	ldr	r5, [sp, #4]
 800e646:	4656      	mov	r6, sl
 800e648:	465f      	mov	r7, fp
 800e64a:	4642      	mov	r2, r8
 800e64c:	464b      	mov	r3, r9
 800e64e:	4630      	mov	r0, r6
 800e650:	4639      	mov	r1, r7
 800e652:	f7f2 f923 	bl	800089c <__aeabi_ddiv>
 800e656:	f7f2 faa7 	bl	8000ba8 <__aeabi_d2iz>
 800e65a:	4682      	mov	sl, r0
 800e65c:	f7f1 ff8a 	bl	8000574 <__aeabi_i2d>
 800e660:	4642      	mov	r2, r8
 800e662:	464b      	mov	r3, r9
 800e664:	f7f1 fff0 	bl	8000648 <__aeabi_dmul>
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	4630      	mov	r0, r6
 800e66e:	4639      	mov	r1, r7
 800e670:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e674:	f7f1 fe30 	bl	80002d8 <__aeabi_dsub>
 800e678:	f805 6b01 	strb.w	r6, [r5], #1
 800e67c:	9e01      	ldr	r6, [sp, #4]
 800e67e:	9f03      	ldr	r7, [sp, #12]
 800e680:	1bae      	subs	r6, r5, r6
 800e682:	42b7      	cmp	r7, r6
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	d135      	bne.n	800e6f6 <_dtoa_r+0x6e6>
 800e68a:	f7f1 fe27 	bl	80002dc <__adddf3>
 800e68e:	4642      	mov	r2, r8
 800e690:	464b      	mov	r3, r9
 800e692:	4606      	mov	r6, r0
 800e694:	460f      	mov	r7, r1
 800e696:	f7f2 fa67 	bl	8000b68 <__aeabi_dcmpgt>
 800e69a:	b9d0      	cbnz	r0, 800e6d2 <_dtoa_r+0x6c2>
 800e69c:	4642      	mov	r2, r8
 800e69e:	464b      	mov	r3, r9
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	4639      	mov	r1, r7
 800e6a4:	f7f2 fa38 	bl	8000b18 <__aeabi_dcmpeq>
 800e6a8:	b110      	cbz	r0, 800e6b0 <_dtoa_r+0x6a0>
 800e6aa:	f01a 0f01 	tst.w	sl, #1
 800e6ae:	d110      	bne.n	800e6d2 <_dtoa_r+0x6c2>
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	ee18 1a10 	vmov	r1, s16
 800e6b6:	f000 fd13 	bl	800f0e0 <_Bfree>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	9800      	ldr	r0, [sp, #0]
 800e6be:	702b      	strb	r3, [r5, #0]
 800e6c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	6018      	str	r0, [r3, #0]
 800e6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f43f acf1 	beq.w	800e0b0 <_dtoa_r+0xa0>
 800e6ce:	601d      	str	r5, [r3, #0]
 800e6d0:	e4ee      	b.n	800e0b0 <_dtoa_r+0xa0>
 800e6d2:	9f00      	ldr	r7, [sp, #0]
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	461d      	mov	r5, r3
 800e6d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6dc:	2a39      	cmp	r2, #57	; 0x39
 800e6de:	d106      	bne.n	800e6ee <_dtoa_r+0x6de>
 800e6e0:	9a01      	ldr	r2, [sp, #4]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d1f7      	bne.n	800e6d6 <_dtoa_r+0x6c6>
 800e6e6:	9901      	ldr	r1, [sp, #4]
 800e6e8:	2230      	movs	r2, #48	; 0x30
 800e6ea:	3701      	adds	r7, #1
 800e6ec:	700a      	strb	r2, [r1, #0]
 800e6ee:	781a      	ldrb	r2, [r3, #0]
 800e6f0:	3201      	adds	r2, #1
 800e6f2:	701a      	strb	r2, [r3, #0]
 800e6f4:	e790      	b.n	800e618 <_dtoa_r+0x608>
 800e6f6:	4ba6      	ldr	r3, [pc, #664]	; (800e990 <_dtoa_r+0x980>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f7f1 ffa5 	bl	8000648 <__aeabi_dmul>
 800e6fe:	2200      	movs	r2, #0
 800e700:	2300      	movs	r3, #0
 800e702:	4606      	mov	r6, r0
 800e704:	460f      	mov	r7, r1
 800e706:	f7f2 fa07 	bl	8000b18 <__aeabi_dcmpeq>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d09d      	beq.n	800e64a <_dtoa_r+0x63a>
 800e70e:	e7cf      	b.n	800e6b0 <_dtoa_r+0x6a0>
 800e710:	9a08      	ldr	r2, [sp, #32]
 800e712:	2a00      	cmp	r2, #0
 800e714:	f000 80d7 	beq.w	800e8c6 <_dtoa_r+0x8b6>
 800e718:	9a06      	ldr	r2, [sp, #24]
 800e71a:	2a01      	cmp	r2, #1
 800e71c:	f300 80ba 	bgt.w	800e894 <_dtoa_r+0x884>
 800e720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e722:	2a00      	cmp	r2, #0
 800e724:	f000 80b2 	beq.w	800e88c <_dtoa_r+0x87c>
 800e728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e72c:	9e07      	ldr	r6, [sp, #28]
 800e72e:	9d04      	ldr	r5, [sp, #16]
 800e730:	9a04      	ldr	r2, [sp, #16]
 800e732:	441a      	add	r2, r3
 800e734:	9204      	str	r2, [sp, #16]
 800e736:	9a05      	ldr	r2, [sp, #20]
 800e738:	2101      	movs	r1, #1
 800e73a:	441a      	add	r2, r3
 800e73c:	4620      	mov	r0, r4
 800e73e:	9205      	str	r2, [sp, #20]
 800e740:	f000 fd86 	bl	800f250 <__i2b>
 800e744:	4607      	mov	r7, r0
 800e746:	2d00      	cmp	r5, #0
 800e748:	dd0c      	ble.n	800e764 <_dtoa_r+0x754>
 800e74a:	9b05      	ldr	r3, [sp, #20]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	dd09      	ble.n	800e764 <_dtoa_r+0x754>
 800e750:	42ab      	cmp	r3, r5
 800e752:	9a04      	ldr	r2, [sp, #16]
 800e754:	bfa8      	it	ge
 800e756:	462b      	movge	r3, r5
 800e758:	1ad2      	subs	r2, r2, r3
 800e75a:	9204      	str	r2, [sp, #16]
 800e75c:	9a05      	ldr	r2, [sp, #20]
 800e75e:	1aed      	subs	r5, r5, r3
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	9305      	str	r3, [sp, #20]
 800e764:	9b07      	ldr	r3, [sp, #28]
 800e766:	b31b      	cbz	r3, 800e7b0 <_dtoa_r+0x7a0>
 800e768:	9b08      	ldr	r3, [sp, #32]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f000 80af 	beq.w	800e8ce <_dtoa_r+0x8be>
 800e770:	2e00      	cmp	r6, #0
 800e772:	dd13      	ble.n	800e79c <_dtoa_r+0x78c>
 800e774:	4639      	mov	r1, r7
 800e776:	4632      	mov	r2, r6
 800e778:	4620      	mov	r0, r4
 800e77a:	f000 fe29 	bl	800f3d0 <__pow5mult>
 800e77e:	ee18 2a10 	vmov	r2, s16
 800e782:	4601      	mov	r1, r0
 800e784:	4607      	mov	r7, r0
 800e786:	4620      	mov	r0, r4
 800e788:	f000 fd78 	bl	800f27c <__multiply>
 800e78c:	ee18 1a10 	vmov	r1, s16
 800e790:	4680      	mov	r8, r0
 800e792:	4620      	mov	r0, r4
 800e794:	f000 fca4 	bl	800f0e0 <_Bfree>
 800e798:	ee08 8a10 	vmov	s16, r8
 800e79c:	9b07      	ldr	r3, [sp, #28]
 800e79e:	1b9a      	subs	r2, r3, r6
 800e7a0:	d006      	beq.n	800e7b0 <_dtoa_r+0x7a0>
 800e7a2:	ee18 1a10 	vmov	r1, s16
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f000 fe12 	bl	800f3d0 <__pow5mult>
 800e7ac:	ee08 0a10 	vmov	s16, r0
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f000 fd4c 	bl	800f250 <__i2b>
 800e7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	4606      	mov	r6, r0
 800e7be:	f340 8088 	ble.w	800e8d2 <_dtoa_r+0x8c2>
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	4601      	mov	r1, r0
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f000 fe02 	bl	800f3d0 <__pow5mult>
 800e7cc:	9b06      	ldr	r3, [sp, #24]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	4606      	mov	r6, r0
 800e7d2:	f340 8081 	ble.w	800e8d8 <_dtoa_r+0x8c8>
 800e7d6:	f04f 0800 	mov.w	r8, #0
 800e7da:	6933      	ldr	r3, [r6, #16]
 800e7dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e7e0:	6918      	ldr	r0, [r3, #16]
 800e7e2:	f000 fce5 	bl	800f1b0 <__hi0bits>
 800e7e6:	f1c0 0020 	rsb	r0, r0, #32
 800e7ea:	9b05      	ldr	r3, [sp, #20]
 800e7ec:	4418      	add	r0, r3
 800e7ee:	f010 001f 	ands.w	r0, r0, #31
 800e7f2:	f000 8092 	beq.w	800e91a <_dtoa_r+0x90a>
 800e7f6:	f1c0 0320 	rsb	r3, r0, #32
 800e7fa:	2b04      	cmp	r3, #4
 800e7fc:	f340 808a 	ble.w	800e914 <_dtoa_r+0x904>
 800e800:	f1c0 001c 	rsb	r0, r0, #28
 800e804:	9b04      	ldr	r3, [sp, #16]
 800e806:	4403      	add	r3, r0
 800e808:	9304      	str	r3, [sp, #16]
 800e80a:	9b05      	ldr	r3, [sp, #20]
 800e80c:	4403      	add	r3, r0
 800e80e:	4405      	add	r5, r0
 800e810:	9305      	str	r3, [sp, #20]
 800e812:	9b04      	ldr	r3, [sp, #16]
 800e814:	2b00      	cmp	r3, #0
 800e816:	dd07      	ble.n	800e828 <_dtoa_r+0x818>
 800e818:	ee18 1a10 	vmov	r1, s16
 800e81c:	461a      	mov	r2, r3
 800e81e:	4620      	mov	r0, r4
 800e820:	f000 fe30 	bl	800f484 <__lshift>
 800e824:	ee08 0a10 	vmov	s16, r0
 800e828:	9b05      	ldr	r3, [sp, #20]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	dd05      	ble.n	800e83a <_dtoa_r+0x82a>
 800e82e:	4631      	mov	r1, r6
 800e830:	461a      	mov	r2, r3
 800e832:	4620      	mov	r0, r4
 800e834:	f000 fe26 	bl	800f484 <__lshift>
 800e838:	4606      	mov	r6, r0
 800e83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d06e      	beq.n	800e91e <_dtoa_r+0x90e>
 800e840:	ee18 0a10 	vmov	r0, s16
 800e844:	4631      	mov	r1, r6
 800e846:	f000 fe8d 	bl	800f564 <__mcmp>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	da67      	bge.n	800e91e <_dtoa_r+0x90e>
 800e84e:	9b00      	ldr	r3, [sp, #0]
 800e850:	3b01      	subs	r3, #1
 800e852:	ee18 1a10 	vmov	r1, s16
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	220a      	movs	r2, #10
 800e85a:	2300      	movs	r3, #0
 800e85c:	4620      	mov	r0, r4
 800e85e:	f000 fc61 	bl	800f124 <__multadd>
 800e862:	9b08      	ldr	r3, [sp, #32]
 800e864:	ee08 0a10 	vmov	s16, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f000 81b1 	beq.w	800ebd0 <_dtoa_r+0xbc0>
 800e86e:	2300      	movs	r3, #0
 800e870:	4639      	mov	r1, r7
 800e872:	220a      	movs	r2, #10
 800e874:	4620      	mov	r0, r4
 800e876:	f000 fc55 	bl	800f124 <__multadd>
 800e87a:	9b02      	ldr	r3, [sp, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	4607      	mov	r7, r0
 800e880:	f300 808e 	bgt.w	800e9a0 <_dtoa_r+0x990>
 800e884:	9b06      	ldr	r3, [sp, #24]
 800e886:	2b02      	cmp	r3, #2
 800e888:	dc51      	bgt.n	800e92e <_dtoa_r+0x91e>
 800e88a:	e089      	b.n	800e9a0 <_dtoa_r+0x990>
 800e88c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e88e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e892:	e74b      	b.n	800e72c <_dtoa_r+0x71c>
 800e894:	9b03      	ldr	r3, [sp, #12]
 800e896:	1e5e      	subs	r6, r3, #1
 800e898:	9b07      	ldr	r3, [sp, #28]
 800e89a:	42b3      	cmp	r3, r6
 800e89c:	bfbf      	itttt	lt
 800e89e:	9b07      	ldrlt	r3, [sp, #28]
 800e8a0:	9607      	strlt	r6, [sp, #28]
 800e8a2:	1af2      	sublt	r2, r6, r3
 800e8a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e8a6:	bfb6      	itet	lt
 800e8a8:	189b      	addlt	r3, r3, r2
 800e8aa:	1b9e      	subge	r6, r3, r6
 800e8ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e8ae:	9b03      	ldr	r3, [sp, #12]
 800e8b0:	bfb8      	it	lt
 800e8b2:	2600      	movlt	r6, #0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	bfb7      	itett	lt
 800e8b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e8bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e8c0:	1a9d      	sublt	r5, r3, r2
 800e8c2:	2300      	movlt	r3, #0
 800e8c4:	e734      	b.n	800e730 <_dtoa_r+0x720>
 800e8c6:	9e07      	ldr	r6, [sp, #28]
 800e8c8:	9d04      	ldr	r5, [sp, #16]
 800e8ca:	9f08      	ldr	r7, [sp, #32]
 800e8cc:	e73b      	b.n	800e746 <_dtoa_r+0x736>
 800e8ce:	9a07      	ldr	r2, [sp, #28]
 800e8d0:	e767      	b.n	800e7a2 <_dtoa_r+0x792>
 800e8d2:	9b06      	ldr	r3, [sp, #24]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	dc18      	bgt.n	800e90a <_dtoa_r+0x8fa>
 800e8d8:	f1ba 0f00 	cmp.w	sl, #0
 800e8dc:	d115      	bne.n	800e90a <_dtoa_r+0x8fa>
 800e8de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8e2:	b993      	cbnz	r3, 800e90a <_dtoa_r+0x8fa>
 800e8e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8e8:	0d1b      	lsrs	r3, r3, #20
 800e8ea:	051b      	lsls	r3, r3, #20
 800e8ec:	b183      	cbz	r3, 800e910 <_dtoa_r+0x900>
 800e8ee:	9b04      	ldr	r3, [sp, #16]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	9304      	str	r3, [sp, #16]
 800e8f4:	9b05      	ldr	r3, [sp, #20]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	9305      	str	r3, [sp, #20]
 800e8fa:	f04f 0801 	mov.w	r8, #1
 800e8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e900:	2b00      	cmp	r3, #0
 800e902:	f47f af6a 	bne.w	800e7da <_dtoa_r+0x7ca>
 800e906:	2001      	movs	r0, #1
 800e908:	e76f      	b.n	800e7ea <_dtoa_r+0x7da>
 800e90a:	f04f 0800 	mov.w	r8, #0
 800e90e:	e7f6      	b.n	800e8fe <_dtoa_r+0x8ee>
 800e910:	4698      	mov	r8, r3
 800e912:	e7f4      	b.n	800e8fe <_dtoa_r+0x8ee>
 800e914:	f43f af7d 	beq.w	800e812 <_dtoa_r+0x802>
 800e918:	4618      	mov	r0, r3
 800e91a:	301c      	adds	r0, #28
 800e91c:	e772      	b.n	800e804 <_dtoa_r+0x7f4>
 800e91e:	9b03      	ldr	r3, [sp, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	dc37      	bgt.n	800e994 <_dtoa_r+0x984>
 800e924:	9b06      	ldr	r3, [sp, #24]
 800e926:	2b02      	cmp	r3, #2
 800e928:	dd34      	ble.n	800e994 <_dtoa_r+0x984>
 800e92a:	9b03      	ldr	r3, [sp, #12]
 800e92c:	9302      	str	r3, [sp, #8]
 800e92e:	9b02      	ldr	r3, [sp, #8]
 800e930:	b96b      	cbnz	r3, 800e94e <_dtoa_r+0x93e>
 800e932:	4631      	mov	r1, r6
 800e934:	2205      	movs	r2, #5
 800e936:	4620      	mov	r0, r4
 800e938:	f000 fbf4 	bl	800f124 <__multadd>
 800e93c:	4601      	mov	r1, r0
 800e93e:	4606      	mov	r6, r0
 800e940:	ee18 0a10 	vmov	r0, s16
 800e944:	f000 fe0e 	bl	800f564 <__mcmp>
 800e948:	2800      	cmp	r0, #0
 800e94a:	f73f adbb 	bgt.w	800e4c4 <_dtoa_r+0x4b4>
 800e94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e950:	9d01      	ldr	r5, [sp, #4]
 800e952:	43db      	mvns	r3, r3
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	f04f 0800 	mov.w	r8, #0
 800e95a:	4631      	mov	r1, r6
 800e95c:	4620      	mov	r0, r4
 800e95e:	f000 fbbf 	bl	800f0e0 <_Bfree>
 800e962:	2f00      	cmp	r7, #0
 800e964:	f43f aea4 	beq.w	800e6b0 <_dtoa_r+0x6a0>
 800e968:	f1b8 0f00 	cmp.w	r8, #0
 800e96c:	d005      	beq.n	800e97a <_dtoa_r+0x96a>
 800e96e:	45b8      	cmp	r8, r7
 800e970:	d003      	beq.n	800e97a <_dtoa_r+0x96a>
 800e972:	4641      	mov	r1, r8
 800e974:	4620      	mov	r0, r4
 800e976:	f000 fbb3 	bl	800f0e0 <_Bfree>
 800e97a:	4639      	mov	r1, r7
 800e97c:	4620      	mov	r0, r4
 800e97e:	f000 fbaf 	bl	800f0e0 <_Bfree>
 800e982:	e695      	b.n	800e6b0 <_dtoa_r+0x6a0>
 800e984:	2600      	movs	r6, #0
 800e986:	4637      	mov	r7, r6
 800e988:	e7e1      	b.n	800e94e <_dtoa_r+0x93e>
 800e98a:	9700      	str	r7, [sp, #0]
 800e98c:	4637      	mov	r7, r6
 800e98e:	e599      	b.n	800e4c4 <_dtoa_r+0x4b4>
 800e990:	40240000 	.word	0x40240000
 800e994:	9b08      	ldr	r3, [sp, #32]
 800e996:	2b00      	cmp	r3, #0
 800e998:	f000 80ca 	beq.w	800eb30 <_dtoa_r+0xb20>
 800e99c:	9b03      	ldr	r3, [sp, #12]
 800e99e:	9302      	str	r3, [sp, #8]
 800e9a0:	2d00      	cmp	r5, #0
 800e9a2:	dd05      	ble.n	800e9b0 <_dtoa_r+0x9a0>
 800e9a4:	4639      	mov	r1, r7
 800e9a6:	462a      	mov	r2, r5
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f000 fd6b 	bl	800f484 <__lshift>
 800e9ae:	4607      	mov	r7, r0
 800e9b0:	f1b8 0f00 	cmp.w	r8, #0
 800e9b4:	d05b      	beq.n	800ea6e <_dtoa_r+0xa5e>
 800e9b6:	6879      	ldr	r1, [r7, #4]
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f000 fb51 	bl	800f060 <_Balloc>
 800e9be:	4605      	mov	r5, r0
 800e9c0:	b928      	cbnz	r0, 800e9ce <_dtoa_r+0x9be>
 800e9c2:	4b87      	ldr	r3, [pc, #540]	; (800ebe0 <_dtoa_r+0xbd0>)
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e9ca:	f7ff bb3b 	b.w	800e044 <_dtoa_r+0x34>
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	3202      	adds	r2, #2
 800e9d2:	0092      	lsls	r2, r2, #2
 800e9d4:	f107 010c 	add.w	r1, r7, #12
 800e9d8:	300c      	adds	r0, #12
 800e9da:	f000 fb33 	bl	800f044 <memcpy>
 800e9de:	2201      	movs	r2, #1
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f000 fd4e 	bl	800f484 <__lshift>
 800e9e8:	9b01      	ldr	r3, [sp, #4]
 800e9ea:	f103 0901 	add.w	r9, r3, #1
 800e9ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	9305      	str	r3, [sp, #20]
 800e9f6:	f00a 0301 	and.w	r3, sl, #1
 800e9fa:	46b8      	mov	r8, r7
 800e9fc:	9304      	str	r3, [sp, #16]
 800e9fe:	4607      	mov	r7, r0
 800ea00:	4631      	mov	r1, r6
 800ea02:	ee18 0a10 	vmov	r0, s16
 800ea06:	f7ff fa77 	bl	800def8 <quorem>
 800ea0a:	4641      	mov	r1, r8
 800ea0c:	9002      	str	r0, [sp, #8]
 800ea0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ea12:	ee18 0a10 	vmov	r0, s16
 800ea16:	f000 fda5 	bl	800f564 <__mcmp>
 800ea1a:	463a      	mov	r2, r7
 800ea1c:	9003      	str	r0, [sp, #12]
 800ea1e:	4631      	mov	r1, r6
 800ea20:	4620      	mov	r0, r4
 800ea22:	f000 fdbb 	bl	800f59c <__mdiff>
 800ea26:	68c2      	ldr	r2, [r0, #12]
 800ea28:	f109 3bff 	add.w	fp, r9, #4294967295
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	bb02      	cbnz	r2, 800ea72 <_dtoa_r+0xa62>
 800ea30:	4601      	mov	r1, r0
 800ea32:	ee18 0a10 	vmov	r0, s16
 800ea36:	f000 fd95 	bl	800f564 <__mcmp>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	4629      	mov	r1, r5
 800ea3e:	4620      	mov	r0, r4
 800ea40:	9207      	str	r2, [sp, #28]
 800ea42:	f000 fb4d 	bl	800f0e0 <_Bfree>
 800ea46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ea4a:	ea43 0102 	orr.w	r1, r3, r2
 800ea4e:	9b04      	ldr	r3, [sp, #16]
 800ea50:	430b      	orrs	r3, r1
 800ea52:	464d      	mov	r5, r9
 800ea54:	d10f      	bne.n	800ea76 <_dtoa_r+0xa66>
 800ea56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea5a:	d02a      	beq.n	800eab2 <_dtoa_r+0xaa2>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	dd02      	ble.n	800ea68 <_dtoa_r+0xa58>
 800ea62:	9b02      	ldr	r3, [sp, #8]
 800ea64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ea68:	f88b a000 	strb.w	sl, [fp]
 800ea6c:	e775      	b.n	800e95a <_dtoa_r+0x94a>
 800ea6e:	4638      	mov	r0, r7
 800ea70:	e7ba      	b.n	800e9e8 <_dtoa_r+0x9d8>
 800ea72:	2201      	movs	r2, #1
 800ea74:	e7e2      	b.n	800ea3c <_dtoa_r+0xa2c>
 800ea76:	9b03      	ldr	r3, [sp, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	db04      	blt.n	800ea86 <_dtoa_r+0xa76>
 800ea7c:	9906      	ldr	r1, [sp, #24]
 800ea7e:	430b      	orrs	r3, r1
 800ea80:	9904      	ldr	r1, [sp, #16]
 800ea82:	430b      	orrs	r3, r1
 800ea84:	d122      	bne.n	800eacc <_dtoa_r+0xabc>
 800ea86:	2a00      	cmp	r2, #0
 800ea88:	ddee      	ble.n	800ea68 <_dtoa_r+0xa58>
 800ea8a:	ee18 1a10 	vmov	r1, s16
 800ea8e:	2201      	movs	r2, #1
 800ea90:	4620      	mov	r0, r4
 800ea92:	f000 fcf7 	bl	800f484 <__lshift>
 800ea96:	4631      	mov	r1, r6
 800ea98:	ee08 0a10 	vmov	s16, r0
 800ea9c:	f000 fd62 	bl	800f564 <__mcmp>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	dc03      	bgt.n	800eaac <_dtoa_r+0xa9c>
 800eaa4:	d1e0      	bne.n	800ea68 <_dtoa_r+0xa58>
 800eaa6:	f01a 0f01 	tst.w	sl, #1
 800eaaa:	d0dd      	beq.n	800ea68 <_dtoa_r+0xa58>
 800eaac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eab0:	d1d7      	bne.n	800ea62 <_dtoa_r+0xa52>
 800eab2:	2339      	movs	r3, #57	; 0x39
 800eab4:	f88b 3000 	strb.w	r3, [fp]
 800eab8:	462b      	mov	r3, r5
 800eaba:	461d      	mov	r5, r3
 800eabc:	3b01      	subs	r3, #1
 800eabe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eac2:	2a39      	cmp	r2, #57	; 0x39
 800eac4:	d071      	beq.n	800ebaa <_dtoa_r+0xb9a>
 800eac6:	3201      	adds	r2, #1
 800eac8:	701a      	strb	r2, [r3, #0]
 800eaca:	e746      	b.n	800e95a <_dtoa_r+0x94a>
 800eacc:	2a00      	cmp	r2, #0
 800eace:	dd07      	ble.n	800eae0 <_dtoa_r+0xad0>
 800ead0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ead4:	d0ed      	beq.n	800eab2 <_dtoa_r+0xaa2>
 800ead6:	f10a 0301 	add.w	r3, sl, #1
 800eada:	f88b 3000 	strb.w	r3, [fp]
 800eade:	e73c      	b.n	800e95a <_dtoa_r+0x94a>
 800eae0:	9b05      	ldr	r3, [sp, #20]
 800eae2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800eae6:	4599      	cmp	r9, r3
 800eae8:	d047      	beq.n	800eb7a <_dtoa_r+0xb6a>
 800eaea:	ee18 1a10 	vmov	r1, s16
 800eaee:	2300      	movs	r3, #0
 800eaf0:	220a      	movs	r2, #10
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 fb16 	bl	800f124 <__multadd>
 800eaf8:	45b8      	cmp	r8, r7
 800eafa:	ee08 0a10 	vmov	s16, r0
 800eafe:	f04f 0300 	mov.w	r3, #0
 800eb02:	f04f 020a 	mov.w	r2, #10
 800eb06:	4641      	mov	r1, r8
 800eb08:	4620      	mov	r0, r4
 800eb0a:	d106      	bne.n	800eb1a <_dtoa_r+0xb0a>
 800eb0c:	f000 fb0a 	bl	800f124 <__multadd>
 800eb10:	4680      	mov	r8, r0
 800eb12:	4607      	mov	r7, r0
 800eb14:	f109 0901 	add.w	r9, r9, #1
 800eb18:	e772      	b.n	800ea00 <_dtoa_r+0x9f0>
 800eb1a:	f000 fb03 	bl	800f124 <__multadd>
 800eb1e:	4639      	mov	r1, r7
 800eb20:	4680      	mov	r8, r0
 800eb22:	2300      	movs	r3, #0
 800eb24:	220a      	movs	r2, #10
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 fafc 	bl	800f124 <__multadd>
 800eb2c:	4607      	mov	r7, r0
 800eb2e:	e7f1      	b.n	800eb14 <_dtoa_r+0xb04>
 800eb30:	9b03      	ldr	r3, [sp, #12]
 800eb32:	9302      	str	r3, [sp, #8]
 800eb34:	9d01      	ldr	r5, [sp, #4]
 800eb36:	ee18 0a10 	vmov	r0, s16
 800eb3a:	4631      	mov	r1, r6
 800eb3c:	f7ff f9dc 	bl	800def8 <quorem>
 800eb40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb44:	9b01      	ldr	r3, [sp, #4]
 800eb46:	f805 ab01 	strb.w	sl, [r5], #1
 800eb4a:	1aea      	subs	r2, r5, r3
 800eb4c:	9b02      	ldr	r3, [sp, #8]
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	dd09      	ble.n	800eb66 <_dtoa_r+0xb56>
 800eb52:	ee18 1a10 	vmov	r1, s16
 800eb56:	2300      	movs	r3, #0
 800eb58:	220a      	movs	r2, #10
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f000 fae2 	bl	800f124 <__multadd>
 800eb60:	ee08 0a10 	vmov	s16, r0
 800eb64:	e7e7      	b.n	800eb36 <_dtoa_r+0xb26>
 800eb66:	9b02      	ldr	r3, [sp, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	bfc8      	it	gt
 800eb6c:	461d      	movgt	r5, r3
 800eb6e:	9b01      	ldr	r3, [sp, #4]
 800eb70:	bfd8      	it	le
 800eb72:	2501      	movle	r5, #1
 800eb74:	441d      	add	r5, r3
 800eb76:	f04f 0800 	mov.w	r8, #0
 800eb7a:	ee18 1a10 	vmov	r1, s16
 800eb7e:	2201      	movs	r2, #1
 800eb80:	4620      	mov	r0, r4
 800eb82:	f000 fc7f 	bl	800f484 <__lshift>
 800eb86:	4631      	mov	r1, r6
 800eb88:	ee08 0a10 	vmov	s16, r0
 800eb8c:	f000 fcea 	bl	800f564 <__mcmp>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	dc91      	bgt.n	800eab8 <_dtoa_r+0xaa8>
 800eb94:	d102      	bne.n	800eb9c <_dtoa_r+0xb8c>
 800eb96:	f01a 0f01 	tst.w	sl, #1
 800eb9a:	d18d      	bne.n	800eab8 <_dtoa_r+0xaa8>
 800eb9c:	462b      	mov	r3, r5
 800eb9e:	461d      	mov	r5, r3
 800eba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eba4:	2a30      	cmp	r2, #48	; 0x30
 800eba6:	d0fa      	beq.n	800eb9e <_dtoa_r+0xb8e>
 800eba8:	e6d7      	b.n	800e95a <_dtoa_r+0x94a>
 800ebaa:	9a01      	ldr	r2, [sp, #4]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d184      	bne.n	800eaba <_dtoa_r+0xaaa>
 800ebb0:	9b00      	ldr	r3, [sp, #0]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	2331      	movs	r3, #49	; 0x31
 800ebb8:	7013      	strb	r3, [r2, #0]
 800ebba:	e6ce      	b.n	800e95a <_dtoa_r+0x94a>
 800ebbc:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <_dtoa_r+0xbd4>)
 800ebbe:	f7ff ba95 	b.w	800e0ec <_dtoa_r+0xdc>
 800ebc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f47f aa6e 	bne.w	800e0a6 <_dtoa_r+0x96>
 800ebca:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <_dtoa_r+0xbd8>)
 800ebcc:	f7ff ba8e 	b.w	800e0ec <_dtoa_r+0xdc>
 800ebd0:	9b02      	ldr	r3, [sp, #8]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	dcae      	bgt.n	800eb34 <_dtoa_r+0xb24>
 800ebd6:	9b06      	ldr	r3, [sp, #24]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	f73f aea8 	bgt.w	800e92e <_dtoa_r+0x91e>
 800ebde:	e7a9      	b.n	800eb34 <_dtoa_r+0xb24>
 800ebe0:	0801019f 	.word	0x0801019f
 800ebe4:	080100fc 	.word	0x080100fc
 800ebe8:	08010120 	.word	0x08010120

0800ebec <__sflush_r>:
 800ebec:	898a      	ldrh	r2, [r1, #12]
 800ebee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	0710      	lsls	r0, r2, #28
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	d458      	bmi.n	800ecac <__sflush_r+0xc0>
 800ebfa:	684b      	ldr	r3, [r1, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	dc05      	bgt.n	800ec0c <__sflush_r+0x20>
 800ec00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	dc02      	bgt.n	800ec0c <__sflush_r+0x20>
 800ec06:	2000      	movs	r0, #0
 800ec08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec0e:	2e00      	cmp	r6, #0
 800ec10:	d0f9      	beq.n	800ec06 <__sflush_r+0x1a>
 800ec12:	2300      	movs	r3, #0
 800ec14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec18:	682f      	ldr	r7, [r5, #0]
 800ec1a:	602b      	str	r3, [r5, #0]
 800ec1c:	d032      	beq.n	800ec84 <__sflush_r+0x98>
 800ec1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	075a      	lsls	r2, r3, #29
 800ec24:	d505      	bpl.n	800ec32 <__sflush_r+0x46>
 800ec26:	6863      	ldr	r3, [r4, #4]
 800ec28:	1ac0      	subs	r0, r0, r3
 800ec2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec2c:	b10b      	cbz	r3, 800ec32 <__sflush_r+0x46>
 800ec2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec30:	1ac0      	subs	r0, r0, r3
 800ec32:	2300      	movs	r3, #0
 800ec34:	4602      	mov	r2, r0
 800ec36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec38:	6a21      	ldr	r1, [r4, #32]
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b0      	blx	r6
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	d106      	bne.n	800ec52 <__sflush_r+0x66>
 800ec44:	6829      	ldr	r1, [r5, #0]
 800ec46:	291d      	cmp	r1, #29
 800ec48:	d82c      	bhi.n	800eca4 <__sflush_r+0xb8>
 800ec4a:	4a2a      	ldr	r2, [pc, #168]	; (800ecf4 <__sflush_r+0x108>)
 800ec4c:	40ca      	lsrs	r2, r1
 800ec4e:	07d6      	lsls	r6, r2, #31
 800ec50:	d528      	bpl.n	800eca4 <__sflush_r+0xb8>
 800ec52:	2200      	movs	r2, #0
 800ec54:	6062      	str	r2, [r4, #4]
 800ec56:	04d9      	lsls	r1, r3, #19
 800ec58:	6922      	ldr	r2, [r4, #16]
 800ec5a:	6022      	str	r2, [r4, #0]
 800ec5c:	d504      	bpl.n	800ec68 <__sflush_r+0x7c>
 800ec5e:	1c42      	adds	r2, r0, #1
 800ec60:	d101      	bne.n	800ec66 <__sflush_r+0x7a>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b903      	cbnz	r3, 800ec68 <__sflush_r+0x7c>
 800ec66:	6560      	str	r0, [r4, #84]	; 0x54
 800ec68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec6a:	602f      	str	r7, [r5, #0]
 800ec6c:	2900      	cmp	r1, #0
 800ec6e:	d0ca      	beq.n	800ec06 <__sflush_r+0x1a>
 800ec70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec74:	4299      	cmp	r1, r3
 800ec76:	d002      	beq.n	800ec7e <__sflush_r+0x92>
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f000 fd8b 	bl	800f794 <_free_r>
 800ec7e:	2000      	movs	r0, #0
 800ec80:	6360      	str	r0, [r4, #52]	; 0x34
 800ec82:	e7c1      	b.n	800ec08 <__sflush_r+0x1c>
 800ec84:	6a21      	ldr	r1, [r4, #32]
 800ec86:	2301      	movs	r3, #1
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b0      	blx	r6
 800ec8c:	1c41      	adds	r1, r0, #1
 800ec8e:	d1c7      	bne.n	800ec20 <__sflush_r+0x34>
 800ec90:	682b      	ldr	r3, [r5, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d0c4      	beq.n	800ec20 <__sflush_r+0x34>
 800ec96:	2b1d      	cmp	r3, #29
 800ec98:	d001      	beq.n	800ec9e <__sflush_r+0xb2>
 800ec9a:	2b16      	cmp	r3, #22
 800ec9c:	d101      	bne.n	800eca2 <__sflush_r+0xb6>
 800ec9e:	602f      	str	r7, [r5, #0]
 800eca0:	e7b1      	b.n	800ec06 <__sflush_r+0x1a>
 800eca2:	89a3      	ldrh	r3, [r4, #12]
 800eca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eca8:	81a3      	strh	r3, [r4, #12]
 800ecaa:	e7ad      	b.n	800ec08 <__sflush_r+0x1c>
 800ecac:	690f      	ldr	r7, [r1, #16]
 800ecae:	2f00      	cmp	r7, #0
 800ecb0:	d0a9      	beq.n	800ec06 <__sflush_r+0x1a>
 800ecb2:	0793      	lsls	r3, r2, #30
 800ecb4:	680e      	ldr	r6, [r1, #0]
 800ecb6:	bf08      	it	eq
 800ecb8:	694b      	ldreq	r3, [r1, #20]
 800ecba:	600f      	str	r7, [r1, #0]
 800ecbc:	bf18      	it	ne
 800ecbe:	2300      	movne	r3, #0
 800ecc0:	eba6 0807 	sub.w	r8, r6, r7
 800ecc4:	608b      	str	r3, [r1, #8]
 800ecc6:	f1b8 0f00 	cmp.w	r8, #0
 800ecca:	dd9c      	ble.n	800ec06 <__sflush_r+0x1a>
 800eccc:	6a21      	ldr	r1, [r4, #32]
 800ecce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ecd0:	4643      	mov	r3, r8
 800ecd2:	463a      	mov	r2, r7
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	47b0      	blx	r6
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	dc06      	bgt.n	800ecea <__sflush_r+0xfe>
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	f04f 30ff 	mov.w	r0, #4294967295
 800ece8:	e78e      	b.n	800ec08 <__sflush_r+0x1c>
 800ecea:	4407      	add	r7, r0
 800ecec:	eba8 0800 	sub.w	r8, r8, r0
 800ecf0:	e7e9      	b.n	800ecc6 <__sflush_r+0xda>
 800ecf2:	bf00      	nop
 800ecf4:	20400001 	.word	0x20400001

0800ecf8 <_fflush_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	690b      	ldr	r3, [r1, #16]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	460c      	mov	r4, r1
 800ed00:	b913      	cbnz	r3, 800ed08 <_fflush_r+0x10>
 800ed02:	2500      	movs	r5, #0
 800ed04:	4628      	mov	r0, r5
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	b118      	cbz	r0, 800ed12 <_fflush_r+0x1a>
 800ed0a:	6983      	ldr	r3, [r0, #24]
 800ed0c:	b90b      	cbnz	r3, 800ed12 <_fflush_r+0x1a>
 800ed0e:	f000 f887 	bl	800ee20 <__sinit>
 800ed12:	4b14      	ldr	r3, [pc, #80]	; (800ed64 <_fflush_r+0x6c>)
 800ed14:	429c      	cmp	r4, r3
 800ed16:	d11b      	bne.n	800ed50 <_fflush_r+0x58>
 800ed18:	686c      	ldr	r4, [r5, #4]
 800ed1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d0ef      	beq.n	800ed02 <_fflush_r+0xa>
 800ed22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed24:	07d0      	lsls	r0, r2, #31
 800ed26:	d404      	bmi.n	800ed32 <_fflush_r+0x3a>
 800ed28:	0599      	lsls	r1, r3, #22
 800ed2a:	d402      	bmi.n	800ed32 <_fflush_r+0x3a>
 800ed2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed2e:	f000 f91a 	bl	800ef66 <__retarget_lock_acquire_recursive>
 800ed32:	4628      	mov	r0, r5
 800ed34:	4621      	mov	r1, r4
 800ed36:	f7ff ff59 	bl	800ebec <__sflush_r>
 800ed3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed3c:	07da      	lsls	r2, r3, #31
 800ed3e:	4605      	mov	r5, r0
 800ed40:	d4e0      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	059b      	lsls	r3, r3, #22
 800ed46:	d4dd      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed4a:	f000 f90d 	bl	800ef68 <__retarget_lock_release_recursive>
 800ed4e:	e7d9      	b.n	800ed04 <_fflush_r+0xc>
 800ed50:	4b05      	ldr	r3, [pc, #20]	; (800ed68 <_fflush_r+0x70>)
 800ed52:	429c      	cmp	r4, r3
 800ed54:	d101      	bne.n	800ed5a <_fflush_r+0x62>
 800ed56:	68ac      	ldr	r4, [r5, #8]
 800ed58:	e7df      	b.n	800ed1a <_fflush_r+0x22>
 800ed5a:	4b04      	ldr	r3, [pc, #16]	; (800ed6c <_fflush_r+0x74>)
 800ed5c:	429c      	cmp	r4, r3
 800ed5e:	bf08      	it	eq
 800ed60:	68ec      	ldreq	r4, [r5, #12]
 800ed62:	e7da      	b.n	800ed1a <_fflush_r+0x22>
 800ed64:	080101d0 	.word	0x080101d0
 800ed68:	080101f0 	.word	0x080101f0
 800ed6c:	080101b0 	.word	0x080101b0

0800ed70 <std>:
 800ed70:	2300      	movs	r3, #0
 800ed72:	b510      	push	{r4, lr}
 800ed74:	4604      	mov	r4, r0
 800ed76:	e9c0 3300 	strd	r3, r3, [r0]
 800ed7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed7e:	6083      	str	r3, [r0, #8]
 800ed80:	8181      	strh	r1, [r0, #12]
 800ed82:	6643      	str	r3, [r0, #100]	; 0x64
 800ed84:	81c2      	strh	r2, [r0, #14]
 800ed86:	6183      	str	r3, [r0, #24]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	2208      	movs	r2, #8
 800ed8c:	305c      	adds	r0, #92	; 0x5c
 800ed8e:	f7fe fa25 	bl	800d1dc <memset>
 800ed92:	4b05      	ldr	r3, [pc, #20]	; (800eda8 <std+0x38>)
 800ed94:	6263      	str	r3, [r4, #36]	; 0x24
 800ed96:	4b05      	ldr	r3, [pc, #20]	; (800edac <std+0x3c>)
 800ed98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed9a:	4b05      	ldr	r3, [pc, #20]	; (800edb0 <std+0x40>)
 800ed9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed9e:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <std+0x44>)
 800eda0:	6224      	str	r4, [r4, #32]
 800eda2:	6323      	str	r3, [r4, #48]	; 0x30
 800eda4:	bd10      	pop	{r4, pc}
 800eda6:	bf00      	nop
 800eda8:	0800fc29 	.word	0x0800fc29
 800edac:	0800fc4b 	.word	0x0800fc4b
 800edb0:	0800fc83 	.word	0x0800fc83
 800edb4:	0800fca7 	.word	0x0800fca7

0800edb8 <_cleanup_r>:
 800edb8:	4901      	ldr	r1, [pc, #4]	; (800edc0 <_cleanup_r+0x8>)
 800edba:	f000 b8af 	b.w	800ef1c <_fwalk_reent>
 800edbe:	bf00      	nop
 800edc0:	0800ecf9 	.word	0x0800ecf9

0800edc4 <__sfmoreglue>:
 800edc4:	b570      	push	{r4, r5, r6, lr}
 800edc6:	2268      	movs	r2, #104	; 0x68
 800edc8:	1e4d      	subs	r5, r1, #1
 800edca:	4355      	muls	r5, r2
 800edcc:	460e      	mov	r6, r1
 800edce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edd2:	f000 fd4b 	bl	800f86c <_malloc_r>
 800edd6:	4604      	mov	r4, r0
 800edd8:	b140      	cbz	r0, 800edec <__sfmoreglue+0x28>
 800edda:	2100      	movs	r1, #0
 800eddc:	e9c0 1600 	strd	r1, r6, [r0]
 800ede0:	300c      	adds	r0, #12
 800ede2:	60a0      	str	r0, [r4, #8]
 800ede4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ede8:	f7fe f9f8 	bl	800d1dc <memset>
 800edec:	4620      	mov	r0, r4
 800edee:	bd70      	pop	{r4, r5, r6, pc}

0800edf0 <__sfp_lock_acquire>:
 800edf0:	4801      	ldr	r0, [pc, #4]	; (800edf8 <__sfp_lock_acquire+0x8>)
 800edf2:	f000 b8b8 	b.w	800ef66 <__retarget_lock_acquire_recursive>
 800edf6:	bf00      	nop
 800edf8:	20000ae5 	.word	0x20000ae5

0800edfc <__sfp_lock_release>:
 800edfc:	4801      	ldr	r0, [pc, #4]	; (800ee04 <__sfp_lock_release+0x8>)
 800edfe:	f000 b8b3 	b.w	800ef68 <__retarget_lock_release_recursive>
 800ee02:	bf00      	nop
 800ee04:	20000ae5 	.word	0x20000ae5

0800ee08 <__sinit_lock_acquire>:
 800ee08:	4801      	ldr	r0, [pc, #4]	; (800ee10 <__sinit_lock_acquire+0x8>)
 800ee0a:	f000 b8ac 	b.w	800ef66 <__retarget_lock_acquire_recursive>
 800ee0e:	bf00      	nop
 800ee10:	20000ae6 	.word	0x20000ae6

0800ee14 <__sinit_lock_release>:
 800ee14:	4801      	ldr	r0, [pc, #4]	; (800ee1c <__sinit_lock_release+0x8>)
 800ee16:	f000 b8a7 	b.w	800ef68 <__retarget_lock_release_recursive>
 800ee1a:	bf00      	nop
 800ee1c:	20000ae6 	.word	0x20000ae6

0800ee20 <__sinit>:
 800ee20:	b510      	push	{r4, lr}
 800ee22:	4604      	mov	r4, r0
 800ee24:	f7ff fff0 	bl	800ee08 <__sinit_lock_acquire>
 800ee28:	69a3      	ldr	r3, [r4, #24]
 800ee2a:	b11b      	cbz	r3, 800ee34 <__sinit+0x14>
 800ee2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee30:	f7ff bff0 	b.w	800ee14 <__sinit_lock_release>
 800ee34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee38:	6523      	str	r3, [r4, #80]	; 0x50
 800ee3a:	4b13      	ldr	r3, [pc, #76]	; (800ee88 <__sinit+0x68>)
 800ee3c:	4a13      	ldr	r2, [pc, #76]	; (800ee8c <__sinit+0x6c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee42:	42a3      	cmp	r3, r4
 800ee44:	bf04      	itt	eq
 800ee46:	2301      	moveq	r3, #1
 800ee48:	61a3      	streq	r3, [r4, #24]
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f000 f820 	bl	800ee90 <__sfp>
 800ee50:	6060      	str	r0, [r4, #4]
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 f81c 	bl	800ee90 <__sfp>
 800ee58:	60a0      	str	r0, [r4, #8]
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f000 f818 	bl	800ee90 <__sfp>
 800ee60:	2200      	movs	r2, #0
 800ee62:	60e0      	str	r0, [r4, #12]
 800ee64:	2104      	movs	r1, #4
 800ee66:	6860      	ldr	r0, [r4, #4]
 800ee68:	f7ff ff82 	bl	800ed70 <std>
 800ee6c:	68a0      	ldr	r0, [r4, #8]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	2109      	movs	r1, #9
 800ee72:	f7ff ff7d 	bl	800ed70 <std>
 800ee76:	68e0      	ldr	r0, [r4, #12]
 800ee78:	2202      	movs	r2, #2
 800ee7a:	2112      	movs	r1, #18
 800ee7c:	f7ff ff78 	bl	800ed70 <std>
 800ee80:	2301      	movs	r3, #1
 800ee82:	61a3      	str	r3, [r4, #24]
 800ee84:	e7d2      	b.n	800ee2c <__sinit+0xc>
 800ee86:	bf00      	nop
 800ee88:	080100e8 	.word	0x080100e8
 800ee8c:	0800edb9 	.word	0x0800edb9

0800ee90 <__sfp>:
 800ee90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee92:	4607      	mov	r7, r0
 800ee94:	f7ff ffac 	bl	800edf0 <__sfp_lock_acquire>
 800ee98:	4b1e      	ldr	r3, [pc, #120]	; (800ef14 <__sfp+0x84>)
 800ee9a:	681e      	ldr	r6, [r3, #0]
 800ee9c:	69b3      	ldr	r3, [r6, #24]
 800ee9e:	b913      	cbnz	r3, 800eea6 <__sfp+0x16>
 800eea0:	4630      	mov	r0, r6
 800eea2:	f7ff ffbd 	bl	800ee20 <__sinit>
 800eea6:	3648      	adds	r6, #72	; 0x48
 800eea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eeac:	3b01      	subs	r3, #1
 800eeae:	d503      	bpl.n	800eeb8 <__sfp+0x28>
 800eeb0:	6833      	ldr	r3, [r6, #0]
 800eeb2:	b30b      	cbz	r3, 800eef8 <__sfp+0x68>
 800eeb4:	6836      	ldr	r6, [r6, #0]
 800eeb6:	e7f7      	b.n	800eea8 <__sfp+0x18>
 800eeb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eebc:	b9d5      	cbnz	r5, 800eef4 <__sfp+0x64>
 800eebe:	4b16      	ldr	r3, [pc, #88]	; (800ef18 <__sfp+0x88>)
 800eec0:	60e3      	str	r3, [r4, #12]
 800eec2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eec6:	6665      	str	r5, [r4, #100]	; 0x64
 800eec8:	f000 f84c 	bl	800ef64 <__retarget_lock_init_recursive>
 800eecc:	f7ff ff96 	bl	800edfc <__sfp_lock_release>
 800eed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eed8:	6025      	str	r5, [r4, #0]
 800eeda:	61a5      	str	r5, [r4, #24]
 800eedc:	2208      	movs	r2, #8
 800eede:	4629      	mov	r1, r5
 800eee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eee4:	f7fe f97a 	bl	800d1dc <memset>
 800eee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eeec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eef0:	4620      	mov	r0, r4
 800eef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef4:	3468      	adds	r4, #104	; 0x68
 800eef6:	e7d9      	b.n	800eeac <__sfp+0x1c>
 800eef8:	2104      	movs	r1, #4
 800eefa:	4638      	mov	r0, r7
 800eefc:	f7ff ff62 	bl	800edc4 <__sfmoreglue>
 800ef00:	4604      	mov	r4, r0
 800ef02:	6030      	str	r0, [r6, #0]
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d1d5      	bne.n	800eeb4 <__sfp+0x24>
 800ef08:	f7ff ff78 	bl	800edfc <__sfp_lock_release>
 800ef0c:	230c      	movs	r3, #12
 800ef0e:	603b      	str	r3, [r7, #0]
 800ef10:	e7ee      	b.n	800eef0 <__sfp+0x60>
 800ef12:	bf00      	nop
 800ef14:	080100e8 	.word	0x080100e8
 800ef18:	ffff0001 	.word	0xffff0001

0800ef1c <_fwalk_reent>:
 800ef1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef20:	4606      	mov	r6, r0
 800ef22:	4688      	mov	r8, r1
 800ef24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef28:	2700      	movs	r7, #0
 800ef2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef2e:	f1b9 0901 	subs.w	r9, r9, #1
 800ef32:	d505      	bpl.n	800ef40 <_fwalk_reent+0x24>
 800ef34:	6824      	ldr	r4, [r4, #0]
 800ef36:	2c00      	cmp	r4, #0
 800ef38:	d1f7      	bne.n	800ef2a <_fwalk_reent+0xe>
 800ef3a:	4638      	mov	r0, r7
 800ef3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef40:	89ab      	ldrh	r3, [r5, #12]
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d907      	bls.n	800ef56 <_fwalk_reent+0x3a>
 800ef46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	d003      	beq.n	800ef56 <_fwalk_reent+0x3a>
 800ef4e:	4629      	mov	r1, r5
 800ef50:	4630      	mov	r0, r6
 800ef52:	47c0      	blx	r8
 800ef54:	4307      	orrs	r7, r0
 800ef56:	3568      	adds	r5, #104	; 0x68
 800ef58:	e7e9      	b.n	800ef2e <_fwalk_reent+0x12>
	...

0800ef5c <_localeconv_r>:
 800ef5c:	4800      	ldr	r0, [pc, #0]	; (800ef60 <_localeconv_r+0x4>)
 800ef5e:	4770      	bx	lr
 800ef60:	20000168 	.word	0x20000168

0800ef64 <__retarget_lock_init_recursive>:
 800ef64:	4770      	bx	lr

0800ef66 <__retarget_lock_acquire_recursive>:
 800ef66:	4770      	bx	lr

0800ef68 <__retarget_lock_release_recursive>:
 800ef68:	4770      	bx	lr

0800ef6a <__swhatbuf_r>:
 800ef6a:	b570      	push	{r4, r5, r6, lr}
 800ef6c:	460e      	mov	r6, r1
 800ef6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef72:	2900      	cmp	r1, #0
 800ef74:	b096      	sub	sp, #88	; 0x58
 800ef76:	4614      	mov	r4, r2
 800ef78:	461d      	mov	r5, r3
 800ef7a:	da08      	bge.n	800ef8e <__swhatbuf_r+0x24>
 800ef7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef80:	2200      	movs	r2, #0
 800ef82:	602a      	str	r2, [r5, #0]
 800ef84:	061a      	lsls	r2, r3, #24
 800ef86:	d410      	bmi.n	800efaa <__swhatbuf_r+0x40>
 800ef88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef8c:	e00e      	b.n	800efac <__swhatbuf_r+0x42>
 800ef8e:	466a      	mov	r2, sp
 800ef90:	f000 fee0 	bl	800fd54 <_fstat_r>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	dbf1      	blt.n	800ef7c <__swhatbuf_r+0x12>
 800ef98:	9a01      	ldr	r2, [sp, #4]
 800ef9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efa2:	425a      	negs	r2, r3
 800efa4:	415a      	adcs	r2, r3
 800efa6:	602a      	str	r2, [r5, #0]
 800efa8:	e7ee      	b.n	800ef88 <__swhatbuf_r+0x1e>
 800efaa:	2340      	movs	r3, #64	; 0x40
 800efac:	2000      	movs	r0, #0
 800efae:	6023      	str	r3, [r4, #0]
 800efb0:	b016      	add	sp, #88	; 0x58
 800efb2:	bd70      	pop	{r4, r5, r6, pc}

0800efb4 <__smakebuf_r>:
 800efb4:	898b      	ldrh	r3, [r1, #12]
 800efb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efb8:	079d      	lsls	r5, r3, #30
 800efba:	4606      	mov	r6, r0
 800efbc:	460c      	mov	r4, r1
 800efbe:	d507      	bpl.n	800efd0 <__smakebuf_r+0x1c>
 800efc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	6123      	str	r3, [r4, #16]
 800efc8:	2301      	movs	r3, #1
 800efca:	6163      	str	r3, [r4, #20]
 800efcc:	b002      	add	sp, #8
 800efce:	bd70      	pop	{r4, r5, r6, pc}
 800efd0:	ab01      	add	r3, sp, #4
 800efd2:	466a      	mov	r2, sp
 800efd4:	f7ff ffc9 	bl	800ef6a <__swhatbuf_r>
 800efd8:	9900      	ldr	r1, [sp, #0]
 800efda:	4605      	mov	r5, r0
 800efdc:	4630      	mov	r0, r6
 800efde:	f000 fc45 	bl	800f86c <_malloc_r>
 800efe2:	b948      	cbnz	r0, 800eff8 <__smakebuf_r+0x44>
 800efe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efe8:	059a      	lsls	r2, r3, #22
 800efea:	d4ef      	bmi.n	800efcc <__smakebuf_r+0x18>
 800efec:	f023 0303 	bic.w	r3, r3, #3
 800eff0:	f043 0302 	orr.w	r3, r3, #2
 800eff4:	81a3      	strh	r3, [r4, #12]
 800eff6:	e7e3      	b.n	800efc0 <__smakebuf_r+0xc>
 800eff8:	4b0d      	ldr	r3, [pc, #52]	; (800f030 <__smakebuf_r+0x7c>)
 800effa:	62b3      	str	r3, [r6, #40]	; 0x28
 800effc:	89a3      	ldrh	r3, [r4, #12]
 800effe:	6020      	str	r0, [r4, #0]
 800f000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f004:	81a3      	strh	r3, [r4, #12]
 800f006:	9b00      	ldr	r3, [sp, #0]
 800f008:	6163      	str	r3, [r4, #20]
 800f00a:	9b01      	ldr	r3, [sp, #4]
 800f00c:	6120      	str	r0, [r4, #16]
 800f00e:	b15b      	cbz	r3, 800f028 <__smakebuf_r+0x74>
 800f010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f014:	4630      	mov	r0, r6
 800f016:	f000 feaf 	bl	800fd78 <_isatty_r>
 800f01a:	b128      	cbz	r0, 800f028 <__smakebuf_r+0x74>
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	f023 0303 	bic.w	r3, r3, #3
 800f022:	f043 0301 	orr.w	r3, r3, #1
 800f026:	81a3      	strh	r3, [r4, #12]
 800f028:	89a0      	ldrh	r0, [r4, #12]
 800f02a:	4305      	orrs	r5, r0
 800f02c:	81a5      	strh	r5, [r4, #12]
 800f02e:	e7cd      	b.n	800efcc <__smakebuf_r+0x18>
 800f030:	0800edb9 	.word	0x0800edb9

0800f034 <malloc>:
 800f034:	4b02      	ldr	r3, [pc, #8]	; (800f040 <malloc+0xc>)
 800f036:	4601      	mov	r1, r0
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f000 bc17 	b.w	800f86c <_malloc_r>
 800f03e:	bf00      	nop
 800f040:	20000014 	.word	0x20000014

0800f044 <memcpy>:
 800f044:	440a      	add	r2, r1
 800f046:	4291      	cmp	r1, r2
 800f048:	f100 33ff 	add.w	r3, r0, #4294967295
 800f04c:	d100      	bne.n	800f050 <memcpy+0xc>
 800f04e:	4770      	bx	lr
 800f050:	b510      	push	{r4, lr}
 800f052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f05a:	4291      	cmp	r1, r2
 800f05c:	d1f9      	bne.n	800f052 <memcpy+0xe>
 800f05e:	bd10      	pop	{r4, pc}

0800f060 <_Balloc>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f064:	4604      	mov	r4, r0
 800f066:	460d      	mov	r5, r1
 800f068:	b976      	cbnz	r6, 800f088 <_Balloc+0x28>
 800f06a:	2010      	movs	r0, #16
 800f06c:	f7ff ffe2 	bl	800f034 <malloc>
 800f070:	4602      	mov	r2, r0
 800f072:	6260      	str	r0, [r4, #36]	; 0x24
 800f074:	b920      	cbnz	r0, 800f080 <_Balloc+0x20>
 800f076:	4b18      	ldr	r3, [pc, #96]	; (800f0d8 <_Balloc+0x78>)
 800f078:	4818      	ldr	r0, [pc, #96]	; (800f0dc <_Balloc+0x7c>)
 800f07a:	2166      	movs	r1, #102	; 0x66
 800f07c:	f000 fe2a 	bl	800fcd4 <__assert_func>
 800f080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f084:	6006      	str	r6, [r0, #0]
 800f086:	60c6      	str	r6, [r0, #12]
 800f088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f08a:	68f3      	ldr	r3, [r6, #12]
 800f08c:	b183      	cbz	r3, 800f0b0 <_Balloc+0x50>
 800f08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f096:	b9b8      	cbnz	r0, 800f0c8 <_Balloc+0x68>
 800f098:	2101      	movs	r1, #1
 800f09a:	fa01 f605 	lsl.w	r6, r1, r5
 800f09e:	1d72      	adds	r2, r6, #5
 800f0a0:	0092      	lsls	r2, r2, #2
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f000 fb60 	bl	800f768 <_calloc_r>
 800f0a8:	b160      	cbz	r0, 800f0c4 <_Balloc+0x64>
 800f0aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f0ae:	e00e      	b.n	800f0ce <_Balloc+0x6e>
 800f0b0:	2221      	movs	r2, #33	; 0x21
 800f0b2:	2104      	movs	r1, #4
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f000 fb57 	bl	800f768 <_calloc_r>
 800f0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0bc:	60f0      	str	r0, [r6, #12]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1e4      	bne.n	800f08e <_Balloc+0x2e>
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}
 800f0c8:	6802      	ldr	r2, [r0, #0]
 800f0ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0d4:	e7f7      	b.n	800f0c6 <_Balloc+0x66>
 800f0d6:	bf00      	nop
 800f0d8:	0801012d 	.word	0x0801012d
 800f0dc:	08010210 	.word	0x08010210

0800f0e0 <_Bfree>:
 800f0e0:	b570      	push	{r4, r5, r6, lr}
 800f0e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	b976      	cbnz	r6, 800f108 <_Bfree+0x28>
 800f0ea:	2010      	movs	r0, #16
 800f0ec:	f7ff ffa2 	bl	800f034 <malloc>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	6268      	str	r0, [r5, #36]	; 0x24
 800f0f4:	b920      	cbnz	r0, 800f100 <_Bfree+0x20>
 800f0f6:	4b09      	ldr	r3, [pc, #36]	; (800f11c <_Bfree+0x3c>)
 800f0f8:	4809      	ldr	r0, [pc, #36]	; (800f120 <_Bfree+0x40>)
 800f0fa:	218a      	movs	r1, #138	; 0x8a
 800f0fc:	f000 fdea 	bl	800fcd4 <__assert_func>
 800f100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f104:	6006      	str	r6, [r0, #0]
 800f106:	60c6      	str	r6, [r0, #12]
 800f108:	b13c      	cbz	r4, 800f11a <_Bfree+0x3a>
 800f10a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f10c:	6862      	ldr	r2, [r4, #4]
 800f10e:	68db      	ldr	r3, [r3, #12]
 800f110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f114:	6021      	str	r1, [r4, #0]
 800f116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f11a:	bd70      	pop	{r4, r5, r6, pc}
 800f11c:	0801012d 	.word	0x0801012d
 800f120:	08010210 	.word	0x08010210

0800f124 <__multadd>:
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	690d      	ldr	r5, [r1, #16]
 800f12a:	4607      	mov	r7, r0
 800f12c:	460c      	mov	r4, r1
 800f12e:	461e      	mov	r6, r3
 800f130:	f101 0c14 	add.w	ip, r1, #20
 800f134:	2000      	movs	r0, #0
 800f136:	f8dc 3000 	ldr.w	r3, [ip]
 800f13a:	b299      	uxth	r1, r3
 800f13c:	fb02 6101 	mla	r1, r2, r1, r6
 800f140:	0c1e      	lsrs	r6, r3, #16
 800f142:	0c0b      	lsrs	r3, r1, #16
 800f144:	fb02 3306 	mla	r3, r2, r6, r3
 800f148:	b289      	uxth	r1, r1
 800f14a:	3001      	adds	r0, #1
 800f14c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f150:	4285      	cmp	r5, r0
 800f152:	f84c 1b04 	str.w	r1, [ip], #4
 800f156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f15a:	dcec      	bgt.n	800f136 <__multadd+0x12>
 800f15c:	b30e      	cbz	r6, 800f1a2 <__multadd+0x7e>
 800f15e:	68a3      	ldr	r3, [r4, #8]
 800f160:	42ab      	cmp	r3, r5
 800f162:	dc19      	bgt.n	800f198 <__multadd+0x74>
 800f164:	6861      	ldr	r1, [r4, #4]
 800f166:	4638      	mov	r0, r7
 800f168:	3101      	adds	r1, #1
 800f16a:	f7ff ff79 	bl	800f060 <_Balloc>
 800f16e:	4680      	mov	r8, r0
 800f170:	b928      	cbnz	r0, 800f17e <__multadd+0x5a>
 800f172:	4602      	mov	r2, r0
 800f174:	4b0c      	ldr	r3, [pc, #48]	; (800f1a8 <__multadd+0x84>)
 800f176:	480d      	ldr	r0, [pc, #52]	; (800f1ac <__multadd+0x88>)
 800f178:	21b5      	movs	r1, #181	; 0xb5
 800f17a:	f000 fdab 	bl	800fcd4 <__assert_func>
 800f17e:	6922      	ldr	r2, [r4, #16]
 800f180:	3202      	adds	r2, #2
 800f182:	f104 010c 	add.w	r1, r4, #12
 800f186:	0092      	lsls	r2, r2, #2
 800f188:	300c      	adds	r0, #12
 800f18a:	f7ff ff5b 	bl	800f044 <memcpy>
 800f18e:	4621      	mov	r1, r4
 800f190:	4638      	mov	r0, r7
 800f192:	f7ff ffa5 	bl	800f0e0 <_Bfree>
 800f196:	4644      	mov	r4, r8
 800f198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f19c:	3501      	adds	r5, #1
 800f19e:	615e      	str	r6, [r3, #20]
 800f1a0:	6125      	str	r5, [r4, #16]
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a8:	0801019f 	.word	0x0801019f
 800f1ac:	08010210 	.word	0x08010210

0800f1b0 <__hi0bits>:
 800f1b0:	0c03      	lsrs	r3, r0, #16
 800f1b2:	041b      	lsls	r3, r3, #16
 800f1b4:	b9d3      	cbnz	r3, 800f1ec <__hi0bits+0x3c>
 800f1b6:	0400      	lsls	r0, r0, #16
 800f1b8:	2310      	movs	r3, #16
 800f1ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f1be:	bf04      	itt	eq
 800f1c0:	0200      	lsleq	r0, r0, #8
 800f1c2:	3308      	addeq	r3, #8
 800f1c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f1c8:	bf04      	itt	eq
 800f1ca:	0100      	lsleq	r0, r0, #4
 800f1cc:	3304      	addeq	r3, #4
 800f1ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f1d2:	bf04      	itt	eq
 800f1d4:	0080      	lsleq	r0, r0, #2
 800f1d6:	3302      	addeq	r3, #2
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	db05      	blt.n	800f1e8 <__hi0bits+0x38>
 800f1dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f1e0:	f103 0301 	add.w	r3, r3, #1
 800f1e4:	bf08      	it	eq
 800f1e6:	2320      	moveq	r3, #32
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	4770      	bx	lr
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	e7e4      	b.n	800f1ba <__hi0bits+0xa>

0800f1f0 <__lo0bits>:
 800f1f0:	6803      	ldr	r3, [r0, #0]
 800f1f2:	f013 0207 	ands.w	r2, r3, #7
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	d00b      	beq.n	800f212 <__lo0bits+0x22>
 800f1fa:	07da      	lsls	r2, r3, #31
 800f1fc:	d423      	bmi.n	800f246 <__lo0bits+0x56>
 800f1fe:	0798      	lsls	r0, r3, #30
 800f200:	bf49      	itett	mi
 800f202:	085b      	lsrmi	r3, r3, #1
 800f204:	089b      	lsrpl	r3, r3, #2
 800f206:	2001      	movmi	r0, #1
 800f208:	600b      	strmi	r3, [r1, #0]
 800f20a:	bf5c      	itt	pl
 800f20c:	600b      	strpl	r3, [r1, #0]
 800f20e:	2002      	movpl	r0, #2
 800f210:	4770      	bx	lr
 800f212:	b298      	uxth	r0, r3
 800f214:	b9a8      	cbnz	r0, 800f242 <__lo0bits+0x52>
 800f216:	0c1b      	lsrs	r3, r3, #16
 800f218:	2010      	movs	r0, #16
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	b90a      	cbnz	r2, 800f222 <__lo0bits+0x32>
 800f21e:	3008      	adds	r0, #8
 800f220:	0a1b      	lsrs	r3, r3, #8
 800f222:	071a      	lsls	r2, r3, #28
 800f224:	bf04      	itt	eq
 800f226:	091b      	lsreq	r3, r3, #4
 800f228:	3004      	addeq	r0, #4
 800f22a:	079a      	lsls	r2, r3, #30
 800f22c:	bf04      	itt	eq
 800f22e:	089b      	lsreq	r3, r3, #2
 800f230:	3002      	addeq	r0, #2
 800f232:	07da      	lsls	r2, r3, #31
 800f234:	d403      	bmi.n	800f23e <__lo0bits+0x4e>
 800f236:	085b      	lsrs	r3, r3, #1
 800f238:	f100 0001 	add.w	r0, r0, #1
 800f23c:	d005      	beq.n	800f24a <__lo0bits+0x5a>
 800f23e:	600b      	str	r3, [r1, #0]
 800f240:	4770      	bx	lr
 800f242:	4610      	mov	r0, r2
 800f244:	e7e9      	b.n	800f21a <__lo0bits+0x2a>
 800f246:	2000      	movs	r0, #0
 800f248:	4770      	bx	lr
 800f24a:	2020      	movs	r0, #32
 800f24c:	4770      	bx	lr
	...

0800f250 <__i2b>:
 800f250:	b510      	push	{r4, lr}
 800f252:	460c      	mov	r4, r1
 800f254:	2101      	movs	r1, #1
 800f256:	f7ff ff03 	bl	800f060 <_Balloc>
 800f25a:	4602      	mov	r2, r0
 800f25c:	b928      	cbnz	r0, 800f26a <__i2b+0x1a>
 800f25e:	4b05      	ldr	r3, [pc, #20]	; (800f274 <__i2b+0x24>)
 800f260:	4805      	ldr	r0, [pc, #20]	; (800f278 <__i2b+0x28>)
 800f262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f266:	f000 fd35 	bl	800fcd4 <__assert_func>
 800f26a:	2301      	movs	r3, #1
 800f26c:	6144      	str	r4, [r0, #20]
 800f26e:	6103      	str	r3, [r0, #16]
 800f270:	bd10      	pop	{r4, pc}
 800f272:	bf00      	nop
 800f274:	0801019f 	.word	0x0801019f
 800f278:	08010210 	.word	0x08010210

0800f27c <__multiply>:
 800f27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f280:	4691      	mov	r9, r2
 800f282:	690a      	ldr	r2, [r1, #16]
 800f284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f288:	429a      	cmp	r2, r3
 800f28a:	bfb8      	it	lt
 800f28c:	460b      	movlt	r3, r1
 800f28e:	460c      	mov	r4, r1
 800f290:	bfbc      	itt	lt
 800f292:	464c      	movlt	r4, r9
 800f294:	4699      	movlt	r9, r3
 800f296:	6927      	ldr	r7, [r4, #16]
 800f298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f29c:	68a3      	ldr	r3, [r4, #8]
 800f29e:	6861      	ldr	r1, [r4, #4]
 800f2a0:	eb07 060a 	add.w	r6, r7, sl
 800f2a4:	42b3      	cmp	r3, r6
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	bfb8      	it	lt
 800f2aa:	3101      	addlt	r1, #1
 800f2ac:	f7ff fed8 	bl	800f060 <_Balloc>
 800f2b0:	b930      	cbnz	r0, 800f2c0 <__multiply+0x44>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	4b44      	ldr	r3, [pc, #272]	; (800f3c8 <__multiply+0x14c>)
 800f2b6:	4845      	ldr	r0, [pc, #276]	; (800f3cc <__multiply+0x150>)
 800f2b8:	f240 115d 	movw	r1, #349	; 0x15d
 800f2bc:	f000 fd0a 	bl	800fcd4 <__assert_func>
 800f2c0:	f100 0514 	add.w	r5, r0, #20
 800f2c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2c8:	462b      	mov	r3, r5
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	4543      	cmp	r3, r8
 800f2ce:	d321      	bcc.n	800f314 <__multiply+0x98>
 800f2d0:	f104 0314 	add.w	r3, r4, #20
 800f2d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f2d8:	f109 0314 	add.w	r3, r9, #20
 800f2dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f2e0:	9202      	str	r2, [sp, #8]
 800f2e2:	1b3a      	subs	r2, r7, r4
 800f2e4:	3a15      	subs	r2, #21
 800f2e6:	f022 0203 	bic.w	r2, r2, #3
 800f2ea:	3204      	adds	r2, #4
 800f2ec:	f104 0115 	add.w	r1, r4, #21
 800f2f0:	428f      	cmp	r7, r1
 800f2f2:	bf38      	it	cc
 800f2f4:	2204      	movcc	r2, #4
 800f2f6:	9201      	str	r2, [sp, #4]
 800f2f8:	9a02      	ldr	r2, [sp, #8]
 800f2fa:	9303      	str	r3, [sp, #12]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d80c      	bhi.n	800f31a <__multiply+0x9e>
 800f300:	2e00      	cmp	r6, #0
 800f302:	dd03      	ble.n	800f30c <__multiply+0x90>
 800f304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d05a      	beq.n	800f3c2 <__multiply+0x146>
 800f30c:	6106      	str	r6, [r0, #16]
 800f30e:	b005      	add	sp, #20
 800f310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f314:	f843 2b04 	str.w	r2, [r3], #4
 800f318:	e7d8      	b.n	800f2cc <__multiply+0x50>
 800f31a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f31e:	f1ba 0f00 	cmp.w	sl, #0
 800f322:	d024      	beq.n	800f36e <__multiply+0xf2>
 800f324:	f104 0e14 	add.w	lr, r4, #20
 800f328:	46a9      	mov	r9, r5
 800f32a:	f04f 0c00 	mov.w	ip, #0
 800f32e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f332:	f8d9 1000 	ldr.w	r1, [r9]
 800f336:	fa1f fb82 	uxth.w	fp, r2
 800f33a:	b289      	uxth	r1, r1
 800f33c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f344:	f8d9 2000 	ldr.w	r2, [r9]
 800f348:	4461      	add	r1, ip
 800f34a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f34e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f356:	b289      	uxth	r1, r1
 800f358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f35c:	4577      	cmp	r7, lr
 800f35e:	f849 1b04 	str.w	r1, [r9], #4
 800f362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f366:	d8e2      	bhi.n	800f32e <__multiply+0xb2>
 800f368:	9a01      	ldr	r2, [sp, #4]
 800f36a:	f845 c002 	str.w	ip, [r5, r2]
 800f36e:	9a03      	ldr	r2, [sp, #12]
 800f370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f374:	3304      	adds	r3, #4
 800f376:	f1b9 0f00 	cmp.w	r9, #0
 800f37a:	d020      	beq.n	800f3be <__multiply+0x142>
 800f37c:	6829      	ldr	r1, [r5, #0]
 800f37e:	f104 0c14 	add.w	ip, r4, #20
 800f382:	46ae      	mov	lr, r5
 800f384:	f04f 0a00 	mov.w	sl, #0
 800f388:	f8bc b000 	ldrh.w	fp, [ip]
 800f38c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f390:	fb09 220b 	mla	r2, r9, fp, r2
 800f394:	4492      	add	sl, r2
 800f396:	b289      	uxth	r1, r1
 800f398:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f39c:	f84e 1b04 	str.w	r1, [lr], #4
 800f3a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f3a4:	f8be 1000 	ldrh.w	r1, [lr]
 800f3a8:	0c12      	lsrs	r2, r2, #16
 800f3aa:	fb09 1102 	mla	r1, r9, r2, r1
 800f3ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f3b2:	4567      	cmp	r7, ip
 800f3b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f3b8:	d8e6      	bhi.n	800f388 <__multiply+0x10c>
 800f3ba:	9a01      	ldr	r2, [sp, #4]
 800f3bc:	50a9      	str	r1, [r5, r2]
 800f3be:	3504      	adds	r5, #4
 800f3c0:	e79a      	b.n	800f2f8 <__multiply+0x7c>
 800f3c2:	3e01      	subs	r6, #1
 800f3c4:	e79c      	b.n	800f300 <__multiply+0x84>
 800f3c6:	bf00      	nop
 800f3c8:	0801019f 	.word	0x0801019f
 800f3cc:	08010210 	.word	0x08010210

0800f3d0 <__pow5mult>:
 800f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3d4:	4615      	mov	r5, r2
 800f3d6:	f012 0203 	ands.w	r2, r2, #3
 800f3da:	4606      	mov	r6, r0
 800f3dc:	460f      	mov	r7, r1
 800f3de:	d007      	beq.n	800f3f0 <__pow5mult+0x20>
 800f3e0:	4c25      	ldr	r4, [pc, #148]	; (800f478 <__pow5mult+0xa8>)
 800f3e2:	3a01      	subs	r2, #1
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3ea:	f7ff fe9b 	bl	800f124 <__multadd>
 800f3ee:	4607      	mov	r7, r0
 800f3f0:	10ad      	asrs	r5, r5, #2
 800f3f2:	d03d      	beq.n	800f470 <__pow5mult+0xa0>
 800f3f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f3f6:	b97c      	cbnz	r4, 800f418 <__pow5mult+0x48>
 800f3f8:	2010      	movs	r0, #16
 800f3fa:	f7ff fe1b 	bl	800f034 <malloc>
 800f3fe:	4602      	mov	r2, r0
 800f400:	6270      	str	r0, [r6, #36]	; 0x24
 800f402:	b928      	cbnz	r0, 800f410 <__pow5mult+0x40>
 800f404:	4b1d      	ldr	r3, [pc, #116]	; (800f47c <__pow5mult+0xac>)
 800f406:	481e      	ldr	r0, [pc, #120]	; (800f480 <__pow5mult+0xb0>)
 800f408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f40c:	f000 fc62 	bl	800fcd4 <__assert_func>
 800f410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f414:	6004      	str	r4, [r0, #0]
 800f416:	60c4      	str	r4, [r0, #12]
 800f418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f41c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f420:	b94c      	cbnz	r4, 800f436 <__pow5mult+0x66>
 800f422:	f240 2171 	movw	r1, #625	; 0x271
 800f426:	4630      	mov	r0, r6
 800f428:	f7ff ff12 	bl	800f250 <__i2b>
 800f42c:	2300      	movs	r3, #0
 800f42e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f432:	4604      	mov	r4, r0
 800f434:	6003      	str	r3, [r0, #0]
 800f436:	f04f 0900 	mov.w	r9, #0
 800f43a:	07eb      	lsls	r3, r5, #31
 800f43c:	d50a      	bpl.n	800f454 <__pow5mult+0x84>
 800f43e:	4639      	mov	r1, r7
 800f440:	4622      	mov	r2, r4
 800f442:	4630      	mov	r0, r6
 800f444:	f7ff ff1a 	bl	800f27c <__multiply>
 800f448:	4639      	mov	r1, r7
 800f44a:	4680      	mov	r8, r0
 800f44c:	4630      	mov	r0, r6
 800f44e:	f7ff fe47 	bl	800f0e0 <_Bfree>
 800f452:	4647      	mov	r7, r8
 800f454:	106d      	asrs	r5, r5, #1
 800f456:	d00b      	beq.n	800f470 <__pow5mult+0xa0>
 800f458:	6820      	ldr	r0, [r4, #0]
 800f45a:	b938      	cbnz	r0, 800f46c <__pow5mult+0x9c>
 800f45c:	4622      	mov	r2, r4
 800f45e:	4621      	mov	r1, r4
 800f460:	4630      	mov	r0, r6
 800f462:	f7ff ff0b 	bl	800f27c <__multiply>
 800f466:	6020      	str	r0, [r4, #0]
 800f468:	f8c0 9000 	str.w	r9, [r0]
 800f46c:	4604      	mov	r4, r0
 800f46e:	e7e4      	b.n	800f43a <__pow5mult+0x6a>
 800f470:	4638      	mov	r0, r7
 800f472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f476:	bf00      	nop
 800f478:	08010360 	.word	0x08010360
 800f47c:	0801012d 	.word	0x0801012d
 800f480:	08010210 	.word	0x08010210

0800f484 <__lshift>:
 800f484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f488:	460c      	mov	r4, r1
 800f48a:	6849      	ldr	r1, [r1, #4]
 800f48c:	6923      	ldr	r3, [r4, #16]
 800f48e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	4607      	mov	r7, r0
 800f496:	4691      	mov	r9, r2
 800f498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f49c:	f108 0601 	add.w	r6, r8, #1
 800f4a0:	42b3      	cmp	r3, r6
 800f4a2:	db0b      	blt.n	800f4bc <__lshift+0x38>
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	f7ff fddb 	bl	800f060 <_Balloc>
 800f4aa:	4605      	mov	r5, r0
 800f4ac:	b948      	cbnz	r0, 800f4c2 <__lshift+0x3e>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	4b2a      	ldr	r3, [pc, #168]	; (800f55c <__lshift+0xd8>)
 800f4b2:	482b      	ldr	r0, [pc, #172]	; (800f560 <__lshift+0xdc>)
 800f4b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f4b8:	f000 fc0c 	bl	800fcd4 <__assert_func>
 800f4bc:	3101      	adds	r1, #1
 800f4be:	005b      	lsls	r3, r3, #1
 800f4c0:	e7ee      	b.n	800f4a0 <__lshift+0x1c>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f100 0114 	add.w	r1, r0, #20
 800f4c8:	f100 0210 	add.w	r2, r0, #16
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	4553      	cmp	r3, sl
 800f4d0:	db37      	blt.n	800f542 <__lshift+0xbe>
 800f4d2:	6920      	ldr	r0, [r4, #16]
 800f4d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4d8:	f104 0314 	add.w	r3, r4, #20
 800f4dc:	f019 091f 	ands.w	r9, r9, #31
 800f4e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f4e8:	d02f      	beq.n	800f54a <__lshift+0xc6>
 800f4ea:	f1c9 0e20 	rsb	lr, r9, #32
 800f4ee:	468a      	mov	sl, r1
 800f4f0:	f04f 0c00 	mov.w	ip, #0
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	fa02 f209 	lsl.w	r2, r2, r9
 800f4fa:	ea42 020c 	orr.w	r2, r2, ip
 800f4fe:	f84a 2b04 	str.w	r2, [sl], #4
 800f502:	f853 2b04 	ldr.w	r2, [r3], #4
 800f506:	4298      	cmp	r0, r3
 800f508:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f50c:	d8f2      	bhi.n	800f4f4 <__lshift+0x70>
 800f50e:	1b03      	subs	r3, r0, r4
 800f510:	3b15      	subs	r3, #21
 800f512:	f023 0303 	bic.w	r3, r3, #3
 800f516:	3304      	adds	r3, #4
 800f518:	f104 0215 	add.w	r2, r4, #21
 800f51c:	4290      	cmp	r0, r2
 800f51e:	bf38      	it	cc
 800f520:	2304      	movcc	r3, #4
 800f522:	f841 c003 	str.w	ip, [r1, r3]
 800f526:	f1bc 0f00 	cmp.w	ip, #0
 800f52a:	d001      	beq.n	800f530 <__lshift+0xac>
 800f52c:	f108 0602 	add.w	r6, r8, #2
 800f530:	3e01      	subs	r6, #1
 800f532:	4638      	mov	r0, r7
 800f534:	612e      	str	r6, [r5, #16]
 800f536:	4621      	mov	r1, r4
 800f538:	f7ff fdd2 	bl	800f0e0 <_Bfree>
 800f53c:	4628      	mov	r0, r5
 800f53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f542:	f842 0f04 	str.w	r0, [r2, #4]!
 800f546:	3301      	adds	r3, #1
 800f548:	e7c1      	b.n	800f4ce <__lshift+0x4a>
 800f54a:	3904      	subs	r1, #4
 800f54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f550:	f841 2f04 	str.w	r2, [r1, #4]!
 800f554:	4298      	cmp	r0, r3
 800f556:	d8f9      	bhi.n	800f54c <__lshift+0xc8>
 800f558:	e7ea      	b.n	800f530 <__lshift+0xac>
 800f55a:	bf00      	nop
 800f55c:	0801019f 	.word	0x0801019f
 800f560:	08010210 	.word	0x08010210

0800f564 <__mcmp>:
 800f564:	b530      	push	{r4, r5, lr}
 800f566:	6902      	ldr	r2, [r0, #16]
 800f568:	690c      	ldr	r4, [r1, #16]
 800f56a:	1b12      	subs	r2, r2, r4
 800f56c:	d10e      	bne.n	800f58c <__mcmp+0x28>
 800f56e:	f100 0314 	add.w	r3, r0, #20
 800f572:	3114      	adds	r1, #20
 800f574:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f578:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f57c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f580:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f584:	42a5      	cmp	r5, r4
 800f586:	d003      	beq.n	800f590 <__mcmp+0x2c>
 800f588:	d305      	bcc.n	800f596 <__mcmp+0x32>
 800f58a:	2201      	movs	r2, #1
 800f58c:	4610      	mov	r0, r2
 800f58e:	bd30      	pop	{r4, r5, pc}
 800f590:	4283      	cmp	r3, r0
 800f592:	d3f3      	bcc.n	800f57c <__mcmp+0x18>
 800f594:	e7fa      	b.n	800f58c <__mcmp+0x28>
 800f596:	f04f 32ff 	mov.w	r2, #4294967295
 800f59a:	e7f7      	b.n	800f58c <__mcmp+0x28>

0800f59c <__mdiff>:
 800f59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	4690      	mov	r8, r2
 800f5aa:	f7ff ffdb 	bl	800f564 <__mcmp>
 800f5ae:	1e05      	subs	r5, r0, #0
 800f5b0:	d110      	bne.n	800f5d4 <__mdiff+0x38>
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	f7ff fd53 	bl	800f060 <_Balloc>
 800f5ba:	b930      	cbnz	r0, 800f5ca <__mdiff+0x2e>
 800f5bc:	4b3a      	ldr	r3, [pc, #232]	; (800f6a8 <__mdiff+0x10c>)
 800f5be:	4602      	mov	r2, r0
 800f5c0:	f240 2132 	movw	r1, #562	; 0x232
 800f5c4:	4839      	ldr	r0, [pc, #228]	; (800f6ac <__mdiff+0x110>)
 800f5c6:	f000 fb85 	bl	800fcd4 <__assert_func>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d4:	bfa4      	itt	ge
 800f5d6:	4643      	movge	r3, r8
 800f5d8:	46a0      	movge	r8, r4
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f5e0:	bfa6      	itte	ge
 800f5e2:	461c      	movge	r4, r3
 800f5e4:	2500      	movge	r5, #0
 800f5e6:	2501      	movlt	r5, #1
 800f5e8:	f7ff fd3a 	bl	800f060 <_Balloc>
 800f5ec:	b920      	cbnz	r0, 800f5f8 <__mdiff+0x5c>
 800f5ee:	4b2e      	ldr	r3, [pc, #184]	; (800f6a8 <__mdiff+0x10c>)
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f5f6:	e7e5      	b.n	800f5c4 <__mdiff+0x28>
 800f5f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5fc:	6926      	ldr	r6, [r4, #16]
 800f5fe:	60c5      	str	r5, [r0, #12]
 800f600:	f104 0914 	add.w	r9, r4, #20
 800f604:	f108 0514 	add.w	r5, r8, #20
 800f608:	f100 0e14 	add.w	lr, r0, #20
 800f60c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f614:	f108 0210 	add.w	r2, r8, #16
 800f618:	46f2      	mov	sl, lr
 800f61a:	2100      	movs	r1, #0
 800f61c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f620:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f624:	fa1f f883 	uxth.w	r8, r3
 800f628:	fa11 f18b 	uxtah	r1, r1, fp
 800f62c:	0c1b      	lsrs	r3, r3, #16
 800f62e:	eba1 0808 	sub.w	r8, r1, r8
 800f632:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f636:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f63a:	fa1f f888 	uxth.w	r8, r8
 800f63e:	1419      	asrs	r1, r3, #16
 800f640:	454e      	cmp	r6, r9
 800f642:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f646:	f84a 3b04 	str.w	r3, [sl], #4
 800f64a:	d8e7      	bhi.n	800f61c <__mdiff+0x80>
 800f64c:	1b33      	subs	r3, r6, r4
 800f64e:	3b15      	subs	r3, #21
 800f650:	f023 0303 	bic.w	r3, r3, #3
 800f654:	3304      	adds	r3, #4
 800f656:	3415      	adds	r4, #21
 800f658:	42a6      	cmp	r6, r4
 800f65a:	bf38      	it	cc
 800f65c:	2304      	movcc	r3, #4
 800f65e:	441d      	add	r5, r3
 800f660:	4473      	add	r3, lr
 800f662:	469e      	mov	lr, r3
 800f664:	462e      	mov	r6, r5
 800f666:	4566      	cmp	r6, ip
 800f668:	d30e      	bcc.n	800f688 <__mdiff+0xec>
 800f66a:	f10c 0203 	add.w	r2, ip, #3
 800f66e:	1b52      	subs	r2, r2, r5
 800f670:	f022 0203 	bic.w	r2, r2, #3
 800f674:	3d03      	subs	r5, #3
 800f676:	45ac      	cmp	ip, r5
 800f678:	bf38      	it	cc
 800f67a:	2200      	movcc	r2, #0
 800f67c:	441a      	add	r2, r3
 800f67e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f682:	b17b      	cbz	r3, 800f6a4 <__mdiff+0x108>
 800f684:	6107      	str	r7, [r0, #16]
 800f686:	e7a3      	b.n	800f5d0 <__mdiff+0x34>
 800f688:	f856 8b04 	ldr.w	r8, [r6], #4
 800f68c:	fa11 f288 	uxtah	r2, r1, r8
 800f690:	1414      	asrs	r4, r2, #16
 800f692:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f696:	b292      	uxth	r2, r2
 800f698:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f69c:	f84e 2b04 	str.w	r2, [lr], #4
 800f6a0:	1421      	asrs	r1, r4, #16
 800f6a2:	e7e0      	b.n	800f666 <__mdiff+0xca>
 800f6a4:	3f01      	subs	r7, #1
 800f6a6:	e7ea      	b.n	800f67e <__mdiff+0xe2>
 800f6a8:	0801019f 	.word	0x0801019f
 800f6ac:	08010210 	.word	0x08010210

0800f6b0 <__d2b>:
 800f6b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f6b4:	4689      	mov	r9, r1
 800f6b6:	2101      	movs	r1, #1
 800f6b8:	ec57 6b10 	vmov	r6, r7, d0
 800f6bc:	4690      	mov	r8, r2
 800f6be:	f7ff fccf 	bl	800f060 <_Balloc>
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	b930      	cbnz	r0, 800f6d4 <__d2b+0x24>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	4b25      	ldr	r3, [pc, #148]	; (800f760 <__d2b+0xb0>)
 800f6ca:	4826      	ldr	r0, [pc, #152]	; (800f764 <__d2b+0xb4>)
 800f6cc:	f240 310a 	movw	r1, #778	; 0x30a
 800f6d0:	f000 fb00 	bl	800fcd4 <__assert_func>
 800f6d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f6d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f6dc:	bb35      	cbnz	r5, 800f72c <__d2b+0x7c>
 800f6de:	2e00      	cmp	r6, #0
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	d028      	beq.n	800f736 <__d2b+0x86>
 800f6e4:	4668      	mov	r0, sp
 800f6e6:	9600      	str	r6, [sp, #0]
 800f6e8:	f7ff fd82 	bl	800f1f0 <__lo0bits>
 800f6ec:	9900      	ldr	r1, [sp, #0]
 800f6ee:	b300      	cbz	r0, 800f732 <__d2b+0x82>
 800f6f0:	9a01      	ldr	r2, [sp, #4]
 800f6f2:	f1c0 0320 	rsb	r3, r0, #32
 800f6f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f6fa:	430b      	orrs	r3, r1
 800f6fc:	40c2      	lsrs	r2, r0
 800f6fe:	6163      	str	r3, [r4, #20]
 800f700:	9201      	str	r2, [sp, #4]
 800f702:	9b01      	ldr	r3, [sp, #4]
 800f704:	61a3      	str	r3, [r4, #24]
 800f706:	2b00      	cmp	r3, #0
 800f708:	bf14      	ite	ne
 800f70a:	2202      	movne	r2, #2
 800f70c:	2201      	moveq	r2, #1
 800f70e:	6122      	str	r2, [r4, #16]
 800f710:	b1d5      	cbz	r5, 800f748 <__d2b+0x98>
 800f712:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f716:	4405      	add	r5, r0
 800f718:	f8c9 5000 	str.w	r5, [r9]
 800f71c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f720:	f8c8 0000 	str.w	r0, [r8]
 800f724:	4620      	mov	r0, r4
 800f726:	b003      	add	sp, #12
 800f728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f72c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f730:	e7d5      	b.n	800f6de <__d2b+0x2e>
 800f732:	6161      	str	r1, [r4, #20]
 800f734:	e7e5      	b.n	800f702 <__d2b+0x52>
 800f736:	a801      	add	r0, sp, #4
 800f738:	f7ff fd5a 	bl	800f1f0 <__lo0bits>
 800f73c:	9b01      	ldr	r3, [sp, #4]
 800f73e:	6163      	str	r3, [r4, #20]
 800f740:	2201      	movs	r2, #1
 800f742:	6122      	str	r2, [r4, #16]
 800f744:	3020      	adds	r0, #32
 800f746:	e7e3      	b.n	800f710 <__d2b+0x60>
 800f748:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f74c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f750:	f8c9 0000 	str.w	r0, [r9]
 800f754:	6918      	ldr	r0, [r3, #16]
 800f756:	f7ff fd2b 	bl	800f1b0 <__hi0bits>
 800f75a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f75e:	e7df      	b.n	800f720 <__d2b+0x70>
 800f760:	0801019f 	.word	0x0801019f
 800f764:	08010210 	.word	0x08010210

0800f768 <_calloc_r>:
 800f768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f76a:	fba1 2402 	umull	r2, r4, r1, r2
 800f76e:	b94c      	cbnz	r4, 800f784 <_calloc_r+0x1c>
 800f770:	4611      	mov	r1, r2
 800f772:	9201      	str	r2, [sp, #4]
 800f774:	f000 f87a 	bl	800f86c <_malloc_r>
 800f778:	9a01      	ldr	r2, [sp, #4]
 800f77a:	4605      	mov	r5, r0
 800f77c:	b930      	cbnz	r0, 800f78c <_calloc_r+0x24>
 800f77e:	4628      	mov	r0, r5
 800f780:	b003      	add	sp, #12
 800f782:	bd30      	pop	{r4, r5, pc}
 800f784:	220c      	movs	r2, #12
 800f786:	6002      	str	r2, [r0, #0]
 800f788:	2500      	movs	r5, #0
 800f78a:	e7f8      	b.n	800f77e <_calloc_r+0x16>
 800f78c:	4621      	mov	r1, r4
 800f78e:	f7fd fd25 	bl	800d1dc <memset>
 800f792:	e7f4      	b.n	800f77e <_calloc_r+0x16>

0800f794 <_free_r>:
 800f794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f796:	2900      	cmp	r1, #0
 800f798:	d044      	beq.n	800f824 <_free_r+0x90>
 800f79a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f79e:	9001      	str	r0, [sp, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f1a1 0404 	sub.w	r4, r1, #4
 800f7a6:	bfb8      	it	lt
 800f7a8:	18e4      	addlt	r4, r4, r3
 800f7aa:	f000 fb19 	bl	800fde0 <__malloc_lock>
 800f7ae:	4a1e      	ldr	r2, [pc, #120]	; (800f828 <_free_r+0x94>)
 800f7b0:	9801      	ldr	r0, [sp, #4]
 800f7b2:	6813      	ldr	r3, [r2, #0]
 800f7b4:	b933      	cbnz	r3, 800f7c4 <_free_r+0x30>
 800f7b6:	6063      	str	r3, [r4, #4]
 800f7b8:	6014      	str	r4, [r2, #0]
 800f7ba:	b003      	add	sp, #12
 800f7bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7c0:	f000 bb14 	b.w	800fdec <__malloc_unlock>
 800f7c4:	42a3      	cmp	r3, r4
 800f7c6:	d908      	bls.n	800f7da <_free_r+0x46>
 800f7c8:	6825      	ldr	r5, [r4, #0]
 800f7ca:	1961      	adds	r1, r4, r5
 800f7cc:	428b      	cmp	r3, r1
 800f7ce:	bf01      	itttt	eq
 800f7d0:	6819      	ldreq	r1, [r3, #0]
 800f7d2:	685b      	ldreq	r3, [r3, #4]
 800f7d4:	1949      	addeq	r1, r1, r5
 800f7d6:	6021      	streq	r1, [r4, #0]
 800f7d8:	e7ed      	b.n	800f7b6 <_free_r+0x22>
 800f7da:	461a      	mov	r2, r3
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	b10b      	cbz	r3, 800f7e4 <_free_r+0x50>
 800f7e0:	42a3      	cmp	r3, r4
 800f7e2:	d9fa      	bls.n	800f7da <_free_r+0x46>
 800f7e4:	6811      	ldr	r1, [r2, #0]
 800f7e6:	1855      	adds	r5, r2, r1
 800f7e8:	42a5      	cmp	r5, r4
 800f7ea:	d10b      	bne.n	800f804 <_free_r+0x70>
 800f7ec:	6824      	ldr	r4, [r4, #0]
 800f7ee:	4421      	add	r1, r4
 800f7f0:	1854      	adds	r4, r2, r1
 800f7f2:	42a3      	cmp	r3, r4
 800f7f4:	6011      	str	r1, [r2, #0]
 800f7f6:	d1e0      	bne.n	800f7ba <_free_r+0x26>
 800f7f8:	681c      	ldr	r4, [r3, #0]
 800f7fa:	685b      	ldr	r3, [r3, #4]
 800f7fc:	6053      	str	r3, [r2, #4]
 800f7fe:	4421      	add	r1, r4
 800f800:	6011      	str	r1, [r2, #0]
 800f802:	e7da      	b.n	800f7ba <_free_r+0x26>
 800f804:	d902      	bls.n	800f80c <_free_r+0x78>
 800f806:	230c      	movs	r3, #12
 800f808:	6003      	str	r3, [r0, #0]
 800f80a:	e7d6      	b.n	800f7ba <_free_r+0x26>
 800f80c:	6825      	ldr	r5, [r4, #0]
 800f80e:	1961      	adds	r1, r4, r5
 800f810:	428b      	cmp	r3, r1
 800f812:	bf04      	itt	eq
 800f814:	6819      	ldreq	r1, [r3, #0]
 800f816:	685b      	ldreq	r3, [r3, #4]
 800f818:	6063      	str	r3, [r4, #4]
 800f81a:	bf04      	itt	eq
 800f81c:	1949      	addeq	r1, r1, r5
 800f81e:	6021      	streq	r1, [r4, #0]
 800f820:	6054      	str	r4, [r2, #4]
 800f822:	e7ca      	b.n	800f7ba <_free_r+0x26>
 800f824:	b003      	add	sp, #12
 800f826:	bd30      	pop	{r4, r5, pc}
 800f828:	20000ae8 	.word	0x20000ae8

0800f82c <sbrk_aligned>:
 800f82c:	b570      	push	{r4, r5, r6, lr}
 800f82e:	4e0e      	ldr	r6, [pc, #56]	; (800f868 <sbrk_aligned+0x3c>)
 800f830:	460c      	mov	r4, r1
 800f832:	6831      	ldr	r1, [r6, #0]
 800f834:	4605      	mov	r5, r0
 800f836:	b911      	cbnz	r1, 800f83e <sbrk_aligned+0x12>
 800f838:	f000 f9e6 	bl	800fc08 <_sbrk_r>
 800f83c:	6030      	str	r0, [r6, #0]
 800f83e:	4621      	mov	r1, r4
 800f840:	4628      	mov	r0, r5
 800f842:	f000 f9e1 	bl	800fc08 <_sbrk_r>
 800f846:	1c43      	adds	r3, r0, #1
 800f848:	d00a      	beq.n	800f860 <sbrk_aligned+0x34>
 800f84a:	1cc4      	adds	r4, r0, #3
 800f84c:	f024 0403 	bic.w	r4, r4, #3
 800f850:	42a0      	cmp	r0, r4
 800f852:	d007      	beq.n	800f864 <sbrk_aligned+0x38>
 800f854:	1a21      	subs	r1, r4, r0
 800f856:	4628      	mov	r0, r5
 800f858:	f000 f9d6 	bl	800fc08 <_sbrk_r>
 800f85c:	3001      	adds	r0, #1
 800f85e:	d101      	bne.n	800f864 <sbrk_aligned+0x38>
 800f860:	f04f 34ff 	mov.w	r4, #4294967295
 800f864:	4620      	mov	r0, r4
 800f866:	bd70      	pop	{r4, r5, r6, pc}
 800f868:	20000aec 	.word	0x20000aec

0800f86c <_malloc_r>:
 800f86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f870:	1ccd      	adds	r5, r1, #3
 800f872:	f025 0503 	bic.w	r5, r5, #3
 800f876:	3508      	adds	r5, #8
 800f878:	2d0c      	cmp	r5, #12
 800f87a:	bf38      	it	cc
 800f87c:	250c      	movcc	r5, #12
 800f87e:	2d00      	cmp	r5, #0
 800f880:	4607      	mov	r7, r0
 800f882:	db01      	blt.n	800f888 <_malloc_r+0x1c>
 800f884:	42a9      	cmp	r1, r5
 800f886:	d905      	bls.n	800f894 <_malloc_r+0x28>
 800f888:	230c      	movs	r3, #12
 800f88a:	603b      	str	r3, [r7, #0]
 800f88c:	2600      	movs	r6, #0
 800f88e:	4630      	mov	r0, r6
 800f890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f894:	4e2e      	ldr	r6, [pc, #184]	; (800f950 <_malloc_r+0xe4>)
 800f896:	f000 faa3 	bl	800fde0 <__malloc_lock>
 800f89a:	6833      	ldr	r3, [r6, #0]
 800f89c:	461c      	mov	r4, r3
 800f89e:	bb34      	cbnz	r4, 800f8ee <_malloc_r+0x82>
 800f8a0:	4629      	mov	r1, r5
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	f7ff ffc2 	bl	800f82c <sbrk_aligned>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	d14d      	bne.n	800f94a <_malloc_r+0xde>
 800f8ae:	6834      	ldr	r4, [r6, #0]
 800f8b0:	4626      	mov	r6, r4
 800f8b2:	2e00      	cmp	r6, #0
 800f8b4:	d140      	bne.n	800f938 <_malloc_r+0xcc>
 800f8b6:	6823      	ldr	r3, [r4, #0]
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4638      	mov	r0, r7
 800f8bc:	eb04 0803 	add.w	r8, r4, r3
 800f8c0:	f000 f9a2 	bl	800fc08 <_sbrk_r>
 800f8c4:	4580      	cmp	r8, r0
 800f8c6:	d13a      	bne.n	800f93e <_malloc_r+0xd2>
 800f8c8:	6821      	ldr	r1, [r4, #0]
 800f8ca:	3503      	adds	r5, #3
 800f8cc:	1a6d      	subs	r5, r5, r1
 800f8ce:	f025 0503 	bic.w	r5, r5, #3
 800f8d2:	3508      	adds	r5, #8
 800f8d4:	2d0c      	cmp	r5, #12
 800f8d6:	bf38      	it	cc
 800f8d8:	250c      	movcc	r5, #12
 800f8da:	4629      	mov	r1, r5
 800f8dc:	4638      	mov	r0, r7
 800f8de:	f7ff ffa5 	bl	800f82c <sbrk_aligned>
 800f8e2:	3001      	adds	r0, #1
 800f8e4:	d02b      	beq.n	800f93e <_malloc_r+0xd2>
 800f8e6:	6823      	ldr	r3, [r4, #0]
 800f8e8:	442b      	add	r3, r5
 800f8ea:	6023      	str	r3, [r4, #0]
 800f8ec:	e00e      	b.n	800f90c <_malloc_r+0xa0>
 800f8ee:	6822      	ldr	r2, [r4, #0]
 800f8f0:	1b52      	subs	r2, r2, r5
 800f8f2:	d41e      	bmi.n	800f932 <_malloc_r+0xc6>
 800f8f4:	2a0b      	cmp	r2, #11
 800f8f6:	d916      	bls.n	800f926 <_malloc_r+0xba>
 800f8f8:	1961      	adds	r1, r4, r5
 800f8fa:	42a3      	cmp	r3, r4
 800f8fc:	6025      	str	r5, [r4, #0]
 800f8fe:	bf18      	it	ne
 800f900:	6059      	strne	r1, [r3, #4]
 800f902:	6863      	ldr	r3, [r4, #4]
 800f904:	bf08      	it	eq
 800f906:	6031      	streq	r1, [r6, #0]
 800f908:	5162      	str	r2, [r4, r5]
 800f90a:	604b      	str	r3, [r1, #4]
 800f90c:	4638      	mov	r0, r7
 800f90e:	f104 060b 	add.w	r6, r4, #11
 800f912:	f000 fa6b 	bl	800fdec <__malloc_unlock>
 800f916:	f026 0607 	bic.w	r6, r6, #7
 800f91a:	1d23      	adds	r3, r4, #4
 800f91c:	1af2      	subs	r2, r6, r3
 800f91e:	d0b6      	beq.n	800f88e <_malloc_r+0x22>
 800f920:	1b9b      	subs	r3, r3, r6
 800f922:	50a3      	str	r3, [r4, r2]
 800f924:	e7b3      	b.n	800f88e <_malloc_r+0x22>
 800f926:	6862      	ldr	r2, [r4, #4]
 800f928:	42a3      	cmp	r3, r4
 800f92a:	bf0c      	ite	eq
 800f92c:	6032      	streq	r2, [r6, #0]
 800f92e:	605a      	strne	r2, [r3, #4]
 800f930:	e7ec      	b.n	800f90c <_malloc_r+0xa0>
 800f932:	4623      	mov	r3, r4
 800f934:	6864      	ldr	r4, [r4, #4]
 800f936:	e7b2      	b.n	800f89e <_malloc_r+0x32>
 800f938:	4634      	mov	r4, r6
 800f93a:	6876      	ldr	r6, [r6, #4]
 800f93c:	e7b9      	b.n	800f8b2 <_malloc_r+0x46>
 800f93e:	230c      	movs	r3, #12
 800f940:	603b      	str	r3, [r7, #0]
 800f942:	4638      	mov	r0, r7
 800f944:	f000 fa52 	bl	800fdec <__malloc_unlock>
 800f948:	e7a1      	b.n	800f88e <_malloc_r+0x22>
 800f94a:	6025      	str	r5, [r4, #0]
 800f94c:	e7de      	b.n	800f90c <_malloc_r+0xa0>
 800f94e:	bf00      	nop
 800f950:	20000ae8 	.word	0x20000ae8

0800f954 <__sfputc_r>:
 800f954:	6893      	ldr	r3, [r2, #8]
 800f956:	3b01      	subs	r3, #1
 800f958:	2b00      	cmp	r3, #0
 800f95a:	b410      	push	{r4}
 800f95c:	6093      	str	r3, [r2, #8]
 800f95e:	da08      	bge.n	800f972 <__sfputc_r+0x1e>
 800f960:	6994      	ldr	r4, [r2, #24]
 800f962:	42a3      	cmp	r3, r4
 800f964:	db01      	blt.n	800f96a <__sfputc_r+0x16>
 800f966:	290a      	cmp	r1, #10
 800f968:	d103      	bne.n	800f972 <__sfputc_r+0x1e>
 800f96a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f96e:	f7fe ba03 	b.w	800dd78 <__swbuf_r>
 800f972:	6813      	ldr	r3, [r2, #0]
 800f974:	1c58      	adds	r0, r3, #1
 800f976:	6010      	str	r0, [r2, #0]
 800f978:	7019      	strb	r1, [r3, #0]
 800f97a:	4608      	mov	r0, r1
 800f97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <__sfputs_r>:
 800f982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f984:	4606      	mov	r6, r0
 800f986:	460f      	mov	r7, r1
 800f988:	4614      	mov	r4, r2
 800f98a:	18d5      	adds	r5, r2, r3
 800f98c:	42ac      	cmp	r4, r5
 800f98e:	d101      	bne.n	800f994 <__sfputs_r+0x12>
 800f990:	2000      	movs	r0, #0
 800f992:	e007      	b.n	800f9a4 <__sfputs_r+0x22>
 800f994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f998:	463a      	mov	r2, r7
 800f99a:	4630      	mov	r0, r6
 800f99c:	f7ff ffda 	bl	800f954 <__sfputc_r>
 800f9a0:	1c43      	adds	r3, r0, #1
 800f9a2:	d1f3      	bne.n	800f98c <__sfputs_r+0xa>
 800f9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9a8 <_vfiprintf_r>:
 800f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	460d      	mov	r5, r1
 800f9ae:	b09d      	sub	sp, #116	; 0x74
 800f9b0:	4614      	mov	r4, r2
 800f9b2:	4698      	mov	r8, r3
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	b118      	cbz	r0, 800f9c0 <_vfiprintf_r+0x18>
 800f9b8:	6983      	ldr	r3, [r0, #24]
 800f9ba:	b90b      	cbnz	r3, 800f9c0 <_vfiprintf_r+0x18>
 800f9bc:	f7ff fa30 	bl	800ee20 <__sinit>
 800f9c0:	4b89      	ldr	r3, [pc, #548]	; (800fbe8 <_vfiprintf_r+0x240>)
 800f9c2:	429d      	cmp	r5, r3
 800f9c4:	d11b      	bne.n	800f9fe <_vfiprintf_r+0x56>
 800f9c6:	6875      	ldr	r5, [r6, #4]
 800f9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9ca:	07d9      	lsls	r1, r3, #31
 800f9cc:	d405      	bmi.n	800f9da <_vfiprintf_r+0x32>
 800f9ce:	89ab      	ldrh	r3, [r5, #12]
 800f9d0:	059a      	lsls	r2, r3, #22
 800f9d2:	d402      	bmi.n	800f9da <_vfiprintf_r+0x32>
 800f9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9d6:	f7ff fac6 	bl	800ef66 <__retarget_lock_acquire_recursive>
 800f9da:	89ab      	ldrh	r3, [r5, #12]
 800f9dc:	071b      	lsls	r3, r3, #28
 800f9de:	d501      	bpl.n	800f9e4 <_vfiprintf_r+0x3c>
 800f9e0:	692b      	ldr	r3, [r5, #16]
 800f9e2:	b9eb      	cbnz	r3, 800fa20 <_vfiprintf_r+0x78>
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f7fe fa18 	bl	800de1c <__swsetup_r>
 800f9ec:	b1c0      	cbz	r0, 800fa20 <_vfiprintf_r+0x78>
 800f9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9f0:	07dc      	lsls	r4, r3, #31
 800f9f2:	d50e      	bpl.n	800fa12 <_vfiprintf_r+0x6a>
 800f9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f8:	b01d      	add	sp, #116	; 0x74
 800f9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fe:	4b7b      	ldr	r3, [pc, #492]	; (800fbec <_vfiprintf_r+0x244>)
 800fa00:	429d      	cmp	r5, r3
 800fa02:	d101      	bne.n	800fa08 <_vfiprintf_r+0x60>
 800fa04:	68b5      	ldr	r5, [r6, #8]
 800fa06:	e7df      	b.n	800f9c8 <_vfiprintf_r+0x20>
 800fa08:	4b79      	ldr	r3, [pc, #484]	; (800fbf0 <_vfiprintf_r+0x248>)
 800fa0a:	429d      	cmp	r5, r3
 800fa0c:	bf08      	it	eq
 800fa0e:	68f5      	ldreq	r5, [r6, #12]
 800fa10:	e7da      	b.n	800f9c8 <_vfiprintf_r+0x20>
 800fa12:	89ab      	ldrh	r3, [r5, #12]
 800fa14:	0598      	lsls	r0, r3, #22
 800fa16:	d4ed      	bmi.n	800f9f4 <_vfiprintf_r+0x4c>
 800fa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa1a:	f7ff faa5 	bl	800ef68 <__retarget_lock_release_recursive>
 800fa1e:	e7e9      	b.n	800f9f4 <_vfiprintf_r+0x4c>
 800fa20:	2300      	movs	r3, #0
 800fa22:	9309      	str	r3, [sp, #36]	; 0x24
 800fa24:	2320      	movs	r3, #32
 800fa26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa2e:	2330      	movs	r3, #48	; 0x30
 800fa30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fbf4 <_vfiprintf_r+0x24c>
 800fa34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa38:	f04f 0901 	mov.w	r9, #1
 800fa3c:	4623      	mov	r3, r4
 800fa3e:	469a      	mov	sl, r3
 800fa40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa44:	b10a      	cbz	r2, 800fa4a <_vfiprintf_r+0xa2>
 800fa46:	2a25      	cmp	r2, #37	; 0x25
 800fa48:	d1f9      	bne.n	800fa3e <_vfiprintf_r+0x96>
 800fa4a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa4e:	d00b      	beq.n	800fa68 <_vfiprintf_r+0xc0>
 800fa50:	465b      	mov	r3, fp
 800fa52:	4622      	mov	r2, r4
 800fa54:	4629      	mov	r1, r5
 800fa56:	4630      	mov	r0, r6
 800fa58:	f7ff ff93 	bl	800f982 <__sfputs_r>
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	f000 80aa 	beq.w	800fbb6 <_vfiprintf_r+0x20e>
 800fa62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa64:	445a      	add	r2, fp
 800fa66:	9209      	str	r2, [sp, #36]	; 0x24
 800fa68:	f89a 3000 	ldrb.w	r3, [sl]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f000 80a2 	beq.w	800fbb6 <_vfiprintf_r+0x20e>
 800fa72:	2300      	movs	r3, #0
 800fa74:	f04f 32ff 	mov.w	r2, #4294967295
 800fa78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa7c:	f10a 0a01 	add.w	sl, sl, #1
 800fa80:	9304      	str	r3, [sp, #16]
 800fa82:	9307      	str	r3, [sp, #28]
 800fa84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa88:	931a      	str	r3, [sp, #104]	; 0x68
 800fa8a:	4654      	mov	r4, sl
 800fa8c:	2205      	movs	r2, #5
 800fa8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa92:	4858      	ldr	r0, [pc, #352]	; (800fbf4 <_vfiprintf_r+0x24c>)
 800fa94:	f7f0 fbcc 	bl	8000230 <memchr>
 800fa98:	9a04      	ldr	r2, [sp, #16]
 800fa9a:	b9d8      	cbnz	r0, 800fad4 <_vfiprintf_r+0x12c>
 800fa9c:	06d1      	lsls	r1, r2, #27
 800fa9e:	bf44      	itt	mi
 800faa0:	2320      	movmi	r3, #32
 800faa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faa6:	0713      	lsls	r3, r2, #28
 800faa8:	bf44      	itt	mi
 800faaa:	232b      	movmi	r3, #43	; 0x2b
 800faac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fab0:	f89a 3000 	ldrb.w	r3, [sl]
 800fab4:	2b2a      	cmp	r3, #42	; 0x2a
 800fab6:	d015      	beq.n	800fae4 <_vfiprintf_r+0x13c>
 800fab8:	9a07      	ldr	r2, [sp, #28]
 800faba:	4654      	mov	r4, sl
 800fabc:	2000      	movs	r0, #0
 800fabe:	f04f 0c0a 	mov.w	ip, #10
 800fac2:	4621      	mov	r1, r4
 800fac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fac8:	3b30      	subs	r3, #48	; 0x30
 800faca:	2b09      	cmp	r3, #9
 800facc:	d94e      	bls.n	800fb6c <_vfiprintf_r+0x1c4>
 800face:	b1b0      	cbz	r0, 800fafe <_vfiprintf_r+0x156>
 800fad0:	9207      	str	r2, [sp, #28]
 800fad2:	e014      	b.n	800fafe <_vfiprintf_r+0x156>
 800fad4:	eba0 0308 	sub.w	r3, r0, r8
 800fad8:	fa09 f303 	lsl.w	r3, r9, r3
 800fadc:	4313      	orrs	r3, r2
 800fade:	9304      	str	r3, [sp, #16]
 800fae0:	46a2      	mov	sl, r4
 800fae2:	e7d2      	b.n	800fa8a <_vfiprintf_r+0xe2>
 800fae4:	9b03      	ldr	r3, [sp, #12]
 800fae6:	1d19      	adds	r1, r3, #4
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	9103      	str	r1, [sp, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	bfbb      	ittet	lt
 800faf0:	425b      	neglt	r3, r3
 800faf2:	f042 0202 	orrlt.w	r2, r2, #2
 800faf6:	9307      	strge	r3, [sp, #28]
 800faf8:	9307      	strlt	r3, [sp, #28]
 800fafa:	bfb8      	it	lt
 800fafc:	9204      	strlt	r2, [sp, #16]
 800fafe:	7823      	ldrb	r3, [r4, #0]
 800fb00:	2b2e      	cmp	r3, #46	; 0x2e
 800fb02:	d10c      	bne.n	800fb1e <_vfiprintf_r+0x176>
 800fb04:	7863      	ldrb	r3, [r4, #1]
 800fb06:	2b2a      	cmp	r3, #42	; 0x2a
 800fb08:	d135      	bne.n	800fb76 <_vfiprintf_r+0x1ce>
 800fb0a:	9b03      	ldr	r3, [sp, #12]
 800fb0c:	1d1a      	adds	r2, r3, #4
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	9203      	str	r2, [sp, #12]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	bfb8      	it	lt
 800fb16:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb1a:	3402      	adds	r4, #2
 800fb1c:	9305      	str	r3, [sp, #20]
 800fb1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc04 <_vfiprintf_r+0x25c>
 800fb22:	7821      	ldrb	r1, [r4, #0]
 800fb24:	2203      	movs	r2, #3
 800fb26:	4650      	mov	r0, sl
 800fb28:	f7f0 fb82 	bl	8000230 <memchr>
 800fb2c:	b140      	cbz	r0, 800fb40 <_vfiprintf_r+0x198>
 800fb2e:	2340      	movs	r3, #64	; 0x40
 800fb30:	eba0 000a 	sub.w	r0, r0, sl
 800fb34:	fa03 f000 	lsl.w	r0, r3, r0
 800fb38:	9b04      	ldr	r3, [sp, #16]
 800fb3a:	4303      	orrs	r3, r0
 800fb3c:	3401      	adds	r4, #1
 800fb3e:	9304      	str	r3, [sp, #16]
 800fb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb44:	482c      	ldr	r0, [pc, #176]	; (800fbf8 <_vfiprintf_r+0x250>)
 800fb46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb4a:	2206      	movs	r2, #6
 800fb4c:	f7f0 fb70 	bl	8000230 <memchr>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d03f      	beq.n	800fbd4 <_vfiprintf_r+0x22c>
 800fb54:	4b29      	ldr	r3, [pc, #164]	; (800fbfc <_vfiprintf_r+0x254>)
 800fb56:	bb1b      	cbnz	r3, 800fba0 <_vfiprintf_r+0x1f8>
 800fb58:	9b03      	ldr	r3, [sp, #12]
 800fb5a:	3307      	adds	r3, #7
 800fb5c:	f023 0307 	bic.w	r3, r3, #7
 800fb60:	3308      	adds	r3, #8
 800fb62:	9303      	str	r3, [sp, #12]
 800fb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb66:	443b      	add	r3, r7
 800fb68:	9309      	str	r3, [sp, #36]	; 0x24
 800fb6a:	e767      	b.n	800fa3c <_vfiprintf_r+0x94>
 800fb6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb70:	460c      	mov	r4, r1
 800fb72:	2001      	movs	r0, #1
 800fb74:	e7a5      	b.n	800fac2 <_vfiprintf_r+0x11a>
 800fb76:	2300      	movs	r3, #0
 800fb78:	3401      	adds	r4, #1
 800fb7a:	9305      	str	r3, [sp, #20]
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	f04f 0c0a 	mov.w	ip, #10
 800fb82:	4620      	mov	r0, r4
 800fb84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb88:	3a30      	subs	r2, #48	; 0x30
 800fb8a:	2a09      	cmp	r2, #9
 800fb8c:	d903      	bls.n	800fb96 <_vfiprintf_r+0x1ee>
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d0c5      	beq.n	800fb1e <_vfiprintf_r+0x176>
 800fb92:	9105      	str	r1, [sp, #20]
 800fb94:	e7c3      	b.n	800fb1e <_vfiprintf_r+0x176>
 800fb96:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e7f0      	b.n	800fb82 <_vfiprintf_r+0x1da>
 800fba0:	ab03      	add	r3, sp, #12
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	462a      	mov	r2, r5
 800fba6:	4b16      	ldr	r3, [pc, #88]	; (800fc00 <_vfiprintf_r+0x258>)
 800fba8:	a904      	add	r1, sp, #16
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f7fd fbbe 	bl	800d32c <_printf_float>
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	1c78      	adds	r0, r7, #1
 800fbb4:	d1d6      	bne.n	800fb64 <_vfiprintf_r+0x1bc>
 800fbb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbb8:	07d9      	lsls	r1, r3, #31
 800fbba:	d405      	bmi.n	800fbc8 <_vfiprintf_r+0x220>
 800fbbc:	89ab      	ldrh	r3, [r5, #12]
 800fbbe:	059a      	lsls	r2, r3, #22
 800fbc0:	d402      	bmi.n	800fbc8 <_vfiprintf_r+0x220>
 800fbc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbc4:	f7ff f9d0 	bl	800ef68 <__retarget_lock_release_recursive>
 800fbc8:	89ab      	ldrh	r3, [r5, #12]
 800fbca:	065b      	lsls	r3, r3, #25
 800fbcc:	f53f af12 	bmi.w	800f9f4 <_vfiprintf_r+0x4c>
 800fbd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbd2:	e711      	b.n	800f9f8 <_vfiprintf_r+0x50>
 800fbd4:	ab03      	add	r3, sp, #12
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	462a      	mov	r2, r5
 800fbda:	4b09      	ldr	r3, [pc, #36]	; (800fc00 <_vfiprintf_r+0x258>)
 800fbdc:	a904      	add	r1, sp, #16
 800fbde:	4630      	mov	r0, r6
 800fbe0:	f7fd fe48 	bl	800d874 <_printf_i>
 800fbe4:	e7e4      	b.n	800fbb0 <_vfiprintf_r+0x208>
 800fbe6:	bf00      	nop
 800fbe8:	080101d0 	.word	0x080101d0
 800fbec:	080101f0 	.word	0x080101f0
 800fbf0:	080101b0 	.word	0x080101b0
 800fbf4:	0801036c 	.word	0x0801036c
 800fbf8:	08010376 	.word	0x08010376
 800fbfc:	0800d32d 	.word	0x0800d32d
 800fc00:	0800f983 	.word	0x0800f983
 800fc04:	08010372 	.word	0x08010372

0800fc08 <_sbrk_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d06      	ldr	r5, [pc, #24]	; (800fc24 <_sbrk_r+0x1c>)
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	4604      	mov	r4, r0
 800fc10:	4608      	mov	r0, r1
 800fc12:	602b      	str	r3, [r5, #0]
 800fc14:	f7f5 fb5c 	bl	80052d0 <_sbrk>
 800fc18:	1c43      	adds	r3, r0, #1
 800fc1a:	d102      	bne.n	800fc22 <_sbrk_r+0x1a>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	b103      	cbz	r3, 800fc22 <_sbrk_r+0x1a>
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	20000af0 	.word	0x20000af0

0800fc28 <__sread>:
 800fc28:	b510      	push	{r4, lr}
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc30:	f000 f8e2 	bl	800fdf8 <_read_r>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	bfab      	itete	ge
 800fc38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc3a:	89a3      	ldrhlt	r3, [r4, #12]
 800fc3c:	181b      	addge	r3, r3, r0
 800fc3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc42:	bfac      	ite	ge
 800fc44:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc46:	81a3      	strhlt	r3, [r4, #12]
 800fc48:	bd10      	pop	{r4, pc}

0800fc4a <__swrite>:
 800fc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4e:	461f      	mov	r7, r3
 800fc50:	898b      	ldrh	r3, [r1, #12]
 800fc52:	05db      	lsls	r3, r3, #23
 800fc54:	4605      	mov	r5, r0
 800fc56:	460c      	mov	r4, r1
 800fc58:	4616      	mov	r6, r2
 800fc5a:	d505      	bpl.n	800fc68 <__swrite+0x1e>
 800fc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc60:	2302      	movs	r3, #2
 800fc62:	2200      	movs	r2, #0
 800fc64:	f000 f898 	bl	800fd98 <_lseek_r>
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc72:	81a3      	strh	r3, [r4, #12]
 800fc74:	4632      	mov	r2, r6
 800fc76:	463b      	mov	r3, r7
 800fc78:	4628      	mov	r0, r5
 800fc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7e:	f000 b817 	b.w	800fcb0 <_write_r>

0800fc82 <__sseek>:
 800fc82:	b510      	push	{r4, lr}
 800fc84:	460c      	mov	r4, r1
 800fc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc8a:	f000 f885 	bl	800fd98 <_lseek_r>
 800fc8e:	1c43      	adds	r3, r0, #1
 800fc90:	89a3      	ldrh	r3, [r4, #12]
 800fc92:	bf15      	itete	ne
 800fc94:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc9e:	81a3      	strheq	r3, [r4, #12]
 800fca0:	bf18      	it	ne
 800fca2:	81a3      	strhne	r3, [r4, #12]
 800fca4:	bd10      	pop	{r4, pc}

0800fca6 <__sclose>:
 800fca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcaa:	f000 b831 	b.w	800fd10 <_close_r>
	...

0800fcb0 <_write_r>:
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	4d07      	ldr	r5, [pc, #28]	; (800fcd0 <_write_r+0x20>)
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	4608      	mov	r0, r1
 800fcb8:	4611      	mov	r1, r2
 800fcba:	2200      	movs	r2, #0
 800fcbc:	602a      	str	r2, [r5, #0]
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	f7f5 fab5 	bl	800522e <_write>
 800fcc4:	1c43      	adds	r3, r0, #1
 800fcc6:	d102      	bne.n	800fcce <_write_r+0x1e>
 800fcc8:	682b      	ldr	r3, [r5, #0]
 800fcca:	b103      	cbz	r3, 800fcce <_write_r+0x1e>
 800fccc:	6023      	str	r3, [r4, #0]
 800fcce:	bd38      	pop	{r3, r4, r5, pc}
 800fcd0:	20000af0 	.word	0x20000af0

0800fcd4 <__assert_func>:
 800fcd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcd6:	4614      	mov	r4, r2
 800fcd8:	461a      	mov	r2, r3
 800fcda:	4b09      	ldr	r3, [pc, #36]	; (800fd00 <__assert_func+0x2c>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4605      	mov	r5, r0
 800fce0:	68d8      	ldr	r0, [r3, #12]
 800fce2:	b14c      	cbz	r4, 800fcf8 <__assert_func+0x24>
 800fce4:	4b07      	ldr	r3, [pc, #28]	; (800fd04 <__assert_func+0x30>)
 800fce6:	9100      	str	r1, [sp, #0]
 800fce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcec:	4906      	ldr	r1, [pc, #24]	; (800fd08 <__assert_func+0x34>)
 800fcee:	462b      	mov	r3, r5
 800fcf0:	f000 f81e 	bl	800fd30 <fiprintf>
 800fcf4:	f000 f89f 	bl	800fe36 <abort>
 800fcf8:	4b04      	ldr	r3, [pc, #16]	; (800fd0c <__assert_func+0x38>)
 800fcfa:	461c      	mov	r4, r3
 800fcfc:	e7f3      	b.n	800fce6 <__assert_func+0x12>
 800fcfe:	bf00      	nop
 800fd00:	20000014 	.word	0x20000014
 800fd04:	0801037d 	.word	0x0801037d
 800fd08:	0801038a 	.word	0x0801038a
 800fd0c:	080103b8 	.word	0x080103b8

0800fd10 <_close_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4d06      	ldr	r5, [pc, #24]	; (800fd2c <_close_r+0x1c>)
 800fd14:	2300      	movs	r3, #0
 800fd16:	4604      	mov	r4, r0
 800fd18:	4608      	mov	r0, r1
 800fd1a:	602b      	str	r3, [r5, #0]
 800fd1c:	f7f5 faa3 	bl	8005266 <_close>
 800fd20:	1c43      	adds	r3, r0, #1
 800fd22:	d102      	bne.n	800fd2a <_close_r+0x1a>
 800fd24:	682b      	ldr	r3, [r5, #0]
 800fd26:	b103      	cbz	r3, 800fd2a <_close_r+0x1a>
 800fd28:	6023      	str	r3, [r4, #0]
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	20000af0 	.word	0x20000af0

0800fd30 <fiprintf>:
 800fd30:	b40e      	push	{r1, r2, r3}
 800fd32:	b503      	push	{r0, r1, lr}
 800fd34:	4601      	mov	r1, r0
 800fd36:	ab03      	add	r3, sp, #12
 800fd38:	4805      	ldr	r0, [pc, #20]	; (800fd50 <fiprintf+0x20>)
 800fd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd3e:	6800      	ldr	r0, [r0, #0]
 800fd40:	9301      	str	r3, [sp, #4]
 800fd42:	f7ff fe31 	bl	800f9a8 <_vfiprintf_r>
 800fd46:	b002      	add	sp, #8
 800fd48:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd4c:	b003      	add	sp, #12
 800fd4e:	4770      	bx	lr
 800fd50:	20000014 	.word	0x20000014

0800fd54 <_fstat_r>:
 800fd54:	b538      	push	{r3, r4, r5, lr}
 800fd56:	4d07      	ldr	r5, [pc, #28]	; (800fd74 <_fstat_r+0x20>)
 800fd58:	2300      	movs	r3, #0
 800fd5a:	4604      	mov	r4, r0
 800fd5c:	4608      	mov	r0, r1
 800fd5e:	4611      	mov	r1, r2
 800fd60:	602b      	str	r3, [r5, #0]
 800fd62:	f7f5 fa8c 	bl	800527e <_fstat>
 800fd66:	1c43      	adds	r3, r0, #1
 800fd68:	d102      	bne.n	800fd70 <_fstat_r+0x1c>
 800fd6a:	682b      	ldr	r3, [r5, #0]
 800fd6c:	b103      	cbz	r3, 800fd70 <_fstat_r+0x1c>
 800fd6e:	6023      	str	r3, [r4, #0]
 800fd70:	bd38      	pop	{r3, r4, r5, pc}
 800fd72:	bf00      	nop
 800fd74:	20000af0 	.word	0x20000af0

0800fd78 <_isatty_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4d06      	ldr	r5, [pc, #24]	; (800fd94 <_isatty_r+0x1c>)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4608      	mov	r0, r1
 800fd82:	602b      	str	r3, [r5, #0]
 800fd84:	f7f5 fa8b 	bl	800529e <_isatty>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_isatty_r+0x1a>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_isatty_r+0x1a>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	20000af0 	.word	0x20000af0

0800fd98 <_lseek_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	4d07      	ldr	r5, [pc, #28]	; (800fdb8 <_lseek_r+0x20>)
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	4608      	mov	r0, r1
 800fda0:	4611      	mov	r1, r2
 800fda2:	2200      	movs	r2, #0
 800fda4:	602a      	str	r2, [r5, #0]
 800fda6:	461a      	mov	r2, r3
 800fda8:	f7f5 fa84 	bl	80052b4 <_lseek>
 800fdac:	1c43      	adds	r3, r0, #1
 800fdae:	d102      	bne.n	800fdb6 <_lseek_r+0x1e>
 800fdb0:	682b      	ldr	r3, [r5, #0]
 800fdb2:	b103      	cbz	r3, 800fdb6 <_lseek_r+0x1e>
 800fdb4:	6023      	str	r3, [r4, #0]
 800fdb6:	bd38      	pop	{r3, r4, r5, pc}
 800fdb8:	20000af0 	.word	0x20000af0

0800fdbc <__ascii_mbtowc>:
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	b901      	cbnz	r1, 800fdc2 <__ascii_mbtowc+0x6>
 800fdc0:	a901      	add	r1, sp, #4
 800fdc2:	b142      	cbz	r2, 800fdd6 <__ascii_mbtowc+0x1a>
 800fdc4:	b14b      	cbz	r3, 800fdda <__ascii_mbtowc+0x1e>
 800fdc6:	7813      	ldrb	r3, [r2, #0]
 800fdc8:	600b      	str	r3, [r1, #0]
 800fdca:	7812      	ldrb	r2, [r2, #0]
 800fdcc:	1e10      	subs	r0, r2, #0
 800fdce:	bf18      	it	ne
 800fdd0:	2001      	movne	r0, #1
 800fdd2:	b002      	add	sp, #8
 800fdd4:	4770      	bx	lr
 800fdd6:	4610      	mov	r0, r2
 800fdd8:	e7fb      	b.n	800fdd2 <__ascii_mbtowc+0x16>
 800fdda:	f06f 0001 	mvn.w	r0, #1
 800fdde:	e7f8      	b.n	800fdd2 <__ascii_mbtowc+0x16>

0800fde0 <__malloc_lock>:
 800fde0:	4801      	ldr	r0, [pc, #4]	; (800fde8 <__malloc_lock+0x8>)
 800fde2:	f7ff b8c0 	b.w	800ef66 <__retarget_lock_acquire_recursive>
 800fde6:	bf00      	nop
 800fde8:	20000ae4 	.word	0x20000ae4

0800fdec <__malloc_unlock>:
 800fdec:	4801      	ldr	r0, [pc, #4]	; (800fdf4 <__malloc_unlock+0x8>)
 800fdee:	f7ff b8bb 	b.w	800ef68 <__retarget_lock_release_recursive>
 800fdf2:	bf00      	nop
 800fdf4:	20000ae4 	.word	0x20000ae4

0800fdf8 <_read_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d07      	ldr	r5, [pc, #28]	; (800fe18 <_read_r+0x20>)
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	4608      	mov	r0, r1
 800fe00:	4611      	mov	r1, r2
 800fe02:	2200      	movs	r2, #0
 800fe04:	602a      	str	r2, [r5, #0]
 800fe06:	461a      	mov	r2, r3
 800fe08:	f7f5 f9f4 	bl	80051f4 <_read>
 800fe0c:	1c43      	adds	r3, r0, #1
 800fe0e:	d102      	bne.n	800fe16 <_read_r+0x1e>
 800fe10:	682b      	ldr	r3, [r5, #0]
 800fe12:	b103      	cbz	r3, 800fe16 <_read_r+0x1e>
 800fe14:	6023      	str	r3, [r4, #0]
 800fe16:	bd38      	pop	{r3, r4, r5, pc}
 800fe18:	20000af0 	.word	0x20000af0

0800fe1c <__ascii_wctomb>:
 800fe1c:	b149      	cbz	r1, 800fe32 <__ascii_wctomb+0x16>
 800fe1e:	2aff      	cmp	r2, #255	; 0xff
 800fe20:	bf85      	ittet	hi
 800fe22:	238a      	movhi	r3, #138	; 0x8a
 800fe24:	6003      	strhi	r3, [r0, #0]
 800fe26:	700a      	strbls	r2, [r1, #0]
 800fe28:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe2c:	bf98      	it	ls
 800fe2e:	2001      	movls	r0, #1
 800fe30:	4770      	bx	lr
 800fe32:	4608      	mov	r0, r1
 800fe34:	4770      	bx	lr

0800fe36 <abort>:
 800fe36:	b508      	push	{r3, lr}
 800fe38:	2006      	movs	r0, #6
 800fe3a:	f000 f82b 	bl	800fe94 <raise>
 800fe3e:	2001      	movs	r0, #1
 800fe40:	f7f5 f9ce 	bl	80051e0 <_exit>

0800fe44 <_raise_r>:
 800fe44:	291f      	cmp	r1, #31
 800fe46:	b538      	push	{r3, r4, r5, lr}
 800fe48:	4604      	mov	r4, r0
 800fe4a:	460d      	mov	r5, r1
 800fe4c:	d904      	bls.n	800fe58 <_raise_r+0x14>
 800fe4e:	2316      	movs	r3, #22
 800fe50:	6003      	str	r3, [r0, #0]
 800fe52:	f04f 30ff 	mov.w	r0, #4294967295
 800fe56:	bd38      	pop	{r3, r4, r5, pc}
 800fe58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe5a:	b112      	cbz	r2, 800fe62 <_raise_r+0x1e>
 800fe5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe60:	b94b      	cbnz	r3, 800fe76 <_raise_r+0x32>
 800fe62:	4620      	mov	r0, r4
 800fe64:	f000 f830 	bl	800fec8 <_getpid_r>
 800fe68:	462a      	mov	r2, r5
 800fe6a:	4601      	mov	r1, r0
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe72:	f000 b817 	b.w	800fea4 <_kill_r>
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d00a      	beq.n	800fe90 <_raise_r+0x4c>
 800fe7a:	1c59      	adds	r1, r3, #1
 800fe7c:	d103      	bne.n	800fe86 <_raise_r+0x42>
 800fe7e:	2316      	movs	r3, #22
 800fe80:	6003      	str	r3, [r0, #0]
 800fe82:	2001      	movs	r0, #1
 800fe84:	e7e7      	b.n	800fe56 <_raise_r+0x12>
 800fe86:	2400      	movs	r4, #0
 800fe88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	4798      	blx	r3
 800fe90:	2000      	movs	r0, #0
 800fe92:	e7e0      	b.n	800fe56 <_raise_r+0x12>

0800fe94 <raise>:
 800fe94:	4b02      	ldr	r3, [pc, #8]	; (800fea0 <raise+0xc>)
 800fe96:	4601      	mov	r1, r0
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	f7ff bfd3 	b.w	800fe44 <_raise_r>
 800fe9e:	bf00      	nop
 800fea0:	20000014 	.word	0x20000014

0800fea4 <_kill_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4d07      	ldr	r5, [pc, #28]	; (800fec4 <_kill_r+0x20>)
 800fea8:	2300      	movs	r3, #0
 800feaa:	4604      	mov	r4, r0
 800feac:	4608      	mov	r0, r1
 800feae:	4611      	mov	r1, r2
 800feb0:	602b      	str	r3, [r5, #0]
 800feb2:	f7f5 f985 	bl	80051c0 <_kill>
 800feb6:	1c43      	adds	r3, r0, #1
 800feb8:	d102      	bne.n	800fec0 <_kill_r+0x1c>
 800feba:	682b      	ldr	r3, [r5, #0]
 800febc:	b103      	cbz	r3, 800fec0 <_kill_r+0x1c>
 800febe:	6023      	str	r3, [r4, #0]
 800fec0:	bd38      	pop	{r3, r4, r5, pc}
 800fec2:	bf00      	nop
 800fec4:	20000af0 	.word	0x20000af0

0800fec8 <_getpid_r>:
 800fec8:	f7f5 b972 	b.w	80051b0 <_getpid>

0800fecc <round>:
 800fecc:	ec51 0b10 	vmov	r0, r1, d0
 800fed0:	b570      	push	{r4, r5, r6, lr}
 800fed2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800fed6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800feda:	2c13      	cmp	r4, #19
 800fedc:	ee10 2a10 	vmov	r2, s0
 800fee0:	460b      	mov	r3, r1
 800fee2:	dc19      	bgt.n	800ff18 <round+0x4c>
 800fee4:	2c00      	cmp	r4, #0
 800fee6:	da09      	bge.n	800fefc <round+0x30>
 800fee8:	3401      	adds	r4, #1
 800feea:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800feee:	d103      	bne.n	800fef8 <round+0x2c>
 800fef0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fef4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fef8:	2200      	movs	r2, #0
 800fefa:	e028      	b.n	800ff4e <round+0x82>
 800fefc:	4d15      	ldr	r5, [pc, #84]	; (800ff54 <round+0x88>)
 800fefe:	4125      	asrs	r5, r4
 800ff00:	ea01 0605 	and.w	r6, r1, r5
 800ff04:	4332      	orrs	r2, r6
 800ff06:	d00e      	beq.n	800ff26 <round+0x5a>
 800ff08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ff0c:	fa42 f404 	asr.w	r4, r2, r4
 800ff10:	4423      	add	r3, r4
 800ff12:	ea23 0305 	bic.w	r3, r3, r5
 800ff16:	e7ef      	b.n	800fef8 <round+0x2c>
 800ff18:	2c33      	cmp	r4, #51	; 0x33
 800ff1a:	dd07      	ble.n	800ff2c <round+0x60>
 800ff1c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ff20:	d101      	bne.n	800ff26 <round+0x5a>
 800ff22:	f7f0 f9db 	bl	80002dc <__adddf3>
 800ff26:	ec41 0b10 	vmov	d0, r0, r1
 800ff2a:	bd70      	pop	{r4, r5, r6, pc}
 800ff2c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800ff30:	f04f 35ff 	mov.w	r5, #4294967295
 800ff34:	40f5      	lsrs	r5, r6
 800ff36:	4228      	tst	r0, r5
 800ff38:	d0f5      	beq.n	800ff26 <round+0x5a>
 800ff3a:	2101      	movs	r1, #1
 800ff3c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ff40:	fa01 f404 	lsl.w	r4, r1, r4
 800ff44:	1912      	adds	r2, r2, r4
 800ff46:	bf28      	it	cs
 800ff48:	185b      	addcs	r3, r3, r1
 800ff4a:	ea22 0205 	bic.w	r2, r2, r5
 800ff4e:	4619      	mov	r1, r3
 800ff50:	4610      	mov	r0, r2
 800ff52:	e7e8      	b.n	800ff26 <round+0x5a>
 800ff54:	000fffff 	.word	0x000fffff

0800ff58 <_init>:
 800ff58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff5a:	bf00      	nop
 800ff5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff5e:	bc08      	pop	{r3}
 800ff60:	469e      	mov	lr, r3
 800ff62:	4770      	bx	lr

0800ff64 <_fini>:
 800ff64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff66:	bf00      	nop
 800ff68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff6a:	bc08      	pop	{r3}
 800ff6c:	469e      	mov	lr, r3
 800ff6e:	4770      	bx	lr
