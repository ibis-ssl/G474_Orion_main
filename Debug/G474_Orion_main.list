
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c844  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800ca28  0800ca28  0001ca28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf5c  0800cf5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf5c  0800cf5c  0001cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf64  0800cf64  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf68  0800cf68  0001cf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cf6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  200001e0  0800d148  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001544  0800d148  00021544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003899b  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006143  00000000  00000000  00058bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000165c3  00000000  00000000  0005ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c0  00000000  00000000  000752f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002da9  00000000  00000000  00076ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d352  00000000  00000000  00079859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036846  00000000  00000000  000a6bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e242  00000000  00000000  000dd3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f2c  00000000  00000000  001fb634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00201560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ca0c 	.word	0x0800ca0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ca0c 	.word	0x0800ca0c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fd4:	b500      	push	{lr}
 8000fd6:	ed2d 8b02 	vpush	{d8}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fe0:	4668      	mov	r0, sp
 8000fe2:	f004 fb95 	bl	8005710 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8000fea:	a801      	add	r0, sp, #4
 8000fec:	f004 fb90 	bl	8005710 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8000ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x100, senddata_motor);
 8000ff4:	a902      	add	r1, sp, #8
 8000ff6:	f44f 7080 	mov.w	r0, #256	; 0x100
	senddata_motor[4]=senddata_motor_Duty[0];
 8000ffa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x100, senddata_motor);
 8000ffe:	f000 faf5 	bl	80015ec <can1_send>
}
 8001002:	b005      	add	sp, #20
 8001004:	ecbd 8b02 	vpop	{d8}
 8001008:	f85d fb04 	ldr.w	pc, [sp], #4

0800100c <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 800100c:	b500      	push	{lr}
 800100e:	ed2d 8b02 	vpush	{d8}
 8001012:	b085      	sub	sp, #20
 8001014:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 8001018:	4668      	mov	r0, sp
 800101a:	f004 fb79 	bl	8005710 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 800101e:	eeb0 0a48 	vmov.f32	s0, s16
 8001022:	a801      	add	r0, sp, #4
 8001024:	f004 fb74 	bl	8005710 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001028:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x101, senddata_motor);
 800102c:	a902      	add	r1, sp, #8
 800102e:	f240 1001 	movw	r0, #257	; 0x101
	senddata_motor[4]=senddata_motor_Duty[0];
 8001032:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x101, senddata_motor);
 8001036:	f000 fad9 	bl	80015ec <can1_send>
}
 800103a:	b005      	add	sp, #20
 800103c:	ecbd 8b02 	vpop	{d8}
 8001040:	f85d fb04 	ldr.w	pc, [sp], #4

08001044 <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 8001044:	b500      	push	{lr}
 8001046:	ed2d 8b02 	vpush	{d8}
 800104a:	b085      	sub	sp, #20
 800104c:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 8001050:	4668      	mov	r0, sp
 8001052:	f004 fb5d 	bl	8005710 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 8001056:	eeb0 0a48 	vmov.f32	s0, s16
 800105a:	a801      	add	r0, sp, #4
 800105c:	f004 fb58 	bl	8005710 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001060:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can2_send(0x102, senddata_motor);
 8001064:	a902      	add	r1, sp, #8
 8001066:	f44f 7081 	mov.w	r0, #258	; 0x102
	senddata_motor[4]=senddata_motor_Duty[0];
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can2_send(0x102, senddata_motor);
 800106e:	f000 fb0d 	bl	800168c <can2_send>
}
 8001072:	b005      	add	sp, #20
 8001074:	ecbd 8b02 	vpop	{d8}
 8001078:	f85d fb04 	ldr.w	pc, [sp], #4

0800107c <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 800107c:	b500      	push	{lr}
 800107e:	ed2d 8b02 	vpush	{d8}
 8001082:	b085      	sub	sp, #20
 8001084:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 8001088:	4668      	mov	r0, sp
 800108a:	f004 fb41 	bl	8005710 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 800108e:	eeb0 0a48 	vmov.f32	s0, s16
 8001092:	a801      	add	r0, sp, #4
 8001094:	f004 fb3c 	bl	8005710 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001098:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can2_send(0x103, senddata_motor);
 800109c:	a902      	add	r1, sp, #8
 800109e:	f240 1003 	movw	r0, #259	; 0x103
	senddata_motor[4]=senddata_motor_Duty[0];
 80010a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can2_send(0x103, senddata_motor);
 80010a6:	f000 faf1 	bl	800168c <can2_send>
}
 80010aa:	b005      	add	sp, #20
 80010ac:	ecbd 8b02 	vpop	{d8}
 80010b0:	f85d fb04 	ldr.w	pc, [sp], #4

080010b4 <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 80010b4:	b500      	push	{lr}
 80010b6:	ed2d 8b02 	vpush	{d8}
 80010ba:	b085      	sub	sp, #20
 80010bc:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 80010c0:	4668      	mov	r0, sp
 80010c2:	f004 fb25 	bl	8005710 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 80010c6:	eeb0 0a48 	vmov.f32	s0, s16
 80010ca:	a801      	add	r0, sp, #4
 80010cc:	f004 fb20 	bl	8005710 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 80010d0:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x104, senddata_motor);
 80010d4:	a902      	add	r1, sp, #8
 80010d6:	f44f 7082 	mov.w	r0, #260	; 0x104
	senddata_motor[4]=senddata_motor_Duty[0];
 80010da:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x104, senddata_motor);
 80010de:	f000 fa85 	bl	80015ec <can1_send>
}
 80010e2:	b005      	add	sp, #20
 80010e4:	ecbd 8b02 	vpop	{d8}
 80010e8:	f85d fb04 	ldr.w	pc, [sp], #4

080010ec <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80010ec:	b500      	push	{lr}
 80010ee:	b085      	sub	sp, #20
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80010f0:	a801      	add	r0, sp, #4
 80010f2:	f004 fb0d 	bl	8005710 <float_to_uchar4>

	senddata_kick[0]=0;
	senddata_kick[1]=senddata_voltage[0];
	senddata_kick[2]=senddata_voltage[1];
 80010f6:	f89d 0005 	ldrb.w	r0, [sp, #5]
	senddata_kick[1]=senddata_voltage[0];
 80010fa:	f89d c004 	ldrb.w	ip, [sp, #4]
	senddata_kick[3]=senddata_voltage[2];
 80010fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
	senddata_kick[4]=senddata_voltage[3];
 8001102:	f89d 3007 	ldrb.w	r3, [sp, #7]
	senddata_kick[2]=senddata_voltage[1];
 8001106:	f88d 000a 	strb.w	r0, [sp, #10]
	senddata_kick[0]=0;
 800110a:	2100      	movs	r1, #0
 800110c:	f88d 1008 	strb.w	r1, [sp, #8]
	can1_send(0x110, senddata_kick);
 8001110:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001114:	a902      	add	r1, sp, #8
	senddata_kick[1]=senddata_voltage[0];
 8001116:	f88d c009 	strb.w	ip, [sp, #9]
	senddata_kick[3]=senddata_voltage[2];
 800111a:	f88d 200b 	strb.w	r2, [sp, #11]
	senddata_kick[4]=senddata_voltage[3];
 800111e:	f88d 300c 	strb.w	r3, [sp, #12]
	can1_send(0x110, senddata_kick);
 8001122:	f000 fa63 	bl	80015ec <can1_send>
}
 8001126:	b005      	add	sp, #20
 8001128:	f85d fb04 	ldr.w	pc, [sp], #4

0800112c <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 800112c:	b500      	push	{lr}
 800112e:	b083      	sub	sp, #12
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
	senddata_kick[1]=param;
	can1_send(0x110, senddata_kick);
 8001134:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001138:	4669      	mov	r1, sp
	senddata_kick[0]=id;
 800113a:	f88d 2000 	strb.w	r2, [sp]
	senddata_kick[1]=param;
 800113e:	f88d 3001 	strb.w	r3, [sp, #1]
	can1_send(0x110, senddata_kick);
 8001142:	f000 fa53 	bl	80015ec <can1_send>
}
 8001146:	b003      	add	sp, #12
 8001148:	f85d fb04 	ldr.w	pc, [sp], #4

0800114c <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 800114c:	b500      	push	{lr}
 800114e:	b083      	sub	sp, #12
 8001150:	4603      	mov	r3, r0
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 8001152:	2200      	movs	r2, #0
	senddata_power[1]=power_on;
	can1_send(0x010, senddata_power);
 8001154:	4669      	mov	r1, sp
 8001156:	2010      	movs	r0, #16
	senddata_power[0]=0;
 8001158:	f88d 2000 	strb.w	r2, [sp]
	senddata_power[1]=power_on;
 800115c:	f88d 3001 	strb.w	r3, [sp, #1]
	can1_send(0x010, senddata_power);
 8001160:	f000 fa44 	bl	80015ec <can1_send>
}
 8001164:	b003      	add	sp, #12
 8001166:	f85d fb04 	ldr.w	pc, [sp], #4
 800116a:	bf00      	nop

0800116c <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 800116c:	b510      	push	{r4, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	4604      	mov	r4, r0
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 8001172:	4668      	mov	r0, sp
 8001174:	f004 facc 	bl	8005710 <float_to_uchar4>
	senddata_power_param[0]=id;
 8001178:	f89d 0000 	ldrb.w	r0, [sp]
 800117c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001180:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001184:	2300      	movs	r3, #0
 8001186:	f364 0307 	bfi	r3, r4, #0, #8
 800118a:	f360 230f 	bfi	r3, r0, #8, #8
 800118e:	f362 4317 	bfi	r3, r2, #16, #8
 8001192:	f361 631f 	bfi	r3, r1, #24, #8
	senddata_power_param[1]=senddata_power_param_temp[0];
	senddata_power_param[2]=senddata_power_param_temp[1];
	senddata_power_param[3]=senddata_power_param_temp[2];
	senddata_power_param[4]=senddata_power_param_temp[3];
 8001196:	f89d 2003 	ldrb.w	r2, [sp, #3]
	senddata_power_param[0]=id;
 800119a:	9302      	str	r3, [sp, #8]

	can1_send(0x010, senddata_power_param);
 800119c:	a902      	add	r1, sp, #8
 800119e:	2010      	movs	r0, #16
	senddata_power_param[4]=senddata_power_param_temp[3];
 80011a0:	f88d 200c 	strb.w	r2, [sp, #12]
	can1_send(0x010, senddata_power_param);
 80011a4:	f000 fa22 	bl	80015ec <can1_send>
}
 80011a8:	b004      	add	sp, #16
 80011aa:	bd10      	pop	{r4, pc}

080011ac <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 80011ac:	b538      	push	{r3, r4, r5, lr}

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011ae:	4d07      	ldr	r5, [pc, #28]	; (80011cc <actuator_buzzer+0x20>)
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	22fa      	movs	r2, #250	; 0xfa
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 80011b6:	460c      	mov	r4, r1
	HAL_Delay(ontime);
 80011b8:	f004 fb1a 	bl	80057f0 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80011c2:	4620      	mov	r0, r4

}
 80011c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(offtime);
 80011c8:	f004 bb12 	b.w	80057f0 <HAL_Delay>
 80011cc:	20001024 	.word	0x20001024

080011d0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011d0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011d2:	2400      	movs	r4, #0
{
 80011d4:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	2220      	movs	r2, #32
 80011d8:	4621      	mov	r1, r4
 80011da:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80011dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80011e0:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	f009 fd4b 	bl	800ac7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <MX_ADC1_Init+0xa4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80011ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f0:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f2:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f6:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fa:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fc:	8383      	strh	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80011fe:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 8001200:	2301      	movs	r3, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001202:	2240      	movs	r2, #64	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001208:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8001210:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001212:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001216:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800121a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800121c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.OversamplingMode = ENABLE;
 800121e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001222:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001224:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001226:	f004 faf5 	bl	8005814 <HAL_ADC_Init>
 800122a:	b9c8      	cbnz	r0, 8001260 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800122c:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001230:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001232:	a901      	add	r1, sp, #4
 8001234:	f004 ffb6 	bl	80061a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001238:	b9c8      	cbnz	r0, 800126e <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2306      	movs	r3, #6
 8001240:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001244:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001246:	237f      	movs	r3, #127	; 0x7f
 8001248:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124c:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800124e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001252:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	f004 fc53 	bl	8005b00 <HAL_ADC_ConfigChannel>
 800125a:	b920      	cbnz	r0, 8001266 <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125c:	b00c      	add	sp, #48	; 0x30
 800125e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001260:	f003 f9ae 	bl	80045c0 <Error_Handler>
 8001264:	e7e2      	b.n	800122c <MX_ADC1_Init+0x5c>
    Error_Handler();
 8001266:	f003 f9ab 	bl	80045c0 <Error_Handler>
}
 800126a:	b00c      	add	sp, #48	; 0x30
 800126c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800126e:	f003 f9a7 	bl	80045c0 <Error_Handler>
 8001272:	e7e2      	b.n	800123a <MX_ADC1_Init+0x6a>
 8001274:	20000200 	.word	0x20000200
 8001278:	3ef08000 	.word	0x3ef08000

0800127c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800127c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127e:	2400      	movs	r4, #0
{
 8001280:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001282:	2220      	movs	r2, #32
 8001284:	4621      	mov	r1, r4
 8001286:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001288:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800128c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	f009 fcf5 	bl	800ac7c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001292:	4823      	ldr	r0, [pc, #140]	; (8001320 <MX_ADC3_Init+0xa4>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001294:	4923      	ldr	r1, [pc, #140]	; (8001324 <MX_ADC3_Init+0xa8>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001296:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800129a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129e:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a0:	e9c0 1300 	strd	r1, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012aa:	8383      	strh	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012ac:	6442      	str	r2, [r0, #68]	; 0x44
  hadc3.Init.NbrOfConversion = 1;
 80012ae:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012b0:	2240      	movs	r2, #64	; 0x40
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ba:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 80012be:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80012c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012c4:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012c6:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc3.Init.OversamplingMode = ENABLE;
 80012c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012cc:	6482      	str	r2, [r0, #72]	; 0x48
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012ce:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012d0:	f004 faa0 	bl	8005814 <HAL_ADC_Init>
 80012d4:	b9c8      	cbnz	r0, 800130a <MX_ADC3_Init+0x8e>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012d6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <MX_ADC3_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012da:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012dc:	a901      	add	r1, sp, #4
 80012de:	f004 ff61 	bl	80061a4 <HAL_ADCEx_MultiModeConfigChannel>
 80012e2:	b9c8      	cbnz	r0, 8001318 <MX_ADC3_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012e4:	4a10      	ldr	r2, [pc, #64]	; (8001328 <MX_ADC3_Init+0xac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <MX_ADC3_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e8:	2306      	movs	r3, #6
 80012ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012ee:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f0:	237f      	movs	r3, #127	; 0x7f
 80012f2:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f6:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80012f8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012fa:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80012fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001300:	f004 fbfe 	bl	8005b00 <HAL_ADC_ConfigChannel>
 8001304:	b920      	cbnz	r0, 8001310 <MX_ADC3_Init+0x94>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001306:	b00c      	add	sp, #48	; 0x30
 8001308:	bd10      	pop	{r4, pc}
    Error_Handler();
 800130a:	f003 f959 	bl	80045c0 <Error_Handler>
 800130e:	e7e2      	b.n	80012d6 <MX_ADC3_Init+0x5a>
    Error_Handler();
 8001310:	f003 f956 	bl	80045c0 <Error_Handler>
}
 8001314:	b00c      	add	sp, #48	; 0x30
 8001316:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001318:	f003 f952 	bl	80045c0 <Error_Handler>
 800131c:	e7e2      	b.n	80012e4 <MX_ADC3_Init+0x68>
 800131e:	bf00      	nop
 8001320:	2000026c 	.word	0x2000026c
 8001324:	50000400 	.word	0x50000400
 8001328:	04300002 	.word	0x04300002

0800132c <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 800132c:	b510      	push	{r4, lr}
 800132e:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001330:	2220      	movs	r2, #32
 8001332:	2100      	movs	r1, #0
 8001334:	4668      	mov	r0, sp
 8001336:	f009 fca1 	bl	800ac7c <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800133a:	4c1e      	ldr	r4, [pc, #120]	; (80013b4 <MX_ADC5_Init+0x88>)
  hadc5.Instance = ADC5;
 800133c:	481e      	ldr	r0, [pc, #120]	; (80013b8 <MX_ADC5_Init+0x8c>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800133e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001342:	2300      	movs	r3, #0
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001344:	e9c0 4200 	strd	r4, r2, [r0]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001348:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134c:	2104      	movs	r1, #4
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001352:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001356:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800135a:	8382      	strh	r2, [r0, #28]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800135c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.NbrOfConversion = 1;
 8001360:	2201      	movs	r2, #1
  hadc5.Init.DMAContinuousRequests = ENABLE;
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001362:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001364:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001366:	2340      	movs	r3, #64	; 0x40
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001368:	6181      	str	r1, [r0, #24]
  hadc5.Init.NbrOfConversion = 1;
 800136a:	6202      	str	r2, [r0, #32]
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800136c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.OversamplingMode = ENABLE;
 8001370:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001374:	6441      	str	r1, [r0, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001376:	6483      	str	r3, [r0, #72]	; 0x48
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001378:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800137a:	f004 fa4b 	bl	8005814 <HAL_ADC_Init>
 800137e:	b990      	cbnz	r0, 80013a6 <MX_ADC5_Init+0x7a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <MX_ADC5_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_ADC5_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001384:	2306      	movs	r3, #6
 8001386:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800138a:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138c:	237f      	movs	r3, #127	; 0x7f
 800138e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001392:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001394:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001396:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 8001398:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800139c:	f004 fbb0 	bl	8005b00 <HAL_ADC_ConfigChannel>
 80013a0:	b920      	cbnz	r0, 80013ac <MX_ADC5_Init+0x80>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80013a2:	b008      	add	sp, #32
 80013a4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013a6:	f003 f90b 	bl	80045c0 <Error_Handler>
 80013aa:	e7e9      	b.n	8001380 <MX_ADC5_Init+0x54>
    Error_Handler();
 80013ac:	f003 f908 	bl	80045c0 <Error_Handler>
}
 80013b0:	b008      	add	sp, #32
 80013b2:	bd10      	pop	{r4, pc}
 80013b4:	50000600 	.word	0x50000600
 80013b8:	200002d8 	.word	0x200002d8
 80013bc:	08600004 	.word	0x08600004

080013c0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c0:	b570      	push	{r4, r5, r6, lr}
 80013c2:	4604      	mov	r4, r0
 80013c4:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	2254      	movs	r2, #84	; 0x54
 80013ca:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80013d0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80013d4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d6:	f009 fc51 	bl	800ac7c <memset>
  if(adcHandle->Instance==ADC1)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e0:	d007      	beq.n	80013f2 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80013e2:	4a5f      	ldr	r2, [pc, #380]	; (8001560 <HAL_ADC_MspInit+0x1a0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d04a      	beq.n	800147e <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 80013e8:	4a5e      	ldr	r2, [pc, #376]	; (8001564 <HAL_ADC_MspInit+0x1a4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d07a      	beq.n	80014e4 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80013ee:	b020      	add	sp, #128	; 0x80
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013fc:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013fe:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f006 faf8 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	2800      	cmp	r0, #0
 8001406:	f040 80a2 	bne.w	800154e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 800140a:	4b57      	ldr	r3, [pc, #348]	; (8001568 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 800140c:	4857      	ldr	r0, [pc, #348]	; (800156c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800140e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 8001410:	4d57      	ldr	r5, [pc, #348]	; (8001570 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001412:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001416:	64da      	str	r2, [r3, #76]	; 0x4c
 8001418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800141e:	9200      	str	r2, [sp, #0]
 8001420:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001424:	f042 0202 	orr.w	r2, r2, #2
 8001428:	64da      	str	r2, [r3, #76]	; 0x4c
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001432:	2201      	movs	r2, #1
 8001434:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001436:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800143a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001442:	f005 fd91 	bl	8006f68 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 8001446:	4a4b      	ldr	r2, [pc, #300]	; (8001574 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001448:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800144a:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800144e:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145c:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800145e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001462:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001466:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001468:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800146a:	f004 ffc3 	bl	80063f4 <HAL_DMA_Init>
 800146e:	b918      	cbnz	r0, 8001478 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001470:	6565      	str	r5, [r4, #84]	; 0x54
 8001472:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001474:	b020      	add	sp, #128	; 0x80
 8001476:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001478:	f003 f8a2 	bl	80045c0 <Error_Handler>
 800147c:	e7f8      	b.n	8001470 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001486:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001488:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800148a:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148c:	f006 fab2 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8001490:	2800      	cmp	r0, #0
 8001492:	d15f      	bne.n	8001554 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001494:	4a38      	ldr	r2, [pc, #224]	; (8001578 <HAL_ADC_MspInit+0x1b8>)
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800149a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 800149c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800149e:	d109      	bne.n	80014b4 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_ADC_MspInit+0x1a8>)
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014b6:	482d      	ldr	r0, [pc, #180]	; (800156c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 80014ba:	4d30      	ldr	r5, [pc, #192]	; (800157c <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	f042 0202 	orr.w	r2, r2, #2
 80014c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80014ca:	2202      	movs	r2, #2
 80014cc:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014ce:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80014d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014da:	f005 fd45 	bl	8006f68 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80014e0:	2325      	movs	r3, #37	; 0x25
 80014e2:	e7b2      	b.n	800144a <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014ee:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014f0:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f2:	f006 fa7f 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	2800      	cmp	r0, #0
 80014f8:	d12f      	bne.n	800155a <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014fa:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <HAL_ADC_MspInit+0x1b8>)
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001500:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001502:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001504:	d109      	bne.n	800151a <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_ADC_MspInit+0x1a8>)
 8001508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800150e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 800151c:	4d19      	ldr	r5, [pc, #100]	; (8001584 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	64da      	str	r2, [r3, #76]	; 0x4c
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800152e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001532:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800153c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f005 fd10 	bl	8006f68 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800154a:	2327      	movs	r3, #39	; 0x27
 800154c:	e77d      	b.n	800144a <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 800154e:	f003 f837 	bl	80045c0 <Error_Handler>
 8001552:	e75a      	b.n	800140a <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8001554:	f003 f834 	bl	80045c0 <Error_Handler>
 8001558:	e79c      	b.n	8001494 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 800155a:	f003 f831 	bl	80045c0 <Error_Handler>
 800155e:	e7cc      	b.n	80014fa <HAL_ADC_MspInit+0x13a>
 8001560:	50000400 	.word	0x50000400
 8001564:	50000600 	.word	0x50000600
 8001568:	40021000 	.word	0x40021000
 800156c:	48000400 	.word	0x48000400
 8001570:	20000344 	.word	0x20000344
 8001574:	40020058 	.word	0x40020058
 8001578:	200001fc 	.word	0x200001fc
 800157c:	200003a4 	.word	0x200003a4
 8001580:	40020030 	.word	0x40020030
 8001584:	20000404 	.word	0x20000404
 8001588:	40020044 	.word	0x40020044
 800158c:	00000000 	.word	0x00000000

08001590 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001590:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 8001592:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80015e0 <can1_init_ibis+0x50>
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001596:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001598:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800159a:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800159c:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800159e:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <can1_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015a2:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80015a4:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 80015a6:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 80015aa:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80015ae:	f005 fa55 	bl	8006a5c <HAL_FDCAN_ConfigFilter>
 80015b2:	b930      	cbnz	r0, 80015c2 <can1_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <can1_init_ibis+0x58>)
 80015b6:	f005 fa83 	bl	8006ac0 <HAL_FDCAN_Start>
 80015ba:	b948      	cbnz	r0, 80015d0 <can1_init_ibis+0x40>
}
 80015bc:	b007      	add	sp, #28
 80015be:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 80015c2:	f002 fffd 	bl	80045c0 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <can1_init_ibis+0x58>)
 80015c8:	f005 fa7a 	bl	8006ac0 <HAL_FDCAN_Start>
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d0f5      	beq.n	80015bc <can1_init_ibis+0x2c>
 80015d0:	f002 fff6 	bl	80045c0 <Error_Handler>
}
 80015d4:	b007      	add	sp, #28
 80015d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
	...
 80015e8:	20000c90 	.word	0x20000c90

080015ec <can1_send>:

void can1_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <can1_send+0x38>)
void can1_send(int id, uint8_t senddata[]){
 80015ee:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80015f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80015f4:	2500      	movs	r5, #0
 80015f6:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80015fa:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80015fe:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001602:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 8001606:	4c08      	ldr	r4, [pc, #32]	; (8001628 <can1_send+0x3c>)
	TxHeader.MessageMarker = 0;
 8001608:	621d      	str	r5, [r3, #32]
void can1_send(int id, uint8_t senddata[]){
 800160a:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 800160c:	4620      	mov	r0, r4
 800160e:	f005 fb59 	bl	8006cc4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001612:	2803      	cmp	r0, #3
 8001614:	d1fa      	bne.n	800160c <can1_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001616:	4632      	mov	r2, r6
 8001618:	4902      	ldr	r1, [pc, #8]	; (8001624 <can1_send+0x38>)
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <can1_send+0x3c>)

}
 800161c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001620:	f005 ba66 	b.w	8006af0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001624:	20000e64 	.word	0x20000e64
 8001628:	20000c90 	.word	0x20000c90
 800162c:	00000000 	.word	0x00000000

08001630 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001630:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 8001632:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001680 <can2_init_ibis+0x50>
void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001636:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001638:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800163a:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800163c:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800163e:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <can2_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001642:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001644:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 8001646:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 800164a:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800164e:	f005 fa05 	bl	8006a5c <HAL_FDCAN_ConfigFilter>
 8001652:	b930      	cbnz	r0, 8001662 <can2_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <can2_init_ibis+0x58>)
 8001656:	f005 fa33 	bl	8006ac0 <HAL_FDCAN_Start>
 800165a:	b948      	cbnz	r0, 8001670 <can2_init_ibis+0x40>
}
 800165c:	b007      	add	sp, #28
 800165e:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 8001662:	f002 ffad 	bl	80045c0 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001666:	4808      	ldr	r0, [pc, #32]	; (8001688 <can2_init_ibis+0x58>)
 8001668:	f005 fa2a 	bl	8006ac0 <HAL_FDCAN_Start>
 800166c:	2800      	cmp	r0, #0
 800166e:	d0f5      	beq.n	800165c <can2_init_ibis+0x2c>
 8001670:	f002 ffa6 	bl	80045c0 <Error_Handler>
}
 8001674:	b007      	add	sp, #28
 8001676:	f85d fb04 	ldr.w	pc, [sp], #4
 800167a:	bf00      	nop
 800167c:	f3af 8000 	nop.w
	...
 8001688:	20000cf4 	.word	0x20000cf4

0800168c <can2_send>:

void can2_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <can2_send+0x38>)
void can2_send(int id, uint8_t senddata[]){
 800168e:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001690:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001694:	2500      	movs	r5, #0
 8001696:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800169a:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800169e:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016a2:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 80016a6:	4c08      	ldr	r4, [pc, #32]	; (80016c8 <can2_send+0x3c>)
	TxHeader.MessageMarker = 0;
 80016a8:	621d      	str	r5, [r3, #32]
void can2_send(int id, uint8_t senddata[]){
 80016aa:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 80016ac:	4620      	mov	r0, r4
 80016ae:	f005 fb09 	bl	8006cc4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80016b2:	2803      	cmp	r0, #3
 80016b4:	d1fa      	bne.n	80016ac <can2_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80016b6:	4632      	mov	r2, r6
 80016b8:	4902      	ldr	r1, [pc, #8]	; (80016c4 <can2_send+0x38>)
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <can2_send+0x3c>)

}
 80016bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80016c0:	f005 ba16 	b.w	8006af0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80016c4:	20000e64 	.word	0x20000e64
 80016c8:	20000cf4 	.word	0x20000cf4

080016cc <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_DMA_Init+0xa0>)
{
 80016ce:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016d0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80016d2:	f040 0004 	orr.w	r0, r0, #4
 80016d6:	6498      	str	r0, [r3, #72]	; 0x48
 80016d8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 80016da:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016dc:	f004 0404 	and.w	r4, r4, #4
 80016e0:	9400      	str	r4, [sp, #0]
 80016e2:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80016e6:	f044 0401 	orr.w	r4, r4, #1
 80016ea:	649c      	str	r4, [r3, #72]	; 0x48
 80016ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ee:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016f8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016fc:	f004 fe14 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001700:	200b      	movs	r0, #11
 8001702:	f004 fe4f 	bl	80063a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	200c      	movs	r0, #12
 800170c:	f004 fe0c 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001710:	200c      	movs	r0, #12
 8001712:	f004 fe47 	bl	80063a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2109      	movs	r1, #9
 800171a:	200d      	movs	r0, #13
 800171c:	f004 fe04 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001720:	200d      	movs	r0, #13
 8001722:	f004 fe3f 	bl	80063a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210a      	movs	r1, #10
 800172a:	200e      	movs	r0, #14
 800172c:	f004 fdfc 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001730:	200e      	movs	r0, #14
 8001732:	f004 fe37 	bl	80063a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	210b      	movs	r1, #11
 800173a:	200f      	movs	r0, #15
 800173c:	f004 fdf4 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001740:	200f      	movs	r0, #15
 8001742:	f004 fe2f 	bl	80063a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	210e      	movs	r1, #14
 800174a:	2010      	movs	r0, #16
 800174c:	f004 fdec 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001750:	2010      	movs	r0, #16
 8001752:	f004 fe27 	bl	80063a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 8001756:	2011      	movs	r0, #17
 8001758:	2200      	movs	r2, #0
 800175a:	210f      	movs	r1, #15
 800175c:	f004 fde4 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001760:	2011      	movs	r0, #17

}
 8001762:	b002      	add	sp, #8
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001768:	f004 be1c 	b.w	80063a4 <HAL_NVIC_EnableIRQ>
 800176c:	40021000 	.word	0x40021000

08001770 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001770:	b510      	push	{r4, lr}
    dmi.huart = printf_huart;
 8001772:	4c06      	ldr	r4, [pc, #24]	; (800178c <dma_printf_init+0x1c>)
void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001774:	4601      	mov	r1, r0
    dma_ring_init(&dmi.tx_ring, printf_huart);
 8001776:	4620      	mov	r0, r4
    dmi.huart = printf_huart;
 8001778:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 800177c:	f000 f830 	bl	80017e0 <dma_ring_init>
    dmi.sending = false;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 8001786:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
}
 800178a:	bd10      	pop	{r4, pc}
 800178c:	20000464 	.word	0x20000464

08001790 <dma_printf_send_it>:
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }
}

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001790:	b570      	push	{r4, r5, r6, lr}
    if(dmi.huart != printf_huart) return;
 8001792:	4c12      	ldr	r4, [pc, #72]	; (80017dc <dma_printf_send_it+0x4c>)
 8001794:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8001798:	4283      	cmp	r3, r0
 800179a:	d000      	beq.n	800179e <dma_printf_send_it+0xe>
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }else{
        dmi.sending = false;
    }
}
 800179c:	bd70      	pop	{r4, r5, r6, pc}
    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 800179e:	f8d4 1414 	ldr.w	r1, [r4, #1044]	; 0x414
 80017a2:	4620      	mov	r0, r4
 80017a4:	f000 f834 	bl	8001810 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 80017a8:	4620      	mov	r0, r4
 80017aa:	f000 f823 	bl	80017f4 <dma_ring_available_linear>
 80017ae:	b285      	uxth	r5, r0
    if (len > 0 ) {
 80017b0:	b915      	cbnz	r5, 80017b8 <dma_printf_send_it+0x28>
        dmi.sending = false;
 80017b2:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
}
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
        dmi.sending = true;
 80017b8:	2301      	movs	r3, #1
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80017ba:	4620      	mov	r0, r4
 80017bc:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        dmi.previous_send_len = len;
 80017c0:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
        dmi.sending = true;
 80017c4:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80017c8:	f000 f81e 	bl	8001808 <dma_ring_get_r_ptr>
 80017cc:	462a      	mov	r2, r5
 80017ce:	1821      	adds	r1, r4, r0
 80017d0:	4630      	mov	r0, r6
}
 80017d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80017d6:	f007 bb7f 	b.w	8008ed8 <HAL_UART_Transmit_DMA>
 80017da:	bf00      	nop
 80017dc:	20000464 	.word	0x20000464

080017e0 <dma_ring_init>:
static void update_w_ptr(struct dma_ring_buf *ring){
	ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx))&0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart){
  ring->buf_size = RING_BUF_SIZE;
 80017e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 80017ea:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  ring->w_ptr = 0;
  ring->r_ptr = 0;
  ring->overwrite_cnt = 0;
  ring->huart = huart;
 80017ee:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
}
 80017f2:	4770      	bx	lr

080017f4 <dma_ring_available_linear>:
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
  if(ring->w_ptr >= ring->r_ptr){
 80017f4:	f8b0 2402 	ldrh.w	r2, [r0, #1026]	; 0x402
 80017f8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 80017fc:	429a      	cmp	r2, r3
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size - ring->r_ptr;
 80017fe:	bf38      	it	cc
 8001800:	f8b0 2400 	ldrhcc.w	r2, [r0, #1024]	; 0x400
 8001804:	1ad0      	subs	r0, r2, r3
  }
}
 8001806:	4770      	bx	lr

08001808 <dma_ring_get_r_ptr>:
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
  return ring->r_ptr;
}
 8001808:	f8b0 0404 	ldrh.w	r0, [r0, #1028]	; 0x404
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
  while(len > 0){
 8001810:	2900      	cmp	r1, #0
 8001812:	dd0c      	ble.n	800182e <dma_ring_forward_r_ptr+0x1e>
 8001814:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
    if(ring->r_ptr+1 >= ring->buf_size){
 8001818:	f8b0 2400 	ldrh.w	r2, [r0, #1024]	; 0x400
 800181c:	3301      	adds	r3, #1
 800181e:	429a      	cmp	r2, r3
      ring->r_ptr = 0;
    }else{
      ring->r_ptr += 1;
 8001820:	bfcc      	ite	gt
 8001822:	b29b      	uxthgt	r3, r3
      ring->r_ptr = 0;
 8001824:	2300      	movle	r3, #0
  while(len > 0){
 8001826:	3901      	subs	r1, #1
 8001828:	d1f8      	bne.n	800181c <dma_ring_forward_r_ptr+0xc>
 800182a:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    }
    len--;
  }
}
 800182e:	4770      	bx	lr

08001830 <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001830:	b510      	push	{r4, lr}
    dsi.huart = scanf_huart;
 8001832:	4c08      	ldr	r4, [pc, #32]	; (8001854 <dma_scanf_init+0x24>)
void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001834:	4601      	mov	r1, r0
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 8001836:	4620      	mov	r0, r4
    dsi.huart = scanf_huart;
 8001838:	f8c4 140c 	str.w	r1, [r4, #1036]	; 0x40c
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 800183c:	f7ff ffd0 	bl	80017e0 <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8001840:	f8b4 2400 	ldrh.w	r2, [r4, #1024]	; 0x400
 8001844:	f8d4 040c 	ldr.w	r0, [r4, #1036]	; 0x40c
 8001848:	4621      	mov	r1, r4
}
 800184a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 800184e:	f008 ba31 	b.w	8009cb4 <HAL_UART_Receive_DMA>
 8001852:	bf00      	nop
 8001854:	2000087c 	.word	0x2000087c

08001858 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001858:	4810      	ldr	r0, [pc, #64]	; (800189c <MX_FDCAN1_Init+0x44>)
{
 800185a:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 800185c:	4c10      	ldr	r4, [pc, #64]	; (80018a0 <MX_FDCAN1_Init+0x48>)
 800185e:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001860:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 8001862:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001864:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001866:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001868:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800186c:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 800186e:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001870:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001872:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001874:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001876:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 800187a:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 800187e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001882:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001884:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001886:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001888:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800188a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800188c:	f004 ff68 	bl	8006760 <HAL_FDCAN_Init>
 8001890:	b900      	cbnz	r0, 8001894 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001892:	bd10      	pop	{r4, pc}
 8001894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001898:	f002 be92 	b.w	80045c0 <Error_Handler>
 800189c:	20000c90 	.word	0x20000c90
 80018a0:	40006400 	.word	0x40006400

080018a4 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80018a4:	4810      	ldr	r0, [pc, #64]	; (80018e8 <MX_FDCAN2_Init+0x44>)
{
 80018a6:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 80018a8:	4c10      	ldr	r4, [pc, #64]	; (80018ec <MX_FDCAN2_Init+0x48>)
 80018aa:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80018ac:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 80018ae:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 80018b0:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80018b2:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80018b4:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 80018b8:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 80018ba:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80018bc:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 80018be:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80018c0:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80018c2:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 80018c6:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 80018ca:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80018ce:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 80018d0:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80018d2:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 80018d4:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018d6:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018d8:	f004 ff42 	bl	8006760 <HAL_FDCAN_Init>
 80018dc:	b900      	cbnz	r0, 80018e0 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80018de:	bd10      	pop	{r4, pc}
 80018e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80018e4:	f002 be6c 	b.w	80045c0 <Error_Handler>
 80018e8:	20000cf4 	.word	0x20000cf4
 80018ec:	40006800 	.word	0x40006800

080018f0 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80018f0:	b510      	push	{r4, lr}
 80018f2:	4604      	mov	r4, r0
 80018f4:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f8:	2254      	movs	r2, #84	; 0x54
 80018fa:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001900:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001904:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001906:	f009 f9b9 	bl	800ac7c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_FDCAN_MspInit+0x168>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d004      	beq.n	800191c <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8001912:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_FDCAN_MspInit+0x16c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d047      	beq.n	80019a8 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001918:	b01e      	add	sp, #120	; 0x78
 800191a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800191c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001924:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001926:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001928:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192a:	f006 f863 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 800192e:	2800      	cmp	r0, #0
 8001930:	d17f      	bne.n	8001a32 <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001932:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_FDCAN_MspInit+0x170>)
 8001934:	6813      	ldr	r3, [r2, #0]
 8001936:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001938:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800193a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800193c:	d109      	bne.n	8001952 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_FDCAN_MspInit+0x174>)
 8001940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001942:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001946:	659a      	str	r2, [r3, #88]	; 0x58
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_FDCAN_MspInit+0x174>)
 8001954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001956:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8001a40 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001962:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001966:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8001a48 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001972:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001978:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800197c:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f005 faf2 	bl	8006f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2103      	movs	r1, #3
 8001988:	2015      	movs	r0, #21
 800198a:	f004 fccd 	bl	8006328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800198e:	2015      	movs	r0, #21
 8001990:	f004 fd08 	bl	80063a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2104      	movs	r1, #4
 8001998:	2016      	movs	r0, #22
 800199a:	f004 fcc5 	bl	8006328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800199e:	2016      	movs	r0, #22
 80019a0:	f004 fd00 	bl	80063a4 <HAL_NVIC_EnableIRQ>
}
 80019a4:	b01e      	add	sp, #120	; 0x78
 80019a6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80019ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019b2:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80019b4:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b6:	f006 f81d 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	2800      	cmp	r0, #0
 80019bc:	d13c      	bne.n	8001a38 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_FDCAN_MspInit+0x170>)
 80019c0:	6813      	ldr	r3, [r2, #0]
 80019c2:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80019c4:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80019c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80019c8:	d109      	bne.n	80019de <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_FDCAN_MspInit+0x174>)
 80019cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80019d2:	659a      	str	r2, [r3, #88]	; 0x58
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	4821      	ldr	r0, [pc, #132]	; (8001a68 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019e4:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001a50 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	f042 0202 	orr.w	r2, r2, #2
 80019ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001a48 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001a00:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a02:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001a06:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a08:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f005 faad 	bl	8006f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2106      	movs	r1, #6
 8001a12:	2056      	movs	r0, #86	; 0x56
 8001a14:	f004 fc88 	bl	8006328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001a18:	2056      	movs	r0, #86	; 0x56
 8001a1a:	f004 fcc3 	bl	80063a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2107      	movs	r1, #7
 8001a22:	2057      	movs	r0, #87	; 0x57
 8001a24:	f004 fc80 	bl	8006328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001a28:	2057      	movs	r0, #87	; 0x57
 8001a2a:	f004 fcbb 	bl	80063a4 <HAL_NVIC_EnableIRQ>
}
 8001a2e:	b01e      	add	sp, #120	; 0x78
 8001a30:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001a32:	f002 fdc5 	bl	80045c0 <Error_Handler>
 8001a36:	e77c      	b.n	8001932 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 8001a38:	f002 fdc2 	bl	80045c0 <Error_Handler>
 8001a3c:	e7bf      	b.n	80019be <HAL_FDCAN_MspInit+0xce>
 8001a3e:	bf00      	nop
 8001a40:	00001800 	.word	0x00001800
 8001a44:	00000002 	.word	0x00000002
	...
 8001a50:	00003000 	.word	0x00003000
 8001a54:	00000002 	.word	0x00000002
 8001a58:	40006400 	.word	0x40006400
 8001a5c:	40006800 	.word	0x40006800
 8001a60:	20000c8c 	.word	0x20000c8c
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000400 	.word	0x48000400

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	2400      	movs	r4, #0
{
 8001a70:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001a76:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <MX_GPIO_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a80:	4f4e      	ldr	r7, [pc, #312]	; (8001bbc <MX_GPIO_Init+0x150>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a82:	4e4f      	ldr	r6, [pc, #316]	; (8001bc0 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	f042 0204 	orr.w	r2, r2, #4
 8001a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a8c:	f002 0204 	and.w	r2, r2, #4
 8001a90:	9201      	str	r2, [sp, #4]
 8001a92:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a96:	f042 0220 	orr.w	r2, r2, #32
 8001a9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9e:	f002 0220 	and.w	r2, r2, #32
 8001aa2:	9202      	str	r2, [sp, #8]
 8001aa4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ab0:	f002 0201 	and.w	r2, r2, #1
 8001ab4:	9203      	str	r2, [sp, #12]
 8001ab6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aba:	f042 0202 	orr.w	r2, r2, #2
 8001abe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ac2:	f002 0202 	and.w	r2, r2, #2
 8001ac6:	9204      	str	r2, [sp, #16]
 8001ac8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001acc:	f042 0208 	orr.w	r2, r2, #8
 8001ad0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ada:	4638      	mov	r0, r7
 8001adc:	4622      	mov	r2, r4
 8001ade:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae2:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ae4:	f005 fb40 	bl	8007168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ae8:	4622      	mov	r2, r4
 8001aea:	f248 0110 	movw	r1, #32784	; 0x8010
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af2:	f005 fb39 	bl	8007168 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001af6:	4622      	mov	r2, r4
 8001af8:	4630      	mov	r0, r6
 8001afa:	f244 4184 	movw	r1, #17540	; 0x4484
 8001afe:	f005 fb33 	bl	8007168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2501      	movs	r5, #1
 8001b04:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	a906      	add	r1, sp, #24
 8001b0a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f005 fa28 	bl	8006f68 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001b1a:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001b22:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f005 fa1d 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b2e:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b30:	4638      	mov	r0, r7
 8001b32:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3c:	f005 fa14 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001b40:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	a906      	add	r1, sp, #24
 8001b46:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001b48:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f005 fa0a 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b60:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f005 f9ff 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b70:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b74:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b78:	f005 f9f6 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	a906      	add	r1, sp, #24
 8001b7e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b80:	2260      	movs	r2, #96	; 0x60
 8001b82:	2300      	movs	r3, #0
 8001b84:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f005 f9ed 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001b92:	4630      	mov	r0, r6
 8001b94:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f005 f9e2 	bl	8006f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001ba4:	4622      	mov	r2, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	2017      	movs	r0, #23
 8001baa:	f004 fbbd 	bl	8006328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bae:	2017      	movs	r0, #23
 8001bb0:	f004 fbf8 	bl	80063a4 <HAL_NVIC_EnableIRQ>

}
 8001bb4:	b00d      	add	sp, #52	; 0x34
 8001bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000c00 	.word	0x48000c00

08001bc8 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001bc8:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001bca:	4870      	ldr	r0, [pc, #448]	; (8001d8c <ICM20602_init+0x1c4>)
{
 8001bcc:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	f005 fac9 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2110      	movs	r1, #16
 8001bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bde:	f005 fac3 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001be2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001be6:	216b      	movs	r1, #107	; 0x6b
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001be8:	2301      	movs	r3, #1
 8001bea:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001bec:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bf0:	9400      	str	r4, [sp, #0]
 8001bf2:	a902      	add	r1, sp, #8
 8001bf4:	4866      	ldr	r0, [pc, #408]	; (8001d90 <ICM20602_init+0x1c8>)
 8001bf6:	f006 fa17 	bl	8008028 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001bfa:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	9400      	str	r4, [sp, #0]
 8001c00:	aa03      	add	r2, sp, #12
 8001c02:	a902      	add	r1, sp, #8
 8001c04:	4862      	ldr	r0, [pc, #392]	; (8001d90 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001c06:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c0a:	f006 fa0d 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2110      	movs	r1, #16
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c16:	f005 faa7 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c1a:	462a      	mov	r2, r5
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c22:	f005 faa1 	bl	8007168 <HAL_GPIO_WritePin>
	send_data[0]=reg & 0x7F;
 8001c26:	2319      	movs	r3, #25
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c28:	9400      	str	r4, [sp, #0]
	send_data[0]=reg & 0x7F;
 8001c2a:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c2e:	aa03      	add	r2, sp, #12
 8001c30:	2301      	movs	r3, #1
 8001c32:	a902      	add	r1, sp, #8
 8001c34:	4856      	ldr	r0, [pc, #344]	; (8001d90 <ICM20602_init+0x1c8>)
 8001c36:	f006 f9f7 	bl	8008028 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001c3a:	2307      	movs	r3, #7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c3c:	9400      	str	r4, [sp, #0]
	send_data[0]=data;
 8001c3e:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c42:	aa03      	add	r2, sp, #12
 8001c44:	2301      	movs	r3, #1
 8001c46:	a902      	add	r1, sp, #8
 8001c48:	4851      	ldr	r0, [pc, #324]	; (8001d90 <ICM20602_init+0x1c8>)
 8001c4a:	f006 f9ed 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2110      	movs	r1, #16
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c56:	f005 fa87 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c5a:	462a      	mov	r2, r5
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f005 fa81 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c66:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001c68:	211a      	movs	r1, #26
	send_data[0]=data;
 8001c6a:	461d      	mov	r5, r3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c6c:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001c6e:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c72:	9400      	str	r4, [sp, #0]
 8001c74:	a902      	add	r1, sp, #8
 8001c76:	4846      	ldr	r0, [pc, #280]	; (8001d90 <ICM20602_init+0x1c8>)
 8001c78:	f006 f9d6 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	9400      	str	r4, [sp, #0]
 8001c80:	a902      	add	r1, sp, #8
 8001c82:	aa03      	add	r2, sp, #12
 8001c84:	4842      	ldr	r0, [pc, #264]	; (8001d90 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001c86:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c8a:	f006 f9cd 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c8e:	462a      	mov	r2, r5
 8001c90:	2110      	movs	r1, #16
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f005 fa67 	bl	8007168 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

	ICM20602_setAccRange(Ascale);
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <ICM20602_init+0x1cc>)
 8001c9c:	681c      	ldr	r4, [r3, #0]


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
    switch(Ascale)
 8001c9e:	2c03      	cmp	r4, #3
 8001ca0:	d807      	bhi.n	8001cb2 <ICM20602_init+0xea>
 8001ca2:	e8df f004 	tbb	[pc, r4]
 8001ca6:	686d      	.short	0x686d
 8001ca8:	6302      	.short	0x6302
            break;
        case AFS_4G:
            aRes = 4.0/32768.0;
            break;
        case AFS_8G:
            aRes = 8.0/32768.0;
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <ICM20602_init+0x1d0>)
 8001cac:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001cb0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cba:	f005 fa55 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cbe:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001cc2:	221c      	movs	r2, #28
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cc4:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001cc6:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cca:	a902      	add	r1, sp, #8
 8001ccc:	aa03      	add	r2, sp, #12
 8001cce:	4830      	ldr	r0, [pc, #192]	; (8001d90 <ICM20602_init+0x1c8>)
 8001cd0:	9500      	str	r5, [sp, #0]
 8001cd2:	f006 f9a9 	bl	8008028 <HAL_SPI_TransmitReceive>
        case AFS_16G:
            aRes = 16.0/32768.0;
            break;         
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001cd6:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cd8:	2301      	movs	r3, #1
 8001cda:	aa03      	add	r2, sp, #12
 8001cdc:	a902      	add	r1, sp, #8
 8001cde:	482c      	ldr	r0, [pc, #176]	; (8001d90 <ICM20602_init+0x1c8>)
 8001ce0:	9500      	str	r5, [sp, #0]
	send_data[0]=data;
 8001ce2:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ce6:	f006 f99f 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2110      	movs	r1, #16
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f005 fa39 	bl	8007168 <HAL_GPIO_WritePin>
	ICM20602_setGyroRange(Gscale);
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <ICM20602_init+0x1d4>)
 8001cf8:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
    switch(Gscale)
 8001cfa:	2c03      	cmp	r4, #3
 8001cfc:	d806      	bhi.n	8001d0c <ICM20602_init+0x144>
 8001cfe:	e8df f004 	tbb	[pc, r4]
 8001d02:	2d31      	.short	0x2d31
 8001d04:	2902      	.short	0x2902
            break;
        case GFS_500DPS:
            gRes = 500.0/32768.0;
            break;
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <ICM20602_init+0x1d8>)
 8001d08:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <ICM20602_init+0x1dc>)
 8001d0a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2110      	movs	r1, #16
 8001d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d14:	f005 fa28 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d18:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001d1c:	221b      	movs	r2, #27
 8001d1e:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d22:	a902      	add	r1, sp, #8
 8001d24:	aa03      	add	r2, sp, #12
 8001d26:	2301      	movs	r3, #1
 8001d28:	9500      	str	r5, [sp, #0]
 8001d2a:	4819      	ldr	r0, [pc, #100]	; (8001d90 <ICM20602_init+0x1c8>)
 8001d2c:	f006 f97c 	bl	8008028 <HAL_SPI_TransmitReceive>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
            break;
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001d30:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d32:	aa03      	add	r2, sp, #12
 8001d34:	a902      	add	r1, sp, #8
 8001d36:	2301      	movs	r3, #1
 8001d38:	9500      	str	r5, [sp, #0]
 8001d3a:	4815      	ldr	r0, [pc, #84]	; (8001d90 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001d3c:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d40:	f006 f972 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2110      	movs	r1, #16
 8001d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4c:	f005 fa0c 	bl	8007168 <HAL_GPIO_WritePin>
}
 8001d50:	b005      	add	sp, #20
 8001d52:	bd30      	pop	{r4, r5, pc}
            gRes = 2000.0/32768.0;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <ICM20602_init+0x1d8>)
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <ICM20602_init+0x1e0>)
 8001d58:	601a      	str	r2, [r3, #0]
            break;
 8001d5a:	e7d7      	b.n	8001d0c <ICM20602_init+0x144>
            gRes = 500.0/32768.0;
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <ICM20602_init+0x1d8>)
 8001d5e:	4a13      	ldr	r2, [pc, #76]	; (8001dac <ICM20602_init+0x1e4>)
 8001d60:	601a      	str	r2, [r3, #0]
            break;
 8001d62:	e7d3      	b.n	8001d0c <ICM20602_init+0x144>
            gRes = 250.0/32768.0;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <ICM20602_init+0x1d8>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <ICM20602_init+0x1e8>)
 8001d68:	601a      	str	r2, [r3, #0]
            break;
 8001d6a:	e7cf      	b.n	8001d0c <ICM20602_init+0x144>
            aRes = 16.0/32768.0;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <ICM20602_init+0x1d0>)
 8001d6e:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001d72:	601a      	str	r2, [r3, #0]
            break;         
 8001d74:	e79d      	b.n	8001cb2 <ICM20602_init+0xea>
            aRes = 4.0/32768.0;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <ICM20602_init+0x1d0>)
 8001d78:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001d7c:	601a      	str	r2, [r3, #0]
            break;
 8001d7e:	e798      	b.n	8001cb2 <ICM20602_init+0xea>
            aRes = 2.0/32768.0;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <ICM20602_init+0x1d0>)
 8001d82:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001d86:	601a      	str	r2, [r3, #0]
            break;
 8001d88:	e793      	b.n	8001cb2 <ICM20602_init+0xea>
 8001d8a:	bf00      	nop
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	20000fc0 	.word	0x20000fc0
 8001d94:	20000d58 	.word	0x20000d58
 8001d98:	20000d5c 	.word	0x20000d5c
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000d90 	.word	0x20000d90
 8001da4:	3cfa0000 	.word	0x3cfa0000
 8001da8:	3d7a0000 	.word	0x3d7a0000
 8001dac:	3c7a0000 	.word	0x3c7a0000
 8001db0:	3bfa0000 	.word	0x3bfa0000

08001db4 <ICM20602_clearAngle>:
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
    pitchAngle = 0.0f;
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <ICM20602_clearAngle+0x10>)
    rollAngle  = 0.0f;
 8001db6:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <ICM20602_clearAngle+0x14>)
    yawAngle   = 0.0f;
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <ICM20602_clearAngle+0x18>)
    pitchAngle = 0.0f;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	6003      	str	r3, [r0, #0]
    rollAngle  = 0.0f;
 8001dbe:	600b      	str	r3, [r1, #0]
    yawAngle   = 0.0f;
 8001dc0:	6013      	str	r3, [r2, #0]
}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000f78 	.word	0x20000f78
 8001dc8:	20000f7c 	.word	0x20000f7c
 8001dcc:	20000fb8 	.word	0x20000fb8

08001dd0 <ICM20602_medianFilter>:
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001dd0:	4a86      	ldr	r2, [pc, #536]	; (8001fec <ICM20602_medianFilter+0x21c>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
    	gyro_mdat[i][0] = gyro[i];
 8001dd2:	4887      	ldr	r0, [pc, #540]	; (8001ff0 <ICM20602_medianFilter+0x220>)

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001dd4:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <ICM20602_medianFilter+0x224>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001dd6:	edd2 5a01 	vldr	s11, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001dda:	ed90 6a00 	vldr	s12, [r0]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001dde:	ed92 7a00 	vldr	s14, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001de2:	edd3 6a01 	vldr	s13, [r3, #4]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001de6:	edd3 7a00 	vldr	s15, [r3]
    	acc_mdat[i][0]  = acc[i];
 8001dea:	4983      	ldr	r1, [pc, #524]	; (8001ff8 <ICM20602_medianFilter+0x228>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001dec:	edc2 5a02 	vstr	s11, [r2, #8]

    	a = 0;
    	b = 2;

    	for (j = 2; j >= 0; j--) {
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001df0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001df8:	ed91 4a00 	vldr	s8, [r1]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001dfc:	ed82 7a01 	vstr	s14, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001e00:	ed82 6a00 	vstr	s12, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e04:	edc3 6a02 	vstr	s13, [r3, #8]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e08:	edc3 7a01 	vstr	s15, [r3, #4]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e0c:	dd05      	ble.n	8001e1a <ICM20602_medianFilter+0x4a>
 8001e0e:	eeb0 5a46 	vmov.f32	s10, s12
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e12:	eeb0 6a65 	vmov.f32	s12, s11
    	gyro_mdat[i][0] = gyro[i];
 8001e16:	eef0 5a45 	vmov.f32	s11, s10
    			tmp         = gyro_tmp[a];
    			gyro_tmp[a] = gyro_tmp[b];
    			gyro_tmp[b] = tmp;
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e1a:	eef4 6ac4 	vcmpe.f32	s13, s8
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001e22:	ed83 4a00 	vstr	s8, [r3]
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e26:	d505      	bpl.n	8001e34 <ICM20602_medianFilter+0x64>
 8001e28:	eeb0 5a44 	vmov.f32	s10, s8
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e2c:	eeb0 4a66 	vmov.f32	s8, s13
    	acc_mdat[i][0]  = acc[i];
 8001e30:	eef0 6a45 	vmov.f32	s13, s10
				acc_tmp[b]  = tmp;
			}
    		a = j-1;
    		b = j;
    	}
    	gyro[i] = gyro_tmp[1];
 8001e34:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	bf88      	it	hi
 8001e3e:	eeb0 7a65 	vmovhi.f32	s14, s11
 8001e42:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001e4a:	eef4 7ae6 	vcmpe.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 8001e4e:	bfa8      	it	ge
 8001e50:	eeb0 6a47 	vmovge.f32	s12, s14
    	acc[i]  = acc_tmp[1];
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	bf98      	it	ls
 8001e5a:	eef0 6a67 	vmovls.f32	s13, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e5e:	edd2 4a04 	vldr	s9, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001e62:	ed90 5a01 	vldr	s10, [r0, #4]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e66:	ed92 7a03 	vldr	s14, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e6a:	edd3 5a04 	vldr	s11, [r3, #16]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e6e:	edd3 7a03 	vldr	s15, [r3, #12]
    	gyro[i] = gyro_tmp[1];
 8001e72:	ed80 6a00 	vstr	s12, [r0]
    	acc[i]  = acc_tmp[1];
 8001e76:	eef4 6ac4 	vcmpe.f32	s13, s8
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e7e:	eeb4 5ae4 	vcmpe.f32	s10, s9
    	acc[i]  = acc_tmp[1];
 8001e82:	bfb8      	it	lt
 8001e84:	eef0 6a44 	vmovlt.f32	s13, s8
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001e8c:	ed91 4a01 	vldr	s8, [r1, #4]
    	acc[i]  = acc_tmp[1];
 8001e90:	edc1 6a00 	vstr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e94:	edc2 4a05 	vstr	s9, [r2, #20]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e98:	ed82 7a04 	vstr	s14, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001e9c:	ed82 5a03 	vstr	s10, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ea0:	edc3 5a05 	vstr	s11, [r3, #20]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001ea4:	edc3 7a04 	vstr	s15, [r3, #16]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001ea8:	dd05      	ble.n	8001eb6 <ICM20602_medianFilter+0xe6>
 8001eaa:	eef0 6a45 	vmov.f32	s13, s10
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001eae:	eeb0 5a64 	vmov.f32	s10, s9
    	gyro_mdat[i][0] = gyro[i];
 8001eb2:	eef0 4a66 	vmov.f32	s9, s13
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001eb6:	eef4 5ac4 	vcmpe.f32	s11, s8
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001ebe:	ed83 4a03 	vstr	s8, [r3, #12]
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001ec2:	d505      	bpl.n	8001ed0 <ICM20602_medianFilter+0x100>
 8001ec4:	eef0 6a44 	vmov.f32	s13, s8
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ec8:	eeb0 4a65 	vmov.f32	s8, s11
    	acc_mdat[i][0]  = acc[i];
 8001ecc:	eef0 5a66 	vmov.f32	s11, s13
    	gyro[i] = gyro_tmp[1];
 8001ed0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	bf88      	it	hi
 8001eda:	eeb0 7a64 	vmovhi.f32	s14, s9
 8001ede:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001ee6:	eef4 7ae5 	vcmpe.f32	s15, s11
    	gyro[i] = gyro_tmp[1];
 8001eea:	bfb8      	it	lt
 8001eec:	eeb0 7a45 	vmovlt.f32	s14, s10
    	acc[i]  = acc_tmp[1];
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	bf88      	it	hi
 8001ef6:	eef0 7a65 	vmovhi.f32	s15, s11
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001efa:	ed92 5a07 	vldr	s10, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001efe:	edd0 5a02 	vldr	s11, [r0, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f02:	edd2 6a06 	vldr	s13, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001f06:	edd3 4a07 	vldr	s9, [r3, #28]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001f0a:	ed93 6a06 	vldr	s12, [r3, #24]
    	gyro[i] = gyro_tmp[1];
 8001f0e:	ed80 7a01 	vstr	s14, [r0, #4]
    	acc[i]  = acc_tmp[1];
 8001f12:	eef4 7ac4 	vcmpe.f32	s15, s8
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f1a:	eef4 5ac5 	vcmpe.f32	s11, s10
    	acc[i]  = acc_tmp[1];
 8001f1e:	bfb8      	it	lt
 8001f20:	eef0 7a44 	vmovlt.f32	s15, s8
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001f28:	edc1 7a01 	vstr	s15, [r1, #4]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f2c:	ed82 5a08 	vstr	s10, [r2, #32]
    	acc_mdat[i][0]  = acc[i];
 8001f30:	edd1 7a02 	vldr	s15, [r1, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f34:	edc2 6a07 	vstr	s13, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001f38:	edc2 5a06 	vstr	s11, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001f3c:	edc3 4a08 	vstr	s9, [r3, #32]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001f40:	ed83 6a07 	vstr	s12, [r3, #28]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f44:	dd05      	ble.n	8001f52 <ICM20602_medianFilter+0x182>
 8001f46:	eeb0 7a65 	vmov.f32	s14, s11
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f4a:	eef0 5a45 	vmov.f32	s11, s10
    	gyro_mdat[i][0] = gyro[i];
 8001f4e:	eeb0 5a47 	vmov.f32	s10, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001f52:	eef4 4ae7 	vcmpe.f32	s9, s15
 8001f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001f5a:	edc3 7a06 	vstr	s15, [r3, #24]
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001f5e:	d505      	bpl.n	8001f6c <ICM20602_medianFilter+0x19c>
 8001f60:	eeb0 7a67 	vmov.f32	s14, s15
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001f64:	eef0 7a64 	vmov.f32	s15, s9
    	acc_mdat[i][0]  = acc[i];
 8001f68:	eef0 4a47 	vmov.f32	s9, s14
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f6c:	eef4 6ac5 	vcmpe.f32	s13, s10
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	dd05      	ble.n	8001f82 <ICM20602_medianFilter+0x1b2>
 8001f76:	eeb0 7a66 	vmov.f32	s14, s13
 8001f7a:	eef0 6a45 	vmov.f32	s13, s10
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f7e:	eeb0 5a47 	vmov.f32	s10, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001f82:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	dd05      	ble.n	8001f98 <ICM20602_medianFilter+0x1c8>
 8001f8c:	eeb0 7a46 	vmov.f32	s14, s12
 8001f90:	eeb0 6a64 	vmov.f32	s12, s9
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001f94:	eef0 4a47 	vmov.f32	s9, s14
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f98:	eef4 5ae6 	vcmpe.f32	s11, s13
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	dd05      	ble.n	8001fae <ICM20602_medianFilter+0x1de>
 8001fa2:	eeb0 7a65 	vmov.f32	s14, s11
 8001fa6:	eef0 5a66 	vmov.f32	s11, s13
 8001faa:	eef0 6a47 	vmov.f32	s13, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001fae:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	dd05      	ble.n	8001fc4 <ICM20602_medianFilter+0x1f4>
 8001fb8:	eeb0 7a67 	vmov.f32	s14, s15
 8001fbc:	eef0 7a46 	vmov.f32	s15, s12
 8001fc0:	eeb0 6a47 	vmov.f32	s12, s14
    	gyro[i] = gyro_tmp[1];
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <ICM20602_medianFilter+0x22c>)
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <ICM20602_medianFilter+0x230>)
 8001fc8:	edc0 6a02 	vstr	s13, [r0, #8]
    	acc[i]  = acc_tmp[1];
 8001fcc:	ed81 6a02 	vstr	s12, [r1, #8]
    for (i = 0; i < 3; i ++) {
 8001fd0:	edc2 4a02 	vstr	s9, [r2, #8]
 8001fd4:	ed83 5a02 	vstr	s10, [r3, #8]
 8001fd8:	ed82 6a01 	vstr	s12, [r2, #4]
 8001fdc:	edc3 6a01 	vstr	s13, [r3, #4]
 8001fe0:	edc2 7a00 	vstr	s15, [r2]
 8001fe4:	edc3 5a00 	vstr	s11, [r3]
    }
}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000d94 	.word	0x20000d94
 8001ff0:	20000efc 	.word	0x20000efc
 8001ff4:	20000d60 	.word	0x20000d60
 8001ff8:	20000e8c 	.word	0x20000e8c
 8001ffc:	20000d84 	.word	0x20000d84
 8002000:	20000dc4 	.word	0x20000dc4

08002004 <ICM20602_read_IMU_data>:
void ICM20602_read_IMU_data() {
 8002004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002008:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800200c:	2200      	movs	r2, #0
void ICM20602_read_IMU_data() {
 800200e:	b084      	sub	sp, #16
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002010:	2110      	movs	r1, #16
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002016:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800201a:	f005 f8a5 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800201e:	21bc      	movs	r1, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002020:	2301      	movs	r3, #1
 8002022:	aa03      	add	r2, sp, #12
    send_data[0]= reg | 0x80;
 8002024:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002028:	9400      	str	r4, [sp, #0]
 800202a:	a902      	add	r1, sp, #8
 800202c:	48d2      	ldr	r0, [pc, #840]	; (8002378 <ICM20602_read_IMU_data+0x374>)
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800202e:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8002384 <ICM20602_read_IMU_data+0x380>
 8002032:	ed9f 8ad2 	vldr	s16, [pc, #840]	; 800237c <ICM20602_read_IMU_data+0x378>
    send_data[0]=0x00;
 8002036:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002038:	f005 fff6 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800203c:	2301      	movs	r3, #1
 800203e:	9400      	str	r4, [sp, #0]
 8002040:	aa03      	add	r2, sp, #12
 8002042:	a902      	add	r1, sp, #8
 8002044:	48cc      	ldr	r0, [pc, #816]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002046:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800204a:	f005 ffed 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800204e:	2110      	movs	r1, #16
 8002050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002054:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002056:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800205a:	f005 f885 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800205e:	462a      	mov	r2, r5
 8002060:	2110      	movs	r1, #16
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f005 f87f 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800206a:	27bb      	movs	r7, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800206c:	9400      	str	r4, [sp, #0]
 800206e:	2301      	movs	r3, #1
 8002070:	aa03      	add	r2, sp, #12
 8002072:	a902      	add	r1, sp, #8
 8002074:	48c0      	ldr	r0, [pc, #768]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002076:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800207a:	f005 ffd5 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800207e:	2301      	movs	r3, #1
 8002080:	9400      	str	r4, [sp, #0]
 8002082:	aa03      	add	r2, sp, #12
 8002084:	a902      	add	r1, sp, #8
 8002086:	48bc      	ldr	r0, [pc, #752]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002088:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800208c:	f005 ffcc 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002090:	f89d 700c 	ldrb.w	r7, [sp, #12]
    return((HiByte<<8) | LoByte);
 8002094:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002098:	2201      	movs	r2, #1
 800209a:	2110      	movs	r1, #16
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80020a0:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020a2:	f005 f861 	bl	8007168 <HAL_GPIO_WritePin>
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80020a6:	ed98 7a00 	vldr	s14, [r8]
 80020aa:	4fb5      	ldr	r7, [pc, #724]	; (8002380 <ICM20602_read_IMU_data+0x37c>)
 80020ac:	ee07 6a90 	vmov	s15, r6
 80020b0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020b8:	462a      	mov	r2, r5
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80020ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020be:	2110      	movs	r1, #16
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80020c0:	edc7 7a00 	vstr	s15, [r7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f005 f84e 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020cc:	26be      	movs	r6, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ce:	9400      	str	r4, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	aa03      	add	r2, sp, #12
 80020d4:	a902      	add	r1, sp, #8
 80020d6:	48a8      	ldr	r0, [pc, #672]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80020d8:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020dc:	f005 ffa4 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020e0:	2301      	movs	r3, #1
 80020e2:	9400      	str	r4, [sp, #0]
 80020e4:	aa03      	add	r2, sp, #12
 80020e6:	a902      	add	r1, sp, #8
 80020e8:	48a3      	ldr	r0, [pc, #652]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80020ea:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ee:	f005 ff9b 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020f2:	2110      	movs	r1, #16
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f8:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80020fa:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020fe:	f005 f833 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002102:	462a      	mov	r2, r5
 8002104:	2110      	movs	r1, #16
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f005 f82d 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800210e:	f04f 0cbd 	mov.w	ip, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002112:	9400      	str	r4, [sp, #0]
 8002114:	2301      	movs	r3, #1
 8002116:	aa03      	add	r2, sp, #12
 8002118:	a902      	add	r1, sp, #8
 800211a:	4897      	ldr	r0, [pc, #604]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 800211c:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002120:	f005 ff82 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002124:	2301      	movs	r3, #1
 8002126:	9400      	str	r4, [sp, #0]
 8002128:	aa03      	add	r2, sp, #12
 800212a:	a902      	add	r1, sp, #8
 800212c:	4892      	ldr	r0, [pc, #584]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800212e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002132:	f005 ff79 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002136:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800213a:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800213e:	2201      	movs	r2, #1
 8002140:	2110      	movs	r1, #16
 8002142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002146:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002148:	f005 f80e 	bl	8007168 <HAL_GPIO_WritePin>
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800214c:	ed98 7a00 	vldr	s14, [r8]
 8002150:	ee07 6a90 	vmov	s15, r6
 8002154:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800215c:	462a      	mov	r2, r5
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800215e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002162:	2110      	movs	r1, #16
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002164:	edc7 7a01 	vstr	s15, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f004 fffc 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002170:	26c0      	movs	r6, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002172:	9400      	str	r4, [sp, #0]
 8002174:	2301      	movs	r3, #1
 8002176:	aa03      	add	r2, sp, #12
 8002178:	a902      	add	r1, sp, #8
 800217a:	487f      	ldr	r0, [pc, #508]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 800217c:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002180:	f005 ff52 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002184:	2301      	movs	r3, #1
 8002186:	9400      	str	r4, [sp, #0]
 8002188:	aa03      	add	r2, sp, #12
 800218a:	a902      	add	r1, sp, #8
 800218c:	487a      	ldr	r0, [pc, #488]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800218e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002192:	f005 ff49 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002196:	2110      	movs	r1, #16
 8002198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800219e:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021a2:	f004 ffe1 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021a6:	462a      	mov	r2, r5
 80021a8:	2110      	movs	r1, #16
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ae:	f004 ffdb 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021b2:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b6:	9400      	str	r4, [sp, #0]
 80021b8:	2301      	movs	r3, #1
 80021ba:	aa03      	add	r2, sp, #12
 80021bc:	a902      	add	r1, sp, #8
 80021be:	486e      	ldr	r0, [pc, #440]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80021c0:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021c4:	f005 ff30 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021c8:	2301      	movs	r3, #1
 80021ca:	9400      	str	r4, [sp, #0]
 80021cc:	aa03      	add	r2, sp, #12
 80021ce:	a902      	add	r1, sp, #8
 80021d0:	4869      	ldr	r0, [pc, #420]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80021d2:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021d6:	f005 ff27 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80021da:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80021de:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	2110      	movs	r1, #16
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021ea:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021ec:	f004 ffbc 	bl	8007168 <HAL_GPIO_WritePin>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021f0:	ed98 7a00 	vldr	s14, [r8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021f4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8002388 <ICM20602_read_IMU_data+0x384>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021f8:	ee07 6a90 	vmov	s15, r6
 80021fc:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002204:	462a      	mov	r2, r5
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002206:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800220a:	2110      	movs	r1, #16
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 800220c:	edc7 7a02 	vstr	s15, [r7, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002214:	f004 ffa8 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002218:	26c4      	movs	r6, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800221a:	9400      	str	r4, [sp, #0]
 800221c:	2301      	movs	r3, #1
 800221e:	aa03      	add	r2, sp, #12
 8002220:	a902      	add	r1, sp, #8
 8002222:	4855      	ldr	r0, [pc, #340]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002224:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002228:	f005 fefe 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800222c:	2301      	movs	r3, #1
 800222e:	9400      	str	r4, [sp, #0]
 8002230:	aa03      	add	r2, sp, #12
 8002232:	a902      	add	r1, sp, #8
 8002234:	4850      	ldr	r0, [pc, #320]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002236:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800223a:	f005 fef5 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800223e:	2110      	movs	r1, #16
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002246:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800224a:	f004 ff8d 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800224e:	462a      	mov	r2, r5
 8002250:	2110      	movs	r1, #16
 8002252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002256:	f004 ff87 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800225a:	f04f 0cc3 	mov.w	ip, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800225e:	9400      	str	r4, [sp, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	aa03      	add	r2, sp, #12
 8002264:	a902      	add	r1, sp, #8
 8002266:	4844      	ldr	r0, [pc, #272]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002268:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800226c:	f005 fedc 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002270:	2301      	movs	r3, #1
 8002272:	9400      	str	r4, [sp, #0]
 8002274:	aa03      	add	r2, sp, #12
 8002276:	a902      	add	r1, sp, #8
 8002278:	483f      	ldr	r0, [pc, #252]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800227a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800227e:	f005 fed3 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002282:	f89d 800c 	ldrb.w	r8, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002286:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800228a:	2201      	movs	r2, #1
 800228c:	2110      	movs	r1, #16
 800228e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002292:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002294:	f004 ff68 	bl	8007168 <HAL_GPIO_WritePin>
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002298:	ee07 6a90 	vmov	s15, r6
 800229c:	ed99 7a00 	vldr	s14, [r9]
 80022a0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800238c <ICM20602_read_IMU_data+0x388>
 80022a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022a8:	462a      	mov	r2, r5
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80022aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022ae:	2110      	movs	r1, #16
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80022b0:	edc8 7a00 	vstr	s15, [r8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b8:	f004 ff56 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80022bc:	26c6      	movs	r6, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022be:	9400      	str	r4, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	aa03      	add	r2, sp, #12
 80022c4:	a902      	add	r1, sp, #8
 80022c6:	482c      	ldr	r0, [pc, #176]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80022c8:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022cc:	f005 feac 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022d0:	2301      	movs	r3, #1
 80022d2:	9400      	str	r4, [sp, #0]
 80022d4:	aa03      	add	r2, sp, #12
 80022d6:	a902      	add	r1, sp, #8
 80022d8:	4827      	ldr	r0, [pc, #156]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80022da:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022de:	f005 fea3 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022e2:	2110      	movs	r1, #16
 80022e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e8:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80022ea:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022ee:	f004 ff3b 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022f2:	462a      	mov	r2, r5
 80022f4:	2110      	movs	r1, #16
 80022f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fa:	f004 ff35 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80022fe:	f04f 0cc5 	mov.w	ip, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002302:	9400      	str	r4, [sp, #0]
 8002304:	2301      	movs	r3, #1
 8002306:	aa03      	add	r2, sp, #12
 8002308:	a902      	add	r1, sp, #8
 800230a:	481b      	ldr	r0, [pc, #108]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 800230c:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002310:	f005 fe8a 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002314:	2301      	movs	r3, #1
 8002316:	9400      	str	r4, [sp, #0]
 8002318:	aa03      	add	r2, sp, #12
 800231a:	a902      	add	r1, sp, #8
 800231c:	4816      	ldr	r0, [pc, #88]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800231e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002322:	f005 fe81 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002326:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800232a:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800232e:	2201      	movs	r2, #1
 8002330:	2110      	movs	r1, #16
 8002332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002336:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002338:	f004 ff16 	bl	8007168 <HAL_GPIO_WritePin>
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800233c:	ee07 6a90 	vmov	s15, r6
 8002340:	ed99 7a00 	vldr	s14, [r9]
 8002344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002348:	462a      	mov	r2, r5
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800234a:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800234e:	2110      	movs	r1, #16
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002350:	edc8 7a01 	vstr	s15, [r8, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002358:	f004 ff06 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800235c:	26c8      	movs	r6, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800235e:	9400      	str	r4, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	aa03      	add	r2, sp, #12
 8002364:	a902      	add	r1, sp, #8
 8002366:	4804      	ldr	r0, [pc, #16]	; (8002378 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002368:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800236c:	f005 fe5c 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002370:	2301      	movs	r3, #1
 8002372:	9400      	str	r4, [sp, #0]
 8002374:	e00c      	b.n	8002390 <ICM20602_read_IMU_data+0x38c>
 8002376:	bf00      	nop
 8002378:	20000fc0 	.word	0x20000fc0
 800237c:	411ce80a 	.word	0x411ce80a
 8002380:	20000e8c 	.word	0x20000e8c
 8002384:	20000d5c 	.word	0x20000d5c
 8002388:	20000d90 	.word	0x20000d90
 800238c:	20000efc 	.word	0x20000efc
 8002390:	aa03      	add	r2, sp, #12
 8002392:	a902      	add	r1, sp, #8
 8002394:	48b8      	ldr	r0, [pc, #736]	; (8002678 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 8002396:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800239a:	f005 fe45 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800239e:	2110      	movs	r1, #16
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a4:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80023a6:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023aa:	f004 fedd 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80023ae:	462a      	mov	r2, r5
 80023b0:	2110      	movs	r1, #16
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b6:	f004 fed7 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80023ba:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023be:	9400      	str	r4, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	aa03      	add	r2, sp, #12
 80023c4:	a902      	add	r1, sp, #8
 80023c6:	48ac      	ldr	r0, [pc, #688]	; (8002678 <ICM20602_read_IMU_data+0x674>)
    send_data[0]= reg | 0x80;
 80023c8:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023cc:	f005 fe2c 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023d0:	2301      	movs	r3, #1
 80023d2:	9400      	str	r4, [sp, #0]
 80023d4:	aa03      	add	r2, sp, #12
 80023d6:	a902      	add	r1, sp, #8
 80023d8:	48a7      	ldr	r0, [pc, #668]	; (8002678 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 80023da:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023de:	f005 fe23 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80023e2:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80023e6:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023ea:	2110      	movs	r1, #16
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f0:	2201      	movs	r2, #1
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80023f2:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023f4:	f004 feb8 	bl	8007168 <HAL_GPIO_WritePin>
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80023f8:	ee07 6a90 	vmov	s15, r6
 80023fc:	ed99 7a00 	vldr	s14, [r9]
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    send_data[0]= reg | 0x80;
 8002404:	26c2      	movs	r6, #194	; 0xc2
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240a:	edc8 7a02 	vstr	s15, [r8, #8]
    ICM20602_medianFilter();
 800240e:	f7ff fcdf 	bl	8001dd0 <ICM20602_medianFilter>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002412:	462a      	mov	r2, r5
 8002414:	2110      	movs	r1, #16
 8002416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241a:	f004 fea5 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	2301      	movs	r3, #1
 8002422:	aa03      	add	r2, sp, #12
 8002424:	a902      	add	r1, sp, #8
 8002426:	4894      	ldr	r0, [pc, #592]	; (8002678 <ICM20602_read_IMU_data+0x674>)
    send_data[0]= reg | 0x80;
 8002428:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800242c:	f005 fdfc 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002430:	2301      	movs	r3, #1
 8002432:	9400      	str	r4, [sp, #0]
 8002434:	aa03      	add	r2, sp, #12
 8002436:	a902      	add	r1, sp, #8
 8002438:	488f      	ldr	r0, [pc, #572]	; (8002678 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 800243a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800243e:	f005 fdf3 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002442:	2110      	movs	r1, #16
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800244a:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800244e:	f004 fe8b 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002452:	462a      	mov	r2, r5
 8002454:	2110      	movs	r1, #16
 8002456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245a:	f004 fe85 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800245e:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002462:	9400      	str	r4, [sp, #0]
 8002464:	2301      	movs	r3, #1
 8002466:	aa03      	add	r2, sp, #12
 8002468:	a902      	add	r1, sp, #8
 800246a:	4883      	ldr	r0, [pc, #524]	; (8002678 <ICM20602_read_IMU_data+0x674>)
    send_data[0]= reg | 0x80;
 800246c:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002470:	f005 fdda 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002474:	2301      	movs	r3, #1
 8002476:	9400      	str	r4, [sp, #0]
 8002478:	aa03      	add	r2, sp, #12
 800247a:	a902      	add	r1, sp, #8
 800247c:	487e      	ldr	r0, [pc, #504]	; (8002678 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 800247e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002482:	f005 fdd1 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002486:	2201      	movs	r2, #1
 8002488:	2110      	movs	r1, #16
 800248a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 800248e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002492:	f004 fe69 	bl	8007168 <HAL_GPIO_WritePin>
void ICM20602_IMU_compensate(void)
{
    int k;
    for(k=0;k<3;k++){
        acc_comp[k] = acc[k] - acc_off[k];
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002496:	4979      	ldr	r1, [pc, #484]	; (800267c <ICM20602_read_IMU_data+0x678>)
 8002498:	edd8 3a00 	vldr	s7, [r8]
 800249c:	edd1 7a00 	vldr	s15, [r1]
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 80024a0:	4b77      	ldr	r3, [pc, #476]	; (8002680 <ICM20602_read_IMU_data+0x67c>)
 80024a2:	4878      	ldr	r0, [pc, #480]	; (8002684 <ICM20602_read_IMU_data+0x680>)
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024a4:	eddf 5a78 	vldr	s11, [pc, #480]	; 8002688 <ICM20602_read_IMU_data+0x684>
 80024a8:	ed90 6a00 	vldr	s12, [r0]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024ac:	ed93 7a00 	vldr	s14, [r3]
        acc_comp[k] = acc[k] - acc_off[k];
 80024b0:	4a76      	ldr	r2, [pc, #472]	; (800268c <ICM20602_read_IMU_data+0x688>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80024b2:	ed91 3a01 	vldr	s6, [r1, #4]
 80024b6:	ed91 5a02 	vldr	s10, [r1, #8]
 80024ba:	ed98 4a01 	vldr	s8, [r8, #4]
 80024be:	edd8 4a02 	vldr	s9, [r8, #8]
        acc_comp[k] = acc[k] - acc_off[k];
 80024c2:	edd2 0a00 	vldr	s1, [r2]
 80024c6:	ed92 1a01 	vldr	s2, [r2, #4]
 80024ca:	edd7 2a00 	vldr	s5, [r7]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024ce:	ed93 2a01 	vldr	s4, [r3, #4]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*1;
 80024d2:	486f      	ldr	r0, [pc, #444]	; (8002690 <ICM20602_read_IMU_data+0x68c>)
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*1;
 80024d4:	496f      	ldr	r1, [pc, #444]	; (8002694 <ICM20602_read_IMU_data+0x690>)
    return ((HiByte<<8) | LoByte);
 80024d6:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024da:	b236      	sxth	r6, r6
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80024dc:	ee73 3ae7 	vsub.f32	s7, s7, s15
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024e0:	ee07 6a90 	vmov	s15, r6
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 80024e4:	4c6c      	ldr	r4, [pc, #432]	; (8002698 <ICM20602_read_IMU_data+0x694>)
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80024ee:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 80024f2:	ee26 6a26 	vmul.f32	s12, s12, s13
 80024f6:	eee7 1aa5 	vfma.f32	s3, s15, s11
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024fa:	ee33 7a87 	vadd.f32	s14, s7, s14
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 80024fe:	edd4 6a00 	vldr	s13, [r4]
        acc_comp[k] = acc[k] - acc_off[k];
 8002502:	edd2 7a02 	vldr	s15, [r2, #8]
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002506:	4a65      	ldr	r2, [pc, #404]	; (800269c <ICM20602_read_IMU_data+0x698>)
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002508:	edd3 5a02 	vldr	s11, [r3, #8]
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 800250c:	edc2 1a00 	vstr	s3, [r2]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002510:	ee34 4a43 	vsub.f32	s8, s8, s6
 8002514:	ee74 4ac5 	vsub.f32	s9, s9, s10
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 8002518:	eee7 6a06 	vfma.f32	s13, s14, s12
        acc_comp[k] = acc[k] - acc_off[k];
 800251c:	4a60      	ldr	r2, [pc, #384]	; (80026a0 <ICM20602_read_IMU_data+0x69c>)
 800251e:	ed97 3a01 	vldr	s6, [r7, #4]
 8002522:	ed97 5a02 	vldr	s10, [r7, #8]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*1;
 8002526:	ed90 7a00 	vldr	s14, [r0]
        acc_comp[k] = acc[k] - acc_off[k];
 800252a:	ee33 3a41 	vsub.f32	s6, s6, s2
 800252e:	ee35 5a67 	vsub.f32	s10, s10, s15
 8002532:	ee72 2ae0 	vsub.f32	s5, s5, s1
    while (deg < -180.0f) deg += 360.0f;
 8002536:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 80026a4 <ICM20602_read_IMU_data+0x6a0>
        acc_comp[k] = acc[k] - acc_off[k];
 800253a:	edc2 2a00 	vstr	s5, [r2]
 800253e:	ed82 3a01 	vstr	s6, [r2, #4]
 8002542:	ed82 5a02 	vstr	s10, [r2, #8]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002546:	ee34 2a02 	vadd.f32	s4, s8, s4
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800254a:	4a57      	ldr	r2, [pc, #348]	; (80026a8 <ICM20602_read_IMU_data+0x6a4>)
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*1;
 800254c:	edd1 7a00 	vldr	s15, [r1]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002550:	edc2 3a00 	vstr	s7, [r2]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002554:	ee74 5aa5 	vadd.f32	s11, s9, s11
    while (deg < -180.0f) deg += 360.0f;
 8002558:	eef4 6ac1 	vcmpe.f32	s13, s2
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*1;
 8002560:	eea2 7a06 	vfma.f32	s14, s4, s12
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*1;
 8002564:	eee5 7a86 	vfma.f32	s15, s11, s12
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002568:	ed82 4a01 	vstr	s8, [r2, #4]
 800256c:	edc2 4a02 	vstr	s9, [r2, #8]
    while (deg < -180.0f) deg += 360.0f;
 8002570:	d50c      	bpl.n	800258c <ICM20602_read_IMU_data+0x588>
 8002572:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 80026ac <ICM20602_read_IMU_data+0x6a8>
 8002576:	eddf 5a4e 	vldr	s11, [pc, #312]	; 80026b0 <ICM20602_read_IMU_data+0x6ac>
 800257a:	eeb0 6a66 	vmov.f32	s12, s13
 800257e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	ee76 6a85 	vadd.f32	s13, s13, s10
 800258a:	d4f6      	bmi.n	800257a <ICM20602_read_IMU_data+0x576>
    while (deg >= 180.0f) deg -= 360.0f;
 800258c:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80026b4 <ICM20602_read_IMU_data+0x6b0>
 8002590:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	db0c      	blt.n	80025b4 <ICM20602_read_IMU_data+0x5b0>
 800259a:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80026ac <ICM20602_read_IMU_data+0x6a8>
 800259e:	eddf 5a46 	vldr	s11, [pc, #280]	; 80026b8 <ICM20602_read_IMU_data+0x6b4>
 80025a2:	eeb0 6a66 	vmov.f32	s12, s13
 80025a6:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80025b2:	daf6      	bge.n	80025a2 <ICM20602_read_IMU_data+0x59e>
    while (deg < -180.0f) deg += 360.0f;
 80025b4:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 80026a4 <ICM20602_read_IMU_data+0x6a0>
    pitchAngle = ICM20602_normAngle(pitchAngle);
 80025b8:	edc4 6a00 	vstr	s13, [r4]
    while (deg < -180.0f) deg += 360.0f;
 80025bc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	d50c      	bpl.n	80025e0 <ICM20602_read_IMU_data+0x5dc>
 80025c6:	eddf 5a39 	vldr	s11, [pc, #228]	; 80026ac <ICM20602_read_IMU_data+0x6a8>
 80025ca:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80026b0 <ICM20602_read_IMU_data+0x6ac>
 80025ce:	eef0 6a47 	vmov.f32	s13, s14
 80025d2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80025d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025da:	ee37 7a25 	vadd.f32	s14, s14, s11
 80025de:	d4f6      	bmi.n	80025ce <ICM20602_read_IMU_data+0x5ca>
    while (deg >= 180.0f) deg -= 360.0f;
 80025e0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80026b4 <ICM20602_read_IMU_data+0x6b0>
 80025e4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	db0c      	blt.n	8002608 <ICM20602_read_IMU_data+0x604>
 80025ee:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80026ac <ICM20602_read_IMU_data+0x6a8>
 80025f2:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80026b8 <ICM20602_read_IMU_data+0x6b4>
 80025f6:	eef0 6a47 	vmov.f32	s13, s14
 80025fa:	eef4 6ac6 	vcmpe.f32	s13, s12
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002606:	daf6      	bge.n	80025f6 <ICM20602_read_IMU_data+0x5f2>
    while (deg < -180.0f) deg += 360.0f;
 8002608:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026a4 <ICM20602_read_IMU_data+0x6a0>
    rollAngle  = ICM20602_normAngle(rollAngle);
 800260c:	ed80 7a00 	vstr	s14, [r0]
    while (deg < -180.0f) deg += 360.0f;
 8002610:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	d50c      	bpl.n	8002634 <ICM20602_read_IMU_data+0x630>
 800261a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80026ac <ICM20602_read_IMU_data+0x6a8>
 800261e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80026b0 <ICM20602_read_IMU_data+0x6ac>
 8002622:	eeb0 7a67 	vmov.f32	s14, s15
 8002626:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002632:	d4f6      	bmi.n	8002622 <ICM20602_read_IMU_data+0x61e>
    while (deg >= 180.0f) deg -= 360.0f;
 8002634:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026b4 <ICM20602_read_IMU_data+0x6b0>
 8002638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	db0c      	blt.n	800265c <ICM20602_read_IMU_data+0x658>
 8002642:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80026ac <ICM20602_read_IMU_data+0x6a8>
 8002646:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80026b8 <ICM20602_read_IMU_data+0x6b4>
 800264a:	eeb0 7a67 	vmov.f32	s14, s15
 800264e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800265a:	daf6      	bge.n	800264a <ICM20602_read_IMU_data+0x646>
    yawAngle   = ICM20602_normAngle(yawAngle);
 800265c:	edc1 7a00 	vstr	s15, [r1]
    gyro_prv[0] = gyro_comp[0];
 8002660:	edc3 3a00 	vstr	s7, [r3]
    gyro_prv[1] = gyro_comp[1];
 8002664:	ed83 4a01 	vstr	s8, [r3, #4]
    gyro_prv[2] = gyro_comp[2];
 8002668:	edc3 4a02 	vstr	s9, [r3, #8]
}
 800266c:	b004      	add	sp, #16
 800266e:	ecbd 8b02 	vpop	{d8}
 8002672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002676:	bf00      	nop
 8002678:	20000fc0 	.word	0x20000fc0
 800267c:	20000f14 	.word	0x20000f14
 8002680:	20000db8 	.word	0x20000db8
 8002684:	20000004 	.word	0x20000004
 8002688:	3b4889df 	.word	0x3b4889df
 800268c:	20000ea4 	.word	0x20000ea4
 8002690:	20000f7c 	.word	0x20000f7c
 8002694:	20000fb8 	.word	0x20000fb8
 8002698:	20000f78 	.word	0x20000f78
 800269c:	20000dd8 	.word	0x20000dd8
 80026a0:	20000e98 	.word	0x20000e98
 80026a4:	c3340000 	.word	0xc3340000
 80026a8:	20000f08 	.word	0x20000f08
 80026ac:	43b40000 	.word	0x43b40000
 80026b0:	c4070000 	.word	0xc4070000
 80026b4:	43340000 	.word	0x43340000
 80026b8:	44070000 	.word	0x44070000
 80026bc:	00000000 	.word	0x00000000

080026c0 <ICM20602_IMU_calibration2>:
{
 80026c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c4:	ed2d 8b06 	vpush	{d8-d10}
    double acc_sum[3]={0};
 80026c8:	2400      	movs	r4, #0
{
 80026ca:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    double acc_ave[3][10] = {{0.0}};
 80026ce:	22f0      	movs	r2, #240	; 0xf0
 80026d0:	4621      	mov	r1, r4
 80026d2:	a822      	add	r0, sp, #136	; 0x88
    double acc_sum[3]={0};
 80026d4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80026d8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80026dc:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    double gyro_sum[3]={0};
 80026e0:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 80026e4:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 80026e8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    double acc_ave[3][10] = {{0.0}};
 80026ec:	f008 fac6 	bl	800ac7c <memset>
    double gyro_ave[3][10] = {{0.0}};
 80026f0:	4621      	mov	r1, r4
 80026f2:	22f0      	movs	r2, #240	; 0xf0
 80026f4:	a85e      	add	r0, sp, #376	; 0x178
 80026f6:	f008 fac1 	bl	800ac7c <memset>
    printf("put the IMU still!\n");
 80026fa:	48c9      	ldr	r0, [pc, #804]	; (8002a20 <ICM20602_IMU_calibration2+0x360>)
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80026fc:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8002a24 <ICM20602_IMU_calibration2+0x364>
    printf("put the IMU still!\n");
 8002700:	f008 f926 	bl	800a950 <puts>
    HAL_Delay(1000);
 8002704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002708:	f003 f872 	bl	80057f0 <HAL_Delay>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 800270c:	2200      	movs	r2, #0
 800270e:	2300      	movs	r3, #0
    double cal_len = 0.0f;
 8002710:	ec43 2b1a 	vmov	d10, r2, r3
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f7fd fdde 	bl	80002d8 <__aeabi_dsub>
 800271c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002720:	9309      	str	r3, [sp, #36]	; 0x24
 8002722:	9008      	str	r0, [sp, #32]
		|| cal_len < 500.0
 8002724:	a3bc      	add	r3, pc, #752	; (adr r3, 8002a18 <ICM20602_IMU_calibration2+0x358>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800272e:	f7fe fa1b 	bl	8000b68 <__aeabi_dcmpgt>
 8002732:	2800      	cmp	r0, #0
 8002734:	d15d      	bne.n	80027f2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002736:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800273a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800273e:	f7fd fdcb 	bl	80002d8 <__aeabi_dsub>
 8002742:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002746:	930b      	str	r3, [sp, #44]	; 0x2c
 8002748:	900a      	str	r0, [sp, #40]	; 0x28
 800274a:	a3b3      	add	r3, pc, #716	; (adr r3, 8002a18 <ICM20602_IMU_calibration2+0x358>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002754:	f7fe fa08 	bl	8000b68 <__aeabi_dcmpgt>
 8002758:	2800      	cmp	r0, #0
 800275a:	d14a      	bne.n	80027f2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 800275c:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8002760:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 8002764:	f7fd fdb8 	bl	80002d8 <__aeabi_dsub>
 8002768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800276c:	930d      	str	r3, [sp, #52]	; 0x34
 800276e:	900c      	str	r0, [sp, #48]	; 0x30
 8002770:	a3a9      	add	r3, pc, #676	; (adr r3, 8002a18 <ICM20602_IMU_calibration2+0x358>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800277a:	f7fe f9f5 	bl	8000b68 <__aeabi_dcmpgt>
 800277e:	2800      	cmp	r0, #0
 8002780:	d137      	bne.n	80027f2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 8002782:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
 8002786:	e9dd 0170 	ldrd	r0, r1, [sp, #448]	; 0x1c0
 800278a:	f7fd fda5 	bl	80002d8 <__aeabi_dsub>
 800278e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002792:	930f      	str	r3, [sp, #60]	; 0x3c
 8002794:	900e      	str	r0, [sp, #56]	; 0x38
 8002796:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a18 <ICM20602_IMU_calibration2+0x358>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80027a0:	f7fe f9e2 	bl	8000b68 <__aeabi_dcmpgt>
 80027a4:	bb28      	cbnz	r0, 80027f2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 80027a6:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 80027aa:	e9dd 0184 	ldrd	r0, r1, [sp, #528]	; 0x210
 80027ae:	f7fd fd93 	bl	80002d8 <__aeabi_dsub>
 80027b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80027b6:	9311      	str	r3, [sp, #68]	; 0x44
 80027b8:	9010      	str	r0, [sp, #64]	; 0x40
 80027ba:	a397      	add	r3, pc, #604	; (adr r3, 8002a18 <ICM20602_IMU_calibration2+0x358>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80027c4:	f7fe f9d0 	bl	8000b68 <__aeabi_dcmpgt>
 80027c8:	b998      	cbnz	r0, 80027f2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 80027ca:	e9dd 2386 	ldrd	r2, r3, [sp, #536]	; 0x218
 80027ce:	e9dd 0198 	ldrd	r0, r1, [sp, #608]	; 0x260
 80027d2:	f7fd fd81 	bl	80002d8 <__aeabi_dsub>
 80027d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80027da:	9313      	str	r3, [sp, #76]	; 0x4c
 80027dc:	9012      	str	r0, [sp, #72]	; 0x48
 80027de:	a38e      	add	r3, pc, #568	; (adr r3, 8002a18 <ICM20602_IMU_calibration2+0x358>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80027e8:	f7fe f9be 	bl	8000b68 <__aeabi_dcmpgt>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	f000 82f3 	beq.w	8002dd8 <ICM20602_IMU_calibration2+0x718>
    	printf("cal_len=%f\r\n",cal_len);
 80027f2:	ab16      	add	r3, sp, #88	; 0x58
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	4b8c      	ldr	r3, [pc, #560]	; (8002a28 <ICM20602_IMU_calibration2+0x368>)
 80027f8:	9304      	str	r3, [sp, #16]
 80027fa:	ec59 8b1a 	vmov	r8, r9, d10
 80027fe:	ab1c      	add	r3, sp, #112	; 0x70
 8002800:	9303      	str	r3, [sp, #12]
 8002802:	4b8a      	ldr	r3, [pc, #552]	; (8002a2c <ICM20602_IMU_calibration2+0x36c>)
 8002804:	9305      	str	r3, [sp, #20]
 8002806:	ee1a 2a10 	vmov	r2, s20
 800280a:	464b      	mov	r3, r9
 800280c:	4888      	ldr	r0, [pc, #544]	; (8002a30 <ICM20602_IMU_calibration2+0x370>)
 800280e:	f8df b230 	ldr.w	fp, [pc, #560]	; 8002a40 <ICM20602_IMU_calibration2+0x380>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002812:	4c88      	ldr	r4, [pc, #544]	; (8002a34 <ICM20602_IMU_calibration2+0x374>)
    	printf("cal_len=%f\r\n",cal_len);
 8002814:	f008 f836 	bl	800a884 <iprintf>
    	for(j = 0; j < 3; j++){
 8002818:	ee1a 2a10 	vmov	r2, s20
 800281c:	4986      	ldr	r1, [pc, #536]	; (8002a38 <ICM20602_IMU_calibration2+0x378>)
 800281e:	464b      	mov	r3, r9
 8002820:	2000      	movs	r0, #0
 8002822:	f7fe f83b 	bl	800089c <__aeabi_ddiv>
 8002826:	ec41 0b19 	vmov	d9, r0, r1
 800282a:	ae22      	add	r6, sp, #136	; 0x88
 800282c:	ad5e      	add	r5, sp, #376	; 0x178
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800282e:	2700      	movs	r7, #0
 8002830:	2200      	movs	r2, #0
 8002832:	2110      	movs	r1, #16
 8002834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002838:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800283c:	f004 fc94 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002840:	20bc      	movs	r0, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002842:	f8cd 8000 	str.w	r8, [sp]
 8002846:	2301      	movs	r3, #1
 8002848:	aa15      	add	r2, sp, #84	; 0x54
 800284a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800284c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002850:	4620      	mov	r0, r4
 8002852:	f005 fbe9 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002856:	2301      	movs	r3, #1
 8002858:	f8cd 8000 	str.w	r8, [sp]
 800285c:	aa15      	add	r2, sp, #84	; 0x54
 800285e:	a914      	add	r1, sp, #80	; 0x50
 8002860:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002862:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002866:	f005 fbdf 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800286a:	2201      	movs	r2, #1
 800286c:	2110      	movs	r1, #16
 800286e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002872:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002876:	f004 fc77 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2110      	movs	r1, #16
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f004 fc71 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002886:	20bb      	movs	r0, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002888:	f8cd 8000 	str.w	r8, [sp]
 800288c:	2301      	movs	r3, #1
 800288e:	aa15      	add	r2, sp, #84	; 0x54
 8002890:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002892:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002896:	4620      	mov	r0, r4
 8002898:	f005 fbc6 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800289c:	2301      	movs	r3, #1
 800289e:	f8cd 8000 	str.w	r8, [sp]
 80028a2:	aa15      	add	r2, sp, #84	; 0x54
 80028a4:	a914      	add	r1, sp, #80	; 0x50
 80028a6:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80028a8:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028ac:	f005 fbbc 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80028b0:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028b4:	2201      	movs	r2, #1
 80028b6:	2110      	movs	r1, #16
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028bc:	f004 fc54 	bl	8007168 <HAL_GPIO_WritePin>
    return((HiByte<<8) | LoByte);
 80028c0:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028c4:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <ICM20602_IMU_calibration2+0x37c>)
 80028c6:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <ICM20602_IMU_calibration2+0x368>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	fa0f f989 	sxth.w	r9, r9
 80028d0:	ee07 9a90 	vmov	s15, r9
 80028d4:	ee27 7a08 	vmul.f32	s14, s14, s16
 80028d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028dc:	2110      	movs	r1, #16
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028de:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028e6:	edc2 7a00 	vstr	s15, [r2]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f004 fc3c 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028f0:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80028f2:	20be      	movs	r0, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028f4:	460a      	mov	r2, r1
 80028f6:	f8cd 8000 	str.w	r8, [sp]
 80028fa:	2301      	movs	r3, #1
 80028fc:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80028fe:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002902:	4620      	mov	r0, r4
 8002904:	f005 fb90 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002908:	a915      	add	r1, sp, #84	; 0x54
 800290a:	2301      	movs	r3, #1
 800290c:	460a      	mov	r2, r1
 800290e:	f8cd 8000 	str.w	r8, [sp]
 8002912:	a914      	add	r1, sp, #80	; 0x50
 8002914:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002916:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800291a:	f005 fb85 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800291e:	2201      	movs	r2, #1
 8002920:	2110      	movs	r1, #16
 8002922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002926:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800292a:	f004 fc1d 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2110      	movs	r1, #16
 8002932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002936:	f004 fc17 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800293a:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 800293c:	20bd      	movs	r0, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800293e:	460a      	mov	r2, r1
 8002940:	f8cd 8000 	str.w	r8, [sp]
 8002944:	2301      	movs	r3, #1
 8002946:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002948:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800294c:	4620      	mov	r0, r4
 800294e:	f005 fb6b 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002952:	a915      	add	r1, sp, #84	; 0x54
 8002954:	2301      	movs	r3, #1
 8002956:	460a      	mov	r2, r1
 8002958:	f8cd 8000 	str.w	r8, [sp]
 800295c:	a914      	add	r1, sp, #80	; 0x50
 800295e:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002960:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002964:	f005 fb60 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002968:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800296c:	2201      	movs	r2, #1
 800296e:	2110      	movs	r1, #16
 8002970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002974:	f004 fbf8 	bl	8007168 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 8002978:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <ICM20602_IMU_calibration2+0x37c>)
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <ICM20602_IMU_calibration2+0x368>)
 8002980:	ed93 7a00 	vldr	s14, [r3]
 8002984:	fa0f f989 	sxth.w	r9, r9
 8002988:	ee07 9a90 	vmov	s15, r9
 800298c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002994:	2110      	movs	r1, #16
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800299a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800299e:	edc2 7a01 	vstr	s15, [r2, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	f004 fbe0 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029a8:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80029aa:	20c0      	movs	r0, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029ac:	460a      	mov	r2, r1
 80029ae:	f8cd 8000 	str.w	r8, [sp]
 80029b2:	2301      	movs	r3, #1
 80029b4:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80029b6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029ba:	4620      	mov	r0, r4
 80029bc:	f005 fb34 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029c0:	a915      	add	r1, sp, #84	; 0x54
 80029c2:	2301      	movs	r3, #1
 80029c4:	460a      	mov	r2, r1
 80029c6:	f8cd 8000 	str.w	r8, [sp]
 80029ca:	a914      	add	r1, sp, #80	; 0x50
 80029cc:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80029ce:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029d2:	f005 fb29 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029d6:	2201      	movs	r2, #1
 80029d8:	2110      	movs	r1, #16
 80029da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80029de:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029e2:	f004 fbc1 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2110      	movs	r1, #16
 80029ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ee:	f004 fbbb 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029f2:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80029f4:	20bf      	movs	r0, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029f6:	460a      	mov	r2, r1
 80029f8:	f8cd 8000 	str.w	r8, [sp]
 80029fc:	2301      	movs	r3, #1
 80029fe:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a00:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f005 fb0f 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a0a:	a915      	add	r1, sp, #84	; 0x54
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	460a      	mov	r2, r1
 8002a10:	f8cd 8000 	str.w	r8, [sp]
 8002a14:	e016      	b.n	8002a44 <ICM20602_IMU_calibration2+0x384>
 8002a16:	bf00      	nop
 8002a18:	eb1c432d 	.word	0xeb1c432d
 8002a1c:	3f1a36e2 	.word	0x3f1a36e2
 8002a20:	0800ca28 	.word	0x0800ca28
 8002a24:	411ce80a 	.word	0x411ce80a
 8002a28:	20000e8c 	.word	0x20000e8c
 8002a2c:	20000efc 	.word	0x20000efc
 8002a30:	0800ca3c 	.word	0x0800ca3c
 8002a34:	20000fc0 	.word	0x20000fc0
 8002a38:	3ff00000 	.word	0x3ff00000
 8002a3c:	20000d5c 	.word	0x20000d5c
 8002a40:	20000d90 	.word	0x20000d90
 8002a44:	a914      	add	r1, sp, #80	; 0x50
 8002a46:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a48:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a4c:	f005 faec 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002a50:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a54:	2201      	movs	r2, #1
 8002a56:	2110      	movs	r1, #16
 8002a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5c:	f004 fb84 	bl	8007168 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 8002a60:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002a64:	4bc4      	ldr	r3, [pc, #784]	; (8002d78 <ICM20602_IMU_calibration2+0x6b8>)
 8002a66:	4ac5      	ldr	r2, [pc, #788]	; (8002d7c <ICM20602_IMU_calibration2+0x6bc>)
 8002a68:	ed93 7a00 	vldr	s14, [r3]
 8002a6c:	fa0f f989 	sxth.w	r9, r9
 8002a70:	ee07 9a90 	vmov	s15, r9
 8002a74:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a7c:	2110      	movs	r1, #16
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002a86:	edc2 7a02 	vstr	s15, [r2, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f004 fb6c 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a90:	20c4      	movs	r0, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a92:	f8cd 8000 	str.w	r8, [sp]
 8002a96:	2301      	movs	r3, #1
 8002a98:	aa15      	add	r2, sp, #84	; 0x54
 8002a9a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a9c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f005 fac1 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f8cd 8000 	str.w	r8, [sp]
 8002aac:	aa15      	add	r2, sp, #84	; 0x54
 8002aae:	a914      	add	r1, sp, #80	; 0x50
 8002ab0:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002ab2:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ab6:	f005 fab7 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002aba:	2201      	movs	r2, #1
 8002abc:	2110      	movs	r1, #16
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002ac2:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002ac6:	f004 fb4f 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2110      	movs	r1, #16
 8002ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad2:	f004 fb49 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002ad6:	20c3      	movs	r0, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ad8:	f8cd 8000 	str.w	r8, [sp]
 8002adc:	2301      	movs	r3, #1
 8002ade:	aa15      	add	r2, sp, #84	; 0x54
 8002ae0:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002ae2:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f005 fa9e 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002aec:	2301      	movs	r3, #1
 8002aee:	f8cd 8000 	str.w	r8, [sp]
 8002af2:	aa15      	add	r2, sp, #84	; 0x54
 8002af4:	a914      	add	r1, sp, #80	; 0x50
 8002af6:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002af8:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002afc:	f005 fa94 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002b00:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002b04:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002b10:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b14:	f004 fb28 	bl	8007168 <HAL_GPIO_WritePin>
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002b18:	ee07 9a90 	vmov	s15, r9
 8002b1c:	ed9b 7a00 	vldr	s14, [fp]
 8002b20:	4b97      	ldr	r3, [pc, #604]	; (8002d80 <ICM20602_IMU_calibration2+0x6c0>)
 8002b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b26:	2200      	movs	r2, #0
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002b28:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b2c:	2110      	movs	r1, #16
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b36:	f004 fb17 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b3a:	20c6      	movs	r0, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b3c:	f8cd 8000 	str.w	r8, [sp]
 8002b40:	2301      	movs	r3, #1
 8002b42:	aa15      	add	r2, sp, #84	; 0x54
 8002b44:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b46:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f005 fa6c 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b50:	2301      	movs	r3, #1
 8002b52:	f8cd 8000 	str.w	r8, [sp]
 8002b56:	aa15      	add	r2, sp, #84	; 0x54
 8002b58:	a914      	add	r1, sp, #80	; 0x50
 8002b5a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b5c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b60:	f005 fa62 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b64:	2201      	movs	r2, #1
 8002b66:	2110      	movs	r1, #16
 8002b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002b6c:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b70:	f004 fafa 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2110      	movs	r1, #16
 8002b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7c:	f004 faf4 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b80:	20c5      	movs	r0, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b82:	f8cd 8000 	str.w	r8, [sp]
 8002b86:	2301      	movs	r3, #1
 8002b88:	aa15      	add	r2, sp, #84	; 0x54
 8002b8a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b8c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b90:	4620      	mov	r0, r4
 8002b92:	f005 fa49 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b96:	2301      	movs	r3, #1
 8002b98:	f8cd 8000 	str.w	r8, [sp]
 8002b9c:	aa15      	add	r2, sp, #84	; 0x54
 8002b9e:	a914      	add	r1, sp, #80	; 0x50
 8002ba0:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002ba2:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ba6:	f005 fa3f 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002baa:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002bae:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002bba:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002bbe:	f004 fad3 	bl	8007168 <HAL_GPIO_WritePin>
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002bc2:	ee07 9a90 	vmov	s15, r9
 8002bc6:	ed9b 7a00 	vldr	s14, [fp]
 8002bca:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <ICM20602_IMU_calibration2+0x6c0>)
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002bd0:	2200      	movs	r2, #0
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002bd6:	2110      	movs	r1, #16
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002bd8:	edc3 7a01 	vstr	s15, [r3, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be0:	f004 fac2 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002be4:	20c8      	movs	r0, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002be6:	f8cd 8000 	str.w	r8, [sp]
 8002bea:	2301      	movs	r3, #1
 8002bec:	aa15      	add	r2, sp, #84	; 0x54
 8002bee:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002bf0:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f005 fa17 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f8cd 8000 	str.w	r8, [sp]
 8002c00:	aa15      	add	r2, sp, #84	; 0x54
 8002c02:	a914      	add	r1, sp, #80	; 0x50
 8002c04:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002c06:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c0a:	f005 fa0d 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2110      	movs	r1, #16
 8002c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002c16:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002c1a:	f004 faa5 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2110      	movs	r1, #16
 8002c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c26:	f004 fa9f 	bl	8007168 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002c2a:	20c7      	movs	r0, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c2c:	f8cd 8000 	str.w	r8, [sp]
 8002c30:	2301      	movs	r3, #1
 8002c32:	aa15      	add	r2, sp, #84	; 0x54
 8002c34:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002c36:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f005 f9f4 	bl	8008028 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c40:	2301      	movs	r3, #1
 8002c42:	f8cd 8000 	str.w	r8, [sp]
 8002c46:	aa15      	add	r2, sp, #84	; 0x54
 8002c48:	a914      	add	r1, sp, #80	; 0x50
 8002c4a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002c4c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c50:	f005 f9ea 	bl	8008028 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002c54:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002c58:	ea49 2908 	orr.w	r9, r9, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2110      	movs	r1, #16
 8002c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c64:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002c68:	f004 fa7e 	bl	8007168 <HAL_GPIO_WritePin>
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c6c:	ee07 9a90 	vmov	s15, r9
 8002c70:	ed9b 7a00 	vldr	s14, [fp]
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <ICM20602_IMU_calibration2+0x6c0>)
 8002c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    	for(j = 0; j < 3; j++){
 8002c7a:	3650      	adds	r6, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
    	for(j = 0; j < 3; j++){
 8002c80:	3550      	adds	r5, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c82:	edc3 7a02 	vstr	s15, [r3, #8]
    		acc_sum[j]  += acc[j];
 8002c86:	9b04      	ldr	r3, [sp, #16]
 8002c88:	f853 0b04 	ldr.w	r0, [r3], #4
 8002c8c:	9304      	str	r3, [sp, #16]
 8002c8e:	9b02      	ldr	r3, [sp, #8]
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c98:	f7fd fc7e 	bl	8000598 <__aeabi_f2d>
 8002c9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002ca0:	f7fd fb1c 	bl	80002dc <__adddf3>
 8002ca4:	9b02      	ldr	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002ca6:	9a05      	ldr	r2, [sp, #20]
    		acc_sum[j]  += acc[j];
 8002ca8:	4680      	mov	r8, r0
 8002caa:	4689      	mov	r9, r1
 8002cac:	e8e3 8902 	strd	r8, r9, [r3], #8
    		gyro_sum[j] += gyro[j];
 8002cb0:	f852 0b04 	ldr.w	r0, [r2], #4
 8002cb4:	9205      	str	r2, [sp, #20]
 8002cb6:	9a03      	ldr	r2, [sp, #12]
    		acc_sum[j]  += acc[j];
 8002cb8:	9302      	str	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002cba:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002cbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002cc2:	f7fd fc69 	bl	8000598 <__aeabi_f2d>
 8002cc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002cca:	f7fd fb07 	bl	80002dc <__adddf3>
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cce:	464b      	mov	r3, r9
    		gyro_sum[j] += gyro[j];
 8002cd0:	4689      	mov	r9, r1
 8002cd2:	9903      	ldr	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cd4:	4642      	mov	r2, r8
    		gyro_sum[j] += gyro[j];
 8002cd6:	4680      	mov	r8, r0
 8002cd8:	e8e1 8902 	strd	r8, r9, [r1], #8
 8002cdc:	9103      	str	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cde:	ec51 0b19 	vmov	r0, r1, d9
 8002ce2:	f7fd fcb1 	bl	8000648 <__aeabi_dmul>
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002ce6:	4642      	mov	r2, r8
 8002ce8:	464b      	mov	r3, r9
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cea:	4680      	mov	r8, r0
 8002cec:	4689      	mov	r9, r1
 8002cee:	e946 8914 	strd	r8, r9, [r6, #-80]	; 0x50
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002cf2:	ec51 0b19 	vmov	r0, r1, d9
 8002cf6:	f7fd fca7 	bl	8000648 <__aeabi_dmul>
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cfa:	e956 2304 	ldrd	r2, r3, [r6, #-16]
 8002cfe:	e946 2302 	strd	r2, r3, [r6, #-8]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d02:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8002d06:	e945 2302 	strd	r2, r3, [r5, #-8]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d0a:	e956 2306 	ldrd	r2, r3, [r6, #-24]
 8002d0e:	e946 2304 	strd	r2, r3, [r6, #-16]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d12:	e955 2306 	ldrd	r2, r3, [r5, #-24]
 8002d16:	e945 2304 	strd	r2, r3, [r5, #-16]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d1a:	e956 2308 	ldrd	r2, r3, [r6, #-32]
 8002d1e:	e946 2306 	strd	r2, r3, [r6, #-24]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d22:	e955 2308 	ldrd	r2, r3, [r5, #-32]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002d26:	e945 0114 	strd	r0, r1, [r5, #-80]	; 0x50
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d2a:	e945 2306 	strd	r2, r3, [r5, #-24]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d2e:	e956 230a 	ldrd	r2, r3, [r6, #-40]	; 0x28
 8002d32:	e946 2308 	strd	r2, r3, [r6, #-32]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d36:	e955 230a 	ldrd	r2, r3, [r5, #-40]	; 0x28
 8002d3a:	e945 2308 	strd	r2, r3, [r5, #-32]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d3e:	e956 230c 	ldrd	r2, r3, [r6, #-48]	; 0x30
 8002d42:	e946 230a 	strd	r2, r3, [r6, #-40]	; 0x28
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d46:	e955 230c 	ldrd	r2, r3, [r5, #-48]	; 0x30
 8002d4a:	e945 230a 	strd	r2, r3, [r5, #-40]	; 0x28
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d4e:	e956 230e 	ldrd	r2, r3, [r6, #-56]	; 0x38
 8002d52:	e946 230c 	strd	r2, r3, [r6, #-48]	; 0x30
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d56:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 8002d5a:	e945 230c 	strd	r2, r3, [r5, #-48]	; 0x30
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d5e:	e956 2310 	ldrd	r2, r3, [r6, #-64]	; 0x40
 8002d62:	e946 230e 	strd	r2, r3, [r6, #-56]	; 0x38
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d66:	e955 2310 	ldrd	r2, r3, [r5, #-64]	; 0x40
 8002d6a:	e945 230e 	strd	r2, r3, [r5, #-56]	; 0x38
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d6e:	e956 2312 	ldrd	r2, r3, [r6, #-72]	; 0x48
 8002d72:	e946 2310 	strd	r2, r3, [r6, #-64]	; 0x40
 8002d76:	e005      	b.n	8002d84 <ICM20602_IMU_calibration2+0x6c4>
 8002d78:	20000d5c 	.word	0x20000d5c
 8002d7c:	20000e8c 	.word	0x20000e8c
 8002d80:	20000efc 	.word	0x20000efc
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d84:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 8002d88:	e945 2310 	strd	r2, r3, [r5, #-64]	; 0x40
    	for(j = 0; j < 3; j++){
 8002d8c:	9b02      	ldr	r3, [sp, #8]
 8002d8e:	aa1c      	add	r2, sp, #112	; 0x70
 8002d90:	4293      	cmp	r3, r2
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d92:	e946 8912 	strd	r8, r9, [r6, #-72]	; 0x48
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d96:	e945 0112 	strd	r0, r1, [r5, #-72]	; 0x48
    	for(j = 0; j < 3; j++){
 8002d9a:	f47f ad49 	bne.w	8002830 <ICM20602_IMU_calibration2+0x170>
    	cal_len ++;
 8002d9e:	ec55 4b1a 	vmov	r4, r5, d10
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <ICM20602_IMU_calibration2+0x7e8>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	4629      	mov	r1, r5
 8002da8:	ee1a 0a10 	vmov	r0, s20
 8002dac:	f7fd fa96 	bl	80002dc <__adddf3>
    	if(cal_len>5000){break;}
 8002db0:	a33b      	add	r3, pc, #236	; (adr r3, 8002ea0 <ICM20602_IMU_calibration2+0x7e0>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
    	cal_len ++;
 8002db6:	4606      	mov	r6, r0
 8002db8:	460f      	mov	r7, r1
    	if(cal_len>5000){break;}
 8002dba:	ee1a 0a10 	vmov	r0, s20
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	f7fd fed2 	bl	8000b68 <__aeabi_dcmpgt>
    	cal_len ++;
 8002dc4:	4634      	mov	r4, r6
 8002dc6:	463d      	mov	r5, r7
    	if(cal_len>5000){break;}
 8002dc8:	b988      	cbnz	r0, 8002dee <ICM20602_IMU_calibration2+0x72e>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002dca:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8002dce:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
    	cal_len ++;
 8002dd2:	ec47 6b1a 	vmov	d10, r6, r7
 8002dd6:	e49f      	b.n	8002718 <ICM20602_IMU_calibration2+0x58>
		|| cal_len < 500.0
 8002dd8:	4b34      	ldr	r3, [pc, #208]	; (8002eac <ICM20602_IMU_calibration2+0x7ec>)
 8002dda:	ec51 0b1a 	vmov	r0, r1, d10
 8002dde:	2200      	movs	r2, #0
 8002de0:	f7fd fea4 	bl	8000b2c <__aeabi_dcmplt>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	f47f ad04 	bne.w	80027f2 <ICM20602_IMU_calibration2+0x132>
 8002dea:	ec55 4b1a 	vmov	r4, r5, d10
    if(cal_len==500){NVIC_SystemReset();}
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <ICM20602_IMU_calibration2+0x7ec>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	4620      	mov	r0, r4
 8002df4:	4629      	mov	r1, r5
 8002df6:	f7fd fe8f 	bl	8000b18 <__aeabi_dcmpeq>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d143      	bne.n	8002e86 <ICM20602_IMU_calibration2+0x7c6>
 8002dfe:	4622      	mov	r2, r4
 8002e00:	462b      	mov	r3, r5
 8002e02:	4929      	ldr	r1, [pc, #164]	; (8002ea8 <ICM20602_IMU_calibration2+0x7e8>)
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e04:	4f2a      	ldr	r7, [pc, #168]	; (8002eb0 <ICM20602_IMU_calibration2+0x7f0>)
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e06:	4e2b      	ldr	r6, [pc, #172]	; (8002eb4 <ICM20602_IMU_calibration2+0x7f4>)
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fd47 	bl	800089c <__aeabi_ddiv>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e0e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002e12:	4604      	mov	r4, r0
 8002e14:	460d      	mov	r5, r1
 8002e16:	f7fd fc17 	bl	8000648 <__aeabi_dmul>
 8002e1a:	f7fd ff0d 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e1e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e22:	6038      	str	r0, [r7, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e24:	4629      	mov	r1, r5
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7fd fc0e 	bl	8000648 <__aeabi_dmul>
 8002e2c:	f7fd ff04 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e30:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e34:	6030      	str	r0, [r6, #0]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e36:	4629      	mov	r1, r5
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7fd fc05 	bl	8000648 <__aeabi_dmul>
 8002e3e:	f7fd fefb 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e42:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e46:	6078      	str	r0, [r7, #4]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7fd fbfc 	bl	8000648 <__aeabi_dmul>
 8002e50:	f7fd fef2 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e54:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e58:	6070      	str	r0, [r6, #4]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7fd fbf3 	bl	8000648 <__aeabi_dmul>
 8002e62:	f7fd fee9 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e66:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e6a:	60b8      	str	r0, [r7, #8]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7fd fbea 	bl	8000648 <__aeabi_dmul>
 8002e74:	f7fd fee0 	bl	8000c38 <__aeabi_d2f>
 8002e78:	60b0      	str	r0, [r6, #8]
}
 8002e7a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002e7e:	ecbd 8b06 	vpop	{d8-d10}
 8002e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e86:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e8a:	490b      	ldr	r1, [pc, #44]	; (8002eb8 <ICM20602_IMU_calibration2+0x7f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <ICM20602_IMU_calibration2+0x7fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e8e:	68ca      	ldr	r2, [r1, #12]
 8002e90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60cb      	str	r3, [r1, #12]
 8002e98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002e9e:	e7fd      	b.n	8002e9c <ICM20602_IMU_calibration2+0x7dc>
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	40b38700 	.word	0x40b38700
 8002ea8:	3ff00000 	.word	0x3ff00000
 8002eac:	407f4000 	.word	0x407f4000
 8002eb0:	20000ea4 	.word	0x20000ea4
 8002eb4:	20000f14 	.word	0x20000f14
 8002eb8:	e000ed00 	.word	0xe000ed00
 8002ebc:	05fa0004 	.word	0x05fa0004

08002ec0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void __io_putchar(uint8_t ch) {
 8002ec0:	b500      	push	{lr}
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002ec2:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	4684      	mov	ip, r0
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f10d 0107 	add.w	r1, sp, #7
 8002ece:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <__io_putchar+0x20>)
void __io_putchar(uint8_t ch) {
 8002ed0:	f88d c007 	strb.w	ip, [sp, #7]
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002ed4:	f006 fd68 	bl	80099a8 <HAL_UART_Transmit>
}
 8002ed8:	b003      	add	sp, #12
 8002eda:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ede:	bf00      	nop
 8002ee0:	20001240 	.word	0x20001240

08002ee4 <HAL_GetTick>:
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2) ;
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
 {
   return uwTick;
 8002ee4:	4b01      	ldr	r3, [pc, #4]	; (8002eec <HAL_GetTick+0x8>)
 8002ee6:	6818      	ldr	r0, [r3, #0]
 }
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	200013f0 	.word	0x200013f0

08002ef0 <maintask_run>:


}


void maintask_run(){
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef4:	ed2d 8b04 	vpush	{d8-d9}
	//theta_target=0.0;
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002ef8:	4ad5      	ldr	r2, [pc, #852]	; (8003250 <maintask_run+0x360>)
 8002efa:	4bd6      	ldr	r3, [pc, #856]	; (8003254 <maintask_run+0x364>)
 8002efc:	6810      	ldr	r0, [r2, #0]
 8002efe:	edd3 8a00 	vldr	s17, [r3]
void maintask_run(){
 8002f02:	b083      	sub	sp, #12
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002f04:	f7fd fb48 	bl	8000598 <__aeabi_f2d>
 8002f08:	a3c9      	add	r3, pc, #804	; (adr r3, 8003230 <maintask_run+0x340>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f7fd fb9b 	bl	8000648 <__aeabi_dmul>
 8002f12:	f7fd fe91 	bl	8000c38 <__aeabi_d2f>
 8002f16:	4603      	mov	r3, r0
long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

float normalizeAngle(float angle_rad) {
    while (angle_rad > M_PI) {
 8002f18:	ee18 0a90 	vmov	r0, s17
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002f1c:	ee08 3a10 	vmov	s16, r3
    while (angle_rad > M_PI) {
 8002f20:	f7fd fb3a 	bl	8000598 <__aeabi_f2d>
 8002f24:	a3c4      	add	r3, pc, #784	; (adr r3, 8003238 <maintask_run+0x348>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	4680      	mov	r8, r0
 8002f2c:	4689      	mov	r9, r1
 8002f2e:	f7fd fe1b 	bl	8000b68 <__aeabi_dcmpgt>
 8002f32:	b1c8      	cbz	r0, 8002f68 <maintask_run+0x78>
        angle_rad -= 2.0f * M_PI;
 8002f34:	a7c2      	add	r7, pc, #776	; (adr r7, 8003240 <maintask_run+0x350>)
 8002f36:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8002f3a:	a5bf      	add	r5, pc, #764	; (adr r5, 8003238 <maintask_run+0x348>)
 8002f3c:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8002f40:	4632      	mov	r2, r6
 8002f42:	463b      	mov	r3, r7
 8002f44:	4640      	mov	r0, r8
 8002f46:	4649      	mov	r1, r9
 8002f48:	f7fd f9c6 	bl	80002d8 <__aeabi_dsub>
 8002f4c:	f7fd fe74 	bl	8000c38 <__aeabi_d2f>
 8002f50:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8002f54:	f7fd fb20 	bl	8000598 <__aeabi_f2d>
 8002f58:	4622      	mov	r2, r4
 8002f5a:	462b      	mov	r3, r5
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	4689      	mov	r9, r1
 8002f60:	f7fd fe02 	bl	8000b68 <__aeabi_dcmpgt>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d1eb      	bne.n	8002f40 <maintask_run+0x50>
    }
    while (angle_rad < -M_PI) {
 8002f68:	a3b7      	add	r3, pc, #732	; (adr r3, 8003248 <maintask_run+0x358>)
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	4640      	mov	r0, r8
 8002f70:	4649      	mov	r1, r9
 8002f72:	f7fd fddb 	bl	8000b2c <__aeabi_dcmplt>
 8002f76:	b1c8      	cbz	r0, 8002fac <maintask_run+0xbc>
        angle_rad += 2.0f * M_PI;
 8002f78:	a7b1      	add	r7, pc, #708	; (adr r7, 8003240 <maintask_run+0x350>)
 8002f7a:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8002f7e:	a5b2      	add	r5, pc, #712	; (adr r5, 8003248 <maintask_run+0x358>)
 8002f80:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8002f84:	4632      	mov	r2, r6
 8002f86:	463b      	mov	r3, r7
 8002f88:	4640      	mov	r0, r8
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	f7fd f9a6 	bl	80002dc <__adddf3>
 8002f90:	f7fd fe52 	bl	8000c38 <__aeabi_d2f>
 8002f94:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8002f98:	f7fd fafe 	bl	8000598 <__aeabi_f2d>
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	4680      	mov	r8, r0
 8002fa2:	4689      	mov	r9, r1
 8002fa4:	f7fd fdc2 	bl	8000b2c <__aeabi_dcmplt>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d1eb      	bne.n	8002f84 <maintask_run+0x94>
    while (angle_rad > M_PI) {
 8002fac:	ee18 0a10 	vmov	r0, s16
 8002fb0:	f7fd faf2 	bl	8000598 <__aeabi_f2d>
 8002fb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8003238 <maintask_run+0x348>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	4682      	mov	sl, r0
 8002fbc:	468b      	mov	fp, r1
 8002fbe:	f7fd fdd3 	bl	8000b68 <__aeabi_dcmpgt>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	f000 81fe 	beq.w	80033c4 <maintask_run+0x4d4>
        angle_rad -= 2.0f * M_PI;
 8002fc8:	a79d      	add	r7, pc, #628	; (adr r7, 8003240 <maintask_run+0x350>)
 8002fca:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8002fce:	4654      	mov	r4, sl
 8002fd0:	465d      	mov	r5, fp
        angle_rad -= 2.0f * M_PI;
 8002fd2:	4632      	mov	r2, r6
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	4629      	mov	r1, r5
 8002fda:	f7fd f97d 	bl	80002d8 <__aeabi_dsub>
 8002fde:	f7fd fe2b 	bl	8000c38 <__aeabi_d2f>
 8002fe2:	ee09 0a10 	vmov	s18, r0
    while (angle_rad > M_PI) {
 8002fe6:	f7fd fad7 	bl	8000598 <__aeabi_f2d>
 8002fea:	a393      	add	r3, pc, #588	; (adr r3, 8003238 <maintask_run+0x348>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	460d      	mov	r5, r1
 8002ff4:	f7fd fdb8 	bl	8000b68 <__aeabi_dcmpgt>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d1ea      	bne.n	8002fd2 <maintask_run+0xe2>
    while (angle_rad < -M_PI) {
 8002ffc:	a392      	add	r3, pc, #584	; (adr r3, 8003248 <maintask_run+0x358>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f7fd fd91 	bl	8000b2c <__aeabi_dcmplt>
 800300a:	b1b8      	cbz	r0, 800303c <maintask_run+0x14c>
        angle_rad += 2.0f * M_PI;
 800300c:	a78c      	add	r7, pc, #560	; (adr r7, 8003240 <maintask_run+0x350>)
 800300e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003012:	4632      	mov	r2, r6
 8003014:	463b      	mov	r3, r7
 8003016:	4620      	mov	r0, r4
 8003018:	4629      	mov	r1, r5
 800301a:	f7fd f95f 	bl	80002dc <__adddf3>
 800301e:	f7fd fe0b 	bl	8000c38 <__aeabi_d2f>
 8003022:	ee09 0a10 	vmov	s18, r0
    while (angle_rad < -M_PI) {
 8003026:	f7fd fab7 	bl	8000598 <__aeabi_f2d>
 800302a:	a387      	add	r3, pc, #540	; (adr r3, 8003248 <maintask_run+0x358>)
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	4604      	mov	r4, r0
 8003032:	460d      	mov	r5, r1
 8003034:	f7fd fd7a 	bl	8000b2c <__aeabi_dcmplt>
 8003038:	2800      	cmp	r0, #0
 800303a:	d1ea      	bne.n	8003012 <maintask_run+0x122>
}

float getAngleDiff(float angle_rad1, float angle_rad2){
    angle_rad1 = normalizeAngle(angle_rad1);
    angle_rad2 = normalizeAngle(angle_rad2);
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 800303c:	ee78 7ac9 	vsub.f32	s15, s17, s18
 8003040:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003044:	ee17 3a10 	vmov	r3, s14
 8003048:	2b00      	cmp	r3, #0
 800304a:	bfb8      	it	lt
 800304c:	425b      	neglt	r3, r3
 800304e:	2b03      	cmp	r3, #3
 8003050:	dd14      	ble.n	800307c <maintask_run+0x18c>
    	if(angle_rad1 > angle_rad2){
 8003052:	eef4 8ac9 	vcmpe.f32	s17, s18
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 800305a:	a379      	add	r3, pc, #484	; (adr r3, 8003240 <maintask_run+0x350>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	4640      	mov	r0, r8
 8003062:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 8003064:	f300 8175 	bgt.w	8003352 <maintask_run+0x462>
    	}else{
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8003068:	f7fd f938 	bl	80002dc <__adddf3>
 800306c:	4622      	mov	r2, r4
 800306e:	462b      	mov	r3, r5
 8003070:	f7fd f932 	bl	80002d8 <__aeabi_dsub>
 8003074:	f7fd fde0 	bl	8000c38 <__aeabi_d2f>
 8003078:	ee07 0a90 	vmov	s15, r0
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 800307c:	ee17 0a90 	vmov	r0, s15
 8003080:	f7fd fa8a 	bl	8000598 <__aeabi_f2d>
 8003084:	2200      	movs	r2, #0
 8003086:	4b74      	ldr	r3, [pc, #464]	; (8003258 <maintask_run+0x368>)
 8003088:	f7fd fade 	bl	8000648 <__aeabi_dmul>
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 800308c:	4b73      	ldr	r3, [pc, #460]	; (800325c <maintask_run+0x36c>)
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 800308e:	ec41 0b19 	vmov	d9, r0, r1
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	f7fd fa80 	bl	8000598 <__aeabi_f2d>
 8003098:	a365      	add	r3, pc, #404	; (adr r3, 8003230 <maintask_run+0x340>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd fad3 	bl	8000648 <__aeabi_dmul>
 80030a2:	f7fd fdc9 	bl	8000c38 <__aeabi_d2f>
    while (angle_rad > M_PI) {
 80030a6:	a364      	add	r3, pc, #400	; (adr r3, 8003238 <maintask_run+0x348>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 80030ac:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 80030b0:	4659      	mov	r1, fp
 80030b2:	4650      	mov	r0, sl
 80030b4:	f7fd fd58 	bl	8000b68 <__aeabi_dcmpgt>
 80030b8:	b1c8      	cbz	r0, 80030ee <maintask_run+0x1fe>
        angle_rad -= 2.0f * M_PI;
 80030ba:	a761      	add	r7, pc, #388	; (adr r7, 8003240 <maintask_run+0x350>)
 80030bc:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 80030c0:	a55d      	add	r5, pc, #372	; (adr r5, 8003238 <maintask_run+0x348>)
 80030c2:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 80030c6:	4632      	mov	r2, r6
 80030c8:	463b      	mov	r3, r7
 80030ca:	4650      	mov	r0, sl
 80030cc:	4659      	mov	r1, fp
 80030ce:	f7fd f903 	bl	80002d8 <__aeabi_dsub>
 80030d2:	f7fd fdb1 	bl	8000c38 <__aeabi_d2f>
 80030d6:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 80030da:	f7fd fa5d 	bl	8000598 <__aeabi_f2d>
 80030de:	4622      	mov	r2, r4
 80030e0:	462b      	mov	r3, r5
 80030e2:	4682      	mov	sl, r0
 80030e4:	468b      	mov	fp, r1
 80030e6:	f7fd fd3f 	bl	8000b68 <__aeabi_dcmpgt>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d1eb      	bne.n	80030c6 <maintask_run+0x1d6>
    while (angle_rad < -M_PI) {
 80030ee:	a356      	add	r3, pc, #344	; (adr r3, 8003248 <maintask_run+0x358>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	4650      	mov	r0, sl
 80030f6:	4659      	mov	r1, fp
 80030f8:	f7fd fd18 	bl	8000b2c <__aeabi_dcmplt>
 80030fc:	b1c8      	cbz	r0, 8003132 <maintask_run+0x242>
        angle_rad += 2.0f * M_PI;
 80030fe:	a750      	add	r7, pc, #320	; (adr r7, 8003240 <maintask_run+0x350>)
 8003100:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8003104:	a550      	add	r5, pc, #320	; (adr r5, 8003248 <maintask_run+0x358>)
 8003106:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 800310a:	4632      	mov	r2, r6
 800310c:	463b      	mov	r3, r7
 800310e:	4650      	mov	r0, sl
 8003110:	4659      	mov	r1, fp
 8003112:	f7fd f8e3 	bl	80002dc <__adddf3>
 8003116:	f7fd fd8f 	bl	8000c38 <__aeabi_d2f>
 800311a:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 800311e:	f7fd fa3b 	bl	8000598 <__aeabi_f2d>
 8003122:	4622      	mov	r2, r4
 8003124:	462b      	mov	r3, r5
 8003126:	4682      	mov	sl, r0
 8003128:	468b      	mov	fp, r1
 800312a:	f7fd fcff 	bl	8000b2c <__aeabi_dcmplt>
 800312e:	2800      	cmp	r0, #0
 8003130:	d1eb      	bne.n	800310a <maintask_run+0x21a>
    while (angle_rad > M_PI) {
 8003132:	ee18 0a90 	vmov	r0, s17
 8003136:	f7fd fa2f 	bl	8000598 <__aeabi_f2d>
 800313a:	a33f      	add	r3, pc, #252	; (adr r3, 8003238 <maintask_run+0x348>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	4606      	mov	r6, r0
 8003142:	460f      	mov	r7, r1
 8003144:	f7fd fd10 	bl	8000b68 <__aeabi_dcmpgt>
 8003148:	b1d0      	cbz	r0, 8003180 <maintask_run+0x290>
        angle_rad -= 2.0f * M_PI;
 800314a:	a53d      	add	r5, pc, #244	; (adr r5, 8003240 <maintask_run+0x350>)
 800314c:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 8003150:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 8003154:	e9d9 8900 	ldrd	r8, r9, [r9]
        angle_rad -= 2.0f * M_PI;
 8003158:	4622      	mov	r2, r4
 800315a:	462b      	mov	r3, r5
 800315c:	4630      	mov	r0, r6
 800315e:	4639      	mov	r1, r7
 8003160:	f7fd f8ba 	bl	80002d8 <__aeabi_dsub>
 8003164:	f7fd fd68 	bl	8000c38 <__aeabi_d2f>
 8003168:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 800316c:	f7fd fa14 	bl	8000598 <__aeabi_f2d>
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	4606      	mov	r6, r0
 8003176:	460f      	mov	r7, r1
 8003178:	f7fd fcf6 	bl	8000b68 <__aeabi_dcmpgt>
 800317c:	2800      	cmp	r0, #0
 800317e:	d1eb      	bne.n	8003158 <maintask_run+0x268>
    while (angle_rad < -M_PI) {
 8003180:	a331      	add	r3, pc, #196	; (adr r3, 8003248 <maintask_run+0x358>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	4630      	mov	r0, r6
 8003188:	4639      	mov	r1, r7
 800318a:	f7fd fccf 	bl	8000b2c <__aeabi_dcmplt>
 800318e:	b1d0      	cbz	r0, 80031c6 <maintask_run+0x2d6>
        angle_rad += 2.0f * M_PI;
 8003190:	a52b      	add	r5, pc, #172	; (adr r5, 8003240 <maintask_run+0x350>)
 8003192:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 8003196:	f20f 09b0 	addw	r9, pc, #176	; 0xb0
 800319a:	e9d9 8900 	ldrd	r8, r9, [r9]
        angle_rad += 2.0f * M_PI;
 800319e:	4622      	mov	r2, r4
 80031a0:	462b      	mov	r3, r5
 80031a2:	4630      	mov	r0, r6
 80031a4:	4639      	mov	r1, r7
 80031a6:	f7fd f899 	bl	80002dc <__adddf3>
 80031aa:	f7fd fd45 	bl	8000c38 <__aeabi_d2f>
 80031ae:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 80031b2:	f7fd f9f1 	bl	8000598 <__aeabi_f2d>
 80031b6:	4642      	mov	r2, r8
 80031b8:	464b      	mov	r3, r9
 80031ba:	4606      	mov	r6, r0
 80031bc:	460f      	mov	r7, r1
 80031be:	f7fd fcb5 	bl	8000b2c <__aeabi_dcmplt>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d1eb      	bne.n	800319e <maintask_run+0x2ae>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 80031c6:	ee78 7a68 	vsub.f32	s15, s16, s17
 80031ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80031ce:	ee17 3a10 	vmov	r3, s14
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bfb8      	it	lt
 80031d6:	425b      	neglt	r3, r3
 80031d8:	2b03      	cmp	r3, #3
 80031da:	dd14      	ble.n	8003206 <maintask_run+0x316>
    	if(angle_rad1 > angle_rad2){
 80031dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80031e4:	a316      	add	r3, pc, #88	; (adr r3, 8003240 <maintask_run+0x350>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	4650      	mov	r0, sl
 80031ec:	4659      	mov	r1, fp
    	if(angle_rad1 > angle_rad2){
 80031ee:	f300 80ad 	bgt.w	800334c <maintask_run+0x45c>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 80031f2:	f7fd f873 	bl	80002dc <__adddf3>
 80031f6:	4632      	mov	r2, r6
 80031f8:	463b      	mov	r3, r7
 80031fa:	f7fd f86d 	bl	80002d8 <__aeabi_dsub>
 80031fe:	f7fd fd1b 	bl	8000c38 <__aeabi_d2f>
 8003202:	ee07 0a90 	vmov	s15, r0
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 8003206:	ee17 0a90 	vmov	r0, s15
 800320a:	f7fd f9c5 	bl	8000598 <__aeabi_f2d>
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <maintask_run+0x370>)
 8003210:	2200      	movs	r2, #0
 8003212:	f7fd fa19 	bl	8000648 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	ec51 0b19 	vmov	r0, r1, d9
 800321e:	f7fd f85b 	bl	80002d8 <__aeabi_dsub>
 8003222:	f7fd fd09 	bl	8000c38 <__aeabi_d2f>
 8003226:	ee08 0a10 	vmov	s16, r0
 800322a:	e01b      	b.n	8003264 <maintask_run+0x374>
 800322c:	f3af 8000 	nop.w
 8003230:	a2529d39 	.word	0xa2529d39
 8003234:	3f91df46 	.word	0x3f91df46
 8003238:	54442d18 	.word	0x54442d18
 800323c:	400921fb 	.word	0x400921fb
 8003240:	54442d18 	.word	0x54442d18
 8003244:	401921fb 	.word	0x401921fb
 8003248:	54442d18 	.word	0x54442d18
 800324c:	c00921fb 	.word	0xc00921fb
 8003250:	20000fb8 	.word	0x20000fb8
 8003254:	20000f9c 	.word	0x20000f9c
 8003258:	401c0000 	.word	0x401c0000
 800325c:	20000fbc 	.word	0x20000fbc
 8003260:	403e0000 	.word	0x403e0000
	if(omega>6*M_PI){omega=6*M_PI;}
 8003264:	f7fd f998 	bl	8000598 <__aeabi_f2d>
 8003268:	a371      	add	r3, pc, #452	; (adr r3, 8003430 <maintask_run+0x540>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	4604      	mov	r4, r0
 8003270:	460d      	mov	r5, r1
 8003272:	f7fd fc79 	bl	8000b68 <__aeabi_dcmpgt>
 8003276:	2800      	cmp	r0, #0
 8003278:	f000 8092 	beq.w	80033a0 <maintask_run+0x4b0>
 800327c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80033e8 <maintask_run+0x4f8>
 8003280:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <maintask_run+0x4fc>)
 8003282:	eeb0 8a67 	vmov.f32	s16, s15
 8003286:	edc3 7a00 	vstr	s15, [r3]
	omni_move(vel_surge, vel_sway, omega,1.0);
 800328a:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <maintask_run+0x500>)
 800328c:	4a59      	ldr	r2, [pc, #356]	; (80033f4 <maintask_run+0x504>)
 800328e:	ed93 0a00 	vldr	s0, [r3]
 8003292:	edd2 0a00 	vldr	s1, [r2]
			if(ball[0]==1){
 8003296:	4c58      	ldr	r4, [pc, #352]	; (80033f8 <maintask_run+0x508>)
	omni_move(vel_surge, vel_sway, omega,1.0);
 8003298:	eeb0 1a48 	vmov.f32	s2, s16
 800329c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80032a0:	f001 fda2 	bl	8004de8 <omni_move>
	  if(kick_power>0){
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <maintask_run+0x50c>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b2:	f340 8085 	ble.w	80033c0 <maintask_run+0x4d0>
			if(ball[0]==1){
 80032b6:	7825      	ldrb	r5, [r4, #0]
				if(kick_state==0){
 80032b8:	4e51      	ldr	r6, [pc, #324]	; (8003400 <maintask_run+0x510>)
			if(ball[0]==1){
 80032ba:	2d01      	cmp	r5, #1
 80032bc:	d057      	beq.n	800336e <maintask_run+0x47e>
			if(kick_state==1){
 80032be:	6833      	ldr	r3, [r6, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d049      	beq.n	8003358 <maintask_run+0x468>
	  if(chipEN==1){
 80032c4:	4d4f      	ldr	r5, [pc, #316]	; (8003404 <maintask_run+0x514>)
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80032c6:	4f50      	ldr	r7, [pc, #320]	; (8003408 <maintask_run+0x518>)
	  if(chipEN==1){
 80032c8:	7829      	ldrb	r1, [r5, #0]
 80032ca:	2901      	cmp	r1, #1
		  actuator_kicker(2, 0);
 80032cc:	bf18      	it	ne
 80032ce:	2100      	movne	r1, #0
 80032d0:	2002      	movs	r0, #2
 80032d2:	f7fd ff2b 	bl	800112c <actuator_kicker>
	  actuator_kicker(1, 1);
 80032d6:	2101      	movs	r1, #1
 80032d8:	4608      	mov	r0, r1
 80032da:	f7fd ff27 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(250.0);
 80032de:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800340c <maintask_run+0x51c>
 80032e2:	f7fd ff03 	bl	80010ec <actuator_kicker_voltage>
	  actuator_motor5(drible_power,1.0);
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <maintask_run+0x520>)
 80032e8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80032ec:	ed93 0a00 	vldr	s0, [r3]
 80032f0:	f7fd fee0 	bl	80010b4 <actuator_motor5>
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80032f4:	edd7 7a00 	vldr	s15, [r7]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <maintask_run+0x524>)
	  TX_data_UART[0]=254;
 80032fa:	4947      	ldr	r1, [pc, #284]	; (8003418 <maintask_run+0x528>)
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80032fc:	ed93 7a04 	vldr	s14, [r3, #16]
	  TX_data_UART[6]=kick_state;
 8003300:	6832      	ldr	r2, [r6, #0]
 8003302:	718a      	strb	r2, [r1, #6]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  TX_data_UART[5]=chipEN;
 8003308:	7828      	ldrb	r0, [r5, #0]
 800330a:	7148      	strb	r0, [r1, #5]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800330c:	ee17 3a90 	vmov	r3, s15
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003310:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8003314:	4841      	ldr	r0, [pc, #260]	; (800341c <maintask_run+0x52c>)
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003316:	ee17 2a90 	vmov	r2, s15
 800331a:	71ca      	strb	r2, [r1, #7]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 800331c:	f503 72b4 	add.w	r2, r3, #360	; 0x168
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003320:	3368      	adds	r3, #104	; 0x68
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 8003322:	704b      	strb	r3, [r1, #1]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 8003324:	1213      	asrs	r3, r2, #8
	  TX_data_UART[4]=ball[1];
 8003326:	7862      	ldrb	r2, [r4, #1]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 8003328:	708b      	strb	r3, [r1, #2]
	  TX_data_UART[4]=ball[1];
 800332a:	710a      	strb	r2, [r1, #4]
	  TX_data_UART[3]=ball[0];
 800332c:	7823      	ldrb	r3, [r4, #0]
 800332e:	70cb      	strb	r3, [r1, #3]
	  TX_data_UART[0]=254;
 8003330:	22fe      	movs	r2, #254	; 0xfe
 8003332:	700a      	strb	r2, [r1, #0]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8003334:	23ff      	movs	r3, #255	; 0xff
 8003336:	2208      	movs	r2, #8
 8003338:	f006 fb36 	bl	80099a8 <HAL_UART_Transmit>
	  yawAngle_temp=yawAngle;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4a38      	ldr	r2, [pc, #224]	; (8003420 <maintask_run+0x530>)
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	b003      	add	sp, #12
 8003344:	ecbd 8b04 	vpop	{d8-d9}
 8003348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 800334c:	f7fc ffc4 	bl	80002d8 <__aeabi_dsub>
 8003350:	e751      	b.n	80031f6 <maintask_run+0x306>
 8003352:	f7fc ffc1 	bl	80002d8 <__aeabi_dsub>
 8003356:	e689      	b.n	800306c <maintask_run+0x17c>
				kick_time++;
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <maintask_run+0x534>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	3201      	adds	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
				if(kick_time>100){
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	2a64      	cmp	r2, #100	; 0x64
 8003364:	ddae      	ble.n	80032c4 <maintask_run+0x3d4>
					kick_state=0;
 8003366:	2200      	movs	r2, #0
 8003368:	6032      	str	r2, [r6, #0]
					kick_time=0;
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e7aa      	b.n	80032c4 <maintask_run+0x3d4>
				if(kick_state==0){
 800336e:	6833      	ldr	r3, [r6, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1a4      	bne.n	80032be <maintask_run+0x3ce>
				  uint8_t kick_power_param=(float)kick_power*255.0;
 8003374:	ee17 0a90 	vmov	r0, s15
 8003378:	f7fd f90e 	bl	8000598 <__aeabi_f2d>
 800337c:	a316      	add	r3, pc, #88	; (adr r3, 80033d8 <maintask_run+0x4e8>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f7fd f961 	bl	8000648 <__aeabi_dmul>
 8003386:	f7fd fc37 	bl	8000bf8 <__aeabi_d2uiz>
 800338a:	b2c1      	uxtb	r1, r0
				  printf(" kick=%d\r\n",kick_power_param);
 800338c:	4826      	ldr	r0, [pc, #152]	; (8003428 <maintask_run+0x538>)
 800338e:	9101      	str	r1, [sp, #4]
 8003390:	f007 fa78 	bl	800a884 <iprintf>
				  actuator_kicker(3, (uint8_t)kick_power_param);
 8003394:	9901      	ldr	r1, [sp, #4]
 8003396:	2003      	movs	r0, #3
 8003398:	f7fd fec8 	bl	800112c <actuator_kicker>
				kick_state=1;
 800339c:	6035      	str	r5, [r6, #0]
 800339e:	e78e      	b.n	80032be <maintask_run+0x3ce>
	if(omega<-6*M_PI){omega=-6*M_PI;}
 80033a0:	a30f      	add	r3, pc, #60	; (adr r3, 80033e0 <maintask_run+0x4f0>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	4620      	mov	r0, r4
 80033a8:	4629      	mov	r1, r5
 80033aa:	f7fd fbbf 	bl	8000b2c <__aeabi_dcmplt>
 80033ae:	b170      	cbz	r0, 80033ce <maintask_run+0x4de>
 80033b0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800342c <maintask_run+0x53c>
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <maintask_run+0x4fc>)
 80033b6:	eeb0 8a67 	vmov.f32	s16, s15
 80033ba:	edc3 7a00 	vstr	s15, [r3]
 80033be:	e764      	b.n	800328a <maintask_run+0x39a>
 80033c0:	4e0f      	ldr	r6, [pc, #60]	; (8003400 <maintask_run+0x510>)
 80033c2:	e77f      	b.n	80032c4 <maintask_run+0x3d4>
    while (angle_rad > M_PI) {
 80033c4:	eeb0 9a48 	vmov.f32	s18, s16
 80033c8:	4654      	mov	r4, sl
 80033ca:	465d      	mov	r5, fp
 80033cc:	e616      	b.n	8002ffc <maintask_run+0x10c>
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <maintask_run+0x4fc>)
 80033d0:	ed83 8a00 	vstr	s16, [r3]
 80033d4:	e759      	b.n	800328a <maintask_run+0x39a>
 80033d6:	bf00      	nop
 80033d8:	00000000 	.word	0x00000000
 80033dc:	406fe000 	.word	0x406fe000
 80033e0:	7f3321d2 	.word	0x7f3321d2
 80033e4:	c032d97c 	.word	0xc032d97c
 80033e8:	4196cbe4 	.word	0x4196cbe4
 80033ec:	20000f74 	.word	0x20000f74
 80033f0:	20000fa8 	.word	0x20000fa8
 80033f4:	20000fac 	.word	0x20000fac
 80033f8:	20000ec4 	.word	0x20000ec4
 80033fc:	20000f24 	.word	0x20000f24
 8003400:	20000f28 	.word	0x20000f28
 8003404:	20000ed6 	.word	0x20000ed6
 8003408:	20000fb8 	.word	0x20000fb8
 800340c:	437a0000 	.word	0x437a0000
 8003410:	20000ef4 	.word	0x20000ef4
 8003414:	20000ddc 	.word	0x20000ddc
 8003418:	20000e58 	.word	0x20000e58
 800341c:	200012d0 	.word	0x200012d0
 8003420:	20000fbc 	.word	0x20000fbc
 8003424:	20000f2c 	.word	0x20000f2c
 8003428:	0800ca4c 	.word	0x0800ca4c
 800342c:	c196cbe4 	.word	0xc196cbe4
 8003430:	7f3321d2 	.word	0x7f3321d2
 8003434:	4032d97c 	.word	0x4032d97c

08003438 <maintask_emargency>:
void maintask_emargency(){
 8003438:	b500      	push	{lr}
	  actuator_motor1(0.0,0.0);
 800343a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80034f4 <maintask_emargency+0xbc>
void maintask_emargency(){
 800343e:	b085      	sub	sp, #20
	  actuator_motor1(0.0,0.0);
 8003440:	eef0 0a40 	vmov.f32	s1, s0
 8003444:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003448:	f7fd fdc4 	bl	8000fd4 <actuator_motor1>
	  actuator_motor2(0.0,0.0);
 800344c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003450:	eef0 0a40 	vmov.f32	s1, s0
 8003454:	f7fd fdda 	bl	800100c <actuator_motor2>
	  actuator_motor3(0.0,0.0);
 8003458:	ed9d 0a01 	vldr	s0, [sp, #4]
 800345c:	eef0 0a40 	vmov.f32	s1, s0
 8003460:	f7fd fdf0 	bl	8001044 <actuator_motor3>
	  actuator_motor4(0.0,0.0);
 8003464:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003468:	eef0 0a40 	vmov.f32	s1, s0
 800346c:	f7fd fe06 	bl	800107c <actuator_motor4>
	  actuator_motor5(0.0,0.0);
 8003470:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003474:	eef0 0a40 	vmov.f32	s1, s0
 8003478:	f7fd fe1c 	bl	80010b4 <actuator_motor5>
	  TX_data_UART[1]=error_No[0];
 800347c:	481e      	ldr	r0, [pc, #120]	; (80034f8 <maintask_emargency+0xc0>)
	  TX_data_UART[0]=254;
 800347e:	491f      	ldr	r1, [pc, #124]	; (80034fc <maintask_emargency+0xc4>)
	  TX_data_UART[1]=error_No[0];
 8003480:	f890 c000 	ldrb.w	ip, [r0]
 8003484:	f881 c001 	strb.w	ip, [r1, #1]
	  TX_data_UART[0]=254;
 8003488:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
 800348c:	f881 c000 	strb.w	ip, [r1]
	  TX_data_UART[2]=error_No[1];
 8003490:	f890 c001 	ldrb.w	ip, [r0, #1]
 8003494:	f881 c002 	strb.w	ip, [r1, #2]
	  TX_data_UART[3]=error_No[2];
 8003498:	f890 c002 	ldrb.w	ip, [r0, #2]
	  TX_data_UART[4]=error_No[3];
 800349c:	78c0      	ldrb	r0, [r0, #3]
 800349e:	7108      	strb	r0, [r1, #4]
	  TX_data_UART[5]=252;
 80034a0:	20fc      	movs	r0, #252	; 0xfc
 80034a2:	7148      	strb	r0, [r1, #5]
	  TX_data_UART[6]=122;
 80034a4:	f64c 007a 	movw	r0, #51322	; 0xc87a
	  TX_data_UART[3]=error_No[2];
 80034a8:	f881 c003 	strb.w	ip, [r1, #3]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80034ac:	23ff      	movs	r3, #255	; 0xff
 80034ae:	2208      	movs	r2, #8
	  TX_data_UART[6]=122;
 80034b0:	80c8      	strh	r0, [r1, #6]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80034b2:	4813      	ldr	r0, [pc, #76]	; (8003500 <maintask_emargency+0xc8>)
 80034b4:	f006 fa78 	bl	80099a8 <HAL_UART_Transmit>
	  actuator_buzzer(150, 150);
 80034b8:	2196      	movs	r1, #150	; 0x96
 80034ba:	4608      	mov	r0, r1
 80034bc:	f7fd fe76 	bl	80011ac <actuator_buzzer>
	  can1_send(0x000, senddata_error);
 80034c0:	a902      	add	r1, sp, #8
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fe f892 	bl	80015ec <can1_send>
	  can2_send(0x000, senddata_error);
 80034c8:	a902      	add	r1, sp, #8
 80034ca:	2000      	movs	r0, #0
 80034cc:	f7fe f8de 	bl	800168c <can2_send>
	  actuator_kicker(1, 0);
 80034d0:	2100      	movs	r1, #0
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7fd fe2a 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80034d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80034dc:	f7fd fe06 	bl	80010ec <actuator_kicker_voltage>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80034e0:	4808      	ldr	r0, [pc, #32]	; (8003504 <maintask_emargency+0xcc>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034e8:	f003 fe3e 	bl	8007168 <HAL_GPIO_WritePin>
}
 80034ec:	b005      	add	sp, #20
 80034ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f2:	bf00      	nop
 80034f4:	00000000 	.word	0x00000000
 80034f8:	20000ef8 	.word	0x20000ef8
 80034fc:	20000e58 	.word	0x20000e58
 8003500:	200012d0 	.word	0x200012d0
 8003504:	48000400 	.word	0x48000400

08003508 <HAL_GPIO_EXTI_Callback>:
   return uwTick;
 8003508:	4b1c      	ldr	r3, [pc, #112]	; (800357c <HAL_GPIO_EXTI_Callback+0x74>)
 800350a:	681b      	ldr	r3, [r3, #0]
	if(HAL_GetTick()>2000){
 800350c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003510:	d915      	bls.n	800353e <HAL_GPIO_EXTI_Callback+0x36>
{
 8003512:	b570      	push	{r4, r5, r6, lr}
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 8003514:	4e1a      	ldr	r6, [pc, #104]	; (8003580 <HAL_GPIO_EXTI_Callback+0x78>)
 8003516:	2464      	movs	r4, #100	; 0x64
 8003518:	e005      	b.n	8003526 <HAL_GPIO_EXTI_Callback+0x1e>
				delayUs(1);
 800351a:	f001 fc23 	bl	8004d64 <delayUs>
		while(cnt<100){
 800351e:	1e63      	subs	r3, r4, #1
 8003520:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8003524:	d00c      	beq.n	8003540 <HAL_GPIO_EXTI_Callback+0x38>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 8003526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800352a:	4630      	mov	r0, r6
 800352c:	f003 fe16 	bl	800715c <HAL_GPIO_ReadPin>
 8003530:	2801      	cmp	r0, #1
 8003532:	4605      	mov	r5, r0
 8003534:	d0f1      	beq.n	800351a <HAL_GPIO_EXTI_Callback+0x12>
			Emargency=0;
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
}
 800353c:	bd70      	pop	{r4, r5, r6, pc}
 800353e:	4770      	bx	lr
			Emargency=1;
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_GPIO_EXTI_Callback+0x7c>)
			printf("Emargency Stop !!!!!!!!!!!!!");
 8003542:	4811      	ldr	r0, [pc, #68]	; (8003588 <HAL_GPIO_EXTI_Callback+0x80>)
			Emargency=1;
 8003544:	701d      	strb	r5, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 8003546:	2432      	movs	r4, #50	; 0x32
 8003548:	f007 f99c 	bl	800a884 <iprintf>
				maintask_emargency();
 800354c:	f7ff ff74 	bl	8003438 <maintask_emargency>
			for(int i=0;i<50;i++){
 8003550:	3c01      	subs	r4, #1
 8003552:	d1fb      	bne.n	800354c <HAL_GPIO_EXTI_Callback+0x44>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8003554:	480a      	ldr	r0, [pc, #40]	; (8003580 <HAL_GPIO_EXTI_Callback+0x78>)
 8003556:	4622      	mov	r2, r4
 8003558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800355c:	f003 fe04 	bl	8007168 <HAL_GPIO_WritePin>
 8003560:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003564:	4909      	ldr	r1, [pc, #36]	; (800358c <HAL_GPIO_EXTI_Callback+0x84>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <HAL_GPIO_EXTI_Callback+0x88>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003568:	68ca      	ldr	r2, [r1, #12]
 800356a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800356e:	4313      	orrs	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
 8003572:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003576:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003578:	e7fd      	b.n	8003576 <HAL_GPIO_EXTI_Callback+0x6e>
 800357a:	bf00      	nop
 800357c:	200013f0 	.word	0x200013f0
 8003580:	48000400 	.word	0x48000400
 8003584:	20000dd2 	.word	0x20000dd2
 8003588:	0800ca58 	.word	0x0800ca58
 800358c:	e000ed00 	.word	0xe000ed00
 8003590:	05fa0004 	.word	0x05fa0004

08003594 <maintask_state_stop>:
void maintask_state_stop(){
 8003594:	b510      	push	{r4, lr}
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <maintask_state_stop+0x88>)
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003598:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003620 <maintask_state_stop+0x8c>
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
void maintask_state_stop(){
 80035a4:	b082      	sub	sp, #8
	  omni_move(0.0, 0.0, 0.0,0.0);
 80035a6:	eef0 1a40 	vmov.f32	s3, s0
 80035aa:	eeb0 1a40 	vmov.f32	s2, s0
 80035ae:	eef0 0a40 	vmov.f32	s1, s0
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80035b2:	ee17 4a90 	vmov	r4, s15
	  omni_move(0.0, 0.0, 0.0,0.0);
 80035b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80035ba:	f001 fc15 	bl	8004de8 <omni_move>
	  actuator_motor5(0.0,0.0);
 80035be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80035c2:	eef0 0a40 	vmov.f32	s1, s0
 80035c6:	f7fd fd75 	bl	80010b4 <actuator_motor5>
	  TX_data_UART[0]=254;
 80035ca:	4916      	ldr	r1, [pc, #88]	; (8003624 <maintask_state_stop+0x90>)
	  TX_data_UART[3]=error_No[0];
 80035cc:	4a16      	ldr	r2, [pc, #88]	; (8003628 <maintask_state_stop+0x94>)
    uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80035ce:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 80035d2:	121b      	asrs	r3, r3, #8
 80035d4:	708b      	strb	r3, [r1, #2]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <maintask_state_stop+0x98>)
 80035d8:	edd3 7a04 	vldr	s15, [r3, #16]
	  TX_data_UART[3]=error_No[0];
 80035dc:	7813      	ldrb	r3, [r2, #0]
 80035de:	70cb      	strb	r3, [r1, #3]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80035e4:	3468      	adds	r4, #104	; 0x68
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035e6:	ee17 3a90 	vmov	r3, s15
	  TX_data_UART[4]=error_No[1];
 80035ea:	7852      	ldrb	r2, [r2, #1]
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 80035ec:	704c      	strb	r4, [r1, #1]
	  TX_data_UART[0]=254;
 80035ee:	20fe      	movs	r0, #254	; 0xfe
	  TX_data_UART[5]=1;
 80035f0:	2401      	movs	r4, #1
	  TX_data_UART[0]=254;
 80035f2:	7008      	strb	r0, [r1, #0]
	  TX_data_UART[4]=error_No[1];
 80035f4:	710a      	strb	r2, [r1, #4]
	  TX_data_UART[5]=1;
 80035f6:	714c      	strb	r4, [r1, #5]
	  TX_data_UART[6]=1;
 80035f8:	718c      	strb	r4, [r1, #6]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035fa:	71cb      	strb	r3, [r1, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80035fc:	2208      	movs	r2, #8
 80035fe:	23ff      	movs	r3, #255	; 0xff
 8003600:	480b      	ldr	r0, [pc, #44]	; (8003630 <maintask_state_stop+0x9c>)
 8003602:	f006 f9d1 	bl	80099a8 <HAL_UART_Transmit>
	  actuator_kicker(1, 0);
 8003606:	2100      	movs	r1, #0
 8003608:	4620      	mov	r0, r4
 800360a:	f7fd fd8f 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 800360e:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 8003612:	b002      	add	sp, #8
 8003614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  actuator_kicker_voltage(0.0);
 8003618:	f7fd bd68 	b.w	80010ec <actuator_kicker_voltage>
 800361c:	20000fb8 	.word	0x20000fb8
 8003620:	00000000 	.word	0x00000000
 8003624:	20000e58 	.word	0x20000e58
 8003628:	20000ef8 	.word	0x20000ef8
 800362c:	20000ddc 	.word	0x20000ddc
 8003630:	200012d0 	.word	0x200012d0

08003634 <maintask_stop>:
void maintask_stop(){
 8003634:	b510      	push	{r4, lr}
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003636:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80036dc <maintask_stop+0xa8>
void maintask_stop(){
 800363a:	b082      	sub	sp, #8
	  omni_move(0.0, 0.0, 0.0,0.0);
 800363c:	eef0 1a40 	vmov.f32	s3, s0
 8003640:	eeb0 1a40 	vmov.f32	s2, s0
 8003644:	eef0 0a40 	vmov.f32	s1, s0
 8003648:	ed8d 0a01 	vstr	s0, [sp, #4]
 800364c:	f001 fbcc 	bl	8004de8 <omni_move>
	  actuator_motor5(0.0,0.0);
 8003650:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003654:	eef0 0a40 	vmov.f32	s1, s0
 8003658:	f7fd fd2c 	bl	80010b4 <actuator_motor5>
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <maintask_stop+0xac>)
		  omni_move(0.0, 0.0, 0.0,0.0);
 800365e:	ed9d 0a01 	vldr	s0, [sp, #4]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		  omni_move(0.0, 0.0, 0.0,0.0);
 800366a:	eef0 1a40 	vmov.f32	s3, s0
 800366e:	eeb0 1a40 	vmov.f32	s2, s0
 8003672:	eef0 0a40 	vmov.f32	s1, s0
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003676:	ee17 4a90 	vmov	r4, s15
		  omni_move(0.0, 0.0, 0.0,0.0);
 800367a:	f001 fbb5 	bl	8004de8 <omni_move>
		  actuator_motor5(0.0,0.0);
 800367e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003682:	eef0 0a40 	vmov.f32	s1, s0
 8003686:	f7fd fd15 	bl	80010b4 <actuator_motor5>
		  TX_data_UART[0]=254;
 800368a:	4916      	ldr	r1, [pc, #88]	; (80036e4 <maintask_stop+0xb0>)
		  TX_data_UART[3]=error_No[0];
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <maintask_stop+0xb4>)
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 800368e:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8003692:	121b      	asrs	r3, r3, #8
 8003694:	708b      	strb	r3, [r1, #2]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <maintask_stop+0xb8>)
 8003698:	edd3 7a04 	vldr	s15, [r3, #16]
		  TX_data_UART[3]=error_No[0];
 800369c:	7813      	ldrb	r3, [r2, #0]
 800369e:	70cb      	strb	r3, [r1, #3]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80036a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80036a4:	3468      	adds	r4, #104	; 0x68
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80036a6:	ee17 3a90 	vmov	r3, s15
		  TX_data_UART[4]=error_No[1];
 80036aa:	7852      	ldrb	r2, [r2, #1]
		  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 80036ac:	704c      	strb	r4, [r1, #1]
		  TX_data_UART[0]=254;
 80036ae:	20fe      	movs	r0, #254	; 0xfe
		  TX_data_UART[5]=0;
 80036b0:	2400      	movs	r4, #0
		  TX_data_UART[0]=254;
 80036b2:	7008      	strb	r0, [r1, #0]
		  TX_data_UART[4]=error_No[1];
 80036b4:	710a      	strb	r2, [r1, #4]
		  TX_data_UART[5]=0;
 80036b6:	714c      	strb	r4, [r1, #5]
		  TX_data_UART[6]=0;
 80036b8:	718c      	strb	r4, [r1, #6]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80036ba:	71cb      	strb	r3, [r1, #7]
		  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80036bc:	2208      	movs	r2, #8
 80036be:	23ff      	movs	r3, #255	; 0xff
 80036c0:	480b      	ldr	r0, [pc, #44]	; (80036f0 <maintask_stop+0xbc>)
 80036c2:	f006 f971 	bl	80099a8 <HAL_UART_Transmit>
	  actuator_kicker(1, 0);
 80036c6:	4621      	mov	r1, r4
 80036c8:	2001      	movs	r0, #1
 80036ca:	f7fd fd2f 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80036ce:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 80036d2:	b002      	add	sp, #8
 80036d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  actuator_kicker_voltage(0.0);
 80036d8:	f7fd bd08 	b.w	80010ec <actuator_kicker_voltage>
 80036dc:	00000000 	.word	0x00000000
 80036e0:	20000fb8 	.word	0x20000fb8
 80036e4:	20000e58 	.word	0x20000e58
 80036e8:	20000ef8 	.word	0x20000ef8
 80036ec:	20000ddc 	.word	0x20000ddc
 80036f0:	200012d0 	.word	0x200012d0
 80036f4:	00000000 	.word	0x00000000

080036f8 <HAL_TIM_PeriodElapsedCallback>:
{
 80036f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fc:	ed2d 8b04 	vpush	{d8-d9}
 8003700:	b089      	sub	sp, #36	; 0x24
	 ICM20602_read_IMU_data();
 8003702:	f7fe fc7f 	bl	8002004 <ICM20602_read_IMU_data>
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 8003706:	2120      	movs	r1, #32
 8003708:	48c5      	ldr	r0, [pc, #788]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800370a:	f003 fd27 	bl	800715c <HAL_GPIO_ReadPin>
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	4604      	mov	r4, r0
 8003712:	48c3      	ldr	r0, [pc, #780]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003714:	f003 fd22 	bl	800715c <HAL_GPIO_ReadPin>
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 8003718:	f44f 6180 	mov.w	r1, #1024	; 0x400
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 800371c:	4605      	mov	r5, r0
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 800371e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003722:	f003 fd1b 	bl	800715c <HAL_GPIO_ReadPin>
 8003726:	f1c4 040f 	rsb	r4, r4, #15
 800372a:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 800372e:	2104      	movs	r1, #4
 8003730:	4605      	mov	r5, r0
 8003732:	48bc      	ldr	r0, [pc, #752]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003734:	f003 fd12 	bl	800715c <HAL_GPIO_ReadPin>
 8003738:	b2e4      	uxtb	r4, r4
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 800373a:	eba4 04c5 	sub.w	r4, r4, r5, lsl #3
 800373e:	4bba      	ldr	r3, [pc, #744]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003740:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
 8003744:	b2c0      	uxtb	r0, r0
 8003746:	7018      	strb	r0, [r3, #0]
	 switch (sw_mode){
 8003748:	2806      	cmp	r0, #6
 800374a:	f200 85f6 	bhi.w	800433a <HAL_TIM_PeriodElapsedCallback+0xc42>
 800374e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003752:	0067      	.short	0x0067
 8003754:	023d0187 	.word	0x023d0187
 8003758:	02530265 	.word	0x02530265
 800375c:	00070281 	.word	0x00070281
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003760:	4bb2      	ldr	r3, [pc, #712]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x334>)
    }
}

uint8_t decode_SW(uint16_t SW_data){
	int data;
	if(SW_data<100){
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	2b63      	cmp	r3, #99	; 0x63
 8003766:	f240 8326 	bls.w	8003db6 <HAL_TIM_PeriodElapsedCallback+0x6be>
	 			 actuator_motor5(0.0,0.0);
 800376a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 8003a30 <HAL_TIM_PeriodElapsedCallback+0x338>
 800376e:	eeb0 0a60 	vmov.f32	s0, s1
 8003772:	f7fd fc9f 	bl	80010b4 <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	48ae      	ldr	r0, [pc, #696]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800377a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800377e:	f003 fcf3 	bl	8007168 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003782:	2101      	movs	r1, #1
 8003784:	4608      	mov	r0, r1
 8003786:	f7fd fcd1 	bl	800112c <actuator_kicker>
	 			 actuator_kicker(2, 1);
 800378a:	2101      	movs	r1, #1
 800378c:	2002      	movs	r0, #2
 800378e:	f7fd fccd 	bl	800112c <actuator_kicker>
	 			 actuator_kicker_voltage(0.0);
 8003792:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8003a30 <HAL_TIM_PeriodElapsedCallback+0x338>
 8003796:	f7fd fca9 	bl	80010ec <actuator_kicker_voltage>
					kick_state=0;
 800379a:	49a7      	ldr	r1, [pc, #668]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0x340>)
					kick_time=0;
 800379c:	4aa7      	ldr	r2, [pc, #668]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x344>)
					kick_state=0;
 800379e:	2300      	movs	r3, #0
 80037a0:	600b      	str	r3, [r1, #0]
					kick_time=0;
 80037a2:	6013      	str	r3, [r2, #0]
				omni_move(0.0, 0.0, 0.0,0.0);
 80037a4:	eddf 1aa2 	vldr	s3, [pc, #648]	; 8003a30 <HAL_TIM_PeriodElapsedCallback+0x338>
 80037a8:	eeb0 1a61 	vmov.f32	s2, s3
 80037ac:	eef0 0a61 	vmov.f32	s1, s3
 80037b0:	eeb0 0a61 	vmov.f32	s0, s3
 80037b4:	f001 fb18 	bl	8004de8 <omni_move>
	 if(cnt_time_tim>50){
 80037b8:	4ca1      	ldr	r4, [pc, #644]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80037ba:	8823      	ldrh	r3, [r4, #0]
 80037bc:	2b32      	cmp	r3, #50	; 0x32
 80037be:	d912      	bls.n	80037e6 <HAL_TIM_PeriodElapsedCallback+0xee>
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 80037c0:	4ea0      	ldr	r6, [pc, #640]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80037c2:	4da1      	ldr	r5, [pc, #644]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80037c4:	7cf2      	ldrb	r2, [r6, #19]
 80037c6:	782b      	ldrb	r3, [r5, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80037c8:	489a      	ldr	r0, [pc, #616]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x33c>)
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 80037ca:	429a      	cmp	r2, r3
		 Ether_connect=1;
 80037cc:	4b9f      	ldr	r3, [pc, #636]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80037ce:	bf14      	ite	ne
 80037d0:	2201      	movne	r2, #1
		 Ether_connect=0;
 80037d2:	2200      	moveq	r2, #0
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80037d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		 Ether_connect=0;
 80037d8:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80037da:	f003 fcc5 	bl	8007168 <HAL_GPIO_WritePin>
	 Ether_connect_check=data_from_ether[Rxbufsize_from_Ether-3];
 80037de:	7cf2      	ldrb	r2, [r6, #19]
 80037e0:	702a      	strb	r2, [r5, #0]
	 cnt_time_tim=0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	8023      	strh	r3, [r4, #0]
	 if(cnt_time_50Hz>50){
 80037e6:	4d9a      	ldr	r5, [pc, #616]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80037e8:	882a      	ldrh	r2, [r5, #0]
 80037ea:	2a32      	cmp	r2, #50	; 0x32
 80037ec:	d90f      	bls.n	800380e <HAL_TIM_PeriodElapsedCallback+0x116>
       if(sw_mode>0){
 80037ee:	4b8e      	ldr	r3, [pc, #568]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 826c 	bne.w	8003cd0 <HAL_TIM_PeriodElapsedCallback+0x5d8>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80037f8:	4889      	ldr	r0, [pc, #548]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	f003 fcba 	bl	8007174 <HAL_GPIO_TogglePin>
		  cnt_time_50Hz=0;
 8003800:	2300      	movs	r3, #0
		  actuator_power_ONOFF(1);
 8003802:	2001      	movs	r0, #1
		  cnt_time_50Hz=0;
 8003804:	802b      	strh	r3, [r5, #0]
		  actuator_power_ONOFF(1);
 8003806:	f7fd fca1 	bl	800114c <actuator_power_ONOFF>
	 cnt_time_50Hz++;
 800380a:	882a      	ldrh	r2, [r5, #0]
	 cnt_time_tim++;
 800380c:	8823      	ldrh	r3, [r4, #0]
	 cnt_time_50Hz++;
 800380e:	3201      	adds	r2, #1
	 cnt_time_tim++;
 8003810:	3301      	adds	r3, #1
	 cnt_time_50Hz++;
 8003812:	802a      	strh	r2, [r5, #0]
	 cnt_time_tim++;
 8003814:	8023      	strh	r3, [r4, #0]
}
 8003816:	b009      	add	sp, #36	; 0x24
 8003818:	ecbd 8b04 	vpop	{d8-d9}
 800381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 		if(Ether_connect==1){
 8003820:	4b8a      	ldr	r3, [pc, #552]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003826:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	ed93 8a00 	vldr	s16, [r3]
 800382e:	ee18 0a10 	vmov	r0, s16
	 		if(Ether_connect==1){
 8003832:	f000 83a5 	beq.w	8003f80 <HAL_TIM_PeriodElapsedCallback+0x888>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003836:	f7fc feaf 	bl	8000598 <__aeabi_f2d>
 800383a:	eddf 7a87 	vldr	s15, [pc, #540]	; 8003a58 <HAL_TIM_PeriodElapsedCallback+0x360>
 800383e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003842:	ec41 0b19 	vmov	d9, r0, r1
 8003846:	ee17 0a90 	vmov	r0, s15
 800384a:	f7fc fea5 	bl	8000598 <__aeabi_f2d>
 800384e:	a36a      	add	r3, pc, #424	; (adr r3, 80039f8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fc fef8 	bl	8000648 <__aeabi_dmul>
 8003858:	f7fd f9ee 	bl	8000c38 <__aeabi_d2f>
 800385c:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800385e:	ee08 0a10 	vmov	s16, r0
 8003862:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003866:	f7fc fe97 	bl	8000598 <__aeabi_f2d>
 800386a:	a365      	add	r3, pc, #404	; (adr r3, 8003a00 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	4680      	mov	r8, r0
 8003872:	4689      	mov	r9, r1
 8003874:	f7fd f978 	bl	8000b68 <__aeabi_dcmpgt>
 8003878:	b1c8      	cbz	r0, 80038ae <HAL_TIM_PeriodElapsedCallback+0x1b6>
        angle_rad -= 2.0f * M_PI;
 800387a:	a763      	add	r7, pc, #396	; (adr r7, 8003a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800387c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003880:	a55f      	add	r5, pc, #380	; (adr r5, 8003a00 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003882:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8003886:	4632      	mov	r2, r6
 8003888:	463b      	mov	r3, r7
 800388a:	4640      	mov	r0, r8
 800388c:	4649      	mov	r1, r9
 800388e:	f7fc fd23 	bl	80002d8 <__aeabi_dsub>
 8003892:	f7fd f9d1 	bl	8000c38 <__aeabi_d2f>
 8003896:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 800389a:	f7fc fe7d 	bl	8000598 <__aeabi_f2d>
 800389e:	4622      	mov	r2, r4
 80038a0:	462b      	mov	r3, r5
 80038a2:	4680      	mov	r8, r0
 80038a4:	4689      	mov	r9, r1
 80038a6:	f7fd f95f 	bl	8000b68 <__aeabi_dcmpgt>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d1eb      	bne.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x18e>
    while (angle_rad < -M_PI) {
 80038ae:	a358      	add	r3, pc, #352	; (adr r3, 8003a10 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fd f938 	bl	8000b2c <__aeabi_dcmplt>
 80038bc:	b1c8      	cbz	r0, 80038f2 <HAL_TIM_PeriodElapsedCallback+0x1fa>
        angle_rad += 2.0f * M_PI;
 80038be:	a752      	add	r7, pc, #328	; (adr r7, 8003a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80038c0:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80038c4:	a552      	add	r5, pc, #328	; (adr r5, 8003a10 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80038c6:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 80038ca:	4632      	mov	r2, r6
 80038cc:	463b      	mov	r3, r7
 80038ce:	4640      	mov	r0, r8
 80038d0:	4649      	mov	r1, r9
 80038d2:	f7fc fd03 	bl	80002dc <__adddf3>
 80038d6:	f7fd f9af 	bl	8000c38 <__aeabi_d2f>
 80038da:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 80038de:	f7fc fe5b 	bl	8000598 <__aeabi_f2d>
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	4680      	mov	r8, r0
 80038e8:	4689      	mov	r9, r1
 80038ea:	f7fd f91f 	bl	8000b2c <__aeabi_dcmplt>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d1eb      	bne.n	80038ca <HAL_TIM_PeriodElapsedCallback+0x1d2>
    while (angle_rad > M_PI) {
 80038f2:	ee18 0a90 	vmov	r0, s17
 80038f6:	f7fc fe4f 	bl	8000598 <__aeabi_f2d>
 80038fa:	a341      	add	r3, pc, #260	; (adr r3, 8003a00 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	4606      	mov	r6, r0
 8003902:	460f      	mov	r7, r1
 8003904:	f7fd f930 	bl	8000b68 <__aeabi_dcmpgt>
 8003908:	b1d0      	cbz	r0, 8003940 <HAL_TIM_PeriodElapsedCallback+0x248>
        angle_rad -= 2.0f * M_PI;
 800390a:	a53f      	add	r5, pc, #252	; (adr r5, 8003a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800390c:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 8003910:	f20f 0bec 	addw	fp, pc, #236	; 0xec
 8003914:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8003918:	4622      	mov	r2, r4
 800391a:	462b      	mov	r3, r5
 800391c:	4630      	mov	r0, r6
 800391e:	4639      	mov	r1, r7
 8003920:	f7fc fcda 	bl	80002d8 <__aeabi_dsub>
 8003924:	f7fd f988 	bl	8000c38 <__aeabi_d2f>
 8003928:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 800392c:	f7fc fe34 	bl	8000598 <__aeabi_f2d>
 8003930:	4652      	mov	r2, sl
 8003932:	465b      	mov	r3, fp
 8003934:	4606      	mov	r6, r0
 8003936:	460f      	mov	r7, r1
 8003938:	f7fd f916 	bl	8000b68 <__aeabi_dcmpgt>
 800393c:	2800      	cmp	r0, #0
 800393e:	d1eb      	bne.n	8003918 <HAL_TIM_PeriodElapsedCallback+0x220>
    while (angle_rad < -M_PI) {
 8003940:	a333      	add	r3, pc, #204	; (adr r3, 8003a10 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	4630      	mov	r0, r6
 8003948:	4639      	mov	r1, r7
 800394a:	f7fd f8ef 	bl	8000b2c <__aeabi_dcmplt>
 800394e:	b1d0      	cbz	r0, 8003986 <HAL_TIM_PeriodElapsedCallback+0x28e>
        angle_rad += 2.0f * M_PI;
 8003950:	a52d      	add	r5, pc, #180	; (adr r5, 8003a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003952:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 8003956:	f20f 0bb8 	addw	fp, pc, #184	; 0xb8
 800395a:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	4630      	mov	r0, r6
 8003964:	4639      	mov	r1, r7
 8003966:	f7fc fcb9 	bl	80002dc <__adddf3>
 800396a:	f7fd f965 	bl	8000c38 <__aeabi_d2f>
 800396e:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8003972:	f7fc fe11 	bl	8000598 <__aeabi_f2d>
 8003976:	4652      	mov	r2, sl
 8003978:	465b      	mov	r3, fp
 800397a:	4606      	mov	r6, r0
 800397c:	460f      	mov	r7, r1
 800397e:	f7fd f8d5 	bl	8000b2c <__aeabi_dcmplt>
 8003982:	2800      	cmp	r0, #0
 8003984:	d1eb      	bne.n	800395e <HAL_TIM_PeriodElapsedCallback+0x266>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 8003986:	ee78 7a68 	vsub.f32	s15, s16, s17
 800398a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800398e:	ee17 3a10 	vmov	r3, s14
 8003992:	2b00      	cmp	r3, #0
 8003994:	bfb8      	it	lt
 8003996:	425b      	neglt	r3, r3
 8003998:	2b03      	cmp	r3, #3
 800399a:	dd14      	ble.n	80039c6 <HAL_TIM_PeriodElapsedCallback+0x2ce>
    	if(angle_rad1 > angle_rad2){
 800399c:	eef4 8ac8 	vcmpe.f32	s17, s16
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80039a4:	a318      	add	r3, pc, #96	; (adr r3, 8003a08 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	4640      	mov	r0, r8
 80039ac:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 80039ae:	f140 8291 	bpl.w	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x7dc>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80039b2:	f7fc fc91 	bl	80002d8 <__aeabi_dsub>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 80039b6:	4632      	mov	r2, r6
 80039b8:	463b      	mov	r3, r7
 80039ba:	f7fc fc8d 	bl	80002d8 <__aeabi_dsub>
 80039be:	f7fd f93b 	bl	8000c38 <__aeabi_d2f>
 80039c2:	ee07 0a90 	vmov	s15, r0
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 80039c6:	ee17 0a90 	vmov	r0, s15
 80039ca:	f7fc fde5 	bl	8000598 <__aeabi_f2d>
 80039ce:	a312      	add	r3, pc, #72	; (adr r3, 8003a18 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f7fc fe38 	bl	8000648 <__aeabi_dmul>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	ec51 0b19 	vmov	r0, r1, d9
 80039e0:	f7fc fc7a 	bl	80002d8 <__aeabi_dsub>
 80039e4:	f7fd f928 	bl	8000c38 <__aeabi_d2f>
 80039e8:	9b04      	ldr	r3, [sp, #16]
 80039ea:	6018      	str	r0, [r3, #0]
	 			maintask_state_stop();
 80039ec:	f7ff fdd2 	bl	8003594 <maintask_state_stop>
 80039f0:	e6e2      	b.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80039f2:	bf00      	nop
 80039f4:	f3af 8000 	nop.w
 80039f8:	16c16c17 	.word	0x16c16c17
 80039fc:	3f76c16c 	.word	0x3f76c16c
 8003a00:	54442d18 	.word	0x54442d18
 8003a04:	400921fb 	.word	0x400921fb
 8003a08:	54442d18 	.word	0x54442d18
 8003a0c:	401921fb 	.word	0x401921fb
 8003a10:	54442d18 	.word	0x54442d18
 8003a14:	c00921fb 	.word	0xc00921fb
 8003a18:	48b81fe5 	.word	0x48b81fe5
 8003a1c:	3fad55df 	.word	0x3fad55df
 8003a20:	48000400 	.word	0x48000400
 8003a24:	48000c00 	.word	0x48000c00
 8003a28:	20000f80 	.word	0x20000f80
 8003a2c:	20000e54 	.word	0x20000e54
 8003a30:	00000000 	.word	0x00000000
 8003a34:	48000800 	.word	0x48000800
 8003a38:	20000f28 	.word	0x20000f28
 8003a3c:	20000f2c 	.word	0x20000f2c
 8003a40:	20000eda 	.word	0x20000eda
 8003a44:	20000edc 	.word	0x20000edc
 8003a48:	20000dd4 	.word	0x20000dd4
 8003a4c:	20000dd3 	.word	0x20000dd3
 8003a50:	20000ed8 	.word	0x20000ed8
 8003a54:	20000fb8 	.word	0x20000fb8
 8003a58:	40490fdb 	.word	0x40490fdb
 8003a5c:	20000fa0 	.word	0x20000fa0
	 		if(Ether_connect==1){
 8003a60:	4b93      	ldr	r3, [pc, #588]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003a66:	4b93      	ldr	r3, [pc, #588]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	ed93 8a00 	vldr	s16, [r3]
 8003a6e:	ee18 0a10 	vmov	r0, s16
	 		if(Ether_connect==1){
 8003a72:	f000 836e 	beq.w	8004152 <HAL_TIM_PeriodElapsedCallback+0xa5a>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003a76:	f7fc fd8f 	bl	8000598 <__aeabi_f2d>
 8003a7a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8003cb8 <HAL_TIM_PeriodElapsedCallback+0x5c0>
 8003a7e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003a82:	ec41 0b19 	vmov	d9, r0, r1
 8003a86:	ee17 0a90 	vmov	r0, s15
 8003a8a:	f7fc fd85 	bl	8000598 <__aeabi_f2d>
 8003a8e:	a380      	add	r3, pc, #512	; (adr r3, 8003c90 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fdd8 	bl	8000648 <__aeabi_dmul>
 8003a98:	f7fd f8ce 	bl	8000c38 <__aeabi_d2f>
 8003a9c:	4b87      	ldr	r3, [pc, #540]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003a9e:	ee08 0a10 	vmov	s16, r0
 8003aa2:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003aa6:	f7fc fd77 	bl	8000598 <__aeabi_f2d>
 8003aaa:	a37b      	add	r3, pc, #492	; (adr r3, 8003c98 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	4680      	mov	r8, r0
 8003ab2:	4689      	mov	r9, r1
 8003ab4:	f7fd f858 	bl	8000b68 <__aeabi_dcmpgt>
 8003ab8:	b1c8      	cbz	r0, 8003aee <HAL_TIM_PeriodElapsedCallback+0x3f6>
        angle_rad -= 2.0f * M_PI;
 8003aba:	a779      	add	r7, pc, #484	; (adr r7, 8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003abc:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003ac0:	a575      	add	r5, pc, #468	; (adr r5, 8003c98 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003ac2:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8003ac6:	4632      	mov	r2, r6
 8003ac8:	463b      	mov	r3, r7
 8003aca:	4640      	mov	r0, r8
 8003acc:	4649      	mov	r1, r9
 8003ace:	f7fc fc03 	bl	80002d8 <__aeabi_dsub>
 8003ad2:	f7fd f8b1 	bl	8000c38 <__aeabi_d2f>
 8003ad6:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8003ada:	f7fc fd5d 	bl	8000598 <__aeabi_f2d>
 8003ade:	4622      	mov	r2, r4
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	4680      	mov	r8, r0
 8003ae4:	4689      	mov	r9, r1
 8003ae6:	f7fd f83f 	bl	8000b68 <__aeabi_dcmpgt>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d1eb      	bne.n	8003ac6 <HAL_TIM_PeriodElapsedCallback+0x3ce>
    while (angle_rad < -M_PI) {
 8003aee:	a36e      	add	r3, pc, #440	; (adr r3, 8003ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	4640      	mov	r0, r8
 8003af6:	4649      	mov	r1, r9
 8003af8:	f7fd f818 	bl	8000b2c <__aeabi_dcmplt>
 8003afc:	b1c8      	cbz	r0, 8003b32 <HAL_TIM_PeriodElapsedCallback+0x43a>
        angle_rad += 2.0f * M_PI;
 8003afe:	a768      	add	r7, pc, #416	; (adr r7, 8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003b00:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8003b04:	a568      	add	r5, pc, #416	; (adr r5, 8003ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003b06:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8003b0a:	4632      	mov	r2, r6
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	4640      	mov	r0, r8
 8003b10:	4649      	mov	r1, r9
 8003b12:	f7fc fbe3 	bl	80002dc <__adddf3>
 8003b16:	f7fd f88f 	bl	8000c38 <__aeabi_d2f>
 8003b1a:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8003b1e:	f7fc fd3b 	bl	8000598 <__aeabi_f2d>
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	4680      	mov	r8, r0
 8003b28:	4689      	mov	r9, r1
 8003b2a:	f7fc ffff 	bl	8000b2c <__aeabi_dcmplt>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1eb      	bne.n	8003b0a <HAL_TIM_PeriodElapsedCallback+0x412>
    while (angle_rad > M_PI) {
 8003b32:	ee18 0a90 	vmov	r0, s17
 8003b36:	f7fc fd2f 	bl	8000598 <__aeabi_f2d>
 8003b3a:	a357      	add	r3, pc, #348	; (adr r3, 8003c98 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	4606      	mov	r6, r0
 8003b42:	460f      	mov	r7, r1
 8003b44:	f7fd f810 	bl	8000b68 <__aeabi_dcmpgt>
 8003b48:	b1d0      	cbz	r0, 8003b80 <HAL_TIM_PeriodElapsedCallback+0x488>
        angle_rad -= 2.0f * M_PI;
 8003b4a:	a555      	add	r5, pc, #340	; (adr r5, 8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003b4c:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 8003b50:	f20f 1b44 	addw	fp, pc, #324	; 0x144
 8003b54:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8003b58:	4622      	mov	r2, r4
 8003b5a:	462b      	mov	r3, r5
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	4639      	mov	r1, r7
 8003b60:	f7fc fbba 	bl	80002d8 <__aeabi_dsub>
 8003b64:	f7fd f868 	bl	8000c38 <__aeabi_d2f>
 8003b68:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8003b6c:	f7fc fd14 	bl	8000598 <__aeabi_f2d>
 8003b70:	4652      	mov	r2, sl
 8003b72:	465b      	mov	r3, fp
 8003b74:	4606      	mov	r6, r0
 8003b76:	460f      	mov	r7, r1
 8003b78:	f7fc fff6 	bl	8000b68 <__aeabi_dcmpgt>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x460>
    while (angle_rad < -M_PI) {
 8003b80:	a349      	add	r3, pc, #292	; (adr r3, 8003ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	4630      	mov	r0, r6
 8003b88:	4639      	mov	r1, r7
 8003b8a:	f7fc ffcf 	bl	8000b2c <__aeabi_dcmplt>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	f43f aef9 	beq.w	8003986 <HAL_TIM_PeriodElapsedCallback+0x28e>
        angle_rad += 2.0f * M_PI;
 8003b94:	a542      	add	r5, pc, #264	; (adr r5, 8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003b96:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 8003b9a:	f20f 1b0c 	addw	fp, pc, #268	; 0x10c
 8003b9e:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	4639      	mov	r1, r7
 8003baa:	f7fc fb97 	bl	80002dc <__adddf3>
 8003bae:	f7fd f843 	bl	8000c38 <__aeabi_d2f>
 8003bb2:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8003bb6:	f7fc fcef 	bl	8000598 <__aeabi_f2d>
 8003bba:	4652      	mov	r2, sl
 8003bbc:	465b      	mov	r3, fp
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	460f      	mov	r7, r1
 8003bc2:	f7fc ffb3 	bl	8000b2c <__aeabi_dcmplt>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d1eb      	bne.n	8003ba2 <HAL_TIM_PeriodElapsedCallback+0x4aa>
 8003bca:	e6dc      	b.n	8003986 <HAL_TIM_PeriodElapsedCallback+0x28e>
			if(decode_SW(SWdata[0])&0b00010000){
 8003bcc:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
	if(SW_data<100){
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	2b63      	cmp	r3, #99	; 0x63
 8003bd2:	f200 8168 	bhi.w	8003ea6 <HAL_TIM_PeriodElapsedCallback+0x7ae>
				 can1_send(0x310,senddata_calib);//calibration
 8003bd6:	a906      	add	r1, sp, #24
 8003bd8:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003bdc:	f7fd fd06 	bl	80015ec <can1_send>
				 can2_send(0x310,senddata_calib);//calibration
 8003be0:	a906      	add	r1, sp, #24
 8003be2:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003be6:	f7fd fd51 	bl	800168c <can2_send>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003bea:	4836      	ldr	r0, [pc, #216]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf2:	f003 fab9 	bl	8007168 <HAL_GPIO_WritePin>
 8003bf6:	e5df      	b.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0xc0>
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003bf8:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
	if(SW_data<100){
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	2b63      	cmp	r3, #99	; 0x63
 8003bfe:	f200 8125 	bhi.w	8003e4c <HAL_TIM_PeriodElapsedCallback+0x754>
	 			actuator_motor5(0.5,1.0);
 8003c02:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003c06:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003c0a:	f7fd fa53 	bl	80010b4 <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003c0e:	482d      	ldr	r0, [pc, #180]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c16:	f003 faa7 	bl	8007168 <HAL_GPIO_WritePin>
 8003c1a:	e5c3      	b.n	80037a4 <HAL_TIM_PeriodElapsedCallback+0xac>
			if(decode_SW(SWdata[0])&0b00000001){
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
	if(SW_data<100){
 8003c20:	2b63      	cmp	r3, #99	; 0x63
 8003c22:	f200 8120 	bhi.w	8003e66 <HAL_TIM_PeriodElapsedCallback+0x76e>
				 omni_move(0.0, 0.0, 7.0,1.0);//spin
 8003c26:	eddf 0a28 	vldr	s1, [pc, #160]	; 8003cc8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8003c2a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003c2e:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003c32:	eeb0 0a60 	vmov.f32	s0, s1
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8003c36:	f001 f8d7 	bl	8004de8 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003c3a:	4822      	ldr	r0, [pc, #136]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c42:	f003 fa91 	bl	8007168 <HAL_GPIO_WritePin>
			actuator_motor5(0.0,0.0);
 8003c46:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003cc8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8003c4a:	eeb0 0a60 	vmov.f32	s0, s1
 8003c4e:	f7fd fa31 	bl	80010b4 <actuator_motor5>
			break;
 8003c52:	e5b1      	b.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0xc0>
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
	if(SW_data<100){
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	2b63      	cmp	r3, #99	; 0x63
 8003c5a:	f240 80ac 	bls.w	8003db6 <HAL_TIM_PeriodElapsedCallback+0x6be>
				 actuator_motor5(0.0,0.0);
 8003c5e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8003cc8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8003c62:	eeb0 0a60 	vmov.f32	s0, s1
 8003c66:	f7fd fa25 	bl	80010b4 <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4815      	ldr	r0, [pc, #84]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c72:	f003 fa79 	bl	8007168 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003c76:	2101      	movs	r1, #1
 8003c78:	4608      	mov	r0, r1
 8003c7a:	f7fd fa57 	bl	800112c <actuator_kicker>
	 			 actuator_kicker(2, 0);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	2002      	movs	r0, #2
 8003c82:	f7fd fa53 	bl	800112c <actuator_kicker>
	 			 actuator_kicker_voltage(250.0);
 8003c86:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003ccc <HAL_TIM_PeriodElapsedCallback+0x5d4>
 8003c8a:	e584      	b.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8003c8c:	f3af 8000 	nop.w
 8003c90:	16c16c17 	.word	0x16c16c17
 8003c94:	3f76c16c 	.word	0x3f76c16c
 8003c98:	54442d18 	.word	0x54442d18
 8003c9c:	400921fb 	.word	0x400921fb
 8003ca0:	54442d18 	.word	0x54442d18
 8003ca4:	401921fb 	.word	0x401921fb
 8003ca8:	54442d18 	.word	0x54442d18
 8003cac:	c00921fb 	.word	0xc00921fb
 8003cb0:	20000dd3 	.word	0x20000dd3
 8003cb4:	20000fb8 	.word	0x20000fb8
 8003cb8:	40490fdb 	.word	0x40490fdb
 8003cbc:	20000fa0 	.word	0x20000fa0
 8003cc0:	20000e54 	.word	0x20000e54
 8003cc4:	48000800 	.word	0x48000800
 8003cc8:	00000000 	.word	0x00000000
 8003ccc:	437a0000 	.word	0x437a0000
      	 printf(" yaw=%+6.1f",yawAngle);
 8003cd0:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	f7fc fc60 	bl	8000598 <__aeabi_f2d>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4887      	ldr	r0, [pc, #540]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0x804>)
 8003cde:	f006 fdd1 	bl	800a884 <iprintf>
    	 printf(" connect=%d v_surge=%+6.4f v_sway=%+6.4f ",Ether_connect,vel_surge,vel_sway);
 8003ce2:	4b87      	ldr	r3, [pc, #540]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	f7fc fc57 	bl	8000598 <__aeabi_f2d>
 8003cea:	460b      	mov	r3, r1
 8003cec:	4985      	ldr	r1, [pc, #532]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6808      	ldr	r0, [r1, #0]
 8003cf2:	4985      	ldr	r1, [pc, #532]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8003cf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003cf8:	780e      	ldrb	r6, [r1, #0]
 8003cfa:	f7fc fc4d 	bl	8000598 <__aeabi_f2d>
 8003cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d02:	e9cd 0100 	strd	r0, r1, [sp]
 8003d06:	4631      	mov	r1, r6
 8003d08:	4880      	ldr	r0, [pc, #512]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0x814>)
 8003d0a:	f006 fdbb 	bl	800a884 <iprintf>
		 printf(" theta_vision=%+6.4f theta_AI=%+6.4f drible_power=%+6.4f",(theta_vision*180.0/PI),(theta_target*180.0/PI),drible_power);
 8003d0e:	4b80      	ldr	r3, [pc, #512]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f7fc fc41 	bl	8000598 <__aeabi_f2d>
 8003d16:	a376      	add	r3, pc, #472	; (adr r3, 8003ef0 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	f7fc fc94 	bl	8000648 <__aeabi_dmul>
 8003d20:	4b7c      	ldr	r3, [pc, #496]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8003d22:	4606      	mov	r6, r0
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	460f      	mov	r7, r1
 8003d28:	f7fc fc36 	bl	8000598 <__aeabi_f2d>
 8003d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d30:	4b79      	ldr	r3, [pc, #484]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	f7fc fc30 	bl	8000598 <__aeabi_f2d>
 8003d38:	a36d      	add	r3, pc, #436	; (adr r3, 8003ef0 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f7fc fc83 	bl	8000648 <__aeabi_dmul>
 8003d42:	4632      	mov	r2, r6
 8003d44:	e9cd 0100 	strd	r0, r1, [sp]
 8003d48:	463b      	mov	r3, r7
 8003d4a:	4874      	ldr	r0, [pc, #464]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003d4c:	f006 fd9a 	bl	800a884 <iprintf>
 		 printf(" kick_power=%3.2f chip=%d",kick_power,chipEN);
 8003d50:	4b73      	ldr	r3, [pc, #460]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	f7fc fc20 	bl	8000598 <__aeabi_f2d>
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4972      	ldr	r1, [pc, #456]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8003d5c:	7809      	ldrb	r1, [r1, #0]
 8003d5e:	9100      	str	r1, [sp, #0]
 8003d60:	4602      	mov	r2, r0
 8003d62:	4871      	ldr	r0, [pc, #452]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8003d64:	f006 fd8e 	bl	800a884 <iprintf>
		  printf(" sw=%d sw=%d",sw_mode,decode_SW(SWdata[0]));
 8003d68:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003d6a:	4a71      	ldr	r2, [pc, #452]	; (8003f30 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	7811      	ldrb	r1, [r2, #0]
	if(SW_data<100){
 8003d70:	2b63      	cmp	r3, #99	; 0x63
 8003d72:	d942      	bls.n	8003dfa <HAL_TIM_PeriodElapsedCallback+0x702>
		data=0b00010000;//C
	}
	else if(SW_data<500 && SW_data>100){
 8003d74:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
 8003d78:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 8003d7c:	f240 80ad 	bls.w	8003eda <HAL_TIM_PeriodElapsedCallback+0x7e2>
		data=0b00000010;//B
	}
	else if(SW_data<2000 && SW_data>500){
 8003d80:	f46f 70fa 	mvn.w	r0, #500	; 0x1f4
 8003d84:	181a      	adds	r2, r3, r0
 8003d86:	b292      	uxth	r2, r2
 8003d88:	f240 50da 	movw	r0, #1498	; 0x5da
 8003d8c:	4282      	cmp	r2, r0
 8003d8e:	f240 8297 	bls.w	80042c0 <HAL_TIM_PeriodElapsedCallback+0xbc8>
		data=0b00000100;//R
	}
	else if(SW_data<3000 && SW_data>2000){
 8003d92:	f46f 62fa 	mvn.w	r2, #2000	; 0x7d0
 8003d96:	189a      	adds	r2, r3, r2
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	f240 30e6 	movw	r0, #998	; 0x3e6
 8003d9e:	4282      	cmp	r2, r0
 8003da0:	f240 82c9 	bls.w	8004336 <HAL_TIM_PeriodElapsedCallback+0xc3e>
		data=0b00000001;//F
	}
	else if(SW_data<4000 && SW_data>3000){
 8003da4:	f6a3 32b9 	subw	r2, r3, #3001	; 0xbb9
 8003da8:	b292      	uxth	r2, r2
 8003daa:	4282      	cmp	r2, r0
 8003dac:	bf8c      	ite	hi
 8003dae:	2200      	movhi	r2, #0
 8003db0:	2201      	movls	r2, #1
 8003db2:	00d2      	lsls	r2, r2, #3
 8003db4:	e022      	b.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x704>
	 			actuator_motor5(0.5,1.0);
 8003db6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003dba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003dbe:	f7fd f979 	bl	80010b4 <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003dc2:	485c      	ldr	r0, [pc, #368]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x83c>)
					if(kick_state==0){
 8003dc4:	4c5c      	ldr	r4, [pc, #368]	; (8003f38 <HAL_TIM_PeriodElapsedCallback+0x840>)
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dcc:	f003 f9cc 	bl	8007168 <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 8003dd0:	4b5a      	ldr	r3, [pc, #360]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003dd2:	781d      	ldrb	r5, [r3, #0]
 8003dd4:	2d01      	cmp	r5, #1
 8003dd6:	f000 81b2 	beq.w	800413e <HAL_TIM_PeriodElapsedCallback+0xa46>
				if(kick_state==1){
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f47f ace1 	bne.w	80037a4 <HAL_TIM_PeriodElapsedCallback+0xac>
					kick_time++;
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	3201      	adds	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
					if(kick_time>100){
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2a64      	cmp	r2, #100	; 0x64
 8003dee:	f77f acd9 	ble.w	80037a4 <HAL_TIM_PeriodElapsedCallback+0xac>
						kick_state=0;
 8003df2:	2200      	movs	r2, #0
 8003df4:	6022      	str	r2, [r4, #0]
						kick_time=0;
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e4d4      	b.n	80037a4 <HAL_TIM_PeriodElapsedCallback+0xac>
		data=0b00010000;//C
 8003dfa:	2210      	movs	r2, #16
		  printf(" sw=%d sw=%d",sw_mode,decode_SW(SWdata[0]));
 8003dfc:	4851      	ldr	r0, [pc, #324]	; (8003f44 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003dfe:	f006 fd41 	bl	800a884 <iprintf>
		 printf(" ball_x=%d _y=%d ",ball_x,ball_y);
 8003e02:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003e04:	4a51      	ldr	r2, [pc, #324]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003e06:	6819      	ldr	r1, [r3, #0]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	4851      	ldr	r0, [pc, #324]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8003e0c:	f006 fd3a 	bl	800a884 <iprintf>
		 printf(" vision_x=%d _y=%d ",vision_x,vision_y);
 8003e10:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8003e12:	4a51      	ldr	r2, [pc, #324]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	4850      	ldr	r0, [pc, #320]	; (8003f5c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003e1a:	f006 fd33 	bl	800a884 <iprintf>
		 printf(" ball:0=%d",ball[0]);
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003e20:	484f      	ldr	r0, [pc, #316]	; (8003f60 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8003e22:	7819      	ldrb	r1, [r3, #0]
 8003e24:	f006 fd2e 	bl	800a884 <iprintf>
		 printf(" mouse:x=%+3d, y=%+3d",mouse[0],mouse[1]);
 8003e28:	4b4e      	ldr	r3, [pc, #312]	; (8003f64 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8003e2a:	484f      	ldr	r0, [pc, #316]	; (8003f68 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8003e2c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003e30:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003e34:	f006 fd26 	bl	800a884 <iprintf>
		 printf(" mouse:x=%+6d, y=%+6d",(int)mouse_odom[0],(int)mouse_odom[1]);
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8003e3a:	484d      	ldr	r0, [pc, #308]	; (8003f70 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8003e3c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003e40:	f006 fd20 	bl	800a884 <iprintf>
		 printf("\r\n");
 8003e44:	484b      	ldr	r0, [pc, #300]	; (8003f74 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8003e46:	f006 fd83 	bl	800a950 <puts>
 8003e4a:	e4d5      	b.n	80037f8 <HAL_TIM_PeriodElapsedCallback+0x100>
				actuator_motor5(0.0,0.0);
 8003e4c:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8003f78 <HAL_TIM_PeriodElapsedCallback+0x880>
 8003e50:	eeb0 0a60 	vmov.f32	s0, s1
 8003e54:	f7fd f92e 	bl	80010b4 <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003e58:	4836      	ldr	r0, [pc, #216]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e60:	f003 f982 	bl	8007168 <HAL_GPIO_WritePin>
 8003e64:	e49e      	b.n	80037a4 <HAL_TIM_PeriodElapsedCallback+0xac>
	else if(SW_data<500 && SW_data>100){
 8003e66:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
 8003e6a:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 8003e6e:	d936      	bls.n	8003ede <HAL_TIM_PeriodElapsedCallback+0x7e6>
	else if(SW_data<2000 && SW_data>500){
 8003e70:	f46f 64fa 	mvn.w	r4, #2000	; 0x7d0
 8003e74:	191a      	adds	r2, r3, r4
 8003e76:	f46f 75fa 	mvn.w	r5, #500	; 0x1f4
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	f240 30e6 	movw	r0, #998	; 0x3e6
 8003e80:	1959      	adds	r1, r3, r5
 8003e82:	4282      	cmp	r2, r0
 8003e84:	b289      	uxth	r1, r1
 8003e86:	f240 820f 	bls.w	80042a8 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 8003e8a:	f240 52da 	movw	r2, #1498	; 0x5da
 8003e8e:	4291      	cmp	r1, r2
 8003e90:	f200 8234 	bhi.w	80042fc <HAL_TIM_PeriodElapsedCallback+0xc04>
				 omni_move(0.0, -1.0, 0.0,1.0);//left
 8003e94:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8003f78 <HAL_TIM_PeriodElapsedCallback+0x880>
 8003e98:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003e9c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8003ea0:	eeb0 0a41 	vmov.f32	s0, s2
 8003ea4:	e6c7      	b.n	8003c36 <HAL_TIM_PeriodElapsedCallback+0x53e>
				omni_move(0.0, 0.0, 0.0,0.0);
 8003ea6:	eddf 1a34 	vldr	s3, [pc, #208]	; 8003f78 <HAL_TIM_PeriodElapsedCallback+0x880>
 8003eaa:	eef0 0a61 	vmov.f32	s1, s3
 8003eae:	eeb0 0a61 	vmov.f32	s0, s3
 8003eb2:	eeb0 1a61 	vmov.f32	s2, s3
 8003eb6:	f000 ff97 	bl	8004de8 <omni_move>
				actuator_motor5(0.0,0.0);
 8003eba:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003f78 <HAL_TIM_PeriodElapsedCallback+0x880>
 8003ebe:	eeb0 0a60 	vmov.f32	s0, s1
 8003ec2:	f7fd f8f7 	bl	80010b4 <actuator_motor5>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003ec6:	481b      	ldr	r0, [pc, #108]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ece:	f003 f94b 	bl	8007168 <HAL_GPIO_WritePin>
 8003ed2:	e471      	b.n	80037b8 <HAL_TIM_PeriodElapsedCallback+0xc0>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8003ed4:	f7fc fa02 	bl	80002dc <__adddf3>
 8003ed8:	e56d      	b.n	80039b6 <HAL_TIM_PeriodElapsedCallback+0x2be>
		data=0b00000010;//B
 8003eda:	2202      	movs	r2, #2
 8003edc:	e78e      	b.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x704>
				 omni_move(-1.0, 0.0, 0.0,1.0);//back
 8003ede:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8003f78 <HAL_TIM_PeriodElapsedCallback+0x880>
 8003ee2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003ee6:	eef0 0a41 	vmov.f32	s1, s2
 8003eea:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003eee:	e6a2      	b.n	8003c36 <HAL_TIM_PeriodElapsedCallback+0x53e>
 8003ef0:	0d03cf25 	.word	0x0d03cf25
 8003ef4:	404ca5dc 	.word	0x404ca5dc
 8003ef8:	20000fb8 	.word	0x20000fb8
 8003efc:	0800ca78 	.word	0x0800ca78
 8003f00:	20000fa8 	.word	0x20000fa8
 8003f04:	20000fac 	.word	0x20000fac
 8003f08:	20000dd3 	.word	0x20000dd3
 8003f0c:	0800ca84 	.word	0x0800ca84
 8003f10:	20000fa0 	.word	0x20000fa0
 8003f14:	20000ef4 	.word	0x20000ef4
 8003f18:	20000f9c 	.word	0x20000f9c
 8003f1c:	0800cab0 	.word	0x0800cab0
 8003f20:	20000f24 	.word	0x20000f24
 8003f24:	20000ed6 	.word	0x20000ed6
 8003f28:	0800caec 	.word	0x0800caec
 8003f2c:	20000e54 	.word	0x20000e54
 8003f30:	20000f80 	.word	0x20000f80
 8003f34:	48000800 	.word	0x48000800
 8003f38:	20000f28 	.word	0x20000f28
 8003f3c:	20000ec4 	.word	0x20000ec4
 8003f40:	20000f2c 	.word	0x20000f2c
 8003f44:	0800cb08 	.word	0x0800cb08
 8003f48:	20000ec8 	.word	0x20000ec8
 8003f4c:	20000ecc 	.word	0x20000ecc
 8003f50:	0800cb18 	.word	0x0800cb18
 8003f54:	20000fb0 	.word	0x20000fb0
 8003f58:	20000fb4 	.word	0x20000fb4
 8003f5c:	0800cb2c 	.word	0x0800cb2c
 8003f60:	0800cb40 	.word	0x0800cb40
 8003f64:	20000f68 	.word	0x20000f68
 8003f68:	0800cb4c 	.word	0x0800cb4c
 8003f6c:	20000f6c 	.word	0x20000f6c
 8003f70:	0800cb64 	.word	0x0800cb64
 8003f74:	0800cb7c 	.word	0x0800cb7c
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	40490fdb 	.word	0x40490fdb
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003f80:	f7fc fb0a 	bl	8000598 <__aeabi_f2d>
 8003f84:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8003f7c <HAL_TIM_PeriodElapsedCallback+0x884>
 8003f88:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003f8c:	ec41 0b19 	vmov	d9, r0, r1
 8003f90:	ee17 0a90 	vmov	r0, s15
 8003f94:	f7fc fb00 	bl	8000598 <__aeabi_f2d>
 8003f98:	a3d3      	add	r3, pc, #844	; (adr r3, 80042e8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	f7fc fb53 	bl	8000648 <__aeabi_dmul>
 8003fa2:	f7fc fe49 	bl	8000c38 <__aeabi_d2f>
 8003fa6:	4bd2      	ldr	r3, [pc, #840]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 8003fa8:	ee08 0a10 	vmov	s16, r0
 8003fac:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003fb0:	f7fc faf2 	bl	8000598 <__aeabi_f2d>
 8003fb4:	a3c4      	add	r3, pc, #784	; (adr r3, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	4680      	mov	r8, r0
 8003fbc:	4689      	mov	r9, r1
 8003fbe:	f7fc fdd3 	bl	8000b68 <__aeabi_dcmpgt>
 8003fc2:	b1c8      	cbz	r0, 8003ff8 <HAL_TIM_PeriodElapsedCallback+0x900>
        angle_rad -= 2.0f * M_PI;
 8003fc4:	a7c2      	add	r7, pc, #776	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8003fc6:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003fca:	a5bf      	add	r5, pc, #764	; (adr r5, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8003fcc:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	f7fc f97e 	bl	80002d8 <__aeabi_dsub>
 8003fdc:	f7fc fe2c 	bl	8000c38 <__aeabi_d2f>
 8003fe0:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8003fe4:	f7fc fad8 	bl	8000598 <__aeabi_f2d>
 8003fe8:	4622      	mov	r2, r4
 8003fea:	462b      	mov	r3, r5
 8003fec:	4680      	mov	r8, r0
 8003fee:	4689      	mov	r9, r1
 8003ff0:	f7fc fdba 	bl	8000b68 <__aeabi_dcmpgt>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d1eb      	bne.n	8003fd0 <HAL_TIM_PeriodElapsedCallback+0x8d8>
    while (angle_rad < -M_PI) {
 8003ff8:	a3b7      	add	r3, pc, #732	; (adr r3, 80042d8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc fd93 	bl	8000b2c <__aeabi_dcmplt>
 8004006:	b1c8      	cbz	r0, 800403c <HAL_TIM_PeriodElapsedCallback+0x944>
        angle_rad += 2.0f * M_PI;
 8004008:	a7b1      	add	r7, pc, #708	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800400a:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 800400e:	a5b2      	add	r5, pc, #712	; (adr r5, 80042d8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8004010:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8004014:	4632      	mov	r2, r6
 8004016:	463b      	mov	r3, r7
 8004018:	4640      	mov	r0, r8
 800401a:	4649      	mov	r1, r9
 800401c:	f7fc f95e 	bl	80002dc <__adddf3>
 8004020:	f7fc fe0a 	bl	8000c38 <__aeabi_d2f>
 8004024:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8004028:	f7fc fab6 	bl	8000598 <__aeabi_f2d>
 800402c:	4622      	mov	r2, r4
 800402e:	462b      	mov	r3, r5
 8004030:	4680      	mov	r8, r0
 8004032:	4689      	mov	r9, r1
 8004034:	f7fc fd7a 	bl	8000b2c <__aeabi_dcmplt>
 8004038:	2800      	cmp	r0, #0
 800403a:	d1eb      	bne.n	8004014 <HAL_TIM_PeriodElapsedCallback+0x91c>
    while (angle_rad > M_PI) {
 800403c:	ee18 0a90 	vmov	r0, s17
 8004040:	f7fc faaa 	bl	8000598 <__aeabi_f2d>
 8004044:	a3a0      	add	r3, pc, #640	; (adr r3, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	4604      	mov	r4, r0
 800404c:	460d      	mov	r5, r1
 800404e:	f7fc fd8b 	bl	8000b68 <__aeabi_dcmpgt>
 8004052:	b1d0      	cbz	r0, 800408a <HAL_TIM_PeriodElapsedCallback+0x992>
        angle_rad -= 2.0f * M_PI;
 8004054:	a79e      	add	r7, pc, #632	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8004056:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 800405a:	f20f 2b6c 	addw	fp, pc, #620	; 0x26c
 800405e:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8004062:	4632      	mov	r2, r6
 8004064:	463b      	mov	r3, r7
 8004066:	4620      	mov	r0, r4
 8004068:	4629      	mov	r1, r5
 800406a:	f7fc f935 	bl	80002d8 <__aeabi_dsub>
 800406e:	f7fc fde3 	bl	8000c38 <__aeabi_d2f>
 8004072:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8004076:	f7fc fa8f 	bl	8000598 <__aeabi_f2d>
 800407a:	4652      	mov	r2, sl
 800407c:	465b      	mov	r3, fp
 800407e:	4604      	mov	r4, r0
 8004080:	460d      	mov	r5, r1
 8004082:	f7fc fd71 	bl	8000b68 <__aeabi_dcmpgt>
 8004086:	2800      	cmp	r0, #0
 8004088:	d1eb      	bne.n	8004062 <HAL_TIM_PeriodElapsedCallback+0x96a>
    while (angle_rad < -M_PI) {
 800408a:	a393      	add	r3, pc, #588	; (adr r3, 80042d8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	4620      	mov	r0, r4
 8004092:	4629      	mov	r1, r5
 8004094:	f7fc fd4a 	bl	8000b2c <__aeabi_dcmplt>
 8004098:	b1d0      	cbz	r0, 80040d0 <HAL_TIM_PeriodElapsedCallback+0x9d8>
        angle_rad += 2.0f * M_PI;
 800409a:	a78d      	add	r7, pc, #564	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800409c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80040a0:	f20f 2b34 	addw	fp, pc, #564	; 0x234
 80040a4:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 80040a8:	4632      	mov	r2, r6
 80040aa:	463b      	mov	r3, r7
 80040ac:	4620      	mov	r0, r4
 80040ae:	4629      	mov	r1, r5
 80040b0:	f7fc f914 	bl	80002dc <__adddf3>
 80040b4:	f7fc fdc0 	bl	8000c38 <__aeabi_d2f>
 80040b8:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 80040bc:	f7fc fa6c 	bl	8000598 <__aeabi_f2d>
 80040c0:	4652      	mov	r2, sl
 80040c2:	465b      	mov	r3, fp
 80040c4:	4604      	mov	r4, r0
 80040c6:	460d      	mov	r5, r1
 80040c8:	f7fc fd30 	bl	8000b2c <__aeabi_dcmplt>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d1eb      	bne.n	80040a8 <HAL_TIM_PeriodElapsedCallback+0x9b0>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 80040d0:	ee78 7a68 	vsub.f32	s15, s16, s17
 80040d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80040d8:	ee17 3a10 	vmov	r3, s14
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bfb8      	it	lt
 80040e0:	425b      	neglt	r3, r3
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	dd14      	ble.n	8004110 <HAL_TIM_PeriodElapsedCallback+0xa18>
    	if(angle_rad1 > angle_rad2){
 80040e6:	eef4 8ac8 	vcmpe.f32	s17, s16
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80040ee:	a378      	add	r3, pc, #480	; (adr r3, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	4640      	mov	r0, r8
 80040f6:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 80040f8:	f140 80df 	bpl.w	80042ba <HAL_TIM_PeriodElapsedCallback+0xbc2>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80040fc:	f7fc f8ec 	bl	80002d8 <__aeabi_dsub>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8004100:	4622      	mov	r2, r4
 8004102:	462b      	mov	r3, r5
 8004104:	f7fc f8e8 	bl	80002d8 <__aeabi_dsub>
 8004108:	f7fc fd96 	bl	8000c38 <__aeabi_d2f>
 800410c:	ee07 0a90 	vmov	s15, r0
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8004110:	ee17 0a90 	vmov	r0, s15
 8004114:	f7fc fa40 	bl	8000598 <__aeabi_f2d>
 8004118:	a371      	add	r3, pc, #452	; (adr r3, 80042e0 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f7fc fa93 	bl	8000648 <__aeabi_dmul>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	ec51 0b19 	vmov	r0, r1, d9
 800412a:	f7fc f8d5 	bl	80002d8 <__aeabi_dsub>
 800412e:	f7fc fd83 	bl	8000c38 <__aeabi_d2f>
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	6018      	str	r0, [r3, #0]
	 			maintask_run();
 8004136:	f7fe fedb 	bl	8002ef0 <maintask_run>
 800413a:	f7ff bb3d 	b.w	80037b8 <HAL_TIM_PeriodElapsedCallback+0xc0>
					if(kick_state==0){
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f47f ae4a 	bne.w	8003dda <HAL_TIM_PeriodElapsedCallback+0x6e2>
						actuator_kicker(3, 100);
 8004146:	2164      	movs	r1, #100	; 0x64
 8004148:	2003      	movs	r0, #3
 800414a:	f7fc ffef 	bl	800112c <actuator_kicker>
						kick_state=1;
 800414e:	6025      	str	r5, [r4, #0]
 8004150:	e643      	b.n	8003dda <HAL_TIM_PeriodElapsedCallback+0x6e2>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8004152:	f7fc fa21 	bl	8000598 <__aeabi_f2d>
 8004156:	eddf 7a67 	vldr	s15, [pc, #412]	; 80042f4 <HAL_TIM_PeriodElapsedCallback+0xbfc>
 800415a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800415e:	ec41 0b19 	vmov	d9, r0, r1
 8004162:	ee17 0a90 	vmov	r0, s15
 8004166:	f7fc fa17 	bl	8000598 <__aeabi_f2d>
 800416a:	a35f      	add	r3, pc, #380	; (adr r3, 80042e8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f7fc fa6a 	bl	8000648 <__aeabi_dmul>
 8004174:	f7fc fd60 	bl	8000c38 <__aeabi_d2f>
 8004178:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800417a:	ee08 0a10 	vmov	s16, r0
 800417e:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8004182:	f7fc fa09 	bl	8000598 <__aeabi_f2d>
 8004186:	a350      	add	r3, pc, #320	; (adr r3, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	4680      	mov	r8, r0
 800418e:	4689      	mov	r9, r1
 8004190:	f7fc fcea 	bl	8000b68 <__aeabi_dcmpgt>
 8004194:	b1c8      	cbz	r0, 80041ca <HAL_TIM_PeriodElapsedCallback+0xad2>
        angle_rad -= 2.0f * M_PI;
 8004196:	a74e      	add	r7, pc, #312	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8004198:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 800419c:	a54a      	add	r5, pc, #296	; (adr r5, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 800419e:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 80041a2:	4632      	mov	r2, r6
 80041a4:	463b      	mov	r3, r7
 80041a6:	4640      	mov	r0, r8
 80041a8:	4649      	mov	r1, r9
 80041aa:	f7fc f895 	bl	80002d8 <__aeabi_dsub>
 80041ae:	f7fc fd43 	bl	8000c38 <__aeabi_d2f>
 80041b2:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 80041b6:	f7fc f9ef 	bl	8000598 <__aeabi_f2d>
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	4680      	mov	r8, r0
 80041c0:	4689      	mov	r9, r1
 80041c2:	f7fc fcd1 	bl	8000b68 <__aeabi_dcmpgt>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d1eb      	bne.n	80041a2 <HAL_TIM_PeriodElapsedCallback+0xaaa>
    while (angle_rad < -M_PI) {
 80041ca:	a343      	add	r3, pc, #268	; (adr r3, 80042d8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	4640      	mov	r0, r8
 80041d2:	4649      	mov	r1, r9
 80041d4:	f7fc fcaa 	bl	8000b2c <__aeabi_dcmplt>
 80041d8:	b1c8      	cbz	r0, 800420e <HAL_TIM_PeriodElapsedCallback+0xb16>
        angle_rad += 2.0f * M_PI;
 80041da:	a73d      	add	r7, pc, #244	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80041dc:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80041e0:	a53d      	add	r5, pc, #244	; (adr r5, 80042d8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80041e2:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 80041e6:	4632      	mov	r2, r6
 80041e8:	463b      	mov	r3, r7
 80041ea:	4640      	mov	r0, r8
 80041ec:	4649      	mov	r1, r9
 80041ee:	f7fc f875 	bl	80002dc <__adddf3>
 80041f2:	f7fc fd21 	bl	8000c38 <__aeabi_d2f>
 80041f6:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 80041fa:	f7fc f9cd 	bl	8000598 <__aeabi_f2d>
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	4680      	mov	r8, r0
 8004204:	4689      	mov	r9, r1
 8004206:	f7fc fc91 	bl	8000b2c <__aeabi_dcmplt>
 800420a:	2800      	cmp	r0, #0
 800420c:	d1eb      	bne.n	80041e6 <HAL_TIM_PeriodElapsedCallback+0xaee>
    while (angle_rad > M_PI) {
 800420e:	ee18 0a90 	vmov	r0, s17
 8004212:	f7fc f9c1 	bl	8000598 <__aeabi_f2d>
 8004216:	a32c      	add	r3, pc, #176	; (adr r3, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	f7fc fca2 	bl	8000b68 <__aeabi_dcmpgt>
 8004224:	b1d0      	cbz	r0, 800425c <HAL_TIM_PeriodElapsedCallback+0xb64>
        angle_rad -= 2.0f * M_PI;
 8004226:	a72a      	add	r7, pc, #168	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8004228:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 800422c:	f20f 0b98 	addw	fp, pc, #152	; 0x98
 8004230:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8004234:	4632      	mov	r2, r6
 8004236:	463b      	mov	r3, r7
 8004238:	4620      	mov	r0, r4
 800423a:	4629      	mov	r1, r5
 800423c:	f7fc f84c 	bl	80002d8 <__aeabi_dsub>
 8004240:	f7fc fcfa 	bl	8000c38 <__aeabi_d2f>
 8004244:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8004248:	f7fc f9a6 	bl	8000598 <__aeabi_f2d>
 800424c:	4652      	mov	r2, sl
 800424e:	465b      	mov	r3, fp
 8004250:	4604      	mov	r4, r0
 8004252:	460d      	mov	r5, r1
 8004254:	f7fc fc88 	bl	8000b68 <__aeabi_dcmpgt>
 8004258:	2800      	cmp	r0, #0
 800425a:	d1eb      	bne.n	8004234 <HAL_TIM_PeriodElapsedCallback+0xb3c>
    while (angle_rad < -M_PI) {
 800425c:	a31e      	add	r3, pc, #120	; (adr r3, 80042d8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fc fc61 	bl	8000b2c <__aeabi_dcmplt>
 800426a:	2800      	cmp	r0, #0
 800426c:	f43f af30 	beq.w	80040d0 <HAL_TIM_PeriodElapsedCallback+0x9d8>
        angle_rad += 2.0f * M_PI;
 8004270:	a717      	add	r7, pc, #92	; (adr r7, 80042d0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8004272:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8004276:	f20f 0b60 	addw	fp, pc, #96	; 0x60
 800427a:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 800427e:	4632      	mov	r2, r6
 8004280:	463b      	mov	r3, r7
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	f7fc f829 	bl	80002dc <__adddf3>
 800428a:	f7fc fcd5 	bl	8000c38 <__aeabi_d2f>
 800428e:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8004292:	f7fc f981 	bl	8000598 <__aeabi_f2d>
 8004296:	4652      	mov	r2, sl
 8004298:	465b      	mov	r3, fp
 800429a:	4604      	mov	r4, r0
 800429c:	460d      	mov	r5, r1
 800429e:	f7fc fc45 	bl	8000b2c <__aeabi_dcmplt>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d1eb      	bne.n	800427e <HAL_TIM_PeriodElapsedCallback+0xb86>
 80042a6:	e713      	b.n	80040d0 <HAL_TIM_PeriodElapsedCallback+0x9d8>
				 omni_move(1.0, 0.0, 0.0,1.0);//fwd
 80042a8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80042f8 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80042ac:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80042b0:	eef0 0a41 	vmov.f32	s1, s2
 80042b4:	eeb0 0a61 	vmov.f32	s0, s3
 80042b8:	e4bd      	b.n	8003c36 <HAL_TIM_PeriodElapsedCallback+0x53e>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 80042ba:	f7fc f80f 	bl	80002dc <__adddf3>
 80042be:	e71f      	b.n	8004100 <HAL_TIM_PeriodElapsedCallback+0xa08>
		data=0b00000100;//R
 80042c0:	2204      	movs	r2, #4
 80042c2:	e59b      	b.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x704>
 80042c4:	f3af 8000 	nop.w
 80042c8:	54442d18 	.word	0x54442d18
 80042cc:	400921fb 	.word	0x400921fb
 80042d0:	54442d18 	.word	0x54442d18
 80042d4:	401921fb 	.word	0x401921fb
 80042d8:	54442d18 	.word	0x54442d18
 80042dc:	c00921fb 	.word	0xc00921fb
 80042e0:	48b81fe5 	.word	0x48b81fe5
 80042e4:	3fad55df 	.word	0x3fad55df
 80042e8:	16c16c17 	.word	0x16c16c17
 80042ec:	3f76c16c 	.word	0x3f76c16c
 80042f0:	20000fa0 	.word	0x20000fa0
 80042f4:	40490fdb 	.word	0x40490fdb
 80042f8:	00000000 	.word	0x00000000
	else if(SW_data<3000 && SW_data>2000){
 80042fc:	f6a3 33b9 	subw	r3, r3, #3001	; 0xbb9
 8004300:	b29b      	uxth	r3, r3
 8004302:	4283      	cmp	r3, r0
 8004304:	d806      	bhi.n	8004314 <HAL_TIM_PeriodElapsedCallback+0xc1c>
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8004306:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800430a:	ed1f 1a05 	vldr	s2, [pc, #-20]	; 80042f8 <HAL_TIM_PeriodElapsedCallback+0xc00>
 800430e:	eef0 0a61 	vmov.f32	s1, s3
 8004312:	e5c5      	b.n	8003ea0 <HAL_TIM_PeriodElapsedCallback+0x7a8>
				omni_move(0.0, 0.0, 0.0,0.0);
 8004314:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 80042f8 <HAL_TIM_PeriodElapsedCallback+0xc00>
 8004318:	eeb0 1a61 	vmov.f32	s2, s3
 800431c:	eef0 0a61 	vmov.f32	s1, s3
 8004320:	eeb0 0a61 	vmov.f32	s0, s3
 8004324:	f000 fd60 	bl	8004de8 <omni_move>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8004328:	4806      	ldr	r0, [pc, #24]	; (8004344 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004330:	f002 ff1a 	bl	8007168 <HAL_GPIO_WritePin>
 8004334:	e487      	b.n	8003c46 <HAL_TIM_PeriodElapsedCallback+0x54e>
		data=0b00000001;//F
 8004336:	2201      	movs	r2, #1
 8004338:	e560      	b.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x704>
	 		maintask_stop();
 800433a:	f7ff f97b 	bl	8003634 <maintask_stop>
	 		 break;
 800433e:	f7ff ba3b 	b.w	80037b8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8004342:	bf00      	nop
 8004344:	48000800 	.word	0x48000800

08004348 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uint8_t j = 0;

	if (huart->Instance == huart2.Instance) {
 8004348:	4b87      	ldr	r3, [pc, #540]	; (8004568 <HAL_UART_RxCpltCallback+0x220>)
 800434a:	6802      	ldr	r2, [r0, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d000      	beq.n	8004354 <HAL_UART_RxCpltCallback+0xc>
 8004352:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	ed2d 8b02 	vpush	{d8}
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800435a:	4d84      	ldr	r5, [pc, #528]	; (800456c <HAL_UART_RxCpltCallback+0x224>)
 800435c:	782b      	ldrb	r3, [r5, #0]
 800435e:	2bfe      	cmp	r3, #254	; 0xfe
 8004360:	f000 80ef 	beq.w	8004542 <HAL_UART_RxCpltCallback+0x1fa>
 8004364:	462a      	mov	r2, r5
 8004366:	2301      	movs	r3, #1
 8004368:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800436c:	29fe      	cmp	r1, #254	; 0xfe
 800436e:	b2de      	uxtb	r6, r3
 8004370:	469c      	mov	ip, r3
 8004372:	f103 0301 	add.w	r3, r3, #1
 8004376:	d1f7      	bne.n	8004368 <HAL_UART_RxCpltCallback+0x20>
 8004378:	4c7d      	ldr	r4, [pc, #500]	; (8004570 <HAL_UART_RxCpltCallback+0x228>)
 800437a:	f10c 0301 	add.w	r3, ip, #1
			}
		}
		else{
			for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
				if ((j + k) >= sizeof(data_from_ether)) {
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800437e:	3e16      	subs	r6, #22
 8004380:	4621      	mov	r1, r4
 8004382:	442b      	add	r3, r5
 8004384:	f104 0e15 	add.w	lr, r4, #21
				if ((j + k) >= sizeof(data_from_ether)) {
 8004388:	1b5a      	subs	r2, r3, r5
 800438a:	3a01      	subs	r2, #1
 800438c:	2a14      	cmp	r2, #20
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800438e:	eba3 000c 	sub.w	r0, r3, ip
				if ((j + k) >= sizeof(data_from_ether)) {
 8004392:	f340 80c3 	ble.w	800451c <HAL_UART_RxCpltCallback+0x1d4>
 8004396:	5d82      	ldrb	r2, [r0, r6]
 8004398:	f801 2b01 	strb.w	r2, [r1], #1
			for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 800439c:	4571      	cmp	r1, lr
 800439e:	f103 0301 	add.w	r3, r3, #1
 80043a2:	d1f1      	bne.n	8004388 <HAL_UART_RxCpltCallback+0x40>
				else {
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
				}
			}
		}
		if(data_from_ether[sizeof(data_from_ether)-1]==253){
 80043a4:	7d23      	ldrb	r3, [r4, #20]
 80043a6:	2bfd      	cmp	r3, #253	; 0xfd
 80043a8:	f000 80c3 	beq.w	8004532 <HAL_UART_RxCpltCallback+0x1ea>
				Rxbuf_from_Ether_temp[k]=data_from_ether[k];
			}
		}
		else{
			for(uint8_t k=0;k<sizeof(data_from_ether);k++){
				data_from_ether[k]=Rxbuf_from_Ether_temp[k];
 80043ac:	4e71      	ldr	r6, [pc, #452]	; (8004574 <HAL_UART_RxCpltCallback+0x22c>)
 80043ae:	4d70      	ldr	r5, [pc, #448]	; (8004570 <HAL_UART_RxCpltCallback+0x228>)
			}
		}

		vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 80043b0:	ed9f 8a71 	vldr	s16, [pc, #452]	; 8004578 <HAL_UART_RxCpltCallback+0x230>
				Rxbuf_from_Ether_temp[k]=data_from_ether[k];
 80043b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80043b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80043bc:	f845 0b04 	str.w	r0, [r5], #4
 80043c0:	7029      	strb	r1, [r5, #0]
		vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 80043c2:	8820      	ldrh	r0, [r4, #0]
 80043c4:	4d6d      	ldr	r5, [pc, #436]	; (800457c <HAL_UART_RxCpltCallback+0x234>)
 80043c6:	ba40      	rev16	r0, r0
 80043c8:	b280      	uxth	r0, r0
 80043ca:	ee07 0a90 	vmov	s15, r0
 80043ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d2:	ee17 0a90 	vmov	r0, s15
 80043d6:	f7fc f8df 	bl	8000598 <__aeabi_f2d>
 80043da:	a35b      	add	r3, pc, #364	; (adr r3, 8004548 <HAL_UART_RxCpltCallback+0x200>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f7fb ff7a 	bl	80002d8 <__aeabi_dsub>
 80043e4:	a35a      	add	r3, pc, #360	; (adr r3, 8004550 <HAL_UART_RxCpltCallback+0x208>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fc f92d 	bl	8000648 <__aeabi_dmul>
 80043ee:	f7fc fc23 	bl	8000c38 <__aeabi_d2f>
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 80043f2:	8863      	ldrh	r3, [r4, #2]
		vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 80043f4:	6028      	str	r0, [r5, #0]
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 80043f6:	ba5b      	rev16	r3, r3
 80043f8:	b298      	uxth	r0, r3
 80043fa:	ee07 0a90 	vmov	s15, r0
 80043fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004402:	4d5f      	ldr	r5, [pc, #380]	; (8004580 <HAL_UART_RxCpltCallback+0x238>)
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 8004404:	ee17 0a90 	vmov	r0, s15
 8004408:	f7fc f8c6 	bl	8000598 <__aeabi_f2d>
 800440c:	a34e      	add	r3, pc, #312	; (adr r3, 8004548 <HAL_UART_RxCpltCallback+0x200>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f7fb ff61 	bl	80002d8 <__aeabi_dsub>
 8004416:	a34e      	add	r3, pc, #312	; (adr r3, 8004550 <HAL_UART_RxCpltCallback+0x208>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc f914 	bl	8000648 <__aeabi_dmul>
 8004420:	f7fc fc0a 	bl	8000c38 <__aeabi_d2f>
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004424:	88a3      	ldrh	r3, [r4, #4]
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 8004426:	4a57      	ldr	r2, [pc, #348]	; (8004584 <HAL_UART_RxCpltCallback+0x23c>)
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004428:	ba5b      	rev16	r3, r3
 800442a:	b29b      	uxth	r3, r3
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 8004434:	6010      	str	r0, [r2, #0]
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004436:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800443a:	ee17 0a90 	vmov	r0, s15
 800443e:	f7fc f8ab 	bl	8000598 <__aeabi_f2d>
 8004442:	a345      	add	r3, pc, #276	; (adr r3, 8004558 <HAL_UART_RxCpltCallback+0x210>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fc f8fe 	bl	8000648 <__aeabi_dmul>
 800444c:	f7fc fbf4 	bl	8000c38 <__aeabi_d2f>
		theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 8004450:	88e3      	ldrh	r3, [r4, #6]
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004452:	6028      	str	r0, [r5, #0]
		theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 8004454:	ba5b      	rev16	r3, r3
 8004456:	b29b      	uxth	r3, r3
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004460:	4d49      	ldr	r5, [pc, #292]	; (8004588 <HAL_UART_RxCpltCallback+0x240>)
 8004462:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8004466:	ee17 0a90 	vmov	r0, s15
 800446a:	f7fc f895 	bl	8000598 <__aeabi_f2d>
 800446e:	a33a      	add	r3, pc, #232	; (adr r3, 8004558 <HAL_UART_RxCpltCallback+0x210>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc f8e8 	bl	8000648 <__aeabi_dmul>
 8004478:	f7fc fbde 	bl	8000c38 <__aeabi_d2f>

		if(data_from_ether[8]>100){
 800447c:	7a23      	ldrb	r3, [r4, #8]
		theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 800447e:	6028      	str	r0, [r5, #0]
		if(data_from_ether[8]>100){
 8004480:	2b64      	cmp	r3, #100	; 0x64
 8004482:	d859      	bhi.n	8004538 <HAL_UART_RxCpltCallback+0x1f0>
			chipEN=1;
			data_from_ether[8]=data_from_ether[8]-100;
		}
		else{
			chipEN=0;
 8004484:	2100      	movs	r1, #0
		}
		kick_power=(float32_t)data_from_ether[8]/20.0;
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	4a40      	ldr	r2, [pc, #256]	; (800458c <HAL_UART_RxCpltCallback+0x244>)
		drible_power=(float32_t)data_from_ether[9]/20.0;
 800448c:	4d40      	ldr	r5, [pc, #256]	; (8004590 <HAL_UART_RxCpltCallback+0x248>)
 800448e:	7011      	strb	r1, [r2, #0]
		kick_power=(float32_t)data_from_ether[8]/20.0;
 8004490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004494:	ee17 0a90 	vmov	r0, s15
 8004498:	f7fc f87e 	bl	8000598 <__aeabi_f2d>
 800449c:	a330      	add	r3, pc, #192	; (adr r3, 8004560 <HAL_UART_RxCpltCallback+0x218>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fc f8d1 	bl	8000648 <__aeabi_dmul>
 80044a6:	f7fc fbc7 	bl	8000c38 <__aeabi_d2f>
		drible_power=(float32_t)data_from_ether[9]/20.0;
 80044aa:	7a63      	ldrb	r3, [r4, #9]
		kick_power=(float32_t)data_from_ether[8]/20.0;
 80044ac:	4a39      	ldr	r2, [pc, #228]	; (8004594 <HAL_UART_RxCpltCallback+0x24c>)
		drible_power=(float32_t)data_from_ether[9]/20.0;
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
		kick_power=(float32_t)data_from_ether[8]/20.0;
 80044b6:	6010      	str	r0, [r2, #0]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 80044b8:	ee17 0a90 	vmov	r0, s15
 80044bc:	f7fc f86c 	bl	8000598 <__aeabi_f2d>
 80044c0:	a327      	add	r3, pc, #156	; (adr r3, 8004560 <HAL_UART_RxCpltCallback+0x218>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f7fc f8bf 	bl	8000648 <__aeabi_dmul>
 80044ca:	f7fc fbb5 	bl	8000c38 <__aeabi_d2f>

		keeper_EN=data_from_ether[10];

		ball_x = ((int)(data_from_ether[12]<<8 | data_from_ether[13])-32767);
 80044ce:	89a3      	ldrh	r3, [r4, #12]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 80044d0:	6028      	str	r0, [r5, #0]
		ball_x = ((int)(data_from_ether[12]<<8 | data_from_ether[13])-32767);
 80044d2:	ba5b      	rev16	r3, r3
		ball_y = ((int)(data_from_ether[14]<<8 | data_from_ether[15])-32767);
 80044d4:	89e1      	ldrh	r1, [r4, #14]
		keeper_EN=data_from_ether[10];
 80044d6:	4d30      	ldr	r5, [pc, #192]	; (8004598 <HAL_UART_RxCpltCallback+0x250>)
		vision_x = ((int)(data_from_ether[16]<<8 | data_from_ether[17])-32767);
 80044d8:	8a22      	ldrh	r2, [r4, #16]
		ball_x = ((int)(data_from_ether[12]<<8 | data_from_ether[13])-32767);
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f5a3 40ff 	sub.w	r0, r3, #32640	; 0x7f80
		vision_y = ((int)(data_from_ether[18]<<8 | data_from_ether[19])-32767);
 80044e0:	8a63      	ldrh	r3, [r4, #18]
		keeper_EN=data_from_ether[10];
 80044e2:	7aa4      	ldrb	r4, [r4, #10]
 80044e4:	702c      	strb	r4, [r5, #0]
		ball_y = ((int)(data_from_ether[14]<<8 | data_from_ether[15])-32767);
 80044e6:	ba49      	rev16	r1, r1
		ball_x = ((int)(data_from_ether[12]<<8 | data_from_ether[13])-32767);
 80044e8:	4c2c      	ldr	r4, [pc, #176]	; (800459c <HAL_UART_RxCpltCallback+0x254>)
 80044ea:	387f      	subs	r0, #127	; 0x7f
		ball_y = ((int)(data_from_ether[14]<<8 | data_from_ether[15])-32767);
 80044ec:	b289      	uxth	r1, r1
	}
}
 80044ee:	ecbd 8b02 	vpop	{d8}
		vision_x = ((int)(data_from_ether[16]<<8 | data_from_ether[17])-32767);
 80044f2:	ba52      	rev16	r2, r2
		ball_y = ((int)(data_from_ether[14]<<8 | data_from_ether[15])-32767);
 80044f4:	f5a1 41ff 	sub.w	r1, r1, #32640	; 0x7f80
		vision_y = ((int)(data_from_ether[18]<<8 | data_from_ether[19])-32767);
 80044f8:	ba5b      	rev16	r3, r3
		ball_x = ((int)(data_from_ether[12]<<8 | data_from_ether[13])-32767);
 80044fa:	6020      	str	r0, [r4, #0]
		ball_y = ((int)(data_from_ether[14]<<8 | data_from_ether[15])-32767);
 80044fc:	4828      	ldr	r0, [pc, #160]	; (80045a0 <HAL_UART_RxCpltCallback+0x258>)
 80044fe:	397f      	subs	r1, #127	; 0x7f
		vision_x = ((int)(data_from_ether[16]<<8 | data_from_ether[17])-32767);
 8004500:	b292      	uxth	r2, r2
		vision_y = ((int)(data_from_ether[18]<<8 | data_from_ether[19])-32767);
 8004502:	b29b      	uxth	r3, r3
		ball_y = ((int)(data_from_ether[14]<<8 | data_from_ether[15])-32767);
 8004504:	6001      	str	r1, [r0, #0]
		vision_x = ((int)(data_from_ether[16]<<8 | data_from_ether[17])-32767);
 8004506:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
 800450a:	4826      	ldr	r0, [pc, #152]	; (80045a4 <HAL_UART_RxCpltCallback+0x25c>)
		vision_y = ((int)(data_from_ether[18]<<8 | data_from_ether[19])-32767);
 800450c:	4926      	ldr	r1, [pc, #152]	; (80045a8 <HAL_UART_RxCpltCallback+0x260>)
 800450e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
		vision_x = ((int)(data_from_ether[16]<<8 | data_from_ether[17])-32767);
 8004512:	3a7f      	subs	r2, #127	; 0x7f
		vision_y = ((int)(data_from_ether[18]<<8 | data_from_ether[19])-32767);
 8004514:	3b7f      	subs	r3, #127	; 0x7f
		vision_x = ((int)(data_from_ether[16]<<8 | data_from_ether[17])-32767);
 8004516:	6002      	str	r2, [r0, #0]
		vision_y = ((int)(data_from_ether[18]<<8 | data_from_ether[19])-32767);
 8004518:	600b      	str	r3, [r1, #0]
}
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004520:	f801 2b01 	strb.w	r2, [r1], #1
			for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 8004524:	458e      	cmp	lr, r1
 8004526:	f47f af2f 	bne.w	8004388 <HAL_UART_RxCpltCallback+0x40>
		if(data_from_ether[sizeof(data_from_ether)-1]==253){
 800452a:	7d23      	ldrb	r3, [r4, #20]
 800452c:	2bfd      	cmp	r3, #253	; 0xfd
 800452e:	f47f af3d 	bne.w	80043ac <HAL_UART_RxCpltCallback+0x64>
				Rxbuf_from_Ether_temp[k]=data_from_ether[k];
 8004532:	4e0f      	ldr	r6, [pc, #60]	; (8004570 <HAL_UART_RxCpltCallback+0x228>)
 8004534:	4d0f      	ldr	r5, [pc, #60]	; (8004574 <HAL_UART_RxCpltCallback+0x22c>)
 8004536:	e73b      	b.n	80043b0 <HAL_UART_RxCpltCallback+0x68>
			data_from_ether[8]=data_from_ether[8]-100;
 8004538:	3b64      	subs	r3, #100	; 0x64
 800453a:	b2db      	uxtb	r3, r3
 800453c:	7223      	strb	r3, [r4, #8]
			chipEN=1;
 800453e:	2101      	movs	r1, #1
 8004540:	e7a1      	b.n	8004486 <HAL_UART_RxCpltCallback+0x13e>
	uint8_t j = 0;
 8004542:	2600      	movs	r6, #0
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004544:	46b4      	mov	ip, r6
 8004546:	e717      	b.n	8004378 <HAL_UART_RxCpltCallback+0x30>
 8004548:	00000000 	.word	0x00000000
 800454c:	40dfffc0 	.word	0x40dfffc0
 8004550:	007000e0 	.word	0x007000e0
 8004554:	3f2c0038 	.word	0x3f2c0038
 8004558:	989f5e57 	.word	0x989f5e57
 800455c:	3f19222d 	.word	0x3f19222d
 8004560:	9999999a 	.word	0x9999999a
 8004564:	3fa99999 	.word	0x3fa99999
 8004568:	200012d0 	.word	0x200012d0
 800456c:	20000e24 	.word	0x20000e24
 8004570:	20000edc 	.word	0x20000edc
 8004574:	20000e3c 	.word	0x20000e3c
 8004578:	46fffe00 	.word	0x46fffe00
 800457c:	20000fa8 	.word	0x20000fa8
 8004580:	20000fa0 	.word	0x20000fa0
 8004584:	20000fac 	.word	0x20000fac
 8004588:	20000f9c 	.word	0x20000f9c
 800458c:	20000ed6 	.word	0x20000ed6
 8004590:	20000ef4 	.word	0x20000ef4
 8004594:	20000f24 	.word	0x20000f24
 8004598:	20000f20 	.word	0x20000f20
 800459c:	20000ec8 	.word	0x20000ec8
 80045a0:	20000ecc 	.word	0x20000ecc
 80045a4:	20000fb0 	.word	0x20000fb0
 80045a8:	20000fb4 	.word	0x20000fb4

080045ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	if (huart->Instance == hlpuart1.Instance) {
 80045ac:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_UART_TxCpltCallback+0x10>)
 80045ae:	6802      	ldr	r2, [r0, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d000      	beq.n	80045b8 <HAL_UART_TxCpltCallback+0xc>
		dma_printf_send_it(huart);
	}
}
 80045b6:	4770      	bx	lr
		dma_printf_send_it(huart);
 80045b8:	f7fd b8ea 	b.w	8001790 <dma_printf_send_it>
 80045bc:	20001240 	.word	0x20001240

080045c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		maintask_emargency();
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80045c2:	4c07      	ldr	r4, [pc, #28]	; (80045e0 <Error_Handler+0x20>)
		maintask_emargency();
 80045c4:	f7fe ff38 	bl	8003438 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80045c8:	4620      	mov	r0, r4
 80045ca:	2201      	movs	r2, #1
 80045cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045d0:	f002 fdca 	bl	8007168 <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 80045d4:	21c8      	movs	r1, #200	; 0xc8
 80045d6:	4608      	mov	r0, r1
 80045d8:	f7fc fde8 	bl	80011ac <actuator_buzzer>
	while(1){
 80045dc:	e7f2      	b.n	80045c4 <Error_Handler+0x4>
 80045de:	bf00      	nop
 80045e0:	48000400 	.word	0x48000400

080045e4 <SystemClock_Config>:
{
 80045e4:	b510      	push	{r4, lr}
 80045e6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045e8:	2238      	movs	r2, #56	; 0x38
 80045ea:	2100      	movs	r1, #0
 80045ec:	a806      	add	r0, sp, #24
 80045ee:	f006 fb45 	bl	800ac7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045f2:	2000      	movs	r0, #0
 80045f4:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80045f8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80045fc:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80045fe:	f002 fdcf 	bl	80071a0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004602:	2001      	movs	r0, #1
 8004604:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004608:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800460a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800460e:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004610:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004612:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004614:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004618:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800461c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004620:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004622:	f002 fe3b 	bl	800729c <HAL_RCC_OscConfig>
 8004626:	b970      	cbnz	r0, 8004646 <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004628:	2104      	movs	r1, #4
 800462a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800462c:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800462e:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004632:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004636:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800463a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800463c:	f003 f8b2 	bl	80077a4 <HAL_RCC_ClockConfig>
 8004640:	b908      	cbnz	r0, 8004646 <SystemClock_Config+0x62>
}
 8004642:	b014      	add	sp, #80	; 0x50
 8004644:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004646:	f7ff ffbb 	bl	80045c0 <Error_Handler>
 800464a:	bf00      	nop

0800464c <main>:
{
 800464c:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800464e:	f001 f8b3 	bl	80057b8 <HAL_Init>
  SystemClock_Config();
 8004652:	f7ff ffc7 	bl	80045e4 <SystemClock_Config>
  MX_GPIO_Init();
 8004656:	f7fd fa09 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 800465a:	f7fd f837 	bl	80016cc <MX_DMA_Init>
  MX_FDCAN1_Init();
 800465e:	f7fd f8fb 	bl	8001858 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8004662:	f000 fe41 	bl	80052e8 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8004666:	f000 fe8d 	bl	8005384 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800466a:	f000 fed3 	bl	8005414 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800466e:	f000 fc39 	bl	8004ee4 <MX_SPI1_Init>
  MX_TIM5_Init();
 8004672:	f000 fd69 	bl	8005148 <MX_TIM5_Init>
  MX_TIM7_Init();
 8004676:	f000 fdd5 	bl	8005224 <MX_TIM7_Init>
  MX_ADC5_Init();
 800467a:	f7fc fe57 	bl	800132c <MX_ADC5_Init>
  MX_ADC3_Init();
 800467e:	f7fc fdfd 	bl	800127c <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8004682:	f7fd f90f 	bl	80018a4 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8004686:	f7fc fda3 	bl	80011d0 <MX_ADC1_Init>
  check_motor2=0;
 800468a:	4a73      	ldr	r2, [pc, #460]	; (8004858 <main+0x20c>)
  check_motor4=0;
 800468c:	4b73      	ldr	r3, [pc, #460]	; (800485c <main+0x210>)
  check_motor3=0;
 800468e:	4974      	ldr	r1, [pc, #464]	; (8004860 <main+0x214>)
  check_power=0;
 8004690:	4874      	ldr	r0, [pc, #464]	; (8004864 <main+0x218>)
  check_motor1=0;
 8004692:	4d75      	ldr	r5, [pc, #468]	; (8004868 <main+0x21c>)
 8004694:	2400      	movs	r4, #0
  check_motor2=0;
 8004696:	7014      	strb	r4, [r2, #0]
  check_motor4=0;
 8004698:	701c      	strb	r4, [r3, #0]
  check_FC=0;
 800469a:	4a74      	ldr	r2, [pc, #464]	; (800486c <main+0x220>)
  kick_state=0;
 800469c:	4b74      	ldr	r3, [pc, #464]	; (8004870 <main+0x224>)
  check_motor3=0;
 800469e:	700c      	strb	r4, [r1, #0]
  check_power=0;
 80046a0:	7004      	strb	r4, [r0, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80046a2:	2104      	movs	r1, #4
 80046a4:	4873      	ldr	r0, [pc, #460]	; (8004874 <main+0x228>)
  check_FC=0;
 80046a6:	7014      	strb	r4, [r2, #0]
  kick_state=0;
 80046a8:	601c      	str	r4, [r3, #0]
  check_motor1=0;
 80046aa:	702c      	strb	r4, [r5, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80046ac:	f004 f89a 	bl	80087e4 <HAL_TIM_PWM_Start>
      actuator_buzzer(20, 20);
 80046b0:	2114      	movs	r1, #20
 80046b2:	4608      	mov	r0, r1
 80046b4:	f7fc fd7a 	bl	80011ac <actuator_buzzer>
 80046b8:	2114      	movs	r1, #20
 80046ba:	4608      	mov	r0, r1
 80046bc:	f7fc fd76 	bl	80011ac <actuator_buzzer>
 80046c0:	2114      	movs	r1, #20
 80046c2:	4608      	mov	r0, r1
    setbuf(stdin, NULL);
 80046c4:	4d6c      	ldr	r5, [pc, #432]	; (8004878 <main+0x22c>)
      actuator_buzzer(20, 20);
 80046c6:	f7fc fd71 	bl	80011ac <actuator_buzzer>
    HAL_UART_Init(&hlpuart1);
 80046ca:	486c      	ldr	r0, [pc, #432]	; (800487c <main+0x230>)
 80046cc:	f005 fa32 	bl	8009b34 <HAL_UART_Init>
    setbuf(stdin, NULL);
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	4621      	mov	r1, r4
 80046d4:	6858      	ldr	r0, [r3, #4]
 80046d6:	f006 f943 	bl	800a960 <setbuf>
    setbuf(stdout, NULL);
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	4621      	mov	r1, r4
 80046de:	6898      	ldr	r0, [r3, #8]
 80046e0:	f006 f93e 	bl	800a960 <setbuf>
    setbuf(stderr, NULL);
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	4621      	mov	r1, r4
 80046e8:	68d8      	ldr	r0, [r3, #12]
 80046ea:	f006 f939 	bl	800a960 <setbuf>
    dma_printf_init(&hlpuart1);
 80046ee:	4863      	ldr	r0, [pc, #396]	; (800487c <main+0x230>)
 80046f0:	f7fd f83e 	bl	8001770 <dma_printf_init>
    dma_scanf_init(&hlpuart1);
 80046f4:	4861      	ldr	r0, [pc, #388]	; (800487c <main+0x230>)
 80046f6:	f7fd f89b 	bl	8001830 <dma_scanf_init>
    printf("start\r\n");
 80046fa:	4861      	ldr	r0, [pc, #388]	; (8004880 <main+0x234>)
 80046fc:	f006 f928 	bl	800a950 <puts>
    can1_init_ibis(&hfdcan1);
 8004700:	4860      	ldr	r0, [pc, #384]	; (8004884 <main+0x238>)
 8004702:	f7fc ff45 	bl	8001590 <can1_init_ibis>
    can2_init_ibis(&hfdcan2);
 8004706:	4860      	ldr	r0, [pc, #384]	; (8004888 <main+0x23c>)
 8004708:	f7fc ff92 	bl	8001630 <can2_init_ibis>
    HAL_FDCAN_Start(&hfdcan1);
 800470c:	485d      	ldr	r0, [pc, #372]	; (8004884 <main+0x238>)
 800470e:	f002 f9d7 	bl	8006ac0 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004712:	485c      	ldr	r0, [pc, #368]	; (8004884 <main+0x238>)
 8004714:	4622      	mov	r2, r4
 8004716:	2101      	movs	r1, #1
 8004718:	f002 fada 	bl	8006cd0 <HAL_FDCAN_ActivateNotification>
 800471c:	b950      	cbnz	r0, 8004734 <main+0xe8>
    HAL_FDCAN_Start(&hfdcan2);
 800471e:	4604      	mov	r4, r0
 8004720:	4859      	ldr	r0, [pc, #356]	; (8004888 <main+0x23c>)
 8004722:	f002 f9cd 	bl	8006ac0 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004726:	4622      	mov	r2, r4
 8004728:	4857      	ldr	r0, [pc, #348]	; (8004888 <main+0x23c>)
 800472a:	2101      	movs	r1, #1
 800472c:	f002 fad0 	bl	8006cd0 <HAL_FDCAN_ActivateNotification>
 8004730:	4604      	mov	r4, r0
 8004732:	b108      	cbz	r0, 8004738 <main+0xec>
      Error_Handler();
 8004734:	f7ff ff44 	bl	80045c0 <Error_Handler>
    HAL_UART_Init(&huart2);
 8004738:	4854      	ldr	r0, [pc, #336]	; (800488c <main+0x240>)
 800473a:	f005 f9fb 	bl	8009b34 <HAL_UART_Init>
    HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_Ether,Rxbufsize_from_Ether);
 800473e:	4954      	ldr	r1, [pc, #336]	; (8004890 <main+0x244>)
 8004740:	4852      	ldr	r0, [pc, #328]	; (800488c <main+0x240>)
 8004742:	2216      	movs	r2, #22
 8004744:	f005 fab6 	bl	8009cb4 <HAL_UART_Receive_DMA>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense,1);
 8004748:	4952      	ldr	r1, [pc, #328]	; (8004894 <main+0x248>)
 800474a:	4853      	ldr	r0, [pc, #332]	; (8004898 <main+0x24c>)
 800474c:	2201      	movs	r2, #1
 800474e:	f001 fc9f 	bl	8006090 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense,1);
 8004752:	4952      	ldr	r1, [pc, #328]	; (800489c <main+0x250>)
 8004754:	4852      	ldr	r0, [pc, #328]	; (80048a0 <main+0x254>)
 8004756:	2201      	movs	r2, #1
 8004758:	f001 fc9a 	bl	8006090 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata,1);
 800475c:	2201      	movs	r2, #1
 800475e:	4951      	ldr	r1, [pc, #324]	; (80048a4 <main+0x258>)
 8004760:	4851      	ldr	r0, [pc, #324]	; (80048a8 <main+0x25c>)
 8004762:	f001 fc95 	bl	8006090 <HAL_ADC_Start_DMA>
    actuator_power_ONOFF(0);
 8004766:	4620      	mov	r0, r4
 8004768:	f7fc fcf0 	bl	800114c <actuator_power_ONOFF>
    HAL_Delay(20);
 800476c:	2014      	movs	r0, #20
 800476e:	f001 f83f 	bl	80057f0 <HAL_Delay>
    actuator_motor1(0.0,0.0);
 8004772:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80048ac <main+0x260>
 8004776:	eeb0 0a60 	vmov.f32	s0, s1
 800477a:	f7fc fc2b 	bl	8000fd4 <actuator_motor1>
    actuator_motor2(0.0,0.0);
 800477e:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80048ac <main+0x260>
 8004782:	eeb0 0a60 	vmov.f32	s0, s1
 8004786:	f7fc fc41 	bl	800100c <actuator_motor2>
    actuator_motor3(0.0,0.0);
 800478a:	eddf 0a48 	vldr	s1, [pc, #288]	; 80048ac <main+0x260>
 800478e:	eeb0 0a60 	vmov.f32	s0, s1
 8004792:	f7fc fc57 	bl	8001044 <actuator_motor3>
    actuator_motor4(0.0,0.0);
 8004796:	eddf 0a45 	vldr	s1, [pc, #276]	; 80048ac <main+0x260>
 800479a:	eeb0 0a60 	vmov.f32	s0, s1
 800479e:	f7fc fc6d 	bl	800107c <actuator_motor4>
    actuator_motor5(0.0,0.0);
 80047a2:	eddf 0a42 	vldr	s1, [pc, #264]	; 80048ac <main+0x260>
 80047a6:	eeb0 0a60 	vmov.f32	s0, s1
 80047aa:	f7fc fc83 	bl	80010b4 <actuator_motor5>
    actuator_kicker(1, 1);
 80047ae:	2101      	movs	r1, #1
 80047b0:	4608      	mov	r0, r1
 80047b2:	f7fc fcbb 	bl	800112c <actuator_kicker>
    actuator_kicker_voltage(250.0);
 80047b6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80048b0 <main+0x264>
 80047ba:	f7fc fc97 	bl	80010ec <actuator_kicker_voltage>
    actuator_power_param(1,15.0);//min voltage
 80047be:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80047c2:	2001      	movs	r0, #1
 80047c4:	f7fc fcd2 	bl	800116c <actuator_power_param>
    actuator_power_param(2,35.0);//max voltage
 80047c8:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80048b4 <main+0x268>
 80047cc:	2002      	movs	r0, #2
 80047ce:	f7fc fccd 	bl	800116c <actuator_power_param>
    actuator_power_param(3,50.0);//max current
 80047d2:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80048b8 <main+0x26c>
 80047d6:	2003      	movs	r0, #3
 80047d8:	f7fc fcc8 	bl	800116c <actuator_power_param>
    actuator_power_param(4,90.0);//max temp(fet)
 80047dc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80048bc <main+0x270>
 80047e0:	2004      	movs	r0, #4
 80047e2:	f7fc fcc3 	bl	800116c <actuator_power_param>
    actuator_power_param(5,90.0);//max temp(solenoid)
 80047e6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80048bc <main+0x270>
 80047ea:	2005      	movs	r0, #5
 80047ec:	f7fc fcbe 	bl	800116c <actuator_power_param>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80047f0:	4833      	ldr	r0, [pc, #204]	; (80048c0 <main+0x274>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047f8:	f002 fcb6 	bl	8007168 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80047fc:	2201      	movs	r2, #1
 80047fe:	4611      	mov	r1, r2
 8004800:	482f      	ldr	r0, [pc, #188]	; (80048c0 <main+0x274>)
 8004802:	f002 fcb1 	bl	8007168 <HAL_GPIO_WritePin>
    ICM20602_init();
 8004806:	f7fd f9df 	bl	8001bc8 <ICM20602_init>
    ICM20602_IMU_calibration2();
 800480a:	f7fd ff59 	bl	80026c0 <ICM20602_IMU_calibration2>
    ICM20602_clearAngle();
 800480e:	f7fd fad1 	bl	8001db4 <ICM20602_clearAngle>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8004812:	4622      	mov	r2, r4
 8004814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004818:	4829      	ldr	r0, [pc, #164]	; (80048c0 <main+0x274>)
 800481a:	f002 fca5 	bl	8007168 <HAL_GPIO_WritePin>
    actuator_power_ONOFF(1);
 800481e:	2001      	movs	r0, #1
 8004820:	f7fc fc94 	bl	800114c <actuator_power_ONOFF>
    	actuator_buzzer(40, 40);
 8004824:	2128      	movs	r1, #40	; 0x28
 8004826:	4608      	mov	r0, r1
 8004828:	f7fc fcc0 	bl	80011ac <actuator_buzzer>
 800482c:	2128      	movs	r1, #40	; 0x28
 800482e:	4608      	mov	r0, r1
 8004830:	f7fc fcbc 	bl	80011ac <actuator_buzzer>
 8004834:	2128      	movs	r1, #40	; 0x28
 8004836:	4608      	mov	r0, r1
 8004838:	f7fc fcb8 	bl	80011ac <actuator_buzzer>
    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <main+0x278>)
    HAL_Delay(500);
 800483e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 8004842:	74dc      	strb	r4, [r3, #19]
    HAL_Delay(500);
 8004844:	f000 ffd4 	bl	80057f0 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim7);
 8004848:	481f      	ldr	r0, [pc, #124]	; (80048c8 <main+0x27c>)
 800484a:	f003 feef 	bl	800862c <HAL_TIM_Base_Start_IT>
	mouse_odom[0] = 0;
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <main+0x280>)
	mouse_odom[1] = 0;
 8004850:	e9c3 4400 	strd	r4, r4, [r3]
  while (1)
 8004854:	e7fe      	b.n	8004854 <main+0x208>
 8004856:	bf00      	nop
 8004858:	20000ed2 	.word	0x20000ed2
 800485c:	20000ed4 	.word	0x20000ed4
 8004860:	20000ed3 	.word	0x20000ed3
 8004864:	20000ed5 	.word	0x20000ed5
 8004868:	20000ed1 	.word	0x20000ed1
 800486c:	20000ed0 	.word	0x20000ed0
 8004870:	20000f28 	.word	0x20000f28
 8004874:	20001024 	.word	0x20001024
 8004878:	2000006c 	.word	0x2000006c
 800487c:	20001240 	.word	0x20001240
 8004880:	0800cb80 	.word	0x0800cb80
 8004884:	20000c90 	.word	0x20000c90
 8004888:	20000cf4 	.word	0x20000cf4
 800488c:	200012d0 	.word	0x200012d0
 8004890:	20000e24 	.word	0x20000e24
 8004894:	20000e88 	.word	0x20000e88
 8004898:	20000200 	.word	0x20000200
 800489c:	20000dd0 	.word	0x20000dd0
 80048a0:	2000026c 	.word	0x2000026c
 80048a4:	20000e54 	.word	0x20000e54
 80048a8:	200002d8 	.word	0x200002d8
 80048ac:	00000000 	.word	0x00000000
 80048b0:	437a0000 	.word	0x437a0000
 80048b4:	420c0000 	.word	0x420c0000
 80048b8:	42480000 	.word	0x42480000
 80048bc:	42b40000 	.word	0x42b40000
 80048c0:	48000800 	.word	0x48000800
 80048c4:	20000edc 	.word	0x20000edc
 80048c8:	20001070 	.word	0x20001070
 80048cc:	20000f6c 	.word	0x20000f6c

080048d0 <HAL_FDCAN_RxFifo0Callback>:
{
 80048d0:	b538      	push	{r3, r4, r5, lr}
	if (hfdcan->Instance == hfdcan1.Instance) {
 80048d2:	4bd9      	ldr	r3, [pc, #868]	; (8004c38 <HAL_FDCAN_RxFifo0Callback+0x368>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	6803      	ldr	r3, [r0, #0]
 80048d8:	4293      	cmp	r3, r2
 80048da:	f000 80a3 	beq.w	8004a24 <HAL_FDCAN_RxFifo0Callback+0x154>
	else if (hfdcan->Instance == hfdcan2.Instance) {
 80048de:	4ad7      	ldr	r2, [pc, #860]	; (8004c3c <HAL_FDCAN_RxFifo0Callback+0x36c>)
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d000      	beq.n	80048e8 <HAL_FDCAN_RxFifo0Callback+0x18>
}
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
		   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80048e8:	07cb      	lsls	r3, r1, #31
 80048ea:	d5fc      	bpl.n	80048e6 <HAL_FDCAN_RxFifo0Callback+0x16>
		   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80048ec:	4cd4      	ldr	r4, [pc, #848]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 80048ee:	4dd5      	ldr	r5, [pc, #852]	; (8004c44 <HAL_FDCAN_RxFifo0Callback+0x374>)
 80048f0:	4623      	mov	r3, r4
 80048f2:	462a      	mov	r2, r5
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	f002 f961 	bl	8006bbc <HAL_FDCAN_GetRxMessage>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f040 8218 	bne.w	8004d30 <HAL_FDCAN_RxFifo0Callback+0x460>
			switch (RxHeader.Identifier){
 8004900:	682a      	ldr	r2, [r5, #0]
 8004902:	f240 2341 	movw	r3, #577	; 0x241
 8004906:	429a      	cmp	r2, r3
 8004908:	d8ed      	bhi.n	80048e6 <HAL_FDCAN_RxFifo0Callback+0x16>
 800490a:	f240 2301 	movw	r3, #513	; 0x201
 800490e:	429a      	cmp	r2, r3
 8004910:	f240 8128 	bls.w	8004b64 <HAL_FDCAN_RxFifo0Callback+0x294>
 8004914:	f2a2 2202 	subw	r2, r2, #514	; 0x202
 8004918:	2a3f      	cmp	r2, #63	; 0x3f
 800491a:	d8e4      	bhi.n	80048e6 <HAL_FDCAN_RxFifo0Callback+0x16>
 800491c:	a301      	add	r3, pc, #4	; (adr r3, 8004924 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800491e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004c75 	.word	0x08004c75
 8004928:	08004c9f 	.word	0x08004c9f
 800492c:	080048e7 	.word	0x080048e7
 8004930:	080048e7 	.word	0x080048e7
 8004934:	080048e7 	.word	0x080048e7
 8004938:	080048e7 	.word	0x080048e7
 800493c:	080048e7 	.word	0x080048e7
 8004940:	080048e7 	.word	0x080048e7
 8004944:	080048e7 	.word	0x080048e7
 8004948:	080048e7 	.word	0x080048e7
 800494c:	080048e7 	.word	0x080048e7
 8004950:	080048e7 	.word	0x080048e7
 8004954:	080048e7 	.word	0x080048e7
 8004958:	080048e7 	.word	0x080048e7
 800495c:	080048e7 	.word	0x080048e7
 8004960:	080048e7 	.word	0x080048e7
 8004964:	080048e7 	.word	0x080048e7
 8004968:	080048e7 	.word	0x080048e7
 800496c:	080048e7 	.word	0x080048e7
 8004970:	08004c91 	.word	0x08004c91
 8004974:	08004d1d 	.word	0x08004d1d
 8004978:	080048e7 	.word	0x080048e7
 800497c:	080048e7 	.word	0x080048e7
 8004980:	080048e7 	.word	0x080048e7
 8004984:	080048e7 	.word	0x080048e7
 8004988:	080048e7 	.word	0x080048e7
 800498c:	080048e7 	.word	0x080048e7
 8004990:	080048e7 	.word	0x080048e7
 8004994:	080048e7 	.word	0x080048e7
 8004998:	080048e7 	.word	0x080048e7
 800499c:	080048e7 	.word	0x080048e7
 80049a0:	080048e7 	.word	0x080048e7
 80049a4:	08004d0f 	.word	0x08004d0f
 80049a8:	08004d01 	.word	0x08004d01
 80049ac:	08004b93 	.word	0x08004b93
 80049b0:	080048e7 	.word	0x080048e7
 80049b4:	080048e7 	.word	0x080048e7
 80049b8:	080048e7 	.word	0x080048e7
 80049bc:	080048e7 	.word	0x080048e7
 80049c0:	080048e7 	.word	0x080048e7
 80049c4:	080048e7 	.word	0x080048e7
 80049c8:	080048e7 	.word	0x080048e7
 80049cc:	080048e7 	.word	0x080048e7
 80049d0:	080048e7 	.word	0x080048e7
 80049d4:	080048e7 	.word	0x080048e7
 80049d8:	080048e7 	.word	0x080048e7
 80049dc:	080048e7 	.word	0x080048e7
 80049e0:	080048e7 	.word	0x080048e7
 80049e4:	08004ced 	.word	0x08004ced
 80049e8:	08004cd9 	.word	0x08004cd9
 80049ec:	08004b7f 	.word	0x08004b7f
 80049f0:	080048e7 	.word	0x080048e7
 80049f4:	080048e7 	.word	0x080048e7
 80049f8:	080048e7 	.word	0x080048e7
 80049fc:	080048e7 	.word	0x080048e7
 8004a00:	080048e7 	.word	0x080048e7
 8004a04:	080048e7 	.word	0x080048e7
 8004a08:	080048e7 	.word	0x080048e7
 8004a0c:	080048e7 	.word	0x080048e7
 8004a10:	080048e7 	.word	0x080048e7
 8004a14:	080048e7 	.word	0x080048e7
 8004a18:	080048e7 	.word	0x080048e7
 8004a1c:	080048e7 	.word	0x080048e7
 8004a20:	08004cbb 	.word	0x08004cbb
	   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8004a24:	07ca      	lsls	r2, r1, #31
 8004a26:	f57f af5e 	bpl.w	80048e6 <HAL_FDCAN_RxFifo0Callback+0x16>
	   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8004a2a:	4c85      	ldr	r4, [pc, #532]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004a2c:	4d85      	ldr	r5, [pc, #532]	; (8004c44 <HAL_FDCAN_RxFifo0Callback+0x374>)
 8004a2e:	4623      	mov	r3, r4
 8004a30:	462a      	mov	r2, r5
 8004a32:	2140      	movs	r1, #64	; 0x40
 8004a34:	f002 f8c2 	bl	8006bbc <HAL_FDCAN_GetRxMessage>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f040 8179 	bne.w	8004d30 <HAL_FDCAN_RxFifo0Callback+0x460>
		switch (RxHeader.Identifier){
 8004a3e:	682a      	ldr	r2, [r5, #0]
 8004a40:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
 8004a44:	f63f af4f 	bhi.w	80048e6 <HAL_FDCAN_RxFifo0Callback+0x16>
 8004a48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004a4c:	f0c0 808a 	bcc.w	8004b64 <HAL_FDCAN_RxFifo0Callback+0x294>
 8004a50:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8004a54:	2a40      	cmp	r2, #64	; 0x40
 8004a56:	f63f af46 	bhi.w	80048e6 <HAL_FDCAN_RxFifo0Callback+0x16>
 8004a5a:	a301      	add	r3, pc, #4	; (adr r3, 8004a60 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8004a5c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8004a60:	08004c0f 	.word	0x08004c0f
 8004a64:	08004bf3 	.word	0x08004bf3
 8004a68:	080048e7 	.word	0x080048e7
 8004a6c:	080048e7 	.word	0x080048e7
 8004a70:	080048e7 	.word	0x080048e7
 8004a74:	080048e7 	.word	0x080048e7
 8004a78:	080048e7 	.word	0x080048e7
 8004a7c:	080048e7 	.word	0x080048e7
 8004a80:	080048e7 	.word	0x080048e7
 8004a84:	080048e7 	.word	0x080048e7
 8004a88:	080048e7 	.word	0x080048e7
 8004a8c:	080048e7 	.word	0x080048e7
 8004a90:	080048e7 	.word	0x080048e7
 8004a94:	080048e7 	.word	0x080048e7
 8004a98:	080048e7 	.word	0x080048e7
 8004a9c:	080048e7 	.word	0x080048e7
 8004aa0:	080048e7 	.word	0x080048e7
 8004aa4:	080048e7 	.word	0x080048e7
 8004aa8:	080048e7 	.word	0x080048e7
 8004aac:	080048e7 	.word	0x080048e7
 8004ab0:	080048e7 	.word	0x080048e7
 8004ab4:	080048e7 	.word	0x080048e7
 8004ab8:	080048e7 	.word	0x080048e7
 8004abc:	080048e7 	.word	0x080048e7
 8004ac0:	080048e7 	.word	0x080048e7
 8004ac4:	080048e7 	.word	0x080048e7
 8004ac8:	080048e7 	.word	0x080048e7
 8004acc:	080048e7 	.word	0x080048e7
 8004ad0:	080048e7 	.word	0x080048e7
 8004ad4:	080048e7 	.word	0x080048e7
 8004ad8:	080048e7 	.word	0x080048e7
 8004adc:	080048e7 	.word	0x080048e7
 8004ae0:	08004be5 	.word	0x08004be5
 8004ae4:	08004bd7 	.word	0x08004bd7
 8004ae8:	080048e7 	.word	0x080048e7
 8004aec:	080048e7 	.word	0x080048e7
 8004af0:	08004b93 	.word	0x08004b93
 8004af4:	08004ba1 	.word	0x08004ba1
 8004af8:	080048e7 	.word	0x080048e7
 8004afc:	080048e7 	.word	0x080048e7
 8004b00:	080048e7 	.word	0x080048e7
 8004b04:	080048e7 	.word	0x080048e7
 8004b08:	080048e7 	.word	0x080048e7
 8004b0c:	080048e7 	.word	0x080048e7
 8004b10:	080048e7 	.word	0x080048e7
 8004b14:	080048e7 	.word	0x080048e7
 8004b18:	080048e7 	.word	0x080048e7
 8004b1c:	080048e7 	.word	0x080048e7
 8004b20:	08004bc3 	.word	0x08004bc3
 8004b24:	08004baf 	.word	0x08004baf
 8004b28:	080048e7 	.word	0x080048e7
 8004b2c:	080048e7 	.word	0x080048e7
 8004b30:	08004b7f 	.word	0x08004b7f
 8004b34:	080048e7 	.word	0x080048e7
 8004b38:	080048e7 	.word	0x080048e7
 8004b3c:	080048e7 	.word	0x080048e7
 8004b40:	080048e7 	.word	0x080048e7
 8004b44:	080048e7 	.word	0x080048e7
 8004b48:	080048e7 	.word	0x080048e7
 8004b4c:	080048e7 	.word	0x080048e7
 8004b50:	080048e7 	.word	0x080048e7
 8004b54:	080048e7 	.word	0x080048e7
 8004b58:	080048e7 	.word	0x080048e7
 8004b5c:	080048e7 	.word	0x080048e7
 8004b60:	08004c2b 	.word	0x08004c2b
			switch (RxHeader.Identifier){
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	f000 80e0 	beq.w	8004d2a <HAL_FDCAN_RxFifo0Callback+0x45a>
 8004b6a:	2a01      	cmp	r2, #1
 8004b6c:	f47f aebb 	bne.w	80048e6 <HAL_FDCAN_RxFifo0Callback+0x16>
				error_No[0]=RxData[0];
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <HAL_FDCAN_RxFifo0Callback+0x378>)
 8004b72:	8822      	ldrh	r2, [r4, #0]
 8004b74:	801a      	strh	r2, [r3, #0]
}
 8004b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				maintask_stop();
 8004b7a:	f7fe bd5b 	b.w	8003634 <maintask_stop>
				amplitude[4]=uchar4_to_float(RxData);
 8004b7e:	4830      	ldr	r0, [pc, #192]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b80:	f000 fdc2 	bl	8005708 <uchar4_to_float>
 8004b84:	4931      	ldr	r1, [pc, #196]	; (8004c4c <HAL_FDCAN_RxFifo0Callback+0x37c>)
				check_power=1;
 8004b86:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <HAL_FDCAN_RxFifo0Callback+0x380>)
				amplitude[4]=uchar4_to_float(RxData);
 8004b88:	ed81 0a04 	vstr	s0, [r1, #16]
				check_power=1;
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
}
 8004b90:	bd38      	pop	{r3, r4, r5, pc}
				tempercher[4]=uchar4_to_float(RxData);
 8004b92:	482b      	ldr	r0, [pc, #172]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b94:	f000 fdb8 	bl	8005708 <uchar4_to_float>
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004b9a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
			tempercher[5]=uchar4_to_float(RxData);
 8004ba0:	4827      	ldr	r0, [pc, #156]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004ba2:	f000 fdb1 	bl	8005708 <uchar4_to_float>
 8004ba6:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004ba8:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
			  amplitude[1]=uchar4_to_float(RxData);
 8004bae:	4824      	ldr	r0, [pc, #144]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004bb0:	f000 fdaa 	bl	8005708 <uchar4_to_float>
 8004bb4:	4925      	ldr	r1, [pc, #148]	; (8004c4c <HAL_FDCAN_RxFifo0Callback+0x37c>)
			  check_motor2=1;
 8004bb6:	4b28      	ldr	r3, [pc, #160]	; (8004c58 <HAL_FDCAN_RxFifo0Callback+0x388>)
			  amplitude[1]=uchar4_to_float(RxData);
 8004bb8:	ed81 0a01 	vstr	s0, [r1, #4]
			  check_motor2=1;
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
}
 8004bc0:	bd38      	pop	{r3, r4, r5, pc}
			  amplitude[0]=uchar4_to_float(RxData);
 8004bc2:	481f      	ldr	r0, [pc, #124]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004bc4:	f000 fda0 	bl	8005708 <uchar4_to_float>
 8004bc8:	4920      	ldr	r1, [pc, #128]	; (8004c4c <HAL_FDCAN_RxFifo0Callback+0x37c>)
			  check_motor1=1;
 8004bca:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <HAL_FDCAN_RxFifo0Callback+0x38c>)
			  amplitude[0]=uchar4_to_float(RxData);
 8004bcc:	ed81 0a00 	vstr	s0, [r1]
			  check_motor1=1;
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
}
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
			  tempercher[1]=uchar4_to_float(RxData);
 8004bd6:	481a      	ldr	r0, [pc, #104]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004bd8:	f000 fd96 	bl	8005708 <uchar4_to_float>
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004bde:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
			  tempercher[0]=uchar4_to_float(RxData);
 8004be4:	4816      	ldr	r0, [pc, #88]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004be6:	f000 fd8f 	bl	8005708 <uchar4_to_float>
 8004bea:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004bec:	ed83 0a00 	vstr	s0, [r3]
}
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004bf2:	4813      	ldr	r0, [pc, #76]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004bf4:	f000 fd88 	bl	8005708 <uchar4_to_float>
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004bf8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004c60 <HAL_FDCAN_RxFifo0Callback+0x390>
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004bfc:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <HAL_FDCAN_RxFifo0Callback+0x394>)
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <HAL_FDCAN_RxFifo0Callback+0x398>)
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004c00:	ed82 0a01 	vstr	s0, [r2, #4]
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004c04:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004c08:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004c0c:	bd38      	pop	{r3, r4, r5, pc}
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004c0e:	480c      	ldr	r0, [pc, #48]	; (8004c40 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004c10:	f000 fd7a 	bl	8005708 <uchar4_to_float>
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004c14:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004c60 <HAL_FDCAN_RxFifo0Callback+0x390>
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004c18:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <HAL_FDCAN_RxFifo0Callback+0x394>)
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004c1a:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <HAL_FDCAN_RxFifo0Callback+0x398>)
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004c1c:	ed82 0a00 	vstr	s0, [r2]
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004c20:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004c24:	edc3 7a00 	vstr	s15, [r3]
}
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
			ball[0]=RxData[0];
 8004c2a:	4910      	ldr	r1, [pc, #64]	; (8004c6c <HAL_FDCAN_RxFifo0Callback+0x39c>)
			check_FC=1;
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <HAL_FDCAN_RxFifo0Callback+0x3a0>)
			ball[0]=RxData[0];
 8004c2e:	6820      	ldr	r0, [r4, #0]
 8004c30:	6008      	str	r0, [r1, #0]
			check_FC=1;
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
}
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	20000c90 	.word	0x20000c90
 8004c3c:	20000cf4 	.word	0x20000cf4
 8004c40:	20000df4 	.word	0x20000df4
 8004c44:	20000dfc 	.word	0x20000dfc
 8004c48:	20000ef8 	.word	0x20000ef8
 8004c4c:	20000eb0 	.word	0x20000eb0
 8004c50:	20000ed5 	.word	0x20000ed5
 8004c54:	20000f84 	.word	0x20000f84
 8004c58:	20000ed2 	.word	0x20000ed2
 8004c5c:	20000ed1 	.word	0x20000ed1
 8004c60:	3e3426c8 	.word	0x3e3426c8
 8004c64:	20000f40 	.word	0x20000f40
 8004c68:	20000f54 	.word	0x20000f54
 8004c6c:	20000ec4 	.word	0x20000ec4
 8004c70:	20000ed0 	.word	0x20000ed0
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004c74:	482f      	ldr	r0, [pc, #188]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004c76:	f000 fd47 	bl	8005708 <uchar4_to_float>
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004c7a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8004d38 <HAL_FDCAN_RxFifo0Callback+0x468>
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <HAL_FDCAN_RxFifo0Callback+0x46c>)
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004c80:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <HAL_FDCAN_RxFifo0Callback+0x470>)
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004c82:	ed82 0a02 	vstr	s0, [r2, #8]
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004c86:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004c8a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
				Power_voltage[4]=uchar4_to_float(RxData);
 8004c90:	4828      	ldr	r0, [pc, #160]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004c92:	f000 fd39 	bl	8005708 <uchar4_to_float>
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8004c98:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004c9e:	4825      	ldr	r0, [pc, #148]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004ca0:	f000 fd32 	bl	8005708 <uchar4_to_float>
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004ca4:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004d38 <HAL_FDCAN_RxFifo0Callback+0x468>
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004ca8:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <HAL_FDCAN_RxFifo0Callback+0x46c>)
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004caa:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <HAL_FDCAN_RxFifo0Callback+0x470>)
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004cac:	ed82 0a03 	vstr	s0, [r2, #12]
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004cb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004cb4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}
				mouse[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <HAL_FDCAN_RxFifo0Callback+0x478>)
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	601a      	str	r2, [r3, #0]
				mouse_odom[0] += mouse[0];
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_FDCAN_RxFifo0Callback+0x47c>)
				mouse[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8004cc2:	f9b4 5000 	ldrsh.w	r5, [r4]
				mouse[1] = (int16_t)((RxData[3] << 8) | RxData[2]);
 8004cc6:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
				mouse_odom[1] += mouse[1];
 8004cca:	e9d3 1200 	ldrd	r1, r2, [r3]
				mouse_odom[0] += mouse[0];
 8004cce:	4429      	add	r1, r5
				mouse_odom[1] += mouse[1];
 8004cd0:	4402      	add	r2, r0
 8004cd2:	e9c3 1200 	strd	r1, r2, [r3]
}
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
					  amplitude[3]=uchar4_to_float(RxData);
 8004cd8:	4816      	ldr	r0, [pc, #88]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004cda:	f000 fd15 	bl	8005708 <uchar4_to_float>
 8004cde:	491c      	ldr	r1, [pc, #112]	; (8004d50 <HAL_FDCAN_RxFifo0Callback+0x480>)
					  check_motor4=1;
 8004ce0:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <HAL_FDCAN_RxFifo0Callback+0x484>)
					  amplitude[3]=uchar4_to_float(RxData);
 8004ce2:	ed81 0a03 	vstr	s0, [r1, #12]
					  check_motor4=1;
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
}
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
					  amplitude[2]=uchar4_to_float(RxData);
 8004cec:	4811      	ldr	r0, [pc, #68]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004cee:	f000 fd0b 	bl	8005708 <uchar4_to_float>
 8004cf2:	4917      	ldr	r1, [pc, #92]	; (8004d50 <HAL_FDCAN_RxFifo0Callback+0x480>)
					  check_motor3=1;
 8004cf4:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <HAL_FDCAN_RxFifo0Callback+0x488>)
					  amplitude[2]=uchar4_to_float(RxData);
 8004cf6:	ed81 0a02 	vstr	s0, [r1, #8]
					  check_motor3=1;
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
}
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
					  tempercher[3]=uchar4_to_float(RxData);
 8004d00:	480c      	ldr	r0, [pc, #48]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004d02:	f000 fd01 	bl	8005708 <uchar4_to_float>
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8004d08:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8004d0c:	bd38      	pop	{r3, r4, r5, pc}
					  tempercher[2]=uchar4_to_float(RxData);
 8004d0e:	4809      	ldr	r0, [pc, #36]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004d10:	f000 fcfa 	bl	8005708 <uchar4_to_float>
 8004d14:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8004d16:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
				Power_voltage[5]=uchar4_to_float(RxData);
 8004d1c:	4805      	ldr	r0, [pc, #20]	; (8004d34 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004d1e:	f000 fcf3 	bl	8005708 <uchar4_to_float>
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8004d24:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8004d28:	bd38      	pop	{r3, r4, r5, pc}
				error_No[0]=RxData[0];
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_FDCAN_RxFifo0Callback+0x490>)
 8004d2c:	8822      	ldrh	r2, [r4, #0]
 8004d2e:	801a      	strh	r2, [r3, #0]
				Error_Handler();
 8004d30:	f7ff fc46 	bl	80045c0 <Error_Handler>
 8004d34:	20000df4 	.word	0x20000df4
 8004d38:	3e3426c8 	.word	0x3e3426c8
 8004d3c:	20000f40 	.word	0x20000f40
 8004d40:	20000f54 	.word	0x20000f54
 8004d44:	20000ddc 	.word	0x20000ddc
 8004d48:	20000f68 	.word	0x20000f68
 8004d4c:	20000f6c 	.word	0x20000f6c
 8004d50:	20000eb0 	.word	0x20000eb0
 8004d54:	20000ed4 	.word	0x20000ed4
 8004d58:	20000ed3 	.word	0x20000ed3
 8004d5c:	20000f84 	.word	0x20000f84
 8004d60:	20000ef8 	.word	0x20000ef8

08004d64 <delayUs>:
cycle_cnt = SysTick->VAL;
} while (ms != HAL_GetTick());
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
}

void delayUs(uint16_t micros) {
 8004d64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d68:	4682      	mov	sl, r0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004d6a:	f002 fce3 	bl	8007734 <HAL_RCC_GetSysClockFreq>
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <delayUs+0x7c>)
 8004d70:	fba3 3700 	umull	r3, r7, r3, r0
 8004d74:	0cbf      	lsrs	r7, r7, #18
cycle_cnt = SysTick->VAL;
 8004d76:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
ms = HAL_GetTick();
 8004d7a:	f7fe f8b3 	bl	8002ee4 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8004d7e:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 8004d80:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 8004d82:	f7fe f8af 	bl	8002ee4 <HAL_GetTick>
 8004d86:	4284      	cmp	r4, r0
 8004d88:	d1f7      	bne.n	8004d7a <delayUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004d8a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8004d8e:	fb08 f907 	mul.w	r9, r8, r7
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004d92:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8004de0 <delayUs+0x7c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004d96:	eba9 0905 	sub.w	r9, r9, r5
cycle_cnt = SysTick->VAL;
 8004d9a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004d9e:	fbb9 f9f7 	udiv	r9, r9, r7
 8004da2:	fb08 9904 	mla	r9, r8, r4, r9
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004da6:	f002 fcc5 	bl	8007734 <HAL_RCC_GetSysClockFreq>
 8004daa:	fbab 3700 	umull	r3, r7, fp, r0
 8004dae:	0cbf      	lsrs	r7, r7, #18
ms = HAL_GetTick();
 8004db0:	f7fe f898 	bl	8002ee4 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8004db4:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 8004db6:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 8004db8:	f7fe f894 	bl	8002ee4 <HAL_GetTick>
 8004dbc:	4284      	cmp	r4, r0
 8004dbe:	d1f7      	bne.n	8004db0 <delayUs+0x4c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004dc0:	fb08 f307 	mul.w	r3, r8, r7
 8004dc4:	1b5b      	subs	r3, r3, r5
 8004dc6:	fbb3 f3f7 	udiv	r3, r3, r7
uint32_t start = getUs();
while (getUs()-start < (uint32_t) micros) {
 8004dca:	eba3 0309 	sub.w	r3, r3, r9
 8004dce:	fb08 3304 	mla	r3, r8, r4, r3
 8004dd2:	4553      	cmp	r3, sl
 8004dd4:	d201      	bcs.n	8004dda <delayUs+0x76>
	asm("nop");
 8004dd6:	bf00      	nop
 8004dd8:	e7e5      	b.n	8004da6 <delayUs+0x42>
}
}
 8004dda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dde:	bf00      	nop
 8004de0:	431bde83 	.word	0x431bde83
 8004de4:	00000000 	.word	0x00000000

08004de8 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	ee11 0a10 	vmov	r0, s2
 8004dee:	ed2d 8b04 	vpush	{d8-d9}
 8004df2:	eef0 8a61 	vmov.f32	s17, s3
 8004df6:	eeb0 8a60 	vmov.f32	s16, s1
 8004dfa:	eeb0 9a40 	vmov.f32	s18, s0
	v_round=robot_radius*omega_omni;
 8004dfe:	f7fb fbcb 	bl	8000598 <__aeabi_f2d>
 8004e02:	a336      	add	r3, pc, #216	; (adr r3, 8004edc <omni_move+0xf4>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fc1e 	bl	8000648 <__aeabi_dmul>
 8004e0c:	f7fb ff14 	bl	8000c38 <__aeabi_d2f>

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004e10:	eddf 7a29 	vldr	s15, [pc, #164]	; 8004eb8 <omni_move+0xd0>
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004e14:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004ebc <omni_move+0xd4>
 8004e18:	eddf 4a29 	vldr	s9, [pc, #164]	; 8004ec0 <omni_move+0xd8>
	v_round=robot_radius*omega_omni;
 8004e1c:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <omni_move+0xdc>)
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004e1e:	4e2a      	ldr	r6, [pc, #168]	; (8004ec8 <omni_move+0xe0>)
	v_round=robot_radius*omega_omni;
 8004e20:	6018      	str	r0, [r3, #0]
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004e22:	ee69 7a27 	vmul.f32	s15, s18, s15
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004e26:	ee29 7a07 	vmul.f32	s14, s18, s14
 8004e2a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004e2e:	eeb0 6a67 	vmov.f32	s12, s15
 8004e32:	eea8 7a24 	vfma.f32	s14, s16, s9
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004e36:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <omni_move+0xe4>)
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004e38:	4d25      	ldr	r5, [pc, #148]	; (8004ed0 <omni_move+0xe8>)
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004e3a:	4c26      	ldr	r4, [pc, #152]	; (8004ed4 <omni_move+0xec>)
 8004e3c:	eea8 6a25 	vfma.f32	s12, s16, s11
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004e40:	ee05 0a10 	vmov	s10, r0
 8004e44:	eed8 7a25 	vfnms.f32	s15, s16, s11
 8004e48:	ee38 0a09 	vadd.f32	s0, s16, s18
	v_round=robot_radius*omega_omni;
 8004e4c:	ee06 0a90 	vmov	s13, r0
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004e50:	eea0 5a24 	vfma.f32	s10, s0, s9
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004e54:	eddf 5a20 	vldr	s11, [pc, #128]	; 8004ed8 <omni_move+0xf0>
 8004e58:	ee36 0a86 	vadd.f32	s0, s13, s12
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004e5c:	ee36 7a87 	vadd.f32	s14, s13, s14
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004e64:	ee20 0a25 	vmul.f32	s0, s0, s11
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004e68:	ee27 7a25 	vmul.f32	s14, s14, s11
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004e6c:	ee25 6a25 	vmul.f32	s12, s10, s11
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004e70:	ee67 7aa5 	vmul.f32	s15, s15, s11

	actuator_motor1(m1,duty_Limit);
 8004e74:	eef0 0a68 	vmov.f32	s1, s17
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004e78:	ed86 7a00 	vstr	s14, [r6]
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004e7c:	ed83 0a00 	vstr	s0, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004e80:	ed85 6a00 	vstr	s12, [r5]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004e84:	edc4 7a00 	vstr	s15, [r4]
	actuator_motor1(m1,duty_Limit);
 8004e88:	f7fc f8a4 	bl	8000fd4 <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 8004e8c:	ed96 0a00 	vldr	s0, [r6]
 8004e90:	eef0 0a68 	vmov.f32	s1, s17
 8004e94:	f7fc f8ba 	bl	800100c <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 8004e98:	ed95 0a00 	vldr	s0, [r5]
 8004e9c:	eef0 0a68 	vmov.f32	s1, s17
 8004ea0:	f7fc f8d0 	bl	8001044 <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 8004ea4:	eef0 0a68 	vmov.f32	s1, s17

		cnt_motor=0;
		stall=0;
	}*/

}
 8004ea8:	ecbd 8b04 	vpop	{d8-d9}
	actuator_motor4(m4,duty_Limit);
 8004eac:	ed94 0a00 	vldr	s0, [r4]
}
 8004eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	actuator_motor4(m4,duty_Limit);
 8004eb4:	f7fc b8e2 	b.w	800107c <actuator_motor4>
 8004eb8:	3f5db3d7 	.word	0x3f5db3d7
 8004ebc:	3f3504f3 	.word	0x3f3504f3
 8004ec0:	bf3504f3 	.word	0xbf3504f3
 8004ec4:	20000fa4 	.word	0x20000fa4
 8004ec8:	20000f34 	.word	0x20000f34
 8004ecc:	20000f30 	.word	0x20000f30
 8004ed0:	20000f38 	.word	0x20000f38
 8004ed4:	20000f3c 	.word	0x20000f3c
 8004ed8:	40b5e430 	.word	0x40b5e430
 8004edc:	47ae147b 	.word	0x47ae147b
 8004ee0:	3fb47ae1 	.word	0x3fb47ae1

08004ee4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004ee4:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004ee6:	4811      	ldr	r0, [pc, #68]	; (8004f2c <MX_SPI1_Init+0x48>)
 8004ee8:	4c11      	ldr	r4, [pc, #68]	; (8004f30 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004eea:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004eee:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ef0:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ef4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004efc:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004f00:	2430      	movs	r4, #48	; 0x30
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f02:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004f04:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f06:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f08:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f0c:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f10:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f14:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f18:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f1a:	f003 f807 	bl	8007f2c <HAL_SPI_Init>
 8004f1e:	b900      	cbnz	r0, 8004f22 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004f26:	f7ff bb4b 	b.w	80045c0 <Error_Handler>
 8004f2a:	bf00      	nop
 8004f2c:	20000fc0 	.word	0x20000fc0
 8004f30:	40013000 	.word	0x40013000
 8004f34:	00000000 	.word	0x00000000

08004f38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004f38:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_SPI_MspInit+0x70>)
 8004f3c:	6801      	ldr	r1, [r0, #0]
{
 8004f3e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f40:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8004f42:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f48:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004f4c:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8004f4e:	d002      	beq.n	8004f56 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004f50:	b009      	add	sp, #36	; 0x24
 8004f52:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f5a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004f5e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8004fa0 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f68:	661a      	str	r2, [r3, #96]	; 0x60
 8004f6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f70:	9200      	str	r2, [sp, #0]
 8004f72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f84:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f86:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004f8c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f90:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f92:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f94:	f001 ffe8 	bl	8006f68 <HAL_GPIO_Init>
}
 8004f98:	b009      	add	sp, #36	; 0x24
 8004f9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f9e:	bf00      	nop
 8004fa0:	000000e0 	.word	0x000000e0
 8004fa4:	00000002 	.word	0x00000002
 8004fa8:	40013000 	.word	0x40013000

08004fac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_MspInit+0x30>)
 8004fae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	661a      	str	r2, [r3, #96]	; 0x60
 8004fb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004fb8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fba:	f002 0201 	and.w	r2, r2, #1
 8004fbe:	9200      	str	r2, [sp, #0]
 8004fc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fc8:	659a      	str	r2, [r3, #88]	; 0x58
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fd4:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8004fd6:	f002 b959 	b.w	800728c <HAL_PWREx_DisableUCPDDeadBattery>
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000

08004fe0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop

08004fe4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fe4:	e7fe      	b.n	8004fe4 <HardFault_Handler>
 8004fe6:	bf00      	nop

08004fe8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fe8:	e7fe      	b.n	8004fe8 <MemManage_Handler>
 8004fea:	bf00      	nop

08004fec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fec:	e7fe      	b.n	8004fec <BusFault_Handler>
 8004fee:	bf00      	nop

08004ff0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ff0:	e7fe      	b.n	8004ff0 <UsageFault_Handler>
 8004ff2:	bf00      	nop

08004ff4 <SVC_Handler>:
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop

08004ff8 <DebugMon_Handler>:
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop

08004ffc <PendSV_Handler>:
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop

08005000 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005000:	f000 bbea 	b.w	80057d8 <HAL_IncTick>

08005004 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <DMA1_Channel1_IRQHandler+0x8>)
 8005006:	f001 bb5d 	b.w	80066c4 <HAL_DMA_IRQHandler>
 800500a:	bf00      	nop
 800500c:	2000117c 	.word	0x2000117c

08005010 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005010:	4801      	ldr	r0, [pc, #4]	; (8005018 <DMA1_Channel2_IRQHandler+0x8>)
 8005012:	f001 bb57 	b.w	80066c4 <HAL_DMA_IRQHandler>
 8005016:	bf00      	nop
 8005018:	200011dc 	.word	0x200011dc

0800501c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <DMA1_Channel3_IRQHandler+0x8>)
 800501e:	f001 bb51 	b.w	80066c4 <HAL_DMA_IRQHandler>
 8005022:	bf00      	nop
 8005024:	200003a4 	.word	0x200003a4

08005028 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <DMA1_Channel4_IRQHandler+0x8>)
 800502a:	f001 bb4b 	b.w	80066c4 <HAL_DMA_IRQHandler>
 800502e:	bf00      	nop
 8005030:	20000404 	.word	0x20000404

08005034 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <DMA1_Channel5_IRQHandler+0x8>)
 8005036:	f001 bb45 	b.w	80066c4 <HAL_DMA_IRQHandler>
 800503a:	bf00      	nop
 800503c:	20000344 	.word	0x20000344

08005040 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <DMA1_Channel6_IRQHandler+0x8>)
 8005042:	f001 bb3f 	b.w	80066c4 <HAL_DMA_IRQHandler>
 8005046:	bf00      	nop
 8005048:	200010bc 	.word	0x200010bc

0800504c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <DMA1_Channel7_IRQHandler+0x8>)
 800504e:	f001 bb39 	b.w	80066c4 <HAL_DMA_IRQHandler>
 8005052:	bf00      	nop
 8005054:	2000111c 	.word	0x2000111c

08005058 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <FDCAN1_IT0_IRQHandler+0x8>)
 800505a:	f001 bec1 	b.w	8006de0 <HAL_FDCAN_IRQHandler>
 800505e:	bf00      	nop
 8005060:	20000c90 	.word	0x20000c90

08005064 <FDCAN1_IT1_IRQHandler>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <FDCAN1_IT1_IRQHandler+0x8>)
 8005066:	f001 bebb 	b.w	8006de0 <HAL_FDCAN_IRQHandler>
 800506a:	bf00      	nop
 800506c:	20000c90 	.word	0x20000c90

08005070 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8005070:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005074:	f002 b888 	b.w	8007188 <HAL_GPIO_EXTI_IRQHandler>

08005078 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <USART2_IRQHandler+0x8>)
 800507a:	f004 b829 	b.w	80090d0 <HAL_UART_IRQHandler>
 800507e:	bf00      	nop
 8005080:	200012d0 	.word	0x200012d0

08005084 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <TIM7_DAC_IRQHandler+0x8>)
 8005086:	f003 bc67 	b.w	8008958 <HAL_TIM_IRQHandler>
 800508a:	bf00      	nop
 800508c:	20001070 	.word	0x20001070

08005090 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005090:	4801      	ldr	r0, [pc, #4]	; (8005098 <FDCAN2_IT0_IRQHandler+0x8>)
 8005092:	f001 bea5 	b.w	8006de0 <HAL_FDCAN_IRQHandler>
 8005096:	bf00      	nop
 8005098:	20000cf4 	.word	0x20000cf4

0800509c <FDCAN2_IT1_IRQHandler>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <FDCAN2_IT1_IRQHandler+0x8>)
 800509e:	f001 be9f 	b.w	8006de0 <HAL_FDCAN_IRQHandler>
 80050a2:	bf00      	nop
 80050a4:	20000cf4 	.word	0x20000cf4

080050a8 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <LPUART1_IRQHandler+0x8>)
 80050aa:	f004 b811 	b.w	80090d0 <HAL_UART_IRQHandler>
 80050ae:	bf00      	nop
 80050b0:	20001240 	.word	0x20001240

080050b4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80050b4:	2001      	movs	r0, #1
 80050b6:	4770      	bx	lr

080050b8 <_kill>:

int _kill(int pid, int sig)
{
 80050b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80050ba:	f005 fe31 	bl	800ad20 <__errno>
 80050be:	2316      	movs	r3, #22
 80050c0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80050c2:	f04f 30ff 	mov.w	r0, #4294967295
 80050c6:	bd08      	pop	{r3, pc}

080050c8 <_exit>:

void _exit (int status)
{
 80050c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80050ca:	f005 fe29 	bl	800ad20 <__errno>
 80050ce:	2316      	movs	r3, #22
 80050d0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80050d2:	e7fe      	b.n	80050d2 <_exit+0xa>

080050d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050d4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d6:	1e16      	subs	r6, r2, #0
 80050d8:	dd07      	ble.n	80050ea <_read+0x16>
 80050da:	460c      	mov	r4, r1
 80050dc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80050de:	f3af 8000 	nop.w
 80050e2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e6:	42a5      	cmp	r5, r4
 80050e8:	d1f9      	bne.n	80050de <_read+0xa>
	}

return len;
}
 80050ea:	4630      	mov	r0, r6
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	bf00      	nop

080050f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050f0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050f2:	1e16      	subs	r6, r2, #0
 80050f4:	dd07      	ble.n	8005106 <_write+0x16>
 80050f6:	460c      	mov	r4, r1
 80050f8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80050fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80050fe:	f7fd fedf 	bl	8002ec0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005102:	42ac      	cmp	r4, r5
 8005104:	d1f9      	bne.n	80050fa <_write+0xa>
	}
	return len;
}
 8005106:	4630      	mov	r0, r6
 8005108:	bd70      	pop	{r4, r5, r6, pc}
 800510a:	bf00      	nop

0800510c <_close>:

int _close(int file)
{
	return -1;
}
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop

08005114 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005118:	604b      	str	r3, [r1, #4]
	return 0;
}
 800511a:	2000      	movs	r0, #0
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop

08005120 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005120:	2001      	movs	r0, #1
 8005122:	4770      	bx	lr

08005124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005124:	2000      	movs	r0, #0
 8005126:	4770      	bx	lr

08005128 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <SystemInit+0x18>)
 800512a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800512e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005132:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800513a:	6099      	str	r1, [r3, #8]
#endif
}
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	e000ed00 	.word	0xe000ed00
 8005144:	00000000 	.word	0x00000000

08005148 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005148:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800514a:	4c33      	ldr	r4, [pc, #204]	; (8005218 <MX_TIM5_Init+0xd0>)
 800514c:	4a33      	ldr	r2, [pc, #204]	; (800521c <MX_TIM5_Init+0xd4>)
 800514e:	6022      	str	r2, [r4, #0]
{
 8005150:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 8005152:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005154:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 8005156:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005158:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 800515a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800515e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005162:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8005166:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800516a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 800516e:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005172:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005174:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005176:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005178:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800517a:	f003 fa99 	bl	80086b0 <HAL_TIM_PWM_Init>
 800517e:	bb00      	cbnz	r0, 80051c2 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005180:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005182:	4825      	ldr	r0, [pc, #148]	; (8005218 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005184:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005186:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005188:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800518a:	f003 fe3b 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 800518e:	b9f0      	cbnz	r0, 80051ce <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005190:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8005208 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005194:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005196:	4820      	ldr	r0, [pc, #128]	; (8005218 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005198:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800519a:	2204      	movs	r2, #4
 800519c:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800519e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051a2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051a4:	f003 fd24 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 80051a8:	b970      	cbnz	r0, 80051c8 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <MX_TIM5_Init+0xd4>)
 80051ac:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ae:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 80051b0:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80051b6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80051ba:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 80051bc:	d00a      	beq.n	80051d4 <MX_TIM5_Init+0x8c>
}
 80051be:	b012      	add	sp, #72	; 0x48
 80051c0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80051c2:	f7ff f9fd 	bl	80045c0 <Error_Handler>
 80051c6:	e7db      	b.n	8005180 <MX_TIM5_Init+0x38>
    Error_Handler();
 80051c8:	f7ff f9fa 	bl	80045c0 <Error_Handler>
 80051cc:	e7ed      	b.n	80051aa <MX_TIM5_Init+0x62>
    Error_Handler();
 80051ce:	f7ff f9f7 	bl	80045c0 <Error_Handler>
 80051d2:	e7dd      	b.n	8005190 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80051dc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8005210 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80051e2:	480f      	ldr	r0, [pc, #60]	; (8005220 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e4:	f042 0204 	orr.w	r2, r2, #4
 80051e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80051ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80051f2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80051f4:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80051f6:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051fa:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80051fc:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80051fe:	f001 feb3 	bl	8006f68 <HAL_GPIO_Init>
}
 8005202:	b012      	add	sp, #72	; 0x48
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	00000060 	.word	0x00000060
 800520c:	00000000 	.word	0x00000000
 8005210:	00001000 	.word	0x00001000
 8005214:	00000002 	.word	0x00000002
 8005218:	20001024 	.word	0x20001024
 800521c:	40000c00 	.word	0x40000c00
 8005220:	48000800 	.word	0x48000800

08005224 <MX_TIM7_Init>:
{
 8005224:	b500      	push	{lr}
  htim7.Instance = TIM7;
 8005226:	4812      	ldr	r0, [pc, #72]	; (8005270 <MX_TIM7_Init+0x4c>)
 8005228:	4912      	ldr	r1, [pc, #72]	; (8005274 <MX_TIM7_Init+0x50>)
{
 800522a:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 800522c:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800522e:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8005230:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 1000;
 8005234:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005238:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 1000;
 800523c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005240:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005242:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005244:	f003 f958 	bl	80084f8 <HAL_TIM_Base_Init>
 8005248:	b950      	cbnz	r0, 8005260 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800524a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800524c:	4808      	ldr	r0, [pc, #32]	; (8005270 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800524e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005250:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005252:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005254:	f003 fdd6 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 8005258:	b928      	cbnz	r0, 8005266 <MX_TIM7_Init+0x42>
}
 800525a:	b005      	add	sp, #20
 800525c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005260:	f7ff f9ae 	bl	80045c0 <Error_Handler>
 8005264:	e7f1      	b.n	800524a <MX_TIM7_Init+0x26>
    Error_Handler();
 8005266:	f7ff f9ab 	bl	80045c0 <Error_Handler>
}
 800526a:	b005      	add	sp, #20
 800526c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005270:	20001070 	.word	0x20001070
 8005274:	40001400 	.word	0x40001400

08005278 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_TIM_PWM_MspInit+0x28>)
 800527a:	6802      	ldr	r2, [r0, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d000      	beq.n	8005282 <HAL_TIM_PWM_MspInit+0xa>
 8005280:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005282:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 8005286:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	659a      	str	r2, [r3, #88]	; 0x58
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	9b01      	ldr	r3, [sp, #4]
}
 800529a:	b002      	add	sp, #8
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40000c00 	.word	0x40000c00

080052a4 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <HAL_TIM_Base_MspInit+0x3c>)
 80052a6:	6802      	ldr	r2, [r0, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d000      	beq.n	80052ae <HAL_TIM_Base_MspInit+0xa>
 80052ac:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052ae:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 80052b2:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052b4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80052b6:	f041 0120 	orr.w	r1, r1, #32
 80052ba:	6599      	str	r1, [r3, #88]	; 0x58
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80052be:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80052c6:	2037      	movs	r0, #55	; 0x37
 80052c8:	2200      	movs	r2, #0
 80052ca:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80052ce:	f001 f82b 	bl	8006328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80052d2:	2037      	movs	r0, #55	; 0x37
}
 80052d4:	b003      	add	sp, #12
 80052d6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80052da:	f001 b863 	b.w	80063a4 <HAL_NVIC_EnableIRQ>
 80052de:	bf00      	nop
 80052e0:	40001400 	.word	0x40001400
 80052e4:	00000000 	.word	0x00000000

080052e8 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052e8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005370 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 80052ec:	4822      	ldr	r0, [pc, #136]	; (8005378 <MX_LPUART1_UART_Init+0x90>)
 80052ee:	4923      	ldr	r1, [pc, #140]	; (800537c <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 80052f0:	4a23      	ldr	r2, [pc, #140]	; (8005380 <MX_LPUART1_UART_Init+0x98>)
{
 80052f2:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052f4:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 80052f6:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80052fa:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80052fc:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80052fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005302:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005306:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800530a:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800530e:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005310:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005312:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005314:	f004 fc0e 	bl	8009b34 <HAL_UART_Init>
 8005318:	b970      	cbnz	r0, 8005338 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800531a:	4817      	ldr	r0, [pc, #92]	; (8005378 <MX_LPUART1_UART_Init+0x90>)
 800531c:	2100      	movs	r1, #0
 800531e:	f004 fd17 	bl	8009d50 <HAL_UARTEx_SetTxFifoThreshold>
 8005322:	b988      	cbnz	r0, 8005348 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005324:	4814      	ldr	r0, [pc, #80]	; (8005378 <MX_LPUART1_UART_Init+0x90>)
 8005326:	2100      	movs	r1, #0
 8005328:	f004 fd54 	bl	8009dd4 <HAL_UARTEx_SetRxFifoThreshold>
 800532c:	b9a0      	cbnz	r0, 8005358 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800532e:	4812      	ldr	r0, [pc, #72]	; (8005378 <MX_LPUART1_UART_Init+0x90>)
 8005330:	f004 fcf0 	bl	8009d14 <HAL_UARTEx_DisableFifoMode>
 8005334:	b9b8      	cbnz	r0, 8005366 <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005336:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005338:	f7ff f942 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800533c:	480e      	ldr	r0, [pc, #56]	; (8005378 <MX_LPUART1_UART_Init+0x90>)
 800533e:	2100      	movs	r1, #0
 8005340:	f004 fd06 	bl	8009d50 <HAL_UARTEx_SetTxFifoThreshold>
 8005344:	2800      	cmp	r0, #0
 8005346:	d0ed      	beq.n	8005324 <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 8005348:	f7ff f93a 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800534c:	480a      	ldr	r0, [pc, #40]	; (8005378 <MX_LPUART1_UART_Init+0x90>)
 800534e:	2100      	movs	r1, #0
 8005350:	f004 fd40 	bl	8009dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8005354:	2800      	cmp	r0, #0
 8005356:	d0ea      	beq.n	800532e <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 8005358:	f7ff f932 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800535c:	4806      	ldr	r0, [pc, #24]	; (8005378 <MX_LPUART1_UART_Init+0x90>)
 800535e:	f004 fcd9 	bl	8009d14 <HAL_UARTEx_DisableFifoMode>
 8005362:	2800      	cmp	r0, #0
 8005364:	d0e7      	beq.n	8005336 <MX_LPUART1_UART_Init+0x4e>
}
 8005366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800536a:	f7ff b929 	b.w	80045c0 <Error_Handler>
 800536e:	bf00      	nop
	...
 8005378:	20001240 	.word	0x20001240
 800537c:	40008000 	.word	0x40008000
 8005380:	001e8480 	.word	0x001e8480

08005384 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005384:	4821      	ldr	r0, [pc, #132]	; (800540c <MX_USART2_UART_Init+0x88>)
 8005386:	4922      	ldr	r1, [pc, #136]	; (8005410 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 8005388:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 800538c:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800538e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8005390:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005394:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005396:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005398:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 800539c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053a0:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053a4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053a8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80053ac:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80053ae:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053b0:	f004 fbc0 	bl	8009b34 <HAL_UART_Init>
 80053b4:	b970      	cbnz	r0, 80053d4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053b6:	4815      	ldr	r0, [pc, #84]	; (800540c <MX_USART2_UART_Init+0x88>)
 80053b8:	2100      	movs	r1, #0
 80053ba:	f004 fcc9 	bl	8009d50 <HAL_UARTEx_SetTxFifoThreshold>
 80053be:	b988      	cbnz	r0, 80053e4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053c0:	4812      	ldr	r0, [pc, #72]	; (800540c <MX_USART2_UART_Init+0x88>)
 80053c2:	2100      	movs	r1, #0
 80053c4:	f004 fd06 	bl	8009dd4 <HAL_UARTEx_SetRxFifoThreshold>
 80053c8:	b9a0      	cbnz	r0, 80053f4 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80053ca:	4810      	ldr	r0, [pc, #64]	; (800540c <MX_USART2_UART_Init+0x88>)
 80053cc:	f004 fca2 	bl	8009d14 <HAL_UARTEx_DisableFifoMode>
 80053d0:	b9b8      	cbnz	r0, 8005402 <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80053d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80053d4:	f7ff f8f4 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053d8:	480c      	ldr	r0, [pc, #48]	; (800540c <MX_USART2_UART_Init+0x88>)
 80053da:	2100      	movs	r1, #0
 80053dc:	f004 fcb8 	bl	8009d50 <HAL_UARTEx_SetTxFifoThreshold>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d0ed      	beq.n	80053c0 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 80053e4:	f7ff f8ec 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053e8:	4808      	ldr	r0, [pc, #32]	; (800540c <MX_USART2_UART_Init+0x88>)
 80053ea:	2100      	movs	r1, #0
 80053ec:	f004 fcf2 	bl	8009dd4 <HAL_UARTEx_SetRxFifoThreshold>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0ea      	beq.n	80053ca <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80053f4:	f7ff f8e4 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80053f8:	4804      	ldr	r0, [pc, #16]	; (800540c <MX_USART2_UART_Init+0x88>)
 80053fa:	f004 fc8b 	bl	8009d14 <HAL_UARTEx_DisableFifoMode>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d0e7      	beq.n	80053d2 <MX_USART2_UART_Init+0x4e>
}
 8005402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005406:	f7ff b8db 	b.w	80045c0 <Error_Handler>
 800540a:	bf00      	nop
 800540c:	200012d0 	.word	0x200012d0
 8005410:	40004400 	.word	0x40004400

08005414 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005414:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005416:	481f      	ldr	r0, [pc, #124]	; (8005494 <MX_USART3_UART_Init+0x80>)
 8005418:	4c1f      	ldr	r4, [pc, #124]	; (8005498 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800541a:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 800541c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005420:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8005422:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005426:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800542a:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800542e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005432:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005436:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005438:	f004 fb7c 	bl	8009b34 <HAL_UART_Init>
 800543c:	b970      	cbnz	r0, 800545c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800543e:	4815      	ldr	r0, [pc, #84]	; (8005494 <MX_USART3_UART_Init+0x80>)
 8005440:	2100      	movs	r1, #0
 8005442:	f004 fc85 	bl	8009d50 <HAL_UARTEx_SetTxFifoThreshold>
 8005446:	b988      	cbnz	r0, 800546c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005448:	4812      	ldr	r0, [pc, #72]	; (8005494 <MX_USART3_UART_Init+0x80>)
 800544a:	2100      	movs	r1, #0
 800544c:	f004 fcc2 	bl	8009dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8005450:	b9a0      	cbnz	r0, 800547c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005452:	4810      	ldr	r0, [pc, #64]	; (8005494 <MX_USART3_UART_Init+0x80>)
 8005454:	f004 fc5e 	bl	8009d14 <HAL_UARTEx_DisableFifoMode>
 8005458:	b9b8      	cbnz	r0, 800548a <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800545a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800545c:	f7ff f8b0 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005460:	480c      	ldr	r0, [pc, #48]	; (8005494 <MX_USART3_UART_Init+0x80>)
 8005462:	2100      	movs	r1, #0
 8005464:	f004 fc74 	bl	8009d50 <HAL_UARTEx_SetTxFifoThreshold>
 8005468:	2800      	cmp	r0, #0
 800546a:	d0ed      	beq.n	8005448 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 800546c:	f7ff f8a8 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005470:	4808      	ldr	r0, [pc, #32]	; (8005494 <MX_USART3_UART_Init+0x80>)
 8005472:	2100      	movs	r1, #0
 8005474:	f004 fcae 	bl	8009dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8005478:	2800      	cmp	r0, #0
 800547a:	d0ea      	beq.n	8005452 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 800547c:	f7ff f8a0 	bl	80045c0 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005480:	4804      	ldr	r0, [pc, #16]	; (8005494 <MX_USART3_UART_Init+0x80>)
 8005482:	f004 fc47 	bl	8009d14 <HAL_UARTEx_DisableFifoMode>
 8005486:	2800      	cmp	r0, #0
 8005488:	d0e7      	beq.n	800545a <MX_USART3_UART_Init+0x46>
}
 800548a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800548e:	f7ff b897 	b.w	80045c0 <Error_Handler>
 8005492:	bf00      	nop
 8005494:	20001360 	.word	0x20001360
 8005498:	40004800 	.word	0x40004800

0800549c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4604      	mov	r4, r0
 80054a0:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054a4:	2254      	movs	r2, #84	; 0x54
 80054a6:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80054ac:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80054b0:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054b2:	f005 fbe3 	bl	800ac7c <memset>
  if(uartHandle->Instance==LPUART1)
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	4a85      	ldr	r2, [pc, #532]	; (80056d0 <HAL_UART_MspInit+0x234>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d008      	beq.n	80054d0 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80054be:	4a85      	ldr	r2, [pc, #532]	; (80056d4 <HAL_UART_MspInit+0x238>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d067      	beq.n	8005594 <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80054c4:	4a84      	ldr	r2, [pc, #528]	; (80056d8 <HAL_UART_MspInit+0x23c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	f000 80ad 	beq.w	8005626 <HAL_UART_MspInit+0x18a>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80054cc:	b020      	add	sp, #128	; 0x80
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80054d0:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054d2:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80054d4:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054d6:	f002 fa8d 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80054da:	2800      	cmp	r0, #0
 80054dc:	f040 80e9 	bne.w	80056b2 <HAL_UART_MspInit+0x216>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80054e0:	4b7e      	ldr	r3, [pc, #504]	; (80056dc <HAL_UART_MspInit+0x240>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 80054e2:	4e7f      	ldr	r6, [pc, #508]	; (80056e0 <HAL_UART_MspInit+0x244>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80054e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80054ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054ee:	f002 0201 	and.w	r2, r2, #1
 80054f2:	9200      	str	r2, [sp, #0]
 80054f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054f8:	f042 0201 	orr.w	r2, r2, #1
 80054fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80054fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005506:	220c      	movs	r2, #12
 8005508:	2302      	movs	r3, #2
 800550a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800550e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005510:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005512:	2300      	movs	r3, #0
 8005514:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005518:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800551a:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005520:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005522:	f001 fd21 	bl	8006f68 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005526:	496f      	ldr	r1, [pc, #444]	; (80056e4 <HAL_UART_MspInit+0x248>)
 8005528:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800552a:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800552c:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005530:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005532:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005534:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005536:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800553a:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800553e:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005542:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005544:	f000 ff56 	bl	80063f4 <HAL_DMA_Init>
 8005548:	2800      	cmp	r0, #0
 800554a:	f040 80af 	bne.w	80056ac <HAL_UART_MspInit+0x210>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 800554e:	4d66      	ldr	r5, [pc, #408]	; (80056e8 <HAL_UART_MspInit+0x24c>)
 8005550:	4966      	ldr	r1, [pc, #408]	; (80056ec <HAL_UART_MspInit+0x250>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005552:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005554:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005556:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005558:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800555c:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800555e:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005560:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005562:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005566:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800556a:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800556e:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005570:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005572:	f000 ff3f 	bl	80063f4 <HAL_DMA_Init>
 8005576:	2800      	cmp	r0, #0
 8005578:	f040 8095 	bne.w	80056a6 <HAL_UART_MspInit+0x20a>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800557c:	2200      	movs	r2, #0
 800557e:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005580:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005582:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005584:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005586:	f000 fecf 	bl	8006328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800558a:	205b      	movs	r0, #91	; 0x5b
 800558c:	f000 ff0a 	bl	80063a4 <HAL_NVIC_EnableIRQ>
}
 8005590:	b020      	add	sp, #128	; 0x80
 8005592:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005594:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005596:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005598:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800559a:	f002 fa2b 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f040 808a 	bne.w	80056b8 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055a4:	4b4d      	ldr	r3, [pc, #308]	; (80056dc <HAL_UART_MspInit+0x240>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a6:	4852      	ldr	r0, [pc, #328]	; (80056f0 <HAL_UART_MspInit+0x254>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80055a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80055aa:	4d52      	ldr	r5, [pc, #328]	; (80056f4 <HAL_UART_MspInit+0x258>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80055b0:	659a      	str	r2, [r3, #88]	; 0x58
 80055b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80055b8:	9202      	str	r2, [sp, #8]
 80055ba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055be:	f042 0202 	orr.w	r2, r2, #2
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80055cc:	2218      	movs	r2, #24
 80055ce:	2302      	movs	r3, #2
 80055d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055d4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80055d8:	2300      	movs	r3, #0
 80055da:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055de:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055e0:	2307      	movs	r3, #7
 80055e2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e4:	f001 fcc0 	bl	8006f68 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80055e8:	4943      	ldr	r1, [pc, #268]	; (80056f8 <HAL_UART_MspInit+0x25c>)
 80055ea:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055ec:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80055ee:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80055f2:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055f4:	2180      	movs	r1, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80055f6:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f8:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055fc:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005600:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005604:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005606:	f000 fef5 	bl	80063f4 <HAL_DMA_Init>
 800560a:	2800      	cmp	r0, #0
 800560c:	d157      	bne.n	80056be <HAL_UART_MspInit+0x222>
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 800560e:	2200      	movs	r2, #0
 8005610:	210c      	movs	r1, #12
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005612:	67e5      	str	r5, [r4, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005614:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005616:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005618:	f000 fe86 	bl	8006328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800561c:	2026      	movs	r0, #38	; 0x26
 800561e:	f000 fec1 	bl	80063a4 <HAL_NVIC_EnableIRQ>
}
 8005622:	b020      	add	sp, #128	; 0x80
 8005624:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005626:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005628:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800562a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800562c:	f002 f9e2 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8005630:	2800      	cmp	r0, #0
 8005632:	d14a      	bne.n	80056ca <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005634:	4b29      	ldr	r3, [pc, #164]	; (80056dc <HAL_UART_MspInit+0x240>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005636:	4831      	ldr	r0, [pc, #196]	; (80056fc <HAL_UART_MspInit+0x260>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800563a:	4d31      	ldr	r5, [pc, #196]	; (8005700 <HAL_UART_MspInit+0x264>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800563c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005640:	659a      	str	r2, [r3, #88]	; 0x58
 8005642:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005644:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005648:	9204      	str	r2, [sp, #16]
 800564a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800564c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564e:	f042 0204 	orr.w	r2, r2, #4
 8005652:	64da      	str	r2, [r3, #76]	; 0x4c
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 800565c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005660:	2302      	movs	r3, #2
 8005662:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005666:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005668:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 800566a:	2300      	movs	r3, #0
 800566c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005670:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005672:	2307      	movs	r3, #7
 8005674:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005676:	f001 fc77 	bl	8006f68 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800567a:	4922      	ldr	r1, [pc, #136]	; (8005704 <HAL_UART_MspInit+0x268>)
 800567c:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800567e:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005680:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005684:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005686:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005688:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800568a:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800568e:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005692:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005696:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005698:	f000 feac 	bl	80063f4 <HAL_DMA_Init>
 800569c:	b990      	cbnz	r0, 80056c4 <HAL_UART_MspInit+0x228>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800569e:	67e5      	str	r5, [r4, #124]	; 0x7c
 80056a0:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80056a2:	b020      	add	sp, #128	; 0x80
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80056a6:	f7fe ff8b 	bl	80045c0 <Error_Handler>
 80056aa:	e767      	b.n	800557c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80056ac:	f7fe ff88 	bl	80045c0 <Error_Handler>
 80056b0:	e74d      	b.n	800554e <HAL_UART_MspInit+0xb2>
      Error_Handler();
 80056b2:	f7fe ff85 	bl	80045c0 <Error_Handler>
 80056b6:	e713      	b.n	80054e0 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80056b8:	f7fe ff82 	bl	80045c0 <Error_Handler>
 80056bc:	e772      	b.n	80055a4 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80056be:	f7fe ff7f 	bl	80045c0 <Error_Handler>
 80056c2:	e7a4      	b.n	800560e <HAL_UART_MspInit+0x172>
      Error_Handler();
 80056c4:	f7fe ff7c 	bl	80045c0 <Error_Handler>
 80056c8:	e7e9      	b.n	800569e <HAL_UART_MspInit+0x202>
      Error_Handler();
 80056ca:	f7fe ff79 	bl	80045c0 <Error_Handler>
 80056ce:	e7b1      	b.n	8005634 <HAL_UART_MspInit+0x198>
 80056d0:	40008000 	.word	0x40008000
 80056d4:	40004400 	.word	0x40004400
 80056d8:	40004800 	.word	0x40004800
 80056dc:	40021000 	.word	0x40021000
 80056e0:	200010bc 	.word	0x200010bc
 80056e4:	4002006c 	.word	0x4002006c
 80056e8:	2000111c 	.word	0x2000111c
 80056ec:	40020080 	.word	0x40020080
 80056f0:	48000400 	.word	0x48000400
 80056f4:	2000117c 	.word	0x2000117c
 80056f8:	40020008 	.word	0x40020008
 80056fc:	48000800 	.word	0x48000800
 8005700:	200011dc 	.word	0x200011dc
 8005704:	4002001c 	.word	0x4002001c

08005708 <uchar4_to_float>:
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
    tmp.char4_value[1]=value[1];
    tmp.char4_value[2]=value[2];
    tmp.char4_value[3]=value[3];
    return tmp.float_value;
 8005708:	6803      	ldr	r3, [r0, #0]
 800570a:	ee00 3a10 	vmov	s0, r3
}
 800570e:	4770      	bx	lr

08005710 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
    Float_char4 tmp;
    tmp.float_value=float_value;
    value[0]=tmp.char4_value[0];
 8005710:	ee10 3a10 	vmov	r3, s0
 8005714:	6003      	str	r3, [r0, #0]
    value[1]=tmp.char4_value[1];
    value[2]=tmp.char4_value[2];
    value[3]=tmp.char4_value[3];
}
 8005716:	4770      	bx	lr

08005718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005718:	480d      	ldr	r0, [pc, #52]	; (8005750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800571a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800571c:	480d      	ldr	r0, [pc, #52]	; (8005754 <LoopForever+0x6>)
  ldr r1, =_edata
 800571e:	490e      	ldr	r1, [pc, #56]	; (8005758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005720:	4a0e      	ldr	r2, [pc, #56]	; (800575c <LoopForever+0xe>)
  movs r3, #0
 8005722:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005724:	e002      	b.n	800572c <LoopCopyDataInit>

08005726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800572a:	3304      	adds	r3, #4

0800572c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800572c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800572e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005730:	d3f9      	bcc.n	8005726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005732:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005734:	4c0b      	ldr	r4, [pc, #44]	; (8005764 <LoopForever+0x16>)
  movs r3, #0
 8005736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005738:	e001      	b.n	800573e <LoopFillZerobss>

0800573a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800573a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800573c:	3204      	adds	r2, #4

0800573e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800573e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005740:	d3fb      	bcc.n	800573a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005742:	f7ff fcf1 	bl	8005128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005746:	f005 faf1 	bl	800ad2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800574a:	f7fe ff7f 	bl	800464c <main>

0800574e <LoopForever>:

LoopForever:
    b LoopForever
 800574e:	e7fe      	b.n	800574e <LoopForever>
  ldr   r0, =_estack
 8005750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005758:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800575c:	0800cf6c 	.word	0x0800cf6c
  ldr r2, =_sbss
 8005760:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005764:	20001544 	.word	0x20001544

08005768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005768:	e7fe      	b.n	8005768 <ADC1_2_IRQHandler>
	...

0800576c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800576c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <HAL_InitTick+0x40>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	b90b      	cbnz	r3, 8005778 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005774:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005776:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005778:	490d      	ldr	r1, [pc, #52]	; (80057b0 <HAL_InitTick+0x44>)
 800577a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800577e:	4605      	mov	r5, r0
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	6808      	ldr	r0, [r1, #0]
 8005786:	fbb0 f0f3 	udiv	r0, r0, r3
 800578a:	f000 fe19 	bl	80063c0 <HAL_SYSTICK_Config>
 800578e:	4604      	mov	r4, r0
 8005790:	2800      	cmp	r0, #0
 8005792:	d1ef      	bne.n	8005774 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005794:	2d0f      	cmp	r5, #15
 8005796:	d8ed      	bhi.n	8005774 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005798:	4602      	mov	r2, r0
 800579a:	4629      	mov	r1, r5
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	f000 fdc2 	bl	8006328 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <HAL_InitTick+0x48>)
 80057a6:	4620      	mov	r0, r4
 80057a8:	601d      	str	r5, [r3, #0]
}
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	20000008 	.word	0x20000008
 80057b4:	20000010 	.word	0x20000010

080057b8 <HAL_Init>:
{
 80057b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ba:	2003      	movs	r0, #3
 80057bc:	f000 fda2 	bl	8006304 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7ff ffd3 	bl	800576c <HAL_InitTick>
 80057c6:	b110      	cbz	r0, 80057ce <HAL_Init+0x16>
    status = HAL_ERROR;
 80057c8:	2401      	movs	r4, #1
}
 80057ca:	4620      	mov	r0, r4
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	4604      	mov	r4, r0
    HAL_MspInit();
 80057d0:	f7ff fbec 	bl	8004fac <HAL_MspInit>
}
 80057d4:	4620      	mov	r0, r4
 80057d6:	bd10      	pop	{r4, pc}

080057d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80057d8:	4a03      	ldr	r2, [pc, #12]	; (80057e8 <HAL_IncTick+0x10>)
 80057da:	4904      	ldr	r1, [pc, #16]	; (80057ec <HAL_IncTick+0x14>)
 80057dc:	6813      	ldr	r3, [r2, #0]
 80057de:	6809      	ldr	r1, [r1, #0]
 80057e0:	440b      	add	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	200013f0 	.word	0x200013f0
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80057f4:	f7fd fb76 	bl	8002ee4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057f8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80057fa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80057fc:	d002      	beq.n	8005804 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80057fe:	4b04      	ldr	r3, [pc, #16]	; (8005810 <HAL_Delay+0x20>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005804:	f7fd fb6e 	bl	8002ee4 <HAL_GetTick>
 8005808:	1b43      	subs	r3, r0, r5
 800580a:	42a3      	cmp	r3, r4
 800580c:	d3fa      	bcc.n	8005804 <HAL_Delay+0x14>
  {
  }
}
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	2000000c 	.word	0x2000000c

08005814 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005814:	b530      	push	{r4, r5, lr}
 8005816:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005818:	2300      	movs	r3, #0
 800581a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800581c:	2800      	cmp	r0, #0
 800581e:	f000 80d4 	beq.w	80059ca <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005822:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8005824:	4604      	mov	r4, r0
 8005826:	2d00      	cmp	r5, #0
 8005828:	f000 809d 	beq.w	8005966 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800582c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800582e:	6893      	ldr	r3, [r2, #8]
 8005830:	009d      	lsls	r5, r3, #2
 8005832:	d505      	bpl.n	8005840 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005834:	6893      	ldr	r3, [r2, #8]
 8005836:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800583a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800583e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005840:	6893      	ldr	r3, [r2, #8]
 8005842:	00d8      	lsls	r0, r3, #3
 8005844:	d419      	bmi.n	800587a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005846:	4b7e      	ldr	r3, [pc, #504]	; (8005a40 <HAL_ADC_Init+0x22c>)
 8005848:	487e      	ldr	r0, [pc, #504]	; (8005a44 <HAL_ADC_Init+0x230>)
 800584a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800584c:	6891      	ldr	r1, [r2, #8]
 800584e:	099b      	lsrs	r3, r3, #6
 8005850:	fba0 0303 	umull	r0, r3, r0, r3
 8005854:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8005858:	099b      	lsrs	r3, r3, #6
 800585a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800585e:	3301      	adds	r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005866:	6091      	str	r1, [r2, #8]
 8005868:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800586a:	9b01      	ldr	r3, [sp, #4]
 800586c:	b12b      	cbz	r3, 800587a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	3b01      	subs	r3, #1
 8005872:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005874:	9b01      	ldr	r3, [sp, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f9      	bne.n	800586e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800587a:	6893      	ldr	r3, [r2, #8]
 800587c:	00d9      	lsls	r1, r3, #3
 800587e:	d464      	bmi.n	800594a <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005880:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005882:	f043 0310 	orr.w	r3, r3, #16
 8005886:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005888:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800588a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800588c:	4303      	orrs	r3, r0
 800588e:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005890:	6893      	ldr	r3, [r2, #8]
 8005892:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005896:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005898:	d15e      	bne.n	8005958 <HAL_ADC_Init+0x144>
 800589a:	06db      	lsls	r3, r3, #27
 800589c:	d45c      	bmi.n	8005958 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800589e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80058a4:	f043 0302 	orr.w	r3, r3, #2
 80058a8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058aa:	6893      	ldr	r3, [r2, #8]
 80058ac:	07dd      	lsls	r5, r3, #31
 80058ae:	d419      	bmi.n	80058e4 <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058b0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80058b4:	4b64      	ldr	r3, [pc, #400]	; (8005a48 <HAL_ADC_Init+0x234>)
 80058b6:	f000 80a0 	beq.w	80059fa <HAL_ADC_Init+0x1e6>
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f000 80a5 	beq.w	8005a0a <HAL_ADC_Init+0x1f6>
 80058c0:	4962      	ldr	r1, [pc, #392]	; (8005a4c <HAL_ADC_Init+0x238>)
 80058c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c6:	6889      	ldr	r1, [r1, #8]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	430b      	orrs	r3, r1
 80058cc:	4960      	ldr	r1, [pc, #384]	; (8005a50 <HAL_ADC_Init+0x23c>)
 80058ce:	6889      	ldr	r1, [r1, #8]
 80058d0:	430b      	orrs	r3, r1
 80058d2:	07d9      	lsls	r1, r3, #31
 80058d4:	d406      	bmi.n	80058e4 <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058d6:	495f      	ldr	r1, [pc, #380]	; (8005a54 <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80058d8:	688b      	ldr	r3, [r1, #8]
 80058da:	6865      	ldr	r5, [r4, #4]
 80058dc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80058e0:	432b      	orrs	r3, r5
 80058e2:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80058e4:	68e5      	ldr	r5, [r4, #12]
 80058e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058e8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80058ec:	432b      	orrs	r3, r5
 80058ee:	68a5      	ldr	r5, [r4, #8]
 80058f0:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058f2:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058f4:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80058f6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058fe:	d05f      	beq.n	80059c0 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005900:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005902:	b121      	cbz	r1, 800590e <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8005904:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005906:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800590a:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800590c:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800590e:	68d5      	ldr	r5, [r2, #12]
 8005910:	4951      	ldr	r1, [pc, #324]	; (8005a58 <HAL_ADC_Init+0x244>)
 8005912:	4029      	ands	r1, r5
 8005914:	4319      	orrs	r1, r3
 8005916:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005918:	6913      	ldr	r3, [r2, #16]
 800591a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800591c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005920:	430b      	orrs	r3, r1
 8005922:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005924:	6893      	ldr	r3, [r2, #8]
 8005926:	075b      	lsls	r3, r3, #29
 8005928:	d523      	bpl.n	8005972 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800592a:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800592c:	6963      	ldr	r3, [r4, #20]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d04e      	beq.n	80059d0 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005932:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005934:	f023 030f 	bic.w	r3, r3, #15
 8005938:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800593a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800593c:	f023 0303 	bic.w	r3, r3, #3
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005946:	b003      	add	sp, #12
 8005948:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800594a:	6893      	ldr	r3, [r2, #8]
 800594c:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005950:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005954:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005956:	d0a0      	beq.n	800589a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005958:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800595a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800595c:	f043 0310 	orr.w	r3, r3, #16
 8005960:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8005962:	b003      	add	sp, #12
 8005964:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8005966:	f7fb fd2b 	bl	80013c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800596a:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 800596c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005970:	e75c      	b.n	800582c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005972:	6893      	ldr	r3, [r2, #8]
 8005974:	071d      	lsls	r5, r3, #28
 8005976:	d4d9      	bmi.n	800592c <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005978:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800597a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800597e:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005980:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005984:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005986:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800598a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800598e:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8005990:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005992:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005994:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005996:	bb19      	cbnz	r1, 80059e0 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800599e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80059a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80059a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80059ae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d032      	beq.n	8005a1c <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059b6:	6913      	ldr	r3, [r2, #16]
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	6113      	str	r3, [r2, #16]
 80059be:	e7b5      	b.n	800592c <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80059c2:	3901      	subs	r1, #1
 80059c4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80059c8:	e79a      	b.n	8005900 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 80059ca:	2001      	movs	r0, #1
}
 80059cc:	b003      	add	sp, #12
 80059ce:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80059d2:	6a23      	ldr	r3, [r4, #32]
 80059d4:	f021 010f 	bic.w	r1, r1, #15
 80059d8:	3b01      	subs	r3, #1
 80059da:	430b      	orrs	r3, r1
 80059dc:	6313      	str	r3, [r2, #48]	; 0x30
 80059de:	e7ac      	b.n	800593a <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80059e6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80059ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80059ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059f2:	430b      	orrs	r3, r1
 80059f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80059f8:	e7d9      	b.n	80059ae <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059fa:	6891      	ldr	r1, [r2, #8]
 80059fc:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	07db      	lsls	r3, r3, #31
 8005a02:	f53f af6f 	bmi.w	80058e4 <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005a06:	4915      	ldr	r1, [pc, #84]	; (8005a5c <HAL_ADC_Init+0x248>)
 8005a08:	e766      	b.n	80058d8 <HAL_ADC_Init+0xc4>
 8005a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	07d9      	lsls	r1, r3, #31
 8005a16:	f53f af65 	bmi.w	80058e4 <HAL_ADC_Init+0xd0>
 8005a1a:	e7f4      	b.n	8005a06 <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a1c:	6911      	ldr	r1, [r2, #16]
 8005a1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a20:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005a22:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8005a26:	f021 0104 	bic.w	r1, r1, #4
 8005a2a:	432b      	orrs	r3, r5
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005a30:	430b      	orrs	r3, r1
 8005a32:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005a34:	430b      	orrs	r3, r1
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6113      	str	r3, [r2, #16]
 8005a3c:	e776      	b.n	800592c <HAL_ADC_Init+0x118>
 8005a3e:	bf00      	nop
 8005a40:	20000008 	.word	0x20000008
 8005a44:	053e2d63 	.word	0x053e2d63
 8005a48:	50000100 	.word	0x50000100
 8005a4c:	50000400 	.word	0x50000400
 8005a50:	50000600 	.word	0x50000600
 8005a54:	50000700 	.word	0x50000700
 8005a58:	fff04007 	.word	0xfff04007
 8005a5c:	50000300 	.word	0x50000300

08005a60 <HAL_ADC_ConvCpltCallback>:
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop

08005a64 <HAL_ADC_ConvHalfCpltCallback>:
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a68:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005a6c:	f7ff fffa 	bl	8005a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a70:	bd08      	pop	{r3, pc}
 8005a72:	bf00      	nop

08005a74 <HAL_ADC_ErrorCallback>:
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a78:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a7c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8005a80:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a84:	d11d      	bne.n	8005ac2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a86:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a8c:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a8e:	680a      	ldr	r2, [r1, #0]
 8005a90:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a94:	68ca      	ldr	r2, [r1, #12]
 8005a96:	d01b      	beq.n	8005ad0 <ADC_DMAConvCplt+0x58>
 8005a98:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005a9c:	d10d      	bne.n	8005aba <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a9e:	68ca      	ldr	r2, [r1, #12]
 8005aa0:	0494      	lsls	r4, r2, #18
 8005aa2:	d40a      	bmi.n	8005aba <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aaa:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005aae:	04d1      	lsls	r1, r2, #19
 8005ab0:	d403      	bmi.n	8005aba <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ffd0 	bl	8005a60 <HAL_ADC_ConvCpltCallback>
}
 8005ac0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005ac2:	06d2      	lsls	r2, r2, #27
 8005ac4:	d40a      	bmi.n	8005adc <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005ad0:	0790      	lsls	r0, r2, #30
 8005ad2:	d5e7      	bpl.n	8005aa4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ffc3 	bl	8005a60 <HAL_ADC_ConvCpltCallback>
 8005ada:	e7f1      	b.n	8005ac0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff ffc9 	bl	8005a74 <HAL_ADC_ErrorCallback>
}
 8005ae2:	bd10      	pop	{r4, pc}

08005ae4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8005ae6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ae8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aee:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005af0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005af2:	f043 0304 	orr.w	r3, r3, #4
 8005af6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005af8:	f7ff ffbc 	bl	8005a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005afc:	bd08      	pop	{r3, pc}
 8005afe:	bf00      	nop

08005b00 <HAL_ADC_ConfigChannel>:
{
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005b02:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8005b06:	b083      	sub	sp, #12
 8005b08:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005b0a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005b0c:	f04f 0000 	mov.w	r0, #0
 8005b10:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005b12:	f000 8174 	beq.w	8005dfe <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b16:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b1e:	6894      	ldr	r4, [r2, #8]
 8005b20:	0766      	lsls	r6, r4, #29
 8005b22:	d45e      	bmi.n	8005be2 <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b24:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005b26:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005b2a:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005b2e:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005b32:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005b34:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005b38:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005b3c:	f854 500e 	ldr.w	r5, [r4, lr]
 8005b40:	261f      	movs	r6, #31
 8005b42:	fa00 f00c 	lsl.w	r0, r0, ip
 8005b46:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005b4a:	ea25 0c0c 	bic.w	ip, r5, ip
 8005b4e:	ea40 000c 	orr.w	r0, r0, ip
 8005b52:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b56:	6890      	ldr	r0, [r2, #8]
 8005b58:	0745      	lsls	r5, r0, #29
 8005b5a:	d572      	bpl.n	8005c42 <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b5c:	6890      	ldr	r0, [r2, #8]
 8005b5e:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b60:	6894      	ldr	r4, [r2, #8]
 8005b62:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b66:	4604      	mov	r4, r0
 8005b68:	d10c      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005b6a:	4dbd      	ldr	r5, [pc, #756]	; (8005e60 <HAL_ADC_ConfigChannel+0x360>)
 8005b6c:	68ce      	ldr	r6, [r1, #12]
 8005b6e:	42ae      	cmp	r6, r5
 8005b70:	f000 80eb 	beq.w	8005d4a <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 8005b74:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8005b78:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005b7c:	ea21 0100 	bic.w	r1, r1, r0
 8005b80:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b84:	49b7      	ldr	r1, [pc, #732]	; (8005e64 <HAL_ADC_ConfigChannel+0x364>)
 8005b86:	420c      	tst	r4, r1
 8005b88:	d059      	beq.n	8005c3e <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b8a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005b8e:	f000 8134 	beq.w	8005dfa <HAL_ADC_ConfigChannel+0x2fa>
 8005b92:	4db5      	ldr	r5, [pc, #724]	; (8005e68 <HAL_ADC_ConfigChannel+0x368>)
 8005b94:	49b5      	ldr	r1, [pc, #724]	; (8005e6c <HAL_ADC_ConfigChannel+0x36c>)
 8005b96:	48b6      	ldr	r0, [pc, #728]	; (8005e70 <HAL_ADC_ConfigChannel+0x370>)
 8005b98:	42aa      	cmp	r2, r5
 8005b9a:	bf18      	it	ne
 8005b9c:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005b9e:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005ba0:	49b4      	ldr	r1, [pc, #720]	; (8005e74 <HAL_ADC_ConfigChannel+0x374>)
 8005ba2:	428c      	cmp	r4, r1
 8005ba4:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8005ba8:	d024      	beq.n	8005bf4 <HAL_ADC_ConfigChannel+0xf4>
 8005baa:	49b3      	ldr	r1, [pc, #716]	; (8005e78 <HAL_ADC_ConfigChannel+0x378>)
 8005bac:	428c      	cmp	r4, r1
 8005bae:	d021      	beq.n	8005bf4 <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bb0:	49b2      	ldr	r1, [pc, #712]	; (8005e7c <HAL_ADC_ConfigChannel+0x37c>)
 8005bb2:	428c      	cmp	r4, r1
 8005bb4:	f040 8139 	bne.w	8005e2a <HAL_ADC_ConfigChannel+0x32a>
 8005bb8:	01c4      	lsls	r4, r0, #7
 8005bba:	d440      	bmi.n	8005c3e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bbc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005bc0:	f000 8215 	beq.w	8005fee <HAL_ADC_ConfigChannel+0x4ee>
 8005bc4:	4ca8      	ldr	r4, [pc, #672]	; (8005e68 <HAL_ADC_ConfigChannel+0x368>)
 8005bc6:	49a9      	ldr	r1, [pc, #676]	; (8005e6c <HAL_ADC_ConfigChannel+0x36c>)
 8005bc8:	48a9      	ldr	r0, [pc, #676]	; (8005e70 <HAL_ADC_ConfigChannel+0x370>)
 8005bca:	42a2      	cmp	r2, r4
 8005bcc:	bf18      	it	ne
 8005bce:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005bd6:	432a      	orrs	r2, r5
 8005bd8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bdc:	2000      	movs	r0, #0
 8005bde:	608a      	str	r2, [r1, #8]
}
 8005be0:	e003      	b.n	8005bea <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005be2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005be4:	f042 0220 	orr.w	r2, r2, #32
 8005be8:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005bf0:	b003      	add	sp, #12
 8005bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005bf4:	0201      	lsls	r1, r0, #8
 8005bf6:	d422      	bmi.n	8005c3e <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bf8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005bfc:	f000 8113 	beq.w	8005e26 <HAL_ADC_ConfigChannel+0x326>
 8005c00:	499f      	ldr	r1, [pc, #636]	; (8005e80 <HAL_ADC_ConfigChannel+0x380>)
 8005c02:	428a      	cmp	r2, r1
 8005c04:	d11b      	bne.n	8005c3e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c06:	489a      	ldr	r0, [pc, #616]	; (8005e70 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c08:	4a9e      	ldr	r2, [pc, #632]	; (8005e84 <HAL_ADC_ConfigChannel+0x384>)
 8005c0a:	4c9f      	ldr	r4, [pc, #636]	; (8005e88 <HAL_ADC_ConfigChannel+0x388>)
 8005c0c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c0e:	6881      	ldr	r1, [r0, #8]
 8005c10:	0992      	lsrs	r2, r2, #6
 8005c12:	fba4 4202 	umull	r4, r2, r4, r2
 8005c16:	0992      	lsrs	r2, r2, #6
 8005c18:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005c1c:	3201      	adds	r2, #1
 8005c1e:	4329      	orrs	r1, r5
 8005c20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005c24:	0092      	lsls	r2, r2, #2
 8005c26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005c2a:	6081      	str	r1, [r0, #8]
 8005c2c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005c2e:	9a01      	ldr	r2, [sp, #4]
 8005c30:	b12a      	cbz	r2, 8005c3e <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 8005c32:	9a01      	ldr	r2, [sp, #4]
 8005c34:	3a01      	subs	r2, #1
 8005c36:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005c38:	9a01      	ldr	r2, [sp, #4]
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	d1f9      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e7d3      	b.n	8005bea <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c42:	6890      	ldr	r0, [r2, #8]
 8005c44:	0700      	lsls	r0, r0, #28
 8005c46:	d47e      	bmi.n	8005d46 <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c48:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005c4a:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c4c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8005c50:	f000 8120 	beq.w	8005e94 <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c54:	0dee      	lsrs	r6, r5, #23
 8005c56:	f102 0c14 	add.w	ip, r2, #20
 8005c5a:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8005c5e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005c62:	f85c 4006 	ldr.w	r4, [ip, r6]
 8005c66:	2707      	movs	r7, #7
 8005c68:	40a8      	lsls	r0, r5
 8005c6a:	fa07 f505 	lsl.w	r5, r7, r5
 8005c6e:	ea24 0405 	bic.w	r4, r4, r5
 8005c72:	4320      	orrs	r0, r4
 8005c74:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005c78:	6950      	ldr	r0, [r2, #20]
 8005c7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c7e:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c80:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c84:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c86:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c88:	d02d      	beq.n	8005ce6 <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c8a:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c8e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005c92:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8005c94:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8005c98:	4f7c      	ldr	r7, [pc, #496]	; (8005e8c <HAL_ADC_ConfigChannel+0x38c>)
 8005c9a:	4086      	lsls	r6, r0
 8005c9c:	6808      	ldr	r0, [r1, #0]
 8005c9e:	ea0c 0707 	and.w	r7, ip, r7
 8005ca2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005ca6:	4338      	orrs	r0, r7
 8005ca8:	4330      	orrs	r0, r6
 8005caa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005cae:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cb2:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8005cb4:	698e      	ldr	r6, [r1, #24]
 8005cb6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005cba:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8005cbe:	4330      	orrs	r0, r6
 8005cc0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cc4:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005cc6:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8005cc8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005ccc:	f1a5 0501 	sub.w	r5, r5, #1
 8005cd0:	fab5 f585 	clz	r5, r5
 8005cd4:	096d      	lsrs	r5, r5, #5
 8005cd6:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8005cda:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8005cde:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8005ce2:	6808      	ldr	r0, [r1, #0]
}
 8005ce4:	e73c      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ce6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ce8:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005cea:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005cec:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005cf0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cf4:	2d00      	cmp	r5, #0
 8005cf6:	f040 80df 	bne.w	8005eb8 <HAL_ADC_ConfigChannel+0x3b8>
 8005cfa:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005cfe:	42ac      	cmp	r4, r5
 8005d00:	f000 813d 	beq.w	8005f7e <HAL_ADC_ConfigChannel+0x47e>
 8005d04:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005d06:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d08:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d0c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005d10:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8005d14:	42ae      	cmp	r6, r5
 8005d16:	f000 8158 	beq.w	8005fca <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d1a:	68a6      	ldr	r6, [r4, #8]
 8005d1c:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d1e:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d22:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005d26:	42ae      	cmp	r6, r5
 8005d28:	f000 813d 	beq.w	8005fa6 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005d2c:	68e6      	ldr	r6, [r4, #12]
 8005d2e:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d30:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005d34:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8005d38:	42a5      	cmp	r5, r4
 8005d3a:	f47f af11 	bne.w	8005b60 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d44:	6038      	str	r0, [r7, #0]
 8005d46:	6808      	ldr	r0, [r1, #0]
}
 8005d48:	e70a      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 8005d4a:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005d4e:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8005d52:	432c      	orrs	r4, r5
 8005d54:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	d053      	beq.n	8005e04 <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5c:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d60:	2c00      	cmp	r4, #0
 8005d62:	f000 80e8 	beq.w	8005f36 <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005d66:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d6a:	3401      	adds	r4, #1
 8005d6c:	f004 041f 	and.w	r4, r4, #31
 8005d70:	2c09      	cmp	r4, #9
 8005d72:	f240 80e0 	bls.w	8005f36 <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005d7a:	2c00      	cmp	r4, #0
 8005d7c:	f000 813d 	beq.w	8005ffa <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8005d80:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d84:	3401      	adds	r4, #1
 8005d86:	06a4      	lsls	r4, r4, #26
 8005d88:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005d90:	2d00      	cmp	r5, #0
 8005d92:	f000 8130 	beq.w	8005ff6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005d96:	fab5 f585 	clz	r5, r5
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	f005 051f 	and.w	r5, r5, #31
 8005da0:	2601      	movs	r6, #1
 8005da2:	fa06 f505 	lsl.w	r5, r6, r5
 8005da6:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f000 8120 	beq.w	8005ff2 <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 8005db2:	fab0 f080 	clz	r0, r0
 8005db6:	1c45      	adds	r5, r0, #1
 8005db8:	f005 051f 	and.w	r5, r5, #31
 8005dbc:	2003      	movs	r0, #3
 8005dbe:	f06f 061d 	mvn.w	r6, #29
 8005dc2:	fb10 6005 	smlabb	r0, r0, r5, r6
 8005dc6:	0500      	lsls	r0, r0, #20
 8005dc8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dcc:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005dce:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005dd0:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005dd2:	f005 0504 	and.w	r5, r5, #4
 8005dd6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005dda:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005dde:	fa04 fc00 	lsl.w	ip, r4, r0
 8005de2:	f04f 0e07 	mov.w	lr, #7
 8005de6:	5974      	ldr	r4, [r6, r5]
 8005de8:	fa0e f000 	lsl.w	r0, lr, r0
 8005dec:	ea24 0000 	bic.w	r0, r4, r0
 8005df0:	ea40 000c 	orr.w	r0, r0, ip
 8005df4:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005df6:	680c      	ldr	r4, [r1, #0]
}
 8005df8:	e6c4      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005dfa:	491c      	ldr	r1, [pc, #112]	; (8005e6c <HAL_ADC_ConfigChannel+0x36c>)
 8005dfc:	e6cf      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8005dfe:	2002      	movs	r0, #2
}
 8005e00:	b003      	add	sp, #12
 8005e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e04:	0e80      	lsrs	r0, r0, #26
 8005e06:	3001      	adds	r0, #1
 8005e08:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e0c:	2d09      	cmp	r5, #9
 8005e0e:	f200 8084 	bhi.w	8005f1a <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e12:	0684      	lsls	r4, r0, #26
 8005e14:	2001      	movs	r0, #1
 8005e16:	40a8      	lsls	r0, r5
 8005e18:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005e1c:	4304      	orrs	r4, r0
 8005e1e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8005e22:	0500      	lsls	r0, r0, #20
 8005e24:	e7d2      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e26:	4811      	ldr	r0, [pc, #68]	; (8005e6c <HAL_ADC_ConfigChannel+0x36c>)
 8005e28:	e6ee      	b.n	8005c08 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e2a:	4919      	ldr	r1, [pc, #100]	; (8005e90 <HAL_ADC_ConfigChannel+0x390>)
 8005e2c:	428c      	cmp	r4, r1
 8005e2e:	f47f af06 	bne.w	8005c3e <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e32:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005e36:	f47f af02 	bne.w	8005c3e <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005e3a:	490b      	ldr	r1, [pc, #44]	; (8005e68 <HAL_ADC_ConfigChannel+0x368>)
 8005e3c:	428a      	cmp	r2, r1
 8005e3e:	f43f aefe 	beq.w	8005c3e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e42:	4c0b      	ldr	r4, [pc, #44]	; (8005e70 <HAL_ADC_ConfigChannel+0x370>)
 8005e44:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8005e48:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005e4c:	bf18      	it	ne
 8005e4e:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005e50:	688a      	ldr	r2, [r1, #8]
 8005e52:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005e56:	432a      	orrs	r2, r5
 8005e58:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e5c:	608a      	str	r2, [r1, #8]
}
 8005e5e:	e6c4      	b.n	8005bea <HAL_ADC_ConfigChannel+0xea>
 8005e60:	407f0000 	.word	0x407f0000
 8005e64:	80080000 	.word	0x80080000
 8005e68:	50000100 	.word	0x50000100
 8005e6c:	50000300 	.word	0x50000300
 8005e70:	50000700 	.word	0x50000700
 8005e74:	c3210000 	.word	0xc3210000
 8005e78:	90c00010 	.word	0x90c00010
 8005e7c:	c7520000 	.word	0xc7520000
 8005e80:	50000600 	.word	0x50000600
 8005e84:	20000008 	.word	0x20000008
 8005e88:	053e2d63 	.word	0x053e2d63
 8005e8c:	03fff000 	.word	0x03fff000
 8005e90:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e94:	0de8      	lsrs	r0, r5, #23
 8005e96:	f000 0004 	and.w	r0, r0, #4
 8005e9a:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 8005e9e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005ea2:	2607      	movs	r6, #7
 8005ea4:	40ae      	lsls	r6, r5
 8005ea6:	5825      	ldr	r5, [r4, r0]
 8005ea8:	ea25 0506 	bic.w	r5, r5, r6
 8005eac:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005eae:	6950      	ldr	r0, [r2, #20]
 8005eb0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005eb4:	6150      	str	r0, [r2, #20]
}
 8005eb6:	e6e3      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005ebc:	b11d      	cbz	r5, 8005ec6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005ebe:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ec2:	42ac      	cmp	r4, r5
 8005ec4:	d05b      	beq.n	8005f7e <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ec6:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005ec8:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eca:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ece:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005ed2:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005eda:	b11d      	cbz	r5, 8005ee4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8005edc:	fab5 f585 	clz	r5, r5
 8005ee0:	42ae      	cmp	r6, r5
 8005ee2:	d072      	beq.n	8005fca <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ee4:	68a5      	ldr	r5, [r4, #8]
 8005ee6:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ee8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005eec:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005ef4:	b11d      	cbz	r5, 8005efe <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 8005ef6:	fab5 f585 	clz	r5, r5
 8005efa:	42ae      	cmp	r6, r5
 8005efc:	d053      	beq.n	8005fa6 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005efe:	68e5      	ldr	r5, [r4, #12]
 8005f00:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f02:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f06:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	f43f ae26 	beq.w	8005b60 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 8005f14:	fab5 f585 	clz	r5, r5
 8005f18:	e70e      	b.n	8005d38 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f1a:	0684      	lsls	r4, r0, #26
 8005f1c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8005f20:	381e      	subs	r0, #30
 8005f22:	2601      	movs	r6, #1
 8005f24:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005f28:	0500      	lsls	r0, r0, #20
 8005f2a:	fa06 f505 	lsl.w	r5, r6, r5
 8005f2e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005f32:	432c      	orrs	r4, r5
 8005f34:	e74a      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f36:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005f3a:	2c00      	cmp	r4, #0
 8005f3c:	d065      	beq.n	800600a <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8005f3e:	fab4 f484 	clz	r4, r4
 8005f42:	3401      	adds	r4, #1
 8005f44:	06a4      	lsls	r4, r4, #26
 8005f46:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	d059      	beq.n	8006006 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8005f52:	fab5 f585 	clz	r5, r5
 8005f56:	3501      	adds	r5, #1
 8005f58:	f005 051f 	and.w	r5, r5, #31
 8005f5c:	2601      	movs	r6, #1
 8005f5e:	fa06 f505 	lsl.w	r5, r6, r5
 8005f62:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f64:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d049      	beq.n	8006000 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8005f6c:	fab0 f080 	clz	r0, r0
 8005f70:	3001      	adds	r0, #1
 8005f72:	f000 001f 	and.w	r0, r0, #31
 8005f76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005f7a:	0500      	lsls	r0, r0, #20
 8005f7c:	e726      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 8005f7e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005f80:	4614      	mov	r4, r2
 8005f82:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f86:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f8a:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f8c:	6808      	ldr	r0, [r1, #0]
 8005f8e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005f90:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f94:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f98:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	d19a      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x3d6>
 8005fa0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005fa4:	e6b6      	b.n	8005d14 <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 8005fa6:	6838      	ldr	r0, [r7, #0]
 8005fa8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005fac:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fae:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fb0:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fb2:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fb6:	68e4      	ldr	r4, [r4, #12]
 8005fb8:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005fbc:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	d1a2      	bne.n	8005f0a <HAL_ADC_ConfigChannel+0x40a>
 8005fc4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005fc8:	e6b6      	b.n	8005d38 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8005fca:	6838      	ldr	r0, [r7, #0]
 8005fcc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005fd0:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fd2:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fd4:	6808      	ldr	r0, [r1, #0]
 8005fd6:	68a6      	ldr	r6, [r4, #8]
 8005fd8:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fdc:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005fe0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fe4:	2d00      	cmp	r5, #0
 8005fe6:	d183      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x3f0>
 8005fe8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005fec:	e69b      	b.n	8005d26 <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fee:	4908      	ldr	r1, [pc, #32]	; (8006010 <HAL_ADC_ConfigChannel+0x510>)
 8005ff0:	e5ee      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0xd0>
 8005ff2:	4808      	ldr	r0, [pc, #32]	; (8006014 <HAL_ADC_ConfigChannel+0x514>)
 8005ff4:	e6ea      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x2cc>
 8005ff6:	2502      	movs	r5, #2
 8005ff8:	e6d5      	b.n	8005da6 <HAL_ADC_ConfigChannel+0x2a6>
 8005ffa:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005ffe:	e6c5      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x28c>
 8006000:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006004:	e6e2      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x2cc>
 8006006:	2502      	movs	r5, #2
 8006008:	e7ab      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x462>
 800600a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800600e:	e79c      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x44a>
 8006010:	50000300 	.word	0x50000300
 8006014:	fe500000 	.word	0xfe500000

08006018 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006018:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	07d2      	lsls	r2, r2, #31
 800601e:	d501      	bpl.n	8006024 <ADC_Enable+0xc>
  return HAL_OK;
 8006020:	2000      	movs	r0, #0
}
 8006022:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006024:	6899      	ldr	r1, [r3, #8]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <ADC_Enable+0x70>)
 8006028:	4211      	tst	r1, r2
{
 800602a:	b570      	push	{r4, r5, r6, lr}
 800602c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800602e:	d008      	beq.n	8006042 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006030:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006032:	f043 0310 	orr.w	r3, r3, #16
 8006036:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006038:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800603a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800603c:	4303      	orrs	r3, r0
 800603e:	6633      	str	r3, [r6, #96]	; 0x60
}
 8006040:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	4d11      	ldr	r5, [pc, #68]	; (800608c <ADC_Enable+0x74>)
 8006046:	402a      	ands	r2, r5
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800604e:	f7fc ff49 	bl	8002ee4 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006052:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006054:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	07d0      	lsls	r0, r2, #31
 800605a:	d413      	bmi.n	8006084 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	07d1      	lsls	r1, r2, #31
 8006060:	d404      	bmi.n	800606c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	402a      	ands	r2, r5
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800606c:	f7fc ff3a 	bl	8002ee4 <HAL_GetTick>
 8006070:	1b03      	subs	r3, r0, r4
 8006072:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006074:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006076:	d9ee      	bls.n	8006056 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	07d2      	lsls	r2, r2, #31
 800607c:	d5d8      	bpl.n	8006030 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	07d0      	lsls	r0, r2, #31
 8006082:	d5eb      	bpl.n	800605c <ADC_Enable+0x44>
  return HAL_OK;
 8006084:	2000      	movs	r0, #0
}
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	8000003f 	.word	0x8000003f
 800608c:	7fffffc0 	.word	0x7fffffc0

08006090 <HAL_ADC_Start_DMA>:
{
 8006090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006094:	6805      	ldr	r5, [r0, #0]
 8006096:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 800609a:	4604      	mov	r4, r0
 800609c:	460e      	mov	r6, r1
 800609e:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060a0:	d022      	beq.n	80060e8 <HAL_ADC_Start_DMA+0x58>
 80060a2:	4a39      	ldr	r2, [pc, #228]	; (8006188 <HAL_ADC_Start_DMA+0xf8>)
 80060a4:	4839      	ldr	r0, [pc, #228]	; (800618c <HAL_ADC_Start_DMA+0xfc>)
 80060a6:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <HAL_ADC_Start_DMA+0x100>)
 80060a8:	4295      	cmp	r5, r2
 80060aa:	bf08      	it	eq
 80060ac:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80060ae:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060b0:	68ab      	ldr	r3, [r5, #8]
 80060b2:	075b      	lsls	r3, r3, #29
 80060b4:	d415      	bmi.n	80060e2 <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 80060b6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d011      	beq.n	80060e2 <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80060be:	4b35      	ldr	r3, [pc, #212]	; (8006194 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 80060c0:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80060c2:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80060c4:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 80060c8:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80060cc:	d00e      	beq.n	80060ec <HAL_ADC_Start_DMA+0x5c>
 80060ce:	f240 2321 	movw	r3, #545	; 0x221
 80060d2:	fa23 f308 	lsr.w	r3, r3, r8
 80060d6:	4003      	ands	r3, r0
 80060d8:	d108      	bne.n	80060ec <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 80060da:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 80060de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80060e2:	2002      	movs	r0, #2
}
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060e8:	4829      	ldr	r0, [pc, #164]	; (8006190 <HAL_ADC_Start_DMA+0x100>)
 80060ea:	e7e0      	b.n	80060ae <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 80060ec:	4620      	mov	r0, r4
 80060ee:	f7ff ff93 	bl	8006018 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d13f      	bne.n	8006176 <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 80060f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060f8:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80060fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006106:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006108:	4b1f      	ldr	r3, [pc, #124]	; (8006188 <HAL_ADC_Start_DMA+0xf8>)
 800610a:	4299      	cmp	r1, r3
 800610c:	d038      	beq.n	8006180 <HAL_ADC_Start_DMA+0xf0>
 800610e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006112:	4299      	cmp	r1, r3
 8006114:	d034      	beq.n	8006180 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006116:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006118:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800611c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800611e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006122:	4d1d      	ldr	r5, [pc, #116]	; (8006198 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006124:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006128:	bf1c      	itt	ne
 800612a:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 800612c:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8006130:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006132:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006134:	4d19      	ldr	r5, [pc, #100]	; (800619c <HAL_ADC_Start_DMA+0x10c>)
 8006136:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006138:	4d19      	ldr	r5, [pc, #100]	; (80061a0 <HAL_ADC_Start_DMA+0x110>)
 800613a:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800613c:	251c      	movs	r5, #28
 800613e:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8006140:	2500      	movs	r5, #0
 8006142:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006146:	684d      	ldr	r5, [r1, #4]
 8006148:	f045 0510 	orr.w	r5, r5, #16
 800614c:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800614e:	68cd      	ldr	r5, [r1, #12]
 8006150:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006154:	463b      	mov	r3, r7
 8006156:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006158:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800615a:	3140      	adds	r1, #64	; 0x40
 800615c:	f000 f9e0 	bl	8006520 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006160:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006162:	6893      	ldr	r3, [r2, #8]
 8006164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800616c:	f043 0304 	orr.w	r3, r3, #4
 8006170:	6093      	str	r3, [r2, #8]
}
 8006172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8006176:	2300      	movs	r3, #0
 8006178:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 800617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006180:	f1b8 0f00 	cmp.w	r8, #0
 8006184:	d1cb      	bne.n	800611e <HAL_ADC_Start_DMA+0x8e>
 8006186:	e7c6      	b.n	8006116 <HAL_ADC_Start_DMA+0x86>
 8006188:	50000100 	.word	0x50000100
 800618c:	50000700 	.word	0x50000700
 8006190:	50000300 	.word	0x50000300
 8006194:	50000600 	.word	0x50000600
 8006198:	08005a79 	.word	0x08005a79
 800619c:	08005a69 	.word	0x08005a69
 80061a0:	08005ae5 	.word	0x08005ae5

080061a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80061a4:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061a6:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061aa:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80061ac:	2a01      	cmp	r2, #1
{
 80061ae:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 80061b0:	d056      	beq.n	8006260 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061b2:	6802      	ldr	r2, [r0, #0]
 80061b4:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80061b6:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80061b8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061ba:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80061be:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80061c0:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80061c4:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80061c6:	d00b      	beq.n	80061e0 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 80061c8:	4d48      	ldr	r5, [pc, #288]	; (80062ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80061ca:	42aa      	cmp	r2, r5
 80061cc:	d046      	beq.n	800625c <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061d0:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061d4:	f042 0220 	orr.w	r2, r2, #32
 80061d8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80061da:	b01d      	add	sp, #116	; 0x74
 80061dc:	bc70      	pop	{r4, r5, r6}
 80061de:	4770      	bx	lr
 80061e0:	4843      	ldr	r0, [pc, #268]	; (80062f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061e2:	6880      	ldr	r0, [r0, #8]
 80061e4:	0740      	lsls	r0, r0, #29
 80061e6:	d50b      	bpl.n	8006200 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80061e8:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061ec:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80061f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061f2:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80061fa:	b01d      	add	sp, #116	; 0x74
 80061fc:	bc70      	pop	{r4, r5, r6}
 80061fe:	4770      	bx	lr
 8006200:	6890      	ldr	r0, [r2, #8]
 8006202:	0744      	lsls	r4, r0, #29
 8006204:	d4f1      	bmi.n	80061ea <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006206:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800620a:	d02d      	beq.n	8006268 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800620c:	4838      	ldr	r0, [pc, #224]	; (80062f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800620e:	4282      	cmp	r2, r0
 8006210:	d02a      	beq.n	8006268 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006212:	2e00      	cmp	r6, #0
 8006214:	d058      	beq.n	80062c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006216:	4837      	ldr	r0, [pc, #220]	; (80062f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006218:	684c      	ldr	r4, [r1, #4]
 800621a:	6882      	ldr	r2, [r0, #8]
 800621c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006220:	4322      	orrs	r2, r4
 8006222:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8006226:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800622a:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800622c:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800622e:	6894      	ldr	r4, [r2, #8]
 8006230:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006234:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006236:	4322      	orrs	r2, r4
 8006238:	4c2f      	ldr	r4, [pc, #188]	; (80062f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800623a:	68a4      	ldr	r4, [r4, #8]
 800623c:	4322      	orrs	r2, r4
 800623e:	43d2      	mvns	r2, r2
 8006240:	f002 0201 	and.w	r2, r2, #1
 8006244:	b142      	cbz	r2, 8006258 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 8006246:	6884      	ldr	r4, [r0, #8]
 8006248:	688a      	ldr	r2, [r1, #8]
 800624a:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 800624e:	4332      	orrs	r2, r6
 8006250:	f021 010f 	bic.w	r1, r1, #15
 8006254:	430a      	orrs	r2, r1
 8006256:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006258:	2000      	movs	r0, #0
 800625a:	e7cb      	b.n	80061f4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 800625c:	4827      	ldr	r0, [pc, #156]	; (80062fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800625e:	e7c0      	b.n	80061e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8006260:	2002      	movs	r0, #2
}
 8006262:	b01d      	add	sp, #116	; 0x74
 8006264:	bc70      	pop	{r4, r5, r6}
 8006266:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006268:	b1ae      	cbz	r6, 8006296 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800626a:	4825      	ldr	r0, [pc, #148]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800626c:	684c      	ldr	r4, [r1, #4]
 800626e:	6882      	ldr	r2, [r0, #8]
 8006270:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006274:	4322      	orrs	r2, r4
 8006276:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800627a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800627e:	6082      	str	r2, [r0, #8]
 8006280:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006282:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006286:	6880      	ldr	r0, [r0, #8]
 8006288:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800628a:	4302      	orrs	r2, r0
 800628c:	43d2      	mvns	r2, r2
 800628e:	481c      	ldr	r0, [pc, #112]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006290:	f002 0201 	and.w	r2, r2, #1
 8006294:	e7d6      	b.n	8006244 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006296:	491a      	ldr	r1, [pc, #104]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006298:	688a      	ldr	r2, [r1, #8]
 800629a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800629e:	608a      	str	r2, [r1, #8]
 80062a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80062a4:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80062a6:	6880      	ldr	r0, [r0, #8]
 80062a8:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062aa:	4915      	ldr	r1, [pc, #84]	; (8006300 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80062ac:	4302      	orrs	r2, r0
 80062ae:	43d2      	mvns	r2, r2
 80062b0:	f002 0201 	and.w	r2, r2, #1
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	d0cf      	beq.n	8006258 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062b8:	688a      	ldr	r2, [r1, #8]
 80062ba:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80062be:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062c2:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062c4:	608a      	str	r2, [r1, #8]
 80062c6:	e795      	b.n	80061f4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80062c8:	490a      	ldr	r1, [pc, #40]	; (80062f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80062ca:	4808      	ldr	r0, [pc, #32]	; (80062ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80062cc:	688a      	ldr	r2, [r1, #8]
 80062ce:	4c0b      	ldr	r4, [pc, #44]	; (80062fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80062d0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80062d4:	608a      	str	r2, [r1, #8]
 80062d6:	6880      	ldr	r0, [r0, #8]
 80062d8:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062da:	4302      	orrs	r2, r0
 80062dc:	4806      	ldr	r0, [pc, #24]	; (80062f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80062de:	6880      	ldr	r0, [r0, #8]
 80062e0:	4302      	orrs	r2, r0
 80062e2:	43d2      	mvns	r2, r2
 80062e4:	f002 0201 	and.w	r2, r2, #1
 80062e8:	e7e4      	b.n	80062b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80062ea:	bf00      	nop
 80062ec:	50000400 	.word	0x50000400
 80062f0:	50000100 	.word	0x50000100
 80062f4:	50000700 	.word	0x50000700
 80062f8:	50000600 	.word	0x50000600
 80062fc:	50000500 	.word	0x50000500
 8006300:	50000300 	.word	0x50000300

08006304 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006304:	4907      	ldr	r1, [pc, #28]	; (8006324 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006306:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006308:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800630a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800630e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006312:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006314:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006316:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800631a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800631e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006328:	4b1c      	ldr	r3, [pc, #112]	; (800639c <HAL_NVIC_SetPriority+0x74>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006330:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006332:	f1c3 0e07 	rsb	lr, r3, #7
 8006336:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800633a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800633e:	bf28      	it	cs
 8006340:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006344:	f1bc 0f06 	cmp.w	ip, #6
 8006348:	d91b      	bls.n	8006382 <HAL_NVIC_SetPriority+0x5a>
 800634a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800634c:	f04f 3cff 	mov.w	ip, #4294967295
 8006350:	fa0c fc03 	lsl.w	ip, ip, r3
 8006354:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006358:	f04f 3cff 	mov.w	ip, #4294967295
 800635c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006360:	ea21 010c 	bic.w	r1, r1, ip
 8006364:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006366:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006368:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800636c:	db0c      	blt.n	8006388 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800636e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006372:	0109      	lsls	r1, r1, #4
 8006374:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006378:	b2c9      	uxtb	r1, r1
 800637a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800637e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006382:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006384:	4613      	mov	r3, r2
 8006386:	e7e7      	b.n	8006358 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <HAL_NVIC_SetPriority+0x78>)
 800638a:	f000 000f 	and.w	r0, r0, #15
 800638e:	0109      	lsls	r1, r1, #4
 8006390:	4403      	add	r3, r0
 8006392:	b2c9      	uxtb	r1, r1
 8006394:	7619      	strb	r1, [r3, #24]
 8006396:	f85d fb04 	ldr.w	pc, [sp], #4
 800639a:	bf00      	nop
 800639c:	e000ed00 	.word	0xe000ed00
 80063a0:	e000ecfc 	.word	0xe000ecfc

080063a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80063a4:	2800      	cmp	r0, #0
 80063a6:	db07      	blt.n	80063b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063a8:	4a04      	ldr	r2, [pc, #16]	; (80063bc <HAL_NVIC_EnableIRQ+0x18>)
 80063aa:	0941      	lsrs	r1, r0, #5
 80063ac:	2301      	movs	r3, #1
 80063ae:	f000 001f 	and.w	r0, r0, #31
 80063b2:	4083      	lsls	r3, r0
 80063b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	e000e100 	.word	0xe000e100

080063c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063c0:	3801      	subs	r0, #1
 80063c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80063c6:	d210      	bcs.n	80063ea <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063c8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ce:	4c08      	ldr	r4, [pc, #32]	; (80063f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063d0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063d2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80063d6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063da:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063dc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063de:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063e0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80063e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063e6:	6119      	str	r1, [r3, #16]
 80063e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80063ea:	2001      	movs	r0, #1
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d078      	beq.n	80064ea <HAL_DMA_Init+0xf6>
{
 80063f8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063fa:	4b3d      	ldr	r3, [pc, #244]	; (80064f0 <HAL_DMA_Init+0xfc>)
 80063fc:	6804      	ldr	r4, [r0, #0]
 80063fe:	429c      	cmp	r4, r3
 8006400:	d95f      	bls.n	80064c2 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006402:	4a3c      	ldr	r2, [pc, #240]	; (80064f4 <HAL_DMA_Init+0x100>)
 8006404:	4b3c      	ldr	r3, [pc, #240]	; (80064f8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8006406:	493d      	ldr	r1, [pc, #244]	; (80064fc <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006408:	4422      	add	r2, r4
 800640a:	fba3 3202 	umull	r3, r2, r3, r2
 800640e:	0912      	lsrs	r2, r2, #4
 8006410:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006412:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006414:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006416:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800641a:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800641c:	4e36      	ldr	r6, [pc, #216]	; (80064f8 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800641e:	4f34      	ldr	r7, [pc, #208]	; (80064f0 <HAL_DMA_Init+0xfc>)
 8006420:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006424:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8006426:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006428:	430b      	orrs	r3, r1
 800642a:	6941      	ldr	r1, [r0, #20]
 800642c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800642e:	6981      	ldr	r1, [r0, #24]
 8006430:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8006432:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006434:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006438:	69c1      	ldr	r1, [r0, #28]
 800643a:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800643c:	b2e1      	uxtb	r1, r4
 800643e:	3908      	subs	r1, #8
 8006440:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8006444:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006446:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800644a:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 800644c:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8006450:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006452:	4e2b      	ldr	r6, [pc, #172]	; (8006500 <HAL_DMA_Init+0x10c>)
 8006454:	4b2b      	ldr	r3, [pc, #172]	; (8006504 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006456:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800645a:	42bc      	cmp	r4, r7
 800645c:	bf98      	it	ls
 800645e:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006460:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006464:	4c28      	ldr	r4, [pc, #160]	; (8006508 <HAL_DMA_Init+0x114>)
 8006466:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006468:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800646c:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800646e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006472:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006474:	6484      	str	r4, [r0, #72]	; 0x48
 8006476:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800647a:	d02b      	beq.n	80064d4 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800647c:	6845      	ldr	r5, [r0, #4]
 800647e:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006480:	3d01      	subs	r5, #1
 8006482:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006484:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006488:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800648c:	d828      	bhi.n	80064e0 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800648e:	4b1f      	ldr	r3, [pc, #124]	; (800650c <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006490:	4d1f      	ldr	r5, [pc, #124]	; (8006510 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006492:	4a20      	ldr	r2, [pc, #128]	; (8006514 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006494:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006496:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006498:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800649a:	f004 041f 	and.w	r4, r4, #31
 800649e:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064a2:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064a4:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80064a8:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064aa:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064ac:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064ae:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80064b0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064b2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80064b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80064b8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80064bc:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80064be:	4618      	mov	r0, r3
}
 80064c0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_DMA_Init+0x124>)
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 80064c6:	4915      	ldr	r1, [pc, #84]	; (800651c <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80064c8:	4422      	add	r2, r4
 80064ca:	fba3 3202 	umull	r3, r2, r3, r2
 80064ce:	0912      	lsrs	r2, r2, #4
 80064d0:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80064d2:	e79e      	b.n	8006412 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064d4:	2400      	movs	r4, #0
 80064d6:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064d8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064dc:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 80064e0:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80064e2:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064e6:	65c3      	str	r3, [r0, #92]	; 0x5c
 80064e8:	e7e1      	b.n	80064ae <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 80064ea:	2001      	movs	r0, #1
}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40020407 	.word	0x40020407
 80064f4:	bffdfbf8 	.word	0xbffdfbf8
 80064f8:	cccccccd 	.word	0xcccccccd
 80064fc:	40020400 	.word	0x40020400
 8006500:	40020800 	.word	0x40020800
 8006504:	40020820 	.word	0x40020820
 8006508:	40020880 	.word	0x40020880
 800650c:	1000823f 	.word	0x1000823f
 8006510:	40020940 	.word	0x40020940
 8006514:	40020900 	.word	0x40020900
 8006518:	bffdfff8 	.word	0xbffdfff8
 800651c:	40020000 	.word	0x40020000

08006520 <HAL_DMA_Start_IT>:
{
 8006520:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8006522:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8006526:	2c01      	cmp	r4, #1
 8006528:	d051      	beq.n	80065ce <HAL_DMA_Start_IT+0xae>
 800652a:	2401      	movs	r4, #1
 800652c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006530:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8006534:	2c01      	cmp	r4, #1
 8006536:	d005      	beq.n	8006544 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006538:	2300      	movs	r3, #0
 800653a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800653e:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8006540:	2002      	movs	r0, #2
}
 8006542:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8006544:	2402      	movs	r4, #2
 8006546:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800654a:	2400      	movs	r4, #0
 800654c:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800654e:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006550:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8006552:	6825      	ldr	r5, [r4, #0]
 8006554:	f025 0501 	bic.w	r5, r5, #1
 8006558:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800655a:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 800655e:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8006560:	b115      	cbz	r5, 8006568 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006562:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8006566:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006568:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800656a:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800656c:	f006 0c1f 	and.w	ip, r6, #31
 8006570:	2601      	movs	r6, #1
 8006572:	fa06 f60c 	lsl.w	r6, r6, ip
 8006576:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006578:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800657a:	6883      	ldr	r3, [r0, #8]
 800657c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 800657e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8006580:	bf0b      	itete	eq
 8006582:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006584:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006586:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006588:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800658a:	b1bb      	cbz	r3, 80065bc <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	f043 030e 	orr.w	r3, r3, #14
 8006592:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006594:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	03d2      	lsls	r2, r2, #15
 800659a:	d503      	bpl.n	80065a4 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80065a4:	b11d      	cbz	r5, 80065ae <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ac:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80065b4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80065b6:	6023      	str	r3, [r4, #0]
}
 80065b8:	bcf0      	pop	{r4, r5, r6, r7}
 80065ba:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	f023 0304 	bic.w	r3, r3, #4
 80065c2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	f043 030a 	orr.w	r3, r3, #10
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	e7e2      	b.n	8006594 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 80065ce:	2002      	movs	r0, #2
}
 80065d0:	bcf0      	pop	{r4, r5, r6, r7}
 80065d2:	4770      	bx	lr

080065d4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065d4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80065d8:	2a02      	cmp	r2, #2
{
 80065da:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065dc:	d009      	beq.n	80065f2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065de:	2204      	movs	r2, #4
 80065e0:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80065e2:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 80065e4:	2200      	movs	r2, #0
    status = HAL_ERROR;
 80065e6:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80065e8:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80065ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80065f0:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065f2:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 80065f6:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065f8:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fa:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065fc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fe:	f020 000e 	bic.w	r0, r0, #14
 8006602:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800660a:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 800660c:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800660e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8006610:	f020 0001 	bic.w	r0, r0, #1
 8006614:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006616:	f001 011f 	and.w	r1, r1, #31
 800661a:	2201      	movs	r2, #1
 800661c:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800661e:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006622:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006624:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8006626:	b138      	cbz	r0, 8006638 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006628:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800662a:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800662e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006632:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006634:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006636:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006638:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 800663a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 800663c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006644:	bc30      	pop	{r4, r5}
 8006646:	4770      	bx	lr

08006648 <HAL_DMA_Abort_IT>:
{
 8006648:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800664a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800664e:	2b02      	cmp	r3, #2
 8006650:	d009      	beq.n	8006666 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8006652:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006654:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8006656:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006658:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800665a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800665e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 8006662:	4618      	mov	r0, r3
}
 8006664:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006666:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006668:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800666a:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800666c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800666e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006670:	f021 010e 	bic.w	r1, r1, #14
 8006674:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006676:	6819      	ldr	r1, [r3, #0]
 8006678:	f021 0101 	bic.w	r1, r1, #1
 800667c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800667e:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006680:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006686:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006688:	f002 021f 	and.w	r2, r2, #31
 800668c:	2301      	movs	r3, #1
 800668e:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006690:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006694:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006696:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006698:	b132      	cbz	r2, 80066a8 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800669a:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800669c:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a4:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066a6:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 80066a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80066aa:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80066ac:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80066ae:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80066b2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80066b6:	b113      	cbz	r3, 80066be <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 80066b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	4620      	mov	r0, r4
}
 80066bc:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80066be:	4618      	mov	r0, r3
}
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop

080066c4 <HAL_DMA_IRQHandler>:
{
 80066c4:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80066c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066c8:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80066ca:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066cc:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80066ce:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2204      	movs	r2, #4
 80066d6:	409a      	lsls	r2, r3
 80066d8:	420a      	tst	r2, r1
 80066da:	d00e      	beq.n	80066fa <HAL_DMA_IRQHandler+0x36>
 80066dc:	f014 0f04 	tst.w	r4, #4
 80066e0:	d00b      	beq.n	80066fa <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066e2:	682b      	ldr	r3, [r5, #0]
 80066e4:	069b      	lsls	r3, r3, #26
 80066e6:	d403      	bmi.n	80066f0 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	f023 0304 	bic.w	r3, r3, #4
 80066ee:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80066f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066f2:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80066f4:	b1cb      	cbz	r3, 800672a <HAL_DMA_IRQHandler+0x66>
}
 80066f6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80066f8:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066fa:	2202      	movs	r2, #2
 80066fc:	409a      	lsls	r2, r3
 80066fe:	420a      	tst	r2, r1
 8006700:	d015      	beq.n	800672e <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8006702:	f014 0f02 	tst.w	r4, #2
 8006706:	d012      	beq.n	800672e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	0699      	lsls	r1, r3, #26
 800670c:	d406      	bmi.n	800671c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800670e:	682b      	ldr	r3, [r5, #0]
 8006710:	f023 030a 	bic.w	r3, r3, #10
 8006714:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006716:	2301      	movs	r3, #1
 8006718:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 800671c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800671e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006720:	2100      	movs	r1, #0
 8006722:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e5      	bne.n	80066f6 <HAL_DMA_IRQHandler+0x32>
}
 800672a:	bc70      	pop	{r4, r5, r6}
 800672c:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800672e:	2208      	movs	r2, #8
 8006730:	409a      	lsls	r2, r3
 8006732:	420a      	tst	r2, r1
 8006734:	d0f9      	beq.n	800672a <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8006736:	0722      	lsls	r2, r4, #28
 8006738:	d5f7      	bpl.n	800672a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800673a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800673c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800673e:	f022 020e 	bic.w	r2, r2, #14
 8006742:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006744:	2201      	movs	r2, #1
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800674a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800674c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800674e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006750:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006754:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8006758:	2900      	cmp	r1, #0
 800675a:	d0e6      	beq.n	800672a <HAL_DMA_IRQHandler+0x66>
}
 800675c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800675e:	4708      	bx	r1

08006760 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006760:	2800      	cmp	r0, #0
 8006762:	f000 814c 	beq.w	80069fe <HAL_FDCAN_Init+0x29e>
{
 8006766:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800676a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800676e:	4604      	mov	r4, r0
 8006770:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006774:	2b00      	cmp	r3, #0
 8006776:	d073      	beq.n	8006860 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006778:	6822      	ldr	r2, [r4, #0]
 800677a:	6993      	ldr	r3, [r2, #24]
 800677c:	f023 0310 	bic.w	r3, r3, #16
 8006780:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006782:	f7fc fbaf 	bl	8002ee4 <HAL_GetTick>
 8006786:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006788:	e004      	b.n	8006794 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800678a:	f7fc fbab 	bl	8002ee4 <HAL_GetTick>
 800678e:	1b43      	subs	r3, r0, r5
 8006790:	2b0a      	cmp	r3, #10
 8006792:	d85b      	bhi.n	800684c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	0711      	lsls	r1, r2, #28
 800679a:	d4f6      	bmi.n	800678a <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067a4:	f7fc fb9e 	bl	8002ee4 <HAL_GetTick>
 80067a8:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80067aa:	e004      	b.n	80067b6 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80067ac:	f7fc fb9a 	bl	8002ee4 <HAL_GetTick>
 80067b0:	1b40      	subs	r0, r0, r5
 80067b2:	280a      	cmp	r0, #10
 80067b4:	d84a      	bhi.n	800684c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	07d2      	lsls	r2, r2, #31
 80067bc:	d5f6      	bpl.n	80067ac <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80067be:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80067c0:	4998      	ldr	r1, [pc, #608]	; (8006a24 <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80067c2:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 80067c6:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80067c8:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80067ca:	f000 8113 	beq.w	80069f4 <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80067ce:	7c22      	ldrb	r2, [r4, #16]
 80067d0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	bf0c      	ite	eq
 80067d6:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80067da:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 80067de:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80067e0:	7c62      	ldrb	r2, [r4, #17]
 80067e2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	bf0c      	ite	eq
 80067e8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80067ec:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 80067f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80067f2:	7ca2      	ldrb	r2, [r4, #18]
 80067f4:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	bf0c      	ite	eq
 80067fa:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80067fe:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006802:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006808:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800680a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800680e:	4302      	orrs	r2, r0
 8006810:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006818:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800681a:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800681c:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800681e:	f022 0210 	bic.w	r2, r2, #16
 8006822:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006824:	d021      	beq.n	800686a <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006826:	b321      	cbz	r1, 8006872 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006828:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800682a:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800682c:	f000 80f5 	beq.w	8006a1a <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006834:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006836:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006838:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800683a:	f042 0210 	orr.w	r2, r2, #16
 800683e:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006840:	d117      	bne.n	8006872 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	f042 0220 	orr.w	r2, r2, #32
 8006848:	619a      	str	r2, [r3, #24]
 800684a:	e012      	b.n	8006872 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800684c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800684e:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006856:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800685a:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800685c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006860:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006864:	f7fb f844 	bl	80018f0 <HAL_FDCAN_MspInit>
 8006868:	e786      	b.n	8006778 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	f042 0204 	orr.w	r2, r2, #4
 8006870:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006872:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006876:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006878:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800687a:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800687c:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006880:	6a21      	ldr	r1, [r4, #32]
 8006882:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006884:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006886:	6961      	ldr	r1, [r4, #20]
 8006888:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800688a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800688e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006892:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006894:	d10e      	bne.n	80068b4 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006896:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800689a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800689c:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800689e:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80068a0:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80068a2:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068a4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80068a8:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80068aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068ac:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80068ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80068b2:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80068b4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80068b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80068ba:	495b      	ldr	r1, [pc, #364]	; (8006a28 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80068bc:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 80068be:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80068c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 80068c4:	f000 809d 	beq.w	8006a02 <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80068c8:	4a58      	ldr	r2, [pc, #352]	; (8006a2c <HAL_FDCAN_Init+0x2cc>)
 80068ca:	4e59      	ldr	r6, [pc, #356]	; (8006a30 <HAL_FDCAN_Init+0x2d0>)
 80068cc:	4f59      	ldr	r7, [pc, #356]	; (8006a34 <HAL_FDCAN_Init+0x2d4>)
 80068ce:	4d5a      	ldr	r5, [pc, #360]	; (8006a38 <HAL_FDCAN_Init+0x2d8>)
 80068d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf18      	it	ne
 80068d8:	4691      	movne	r9, r2
 80068da:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 80068de:	f1a2 0218 	sub.w	r2, r2, #24
 80068e2:	f101 0110 	add.w	r1, r1, #16
 80068e6:	bf18      	it	ne
 80068e8:	4616      	movne	r6, r2
 80068ea:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 80068ee:	bf14      	ite	ne
 80068f0:	4617      	movne	r7, r2
 80068f2:	468e      	moveq	lr, r1
 80068f4:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 80068f8:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 80068fc:	bf14      	ite	ne
 80068fe:	4696      	movne	lr, r2
 8006900:	4688      	moveq	r8, r1
 8006902:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8006906:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 800690a:	bf14      	ite	ne
 800690c:	4690      	movne	r8, r2
 800690e:	468c      	moveq	ip, r1
 8006910:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8006914:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 8006918:	bf14      	ite	ne
 800691a:	4694      	movne	ip, r2
 800691c:	46a9      	moveq	r9, r5
 800691e:	f502 7254 	add.w	r2, r2, #848	; 0x350
 8006922:	bf18      	it	ne
 8006924:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006926:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800692a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800692c:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800692e:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8006932:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006936:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800693a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800693e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006940:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006944:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8006948:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 800694c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006950:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006954:	1a89      	subs	r1, r1, r2
 8006956:	1c53      	adds	r3, r2, #1
 8006958:	4563      	cmp	r3, ip
 800695a:	ea4f 0391 	mov.w	r3, r1, lsr #2
 800695e:	f103 0301 	add.w	r3, r3, #1
 8006962:	bf98      	it	ls
 8006964:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006966:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800696a:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800696e:	bf88      	it	hi
 8006970:	2501      	movhi	r5, #1
 8006972:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8006976:	d81a      	bhi.n	80069ae <HAL_FDCAN_Init+0x24e>
 8006978:	2917      	cmp	r1, #23
 800697a:	bf8c      	ite	hi
 800697c:	2100      	movhi	r1, #0
 800697e:	2101      	movls	r1, #1
 8006980:	b9a9      	cbnz	r1, 80069ae <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006982:	4616      	mov	r6, r2
 8006984:	b10b      	cbz	r3, 800698a <HAL_FDCAN_Init+0x22a>
 8006986:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800698a:	1aed      	subs	r5, r5, r3
 800698c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006990:	086a      	lsrs	r2, r5, #1
 8006992:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006996:	2000      	movs	r0, #0
 8006998:	2100      	movs	r1, #0
 800699a:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800699e:	429a      	cmp	r2, r3
 80069a0:	d1fb      	bne.n	800699a <HAL_FDCAN_Init+0x23a>
 80069a2:	f025 0301 	bic.w	r3, r5, #1
 80069a6:	429d      	cmp	r5, r3
 80069a8:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80069ac:	d01a      	beq.n	80069e4 <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80069ae:	4611      	mov	r1, r2
 80069b0:	2300      	movs	r3, #0
 80069b2:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80069b6:	458c      	cmp	ip, r1
 80069b8:	d914      	bls.n	80069e4 <HAL_FDCAN_Init+0x284>
 80069ba:	f102 0108 	add.w	r1, r2, #8
 80069be:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80069c0:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80069c2:	d90f      	bls.n	80069e4 <HAL_FDCAN_Init+0x284>
 80069c4:	f102 010c 	add.w	r1, r2, #12
 80069c8:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80069ca:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80069cc:	d90a      	bls.n	80069e4 <HAL_FDCAN_Init+0x284>
 80069ce:	f102 0110 	add.w	r1, r2, #16
 80069d2:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80069d4:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80069d6:	d905      	bls.n	80069e4 <HAL_FDCAN_Init+0x284>
 80069d8:	f102 0114 	add.w	r1, r2, #20
 80069dc:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80069de:	6113      	str	r3, [r2, #16]
 80069e0:	bf88      	it	hi
 80069e2:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 80069e4:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80069e6:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80069e8:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80069ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 80069ee:	65a0      	str	r0, [r4, #88]	; 0x58
}
 80069f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <HAL_FDCAN_Init+0x2dc>)
 80069f6:	6861      	ldr	r1, [r4, #4]
 80069f8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 80069fc:	e6e7      	b.n	80067ce <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 80069fe:	2001      	movs	r0, #1
}
 8006a00:	4770      	bx	lr
 8006a02:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8006a4c <HAL_FDCAN_Init+0x2ec>
 8006a06:	4e0e      	ldr	r6, [pc, #56]	; (8006a40 <HAL_FDCAN_Init+0x2e0>)
 8006a08:	4f0e      	ldr	r7, [pc, #56]	; (8006a44 <HAL_FDCAN_Init+0x2e4>)
 8006a0a:	f8df e044 	ldr.w	lr, [pc, #68]	; 8006a50 <HAL_FDCAN_Init+0x2f0>
 8006a0e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8006a54 <HAL_FDCAN_Init+0x2f4>
 8006a12:	f8df c044 	ldr.w	ip, [pc, #68]	; 8006a58 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006a16:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <HAL_FDCAN_Init+0x2e8>)
 8006a18:	e785      	b.n	8006926 <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a1a:	f042 0220 	orr.w	r2, r2, #32
 8006a1e:	619a      	str	r2, [r3, #24]
 8006a20:	e727      	b.n	8006872 <HAL_FDCAN_Init+0x112>
 8006a22:	bf00      	nop
 8006a24:	40006400 	.word	0x40006400
 8006a28:	40006800 	.word	0x40006800
 8006a2c:	4000a678 	.word	0x4000a678
 8006a30:	4000ad00 	.word	0x4000ad00
 8006a34:	4000ac28 	.word	0x4000ac28
 8006a38:	4000ad18 	.word	0x4000ad18
 8006a3c:	40006000 	.word	0x40006000
 8006a40:	4000a9b0 	.word	0x4000a9b0
 8006a44:	4000a8d8 	.word	0x4000a8d8
 8006a48:	4000a750 	.word	0x4000a750
 8006a4c:	4000a9c8 	.word	0x4000a9c8
 8006a50:	4000a800 	.word	0x4000a800
 8006a54:	4000a7c0 	.word	0x4000a7c0
 8006a58:	4000aaa0 	.word	0x4000aaa0

08006a5c <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006a5c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006a60:	3a01      	subs	r2, #1
 8006a62:	2a01      	cmp	r2, #1
{
 8006a64:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006a66:	d905      	bls.n	8006a74 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006a68:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006a6a:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006a6e:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006a72:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006a74:	6808      	ldr	r0, [r1, #0]
{
 8006a76:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006a78:	b978      	cbnz	r0, 8006a9a <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 8006a7a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006a7e:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a80:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 8006a84:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a86:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006a88:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a8a:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 8006a8c:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 8006a92:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 8006a96:	bc30      	pop	{r4, r5}
 8006a98:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006a9a:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006a9c:	688a      	ldr	r2, [r1, #8]
 8006a9e:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006aa0:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006aa2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006aa6:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006aaa:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006aae:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8006ab2:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8006ab6:	2000      	movs	r0, #0
}
 8006ab8:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8006aba:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8006abe:	4770      	bx	lr

08006ac0 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ac0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8006ac4:	2a01      	cmp	r2, #1
{
 8006ac6:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ac8:	d005      	beq.n	8006ad6 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006aca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006acc:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8006ad0:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ad2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ad4:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ad6:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006ad8:	2202      	movs	r2, #2
 8006ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ade:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ae0:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006ae8:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006aea:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006af2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006af6:	2b02      	cmp	r3, #2
{
 8006af8:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006afa:	d10c      	bne.n	8006b16 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006afc:	6805      	ldr	r5, [r0, #0]
 8006afe:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8006b02:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8006b06:	d00d      	beq.n	8006b24 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006b08:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8006b0e:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006b10:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b16:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b18:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006b1c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b1e:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006b24:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006b28:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006b2a:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d139      	bne.n	8006ba6 <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006b32:	688b      	ldr	r3, [r1, #8]
 8006b34:	690f      	ldr	r7, [r1, #16]
 8006b36:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006b38:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b3a:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b3e:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8006b42:	4303      	orrs	r3, r0
 8006b44:	6948      	ldr	r0, [r1, #20]
 8006b46:	6a0c      	ldr	r4, [r1, #32]
 8006b48:	4303      	orrs	r3, r0
 8006b4a:	68c8      	ldr	r0, [r1, #12]
 8006b4c:	4303      	orrs	r3, r0
 8006b4e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b52:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 8006b56:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006b5a:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b5e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b62:	4c15      	ldr	r4, [pc, #84]	; (8006bb8 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8006b64:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b66:	89cb      	ldrh	r3, [r1, #14]
 8006b68:	5ce3      	ldrb	r3, [r4, r3]
 8006b6a:	b1a3      	cbz	r3, 8006b96 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b6c:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b6e:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b70:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b72:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006b76:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b78:	433b      	orrs	r3, r7
 8006b7a:	7857      	ldrb	r7, [r2, #1]
 8006b7c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b80:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b84:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b88:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b8a:	89cb      	ldrh	r3, [r1, #14]
 8006b8c:	5ce3      	ldrb	r3, [r4, r3]
 8006b8e:	459c      	cmp	ip, r3
 8006b90:	f102 0204 	add.w	r2, r2, #4
 8006b94:	d3ea      	bcc.n	8006b6c <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b96:	2301      	movs	r3, #1
 8006b98:	40b3      	lsls	r3, r6
 8006b9a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 8006b9e:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006ba0:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 8006ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8006ba6:	690b      	ldr	r3, [r1, #16]
 8006ba8:	6808      	ldr	r0, [r1, #0]
 8006baa:	ea43 0700 	orr.w	r7, r3, r0
 8006bae:	688b      	ldr	r3, [r1, #8]
 8006bb0:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006bb2:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8006bb6:	e7c2      	b.n	8006b3e <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006bb8:	0800cba0 	.word	0x0800cba0

08006bbc <HAL_FDCAN_GetRxMessage>:
{
 8006bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bbe:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006bc0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006bc4:	2802      	cmp	r0, #2
 8006bc6:	d10d      	bne.n	8006be4 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006bc8:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006bca:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006bce:	d00f      	beq.n	8006bf0 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006bd0:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8006bd4:	0700      	lsls	r0, r0, #28
 8006bd6:	d160      	bne.n	8006c9a <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006bd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8006bde:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006be0:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006be4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006be6:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006bea:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006bec:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006bf0:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8006bf4:	0705      	lsls	r5, r0, #28
 8006bf6:	d0ef      	beq.n	8006bd8 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bf8:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006bfc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bfe:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006c02:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006c06:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006c0a:	6828      	ldr	r0, [r5, #0]
 8006c0c:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006c10:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d150      	bne.n	8006cb8 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006c16:	6828      	ldr	r0, [r5, #0]
 8006c18:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8006c1c:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006c1e:	6828      	ldr	r0, [r5, #0]
 8006c20:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8006c24:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006c26:	6828      	ldr	r0, [r5, #0]
 8006c28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006c2c:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006c2e:	88a8      	ldrh	r0, [r5, #4]
 8006c30:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006c32:	6868      	ldr	r0, [r5, #4]
 8006c34:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8006c38:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006c3a:	686e      	ldr	r6, [r5, #4]
 8006c3c:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8006c40:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006c42:	686e      	ldr	r6, [r5, #4]
 8006c44:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8006c48:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006c4a:	79ee      	ldrb	r6, [r5, #7]
 8006c4c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c50:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006c52:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c54:	4e1a      	ldr	r6, [pc, #104]	; (8006cc0 <HAL_FDCAN_GetRxMessage+0x104>)
 8006c56:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006c5a:	6868      	ldr	r0, [r5, #4]
 8006c5c:	0fc0      	lsrs	r0, r0, #31
 8006c5e:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c60:	f1be 0f00 	cmp.w	lr, #0
 8006c64:	d011      	beq.n	8006c8a <HAL_FDCAN_GetRxMessage+0xce>
 8006c66:	3b01      	subs	r3, #1
 8006c68:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006c6c:	46f4      	mov	ip, lr
 8006c6e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8006c72:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c76:	89d0      	ldrh	r0, [r2, #14]
 8006c78:	f1ac 0c06 	sub.w	ip, ip, #6
 8006c7c:	5c30      	ldrb	r0, [r6, r0]
 8006c7e:	ebac 0c05 	sub.w	ip, ip, r5
 8006c82:	4560      	cmp	r0, ip
 8006c84:	d8f2      	bhi.n	8006c6c <HAL_FDCAN_GetRxMessage+0xb0>
 8006c86:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006c8a:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006c8c:	bf0c      	ite	eq
 8006c8e:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006c92:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8006c96:	2000      	movs	r0, #0
}
 8006c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c9a:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c9e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006ca0:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006ca4:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006ca8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006cac:	6828      	ldr	r0, [r5, #0]
 8006cae:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006cb2:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d0ae      	beq.n	8006c16 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006cb8:	6828      	ldr	r0, [r5, #0]
 8006cba:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006cbe:	e7ad      	b.n	8006c1c <HAL_FDCAN_GetRxMessage+0x60>
 8006cc0:	0800cba0 	.word	0x0800cba0

08006cc4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 8006cca:	f000 0007 	and.w	r0, r0, #7
 8006cce:	4770      	bx	lr

08006cd0 <HAL_FDCAN_ActivateNotification>:
{
 8006cd0:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006cd2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006cd6:	3801      	subs	r0, #1
 8006cd8:	2801      	cmp	r0, #1
 8006cda:	d905      	bls.n	8006ce8 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006cde:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006ce2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006ce4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ce6:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006ce8:	681b      	ldr	r3, [r3, #0]
{
 8006cea:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006cec:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006cf0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006cf2:	d03d      	beq.n	8006d70 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006cf4:	07c4      	lsls	r4, r0, #31
 8006cf6:	d43b      	bmi.n	8006d70 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006cf8:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006cfa:	f044 0401 	orr.w	r4, r4, #1
 8006cfe:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006d00:	b1cd      	cbz	r5, 8006d36 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006d02:	07c5      	lsls	r5, r0, #31
 8006d04:	d517      	bpl.n	8006d36 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006d06:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006d08:	f040 0002 	orr.w	r0, r0, #2
 8006d0c:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006d0e:	060c      	lsls	r4, r1, #24
 8006d10:	d504      	bpl.n	8006d1c <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006d12:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006d16:	4310      	orrs	r0, r2
 8006d18:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006d1c:	05c8      	lsls	r0, r1, #23
 8006d1e:	d504      	bpl.n	8006d2a <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006d20:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006d24:	4302      	orrs	r2, r0
 8006d26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006d2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2c:	430a      	orrs	r2, r1
    return HAL_OK;
 8006d2e:	2000      	movs	r0, #0
}
 8006d30:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006d32:	655a      	str	r2, [r3, #84]	; 0x54
}
 8006d34:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006d36:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006d3a:	d001      	beq.n	8006d40 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006d3c:	0784      	lsls	r4, r0, #30
 8006d3e:	d4e2      	bmi.n	8006d06 <HAL_FDCAN_ActivateNotification+0x36>
 8006d40:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006d44:	d131      	bne.n	8006daa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006d46:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006d4a:	d001      	beq.n	8006d50 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006d4c:	0704      	lsls	r4, r0, #28
 8006d4e:	d4da      	bmi.n	8006d06 <HAL_FDCAN_ActivateNotification+0x36>
 8006d50:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006d54:	d001      	beq.n	8006d5a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006d56:	06c5      	lsls	r5, r0, #27
 8006d58:	d4d5      	bmi.n	8006d06 <HAL_FDCAN_ActivateNotification+0x36>
 8006d5a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d5e:	d001      	beq.n	8006d64 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006d60:	0684      	lsls	r4, r0, #26
 8006d62:	d4d0      	bmi.n	8006d06 <HAL_FDCAN_ActivateNotification+0x36>
 8006d64:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006d68:	d0d1      	beq.n	8006d0e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006d6a:	0645      	lsls	r5, r0, #25
 8006d6c:	d5cf      	bpl.n	8006d0e <HAL_FDCAN_ActivateNotification+0x3e>
 8006d6e:	e7ca      	b.n	8006d06 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006d70:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006d74:	d001      	beq.n	8006d7a <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006d76:	0784      	lsls	r4, r0, #30
 8006d78:	d5be      	bpl.n	8006cf8 <HAL_FDCAN_ActivateNotification+0x28>
 8006d7a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006d7e:	d117      	bne.n	8006db0 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d80:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006d84:	d001      	beq.n	8006d8a <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006d86:	0704      	lsls	r4, r0, #28
 8006d88:	d5b6      	bpl.n	8006cf8 <HAL_FDCAN_ActivateNotification+0x28>
 8006d8a:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006d8e:	d001      	beq.n	8006d94 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006d90:	06c4      	lsls	r4, r0, #27
 8006d92:	d5b1      	bpl.n	8006cf8 <HAL_FDCAN_ActivateNotification+0x28>
 8006d94:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d98:	d001      	beq.n	8006d9e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006d9a:	0684      	lsls	r4, r0, #26
 8006d9c:	d5ac      	bpl.n	8006cf8 <HAL_FDCAN_ActivateNotification+0x28>
 8006d9e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006da2:	d0ad      	beq.n	8006d00 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006da4:	0644      	lsls	r4, r0, #25
 8006da6:	d4ab      	bmi.n	8006d00 <HAL_FDCAN_ActivateNotification+0x30>
 8006da8:	e7a6      	b.n	8006cf8 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006daa:	0745      	lsls	r5, r0, #29
 8006dac:	d4ab      	bmi.n	8006d06 <HAL_FDCAN_ActivateNotification+0x36>
 8006dae:	e7ca      	b.n	8006d46 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006db0:	0744      	lsls	r4, r0, #29
 8006db2:	d5a1      	bpl.n	8006cf8 <HAL_FDCAN_ActivateNotification+0x28>
 8006db4:	e7e4      	b.n	8006d80 <HAL_FDCAN_ActivateNotification+0xb0>
 8006db6:	bf00      	nop

08006db8 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <HAL_FDCAN_RxFifo1Callback>:
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop

08006dc0 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop

08006dc4 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop

08006dc8 <HAL_FDCAN_TxBufferAbortCallback>:
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop

08006dcc <HAL_FDCAN_TimestampWraparoundCallback>:
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop

08006dd4 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop

08006dd8 <HAL_FDCAN_ErrorCallback>:
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop

08006ddc <HAL_FDCAN_ErrorStatusCallback>:
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop

08006de0 <HAL_FDCAN_IRQHandler>:
{
 8006de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006de4:	6803      	ldr	r3, [r0, #0]
 8006de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006de8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dea:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006df0:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006df2:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006df4:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006dfa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006dfc:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8006dfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006e00:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006e02:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e06:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e0a:	0652      	lsls	r2, r2, #25
{
 8006e0c:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006e0e:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006e12:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006e16:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006e1a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006e1e:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006e22:	d502      	bpl.n	8006e2a <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e26:	0651      	lsls	r1, r2, #25
 8006e28:	d473      	bmi.n	8006f12 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006e2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e2c:	05d2      	lsls	r2, r2, #23
 8006e2e:	d502      	bpl.n	8006e36 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e32:	05d0      	lsls	r0, r2, #23
 8006e34:	d45d      	bmi.n	8006ef2 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8006e36:	f1b9 0f00 	cmp.w	r9, #0
 8006e3a:	d14a      	bne.n	8006ed2 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8006e3c:	f1b8 0f00 	cmp.w	r8, #0
 8006e40:	d137      	bne.n	8006eb2 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8006e42:	2f00      	cmp	r7, #0
 8006e44:	d13e      	bne.n	8006ec4 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e48:	0591      	lsls	r1, r2, #22
 8006e4a:	d502      	bpl.n	8006e52 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e4e:	0592      	lsls	r2, r2, #22
 8006e50:	d475      	bmi.n	8006f3e <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e54:	0617      	lsls	r7, r2, #24
 8006e56:	d502      	bpl.n	8006e5e <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e5a:	0610      	lsls	r0, r2, #24
 8006e5c:	d477      	bmi.n	8006f4e <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006e5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e60:	0491      	lsls	r1, r2, #18
 8006e62:	d502      	bpl.n	8006e6a <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e66:	0492      	lsls	r2, r2, #18
 8006e68:	d459      	bmi.n	8006f1e <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e6c:	0417      	lsls	r7, r2, #16
 8006e6e:	d502      	bpl.n	8006e76 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e72:	0410      	lsls	r0, r2, #16
 8006e74:	d45b      	bmi.n	8006f2e <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e78:	0451      	lsls	r1, r2, #17
 8006e7a:	d509      	bpl.n	8006e90 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e7e:	0452      	lsls	r2, r2, #17
 8006e80:	d506      	bpl.n	8006e90 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e86:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006e88:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e8e:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006e90:	b94e      	cbnz	r6, 8006ea6 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8006e92:	b125      	cbz	r5, 8006e9e <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006e98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e9a:	432b      	orrs	r3, r5
 8006e9c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006e9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006ea0:	bb13      	cbnz	r3, 8006ee8 <HAL_FDCAN_IRQHandler+0x108>
}
 8006ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006ea6:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff ff96 	bl	8006ddc <HAL_FDCAN_ErrorStatusCallback>
 8006eb0:	e7ef      	b.n	8006e92 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006eb2:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f7fd fd09 	bl	80048d0 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006ebe:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006ec0:	2f00      	cmp	r7, #0
 8006ec2:	d0c0      	beq.n	8006e46 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006ec4:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7ff ff77 	bl	8006dbc <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	e7b9      	b.n	8006e46 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006ed2:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f7ff ff6d 	bl	8006db8 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006ede:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006ee0:	f1b8 0f00 	cmp.w	r8, #0
 8006ee4:	d0ad      	beq.n	8006e42 <HAL_FDCAN_IRQHandler+0x62>
 8006ee6:	e7e4      	b.n	8006eb2 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7ff ff75 	bl	8006dd8 <HAL_FDCAN_ErrorCallback>
}
 8006eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006ef2:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006ef6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006efa:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f00:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006f02:	4620      	mov	r0, r4
 8006f04:	f7ff ff60 	bl	8006dc8 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006f08:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006f0a:	f1b9 0f00 	cmp.w	r9, #0
 8006f0e:	d095      	beq.n	8006e3c <HAL_FDCAN_IRQHandler+0x5c>
 8006f10:	e7df      	b.n	8006ed2 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006f12:	2240      	movs	r2, #64	; 0x40
 8006f14:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006f16:	f7ff ff5d 	bl	8006dd4 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	e785      	b.n	8006e2a <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f22:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7ff ff51 	bl	8006dcc <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	e79d      	b.n	8006e6a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006f2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006f32:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7ff ff4b 	bl	8006dd0 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	e79b      	b.n	8006e76 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f42:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7ff ff3b 	bl	8006dc0 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	e781      	b.n	8006e52 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006f4e:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006f52:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006f56:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006f58:	2280      	movs	r2, #128	; 0x80
 8006f5a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7ff ff31 	bl	8006dc4 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	e77b      	b.n	8006e5e <HAL_FDCAN_IRQHandler+0x7e>
 8006f66:	bf00      	nop

08006f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f6c:	680c      	ldr	r4, [r1, #0]
{
 8006f6e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	d07d      	beq.n	8007070 <HAL_GPIO_Init+0x108>
 8006f74:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f78:	4e71      	ldr	r6, [pc, #452]	; (8007140 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8006f7a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f7c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f80:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f82:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8006f86:	ea17 0a04 	ands.w	sl, r7, r4
 8006f8a:	d06b      	beq.n	8007064 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f8c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006f90:	f001 0203 	and.w	r2, r1, #3
 8006f94:	1e55      	subs	r5, r2, #1
 8006f96:	2d01      	cmp	r5, #1
 8006f98:	d96d      	bls.n	8007076 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f9a:	2a03      	cmp	r2, #3
 8006f9c:	f040 80b1 	bne.w	8007102 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fa0:	fa02 f20c 	lsl.w	r2, r2, ip
 8006fa4:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8006fa6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fa8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006faa:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fac:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006fb0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fb2:	d057      	beq.n	8007064 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fb4:	4d63      	ldr	r5, [pc, #396]	; (8007144 <HAL_GPIO_Init+0x1dc>)
 8006fb6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006fb8:	f042 0201 	orr.w	r2, r2, #1
 8006fbc:	662a      	str	r2, [r5, #96]	; 0x60
 8006fbe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006fc0:	f002 0201 	and.w	r2, r2, #1
 8006fc4:	9203      	str	r2, [sp, #12]
 8006fc6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006fc8:	f023 0203 	bic.w	r2, r3, #3
 8006fcc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006fd0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fd4:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006fd8:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fda:	00bf      	lsls	r7, r7, #2
 8006fdc:	f04f 080f 	mov.w	r8, #15
 8006fe0:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fe4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fe8:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fec:	d01a      	beq.n	8007024 <HAL_GPIO_Init+0xbc>
 8006fee:	4d56      	ldr	r5, [pc, #344]	; (8007148 <HAL_GPIO_Init+0x1e0>)
 8006ff0:	42a8      	cmp	r0, r5
 8006ff2:	f000 8092 	beq.w	800711a <HAL_GPIO_Init+0x1b2>
 8006ff6:	4d55      	ldr	r5, [pc, #340]	; (800714c <HAL_GPIO_Init+0x1e4>)
 8006ff8:	42a8      	cmp	r0, r5
 8006ffa:	f000 8093 	beq.w	8007124 <HAL_GPIO_Init+0x1bc>
 8006ffe:	4d54      	ldr	r5, [pc, #336]	; (8007150 <HAL_GPIO_Init+0x1e8>)
 8007000:	42a8      	cmp	r0, r5
 8007002:	f000 8083 	beq.w	800710c <HAL_GPIO_Init+0x1a4>
 8007006:	4d53      	ldr	r5, [pc, #332]	; (8007154 <HAL_GPIO_Init+0x1ec>)
 8007008:	42a8      	cmp	r0, r5
 800700a:	f000 8092 	beq.w	8007132 <HAL_GPIO_Init+0x1ca>
 800700e:	4d52      	ldr	r5, [pc, #328]	; (8007158 <HAL_GPIO_Init+0x1f0>)
 8007010:	42a8      	cmp	r0, r5
 8007012:	bf0c      	ite	eq
 8007014:	f04f 0805 	moveq.w	r8, #5
 8007018:	f04f 0806 	movne.w	r8, #6
 800701c:	fa08 f707 	lsl.w	r7, r8, r7
 8007020:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007024:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8007028:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 800702a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800702e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8007030:	bf54      	ite	pl
 8007032:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007034:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8007038:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800703a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800703c:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 800703e:	bf54      	ite	pl
 8007040:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007042:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8007046:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8007048:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800704a:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 800704c:	bf54      	ite	pl
 800704e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007050:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8007054:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007056:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007058:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 800705a:	bf54      	ite	pl
 800705c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800705e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8007062:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8007064:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007066:	fa34 f203 	lsrs.w	r2, r4, r3
 800706a:	f10c 0c02 	add.w	ip, ip, #2
 800706e:	d188      	bne.n	8006f82 <HAL_GPIO_Init+0x1a>
  }
}
 8007070:	b005      	add	sp, #20
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007076:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800707a:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800707e:	f04f 0803 	mov.w	r8, #3
 8007082:	fa08 f80c 	lsl.w	r8, r8, ip
 8007086:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800708a:	fa05 f50c 	lsl.w	r5, r5, ip
 800708e:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8007092:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007094:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8007098:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800709c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070a0:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80070a4:	409f      	lsls	r7, r3
 80070a6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80070aa:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80070ac:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070ae:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070b2:	f8de 7008 	ldr.w	r7, [lr, #8]
 80070b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80070ba:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070be:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80070c0:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070c2:	fa02 f20c 	lsl.w	r2, r2, ip
 80070c6:	f47f af6e 	bne.w	8006fa6 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 80070ca:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80070ce:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070d2:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80070d6:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80070da:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070dc:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070e0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070e4:	fa07 f708 	lsl.w	r7, r7, r8
 80070e8:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070ea:	270f      	movs	r7, #15
 80070ec:	fa07 f808 	lsl.w	r8, r7, r8
 80070f0:	9f00      	ldr	r7, [sp, #0]
 80070f2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070f6:	9f01      	ldr	r7, [sp, #4]
 80070f8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80070fc:	f8c9 7020 	str.w	r7, [r9, #32]
 8007100:	e751      	b.n	8006fa6 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007102:	2503      	movs	r5, #3
 8007104:	fa05 f50c 	lsl.w	r5, r5, ip
 8007108:	43ed      	mvns	r5, r5
 800710a:	e7cf      	b.n	80070ac <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800710c:	f04f 0803 	mov.w	r8, #3
 8007110:	fa08 f707 	lsl.w	r7, r8, r7
 8007114:	ea49 0907 	orr.w	r9, r9, r7
 8007118:	e784      	b.n	8007024 <HAL_GPIO_Init+0xbc>
 800711a:	fa0b f707 	lsl.w	r7, fp, r7
 800711e:	ea49 0907 	orr.w	r9, r9, r7
 8007122:	e77f      	b.n	8007024 <HAL_GPIO_Init+0xbc>
 8007124:	f04f 0802 	mov.w	r8, #2
 8007128:	fa08 f707 	lsl.w	r7, r8, r7
 800712c:	ea49 0907 	orr.w	r9, r9, r7
 8007130:	e778      	b.n	8007024 <HAL_GPIO_Init+0xbc>
 8007132:	f04f 0804 	mov.w	r8, #4
 8007136:	fa08 f707 	lsl.w	r7, r8, r7
 800713a:	ea49 0907 	orr.w	r9, r9, r7
 800713e:	e771      	b.n	8007024 <HAL_GPIO_Init+0xbc>
 8007140:	40010400 	.word	0x40010400
 8007144:	40021000 	.word	0x40021000
 8007148:	48000400 	.word	0x48000400
 800714c:	48000800 	.word	0x48000800
 8007150:	48000c00 	.word	0x48000c00
 8007154:	48001000 	.word	0x48001000
 8007158:	48001400 	.word	0x48001400

0800715c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800715c:	6903      	ldr	r3, [r0, #16]
 800715e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007160:	bf14      	ite	ne
 8007162:	2001      	movne	r0, #1
 8007164:	2000      	moveq	r0, #0
 8007166:	4770      	bx	lr

08007168 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007168:	b10a      	cbz	r2, 800716e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800716a:	6181      	str	r1, [r0, #24]
 800716c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800716e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop

08007174 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007174:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007176:	ea01 0203 	and.w	r2, r1, r3
 800717a:	ea21 0103 	bic.w	r1, r1, r3
 800717e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007182:	6181      	str	r1, [r0, #24]
}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop

08007188 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007188:	4a04      	ldr	r2, [pc, #16]	; (800719c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800718a:	6951      	ldr	r1, [r2, #20]
 800718c:	4201      	tst	r1, r0
 800718e:	d100      	bne.n	8007192 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007190:	4770      	bx	lr
{
 8007192:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007194:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007196:	f7fc f9b7 	bl	8003508 <HAL_GPIO_EXTI_Callback>
  }
}
 800719a:	bd08      	pop	{r3, pc}
 800719c:	40010400 	.word	0x40010400

080071a0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071a0:	4a37      	ldr	r2, [pc, #220]	; (8007280 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80071a2:	b960      	cbnz	r0, 80071be <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071a4:	6813      	ldr	r3, [r2, #0]
 80071a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071ae:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071b2:	d01d      	beq.n	80071f0 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80071bc:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071be:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80071c2:	d007      	beq.n	80071d4 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80071ce:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071d0:	6013      	str	r3, [r2, #0]
}
 80071d2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071e2:	d02b      	beq.n	800723c <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80071e8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80071ee:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071f8:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071fa:	4822      	ldr	r0, [pc, #136]	; (8007284 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80071fc:	4922      	ldr	r1, [pc, #136]	; (8007288 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007206:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007208:	6803      	ldr	r3, [r0, #0]
 800720a:	2032      	movs	r0, #50	; 0x32
 800720c:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007210:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007212:	fba1 1303 	umull	r1, r3, r1, r3
 8007216:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007218:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800721a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800721e:	d506      	bpl.n	800722e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007220:	e000      	b.n	8007224 <HAL_PWREx_ControlVoltageScaling+0x84>
 8007222:	b123      	cbz	r3, 800722e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007224:	6951      	ldr	r1, [r2, #20]
 8007226:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007228:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800722c:	d4f9      	bmi.n	8007222 <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800722e:	4b14      	ldr	r3, [pc, #80]	; (8007280 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8007234:	bf54      	ite	pl
 8007236:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8007238:	2003      	movmi	r0, #3
 800723a:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800723c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007244:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007246:	480f      	ldr	r0, [pc, #60]	; (8007284 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007248:	490f      	ldr	r1, [pc, #60]	; (8007288 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800724a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800724e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007252:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007254:	6803      	ldr	r3, [r0, #0]
 8007256:	2032      	movs	r0, #50	; 0x32
 8007258:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800725c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800725e:	fba1 1303 	umull	r1, r3, r1, r3
 8007262:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007264:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007266:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800726a:	d5e0      	bpl.n	800722e <HAL_PWREx_ControlVoltageScaling+0x8e>
 800726c:	e001      	b.n	8007272 <HAL_PWREx_ControlVoltageScaling+0xd2>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0dd      	beq.n	800722e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007272:	6951      	ldr	r1, [r2, #20]
 8007274:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007276:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800727a:	d5d8      	bpl.n	800722e <HAL_PWREx_ControlVoltageScaling+0x8e>
 800727c:	e7f7      	b.n	800726e <HAL_PWREx_ControlVoltageScaling+0xce>
 800727e:	bf00      	nop
 8007280:	40007000 	.word	0x40007000
 8007284:	20000008 	.word	0x20000008
 8007288:	431bde83 	.word	0x431bde83

0800728c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800728c:	4a02      	ldr	r2, [pc, #8]	; (8007298 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800728e:	6893      	ldr	r3, [r2, #8]
 8007290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007294:	6093      	str	r3, [r2, #8]
}
 8007296:	4770      	bx	lr
 8007298:	40007000 	.word	0x40007000

0800729c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800729c:	2800      	cmp	r0, #0
 800729e:	f000 81c3 	beq.w	8007628 <HAL_RCC_OscConfig+0x38c>
{
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072a6:	6803      	ldr	r3, [r0, #0]
 80072a8:	07d9      	lsls	r1, r3, #31
{
 80072aa:	b082      	sub	sp, #8
 80072ac:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ae:	d52d      	bpl.n	800730c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072b0:	49a6      	ldr	r1, [pc, #664]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 80072b2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072b4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072b6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80072ba:	2a0c      	cmp	r2, #12
 80072bc:	f000 810a 	beq.w	80074d4 <HAL_RCC_OscConfig+0x238>
 80072c0:	2a08      	cmp	r2, #8
 80072c2:	f000 810c 	beq.w	80074de <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072cc:	f000 8133 	beq.w	8007536 <HAL_RCC_OscConfig+0x29a>
 80072d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072d4:	f000 819b 	beq.w	800760e <HAL_RCC_OscConfig+0x372>
 80072d8:	4d9c      	ldr	r5, [pc, #624]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 80072da:	682a      	ldr	r2, [r5, #0]
 80072dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072e0:	602a      	str	r2, [r5, #0]
 80072e2:	682a      	ldr	r2, [r5, #0]
 80072e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072e8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f040 8128 	bne.w	8007540 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7fb fdf8 	bl	8002ee4 <HAL_GetTick>
 80072f4:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072f6:	e005      	b.n	8007304 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072f8:	f7fb fdf4 	bl	8002ee4 <HAL_GetTick>
 80072fc:	1b80      	subs	r0, r0, r6
 80072fe:	2864      	cmp	r0, #100	; 0x64
 8007300:	f200 8142 	bhi.w	8007588 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	039f      	lsls	r7, r3, #14
 8007308:	d4f6      	bmi.n	80072f8 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	079e      	lsls	r6, r3, #30
 800730e:	d528      	bpl.n	8007362 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007310:	4a8e      	ldr	r2, [pc, #568]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 8007312:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007314:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007316:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800731a:	2b0c      	cmp	r3, #12
 800731c:	f000 80ec 	beq.w	80074f8 <HAL_RCC_OscConfig+0x25c>
 8007320:	2b04      	cmp	r3, #4
 8007322:	f000 80ee 	beq.w	8007502 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007326:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007328:	4d88      	ldr	r5, [pc, #544]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 811d 	beq.w	800756a <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007336:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fb fdd4 	bl	8002ee4 <HAL_GetTick>
 800733c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800733e:	e005      	b.n	800734c <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007340:	f7fb fdd0 	bl	8002ee4 <HAL_GetTick>
 8007344:	1b80      	subs	r0, r0, r6
 8007346:	2802      	cmp	r0, #2
 8007348:	f200 811e 	bhi.w	8007588 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	0558      	lsls	r0, r3, #21
 8007350:	d5f6      	bpl.n	8007340 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007352:	686b      	ldr	r3, [r5, #4]
 8007354:	6922      	ldr	r2, [r4, #16]
 8007356:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800735a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800735e:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	071a      	lsls	r2, r3, #28
 8007364:	d519      	bpl.n	800739a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007366:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007368:	4d78      	ldr	r5, [pc, #480]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 809e 	beq.w	80074ac <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8007370:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007374:	f043 0301 	orr.w	r3, r3, #1
 8007378:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737c:	f7fb fdb2 	bl	8002ee4 <HAL_GetTick>
 8007380:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007382:	e005      	b.n	8007390 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007384:	f7fb fdae 	bl	8002ee4 <HAL_GetTick>
 8007388:	1b80      	subs	r0, r0, r6
 800738a:	2802      	cmp	r0, #2
 800738c:	f200 80fc 	bhi.w	8007588 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007390:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007394:	079f      	lsls	r7, r3, #30
 8007396:	d5f5      	bpl.n	8007384 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	0759      	lsls	r1, r3, #29
 800739c:	d541      	bpl.n	8007422 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800739e:	4b6b      	ldr	r3, [pc, #428]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 80073a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073a2:	00d2      	lsls	r2, r2, #3
 80073a4:	f100 80f4 	bmi.w	8007590 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073ae:	659a      	str	r2, [r3, #88]	; 0x58
 80073b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80073ba:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073bc:	4e64      	ldr	r6, [pc, #400]	; (8007550 <HAL_RCC_OscConfig+0x2b4>)
 80073be:	6833      	ldr	r3, [r6, #0]
 80073c0:	05df      	lsls	r7, r3, #23
 80073c2:	f140 8113 	bpl.w	80075ec <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	f000 80e3 	beq.w	8007594 <HAL_RCC_OscConfig+0x2f8>
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	f000 8169 	beq.w	80076a6 <HAL_RCC_OscConfig+0x40a>
 80073d4:	4e5d      	ldr	r6, [pc, #372]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 80073d6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80073e2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80073e6:	f022 0204 	bic.w	r2, r2, #4
 80073ea:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f040 80d7 	bne.w	80075a2 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f4:	f7fb fd76 	bl	8002ee4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80073fc:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073fe:	e005      	b.n	800740c <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007400:	f7fb fd70 	bl	8002ee4 <HAL_GetTick>
 8007404:	1bc0      	subs	r0, r0, r7
 8007406:	4540      	cmp	r0, r8
 8007408:	f200 80be 	bhi.w	8007588 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800740c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8007410:	079a      	lsls	r2, r3, #30
 8007412:	d4f5      	bmi.n	8007400 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007414:	b125      	cbz	r5, 8007420 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007416:	4a4d      	ldr	r2, [pc, #308]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 8007418:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800741a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800741e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	069b      	lsls	r3, r3, #26
 8007424:	d518      	bpl.n	8007458 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007426:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007428:	4d48      	ldr	r5, [pc, #288]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80ca 	beq.w	80075c4 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8007430:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743c:	f7fb fd52 	bl	8002ee4 <HAL_GetTick>
 8007440:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007442:	e005      	b.n	8007450 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007444:	f7fb fd4e 	bl	8002ee4 <HAL_GetTick>
 8007448:	1b80      	subs	r0, r0, r6
 800744a:	2802      	cmp	r0, #2
 800744c:	f200 809c 	bhi.w	8007588 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007450:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007454:	079f      	lsls	r7, r3, #30
 8007456:	d5f5      	bpl.n	8007444 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007458:	69e0      	ldr	r0, [r4, #28]
 800745a:	b318      	cbz	r0, 80074a4 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800745c:	4d3b      	ldr	r5, [pc, #236]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 800745e:	68ab      	ldr	r3, [r5, #8]
 8007460:	f003 030c 	and.w	r3, r3, #12
 8007464:	2b0c      	cmp	r3, #12
 8007466:	f000 812c 	beq.w	80076c2 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800746a:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800746c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800746e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007472:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007474:	f000 80da 	beq.w	800762c <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007478:	68eb      	ldr	r3, [r5, #12]
 800747a:	f023 0303 	bic.w	r3, r3, #3
 800747e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007480:	68eb      	ldr	r3, [r5, #12]
 8007482:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748a:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fb fd2a 	bl	8002ee4 <HAL_GetTick>
 8007490:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007492:	e004      	b.n	800749e <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007494:	f7fb fd26 	bl	8002ee4 <HAL_GetTick>
 8007498:	1b00      	subs	r0, r0, r4
 800749a:	2802      	cmp	r0, #2
 800749c:	d874      	bhi.n	8007588 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800749e:	682b      	ldr	r3, [r5, #0]
 80074a0:	019b      	lsls	r3, r3, #6
 80074a2:	d4f7      	bmi.n	8007494 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80074a4:	2000      	movs	r0, #0
}
 80074a6:	b002      	add	sp, #8
 80074a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80074ac:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80074b8:	f7fb fd14 	bl	8002ee4 <HAL_GetTick>
 80074bc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074be:	e004      	b.n	80074ca <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074c0:	f7fb fd10 	bl	8002ee4 <HAL_GetTick>
 80074c4:	1b80      	subs	r0, r0, r6
 80074c6:	2802      	cmp	r0, #2
 80074c8:	d85e      	bhi.n	8007588 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074ca:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80074ce:	0798      	lsls	r0, r3, #30
 80074d0:	d4f6      	bmi.n	80074c0 <HAL_RCC_OscConfig+0x224>
 80074d2:	e761      	b.n	8007398 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d4:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80074d8:	2903      	cmp	r1, #3
 80074da:	f47f aef4 	bne.w	80072c6 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074de:	4a1b      	ldr	r2, [pc, #108]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	0392      	lsls	r2, r2, #14
 80074e4:	f57f af12 	bpl.w	800730c <HAL_RCC_OscConfig+0x70>
 80074e8:	6862      	ldr	r2, [r4, #4]
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	f47f af0e 	bne.w	800730c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80074f0:	2001      	movs	r0, #1
}
 80074f2:	b002      	add	sp, #8
 80074f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074f8:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80074fc:	2a02      	cmp	r2, #2
 80074fe:	f47f af12 	bne.w	8007326 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	055d      	lsls	r5, r3, #21
 8007508:	d502      	bpl.n	8007510 <HAL_RCC_OscConfig+0x274>
 800750a:	68e3      	ldr	r3, [r4, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0ef      	beq.n	80074f0 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007510:	4a0e      	ldr	r2, [pc, #56]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 8007512:	6920      	ldr	r0, [r4, #16]
 8007514:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007516:	490f      	ldr	r1, [pc, #60]	; (8007554 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007518:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800751c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007520:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007522:	6808      	ldr	r0, [r1, #0]
 8007524:	f7fe f922 	bl	800576c <HAL_InitTick>
 8007528:	2800      	cmp	r0, #0
 800752a:	d1e1      	bne.n	80074f0 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	071a      	lsls	r2, r3, #28
 8007530:	f57f af33 	bpl.w	800739a <HAL_RCC_OscConfig+0xfe>
 8007534:	e717      	b.n	8007366 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007536:	4a05      	ldr	r2, [pc, #20]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
 8007538:	6813      	ldr	r3, [r2, #0]
 800753a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800753e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007540:	f7fb fcd0 	bl	8002ee4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007544:	4e01      	ldr	r6, [pc, #4]	; (800754c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8007546:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007548:	e00b      	b.n	8007562 <HAL_RCC_OscConfig+0x2c6>
 800754a:	bf00      	nop
 800754c:	40021000 	.word	0x40021000
 8007550:	40007000 	.word	0x40007000
 8007554:	20000010 	.word	0x20000010
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007558:	f7fb fcc4 	bl	8002ee4 <HAL_GetTick>
 800755c:	1b40      	subs	r0, r0, r5
 800755e:	2864      	cmp	r0, #100	; 0x64
 8007560:	d812      	bhi.n	8007588 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007562:	6833      	ldr	r3, [r6, #0]
 8007564:	039b      	lsls	r3, r3, #14
 8007566:	d5f7      	bpl.n	8007558 <HAL_RCC_OscConfig+0x2bc>
 8007568:	e6cf      	b.n	800730a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007570:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007572:	f7fb fcb7 	bl	8002ee4 <HAL_GetTick>
 8007576:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	0559      	lsls	r1, r3, #21
 800757c:	d5d6      	bpl.n	800752c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800757e:	f7fb fcb1 	bl	8002ee4 <HAL_GetTick>
 8007582:	1b80      	subs	r0, r0, r6
 8007584:	2802      	cmp	r0, #2
 8007586:	d9f7      	bls.n	8007578 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8007588:	2003      	movs	r0, #3
}
 800758a:	b002      	add	sp, #8
 800758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007590:	2500      	movs	r5, #0
 8007592:	e713      	b.n	80073bc <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007594:	4a65      	ldr	r2, [pc, #404]	; (800772c <HAL_RCC_OscConfig+0x490>)
 8007596:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80075a2:	f7fb fc9f 	bl	8002ee4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075a6:	4f61      	ldr	r7, [pc, #388]	; (800772c <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 80075a8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075aa:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ae:	e004      	b.n	80075ba <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b0:	f7fb fc98 	bl	8002ee4 <HAL_GetTick>
 80075b4:	1b80      	subs	r0, r0, r6
 80075b6:	4540      	cmp	r0, r8
 80075b8:	d8e6      	bhi.n	8007588 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075be:	0799      	lsls	r1, r3, #30
 80075c0:	d5f6      	bpl.n	80075b0 <HAL_RCC_OscConfig+0x314>
 80075c2:	e727      	b.n	8007414 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80075c4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80075c8:	f023 0301 	bic.w	r3, r3, #1
 80075cc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80075d0:	f7fb fc88 	bl	8002ee4 <HAL_GetTick>
 80075d4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075d6:	e004      	b.n	80075e2 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075d8:	f7fb fc84 	bl	8002ee4 <HAL_GetTick>
 80075dc:	1b80      	subs	r0, r0, r6
 80075de:	2802      	cmp	r0, #2
 80075e0:	d8d2      	bhi.n	8007588 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075e2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80075e6:	0798      	lsls	r0, r3, #30
 80075e8:	d4f6      	bmi.n	80075d8 <HAL_RCC_OscConfig+0x33c>
 80075ea:	e735      	b.n	8007458 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80075f4:	f7fb fc76 	bl	8002ee4 <HAL_GetTick>
 80075f8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075fa:	6833      	ldr	r3, [r6, #0]
 80075fc:	05d8      	lsls	r0, r3, #23
 80075fe:	f53f aee2 	bmi.w	80073c6 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007602:	f7fb fc6f 	bl	8002ee4 <HAL_GetTick>
 8007606:	1bc0      	subs	r0, r0, r7
 8007608:	2802      	cmp	r0, #2
 800760a:	d9f6      	bls.n	80075fa <HAL_RCC_OscConfig+0x35e>
 800760c:	e7bc      	b.n	8007588 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800760e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007612:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007624:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007626:	e78b      	b.n	8007540 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007628:	2001      	movs	r0, #1
}
 800762a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800762c:	f7fb fc5a 	bl	8002ee4 <HAL_GetTick>
 8007630:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007632:	e004      	b.n	800763e <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007634:	f7fb fc56 	bl	8002ee4 <HAL_GetTick>
 8007638:	1b80      	subs	r0, r0, r6
 800763a:	2802      	cmp	r0, #2
 800763c:	d8a4      	bhi.n	8007588 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	0199      	lsls	r1, r3, #6
 8007642:	d4f7      	bmi.n	8007634 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007644:	68e9      	ldr	r1, [r5, #12]
 8007646:	4b3a      	ldr	r3, [pc, #232]	; (8007730 <HAL_RCC_OscConfig+0x494>)
 8007648:	6a22      	ldr	r2, [r4, #32]
 800764a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800764c:	4e37      	ldr	r6, [pc, #220]	; (800772c <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800764e:	400b      	ands	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8007656:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800765a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800765e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8007662:	3801      	subs	r0, #1
 8007664:	0849      	lsrs	r1, r1, #1
 8007666:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800766a:	3901      	subs	r1, #1
 800766c:	0852      	lsrs	r2, r2, #1
 800766e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007672:	3a01      	subs	r2, #1
 8007674:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007678:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007680:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007682:	68eb      	ldr	r3, [r5, #12]
 8007684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007688:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800768a:	f7fb fc2b 	bl	8002ee4 <HAL_GetTick>
 800768e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007690:	e005      	b.n	800769e <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007692:	f7fb fc27 	bl	8002ee4 <HAL_GetTick>
 8007696:	1b00      	subs	r0, r0, r4
 8007698:	2802      	cmp	r0, #2
 800769a:	f63f af75 	bhi.w	8007588 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800769e:	6833      	ldr	r3, [r6, #0]
 80076a0:	019a      	lsls	r2, r3, #6
 80076a2:	d5f6      	bpl.n	8007692 <HAL_RCC_OscConfig+0x3f6>
 80076a4:	e6fe      	b.n	80074a4 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076a6:	4b21      	ldr	r3, [pc, #132]	; (800772c <HAL_RCC_OscConfig+0x490>)
 80076a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80076ac:	f042 0204 	orr.w	r2, r2, #4
 80076b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80076b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80076b8:	f042 0201 	orr.w	r2, r2, #1
 80076bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076c0:	e76f      	b.n	80075a2 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076c2:	2801      	cmp	r0, #1
 80076c4:	f43f aeef 	beq.w	80074a6 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80076c8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ca:	6a22      	ldr	r2, [r4, #32]
 80076cc:	f003 0103 	and.w	r1, r3, #3
 80076d0:	4291      	cmp	r1, r2
 80076d2:	f47f af0d 	bne.w	80074f0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80076d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076dc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076de:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80076e2:	f47f af05 	bne.w	80074f0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80076e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076ec:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80076f0:	f47f aefe 	bne.w	80074f0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80076f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076fa:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80076fe:	f47f aef7 	bne.w	80074f0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007702:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007704:	0852      	lsrs	r2, r2, #1
 8007706:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800770a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800770c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007710:	f47f aeee 	bne.w	80074f0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007714:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007716:	0852      	lsrs	r2, r2, #1
 8007718:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800771c:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800771e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007722:	bf14      	ite	ne
 8007724:	2001      	movne	r0, #1
 8007726:	2000      	moveq	r0, #0
 8007728:	e6bd      	b.n	80074a6 <HAL_RCC_OscConfig+0x20a>
 800772a:	bf00      	nop
 800772c:	40021000 	.word	0x40021000
 8007730:	019f800c 	.word	0x019f800c

08007734 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007734:	4b18      	ldr	r3, [pc, #96]	; (8007798 <HAL_RCC_GetSysClockFreq+0x64>)
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	f002 020c 	and.w	r2, r2, #12
 800773c:	2a04      	cmp	r2, #4
 800773e:	d026      	beq.n	800778e <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	f002 020c 	and.w	r2, r2, #12
 8007746:	2a08      	cmp	r2, #8
 8007748:	d023      	beq.n	8007792 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	f002 020c 	and.w	r2, r2, #12
 8007750:	2a0c      	cmp	r2, #12
 8007752:	d001      	beq.n	8007758 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007754:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007756:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007758:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800775a:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800775c:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800775e:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007762:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007764:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007768:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800776c:	bf0c      	ite	eq
 800776e:	4b0b      	ldreq	r3, [pc, #44]	; (800779c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007770:	4b0b      	ldrne	r3, [pc, #44]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007772:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007774:	fbb3 f3f2 	udiv	r3, r3, r2
 8007778:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <HAL_RCC_GetSysClockFreq+0x64>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007784:	3301      	adds	r3, #1
 8007786:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007788:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800778c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800778e:	4804      	ldr	r0, [pc, #16]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007790:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007792:	4802      	ldr	r0, [pc, #8]	; (800779c <HAL_RCC_GetSysClockFreq+0x68>)
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40021000 	.word	0x40021000
 800779c:	007a1200 	.word	0x007a1200
 80077a0:	00f42400 	.word	0x00f42400

080077a4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80077a4:	2800      	cmp	r0, #0
 80077a6:	f000 80ee 	beq.w	8007986 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077aa:	4a78      	ldr	r2, [pc, #480]	; (800798c <HAL_RCC_ClockConfig+0x1e8>)
{
 80077ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077b0:	6813      	ldr	r3, [r2, #0]
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	428b      	cmp	r3, r1
 80077b8:	460d      	mov	r5, r1
 80077ba:	4604      	mov	r4, r0
 80077bc:	d20c      	bcs.n	80077d8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	f023 030f 	bic.w	r3, r3, #15
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c8:	6813      	ldr	r3, [r2, #0]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	428b      	cmp	r3, r1
 80077d0:	d002      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80077d2:	2001      	movs	r0, #1
}
 80077d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	07df      	lsls	r7, r3, #31
 80077dc:	d569      	bpl.n	80078b2 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077de:	6867      	ldr	r7, [r4, #4]
 80077e0:	2f03      	cmp	r7, #3
 80077e2:	f000 80a0 	beq.w	8007926 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077e6:	4b6a      	ldr	r3, [pc, #424]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077e8:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ea:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ec:	f000 8097 	beq.w	800791e <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077f0:	055b      	lsls	r3, r3, #21
 80077f2:	d5ee      	bpl.n	80077d2 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077f4:	f7ff ff9e 	bl	8007734 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80077f8:	4b66      	ldr	r3, [pc, #408]	; (8007994 <HAL_RCC_ClockConfig+0x1f0>)
 80077fa:	4298      	cmp	r0, r3
 80077fc:	f240 80c0 	bls.w	8007980 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007800:	4a63      	ldr	r2, [pc, #396]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 8007802:	6893      	ldr	r3, [r2, #8]
 8007804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800780e:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007812:	4e5f      	ldr	r6, [pc, #380]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 8007814:	68b3      	ldr	r3, [r6, #8]
 8007816:	f023 0303 	bic.w	r3, r3, #3
 800781a:	433b      	orrs	r3, r7
 800781c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800781e:	f7fb fb61 	bl	8002ee4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007822:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007826:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007828:	e004      	b.n	8007834 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800782a:	f7fb fb5b 	bl	8002ee4 <HAL_GetTick>
 800782e:	1bc0      	subs	r0, r0, r7
 8007830:	4540      	cmp	r0, r8
 8007832:	d871      	bhi.n	8007918 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007834:	68b3      	ldr	r3, [r6, #8]
 8007836:	6862      	ldr	r2, [r4, #4]
 8007838:	f003 030c 	and.w	r3, r3, #12
 800783c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007840:	d1f3      	bne.n	800782a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	079f      	lsls	r7, r3, #30
 8007846:	d436      	bmi.n	80078b6 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8007848:	f1b9 0f00 	cmp.w	r9, #0
 800784c:	d003      	beq.n	8007856 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800784e:	68b3      	ldr	r3, [r6, #8]
 8007850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007854:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007856:	4e4d      	ldr	r6, [pc, #308]	; (800798c <HAL_RCC_ClockConfig+0x1e8>)
 8007858:	6833      	ldr	r3, [r6, #0]
 800785a:	f003 030f 	and.w	r3, r3, #15
 800785e:	42ab      	cmp	r3, r5
 8007860:	d846      	bhi.n	80078f0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	075a      	lsls	r2, r3, #29
 8007866:	d506      	bpl.n	8007876 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007868:	4949      	ldr	r1, [pc, #292]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 800786a:	68e0      	ldr	r0, [r4, #12]
 800786c:	688a      	ldr	r2, [r1, #8]
 800786e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007872:	4302      	orrs	r2, r0
 8007874:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007876:	071b      	lsls	r3, r3, #28
 8007878:	d507      	bpl.n	800788a <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800787a:	4a45      	ldr	r2, [pc, #276]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 800787c:	6921      	ldr	r1, [r4, #16]
 800787e:	6893      	ldr	r3, [r2, #8]
 8007880:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007884:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007888:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800788a:	f7ff ff53 	bl	8007734 <HAL_RCC_GetSysClockFreq>
 800788e:	4a40      	ldr	r2, [pc, #256]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 8007890:	4c41      	ldr	r4, [pc, #260]	; (8007998 <HAL_RCC_ClockConfig+0x1f4>)
 8007892:	6892      	ldr	r2, [r2, #8]
 8007894:	4941      	ldr	r1, [pc, #260]	; (800799c <HAL_RCC_ClockConfig+0x1f8>)
 8007896:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800789a:	4603      	mov	r3, r0
 800789c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800789e:	4840      	ldr	r0, [pc, #256]	; (80079a0 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078a0:	f002 021f 	and.w	r2, r2, #31
 80078a4:	40d3      	lsrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80078a8:	6800      	ldr	r0, [r0, #0]
}
 80078aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80078ae:	f7fd bf5d 	b.w	800576c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b2:	079e      	lsls	r6, r3, #30
 80078b4:	d5cf      	bpl.n	8007856 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b6:	0758      	lsls	r0, r3, #29
 80078b8:	d504      	bpl.n	80078c4 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078ba:	4935      	ldr	r1, [pc, #212]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 80078bc:	688a      	ldr	r2, [r1, #8]
 80078be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80078c2:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c4:	0719      	lsls	r1, r3, #28
 80078c6:	d506      	bpl.n	80078d6 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80078c8:	4a31      	ldr	r2, [pc, #196]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 80078ca:	6893      	ldr	r3, [r2, #8]
 80078cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80078d0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80078d4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078d6:	4a2e      	ldr	r2, [pc, #184]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 80078d8:	68a1      	ldr	r1, [r4, #8]
 80078da:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078dc:	4e2b      	ldr	r6, [pc, #172]	; (800798c <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078e2:	430b      	orrs	r3, r1
 80078e4:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078e6:	6833      	ldr	r3, [r6, #0]
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	42ab      	cmp	r3, r5
 80078ee:	d9b8      	bls.n	8007862 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f0:	6833      	ldr	r3, [r6, #0]
 80078f2:	f023 030f 	bic.w	r3, r3, #15
 80078f6:	432b      	orrs	r3, r5
 80078f8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80078fa:	f7fb faf3 	bl	8002ee4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078fe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007902:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	42ab      	cmp	r3, r5
 800790c:	d0a9      	beq.n	8007862 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800790e:	f7fb fae9 	bl	8002ee4 <HAL_GetTick>
 8007912:	1bc0      	subs	r0, r0, r7
 8007914:	4540      	cmp	r0, r8
 8007916:	d9f5      	bls.n	8007904 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007918:	2003      	movs	r0, #3
}
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800791e:	039a      	lsls	r2, r3, #14
 8007920:	f53f af68 	bmi.w	80077f4 <HAL_RCC_ClockConfig+0x50>
 8007924:	e755      	b.n	80077d2 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007926:	4a1a      	ldr	r2, [pc, #104]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
 8007928:	6811      	ldr	r1, [r2, #0]
 800792a:	0188      	lsls	r0, r1, #6
 800792c:	f57f af51 	bpl.w	80077d2 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007930:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007932:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007934:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8007936:	4e17      	ldr	r6, [pc, #92]	; (8007994 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007938:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 800793c:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800793e:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007942:	bf0c      	ite	eq
 8007944:	4817      	ldreq	r0, [pc, #92]	; (80079a4 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007946:	4818      	ldrne	r0, [pc, #96]	; (80079a8 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007948:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800794a:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800794e:	4810      	ldr	r0, [pc, #64]	; (8007990 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007950:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007954:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007958:	68c1      	ldr	r1, [r0, #12]
 800795a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800795e:	3101      	adds	r1, #1
 8007960:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007962:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007966:	42b2      	cmp	r2, r6
 8007968:	d90a      	bls.n	8007980 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800796a:	6882      	ldr	r2, [r0, #8]
 800796c:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007970:	f43f af46 	beq.w	8007800 <HAL_RCC_ClockConfig+0x5c>
 8007974:	0799      	lsls	r1, r3, #30
 8007976:	d503      	bpl.n	8007980 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f43f af40 	beq.w	8007800 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007980:	f04f 0900 	mov.w	r9, #0
 8007984:	e745      	b.n	8007812 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8007986:	2001      	movs	r0, #1
}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40022000 	.word	0x40022000
 8007990:	40021000 	.word	0x40021000
 8007994:	04c4b400 	.word	0x04c4b400
 8007998:	0800cb88 	.word	0x0800cb88
 800799c:	20000008 	.word	0x20000008
 80079a0:	20000010 	.word	0x20000010
 80079a4:	007a1200 	.word	0x007a1200
 80079a8:	00f42400 	.word	0x00f42400

080079ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80079ae:	4a06      	ldr	r2, [pc, #24]	; (80079c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80079b0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80079b2:	4906      	ldr	r1, [pc, #24]	; (80079cc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80079b8:	6808      	ldr	r0, [r1, #0]
 80079ba:	5cd3      	ldrb	r3, [r2, r3]
 80079bc:	f003 031f 	and.w	r3, r3, #31
}
 80079c0:	40d8      	lsrs	r0, r3
 80079c2:	4770      	bx	lr
 80079c4:	40021000 	.word	0x40021000
 80079c8:	0800cb98 	.word	0x0800cb98
 80079cc:	20000008 	.word	0x20000008

080079d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80079d2:	4a06      	ldr	r2, [pc, #24]	; (80079ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80079d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80079d6:	4906      	ldr	r1, [pc, #24]	; (80079f0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80079d8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80079dc:	6808      	ldr	r0, [r1, #0]
 80079de:	5cd3      	ldrb	r3, [r2, r3]
 80079e0:	f003 031f 	and.w	r3, r3, #31
}
 80079e4:	40d8      	lsrs	r0, r3
 80079e6:	4770      	bx	lr
 80079e8:	40021000 	.word	0x40021000
 80079ec:	0800cb98 	.word	0x0800cb98
 80079f0:	20000008 	.word	0x20000008

080079f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079f8:	6803      	ldr	r3, [r0, #0]
{
 80079fa:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079fc:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007a00:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a02:	d056      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a04:	4bac      	ldr	r3, [pc, #688]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a08:	00d5      	lsls	r5, r2, #3
 8007a0a:	f140 813e 	bpl.w	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8007a0e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a10:	4daa      	ldr	r5, [pc, #680]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a18:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a1a:	f7fb fa63 	bl	8002ee4 <HAL_GetTick>
 8007a1e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a20:	e005      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a22:	f7fb fa5f 	bl	8002ee4 <HAL_GetTick>
 8007a26:	1b83      	subs	r3, r0, r6
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	f200 8139 	bhi.w	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	05d8      	lsls	r0, r3, #23
 8007a32:	d5f6      	bpl.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a34:	4da0      	ldr	r5, [pc, #640]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a36:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a3a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007a3e:	d027      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007a40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d025      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a46:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a4a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a52:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a56:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a5e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a62:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a66:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8007a68:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a6c:	f140 8148 	bpl.w	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7fb fa38 	bl	8002ee4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a74:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007a78:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a7a:	e005      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7c:	f7fb fa32 	bl	8002ee4 <HAL_GetTick>
 8007a80:	1b80      	subs	r0, r0, r6
 8007a82:	4540      	cmp	r0, r8
 8007a84:	f200 810c 	bhi.w	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a88:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007a8c:	079b      	lsls	r3, r3, #30
 8007a8e:	d5f5      	bpl.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a90:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a92:	4989      	ldr	r1, [pc, #548]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007a98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aa2:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aa4:	b127      	cbz	r7, 8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aa6:	4a84      	ldr	r2, [pc, #528]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007aa8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	07dd      	lsls	r5, r3, #31
 8007ab4:	d508      	bpl.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ab6:	4980      	ldr	r1, [pc, #512]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ab8:	6865      	ldr	r5, [r4, #4]
 8007aba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007abe:	f022 0203 	bic.w	r2, r2, #3
 8007ac2:	432a      	orrs	r2, r5
 8007ac4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ac8:	0799      	lsls	r1, r3, #30
 8007aca:	d508      	bpl.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007acc:	497a      	ldr	r1, [pc, #488]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ace:	68a5      	ldr	r5, [r4, #8]
 8007ad0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ad4:	f022 020c 	bic.w	r2, r2, #12
 8007ad8:	432a      	orrs	r2, r5
 8007ada:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ade:	075a      	lsls	r2, r3, #29
 8007ae0:	d508      	bpl.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ae2:	4975      	ldr	r1, [pc, #468]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ae4:	68e5      	ldr	r5, [r4, #12]
 8007ae6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007aea:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007aee:	432a      	orrs	r2, r5
 8007af0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007af4:	071f      	lsls	r7, r3, #28
 8007af6:	d508      	bpl.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007af8:	496f      	ldr	r1, [pc, #444]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007afa:	6925      	ldr	r5, [r4, #16]
 8007afc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b00:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b04:	432a      	orrs	r2, r5
 8007b06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b0a:	06de      	lsls	r6, r3, #27
 8007b0c:	d508      	bpl.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b0e:	496a      	ldr	r1, [pc, #424]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b10:	6965      	ldr	r5, [r4, #20]
 8007b12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b1a:	432a      	orrs	r2, r5
 8007b1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b20:	069d      	lsls	r5, r3, #26
 8007b22:	d508      	bpl.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b24:	4964      	ldr	r1, [pc, #400]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b26:	69a5      	ldr	r5, [r4, #24]
 8007b28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b30:	432a      	orrs	r2, r5
 8007b32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b36:	0659      	lsls	r1, r3, #25
 8007b38:	d508      	bpl.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b3a:	495f      	ldr	r1, [pc, #380]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b3c:	69e5      	ldr	r5, [r4, #28]
 8007b3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b42:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007b46:	432a      	orrs	r2, r5
 8007b48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b4c:	061a      	lsls	r2, r3, #24
 8007b4e:	d508      	bpl.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b50:	4959      	ldr	r1, [pc, #356]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b52:	6a25      	ldr	r5, [r4, #32]
 8007b54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b58:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007b5c:	432a      	orrs	r2, r5
 8007b5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b62:	05df      	lsls	r7, r3, #23
 8007b64:	d508      	bpl.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b66:	4954      	ldr	r1, [pc, #336]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b68:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b6e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007b72:	432a      	orrs	r2, r5
 8007b74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b78:	039e      	lsls	r6, r3, #14
 8007b7a:	d508      	bpl.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b7c:	494e      	ldr	r1, [pc, #312]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b7e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007b80:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8007b84:	f022 0203 	bic.w	r2, r2, #3
 8007b88:	432a      	orrs	r2, r5
 8007b8a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b8e:	059d      	lsls	r5, r3, #22
 8007b90:	d508      	bpl.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b92:	4949      	ldr	r1, [pc, #292]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b94:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007b96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b9a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007b9e:	432a      	orrs	r2, r5
 8007ba0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ba4:	0559      	lsls	r1, r3, #21
 8007ba6:	d50b      	bpl.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ba8:	4943      	ldr	r1, [pc, #268]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007baa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007bac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007bb0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007bb4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007bb6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007bbe:	d071      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007bc0:	051a      	lsls	r2, r3, #20
 8007bc2:	d50b      	bpl.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bc4:	493c      	ldr	r1, [pc, #240]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bc6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007bc8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007bcc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007bd0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007bd2:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bd6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007bda:	d068      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bdc:	04df      	lsls	r7, r3, #19
 8007bde:	d50b      	bpl.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007be0:	4935      	ldr	r1, [pc, #212]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007be2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007be4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007be8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007bec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007bee:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bf2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007bf6:	d063      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bf8:	049e      	lsls	r6, r3, #18
 8007bfa:	d50b      	bpl.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bfc:	492e      	ldr	r1, [pc, #184]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bfe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007c00:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007c04:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007c08:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c0a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c12:	d05a      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c14:	045d      	lsls	r5, r3, #17
 8007c16:	d50b      	bpl.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c18:	4927      	ldr	r1, [pc, #156]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c1a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007c1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007c20:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007c24:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c26:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c2a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c2e:	d051      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c30:	0419      	lsls	r1, r3, #16
 8007c32:	d50b      	bpl.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c34:	4920      	ldr	r1, [pc, #128]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c36:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007c38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007c3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c40:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c42:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c4a:	d048      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007c4c:	03da      	lsls	r2, r3, #15
 8007c4e:	d50b      	bpl.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007c50:	4919      	ldr	r1, [pc, #100]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c52:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8007c54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007c58:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007c5c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007c5e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007c62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007c66:	d03f      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c68:	035b      	lsls	r3, r3, #13
 8007c6a:	d50b      	bpl.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c6c:	4a12      	ldr	r2, [pc, #72]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007c70:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007c74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007c78:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007c7a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c7e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007c82:	d036      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8007c84:	b002      	add	sp, #8
 8007c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c90:	659a      	str	r2, [r3, #88]	; 0x58
 8007c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c9c:	2701      	movs	r7, #1
 8007c9e:	e6b7      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8007ca0:	2003      	movs	r0, #3
 8007ca2:	e6ff      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ca4:	68ca      	ldr	r2, [r1, #12]
 8007ca6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007caa:	60ca      	str	r2, [r1, #12]
 8007cac:	e788      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cae:	68ca      	ldr	r2, [r1, #12]
 8007cb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007cb4:	60ca      	str	r2, [r1, #12]
 8007cb6:	e791      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc0:	68ca      	ldr	r2, [r1, #12]
 8007cc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007cc6:	60ca      	str	r2, [r1, #12]
 8007cc8:	e796      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cca:	68ca      	ldr	r2, [r1, #12]
 8007ccc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007cd0:	60ca      	str	r2, [r1, #12]
 8007cd2:	e79f      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cd4:	68ca      	ldr	r2, [r1, #12]
 8007cd6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007cda:	60ca      	str	r2, [r1, #12]
 8007cdc:	e7a8      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007cde:	68ca      	ldr	r2, [r1, #12]
 8007ce0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ce4:	60ca      	str	r2, [r1, #12]
 8007ce6:	e7b1      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ce8:	68ca      	ldr	r2, [r1, #12]
 8007cea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007cee:	60ca      	str	r2, [r1, #12]
 8007cf0:	e7ba      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf2:	68d3      	ldr	r3, [r2, #12]
 8007cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cf8:	60d3      	str	r3, [r2, #12]
}
 8007cfa:	b002      	add	sp, #8
 8007cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d00:	4613      	mov	r3, r2
 8007d02:	e6c6      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x9e>

08007d04 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d08:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d0a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007d0c:	4617      	mov	r7, r2
 8007d0e:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8007d10:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007d14:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d16:	f7fb f8e5 	bl	8002ee4 <HAL_GetTick>
 8007d1a:	442f      	add	r7, r5
 8007d1c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8007d1e:	f7fb f8e1 	bl	8002ee4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d22:	4b31      	ldr	r3, [pc, #196]	; (8007de8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d24:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007d30:	0d1b      	lsrs	r3, r3, #20
 8007d32:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8007d36:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d38:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	1c69      	adds	r1, r5, #1
 8007d3e:	6893      	ldr	r3, [r2, #8]
 8007d40:	d110      	bne.n	8007d64 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 8007d42:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007d46:	d009      	beq.n	8007d5c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d48:	7b23      	ldrb	r3, [r4, #12]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d50:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d54:	6893      	ldr	r3, [r2, #8]
 8007d56:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007d5a:	d1f5      	bne.n	8007d48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8007d5c:	2000      	movs	r0, #0
}
 8007d5e:	b002      	add	sp, #8
 8007d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007d64:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007d68:	d0f8      	beq.n	8007d5c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8007d6a:	7b23      	ldrb	r3, [r4, #12]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8007d72:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d76:	f7fb f8b5 	bl	8002ee4 <HAL_GetTick>
 8007d7a:	eba0 0008 	sub.w	r0, r0, r8
 8007d7e:	42b8      	cmp	r0, r7
 8007d80:	d209      	bcs.n	8007d96 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 8007d82:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d84:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8007d86:	2b00      	cmp	r3, #0
      count--;
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007d8e:	bf08      	it	eq
 8007d90:	2700      	moveq	r7, #0
      count--;
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	e7d2      	b.n	8007d3c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d96:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d9a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d9c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007da0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007da4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da6:	d013      	beq.n	8007dd0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007da8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007daa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007dae:	d107      	bne.n	8007dc0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dbe:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007dc0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007dc2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007dc4:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007dc8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007dcc:	2003      	movs	r0, #3
 8007dce:	e7c6      	b.n	8007d5e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd0:	68b2      	ldr	r2, [r6, #8]
 8007dd2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007dd6:	d002      	beq.n	8007dde <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dd8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007ddc:	d1e4      	bne.n	8007da8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e7df      	b.n	8007da8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8007de8:	20000008 	.word	0x20000008

08007dec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	f88d 3007 	strb.w	r3, [sp, #7]
 8007df8:	eb01 0902 	add.w	r9, r1, r2
{
 8007dfc:	460e      	mov	r6, r1
 8007dfe:	4617      	mov	r7, r2
 8007e00:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e02:	f7fb f86f 	bl	8002ee4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e06:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8007f28 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e0a:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007e0e:	f7fb f869 	bl	8002ee4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e12:	f8d8 3000 	ldr.w	r3, [r8]
 8007e16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007e1e:	0d1b      	lsrs	r3, r3, #20
 8007e20:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 8007e24:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e26:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e28:	1c70      	adds	r0, r6, #1
 8007e2a:	682c      	ldr	r4, [r5, #0]
 8007e2c:	d120      	bne.n	8007e70 <SPI_EndRxTxTransaction+0x84>
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8007e34:	d1fb      	bne.n	8007e2e <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e36:	f7fb f855 	bl	8002ee4 <HAL_GetTick>
 8007e3a:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007e3e:	f7fb f851 	bl	8002ee4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e42:	f8d8 3000 	ldr.w	r3, [r8]
 8007e46:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007e4a:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8007e4e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e50:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e52:	1c71      	adds	r1, r6, #1
 8007e54:	682c      	ldr	r4, [r5, #0]
 8007e56:	d11f      	bne.n	8007e98 <SPI_EndRxTxTransaction+0xac>
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	061a      	lsls	r2, r3, #24
 8007e5c:	d4fc      	bmi.n	8007e58 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e5e:	463a      	mov	r2, r7
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7ff ff4e 	bl	8007d04 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007e68:	bb48      	cbnz	r0, 8007ebe <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007e6a:	b005      	add	sp, #20
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8007e76:	d0de      	beq.n	8007e36 <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e78:	f7fb f834 	bl	8002ee4 <HAL_GetTick>
 8007e7c:	eba0 000b 	sub.w	r0, r0, fp
 8007e80:	4550      	cmp	r0, sl
 8007e82:	d222      	bcs.n	8007eca <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007e84:	9a02      	ldr	r2, [sp, #8]
      count--;
 8007e86:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8007e88:	2a00      	cmp	r2, #0
      count--;
 8007e8a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007e8e:	bf08      	it	eq
 8007e90:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8007e94:	9302      	str	r3, [sp, #8]
 8007e96:	e7c7      	b.n	8007e28 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e98:	68a3      	ldr	r3, [r4, #8]
 8007e9a:	061b      	lsls	r3, r3, #24
 8007e9c:	d5df      	bpl.n	8007e5e <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e9e:	f7fb f821 	bl	8002ee4 <HAL_GetTick>
 8007ea2:	eba0 0008 	sub.w	r0, r0, r8
 8007ea6:	4548      	cmp	r0, r9
 8007ea8:	d20f      	bcs.n	8007eca <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007eaa:	9a03      	ldr	r2, [sp, #12]
      count--;
 8007eac:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8007eae:	2a00      	cmp	r2, #0
      count--;
 8007eb0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007eb4:	bf08      	it	eq
 8007eb6:	f04f 0900 	moveq.w	r9, #0
      count--;
 8007eba:	9303      	str	r3, [sp, #12]
 8007ebc:	e7c9      	b.n	8007e52 <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ebe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007ec4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ec6:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ec8:	e7cf      	b.n	8007e6a <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eca:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ece:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ed0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ed8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eda:	d019      	beq.n	8007f10 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007edc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007ede:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007ee2:	d107      	bne.n	8007ef4 <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ef2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007efa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8007efc:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007efe:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007f02:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8007f04:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f08:	662b      	str	r3, [r5, #96]	; 0x60
}
 8007f0a:	b005      	add	sp, #20
 8007f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f10:	68aa      	ldr	r2, [r5, #8]
 8007f12:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007f16:	d002      	beq.n	8007f1e <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f18:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007f1c:	d1de      	bne.n	8007edc <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	e7d9      	b.n	8007edc <SPI_EndRxTxTransaction+0xf0>
 8007f28:	20000008 	.word	0x20000008

08007f2c <HAL_SPI_Init>:
  if (hspi == NULL)
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d077      	beq.n	8008020 <HAL_SPI_Init+0xf4>
{
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f34:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f36:	4604      	mov	r4, r0
 8007f38:	2e00      	cmp	r6, #0
 8007f3a:	d058      	beq.n	8007fee <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f3c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f42:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f46:	2200      	movs	r2, #0
 8007f48:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d059      	beq.n	8008006 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8007f52:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f54:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007f56:	2302      	movs	r3, #2
 8007f58:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007f5c:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f5e:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f66:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f68:	d947      	bls.n	8007ffa <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f6a:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8007f6e:	d159      	bne.n	8008024 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f72:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f74:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007f78:	6862      	ldr	r2, [r4, #4]
 8007f7a:	68a3      	ldr	r3, [r4, #8]
 8007f7c:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007f80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f84:	431a      	orrs	r2, r3
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	6962      	ldr	r2, [r4, #20]
 8007f90:	f002 0201 	and.w	r2, r2, #1
 8007f94:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f98:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8007f9c:	f003 0308 	and.w	r3, r3, #8
 8007fa0:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fa4:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fa6:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007faa:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007fae:	69a6      	ldr	r6, [r4, #24]
 8007fb0:	6a23      	ldr	r3, [r4, #32]
 8007fb2:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8007fb6:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	ea43 0308 	orr.w	r3, r3, r8
 8007fc0:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fc2:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fc4:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fc6:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fcc:	ea4e 0306 	orr.w	r3, lr, r6
 8007fd0:	ea43 030c 	orr.w	r3, r3, ip
 8007fd4:	4303      	orrs	r3, r0
 8007fd6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fd8:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fda:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007fe0:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fe2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fe4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fe6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8007fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fee:	6843      	ldr	r3, [r0, #4]
 8007ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ff4:	d0a5      	beq.n	8007f42 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ff6:	61c6      	str	r6, [r0, #28]
 8007ff8:	e7a3      	b.n	8007f42 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ffa:	d00b      	beq.n	8008014 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ffc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008000:	2500      	movs	r5, #0
 8008002:	62a5      	str	r5, [r4, #40]	; 0x28
 8008004:	e7b8      	b.n	8007f78 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8008006:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800800a:	4620      	mov	r0, r4
 800800c:	f7fc ff94 	bl	8004f38 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008010:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008012:	e79e      	b.n	8007f52 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008014:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008016:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800801a:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 800801e:	e7ab      	b.n	8007f78 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8008020:	2001      	movs	r0, #1
}
 8008022:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008024:	2000      	movs	r0, #0
 8008026:	e7eb      	b.n	8008000 <HAL_SPI_Init+0xd4>

08008028 <HAL_SPI_TransmitReceive>:
{
 8008028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800802c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800802e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8008032:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8008034:	2801      	cmp	r0, #1
 8008036:	f000 8097 	beq.w	8008168 <HAL_SPI_TransmitReceive+0x140>
 800803a:	461f      	mov	r7, r3
 800803c:	2301      	movs	r3, #1
 800803e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008042:	4689      	mov	r9, r1
 8008044:	4690      	mov	r8, r2
 8008046:	f7fa ff4d 	bl	8002ee4 <HAL_GetTick>
 800804a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800804c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8008050:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008052:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8008054:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008056:	d010      	beq.n	800807a <HAL_SPI_TransmitReceive+0x52>
 8008058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800805c:	d008      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800805e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008060:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8008062:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8008064:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008068:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800806c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008070:	68a2      	ldr	r2, [r4, #8]
 8008072:	2a00      	cmp	r2, #0
 8008074:	d1f3      	bne.n	800805e <HAL_SPI_TransmitReceive+0x36>
 8008076:	2904      	cmp	r1, #4
 8008078:	d1f1      	bne.n	800805e <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800807a:	f1b9 0f00 	cmp.w	r9, #0
 800807e:	d076      	beq.n	800816e <HAL_SPI_TransmitReceive+0x146>
 8008080:	f1b8 0f00 	cmp.w	r8, #0
 8008084:	d073      	beq.n	800816e <HAL_SPI_TransmitReceive+0x146>
 8008086:	2f00      	cmp	r7, #0
 8008088:	d071      	beq.n	800816e <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800808a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800808e:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008090:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008094:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008096:	bf1c      	itt	ne
 8008098:	2205      	movne	r2, #5
 800809a:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800809e:	2200      	movs	r2, #0
 80080a0:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80080a2:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080a6:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 80080a8:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 80080b0:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080b2:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 80080b4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80080b8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80080bc:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080be:	d858      	bhi.n	8008172 <HAL_SPI_TransmitReceive+0x14a>
 80080c0:	2f01      	cmp	r7, #1
 80080c2:	f000 8124 	beq.w	800830e <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080c6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80080ca:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080cc:	6811      	ldr	r1, [r2, #0]
 80080ce:	0649      	lsls	r1, r1, #25
 80080d0:	f100 80e3 	bmi.w	800829a <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 80080d4:	6811      	ldr	r1, [r2, #0]
 80080d6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80080da:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80df 	beq.w	80082a0 <HAL_SPI_TransmitReceive+0x278>
 80080e2:	2f01      	cmp	r7, #1
 80080e4:	f000 80dc 	beq.w	80082a0 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 80080e8:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	b92b      	cbnz	r3, 80080fc <HAL_SPI_TransmitReceive+0xd4>
 80080f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8086 	beq.w	8008208 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	6893      	ldr	r3, [r2, #8]
 8008100:	0799      	lsls	r1, r3, #30
 8008102:	d505      	bpl.n	8008110 <HAL_SPI_TransmitReceive+0xe8>
 8008104:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	b113      	cbz	r3, 8008110 <HAL_SPI_TransmitReceive+0xe8>
 800810a:	2f00      	cmp	r7, #0
 800810c:	f040 80e4 	bne.w	80082d8 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008110:	6893      	ldr	r3, [r2, #8]
 8008112:	f013 0301 	ands.w	r3, r3, #1
 8008116:	d01e      	beq.n	8008156 <HAL_SPI_TransmitReceive+0x12e>
 8008118:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800811c:	b289      	uxth	r1, r1
 800811e:	b1d1      	cbz	r1, 8008156 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8008120:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008124:	b289      	uxth	r1, r1
 8008126:	2901      	cmp	r1, #1
 8008128:	f240 80c8 	bls.w	80082bc <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800812c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800812e:	68d0      	ldr	r0, [r2, #12]
 8008130:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008134:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008136:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800813a:	3902      	subs	r1, #2
 800813c:	b289      	uxth	r1, r1
 800813e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008142:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008146:	b289      	uxth	r1, r1
 8008148:	2901      	cmp	r1, #1
        txallowed = 1U;
 800814a:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 800814c:	d803      	bhi.n	8008156 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800814e:	6853      	ldr	r3, [r2, #4]
 8008150:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008154:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008156:	f7fa fec5 	bl	8002ee4 <HAL_GetTick>
 800815a:	1b43      	subs	r3, r0, r5
 800815c:	42b3      	cmp	r3, r6
 800815e:	d3c4      	bcc.n	80080ea <HAL_SPI_TransmitReceive+0xc2>
 8008160:	1c73      	adds	r3, r6, #1
 8008162:	d0c2      	beq.n	80080ea <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8008164:	2003      	movs	r0, #3
 8008166:	e77b      	b.n	8008060 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8008168:	2002      	movs	r0, #2
}
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 800816e:	2001      	movs	r0, #1
 8008170:	e776      	b.n	8008060 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008172:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008176:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008178:	6811      	ldr	r1, [r2, #0]
 800817a:	0648      	lsls	r0, r1, #25
 800817c:	d403      	bmi.n	8008186 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 800817e:	6811      	ldr	r1, [r2, #0]
 8008180:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008184:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008186:	2b00      	cmp	r3, #0
 8008188:	d161      	bne.n	800824e <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800818a:	4649      	mov	r1, r9
 800818c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008190:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8008192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008194:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008196:	3b01      	subs	r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800819c:	1c72      	adds	r2, r6, #1
{
 800819e:	f04f 0701 	mov.w	r7, #1
 80081a2:	d028      	beq.n	80081f6 <HAL_SPI_TransmitReceive+0x1ce>
 80081a4:	e04e      	b.n	8008244 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	6893      	ldr	r3, [r2, #8]
 80081aa:	079b      	lsls	r3, r3, #30
 80081ac:	d50d      	bpl.n	80081ca <HAL_SPI_TransmitReceive+0x1a2>
 80081ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	b153      	cbz	r3, 80081ca <HAL_SPI_TransmitReceive+0x1a2>
 80081b4:	b14f      	cbz	r7, 80081ca <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80081b8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80081bc:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80081be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081c0:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80081c2:	3b01      	subs	r3, #1
 80081c4:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80081c6:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80081c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081ca:	6893      	ldr	r3, [r2, #8]
 80081cc:	f013 0301 	ands.w	r3, r3, #1
 80081d0:	d00f      	beq.n	80081f2 <HAL_SPI_TransmitReceive+0x1ca>
 80081d2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80081d6:	b289      	uxth	r1, r1
 80081d8:	b159      	cbz	r1, 80081f2 <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081da:	68d1      	ldr	r1, [r2, #12]
 80081dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081de:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80081e2:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80081e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081e8:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081f2:	f7fa fe77 	bl	8002ee4 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1d3      	bne.n	80081a6 <HAL_SPI_TransmitReceive+0x17e>
 80081fe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1ce      	bne.n	80081a6 <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008208:	462a      	mov	r2, r5
 800820a:	4631      	mov	r1, r6
 800820c:	4620      	mov	r0, r4
 800820e:	f7ff fded 	bl	8007dec <SPI_EndRxTxTransaction>
 8008212:	2800      	cmp	r0, #0
 8008214:	f43f af24 	beq.w	8008060 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008218:	2320      	movs	r3, #32
 800821a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800821c:	2001      	movs	r0, #1
 800821e:	e71f      	b.n	8008060 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008220:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0ee      	beq.n	8008208 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	6893      	ldr	r3, [r2, #8]
 800822e:	0798      	lsls	r0, r3, #30
 8008230:	d422      	bmi.n	8008278 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008232:	6893      	ldr	r3, [r2, #8]
 8008234:	f013 0301 	ands.w	r3, r3, #1
 8008238:	d10c      	bne.n	8008254 <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800823a:	f7fa fe53 	bl	8002ee4 <HAL_GetTick>
 800823e:	1b40      	subs	r0, r0, r5
 8008240:	42b0      	cmp	r0, r6
 8008242:	d28f      	bcs.n	8008164 <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008244:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008246:	b29b      	uxth	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1ee      	bne.n	800822a <HAL_SPI_TransmitReceive+0x202>
 800824c:	e7e8      	b.n	8008220 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800824e:	2f01      	cmp	r7, #1
 8008250:	d1a4      	bne.n	800819c <HAL_SPI_TransmitReceive+0x174>
 8008252:	e79a      	b.n	800818a <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008254:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008258:	b289      	uxth	r1, r1
 800825a:	2900      	cmp	r1, #0
 800825c:	d0ed      	beq.n	800823a <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800825e:	68d1      	ldr	r1, [r2, #12]
 8008260:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008262:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8008266:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008268:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800826c:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800826e:	3b01      	subs	r3, #1
 8008270:	b29b      	uxth	r3, r3
 8008272:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8008276:	e7e0      	b.n	800823a <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008278:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0d8      	beq.n	8008232 <HAL_SPI_TransmitReceive+0x20a>
 8008280:	2f00      	cmp	r7, #0
 8008282:	d0d6      	beq.n	8008232 <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008286:	f833 1b02 	ldrh.w	r1, [r3], #2
 800828a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800828c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800828e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008290:	3b01      	subs	r3, #1
 8008292:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008294:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008296:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008298:	e7cb      	b.n	8008232 <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800829a:	2b00      	cmp	r3, #0
 800829c:	f47f af24 	bne.w	80080e8 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 80082a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d93a      	bls.n	800831e <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082a8:	4649      	mov	r1, r9
 80082aa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80082ae:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 80082b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082b2:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80082b4:	3b02      	subs	r3, #2
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082ba:	e715      	b.n	80080e8 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 80082bc:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082c0:	7b12      	ldrb	r2, [r2, #12]
 80082c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80082c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082c6:	3301      	adds	r3, #1
 80082c8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80082ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80082ce:	3b01      	subs	r3, #1
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80082d6:	e73e      	b.n	8008156 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 80082d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082da:	b29b      	uxth	r3, r3
 80082dc:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80082e0:	d909      	bls.n	80082f6 <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082e2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80082e6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082e8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80082ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082ec:	3b02      	subs	r3, #2
 80082ee:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80082f0:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 80082f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082f4:	e70c      	b.n	8008110 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80082fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80082fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80082fe:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8008300:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8008302:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8008304:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008306:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008308:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 800830a:	2700      	movs	r7, #0
 800830c:	e700      	b.n	8008110 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800830e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008312:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008314:	6811      	ldr	r1, [r2, #0]
 8008316:	0649      	lsls	r1, r1, #25
 8008318:	f57f aedc 	bpl.w	80080d4 <HAL_SPI_TransmitReceive+0xac>
 800831c:	e7c0      	b.n	80082a0 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800831e:	f899 3000 	ldrb.w	r3, [r9]
 8008322:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8008324:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008326:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008328:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800832a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800832c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800832e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008330:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008332:	e6d9      	b.n	80080e8 <HAL_SPI_TransmitReceive+0xc0>

08008334 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008334:	6a03      	ldr	r3, [r0, #32]
 8008336:	f023 0301 	bic.w	r3, r3, #1
 800833a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833c:	6a03      	ldr	r3, [r0, #32]
{
 800833e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008342:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008344:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008346:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800834a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800834e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008350:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008352:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008356:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008358:	4d15      	ldr	r5, [pc, #84]	; (80083b0 <TIM_OC1_SetConfig+0x7c>)
 800835a:	42a8      	cmp	r0, r5
 800835c:	d013      	beq.n	8008386 <TIM_OC1_SetConfig+0x52>
 800835e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008362:	42a8      	cmp	r0, r5
 8008364:	d00f      	beq.n	8008386 <TIM_OC1_SetConfig+0x52>
 8008366:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800836a:	42a8      	cmp	r0, r5
 800836c:	d00b      	beq.n	8008386 <TIM_OC1_SetConfig+0x52>
 800836e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008372:	42a8      	cmp	r0, r5
 8008374:	d007      	beq.n	8008386 <TIM_OC1_SetConfig+0x52>
 8008376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800837a:	42a8      	cmp	r0, r5
 800837c:	d003      	beq.n	8008386 <TIM_OC1_SetConfig+0x52>
 800837e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008382:	42a8      	cmp	r0, r5
 8008384:	d10d      	bne.n	80083a2 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008386:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008388:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800838c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800838e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008392:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008396:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800839a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800839e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083a2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80083a4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80083a6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80083a8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80083aa:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80083ac:	6203      	str	r3, [r0, #32]
}
 80083ae:	4770      	bx	lr
 80083b0:	40012c00 	.word	0x40012c00

080083b4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083b4:	6a03      	ldr	r3, [r0, #32]
 80083b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083bc:	6a03      	ldr	r3, [r0, #32]
{
 80083be:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083c2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80083ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80083d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083da:	4d1c      	ldr	r5, [pc, #112]	; (800844c <TIM_OC3_SetConfig+0x98>)
 80083dc:	42a8      	cmp	r0, r5
 80083de:	d017      	beq.n	8008410 <TIM_OC3_SetConfig+0x5c>
 80083e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083e4:	42a8      	cmp	r0, r5
 80083e6:	d013      	beq.n	8008410 <TIM_OC3_SetConfig+0x5c>
 80083e8:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80083ec:	42a8      	cmp	r0, r5
 80083ee:	d025      	beq.n	800843c <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f0:	4d17      	ldr	r5, [pc, #92]	; (8008450 <TIM_OC3_SetConfig+0x9c>)
 80083f2:	42a8      	cmp	r0, r5
 80083f4:	d013      	beq.n	800841e <TIM_OC3_SetConfig+0x6a>
 80083f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80083fa:	42a8      	cmp	r0, r5
 80083fc:	d00f      	beq.n	800841e <TIM_OC3_SetConfig+0x6a>
 80083fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008402:	42a8      	cmp	r0, r5
 8008404:	d00b      	beq.n	800841e <TIM_OC3_SetConfig+0x6a>
 8008406:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800840a:	42a8      	cmp	r0, r5
 800840c:	d10f      	bne.n	800842e <TIM_OC3_SetConfig+0x7a>
 800840e:	e006      	b.n	800841e <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008410:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008416:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800841a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800841e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008422:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008426:	ea46 0c05 	orr.w	ip, r6, r5
 800842a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800842e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008430:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008432:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008434:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8008436:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8008438:	6203      	str	r3, [r0, #32]
}
 800843a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800843c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800843e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008442:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844a:	e7d1      	b.n	80083f0 <TIM_OC3_SetConfig+0x3c>
 800844c:	40012c00 	.word	0x40012c00
 8008450:	40014000 	.word	0x40014000

08008454 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008454:	6a03      	ldr	r3, [r0, #32]
 8008456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800845a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845c:	6a03      	ldr	r3, [r0, #32]
{
 800845e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008460:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008462:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008464:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008466:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800846a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800846e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008472:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008478:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800847c:	4d1c      	ldr	r5, [pc, #112]	; (80084f0 <TIM_OC4_SetConfig+0x9c>)
 800847e:	42a8      	cmp	r0, r5
 8008480:	d017      	beq.n	80084b2 <TIM_OC4_SetConfig+0x5e>
 8008482:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008486:	42a8      	cmp	r0, r5
 8008488:	d013      	beq.n	80084b2 <TIM_OC4_SetConfig+0x5e>
 800848a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800848e:	42a8      	cmp	r0, r5
 8008490:	d025      	beq.n	80084de <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008492:	4d18      	ldr	r5, [pc, #96]	; (80084f4 <TIM_OC4_SetConfig+0xa0>)
 8008494:	42a8      	cmp	r0, r5
 8008496:	d013      	beq.n	80084c0 <TIM_OC4_SetConfig+0x6c>
 8008498:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800849c:	42a8      	cmp	r0, r5
 800849e:	d00f      	beq.n	80084c0 <TIM_OC4_SetConfig+0x6c>
 80084a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084a4:	42a8      	cmp	r0, r5
 80084a6:	d00b      	beq.n	80084c0 <TIM_OC4_SetConfig+0x6c>
 80084a8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80084ac:	42a8      	cmp	r0, r5
 80084ae:	d10f      	bne.n	80084d0 <TIM_OC4_SetConfig+0x7c>
 80084b0:	e006      	b.n	80084c0 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80084b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80084bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80084c0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80084c4:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80084c8:	ea46 0c05 	orr.w	ip, r6, r5
 80084cc:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084d0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80084d2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80084d4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80084d6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80084d8:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80084da:	6203      	str	r3, [r0, #32]
}
 80084dc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084de:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80084e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084e4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80084e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ec:	e7d1      	b.n	8008492 <TIM_OC4_SetConfig+0x3e>
 80084ee:	bf00      	nop
 80084f0:	40012c00 	.word	0x40012c00
 80084f4:	40014000 	.word	0x40014000

080084f8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f000 808c 	beq.w	8008616 <HAL_TIM_Base_Init+0x11e>
{
 80084fe:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008500:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008504:	4604      	mov	r4, r0
 8008506:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800850a:	2b00      	cmp	r3, #0
 800850c:	d078      	beq.n	8008600 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800850e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008510:	4944      	ldr	r1, [pc, #272]	; (8008624 <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008512:	2302      	movs	r3, #2
 8008514:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008518:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800851a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800851c:	d05c      	beq.n	80085d8 <HAL_TIM_Base_Init+0xe0>
 800851e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008522:	d02c      	beq.n	800857e <HAL_TIM_Base_Init+0x86>
 8008524:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008528:	428a      	cmp	r2, r1
 800852a:	d028      	beq.n	800857e <HAL_TIM_Base_Init+0x86>
 800852c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008530:	428a      	cmp	r2, r1
 8008532:	d024      	beq.n	800857e <HAL_TIM_Base_Init+0x86>
 8008534:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008538:	428a      	cmp	r2, r1
 800853a:	d020      	beq.n	800857e <HAL_TIM_Base_Init+0x86>
 800853c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008540:	428a      	cmp	r2, r1
 8008542:	d049      	beq.n	80085d8 <HAL_TIM_Base_Init+0xe0>
 8008544:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008548:	428a      	cmp	r2, r1
 800854a:	d066      	beq.n	800861a <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854c:	4936      	ldr	r1, [pc, #216]	; (8008628 <HAL_TIM_Base_Init+0x130>)
 800854e:	428a      	cmp	r2, r1
 8008550:	d05b      	beq.n	800860a <HAL_TIM_Base_Init+0x112>
 8008552:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008556:	428a      	cmp	r2, r1
 8008558:	d057      	beq.n	800860a <HAL_TIM_Base_Init+0x112>
 800855a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800855e:	428a      	cmp	r2, r1
 8008560:	d053      	beq.n	800860a <HAL_TIM_Base_Init+0x112>
 8008562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008566:	428a      	cmp	r2, r1
 8008568:	d04f      	beq.n	800860a <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800856a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800856c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800856e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008572:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008574:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8008576:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008578:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800857a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800857c:	e010      	b.n	80085a0 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800857e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008580:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008586:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800858c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800858e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008594:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008596:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008598:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800859a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800859c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800859e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80085a0:	2301      	movs	r3, #1
 80085a2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80085ac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80085b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80085b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80085b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80085c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085c8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80085cc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80085d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80085d4:	2000      	movs	r0, #0
}
 80085d6:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80085d8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085da:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80085e0:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80085e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085e6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085e8:	69a1      	ldr	r1, [r4, #24]
 80085ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ee:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80085f0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085f2:	68e3      	ldr	r3, [r4, #12]
 80085f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80085f6:	6863      	ldr	r3, [r4, #4]
 80085f8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80085fa:	6963      	ldr	r3, [r4, #20]
 80085fc:	6313      	str	r3, [r2, #48]	; 0x30
 80085fe:	e7cf      	b.n	80085a0 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008600:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008604:	f7fc fe4e 	bl	80052a4 <HAL_TIM_Base_MspInit>
 8008608:	e781      	b.n	800850e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800860a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800860c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800860e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008612:	4303      	orrs	r3, r0
 8008614:	e7e9      	b.n	80085ea <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8008616:	2001      	movs	r0, #1
}
 8008618:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800861a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800861c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008620:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008622:	e793      	b.n	800854c <HAL_TIM_Base_Init+0x54>
 8008624:	40012c00 	.word	0x40012c00
 8008628:	40014000 	.word	0x40014000

0800862c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800862c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008630:	2b01      	cmp	r3, #1
 8008632:	d132      	bne.n	800869a <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008634:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008636:	491b      	ldr	r1, [pc, #108]	; (80086a4 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	2202      	movs	r2, #2
 800863a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800863e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008640:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008642:	f042 0201 	orr.w	r2, r2, #1
 8008646:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008648:	d019      	beq.n	800867e <HAL_TIM_Base_Start_IT+0x52>
 800864a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864e:	d016      	beq.n	800867e <HAL_TIM_Base_Start_IT+0x52>
 8008650:	4a15      	ldr	r2, [pc, #84]	; (80086a8 <HAL_TIM_Base_Start_IT+0x7c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <HAL_TIM_Base_Start_IT+0x52>
 8008656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800865a:	4293      	cmp	r3, r2
 800865c:	d00f      	beq.n	800867e <HAL_TIM_Base_Start_IT+0x52>
 800865e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008662:	4293      	cmp	r3, r2
 8008664:	d00b      	beq.n	800867e <HAL_TIM_Base_Start_IT+0x52>
 8008666:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800866a:	4293      	cmp	r3, r2
 800866c:	d007      	beq.n	800867e <HAL_TIM_Base_Start_IT+0x52>
 800866e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <HAL_TIM_Base_Start_IT+0x52>
 8008676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800867a:	4293      	cmp	r3, r2
 800867c:	d107      	bne.n	800868e <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800867e:	6899      	ldr	r1, [r3, #8]
 8008680:	4a0a      	ldr	r2, [pc, #40]	; (80086ac <HAL_TIM_Base_Start_IT+0x80>)
 8008682:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008684:	2a06      	cmp	r2, #6
 8008686:	d00a      	beq.n	800869e <HAL_TIM_Base_Start_IT+0x72>
 8008688:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800868c:	d007      	beq.n	800869e <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8008694:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	4770      	bx	lr
    return HAL_ERROR;
 800869a:	2001      	movs	r0, #1
 800869c:	4770      	bx	lr
  return HAL_OK;
 800869e:	2000      	movs	r0, #0
}
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40000400 	.word	0x40000400
 80086ac:	00010007 	.word	0x00010007

080086b0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f000 808c 	beq.w	80087ce <HAL_TIM_PWM_Init+0x11e>
{
 80086b6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80086b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80086bc:	4604      	mov	r4, r0
 80086be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d078      	beq.n	80087b8 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086c6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086c8:	4944      	ldr	r1, [pc, #272]	; (80087dc <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80086ca:	2302      	movs	r3, #2
 80086cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80086d2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d4:	d05c      	beq.n	8008790 <HAL_TIM_PWM_Init+0xe0>
 80086d6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80086da:	d02c      	beq.n	8008736 <HAL_TIM_PWM_Init+0x86>
 80086dc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80086e0:	428a      	cmp	r2, r1
 80086e2:	d028      	beq.n	8008736 <HAL_TIM_PWM_Init+0x86>
 80086e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086e8:	428a      	cmp	r2, r1
 80086ea:	d024      	beq.n	8008736 <HAL_TIM_PWM_Init+0x86>
 80086ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086f0:	428a      	cmp	r2, r1
 80086f2:	d020      	beq.n	8008736 <HAL_TIM_PWM_Init+0x86>
 80086f4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80086f8:	428a      	cmp	r2, r1
 80086fa:	d049      	beq.n	8008790 <HAL_TIM_PWM_Init+0xe0>
 80086fc:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008700:	428a      	cmp	r2, r1
 8008702:	d066      	beq.n	80087d2 <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008704:	4936      	ldr	r1, [pc, #216]	; (80087e0 <HAL_TIM_PWM_Init+0x130>)
 8008706:	428a      	cmp	r2, r1
 8008708:	d05b      	beq.n	80087c2 <HAL_TIM_PWM_Init+0x112>
 800870a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800870e:	428a      	cmp	r2, r1
 8008710:	d057      	beq.n	80087c2 <HAL_TIM_PWM_Init+0x112>
 8008712:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008716:	428a      	cmp	r2, r1
 8008718:	d053      	beq.n	80087c2 <HAL_TIM_PWM_Init+0x112>
 800871a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800871e:	428a      	cmp	r2, r1
 8008720:	d04f      	beq.n	80087c2 <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008722:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008724:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800872a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800872c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800872e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008730:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008732:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008734:	e010      	b.n	8008758 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008736:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008738:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800873e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008744:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008746:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800874c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800874e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008750:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008752:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008754:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008756:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008758:	2301      	movs	r3, #1
 800875a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800875c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008760:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008764:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008768:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800876c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008778:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800877c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008780:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008784:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008788:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800878c:	2000      	movs	r0, #0
}
 800878e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008790:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008792:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008798:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800879a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800879e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a0:	69a1      	ldr	r1, [r4, #24]
 80087a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80087a8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80087ae:	6863      	ldr	r3, [r4, #4]
 80087b0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80087b2:	6963      	ldr	r3, [r4, #20]
 80087b4:	6313      	str	r3, [r2, #48]	; 0x30
 80087b6:	e7cf      	b.n	8008758 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80087b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80087bc:	f7fc fd5c 	bl	8005278 <HAL_TIM_PWM_MspInit>
 80087c0:	e781      	b.n	80086c6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087c2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80087c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ca:	4303      	orrs	r3, r0
 80087cc:	e7e9      	b.n	80087a2 <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 80087ce:	2001      	movs	r0, #1
}
 80087d0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80087d2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80087d8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087da:	e793      	b.n	8008704 <HAL_TIM_PWM_Init+0x54>
 80087dc:	40012c00 	.word	0x40012c00
 80087e0:	40014000 	.word	0x40014000

080087e4 <HAL_TIM_PWM_Start>:
 80087e4:	2910      	cmp	r1, #16
 80087e6:	d80a      	bhi.n	80087fe <HAL_TIM_PWM_Start+0x1a>
 80087e8:	e8df f001 	tbb	[pc, r1]
 80087ec:	09090961 	.word	0x09090961
 80087f0:	09090967 	.word	0x09090967
 80087f4:	0909096f 	.word	0x0909096f
 80087f8:	09090974 	.word	0x09090974
 80087fc:	7d          	.byte	0x7d
 80087fd:	00          	.byte	0x00
 80087fe:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008802:	2b01      	cmp	r3, #1
 8008804:	d157      	bne.n	80088b6 <HAL_TIM_PWM_Start+0xd2>
 8008806:	2910      	cmp	r1, #16
 8008808:	d80a      	bhi.n	8008820 <HAL_TIM_PWM_Start+0x3c>
 800880a:	e8df f001 	tbb	[pc, r1]
 800880e:	0993      	.short	0x0993
 8008810:	095a0909 	.word	0x095a0909
 8008814:	097c0909 	.word	0x097c0909
 8008818:	09780909 	.word	0x09780909
 800881c:	0909      	.short	0x0909
 800881e:	74          	.byte	0x74
 800881f:	00          	.byte	0x00
 8008820:	2302      	movs	r3, #2
 8008822:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008826:	6803      	ldr	r3, [r0, #0]
 8008828:	2201      	movs	r2, #1
 800882a:	6a18      	ldr	r0, [r3, #32]
 800882c:	f001 011f 	and.w	r1, r1, #31
 8008830:	fa02 f101 	lsl.w	r1, r2, r1
 8008834:	ea20 0001 	bic.w	r0, r0, r1
 8008838:	6218      	str	r0, [r3, #32]
 800883a:	6a18      	ldr	r0, [r3, #32]
 800883c:	4a3f      	ldr	r2, [pc, #252]	; (800893c <HAL_TIM_PWM_Start+0x158>)
 800883e:	4301      	orrs	r1, r0
 8008840:	4293      	cmp	r3, r2
 8008842:	6219      	str	r1, [r3, #32]
 8008844:	d063      	beq.n	800890e <HAL_TIM_PWM_Start+0x12a>
 8008846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800884a:	4293      	cmp	r3, r2
 800884c:	d06d      	beq.n	800892a <HAL_TIM_PWM_Start+0x146>
 800884e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008852:	4293      	cmp	r3, r2
 8008854:	d069      	beq.n	800892a <HAL_TIM_PWM_Start+0x146>
 8008856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800885a:	4293      	cmp	r3, r2
 800885c:	d065      	beq.n	800892a <HAL_TIM_PWM_Start+0x146>
 800885e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008862:	4293      	cmp	r3, r2
 8008864:	d061      	beq.n	800892a <HAL_TIM_PWM_Start+0x146>
 8008866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800886a:	4293      	cmp	r3, r2
 800886c:	d05d      	beq.n	800892a <HAL_TIM_PWM_Start+0x146>
 800886e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008872:	d050      	beq.n	8008916 <HAL_TIM_PWM_Start+0x132>
 8008874:	4a32      	ldr	r2, [pc, #200]	; (8008940 <HAL_TIM_PWM_Start+0x15c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d04d      	beq.n	8008916 <HAL_TIM_PWM_Start+0x132>
 800887a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800887e:	4293      	cmp	r3, r2
 8008880:	d049      	beq.n	8008916 <HAL_TIM_PWM_Start+0x132>
 8008882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008886:	4293      	cmp	r3, r2
 8008888:	d045      	beq.n	8008916 <HAL_TIM_PWM_Start+0x132>
 800888a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800888e:	4293      	cmp	r3, r2
 8008890:	d041      	beq.n	8008916 <HAL_TIM_PWM_Start+0x132>
 8008892:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008896:	4293      	cmp	r3, r2
 8008898:	d03d      	beq.n	8008916 <HAL_TIM_PWM_Start+0x132>
 800889a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800889e:	4293      	cmp	r3, r2
 80088a0:	d039      	beq.n	8008916 <HAL_TIM_PWM_Start+0x132>
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	f042 0201 	orr.w	r2, r2, #1
 80088a8:	2000      	movs	r0, #0
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	4770      	bx	lr
 80088ae:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d03e      	beq.n	8008934 <HAL_TIM_PWM_Start+0x150>
 80088b6:	2001      	movs	r0, #1
 80088b8:	4770      	bx	lr
 80088ba:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d1f9      	bne.n	80088b6 <HAL_TIM_PWM_Start+0xd2>
 80088c2:	2302      	movs	r3, #2
 80088c4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80088c8:	e7ad      	b.n	8008826 <HAL_TIM_PWM_Start+0x42>
 80088ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d099      	beq.n	8008806 <HAL_TIM_PWM_Start+0x22>
 80088d2:	e7f0      	b.n	80088b6 <HAL_TIM_PWM_Start+0xd2>
 80088d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80088d8:	3b01      	subs	r3, #1
 80088da:	bf18      	it	ne
 80088dc:	2301      	movne	r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d091      	beq.n	8008806 <HAL_TIM_PWM_Start+0x22>
 80088e2:	2001      	movs	r0, #1
 80088e4:	4770      	bx	lr
 80088e6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80088ea:	3b01      	subs	r3, #1
 80088ec:	bf18      	it	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d088      	beq.n	8008806 <HAL_TIM_PWM_Start+0x22>
 80088f4:	e7f5      	b.n	80088e2 <HAL_TIM_PWM_Start+0xfe>
 80088f6:	2302      	movs	r3, #2
 80088f8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80088fc:	e793      	b.n	8008826 <HAL_TIM_PWM_Start+0x42>
 80088fe:	2302      	movs	r3, #2
 8008900:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008904:	e78f      	b.n	8008826 <HAL_TIM_PWM_Start+0x42>
 8008906:	2302      	movs	r3, #2
 8008908:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800890c:	e78b      	b.n	8008826 <HAL_TIM_PWM_Start+0x42>
 800890e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008914:	645a      	str	r2, [r3, #68]	; 0x44
 8008916:	6899      	ldr	r1, [r3, #8]
 8008918:	4a0a      	ldr	r2, [pc, #40]	; (8008944 <HAL_TIM_PWM_Start+0x160>)
 800891a:	400a      	ands	r2, r1
 800891c:	2a06      	cmp	r2, #6
 800891e:	d002      	beq.n	8008926 <HAL_TIM_PWM_Start+0x142>
 8008920:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008924:	d1bd      	bne.n	80088a2 <HAL_TIM_PWM_Start+0xbe>
 8008926:	2000      	movs	r0, #0
 8008928:	4770      	bx	lr
 800892a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800892c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008930:	645a      	str	r2, [r3, #68]	; 0x44
 8008932:	e79c      	b.n	800886e <HAL_TIM_PWM_Start+0x8a>
 8008934:	2302      	movs	r3, #2
 8008936:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800893a:	e774      	b.n	8008826 <HAL_TIM_PWM_Start+0x42>
 800893c:	40012c00 	.word	0x40012c00
 8008940:	40000400 	.word	0x40000400
 8008944:	00010007 	.word	0x00010007

08008948 <HAL_TIM_OC_DelayElapsedCallback>:
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop

0800894c <HAL_TIM_IC_CaptureCallback>:
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop

08008954 <HAL_TIM_TriggerCallback>:
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop

08008958 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008958:	6803      	ldr	r3, [r0, #0]
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	0791      	lsls	r1, r2, #30
{
 800895e:	b510      	push	{r4, lr}
 8008960:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008962:	d503      	bpl.n	800896c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	0792      	lsls	r2, r2, #30
 8008968:	f100 808a 	bmi.w	8008a80 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800896c:	691a      	ldr	r2, [r3, #16]
 800896e:	0752      	lsls	r2, r2, #29
 8008970:	d502      	bpl.n	8008978 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	0750      	lsls	r0, r2, #29
 8008976:	d470      	bmi.n	8008a5a <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008978:	691a      	ldr	r2, [r3, #16]
 800897a:	0711      	lsls	r1, r2, #28
 800897c:	d502      	bpl.n	8008984 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	0712      	lsls	r2, r2, #28
 8008982:	d458      	bmi.n	8008a36 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008984:	691a      	ldr	r2, [r3, #16]
 8008986:	06d1      	lsls	r1, r2, #27
 8008988:	d502      	bpl.n	8008990 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	06d2      	lsls	r2, r2, #27
 800898e:	d43e      	bmi.n	8008a0e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008990:	691a      	ldr	r2, [r3, #16]
 8008992:	07d0      	lsls	r0, r2, #31
 8008994:	d503      	bpl.n	800899e <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	07d1      	lsls	r1, r2, #31
 800899a:	f100 808a 	bmi.w	8008ab2 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800899e:	691a      	ldr	r2, [r3, #16]
 80089a0:	0612      	lsls	r2, r2, #24
 80089a2:	d503      	bpl.n	80089ac <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	0610      	lsls	r0, r2, #24
 80089a8:	f100 808b 	bmi.w	8008ac2 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089ac:	691a      	ldr	r2, [r3, #16]
 80089ae:	05d1      	lsls	r1, r2, #23
 80089b0:	d503      	bpl.n	80089ba <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	0612      	lsls	r2, r2, #24
 80089b6:	f100 808c 	bmi.w	8008ad2 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	0650      	lsls	r0, r2, #25
 80089be:	d503      	bpl.n	80089c8 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	0651      	lsls	r1, r2, #25
 80089c4:	f100 808d 	bmi.w	8008ae2 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089c8:	691a      	ldr	r2, [r3, #16]
 80089ca:	0692      	lsls	r2, r2, #26
 80089cc:	d503      	bpl.n	80089d6 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	0690      	lsls	r0, r2, #26
 80089d2:	f100 808e 	bmi.w	8008af2 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	02d1      	lsls	r1, r2, #11
 80089da:	d503      	bpl.n	80089e4 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	02d2      	lsls	r2, r2, #11
 80089e0:	f100 808f 	bmi.w	8008b02 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	0290      	lsls	r0, r2, #10
 80089e8:	d503      	bpl.n	80089f2 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	0291      	lsls	r1, r2, #10
 80089ee:	f100 8090 	bmi.w	8008b12 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80089f2:	691a      	ldr	r2, [r3, #16]
 80089f4:	0252      	lsls	r2, r2, #9
 80089f6:	d503      	bpl.n	8008a00 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	0250      	lsls	r0, r2, #9
 80089fc:	f100 8091 	bmi.w	8008b22 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	0211      	lsls	r1, r2, #8
 8008a04:	d502      	bpl.n	8008a0c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	0212      	lsls	r2, r2, #8
 8008a0a:	d44a      	bmi.n	8008aa2 <HAL_TIM_IRQHandler+0x14a>
}
 8008a0c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a0e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a12:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a14:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a16:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a20:	f040 8090 	bne.w	8008b44 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a24:	f7ff ff90 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f7ff ff91 	bl	8008950 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a30:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a32:	7722      	strb	r2, [r4, #28]
 8008a34:	e7ac      	b.n	8008990 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a36:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a3a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a3c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a3e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8008a44:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a46:	d17a      	bne.n	8008b3e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a48:	f7ff ff7e 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7ff ff7f 	bl	8008950 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a52:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a54:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a56:	7722      	strb	r2, [r4, #28]
 8008a58:	e794      	b.n	8008984 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a5a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a5e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a60:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a62:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008a6a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a6c:	d164      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	f7ff ff6b 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a72:	4620      	mov	r0, r4
 8008a74:	f7ff ff6c 	bl	8008950 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a78:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a7a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7c:	7722      	strb	r2, [r4, #28]
 8008a7e:	e77b      	b.n	8008978 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a80:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a84:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a86:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a88:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	0799      	lsls	r1, r3, #30
 8008a8e:	d150      	bne.n	8008b32 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a90:	f7ff ff5a 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7ff ff5b 	bl	8008950 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a9c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9e:	7722      	strb	r2, [r4, #28]
 8008aa0:	e764      	b.n	800896c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008aa2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008aa6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008aa8:	611a      	str	r2, [r3, #16]
}
 8008aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008aae:	f000 ba11 	b.w	8008ed4 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ab2:	f06f 0201 	mvn.w	r2, #1
 8008ab6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7fa fe1d 	bl	80036f8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	e76d      	b.n	800899e <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ac2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ac6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 f9f9 	bl	8008ec0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	e76c      	b.n	80089ac <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ad2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ad6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 f9f3 	bl	8008ec4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	e76b      	b.n	80089ba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ae6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7ff ff33 	bl	8008954 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	e76a      	b.n	80089c8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008af2:	f06f 0220 	mvn.w	r2, #32
 8008af6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 f9df 	bl	8008ebc <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	e769      	b.n	80089d6 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008b02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008b06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f9dd 	bl	8008ec8 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	e768      	b.n	80089e4 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008b12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008b16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 f9d7 	bl	8008ecc <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	e767      	b.n	80089f2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008b22:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008b26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 f9d1 	bl	8008ed0 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	e766      	b.n	8008a00 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8008b32:	f7ff ff0b 	bl	800894c <HAL_TIM_IC_CaptureCallback>
 8008b36:	e7b0      	b.n	8008a9a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b38:	f7ff ff08 	bl	800894c <HAL_TIM_IC_CaptureCallback>
 8008b3c:	e79c      	b.n	8008a78 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3e:	f7ff ff05 	bl	800894c <HAL_TIM_IC_CaptureCallback>
 8008b42:	e786      	b.n	8008a52 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b44:	f7ff ff02 	bl	800894c <HAL_TIM_IC_CaptureCallback>
 8008b48:	e771      	b.n	8008a2e <HAL_TIM_IRQHandler+0xd6>
 8008b4a:	bf00      	nop

08008b4c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b4c:	6a03      	ldr	r3, [r0, #32]
 8008b4e:	f023 0310 	bic.w	r3, r3, #16
 8008b52:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008b54:	6a03      	ldr	r3, [r0, #32]
{
 8008b56:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008b58:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008b5a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b5e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008b62:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b6a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008b6c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b70:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b74:	4d1c      	ldr	r5, [pc, #112]	; (8008be8 <TIM_OC2_SetConfig+0x9c>)
 8008b76:	42a8      	cmp	r0, r5
 8008b78:	d017      	beq.n	8008baa <TIM_OC2_SetConfig+0x5e>
 8008b7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b7e:	42a8      	cmp	r0, r5
 8008b80:	d013      	beq.n	8008baa <TIM_OC2_SetConfig+0x5e>
 8008b82:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008b86:	42a8      	cmp	r0, r5
 8008b88:	d025      	beq.n	8008bd6 <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	4d18      	ldr	r5, [pc, #96]	; (8008bec <TIM_OC2_SetConfig+0xa0>)
 8008b8c:	42a8      	cmp	r0, r5
 8008b8e:	d013      	beq.n	8008bb8 <TIM_OC2_SetConfig+0x6c>
 8008b90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b94:	42a8      	cmp	r0, r5
 8008b96:	d00f      	beq.n	8008bb8 <TIM_OC2_SetConfig+0x6c>
 8008b98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b9c:	42a8      	cmp	r0, r5
 8008b9e:	d00b      	beq.n	8008bb8 <TIM_OC2_SetConfig+0x6c>
 8008ba0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008ba4:	42a8      	cmp	r0, r5
 8008ba6:	d10f      	bne.n	8008bc8 <TIM_OC2_SetConfig+0x7c>
 8008ba8:	e006      	b.n	8008bb8 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008baa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bb8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bbc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bc0:	ea46 0c05 	orr.w	ip, r6, r5
 8008bc4:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008bc8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008bca:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008bcc:	6182      	str	r2, [r0, #24]
}
 8008bce:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008bd0:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008bd2:	6203      	str	r3, [r0, #32]
}
 8008bd4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bdc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be4:	e7d1      	b.n	8008b8a <TIM_OC2_SetConfig+0x3e>
 8008be6:	bf00      	nop
 8008be8:	40012c00 	.word	0x40012c00
 8008bec:	40014000 	.word	0x40014000

08008bf0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008bf0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	f000 80ff 	beq.w	8008df8 <HAL_TIM_PWM_ConfigChannel+0x208>
 8008bfa:	2301      	movs	r3, #1
{
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008c02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008c06:	2a14      	cmp	r2, #20
 8008c08:	d80c      	bhi.n	8008c24 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008c0a:	e8df f002 	tbb	[pc, r2]
 8008c0e:	0b59      	.short	0x0b59
 8008c10:	0b6e0b0b 	.word	0x0b6e0b0b
 8008c14:	0b840b0b 	.word	0x0b840b0b
 8008c18:	0b990b0b 	.word	0x0b990b0b
 8008c1c:	0baf0b0b 	.word	0x0baf0b0b
 8008c20:	0b0b      	.short	0x0b0b
 8008c22:	11          	.byte	0x11
 8008c23:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008c24:	2300      	movs	r3, #0
  switch (Channel)
 8008c26:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8008c28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c30:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c32:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c34:	6a1a      	ldr	r2, [r3, #32]
 8008c36:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008c3a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008c3c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008c3e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008c40:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c42:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008c46:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c4a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c4e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c50:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c54:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c58:	4e69      	ldr	r6, [pc, #420]	; (8008e00 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008c5a:	42b3      	cmp	r3, r6
 8008c5c:	d013      	beq.n	8008c86 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008c5e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008c62:	42b3      	cmp	r3, r6
 8008c64:	d00f      	beq.n	8008c86 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008c66:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008c6a:	42b3      	cmp	r3, r6
 8008c6c:	d00b      	beq.n	8008c86 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008c6e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008c72:	42b3      	cmp	r3, r6
 8008c74:	d007      	beq.n	8008c86 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008c76:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008c7a:	42b3      	cmp	r3, r6
 8008c7c:	d003      	beq.n	8008c86 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008c7e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008c82:	42b3      	cmp	r3, r6
 8008c84:	d104      	bne.n	8008c90 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c86:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c88:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c8c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c92:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c94:	6869      	ldr	r1, [r5, #4]
 8008c96:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c98:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c9c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ca2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ca4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ca6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008caa:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008cae:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008cb2:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008cb4:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008cb6:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008cb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cc0:	6800      	ldr	r0, [r0, #0]
 8008cc2:	f7ff fb37 	bl	8008334 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cc6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cc8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cca:	f043 0308 	orr.w	r3, r3, #8
 8008cce:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cd0:	6983      	ldr	r3, [r0, #24]
 8008cd2:	f023 0304 	bic.w	r3, r3, #4
 8008cd6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cd8:	6983      	ldr	r3, [r0, #24]
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008cde:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008ce0:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008ce2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	f7ff ff2e 	bl	8008b4c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cf0:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cf2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008cf8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cfa:	6983      	ldr	r3, [r0, #24]
 8008cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d00:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d02:	6983      	ldr	r3, [r0, #24]
 8008d04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008d08:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008d0a:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d0c:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008d0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008d12:	4610      	mov	r0, r2
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	f7ff fb4c 	bl	80083b4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d1c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d1e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d20:	f043 0308 	orr.w	r3, r3, #8
 8008d24:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d26:	69c3      	ldr	r3, [r0, #28]
 8008d28:	f023 0304 	bic.w	r3, r3, #4
 8008d2c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d2e:	69c3      	ldr	r3, [r0, #28]
 8008d30:	430b      	orrs	r3, r1
 8008d32:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008d34:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d36:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008d38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d40:	6800      	ldr	r0, [r0, #0]
 8008d42:	f7ff fb87 	bl	8008454 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d46:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d48:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008d4e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d50:	69c3      	ldr	r3, [r0, #28]
 8008d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d56:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d58:	69c3      	ldr	r3, [r0, #28]
 8008d5a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008d5e:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008d60:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d62:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008d64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008d68:	4610      	mov	r0, r2
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d6c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008d6e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d70:	6a1a      	ldr	r2, [r3, #32]
 8008d72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d76:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008d78:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008d7a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008d7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d7e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008d82:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008d86:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d88:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008d8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d8e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d92:	4e1b      	ldr	r6, [pc, #108]	; (8008e00 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008d94:	42b3      	cmp	r3, r6
 8008d96:	d013      	beq.n	8008dc0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008d98:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008d9c:	42b3      	cmp	r3, r6
 8008d9e:	d00f      	beq.n	8008dc0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008da0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008da4:	42b3      	cmp	r3, r6
 8008da6:	d00b      	beq.n	8008dc0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008da8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008dac:	42b3      	cmp	r3, r6
 8008dae:	d007      	beq.n	8008dc0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008db0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008db4:	42b3      	cmp	r3, r6
 8008db6:	d003      	beq.n	8008dc0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008db8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008dbc:	42b3      	cmp	r3, r6
 8008dbe:	d104      	bne.n	8008dca <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dc0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dc2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dc6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008dca:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008dcc:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008dce:	6869      	ldr	r1, [r5, #4]
 8008dd0:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8008dd2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008dd6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dd8:	f042 0208 	orr.w	r2, r2, #8
 8008ddc:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008dde:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008de0:	f021 0104 	bic.w	r1, r1, #4
 8008de4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008de6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008de8:	4301      	orrs	r1, r0
 8008dea:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008dec:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008dee:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008df0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008df4:	4610      	mov	r0, r2
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8008df8:	2202      	movs	r2, #2
}
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	40012c00 	.word	0x40012c00

08008e04 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d051      	beq.n	8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8008e0c:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e0e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e10:	4d28      	ldr	r5, [pc, #160]	; (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008e12:	2302      	movs	r3, #2
 8008e14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e18:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008e1a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008e1c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e1e:	d03b      	beq.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008e20:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008e24:	42aa      	cmp	r2, r5
 8008e26:	d032      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008e28:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008e2c:	42aa      	cmp	r2, r5
 8008e2e:	d02e      	beq.n	8008e8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e30:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e3a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e3c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008e40:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e42:	d016      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008e44:	4b1c      	ldr	r3, [pc, #112]	; (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d013      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d00f      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d00b      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008e5a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d007      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008e62:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d003      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d104      	bne.n	8008e7c <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e72:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e74:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e78:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e7a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008e7c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008e84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008e88:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008e8a:	4618      	mov	r0, r3
}
 8008e8c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e8e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e94:	432b      	orrs	r3, r5
 8008e96:	e7cb      	b.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8008e98:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e9e:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ea0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ea4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eaa:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008eac:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eae:	e7e0      	b.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008eb0:	2002      	movs	r0, #2
}
 8008eb2:	4770      	bx	lr
 8008eb4:	40012c00 	.word	0x40012c00
 8008eb8:	40000400 	.word	0x40000400

08008ebc <HAL_TIMEx_CommutCallback>:
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop

08008ec0 <HAL_TIMEx_BreakCallback>:
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <HAL_TIMEx_Break2Callback>:
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop

08008ec8 <HAL_TIMEx_EncoderIndexCallback>:
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop

08008ecc <HAL_TIMEx_DirectionChangeCallback>:
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop

08008ed0 <HAL_TIMEx_IndexErrorCallback>:
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop

08008ed4 <HAL_TIMEx_TransitionErrorCallback>:
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop

08008ed8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eda:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8008ede:	2e20      	cmp	r6, #32
 8008ee0:	d141      	bne.n	8008f66 <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee2:	2900      	cmp	r1, #0
 8008ee4:	d03d      	beq.n	8008f62 <HAL_UART_Transmit_DMA+0x8a>
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	d03b      	beq.n	8008f62 <HAL_UART_Transmit_DMA+0x8a>
 8008eea:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008eec:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8008ef0:	2801      	cmp	r0, #1
 8008ef2:	d038      	beq.n	8008f66 <HAL_UART_Transmit_DMA+0x8e>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8008ef4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8008ef6:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efa:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8008efc:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008efe:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f00:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 8008f04:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008f06:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 8008f0a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f0e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8008f12:	b190      	cbz	r0, 8008f3a <HAL_UART_Transmit_DMA+0x62>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f14:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008f7c <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f18:	6387      	str	r7, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f1e:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f22:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8008f80 <HAL_UART_Transmit_DMA+0xa8>
 8008f26:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f2a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8008f84 <HAL_UART_Transmit_DMA+0xac>
 8008f2e:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008f32:	3228      	adds	r2, #40	; 0x28
 8008f34:	f7fd faf4 	bl	8006520 <HAL_DMA_Start_IT>
 8008f38:	b9b8      	cbnz	r0, 8008f6a <HAL_UART_Transmit_DMA+0x92>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 8008f3e:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008f40:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8008f42:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	f102 0308 	add.w	r3, r2, #8
 8008f4a:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	f102 0008 	add.w	r0, r2, #8
 8008f56:	e840 3100 	strex	r1, r3, [r0]
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	d1f3      	bne.n	8008f46 <HAL_UART_Transmit_DMA+0x6e>

    return HAL_OK;
 8008f5e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008f62:	2001      	movs	r0, #1
}
 8008f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008f66:	2002      	movs	r0, #2
}
 8008f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f6a:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8008f6c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f70:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 8008f74:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8008f76:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8008f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f7c:	08008f89 	.word	0x08008f89
 8008f80:	08008fd1 	.word	0x08008fd1
 8008f84:	08008fe5 	.word	0x08008fe5

08008f88 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f88:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f8a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f013 0320 	ands.w	r3, r3, #32
 8008f94:	d117      	bne.n	8008fc6 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8008f96:	6802      	ldr	r2, [r0, #0]
 8008f98:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	f102 0308 	add.w	r3, r2, #8
 8008fa0:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	f102 0008 	add.w	r0, r2, #8
 8008fac:	e840 3100 	strex	r1, r3, [r0]
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	d1f3      	bne.n	8008f9c <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	e842 3100 	strex	r1, r3, [r2]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	d1f7      	bne.n	8008fb4 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fc4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008fc6:	f7fb faf1 	bl	80045ac <HAL_UART_TxCpltCallback>
}
 8008fca:	bd08      	pop	{r3, pc}

08008fcc <HAL_UART_TxHalfCpltCallback>:
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop

08008fd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fd0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008fd2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008fd4:	f7ff fffa 	bl	8008fcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fd8:	bd08      	pop	{r3, pc}
 8008fda:	bf00      	nop

08008fdc <HAL_UART_RxHalfCpltCallback>:
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop

08008fe0 <HAL_UART_ErrorCallback>:
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop

08008fe4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fe4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fe6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fe8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 8008fec:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008fee:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	0612      	lsls	r2, r2, #24
 8008ff6:	d501      	bpl.n	8008ffc <UART_DMAError+0x18>
 8008ff8:	2921      	cmp	r1, #33	; 0x21
 8008ffa:	d00d      	beq.n	8009018 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	0652      	lsls	r2, r2, #25
 8009000:	d501      	bpl.n	8009006 <UART_DMAError+0x22>
 8009002:	2c22      	cmp	r4, #34	; 0x22
 8009004:	d023      	beq.n	800904e <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009006:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800900a:	f043 0310 	orr.w	r3, r3, #16
 800900e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009012:	f7ff ffe5 	bl	8008fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009016:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8009018:	2200      	movs	r2, #0
 800901a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009022:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	e843 2100 	strex	r1, r2, [r3]
 800902a:	2900      	cmp	r1, #0
 800902c:	d1f7      	bne.n	800901e <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	f103 0208 	add.w	r2, r3, #8
 8009032:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009036:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	f103 0c08 	add.w	ip, r3, #8
 800903e:	e84c 2100 	strex	r1, r2, [ip]
 8009042:	2900      	cmp	r1, #0
 8009044:	d1f3      	bne.n	800902e <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8009046:	2220      	movs	r2, #32
 8009048:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 800904c:	e7d6      	b.n	8008ffc <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800904e:	2200      	movs	r2, #0
 8009050:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009058:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	e843 2100 	strex	r1, r2, [r3]
 8009060:	2900      	cmp	r1, #0
 8009062:	d1f7      	bne.n	8009054 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009064:	4c13      	ldr	r4, [pc, #76]	; (80090b4 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	f103 0208 	add.w	r2, r3, #8
 800906a:	e852 2f00 	ldrex	r2, [r2]
 800906e:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	f103 0c08 	add.w	ip, r3, #8
 8009074:	e84c 2100 	strex	r1, r2, [ip]
 8009078:	2900      	cmp	r1, #0
 800907a:	d1f4      	bne.n	8009066 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800907c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800907e:	2a01      	cmp	r2, #1
 8009080:	d006      	beq.n	8009090 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009082:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009084:	2220      	movs	r2, #32
 8009086:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 800908a:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800908e:	e7ba      	b.n	8009006 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009094:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	e843 2100 	strex	r1, r2, [r3]
 800909c:	2900      	cmp	r1, #0
 800909e:	d0f0      	beq.n	8009082 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	e853 2f00 	ldrex	r2, [r3]
 80090a4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	e843 2100 	strex	r1, r2, [r3]
 80090ac:	2900      	cmp	r1, #0
 80090ae:	d1ef      	bne.n	8009090 <UART_DMAError+0xac>
 80090b0:	e7e7      	b.n	8009082 <UART_DMAError+0x9e>
 80090b2:	bf00      	nop
 80090b4:	effffffe 	.word	0xeffffffe

080090b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80090c2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090c6:	f7ff ff8b 	bl	8008fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ca:	bd08      	pop	{r3, pc}

080090cc <HAL_UARTEx_RxEventCallback>:
}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop

080090d0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090d0:	6803      	ldr	r3, [r0, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090d4:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090d6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80090da:	ea12 0f0c 	tst.w	r2, ip
{
 80090de:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090e0:	689d      	ldr	r5, [r3, #8]
{
 80090e2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80090e4:	f000 80eb 	beq.w	80092be <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090e8:	489a      	ldr	r0, [pc, #616]	; (8009354 <HAL_UART_IRQHandler+0x284>)
 80090ea:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090ee:	489a      	ldr	r0, [pc, #616]	; (8009358 <HAL_UART_IRQHandler+0x288>)
 80090f0:	4008      	ands	r0, r1
 80090f2:	ea50 000c 	orrs.w	r0, r0, ip
 80090f6:	d155      	bne.n	80091a4 <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80090fa:	2801      	cmp	r0, #1
 80090fc:	d022      	beq.n	8009144 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090fe:	02d6      	lsls	r6, r2, #11
 8009100:	d502      	bpl.n	8009108 <HAL_UART_IRQHandler+0x38>
 8009102:	0268      	lsls	r0, r5, #9
 8009104:	f100 8104 	bmi.w	8009310 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009108:	0616      	lsls	r6, r2, #24
 800910a:	d506      	bpl.n	800911a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800910c:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009110:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009114:	4328      	orrs	r0, r5
 8009116:	f040 80f3 	bne.w	8009300 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800911a:	0650      	lsls	r0, r2, #25
 800911c:	d534      	bpl.n	8009188 <HAL_UART_IRQHandler+0xb8>
 800911e:	064e      	lsls	r6, r1, #25
 8009120:	d532      	bpl.n	8009188 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	e843 2100 	strex	r1, r2, [r3]
 800912e:	2900      	cmp	r1, #0
 8009130:	d1f7      	bne.n	8009122 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009132:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009134:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009136:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800913a:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800913c:	4620      	mov	r0, r4
 800913e:	f7fb fa35 	bl	80045ac <HAL_UART_TxCpltCallback>
}
 8009142:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009144:	06d6      	lsls	r6, r2, #27
 8009146:	d5da      	bpl.n	80090fe <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009148:	06c8      	lsls	r0, r1, #27
 800914a:	d5d8      	bpl.n	80090fe <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914c:	2210      	movs	r2, #16
 800914e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	0651      	lsls	r1, r2, #25
 8009154:	f140 8106 	bpl.w	8009364 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009158:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800915a:	6801      	ldr	r1, [r0, #0]
 800915c:	684a      	ldr	r2, [r1, #4]
 800915e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009160:	2a00      	cmp	r2, #0
 8009162:	d0ee      	beq.n	8009142 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009164:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009168:	4295      	cmp	r5, r2
 800916a:	d9ea      	bls.n	8009142 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800916c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009170:	680a      	ldr	r2, [r1, #0]
 8009172:	0692      	lsls	r2, r2, #26
 8009174:	f140 812b 	bpl.w	80093ce <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009178:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800917c:	1ae9      	subs	r1, r5, r3
 800917e:	4620      	mov	r0, r4
 8009180:	b289      	uxth	r1, r1
 8009182:	f7ff ffa3 	bl	80090cc <HAL_UARTEx_RxEventCallback>
}
 8009186:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009188:	0215      	lsls	r5, r2, #8
 800918a:	d502      	bpl.n	8009192 <HAL_UART_IRQHandler+0xc2>
 800918c:	0048      	lsls	r0, r1, #1
 800918e:	f100 80dc 	bmi.w	800934a <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009192:	01d3      	lsls	r3, r2, #7
 8009194:	d5d5      	bpl.n	8009142 <HAL_UART_IRQHandler+0x72>
 8009196:	2900      	cmp	r1, #0
 8009198:	dad3      	bge.n	8009142 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800919a:	4620      	mov	r0, r4
}
 800919c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091a0:	f000 bdb4 	b.w	8009d0c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091a4:	07d0      	lsls	r0, r2, #31
 80091a6:	d509      	bpl.n	80091bc <HAL_UART_IRQHandler+0xec>
 80091a8:	05ce      	lsls	r6, r1, #23
 80091aa:	d507      	bpl.n	80091bc <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091ac:	2001      	movs	r0, #1
 80091ae:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091b0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80091b4:	f040 0001 	orr.w	r0, r0, #1
 80091b8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091bc:	0790      	lsls	r0, r2, #30
 80091be:	f140 8090 	bpl.w	80092e2 <HAL_UART_IRQHandler+0x212>
 80091c2:	07ee      	lsls	r6, r5, #31
 80091c4:	d50a      	bpl.n	80091dc <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091c6:	2002      	movs	r0, #2
 80091c8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80091ce:	f040 0004 	orr.w	r0, r0, #4
 80091d2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d6:	0750      	lsls	r0, r2, #29
 80091d8:	f100 8089 	bmi.w	80092ee <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091dc:	0716      	lsls	r6, r2, #28
 80091de:	d50c      	bpl.n	80091fa <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091e0:	f001 0020 	and.w	r0, r1, #32
 80091e4:	ea50 000c 	orrs.w	r0, r0, ip
 80091e8:	d007      	beq.n	80091fa <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091ea:	2008      	movs	r0, #8
 80091ec:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091ee:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80091f2:	f040 0008 	orr.w	r0, r0, #8
 80091f6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091fa:	0510      	lsls	r0, r2, #20
 80091fc:	d50a      	bpl.n	8009214 <HAL_UART_IRQHandler+0x144>
 80091fe:	014e      	lsls	r6, r1, #5
 8009200:	d508      	bpl.n	8009214 <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009202:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009206:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009208:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800920c:	f040 0020 	orr.w	r0, r0, #32
 8009210:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009214:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009218:	2800      	cmp	r0, #0
 800921a:	d092      	beq.n	8009142 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800921c:	0690      	lsls	r0, r2, #26
 800921e:	d50a      	bpl.n	8009236 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009220:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009224:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8009228:	4329      	orrs	r1, r5
 800922a:	d004      	beq.n	8009236 <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 800922c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800922e:	b112      	cbz	r2, 8009236 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8009230:	4620      	mov	r0, r4
 8009232:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009234:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8009236:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800923a:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800923c:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009240:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009244:	ea52 0501 	orrs.w	r5, r2, r1
 8009248:	f000 80f2 	beq.w	8009430 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009250:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	e843 2100 	strex	r1, r2, [r3]
 8009258:	2900      	cmp	r1, #0
 800925a:	d1f7      	bne.n	800924c <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800925c:	483f      	ldr	r0, [pc, #252]	; (800935c <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	f103 0208 	add.w	r2, r3, #8
 8009262:	e852 2f00 	ldrex	r2, [r2]
 8009266:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	f103 0508 	add.w	r5, r3, #8
 800926c:	e845 2100 	strex	r1, r2, [r5]
 8009270:	2900      	cmp	r1, #0
 8009272:	d1f4      	bne.n	800925e <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009274:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009276:	2a01      	cmp	r2, #1
 8009278:	d052      	beq.n	8009320 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800927c:	2120      	movs	r1, #32
 800927e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009282:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009284:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8009286:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009288:	064a      	lsls	r2, r1, #25
 800928a:	d55a      	bpl.n	8009342 <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	f103 0208 	add.w	r2, r3, #8
 8009290:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	f103 0008 	add.w	r0, r3, #8
 800929c:	e840 2100 	strex	r1, r2, [r0]
 80092a0:	2900      	cmp	r1, #0
 80092a2:	d1f3      	bne.n	800928c <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 80092a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d04b      	beq.n	8009342 <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092aa:	4b2d      	ldr	r3, [pc, #180]	; (8009360 <HAL_UART_IRQHandler+0x290>)
 80092ac:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092ae:	f7fd f9cb 	bl	8006648 <HAL_DMA_Abort_IT>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	f43f af45 	beq.w	8009142 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092b8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80092ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80092bc:	e00e      	b.n	80092dc <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092be:	0696      	lsls	r6, r2, #26
 80092c0:	f57f af1a 	bpl.w	80090f8 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092c4:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092c8:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 80092cc:	ea5c 0c0e 	orrs.w	ip, ip, lr
 80092d0:	f43f af12 	beq.w	80090f8 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 80092d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f43f af33 	beq.w	8009142 <HAL_UART_IRQHandler+0x72>
}
 80092dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092e0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e2:	0756      	lsls	r6, r2, #29
 80092e4:	f57f af7a 	bpl.w	80091dc <HAL_UART_IRQHandler+0x10c>
 80092e8:	07e8      	lsls	r0, r5, #31
 80092ea:	f57f af77 	bpl.w	80091dc <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092ee:	2004      	movs	r0, #4
 80092f0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092f2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80092f6:	f040 0002 	orr.w	r0, r0, #2
 80092fa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 80092fe:	e76d      	b.n	80091dc <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 8009300:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009302:	2b00      	cmp	r3, #0
 8009304:	f43f af1d 	beq.w	8009142 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8009308:	4620      	mov	r0, r4
}
 800930a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800930e:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009310:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8009314:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009316:	621a      	str	r2, [r3, #32]
}
 8009318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800931c:	f000 bcf4 	b.w	8009d08 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009324:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	e843 2100 	strex	r1, r2, [r3]
 800932c:	2900      	cmp	r1, #0
 800932e:	d0a4      	beq.n	800927a <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	e853 2f00 	ldrex	r2, [r3]
 8009334:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	e843 2100 	strex	r1, r2, [r3]
 800933c:	2900      	cmp	r1, #0
 800933e:	d1ef      	bne.n	8009320 <HAL_UART_IRQHandler+0x250>
 8009340:	e79b      	b.n	800927a <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff fe4c 	bl	8008fe0 <HAL_UART_ErrorCallback>
}
 8009348:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800934a:	4620      	mov	r0, r4
}
 800934c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009350:	f000 bcde 	b.w	8009d10 <HAL_UARTEx_TxFifoEmptyCallback>
 8009354:	10000001 	.word	0x10000001
 8009358:	04000120 	.word	0x04000120
 800935c:	effffffe 	.word	0xeffffffe
 8009360:	080090b9 	.word	0x080090b9
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009364:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8009368:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800936c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8009370:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009372:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8009374:	2a00      	cmp	r2, #0
 8009376:	f43f aee4 	beq.w	8009142 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800937a:	1a41      	subs	r1, r0, r1
 800937c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800937e:	2900      	cmp	r1, #0
 8009380:	f43f aedf 	beq.w	8009142 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009388:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	e843 2000 	strex	r0, r2, [r3]
 8009390:	2800      	cmp	r0, #0
 8009392:	d1f7      	bne.n	8009384 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009394:	4d29      	ldr	r5, [pc, #164]	; (800943c <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	f103 0208 	add.w	r2, r3, #8
 800939a:	e852 2f00 	ldrex	r2, [r2]
 800939e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	f103 0c08 	add.w	ip, r3, #8
 80093a4:	e84c 2000 	strex	r0, r2, [ip]
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d1f4      	bne.n	8009396 <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 80093ac:	2220      	movs	r2, #32
 80093ae:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80093b2:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	e843 2000 	strex	r0, r2, [r3]
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d1f7      	bne.n	80093b6 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7ff fe80 	bl	80090cc <HAL_UARTEx_RxEventCallback>
}
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	e843 2100 	strex	r1, r2, [r3]
 80093da:	2900      	cmp	r1, #0
 80093dc:	d1f7      	bne.n	80093ce <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	f103 0208 	add.w	r2, r3, #8
 80093e2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	f103 0508 	add.w	r5, r3, #8
 80093ee:	e845 2100 	strex	r1, r2, [r5]
 80093f2:	2900      	cmp	r1, #0
 80093f4:	d1f3      	bne.n	80093de <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	f103 0208 	add.w	r2, r3, #8
 80093fa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	f103 0508 	add.w	r5, r3, #8
 8009406:	e845 2100 	strex	r1, r2, [r5]
 800940a:	2900      	cmp	r1, #0
 800940c:	d1f3      	bne.n	80093f6 <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 800940e:	2220      	movs	r2, #32
 8009410:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009414:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	e843 2100 	strex	r1, r2, [r3]
 8009422:	2900      	cmp	r1, #0
 8009424:	d1f7      	bne.n	8009416 <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009426:	f7fd f8d5 	bl	80065d4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800942a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800942e:	e6a3      	b.n	8009178 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8009430:	4620      	mov	r0, r4
 8009432:	f7ff fdd5 	bl	8008fe0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009436:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	effffffe 	.word	0xeffffffe

08009440 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009440:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8009442:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009444:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009446:	2b01      	cmp	r3, #1
 8009448:	d002      	beq.n	8009450 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800944a:	f7ff fdc7 	bl	8008fdc <HAL_UART_RxHalfCpltCallback>
}
 800944e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009450:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009454:	0849      	lsrs	r1, r1, #1
 8009456:	f7ff fe39 	bl	80090cc <HAL_UARTEx_RxEventCallback>
}
 800945a:	bd08      	pop	{r3, pc}

0800945c <UART_DMAReceiveCplt>:
{
 800945c:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800945e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009460:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	f012 0220 	ands.w	r2, r2, #32
 8009468:	d128      	bne.n	80094bc <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 800946a:	6803      	ldr	r3, [r0, #0]
 800946c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009478:	e843 2100 	strex	r1, r2, [r3]
 800947c:	2900      	cmp	r1, #0
 800947e:	d1f7      	bne.n	8009470 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	f103 0208 	add.w	r2, r3, #8
 8009484:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009488:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	f103 0c08 	add.w	ip, r3, #8
 8009490:	e84c 2100 	strex	r1, r2, [ip]
 8009494:	2900      	cmp	r1, #0
 8009496:	d1f3      	bne.n	8009480 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	f103 0208 	add.w	r2, r3, #8
 800949c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	f103 0c08 	add.w	ip, r3, #8
 80094a8:	e84c 2100 	strex	r1, r2, [ip]
 80094ac:	2900      	cmp	r1, #0
 80094ae:	d1f3      	bne.n	8009498 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80094b8:	2a01      	cmp	r2, #1
 80094ba:	d005      	beq.n	80094c8 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094bc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d013      	beq.n	80094ea <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80094c2:	f7fa ff41 	bl	8004348 <HAL_UART_RxCpltCallback>
}
 80094c6:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	e843 2100 	strex	r1, r2, [r3]
 80094d4:	2900      	cmp	r1, #0
 80094d6:	d0f1      	beq.n	80094bc <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	e853 2f00 	ldrex	r2, [r3]
 80094dc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	e843 2100 	strex	r1, r2, [r3]
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d1ef      	bne.n	80094c8 <UART_DMAReceiveCplt+0x6c>
 80094e8:	e7e8      	b.n	80094bc <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ea:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80094ee:	f7ff fded 	bl	80090cc <HAL_UARTEx_RxEventCallback>
}
 80094f2:	bd08      	pop	{r3, pc}

080094f4 <UART_SetConfig>:
{
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80094f8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094fa:	6882      	ldr	r2, [r0, #8]
 80094fc:	6900      	ldr	r0, [r0, #16]
 80094fe:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009500:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009502:	4302      	orrs	r2, r0
 8009504:	430a      	orrs	r2, r1
 8009506:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009508:	49b2      	ldr	r1, [pc, #712]	; (80097d4 <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800950a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800950c:	4029      	ands	r1, r5
 800950e:	430a      	orrs	r2, r1
 8009510:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	68e1      	ldr	r1, [r4, #12]
 8009516:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800951a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800951c:	49ae      	ldr	r1, [pc, #696]	; (80097d8 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800951e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009520:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009522:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009524:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009526:	f000 8081 	beq.w	800962c <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 800952a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800952c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009530:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8009534:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009536:	430a      	orrs	r2, r1
 8009538:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800953e:	f022 020f 	bic.w	r2, r2, #15
 8009542:	430a      	orrs	r2, r1
 8009544:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009546:	4aa5      	ldr	r2, [pc, #660]	; (80097dc <UART_SetConfig+0x2e8>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d027      	beq.n	800959c <UART_SetConfig+0xa8>
 800954c:	4aa4      	ldr	r2, [pc, #656]	; (80097e0 <UART_SetConfig+0x2ec>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d04b      	beq.n	80095ea <UART_SetConfig+0xf6>
 8009552:	4aa4      	ldr	r2, [pc, #656]	; (80097e4 <UART_SetConfig+0x2f0>)
 8009554:	4293      	cmp	r3, r2
 8009556:	f000 8111 	beq.w	800977c <UART_SetConfig+0x288>
 800955a:	4aa3      	ldr	r2, [pc, #652]	; (80097e8 <UART_SetConfig+0x2f4>)
 800955c:	4293      	cmp	r3, r2
 800955e:	f000 80b9 	beq.w	80096d4 <UART_SetConfig+0x1e0>
 8009562:	4aa2      	ldr	r2, [pc, #648]	; (80097ec <UART_SetConfig+0x2f8>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d111      	bne.n	800958c <UART_SetConfig+0x98>
 8009568:	4ba1      	ldr	r3, [pc, #644]	; (80097f0 <UART_SetConfig+0x2fc>)
 800956a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009576:	f000 8126 	beq.w	80097c6 <UART_SetConfig+0x2d2>
 800957a:	f200 80d5 	bhi.w	8009728 <UART_SetConfig+0x234>
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 80d9 	beq.w	8009736 <UART_SetConfig+0x242>
 8009584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009588:	f000 80b0 	beq.w	80096ec <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 800958c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800958e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009590:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8009594:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009598:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800959a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800959c:	4b94      	ldr	r3, [pc, #592]	; (80097f0 <UART_SetConfig+0x2fc>)
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	f240 808d 	bls.w	80096c8 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80095b2:	f000 8103 	beq.w	80097bc <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80095b6:	f7fe fa0b 	bl	80079d0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f000 80dc 	beq.w	8009778 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095c2:	6862      	ldr	r2, [r4, #4]
 80095c4:	4b8b      	ldr	r3, [pc, #556]	; (80097f4 <UART_SetConfig+0x300>)
 80095c6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80095ca:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ce:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095d2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80095d6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095da:	f1a3 0210 	sub.w	r2, r3, #16
 80095de:	428a      	cmp	r2, r1
 80095e0:	d8d4      	bhi.n	800958c <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	2000      	movs	r0, #0
 80095e6:	60d3      	str	r3, [r2, #12]
 80095e8:	e7d1      	b.n	800958e <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095ea:	4b81      	ldr	r3, [pc, #516]	; (80097f0 <UART_SetConfig+0x2fc>)
 80095ec:	4a82      	ldr	r2, [pc, #520]	; (80097f8 <UART_SetConfig+0x304>)
 80095ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f2:	f003 030c 	and.w	r3, r3, #12
 80095f6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80095fc:	d07c      	beq.n	80096f8 <UART_SetConfig+0x204>
    switch (clocksource)
 80095fe:	2b08      	cmp	r3, #8
 8009600:	d8c4      	bhi.n	800958c <UART_SetConfig+0x98>
 8009602:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <UART_SetConfig+0x114>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009731 	.word	0x08009731
 800960c:	080095b7 	.word	0x080095b7
 8009610:	080097b3 	.word	0x080097b3
 8009614:	0800958d 	.word	0x0800958d
 8009618:	080096f3 	.word	0x080096f3
 800961c:	0800958d 	.word	0x0800958d
 8009620:	0800958d 	.word	0x0800958d
 8009624:	0800958d 	.word	0x0800958d
 8009628:	080097a3 	.word	0x080097a3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800962c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009630:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009634:	4311      	orrs	r1, r2
 8009636:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800963c:	486c      	ldr	r0, [pc, #432]	; (80097f0 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800963e:	f022 020f 	bic.w	r2, r2, #15
 8009642:	430a      	orrs	r2, r1
 8009644:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009646:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800964a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800964e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009652:	f000 80ac 	beq.w	80097ae <UART_SetConfig+0x2ba>
 8009656:	d80b      	bhi.n	8009670 <UART_SetConfig+0x17c>
 8009658:	2b00      	cmp	r3, #0
 800965a:	d038      	beq.n	80096ce <UART_SetConfig+0x1da>
 800965c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009660:	d194      	bne.n	800958c <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8009662:	f7fe f867 	bl	8007734 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009666:	2800      	cmp	r0, #0
 8009668:	f000 8086 	beq.w	8009778 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800966c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800966e:	e004      	b.n	800967a <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009674:	d18a      	bne.n	800958c <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8009676:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800967a:	4b5e      	ldr	r3, [pc, #376]	; (80097f4 <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800967c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800967e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8009682:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009686:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800968a:	4299      	cmp	r1, r3
 800968c:	f63f af7e 	bhi.w	800958c <UART_SetConfig+0x98>
 8009690:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009694:	f63f af7a 	bhi.w	800958c <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009698:	2300      	movs	r3, #0
 800969a:	4619      	mov	r1, r3
 800969c:	f7f7 fb1c 	bl	8000cd8 <__aeabi_uldivmod>
 80096a0:	086a      	lsrs	r2, r5, #1
 80096a2:	0203      	lsls	r3, r0, #8
 80096a4:	0209      	lsls	r1, r1, #8
 80096a6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80096aa:	1898      	adds	r0, r3, r2
 80096ac:	f141 0100 	adc.w	r1, r1, #0
 80096b0:	462a      	mov	r2, r5
 80096b2:	2300      	movs	r3, #0
 80096b4:	f7f7 fb10 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096b8:	4a50      	ldr	r2, [pc, #320]	; (80097fc <UART_SetConfig+0x308>)
 80096ba:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80096be:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096c0:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096c2:	f63f af63 	bhi.w	800958c <UART_SetConfig+0x98>
 80096c6:	e78c      	b.n	80095e2 <UART_SetConfig+0xee>
 80096c8:	4a4d      	ldr	r2, [pc, #308]	; (8009800 <UART_SetConfig+0x30c>)
 80096ca:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80096cc:	e794      	b.n	80095f8 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 80096ce:	f7fe f96d 	bl	80079ac <HAL_RCC_GetPCLK1Freq>
        break;
 80096d2:	e7c8      	b.n	8009666 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096d4:	4b46      	ldr	r3, [pc, #280]	; (80097f0 <UART_SetConfig+0x2fc>)
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096de:	2b80      	cmp	r3, #128	; 0x80
 80096e0:	d071      	beq.n	80097c6 <UART_SetConfig+0x2d2>
 80096e2:	d861      	bhi.n	80097a8 <UART_SetConfig+0x2b4>
 80096e4:	b33b      	cbz	r3, 8009736 <UART_SetConfig+0x242>
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	f47f af50 	bne.w	800958c <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80096f0:	d061      	beq.n	80097b6 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 80096f2:	f7fe f81f 	bl	8007734 <HAL_RCC_GetSysClockFreq>
        break;
 80096f6:	e760      	b.n	80095ba <UART_SetConfig+0xc6>
    switch (clocksource)
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	f63f af47 	bhi.w	800958c <UART_SetConfig+0x98>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <UART_SetConfig+0x210>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	0800973d 	.word	0x0800973d
 8009708:	080097bd 	.word	0x080097bd
 800970c:	080097c3 	.word	0x080097c3
 8009710:	0800958d 	.word	0x0800958d
 8009714:	080097b7 	.word	0x080097b7
 8009718:	0800958d 	.word	0x0800958d
 800971c:	0800958d 	.word	0x0800958d
 8009720:	0800958d 	.word	0x0800958d
 8009724:	08009745 	.word	0x08009745
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800972c:	d036      	beq.n	800979c <UART_SetConfig+0x2a8>
 800972e:	e72d      	b.n	800958c <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009730:	f7fe f93c 	bl	80079ac <HAL_RCC_GetPCLK1Freq>
        break;
 8009734:	e741      	b.n	80095ba <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009736:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800973a:	d1f9      	bne.n	8009730 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800973c:	f7fe f936 	bl	80079ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009740:	b1d0      	cbz	r0, 8009778 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009742:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009744:	6862      	ldr	r2, [r4, #4]
 8009746:	4b2b      	ldr	r3, [pc, #172]	; (80097f4 <UART_SetConfig+0x300>)
 8009748:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800974c:	fbb0 f0f1 	udiv	r0, r0, r1
 8009750:	0853      	lsrs	r3, r2, #1
 8009752:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009756:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800975a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800975e:	f1a3 0210 	sub.w	r2, r3, #16
 8009762:	428a      	cmp	r2, r1
 8009764:	f63f af12 	bhi.w	800958c <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009768:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800976c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800976e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009770:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009774:	4313      	orrs	r3, r2
 8009776:	60cb      	str	r3, [r1, #12]
 8009778:	2000      	movs	r0, #0
 800977a:	e708      	b.n	800958e <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800977c:	4b1c      	ldr	r3, [pc, #112]	; (80097f0 <UART_SetConfig+0x2fc>)
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009786:	2b20      	cmp	r3, #32
 8009788:	d01d      	beq.n	80097c6 <UART_SetConfig+0x2d2>
 800978a:	d804      	bhi.n	8009796 <UART_SetConfig+0x2a2>
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0d2      	beq.n	8009736 <UART_SetConfig+0x242>
 8009790:	2b10      	cmp	r3, #16
 8009792:	d0ab      	beq.n	80096ec <UART_SetConfig+0x1f8>
 8009794:	e6fa      	b.n	800958c <UART_SetConfig+0x98>
 8009796:	2b30      	cmp	r3, #48	; 0x30
 8009798:	f47f aef8 	bne.w	800958c <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800979c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80097a0:	d0d0      	beq.n	8009744 <UART_SetConfig+0x250>
    switch (clocksource)
 80097a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80097a6:	e70c      	b.n	80095c2 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097a8:	2bc0      	cmp	r3, #192	; 0xc0
 80097aa:	d0f7      	beq.n	800979c <UART_SetConfig+0x2a8>
 80097ac:	e6ee      	b.n	800958c <UART_SetConfig+0x98>
 80097ae:	4815      	ldr	r0, [pc, #84]	; (8009804 <UART_SetConfig+0x310>)
 80097b0:	e763      	b.n	800967a <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 80097b2:	4814      	ldr	r0, [pc, #80]	; (8009804 <UART_SetConfig+0x310>)
 80097b4:	e705      	b.n	80095c2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80097b6:	f7fd ffbd 	bl	8007734 <HAL_RCC_GetSysClockFreq>
        break;
 80097ba:	e7c1      	b.n	8009740 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80097bc:	f7fe f908 	bl	80079d0 <HAL_RCC_GetPCLK2Freq>
        break;
 80097c0:	e7be      	b.n	8009740 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 80097c2:	4810      	ldr	r0, [pc, #64]	; (8009804 <UART_SetConfig+0x310>)
 80097c4:	e7be      	b.n	8009744 <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80097ca:	480e      	ldr	r0, [pc, #56]	; (8009804 <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097cc:	f47f aef9 	bne.w	80095c2 <UART_SetConfig+0xce>
 80097d0:	e7b8      	b.n	8009744 <UART_SetConfig+0x250>
 80097d2:	bf00      	nop
 80097d4:	cfff69f3 	.word	0xcfff69f3
 80097d8:	40008000 	.word	0x40008000
 80097dc:	40013800 	.word	0x40013800
 80097e0:	40004400 	.word	0x40004400
 80097e4:	40004800 	.word	0x40004800
 80097e8:	40004c00 	.word	0x40004c00
 80097ec:	40005000 	.word	0x40005000
 80097f0:	40021000 	.word	0x40021000
 80097f4:	0800cbc4 	.word	0x0800cbc4
 80097f8:	0800cbb4 	.word	0x0800cbb4
 80097fc:	000ffcff 	.word	0x000ffcff
 8009800:	0800cbb0 	.word	0x0800cbb0
 8009804:	00f42400 	.word	0x00f42400

08009808 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009808:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800980a:	07da      	lsls	r2, r3, #31
{
 800980c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800980e:	d506      	bpl.n	800981e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009810:	6801      	ldr	r1, [r0, #0]
 8009812:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009814:	684a      	ldr	r2, [r1, #4]
 8009816:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800981a:	4322      	orrs	r2, r4
 800981c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800981e:	079c      	lsls	r4, r3, #30
 8009820:	d506      	bpl.n	8009830 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009822:	6801      	ldr	r1, [r0, #0]
 8009824:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009826:	684a      	ldr	r2, [r1, #4]
 8009828:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800982c:	4322      	orrs	r2, r4
 800982e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009830:	0759      	lsls	r1, r3, #29
 8009832:	d506      	bpl.n	8009842 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009834:	6801      	ldr	r1, [r0, #0]
 8009836:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009838:	684a      	ldr	r2, [r1, #4]
 800983a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800983e:	4322      	orrs	r2, r4
 8009840:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009842:	071a      	lsls	r2, r3, #28
 8009844:	d506      	bpl.n	8009854 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009846:	6801      	ldr	r1, [r0, #0]
 8009848:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800984a:	684a      	ldr	r2, [r1, #4]
 800984c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009850:	4322      	orrs	r2, r4
 8009852:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009854:	06dc      	lsls	r4, r3, #27
 8009856:	d506      	bpl.n	8009866 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009858:	6801      	ldr	r1, [r0, #0]
 800985a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800985c:	688a      	ldr	r2, [r1, #8]
 800985e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009862:	4322      	orrs	r2, r4
 8009864:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009866:	0699      	lsls	r1, r3, #26
 8009868:	d506      	bpl.n	8009878 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800986a:	6801      	ldr	r1, [r0, #0]
 800986c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800986e:	688a      	ldr	r2, [r1, #8]
 8009870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009874:	4322      	orrs	r2, r4
 8009876:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009878:	065a      	lsls	r2, r3, #25
 800987a:	d509      	bpl.n	8009890 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800987c:	6801      	ldr	r1, [r0, #0]
 800987e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009880:	684a      	ldr	r2, [r1, #4]
 8009882:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009886:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009888:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800988c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800988e:	d00b      	beq.n	80098a8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009890:	061b      	lsls	r3, r3, #24
 8009892:	d506      	bpl.n	80098a2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009894:	6802      	ldr	r2, [r0, #0]
 8009896:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009898:	6853      	ldr	r3, [r2, #4]
 800989a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800989e:	430b      	orrs	r3, r1
 80098a0:	6053      	str	r3, [r2, #4]
}
 80098a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098a8:	684a      	ldr	r2, [r1, #4]
 80098aa:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80098ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80098b0:	4322      	orrs	r2, r4
 80098b2:	604a      	str	r2, [r1, #4]
 80098b4:	e7ec      	b.n	8009890 <UART_AdvFeatureConfig+0x88>
 80098b6:	bf00      	nop

080098b8 <UART_WaitOnFlagUntilTimeout>:
{
 80098b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c0:	6804      	ldr	r4, [r0, #0]
{
 80098c2:	4607      	mov	r7, r0
 80098c4:	460e      	mov	r6, r1
 80098c6:	4615      	mov	r5, r2
 80098c8:	4699      	mov	r9, r3
 80098ca:	f1b8 3fff 	cmp.w	r8, #4294967295
 80098ce:	d10a      	bne.n	80098e6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d0:	69e3      	ldr	r3, [r4, #28]
 80098d2:	ea36 0303 	bics.w	r3, r6, r3
 80098d6:	bf0c      	ite	eq
 80098d8:	2301      	moveq	r3, #1
 80098da:	2300      	movne	r3, #0
 80098dc:	429d      	cmp	r5, r3
 80098de:	d0f7      	beq.n	80098d0 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 80098e0:	2000      	movs	r0, #0
}
 80098e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e6:	69e2      	ldr	r2, [r4, #28]
 80098e8:	ea36 0202 	bics.w	r2, r6, r2
 80098ec:	bf0c      	ite	eq
 80098ee:	2301      	moveq	r3, #1
 80098f0:	2300      	movne	r3, #0
 80098f2:	42ab      	cmp	r3, r5
 80098f4:	d1f4      	bne.n	80098e0 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098f6:	f7f9 faf5 	bl	8002ee4 <HAL_GetTick>
 80098fa:	eba0 0009 	sub.w	r0, r0, r9
 80098fe:	4540      	cmp	r0, r8
 8009900:	d833      	bhi.n	800996a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009902:	f1b8 0f00 	cmp.w	r8, #0
 8009906:	d030      	beq.n	800996a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009908:	683c      	ldr	r4, [r7, #0]
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	0758      	lsls	r0, r3, #29
 800990e:	4622      	mov	r2, r4
 8009910:	d5db      	bpl.n	80098ca <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009912:	69e3      	ldr	r3, [r4, #28]
 8009914:	0519      	lsls	r1, r3, #20
 8009916:	d5d8      	bpl.n	80098ca <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800991c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009922:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	e844 3100 	strex	r1, r3, [r4]
 800992a:	b139      	cbz	r1, 800993c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	e852 3f00 	ldrex	r3, [r2]
 8009930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	e842 3100 	strex	r1, r3, [r2]
 8009938:	2900      	cmp	r1, #0
 800993a:	d1f7      	bne.n	800992c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	f102 0308 	add.w	r3, r2, #8
 8009940:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009944:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009948:	f102 0008 	add.w	r0, r2, #8
 800994c:	e840 3100 	strex	r1, r3, [r0]
 8009950:	2900      	cmp	r1, #0
 8009952:	d1f3      	bne.n	800993c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8009954:	2320      	movs	r3, #32
 8009956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800995a:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800995e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8009962:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009964:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009968:	e7bb      	b.n	80098e2 <UART_WaitOnFlagUntilTimeout+0x2a>
 800996a:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	e842 3100 	strex	r1, r3, [r2]
 8009978:	2900      	cmp	r1, #0
 800997a:	d1f7      	bne.n	800996c <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	f102 0308 	add.w	r3, r2, #8
 8009980:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009984:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	f102 0008 	add.w	r0, r2, #8
 800998c:	e840 3100 	strex	r1, r3, [r0]
 8009990:	2900      	cmp	r1, #0
 8009992:	d1f3      	bne.n	800997c <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8009994:	2320      	movs	r3, #32
 8009996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800999a:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800999e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80099a2:	2003      	movs	r0, #3
 80099a4:	e79d      	b.n	80098e2 <UART_WaitOnFlagUntilTimeout+0x2a>
 80099a6:	bf00      	nop

080099a8 <HAL_UART_Transmit>:
{
 80099a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099ac:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80099ae:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80099b2:	2820      	cmp	r0, #32
{
 80099b4:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80099b6:	f040 8090 	bne.w	8009ada <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 80099ba:	4689      	mov	r9, r1
 80099bc:	2900      	cmp	r1, #0
 80099be:	d048      	beq.n	8009a52 <HAL_UART_Transmit+0xaa>
 80099c0:	4614      	mov	r4, r2
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	d045      	beq.n	8009a52 <HAL_UART_Transmit+0xaa>
 80099c6:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80099c8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	f000 8084 	beq.w	8009ada <HAL_UART_Transmit+0x132>
 80099d2:	2301      	movs	r3, #1
 80099d4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d8:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099dc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099de:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099e2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 80099e6:	f7f9 fa7d 	bl	8002ee4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099ea:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80099ec:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80099f4:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 80099f8:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099fa:	d072      	beq.n	8009ae2 <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80099fc:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8009a00:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8009a02:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8009a04:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009a08:	b1b3      	cbz	r3, 8009a38 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a0a:	682c      	ldr	r4, [r5, #0]
 8009a0c:	1c71      	adds	r1, r6, #1
 8009a0e:	d124      	bne.n	8009a5a <HAL_UART_Transmit+0xb2>
 8009a10:	69e2      	ldr	r2, [r4, #28]
 8009a12:	0612      	lsls	r2, r2, #24
 8009a14:	d5fc      	bpl.n	8009a10 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 8009a16:	f1b9 0f00 	cmp.w	r9, #0
 8009a1a:	d059      	beq.n	8009ad0 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a1c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009a20:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8009a22:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8009a26:	3b01      	subs	r3, #1
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009a2e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e9      	bne.n	8009a0c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a38:	9600      	str	r6, [sp, #0]
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2140      	movs	r1, #64	; 0x40
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7ff ff39 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d171      	bne.n	8009b2e <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8009a4a:	2320      	movs	r3, #32
 8009a4c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8009a50:	e000      	b.n	8009a54 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8009a52:	2001      	movs	r0, #1
}
 8009a54:	b003      	add	sp, #12
 8009a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a5a:	69e3      	ldr	r3, [r4, #28]
 8009a5c:	061b      	lsls	r3, r3, #24
 8009a5e:	d4da      	bmi.n	8009a16 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a60:	f7f9 fa40 	bl	8002ee4 <HAL_GetTick>
 8009a64:	1bc0      	subs	r0, r0, r7
 8009a66:	4286      	cmp	r6, r0
 8009a68:	d341      	bcc.n	8009aee <HAL_UART_Transmit+0x146>
 8009a6a:	2e00      	cmp	r6, #0
 8009a6c:	d03f      	beq.n	8009aee <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a6e:	682c      	ldr	r4, [r5, #0]
 8009a70:	6822      	ldr	r2, [r4, #0]
 8009a72:	0752      	lsls	r2, r2, #29
 8009a74:	4623      	mov	r3, r4
 8009a76:	d5c9      	bpl.n	8009a0c <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a78:	69e2      	ldr	r2, [r4, #28]
 8009a7a:	0510      	lsls	r0, r2, #20
 8009a7c:	d5c6      	bpl.n	8009a0c <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a82:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	e844 2100 	strex	r1, r2, [r4]
 8009a90:	b139      	cbz	r1, 8009aa2 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	e853 2f00 	ldrex	r2, [r3]
 8009a96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	e843 2100 	strex	r1, r2, [r3]
 8009a9e:	2900      	cmp	r1, #0
 8009aa0:	d1f7      	bne.n	8009a92 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	f103 0208 	add.w	r2, r3, #8
 8009aa6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aaa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	f103 0008 	add.w	r0, r3, #8
 8009ab2:	e840 2100 	strex	r1, r2, [r0]
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	d1f3      	bne.n	8009aa2 <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8009aba:	2320      	movs	r3, #32
 8009abc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009ac0:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009ac4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8009ac8:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aca:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009ace:	e7c1      	b.n	8009a54 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ad0:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad8:	e7a2      	b.n	8009a20 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 8009ada:	2002      	movs	r0, #2
}
 8009adc:	b003      	add	sp, #12
 8009ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae2:	692b      	ldr	r3, [r5, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d189      	bne.n	80099fc <HAL_UART_Transmit+0x54>
 8009ae8:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8009aea:	4699      	mov	r9, r3
 8009aec:	e786      	b.n	80099fc <HAL_UART_Transmit+0x54>
 8009aee:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	e843 2100 	strex	r1, r2, [r3]
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d1f7      	bne.n	8009af0 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	f103 0208 	add.w	r2, r3, #8
 8009b04:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b08:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	f103 0008 	add.w	r0, r3, #8
 8009b10:	e840 2100 	strex	r1, r2, [r0]
 8009b14:	2900      	cmp	r1, #0
 8009b16:	d1f3      	bne.n	8009b00 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 8009b18:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8009b1a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8009b1c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009b20:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009b24:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8009b28:	b003      	add	sp, #12
 8009b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8009b2e:	2003      	movs	r0, #3
 8009b30:	e790      	b.n	8009a54 <HAL_UART_Transmit+0xac>
 8009b32:	bf00      	nop

08009b34 <HAL_UART_Init>:
  if (huart == NULL)
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d066      	beq.n	8009c06 <HAL_UART_Init+0xd2>
{
 8009b38:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8009b3a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8009b3e:	b082      	sub	sp, #8
 8009b40:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d04c      	beq.n	8009be0 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8009b46:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009b48:	2324      	movs	r3, #36	; 0x24
 8009b4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8009b4e:	6813      	ldr	r3, [r2, #0]
 8009b50:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b54:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009b56:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b58:	f7ff fccc 	bl	80094f4 <UART_SetConfig>
 8009b5c:	2801      	cmp	r0, #1
 8009b5e:	d03c      	beq.n	8009bda <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d135      	bne.n	8009bd2 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	6859      	ldr	r1, [r3, #4]
 8009b6a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8009b6e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b70:	6899      	ldr	r1, [r3, #8]
 8009b72:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8009b76:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009b78:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8009b7c:	f041 0101 	orr.w	r1, r1, #1
 8009b80:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b82:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009b86:	f7f9 f9ad 	bl	8002ee4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8009b90:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b92:	d40e      	bmi.n	8009bb2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	075b      	lsls	r3, r3, #29
 8009b98:	d427      	bmi.n	8009bea <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b9a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009ba2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009ba6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8009baa:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bac:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009bae:	b002      	add	sp, #8
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff fe79 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 8009bc6:	b9e0      	cbnz	r0, 8009c02 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	075b      	lsls	r3, r3, #29
 8009bce:	d40c      	bmi.n	8009bea <HAL_UART_Init+0xb6>
 8009bd0:	e7e3      	b.n	8009b9a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f7ff fe18 	bl	8009808 <UART_AdvFeatureConfig>
 8009bd8:	e7c5      	b.n	8009b66 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8009bda:	2001      	movs	r0, #1
}
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8009be0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009be4:	f7fb fc5a 	bl	800549c <HAL_UART_MspInit>
 8009be8:	e7ad      	b.n	8009b46 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4633      	mov	r3, r6
 8009bf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fe5d 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d0cb      	beq.n	8009b9a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8009c02:	2003      	movs	r0, #3
 8009c04:	e7d3      	b.n	8009bae <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8009c06:	2001      	movs	r0, #1
}
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop

08009c0c <UART_Start_Receive_DMA>:
{
 8009c0c:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c0e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c10:	2500      	movs	r5, #0
 8009c12:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 8009c16:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009c18:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8009c1a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c1e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8009c22:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009c24:	b168      	cbz	r0, 8009c42 <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c26:	4e20      	ldr	r6, [pc, #128]	; (8009ca8 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8009c28:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	460a      	mov	r2, r1
 8009c2e:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c30:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c32:	4e1e      	ldr	r6, [pc, #120]	; (8009cac <UART_Start_Receive_DMA+0xa0>)
 8009c34:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c36:	4e1e      	ldr	r6, [pc, #120]	; (8009cb0 <UART_Start_Receive_DMA+0xa4>)
 8009c38:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c3a:	3124      	adds	r1, #36	; 0x24
 8009c3c:	f7fc fc70 	bl	8006520 <HAL_DMA_Start_IT>
 8009c40:	bb40      	cbnz	r0, 8009c94 <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c42:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8009c44:	2200      	movs	r2, #0
 8009c46:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c4a:	b14b      	cbz	r3, 8009c60 <UART_Start_Receive_DMA+0x54>
 8009c4c:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	e843 2100 	strex	r1, r2, [r3]
 8009c5a:	2900      	cmp	r1, #0
 8009c5c:	d1f7      	bne.n	8009c4e <UART_Start_Receive_DMA+0x42>
 8009c5e:	e000      	b.n	8009c62 <UART_Start_Receive_DMA+0x56>
 8009c60:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	f103 0208 	add.w	r2, r3, #8
 8009c66:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	f103 0008 	add.w	r0, r3, #8
 8009c72:	e840 2100 	strex	r1, r2, [r0]
 8009c76:	2900      	cmp	r1, #0
 8009c78:	d1f3      	bne.n	8009c62 <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	f103 0208 	add.w	r2, r3, #8
 8009c7e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	f103 0108 	add.w	r1, r3, #8
 8009c8a:	e841 2000 	strex	r0, r2, [r1]
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d1f3      	bne.n	8009c7a <UART_Start_Receive_DMA+0x6e>
}
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c94:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8009c96:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8009c98:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c9c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 8009ca0:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8009ca2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}
 8009ca8:	0800945d 	.word	0x0800945d
 8009cac:	08009441 	.word	0x08009441
 8009cb0:	08008fe5 	.word	0x08008fe5

08009cb4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cb4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d120      	bne.n	8009cfe <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8009cbc:	b1e9      	cbz	r1, 8009cfa <HAL_UART_Receive_DMA+0x46>
 8009cbe:	b1e2      	cbz	r2, 8009cfa <HAL_UART_Receive_DMA+0x46>
    __HAL_LOCK(huart);
 8009cc0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d01a      	beq.n	8009cfe <HAL_UART_Receive_DMA+0x4a>
{
 8009cc8:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cca:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <HAL_UART_Receive_DMA+0x50>)
 8009ccc:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8009cce:	2501      	movs	r5, #1
 8009cd0:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cd4:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd6:	f04f 0500 	mov.w	r5, #0
 8009cda:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cdc:	d00a      	beq.n	8009cf4 <HAL_UART_Receive_DMA+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	021b      	lsls	r3, r3, #8
 8009ce2:	d507      	bpl.n	8009cf4 <HAL_UART_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ce8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	e844 3500 	strex	r5, r3, [r4]
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	d1f7      	bne.n	8009ce4 <HAL_UART_Receive_DMA+0x30>
}
 8009cf4:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009cf6:	f7ff bf89 	b.w	8009c0c <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	4770      	bx	lr
    return HAL_BUSY;
 8009cfe:	2002      	movs	r0, #2
}
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	40008000 	.word	0x40008000

08009d08 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop

08009d0c <HAL_UARTEx_RxFifoFullCallback>:
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop

08009d10 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop

08009d14 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d14:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d017      	beq.n	8009d4c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d1c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009d1e:	2324      	movs	r3, #36	; 0x24
{
 8009d20:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009d22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d26:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d28:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d2a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8009d2c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d30:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009d34:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d36:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d38:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d3a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8009d44:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8009d48:	4618      	mov	r0, r3
}
 8009d4a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009d4c:	2002      	movs	r0, #2
}
 8009d4e:	4770      	bx	lr

08009d50 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d50:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009d54:	2a01      	cmp	r2, #1
 8009d56:	d037      	beq.n	8009dc8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8009d58:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d5a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009d5c:	2024      	movs	r0, #36	; 0x24
{
 8009d5e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009d60:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d64:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d66:	6810      	ldr	r0, [r2, #0]
 8009d68:	f020 0001 	bic.w	r0, r0, #1
 8009d6c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d6e:	6890      	ldr	r0, [r2, #8]
 8009d70:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8009d74:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d76:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d78:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d7a:	b310      	cbz	r0, 8009dc2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d7c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d7e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d80:	4d12      	ldr	r5, [pc, #72]	; (8009dcc <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d82:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d86:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d8a:	4911      	ldr	r1, [pc, #68]	; (8009dd0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009d8c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d90:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d94:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d98:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d9c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d9e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009da0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009da4:	fbb1 f1f5 	udiv	r1, r1, r5
 8009da8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009dac:	2100      	movs	r1, #0
 8009dae:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009db2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009db6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009dba:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009dbc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009dc0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009dc2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	e7ef      	b.n	8009da8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009dc8:	2002      	movs	r0, #2
}
 8009dca:	4770      	bx	lr
 8009dcc:	0800cbdc 	.word	0x0800cbdc
 8009dd0:	0800cbe4 	.word	0x0800cbe4

08009dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009dd4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009dd8:	2a01      	cmp	r2, #1
 8009dda:	d037      	beq.n	8009e4c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8009ddc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dde:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009de0:	2024      	movs	r0, #36	; 0x24
{
 8009de2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009de4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009de8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009dea:	6810      	ldr	r0, [r2, #0]
 8009dec:	f020 0001 	bic.w	r0, r0, #1
 8009df0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009df2:	6890      	ldr	r0, [r2, #8]
 8009df4:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8009df8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009dfa:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dfc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009dfe:	b310      	cbz	r0, 8009e46 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e00:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e02:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e04:	4d12      	ldr	r5, [pc, #72]	; (8009e50 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e06:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e0a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e0e:	4911      	ldr	r1, [pc, #68]	; (8009e54 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009e10:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e14:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e18:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e1c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e20:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e22:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e24:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e28:	fbb1 f1f5 	udiv	r1, r1, r5
 8009e2c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009e30:	2100      	movs	r1, #0
 8009e32:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009e36:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e38:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009e3a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009e3e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009e40:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009e44:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009e46:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009e48:	4608      	mov	r0, r1
 8009e4a:	e7ef      	b.n	8009e2c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009e4c:	2002      	movs	r0, #2
}
 8009e4e:	4770      	bx	lr
 8009e50:	0800cbdc 	.word	0x0800cbdc
 8009e54:	0800cbe4 	.word	0x0800cbe4

08009e58 <__cvt>:
 8009e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	ec55 4b10 	vmov	r4, r5, d0
 8009e60:	2d00      	cmp	r5, #0
 8009e62:	460e      	mov	r6, r1
 8009e64:	4619      	mov	r1, r3
 8009e66:	462b      	mov	r3, r5
 8009e68:	bfbb      	ittet	lt
 8009e6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e6e:	461d      	movlt	r5, r3
 8009e70:	2300      	movge	r3, #0
 8009e72:	232d      	movlt	r3, #45	; 0x2d
 8009e74:	700b      	strb	r3, [r1, #0]
 8009e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e7c:	4691      	mov	r9, r2
 8009e7e:	f023 0820 	bic.w	r8, r3, #32
 8009e82:	bfbc      	itt	lt
 8009e84:	4622      	movlt	r2, r4
 8009e86:	4614      	movlt	r4, r2
 8009e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e8c:	d005      	beq.n	8009e9a <__cvt+0x42>
 8009e8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e92:	d100      	bne.n	8009e96 <__cvt+0x3e>
 8009e94:	3601      	adds	r6, #1
 8009e96:	2102      	movs	r1, #2
 8009e98:	e000      	b.n	8009e9c <__cvt+0x44>
 8009e9a:	2103      	movs	r1, #3
 8009e9c:	ab03      	add	r3, sp, #12
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	ab02      	add	r3, sp, #8
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	ec45 4b10 	vmov	d0, r4, r5
 8009ea8:	4653      	mov	r3, sl
 8009eaa:	4632      	mov	r2, r6
 8009eac:	f000 ffec 	bl	800ae88 <_dtoa_r>
 8009eb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	d102      	bne.n	8009ebe <__cvt+0x66>
 8009eb8:	f019 0f01 	tst.w	r9, #1
 8009ebc:	d022      	beq.n	8009f04 <__cvt+0xac>
 8009ebe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ec2:	eb07 0906 	add.w	r9, r7, r6
 8009ec6:	d110      	bne.n	8009eea <__cvt+0x92>
 8009ec8:	783b      	ldrb	r3, [r7, #0]
 8009eca:	2b30      	cmp	r3, #48	; 0x30
 8009ecc:	d10a      	bne.n	8009ee4 <__cvt+0x8c>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 fe1f 	bl	8000b18 <__aeabi_dcmpeq>
 8009eda:	b918      	cbnz	r0, 8009ee4 <__cvt+0x8c>
 8009edc:	f1c6 0601 	rsb	r6, r6, #1
 8009ee0:	f8ca 6000 	str.w	r6, [sl]
 8009ee4:	f8da 3000 	ldr.w	r3, [sl]
 8009ee8:	4499      	add	r9, r3
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	f7f6 fe11 	bl	8000b18 <__aeabi_dcmpeq>
 8009ef6:	b108      	cbz	r0, 8009efc <__cvt+0xa4>
 8009ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009efc:	2230      	movs	r2, #48	; 0x30
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	454b      	cmp	r3, r9
 8009f02:	d307      	bcc.n	8009f14 <__cvt+0xbc>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f08:	1bdb      	subs	r3, r3, r7
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	b004      	add	sp, #16
 8009f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f14:	1c59      	adds	r1, r3, #1
 8009f16:	9103      	str	r1, [sp, #12]
 8009f18:	701a      	strb	r2, [r3, #0]
 8009f1a:	e7f0      	b.n	8009efe <__cvt+0xa6>

08009f1c <__exponent>:
 8009f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2900      	cmp	r1, #0
 8009f22:	bfb8      	it	lt
 8009f24:	4249      	neglt	r1, r1
 8009f26:	f803 2b02 	strb.w	r2, [r3], #2
 8009f2a:	bfb4      	ite	lt
 8009f2c:	222d      	movlt	r2, #45	; 0x2d
 8009f2e:	222b      	movge	r2, #43	; 0x2b
 8009f30:	2909      	cmp	r1, #9
 8009f32:	7042      	strb	r2, [r0, #1]
 8009f34:	dd2a      	ble.n	8009f8c <__exponent+0x70>
 8009f36:	f10d 0207 	add.w	r2, sp, #7
 8009f3a:	4617      	mov	r7, r2
 8009f3c:	260a      	movs	r6, #10
 8009f3e:	4694      	mov	ip, r2
 8009f40:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f44:	fb06 1415 	mls	r4, r6, r5, r1
 8009f48:	3430      	adds	r4, #48	; 0x30
 8009f4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009f4e:	460c      	mov	r4, r1
 8009f50:	2c63      	cmp	r4, #99	; 0x63
 8009f52:	f102 32ff 	add.w	r2, r2, #4294967295
 8009f56:	4629      	mov	r1, r5
 8009f58:	dcf1      	bgt.n	8009f3e <__exponent+0x22>
 8009f5a:	3130      	adds	r1, #48	; 0x30
 8009f5c:	f1ac 0402 	sub.w	r4, ip, #2
 8009f60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f64:	1c41      	adds	r1, r0, #1
 8009f66:	4622      	mov	r2, r4
 8009f68:	42ba      	cmp	r2, r7
 8009f6a:	d30a      	bcc.n	8009f82 <__exponent+0x66>
 8009f6c:	f10d 0209 	add.w	r2, sp, #9
 8009f70:	eba2 020c 	sub.w	r2, r2, ip
 8009f74:	42bc      	cmp	r4, r7
 8009f76:	bf88      	it	hi
 8009f78:	2200      	movhi	r2, #0
 8009f7a:	4413      	add	r3, r2
 8009f7c:	1a18      	subs	r0, r3, r0
 8009f7e:	b003      	add	sp, #12
 8009f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009f86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009f8a:	e7ed      	b.n	8009f68 <__exponent+0x4c>
 8009f8c:	2330      	movs	r3, #48	; 0x30
 8009f8e:	3130      	adds	r1, #48	; 0x30
 8009f90:	7083      	strb	r3, [r0, #2]
 8009f92:	70c1      	strb	r1, [r0, #3]
 8009f94:	1d03      	adds	r3, r0, #4
 8009f96:	e7f1      	b.n	8009f7c <__exponent+0x60>

08009f98 <_printf_float>:
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	ed2d 8b02 	vpush	{d8}
 8009fa0:	b08d      	sub	sp, #52	; 0x34
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009fa8:	4616      	mov	r6, r2
 8009faa:	461f      	mov	r7, r3
 8009fac:	4605      	mov	r5, r0
 8009fae:	f000 fe6d 	bl	800ac8c <_localeconv_r>
 8009fb2:	f8d0 a000 	ldr.w	sl, [r0]
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	f7f6 f982 	bl	80002c0 <strlen>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	9305      	str	r3, [sp, #20]
 8009fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009fcc:	3307      	adds	r3, #7
 8009fce:	f023 0307 	bic.w	r3, r3, #7
 8009fd2:	f103 0208 	add.w	r2, r3, #8
 8009fd6:	f8c8 2000 	str.w	r2, [r8]
 8009fda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fe2:	9307      	str	r3, [sp, #28]
 8009fe4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fe8:	ee08 0a10 	vmov	s16, r0
 8009fec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ff4:	4b9e      	ldr	r3, [pc, #632]	; (800a270 <_printf_float+0x2d8>)
 8009ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffa:	f7f6 fdbf 	bl	8000b7c <__aeabi_dcmpun>
 8009ffe:	bb88      	cbnz	r0, 800a064 <_printf_float+0xcc>
 800a000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a004:	4b9a      	ldr	r3, [pc, #616]	; (800a270 <_printf_float+0x2d8>)
 800a006:	f04f 32ff 	mov.w	r2, #4294967295
 800a00a:	f7f6 fd99 	bl	8000b40 <__aeabi_dcmple>
 800a00e:	bb48      	cbnz	r0, 800a064 <_printf_float+0xcc>
 800a010:	2200      	movs	r2, #0
 800a012:	2300      	movs	r3, #0
 800a014:	4640      	mov	r0, r8
 800a016:	4649      	mov	r1, r9
 800a018:	f7f6 fd88 	bl	8000b2c <__aeabi_dcmplt>
 800a01c:	b110      	cbz	r0, 800a024 <_printf_float+0x8c>
 800a01e:	232d      	movs	r3, #45	; 0x2d
 800a020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a024:	4a93      	ldr	r2, [pc, #588]	; (800a274 <_printf_float+0x2dc>)
 800a026:	4b94      	ldr	r3, [pc, #592]	; (800a278 <_printf_float+0x2e0>)
 800a028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a02c:	bf94      	ite	ls
 800a02e:	4690      	movls	r8, r2
 800a030:	4698      	movhi	r8, r3
 800a032:	2303      	movs	r3, #3
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	9b05      	ldr	r3, [sp, #20]
 800a038:	f023 0304 	bic.w	r3, r3, #4
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	f04f 0900 	mov.w	r9, #0
 800a042:	9700      	str	r7, [sp, #0]
 800a044:	4633      	mov	r3, r6
 800a046:	aa0b      	add	r2, sp, #44	; 0x2c
 800a048:	4621      	mov	r1, r4
 800a04a:	4628      	mov	r0, r5
 800a04c:	f000 f9da 	bl	800a404 <_printf_common>
 800a050:	3001      	adds	r0, #1
 800a052:	f040 8090 	bne.w	800a176 <_printf_float+0x1de>
 800a056:	f04f 30ff 	mov.w	r0, #4294967295
 800a05a:	b00d      	add	sp, #52	; 0x34
 800a05c:	ecbd 8b02 	vpop	{d8}
 800a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a064:	4642      	mov	r2, r8
 800a066:	464b      	mov	r3, r9
 800a068:	4640      	mov	r0, r8
 800a06a:	4649      	mov	r1, r9
 800a06c:	f7f6 fd86 	bl	8000b7c <__aeabi_dcmpun>
 800a070:	b140      	cbz	r0, 800a084 <_printf_float+0xec>
 800a072:	464b      	mov	r3, r9
 800a074:	2b00      	cmp	r3, #0
 800a076:	bfbc      	itt	lt
 800a078:	232d      	movlt	r3, #45	; 0x2d
 800a07a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a07e:	4a7f      	ldr	r2, [pc, #508]	; (800a27c <_printf_float+0x2e4>)
 800a080:	4b7f      	ldr	r3, [pc, #508]	; (800a280 <_printf_float+0x2e8>)
 800a082:	e7d1      	b.n	800a028 <_printf_float+0x90>
 800a084:	6863      	ldr	r3, [r4, #4]
 800a086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a08a:	9206      	str	r2, [sp, #24]
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	d13f      	bne.n	800a110 <_printf_float+0x178>
 800a090:	2306      	movs	r3, #6
 800a092:	6063      	str	r3, [r4, #4]
 800a094:	9b05      	ldr	r3, [sp, #20]
 800a096:	6861      	ldr	r1, [r4, #4]
 800a098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a09c:	2300      	movs	r3, #0
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	ab0a      	add	r3, sp, #40	; 0x28
 800a0a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a0a6:	ab09      	add	r3, sp, #36	; 0x24
 800a0a8:	ec49 8b10 	vmov	d0, r8, r9
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f7ff fecf 	bl	8009e58 <__cvt>
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0be:	2b47      	cmp	r3, #71	; 0x47
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	d108      	bne.n	800a0d6 <_printf_float+0x13e>
 800a0c4:	1cc8      	adds	r0, r1, #3
 800a0c6:	db02      	blt.n	800a0ce <_printf_float+0x136>
 800a0c8:	6863      	ldr	r3, [r4, #4]
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	dd41      	ble.n	800a152 <_printf_float+0x1ba>
 800a0ce:	f1ab 0302 	sub.w	r3, fp, #2
 800a0d2:	fa5f fb83 	uxtb.w	fp, r3
 800a0d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0da:	d820      	bhi.n	800a11e <_printf_float+0x186>
 800a0dc:	3901      	subs	r1, #1
 800a0de:	465a      	mov	r2, fp
 800a0e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0e4:	9109      	str	r1, [sp, #36]	; 0x24
 800a0e6:	f7ff ff19 	bl	8009f1c <__exponent>
 800a0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ec:	1813      	adds	r3, r2, r0
 800a0ee:	2a01      	cmp	r2, #1
 800a0f0:	4681      	mov	r9, r0
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	dc02      	bgt.n	800a0fc <_printf_float+0x164>
 800a0f6:	6822      	ldr	r2, [r4, #0]
 800a0f8:	07d2      	lsls	r2, r2, #31
 800a0fa:	d501      	bpl.n	800a100 <_printf_float+0x168>
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a104:	2b00      	cmp	r3, #0
 800a106:	d09c      	beq.n	800a042 <_printf_float+0xaa>
 800a108:	232d      	movs	r3, #45	; 0x2d
 800a10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a10e:	e798      	b.n	800a042 <_printf_float+0xaa>
 800a110:	9a06      	ldr	r2, [sp, #24]
 800a112:	2a47      	cmp	r2, #71	; 0x47
 800a114:	d1be      	bne.n	800a094 <_printf_float+0xfc>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1bc      	bne.n	800a094 <_printf_float+0xfc>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e7b9      	b.n	800a092 <_printf_float+0xfa>
 800a11e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a122:	d118      	bne.n	800a156 <_printf_float+0x1be>
 800a124:	2900      	cmp	r1, #0
 800a126:	6863      	ldr	r3, [r4, #4]
 800a128:	dd0b      	ble.n	800a142 <_printf_float+0x1aa>
 800a12a:	6121      	str	r1, [r4, #16]
 800a12c:	b913      	cbnz	r3, 800a134 <_printf_float+0x19c>
 800a12e:	6822      	ldr	r2, [r4, #0]
 800a130:	07d0      	lsls	r0, r2, #31
 800a132:	d502      	bpl.n	800a13a <_printf_float+0x1a2>
 800a134:	3301      	adds	r3, #1
 800a136:	440b      	add	r3, r1
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a13c:	f04f 0900 	mov.w	r9, #0
 800a140:	e7de      	b.n	800a100 <_printf_float+0x168>
 800a142:	b913      	cbnz	r3, 800a14a <_printf_float+0x1b2>
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	07d2      	lsls	r2, r2, #31
 800a148:	d501      	bpl.n	800a14e <_printf_float+0x1b6>
 800a14a:	3302      	adds	r3, #2
 800a14c:	e7f4      	b.n	800a138 <_printf_float+0x1a0>
 800a14e:	2301      	movs	r3, #1
 800a150:	e7f2      	b.n	800a138 <_printf_float+0x1a0>
 800a152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	4299      	cmp	r1, r3
 800a15a:	db05      	blt.n	800a168 <_printf_float+0x1d0>
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	6121      	str	r1, [r4, #16]
 800a160:	07d8      	lsls	r0, r3, #31
 800a162:	d5ea      	bpl.n	800a13a <_printf_float+0x1a2>
 800a164:	1c4b      	adds	r3, r1, #1
 800a166:	e7e7      	b.n	800a138 <_printf_float+0x1a0>
 800a168:	2900      	cmp	r1, #0
 800a16a:	bfd4      	ite	le
 800a16c:	f1c1 0202 	rsble	r2, r1, #2
 800a170:	2201      	movgt	r2, #1
 800a172:	4413      	add	r3, r2
 800a174:	e7e0      	b.n	800a138 <_printf_float+0x1a0>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	055a      	lsls	r2, r3, #21
 800a17a:	d407      	bmi.n	800a18c <_printf_float+0x1f4>
 800a17c:	6923      	ldr	r3, [r4, #16]
 800a17e:	4642      	mov	r2, r8
 800a180:	4631      	mov	r1, r6
 800a182:	4628      	mov	r0, r5
 800a184:	47b8      	blx	r7
 800a186:	3001      	adds	r0, #1
 800a188:	d12c      	bne.n	800a1e4 <_printf_float+0x24c>
 800a18a:	e764      	b.n	800a056 <_printf_float+0xbe>
 800a18c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a190:	f240 80e0 	bls.w	800a354 <_printf_float+0x3bc>
 800a194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a198:	2200      	movs	r2, #0
 800a19a:	2300      	movs	r3, #0
 800a19c:	f7f6 fcbc 	bl	8000b18 <__aeabi_dcmpeq>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d034      	beq.n	800a20e <_printf_float+0x276>
 800a1a4:	4a37      	ldr	r2, [pc, #220]	; (800a284 <_printf_float+0x2ec>)
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f af51 	beq.w	800a056 <_printf_float+0xbe>
 800a1b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	db02      	blt.n	800a1c2 <_printf_float+0x22a>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	07d8      	lsls	r0, r3, #31
 800a1c0:	d510      	bpl.n	800a1e4 <_printf_float+0x24c>
 800a1c2:	ee18 3a10 	vmov	r3, s16
 800a1c6:	4652      	mov	r2, sl
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f af41 	beq.w	800a056 <_printf_float+0xbe>
 800a1d4:	f04f 0800 	mov.w	r8, #0
 800a1d8:	f104 091a 	add.w	r9, r4, #26
 800a1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	4543      	cmp	r3, r8
 800a1e2:	dc09      	bgt.n	800a1f8 <_printf_float+0x260>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	079b      	lsls	r3, r3, #30
 800a1e8:	f100 8107 	bmi.w	800a3fa <_printf_float+0x462>
 800a1ec:	68e0      	ldr	r0, [r4, #12]
 800a1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f0:	4298      	cmp	r0, r3
 800a1f2:	bfb8      	it	lt
 800a1f4:	4618      	movlt	r0, r3
 800a1f6:	e730      	b.n	800a05a <_printf_float+0xc2>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	464a      	mov	r2, r9
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b8      	blx	r7
 800a202:	3001      	adds	r0, #1
 800a204:	f43f af27 	beq.w	800a056 <_printf_float+0xbe>
 800a208:	f108 0801 	add.w	r8, r8, #1
 800a20c:	e7e6      	b.n	800a1dc <_printf_float+0x244>
 800a20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	dc39      	bgt.n	800a288 <_printf_float+0x2f0>
 800a214:	4a1b      	ldr	r2, [pc, #108]	; (800a284 <_printf_float+0x2ec>)
 800a216:	2301      	movs	r3, #1
 800a218:	4631      	mov	r1, r6
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	f43f af19 	beq.w	800a056 <_printf_float+0xbe>
 800a224:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a228:	4313      	orrs	r3, r2
 800a22a:	d102      	bne.n	800a232 <_printf_float+0x29a>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	07d9      	lsls	r1, r3, #31
 800a230:	d5d8      	bpl.n	800a1e4 <_printf_float+0x24c>
 800a232:	ee18 3a10 	vmov	r3, s16
 800a236:	4652      	mov	r2, sl
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f af09 	beq.w	800a056 <_printf_float+0xbe>
 800a244:	f04f 0900 	mov.w	r9, #0
 800a248:	f104 0a1a 	add.w	sl, r4, #26
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	425b      	negs	r3, r3
 800a250:	454b      	cmp	r3, r9
 800a252:	dc01      	bgt.n	800a258 <_printf_float+0x2c0>
 800a254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a256:	e792      	b.n	800a17e <_printf_float+0x1e6>
 800a258:	2301      	movs	r3, #1
 800a25a:	4652      	mov	r2, sl
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f aef7 	beq.w	800a056 <_printf_float+0xbe>
 800a268:	f109 0901 	add.w	r9, r9, #1
 800a26c:	e7ee      	b.n	800a24c <_printf_float+0x2b4>
 800a26e:	bf00      	nop
 800a270:	7fefffff 	.word	0x7fefffff
 800a274:	0800cbec 	.word	0x0800cbec
 800a278:	0800cbf0 	.word	0x0800cbf0
 800a27c:	0800cbf4 	.word	0x0800cbf4
 800a280:	0800cbf8 	.word	0x0800cbf8
 800a284:	0800cbfc 	.word	0x0800cbfc
 800a288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a28a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a28c:	429a      	cmp	r2, r3
 800a28e:	bfa8      	it	ge
 800a290:	461a      	movge	r2, r3
 800a292:	2a00      	cmp	r2, #0
 800a294:	4691      	mov	r9, r2
 800a296:	dc37      	bgt.n	800a308 <_printf_float+0x370>
 800a298:	f04f 0b00 	mov.w	fp, #0
 800a29c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2a0:	f104 021a 	add.w	r2, r4, #26
 800a2a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2a6:	9305      	str	r3, [sp, #20]
 800a2a8:	eba3 0309 	sub.w	r3, r3, r9
 800a2ac:	455b      	cmp	r3, fp
 800a2ae:	dc33      	bgt.n	800a318 <_printf_float+0x380>
 800a2b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	db3b      	blt.n	800a330 <_printf_float+0x398>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	07da      	lsls	r2, r3, #31
 800a2bc:	d438      	bmi.n	800a330 <_printf_float+0x398>
 800a2be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a2c2:	eba2 0903 	sub.w	r9, r2, r3
 800a2c6:	9b05      	ldr	r3, [sp, #20]
 800a2c8:	1ad2      	subs	r2, r2, r3
 800a2ca:	4591      	cmp	r9, r2
 800a2cc:	bfa8      	it	ge
 800a2ce:	4691      	movge	r9, r2
 800a2d0:	f1b9 0f00 	cmp.w	r9, #0
 800a2d4:	dc35      	bgt.n	800a342 <_printf_float+0x3aa>
 800a2d6:	f04f 0800 	mov.w	r8, #0
 800a2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2de:	f104 0a1a 	add.w	sl, r4, #26
 800a2e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2e6:	1a9b      	subs	r3, r3, r2
 800a2e8:	eba3 0309 	sub.w	r3, r3, r9
 800a2ec:	4543      	cmp	r3, r8
 800a2ee:	f77f af79 	ble.w	800a1e4 <_printf_float+0x24c>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4652      	mov	r2, sl
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b8      	blx	r7
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	f43f aeaa 	beq.w	800a056 <_printf_float+0xbe>
 800a302:	f108 0801 	add.w	r8, r8, #1
 800a306:	e7ec      	b.n	800a2e2 <_printf_float+0x34a>
 800a308:	4613      	mov	r3, r2
 800a30a:	4631      	mov	r1, r6
 800a30c:	4642      	mov	r2, r8
 800a30e:	4628      	mov	r0, r5
 800a310:	47b8      	blx	r7
 800a312:	3001      	adds	r0, #1
 800a314:	d1c0      	bne.n	800a298 <_printf_float+0x300>
 800a316:	e69e      	b.n	800a056 <_printf_float+0xbe>
 800a318:	2301      	movs	r3, #1
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	9205      	str	r2, [sp, #20]
 800a320:	47b8      	blx	r7
 800a322:	3001      	adds	r0, #1
 800a324:	f43f ae97 	beq.w	800a056 <_printf_float+0xbe>
 800a328:	9a05      	ldr	r2, [sp, #20]
 800a32a:	f10b 0b01 	add.w	fp, fp, #1
 800a32e:	e7b9      	b.n	800a2a4 <_printf_float+0x30c>
 800a330:	ee18 3a10 	vmov	r3, s16
 800a334:	4652      	mov	r2, sl
 800a336:	4631      	mov	r1, r6
 800a338:	4628      	mov	r0, r5
 800a33a:	47b8      	blx	r7
 800a33c:	3001      	adds	r0, #1
 800a33e:	d1be      	bne.n	800a2be <_printf_float+0x326>
 800a340:	e689      	b.n	800a056 <_printf_float+0xbe>
 800a342:	9a05      	ldr	r2, [sp, #20]
 800a344:	464b      	mov	r3, r9
 800a346:	4442      	add	r2, r8
 800a348:	4631      	mov	r1, r6
 800a34a:	4628      	mov	r0, r5
 800a34c:	47b8      	blx	r7
 800a34e:	3001      	adds	r0, #1
 800a350:	d1c1      	bne.n	800a2d6 <_printf_float+0x33e>
 800a352:	e680      	b.n	800a056 <_printf_float+0xbe>
 800a354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a356:	2a01      	cmp	r2, #1
 800a358:	dc01      	bgt.n	800a35e <_printf_float+0x3c6>
 800a35a:	07db      	lsls	r3, r3, #31
 800a35c:	d53a      	bpl.n	800a3d4 <_printf_float+0x43c>
 800a35e:	2301      	movs	r3, #1
 800a360:	4642      	mov	r2, r8
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	f43f ae74 	beq.w	800a056 <_printf_float+0xbe>
 800a36e:	ee18 3a10 	vmov	r3, s16
 800a372:	4652      	mov	r2, sl
 800a374:	4631      	mov	r1, r6
 800a376:	4628      	mov	r0, r5
 800a378:	47b8      	blx	r7
 800a37a:	3001      	adds	r0, #1
 800a37c:	f43f ae6b 	beq.w	800a056 <_printf_float+0xbe>
 800a380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a384:	2200      	movs	r2, #0
 800a386:	2300      	movs	r3, #0
 800a388:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a38c:	f7f6 fbc4 	bl	8000b18 <__aeabi_dcmpeq>
 800a390:	b9d8      	cbnz	r0, 800a3ca <_printf_float+0x432>
 800a392:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a396:	f108 0201 	add.w	r2, r8, #1
 800a39a:	4631      	mov	r1, r6
 800a39c:	4628      	mov	r0, r5
 800a39e:	47b8      	blx	r7
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d10e      	bne.n	800a3c2 <_printf_float+0x42a>
 800a3a4:	e657      	b.n	800a056 <_printf_float+0xbe>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4652      	mov	r2, sl
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f43f ae50 	beq.w	800a056 <_printf_float+0xbe>
 800a3b6:	f108 0801 	add.w	r8, r8, #1
 800a3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4543      	cmp	r3, r8
 800a3c0:	dcf1      	bgt.n	800a3a6 <_printf_float+0x40e>
 800a3c2:	464b      	mov	r3, r9
 800a3c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a3c8:	e6da      	b.n	800a180 <_printf_float+0x1e8>
 800a3ca:	f04f 0800 	mov.w	r8, #0
 800a3ce:	f104 0a1a 	add.w	sl, r4, #26
 800a3d2:	e7f2      	b.n	800a3ba <_printf_float+0x422>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	e7df      	b.n	800a39a <_printf_float+0x402>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	464a      	mov	r2, r9
 800a3de:	4631      	mov	r1, r6
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b8      	blx	r7
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	f43f ae36 	beq.w	800a056 <_printf_float+0xbe>
 800a3ea:	f108 0801 	add.w	r8, r8, #1
 800a3ee:	68e3      	ldr	r3, [r4, #12]
 800a3f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3f2:	1a5b      	subs	r3, r3, r1
 800a3f4:	4543      	cmp	r3, r8
 800a3f6:	dcf0      	bgt.n	800a3da <_printf_float+0x442>
 800a3f8:	e6f8      	b.n	800a1ec <_printf_float+0x254>
 800a3fa:	f04f 0800 	mov.w	r8, #0
 800a3fe:	f104 0919 	add.w	r9, r4, #25
 800a402:	e7f4      	b.n	800a3ee <_printf_float+0x456>

0800a404 <_printf_common>:
 800a404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a408:	4616      	mov	r6, r2
 800a40a:	4699      	mov	r9, r3
 800a40c:	688a      	ldr	r2, [r1, #8]
 800a40e:	690b      	ldr	r3, [r1, #16]
 800a410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a414:	4293      	cmp	r3, r2
 800a416:	bfb8      	it	lt
 800a418:	4613      	movlt	r3, r2
 800a41a:	6033      	str	r3, [r6, #0]
 800a41c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a420:	4607      	mov	r7, r0
 800a422:	460c      	mov	r4, r1
 800a424:	b10a      	cbz	r2, 800a42a <_printf_common+0x26>
 800a426:	3301      	adds	r3, #1
 800a428:	6033      	str	r3, [r6, #0]
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	0699      	lsls	r1, r3, #26
 800a42e:	bf42      	ittt	mi
 800a430:	6833      	ldrmi	r3, [r6, #0]
 800a432:	3302      	addmi	r3, #2
 800a434:	6033      	strmi	r3, [r6, #0]
 800a436:	6825      	ldr	r5, [r4, #0]
 800a438:	f015 0506 	ands.w	r5, r5, #6
 800a43c:	d106      	bne.n	800a44c <_printf_common+0x48>
 800a43e:	f104 0a19 	add.w	sl, r4, #25
 800a442:	68e3      	ldr	r3, [r4, #12]
 800a444:	6832      	ldr	r2, [r6, #0]
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	42ab      	cmp	r3, r5
 800a44a:	dc26      	bgt.n	800a49a <_printf_common+0x96>
 800a44c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a450:	1e13      	subs	r3, r2, #0
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	bf18      	it	ne
 800a456:	2301      	movne	r3, #1
 800a458:	0692      	lsls	r2, r2, #26
 800a45a:	d42b      	bmi.n	800a4b4 <_printf_common+0xb0>
 800a45c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a460:	4649      	mov	r1, r9
 800a462:	4638      	mov	r0, r7
 800a464:	47c0      	blx	r8
 800a466:	3001      	adds	r0, #1
 800a468:	d01e      	beq.n	800a4a8 <_printf_common+0xa4>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	f003 0306 	and.w	r3, r3, #6
 800a472:	2b04      	cmp	r3, #4
 800a474:	bf02      	ittt	eq
 800a476:	68e5      	ldreq	r5, [r4, #12]
 800a478:	6833      	ldreq	r3, [r6, #0]
 800a47a:	1aed      	subeq	r5, r5, r3
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	bf0c      	ite	eq
 800a480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a484:	2500      	movne	r5, #0
 800a486:	4293      	cmp	r3, r2
 800a488:	bfc4      	itt	gt
 800a48a:	1a9b      	subgt	r3, r3, r2
 800a48c:	18ed      	addgt	r5, r5, r3
 800a48e:	2600      	movs	r6, #0
 800a490:	341a      	adds	r4, #26
 800a492:	42b5      	cmp	r5, r6
 800a494:	d11a      	bne.n	800a4cc <_printf_common+0xc8>
 800a496:	2000      	movs	r0, #0
 800a498:	e008      	b.n	800a4ac <_printf_common+0xa8>
 800a49a:	2301      	movs	r3, #1
 800a49c:	4652      	mov	r2, sl
 800a49e:	4649      	mov	r1, r9
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	47c0      	blx	r8
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d103      	bne.n	800a4b0 <_printf_common+0xac>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b0:	3501      	adds	r5, #1
 800a4b2:	e7c6      	b.n	800a442 <_printf_common+0x3e>
 800a4b4:	18e1      	adds	r1, r4, r3
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	2030      	movs	r0, #48	; 0x30
 800a4ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4be:	4422      	add	r2, r4
 800a4c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4c8:	3302      	adds	r3, #2
 800a4ca:	e7c7      	b.n	800a45c <_printf_common+0x58>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	47c0      	blx	r8
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d0e6      	beq.n	800a4a8 <_printf_common+0xa4>
 800a4da:	3601      	adds	r6, #1
 800a4dc:	e7d9      	b.n	800a492 <_printf_common+0x8e>
	...

0800a4e0 <_printf_i>:
 800a4e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	7e0f      	ldrb	r7, [r1, #24]
 800a4e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4e8:	2f78      	cmp	r7, #120	; 0x78
 800a4ea:	4691      	mov	r9, r2
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	469a      	mov	sl, r3
 800a4f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4f6:	d807      	bhi.n	800a508 <_printf_i+0x28>
 800a4f8:	2f62      	cmp	r7, #98	; 0x62
 800a4fa:	d80a      	bhi.n	800a512 <_printf_i+0x32>
 800a4fc:	2f00      	cmp	r7, #0
 800a4fe:	f000 80d4 	beq.w	800a6aa <_printf_i+0x1ca>
 800a502:	2f58      	cmp	r7, #88	; 0x58
 800a504:	f000 80c0 	beq.w	800a688 <_printf_i+0x1a8>
 800a508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a50c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a510:	e03a      	b.n	800a588 <_printf_i+0xa8>
 800a512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a516:	2b15      	cmp	r3, #21
 800a518:	d8f6      	bhi.n	800a508 <_printf_i+0x28>
 800a51a:	a101      	add	r1, pc, #4	; (adr r1, 800a520 <_printf_i+0x40>)
 800a51c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a520:	0800a579 	.word	0x0800a579
 800a524:	0800a58d 	.word	0x0800a58d
 800a528:	0800a509 	.word	0x0800a509
 800a52c:	0800a509 	.word	0x0800a509
 800a530:	0800a509 	.word	0x0800a509
 800a534:	0800a509 	.word	0x0800a509
 800a538:	0800a58d 	.word	0x0800a58d
 800a53c:	0800a509 	.word	0x0800a509
 800a540:	0800a509 	.word	0x0800a509
 800a544:	0800a509 	.word	0x0800a509
 800a548:	0800a509 	.word	0x0800a509
 800a54c:	0800a691 	.word	0x0800a691
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a64b 	.word	0x0800a64b
 800a558:	0800a509 	.word	0x0800a509
 800a55c:	0800a509 	.word	0x0800a509
 800a560:	0800a6b3 	.word	0x0800a6b3
 800a564:	0800a509 	.word	0x0800a509
 800a568:	0800a5b9 	.word	0x0800a5b9
 800a56c:	0800a509 	.word	0x0800a509
 800a570:	0800a509 	.word	0x0800a509
 800a574:	0800a653 	.word	0x0800a653
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	602a      	str	r2, [r5, #0]
 800a580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a588:	2301      	movs	r3, #1
 800a58a:	e09f      	b.n	800a6cc <_printf_i+0x1ec>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	0607      	lsls	r7, r0, #24
 800a592:	f103 0104 	add.w	r1, r3, #4
 800a596:	6029      	str	r1, [r5, #0]
 800a598:	d501      	bpl.n	800a59e <_printf_i+0xbe>
 800a59a:	681e      	ldr	r6, [r3, #0]
 800a59c:	e003      	b.n	800a5a6 <_printf_i+0xc6>
 800a59e:	0646      	lsls	r6, r0, #25
 800a5a0:	d5fb      	bpl.n	800a59a <_printf_i+0xba>
 800a5a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	da03      	bge.n	800a5b2 <_printf_i+0xd2>
 800a5aa:	232d      	movs	r3, #45	; 0x2d
 800a5ac:	4276      	negs	r6, r6
 800a5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b2:	485a      	ldr	r0, [pc, #360]	; (800a71c <_printf_i+0x23c>)
 800a5b4:	230a      	movs	r3, #10
 800a5b6:	e012      	b.n	800a5de <_printf_i+0xfe>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	1d19      	adds	r1, r3, #4
 800a5be:	6029      	str	r1, [r5, #0]
 800a5c0:	0605      	lsls	r5, r0, #24
 800a5c2:	d501      	bpl.n	800a5c8 <_printf_i+0xe8>
 800a5c4:	681e      	ldr	r6, [r3, #0]
 800a5c6:	e002      	b.n	800a5ce <_printf_i+0xee>
 800a5c8:	0641      	lsls	r1, r0, #25
 800a5ca:	d5fb      	bpl.n	800a5c4 <_printf_i+0xe4>
 800a5cc:	881e      	ldrh	r6, [r3, #0]
 800a5ce:	4853      	ldr	r0, [pc, #332]	; (800a71c <_printf_i+0x23c>)
 800a5d0:	2f6f      	cmp	r7, #111	; 0x6f
 800a5d2:	bf0c      	ite	eq
 800a5d4:	2308      	moveq	r3, #8
 800a5d6:	230a      	movne	r3, #10
 800a5d8:	2100      	movs	r1, #0
 800a5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5de:	6865      	ldr	r5, [r4, #4]
 800a5e0:	60a5      	str	r5, [r4, #8]
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	bfa2      	ittt	ge
 800a5e6:	6821      	ldrge	r1, [r4, #0]
 800a5e8:	f021 0104 	bicge.w	r1, r1, #4
 800a5ec:	6021      	strge	r1, [r4, #0]
 800a5ee:	b90e      	cbnz	r6, 800a5f4 <_printf_i+0x114>
 800a5f0:	2d00      	cmp	r5, #0
 800a5f2:	d04b      	beq.n	800a68c <_printf_i+0x1ac>
 800a5f4:	4615      	mov	r5, r2
 800a5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5fa:	fb03 6711 	mls	r7, r3, r1, r6
 800a5fe:	5dc7      	ldrb	r7, [r0, r7]
 800a600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a604:	4637      	mov	r7, r6
 800a606:	42bb      	cmp	r3, r7
 800a608:	460e      	mov	r6, r1
 800a60a:	d9f4      	bls.n	800a5f6 <_printf_i+0x116>
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d10b      	bne.n	800a628 <_printf_i+0x148>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	07de      	lsls	r6, r3, #31
 800a614:	d508      	bpl.n	800a628 <_printf_i+0x148>
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	6861      	ldr	r1, [r4, #4]
 800a61a:	4299      	cmp	r1, r3
 800a61c:	bfde      	ittt	le
 800a61e:	2330      	movle	r3, #48	; 0x30
 800a620:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a624:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a628:	1b52      	subs	r2, r2, r5
 800a62a:	6122      	str	r2, [r4, #16]
 800a62c:	f8cd a000 	str.w	sl, [sp]
 800a630:	464b      	mov	r3, r9
 800a632:	aa03      	add	r2, sp, #12
 800a634:	4621      	mov	r1, r4
 800a636:	4640      	mov	r0, r8
 800a638:	f7ff fee4 	bl	800a404 <_printf_common>
 800a63c:	3001      	adds	r0, #1
 800a63e:	d14a      	bne.n	800a6d6 <_printf_i+0x1f6>
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	b004      	add	sp, #16
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	f043 0320 	orr.w	r3, r3, #32
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	4833      	ldr	r0, [pc, #204]	; (800a720 <_printf_i+0x240>)
 800a654:	2778      	movs	r7, #120	; 0x78
 800a656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	6829      	ldr	r1, [r5, #0]
 800a65e:	061f      	lsls	r7, r3, #24
 800a660:	f851 6b04 	ldr.w	r6, [r1], #4
 800a664:	d402      	bmi.n	800a66c <_printf_i+0x18c>
 800a666:	065f      	lsls	r7, r3, #25
 800a668:	bf48      	it	mi
 800a66a:	b2b6      	uxthmi	r6, r6
 800a66c:	07df      	lsls	r7, r3, #31
 800a66e:	bf48      	it	mi
 800a670:	f043 0320 	orrmi.w	r3, r3, #32
 800a674:	6029      	str	r1, [r5, #0]
 800a676:	bf48      	it	mi
 800a678:	6023      	strmi	r3, [r4, #0]
 800a67a:	b91e      	cbnz	r6, 800a684 <_printf_i+0x1a4>
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	f023 0320 	bic.w	r3, r3, #32
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	2310      	movs	r3, #16
 800a686:	e7a7      	b.n	800a5d8 <_printf_i+0xf8>
 800a688:	4824      	ldr	r0, [pc, #144]	; (800a71c <_printf_i+0x23c>)
 800a68a:	e7e4      	b.n	800a656 <_printf_i+0x176>
 800a68c:	4615      	mov	r5, r2
 800a68e:	e7bd      	b.n	800a60c <_printf_i+0x12c>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	6826      	ldr	r6, [r4, #0]
 800a694:	6961      	ldr	r1, [r4, #20]
 800a696:	1d18      	adds	r0, r3, #4
 800a698:	6028      	str	r0, [r5, #0]
 800a69a:	0635      	lsls	r5, r6, #24
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	d501      	bpl.n	800a6a4 <_printf_i+0x1c4>
 800a6a0:	6019      	str	r1, [r3, #0]
 800a6a2:	e002      	b.n	800a6aa <_printf_i+0x1ca>
 800a6a4:	0670      	lsls	r0, r6, #25
 800a6a6:	d5fb      	bpl.n	800a6a0 <_printf_i+0x1c0>
 800a6a8:	8019      	strh	r1, [r3, #0]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6123      	str	r3, [r4, #16]
 800a6ae:	4615      	mov	r5, r2
 800a6b0:	e7bc      	b.n	800a62c <_printf_i+0x14c>
 800a6b2:	682b      	ldr	r3, [r5, #0]
 800a6b4:	1d1a      	adds	r2, r3, #4
 800a6b6:	602a      	str	r2, [r5, #0]
 800a6b8:	681d      	ldr	r5, [r3, #0]
 800a6ba:	6862      	ldr	r2, [r4, #4]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f7f5 fdae 	bl	8000220 <memchr>
 800a6c4:	b108      	cbz	r0, 800a6ca <_printf_i+0x1ea>
 800a6c6:	1b40      	subs	r0, r0, r5
 800a6c8:	6060      	str	r0, [r4, #4]
 800a6ca:	6863      	ldr	r3, [r4, #4]
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d4:	e7aa      	b.n	800a62c <_printf_i+0x14c>
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	462a      	mov	r2, r5
 800a6da:	4649      	mov	r1, r9
 800a6dc:	4640      	mov	r0, r8
 800a6de:	47d0      	blx	sl
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d0ad      	beq.n	800a640 <_printf_i+0x160>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	079b      	lsls	r3, r3, #30
 800a6e8:	d413      	bmi.n	800a712 <_printf_i+0x232>
 800a6ea:	68e0      	ldr	r0, [r4, #12]
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	4298      	cmp	r0, r3
 800a6f0:	bfb8      	it	lt
 800a6f2:	4618      	movlt	r0, r3
 800a6f4:	e7a6      	b.n	800a644 <_printf_i+0x164>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	47d0      	blx	sl
 800a700:	3001      	adds	r0, #1
 800a702:	d09d      	beq.n	800a640 <_printf_i+0x160>
 800a704:	3501      	adds	r5, #1
 800a706:	68e3      	ldr	r3, [r4, #12]
 800a708:	9903      	ldr	r1, [sp, #12]
 800a70a:	1a5b      	subs	r3, r3, r1
 800a70c:	42ab      	cmp	r3, r5
 800a70e:	dcf2      	bgt.n	800a6f6 <_printf_i+0x216>
 800a710:	e7eb      	b.n	800a6ea <_printf_i+0x20a>
 800a712:	2500      	movs	r5, #0
 800a714:	f104 0619 	add.w	r6, r4, #25
 800a718:	e7f5      	b.n	800a706 <_printf_i+0x226>
 800a71a:	bf00      	nop
 800a71c:	0800cbfe 	.word	0x0800cbfe
 800a720:	0800cc0f 	.word	0x0800cc0f

0800a724 <std>:
 800a724:	2300      	movs	r3, #0
 800a726:	b510      	push	{r4, lr}
 800a728:	4604      	mov	r4, r0
 800a72a:	e9c0 3300 	strd	r3, r3, [r0]
 800a72e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a732:	6083      	str	r3, [r0, #8]
 800a734:	8181      	strh	r1, [r0, #12]
 800a736:	6643      	str	r3, [r0, #100]	; 0x64
 800a738:	81c2      	strh	r2, [r0, #14]
 800a73a:	6183      	str	r3, [r0, #24]
 800a73c:	4619      	mov	r1, r3
 800a73e:	2208      	movs	r2, #8
 800a740:	305c      	adds	r0, #92	; 0x5c
 800a742:	f000 fa9b 	bl	800ac7c <memset>
 800a746:	4b05      	ldr	r3, [pc, #20]	; (800a75c <std+0x38>)
 800a748:	6263      	str	r3, [r4, #36]	; 0x24
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <std+0x3c>)
 800a74c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <std+0x40>)
 800a750:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a752:	4b05      	ldr	r3, [pc, #20]	; (800a768 <std+0x44>)
 800a754:	6224      	str	r4, [r4, #32]
 800a756:	6323      	str	r3, [r4, #48]	; 0x30
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	bf00      	nop
 800a75c:	0800aacd 	.word	0x0800aacd
 800a760:	0800aaef 	.word	0x0800aaef
 800a764:	0800ab27 	.word	0x0800ab27
 800a768:	0800ab4b 	.word	0x0800ab4b

0800a76c <stdio_exit_handler>:
 800a76c:	4a02      	ldr	r2, [pc, #8]	; (800a778 <stdio_exit_handler+0xc>)
 800a76e:	4903      	ldr	r1, [pc, #12]	; (800a77c <stdio_exit_handler+0x10>)
 800a770:	4803      	ldr	r0, [pc, #12]	; (800a780 <stdio_exit_handler+0x14>)
 800a772:	f000 b869 	b.w	800a848 <_fwalk_sglue>
 800a776:	bf00      	nop
 800a778:	20000014 	.word	0x20000014
 800a77c:	0800c6f9 	.word	0x0800c6f9
 800a780:	20000020 	.word	0x20000020

0800a784 <cleanup_stdio>:
 800a784:	6841      	ldr	r1, [r0, #4]
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <cleanup_stdio+0x34>)
 800a788:	4299      	cmp	r1, r3
 800a78a:	b510      	push	{r4, lr}
 800a78c:	4604      	mov	r4, r0
 800a78e:	d001      	beq.n	800a794 <cleanup_stdio+0x10>
 800a790:	f001 ffb2 	bl	800c6f8 <_fflush_r>
 800a794:	68a1      	ldr	r1, [r4, #8]
 800a796:	4b09      	ldr	r3, [pc, #36]	; (800a7bc <cleanup_stdio+0x38>)
 800a798:	4299      	cmp	r1, r3
 800a79a:	d002      	beq.n	800a7a2 <cleanup_stdio+0x1e>
 800a79c:	4620      	mov	r0, r4
 800a79e:	f001 ffab 	bl	800c6f8 <_fflush_r>
 800a7a2:	68e1      	ldr	r1, [r4, #12]
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <cleanup_stdio+0x3c>)
 800a7a6:	4299      	cmp	r1, r3
 800a7a8:	d004      	beq.n	800a7b4 <cleanup_stdio+0x30>
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b0:	f001 bfa2 	b.w	800c6f8 <_fflush_r>
 800a7b4:	bd10      	pop	{r4, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200013f4 	.word	0x200013f4
 800a7bc:	2000145c 	.word	0x2000145c
 800a7c0:	200014c4 	.word	0x200014c4

0800a7c4 <global_stdio_init.part.0>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	4b0b      	ldr	r3, [pc, #44]	; (800a7f4 <global_stdio_init.part.0+0x30>)
 800a7c8:	4c0b      	ldr	r4, [pc, #44]	; (800a7f8 <global_stdio_init.part.0+0x34>)
 800a7ca:	4a0c      	ldr	r2, [pc, #48]	; (800a7fc <global_stdio_init.part.0+0x38>)
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2104      	movs	r1, #4
 800a7d4:	f7ff ffa6 	bl	800a724 <std>
 800a7d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a7dc:	2201      	movs	r2, #1
 800a7de:	2109      	movs	r1, #9
 800a7e0:	f7ff ffa0 	bl	800a724 <std>
 800a7e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7ee:	2112      	movs	r1, #18
 800a7f0:	f7ff bf98 	b.w	800a724 <std>
 800a7f4:	2000152c 	.word	0x2000152c
 800a7f8:	200013f4 	.word	0x200013f4
 800a7fc:	0800a76d 	.word	0x0800a76d

0800a800 <__sfp_lock_acquire>:
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <__sfp_lock_acquire+0x8>)
 800a802:	f000 bab7 	b.w	800ad74 <__retarget_lock_acquire_recursive>
 800a806:	bf00      	nop
 800a808:	20001535 	.word	0x20001535

0800a80c <__sfp_lock_release>:
 800a80c:	4801      	ldr	r0, [pc, #4]	; (800a814 <__sfp_lock_release+0x8>)
 800a80e:	f000 bab2 	b.w	800ad76 <__retarget_lock_release_recursive>
 800a812:	bf00      	nop
 800a814:	20001535 	.word	0x20001535

0800a818 <__sinit>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	f7ff fff0 	bl	800a800 <__sfp_lock_acquire>
 800a820:	6a23      	ldr	r3, [r4, #32]
 800a822:	b11b      	cbz	r3, 800a82c <__sinit+0x14>
 800a824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a828:	f7ff bff0 	b.w	800a80c <__sfp_lock_release>
 800a82c:	4b04      	ldr	r3, [pc, #16]	; (800a840 <__sinit+0x28>)
 800a82e:	6223      	str	r3, [r4, #32]
 800a830:	4b04      	ldr	r3, [pc, #16]	; (800a844 <__sinit+0x2c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f5      	bne.n	800a824 <__sinit+0xc>
 800a838:	f7ff ffc4 	bl	800a7c4 <global_stdio_init.part.0>
 800a83c:	e7f2      	b.n	800a824 <__sinit+0xc>
 800a83e:	bf00      	nop
 800a840:	0800a785 	.word	0x0800a785
 800a844:	2000152c 	.word	0x2000152c

0800a848 <_fwalk_sglue>:
 800a848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a84c:	4607      	mov	r7, r0
 800a84e:	4688      	mov	r8, r1
 800a850:	4614      	mov	r4, r2
 800a852:	2600      	movs	r6, #0
 800a854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a858:	f1b9 0901 	subs.w	r9, r9, #1
 800a85c:	d505      	bpl.n	800a86a <_fwalk_sglue+0x22>
 800a85e:	6824      	ldr	r4, [r4, #0]
 800a860:	2c00      	cmp	r4, #0
 800a862:	d1f7      	bne.n	800a854 <_fwalk_sglue+0xc>
 800a864:	4630      	mov	r0, r6
 800a866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d907      	bls.n	800a880 <_fwalk_sglue+0x38>
 800a870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a874:	3301      	adds	r3, #1
 800a876:	d003      	beq.n	800a880 <_fwalk_sglue+0x38>
 800a878:	4629      	mov	r1, r5
 800a87a:	4638      	mov	r0, r7
 800a87c:	47c0      	blx	r8
 800a87e:	4306      	orrs	r6, r0
 800a880:	3568      	adds	r5, #104	; 0x68
 800a882:	e7e9      	b.n	800a858 <_fwalk_sglue+0x10>

0800a884 <iprintf>:
 800a884:	b40f      	push	{r0, r1, r2, r3}
 800a886:	b507      	push	{r0, r1, r2, lr}
 800a888:	4906      	ldr	r1, [pc, #24]	; (800a8a4 <iprintf+0x20>)
 800a88a:	ab04      	add	r3, sp, #16
 800a88c:	6808      	ldr	r0, [r1, #0]
 800a88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a892:	6881      	ldr	r1, [r0, #8]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	f001 fd8f 	bl	800c3b8 <_vfiprintf_r>
 800a89a:	b003      	add	sp, #12
 800a89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a0:	b004      	add	sp, #16
 800a8a2:	4770      	bx	lr
 800a8a4:	2000006c 	.word	0x2000006c

0800a8a8 <_puts_r>:
 800a8a8:	6a03      	ldr	r3, [r0, #32]
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	6884      	ldr	r4, [r0, #8]
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	460e      	mov	r6, r1
 800a8b2:	b90b      	cbnz	r3, 800a8b8 <_puts_r+0x10>
 800a8b4:	f7ff ffb0 	bl	800a818 <__sinit>
 800a8b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ba:	07db      	lsls	r3, r3, #31
 800a8bc:	d405      	bmi.n	800a8ca <_puts_r+0x22>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	0598      	lsls	r0, r3, #22
 800a8c2:	d402      	bmi.n	800a8ca <_puts_r+0x22>
 800a8c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c6:	f000 fa55 	bl	800ad74 <__retarget_lock_acquire_recursive>
 800a8ca:	89a3      	ldrh	r3, [r4, #12]
 800a8cc:	0719      	lsls	r1, r3, #28
 800a8ce:	d513      	bpl.n	800a8f8 <_puts_r+0x50>
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	b18b      	cbz	r3, 800a8f8 <_puts_r+0x50>
 800a8d4:	3e01      	subs	r6, #1
 800a8d6:	68a3      	ldr	r3, [r4, #8]
 800a8d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	60a3      	str	r3, [r4, #8]
 800a8e0:	b9e9      	cbnz	r1, 800a91e <_puts_r+0x76>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	da2e      	bge.n	800a944 <_puts_r+0x9c>
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	210a      	movs	r1, #10
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f000 f931 	bl	800ab52 <__swbuf_r>
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d007      	beq.n	800a904 <_puts_r+0x5c>
 800a8f4:	250a      	movs	r5, #10
 800a8f6:	e007      	b.n	800a908 <_puts_r+0x60>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 f966 	bl	800abcc <__swsetup_r>
 800a900:	2800      	cmp	r0, #0
 800a902:	d0e7      	beq.n	800a8d4 <_puts_r+0x2c>
 800a904:	f04f 35ff 	mov.w	r5, #4294967295
 800a908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a90a:	07da      	lsls	r2, r3, #31
 800a90c:	d405      	bmi.n	800a91a <_puts_r+0x72>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	059b      	lsls	r3, r3, #22
 800a912:	d402      	bmi.n	800a91a <_puts_r+0x72>
 800a914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a916:	f000 fa2e 	bl	800ad76 <__retarget_lock_release_recursive>
 800a91a:	4628      	mov	r0, r5
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
 800a91e:	2b00      	cmp	r3, #0
 800a920:	da04      	bge.n	800a92c <_puts_r+0x84>
 800a922:	69a2      	ldr	r2, [r4, #24]
 800a924:	429a      	cmp	r2, r3
 800a926:	dc06      	bgt.n	800a936 <_puts_r+0x8e>
 800a928:	290a      	cmp	r1, #10
 800a92a:	d004      	beq.n	800a936 <_puts_r+0x8e>
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	6022      	str	r2, [r4, #0]
 800a932:	7019      	strb	r1, [r3, #0]
 800a934:	e7cf      	b.n	800a8d6 <_puts_r+0x2e>
 800a936:	4622      	mov	r2, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 f90a 	bl	800ab52 <__swbuf_r>
 800a93e:	3001      	adds	r0, #1
 800a940:	d1c9      	bne.n	800a8d6 <_puts_r+0x2e>
 800a942:	e7df      	b.n	800a904 <_puts_r+0x5c>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	250a      	movs	r5, #10
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	6022      	str	r2, [r4, #0]
 800a94c:	701d      	strb	r5, [r3, #0]
 800a94e:	e7db      	b.n	800a908 <_puts_r+0x60>

0800a950 <puts>:
 800a950:	4b02      	ldr	r3, [pc, #8]	; (800a95c <puts+0xc>)
 800a952:	4601      	mov	r1, r0
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	f7ff bfa7 	b.w	800a8a8 <_puts_r>
 800a95a:	bf00      	nop
 800a95c:	2000006c 	.word	0x2000006c

0800a960 <setbuf>:
 800a960:	fab1 f281 	clz	r2, r1
 800a964:	0952      	lsrs	r2, r2, #5
 800a966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a96a:	0052      	lsls	r2, r2, #1
 800a96c:	f000 b800 	b.w	800a970 <setvbuf>

0800a970 <setvbuf>:
 800a970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a974:	461d      	mov	r5, r3
 800a976:	4b54      	ldr	r3, [pc, #336]	; (800aac8 <setvbuf+0x158>)
 800a978:	681f      	ldr	r7, [r3, #0]
 800a97a:	4604      	mov	r4, r0
 800a97c:	460e      	mov	r6, r1
 800a97e:	4690      	mov	r8, r2
 800a980:	b127      	cbz	r7, 800a98c <setvbuf+0x1c>
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	b913      	cbnz	r3, 800a98c <setvbuf+0x1c>
 800a986:	4638      	mov	r0, r7
 800a988:	f7ff ff46 	bl	800a818 <__sinit>
 800a98c:	f1b8 0f02 	cmp.w	r8, #2
 800a990:	d006      	beq.n	800a9a0 <setvbuf+0x30>
 800a992:	f1b8 0f01 	cmp.w	r8, #1
 800a996:	f200 8094 	bhi.w	800aac2 <setvbuf+0x152>
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	f2c0 8091 	blt.w	800aac2 <setvbuf+0x152>
 800a9a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9a2:	07da      	lsls	r2, r3, #31
 800a9a4:	d405      	bmi.n	800a9b2 <setvbuf+0x42>
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	059b      	lsls	r3, r3, #22
 800a9aa:	d402      	bmi.n	800a9b2 <setvbuf+0x42>
 800a9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ae:	f000 f9e1 	bl	800ad74 <__retarget_lock_acquire_recursive>
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	4638      	mov	r0, r7
 800a9b6:	f001 fe9f 	bl	800c6f8 <_fflush_r>
 800a9ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9bc:	b141      	cbz	r1, 800a9d0 <setvbuf+0x60>
 800a9be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	d002      	beq.n	800a9cc <setvbuf+0x5c>
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	f001 f850 	bl	800ba6c <_free_r>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	6363      	str	r3, [r4, #52]	; 0x34
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61a3      	str	r3, [r4, #24]
 800a9d4:	6063      	str	r3, [r4, #4]
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	0618      	lsls	r0, r3, #24
 800a9da:	d503      	bpl.n	800a9e4 <setvbuf+0x74>
 800a9dc:	6921      	ldr	r1, [r4, #16]
 800a9de:	4638      	mov	r0, r7
 800a9e0:	f001 f844 	bl	800ba6c <_free_r>
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a9ea:	f023 0303 	bic.w	r3, r3, #3
 800a9ee:	f1b8 0f02 	cmp.w	r8, #2
 800a9f2:	81a3      	strh	r3, [r4, #12]
 800a9f4:	d05f      	beq.n	800aab6 <setvbuf+0x146>
 800a9f6:	ab01      	add	r3, sp, #4
 800a9f8:	466a      	mov	r2, sp
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	f001 fea3 	bl	800c748 <__swhatbuf_r>
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	4318      	orrs	r0, r3
 800aa06:	81a0      	strh	r0, [r4, #12]
 800aa08:	bb2d      	cbnz	r5, 800aa56 <setvbuf+0xe6>
 800aa0a:	9d00      	ldr	r5, [sp, #0]
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f001 f879 	bl	800bb04 <malloc>
 800aa12:	4606      	mov	r6, r0
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d150      	bne.n	800aaba <setvbuf+0x14a>
 800aa18:	f8dd 9000 	ldr.w	r9, [sp]
 800aa1c:	45a9      	cmp	r9, r5
 800aa1e:	d13e      	bne.n	800aa9e <setvbuf+0x12e>
 800aa20:	f04f 35ff 	mov.w	r5, #4294967295
 800aa24:	2200      	movs	r2, #0
 800aa26:	60a2      	str	r2, [r4, #8]
 800aa28:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800aa2c:	6022      	str	r2, [r4, #0]
 800aa2e:	6122      	str	r2, [r4, #16]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa36:	6162      	str	r2, [r4, #20]
 800aa38:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa3a:	f043 0302 	orr.w	r3, r3, #2
 800aa3e:	07d1      	lsls	r1, r2, #31
 800aa40:	81a3      	strh	r3, [r4, #12]
 800aa42:	d404      	bmi.n	800aa4e <setvbuf+0xde>
 800aa44:	059b      	lsls	r3, r3, #22
 800aa46:	d402      	bmi.n	800aa4e <setvbuf+0xde>
 800aa48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa4a:	f000 f994 	bl	800ad76 <__retarget_lock_release_recursive>
 800aa4e:	4628      	mov	r0, r5
 800aa50:	b003      	add	sp, #12
 800aa52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa56:	2e00      	cmp	r6, #0
 800aa58:	d0d8      	beq.n	800aa0c <setvbuf+0x9c>
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	b913      	cbnz	r3, 800aa64 <setvbuf+0xf4>
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f7ff feda 	bl	800a818 <__sinit>
 800aa64:	f1b8 0f01 	cmp.w	r8, #1
 800aa68:	bf08      	it	eq
 800aa6a:	89a3      	ldrheq	r3, [r4, #12]
 800aa6c:	6026      	str	r6, [r4, #0]
 800aa6e:	bf04      	itt	eq
 800aa70:	f043 0301 	orreq.w	r3, r3, #1
 800aa74:	81a3      	strheq	r3, [r4, #12]
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f013 0208 	ands.w	r2, r3, #8
 800aa7c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800aa80:	d01d      	beq.n	800aabe <setvbuf+0x14e>
 800aa82:	07da      	lsls	r2, r3, #31
 800aa84:	bf41      	itttt	mi
 800aa86:	2200      	movmi	r2, #0
 800aa88:	426d      	negmi	r5, r5
 800aa8a:	60a2      	strmi	r2, [r4, #8]
 800aa8c:	61a5      	strmi	r5, [r4, #24]
 800aa8e:	bf58      	it	pl
 800aa90:	60a5      	strpl	r5, [r4, #8]
 800aa92:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800aa94:	f015 0501 	ands.w	r5, r5, #1
 800aa98:	d0d4      	beq.n	800aa44 <setvbuf+0xd4>
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	e7d7      	b.n	800aa4e <setvbuf+0xde>
 800aa9e:	4648      	mov	r0, r9
 800aaa0:	f001 f830 	bl	800bb04 <malloc>
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d0ba      	beq.n	800aa20 <setvbuf+0xb0>
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	464d      	mov	r5, r9
 800aab4:	e7d1      	b.n	800aa5a <setvbuf+0xea>
 800aab6:	2500      	movs	r5, #0
 800aab8:	e7b4      	b.n	800aa24 <setvbuf+0xb4>
 800aaba:	46a9      	mov	r9, r5
 800aabc:	e7f5      	b.n	800aaaa <setvbuf+0x13a>
 800aabe:	60a2      	str	r2, [r4, #8]
 800aac0:	e7e7      	b.n	800aa92 <setvbuf+0x122>
 800aac2:	f04f 35ff 	mov.w	r5, #4294967295
 800aac6:	e7c2      	b.n	800aa4e <setvbuf+0xde>
 800aac8:	2000006c 	.word	0x2000006c

0800aacc <__sread>:
 800aacc:	b510      	push	{r4, lr}
 800aace:	460c      	mov	r4, r1
 800aad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad4:	f000 f900 	bl	800acd8 <_read_r>
 800aad8:	2800      	cmp	r0, #0
 800aada:	bfab      	itete	ge
 800aadc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aade:	89a3      	ldrhlt	r3, [r4, #12]
 800aae0:	181b      	addge	r3, r3, r0
 800aae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aae6:	bfac      	ite	ge
 800aae8:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaea:	81a3      	strhlt	r3, [r4, #12]
 800aaec:	bd10      	pop	{r4, pc}

0800aaee <__swrite>:
 800aaee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf2:	461f      	mov	r7, r3
 800aaf4:	898b      	ldrh	r3, [r1, #12]
 800aaf6:	05db      	lsls	r3, r3, #23
 800aaf8:	4605      	mov	r5, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	4616      	mov	r6, r2
 800aafe:	d505      	bpl.n	800ab0c <__swrite+0x1e>
 800ab00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab04:	2302      	movs	r3, #2
 800ab06:	2200      	movs	r2, #0
 800ab08:	f000 f8d4 	bl	800acb4 <_lseek_r>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	4632      	mov	r2, r6
 800ab1a:	463b      	mov	r3, r7
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab22:	f000 b8eb 	b.w	800acfc <_write_r>

0800ab26 <__sseek>:
 800ab26:	b510      	push	{r4, lr}
 800ab28:	460c      	mov	r4, r1
 800ab2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2e:	f000 f8c1 	bl	800acb4 <_lseek_r>
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	bf15      	itete	ne
 800ab38:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab42:	81a3      	strheq	r3, [r4, #12]
 800ab44:	bf18      	it	ne
 800ab46:	81a3      	strhne	r3, [r4, #12]
 800ab48:	bd10      	pop	{r4, pc}

0800ab4a <__sclose>:
 800ab4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4e:	f000 b8a1 	b.w	800ac94 <_close_r>

0800ab52 <__swbuf_r>:
 800ab52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab54:	460e      	mov	r6, r1
 800ab56:	4614      	mov	r4, r2
 800ab58:	4605      	mov	r5, r0
 800ab5a:	b118      	cbz	r0, 800ab64 <__swbuf_r+0x12>
 800ab5c:	6a03      	ldr	r3, [r0, #32]
 800ab5e:	b90b      	cbnz	r3, 800ab64 <__swbuf_r+0x12>
 800ab60:	f7ff fe5a 	bl	800a818 <__sinit>
 800ab64:	69a3      	ldr	r3, [r4, #24]
 800ab66:	60a3      	str	r3, [r4, #8]
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	071a      	lsls	r2, r3, #28
 800ab6c:	d525      	bpl.n	800abba <__swbuf_r+0x68>
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	b31b      	cbz	r3, 800abba <__swbuf_r+0x68>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	6922      	ldr	r2, [r4, #16]
 800ab76:	1a98      	subs	r0, r3, r2
 800ab78:	6963      	ldr	r3, [r4, #20]
 800ab7a:	b2f6      	uxtb	r6, r6
 800ab7c:	4283      	cmp	r3, r0
 800ab7e:	4637      	mov	r7, r6
 800ab80:	dc04      	bgt.n	800ab8c <__swbuf_r+0x3a>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f001 fdb7 	bl	800c6f8 <_fflush_r>
 800ab8a:	b9e0      	cbnz	r0, 800abc6 <__swbuf_r+0x74>
 800ab8c:	68a3      	ldr	r3, [r4, #8]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	60a3      	str	r3, [r4, #8]
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	701e      	strb	r6, [r3, #0]
 800ab9a:	6962      	ldr	r2, [r4, #20]
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d004      	beq.n	800abac <__swbuf_r+0x5a>
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	07db      	lsls	r3, r3, #31
 800aba6:	d506      	bpl.n	800abb6 <__swbuf_r+0x64>
 800aba8:	2e0a      	cmp	r6, #10
 800abaa:	d104      	bne.n	800abb6 <__swbuf_r+0x64>
 800abac:	4621      	mov	r1, r4
 800abae:	4628      	mov	r0, r5
 800abb0:	f001 fda2 	bl	800c6f8 <_fflush_r>
 800abb4:	b938      	cbnz	r0, 800abc6 <__swbuf_r+0x74>
 800abb6:	4638      	mov	r0, r7
 800abb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abba:	4621      	mov	r1, r4
 800abbc:	4628      	mov	r0, r5
 800abbe:	f000 f805 	bl	800abcc <__swsetup_r>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d0d5      	beq.n	800ab72 <__swbuf_r+0x20>
 800abc6:	f04f 37ff 	mov.w	r7, #4294967295
 800abca:	e7f4      	b.n	800abb6 <__swbuf_r+0x64>

0800abcc <__swsetup_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4b2a      	ldr	r3, [pc, #168]	; (800ac78 <__swsetup_r+0xac>)
 800abd0:	4605      	mov	r5, r0
 800abd2:	6818      	ldr	r0, [r3, #0]
 800abd4:	460c      	mov	r4, r1
 800abd6:	b118      	cbz	r0, 800abe0 <__swsetup_r+0x14>
 800abd8:	6a03      	ldr	r3, [r0, #32]
 800abda:	b90b      	cbnz	r3, 800abe0 <__swsetup_r+0x14>
 800abdc:	f7ff fe1c 	bl	800a818 <__sinit>
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe6:	0718      	lsls	r0, r3, #28
 800abe8:	d422      	bmi.n	800ac30 <__swsetup_r+0x64>
 800abea:	06d9      	lsls	r1, r3, #27
 800abec:	d407      	bmi.n	800abfe <__swsetup_r+0x32>
 800abee:	2309      	movs	r3, #9
 800abf0:	602b      	str	r3, [r5, #0]
 800abf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	e034      	b.n	800ac68 <__swsetup_r+0x9c>
 800abfe:	0758      	lsls	r0, r3, #29
 800ac00:	d512      	bpl.n	800ac28 <__swsetup_r+0x5c>
 800ac02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac04:	b141      	cbz	r1, 800ac18 <__swsetup_r+0x4c>
 800ac06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac0a:	4299      	cmp	r1, r3
 800ac0c:	d002      	beq.n	800ac14 <__swsetup_r+0x48>
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 ff2c 	bl	800ba6c <_free_r>
 800ac14:	2300      	movs	r3, #0
 800ac16:	6363      	str	r3, [r4, #52]	; 0x34
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	2300      	movs	r3, #0
 800ac22:	6063      	str	r3, [r4, #4]
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	6023      	str	r3, [r4, #0]
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	f043 0308 	orr.w	r3, r3, #8
 800ac2e:	81a3      	strh	r3, [r4, #12]
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	b94b      	cbnz	r3, 800ac48 <__swsetup_r+0x7c>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac3e:	d003      	beq.n	800ac48 <__swsetup_r+0x7c>
 800ac40:	4621      	mov	r1, r4
 800ac42:	4628      	mov	r0, r5
 800ac44:	f001 fda6 	bl	800c794 <__smakebuf_r>
 800ac48:	89a0      	ldrh	r0, [r4, #12]
 800ac4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac4e:	f010 0301 	ands.w	r3, r0, #1
 800ac52:	d00a      	beq.n	800ac6a <__swsetup_r+0x9e>
 800ac54:	2300      	movs	r3, #0
 800ac56:	60a3      	str	r3, [r4, #8]
 800ac58:	6963      	ldr	r3, [r4, #20]
 800ac5a:	425b      	negs	r3, r3
 800ac5c:	61a3      	str	r3, [r4, #24]
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	b943      	cbnz	r3, 800ac74 <__swsetup_r+0xa8>
 800ac62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac66:	d1c4      	bne.n	800abf2 <__swsetup_r+0x26>
 800ac68:	bd38      	pop	{r3, r4, r5, pc}
 800ac6a:	0781      	lsls	r1, r0, #30
 800ac6c:	bf58      	it	pl
 800ac6e:	6963      	ldrpl	r3, [r4, #20]
 800ac70:	60a3      	str	r3, [r4, #8]
 800ac72:	e7f4      	b.n	800ac5e <__swsetup_r+0x92>
 800ac74:	2000      	movs	r0, #0
 800ac76:	e7f7      	b.n	800ac68 <__swsetup_r+0x9c>
 800ac78:	2000006c 	.word	0x2000006c

0800ac7c <memset>:
 800ac7c:	4402      	add	r2, r0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d100      	bne.n	800ac86 <memset+0xa>
 800ac84:	4770      	bx	lr
 800ac86:	f803 1b01 	strb.w	r1, [r3], #1
 800ac8a:	e7f9      	b.n	800ac80 <memset+0x4>

0800ac8c <_localeconv_r>:
 800ac8c:	4800      	ldr	r0, [pc, #0]	; (800ac90 <_localeconv_r+0x4>)
 800ac8e:	4770      	bx	lr
 800ac90:	20000160 	.word	0x20000160

0800ac94 <_close_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	4d06      	ldr	r5, [pc, #24]	; (800acb0 <_close_r+0x1c>)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	602b      	str	r3, [r5, #0]
 800aca0:	f7fa fa34 	bl	800510c <_close>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_close_r+0x1a>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_close_r+0x1a>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	20001530 	.word	0x20001530

0800acb4 <_lseek_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d07      	ldr	r5, [pc, #28]	; (800acd4 <_lseek_r+0x20>)
 800acb8:	4604      	mov	r4, r0
 800acba:	4608      	mov	r0, r1
 800acbc:	4611      	mov	r1, r2
 800acbe:	2200      	movs	r2, #0
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f7fa fa2e 	bl	8005124 <_lseek>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_lseek_r+0x1e>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_lseek_r+0x1e>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	20001530 	.word	0x20001530

0800acd8 <_read_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d07      	ldr	r5, [pc, #28]	; (800acf8 <_read_r+0x20>)
 800acdc:	4604      	mov	r4, r0
 800acde:	4608      	mov	r0, r1
 800ace0:	4611      	mov	r1, r2
 800ace2:	2200      	movs	r2, #0
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f7fa f9f4 	bl	80050d4 <_read>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_read_r+0x1e>
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_read_r+0x1e>
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20001530 	.word	0x20001530

0800acfc <_write_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d07      	ldr	r5, [pc, #28]	; (800ad1c <_write_r+0x20>)
 800ad00:	4604      	mov	r4, r0
 800ad02:	4608      	mov	r0, r1
 800ad04:	4611      	mov	r1, r2
 800ad06:	2200      	movs	r2, #0
 800ad08:	602a      	str	r2, [r5, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f7fa f9f0 	bl	80050f0 <_write>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_write_r+0x1e>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_write_r+0x1e>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20001530 	.word	0x20001530

0800ad20 <__errno>:
 800ad20:	4b01      	ldr	r3, [pc, #4]	; (800ad28 <__errno+0x8>)
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	2000006c 	.word	0x2000006c

0800ad2c <__libc_init_array>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	4d0d      	ldr	r5, [pc, #52]	; (800ad64 <__libc_init_array+0x38>)
 800ad30:	4c0d      	ldr	r4, [pc, #52]	; (800ad68 <__libc_init_array+0x3c>)
 800ad32:	1b64      	subs	r4, r4, r5
 800ad34:	10a4      	asrs	r4, r4, #2
 800ad36:	2600      	movs	r6, #0
 800ad38:	42a6      	cmp	r6, r4
 800ad3a:	d109      	bne.n	800ad50 <__libc_init_array+0x24>
 800ad3c:	4d0b      	ldr	r5, [pc, #44]	; (800ad6c <__libc_init_array+0x40>)
 800ad3e:	4c0c      	ldr	r4, [pc, #48]	; (800ad70 <__libc_init_array+0x44>)
 800ad40:	f001 fe64 	bl	800ca0c <_init>
 800ad44:	1b64      	subs	r4, r4, r5
 800ad46:	10a4      	asrs	r4, r4, #2
 800ad48:	2600      	movs	r6, #0
 800ad4a:	42a6      	cmp	r6, r4
 800ad4c:	d105      	bne.n	800ad5a <__libc_init_array+0x2e>
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad54:	4798      	blx	r3
 800ad56:	3601      	adds	r6, #1
 800ad58:	e7ee      	b.n	800ad38 <__libc_init_array+0xc>
 800ad5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad5e:	4798      	blx	r3
 800ad60:	3601      	adds	r6, #1
 800ad62:	e7f2      	b.n	800ad4a <__libc_init_array+0x1e>
 800ad64:	0800cf64 	.word	0x0800cf64
 800ad68:	0800cf64 	.word	0x0800cf64
 800ad6c:	0800cf64 	.word	0x0800cf64
 800ad70:	0800cf68 	.word	0x0800cf68

0800ad74 <__retarget_lock_acquire_recursive>:
 800ad74:	4770      	bx	lr

0800ad76 <__retarget_lock_release_recursive>:
 800ad76:	4770      	bx	lr

0800ad78 <quorem>:
 800ad78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	6903      	ldr	r3, [r0, #16]
 800ad7e:	690c      	ldr	r4, [r1, #16]
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	4607      	mov	r7, r0
 800ad84:	db7e      	blt.n	800ae84 <quorem+0x10c>
 800ad86:	3c01      	subs	r4, #1
 800ad88:	f101 0814 	add.w	r8, r1, #20
 800ad8c:	f100 0514 	add.w	r5, r0, #20
 800ad90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	429a      	cmp	r2, r3
 800ada2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ada6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adaa:	fbb2 f6f3 	udiv	r6, r2, r3
 800adae:	d331      	bcc.n	800ae14 <quorem+0x9c>
 800adb0:	f04f 0e00 	mov.w	lr, #0
 800adb4:	4640      	mov	r0, r8
 800adb6:	46ac      	mov	ip, r5
 800adb8:	46f2      	mov	sl, lr
 800adba:	f850 2b04 	ldr.w	r2, [r0], #4
 800adbe:	b293      	uxth	r3, r2
 800adc0:	fb06 e303 	mla	r3, r6, r3, lr
 800adc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adc8:	0c1a      	lsrs	r2, r3, #16
 800adca:	b29b      	uxth	r3, r3
 800adcc:	ebaa 0303 	sub.w	r3, sl, r3
 800add0:	f8dc a000 	ldr.w	sl, [ip]
 800add4:	fa13 f38a 	uxtah	r3, r3, sl
 800add8:	fb06 220e 	mla	r2, r6, lr, r2
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	9b00      	ldr	r3, [sp, #0]
 800ade0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ade4:	b292      	uxth	r2, r2
 800ade6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adee:	f8bd 3000 	ldrh.w	r3, [sp]
 800adf2:	4581      	cmp	r9, r0
 800adf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adf8:	f84c 3b04 	str.w	r3, [ip], #4
 800adfc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae00:	d2db      	bcs.n	800adba <quorem+0x42>
 800ae02:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae06:	b92b      	cbnz	r3, 800ae14 <quorem+0x9c>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	3b04      	subs	r3, #4
 800ae0c:	429d      	cmp	r5, r3
 800ae0e:	461a      	mov	r2, r3
 800ae10:	d32c      	bcc.n	800ae6c <quorem+0xf4>
 800ae12:	613c      	str	r4, [r7, #16]
 800ae14:	4638      	mov	r0, r7
 800ae16:	f001 f9a5 	bl	800c164 <__mcmp>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	db22      	blt.n	800ae64 <quorem+0xec>
 800ae1e:	3601      	adds	r6, #1
 800ae20:	4629      	mov	r1, r5
 800ae22:	2000      	movs	r0, #0
 800ae24:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae28:	f8d1 c000 	ldr.w	ip, [r1]
 800ae2c:	b293      	uxth	r3, r2
 800ae2e:	1ac3      	subs	r3, r0, r3
 800ae30:	0c12      	lsrs	r2, r2, #16
 800ae32:	fa13 f38c 	uxtah	r3, r3, ip
 800ae36:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ae3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae44:	45c1      	cmp	r9, r8
 800ae46:	f841 3b04 	str.w	r3, [r1], #4
 800ae4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae4e:	d2e9      	bcs.n	800ae24 <quorem+0xac>
 800ae50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae58:	b922      	cbnz	r2, 800ae64 <quorem+0xec>
 800ae5a:	3b04      	subs	r3, #4
 800ae5c:	429d      	cmp	r5, r3
 800ae5e:	461a      	mov	r2, r3
 800ae60:	d30a      	bcc.n	800ae78 <quorem+0x100>
 800ae62:	613c      	str	r4, [r7, #16]
 800ae64:	4630      	mov	r0, r6
 800ae66:	b003      	add	sp, #12
 800ae68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6c:	6812      	ldr	r2, [r2, #0]
 800ae6e:	3b04      	subs	r3, #4
 800ae70:	2a00      	cmp	r2, #0
 800ae72:	d1ce      	bne.n	800ae12 <quorem+0x9a>
 800ae74:	3c01      	subs	r4, #1
 800ae76:	e7c9      	b.n	800ae0c <quorem+0x94>
 800ae78:	6812      	ldr	r2, [r2, #0]
 800ae7a:	3b04      	subs	r3, #4
 800ae7c:	2a00      	cmp	r2, #0
 800ae7e:	d1f0      	bne.n	800ae62 <quorem+0xea>
 800ae80:	3c01      	subs	r4, #1
 800ae82:	e7eb      	b.n	800ae5c <quorem+0xe4>
 800ae84:	2000      	movs	r0, #0
 800ae86:	e7ee      	b.n	800ae66 <quorem+0xee>

0800ae88 <_dtoa_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	ed2d 8b04 	vpush	{d8-d9}
 800ae90:	69c5      	ldr	r5, [r0, #28]
 800ae92:	b093      	sub	sp, #76	; 0x4c
 800ae94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae98:	ec57 6b10 	vmov	r6, r7, d0
 800ae9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aea0:	9107      	str	r1, [sp, #28]
 800aea2:	4604      	mov	r4, r0
 800aea4:	920a      	str	r2, [sp, #40]	; 0x28
 800aea6:	930d      	str	r3, [sp, #52]	; 0x34
 800aea8:	b975      	cbnz	r5, 800aec8 <_dtoa_r+0x40>
 800aeaa:	2010      	movs	r0, #16
 800aeac:	f000 fe2a 	bl	800bb04 <malloc>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	61e0      	str	r0, [r4, #28]
 800aeb4:	b920      	cbnz	r0, 800aec0 <_dtoa_r+0x38>
 800aeb6:	4bae      	ldr	r3, [pc, #696]	; (800b170 <_dtoa_r+0x2e8>)
 800aeb8:	21ef      	movs	r1, #239	; 0xef
 800aeba:	48ae      	ldr	r0, [pc, #696]	; (800b174 <_dtoa_r+0x2ec>)
 800aebc:	f001 fce6 	bl	800c88c <__assert_func>
 800aec0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aec4:	6005      	str	r5, [r0, #0]
 800aec6:	60c5      	str	r5, [r0, #12]
 800aec8:	69e3      	ldr	r3, [r4, #28]
 800aeca:	6819      	ldr	r1, [r3, #0]
 800aecc:	b151      	cbz	r1, 800aee4 <_dtoa_r+0x5c>
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	604a      	str	r2, [r1, #4]
 800aed2:	2301      	movs	r3, #1
 800aed4:	4093      	lsls	r3, r2
 800aed6:	608b      	str	r3, [r1, #8]
 800aed8:	4620      	mov	r0, r4
 800aeda:	f000 ff07 	bl	800bcec <_Bfree>
 800aede:	69e3      	ldr	r3, [r4, #28]
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	1e3b      	subs	r3, r7, #0
 800aee6:	bfbb      	ittet	lt
 800aee8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aeec:	9303      	strlt	r3, [sp, #12]
 800aeee:	2300      	movge	r3, #0
 800aef0:	2201      	movlt	r2, #1
 800aef2:	bfac      	ite	ge
 800aef4:	f8c8 3000 	strge.w	r3, [r8]
 800aef8:	f8c8 2000 	strlt.w	r2, [r8]
 800aefc:	4b9e      	ldr	r3, [pc, #632]	; (800b178 <_dtoa_r+0x2f0>)
 800aefe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af02:	ea33 0308 	bics.w	r3, r3, r8
 800af06:	d11b      	bne.n	800af40 <_dtoa_r+0xb8>
 800af08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800af14:	4333      	orrs	r3, r6
 800af16:	f000 8593 	beq.w	800ba40 <_dtoa_r+0xbb8>
 800af1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af1c:	b963      	cbnz	r3, 800af38 <_dtoa_r+0xb0>
 800af1e:	4b97      	ldr	r3, [pc, #604]	; (800b17c <_dtoa_r+0x2f4>)
 800af20:	e027      	b.n	800af72 <_dtoa_r+0xea>
 800af22:	4b97      	ldr	r3, [pc, #604]	; (800b180 <_dtoa_r+0x2f8>)
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	3308      	adds	r3, #8
 800af28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	9800      	ldr	r0, [sp, #0]
 800af2e:	b013      	add	sp, #76	; 0x4c
 800af30:	ecbd 8b04 	vpop	{d8-d9}
 800af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af38:	4b90      	ldr	r3, [pc, #576]	; (800b17c <_dtoa_r+0x2f4>)
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	3303      	adds	r3, #3
 800af3e:	e7f3      	b.n	800af28 <_dtoa_r+0xa0>
 800af40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af44:	2200      	movs	r2, #0
 800af46:	ec51 0b17 	vmov	r0, r1, d7
 800af4a:	eeb0 8a47 	vmov.f32	s16, s14
 800af4e:	eef0 8a67 	vmov.f32	s17, s15
 800af52:	2300      	movs	r3, #0
 800af54:	f7f5 fde0 	bl	8000b18 <__aeabi_dcmpeq>
 800af58:	4681      	mov	r9, r0
 800af5a:	b160      	cbz	r0, 800af76 <_dtoa_r+0xee>
 800af5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af5e:	2301      	movs	r3, #1
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 8568 	beq.w	800ba3a <_dtoa_r+0xbb2>
 800af6a:	4b86      	ldr	r3, [pc, #536]	; (800b184 <_dtoa_r+0x2fc>)
 800af6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	3b01      	subs	r3, #1
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	e7da      	b.n	800af2c <_dtoa_r+0xa4>
 800af76:	aa10      	add	r2, sp, #64	; 0x40
 800af78:	a911      	add	r1, sp, #68	; 0x44
 800af7a:	4620      	mov	r0, r4
 800af7c:	eeb0 0a48 	vmov.f32	s0, s16
 800af80:	eef0 0a68 	vmov.f32	s1, s17
 800af84:	f001 f994 	bl	800c2b0 <__d2b>
 800af88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800af8c:	4682      	mov	sl, r0
 800af8e:	2d00      	cmp	r5, #0
 800af90:	d07f      	beq.n	800b092 <_dtoa_r+0x20a>
 800af92:	ee18 3a90 	vmov	r3, s17
 800af96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800af9e:	ec51 0b18 	vmov	r0, r1, d8
 800afa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800afae:	4619      	mov	r1, r3
 800afb0:	2200      	movs	r2, #0
 800afb2:	4b75      	ldr	r3, [pc, #468]	; (800b188 <_dtoa_r+0x300>)
 800afb4:	f7f5 f990 	bl	80002d8 <__aeabi_dsub>
 800afb8:	a367      	add	r3, pc, #412	; (adr r3, 800b158 <_dtoa_r+0x2d0>)
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	f7f5 fb43 	bl	8000648 <__aeabi_dmul>
 800afc2:	a367      	add	r3, pc, #412	; (adr r3, 800b160 <_dtoa_r+0x2d8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 f988 	bl	80002dc <__adddf3>
 800afcc:	4606      	mov	r6, r0
 800afce:	4628      	mov	r0, r5
 800afd0:	460f      	mov	r7, r1
 800afd2:	f7f5 facf 	bl	8000574 <__aeabi_i2d>
 800afd6:	a364      	add	r3, pc, #400	; (adr r3, 800b168 <_dtoa_r+0x2e0>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 fb34 	bl	8000648 <__aeabi_dmul>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	f7f5 f978 	bl	80002dc <__adddf3>
 800afec:	4606      	mov	r6, r0
 800afee:	460f      	mov	r7, r1
 800aff0:	f7f5 fdda 	bl	8000ba8 <__aeabi_d2iz>
 800aff4:	2200      	movs	r2, #0
 800aff6:	4683      	mov	fp, r0
 800aff8:	2300      	movs	r3, #0
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 fd95 	bl	8000b2c <__aeabi_dcmplt>
 800b002:	b148      	cbz	r0, 800b018 <_dtoa_r+0x190>
 800b004:	4658      	mov	r0, fp
 800b006:	f7f5 fab5 	bl	8000574 <__aeabi_i2d>
 800b00a:	4632      	mov	r2, r6
 800b00c:	463b      	mov	r3, r7
 800b00e:	f7f5 fd83 	bl	8000b18 <__aeabi_dcmpeq>
 800b012:	b908      	cbnz	r0, 800b018 <_dtoa_r+0x190>
 800b014:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b018:	f1bb 0f16 	cmp.w	fp, #22
 800b01c:	d857      	bhi.n	800b0ce <_dtoa_r+0x246>
 800b01e:	4b5b      	ldr	r3, [pc, #364]	; (800b18c <_dtoa_r+0x304>)
 800b020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	ec51 0b18 	vmov	r0, r1, d8
 800b02c:	f7f5 fd7e 	bl	8000b2c <__aeabi_dcmplt>
 800b030:	2800      	cmp	r0, #0
 800b032:	d04e      	beq.n	800b0d2 <_dtoa_r+0x24a>
 800b034:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b038:	2300      	movs	r3, #0
 800b03a:	930c      	str	r3, [sp, #48]	; 0x30
 800b03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b03e:	1b5b      	subs	r3, r3, r5
 800b040:	1e5a      	subs	r2, r3, #1
 800b042:	bf45      	ittet	mi
 800b044:	f1c3 0301 	rsbmi	r3, r3, #1
 800b048:	9305      	strmi	r3, [sp, #20]
 800b04a:	2300      	movpl	r3, #0
 800b04c:	2300      	movmi	r3, #0
 800b04e:	9206      	str	r2, [sp, #24]
 800b050:	bf54      	ite	pl
 800b052:	9305      	strpl	r3, [sp, #20]
 800b054:	9306      	strmi	r3, [sp, #24]
 800b056:	f1bb 0f00 	cmp.w	fp, #0
 800b05a:	db3c      	blt.n	800b0d6 <_dtoa_r+0x24e>
 800b05c:	9b06      	ldr	r3, [sp, #24]
 800b05e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b062:	445b      	add	r3, fp
 800b064:	9306      	str	r3, [sp, #24]
 800b066:	2300      	movs	r3, #0
 800b068:	9308      	str	r3, [sp, #32]
 800b06a:	9b07      	ldr	r3, [sp, #28]
 800b06c:	2b09      	cmp	r3, #9
 800b06e:	d868      	bhi.n	800b142 <_dtoa_r+0x2ba>
 800b070:	2b05      	cmp	r3, #5
 800b072:	bfc4      	itt	gt
 800b074:	3b04      	subgt	r3, #4
 800b076:	9307      	strgt	r3, [sp, #28]
 800b078:	9b07      	ldr	r3, [sp, #28]
 800b07a:	f1a3 0302 	sub.w	r3, r3, #2
 800b07e:	bfcc      	ite	gt
 800b080:	2500      	movgt	r5, #0
 800b082:	2501      	movle	r5, #1
 800b084:	2b03      	cmp	r3, #3
 800b086:	f200 8085 	bhi.w	800b194 <_dtoa_r+0x30c>
 800b08a:	e8df f003 	tbb	[pc, r3]
 800b08e:	3b2e      	.short	0x3b2e
 800b090:	5839      	.short	0x5839
 800b092:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b096:	441d      	add	r5, r3
 800b098:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b09c:	2b20      	cmp	r3, #32
 800b09e:	bfc1      	itttt	gt
 800b0a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b0a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b0ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b0b0:	bfd6      	itet	le
 800b0b2:	f1c3 0320 	rsble	r3, r3, #32
 800b0b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b0ba:	fa06 f003 	lslle.w	r0, r6, r3
 800b0be:	f7f5 fa49 	bl	8000554 <__aeabi_ui2d>
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b0c8:	3d01      	subs	r5, #1
 800b0ca:	920e      	str	r2, [sp, #56]	; 0x38
 800b0cc:	e76f      	b.n	800afae <_dtoa_r+0x126>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e7b3      	b.n	800b03a <_dtoa_r+0x1b2>
 800b0d2:	900c      	str	r0, [sp, #48]	; 0x30
 800b0d4:	e7b2      	b.n	800b03c <_dtoa_r+0x1b4>
 800b0d6:	9b05      	ldr	r3, [sp, #20]
 800b0d8:	eba3 030b 	sub.w	r3, r3, fp
 800b0dc:	9305      	str	r3, [sp, #20]
 800b0de:	f1cb 0300 	rsb	r3, fp, #0
 800b0e2:	9308      	str	r3, [sp, #32]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0e8:	e7bf      	b.n	800b06a <_dtoa_r+0x1e2>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	dc52      	bgt.n	800b19a <_dtoa_r+0x312>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	9301      	str	r3, [sp, #4]
 800b0f8:	9304      	str	r3, [sp, #16]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b0fe:	e00b      	b.n	800b118 <_dtoa_r+0x290>
 800b100:	2301      	movs	r3, #1
 800b102:	e7f3      	b.n	800b0ec <_dtoa_r+0x264>
 800b104:	2300      	movs	r3, #0
 800b106:	9309      	str	r3, [sp, #36]	; 0x24
 800b108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10a:	445b      	add	r3, fp
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	3301      	adds	r3, #1
 800b110:	2b01      	cmp	r3, #1
 800b112:	9304      	str	r3, [sp, #16]
 800b114:	bfb8      	it	lt
 800b116:	2301      	movlt	r3, #1
 800b118:	69e0      	ldr	r0, [r4, #28]
 800b11a:	2100      	movs	r1, #0
 800b11c:	2204      	movs	r2, #4
 800b11e:	f102 0614 	add.w	r6, r2, #20
 800b122:	429e      	cmp	r6, r3
 800b124:	d93d      	bls.n	800b1a2 <_dtoa_r+0x31a>
 800b126:	6041      	str	r1, [r0, #4]
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 fd9f 	bl	800bc6c <_Balloc>
 800b12e:	9000      	str	r0, [sp, #0]
 800b130:	2800      	cmp	r0, #0
 800b132:	d139      	bne.n	800b1a8 <_dtoa_r+0x320>
 800b134:	4b16      	ldr	r3, [pc, #88]	; (800b190 <_dtoa_r+0x308>)
 800b136:	4602      	mov	r2, r0
 800b138:	f240 11af 	movw	r1, #431	; 0x1af
 800b13c:	e6bd      	b.n	800aeba <_dtoa_r+0x32>
 800b13e:	2301      	movs	r3, #1
 800b140:	e7e1      	b.n	800b106 <_dtoa_r+0x27e>
 800b142:	2501      	movs	r5, #1
 800b144:	2300      	movs	r3, #0
 800b146:	9307      	str	r3, [sp, #28]
 800b148:	9509      	str	r5, [sp, #36]	; 0x24
 800b14a:	f04f 33ff 	mov.w	r3, #4294967295
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	2200      	movs	r2, #0
 800b154:	2312      	movs	r3, #18
 800b156:	e7d1      	b.n	800b0fc <_dtoa_r+0x274>
 800b158:	636f4361 	.word	0x636f4361
 800b15c:	3fd287a7 	.word	0x3fd287a7
 800b160:	8b60c8b3 	.word	0x8b60c8b3
 800b164:	3fc68a28 	.word	0x3fc68a28
 800b168:	509f79fb 	.word	0x509f79fb
 800b16c:	3fd34413 	.word	0x3fd34413
 800b170:	0800cc2d 	.word	0x0800cc2d
 800b174:	0800cc44 	.word	0x0800cc44
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	0800cc29 	.word	0x0800cc29
 800b180:	0800cc20 	.word	0x0800cc20
 800b184:	0800cbfd 	.word	0x0800cbfd
 800b188:	3ff80000 	.word	0x3ff80000
 800b18c:	0800cd30 	.word	0x0800cd30
 800b190:	0800cc9c 	.word	0x0800cc9c
 800b194:	2301      	movs	r3, #1
 800b196:	9309      	str	r3, [sp, #36]	; 0x24
 800b198:	e7d7      	b.n	800b14a <_dtoa_r+0x2c2>
 800b19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	e7ba      	b.n	800b118 <_dtoa_r+0x290>
 800b1a2:	3101      	adds	r1, #1
 800b1a4:	0052      	lsls	r2, r2, #1
 800b1a6:	e7ba      	b.n	800b11e <_dtoa_r+0x296>
 800b1a8:	69e3      	ldr	r3, [r4, #28]
 800b1aa:	9a00      	ldr	r2, [sp, #0]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	9b04      	ldr	r3, [sp, #16]
 800b1b0:	2b0e      	cmp	r3, #14
 800b1b2:	f200 80a8 	bhi.w	800b306 <_dtoa_r+0x47e>
 800b1b6:	2d00      	cmp	r5, #0
 800b1b8:	f000 80a5 	beq.w	800b306 <_dtoa_r+0x47e>
 800b1bc:	f1bb 0f00 	cmp.w	fp, #0
 800b1c0:	dd38      	ble.n	800b234 <_dtoa_r+0x3ac>
 800b1c2:	4bc0      	ldr	r3, [pc, #768]	; (800b4c4 <_dtoa_r+0x63c>)
 800b1c4:	f00b 020f 	and.w	r2, fp, #15
 800b1c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b1d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b1d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b1d8:	d019      	beq.n	800b20e <_dtoa_r+0x386>
 800b1da:	4bbb      	ldr	r3, [pc, #748]	; (800b4c8 <_dtoa_r+0x640>)
 800b1dc:	ec51 0b18 	vmov	r0, r1, d8
 800b1e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1e4:	f7f5 fb5a 	bl	800089c <__aeabi_ddiv>
 800b1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ec:	f008 080f 	and.w	r8, r8, #15
 800b1f0:	2503      	movs	r5, #3
 800b1f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b4c8 <_dtoa_r+0x640>
 800b1f6:	f1b8 0f00 	cmp.w	r8, #0
 800b1fa:	d10a      	bne.n	800b212 <_dtoa_r+0x38a>
 800b1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b200:	4632      	mov	r2, r6
 800b202:	463b      	mov	r3, r7
 800b204:	f7f5 fb4a 	bl	800089c <__aeabi_ddiv>
 800b208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b20c:	e02b      	b.n	800b266 <_dtoa_r+0x3de>
 800b20e:	2502      	movs	r5, #2
 800b210:	e7ef      	b.n	800b1f2 <_dtoa_r+0x36a>
 800b212:	f018 0f01 	tst.w	r8, #1
 800b216:	d008      	beq.n	800b22a <_dtoa_r+0x3a2>
 800b218:	4630      	mov	r0, r6
 800b21a:	4639      	mov	r1, r7
 800b21c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b220:	f7f5 fa12 	bl	8000648 <__aeabi_dmul>
 800b224:	3501      	adds	r5, #1
 800b226:	4606      	mov	r6, r0
 800b228:	460f      	mov	r7, r1
 800b22a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b22e:	f109 0908 	add.w	r9, r9, #8
 800b232:	e7e0      	b.n	800b1f6 <_dtoa_r+0x36e>
 800b234:	f000 809f 	beq.w	800b376 <_dtoa_r+0x4ee>
 800b238:	f1cb 0600 	rsb	r6, fp, #0
 800b23c:	4ba1      	ldr	r3, [pc, #644]	; (800b4c4 <_dtoa_r+0x63c>)
 800b23e:	4fa2      	ldr	r7, [pc, #648]	; (800b4c8 <_dtoa_r+0x640>)
 800b240:	f006 020f 	and.w	r2, r6, #15
 800b244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	ec51 0b18 	vmov	r0, r1, d8
 800b250:	f7f5 f9fa 	bl	8000648 <__aeabi_dmul>
 800b254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b258:	1136      	asrs	r6, r6, #4
 800b25a:	2300      	movs	r3, #0
 800b25c:	2502      	movs	r5, #2
 800b25e:	2e00      	cmp	r6, #0
 800b260:	d17e      	bne.n	800b360 <_dtoa_r+0x4d8>
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1d0      	bne.n	800b208 <_dtoa_r+0x380>
 800b266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b268:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 8084 	beq.w	800b37a <_dtoa_r+0x4f2>
 800b272:	4b96      	ldr	r3, [pc, #600]	; (800b4cc <_dtoa_r+0x644>)
 800b274:	2200      	movs	r2, #0
 800b276:	4640      	mov	r0, r8
 800b278:	4649      	mov	r1, r9
 800b27a:	f7f5 fc57 	bl	8000b2c <__aeabi_dcmplt>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d07b      	beq.n	800b37a <_dtoa_r+0x4f2>
 800b282:	9b04      	ldr	r3, [sp, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d078      	beq.n	800b37a <_dtoa_r+0x4f2>
 800b288:	9b01      	ldr	r3, [sp, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dd39      	ble.n	800b302 <_dtoa_r+0x47a>
 800b28e:	4b90      	ldr	r3, [pc, #576]	; (800b4d0 <_dtoa_r+0x648>)
 800b290:	2200      	movs	r2, #0
 800b292:	4640      	mov	r0, r8
 800b294:	4649      	mov	r1, r9
 800b296:	f7f5 f9d7 	bl	8000648 <__aeabi_dmul>
 800b29a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b29e:	9e01      	ldr	r6, [sp, #4]
 800b2a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f7f5 f962 	bl	8000574 <__aeabi_i2d>
 800b2b0:	4642      	mov	r2, r8
 800b2b2:	464b      	mov	r3, r9
 800b2b4:	f7f5 f9c8 	bl	8000648 <__aeabi_dmul>
 800b2b8:	4b86      	ldr	r3, [pc, #536]	; (800b4d4 <_dtoa_r+0x64c>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f7f5 f80e 	bl	80002dc <__adddf3>
 800b2c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b2c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c8:	9303      	str	r3, [sp, #12]
 800b2ca:	2e00      	cmp	r6, #0
 800b2cc:	d158      	bne.n	800b380 <_dtoa_r+0x4f8>
 800b2ce:	4b82      	ldr	r3, [pc, #520]	; (800b4d8 <_dtoa_r+0x650>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	f7f4 ffff 	bl	80002d8 <__aeabi_dsub>
 800b2da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2de:	4680      	mov	r8, r0
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	f7f5 fc41 	bl	8000b68 <__aeabi_dcmpgt>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f040 8296 	bne.w	800b818 <_dtoa_r+0x990>
 800b2ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	f7f5 fc18 	bl	8000b2c <__aeabi_dcmplt>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f040 8289 	bne.w	800b814 <_dtoa_r+0x98c>
 800b302:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f2c0 814e 	blt.w	800b5aa <_dtoa_r+0x722>
 800b30e:	f1bb 0f0e 	cmp.w	fp, #14
 800b312:	f300 814a 	bgt.w	800b5aa <_dtoa_r+0x722>
 800b316:	4b6b      	ldr	r3, [pc, #428]	; (800b4c4 <_dtoa_r+0x63c>)
 800b318:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b31c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b322:	2b00      	cmp	r3, #0
 800b324:	f280 80dc 	bge.w	800b4e0 <_dtoa_r+0x658>
 800b328:	9b04      	ldr	r3, [sp, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f300 80d8 	bgt.w	800b4e0 <_dtoa_r+0x658>
 800b330:	f040 826f 	bne.w	800b812 <_dtoa_r+0x98a>
 800b334:	4b68      	ldr	r3, [pc, #416]	; (800b4d8 <_dtoa_r+0x650>)
 800b336:	2200      	movs	r2, #0
 800b338:	4640      	mov	r0, r8
 800b33a:	4649      	mov	r1, r9
 800b33c:	f7f5 f984 	bl	8000648 <__aeabi_dmul>
 800b340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b344:	f7f5 fc06 	bl	8000b54 <__aeabi_dcmpge>
 800b348:	9e04      	ldr	r6, [sp, #16]
 800b34a:	4637      	mov	r7, r6
 800b34c:	2800      	cmp	r0, #0
 800b34e:	f040 8245 	bne.w	800b7dc <_dtoa_r+0x954>
 800b352:	9d00      	ldr	r5, [sp, #0]
 800b354:	2331      	movs	r3, #49	; 0x31
 800b356:	f805 3b01 	strb.w	r3, [r5], #1
 800b35a:	f10b 0b01 	add.w	fp, fp, #1
 800b35e:	e241      	b.n	800b7e4 <_dtoa_r+0x95c>
 800b360:	07f2      	lsls	r2, r6, #31
 800b362:	d505      	bpl.n	800b370 <_dtoa_r+0x4e8>
 800b364:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b368:	f7f5 f96e 	bl	8000648 <__aeabi_dmul>
 800b36c:	3501      	adds	r5, #1
 800b36e:	2301      	movs	r3, #1
 800b370:	1076      	asrs	r6, r6, #1
 800b372:	3708      	adds	r7, #8
 800b374:	e773      	b.n	800b25e <_dtoa_r+0x3d6>
 800b376:	2502      	movs	r5, #2
 800b378:	e775      	b.n	800b266 <_dtoa_r+0x3de>
 800b37a:	9e04      	ldr	r6, [sp, #16]
 800b37c:	465f      	mov	r7, fp
 800b37e:	e792      	b.n	800b2a6 <_dtoa_r+0x41e>
 800b380:	9900      	ldr	r1, [sp, #0]
 800b382:	4b50      	ldr	r3, [pc, #320]	; (800b4c4 <_dtoa_r+0x63c>)
 800b384:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b388:	4431      	add	r1, r6
 800b38a:	9102      	str	r1, [sp, #8]
 800b38c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b38e:	eeb0 9a47 	vmov.f32	s18, s14
 800b392:	eef0 9a67 	vmov.f32	s19, s15
 800b396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b39a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b39e:	2900      	cmp	r1, #0
 800b3a0:	d044      	beq.n	800b42c <_dtoa_r+0x5a4>
 800b3a2:	494e      	ldr	r1, [pc, #312]	; (800b4dc <_dtoa_r+0x654>)
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	f7f5 fa79 	bl	800089c <__aeabi_ddiv>
 800b3aa:	ec53 2b19 	vmov	r2, r3, d9
 800b3ae:	f7f4 ff93 	bl	80002d8 <__aeabi_dsub>
 800b3b2:	9d00      	ldr	r5, [sp, #0]
 800b3b4:	ec41 0b19 	vmov	d9, r0, r1
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	f7f5 fbf4 	bl	8000ba8 <__aeabi_d2iz>
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	f7f5 f8d7 	bl	8000574 <__aeabi_i2d>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	f7f4 ff83 	bl	80002d8 <__aeabi_dsub>
 800b3d2:	3630      	adds	r6, #48	; 0x30
 800b3d4:	f805 6b01 	strb.w	r6, [r5], #1
 800b3d8:	ec53 2b19 	vmov	r2, r3, d9
 800b3dc:	4680      	mov	r8, r0
 800b3de:	4689      	mov	r9, r1
 800b3e0:	f7f5 fba4 	bl	8000b2c <__aeabi_dcmplt>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d164      	bne.n	800b4b2 <_dtoa_r+0x62a>
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	464b      	mov	r3, r9
 800b3ec:	4937      	ldr	r1, [pc, #220]	; (800b4cc <_dtoa_r+0x644>)
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f7f4 ff72 	bl	80002d8 <__aeabi_dsub>
 800b3f4:	ec53 2b19 	vmov	r2, r3, d9
 800b3f8:	f7f5 fb98 	bl	8000b2c <__aeabi_dcmplt>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f040 80b6 	bne.w	800b56e <_dtoa_r+0x6e6>
 800b402:	9b02      	ldr	r3, [sp, #8]
 800b404:	429d      	cmp	r5, r3
 800b406:	f43f af7c 	beq.w	800b302 <_dtoa_r+0x47a>
 800b40a:	4b31      	ldr	r3, [pc, #196]	; (800b4d0 <_dtoa_r+0x648>)
 800b40c:	ec51 0b19 	vmov	r0, r1, d9
 800b410:	2200      	movs	r2, #0
 800b412:	f7f5 f919 	bl	8000648 <__aeabi_dmul>
 800b416:	4b2e      	ldr	r3, [pc, #184]	; (800b4d0 <_dtoa_r+0x648>)
 800b418:	ec41 0b19 	vmov	d9, r0, r1
 800b41c:	2200      	movs	r2, #0
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f5 f911 	bl	8000648 <__aeabi_dmul>
 800b426:	4680      	mov	r8, r0
 800b428:	4689      	mov	r9, r1
 800b42a:	e7c5      	b.n	800b3b8 <_dtoa_r+0x530>
 800b42c:	ec51 0b17 	vmov	r0, r1, d7
 800b430:	f7f5 f90a 	bl	8000648 <__aeabi_dmul>
 800b434:	9b02      	ldr	r3, [sp, #8]
 800b436:	9d00      	ldr	r5, [sp, #0]
 800b438:	930f      	str	r3, [sp, #60]	; 0x3c
 800b43a:	ec41 0b19 	vmov	d9, r0, r1
 800b43e:	4649      	mov	r1, r9
 800b440:	4640      	mov	r0, r8
 800b442:	f7f5 fbb1 	bl	8000ba8 <__aeabi_d2iz>
 800b446:	4606      	mov	r6, r0
 800b448:	f7f5 f894 	bl	8000574 <__aeabi_i2d>
 800b44c:	3630      	adds	r6, #48	; 0x30
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	4640      	mov	r0, r8
 800b454:	4649      	mov	r1, r9
 800b456:	f7f4 ff3f 	bl	80002d8 <__aeabi_dsub>
 800b45a:	f805 6b01 	strb.w	r6, [r5], #1
 800b45e:	9b02      	ldr	r3, [sp, #8]
 800b460:	429d      	cmp	r5, r3
 800b462:	4680      	mov	r8, r0
 800b464:	4689      	mov	r9, r1
 800b466:	f04f 0200 	mov.w	r2, #0
 800b46a:	d124      	bne.n	800b4b6 <_dtoa_r+0x62e>
 800b46c:	4b1b      	ldr	r3, [pc, #108]	; (800b4dc <_dtoa_r+0x654>)
 800b46e:	ec51 0b19 	vmov	r0, r1, d9
 800b472:	f7f4 ff33 	bl	80002dc <__adddf3>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f5 fb73 	bl	8000b68 <__aeabi_dcmpgt>
 800b482:	2800      	cmp	r0, #0
 800b484:	d173      	bne.n	800b56e <_dtoa_r+0x6e6>
 800b486:	ec53 2b19 	vmov	r2, r3, d9
 800b48a:	4914      	ldr	r1, [pc, #80]	; (800b4dc <_dtoa_r+0x654>)
 800b48c:	2000      	movs	r0, #0
 800b48e:	f7f4 ff23 	bl	80002d8 <__aeabi_dsub>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	4640      	mov	r0, r8
 800b498:	4649      	mov	r1, r9
 800b49a:	f7f5 fb47 	bl	8000b2c <__aeabi_dcmplt>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f43f af2f 	beq.w	800b302 <_dtoa_r+0x47a>
 800b4a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4a6:	1e6b      	subs	r3, r5, #1
 800b4a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4ae:	2b30      	cmp	r3, #48	; 0x30
 800b4b0:	d0f8      	beq.n	800b4a4 <_dtoa_r+0x61c>
 800b4b2:	46bb      	mov	fp, r7
 800b4b4:	e04a      	b.n	800b54c <_dtoa_r+0x6c4>
 800b4b6:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <_dtoa_r+0x648>)
 800b4b8:	f7f5 f8c6 	bl	8000648 <__aeabi_dmul>
 800b4bc:	4680      	mov	r8, r0
 800b4be:	4689      	mov	r9, r1
 800b4c0:	e7bd      	b.n	800b43e <_dtoa_r+0x5b6>
 800b4c2:	bf00      	nop
 800b4c4:	0800cd30 	.word	0x0800cd30
 800b4c8:	0800cd08 	.word	0x0800cd08
 800b4cc:	3ff00000 	.word	0x3ff00000
 800b4d0:	40240000 	.word	0x40240000
 800b4d4:	401c0000 	.word	0x401c0000
 800b4d8:	40140000 	.word	0x40140000
 800b4dc:	3fe00000 	.word	0x3fe00000
 800b4e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4e4:	9d00      	ldr	r5, [sp, #0]
 800b4e6:	4642      	mov	r2, r8
 800b4e8:	464b      	mov	r3, r9
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	f7f5 f9d5 	bl	800089c <__aeabi_ddiv>
 800b4f2:	f7f5 fb59 	bl	8000ba8 <__aeabi_d2iz>
 800b4f6:	9001      	str	r0, [sp, #4]
 800b4f8:	f7f5 f83c 	bl	8000574 <__aeabi_i2d>
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	464b      	mov	r3, r9
 800b500:	f7f5 f8a2 	bl	8000648 <__aeabi_dmul>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 fee4 	bl	80002d8 <__aeabi_dsub>
 800b510:	9e01      	ldr	r6, [sp, #4]
 800b512:	9f04      	ldr	r7, [sp, #16]
 800b514:	3630      	adds	r6, #48	; 0x30
 800b516:	f805 6b01 	strb.w	r6, [r5], #1
 800b51a:	9e00      	ldr	r6, [sp, #0]
 800b51c:	1bae      	subs	r6, r5, r6
 800b51e:	42b7      	cmp	r7, r6
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	d134      	bne.n	800b590 <_dtoa_r+0x708>
 800b526:	f7f4 fed9 	bl	80002dc <__adddf3>
 800b52a:	4642      	mov	r2, r8
 800b52c:	464b      	mov	r3, r9
 800b52e:	4606      	mov	r6, r0
 800b530:	460f      	mov	r7, r1
 800b532:	f7f5 fb19 	bl	8000b68 <__aeabi_dcmpgt>
 800b536:	b9c8      	cbnz	r0, 800b56c <_dtoa_r+0x6e4>
 800b538:	4642      	mov	r2, r8
 800b53a:	464b      	mov	r3, r9
 800b53c:	4630      	mov	r0, r6
 800b53e:	4639      	mov	r1, r7
 800b540:	f7f5 faea 	bl	8000b18 <__aeabi_dcmpeq>
 800b544:	b110      	cbz	r0, 800b54c <_dtoa_r+0x6c4>
 800b546:	9b01      	ldr	r3, [sp, #4]
 800b548:	07db      	lsls	r3, r3, #31
 800b54a:	d40f      	bmi.n	800b56c <_dtoa_r+0x6e4>
 800b54c:	4651      	mov	r1, sl
 800b54e:	4620      	mov	r0, r4
 800b550:	f000 fbcc 	bl	800bcec <_Bfree>
 800b554:	2300      	movs	r3, #0
 800b556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b558:	702b      	strb	r3, [r5, #0]
 800b55a:	f10b 0301 	add.w	r3, fp, #1
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b562:	2b00      	cmp	r3, #0
 800b564:	f43f ace2 	beq.w	800af2c <_dtoa_r+0xa4>
 800b568:	601d      	str	r5, [r3, #0]
 800b56a:	e4df      	b.n	800af2c <_dtoa_r+0xa4>
 800b56c:	465f      	mov	r7, fp
 800b56e:	462b      	mov	r3, r5
 800b570:	461d      	mov	r5, r3
 800b572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b576:	2a39      	cmp	r2, #57	; 0x39
 800b578:	d106      	bne.n	800b588 <_dtoa_r+0x700>
 800b57a:	9a00      	ldr	r2, [sp, #0]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d1f7      	bne.n	800b570 <_dtoa_r+0x6e8>
 800b580:	9900      	ldr	r1, [sp, #0]
 800b582:	2230      	movs	r2, #48	; 0x30
 800b584:	3701      	adds	r7, #1
 800b586:	700a      	strb	r2, [r1, #0]
 800b588:	781a      	ldrb	r2, [r3, #0]
 800b58a:	3201      	adds	r2, #1
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	e790      	b.n	800b4b2 <_dtoa_r+0x62a>
 800b590:	4ba3      	ldr	r3, [pc, #652]	; (800b820 <_dtoa_r+0x998>)
 800b592:	2200      	movs	r2, #0
 800b594:	f7f5 f858 	bl	8000648 <__aeabi_dmul>
 800b598:	2200      	movs	r2, #0
 800b59a:	2300      	movs	r3, #0
 800b59c:	4606      	mov	r6, r0
 800b59e:	460f      	mov	r7, r1
 800b5a0:	f7f5 faba 	bl	8000b18 <__aeabi_dcmpeq>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d09e      	beq.n	800b4e6 <_dtoa_r+0x65e>
 800b5a8:	e7d0      	b.n	800b54c <_dtoa_r+0x6c4>
 800b5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ac:	2a00      	cmp	r2, #0
 800b5ae:	f000 80ca 	beq.w	800b746 <_dtoa_r+0x8be>
 800b5b2:	9a07      	ldr	r2, [sp, #28]
 800b5b4:	2a01      	cmp	r2, #1
 800b5b6:	f300 80ad 	bgt.w	800b714 <_dtoa_r+0x88c>
 800b5ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	f000 80a5 	beq.w	800b70c <_dtoa_r+0x884>
 800b5c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5c6:	9e08      	ldr	r6, [sp, #32]
 800b5c8:	9d05      	ldr	r5, [sp, #20]
 800b5ca:	9a05      	ldr	r2, [sp, #20]
 800b5cc:	441a      	add	r2, r3
 800b5ce:	9205      	str	r2, [sp, #20]
 800b5d0:	9a06      	ldr	r2, [sp, #24]
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	441a      	add	r2, r3
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	9206      	str	r2, [sp, #24]
 800b5da:	f000 fc3d 	bl	800be58 <__i2b>
 800b5de:	4607      	mov	r7, r0
 800b5e0:	b165      	cbz	r5, 800b5fc <_dtoa_r+0x774>
 800b5e2:	9b06      	ldr	r3, [sp, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dd09      	ble.n	800b5fc <_dtoa_r+0x774>
 800b5e8:	42ab      	cmp	r3, r5
 800b5ea:	9a05      	ldr	r2, [sp, #20]
 800b5ec:	bfa8      	it	ge
 800b5ee:	462b      	movge	r3, r5
 800b5f0:	1ad2      	subs	r2, r2, r3
 800b5f2:	9205      	str	r2, [sp, #20]
 800b5f4:	9a06      	ldr	r2, [sp, #24]
 800b5f6:	1aed      	subs	r5, r5, r3
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	9306      	str	r3, [sp, #24]
 800b5fc:	9b08      	ldr	r3, [sp, #32]
 800b5fe:	b1f3      	cbz	r3, 800b63e <_dtoa_r+0x7b6>
 800b600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 80a3 	beq.w	800b74e <_dtoa_r+0x8c6>
 800b608:	2e00      	cmp	r6, #0
 800b60a:	dd10      	ble.n	800b62e <_dtoa_r+0x7a6>
 800b60c:	4639      	mov	r1, r7
 800b60e:	4632      	mov	r2, r6
 800b610:	4620      	mov	r0, r4
 800b612:	f000 fce1 	bl	800bfd8 <__pow5mult>
 800b616:	4652      	mov	r2, sl
 800b618:	4601      	mov	r1, r0
 800b61a:	4607      	mov	r7, r0
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fc31 	bl	800be84 <__multiply>
 800b622:	4651      	mov	r1, sl
 800b624:	4680      	mov	r8, r0
 800b626:	4620      	mov	r0, r4
 800b628:	f000 fb60 	bl	800bcec <_Bfree>
 800b62c:	46c2      	mov	sl, r8
 800b62e:	9b08      	ldr	r3, [sp, #32]
 800b630:	1b9a      	subs	r2, r3, r6
 800b632:	d004      	beq.n	800b63e <_dtoa_r+0x7b6>
 800b634:	4651      	mov	r1, sl
 800b636:	4620      	mov	r0, r4
 800b638:	f000 fcce 	bl	800bfd8 <__pow5mult>
 800b63c:	4682      	mov	sl, r0
 800b63e:	2101      	movs	r1, #1
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fc09 	bl	800be58 <__i2b>
 800b646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b648:	2b00      	cmp	r3, #0
 800b64a:	4606      	mov	r6, r0
 800b64c:	f340 8081 	ble.w	800b752 <_dtoa_r+0x8ca>
 800b650:	461a      	mov	r2, r3
 800b652:	4601      	mov	r1, r0
 800b654:	4620      	mov	r0, r4
 800b656:	f000 fcbf 	bl	800bfd8 <__pow5mult>
 800b65a:	9b07      	ldr	r3, [sp, #28]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	4606      	mov	r6, r0
 800b660:	dd7a      	ble.n	800b758 <_dtoa_r+0x8d0>
 800b662:	f04f 0800 	mov.w	r8, #0
 800b666:	6933      	ldr	r3, [r6, #16]
 800b668:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b66c:	6918      	ldr	r0, [r3, #16]
 800b66e:	f000 fba5 	bl	800bdbc <__hi0bits>
 800b672:	f1c0 0020 	rsb	r0, r0, #32
 800b676:	9b06      	ldr	r3, [sp, #24]
 800b678:	4418      	add	r0, r3
 800b67a:	f010 001f 	ands.w	r0, r0, #31
 800b67e:	f000 8094 	beq.w	800b7aa <_dtoa_r+0x922>
 800b682:	f1c0 0320 	rsb	r3, r0, #32
 800b686:	2b04      	cmp	r3, #4
 800b688:	f340 8085 	ble.w	800b796 <_dtoa_r+0x90e>
 800b68c:	9b05      	ldr	r3, [sp, #20]
 800b68e:	f1c0 001c 	rsb	r0, r0, #28
 800b692:	4403      	add	r3, r0
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	9b06      	ldr	r3, [sp, #24]
 800b698:	4403      	add	r3, r0
 800b69a:	4405      	add	r5, r0
 800b69c:	9306      	str	r3, [sp, #24]
 800b69e:	9b05      	ldr	r3, [sp, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	dd05      	ble.n	800b6b0 <_dtoa_r+0x828>
 800b6a4:	4651      	mov	r1, sl
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fcef 	bl	800c08c <__lshift>
 800b6ae:	4682      	mov	sl, r0
 800b6b0:	9b06      	ldr	r3, [sp, #24]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	dd05      	ble.n	800b6c2 <_dtoa_r+0x83a>
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 fce6 	bl	800c08c <__lshift>
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d072      	beq.n	800b7ae <_dtoa_r+0x926>
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	f000 fd4a 	bl	800c164 <__mcmp>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	da6c      	bge.n	800b7ae <_dtoa_r+0x926>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4651      	mov	r1, sl
 800b6d8:	220a      	movs	r2, #10
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 fb28 	bl	800bd30 <__multadd>
 800b6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6e6:	4682      	mov	sl, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f000 81b0 	beq.w	800ba4e <_dtoa_r+0xbc6>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	220a      	movs	r2, #10
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f000 fb1b 	bl	800bd30 <__multadd>
 800b6fa:	9b01      	ldr	r3, [sp, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	4607      	mov	r7, r0
 800b700:	f300 8096 	bgt.w	800b830 <_dtoa_r+0x9a8>
 800b704:	9b07      	ldr	r3, [sp, #28]
 800b706:	2b02      	cmp	r3, #2
 800b708:	dc59      	bgt.n	800b7be <_dtoa_r+0x936>
 800b70a:	e091      	b.n	800b830 <_dtoa_r+0x9a8>
 800b70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b70e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b712:	e758      	b.n	800b5c6 <_dtoa_r+0x73e>
 800b714:	9b04      	ldr	r3, [sp, #16]
 800b716:	1e5e      	subs	r6, r3, #1
 800b718:	9b08      	ldr	r3, [sp, #32]
 800b71a:	42b3      	cmp	r3, r6
 800b71c:	bfbf      	itttt	lt
 800b71e:	9b08      	ldrlt	r3, [sp, #32]
 800b720:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b722:	9608      	strlt	r6, [sp, #32]
 800b724:	1af3      	sublt	r3, r6, r3
 800b726:	bfb4      	ite	lt
 800b728:	18d2      	addlt	r2, r2, r3
 800b72a:	1b9e      	subge	r6, r3, r6
 800b72c:	9b04      	ldr	r3, [sp, #16]
 800b72e:	bfbc      	itt	lt
 800b730:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b732:	2600      	movlt	r6, #0
 800b734:	2b00      	cmp	r3, #0
 800b736:	bfb7      	itett	lt
 800b738:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b73c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b740:	1a9d      	sublt	r5, r3, r2
 800b742:	2300      	movlt	r3, #0
 800b744:	e741      	b.n	800b5ca <_dtoa_r+0x742>
 800b746:	9e08      	ldr	r6, [sp, #32]
 800b748:	9d05      	ldr	r5, [sp, #20]
 800b74a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b74c:	e748      	b.n	800b5e0 <_dtoa_r+0x758>
 800b74e:	9a08      	ldr	r2, [sp, #32]
 800b750:	e770      	b.n	800b634 <_dtoa_r+0x7ac>
 800b752:	9b07      	ldr	r3, [sp, #28]
 800b754:	2b01      	cmp	r3, #1
 800b756:	dc19      	bgt.n	800b78c <_dtoa_r+0x904>
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	b9bb      	cbnz	r3, 800b78c <_dtoa_r+0x904>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b762:	b99b      	cbnz	r3, 800b78c <_dtoa_r+0x904>
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b76a:	0d1b      	lsrs	r3, r3, #20
 800b76c:	051b      	lsls	r3, r3, #20
 800b76e:	b183      	cbz	r3, 800b792 <_dtoa_r+0x90a>
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	3301      	adds	r3, #1
 800b774:	9305      	str	r3, [sp, #20]
 800b776:	9b06      	ldr	r3, [sp, #24]
 800b778:	3301      	adds	r3, #1
 800b77a:	9306      	str	r3, [sp, #24]
 800b77c:	f04f 0801 	mov.w	r8, #1
 800b780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b782:	2b00      	cmp	r3, #0
 800b784:	f47f af6f 	bne.w	800b666 <_dtoa_r+0x7de>
 800b788:	2001      	movs	r0, #1
 800b78a:	e774      	b.n	800b676 <_dtoa_r+0x7ee>
 800b78c:	f04f 0800 	mov.w	r8, #0
 800b790:	e7f6      	b.n	800b780 <_dtoa_r+0x8f8>
 800b792:	4698      	mov	r8, r3
 800b794:	e7f4      	b.n	800b780 <_dtoa_r+0x8f8>
 800b796:	d082      	beq.n	800b69e <_dtoa_r+0x816>
 800b798:	9a05      	ldr	r2, [sp, #20]
 800b79a:	331c      	adds	r3, #28
 800b79c:	441a      	add	r2, r3
 800b79e:	9205      	str	r2, [sp, #20]
 800b7a0:	9a06      	ldr	r2, [sp, #24]
 800b7a2:	441a      	add	r2, r3
 800b7a4:	441d      	add	r5, r3
 800b7a6:	9206      	str	r2, [sp, #24]
 800b7a8:	e779      	b.n	800b69e <_dtoa_r+0x816>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	e7f4      	b.n	800b798 <_dtoa_r+0x910>
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dc37      	bgt.n	800b824 <_dtoa_r+0x99c>
 800b7b4:	9b07      	ldr	r3, [sp, #28]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	dd34      	ble.n	800b824 <_dtoa_r+0x99c>
 800b7ba:	9b04      	ldr	r3, [sp, #16]
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	9b01      	ldr	r3, [sp, #4]
 800b7c0:	b963      	cbnz	r3, 800b7dc <_dtoa_r+0x954>
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	2205      	movs	r2, #5
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fab2 	bl	800bd30 <__multadd>
 800b7cc:	4601      	mov	r1, r0
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	4650      	mov	r0, sl
 800b7d2:	f000 fcc7 	bl	800c164 <__mcmp>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	f73f adbb 	bgt.w	800b352 <_dtoa_r+0x4ca>
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7de:	9d00      	ldr	r5, [sp, #0]
 800b7e0:	ea6f 0b03 	mvn.w	fp, r3
 800b7e4:	f04f 0800 	mov.w	r8, #0
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 fa7e 	bl	800bcec <_Bfree>
 800b7f0:	2f00      	cmp	r7, #0
 800b7f2:	f43f aeab 	beq.w	800b54c <_dtoa_r+0x6c4>
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	d005      	beq.n	800b808 <_dtoa_r+0x980>
 800b7fc:	45b8      	cmp	r8, r7
 800b7fe:	d003      	beq.n	800b808 <_dtoa_r+0x980>
 800b800:	4641      	mov	r1, r8
 800b802:	4620      	mov	r0, r4
 800b804:	f000 fa72 	bl	800bcec <_Bfree>
 800b808:	4639      	mov	r1, r7
 800b80a:	4620      	mov	r0, r4
 800b80c:	f000 fa6e 	bl	800bcec <_Bfree>
 800b810:	e69c      	b.n	800b54c <_dtoa_r+0x6c4>
 800b812:	2600      	movs	r6, #0
 800b814:	4637      	mov	r7, r6
 800b816:	e7e1      	b.n	800b7dc <_dtoa_r+0x954>
 800b818:	46bb      	mov	fp, r7
 800b81a:	4637      	mov	r7, r6
 800b81c:	e599      	b.n	800b352 <_dtoa_r+0x4ca>
 800b81e:	bf00      	nop
 800b820:	40240000 	.word	0x40240000
 800b824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80c8 	beq.w	800b9bc <_dtoa_r+0xb34>
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	2d00      	cmp	r5, #0
 800b832:	dd05      	ble.n	800b840 <_dtoa_r+0x9b8>
 800b834:	4639      	mov	r1, r7
 800b836:	462a      	mov	r2, r5
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 fc27 	bl	800c08c <__lshift>
 800b83e:	4607      	mov	r7, r0
 800b840:	f1b8 0f00 	cmp.w	r8, #0
 800b844:	d05b      	beq.n	800b8fe <_dtoa_r+0xa76>
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 fa0f 	bl	800bc6c <_Balloc>
 800b84e:	4605      	mov	r5, r0
 800b850:	b928      	cbnz	r0, 800b85e <_dtoa_r+0x9d6>
 800b852:	4b83      	ldr	r3, [pc, #524]	; (800ba60 <_dtoa_r+0xbd8>)
 800b854:	4602      	mov	r2, r0
 800b856:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b85a:	f7ff bb2e 	b.w	800aeba <_dtoa_r+0x32>
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	3202      	adds	r2, #2
 800b862:	0092      	lsls	r2, r2, #2
 800b864:	f107 010c 	add.w	r1, r7, #12
 800b868:	300c      	adds	r0, #12
 800b86a:	f001 f801 	bl	800c870 <memcpy>
 800b86e:	2201      	movs	r2, #1
 800b870:	4629      	mov	r1, r5
 800b872:	4620      	mov	r0, r4
 800b874:	f000 fc0a 	bl	800c08c <__lshift>
 800b878:	9b00      	ldr	r3, [sp, #0]
 800b87a:	3301      	adds	r3, #1
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b882:	4413      	add	r3, r2
 800b884:	9308      	str	r3, [sp, #32]
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	46b8      	mov	r8, r7
 800b88e:	9306      	str	r3, [sp, #24]
 800b890:	4607      	mov	r7, r0
 800b892:	9b04      	ldr	r3, [sp, #16]
 800b894:	4631      	mov	r1, r6
 800b896:	3b01      	subs	r3, #1
 800b898:	4650      	mov	r0, sl
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	f7ff fa6c 	bl	800ad78 <quorem>
 800b8a0:	4641      	mov	r1, r8
 800b8a2:	9002      	str	r0, [sp, #8]
 800b8a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	f000 fc5b 	bl	800c164 <__mcmp>
 800b8ae:	463a      	mov	r2, r7
 800b8b0:	9005      	str	r0, [sp, #20]
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 fc71 	bl	800c19c <__mdiff>
 800b8ba:	68c2      	ldr	r2, [r0, #12]
 800b8bc:	4605      	mov	r5, r0
 800b8be:	bb02      	cbnz	r2, 800b902 <_dtoa_r+0xa7a>
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	f000 fc4e 	bl	800c164 <__mcmp>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b8d0:	f000 fa0c 	bl	800bcec <_Bfree>
 800b8d4:	9b07      	ldr	r3, [sp, #28]
 800b8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8d8:	9d04      	ldr	r5, [sp, #16]
 800b8da:	ea43 0102 	orr.w	r1, r3, r2
 800b8de:	9b06      	ldr	r3, [sp, #24]
 800b8e0:	4319      	orrs	r1, r3
 800b8e2:	d110      	bne.n	800b906 <_dtoa_r+0xa7e>
 800b8e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b8e8:	d029      	beq.n	800b93e <_dtoa_r+0xab6>
 800b8ea:	9b05      	ldr	r3, [sp, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dd02      	ble.n	800b8f6 <_dtoa_r+0xa6e>
 800b8f0:	9b02      	ldr	r3, [sp, #8]
 800b8f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	f883 9000 	strb.w	r9, [r3]
 800b8fc:	e774      	b.n	800b7e8 <_dtoa_r+0x960>
 800b8fe:	4638      	mov	r0, r7
 800b900:	e7ba      	b.n	800b878 <_dtoa_r+0x9f0>
 800b902:	2201      	movs	r2, #1
 800b904:	e7e1      	b.n	800b8ca <_dtoa_r+0xa42>
 800b906:	9b05      	ldr	r3, [sp, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	db04      	blt.n	800b916 <_dtoa_r+0xa8e>
 800b90c:	9907      	ldr	r1, [sp, #28]
 800b90e:	430b      	orrs	r3, r1
 800b910:	9906      	ldr	r1, [sp, #24]
 800b912:	430b      	orrs	r3, r1
 800b914:	d120      	bne.n	800b958 <_dtoa_r+0xad0>
 800b916:	2a00      	cmp	r2, #0
 800b918:	dded      	ble.n	800b8f6 <_dtoa_r+0xa6e>
 800b91a:	4651      	mov	r1, sl
 800b91c:	2201      	movs	r2, #1
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 fbb4 	bl	800c08c <__lshift>
 800b924:	4631      	mov	r1, r6
 800b926:	4682      	mov	sl, r0
 800b928:	f000 fc1c 	bl	800c164 <__mcmp>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	dc03      	bgt.n	800b938 <_dtoa_r+0xab0>
 800b930:	d1e1      	bne.n	800b8f6 <_dtoa_r+0xa6e>
 800b932:	f019 0f01 	tst.w	r9, #1
 800b936:	d0de      	beq.n	800b8f6 <_dtoa_r+0xa6e>
 800b938:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b93c:	d1d8      	bne.n	800b8f0 <_dtoa_r+0xa68>
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	2339      	movs	r3, #57	; 0x39
 800b942:	7013      	strb	r3, [r2, #0]
 800b944:	462b      	mov	r3, r5
 800b946:	461d      	mov	r5, r3
 800b948:	3b01      	subs	r3, #1
 800b94a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b94e:	2a39      	cmp	r2, #57	; 0x39
 800b950:	d06c      	beq.n	800ba2c <_dtoa_r+0xba4>
 800b952:	3201      	adds	r2, #1
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	e747      	b.n	800b7e8 <_dtoa_r+0x960>
 800b958:	2a00      	cmp	r2, #0
 800b95a:	dd07      	ble.n	800b96c <_dtoa_r+0xae4>
 800b95c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b960:	d0ed      	beq.n	800b93e <_dtoa_r+0xab6>
 800b962:	9a01      	ldr	r2, [sp, #4]
 800b964:	f109 0301 	add.w	r3, r9, #1
 800b968:	7013      	strb	r3, [r2, #0]
 800b96a:	e73d      	b.n	800b7e8 <_dtoa_r+0x960>
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	9a08      	ldr	r2, [sp, #32]
 800b970:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b974:	4293      	cmp	r3, r2
 800b976:	d043      	beq.n	800ba00 <_dtoa_r+0xb78>
 800b978:	4651      	mov	r1, sl
 800b97a:	2300      	movs	r3, #0
 800b97c:	220a      	movs	r2, #10
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 f9d6 	bl	800bd30 <__multadd>
 800b984:	45b8      	cmp	r8, r7
 800b986:	4682      	mov	sl, r0
 800b988:	f04f 0300 	mov.w	r3, #0
 800b98c:	f04f 020a 	mov.w	r2, #10
 800b990:	4641      	mov	r1, r8
 800b992:	4620      	mov	r0, r4
 800b994:	d107      	bne.n	800b9a6 <_dtoa_r+0xb1e>
 800b996:	f000 f9cb 	bl	800bd30 <__multadd>
 800b99a:	4680      	mov	r8, r0
 800b99c:	4607      	mov	r7, r0
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	e775      	b.n	800b892 <_dtoa_r+0xa0a>
 800b9a6:	f000 f9c3 	bl	800bd30 <__multadd>
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	220a      	movs	r2, #10
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 f9bc 	bl	800bd30 <__multadd>
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	e7f0      	b.n	800b99e <_dtoa_r+0xb16>
 800b9bc:	9b04      	ldr	r3, [sp, #16]
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	9d00      	ldr	r5, [sp, #0]
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	f7ff f9d7 	bl	800ad78 <quorem>
 800b9ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b9ce:	9b00      	ldr	r3, [sp, #0]
 800b9d0:	f805 9b01 	strb.w	r9, [r5], #1
 800b9d4:	1aea      	subs	r2, r5, r3
 800b9d6:	9b01      	ldr	r3, [sp, #4]
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	dd07      	ble.n	800b9ec <_dtoa_r+0xb64>
 800b9dc:	4651      	mov	r1, sl
 800b9de:	2300      	movs	r3, #0
 800b9e0:	220a      	movs	r2, #10
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 f9a4 	bl	800bd30 <__multadd>
 800b9e8:	4682      	mov	sl, r0
 800b9ea:	e7ea      	b.n	800b9c2 <_dtoa_r+0xb3a>
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bfc8      	it	gt
 800b9f2:	461d      	movgt	r5, r3
 800b9f4:	9b00      	ldr	r3, [sp, #0]
 800b9f6:	bfd8      	it	le
 800b9f8:	2501      	movle	r5, #1
 800b9fa:	441d      	add	r5, r3
 800b9fc:	f04f 0800 	mov.w	r8, #0
 800ba00:	4651      	mov	r1, sl
 800ba02:	2201      	movs	r2, #1
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 fb41 	bl	800c08c <__lshift>
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4682      	mov	sl, r0
 800ba0e:	f000 fba9 	bl	800c164 <__mcmp>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	dc96      	bgt.n	800b944 <_dtoa_r+0xabc>
 800ba16:	d102      	bne.n	800ba1e <_dtoa_r+0xb96>
 800ba18:	f019 0f01 	tst.w	r9, #1
 800ba1c:	d192      	bne.n	800b944 <_dtoa_r+0xabc>
 800ba1e:	462b      	mov	r3, r5
 800ba20:	461d      	mov	r5, r3
 800ba22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba26:	2a30      	cmp	r2, #48	; 0x30
 800ba28:	d0fa      	beq.n	800ba20 <_dtoa_r+0xb98>
 800ba2a:	e6dd      	b.n	800b7e8 <_dtoa_r+0x960>
 800ba2c:	9a00      	ldr	r2, [sp, #0]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d189      	bne.n	800b946 <_dtoa_r+0xabe>
 800ba32:	f10b 0b01 	add.w	fp, fp, #1
 800ba36:	2331      	movs	r3, #49	; 0x31
 800ba38:	e796      	b.n	800b968 <_dtoa_r+0xae0>
 800ba3a:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <_dtoa_r+0xbdc>)
 800ba3c:	f7ff ba99 	b.w	800af72 <_dtoa_r+0xea>
 800ba40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f47f aa6d 	bne.w	800af22 <_dtoa_r+0x9a>
 800ba48:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <_dtoa_r+0xbe0>)
 800ba4a:	f7ff ba92 	b.w	800af72 <_dtoa_r+0xea>
 800ba4e:	9b01      	ldr	r3, [sp, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dcb5      	bgt.n	800b9c0 <_dtoa_r+0xb38>
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	f73f aeb1 	bgt.w	800b7be <_dtoa_r+0x936>
 800ba5c:	e7b0      	b.n	800b9c0 <_dtoa_r+0xb38>
 800ba5e:	bf00      	nop
 800ba60:	0800cc9c 	.word	0x0800cc9c
 800ba64:	0800cbfc 	.word	0x0800cbfc
 800ba68:	0800cc20 	.word	0x0800cc20

0800ba6c <_free_r>:
 800ba6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba6e:	2900      	cmp	r1, #0
 800ba70:	d044      	beq.n	800bafc <_free_r+0x90>
 800ba72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba76:	9001      	str	r0, [sp, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba7e:	bfb8      	it	lt
 800ba80:	18e4      	addlt	r4, r4, r3
 800ba82:	f000 f8e7 	bl	800bc54 <__malloc_lock>
 800ba86:	4a1e      	ldr	r2, [pc, #120]	; (800bb00 <_free_r+0x94>)
 800ba88:	9801      	ldr	r0, [sp, #4]
 800ba8a:	6813      	ldr	r3, [r2, #0]
 800ba8c:	b933      	cbnz	r3, 800ba9c <_free_r+0x30>
 800ba8e:	6063      	str	r3, [r4, #4]
 800ba90:	6014      	str	r4, [r2, #0]
 800ba92:	b003      	add	sp, #12
 800ba94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba98:	f000 b8e2 	b.w	800bc60 <__malloc_unlock>
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	d908      	bls.n	800bab2 <_free_r+0x46>
 800baa0:	6825      	ldr	r5, [r4, #0]
 800baa2:	1961      	adds	r1, r4, r5
 800baa4:	428b      	cmp	r3, r1
 800baa6:	bf01      	itttt	eq
 800baa8:	6819      	ldreq	r1, [r3, #0]
 800baaa:	685b      	ldreq	r3, [r3, #4]
 800baac:	1949      	addeq	r1, r1, r5
 800baae:	6021      	streq	r1, [r4, #0]
 800bab0:	e7ed      	b.n	800ba8e <_free_r+0x22>
 800bab2:	461a      	mov	r2, r3
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	b10b      	cbz	r3, 800babc <_free_r+0x50>
 800bab8:	42a3      	cmp	r3, r4
 800baba:	d9fa      	bls.n	800bab2 <_free_r+0x46>
 800babc:	6811      	ldr	r1, [r2, #0]
 800babe:	1855      	adds	r5, r2, r1
 800bac0:	42a5      	cmp	r5, r4
 800bac2:	d10b      	bne.n	800badc <_free_r+0x70>
 800bac4:	6824      	ldr	r4, [r4, #0]
 800bac6:	4421      	add	r1, r4
 800bac8:	1854      	adds	r4, r2, r1
 800baca:	42a3      	cmp	r3, r4
 800bacc:	6011      	str	r1, [r2, #0]
 800bace:	d1e0      	bne.n	800ba92 <_free_r+0x26>
 800bad0:	681c      	ldr	r4, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	6053      	str	r3, [r2, #4]
 800bad6:	440c      	add	r4, r1
 800bad8:	6014      	str	r4, [r2, #0]
 800bada:	e7da      	b.n	800ba92 <_free_r+0x26>
 800badc:	d902      	bls.n	800bae4 <_free_r+0x78>
 800bade:	230c      	movs	r3, #12
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	e7d6      	b.n	800ba92 <_free_r+0x26>
 800bae4:	6825      	ldr	r5, [r4, #0]
 800bae6:	1961      	adds	r1, r4, r5
 800bae8:	428b      	cmp	r3, r1
 800baea:	bf04      	itt	eq
 800baec:	6819      	ldreq	r1, [r3, #0]
 800baee:	685b      	ldreq	r3, [r3, #4]
 800baf0:	6063      	str	r3, [r4, #4]
 800baf2:	bf04      	itt	eq
 800baf4:	1949      	addeq	r1, r1, r5
 800baf6:	6021      	streq	r1, [r4, #0]
 800baf8:	6054      	str	r4, [r2, #4]
 800bafa:	e7ca      	b.n	800ba92 <_free_r+0x26>
 800bafc:	b003      	add	sp, #12
 800bafe:	bd30      	pop	{r4, r5, pc}
 800bb00:	20001538 	.word	0x20001538

0800bb04 <malloc>:
 800bb04:	4b02      	ldr	r3, [pc, #8]	; (800bb10 <malloc+0xc>)
 800bb06:	4601      	mov	r1, r0
 800bb08:	6818      	ldr	r0, [r3, #0]
 800bb0a:	f000 b823 	b.w	800bb54 <_malloc_r>
 800bb0e:	bf00      	nop
 800bb10:	2000006c 	.word	0x2000006c

0800bb14 <sbrk_aligned>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	4e0e      	ldr	r6, [pc, #56]	; (800bb50 <sbrk_aligned+0x3c>)
 800bb18:	460c      	mov	r4, r1
 800bb1a:	6831      	ldr	r1, [r6, #0]
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b911      	cbnz	r1, 800bb26 <sbrk_aligned+0x12>
 800bb20:	f000 fe96 	bl	800c850 <_sbrk_r>
 800bb24:	6030      	str	r0, [r6, #0]
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f000 fe91 	bl	800c850 <_sbrk_r>
 800bb2e:	1c43      	adds	r3, r0, #1
 800bb30:	d00a      	beq.n	800bb48 <sbrk_aligned+0x34>
 800bb32:	1cc4      	adds	r4, r0, #3
 800bb34:	f024 0403 	bic.w	r4, r4, #3
 800bb38:	42a0      	cmp	r0, r4
 800bb3a:	d007      	beq.n	800bb4c <sbrk_aligned+0x38>
 800bb3c:	1a21      	subs	r1, r4, r0
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 fe86 	bl	800c850 <_sbrk_r>
 800bb44:	3001      	adds	r0, #1
 800bb46:	d101      	bne.n	800bb4c <sbrk_aligned+0x38>
 800bb48:	f04f 34ff 	mov.w	r4, #4294967295
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	2000153c 	.word	0x2000153c

0800bb54 <_malloc_r>:
 800bb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb58:	1ccd      	adds	r5, r1, #3
 800bb5a:	f025 0503 	bic.w	r5, r5, #3
 800bb5e:	3508      	adds	r5, #8
 800bb60:	2d0c      	cmp	r5, #12
 800bb62:	bf38      	it	cc
 800bb64:	250c      	movcc	r5, #12
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	4607      	mov	r7, r0
 800bb6a:	db01      	blt.n	800bb70 <_malloc_r+0x1c>
 800bb6c:	42a9      	cmp	r1, r5
 800bb6e:	d905      	bls.n	800bb7c <_malloc_r+0x28>
 800bb70:	230c      	movs	r3, #12
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	2600      	movs	r6, #0
 800bb76:	4630      	mov	r0, r6
 800bb78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc50 <_malloc_r+0xfc>
 800bb80:	f000 f868 	bl	800bc54 <__malloc_lock>
 800bb84:	f8d8 3000 	ldr.w	r3, [r8]
 800bb88:	461c      	mov	r4, r3
 800bb8a:	bb5c      	cbnz	r4, 800bbe4 <_malloc_r+0x90>
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4638      	mov	r0, r7
 800bb90:	f7ff ffc0 	bl	800bb14 <sbrk_aligned>
 800bb94:	1c43      	adds	r3, r0, #1
 800bb96:	4604      	mov	r4, r0
 800bb98:	d155      	bne.n	800bc46 <_malloc_r+0xf2>
 800bb9a:	f8d8 4000 	ldr.w	r4, [r8]
 800bb9e:	4626      	mov	r6, r4
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	d145      	bne.n	800bc30 <_malloc_r+0xdc>
 800bba4:	2c00      	cmp	r4, #0
 800bba6:	d048      	beq.n	800bc3a <_malloc_r+0xe6>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4638      	mov	r0, r7
 800bbae:	eb04 0903 	add.w	r9, r4, r3
 800bbb2:	f000 fe4d 	bl	800c850 <_sbrk_r>
 800bbb6:	4581      	cmp	r9, r0
 800bbb8:	d13f      	bne.n	800bc3a <_malloc_r+0xe6>
 800bbba:	6821      	ldr	r1, [r4, #0]
 800bbbc:	1a6d      	subs	r5, r5, r1
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7ff ffa7 	bl	800bb14 <sbrk_aligned>
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	d037      	beq.n	800bc3a <_malloc_r+0xe6>
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	442b      	add	r3, r5
 800bbce:	6023      	str	r3, [r4, #0]
 800bbd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d038      	beq.n	800bc4a <_malloc_r+0xf6>
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	42a2      	cmp	r2, r4
 800bbdc:	d12b      	bne.n	800bc36 <_malloc_r+0xe2>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	605a      	str	r2, [r3, #4]
 800bbe2:	e00f      	b.n	800bc04 <_malloc_r+0xb0>
 800bbe4:	6822      	ldr	r2, [r4, #0]
 800bbe6:	1b52      	subs	r2, r2, r5
 800bbe8:	d41f      	bmi.n	800bc2a <_malloc_r+0xd6>
 800bbea:	2a0b      	cmp	r2, #11
 800bbec:	d917      	bls.n	800bc1e <_malloc_r+0xca>
 800bbee:	1961      	adds	r1, r4, r5
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	6025      	str	r5, [r4, #0]
 800bbf4:	bf18      	it	ne
 800bbf6:	6059      	strne	r1, [r3, #4]
 800bbf8:	6863      	ldr	r3, [r4, #4]
 800bbfa:	bf08      	it	eq
 800bbfc:	f8c8 1000 	streq.w	r1, [r8]
 800bc00:	5162      	str	r2, [r4, r5]
 800bc02:	604b      	str	r3, [r1, #4]
 800bc04:	4638      	mov	r0, r7
 800bc06:	f104 060b 	add.w	r6, r4, #11
 800bc0a:	f000 f829 	bl	800bc60 <__malloc_unlock>
 800bc0e:	f026 0607 	bic.w	r6, r6, #7
 800bc12:	1d23      	adds	r3, r4, #4
 800bc14:	1af2      	subs	r2, r6, r3
 800bc16:	d0ae      	beq.n	800bb76 <_malloc_r+0x22>
 800bc18:	1b9b      	subs	r3, r3, r6
 800bc1a:	50a3      	str	r3, [r4, r2]
 800bc1c:	e7ab      	b.n	800bb76 <_malloc_r+0x22>
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	6862      	ldr	r2, [r4, #4]
 800bc22:	d1dd      	bne.n	800bbe0 <_malloc_r+0x8c>
 800bc24:	f8c8 2000 	str.w	r2, [r8]
 800bc28:	e7ec      	b.n	800bc04 <_malloc_r+0xb0>
 800bc2a:	4623      	mov	r3, r4
 800bc2c:	6864      	ldr	r4, [r4, #4]
 800bc2e:	e7ac      	b.n	800bb8a <_malloc_r+0x36>
 800bc30:	4634      	mov	r4, r6
 800bc32:	6876      	ldr	r6, [r6, #4]
 800bc34:	e7b4      	b.n	800bba0 <_malloc_r+0x4c>
 800bc36:	4613      	mov	r3, r2
 800bc38:	e7cc      	b.n	800bbd4 <_malloc_r+0x80>
 800bc3a:	230c      	movs	r3, #12
 800bc3c:	603b      	str	r3, [r7, #0]
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f000 f80e 	bl	800bc60 <__malloc_unlock>
 800bc44:	e797      	b.n	800bb76 <_malloc_r+0x22>
 800bc46:	6025      	str	r5, [r4, #0]
 800bc48:	e7dc      	b.n	800bc04 <_malloc_r+0xb0>
 800bc4a:	605b      	str	r3, [r3, #4]
 800bc4c:	deff      	udf	#255	; 0xff
 800bc4e:	bf00      	nop
 800bc50:	20001538 	.word	0x20001538

0800bc54 <__malloc_lock>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__malloc_lock+0x8>)
 800bc56:	f7ff b88d 	b.w	800ad74 <__retarget_lock_acquire_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	20001534 	.word	0x20001534

0800bc60 <__malloc_unlock>:
 800bc60:	4801      	ldr	r0, [pc, #4]	; (800bc68 <__malloc_unlock+0x8>)
 800bc62:	f7ff b888 	b.w	800ad76 <__retarget_lock_release_recursive>
 800bc66:	bf00      	nop
 800bc68:	20001534 	.word	0x20001534

0800bc6c <_Balloc>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	69c6      	ldr	r6, [r0, #28]
 800bc70:	4604      	mov	r4, r0
 800bc72:	460d      	mov	r5, r1
 800bc74:	b976      	cbnz	r6, 800bc94 <_Balloc+0x28>
 800bc76:	2010      	movs	r0, #16
 800bc78:	f7ff ff44 	bl	800bb04 <malloc>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	61e0      	str	r0, [r4, #28]
 800bc80:	b920      	cbnz	r0, 800bc8c <_Balloc+0x20>
 800bc82:	4b18      	ldr	r3, [pc, #96]	; (800bce4 <_Balloc+0x78>)
 800bc84:	4818      	ldr	r0, [pc, #96]	; (800bce8 <_Balloc+0x7c>)
 800bc86:	216b      	movs	r1, #107	; 0x6b
 800bc88:	f000 fe00 	bl	800c88c <__assert_func>
 800bc8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc90:	6006      	str	r6, [r0, #0]
 800bc92:	60c6      	str	r6, [r0, #12]
 800bc94:	69e6      	ldr	r6, [r4, #28]
 800bc96:	68f3      	ldr	r3, [r6, #12]
 800bc98:	b183      	cbz	r3, 800bcbc <_Balloc+0x50>
 800bc9a:	69e3      	ldr	r3, [r4, #28]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bca2:	b9b8      	cbnz	r0, 800bcd4 <_Balloc+0x68>
 800bca4:	2101      	movs	r1, #1
 800bca6:	fa01 f605 	lsl.w	r6, r1, r5
 800bcaa:	1d72      	adds	r2, r6, #5
 800bcac:	0092      	lsls	r2, r2, #2
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f000 fe0a 	bl	800c8c8 <_calloc_r>
 800bcb4:	b160      	cbz	r0, 800bcd0 <_Balloc+0x64>
 800bcb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcba:	e00e      	b.n	800bcda <_Balloc+0x6e>
 800bcbc:	2221      	movs	r2, #33	; 0x21
 800bcbe:	2104      	movs	r1, #4
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 fe01 	bl	800c8c8 <_calloc_r>
 800bcc6:	69e3      	ldr	r3, [r4, #28]
 800bcc8:	60f0      	str	r0, [r6, #12]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e4      	bne.n	800bc9a <_Balloc+0x2e>
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}
 800bcd4:	6802      	ldr	r2, [r0, #0]
 800bcd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bce0:	e7f7      	b.n	800bcd2 <_Balloc+0x66>
 800bce2:	bf00      	nop
 800bce4:	0800cc2d 	.word	0x0800cc2d
 800bce8:	0800ccad 	.word	0x0800ccad

0800bcec <_Bfree>:
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	69c6      	ldr	r6, [r0, #28]
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	b976      	cbnz	r6, 800bd14 <_Bfree+0x28>
 800bcf6:	2010      	movs	r0, #16
 800bcf8:	f7ff ff04 	bl	800bb04 <malloc>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	61e8      	str	r0, [r5, #28]
 800bd00:	b920      	cbnz	r0, 800bd0c <_Bfree+0x20>
 800bd02:	4b09      	ldr	r3, [pc, #36]	; (800bd28 <_Bfree+0x3c>)
 800bd04:	4809      	ldr	r0, [pc, #36]	; (800bd2c <_Bfree+0x40>)
 800bd06:	218f      	movs	r1, #143	; 0x8f
 800bd08:	f000 fdc0 	bl	800c88c <__assert_func>
 800bd0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd10:	6006      	str	r6, [r0, #0]
 800bd12:	60c6      	str	r6, [r0, #12]
 800bd14:	b13c      	cbz	r4, 800bd26 <_Bfree+0x3a>
 800bd16:	69eb      	ldr	r3, [r5, #28]
 800bd18:	6862      	ldr	r2, [r4, #4]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd20:	6021      	str	r1, [r4, #0]
 800bd22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd26:	bd70      	pop	{r4, r5, r6, pc}
 800bd28:	0800cc2d 	.word	0x0800cc2d
 800bd2c:	0800ccad 	.word	0x0800ccad

0800bd30 <__multadd>:
 800bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd34:	690d      	ldr	r5, [r1, #16]
 800bd36:	4607      	mov	r7, r0
 800bd38:	460c      	mov	r4, r1
 800bd3a:	461e      	mov	r6, r3
 800bd3c:	f101 0c14 	add.w	ip, r1, #20
 800bd40:	2000      	movs	r0, #0
 800bd42:	f8dc 3000 	ldr.w	r3, [ip]
 800bd46:	b299      	uxth	r1, r3
 800bd48:	fb02 6101 	mla	r1, r2, r1, r6
 800bd4c:	0c1e      	lsrs	r6, r3, #16
 800bd4e:	0c0b      	lsrs	r3, r1, #16
 800bd50:	fb02 3306 	mla	r3, r2, r6, r3
 800bd54:	b289      	uxth	r1, r1
 800bd56:	3001      	adds	r0, #1
 800bd58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd5c:	4285      	cmp	r5, r0
 800bd5e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd66:	dcec      	bgt.n	800bd42 <__multadd+0x12>
 800bd68:	b30e      	cbz	r6, 800bdae <__multadd+0x7e>
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	42ab      	cmp	r3, r5
 800bd6e:	dc19      	bgt.n	800bda4 <__multadd+0x74>
 800bd70:	6861      	ldr	r1, [r4, #4]
 800bd72:	4638      	mov	r0, r7
 800bd74:	3101      	adds	r1, #1
 800bd76:	f7ff ff79 	bl	800bc6c <_Balloc>
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	b928      	cbnz	r0, 800bd8a <__multadd+0x5a>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	4b0c      	ldr	r3, [pc, #48]	; (800bdb4 <__multadd+0x84>)
 800bd82:	480d      	ldr	r0, [pc, #52]	; (800bdb8 <__multadd+0x88>)
 800bd84:	21ba      	movs	r1, #186	; 0xba
 800bd86:	f000 fd81 	bl	800c88c <__assert_func>
 800bd8a:	6922      	ldr	r2, [r4, #16]
 800bd8c:	3202      	adds	r2, #2
 800bd8e:	f104 010c 	add.w	r1, r4, #12
 800bd92:	0092      	lsls	r2, r2, #2
 800bd94:	300c      	adds	r0, #12
 800bd96:	f000 fd6b 	bl	800c870 <memcpy>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	f7ff ffa5 	bl	800bcec <_Bfree>
 800bda2:	4644      	mov	r4, r8
 800bda4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bda8:	3501      	adds	r5, #1
 800bdaa:	615e      	str	r6, [r3, #20]
 800bdac:	6125      	str	r5, [r4, #16]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb4:	0800cc9c 	.word	0x0800cc9c
 800bdb8:	0800ccad 	.word	0x0800ccad

0800bdbc <__hi0bits>:
 800bdbc:	0c03      	lsrs	r3, r0, #16
 800bdbe:	041b      	lsls	r3, r3, #16
 800bdc0:	b9d3      	cbnz	r3, 800bdf8 <__hi0bits+0x3c>
 800bdc2:	0400      	lsls	r0, r0, #16
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdca:	bf04      	itt	eq
 800bdcc:	0200      	lsleq	r0, r0, #8
 800bdce:	3308      	addeq	r3, #8
 800bdd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdd4:	bf04      	itt	eq
 800bdd6:	0100      	lsleq	r0, r0, #4
 800bdd8:	3304      	addeq	r3, #4
 800bdda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdde:	bf04      	itt	eq
 800bde0:	0080      	lsleq	r0, r0, #2
 800bde2:	3302      	addeq	r3, #2
 800bde4:	2800      	cmp	r0, #0
 800bde6:	db05      	blt.n	800bdf4 <__hi0bits+0x38>
 800bde8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bdec:	f103 0301 	add.w	r3, r3, #1
 800bdf0:	bf08      	it	eq
 800bdf2:	2320      	moveq	r3, #32
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	4770      	bx	lr
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e7e4      	b.n	800bdc6 <__hi0bits+0xa>

0800bdfc <__lo0bits>:
 800bdfc:	6803      	ldr	r3, [r0, #0]
 800bdfe:	f013 0207 	ands.w	r2, r3, #7
 800be02:	d00c      	beq.n	800be1e <__lo0bits+0x22>
 800be04:	07d9      	lsls	r1, r3, #31
 800be06:	d422      	bmi.n	800be4e <__lo0bits+0x52>
 800be08:	079a      	lsls	r2, r3, #30
 800be0a:	bf49      	itett	mi
 800be0c:	085b      	lsrmi	r3, r3, #1
 800be0e:	089b      	lsrpl	r3, r3, #2
 800be10:	6003      	strmi	r3, [r0, #0]
 800be12:	2201      	movmi	r2, #1
 800be14:	bf5c      	itt	pl
 800be16:	6003      	strpl	r3, [r0, #0]
 800be18:	2202      	movpl	r2, #2
 800be1a:	4610      	mov	r0, r2
 800be1c:	4770      	bx	lr
 800be1e:	b299      	uxth	r1, r3
 800be20:	b909      	cbnz	r1, 800be26 <__lo0bits+0x2a>
 800be22:	0c1b      	lsrs	r3, r3, #16
 800be24:	2210      	movs	r2, #16
 800be26:	b2d9      	uxtb	r1, r3
 800be28:	b909      	cbnz	r1, 800be2e <__lo0bits+0x32>
 800be2a:	3208      	adds	r2, #8
 800be2c:	0a1b      	lsrs	r3, r3, #8
 800be2e:	0719      	lsls	r1, r3, #28
 800be30:	bf04      	itt	eq
 800be32:	091b      	lsreq	r3, r3, #4
 800be34:	3204      	addeq	r2, #4
 800be36:	0799      	lsls	r1, r3, #30
 800be38:	bf04      	itt	eq
 800be3a:	089b      	lsreq	r3, r3, #2
 800be3c:	3202      	addeq	r2, #2
 800be3e:	07d9      	lsls	r1, r3, #31
 800be40:	d403      	bmi.n	800be4a <__lo0bits+0x4e>
 800be42:	085b      	lsrs	r3, r3, #1
 800be44:	f102 0201 	add.w	r2, r2, #1
 800be48:	d003      	beq.n	800be52 <__lo0bits+0x56>
 800be4a:	6003      	str	r3, [r0, #0]
 800be4c:	e7e5      	b.n	800be1a <__lo0bits+0x1e>
 800be4e:	2200      	movs	r2, #0
 800be50:	e7e3      	b.n	800be1a <__lo0bits+0x1e>
 800be52:	2220      	movs	r2, #32
 800be54:	e7e1      	b.n	800be1a <__lo0bits+0x1e>
	...

0800be58 <__i2b>:
 800be58:	b510      	push	{r4, lr}
 800be5a:	460c      	mov	r4, r1
 800be5c:	2101      	movs	r1, #1
 800be5e:	f7ff ff05 	bl	800bc6c <_Balloc>
 800be62:	4602      	mov	r2, r0
 800be64:	b928      	cbnz	r0, 800be72 <__i2b+0x1a>
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <__i2b+0x24>)
 800be68:	4805      	ldr	r0, [pc, #20]	; (800be80 <__i2b+0x28>)
 800be6a:	f240 1145 	movw	r1, #325	; 0x145
 800be6e:	f000 fd0d 	bl	800c88c <__assert_func>
 800be72:	2301      	movs	r3, #1
 800be74:	6144      	str	r4, [r0, #20]
 800be76:	6103      	str	r3, [r0, #16]
 800be78:	bd10      	pop	{r4, pc}
 800be7a:	bf00      	nop
 800be7c:	0800cc9c 	.word	0x0800cc9c
 800be80:	0800ccad 	.word	0x0800ccad

0800be84 <__multiply>:
 800be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be88:	4691      	mov	r9, r2
 800be8a:	690a      	ldr	r2, [r1, #16]
 800be8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be90:	429a      	cmp	r2, r3
 800be92:	bfb8      	it	lt
 800be94:	460b      	movlt	r3, r1
 800be96:	460c      	mov	r4, r1
 800be98:	bfbc      	itt	lt
 800be9a:	464c      	movlt	r4, r9
 800be9c:	4699      	movlt	r9, r3
 800be9e:	6927      	ldr	r7, [r4, #16]
 800bea0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bea4:	68a3      	ldr	r3, [r4, #8]
 800bea6:	6861      	ldr	r1, [r4, #4]
 800bea8:	eb07 060a 	add.w	r6, r7, sl
 800beac:	42b3      	cmp	r3, r6
 800beae:	b085      	sub	sp, #20
 800beb0:	bfb8      	it	lt
 800beb2:	3101      	addlt	r1, #1
 800beb4:	f7ff feda 	bl	800bc6c <_Balloc>
 800beb8:	b930      	cbnz	r0, 800bec8 <__multiply+0x44>
 800beba:	4602      	mov	r2, r0
 800bebc:	4b44      	ldr	r3, [pc, #272]	; (800bfd0 <__multiply+0x14c>)
 800bebe:	4845      	ldr	r0, [pc, #276]	; (800bfd4 <__multiply+0x150>)
 800bec0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bec4:	f000 fce2 	bl	800c88c <__assert_func>
 800bec8:	f100 0514 	add.w	r5, r0, #20
 800becc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bed0:	462b      	mov	r3, r5
 800bed2:	2200      	movs	r2, #0
 800bed4:	4543      	cmp	r3, r8
 800bed6:	d321      	bcc.n	800bf1c <__multiply+0x98>
 800bed8:	f104 0314 	add.w	r3, r4, #20
 800bedc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bee0:	f109 0314 	add.w	r3, r9, #20
 800bee4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bee8:	9202      	str	r2, [sp, #8]
 800beea:	1b3a      	subs	r2, r7, r4
 800beec:	3a15      	subs	r2, #21
 800beee:	f022 0203 	bic.w	r2, r2, #3
 800bef2:	3204      	adds	r2, #4
 800bef4:	f104 0115 	add.w	r1, r4, #21
 800bef8:	428f      	cmp	r7, r1
 800befa:	bf38      	it	cc
 800befc:	2204      	movcc	r2, #4
 800befe:	9201      	str	r2, [sp, #4]
 800bf00:	9a02      	ldr	r2, [sp, #8]
 800bf02:	9303      	str	r3, [sp, #12]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d80c      	bhi.n	800bf22 <__multiply+0x9e>
 800bf08:	2e00      	cmp	r6, #0
 800bf0a:	dd03      	ble.n	800bf14 <__multiply+0x90>
 800bf0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d05b      	beq.n	800bfcc <__multiply+0x148>
 800bf14:	6106      	str	r6, [r0, #16]
 800bf16:	b005      	add	sp, #20
 800bf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1c:	f843 2b04 	str.w	r2, [r3], #4
 800bf20:	e7d8      	b.n	800bed4 <__multiply+0x50>
 800bf22:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf26:	f1ba 0f00 	cmp.w	sl, #0
 800bf2a:	d024      	beq.n	800bf76 <__multiply+0xf2>
 800bf2c:	f104 0e14 	add.w	lr, r4, #20
 800bf30:	46a9      	mov	r9, r5
 800bf32:	f04f 0c00 	mov.w	ip, #0
 800bf36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf3a:	f8d9 1000 	ldr.w	r1, [r9]
 800bf3e:	fa1f fb82 	uxth.w	fp, r2
 800bf42:	b289      	uxth	r1, r1
 800bf44:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf4c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf50:	4461      	add	r1, ip
 800bf52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf56:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf5e:	b289      	uxth	r1, r1
 800bf60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf64:	4577      	cmp	r7, lr
 800bf66:	f849 1b04 	str.w	r1, [r9], #4
 800bf6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf6e:	d8e2      	bhi.n	800bf36 <__multiply+0xb2>
 800bf70:	9a01      	ldr	r2, [sp, #4]
 800bf72:	f845 c002 	str.w	ip, [r5, r2]
 800bf76:	9a03      	ldr	r2, [sp, #12]
 800bf78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	f1b9 0f00 	cmp.w	r9, #0
 800bf82:	d021      	beq.n	800bfc8 <__multiply+0x144>
 800bf84:	6829      	ldr	r1, [r5, #0]
 800bf86:	f104 0c14 	add.w	ip, r4, #20
 800bf8a:	46ae      	mov	lr, r5
 800bf8c:	f04f 0a00 	mov.w	sl, #0
 800bf90:	f8bc b000 	ldrh.w	fp, [ip]
 800bf94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf98:	fb09 220b 	mla	r2, r9, fp, r2
 800bf9c:	4452      	add	r2, sl
 800bf9e:	b289      	uxth	r1, r1
 800bfa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfa4:	f84e 1b04 	str.w	r1, [lr], #4
 800bfa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bfac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfb0:	f8be 1000 	ldrh.w	r1, [lr]
 800bfb4:	fb09 110a 	mla	r1, r9, sl, r1
 800bfb8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bfbc:	4567      	cmp	r7, ip
 800bfbe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfc2:	d8e5      	bhi.n	800bf90 <__multiply+0x10c>
 800bfc4:	9a01      	ldr	r2, [sp, #4]
 800bfc6:	50a9      	str	r1, [r5, r2]
 800bfc8:	3504      	adds	r5, #4
 800bfca:	e799      	b.n	800bf00 <__multiply+0x7c>
 800bfcc:	3e01      	subs	r6, #1
 800bfce:	e79b      	b.n	800bf08 <__multiply+0x84>
 800bfd0:	0800cc9c 	.word	0x0800cc9c
 800bfd4:	0800ccad 	.word	0x0800ccad

0800bfd8 <__pow5mult>:
 800bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfdc:	4615      	mov	r5, r2
 800bfde:	f012 0203 	ands.w	r2, r2, #3
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	460f      	mov	r7, r1
 800bfe6:	d007      	beq.n	800bff8 <__pow5mult+0x20>
 800bfe8:	4c25      	ldr	r4, [pc, #148]	; (800c080 <__pow5mult+0xa8>)
 800bfea:	3a01      	subs	r2, #1
 800bfec:	2300      	movs	r3, #0
 800bfee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bff2:	f7ff fe9d 	bl	800bd30 <__multadd>
 800bff6:	4607      	mov	r7, r0
 800bff8:	10ad      	asrs	r5, r5, #2
 800bffa:	d03d      	beq.n	800c078 <__pow5mult+0xa0>
 800bffc:	69f4      	ldr	r4, [r6, #28]
 800bffe:	b97c      	cbnz	r4, 800c020 <__pow5mult+0x48>
 800c000:	2010      	movs	r0, #16
 800c002:	f7ff fd7f 	bl	800bb04 <malloc>
 800c006:	4602      	mov	r2, r0
 800c008:	61f0      	str	r0, [r6, #28]
 800c00a:	b928      	cbnz	r0, 800c018 <__pow5mult+0x40>
 800c00c:	4b1d      	ldr	r3, [pc, #116]	; (800c084 <__pow5mult+0xac>)
 800c00e:	481e      	ldr	r0, [pc, #120]	; (800c088 <__pow5mult+0xb0>)
 800c010:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c014:	f000 fc3a 	bl	800c88c <__assert_func>
 800c018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c01c:	6004      	str	r4, [r0, #0]
 800c01e:	60c4      	str	r4, [r0, #12]
 800c020:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c028:	b94c      	cbnz	r4, 800c03e <__pow5mult+0x66>
 800c02a:	f240 2171 	movw	r1, #625	; 0x271
 800c02e:	4630      	mov	r0, r6
 800c030:	f7ff ff12 	bl	800be58 <__i2b>
 800c034:	2300      	movs	r3, #0
 800c036:	f8c8 0008 	str.w	r0, [r8, #8]
 800c03a:	4604      	mov	r4, r0
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	f04f 0900 	mov.w	r9, #0
 800c042:	07eb      	lsls	r3, r5, #31
 800c044:	d50a      	bpl.n	800c05c <__pow5mult+0x84>
 800c046:	4639      	mov	r1, r7
 800c048:	4622      	mov	r2, r4
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7ff ff1a 	bl	800be84 <__multiply>
 800c050:	4639      	mov	r1, r7
 800c052:	4680      	mov	r8, r0
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff fe49 	bl	800bcec <_Bfree>
 800c05a:	4647      	mov	r7, r8
 800c05c:	106d      	asrs	r5, r5, #1
 800c05e:	d00b      	beq.n	800c078 <__pow5mult+0xa0>
 800c060:	6820      	ldr	r0, [r4, #0]
 800c062:	b938      	cbnz	r0, 800c074 <__pow5mult+0x9c>
 800c064:	4622      	mov	r2, r4
 800c066:	4621      	mov	r1, r4
 800c068:	4630      	mov	r0, r6
 800c06a:	f7ff ff0b 	bl	800be84 <__multiply>
 800c06e:	6020      	str	r0, [r4, #0]
 800c070:	f8c0 9000 	str.w	r9, [r0]
 800c074:	4604      	mov	r4, r0
 800c076:	e7e4      	b.n	800c042 <__pow5mult+0x6a>
 800c078:	4638      	mov	r0, r7
 800c07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c07e:	bf00      	nop
 800c080:	0800cdf8 	.word	0x0800cdf8
 800c084:	0800cc2d 	.word	0x0800cc2d
 800c088:	0800ccad 	.word	0x0800ccad

0800c08c <__lshift>:
 800c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	460c      	mov	r4, r1
 800c092:	6849      	ldr	r1, [r1, #4]
 800c094:	6923      	ldr	r3, [r4, #16]
 800c096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c09a:	68a3      	ldr	r3, [r4, #8]
 800c09c:	4607      	mov	r7, r0
 800c09e:	4691      	mov	r9, r2
 800c0a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0a4:	f108 0601 	add.w	r6, r8, #1
 800c0a8:	42b3      	cmp	r3, r6
 800c0aa:	db0b      	blt.n	800c0c4 <__lshift+0x38>
 800c0ac:	4638      	mov	r0, r7
 800c0ae:	f7ff fddd 	bl	800bc6c <_Balloc>
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	b948      	cbnz	r0, 800c0ca <__lshift+0x3e>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	4b28      	ldr	r3, [pc, #160]	; (800c15c <__lshift+0xd0>)
 800c0ba:	4829      	ldr	r0, [pc, #164]	; (800c160 <__lshift+0xd4>)
 800c0bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c0c0:	f000 fbe4 	bl	800c88c <__assert_func>
 800c0c4:	3101      	adds	r1, #1
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	e7ee      	b.n	800c0a8 <__lshift+0x1c>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f100 0114 	add.w	r1, r0, #20
 800c0d0:	f100 0210 	add.w	r2, r0, #16
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	4553      	cmp	r3, sl
 800c0d8:	db33      	blt.n	800c142 <__lshift+0xb6>
 800c0da:	6920      	ldr	r0, [r4, #16]
 800c0dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0e0:	f104 0314 	add.w	r3, r4, #20
 800c0e4:	f019 091f 	ands.w	r9, r9, #31
 800c0e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0f0:	d02b      	beq.n	800c14a <__lshift+0xbe>
 800c0f2:	f1c9 0e20 	rsb	lr, r9, #32
 800c0f6:	468a      	mov	sl, r1
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	fa00 f009 	lsl.w	r0, r0, r9
 800c100:	4310      	orrs	r0, r2
 800c102:	f84a 0b04 	str.w	r0, [sl], #4
 800c106:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10a:	459c      	cmp	ip, r3
 800c10c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c110:	d8f3      	bhi.n	800c0fa <__lshift+0x6e>
 800c112:	ebac 0304 	sub.w	r3, ip, r4
 800c116:	3b15      	subs	r3, #21
 800c118:	f023 0303 	bic.w	r3, r3, #3
 800c11c:	3304      	adds	r3, #4
 800c11e:	f104 0015 	add.w	r0, r4, #21
 800c122:	4584      	cmp	ip, r0
 800c124:	bf38      	it	cc
 800c126:	2304      	movcc	r3, #4
 800c128:	50ca      	str	r2, [r1, r3]
 800c12a:	b10a      	cbz	r2, 800c130 <__lshift+0xa4>
 800c12c:	f108 0602 	add.w	r6, r8, #2
 800c130:	3e01      	subs	r6, #1
 800c132:	4638      	mov	r0, r7
 800c134:	612e      	str	r6, [r5, #16]
 800c136:	4621      	mov	r1, r4
 800c138:	f7ff fdd8 	bl	800bcec <_Bfree>
 800c13c:	4628      	mov	r0, r5
 800c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c142:	f842 0f04 	str.w	r0, [r2, #4]!
 800c146:	3301      	adds	r3, #1
 800c148:	e7c5      	b.n	800c0d6 <__lshift+0x4a>
 800c14a:	3904      	subs	r1, #4
 800c14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c150:	f841 2f04 	str.w	r2, [r1, #4]!
 800c154:	459c      	cmp	ip, r3
 800c156:	d8f9      	bhi.n	800c14c <__lshift+0xc0>
 800c158:	e7ea      	b.n	800c130 <__lshift+0xa4>
 800c15a:	bf00      	nop
 800c15c:	0800cc9c 	.word	0x0800cc9c
 800c160:	0800ccad 	.word	0x0800ccad

0800c164 <__mcmp>:
 800c164:	b530      	push	{r4, r5, lr}
 800c166:	6902      	ldr	r2, [r0, #16]
 800c168:	690c      	ldr	r4, [r1, #16]
 800c16a:	1b12      	subs	r2, r2, r4
 800c16c:	d10e      	bne.n	800c18c <__mcmp+0x28>
 800c16e:	f100 0314 	add.w	r3, r0, #20
 800c172:	3114      	adds	r1, #20
 800c174:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c178:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c17c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c180:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c184:	42a5      	cmp	r5, r4
 800c186:	d003      	beq.n	800c190 <__mcmp+0x2c>
 800c188:	d305      	bcc.n	800c196 <__mcmp+0x32>
 800c18a:	2201      	movs	r2, #1
 800c18c:	4610      	mov	r0, r2
 800c18e:	bd30      	pop	{r4, r5, pc}
 800c190:	4283      	cmp	r3, r0
 800c192:	d3f3      	bcc.n	800c17c <__mcmp+0x18>
 800c194:	e7fa      	b.n	800c18c <__mcmp+0x28>
 800c196:	f04f 32ff 	mov.w	r2, #4294967295
 800c19a:	e7f7      	b.n	800c18c <__mcmp+0x28>

0800c19c <__mdiff>:
 800c19c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4690      	mov	r8, r2
 800c1aa:	f7ff ffdb 	bl	800c164 <__mcmp>
 800c1ae:	1e05      	subs	r5, r0, #0
 800c1b0:	d110      	bne.n	800c1d4 <__mdiff+0x38>
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f7ff fd59 	bl	800bc6c <_Balloc>
 800c1ba:	b930      	cbnz	r0, 800c1ca <__mdiff+0x2e>
 800c1bc:	4b3a      	ldr	r3, [pc, #232]	; (800c2a8 <__mdiff+0x10c>)
 800c1be:	4602      	mov	r2, r0
 800c1c0:	f240 2137 	movw	r1, #567	; 0x237
 800c1c4:	4839      	ldr	r0, [pc, #228]	; (800c2ac <__mdiff+0x110>)
 800c1c6:	f000 fb61 	bl	800c88c <__assert_func>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	bfa4      	itt	ge
 800c1d6:	4643      	movge	r3, r8
 800c1d8:	46a0      	movge	r8, r4
 800c1da:	4630      	mov	r0, r6
 800c1dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1e0:	bfa6      	itte	ge
 800c1e2:	461c      	movge	r4, r3
 800c1e4:	2500      	movge	r5, #0
 800c1e6:	2501      	movlt	r5, #1
 800c1e8:	f7ff fd40 	bl	800bc6c <_Balloc>
 800c1ec:	b920      	cbnz	r0, 800c1f8 <__mdiff+0x5c>
 800c1ee:	4b2e      	ldr	r3, [pc, #184]	; (800c2a8 <__mdiff+0x10c>)
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	f240 2145 	movw	r1, #581	; 0x245
 800c1f6:	e7e5      	b.n	800c1c4 <__mdiff+0x28>
 800c1f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1fc:	6926      	ldr	r6, [r4, #16]
 800c1fe:	60c5      	str	r5, [r0, #12]
 800c200:	f104 0914 	add.w	r9, r4, #20
 800c204:	f108 0514 	add.w	r5, r8, #20
 800c208:	f100 0e14 	add.w	lr, r0, #20
 800c20c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c210:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c214:	f108 0210 	add.w	r2, r8, #16
 800c218:	46f2      	mov	sl, lr
 800c21a:	2100      	movs	r1, #0
 800c21c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c220:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c224:	fa11 f88b 	uxtah	r8, r1, fp
 800c228:	b299      	uxth	r1, r3
 800c22a:	0c1b      	lsrs	r3, r3, #16
 800c22c:	eba8 0801 	sub.w	r8, r8, r1
 800c230:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c234:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c238:	fa1f f888 	uxth.w	r8, r8
 800c23c:	1419      	asrs	r1, r3, #16
 800c23e:	454e      	cmp	r6, r9
 800c240:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c244:	f84a 3b04 	str.w	r3, [sl], #4
 800c248:	d8e8      	bhi.n	800c21c <__mdiff+0x80>
 800c24a:	1b33      	subs	r3, r6, r4
 800c24c:	3b15      	subs	r3, #21
 800c24e:	f023 0303 	bic.w	r3, r3, #3
 800c252:	3304      	adds	r3, #4
 800c254:	3415      	adds	r4, #21
 800c256:	42a6      	cmp	r6, r4
 800c258:	bf38      	it	cc
 800c25a:	2304      	movcc	r3, #4
 800c25c:	441d      	add	r5, r3
 800c25e:	4473      	add	r3, lr
 800c260:	469e      	mov	lr, r3
 800c262:	462e      	mov	r6, r5
 800c264:	4566      	cmp	r6, ip
 800c266:	d30e      	bcc.n	800c286 <__mdiff+0xea>
 800c268:	f10c 0203 	add.w	r2, ip, #3
 800c26c:	1b52      	subs	r2, r2, r5
 800c26e:	f022 0203 	bic.w	r2, r2, #3
 800c272:	3d03      	subs	r5, #3
 800c274:	45ac      	cmp	ip, r5
 800c276:	bf38      	it	cc
 800c278:	2200      	movcc	r2, #0
 800c27a:	4413      	add	r3, r2
 800c27c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c280:	b17a      	cbz	r2, 800c2a2 <__mdiff+0x106>
 800c282:	6107      	str	r7, [r0, #16]
 800c284:	e7a4      	b.n	800c1d0 <__mdiff+0x34>
 800c286:	f856 8b04 	ldr.w	r8, [r6], #4
 800c28a:	fa11 f288 	uxtah	r2, r1, r8
 800c28e:	1414      	asrs	r4, r2, #16
 800c290:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c294:	b292      	uxth	r2, r2
 800c296:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c29a:	f84e 2b04 	str.w	r2, [lr], #4
 800c29e:	1421      	asrs	r1, r4, #16
 800c2a0:	e7e0      	b.n	800c264 <__mdiff+0xc8>
 800c2a2:	3f01      	subs	r7, #1
 800c2a4:	e7ea      	b.n	800c27c <__mdiff+0xe0>
 800c2a6:	bf00      	nop
 800c2a8:	0800cc9c 	.word	0x0800cc9c
 800c2ac:	0800ccad 	.word	0x0800ccad

0800c2b0 <__d2b>:
 800c2b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	460f      	mov	r7, r1
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	ec59 8b10 	vmov	r8, r9, d0
 800c2bc:	4616      	mov	r6, r2
 800c2be:	f7ff fcd5 	bl	800bc6c <_Balloc>
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	b930      	cbnz	r0, 800c2d4 <__d2b+0x24>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	4b24      	ldr	r3, [pc, #144]	; (800c35c <__d2b+0xac>)
 800c2ca:	4825      	ldr	r0, [pc, #148]	; (800c360 <__d2b+0xb0>)
 800c2cc:	f240 310f 	movw	r1, #783	; 0x30f
 800c2d0:	f000 fadc 	bl	800c88c <__assert_func>
 800c2d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2dc:	bb2d      	cbnz	r5, 800c32a <__d2b+0x7a>
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	f1b8 0300 	subs.w	r3, r8, #0
 800c2e4:	d026      	beq.n	800c334 <__d2b+0x84>
 800c2e6:	4668      	mov	r0, sp
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	f7ff fd87 	bl	800bdfc <__lo0bits>
 800c2ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2f2:	b1e8      	cbz	r0, 800c330 <__d2b+0x80>
 800c2f4:	f1c0 0320 	rsb	r3, r0, #32
 800c2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fc:	430b      	orrs	r3, r1
 800c2fe:	40c2      	lsrs	r2, r0
 800c300:	6163      	str	r3, [r4, #20]
 800c302:	9201      	str	r2, [sp, #4]
 800c304:	9b01      	ldr	r3, [sp, #4]
 800c306:	61a3      	str	r3, [r4, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	bf14      	ite	ne
 800c30c:	2202      	movne	r2, #2
 800c30e:	2201      	moveq	r2, #1
 800c310:	6122      	str	r2, [r4, #16]
 800c312:	b1bd      	cbz	r5, 800c344 <__d2b+0x94>
 800c314:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c318:	4405      	add	r5, r0
 800c31a:	603d      	str	r5, [r7, #0]
 800c31c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c320:	6030      	str	r0, [r6, #0]
 800c322:	4620      	mov	r0, r4
 800c324:	b003      	add	sp, #12
 800c326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c32a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c32e:	e7d6      	b.n	800c2de <__d2b+0x2e>
 800c330:	6161      	str	r1, [r4, #20]
 800c332:	e7e7      	b.n	800c304 <__d2b+0x54>
 800c334:	a801      	add	r0, sp, #4
 800c336:	f7ff fd61 	bl	800bdfc <__lo0bits>
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	6163      	str	r3, [r4, #20]
 800c33e:	3020      	adds	r0, #32
 800c340:	2201      	movs	r2, #1
 800c342:	e7e5      	b.n	800c310 <__d2b+0x60>
 800c344:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c348:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c34c:	6038      	str	r0, [r7, #0]
 800c34e:	6918      	ldr	r0, [r3, #16]
 800c350:	f7ff fd34 	bl	800bdbc <__hi0bits>
 800c354:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c358:	e7e2      	b.n	800c320 <__d2b+0x70>
 800c35a:	bf00      	nop
 800c35c:	0800cc9c 	.word	0x0800cc9c
 800c360:	0800ccad 	.word	0x0800ccad

0800c364 <__sfputc_r>:
 800c364:	6893      	ldr	r3, [r2, #8]
 800c366:	3b01      	subs	r3, #1
 800c368:	2b00      	cmp	r3, #0
 800c36a:	b410      	push	{r4}
 800c36c:	6093      	str	r3, [r2, #8]
 800c36e:	da08      	bge.n	800c382 <__sfputc_r+0x1e>
 800c370:	6994      	ldr	r4, [r2, #24]
 800c372:	42a3      	cmp	r3, r4
 800c374:	db01      	blt.n	800c37a <__sfputc_r+0x16>
 800c376:	290a      	cmp	r1, #10
 800c378:	d103      	bne.n	800c382 <__sfputc_r+0x1e>
 800c37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c37e:	f7fe bbe8 	b.w	800ab52 <__swbuf_r>
 800c382:	6813      	ldr	r3, [r2, #0]
 800c384:	1c58      	adds	r0, r3, #1
 800c386:	6010      	str	r0, [r2, #0]
 800c388:	7019      	strb	r1, [r3, #0]
 800c38a:	4608      	mov	r0, r1
 800c38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <__sfputs_r>:
 800c392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c394:	4606      	mov	r6, r0
 800c396:	460f      	mov	r7, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	18d5      	adds	r5, r2, r3
 800c39c:	42ac      	cmp	r4, r5
 800c39e:	d101      	bne.n	800c3a4 <__sfputs_r+0x12>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e007      	b.n	800c3b4 <__sfputs_r+0x22>
 800c3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a8:	463a      	mov	r2, r7
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f7ff ffda 	bl	800c364 <__sfputc_r>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d1f3      	bne.n	800c39c <__sfputs_r+0xa>
 800c3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3b8 <_vfiprintf_r>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	460d      	mov	r5, r1
 800c3be:	b09d      	sub	sp, #116	; 0x74
 800c3c0:	4614      	mov	r4, r2
 800c3c2:	4698      	mov	r8, r3
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	b118      	cbz	r0, 800c3d0 <_vfiprintf_r+0x18>
 800c3c8:	6a03      	ldr	r3, [r0, #32]
 800c3ca:	b90b      	cbnz	r3, 800c3d0 <_vfiprintf_r+0x18>
 800c3cc:	f7fe fa24 	bl	800a818 <__sinit>
 800c3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3d2:	07d9      	lsls	r1, r3, #31
 800c3d4:	d405      	bmi.n	800c3e2 <_vfiprintf_r+0x2a>
 800c3d6:	89ab      	ldrh	r3, [r5, #12]
 800c3d8:	059a      	lsls	r2, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_vfiprintf_r+0x2a>
 800c3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3de:	f7fe fcc9 	bl	800ad74 <__retarget_lock_acquire_recursive>
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	071b      	lsls	r3, r3, #28
 800c3e6:	d501      	bpl.n	800c3ec <_vfiprintf_r+0x34>
 800c3e8:	692b      	ldr	r3, [r5, #16]
 800c3ea:	b99b      	cbnz	r3, 800c414 <_vfiprintf_r+0x5c>
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f7fe fbec 	bl	800abcc <__swsetup_r>
 800c3f4:	b170      	cbz	r0, 800c414 <_vfiprintf_r+0x5c>
 800c3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f8:	07dc      	lsls	r4, r3, #31
 800c3fa:	d504      	bpl.n	800c406 <_vfiprintf_r+0x4e>
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	b01d      	add	sp, #116	; 0x74
 800c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c406:	89ab      	ldrh	r3, [r5, #12]
 800c408:	0598      	lsls	r0, r3, #22
 800c40a:	d4f7      	bmi.n	800c3fc <_vfiprintf_r+0x44>
 800c40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c40e:	f7fe fcb2 	bl	800ad76 <__retarget_lock_release_recursive>
 800c412:	e7f3      	b.n	800c3fc <_vfiprintf_r+0x44>
 800c414:	2300      	movs	r3, #0
 800c416:	9309      	str	r3, [sp, #36]	; 0x24
 800c418:	2320      	movs	r3, #32
 800c41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c41e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c422:	2330      	movs	r3, #48	; 0x30
 800c424:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c5d8 <_vfiprintf_r+0x220>
 800c428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c42c:	f04f 0901 	mov.w	r9, #1
 800c430:	4623      	mov	r3, r4
 800c432:	469a      	mov	sl, r3
 800c434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c438:	b10a      	cbz	r2, 800c43e <_vfiprintf_r+0x86>
 800c43a:	2a25      	cmp	r2, #37	; 0x25
 800c43c:	d1f9      	bne.n	800c432 <_vfiprintf_r+0x7a>
 800c43e:	ebba 0b04 	subs.w	fp, sl, r4
 800c442:	d00b      	beq.n	800c45c <_vfiprintf_r+0xa4>
 800c444:	465b      	mov	r3, fp
 800c446:	4622      	mov	r2, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7ff ffa1 	bl	800c392 <__sfputs_r>
 800c450:	3001      	adds	r0, #1
 800c452:	f000 80a9 	beq.w	800c5a8 <_vfiprintf_r+0x1f0>
 800c456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c458:	445a      	add	r2, fp
 800c45a:	9209      	str	r2, [sp, #36]	; 0x24
 800c45c:	f89a 3000 	ldrb.w	r3, [sl]
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 80a1 	beq.w	800c5a8 <_vfiprintf_r+0x1f0>
 800c466:	2300      	movs	r3, #0
 800c468:	f04f 32ff 	mov.w	r2, #4294967295
 800c46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c470:	f10a 0a01 	add.w	sl, sl, #1
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	9307      	str	r3, [sp, #28]
 800c478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c47c:	931a      	str	r3, [sp, #104]	; 0x68
 800c47e:	4654      	mov	r4, sl
 800c480:	2205      	movs	r2, #5
 800c482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c486:	4854      	ldr	r0, [pc, #336]	; (800c5d8 <_vfiprintf_r+0x220>)
 800c488:	f7f3 feca 	bl	8000220 <memchr>
 800c48c:	9a04      	ldr	r2, [sp, #16]
 800c48e:	b9d8      	cbnz	r0, 800c4c8 <_vfiprintf_r+0x110>
 800c490:	06d1      	lsls	r1, r2, #27
 800c492:	bf44      	itt	mi
 800c494:	2320      	movmi	r3, #32
 800c496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c49a:	0713      	lsls	r3, r2, #28
 800c49c:	bf44      	itt	mi
 800c49e:	232b      	movmi	r3, #43	; 0x2b
 800c4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4aa:	d015      	beq.n	800c4d8 <_vfiprintf_r+0x120>
 800c4ac:	9a07      	ldr	r2, [sp, #28]
 800c4ae:	4654      	mov	r4, sl
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f04f 0c0a 	mov.w	ip, #10
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4bc:	3b30      	subs	r3, #48	; 0x30
 800c4be:	2b09      	cmp	r3, #9
 800c4c0:	d94d      	bls.n	800c55e <_vfiprintf_r+0x1a6>
 800c4c2:	b1b0      	cbz	r0, 800c4f2 <_vfiprintf_r+0x13a>
 800c4c4:	9207      	str	r2, [sp, #28]
 800c4c6:	e014      	b.n	800c4f2 <_vfiprintf_r+0x13a>
 800c4c8:	eba0 0308 	sub.w	r3, r0, r8
 800c4cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	9304      	str	r3, [sp, #16]
 800c4d4:	46a2      	mov	sl, r4
 800c4d6:	e7d2      	b.n	800c47e <_vfiprintf_r+0xc6>
 800c4d8:	9b03      	ldr	r3, [sp, #12]
 800c4da:	1d19      	adds	r1, r3, #4
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	9103      	str	r1, [sp, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	bfbb      	ittet	lt
 800c4e4:	425b      	neglt	r3, r3
 800c4e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4ea:	9307      	strge	r3, [sp, #28]
 800c4ec:	9307      	strlt	r3, [sp, #28]
 800c4ee:	bfb8      	it	lt
 800c4f0:	9204      	strlt	r2, [sp, #16]
 800c4f2:	7823      	ldrb	r3, [r4, #0]
 800c4f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f6:	d10c      	bne.n	800c512 <_vfiprintf_r+0x15a>
 800c4f8:	7863      	ldrb	r3, [r4, #1]
 800c4fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fc:	d134      	bne.n	800c568 <_vfiprintf_r+0x1b0>
 800c4fe:	9b03      	ldr	r3, [sp, #12]
 800c500:	1d1a      	adds	r2, r3, #4
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	9203      	str	r2, [sp, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	bfb8      	it	lt
 800c50a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c50e:	3402      	adds	r4, #2
 800c510:	9305      	str	r3, [sp, #20]
 800c512:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c5e8 <_vfiprintf_r+0x230>
 800c516:	7821      	ldrb	r1, [r4, #0]
 800c518:	2203      	movs	r2, #3
 800c51a:	4650      	mov	r0, sl
 800c51c:	f7f3 fe80 	bl	8000220 <memchr>
 800c520:	b138      	cbz	r0, 800c532 <_vfiprintf_r+0x17a>
 800c522:	9b04      	ldr	r3, [sp, #16]
 800c524:	eba0 000a 	sub.w	r0, r0, sl
 800c528:	2240      	movs	r2, #64	; 0x40
 800c52a:	4082      	lsls	r2, r0
 800c52c:	4313      	orrs	r3, r2
 800c52e:	3401      	adds	r4, #1
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c536:	4829      	ldr	r0, [pc, #164]	; (800c5dc <_vfiprintf_r+0x224>)
 800c538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c53c:	2206      	movs	r2, #6
 800c53e:	f7f3 fe6f 	bl	8000220 <memchr>
 800c542:	2800      	cmp	r0, #0
 800c544:	d03f      	beq.n	800c5c6 <_vfiprintf_r+0x20e>
 800c546:	4b26      	ldr	r3, [pc, #152]	; (800c5e0 <_vfiprintf_r+0x228>)
 800c548:	bb1b      	cbnz	r3, 800c592 <_vfiprintf_r+0x1da>
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	3307      	adds	r3, #7
 800c54e:	f023 0307 	bic.w	r3, r3, #7
 800c552:	3308      	adds	r3, #8
 800c554:	9303      	str	r3, [sp, #12]
 800c556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c558:	443b      	add	r3, r7
 800c55a:	9309      	str	r3, [sp, #36]	; 0x24
 800c55c:	e768      	b.n	800c430 <_vfiprintf_r+0x78>
 800c55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c562:	460c      	mov	r4, r1
 800c564:	2001      	movs	r0, #1
 800c566:	e7a6      	b.n	800c4b6 <_vfiprintf_r+0xfe>
 800c568:	2300      	movs	r3, #0
 800c56a:	3401      	adds	r4, #1
 800c56c:	9305      	str	r3, [sp, #20]
 800c56e:	4619      	mov	r1, r3
 800c570:	f04f 0c0a 	mov.w	ip, #10
 800c574:	4620      	mov	r0, r4
 800c576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c57a:	3a30      	subs	r2, #48	; 0x30
 800c57c:	2a09      	cmp	r2, #9
 800c57e:	d903      	bls.n	800c588 <_vfiprintf_r+0x1d0>
 800c580:	2b00      	cmp	r3, #0
 800c582:	d0c6      	beq.n	800c512 <_vfiprintf_r+0x15a>
 800c584:	9105      	str	r1, [sp, #20]
 800c586:	e7c4      	b.n	800c512 <_vfiprintf_r+0x15a>
 800c588:	fb0c 2101 	mla	r1, ip, r1, r2
 800c58c:	4604      	mov	r4, r0
 800c58e:	2301      	movs	r3, #1
 800c590:	e7f0      	b.n	800c574 <_vfiprintf_r+0x1bc>
 800c592:	ab03      	add	r3, sp, #12
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	462a      	mov	r2, r5
 800c598:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <_vfiprintf_r+0x22c>)
 800c59a:	a904      	add	r1, sp, #16
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7fd fcfb 	bl	8009f98 <_printf_float>
 800c5a2:	4607      	mov	r7, r0
 800c5a4:	1c78      	adds	r0, r7, #1
 800c5a6:	d1d6      	bne.n	800c556 <_vfiprintf_r+0x19e>
 800c5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d405      	bmi.n	800c5ba <_vfiprintf_r+0x202>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	059a      	lsls	r2, r3, #22
 800c5b2:	d402      	bmi.n	800c5ba <_vfiprintf_r+0x202>
 800c5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5b6:	f7fe fbde 	bl	800ad76 <__retarget_lock_release_recursive>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	065b      	lsls	r3, r3, #25
 800c5be:	f53f af1d 	bmi.w	800c3fc <_vfiprintf_r+0x44>
 800c5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5c4:	e71c      	b.n	800c400 <_vfiprintf_r+0x48>
 800c5c6:	ab03      	add	r3, sp, #12
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	462a      	mov	r2, r5
 800c5cc:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <_vfiprintf_r+0x22c>)
 800c5ce:	a904      	add	r1, sp, #16
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7fd ff85 	bl	800a4e0 <_printf_i>
 800c5d6:	e7e4      	b.n	800c5a2 <_vfiprintf_r+0x1ea>
 800c5d8:	0800ce04 	.word	0x0800ce04
 800c5dc:	0800ce0e 	.word	0x0800ce0e
 800c5e0:	08009f99 	.word	0x08009f99
 800c5e4:	0800c393 	.word	0x0800c393
 800c5e8:	0800ce0a 	.word	0x0800ce0a

0800c5ec <__sflush_r>:
 800c5ec:	898a      	ldrh	r2, [r1, #12]
 800c5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	0710      	lsls	r0, r2, #28
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	d458      	bmi.n	800c6ac <__sflush_r+0xc0>
 800c5fa:	684b      	ldr	r3, [r1, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	dc05      	bgt.n	800c60c <__sflush_r+0x20>
 800c600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c602:	2b00      	cmp	r3, #0
 800c604:	dc02      	bgt.n	800c60c <__sflush_r+0x20>
 800c606:	2000      	movs	r0, #0
 800c608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d0f9      	beq.n	800c606 <__sflush_r+0x1a>
 800c612:	2300      	movs	r3, #0
 800c614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c618:	682f      	ldr	r7, [r5, #0]
 800c61a:	6a21      	ldr	r1, [r4, #32]
 800c61c:	602b      	str	r3, [r5, #0]
 800c61e:	d032      	beq.n	800c686 <__sflush_r+0x9a>
 800c620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	075a      	lsls	r2, r3, #29
 800c626:	d505      	bpl.n	800c634 <__sflush_r+0x48>
 800c628:	6863      	ldr	r3, [r4, #4]
 800c62a:	1ac0      	subs	r0, r0, r3
 800c62c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c62e:	b10b      	cbz	r3, 800c634 <__sflush_r+0x48>
 800c630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c632:	1ac0      	subs	r0, r0, r3
 800c634:	2300      	movs	r3, #0
 800c636:	4602      	mov	r2, r0
 800c638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c63a:	6a21      	ldr	r1, [r4, #32]
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b0      	blx	r6
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	89a3      	ldrh	r3, [r4, #12]
 800c644:	d106      	bne.n	800c654 <__sflush_r+0x68>
 800c646:	6829      	ldr	r1, [r5, #0]
 800c648:	291d      	cmp	r1, #29
 800c64a:	d82b      	bhi.n	800c6a4 <__sflush_r+0xb8>
 800c64c:	4a29      	ldr	r2, [pc, #164]	; (800c6f4 <__sflush_r+0x108>)
 800c64e:	410a      	asrs	r2, r1
 800c650:	07d6      	lsls	r6, r2, #31
 800c652:	d427      	bmi.n	800c6a4 <__sflush_r+0xb8>
 800c654:	2200      	movs	r2, #0
 800c656:	6062      	str	r2, [r4, #4]
 800c658:	04d9      	lsls	r1, r3, #19
 800c65a:	6922      	ldr	r2, [r4, #16]
 800c65c:	6022      	str	r2, [r4, #0]
 800c65e:	d504      	bpl.n	800c66a <__sflush_r+0x7e>
 800c660:	1c42      	adds	r2, r0, #1
 800c662:	d101      	bne.n	800c668 <__sflush_r+0x7c>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b903      	cbnz	r3, 800c66a <__sflush_r+0x7e>
 800c668:	6560      	str	r0, [r4, #84]	; 0x54
 800c66a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c66c:	602f      	str	r7, [r5, #0]
 800c66e:	2900      	cmp	r1, #0
 800c670:	d0c9      	beq.n	800c606 <__sflush_r+0x1a>
 800c672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c676:	4299      	cmp	r1, r3
 800c678:	d002      	beq.n	800c680 <__sflush_r+0x94>
 800c67a:	4628      	mov	r0, r5
 800c67c:	f7ff f9f6 	bl	800ba6c <_free_r>
 800c680:	2000      	movs	r0, #0
 800c682:	6360      	str	r0, [r4, #52]	; 0x34
 800c684:	e7c0      	b.n	800c608 <__sflush_r+0x1c>
 800c686:	2301      	movs	r3, #1
 800c688:	4628      	mov	r0, r5
 800c68a:	47b0      	blx	r6
 800c68c:	1c41      	adds	r1, r0, #1
 800c68e:	d1c8      	bne.n	800c622 <__sflush_r+0x36>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0c5      	beq.n	800c622 <__sflush_r+0x36>
 800c696:	2b1d      	cmp	r3, #29
 800c698:	d001      	beq.n	800c69e <__sflush_r+0xb2>
 800c69a:	2b16      	cmp	r3, #22
 800c69c:	d101      	bne.n	800c6a2 <__sflush_r+0xb6>
 800c69e:	602f      	str	r7, [r5, #0]
 800c6a0:	e7b1      	b.n	800c606 <__sflush_r+0x1a>
 800c6a2:	89a3      	ldrh	r3, [r4, #12]
 800c6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a8:	81a3      	strh	r3, [r4, #12]
 800c6aa:	e7ad      	b.n	800c608 <__sflush_r+0x1c>
 800c6ac:	690f      	ldr	r7, [r1, #16]
 800c6ae:	2f00      	cmp	r7, #0
 800c6b0:	d0a9      	beq.n	800c606 <__sflush_r+0x1a>
 800c6b2:	0793      	lsls	r3, r2, #30
 800c6b4:	680e      	ldr	r6, [r1, #0]
 800c6b6:	bf08      	it	eq
 800c6b8:	694b      	ldreq	r3, [r1, #20]
 800c6ba:	600f      	str	r7, [r1, #0]
 800c6bc:	bf18      	it	ne
 800c6be:	2300      	movne	r3, #0
 800c6c0:	eba6 0807 	sub.w	r8, r6, r7
 800c6c4:	608b      	str	r3, [r1, #8]
 800c6c6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ca:	dd9c      	ble.n	800c606 <__sflush_r+0x1a>
 800c6cc:	6a21      	ldr	r1, [r4, #32]
 800c6ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6d0:	4643      	mov	r3, r8
 800c6d2:	463a      	mov	r2, r7
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b0      	blx	r6
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	dc06      	bgt.n	800c6ea <__sflush_r+0xfe>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	e78e      	b.n	800c608 <__sflush_r+0x1c>
 800c6ea:	4407      	add	r7, r0
 800c6ec:	eba8 0800 	sub.w	r8, r8, r0
 800c6f0:	e7e9      	b.n	800c6c6 <__sflush_r+0xda>
 800c6f2:	bf00      	nop
 800c6f4:	dfbffffe 	.word	0xdfbffffe

0800c6f8 <_fflush_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	690b      	ldr	r3, [r1, #16]
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	b913      	cbnz	r3, 800c708 <_fflush_r+0x10>
 800c702:	2500      	movs	r5, #0
 800c704:	4628      	mov	r0, r5
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	b118      	cbz	r0, 800c712 <_fflush_r+0x1a>
 800c70a:	6a03      	ldr	r3, [r0, #32]
 800c70c:	b90b      	cbnz	r3, 800c712 <_fflush_r+0x1a>
 800c70e:	f7fe f883 	bl	800a818 <__sinit>
 800c712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0f3      	beq.n	800c702 <_fflush_r+0xa>
 800c71a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c71c:	07d0      	lsls	r0, r2, #31
 800c71e:	d404      	bmi.n	800c72a <_fflush_r+0x32>
 800c720:	0599      	lsls	r1, r3, #22
 800c722:	d402      	bmi.n	800c72a <_fflush_r+0x32>
 800c724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c726:	f7fe fb25 	bl	800ad74 <__retarget_lock_acquire_recursive>
 800c72a:	4628      	mov	r0, r5
 800c72c:	4621      	mov	r1, r4
 800c72e:	f7ff ff5d 	bl	800c5ec <__sflush_r>
 800c732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c734:	07da      	lsls	r2, r3, #31
 800c736:	4605      	mov	r5, r0
 800c738:	d4e4      	bmi.n	800c704 <_fflush_r+0xc>
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	059b      	lsls	r3, r3, #22
 800c73e:	d4e1      	bmi.n	800c704 <_fflush_r+0xc>
 800c740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c742:	f7fe fb18 	bl	800ad76 <__retarget_lock_release_recursive>
 800c746:	e7dd      	b.n	800c704 <_fflush_r+0xc>

0800c748 <__swhatbuf_r>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c750:	2900      	cmp	r1, #0
 800c752:	b096      	sub	sp, #88	; 0x58
 800c754:	4615      	mov	r5, r2
 800c756:	461e      	mov	r6, r3
 800c758:	da0d      	bge.n	800c776 <__swhatbuf_r+0x2e>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c760:	f04f 0100 	mov.w	r1, #0
 800c764:	bf0c      	ite	eq
 800c766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c76a:	2340      	movne	r3, #64	; 0x40
 800c76c:	2000      	movs	r0, #0
 800c76e:	6031      	str	r1, [r6, #0]
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	b016      	add	sp, #88	; 0x58
 800c774:	bd70      	pop	{r4, r5, r6, pc}
 800c776:	466a      	mov	r2, sp
 800c778:	f000 f848 	bl	800c80c <_fstat_r>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	dbec      	blt.n	800c75a <__swhatbuf_r+0x12>
 800c780:	9901      	ldr	r1, [sp, #4]
 800c782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c78a:	4259      	negs	r1, r3
 800c78c:	4159      	adcs	r1, r3
 800c78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c792:	e7eb      	b.n	800c76c <__swhatbuf_r+0x24>

0800c794 <__smakebuf_r>:
 800c794:	898b      	ldrh	r3, [r1, #12]
 800c796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c798:	079d      	lsls	r5, r3, #30
 800c79a:	4606      	mov	r6, r0
 800c79c:	460c      	mov	r4, r1
 800c79e:	d507      	bpl.n	800c7b0 <__smakebuf_r+0x1c>
 800c7a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	6123      	str	r3, [r4, #16]
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	6163      	str	r3, [r4, #20]
 800c7ac:	b002      	add	sp, #8
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	ab01      	add	r3, sp, #4
 800c7b2:	466a      	mov	r2, sp
 800c7b4:	f7ff ffc8 	bl	800c748 <__swhatbuf_r>
 800c7b8:	9900      	ldr	r1, [sp, #0]
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff f9c9 	bl	800bb54 <_malloc_r>
 800c7c2:	b948      	cbnz	r0, 800c7d8 <__smakebuf_r+0x44>
 800c7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7c8:	059a      	lsls	r2, r3, #22
 800c7ca:	d4ef      	bmi.n	800c7ac <__smakebuf_r+0x18>
 800c7cc:	f023 0303 	bic.w	r3, r3, #3
 800c7d0:	f043 0302 	orr.w	r3, r3, #2
 800c7d4:	81a3      	strh	r3, [r4, #12]
 800c7d6:	e7e3      	b.n	800c7a0 <__smakebuf_r+0xc>
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	6020      	str	r0, [r4, #0]
 800c7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	9b00      	ldr	r3, [sp, #0]
 800c7e4:	6163      	str	r3, [r4, #20]
 800c7e6:	9b01      	ldr	r3, [sp, #4]
 800c7e8:	6120      	str	r0, [r4, #16]
 800c7ea:	b15b      	cbz	r3, 800c804 <__smakebuf_r+0x70>
 800c7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f000 f81d 	bl	800c830 <_isatty_r>
 800c7f6:	b128      	cbz	r0, 800c804 <__smakebuf_r+0x70>
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	f043 0301 	orr.w	r3, r3, #1
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	431d      	orrs	r5, r3
 800c808:	81a5      	strh	r5, [r4, #12]
 800c80a:	e7cf      	b.n	800c7ac <__smakebuf_r+0x18>

0800c80c <_fstat_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d07      	ldr	r5, [pc, #28]	; (800c82c <_fstat_r+0x20>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	4611      	mov	r1, r2
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	f7f8 fc7b 	bl	8005114 <_fstat>
 800c81e:	1c43      	adds	r3, r0, #1
 800c820:	d102      	bne.n	800c828 <_fstat_r+0x1c>
 800c822:	682b      	ldr	r3, [r5, #0]
 800c824:	b103      	cbz	r3, 800c828 <_fstat_r+0x1c>
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	bd38      	pop	{r3, r4, r5, pc}
 800c82a:	bf00      	nop
 800c82c:	20001530 	.word	0x20001530

0800c830 <_isatty_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d06      	ldr	r5, [pc, #24]	; (800c84c <_isatty_r+0x1c>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f8 fc70 	bl	8005120 <_isatty>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_isatty_r+0x1a>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_isatty_r+0x1a>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20001530 	.word	0x20001530

0800c850 <_sbrk_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d06      	ldr	r5, [pc, #24]	; (800c86c <_sbrk_r+0x1c>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	f000 f8c8 	bl	800c9f0 <_sbrk>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d102      	bne.n	800c86a <_sbrk_r+0x1a>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b103      	cbz	r3, 800c86a <_sbrk_r+0x1a>
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	20001530 	.word	0x20001530

0800c870 <memcpy>:
 800c870:	440a      	add	r2, r1
 800c872:	4291      	cmp	r1, r2
 800c874:	f100 33ff 	add.w	r3, r0, #4294967295
 800c878:	d100      	bne.n	800c87c <memcpy+0xc>
 800c87a:	4770      	bx	lr
 800c87c:	b510      	push	{r4, lr}
 800c87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c882:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c886:	4291      	cmp	r1, r2
 800c888:	d1f9      	bne.n	800c87e <memcpy+0xe>
 800c88a:	bd10      	pop	{r4, pc}

0800c88c <__assert_func>:
 800c88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c88e:	4614      	mov	r4, r2
 800c890:	461a      	mov	r2, r3
 800c892:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <__assert_func+0x2c>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4605      	mov	r5, r0
 800c898:	68d8      	ldr	r0, [r3, #12]
 800c89a:	b14c      	cbz	r4, 800c8b0 <__assert_func+0x24>
 800c89c:	4b07      	ldr	r3, [pc, #28]	; (800c8bc <__assert_func+0x30>)
 800c89e:	9100      	str	r1, [sp, #0]
 800c8a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8a4:	4906      	ldr	r1, [pc, #24]	; (800c8c0 <__assert_func+0x34>)
 800c8a6:	462b      	mov	r3, r5
 800c8a8:	f000 f844 	bl	800c934 <fiprintf>
 800c8ac:	f000 f854 	bl	800c958 <abort>
 800c8b0:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <__assert_func+0x38>)
 800c8b2:	461c      	mov	r4, r3
 800c8b4:	e7f3      	b.n	800c89e <__assert_func+0x12>
 800c8b6:	bf00      	nop
 800c8b8:	2000006c 	.word	0x2000006c
 800c8bc:	0800ce1f 	.word	0x0800ce1f
 800c8c0:	0800ce2c 	.word	0x0800ce2c
 800c8c4:	0800ce5a 	.word	0x0800ce5a

0800c8c8 <_calloc_r>:
 800c8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8ca:	fba1 2402 	umull	r2, r4, r1, r2
 800c8ce:	b94c      	cbnz	r4, 800c8e4 <_calloc_r+0x1c>
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	9201      	str	r2, [sp, #4]
 800c8d4:	f7ff f93e 	bl	800bb54 <_malloc_r>
 800c8d8:	9a01      	ldr	r2, [sp, #4]
 800c8da:	4605      	mov	r5, r0
 800c8dc:	b930      	cbnz	r0, 800c8ec <_calloc_r+0x24>
 800c8de:	4628      	mov	r0, r5
 800c8e0:	b003      	add	sp, #12
 800c8e2:	bd30      	pop	{r4, r5, pc}
 800c8e4:	220c      	movs	r2, #12
 800c8e6:	6002      	str	r2, [r0, #0]
 800c8e8:	2500      	movs	r5, #0
 800c8ea:	e7f8      	b.n	800c8de <_calloc_r+0x16>
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	f7fe f9c5 	bl	800ac7c <memset>
 800c8f2:	e7f4      	b.n	800c8de <_calloc_r+0x16>

0800c8f4 <__ascii_mbtowc>:
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	b901      	cbnz	r1, 800c8fa <__ascii_mbtowc+0x6>
 800c8f8:	a901      	add	r1, sp, #4
 800c8fa:	b142      	cbz	r2, 800c90e <__ascii_mbtowc+0x1a>
 800c8fc:	b14b      	cbz	r3, 800c912 <__ascii_mbtowc+0x1e>
 800c8fe:	7813      	ldrb	r3, [r2, #0]
 800c900:	600b      	str	r3, [r1, #0]
 800c902:	7812      	ldrb	r2, [r2, #0]
 800c904:	1e10      	subs	r0, r2, #0
 800c906:	bf18      	it	ne
 800c908:	2001      	movne	r0, #1
 800c90a:	b002      	add	sp, #8
 800c90c:	4770      	bx	lr
 800c90e:	4610      	mov	r0, r2
 800c910:	e7fb      	b.n	800c90a <__ascii_mbtowc+0x16>
 800c912:	f06f 0001 	mvn.w	r0, #1
 800c916:	e7f8      	b.n	800c90a <__ascii_mbtowc+0x16>

0800c918 <__ascii_wctomb>:
 800c918:	b149      	cbz	r1, 800c92e <__ascii_wctomb+0x16>
 800c91a:	2aff      	cmp	r2, #255	; 0xff
 800c91c:	bf85      	ittet	hi
 800c91e:	238a      	movhi	r3, #138	; 0x8a
 800c920:	6003      	strhi	r3, [r0, #0]
 800c922:	700a      	strbls	r2, [r1, #0]
 800c924:	f04f 30ff 	movhi.w	r0, #4294967295
 800c928:	bf98      	it	ls
 800c92a:	2001      	movls	r0, #1
 800c92c:	4770      	bx	lr
 800c92e:	4608      	mov	r0, r1
 800c930:	4770      	bx	lr
	...

0800c934 <fiprintf>:
 800c934:	b40e      	push	{r1, r2, r3}
 800c936:	b503      	push	{r0, r1, lr}
 800c938:	4601      	mov	r1, r0
 800c93a:	ab03      	add	r3, sp, #12
 800c93c:	4805      	ldr	r0, [pc, #20]	; (800c954 <fiprintf+0x20>)
 800c93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c942:	6800      	ldr	r0, [r0, #0]
 800c944:	9301      	str	r3, [sp, #4]
 800c946:	f7ff fd37 	bl	800c3b8 <_vfiprintf_r>
 800c94a:	b002      	add	sp, #8
 800c94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c950:	b003      	add	sp, #12
 800c952:	4770      	bx	lr
 800c954:	2000006c 	.word	0x2000006c

0800c958 <abort>:
 800c958:	b508      	push	{r3, lr}
 800c95a:	2006      	movs	r0, #6
 800c95c:	f000 f82c 	bl	800c9b8 <raise>
 800c960:	2001      	movs	r0, #1
 800c962:	f7f8 fbb1 	bl	80050c8 <_exit>

0800c966 <_raise_r>:
 800c966:	291f      	cmp	r1, #31
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4604      	mov	r4, r0
 800c96c:	460d      	mov	r5, r1
 800c96e:	d904      	bls.n	800c97a <_raise_r+0x14>
 800c970:	2316      	movs	r3, #22
 800c972:	6003      	str	r3, [r0, #0]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	bd38      	pop	{r3, r4, r5, pc}
 800c97a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c97c:	b112      	cbz	r2, 800c984 <_raise_r+0x1e>
 800c97e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c982:	b94b      	cbnz	r3, 800c998 <_raise_r+0x32>
 800c984:	4620      	mov	r0, r4
 800c986:	f000 f831 	bl	800c9ec <_getpid_r>
 800c98a:	462a      	mov	r2, r5
 800c98c:	4601      	mov	r1, r0
 800c98e:	4620      	mov	r0, r4
 800c990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c994:	f000 b818 	b.w	800c9c8 <_kill_r>
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d00a      	beq.n	800c9b2 <_raise_r+0x4c>
 800c99c:	1c59      	adds	r1, r3, #1
 800c99e:	d103      	bne.n	800c9a8 <_raise_r+0x42>
 800c9a0:	2316      	movs	r3, #22
 800c9a2:	6003      	str	r3, [r0, #0]
 800c9a4:	2001      	movs	r0, #1
 800c9a6:	e7e7      	b.n	800c978 <_raise_r+0x12>
 800c9a8:	2400      	movs	r4, #0
 800c9aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	4798      	blx	r3
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	e7e0      	b.n	800c978 <_raise_r+0x12>
	...

0800c9b8 <raise>:
 800c9b8:	4b02      	ldr	r3, [pc, #8]	; (800c9c4 <raise+0xc>)
 800c9ba:	4601      	mov	r1, r0
 800c9bc:	6818      	ldr	r0, [r3, #0]
 800c9be:	f7ff bfd2 	b.w	800c966 <_raise_r>
 800c9c2:	bf00      	nop
 800c9c4:	2000006c 	.word	0x2000006c

0800c9c8 <_kill_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d07      	ldr	r5, [pc, #28]	; (800c9e8 <_kill_r+0x20>)
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	602b      	str	r3, [r5, #0]
 800c9d6:	f7f8 fb6f 	bl	80050b8 <_kill>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	d102      	bne.n	800c9e4 <_kill_r+0x1c>
 800c9de:	682b      	ldr	r3, [r5, #0]
 800c9e0:	b103      	cbz	r3, 800c9e4 <_kill_r+0x1c>
 800c9e2:	6023      	str	r3, [r4, #0]
 800c9e4:	bd38      	pop	{r3, r4, r5, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20001530 	.word	0x20001530

0800c9ec <_getpid_r>:
 800c9ec:	f7f8 bb62 	b.w	80050b4 <_getpid>

0800c9f0 <_sbrk>:
 800c9f0:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <_sbrk+0x14>)
 800c9f2:	6811      	ldr	r1, [r2, #0]
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	b909      	cbnz	r1, 800c9fc <_sbrk+0xc>
 800c9f8:	4903      	ldr	r1, [pc, #12]	; (800ca08 <_sbrk+0x18>)
 800c9fa:	6011      	str	r1, [r2, #0]
 800c9fc:	6810      	ldr	r0, [r2, #0]
 800c9fe:	4403      	add	r3, r0
 800ca00:	6013      	str	r3, [r2, #0]
 800ca02:	4770      	bx	lr
 800ca04:	20001540 	.word	0x20001540
 800ca08:	20001548 	.word	0x20001548

0800ca0c <_init>:
 800ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0e:	bf00      	nop
 800ca10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca12:	bc08      	pop	{r3}
 800ca14:	469e      	mov	lr, r3
 800ca16:	4770      	bx	lr

0800ca18 <_fini>:
 800ca18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1a:	bf00      	nop
 800ca1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca1e:	bc08      	pop	{r3}
 800ca20:	469e      	mov	lr, r3
 800ca22:	4770      	bx	lr
