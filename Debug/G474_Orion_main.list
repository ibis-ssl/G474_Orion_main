
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  0800ec18  0800ec18  0001ec18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f768  0800f768  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f768  0800f768  0001f768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f770  0800f770  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f770  0800f770  0001f770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f774  0800f774  0001f774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f778  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ebc  200001f0  0800f968  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  0800f968  000210ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003815c  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005de4  00000000  00000000  000583bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00016960  00000000  00000000  0005e1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f0  00000000  00000000  00074b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002cb8  00000000  00000000  000762f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d429  00000000  00000000  00078fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036509  00000000  00000000  000a63d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e925  00000000  00000000  000dc8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000065a4  00000000  00000000  001fb208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  002017ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ebfc 	.word	0x0800ebfc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800ebfc 	.word	0x0800ebfc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
  }
  float_to_uchar4(senddata_motor, duty);
  can2_send(motor_id, senddata_motor);
}

void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fd4:	b500      	push	{lr}
  if (duty < -limit) {
 8000fd6:	eef1 7a60 	vneg.f32	s15, s1
 8000fda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fe2:	b083      	sub	sp, #12
  if (duty < -limit) {
 8000fe4:	d408      	bmi.n	8000ff8 <actuator_motor1+0x24>
  } else if (duty > limit) {
 8000fe6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	bf8c      	ite	hi
 8000ff0:	eef0 7a60 	vmovhi.f32	s15, s1
 8000ff4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8000ff8:	4668      	mov	r0, sp
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f004 fdcf 	bl	8005ba0 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001002:	4669      	mov	r1, sp
 8001004:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001008:	f000 fb58 	bl	80016bc <can1_send>
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 800100c:	b003      	add	sp, #12
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001012:	bf00      	nop

08001014 <actuator_motor2>:
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001014:	b500      	push	{lr}
  if (duty < -limit) {
 8001016:	eef1 7a60 	vneg.f32	s15, s1
 800101a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001022:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001024:	d408      	bmi.n	8001038 <actuator_motor2+0x24>
  } else if (duty > limit) {
 8001026:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	bf8c      	ite	hi
 8001030:	eef0 7a60 	vmovhi.f32	s15, s1
 8001034:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001038:	4668      	mov	r0, sp
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	f004 fdaf 	bl	8005ba0 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001042:	4669      	mov	r1, sp
 8001044:	f240 1001 	movw	r0, #257	; 0x101
 8001048:	f000 fb38 	bl	80016bc <can1_send>
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 800104c:	b003      	add	sp, #12
 800104e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001052:	bf00      	nop

08001054 <actuator_motor3>:
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001054:	b500      	push	{lr}
  if (duty < -limit) {
 8001056:	eef1 7a60 	vneg.f32	s15, s1
 800105a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001062:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001064:	d408      	bmi.n	8001078 <actuator_motor3+0x24>
  } else if (duty > limit) {
 8001066:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	bf8c      	ite	hi
 8001070:	eef0 7a60 	vmovhi.f32	s15, s1
 8001074:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001078:	4668      	mov	r0, sp
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	f004 fd8f 	bl	8005ba0 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 8001082:	4669      	mov	r1, sp
 8001084:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001088:	f000 fb68 	bl	800175c <can2_send>
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 800108c:	b003      	add	sp, #12
 800108e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001092:	bf00      	nop

08001094 <actuator_motor4>:
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 8001094:	b500      	push	{lr}
  if (duty < -limit) {
 8001096:	eef1 7a60 	vneg.f32	s15, s1
 800109a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010a2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010a4:	d408      	bmi.n	80010b8 <actuator_motor4+0x24>
  } else if (duty > limit) {
 80010a6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	bf8c      	ite	hi
 80010b0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010b4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010b8:	4668      	mov	r0, sp
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f004 fd6f 	bl	8005ba0 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 80010c2:	4669      	mov	r1, sp
 80010c4:	f240 1003 	movw	r0, #259	; 0x103
 80010c8:	f000 fb48 	bl	800175c <can2_send>
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010cc:	b003      	add	sp, #12
 80010ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d2:	bf00      	nop

080010d4 <actuator_motor5>:
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010d4:	b500      	push	{lr}
  if (duty < -limit) {
 80010d6:	eef1 7a60 	vneg.f32	s15, s1
 80010da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010e2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010e4:	d408      	bmi.n	80010f8 <actuator_motor5+0x24>
  } else if (duty > limit) {
 80010e6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	bf8c      	ite	hi
 80010f0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010f4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010f8:	4668      	mov	r0, sp
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f004 fd4f 	bl	8005ba0 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001102:	4669      	mov	r1, sp
 8001104:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001108:	f000 fad8 	bl	80016bc <can1_send>
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 800110c:	b003      	add	sp, #12
 800110e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001112:	bf00      	nop

08001114 <actuator_dribbler_up>:

void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 8001114:	b500      	push	{lr}
 8001116:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001118:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001134 <actuator_dribbler_up+0x20>
 800111c:	4668      	mov	r0, sp
 800111e:	f004 fd3f 	bl	8005ba0 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001122:	4669      	mov	r1, sp
 8001124:	f240 1005 	movw	r0, #261	; 0x105
 8001128:	f000 fac8 	bl	80016bc <can1_send>
void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 800112c:	b003      	add	sp, #12
 800112e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001132:	bf00      	nop
 8001134:	3f4ccccd 	.word	0x3f4ccccd

08001138 <actuator_dribbler_down>:
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001138:	b500      	push	{lr}
 800113a:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 800113c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001158 <actuator_dribbler_down+0x20>
 8001140:	4668      	mov	r0, sp
 8001142:	f004 fd2d 	bl	8005ba0 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001146:	4669      	mov	r1, sp
 8001148:	f240 1005 	movw	r0, #261	; 0x105
 800114c:	f000 fab6 	bl	80016bc <can1_send>
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001150:	b003      	add	sp, #12
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
 8001156:	bf00      	nop
 8001158:	00000000 	.word	0x00000000

0800115c <actuator_kicker_voltage>:

void actuator_kicker_voltage(float voltage)
{
 800115c:	b500      	push	{lr}
 800115e:	b083      	sub	sp, #12
  uint8_t senddata_kick[8];
  float_to_uchar4(&senddata_kick[4], voltage);
 8001160:	a801      	add	r0, sp, #4
 8001162:	f004 fd1d 	bl	8005ba0 <float_to_uchar4>

  senddata_kick[0] = 0;
 8001166:	2300      	movs	r3, #0
  can1_send(0x110, senddata_kick);
 8001168:	4669      	mov	r1, sp
 800116a:	f44f 7088 	mov.w	r0, #272	; 0x110
  senddata_kick[0] = 0;
 800116e:	f88d 3000 	strb.w	r3, [sp]
  can1_send(0x110, senddata_kick);
 8001172:	f000 faa3 	bl	80016bc <can1_send>
}
 8001176:	b003      	add	sp, #12
 8001178:	f85d fb04 	ldr.w	pc, [sp], #4

0800117c <actuator_kicker>:

void actuator_kicker(uint8_t id, uint8_t param)
{
 800117c:	b500      	push	{lr}
 800117e:	b083      	sub	sp, #12
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
  uint8_t senddata_kick[8];
  senddata_kick[0] = id;
  senddata_kick[1] = param;
  can1_send(0x110, senddata_kick);
 8001184:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001188:	4669      	mov	r1, sp
  senddata_kick[0] = id;
 800118a:	f88d 2000 	strb.w	r2, [sp]
  senddata_kick[1] = param;
 800118e:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x110, senddata_kick);
 8001192:	f000 fa93 	bl	80016bc <can1_send>
  can2_send(0x110, senddata_kick);
 8001196:	4669      	mov	r1, sp
 8001198:	f44f 7088 	mov.w	r0, #272	; 0x110
 800119c:	f000 fade 	bl	800175c <can2_send>
}
 80011a0:	b003      	add	sp, #12
 80011a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a6:	bf00      	nop

080011a8 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on)
{
 80011a8:	b500      	push	{lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	4603      	mov	r3, r0
  /*id 0=>off
	 *   1=>on
	 * */
  uint8_t senddata_power[8];
  senddata_power[0] = 0;
 80011ae:	2200      	movs	r2, #0
  senddata_power[1] = power_on;
  can1_send(0x010, senddata_power);
 80011b0:	4669      	mov	r1, sp
 80011b2:	2010      	movs	r0, #16
  senddata_power[0] = 0;
 80011b4:	f88d 2000 	strb.w	r2, [sp]
  senddata_power[1] = power_on;
 80011b8:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x010, senddata_power);
 80011bc:	f000 fa7e 	bl	80016bc <can1_send>
  can2_send(0x010, senddata_power);
 80011c0:	4669      	mov	r1, sp
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 faca 	bl	800175c <can2_send>
}
 80011c8:	b003      	add	sp, #12
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ce:	bf00      	nop

080011d0 <actuator_power_param>:

void actuator_power_param(uint8_t id, float param)
{
 80011d0:	b500      	push	{lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	4603      	mov	r3, r0
 * */

  uint8_t senddata_power_param[8];

  senddata_power_param[0] = id;
  float_to_uchar4(&senddata_power_param[1], param);
 80011d6:	f10d 0001 	add.w	r0, sp, #1
  senddata_power_param[0] = id;
 80011da:	f88d 3000 	strb.w	r3, [sp]
  float_to_uchar4(&senddata_power_param[1], param);
 80011de:	f004 fcdf 	bl	8005ba0 <float_to_uchar4>

  can1_send(0x010, senddata_power_param);
 80011e2:	4669      	mov	r1, sp
 80011e4:	2010      	movs	r0, #16
 80011e6:	f000 fa69 	bl	80016bc <can1_send>
}
 80011ea:	b003      	add	sp, #12
 80011ec:	f85d fb04 	ldr.w	pc, [sp], #4

080011f0 <actuator_buzzer>:
  send_data_param[0] = param5;
  can1_send(0x304, send_data_param);
}

void actuator_buzzer(uint16_t ontime, uint16_t offtime)
{
 80011f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011f2:	4d07      	ldr	r5, [pc, #28]	; (8001210 <actuator_buzzer+0x20>)
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	22fa      	movs	r2, #250	; 0xfa
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
{
 80011fa:	460c      	mov	r4, r1
  HAL_Delay(ontime);
 80011fc:	f004 fe78 	bl	8005ef0 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(offtime);
 8001206:	4620      	mov	r0, r4
}
 8001208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(offtime);
 800120c:	f004 be70 	b.w	8005ef0 <HAL_Delay>
 8001210:	20000b8c 	.word	0x20000b8c

08001214 <actuator_buzzer_on>:

void actuator_buzzer_on()
{
  __HAL_TIM_SET_PRESCALER(&htim5, 170);
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <actuator_buzzer_on+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	21aa      	movs	r1, #170	; 0xaa
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 800121a:	22fa      	movs	r2, #250	; 0xfa
  __HAL_TIM_SET_PRESCALER(&htim5, 170);
 800121c:	6299      	str	r1, [r3, #40]	; 0x28
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000b8c 	.word	0x20000b8c

08001228 <actuator_buzzer_off>:

void actuator_buzzer_off() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); }
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <actuator_buzzer_off+0xc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	639a      	str	r2, [r3, #56]	; 0x38
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000b8c 	.word	0x20000b8c

08001238 <actuator_buzzer_frq>:

void actuator_buzzer_frq_on(float frq)
{
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001238:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001260 <actuator_buzzer_frq+0x28>
 800123c:	eec7 7a00 	vdiv.f32	s15, s14, s0
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
}
void actuator_buzzer_frq(float frq, uint16_t time)
{
 8001240:	b510      	push	{r4, lr}
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001242:	4c08      	ldr	r4, [pc, #32]	; (8001264 <actuator_buzzer_frq+0x2c>)
 8001244:	6823      	ldr	r3, [r4, #0]
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001246:	22fa      	movs	r2, #250	; 0xfa
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
  actuator_buzzer_frq_on(frq);
  HAL_Delay(time);
 8001252:	f004 fe4d 	bl	8005ef0 <HAL_Delay>
void actuator_buzzer_off() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); }
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
  actuator_buzzer_off();
}
 800125c:	bd10      	pop	{r4, pc}
 800125e:	bf00      	nop
 8001260:	48a60400 	.word	0x48a60400
 8001264:	20000b8c 	.word	0x20000b8c

08001268 <actuator_motor_calib>:

  HAL_Delay(80);
}

void actuator_motor_calib(int board)
{
 8001268:	b500      	push	{lr}
  uint8_t dummy[8] = {0};
 800126a:	2300      	movs	r3, #0
{
 800126c:	b083      	sub	sp, #12
  uint8_t dummy[8] = {0};
 800126e:	e9cd 3300 	strd	r3, r3, [sp]
  if (board == 0) {
 8001272:	b120      	cbz	r0, 800127e <actuator_motor_calib+0x16>
    can1_send(0x310, dummy);
  } else if (board == 1) {
 8001274:	2801      	cmp	r0, #1
 8001276:	d00a      	beq.n	800128e <actuator_motor_calib+0x26>
    can2_send(0x310, dummy);
  }
}
 8001278:	b003      	add	sp, #12
 800127a:	f85d fb04 	ldr.w	pc, [sp], #4
    can1_send(0x310, dummy);
 800127e:	4669      	mov	r1, sp
 8001280:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001284:	f000 fa1a 	bl	80016bc <can1_send>
}
 8001288:	b003      	add	sp, #12
 800128a:	f85d fb04 	ldr.w	pc, [sp], #4
    can2_send(0x310, dummy);
 800128e:	4669      	mov	r1, sp
 8001290:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001294:	f000 fa62 	bl	800175c <can2_send>
}
 8001298:	b003      	add	sp, #12
 800129a:	f85d fb04 	ldr.w	pc, [sp], #4
 800129e:	bf00      	nop

080012a0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012a0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a2:	2400      	movs	r4, #0
{
 80012a4:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	2220      	movs	r2, #32
 80012a8:	4621      	mov	r1, r4
 80012aa:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80012ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80012b0:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	f00a fb49 	bl	800b948 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012b6:	4823      	ldr	r0, [pc, #140]	; (8001344 <MX_ADC1_Init+0xa4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c0:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c2:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ca:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012cc:	8383      	strh	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012ce:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 80012d0:	2301      	movs	r3, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012d2:	2240      	movs	r2, #64	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012dc:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 80012e0:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ea:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012ec:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.OversamplingMode = ENABLE;
 80012ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012f2:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012f4:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f6:	f004 fe0d 	bl	8005f14 <HAL_ADC_Init>
 80012fa:	b9c8      	cbnz	r0, 8001330 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012fc:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012fe:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001300:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001302:	a901      	add	r1, sp, #4
 8001304:	f005 face 	bl	80068a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001308:	b9c8      	cbnz	r0, 800133e <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800130e:	2306      	movs	r3, #6
 8001310:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001314:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001316:	237f      	movs	r3, #127	; 0x7f
 8001318:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131c:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800131e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001322:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	f004 ff6b 	bl	8006200 <HAL_ADC_ConfigChannel>
 800132a:	b920      	cbnz	r0, 8001336 <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132c:	b00c      	add	sp, #48	; 0x30
 800132e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001330:	f002 fd78 	bl	8003e24 <Error_Handler>
 8001334:	e7e2      	b.n	80012fc <MX_ADC1_Init+0x5c>
    Error_Handler();
 8001336:	f002 fd75 	bl	8003e24 <Error_Handler>
}
 800133a:	b00c      	add	sp, #48	; 0x30
 800133c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800133e:	f002 fd71 	bl	8003e24 <Error_Handler>
 8001342:	e7e2      	b.n	800130a <MX_ADC1_Init+0x6a>
 8001344:	20000210 	.word	0x20000210
 8001348:	3ef08000 	.word	0x3ef08000

0800134c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800134c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800134e:	2400      	movs	r4, #0
{
 8001350:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	2220      	movs	r2, #32
 8001354:	4621      	mov	r1, r4
 8001356:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001358:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800135c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	f00a faf3 	bl	800b948 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <MX_ADC3_Init+0xa4>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001364:	4923      	ldr	r1, [pc, #140]	; (80013f4 <MX_ADC3_Init+0xa8>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001366:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800136a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136e:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001370:	e9c0 1300 	strd	r1, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001378:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800137a:	8383      	strh	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 800137c:	6442      	str	r2, [r0, #68]	; 0x44
  hadc3.Init.NbrOfConversion = 1;
 800137e:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001380:	2240      	movs	r2, #64	; 0x40
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001382:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001386:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 800138e:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001390:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001394:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001396:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc3.Init.OversamplingMode = ENABLE;
 8001398:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800139c:	6482      	str	r2, [r0, #72]	; 0x48
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800139e:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013a0:	f004 fdb8 	bl	8005f14 <HAL_ADC_Init>
 80013a4:	b9c8      	cbnz	r0, 80013da <MX_ADC3_Init+0x8e>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013a6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_ADC3_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013aa:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80013ac:	a901      	add	r1, sp, #4
 80013ae:	f005 fa79 	bl	80068a4 <HAL_ADCEx_MultiModeConfigChannel>
 80013b2:	b9c8      	cbnz	r0, 80013e8 <MX_ADC3_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <MX_ADC3_Init+0xac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MX_ADC3_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b8:	2306      	movs	r3, #6
 80013ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013be:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c0:	237f      	movs	r3, #127	; 0x7f
 80013c2:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c6:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80013c8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013ca:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80013cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013d0:	f004 ff16 	bl	8006200 <HAL_ADC_ConfigChannel>
 80013d4:	b920      	cbnz	r0, 80013e0 <MX_ADC3_Init+0x94>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013d6:	b00c      	add	sp, #48	; 0x30
 80013d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013da:	f002 fd23 	bl	8003e24 <Error_Handler>
 80013de:	e7e2      	b.n	80013a6 <MX_ADC3_Init+0x5a>
    Error_Handler();
 80013e0:	f002 fd20 	bl	8003e24 <Error_Handler>
}
 80013e4:	b00c      	add	sp, #48	; 0x30
 80013e6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013e8:	f002 fd1c 	bl	8003e24 <Error_Handler>
 80013ec:	e7e2      	b.n	80013b4 <MX_ADC3_Init+0x68>
 80013ee:	bf00      	nop
 80013f0:	2000027c 	.word	0x2000027c
 80013f4:	50000400 	.word	0x50000400
 80013f8:	04300002 	.word	0x04300002

080013fc <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	4668      	mov	r0, sp
 8001406:	f00a fa9f 	bl	800b948 <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800140a:	4c1e      	ldr	r4, [pc, #120]	; (8001484 <MX_ADC5_Init+0x88>)
  hadc5.Instance = ADC5;
 800140c:	481e      	ldr	r0, [pc, #120]	; (8001488 <MX_ADC5_Init+0x8c>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800140e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001412:	2300      	movs	r3, #0
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001414:	e9c0 4200 	strd	r4, r2, [r0]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141c:	2104      	movs	r1, #4
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001422:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001426:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800142a:	8382      	strh	r2, [r0, #28]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800142c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.NbrOfConversion = 1;
 8001430:	2201      	movs	r2, #1
  hadc5.Init.DMAContinuousRequests = ENABLE;
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001432:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001434:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001436:	2340      	movs	r3, #64	; 0x40
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001438:	6181      	str	r1, [r0, #24]
  hadc5.Init.NbrOfConversion = 1;
 800143a:	6202      	str	r2, [r0, #32]
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800143c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.OversamplingMode = ENABLE;
 8001440:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001444:	6441      	str	r1, [r0, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001446:	6483      	str	r3, [r0, #72]	; 0x48
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001448:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800144a:	f004 fd63 	bl	8005f14 <HAL_ADC_Init>
 800144e:	b990      	cbnz	r0, 8001476 <MX_ADC5_Init+0x7a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <MX_ADC5_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_ADC5_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001454:	2306      	movs	r3, #6
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800145a:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145c:	237f      	movs	r3, #127	; 0x7f
 800145e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001462:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001464:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001466:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 8001468:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800146c:	f004 fec8 	bl	8006200 <HAL_ADC_ConfigChannel>
 8001470:	b920      	cbnz	r0, 800147c <MX_ADC5_Init+0x80>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001472:	b008      	add	sp, #32
 8001474:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001476:	f002 fcd5 	bl	8003e24 <Error_Handler>
 800147a:	e7e9      	b.n	8001450 <MX_ADC5_Init+0x54>
    Error_Handler();
 800147c:	f002 fcd2 	bl	8003e24 <Error_Handler>
}
 8001480:	b008      	add	sp, #32
 8001482:	bd10      	pop	{r4, pc}
 8001484:	50000600 	.word	0x50000600
 8001488:	200002e8 	.word	0x200002e8
 800148c:	08600004 	.word	0x08600004

08001490 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	4604      	mov	r4, r0
 8001494:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	2254      	movs	r2, #84	; 0x54
 800149a:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80014a0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80014a4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a6:	f00a fa4f 	bl	800b948 <memset>
  if(adcHandle->Instance==ADC1)
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b0:	d007      	beq.n	80014c2 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80014b2:	4a5f      	ldr	r2, [pc, #380]	; (8001630 <HAL_ADC_MspInit+0x1a0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d04a      	beq.n	800154e <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 80014b8:	4a5e      	ldr	r2, [pc, #376]	; (8001634 <HAL_ADC_MspInit+0x1a4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d07a      	beq.n	80015b4 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80014be:	b020      	add	sp, #128	; 0x80
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ca:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014cc:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014ce:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f006 fe04 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	f040 80a2 	bne.w	800161e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014dc:	4857      	ldr	r0, [pc, #348]	; (800163c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 80014e0:	4d57      	ldr	r5, [pc, #348]	; (8001640 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80014e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f4:	f042 0202 	orr.w	r2, r2, #2
 80014f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001502:	2201      	movs	r2, #1
 8001504:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001506:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800150a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001512:	f006 f8a9 	bl	8007668 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 8001516:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001518:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800151a:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800151e:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152c:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001532:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001536:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800153a:	f005 fadb 	bl	8006af4 <HAL_DMA_Init>
 800153e:	b918      	cbnz	r0, 8001548 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001540:	6565      	str	r5, [r4, #84]	; 0x54
 8001542:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001544:	b020      	add	sp, #128	; 0x80
 8001546:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001548:	f002 fc6c 	bl	8003e24 <Error_Handler>
 800154c:	e7f8      	b.n	8001540 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800154e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001552:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001556:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001558:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800155a:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f006 fdbe 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 8001560:	2800      	cmp	r0, #0
 8001562:	d15f      	bne.n	8001624 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001564:	4a38      	ldr	r2, [pc, #224]	; (8001648 <HAL_ADC_MspInit+0x1b8>)
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800156a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 800156c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800156e:	d109      	bne.n	8001584 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
 8001572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001578:	64da      	str	r2, [r3, #76]	; 0x4c
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800158a:	4d30      	ldr	r5, [pc, #192]	; (800164c <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	f042 0202 	orr.w	r2, r2, #2
 8001590:	64da      	str	r2, [r3, #76]	; 0x4c
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 800159a:	2202      	movs	r2, #2
 800159c:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800159e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80015a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f006 f85d 	bl	8007668 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80015b0:	2325      	movs	r3, #37	; 0x25
 80015b2:	e7b2      	b.n	800151a <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015be:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015c0:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c2:	f006 fd8b 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d12f      	bne.n	800162a <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_ADC_MspInit+0x1b8>)
 80015cc:	6813      	ldr	r3, [r2, #0]
 80015ce:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015d0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015d4:	d109      	bne.n	80015ea <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
 80015d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015de:	64da      	str	r2, [r3, #76]	; 0x4c
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	9304      	str	r3, [sp, #16]
 80015e8:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 80015ec:	4d19      	ldr	r5, [pc, #100]	; (8001654 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001602:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f006 f828 	bl	8007668 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800161a:	2327      	movs	r3, #39	; 0x27
 800161c:	e77d      	b.n	800151a <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 800161e:	f002 fc01 	bl	8003e24 <Error_Handler>
 8001622:	e75a      	b.n	80014da <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8001624:	f002 fbfe 	bl	8003e24 <Error_Handler>
 8001628:	e79c      	b.n	8001564 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 800162a:	f002 fbfb 	bl	8003e24 <Error_Handler>
 800162e:	e7cc      	b.n	80015ca <HAL_ADC_MspInit+0x13a>
 8001630:	50000400 	.word	0x50000400
 8001634:	50000600 	.word	0x50000600
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	20000354 	.word	0x20000354
 8001644:	40020058 	.word	0x40020058
 8001648:	2000020c 	.word	0x2000020c
 800164c:	200003b4 	.word	0x200003b4
 8001650:	40020030 	.word	0x40020030
 8001654:	20000414 	.word	0x20000414
 8001658:	40020044 	.word	0x40020044
 800165c:	00000000 	.word	0x00000000

08001660 <can1_init_ibis>:
FDCAN_TxHeaderTypeDef TxHeader;
FDCAN_FilterTypeDef sFilterConfig;

// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef * handler)
{
 8001660:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 8001662:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80016b0 <can1_init_ibis+0x50>
{
 8001666:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001668:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800166a:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800166c:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800166e:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <can1_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001672:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001674:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 8001676:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 800167a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 800167e:	f005 fd6d 	bl	800715c <HAL_FDCAN_ConfigFilter>
 8001682:	b930      	cbnz	r0, 8001692 <can1_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <can1_init_ibis+0x58>)
 8001686:	f005 fd9b 	bl	80071c0 <HAL_FDCAN_Start>
 800168a:	b948      	cbnz	r0, 80016a0 <can1_init_ibis+0x40>
    Error_Handler();
  }
}
 800168c:	b007      	add	sp, #28
 800168e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001692:	f002 fbc7 	bl	8003e24 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001696:	4808      	ldr	r0, [pc, #32]	; (80016b8 <can1_init_ibis+0x58>)
 8001698:	f005 fd92 	bl	80071c0 <HAL_FDCAN_Start>
 800169c:	2800      	cmp	r0, #0
 800169e:	d0f5      	beq.n	800168c <can1_init_ibis+0x2c>
    Error_Handler();
 80016a0:	f002 fbc0 	bl	8003e24 <Error_Handler>
}
 80016a4:	b007      	add	sp, #28
 80016a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
	...
 80016b8:	2000049c 	.word	0x2000049c

080016bc <can1_send>:

void can1_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <can1_send+0x38>)
{
 80016be:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80016c4:	2500      	movs	r5, #0
 80016c6:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016ca:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80016ce:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016d2:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 80016d6:	4c08      	ldr	r4, [pc, #32]	; (80016f8 <can1_send+0x3c>)
  TxHeader.MessageMarker = 0;
 80016d8:	621d      	str	r5, [r3, #32]
{
 80016da:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 80016dc:	4620      	mov	r0, r4
 80016de:	f005 fe71 	bl	80073c4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80016e2:	2803      	cmp	r0, #3
 80016e4:	d1fa      	bne.n	80016dc <can1_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 80016e6:	4632      	mov	r2, r6
 80016e8:	4902      	ldr	r1, [pc, #8]	; (80016f4 <can1_send+0x38>)
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <can1_send+0x3c>)
}
 80016ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 80016f0:	f005 bd7e 	b.w	80071f0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80016f4:	20000474 	.word	0x20000474
 80016f8:	2000049c 	.word	0x2000049c
 80016fc:	00000000 	.word	0x00000000

08001700 <can2_init_ibis>:

void can2_init_ibis(FDCAN_HandleTypeDef * handler)
{
 8001700:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 8001702:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001750 <can2_init_ibis+0x50>
{
 8001706:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001708:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800170a:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800170c:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800170e:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <can2_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001712:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001714:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 8001716:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 800171a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 800171e:	f005 fd1d 	bl	800715c <HAL_FDCAN_ConfigFilter>
 8001722:	b930      	cbnz	r0, 8001732 <can2_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <can2_init_ibis+0x58>)
 8001726:	f005 fd4b 	bl	80071c0 <HAL_FDCAN_Start>
 800172a:	b948      	cbnz	r0, 8001740 <can2_init_ibis+0x40>
    Error_Handler();
  }
}
 800172c:	b007      	add	sp, #28
 800172e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001732:	f002 fb77 	bl	8003e24 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <can2_init_ibis+0x58>)
 8001738:	f005 fd42 	bl	80071c0 <HAL_FDCAN_Start>
 800173c:	2800      	cmp	r0, #0
 800173e:	d0f5      	beq.n	800172c <can2_init_ibis+0x2c>
    Error_Handler();
 8001740:	f002 fb70 	bl	8003e24 <Error_Handler>
}
 8001744:	b007      	add	sp, #28
 8001746:	f85d fb04 	ldr.w	pc, [sp], #4
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
	...
 8001758:	20000500 	.word	0x20000500

0800175c <can2_send>:

void can2_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <can2_send+0x38>)
{
 800175e:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001760:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001764:	2500      	movs	r5, #0
 8001766:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800176a:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800176e:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001772:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 8001776:	4c08      	ldr	r4, [pc, #32]	; (8001798 <can2_send+0x3c>)
  TxHeader.MessageMarker = 0;
 8001778:	621d      	str	r5, [r3, #32]
{
 800177a:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 800177c:	4620      	mov	r0, r4
 800177e:	f005 fe21 	bl	80073c4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001782:	2803      	cmp	r0, #3
 8001784:	d1fa      	bne.n	800177c <can2_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001786:	4632      	mov	r2, r6
 8001788:	4902      	ldr	r1, [pc, #8]	; (8001794 <can2_send+0x38>)
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <can2_send+0x3c>)
}
 800178c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001790:	f005 bd2e 	b.w	80071f0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001794:	20000474 	.word	0x20000474
 8001798:	20000500 	.word	0x20000500
 800179c:	00000000 	.word	0x00000000

080017a0 <HAL_FDCAN_RxFifo0Callback>:
{
  uint8_t RxData[CAN_RX_DATA_SIZE];
  FDCAN_RxHeaderTypeDef RxHeader;
  uint16_t rx_can_id;

  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80017a0:	07cb      	lsls	r3, r1, #31
 80017a2:	d400      	bmi.n	80017a6 <HAL_FDCAN_RxFifo0Callback+0x6>
 80017a4:	4770      	bx	lr
{
 80017a6:	b530      	push	{r4, r5, lr}
 80017a8:	b08d      	sub	sp, #52	; 0x34
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80017aa:	466b      	mov	r3, sp
 80017ac:	aa02      	add	r2, sp, #8
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	f005 fd84 	bl	80072bc <HAL_FDCAN_GetRxMessage>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d134      	bne.n	8001822 <HAL_FDCAN_RxFifo0Callback+0x82>
      Error_Handler();
    }
    rx_can_id = RxHeader.Identifier;
 80017b8:	9b02      	ldr	r3, [sp, #8]
    switch (rx_can_id) {
 80017ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017be:	4213      	tst	r3, r2
 80017c0:	b29d      	uxth	r5, r3
 80017c2:	f000 80a2 	beq.w	800190a <HAL_FDCAN_RxFifo0Callback+0x16a>
 80017c6:	f5a5 7400 	sub.w	r4, r5, #512	; 0x200
 80017ca:	2c41      	cmp	r4, #65	; 0x41
 80017cc:	d827      	bhi.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
 80017ce:	2c41      	cmp	r4, #65	; 0x41
 80017d0:	d825      	bhi.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
 80017d2:	e8df f004 	tbb	[pc, r4]
 80017d6:	4a4a      	.short	0x4a4a
 80017d8:	246c4a4a 	.word	0x246c4a4a
 80017dc:	24242424 	.word	0x24242424
 80017e0:	24242424 	.word	0x24242424
 80017e4:	29292424 	.word	0x29292424
 80017e8:	29292929 	.word	0x29292929
 80017ec:	24242429 	.word	0x24242429
 80017f0:	24242424 	.word	0x24242424
 80017f4:	3f3f2424 	.word	0x3f3f2424
 80017f8:	24803f3f 	.word	0x24803f3f
 80017fc:	24242424 	.word	0x24242424
 8001800:	24242424 	.word	0x24242424
 8001804:	34342424 	.word	0x34342424
 8001808:	24343434 	.word	0x24343434
 800180c:	24242424 	.word	0x24242424
 8001810:	24242424 	.word	0x24242424
 8001814:	73212424 	.word	0x73212424
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
        break;

      // can_raw.ball_detection
      case 0x240:
        can_raw.ball_detection[0] = RxData[0];
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
 800181a:	9a00      	ldr	r2, [sp, #0]
 800181c:	67da      	str	r2, [r3, #124]	; 0x7c
      case 0x502:
      case 0x503:
        break;
    }
  }
}
 800181e:	b00d      	add	sp, #52	; 0x34
 8001820:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001822:	f002 faff 	bl	8003e24 <Error_Handler>
 8001826:	e7c7      	b.n	80017b8 <HAL_FDCAN_RxFifo0Callback+0x18>
        can_raw.power_voltage[rx_can_id - 0x210] = uchar4_to_float(RxData);
 8001828:	4668      	mov	r0, sp
 800182a:	f004 f9b5 	bl	8005b98 <uchar4_to_float>
 800182e:	4b40      	ldr	r3, [pc, #256]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8001830:	f5a5 7501 	sub.w	r5, r5, #516	; 0x204
 8001834:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001838:	ed83 0a00 	vstr	s0, [r3]
        break;
 800183c:	e7ef      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
 800183e:	4668      	mov	r0, sp
 8001840:	f004 f9aa 	bl	8005b98 <uchar4_to_float>
 8001844:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8001846:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 800184a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800184e:	ed83 0a00 	vstr	s0, [r3]
        break;
 8001852:	e7e4      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[rx_can_id - 0x220] = uchar4_to_float(RxData);
 8001854:	4668      	mov	r0, sp
 8001856:	f004 f99f 	bl	8005b98 <uchar4_to_float>
 800185a:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
 800185c:	f2a5 250e 	subw	r5, r5, #526	; 0x20e
 8001860:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001864:	ed83 0a01 	vstr	s0, [r3, #4]
        break;
 8001868:	e7d9      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 800186a:	a801      	add	r0, sp, #4
 800186c:	f004 f994 	bl	8005b98 <uchar4_to_float>
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8001872:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8001876:	4668      	mov	r0, sp
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8001878:	ed83 0a00 	vstr	s0, [r3]
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 800187c:	f004 f98c 	bl	8005b98 <uchar4_to_float>
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8001882:	f5a5 72ff 	sub.w	r2, r5, #510	; 0x1fe
 8001886:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800188a:	ed82 0a00 	vstr	s0, [r2]
        can_raw.motor_feedback_velocity[rx_can_id - 0x200] = can_raw.motor_feedback[3] * OMNI_DIAMETER * M_PI;
 800188e:	6958      	ldr	r0, [r3, #20]
 8001890:	f5a5 75fd 	sub.w	r5, r5, #506	; 0x1fa
 8001894:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001898:	f7fe fe7e 	bl	8000598 <__aeabi_f2d>
 800189c:	a322      	add	r3, pc, #136	; (adr r3, 8001928 <HAL_FDCAN_RxFifo0Callback+0x188>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fed1 	bl	8000648 <__aeabi_dmul>
 80018a6:	f7ff f9c7 	bl	8000c38 <__aeabi_d2f>
 80018aa:	6068      	str	r0, [r5, #4]
        break;
 80018ac:	e7b7      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.motor_feedback_velocity[4] = uchar4_to_float(RxData);
 80018ae:	4668      	mov	r0, sp
 80018b0:	f004 f972 	bl	8005b98 <uchar4_to_float>
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
 80018b6:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
        break;
 80018ba:	e7b0      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 80018bc:	4c1e      	ldr	r4, [pc, #120]	; (8001938 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80018be:	9a00      	ldr	r2, [sp, #0]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 80018c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 80018c4:	6222      	str	r2, [r4, #32]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 80018c6:	85a3      	strh	r3, [r4, #44]	; 0x2c
        mouseOdometory();
 80018c8:	f003 f93e 	bl	8004b48 <mouseOdometory>
        mouse.loop_cnt_debug = mouse.integral_loop_cnt;
 80018cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
        mouse.integral_loop_cnt = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
}
 80018d4:	e7a3      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[4] = RxData[0];  // fet
 80018d6:	f89d 3000 	ldrb.w	r3, [sp]
 80018da:	ee06 3a90 	vmov	s13, r3
        can_raw.temperature[5] = RxData[1];  // coil 1
 80018de:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80018e2:	ee07 3a10 	vmov	s14, r3
        can_raw.temperature[6] = RxData[2];  // coil 2
 80018e6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80018ea:	ee07 3a90 	vmov	s15, r3
        can_raw.temperature[4] = RxData[0];  // fet
 80018ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
        can_raw.temperature[5] = RxData[1];  // coil 1
 80018f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        can_raw.temperature[6] = RxData[2];  // coil 2
 80018f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
        can_raw.temperature[4] = RxData[0];  // fet
 80018fc:	edc3 6a17 	vstr	s13, [r3, #92]	; 0x5c
        can_raw.temperature[5] = RxData[1];  // coil 1
 8001900:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
        can_raw.temperature[6] = RxData[2];  // coil 2
 8001904:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
        break;
 8001908:	e789      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.error_no[0] = RxData[0];
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	4908      	ldr	r1, [pc, #32]	; (8001930 <HAL_FDCAN_RxFifo0Callback+0x190>)
        sys.error_id = (uint16_t)((RxData[1] << 8) | RxData[0]);
 800190e:	4c0b      	ldr	r4, [pc, #44]	; (800193c <HAL_FDCAN_RxFifo0Callback+0x19c>)
        can_raw.error_no[0] = RxData[0];
 8001910:	600b      	str	r3, [r1, #0]
        sys.error_info = (uint16_t)((RxData[3] << 8) | RxData[2]);
 8001912:	0c1a      	lsrs	r2, r3, #16
        sys.error_value = uchar4_to_float(&RxData[4]);
 8001914:	a801      	add	r0, sp, #4
        sys.error_id = (uint16_t)((RxData[1] << 8) | RxData[0]);
 8001916:	8063      	strh	r3, [r4, #2]
        sys.error_info = (uint16_t)((RxData[3] << 8) | RxData[2]);
 8001918:	80a2      	strh	r2, [r4, #4]
        sys.error_value = uchar4_to_float(&RxData[4]);
 800191a:	f004 f93d 	bl	8005b98 <uchar4_to_float>
        sys.error_flag = true;
 800191e:	2301      	movs	r3, #1
        sys.error_value = uchar4_to_float(&RxData[4]);
 8001920:	ed84 0a02 	vstr	s0, [r4, #8]
        sys.error_flag = true;
 8001924:	7023      	strb	r3, [r4, #0]
        break;
 8001926:	e77a      	b.n	800181e <HAL_FDCAN_RxFifo0Callback+0x7e>
 8001928:	ffba038a 	.word	0xffba038a
 800192c:	3fc684d8 	.word	0x3fc684d8
 8001930:	20000680 	.word	0x20000680
 8001934:	200007f4 	.word	0x200007f4
 8001938:	2000082c 	.word	0x2000082c
 800193c:	20000ad4 	.word	0x20000ad4

08001940 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <MX_DMA_Init+0xa0>)
{
 8001942:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001944:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001946:	f040 0004 	orr.w	r0, r0, #4
 800194a:	6498      	str	r0, [r3, #72]	; 0x48
 800194c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 800194e:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001950:	f004 0404 	and.w	r4, r4, #4
 8001954:	9400      	str	r4, [sp, #0]
 8001956:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001958:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800195a:	f044 0401 	orr.w	r4, r4, #1
 800195e:	649c      	str	r4, [r3, #72]	; 0x48
 8001960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001962:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800196c:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001970:	f005 f85a 	bl	8006a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001974:	200c      	movs	r0, #12
 8001976:	f005 f895 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2109      	movs	r1, #9
 800197e:	200d      	movs	r0, #13
 8001980:	f005 f852 	bl	8006a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001984:	200d      	movs	r0, #13
 8001986:	f005 f88d 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	210a      	movs	r1, #10
 800198e:	200e      	movs	r0, #14
 8001990:	f005 f84a 	bl	8006a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001994:	200e      	movs	r0, #14
 8001996:	f005 f885 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	210b      	movs	r1, #11
 800199e:	200f      	movs	r0, #15
 80019a0:	f005 f842 	bl	8006a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019a4:	200f      	movs	r0, #15
 80019a6:	f005 f87d 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	210e      	movs	r1, #14
 80019ae:	2010      	movs	r0, #16
 80019b0:	f005 f83a 	bl	8006a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019b4:	2010      	movs	r0, #16
 80019b6:	f005 f875 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	210f      	movs	r1, #15
 80019be:	2011      	movs	r0, #17
 80019c0:	f005 f832 	bl	8006a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80019c4:	2011      	movs	r0, #17
 80019c6:	f005 f86d 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2060      	movs	r0, #96	; 0x60
 80019ce:	4611      	mov	r1, r2
 80019d0:	f005 f82a 	bl	8006a28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80019d4:	2060      	movs	r0, #96	; 0x60

}
 80019d6:	b002      	add	sp, #8
 80019d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80019dc:	f005 b862 	b.w	8006aa4 <HAL_NVIC_EnableIRQ>
 80019e0:	40021000 	.word	0x40021000

080019e4 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80019e4:	4810      	ldr	r0, [pc, #64]	; (8001a28 <MX_FDCAN1_Init+0x44>)
{
 80019e6:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 80019e8:	4c10      	ldr	r4, [pc, #64]	; (8001a2c <MX_FDCAN1_Init+0x48>)
 80019ea:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80019ec:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 80019ee:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80019f0:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80019f2:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80019f4:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80019f8:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 80019fa:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80019fc:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 80019fe:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001a00:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a02:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001a06:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001a0a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a0e:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a10:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a12:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001a14:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a16:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a18:	f005 fa22 	bl	8006e60 <HAL_FDCAN_Init>
 8001a1c:	b900      	cbnz	r0, 8001a20 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001a1e:	bd10      	pop	{r4, pc}
 8001a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001a24:	f002 b9fe 	b.w	8003e24 <Error_Handler>
 8001a28:	2000049c 	.word	0x2000049c
 8001a2c:	40006400 	.word	0x40006400

08001a30 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001a30:	4810      	ldr	r0, [pc, #64]	; (8001a74 <MX_FDCAN2_Init+0x44>)
{
 8001a32:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001a34:	4c10      	ldr	r4, [pc, #64]	; (8001a78 <MX_FDCAN2_Init+0x48>)
 8001a36:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001a38:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 8001a3a:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001a3c:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a3e:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001a40:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001a44:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 8001a46:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001a48:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001a4a:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001a4c:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a4e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001a52:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001a56:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001a5a:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001a5c:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001a5e:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001a60:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a62:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001a64:	f005 f9fc 	bl	8006e60 <HAL_FDCAN_Init>
 8001a68:	b900      	cbnz	r0, 8001a6c <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001a6a:	bd10      	pop	{r4, pc}
 8001a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001a70:	f002 b9d8 	b.w	8003e24 <Error_Handler>
 8001a74:	20000500 	.word	0x20000500
 8001a78:	40006800 	.word	0x40006800
 8001a7c:	00000000 	.word	0x00000000

08001a80 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001a80:	b510      	push	{r4, lr}
 8001a82:	4604      	mov	r4, r0
 8001a84:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	2254      	movs	r2, #84	; 0x54
 8001a8a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001a90:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001a94:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a96:	f009 ff57 	bl	800b948 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_FDCAN_MspInit+0x168>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d004      	beq.n	8001aac <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8001aa2:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_FDCAN_MspInit+0x16c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d047      	beq.n	8001b38 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001aa8:	b01e      	add	sp, #120	; 0x78
 8001aaa:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ab6:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001ab8:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aba:	f006 fb0f 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d17f      	bne.n	8001bc2 <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ac2:	4a4b      	ldr	r2, [pc, #300]	; (8001bf0 <HAL_FDCAN_MspInit+0x170>)
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ac8:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001aca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001acc:	d109      	bne.n	8001ae2 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_FDCAN_MspInit+0x174>)
 8001ad0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ad2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001ad6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <HAL_FDCAN_MspInit+0x174>)
 8001ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ae6:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8001bd0 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	64da      	str	r2, [r3, #76]	; 0x4c
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001af2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001af6:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8001bd8 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b02:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b08:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b0c:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f005 fdaa 	bl	8007668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2103      	movs	r1, #3
 8001b18:	2015      	movs	r0, #21
 8001b1a:	f004 ff85 	bl	8006a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001b1e:	2015      	movs	r0, #21
 8001b20:	f004 ffc0 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2104      	movs	r1, #4
 8001b28:	2016      	movs	r0, #22
 8001b2a:	f004 ff7d 	bl	8006a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001b2e:	2016      	movs	r0, #22
 8001b30:	f004 ffb8 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
}
 8001b34:	b01e      	add	sp, #120	; 0x78
 8001b36:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b42:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b44:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b46:	f006 fac9 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d13c      	bne.n	8001bc8 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b4e:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <HAL_FDCAN_MspInit+0x170>)
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001b54:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001b58:	d109      	bne.n	8001b6e <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_FDCAN_MspInit+0x174>)
 8001b5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b5e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b62:	659a      	str	r2, [r3, #88]	; 0x58
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	4821      	ldr	r0, [pc, #132]	; (8001bf8 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b74:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001be0 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	f042 0202 	orr.w	r2, r2, #2
 8001b7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b80:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001bd8 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001b90:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b92:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001b96:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f005 fd65 	bl	8007668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2106      	movs	r1, #6
 8001ba2:	2056      	movs	r0, #86	; 0x56
 8001ba4:	f004 ff40 	bl	8006a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001ba8:	2056      	movs	r0, #86	; 0x56
 8001baa:	f004 ff7b 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2107      	movs	r1, #7
 8001bb2:	2057      	movs	r0, #87	; 0x57
 8001bb4:	f004 ff38 	bl	8006a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001bb8:	2057      	movs	r0, #87	; 0x57
 8001bba:	f004 ff73 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
}
 8001bbe:	b01e      	add	sp, #120	; 0x78
 8001bc0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001bc2:	f002 f92f 	bl	8003e24 <Error_Handler>
 8001bc6:	e77c      	b.n	8001ac2 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 8001bc8:	f002 f92c 	bl	8003e24 <Error_Handler>
 8001bcc:	e7bf      	b.n	8001b4e <HAL_FDCAN_MspInit+0xce>
 8001bce:	bf00      	nop
 8001bd0:	00001800 	.word	0x00001800
 8001bd4:	00000002 	.word	0x00000002
	...
 8001be0:	00003000 	.word	0x00003000
 8001be4:	00000002 	.word	0x00000002
 8001be8:	40006400 	.word	0x40006400
 8001bec:	40006800 	.word	0x40006800
 8001bf0:	20000498 	.word	0x20000498
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000400 	.word	0x48000400

08001bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	2400      	movs	r4, #0
{
 8001c00:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001c06:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c10:	4f45      	ldr	r7, [pc, #276]	; (8001d28 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c12:	4d46      	ldr	r5, [pc, #280]	; (8001d2c <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c14:	f042 0204 	orr.w	r2, r2, #4
 8001c18:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c1c:	f002 0204 	and.w	r2, r2, #4
 8001c20:	9201      	str	r2, [sp, #4]
 8001c22:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c2e:	f002 0220 	and.w	r2, r2, #32
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c40:	f002 0201 	and.w	r2, r2, #1
 8001c44:	9203      	str	r2, [sp, #12]
 8001c46:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4a:	f042 0202 	orr.w	r2, r2, #2
 8001c4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c52:	f002 0202 	and.w	r2, r2, #2
 8001c56:	9204      	str	r2, [sp, #16]
 8001c58:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5c:	f042 0208 	orr.w	r2, r2, #8
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	4622      	mov	r2, r4
 8001c6e:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c72:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c74:	f005 fdf8 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c78:	4622      	mov	r2, r4
 8001c7a:	f248 0110 	movw	r1, #32784	; 0x8010
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c82:	f005 fdf1 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c86:	4622      	mov	r2, r4
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f244 4184 	movw	r1, #17540	; 0x4484
 8001c8e:	f005 fdeb 	bl	8007868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2601      	movs	r6, #1
 8001c94:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	a906      	add	r1, sp, #24
 8001c9a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca4:	f005 fce0 	bl	8007668 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001caa:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001cb2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f005 fcd5 	bl	8007668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cbe:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f005 fccc 	bl	8007668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001cd0:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	a906      	add	r1, sp, #24
 8001cd6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001cd8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f005 fcc2 	bl	8007668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	a906      	add	r1, sp, #24
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f005 fcb7 	bl	8007668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfe:	a906      	add	r1, sp, #24
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	f005 fcae 	bl	8007668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d0c:	2260      	movs	r2, #96	; 0x60
 8001d0e:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	a906      	add	r1, sp, #24
 8001d12:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d14:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f005 fca5 	bl	8007668 <HAL_GPIO_Init>

}
 8001d1e:	b00d      	add	sp, #52	; 0x34
 8001d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	48000c00 	.word	0x48000c00

08001d34 <ICM20602_init>:
{
  return ICM20602_readByte(ICM20602_WHO_AM_I);  // Should return 0x68
}

void ICM20602_init()
{
 8001d34:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001d36:	4870      	ldr	r0, [pc, #448]	; (8001ef8 <ICM20602_init+0x1c4>)
{
 8001d38:	b085      	sub	sp, #20
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	f005 fd93 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2110      	movs	r1, #16
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f005 fd8d 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001d4e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8001d52:	216b      	movs	r1, #107	; 0x6b
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001d54:	2301      	movs	r3, #1
 8001d56:	aa03      	add	r2, sp, #12
  send_data[0] = reg & 0x7F;
 8001d58:	f88d 1008 	strb.w	r1, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001d5c:	9400      	str	r4, [sp, #0]
 8001d5e:	a902      	add	r1, sp, #8
 8001d60:	4866      	ldr	r0, [pc, #408]	; (8001efc <ICM20602_init+0x1c8>)
 8001d62:	f006 fcd5 	bl	8008710 <HAL_SPI_TransmitReceive>
  send_data[0] = data;
 8001d66:	2500      	movs	r5, #0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001d68:	2301      	movs	r3, #1
 8001d6a:	9400      	str	r4, [sp, #0]
 8001d6c:	aa03      	add	r2, sp, #12
 8001d6e:	a902      	add	r1, sp, #8
 8001d70:	4862      	ldr	r0, [pc, #392]	; (8001efc <ICM20602_init+0x1c8>)
  send_data[0] = data;
 8001d72:	f88d 5008 	strb.w	r5, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001d76:	f006 fccb 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d82:	f005 fd71 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001d86:	462a      	mov	r2, r5
 8001d88:	2110      	movs	r1, #16
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f005 fd6b 	bl	8007868 <HAL_GPIO_WritePin>
  send_data[0] = reg & 0x7F;
 8001d92:	2319      	movs	r3, #25
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001d94:	9400      	str	r4, [sp, #0]
  send_data[0] = reg & 0x7F;
 8001d96:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001d9a:	aa03      	add	r2, sp, #12
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	a902      	add	r1, sp, #8
 8001da0:	4856      	ldr	r0, [pc, #344]	; (8001efc <ICM20602_init+0x1c8>)
 8001da2:	f006 fcb5 	bl	8008710 <HAL_SPI_TransmitReceive>
  send_data[0] = data;
 8001da6:	2307      	movs	r3, #7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001da8:	9400      	str	r4, [sp, #0]
  send_data[0] = data;
 8001daa:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001dae:	aa03      	add	r2, sp, #12
 8001db0:	2301      	movs	r3, #1
 8001db2:	a902      	add	r1, sp, #8
 8001db4:	4851      	ldr	r0, [pc, #324]	; (8001efc <ICM20602_init+0x1c8>)
 8001db6:	f006 fcab 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc2:	f005 fd51 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001dc6:	462a      	mov	r2, r5
 8001dc8:	2110      	movs	r1, #16
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f005 fd4b 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001dd2:	2301      	movs	r3, #1
  send_data[0] = reg & 0x7F;
 8001dd4:	211a      	movs	r1, #26
  send_data[0] = data;
 8001dd6:	461d      	mov	r5, r3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001dd8:	aa03      	add	r2, sp, #12
  send_data[0] = reg & 0x7F;
 8001dda:	f88d 1008 	strb.w	r1, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001dde:	9400      	str	r4, [sp, #0]
 8001de0:	a902      	add	r1, sp, #8
 8001de2:	4846      	ldr	r0, [pc, #280]	; (8001efc <ICM20602_init+0x1c8>)
 8001de4:	f006 fc94 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001de8:	462b      	mov	r3, r5
 8001dea:	9400      	str	r4, [sp, #0]
 8001dec:	a902      	add	r1, sp, #8
 8001dee:	aa03      	add	r2, sp, #12
 8001df0:	4842      	ldr	r0, [pc, #264]	; (8001efc <ICM20602_init+0x1c8>)
  send_data[0] = data;
 8001df2:	f88d 5008 	strb.w	r5, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001df6:	f006 fc8b 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001dfa:	462a      	mov	r2, r5
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f005 fd31 	bl	8007868 <HAL_GPIO_WritePin>
  ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);  // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
  ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
  ICM20602_writeByte(ICM20602_CONFIG, 0x01);      //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

  ICM20602_setAccRange(Ascale);
 8001e06:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <ICM20602_init+0x1cc>)
 8001e08:	681c      	ldr	r4, [r3, #0]
}

// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
  switch (Ascale) {
 8001e0a:	2c03      	cmp	r4, #3
 8001e0c:	d807      	bhi.n	8001e1e <ICM20602_init+0xea>
 8001e0e:	e8df f004 	tbb	[pc, r4]
 8001e12:	686d      	.short	0x686d
 8001e14:	6302      	.short	0x6302
      break;
    case AFS_4G:
      aRes = 4.0 / 32768.0;
      break;
    case AFS_8G:
      aRes = 8.0 / 32768.0;
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <ICM20602_init+0x1d0>)
 8001e18:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001e1c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2110      	movs	r1, #16
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e26:	f005 fd1f 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e2a:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8001e2e:	221c      	movs	r2, #28
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e30:	2301      	movs	r3, #1
  send_data[0] = reg & 0x7F;
 8001e32:	f88d 2008 	strb.w	r2, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e36:	a902      	add	r1, sp, #8
 8001e38:	aa03      	add	r2, sp, #12
 8001e3a:	4830      	ldr	r0, [pc, #192]	; (8001efc <ICM20602_init+0x1c8>)
 8001e3c:	9500      	str	r5, [sp, #0]
 8001e3e:	f006 fc67 	bl	8008710 <HAL_SPI_TransmitReceive>
    case AFS_16G:
      aRes = 16.0 / 32768.0;
      break;
  }

  ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale << 3);  // bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001e42:	00e4      	lsls	r4, r4, #3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e44:	2301      	movs	r3, #1
 8001e46:	aa03      	add	r2, sp, #12
 8001e48:	a902      	add	r1, sp, #8
 8001e4a:	482c      	ldr	r0, [pc, #176]	; (8001efc <ICM20602_init+0x1c8>)
 8001e4c:	9500      	str	r5, [sp, #0]
  send_data[0] = data;
 8001e4e:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e52:	f006 fc5d 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2110      	movs	r1, #16
 8001e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5e:	f005 fd03 	bl	8007868 <HAL_GPIO_WritePin>
  ICM20602_setGyroRange(Gscale);
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <ICM20602_init+0x1d4>)
 8001e64:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
  switch (Gscale) {
 8001e66:	2c03      	cmp	r4, #3
 8001e68:	d806      	bhi.n	8001e78 <ICM20602_init+0x144>
 8001e6a:	e8df f004 	tbb	[pc, r4]
 8001e6e:	2d31      	.short	0x2d31
 8001e70:	2902      	.short	0x2902
      break;
    case GFS_500DPS:
      gRes = 500.0 / 32768.0;
      break;
    case GFS_1000DPS:
      gRes = 1000.0 / 32768.0;
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <ICM20602_init+0x1d8>)
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <ICM20602_init+0x1dc>)
 8001e76:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e80:	f005 fcf2 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e84:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8001e88:	221b      	movs	r2, #27
 8001e8a:	f88d 2008 	strb.w	r2, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e8e:	a902      	add	r1, sp, #8
 8001e90:	aa03      	add	r2, sp, #12
 8001e92:	2301      	movs	r3, #1
 8001e94:	9500      	str	r5, [sp, #0]
 8001e96:	4819      	ldr	r0, [pc, #100]	; (8001efc <ICM20602_init+0x1c8>)
 8001e98:	f006 fc3a 	bl	8008710 <HAL_SPI_TransmitReceive>
    case GFS_2000DPS:
      gRes = 2000.0 / 32768.0;
      break;
  }

  ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale << 3);  // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001e9c:	00e4      	lsls	r4, r4, #3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e9e:	aa03      	add	r2, sp, #12
 8001ea0:	a902      	add	r1, sp, #8
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	9500      	str	r5, [sp, #0]
 8001ea6:	4815      	ldr	r0, [pc, #84]	; (8001efc <ICM20602_init+0x1c8>)
  send_data[0] = data;
 8001ea8:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001eac:	f006 fc30 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f005 fcd6 	bl	8007868 <HAL_GPIO_WritePin>
}
 8001ebc:	b005      	add	sp, #20
 8001ebe:	bd30      	pop	{r4, r5, pc}
      gRes = 2000.0 / 32768.0;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <ICM20602_init+0x1d8>)
 8001ec2:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <ICM20602_init+0x1e0>)
 8001ec4:	601a      	str	r2, [r3, #0]
      break;
 8001ec6:	e7d7      	b.n	8001e78 <ICM20602_init+0x144>
      gRes = 500.0 / 32768.0;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <ICM20602_init+0x1d8>)
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <ICM20602_init+0x1e4>)
 8001ecc:	601a      	str	r2, [r3, #0]
      break;
 8001ece:	e7d3      	b.n	8001e78 <ICM20602_init+0x144>
      gRes = 250.0 / 32768.0;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <ICM20602_init+0x1d8>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <ICM20602_init+0x1e8>)
 8001ed4:	601a      	str	r2, [r3, #0]
      break;
 8001ed6:	e7cf      	b.n	8001e78 <ICM20602_init+0x144>
      aRes = 16.0 / 32768.0;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <ICM20602_init+0x1d0>)
 8001eda:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001ede:	601a      	str	r2, [r3, #0]
      break;
 8001ee0:	e79d      	b.n	8001e1e <ICM20602_init+0xea>
      aRes = 4.0 / 32768.0;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <ICM20602_init+0x1d0>)
 8001ee4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001ee8:	601a      	str	r2, [r3, #0]
      break;
 8001eea:	e798      	b.n	8001e1e <ICM20602_init+0xea>
      aRes = 2.0 / 32768.0;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <ICM20602_init+0x1d0>)
 8001eee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001ef2:	601a      	str	r2, [r3, #0]
      break;
 8001ef4:	e793      	b.n	8001e1e <ICM20602_init+0xea>
 8001ef6:	bf00      	nop
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	20000b28 	.word	0x20000b28
 8001f00:	20000564 	.word	0x20000564
 8001f04:	20000568 	.word	0x20000568
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	200005b4 	.word	0x200005b4
 8001f10:	3cfa0000 	.word	0x3cfa0000
 8001f14:	3d7a0000 	.word	0x3d7a0000
 8001f18:	3c7a0000 	.word	0x3c7a0000
 8001f1c:	3bfa0000 	.word	0x3bfa0000

08001f20 <ICM20602_clearAngle>:
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
  pitch_angle = 0.0f;
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <ICM20602_clearAngle+0x10>)
  roll_angle = 0.0f;
 8001f22:	4904      	ldr	r1, [pc, #16]	; (8001f34 <ICM20602_clearAngle+0x14>)
  yaw_angle = 0.0f;
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <ICM20602_clearAngle+0x18>)
  pitch_angle = 0.0f;
 8001f26:	2300      	movs	r3, #0
 8001f28:	6003      	str	r3, [r0, #0]
  roll_angle = 0.0f;
 8001f2a:	600b      	str	r3, [r1, #0]
  yaw_angle = 0.0f;
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	4770      	bx	lr
 8001f30:	20000610 	.word	0x20000610
 8001f34:	20000614 	.word	0x20000614
 8001f38:	20000618 	.word	0x20000618

08001f3c <ICM20602_medianFilter>:

  float tmp;
  int8_t i, j, a, b;

  for (i = 0; i < 3; i++) {
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f3c:	4a79      	ldr	r2, [pc, #484]	; (8002124 <ICM20602_medianFilter+0x1e8>)
    gyro_mdat[i][1] = gyro_mdat[i][0];
    gyro_mdat[i][0] = gyro[i];
 8001f3e:	487a      	ldr	r0, [pc, #488]	; (8002128 <ICM20602_medianFilter+0x1ec>)

    acc_mdat[i][2] = acc_mdat[i][1];
 8001f40:	4b7a      	ldr	r3, [pc, #488]	; (800212c <ICM20602_medianFilter+0x1f0>)
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f42:	ed92 6a01 	vldr	s12, [r2, #4]
    gyro_mdat[i][0] = gyro[i];
 8001f46:	edd0 5a00 	vldr	s11, [r0]
    acc_mdat[i][1] = acc_mdat[i][0];
    acc_mdat[i][0] = acc[i];
 8001f4a:	4979      	ldr	r1, [pc, #484]	; (8002130 <ICM20602_medianFilter+0x1f4>)
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f4c:	ed92 7a00 	vldr	s14, [r2]
    acc_mdat[i][2] = acc_mdat[i][1];
 8001f50:	ed93 5a01 	vldr	s10, [r3, #4]
    acc_mdat[i][1] = acc_mdat[i][0];
 8001f54:	edd3 7a00 	vldr	s15, [r3]
    acc_mdat[i][0] = acc[i];
 8001f58:	edd1 6a00 	vldr	s13, [r1]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f5c:	ed82 6a02 	vstr	s12, [r2, #8]

    a = 0;
    b = 2;

    for (j = 2; j >= 0; j--) {
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f60:	eef4 5ac6 	vcmpe.f32	s11, s12
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f68:	ed82 7a01 	vstr	s14, [r2, #4]
    gyro_mdat[i][0] = gyro[i];
 8001f6c:	edc2 5a00 	vstr	s11, [r2]
    acc_mdat[i][2] = acc_mdat[i][1];
 8001f70:	ed83 5a02 	vstr	s10, [r3, #8]
    acc_mdat[i][1] = acc_mdat[i][0];
 8001f74:	edc3 7a01 	vstr	s15, [r3, #4]
    acc_mdat[i][0] = acc[i];
 8001f78:	edc3 6a00 	vstr	s13, [r3]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f7c:	dc05      	bgt.n	8001f8a <ICM20602_medianFilter+0x4e>
 8001f7e:	eef0 4a46 	vmov.f32	s9, s12
    gyro_mdat[i][0] = gyro[i];
 8001f82:	eeb0 6a65 	vmov.f32	s12, s11
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f86:	eef0 5a64 	vmov.f32	s11, s9
        tmp = gyro_tmp[a];
        gyro_tmp[a] = gyro_tmp[b];
        gyro_tmp[b] = tmp;
      }
      if (acc_tmp[a] > acc_tmp[b]) {
 8001f8a:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	d405      	bmi.n	8001fa0 <ICM20602_medianFilter+0x64>
 8001f94:	eef0 4a45 	vmov.f32	s9, s10
    acc_mdat[i][0] = acc[i];
 8001f98:	eeb0 5a66 	vmov.f32	s10, s13
    acc_mdat[i][2] = acc_mdat[i][1];
 8001f9c:	eef0 6a64 	vmov.f32	s13, s9
        acc_tmp[b] = tmp;
      }
      a = j - 1;
      b = j;
    }
    gyro[i] = gyro_tmp[1];
 8001fa0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	bf88      	it	hi
 8001faa:	eeb0 7a65 	vmovhi.f32	s14, s11
 8001fae:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 8001fb6:	eef4 7ae6 	vcmpe.f32	s15, s13
    gyro[i] = gyro_tmp[1];
 8001fba:	bfa8      	it	ge
 8001fbc:	eeb0 6a47 	vmovge.f32	s12, s14
    acc[i] = acc_tmp[1];
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	bf98      	it	ls
 8001fc6:	eef0 6a67 	vmovls.f32	s13, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8001fca:	edd2 5a04 	vldr	s11, [r2, #16]
    gyro_mdat[i][0] = gyro[i];
 8001fce:	ed90 7a01 	vldr	s14, [r0, #4]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8001fd2:	edd2 3a03 	vldr	s7, [r2, #12]
    acc_mdat[i][2] = acc_mdat[i][1];
 8001fd6:	ed93 4a04 	vldr	s8, [r3, #16]
    acc_mdat[i][1] = acc_mdat[i][0];
 8001fda:	edd3 4a03 	vldr	s9, [r3, #12]
    acc_mdat[i][0] = acc[i];
 8001fde:	edd1 7a01 	vldr	s15, [r1, #4]
    gyro[i] = gyro_tmp[1];
 8001fe2:	ed80 6a00 	vstr	s12, [r0]
    acc[i] = acc_tmp[1];
 8001fe6:	eef4 6ac5 	vcmpe.f32	s13, s10
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8001fee:	eef4 5ac7 	vcmpe.f32	s11, s14
    acc[i] = acc_tmp[1];
 8001ff2:	bfb8      	it	lt
 8001ff4:	eef0 6a45 	vmovlt.f32	s13, s10
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8001ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 8001ffc:	edc1 6a00 	vstr	s13, [r1]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002000:	edc2 5a05 	vstr	s11, [r2, #20]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8002004:	edc2 3a04 	vstr	s7, [r2, #16]
    gyro_mdat[i][0] = gyro[i];
 8002008:	ed82 7a03 	vstr	s14, [r2, #12]
    acc_mdat[i][2] = acc_mdat[i][1];
 800200c:	ed83 4a05 	vstr	s8, [r3, #20]
    acc_mdat[i][1] = acc_mdat[i][0];
 8002010:	edc3 4a04 	vstr	s9, [r3, #16]
    acc_mdat[i][0] = acc[i];
 8002014:	edc3 7a03 	vstr	s15, [r3, #12]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002018:	d405      	bmi.n	8002026 <ICM20602_medianFilter+0xea>
 800201a:	eef0 6a65 	vmov.f32	s13, s11
    gyro_mdat[i][0] = gyro[i];
 800201e:	eef0 5a47 	vmov.f32	s11, s14
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002022:	eeb0 7a66 	vmov.f32	s14, s13
      if (acc_tmp[a] > acc_tmp[b]) {
 8002026:	eef4 7ac4 	vcmpe.f32	s15, s8
 800202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202e:	dc05      	bgt.n	800203c <ICM20602_medianFilter+0x100>
 8002030:	eef0 6a44 	vmov.f32	s13, s8
    acc_mdat[i][0] = acc[i];
 8002034:	eeb0 4a67 	vmov.f32	s8, s15
    acc_mdat[i][2] = acc_mdat[i][1];
 8002038:	eef0 7a66 	vmov.f32	s15, s13
    gyro[i] = gyro_tmp[1];
 800203c:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	bf88      	it	hi
 8002046:	eeb0 7a63 	vmovhi.f32	s14, s7
 800204a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 8002052:	eef4 7ae4 	vcmpe.f32	s15, s9
    gyro[i] = gyro_tmp[1];
 8002056:	bfb4      	ite	lt
 8002058:	eef0 6a65 	vmovlt.f32	s13, s11
 800205c:	eef0 6a47 	vmovge.f32	s13, s14
    acc[i] = acc_tmp[1];
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	bf8c      	ite	hi
 8002066:	eeb0 7a64 	vmovhi.f32	s14, s9
 800206a:	eeb0 7a67 	vmovls.f32	s14, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800206e:	edd2 4a07 	vldr	s9, [r2, #28]
    gyro_mdat[i][0] = gyro[i];
 8002072:	edd0 7a02 	vldr	s15, [r0, #8]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8002076:	edd2 3a06 	vldr	s7, [r2, #24]
    acc_mdat[i][2] = acc_mdat[i][1];
 800207a:	edd3 5a07 	vldr	s11, [r3, #28]
    acc_mdat[i][1] = acc_mdat[i][0];
 800207e:	ed93 6a06 	vldr	s12, [r3, #24]
    acc_mdat[i][0] = acc[i];
 8002082:	ed91 5a02 	vldr	s10, [r1, #8]
    gyro[i] = gyro_tmp[1];
 8002086:	edc0 6a01 	vstr	s13, [r0, #4]
    acc[i] = acc_tmp[1];
 800208a:	eeb4 7ac4 	vcmpe.f32	s14, s8
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002092:	eef4 7ae4 	vcmpe.f32	s15, s9
    acc[i] = acc_tmp[1];
 8002096:	bfb8      	it	lt
 8002098:	eeb0 7a44 	vmovlt.f32	s14, s8
      if (gyro_tmp[a] > gyro_tmp[b]) {
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 80020a0:	ed81 7a01 	vstr	s14, [r1, #4]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80020a4:	edc2 4a08 	vstr	s9, [r2, #32]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 80020a8:	edc2 3a07 	vstr	s7, [r2, #28]
    gyro_mdat[i][0] = gyro[i];
 80020ac:	edc2 7a06 	vstr	s15, [r2, #24]
    acc_mdat[i][2] = acc_mdat[i][1];
 80020b0:	edc3 5a08 	vstr	s11, [r3, #32]
    acc_mdat[i][1] = acc_mdat[i][0];
 80020b4:	ed83 6a07 	vstr	s12, [r3, #28]
    acc_mdat[i][0] = acc[i];
 80020b8:	ed83 5a06 	vstr	s10, [r3, #24]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 80020bc:	dc05      	bgt.n	80020ca <ICM20602_medianFilter+0x18e>
 80020be:	eeb0 7a64 	vmov.f32	s14, s9
    gyro_mdat[i][0] = gyro[i];
 80020c2:	eef0 4a67 	vmov.f32	s9, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80020c6:	eef0 7a47 	vmov.f32	s15, s14
      if (acc_tmp[a] > acc_tmp[b]) {
 80020ca:	eef4 5ac5 	vcmpe.f32	s11, s10
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d405      	bmi.n	80020e0 <ICM20602_medianFilter+0x1a4>
 80020d4:	eeb0 7a65 	vmov.f32	s14, s11
    acc_mdat[i][0] = acc[i];
 80020d8:	eef0 5a45 	vmov.f32	s11, s10
    acc_mdat[i][2] = acc_mdat[i][1];
 80020dc:	eeb0 5a47 	vmov.f32	s10, s14
    gyro[i] = gyro_tmp[1];
 80020e0:	eef4 7ae3 	vcmpe.f32	s15, s7
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	bf88      	it	hi
 80020ea:	eef0 7a63 	vmovhi.f32	s15, s7
 80020ee:	eef4 7ae4 	vcmpe.f32	s15, s9
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 80020f6:	eeb4 6ac5 	vcmpe.f32	s12, s10
    gyro[i] = gyro_tmp[1];
 80020fa:	bfb8      	it	lt
 80020fc:	eef0 7a64 	vmovlt.f32	s15, s9
    acc[i] = acc_tmp[1];
 8002100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002104:	bf88      	it	hi
 8002106:	eeb0 6a45 	vmovhi.f32	s12, s10
 800210a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	bfb8      	it	lt
 8002114:	eeb0 6a65 	vmovlt.f32	s12, s11
    gyro[i] = gyro_tmp[1];
 8002118:	edc0 7a02 	vstr	s15, [r0, #8]
    acc[i] = acc_tmp[1];
 800211c:	ed81 6a02 	vstr	s12, [r1, #8]
  }
}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200005d0 	.word	0x200005d0
 8002128:	200005b8 	.word	0x200005b8
 800212c:	20000584 	.word	0x20000584
 8002130:	2000056c 	.word	0x2000056c

08002134 <ICM20602_read_IMU_data>:
{
 8002134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002138:	ed2d 8b02 	vpush	{d8}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800213c:	2200      	movs	r2, #0
{
 800213e:	b084      	sub	sp, #16
 8002140:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002142:	2110      	movs	r1, #16
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8002148:	eeb0 8a40 	vmov.f32	s16, s0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800214c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002150:	f005 fb8a 	bl	8007868 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 8002154:	23c8      	movs	r3, #200	; 0xc8
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002156:	9500      	str	r5, [sp, #0]
  send_data[0] = reg | 0x80;
 8002158:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800215c:	aa03      	add	r2, sp, #12
 800215e:	2301      	movs	r3, #1
 8002160:	a902      	add	r1, sp, #8
 8002162:	4889      	ldr	r0, [pc, #548]	; (8002388 <ICM20602_read_IMU_data+0x254>)
 8002164:	f006 fad4 	bl	8008710 <HAL_SPI_TransmitReceive>
  send_data[0] = 0x00;
 8002168:	2700      	movs	r7, #0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800216a:	2301      	movs	r3, #1
 800216c:	9500      	str	r5, [sp, #0]
 800216e:	aa03      	add	r2, sp, #12
 8002170:	a902      	add	r1, sp, #8
 8002172:	4885      	ldr	r0, [pc, #532]	; (8002388 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 8002174:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002178:	f006 faca 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800217c:	2110      	movs	r1, #16
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	2201      	movs	r2, #1
  val = RxBuffer[0];
 8002184:	f89d 400c 	ldrb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002188:	f005 fb6e 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800218c:	463a      	mov	r2, r7
 800218e:	2110      	movs	r1, #16
 8002190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002194:	f005 fb68 	bl	8007868 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 8002198:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800219c:	9500      	str	r5, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	aa03      	add	r2, sp, #12
 80021a2:	a902      	add	r1, sp, #8
 80021a4:	4878      	ldr	r0, [pc, #480]	; (8002388 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 80021a6:	f88d c008 	strb.w	ip, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80021aa:	f006 fab1 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80021ae:	2301      	movs	r3, #1
 80021b0:	9500      	str	r5, [sp, #0]
 80021b2:	aa03      	add	r2, sp, #12
 80021b4:	a902      	add	r1, sp, #8
 80021b6:	4874      	ldr	r0, [pc, #464]	; (8002388 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 80021b8:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80021bc:	f006 faa8 	bl	8008710 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 80021c0:	f89d 800c 	ldrb.w	r8, [sp, #12]
  return ((HiByte << 8) | LoByte);
 80021c4:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021c8:	2110      	movs	r1, #16
 80021ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ce:	2201      	movs	r2, #1
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80021d0:	b224      	sxth	r4, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021d2:	f005 fb49 	bl	8007868 <HAL_GPIO_WritePin>
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80021d6:	4b6d      	ldr	r3, [pc, #436]	; (800238c <ICM20602_read_IMU_data+0x258>)
 80021d8:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80023c4 <ICM20602_read_IMU_data+0x290>
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	ee07 4a90 	vmov	s15, r4
 80021e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  send_data[0] = reg | 0x80;
 80021e8:	24c2      	movs	r4, #194	; 0xc2
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80021ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ee:	edc8 7a02 	vstr	s15, [r8, #8]
  ICM20602_medianFilter();
 80021f2:	f7ff fea3 	bl	8001f3c <ICM20602_medianFilter>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021f6:	463a      	mov	r2, r7
 80021f8:	2110      	movs	r1, #16
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fe:	f005 fb33 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002202:	9500      	str	r5, [sp, #0]
 8002204:	2301      	movs	r3, #1
 8002206:	aa03      	add	r2, sp, #12
 8002208:	a902      	add	r1, sp, #8
 800220a:	485f      	ldr	r0, [pc, #380]	; (8002388 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 800220c:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002210:	f006 fa7e 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002214:	2301      	movs	r3, #1
 8002216:	9500      	str	r5, [sp, #0]
 8002218:	aa03      	add	r2, sp, #12
 800221a:	a902      	add	r1, sp, #8
 800221c:	485a      	ldr	r0, [pc, #360]	; (8002388 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 800221e:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002222:	f006 fa75 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002226:	2110      	movs	r1, #16
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	2201      	movs	r2, #1
  val = RxBuffer[0];
 800222e:	f89d 400c 	ldrb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002232:	f005 fb19 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002236:	463a      	mov	r2, r7
 8002238:	2110      	movs	r1, #16
 800223a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223e:	f005 fb13 	bl	8007868 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 8002242:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002246:	9500      	str	r5, [sp, #0]
 8002248:	2301      	movs	r3, #1
 800224a:	aa03      	add	r2, sp, #12
 800224c:	a902      	add	r1, sp, #8
 800224e:	484e      	ldr	r0, [pc, #312]	; (8002388 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 8002250:	f88d c008 	strb.w	ip, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002254:	f006 fa5c 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002258:	2301      	movs	r3, #1
 800225a:	9500      	str	r5, [sp, #0]
 800225c:	aa03      	add	r2, sp, #12
 800225e:	a902      	add	r1, sp, #8
 8002260:	4849      	ldr	r0, [pc, #292]	; (8002388 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 8002262:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002266:	f006 fa53 	bl	8008710 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 800226a:	f89d 500c 	ldrb.w	r5, [sp, #12]
  return ((HiByte << 8) | LoByte);
 800226e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	2110      	movs	r1, #16
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 800227a:	b224      	sxth	r4, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800227c:	f005 faf4 	bl	8007868 <HAL_GPIO_WritePin>
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002280:	ee07 4a90 	vmov	s15, r4

void ICM20602_IMU_compensate(void)
{
  int k;
  for (k = 0; k < 3; k++) {
    acc_comp[k] = acc[k] - acc_off[k];
 8002284:	4942      	ldr	r1, [pc, #264]	; (8002390 <ICM20602_read_IMU_data+0x25c>)
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <ICM20602_read_IMU_data+0x260>)
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002288:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002398 <ICM20602_read_IMU_data+0x264>
    acc_comp[k] = acc[k] - acc_off[k];
 800228c:	edd1 4a00 	vldr	s9, [r1]
 8002290:	edd1 5a02 	vldr	s11, [r1, #8]
 8002294:	ed91 5a01 	vldr	s10, [r1, #4]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 8002298:	4940      	ldr	r1, [pc, #256]	; (800239c <ICM20602_read_IMU_data+0x268>)
    acc_comp[k] = acc[k] - acc_off[k];
 800229a:	ed93 2a01 	vldr	s4, [r3, #4]
 800229e:	ed93 3a02 	vldr	s6, [r3, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022a2:	edd8 6a02 	vldr	s13, [r8, #8]
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 80022a6:	4a3e      	ldr	r2, [pc, #248]	; (80023a0 <ICM20602_read_IMU_data+0x26c>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022a8:	edd1 1a00 	vldr	s3, [r1]
 80022ac:	edd1 2a01 	vldr	s5, [r1, #4]
 80022b0:	edd8 3a00 	vldr	s7, [r8]
 80022b4:	ed98 4a01 	vldr	s8, [r8, #4]
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80022b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022bc:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 80022c0:	eea7 6a87 	vfma.f32	s12, s15, s14
    acc_comp[k] = acc[k] - acc_off[k];
 80022c4:	edd3 7a00 	vldr	s15, [r3]
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
 80022c8:	ed92 7a02 	vldr	s14, [r2, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022cc:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <ICM20602_read_IMU_data+0x270>)
    acc_comp[k] = acc[k] - acc_off[k];
 80022ce:	ee74 4ae7 	vsub.f32	s9, s9, s15
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022d2:	edd1 7a02 	vldr	s15, [r1, #8]
    acc_comp[k] = acc[k] - acc_off[k];
 80022d6:	4934      	ldr	r1, [pc, #208]	; (80023a8 <ICM20602_read_IMU_data+0x274>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
    acc_comp[k] = acc[k] - acc_off[k];
 80022dc:	ee35 5a42 	vsub.f32	s10, s10, s4
 80022e0:	ee75 6ac3 	vsub.f32	s13, s11, s6
 80022e4:	edc1 4a00 	vstr	s9, [r1]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022e8:	ee34 4a62 	vsub.f32	s8, s8, s5
    acc_comp[k] = acc[k] - acc_off[k];
 80022ec:	ed81 5a01 	vstr	s10, [r1, #4]
 80022f0:	edc1 6a02 	vstr	s13, [r1, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022f4:	ee73 3ae1 	vsub.f32	s7, s7, s3
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80022f8:	492c      	ldr	r1, [pc, #176]	; (80023ac <ICM20602_read_IMU_data+0x278>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80022fa:	ed83 4a01 	vstr	s8, [r3, #4]
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
 80022fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    gyro_comp[k] = gyro[k] - gyro_off[k];
 8002302:	edc3 3a00 	vstr	s7, [r3]
 8002306:	edc3 7a02 	vstr	s15, [r3, #8]
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 800230a:	ed81 6a00 	vstr	s12, [r1]
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800230e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002312:	edd6 7a00 	vldr	s15, [r6]
  while (deg < -180.0f) deg += 360.0f;
 8002316:	eddf 5a26 	vldr	s11, [pc, #152]	; 80023b0 <ICM20602_read_IMU_data+0x27c>
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800231a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800231e:	eee7 7a04 	vfma.f32	s15, s14, s8
  while (deg < -180.0f) deg += 360.0f;
 8002322:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	d50c      	bpl.n	8002346 <ICM20602_read_IMU_data+0x212>
 800232c:	ed9f 6a21 	vldr	s12, [pc, #132]	; 80023b4 <ICM20602_read_IMU_data+0x280>
 8002330:	eddf 6a21 	vldr	s13, [pc, #132]	; 80023b8 <ICM20602_read_IMU_data+0x284>
 8002334:	eeb0 7a67 	vmov.f32	s14, s15
 8002338:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002344:	d4f6      	bmi.n	8002334 <ICM20602_read_IMU_data+0x200>
  while (deg >= 180.0f) deg -= 360.0f;
 8002346:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80023bc <ICM20602_read_IMU_data+0x288>
 800234a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	db0c      	blt.n	800236e <ICM20602_read_IMU_data+0x23a>
 8002354:	ed9f 6a17 	vldr	s12, [pc, #92]	; 80023b4 <ICM20602_read_IMU_data+0x280>
 8002358:	eddf 6a19 	vldr	s13, [pc, #100]	; 80023c0 <ICM20602_read_IMU_data+0x28c>
 800235c:	eeb0 7a67 	vmov.f32	s14, s15
 8002360:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800236c:	daf6      	bge.n	800235c <ICM20602_read_IMU_data+0x228>
  *yaw_input = ICM20602_normAngle(*yaw_input);
 800236e:	edc6 7a00 	vstr	s15, [r6]
  gyro_prv[0] = gyro_comp[0];
 8002372:	6818      	ldr	r0, [r3, #0]
  gyro_prv[1] = gyro_comp[1];
 8002374:	6859      	ldr	r1, [r3, #4]
  gyro_prv[2] = gyro_comp[2];
 8002376:	689b      	ldr	r3, [r3, #8]
  gyro_prv[0] = gyro_comp[0];
 8002378:	6010      	str	r0, [r2, #0]
  gyro_prv[1] = gyro_comp[1];
 800237a:	6051      	str	r1, [r2, #4]
  gyro_prv[2] = gyro_comp[2];
 800237c:	6093      	str	r3, [r2, #8]
}
 800237e:	b004      	add	sp, #16
 8002380:	ecbd 8b02 	vpop	{d8}
 8002384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002388:	20000b28 	.word	0x20000b28
 800238c:	200005b4 	.word	0x200005b4
 8002390:	2000056c 	.word	0x2000056c
 8002394:	200005a8 	.word	0x200005a8
 8002398:	3b4889df 	.word	0x3b4889df
 800239c:	200005f4 	.word	0x200005f4
 80023a0:	20000600 	.word	0x20000600
 80023a4:	200005c4 	.word	0x200005c4
 80023a8:	20000578 	.word	0x20000578
 80023ac:	2000060c 	.word	0x2000060c
 80023b0:	c3340000 	.word	0xc3340000
 80023b4:	43b40000 	.word	0x43b40000
 80023b8:	c4070000 	.word	0xc4070000
 80023bc:	43340000 	.word	0x43340000
 80023c0:	44070000 	.word	0x44070000
 80023c4:	200005b8 	.word	0x200005b8

080023c8 <ICM20602_IMU_calibration2>:
{
 80023c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023cc:	ed2d 8b02 	vpush	{d8}
 80023d0:	b0d3      	sub	sp, #332	; 0x14c
  double acc_sum[3] = {0};
 80023d2:	2100      	movs	r1, #0
  double gyro_ave[3][10] = {{0.0}};
 80023d4:	22f0      	movs	r2, #240	; 0xf0
 80023d6:	a816      	add	r0, sp, #88	; 0x58
  double acc_sum[3] = {0};
 80023d8:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 80023dc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 80023e0:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
  double gyro_sum[3] = {0};
 80023e4:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
 80023e8:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
 80023ec:	e9cd 1114 	strd	r1, r1, [sp, #80]	; 0x50
  int cal_len = 0;
 80023f0:	9105      	str	r1, [sp, #20]
  double gyro_ave[3][10] = {{0.0}};
 80023f2:	f009 faa9 	bl	800b948 <memset>
  printf("put the IMU still!\n");
 80023f6:	48aa      	ldr	r0, [pc, #680]	; (80026a0 <ICM20602_IMU_calibration2+0x2d8>)
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80023f8:	4faa      	ldr	r7, [pc, #680]	; (80026a4 <ICM20602_IMU_calibration2+0x2dc>)
  printf("put the IMU still!\n");
 80023fa:	f009 f8ed 	bl	800b5d8 <puts>
  HAL_Delay(200);
 80023fe:	20c8      	movs	r0, #200	; 0xc8
 8002400:	f003 fd76 	bl	8005ef0 <HAL_Delay>
      acc_ave[j][0] = acc_sum[j] / cal_len;
 8002404:	9805      	ldr	r0, [sp, #20]
 8002406:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 80026c8 <ICM20602_IMU_calibration2+0x300>
 800240a:	f7fe f8b3 	bl	8000574 <__aeabi_i2d>
 800240e:	460b      	mov	r3, r1
 8002410:	4602      	mov	r2, r0
 8002412:	49a5      	ldr	r1, [pc, #660]	; (80026a8 <ICM20602_IMU_calibration2+0x2e0>)
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe fa41 	bl	800089c <__aeabi_ddiv>
 800241a:	4ba4      	ldr	r3, [pc, #656]	; (80026ac <ICM20602_IMU_calibration2+0x2e4>)
 800241c:	9304      	str	r3, [sp, #16]
 800241e:	ec41 0b18 	vmov	d8, r0, r1
 8002422:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8002426:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 800242a:	ac16      	add	r4, sp, #88	; 0x58
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800242c:	f04f 0a00 	mov.w	sl, #0
 8002430:	2200      	movs	r2, #0
 8002432:	2110      	movs	r1, #16
 8002434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002438:	f005 fa16 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800243c:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
  send_data[0] = reg | 0x80;
 8002440:	f06f 0337 	mvn.w	r3, #55	; 0x37
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002444:	9600      	str	r6, [sp, #0]
  send_data[0] = reg | 0x80;
 8002446:	f88d 3020 	strb.w	r3, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800244a:	aa09      	add	r2, sp, #36	; 0x24
 800244c:	2301      	movs	r3, #1
 800244e:	a908      	add	r1, sp, #32
 8002450:	4638      	mov	r0, r7
 8002452:	f006 f95d 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002456:	2301      	movs	r3, #1
 8002458:	9600      	str	r6, [sp, #0]
 800245a:	aa09      	add	r2, sp, #36	; 0x24
 800245c:	a908      	add	r1, sp, #32
 800245e:	4638      	mov	r0, r7
  send_data[0] = 0x00;
 8002460:	f88d a020 	strb.w	sl, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002464:	f006 f954 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002468:	2201      	movs	r2, #1
 800246a:	2110      	movs	r1, #16
 800246c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  val = RxBuffer[0];
 8002470:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002474:	f005 f9f8 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2110      	movs	r1, #16
 800247c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002480:	f005 f9f2 	bl	8007868 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 8002484:	20c7      	movs	r0, #199	; 0xc7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002486:	9600      	str	r6, [sp, #0]
 8002488:	2301      	movs	r3, #1
 800248a:	aa09      	add	r2, sp, #36	; 0x24
 800248c:	a908      	add	r1, sp, #32
  send_data[0] = reg | 0x80;
 800248e:	f88d 0020 	strb.w	r0, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002492:	4638      	mov	r0, r7
 8002494:	f006 f93c 	bl	8008710 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002498:	2301      	movs	r3, #1
 800249a:	9600      	str	r6, [sp, #0]
 800249c:	aa09      	add	r2, sp, #36	; 0x24
 800249e:	a908      	add	r1, sp, #32
 80024a0:	4638      	mov	r0, r7
  send_data[0] = 0x00;
 80024a2:	f88d a020 	strb.w	sl, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80024a6:	f006 f933 	bl	8008710 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 80024aa:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
  return ((HiByte << 8) | LoByte);
 80024ae:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80024b2:	2201      	movs	r2, #1
 80024b4:	2110      	movs	r1, #16
 80024b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80024ba:	b22d      	sxth	r5, r5
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80024bc:	f005 f9d4 	bl	8007868 <HAL_GPIO_WritePin>
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <ICM20602_IMU_calibration2+0x2e8>)
      acc_sum[j] += acc[j];
 80024c2:	f85b 0b04 	ldr.w	r0, [fp], #4
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80024c6:	ed93 7a00 	vldr	s14, [r3]
 80024ca:	4b78      	ldr	r3, [pc, #480]	; (80026ac <ICM20602_IMU_calibration2+0x2e4>)
 80024cc:	ee07 5a90 	vmov	s15, r5
 80024d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (j = 0; j < 3; j++) {
 80024d4:	3450      	adds	r4, #80	; 0x50
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024da:	edc3 7a02 	vstr	s15, [r3, #8]
      acc_sum[j] += acc[j];
 80024de:	e9d8 2300 	ldrd	r2, r3, [r8]
 80024e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024e6:	f7fe f857 	bl	8000598 <__aeabi_f2d>
 80024ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80024ee:	f7fd fef5 	bl	80002dc <__adddf3>
      gyro_sum[j] += gyro[j];
 80024f2:	9b04      	ldr	r3, [sp, #16]
      acc_sum[j] += acc[j];
 80024f4:	e8e8 0102 	strd	r0, r1, [r8], #8
      gyro_sum[j] += gyro[j];
 80024f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80024fc:	9304      	str	r3, [sp, #16]
 80024fe:	e9d9 2300 	ldrd	r2, r3, [r9]
 8002502:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002506:	f7fe f847 	bl	8000598 <__aeabi_f2d>
 800250a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800250e:	f7fd fee5 	bl	80002dc <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	e8e9 2302 	strd	r2, r3, [r9], #8
      gyro_ave[j][0] = gyro_sum[j] / cal_len;
 800251a:	ec53 2b18 	vmov	r2, r3, d8
 800251e:	f7fe f893 	bl	8000648 <__aeabi_dmul>
        gyro_ave[j][i] = gyro_ave[j][i - 1];
 8002522:	e954 2304 	ldrd	r2, r3, [r4, #-16]
 8002526:	e944 2302 	strd	r2, r3, [r4, #-8]
 800252a:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 800252e:	e944 2304 	strd	r2, r3, [r4, #-16]
 8002532:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 8002536:	e944 2306 	strd	r2, r3, [r4, #-24]
 800253a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800253e:	e944 2308 	strd	r2, r3, [r4, #-32]
 8002542:	e954 230c 	ldrd	r2, r3, [r4, #-48]	; 0x30
 8002546:	e944 230a 	strd	r2, r3, [r4, #-40]	; 0x28
 800254a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 800254e:	e944 230c 	strd	r2, r3, [r4, #-48]	; 0x30
 8002552:	e954 2310 	ldrd	r2, r3, [r4, #-64]	; 0x40
 8002556:	e944 230e 	strd	r2, r3, [r4, #-56]	; 0x38
 800255a:	e954 2312 	ldrd	r2, r3, [r4, #-72]	; 0x48
 800255e:	e944 2310 	strd	r2, r3, [r4, #-64]	; 0x40
    for (j = 0; j < 3; j++) {
 8002562:	ab10      	add	r3, sp, #64	; 0x40
 8002564:	4598      	cmp	r8, r3
      gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002566:	e944 0114 	strd	r0, r1, [r4, #-80]	; 0x50
        gyro_ave[j][i] = gyro_ave[j][i - 1];
 800256a:	e944 0112 	strd	r0, r1, [r4, #-72]	; 0x48
    for (j = 0; j < 3; j++) {
 800256e:	f47f af5f 	bne.w	8002430 <ICM20602_IMU_calibration2+0x68>
    cal_len++;
 8002572:	9c05      	ldr	r4, [sp, #20]
    if ((fabs(gyro_ave[2][9] - gyro_ave[2][0]) < SHRINK_ERROR) && cal_len > 1000) {
 8002574:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8002578:	e9dd 0150 	ldrd	r0, r1, [sp, #320]	; 0x140
    cal_len++;
 800257c:	3401      	adds	r4, #1
 800257e:	9405      	str	r4, [sp, #20]
    if ((fabs(gyro_ave[2][9] - gyro_ave[2][0]) < SHRINK_ERROR) && cal_len > 1000) {
 8002580:	f7fd feaa 	bl	80002d8 <__aeabi_dsub>
 8002584:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002588:	9307      	str	r3, [sp, #28]
 800258a:	9006      	str	r0, [sp, #24]
 800258c:	a342      	add	r3, pc, #264	; (adr r3, 8002698 <ICM20602_IMU_calibration2+0x2d0>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002596:	f7fe fac9 	bl	8000b2c <__aeabi_dcmplt>
 800259a:	2800      	cmp	r0, #0
 800259c:	d05f      	beq.n	800265e <ICM20602_IMU_calibration2+0x296>
 800259e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80025a2:	f77f af2f 	ble.w	8002404 <ICM20602_IMU_calibration2+0x3c>
  printf("length = %d\n", cal_len);
 80025a6:	4621      	mov	r1, r4
 80025a8:	4842      	ldr	r0, [pc, #264]	; (80026b4 <ICM20602_IMU_calibration2+0x2ec>)
 80025aa:	f008 ffaf 	bl	800b50c <iprintf>
  printf("Gyro Yaw %+8.6f ", fabs(gyro_ave[2][9] - gyro_ave[2][0]));
 80025ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80025b2:	4841      	ldr	r0, [pc, #260]	; (80026b8 <ICM20602_IMU_calibration2+0x2f0>)
 80025b4:	f008 ffaa 	bl	800b50c <iprintf>
  if (cal_len == 5000 || cal_len == 1001) {
 80025b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80025bc:	429c      	cmp	r4, r3
 80025be:	4646      	mov	r6, r8
 80025c0:	d05b      	beq.n	800267a <ICM20602_IMU_calibration2+0x2b2>
 80025c2:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80025c6:	429c      	cmp	r4, r3
 80025c8:	d057      	beq.n	800267a <ICM20602_IMU_calibration2+0x2b2>
    acc_off[j] = acc_sum[j] / cal_len;
 80025ca:	9805      	ldr	r0, [sp, #20]
 80025cc:	4f3b      	ldr	r7, [pc, #236]	; (80026bc <ICM20602_IMU_calibration2+0x2f4>)
    gyro_off[j] = gyro_sum[j] / cal_len;
 80025ce:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80026cc <ICM20602_IMU_calibration2+0x304>
    acc_off[j] = acc_sum[j] / cal_len;
 80025d2:	f7fd ffcf 	bl	8000574 <__aeabi_i2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	2000      	movs	r0, #0
 80025dc:	4932      	ldr	r1, [pc, #200]	; (80026a8 <ICM20602_IMU_calibration2+0x2e0>)
 80025de:	f7fe f95d 	bl	800089c <__aeabi_ddiv>
 80025e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80025e6:	4604      	mov	r4, r0
 80025e8:	460d      	mov	r5, r1
 80025ea:	f7fe f82d 	bl	8000648 <__aeabi_dmul>
 80025ee:	f7fe fb23 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 80025f2:	e9d6 2300 	ldrd	r2, r3, [r6]
    acc_off[j] = acc_sum[j] / cal_len;
 80025f6:	6038      	str	r0, [r7, #0]
    gyro_off[j] = gyro_sum[j] / cal_len;
 80025f8:	4629      	mov	r1, r5
 80025fa:	4620      	mov	r0, r4
 80025fc:	f7fe f824 	bl	8000648 <__aeabi_dmul>
 8002600:	f7fe fb1a 	bl	8000c38 <__aeabi_d2f>
    acc_off[j] = acc_sum[j] / cal_len;
 8002604:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002608:	f8c8 0000 	str.w	r0, [r8]
    acc_off[j] = acc_sum[j] / cal_len;
 800260c:	4629      	mov	r1, r5
 800260e:	4620      	mov	r0, r4
 8002610:	f7fe f81a 	bl	8000648 <__aeabi_dmul>
 8002614:	f7fe fb10 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002618:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
    acc_off[j] = acc_sum[j] / cal_len;
 800261c:	6078      	str	r0, [r7, #4]
    gyro_off[j] = gyro_sum[j] / cal_len;
 800261e:	4629      	mov	r1, r5
 8002620:	4620      	mov	r0, r4
 8002622:	f7fe f811 	bl	8000648 <__aeabi_dmul>
 8002626:	f7fe fb07 	bl	8000c38 <__aeabi_d2f>
    acc_off[j] = acc_sum[j] / cal_len;
 800262a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    gyro_off[j] = gyro_sum[j] / cal_len;
 800262e:	f8c8 0004 	str.w	r0, [r8, #4]
    acc_off[j] = acc_sum[j] / cal_len;
 8002632:	4629      	mov	r1, r5
 8002634:	4620      	mov	r0, r4
 8002636:	f7fe f807 	bl	8000648 <__aeabi_dmul>
 800263a:	f7fe fafd 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 800263e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
    acc_off[j] = acc_sum[j] / cal_len;
 8002642:	60b8      	str	r0, [r7, #8]
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002644:	4629      	mov	r1, r5
 8002646:	4620      	mov	r0, r4
 8002648:	f7fd fffe 	bl	8000648 <__aeabi_dmul>
 800264c:	f7fe faf4 	bl	8000c38 <__aeabi_d2f>
 8002650:	f8c8 0008 	str.w	r0, [r8, #8]
}
 8002654:	b053      	add	sp, #332	; 0x14c
 8002656:	ecbd 8b02 	vpop	{d8}
 800265a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (cal_len < 5000.0) {
 800265e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002662:	429c      	cmp	r4, r3
 8002664:	f47f aece 	bne.w	8002404 <ICM20602_IMU_calibration2+0x3c>
  printf("length = %d\n", cal_len);
 8002668:	9905      	ldr	r1, [sp, #20]
 800266a:	4812      	ldr	r0, [pc, #72]	; (80026b4 <ICM20602_IMU_calibration2+0x2ec>)
 800266c:	f008 ff4e 	bl	800b50c <iprintf>
  printf("Gyro Yaw %+8.6f ", fabs(gyro_ave[2][9] - gyro_ave[2][0]));
 8002670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002674:	4810      	ldr	r0, [pc, #64]	; (80026b8 <ICM20602_IMU_calibration2+0x2f0>)
 8002676:	f008 ff49 	bl	800b50c <iprintf>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800267a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267e:	4910      	ldr	r1, [pc, #64]	; (80026c0 <ICM20602_IMU_calibration2+0x2f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <ICM20602_IMU_calibration2+0x2fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002682:	68ca      	ldr	r2, [r1, #12]
 8002684:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002688:	4313      	orrs	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
 800268c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002690:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002692:	e7fd      	b.n	8002690 <ICM20602_IMU_calibration2+0x2c8>
 8002694:	f3af 8000 	nop.w
 8002698:	eb1c432d 	.word	0xeb1c432d
 800269c:	3f1a36e2 	.word	0x3f1a36e2
 80026a0:	0800ec18 	.word	0x0800ec18
 80026a4:	20000b28 	.word	0x20000b28
 80026a8:	3ff00000 	.word	0x3ff00000
 80026ac:	200005b8 	.word	0x200005b8
 80026b0:	200005b4 	.word	0x200005b4
 80026b4:	0800ec2c 	.word	0x0800ec2c
 80026b8:	0800ec3c 	.word	0x0800ec3c
 80026bc:	200005a8 	.word	0x200005a8
 80026c0:	e000ed00 	.word	0xe000ed00
 80026c4:	05fa0004 	.word	0x05fa0004
 80026c8:	2000056c 	.word	0x2000056c
 80026cc:	200005f4 	.word	0x200005f4

080026d0 <HAL_GetTick>:
void omniOdometory();
void mouseOdometory();
void yawFilter();
void resetLocalSpeedControl();
void resetAiCmdData();
uint32_t HAL_GetTick(void) { return uwTick; }
 80026d0:	4b01      	ldr	r3, [pc, #4]	; (80026d8 <HAL_GetTick+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000f58 	.word	0x20000f58

080026dc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void __io_putchar(uint8_t ch) { HAL_UART_Transmit(&hlpuart1, &ch, 1, 1); }
 80026dc:	b500      	push	{lr}
 80026de:	2301      	movs	r3, #1
 80026e0:	b083      	sub	sp, #12
 80026e2:	4684      	mov	ip, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	f10d 0107 	add.w	r1, sp, #7
 80026ea:	4804      	ldr	r0, [pc, #16]	; (80026fc <__io_putchar+0x20>)
 80026ec:	f88d c007 	strb.w	ip, [sp, #7]
 80026f0:	f007 ff68 	bl	800a5c4 <HAL_UART_Transmit>
 80026f4:	b003      	add	sp, #12
 80026f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026fa:	bf00      	nop
 80026fc:	20000da8 	.word	0x20000da8

08002700 <p>:

void p(const char * format, ...)
{
 8002700:	b40f      	push	{r0, r1, r2, r3}
 8002702:	b530      	push	{r4, r5, lr}
 8002704:	b085      	sub	sp, #20
 8002706:	ac08      	add	r4, sp, #32
  va_list args;
  va_start(args, format);
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002708:	4d08      	ldr	r5, [pc, #32]	; (800272c <p+0x2c>)
{
 800270a:	f854 1b04 	ldr.w	r1, [r4], #4
 800270e:	9101      	str	r1, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002710:	4628      	mov	r0, r5
  va_start(args, format);
 8002712:	9403      	str	r4, [sp, #12]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002714:	f7fd fdd4 	bl	80002c0 <strlen>
 8002718:	9901      	ldr	r1, [sp, #4]
 800271a:	4622      	mov	r2, r4
 800271c:	4428      	add	r0, r5
 800271e:	f009 f873 	bl	800b808 <vsiprintf>
  va_end(args);
}
 8002722:	b005      	add	sp, #20
 8002724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002728:	b004      	add	sp, #16
 800272a:	4770      	bx	lr
 800272c:	200008dc 	.word	0x200008dc

08002730 <motor_test>:
{
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
}

void motor_test()
{
 8002730:	b510      	push	{r4, lr}
  if (decode_SW(adc_sw_data) & 0b00000001) {
 8002732:	4c34      	ldr	r4, [pc, #208]	; (8002804 <motor_test+0xd4>)
 8002734:	8820      	ldrh	r0, [r4, #0]
 8002736:	f003 fb0f 	bl	8005d58 <decode_SW>
 800273a:	07c0      	lsls	r0, r0, #31
 800273c:	d517      	bpl.n	800276e <motor_test+0x3e>
    omni_move(4.0, 0.0, 0.0, 4.0);  // fwd
 800273e:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8002808 <motor_test+0xd8>
 8002742:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8002746:	eef0 0a41 	vmov.f32	s1, s2
 800274a:	eeb0 0a61 	vmov.f32	s0, s3
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
    omni_move(-4.0, 0.0, 0.0, 4.0);  // back
 800274e:	f002 fd1f 	bl	8005190 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002752:	482e      	ldr	r0, [pc, #184]	; (800280c <motor_test+0xdc>)
 8002754:	2201      	movs	r2, #1
 8002756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275a:	f005 f885 	bl	8007868 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else {
    omni_move(0.0, 0.0, 0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
  }
  actuator_motor5(0.0, 0.0);
 800275e:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8002808 <motor_test+0xd8>
}
 8002762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor5(0.0, 0.0);
 8002766:	eeb0 0a60 	vmov.f32	s0, s1
 800276a:	f7fe bcb3 	b.w	80010d4 <actuator_motor5>
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
 800276e:	8820      	ldrh	r0, [r4, #0]
 8002770:	f003 faf2 	bl	8005d58 <decode_SW>
 8002774:	0781      	lsls	r1, r0, #30
 8002776:	d508      	bpl.n	800278a <motor_test+0x5a>
    omni_move(-4.0, 0.0, 0.0, 4.0);  // back
 8002778:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8002808 <motor_test+0xd8>
 800277c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8002780:	eef0 0a41 	vmov.f32	s1, s2
 8002784:	eeb9 0a00 	vmov.f32	s0, #144	; 0xc0800000 -4.0
 8002788:	e7e1      	b.n	800274e <motor_test+0x1e>
  } else if (decode_SW(adc_sw_data) & 0b00000100) {
 800278a:	8820      	ldrh	r0, [r4, #0]
 800278c:	f003 fae4 	bl	8005d58 <decode_SW>
 8002790:	0742      	lsls	r2, r0, #29
 8002792:	d40d      	bmi.n	80027b0 <motor_test+0x80>
  } else if (decode_SW(adc_sw_data) & 0b00001000) {
 8002794:	8820      	ldrh	r0, [r4, #0]
 8002796:	f003 fadf 	bl	8005d58 <decode_SW>
 800279a:	0703      	lsls	r3, r0, #28
 800279c:	d511      	bpl.n	80027c2 <motor_test+0x92>
    omni_move(0.0, 4.0, 0.0, 4.0);  // right
 800279e:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8002808 <motor_test+0xd8>
 80027a2:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80027a6:	eef0 0a61 	vmov.f32	s1, s3
 80027aa:	eeb0 0a41 	vmov.f32	s0, s2
 80027ae:	e7ce      	b.n	800274e <motor_test+0x1e>
    omni_move(0.0, -4.0, 0.0, 4.0);  // left
 80027b0:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002808 <motor_test+0xd8>
 80027b4:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80027b8:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 80027bc:	eeb0 0a41 	vmov.f32	s0, s2
 80027c0:	e7c5      	b.n	800274e <motor_test+0x1e>
  } else if (decode_SW(adc_sw_data) & 0b00010000) {
 80027c2:	8820      	ldrh	r0, [r4, #0]
 80027c4:	f003 fac8 	bl	8005d58 <decode_SW>
 80027c8:	f010 0410 	ands.w	r4, r0, #16
 80027cc:	d008      	beq.n	80027e0 <motor_test+0xb0>
    omni_move(0.0, 0.0, 20.0, 4.0);  // spin
 80027ce:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002808 <motor_test+0xd8>
 80027d2:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80027d6:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80027da:	eeb0 0a60 	vmov.f32	s0, s1
 80027de:	e7b6      	b.n	800274e <motor_test+0x1e>
    omni_move(0.0, 0.0, 0.0, 0.0);
 80027e0:	eddf 1a09 	vldr	s3, [pc, #36]	; 8002808 <motor_test+0xd8>
 80027e4:	eeb0 1a61 	vmov.f32	s2, s3
 80027e8:	eef0 0a61 	vmov.f32	s1, s3
 80027ec:	eeb0 0a61 	vmov.f32	s0, s3
 80027f0:	f002 fcce 	bl	8005190 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <motor_test+0xdc>)
 80027f6:	4622      	mov	r2, r4
 80027f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027fc:	f005 f834 	bl	8007868 <HAL_GPIO_WritePin>
 8002800:	e7ad      	b.n	800275e <motor_test+0x2e>
 8002802:	bf00      	nop
 8002804:	2000061c 	.word	0x2000061c
 8002808:	00000000 	.word	0x00000000
 800280c:	48000800 	.word	0x48000800

08002810 <kicker_test>:
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
}

void kicker_test(bool manual_mode)
{
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static bool dribbler_up = false;

  if (kick_state != 0) {
 8002812:	4c59      	ldr	r4, [pc, #356]	; (8002978 <kicker_test+0x168>)
 8002814:	8823      	ldrh	r3, [r4, #0]
 8002816:	b29b      	uxth	r3, r3
{
 8002818:	4605      	mov	r5, r0
  if (kick_state != 0) {
 800281a:	b13b      	cbz	r3, 800282c <kicker_test+0x1c>
    if (kick_state > MAIN_LOOP_CYCLE / 2) {
 800281c:	8823      	ldrh	r3, [r4, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	2bfa      	cmp	r3, #250	; 0xfa
 8002822:	d829      	bhi.n	8002878 <kicker_test+0x68>
      if (can_raw.ball_detection[0] == 0) {
        kick_state = 0;
      }
    } else {
      kick_state++;
 8002824:	8823      	ldrh	r3, [r4, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	b29b      	uxth	r3, r3
 800282a:	8023      	strh	r3, [r4, #0]
    }
  }

  if (dribbler_up == false && decode_SW(adc_sw_data) & 0b00000100) {
 800282c:	4f53      	ldr	r7, [pc, #332]	; (800297c <kicker_test+0x16c>)
 800282e:	4e54      	ldr	r6, [pc, #336]	; (8002980 <kicker_test+0x170>)
 8002830:	783b      	ldrb	r3, [r7, #0]
 8002832:	b35b      	cbz	r3, 800288c <kicker_test+0x7c>
    dribbler_up = true;
    actuator_dribbler_down();
  } else if (dribbler_up == true && decode_SW(adc_sw_data) & 0b00001000) {
 8002834:	8830      	ldrh	r0, [r6, #0]
 8002836:	f003 fa8f 	bl	8005d58 <decode_SW>
 800283a:	0701      	lsls	r1, r0, #28
 800283c:	d461      	bmi.n	8002902 <kicker_test+0xf2>
    dribbler_up = false;
    actuator_dribbler_up();
  }

  if (decode_SW(adc_sw_data) & 0b00010000) {
 800283e:	8830      	ldrh	r0, [r6, #0]
 8002840:	f003 fa8a 	bl	8005d58 <decode_SW>
 8002844:	06c3      	lsls	r3, r0, #27
 8002846:	d52e      	bpl.n	80028a6 <kicker_test+0x96>
    if (!manual_mode) {
 8002848:	2d00      	cmp	r5, #0
 800284a:	d048      	beq.n	80028de <kicker_test+0xce>
      actuator_motor5(0.5, 1.0);
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800284c:	484d      	ldr	r0, [pc, #308]	; (8002984 <kicker_test+0x174>)
 800284e:	2201      	movs	r2, #1
 8002850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002854:	f005 f808 	bl	8007868 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
      if (kick_state == 0) {
 8002858:	8821      	ldrh	r1, [r4, #0]
 800285a:	b289      	uxth	r1, r1
 800285c:	2900      	cmp	r1, #0
 800285e:	d067      	beq.n	8002930 <kicker_test+0x120>
    actuator_motor5(0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
    actuator_kicker(1, 1);  // charge enable
    actuator_kicker_voltage(300.0);
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
 8002860:	eddf 1a49 	vldr	s3, [pc, #292]	; 8002988 <kicker_test+0x178>
}
 8002864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 8002868:	eeb0 1a61 	vmov.f32	s2, s3
 800286c:	eef0 0a61 	vmov.f32	s1, s3
 8002870:	eeb0 0a61 	vmov.f32	s0, s3
 8002874:	f002 bc8c 	b.w	8005190 <omni_move>
      if (can_raw.ball_detection[0] == 0) {
 8002878:	4b44      	ldr	r3, [pc, #272]	; (800298c <kicker_test+0x17c>)
 800287a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0d3      	beq.n	800282a <kicker_test+0x1a>
  if (dribbler_up == false && decode_SW(adc_sw_data) & 0b00000100) {
 8002882:	4f3e      	ldr	r7, [pc, #248]	; (800297c <kicker_test+0x16c>)
 8002884:	4e3e      	ldr	r6, [pc, #248]	; (8002980 <kicker_test+0x170>)
 8002886:	783b      	ldrb	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1d3      	bne.n	8002834 <kicker_test+0x24>
 800288c:	8830      	ldrh	r0, [r6, #0]
 800288e:	f003 fa63 	bl	8005d58 <decode_SW>
 8002892:	0742      	lsls	r2, r0, #29
 8002894:	d46b      	bmi.n	800296e <kicker_test+0x15e>
  } else if (dribbler_up == true && decode_SW(adc_sw_data) & 0b00001000) {
 8002896:	783b      	ldrb	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1cb      	bne.n	8002834 <kicker_test+0x24>
  if (decode_SW(adc_sw_data) & 0b00010000) {
 800289c:	8830      	ldrh	r0, [r6, #0]
 800289e:	f003 fa5b 	bl	8005d58 <decode_SW>
 80028a2:	06c3      	lsls	r3, r0, #27
 80028a4:	d4d0      	bmi.n	8002848 <kicker_test+0x38>
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
 80028a6:	8830      	ldrh	r0, [r6, #0]
 80028a8:	f003 fa56 	bl	8005d58 <decode_SW>
 80028ac:	f010 0602 	ands.w	r6, r0, #2
 80028b0:	d048      	beq.n	8002944 <kicker_test+0x134>
    if (!manual_mode) {
 80028b2:	b35d      	cbz	r5, 800290c <kicker_test+0xfc>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80028b4:	4833      	ldr	r0, [pc, #204]	; (8002984 <kicker_test+0x174>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028bc:	f004 ffd4 	bl	8007868 <HAL_GPIO_WritePin>
      if (kick_state == 0) {
 80028c0:	8823      	ldrh	r3, [r4, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1cb      	bne.n	8002860 <kicker_test+0x50>
        actuator_kicker(2, 1);  // chip
 80028c8:	2101      	movs	r1, #1
 80028ca:	2002      	movs	r0, #2
 80028cc:	f7fe fc56 	bl	800117c <actuator_kicker>
        actuator_kicker(3, 100);
 80028d0:	2164      	movs	r1, #100	; 0x64
 80028d2:	2003      	movs	r0, #3
 80028d4:	f7fe fc52 	bl	800117c <actuator_kicker>
        kick_state = 1;
 80028d8:	2301      	movs	r3, #1
 80028da:	8023      	strh	r3, [r4, #0]
 80028dc:	e7c0      	b.n	8002860 <kicker_test+0x50>
      actuator_motor5(0.5, 1.0);
 80028de:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80028e2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80028e6:	f7fe fbf5 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80028ea:	4826      	ldr	r0, [pc, #152]	; (8002984 <kicker_test+0x174>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f2:	f004 ffb9 	bl	8007868 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <kicker_test+0x17c>)
 80028f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d1af      	bne.n	8002860 <kicker_test+0x50>
 8002900:	e7aa      	b.n	8002858 <kicker_test+0x48>
    dribbler_up = false;
 8002902:	2300      	movs	r3, #0
 8002904:	703b      	strb	r3, [r7, #0]
    actuator_dribbler_up();
 8002906:	f7fe fc05 	bl	8001114 <actuator_dribbler_up>
 800290a:	e798      	b.n	800283e <kicker_test+0x2e>
      actuator_motor5(0.5, 1.0);
 800290c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002910:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002914:	f7fe fbde 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002918:	481a      	ldr	r0, [pc, #104]	; (8002984 <kicker_test+0x174>)
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002920:	f004 ffa2 	bl	8007868 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <kicker_test+0x17c>)
 8002926:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d198      	bne.n	8002860 <kicker_test+0x50>
 800292e:	e7c7      	b.n	80028c0 <kicker_test+0xb0>
        actuator_kicker(2, 0);  // straight
 8002930:	2002      	movs	r0, #2
 8002932:	f7fe fc23 	bl	800117c <actuator_kicker>
        actuator_kicker(3, 50);
 8002936:	2132      	movs	r1, #50	; 0x32
 8002938:	2003      	movs	r0, #3
 800293a:	f7fe fc1f 	bl	800117c <actuator_kicker>
        kick_state = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	8023      	strh	r3, [r4, #0]
 8002942:	e78d      	b.n	8002860 <kicker_test+0x50>
    actuator_motor5(0.0, 0.0);
 8002944:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002988 <kicker_test+0x178>
 8002948:	eeb0 0a60 	vmov.f32	s0, s1
 800294c:	f7fe fbc2 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8002950:	4632      	mov	r2, r6
 8002952:	480c      	ldr	r0, [pc, #48]	; (8002984 <kicker_test+0x174>)
 8002954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002958:	f004 ff86 	bl	8007868 <HAL_GPIO_WritePin>
    actuator_kicker(1, 1);  // charge enable
 800295c:	2101      	movs	r1, #1
 800295e:	4608      	mov	r0, r1
 8002960:	f7fe fc0c 	bl	800117c <actuator_kicker>
    actuator_kicker_voltage(300.0);
 8002964:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002990 <kicker_test+0x180>
 8002968:	f7fe fbf8 	bl	800115c <actuator_kicker_voltage>
 800296c:	e778      	b.n	8002860 <kicker_test+0x50>
    dribbler_up = true;
 800296e:	2301      	movs	r3, #1
 8002970:	703b      	strb	r3, [r7, #0]
    actuator_dribbler_down();
 8002972:	f7fe fbe1 	bl	8001138 <actuator_dribbler_down>
 8002976:	e762      	b.n	800283e <kicker_test+0x2e>
 8002978:	200007f0 	.word	0x200007f0
 800297c:	20000798 	.word	0x20000798
 8002980:	2000061c 	.word	0x2000061c
 8002984:	48000800 	.word	0x48000800
 8002988:	00000000 	.word	0x00000000
 800298c:	20000680 	.word	0x20000680
 8002990:	43960000 	.word	0x43960000
 8002994:	00000000 	.word	0x00000000

08002998 <yawFilter>:
    calib_start_cnt = 0;
  }
}

void yawFilter()
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
  static uint32_t yaw_angle_update_cnt = 0;
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 800299a:	4c59      	ldr	r4, [pc, #356]	; (8002b00 <yawFilter+0x168>)
  yaw_angle_update_cnt++;
 800299c:	4a59      	ldr	r2, [pc, #356]	; (8002b04 <yawFilter+0x16c>)
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 800299e:	ed94 7a00 	vldr	s14, [r4]
 80029a2:	edd4 7a01 	vldr	s15, [r4, #4]
 80029a6:	edd4 6a04 	vldr	s13, [r4, #16]
  yaw_angle_update_cnt++;
 80029aa:	6813      	ldr	r3, [r2, #0]
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 80029ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
 80029b0:	ed2d 8b02 	vpush	{d8}
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 80029b4:	eef0 7ae7 	vabs.f32	s15, s15
 80029b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
  yaw_angle_update_cnt++;
 80029bc:	3301      	adds	r3, #1
  if (yaw_angle_update_cnt > MAIN_LOOP_CYCLE / 2) {  // 2Hz
 80029be:	2bfa      	cmp	r3, #250	; 0xfa
{
 80029c0:	b083      	sub	sp, #12
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 80029c2:	edc4 7a04 	vstr	s15, [r4, #16]
  if (yaw_angle_update_cnt > MAIN_LOOP_CYCLE / 2) {  // 2Hz
 80029c6:	d820      	bhi.n	8002a0a <yawFilter+0x72>
 80029c8:	4d4f      	ldr	r5, [pc, #316]	; (8002b08 <yawFilter+0x170>)
  yaw_angle_update_cnt++;
 80029ca:	6013      	str	r3, [r2, #0]
      debug.theta_override_flag = false;
    }
    imu.yaw_angle_diff_integral = 0;
  }

  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 80029cc:	68a3      	ldr	r3, [r4, #8]
  imu.pre_yaw_angle = imu.yaw_angle;

  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 80029ce:	484c      	ldr	r0, [pc, #304]	; (8002b00 <yawFilter+0x168>)
 80029d0:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002b0c <yawFilter+0x174>
  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 80029d4:	60e3      	str	r3, [r4, #12]
  imu.pre_yaw_angle = imu.yaw_angle;
 80029d6:	ed84 7a01 	vstr	s14, [r4, #4]
  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 80029da:	f7ff fbab 	bl	8002134 <ICM20602_read_IMU_data>
  if (sys.main_mode == MAIN_MODE_CMD_DEBUG_MODE) {
 80029de:	4b4c      	ldr	r3, [pc, #304]	; (8002b10 <yawFilter+0x178>)
 80029e0:	7b1b      	ldrb	r3, [r3, #12]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d077      	beq.n	8002ad6 <yawFilter+0x13e>
    // デバッグ用、targetへ補正する
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain

  } else if (ai_cmd.vision_lost_flag) {
 80029e6:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80029ea:	b1f3      	cbz	r3, 8002a2a <yawFilter+0x92>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 80029ec:	6820      	ldr	r0, [r4, #0]

  } else {
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
  }

  imu.yaw_angle_rad = imu.yaw_angle * M_PI / 180;
 80029ee:	f7fd fdd3 	bl	8000598 <__aeabi_f2d>
 80029f2:	a33d      	add	r3, pc, #244	; (adr r3, 8002ae8 <yawFilter+0x150>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	f7fd fe26 	bl	8000648 <__aeabi_dmul>
 80029fc:	f7fe f91c 	bl	8000c38 <__aeabi_d2f>
 8002a00:	60a0      	str	r0, [r4, #8]
}
 8002a02:	b003      	add	sp, #12
 8002a04:	ecbd 8b02 	vpop	{d8}
 8002a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (imu.yaw_angle_diff_integral < 1) {
 8002a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a0e:	eef4 7ae6 	vcmpe.f32	s15, s13
    yaw_angle_update_cnt = 0;
 8002a12:	2300      	movs	r3, #0
    if (imu.yaw_angle_diff_integral < 1) {
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    yaw_angle_update_cnt = 0;
 8002a18:	6013      	str	r3, [r2, #0]
    if (imu.yaw_angle_diff_integral < 1) {
 8002a1a:	d43b      	bmi.n	8002a94 <yawFilter+0xfc>
      debug.theta_override_flag = false;
 8002a1c:	4a3d      	ldr	r2, [pc, #244]	; (8002b14 <yawFilter+0x17c>)
 8002a1e:	4d3a      	ldr	r5, [pc, #232]	; (8002b08 <yawFilter+0x170>)
 8002a20:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    imu.yaw_angle_diff_integral = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	6123      	str	r3, [r4, #16]
 8002a28:	e7d0      	b.n	80029cc <yawFilter+0x34>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002a2a:	ed94 8a00 	vldr	s16, [r4]
 8002a2e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8002b18 <yawFilter+0x180>
 8002a32:	edd5 0a01 	vldr	s1, [r5, #4]
 8002a36:	edcd 0a01 	vstr	s1, [sp, #4]
 8002a3a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a3e:	ee17 0a90 	vmov	r0, s15
 8002a42:	f7fd fda9 	bl	8000598 <__aeabi_f2d>
 8002a46:	a32a      	add	r3, pc, #168	; (adr r3, 8002af0 <yawFilter+0x158>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fdfc 	bl	8000648 <__aeabi_dmul>
 8002a50:	f7fe f8f2 	bl	8000c38 <__aeabi_d2f>
 8002a54:	eddd 0a01 	vldr	s1, [sp, #4]
 8002a58:	ee00 0a10 	vmov	s0, r0
 8002a5c:	f003 f8a4 	bl	8005ba8 <getAngleDiff>
 8002a60:	ee18 0a10 	vmov	r0, s16
 8002a64:	ee10 5a10 	vmov	r5, s0
 8002a68:	f7fd fd96 	bl	8000598 <__aeabi_f2d>
 8002a6c:	4606      	mov	r6, r0
 8002a6e:	4628      	mov	r0, r5
 8002a70:	460f      	mov	r7, r1
 8002a72:	f7fd fd91 	bl	8000598 <__aeabi_f2d>
 8002a76:	a320      	add	r3, pc, #128	; (adr r3, 8002af8 <yawFilter+0x160>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fde4 	bl	8000648 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4630      	mov	r0, r6
 8002a86:	4639      	mov	r1, r7
 8002a88:	f7fd fc26 	bl	80002d8 <__aeabi_dsub>
 8002a8c:	f7fe f8d4 	bl	8000c38 <__aeabi_d2f>
 8002a90:	6020      	str	r0, [r4, #0]
 8002a92:	e7ac      	b.n	80029ee <yawFilter+0x56>
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <yawFilter+0x184>)
      debug.theta_override_flag = true;
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <yawFilter+0x17c>)
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	4d1b      	ldr	r5, [pc, #108]	; (8002b08 <yawFilter+0x170>)
      debug.theta_override_flag = true;
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0be      	beq.n	8002a24 <yawFilter+0x8c>
 8002aa6:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ba      	bne.n	8002a24 <yawFilter+0x8c>
 8002aae:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab2:	edd5 0a01 	vldr	s1, [r5, #4]
 8002ab6:	f003 f877 	bl	8005ba8 <getAngleDiff>
 8002aba:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002abe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        imu.yaw_angle = ai_cmd.global_vision_theta;
 8002ac6:	bfca      	itet	gt
 8002ac8:	ed95 7a01 	vldrgt	s14, [r5, #4]
  imu.pre_yaw_angle = imu.yaw_angle;
 8002acc:	ed94 7a00 	vldrle	s14, [r4]
        imu.yaw_angle = ai_cmd.global_vision_theta;
 8002ad0:	ed84 7a00 	vstrgt	s14, [r4]
 8002ad4:	e7a6      	b.n	8002a24 <yawFilter+0x8c>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002ad6:	ed94 8a00 	vldr	s16, [r4]
 8002ada:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002b18 <yawFilter+0x180>
 8002ade:	edd5 0a00 	vldr	s1, [r5]
 8002ae2:	e7a8      	b.n	8002a36 <yawFilter+0x9e>
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	a2529d39 	.word	0xa2529d39
 8002aec:	3f91df46 	.word	0x3f91df46
 8002af0:	16c16c17 	.word	0x16c16c17
 8002af4:	3f76c16c 	.word	0x3f76c16c
 8002af8:	48b81fe5 	.word	0x48b81fe5
 8002afc:	3fad55df 	.word	0x3fad55df
 8002b00:	2000079c 	.word	0x2000079c
 8002b04:	20000b24 	.word	0x20000b24
 8002b08:	20000620 	.word	0x20000620
 8002b0c:	3b03126f 	.word	0x3b03126f
 8002b10:	20000ad4 	.word	0x20000ad4
 8002b14:	2000075c 	.word	0x2000075c
 8002b18:	40490fdb 	.word	0x40490fdb
 8002b1c:	20000704 	.word	0x20000704

08002b20 <speed_control>:
  }
  //output.omega = 0;
}

void speed_control()
{
 8002b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  target.local_velocity[0] = target.velocity[0];
 8002b24:	4ce5      	ldr	r4, [pc, #916]	; (8002ebc <speed_control+0x39c>)
  target.local_velocity[1] = target.velocity[1];

  // 500Hz, m/s -> m / cycle
  for (int i = 0; i < 2; i++) {
    // 加速度制限
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002b26:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8002ee4 <speed_control+0x3c4>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002b2a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002b2e:	4be4      	ldr	r3, [pc, #912]	; (8002ec0 <speed_control+0x3a0>)
 8002b30:	f8ca 3014 	str.w	r3, [sl, #20]
{
 8002b34:	ed2d 8b0a 	vpush	{d8-d12}
  target.local_velocity[0] = target.velocity[0];
 8002b38:	ed94 8a04 	vldr	s16, [r4, #16]
  target.local_velocity[1] = target.velocity[1];
 8002b3c:	edd4 8a05 	vldr	s17, [r4, #20]
  target.local_velocity[0] = target.velocity[0];
 8002b40:	ed84 8a06 	vstr	s16, [r4, #24]
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002b44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      output.accel_limit[i] = ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE;
    }

    // 減速方向は摩擦を使えるので制動力上げる
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002b4c:	eeb0 7ac8 	vabs.f32	s14, s16
 8002b50:	eef0 6ae7 	vabs.f32	s13, s15
      output.accel_limit[i] = ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE;
 8002b54:	bf44      	itt	mi
 8002b56:	4bdb      	ldrmi	r3, [pc, #876]	; (8002ec4 <speed_control+0x3a4>)
 8002b58:	f8ca 3014 	strmi.w	r3, [sl, #20]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002b5c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  target.local_velocity[1] = target.velocity[1];
 8002b64:	edc4 8a07 	vstr	s17, [r4, #28]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002b68:	d505      	bpl.n	8002b76 <speed_control+0x56>
      output.accel_limit[i] *= 2;
 8002b6a:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002b6e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002b72:	ed8a 7a05 	vstr	s14, [sl, #20]
    }

    // 目標移動位置を追い越してしまっている場合。速度ではないのはノイズが多いから
    // ノイズ対策であまりodom情報でアップデートはできないが、最大加速度側を増やして追従する
    // local_velocityに対して追従するlocal_velocity_currentの追従を早める
    if (diff_local[i] > 0 && target.local_velocity[i] > 0) {
 8002b76:	4bd4      	ldr	r3, [pc, #848]	; (8002ec8 <speed_control+0x3a8>)
 8002b78:	ed93 7a00 	vldr	s14, [r3]
 8002b7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	dd0c      	ble.n	8002ba0 <speed_control+0x80>
 8002b86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8e:	dd07      	ble.n	8002ba0 <speed_control+0x80>
      output.accel_limit[i] *= 5;
 8002b90:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002b94:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002b98:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002b9c:	ed8a 7a05 	vstr	s14, [sl, #20]
    }
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8002ba0:	ed93 7a00 	vldr	s14, [r3]
 8002ba4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	f100 81af 	bmi.w	8002f0e <speed_control+0x3ee>
      output.accel_limit[i] = 0;
      //output.local_velocity_current[i] = 0;
    }*/

    // 加速度→速度変換
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002bb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002bb8:	ed9a 7a05 	vldr	s14, [sl, #20]
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002bbc:	f280 816f 	bge.w	8002e9e <speed_control+0x37e>
        target.local_velocity_current[i] = target.local_velocity[i];
      } else {
        target.local_velocity_current[i] += output.accel_limit[i];
      }
    } else {
      if (target.local_velocity_current[i] - output.accel_limit[i] < target.local_velocity[i]) {
 8002bc0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002bc4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8002bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bcc:	f340 814e 	ble.w	8002e6c <speed_control+0x34c>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002bd0:	ee18 0a10 	vmov	r0, s16
 8002bd4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002bd8:	4ab9      	ldr	r2, [pc, #740]	; (8002ec0 <speed_control+0x3a0>)
        target.local_velocity_current[i] += output.accel_limit[i];
 8002bda:	62a0      	str	r0, [r4, #40]	; 0x28
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002bdc:	eeb0 7ae8 	vabs.f32	s14, s17
 8002be0:	eef0 6ae7 	vabs.f32	s13, s15
 8002be4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002bec:	f8ca 2018 	str.w	r2, [sl, #24]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002bf0:	d505      	bpl.n	8002bfe <speed_control+0xde>
      output.accel_limit[i] *= 2;
 8002bf2:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002bf6:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002bfa:	ed8a 7a06 	vstr	s14, [sl, #24]
    if (diff_local[i] > 0 && target.local_velocity[i] > 0) {
 8002bfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c02:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	dd0c      	ble.n	8002c26 <speed_control+0x106>
 8002c0c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd07      	ble.n	8002c26 <speed_control+0x106>
      output.accel_limit[i] *= 5;
 8002c16:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002c1a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002c1e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c22:	ed8a 7a06 	vstr	s14, [sl, #24]
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8002c26:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c2a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c32:	f100 817b 	bmi.w	8002f2c <speed_control+0x40c>
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002c36:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002c3e:	ed9a 7a06 	vldr	s14, [sl, #24]
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002c42:	f2c0 8153 	blt.w	8002eec <speed_control+0x3cc>
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c4a:	eef4 8ac7 	vcmpe.f32	s17, s14
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	f100 8159 	bmi.w	8002f08 <speed_control+0x3e8>
        target.local_velocity_current[i] += output.accel_limit[i];
 8002c56:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c5e:	ee17 6a90 	vmov	r6, s15
 8002c62:	62e6      	str	r6, [r4, #44]	; 0x2c
      }
    }
  }

  // ローカル→グローバル座標系
  output.local_velocity_current[0] = target.local_velocity_current[0] * cos(imu.yaw_angle_rad) - target.local_velocity_current[1] * sin(imu.yaw_angle_rad);
 8002c64:	f7fd fc98 	bl	8000598 <__aeabi_f2d>
 8002c68:	4b98      	ldr	r3, [pc, #608]	; (8002ecc <speed_control+0x3ac>)
  // ここから位置制御
  for (int i = 0; i < 2; i++) {
    // targetとodomの差分に上限をつける(吹っ飛び対策)
    // 出力が上限に張り付いたら、出力制限でそれ以上の加速度は出しようがないのでそれに合わせる
    float odom_diff_max = (float)OUTPUT_XY_LIMIT / OMNI_OUTPUT_GAIN_KP;
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002c6a:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8002ee8 <speed_control+0x3c8>
  output.local_velocity_current[0] = target.local_velocity_current[0] * cos(imu.yaw_angle_rad) - target.local_velocity_current[1] * sin(imu.yaw_angle_rad);
 8002c6e:	689d      	ldr	r5, [r3, #8]
 8002c70:	4680      	mov	r8, r0
 8002c72:	4628      	mov	r0, r5
 8002c74:	4689      	mov	r9, r1
 8002c76:	f7fd fc8f 	bl	8000598 <__aeabi_f2d>
 8002c7a:	ec41 0b10 	vmov	d0, r0, r1
 8002c7e:	ec41 0b19 	vmov	d9, r0, r1
 8002c82:	f00a fe3d 	bl	800d900 <cos>
 8002c86:	4630      	mov	r0, r6
 8002c88:	eeb0 aa40 	vmov.f32	s20, s0
 8002c8c:	eef0 aa60 	vmov.f32	s21, s1
 8002c90:	f7fd fc82 	bl	8000598 <__aeabi_f2d>
 8002c94:	eeb0 0a49 	vmov.f32	s0, s18
 8002c98:	eef0 0a69 	vmov.f32	s1, s19
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	460f      	mov	r7, r1
 8002ca0:	f00a fe82 	bl	800d9a8 <sin>
 8002ca4:	ec53 2b1a 	vmov	r2, r3, d10
 8002ca8:	eeb0 9a40 	vmov.f32	s18, s0
 8002cac:	eef0 9a60 	vmov.f32	s19, s1
 8002cb0:	4640      	mov	r0, r8
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	eeb0 ca40 	vmov.f32	s24, s0
 8002cb8:	eef0 ca60 	vmov.f32	s25, s1
 8002cbc:	f7fd fcc4 	bl	8000648 <__aeabi_dmul>
 8002cc0:	ec53 2b19 	vmov	r2, r3, d9
 8002cc4:	ec41 0b1b 	vmov	d11, r0, r1
 8002cc8:	4630      	mov	r0, r6
 8002cca:	4639      	mov	r1, r7
 8002ccc:	f7fd fcbc 	bl	8000648 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	ec51 0b1b 	vmov	r0, r1, d11
 8002cd8:	f7fd fafe 	bl	80002d8 <__aeabi_dsub>
 8002cdc:	f7fd ffac 	bl	8000c38 <__aeabi_d2f>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f8ca 3008 	str.w	r3, [sl, #8]
  output.local_velocity_current[1] = target.local_velocity_current[0] * sin(imu.yaw_angle_rad) + target.local_velocity_current[1] * cos(imu.yaw_angle_rad);
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	ec53 2b19 	vmov	r2, r3, d9
 8002cec:	4649      	mov	r1, r9
 8002cee:	f7fd fcab 	bl	8000648 <__aeabi_dmul>
 8002cf2:	4632      	mov	r2, r6
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	4606      	mov	r6, r0
 8002cf8:	460f      	mov	r7, r1
 8002cfa:	ec51 0b1a 	vmov	r0, r1, d10
 8002cfe:	f7fd fca3 	bl	8000648 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4630      	mov	r0, r6
 8002d08:	4639      	mov	r1, r7
 8002d0a:	f7fd fae7 	bl	80002dc <__adddf3>
 8002d0e:	f7fd ff93 	bl	8000c38 <__aeabi_d2f>
 8002d12:	f8ca 000c 	str.w	r0, [sl, #12]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 8002d16:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8002ed0 <speed_control+0x3b0>
 8002d1a:	ed9a 7a02 	vldr	s14, [sl, #8]
 8002d1e:	edd4 6a00 	vldr	s13, [r4]
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002d22:	edda 5a03 	vldr	s11, [sl, #12]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002d26:	ed9b 6a06 	vldr	s12, [fp, #24]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 8002d2a:	eee7 6a27 	vfma.f32	s13, s14, s15
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002d2e:	ed94 7a01 	vldr	s14, [r4, #4]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 8002d32:	edc4 6a00 	vstr	s13, [r4]
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002d36:	eea5 7aa7 	vfma.f32	s14, s11, s15
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002d3a:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8002d3e:	eddf 7a65 	vldr	s15, [pc, #404]	; 8002ed4 <speed_control+0x3b4>
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002d42:	ed84 7a01 	vstr	s14, [r4, #4]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002d46:	eef4 5ae7 	vcmpe.f32	s11, s15
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	f300 80a0 	bgt.w	8002e92 <speed_control+0x372>
      target.position[i] = omni.odom[i] + odom_diff_max;
    } else if (target.position[i] - omni.odom[i] < -odom_diff_max) {
 8002d52:	ed9f 5a61 	vldr	s10, [pc, #388]	; 8002ed8 <speed_control+0x3b8>
 8002d56:	eef4 5ac5 	vcmpe.f32	s11, s10
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      target.position[i] = omni.odom[i] - odom_diff_max;
    }

    // odom基準の絶対座標系
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002d5e:	bf54      	ite	pl
 8002d60:	ee76 7a66 	vsubpl.f32	s15, s12, s13
      target.position[i] = omni.odom[i] - odom_diff_max;
 8002d64:	ee36 6a67 	vsubmi.f32	s12, s12, s15
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002d68:	ee17 0a90 	vmov	r0, s15
      target.position[i] = omni.odom[i] - odom_diff_max;
 8002d6c:	bf48      	it	mi
 8002d6e:	ed84 6a00 	vstrmi	s12, [r4]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002d72:	eddb 7a07 	vldr	s15, [fp, #28]
 8002d76:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002ed4 <speed_control+0x3b4>
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002d7a:	f8cb 0008 	str.w	r0, [fp, #8]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002d7e:	ee37 6a67 	vsub.f32	s12, s14, s15
 8002d82:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	dd76      	ble.n	8002e7a <speed_control+0x35a>
      target.position[i] = omni.odom[i] + odom_diff_max;
 8002d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d90:	edc4 7a01 	vstr	s15, [r4, #4]
 8002d94:	4c51      	ldr	r4, [pc, #324]	; (8002edc <speed_control+0x3bc>)
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002d96:	f8cb 400c 	str.w	r4, [fp, #12]
  }

  // グローバル→ローカル座標系
  omni.robot_pos_diff[0] = omni.odom_floor_diff[0] * cos(-imu.yaw_angle_rad) - omni.odom_floor_diff[1] * sin(-imu.yaw_angle_rad);
 8002d9a:	f7fd fbfd 	bl	8000598 <__aeabi_f2d>
 8002d9e:	4606      	mov	r6, r0
 8002da0:	f085 4000 	eor.w	r0, r5, #2147483648	; 0x80000000
 8002da4:	460f      	mov	r7, r1
 8002da6:	f7fd fbf7 	bl	8000598 <__aeabi_f2d>
 8002daa:	ec41 0b10 	vmov	d0, r0, r1
 8002dae:	ec41 0b19 	vmov	d9, r0, r1
 8002db2:	f00a fda5 	bl	800d900 <cos>
 8002db6:	4620      	mov	r0, r4
 8002db8:	eeb0 aa40 	vmov.f32	s20, s0
 8002dbc:	eef0 aa60 	vmov.f32	s21, s1
 8002dc0:	f7fd fbea 	bl	8000598 <__aeabi_f2d>
 8002dc4:	ec53 2b1a 	vmov	r2, r3, d10
 8002dc8:	4604      	mov	r4, r0
 8002dca:	460d      	mov	r5, r1
 8002dcc:	4630      	mov	r0, r6
 8002dce:	4639      	mov	r1, r7
 8002dd0:	f7fd fc3a 	bl	8000648 <__aeabi_dmul>
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	4680      	mov	r8, r0
 8002dda:	4689      	mov	r9, r1
 8002ddc:	ec51 0b1c 	vmov	r0, r1, d12
 8002de0:	f7fd fc32 	bl	8000648 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4640      	mov	r0, r8
 8002dea:	4649      	mov	r1, r9
 8002dec:	f7fd fa76 	bl	80002dc <__adddf3>
 8002df0:	f7fd ff22 	bl	8000c38 <__aeabi_d2f>
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 8002df4:	eeb0 0a49 	vmov.f32	s0, s18
 8002df8:	eef0 0a69 	vmov.f32	s1, s19
  omni.robot_pos_diff[0] = omni.odom_floor_diff[0] * cos(-imu.yaw_angle_rad) - omni.odom_floor_diff[1] * sin(-imu.yaw_angle_rad);
 8002dfc:	f8cb 0010 	str.w	r0, [fp, #16]
 8002e00:	ee09 0a10 	vmov	s18, r0
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 8002e04:	f00a fdd0 	bl	800d9a8 <sin>
 8002e08:	4630      	mov	r0, r6
 8002e0a:	ec53 2b10 	vmov	r2, r3, d0
 8002e0e:	4639      	mov	r1, r7
 8002e10:	f7fd fc1a 	bl	8000648 <__aeabi_dmul>
 8002e14:	4622      	mov	r2, r4
 8002e16:	462b      	mov	r3, r5
 8002e18:	4604      	mov	r4, r0
 8002e1a:	460d      	mov	r5, r1
 8002e1c:	ec51 0b1a 	vmov	r0, r1, d10
 8002e20:	f7fd fc12 	bl	8000648 <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4620      	mov	r0, r4
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	f7fd fa56 	bl	80002dc <__adddf3>
 8002e30:	f7fd ff02 	bl	8000c38 <__aeabi_d2f>
 8002e34:	ed9b 7a0f 	vldr	s14, [fp, #60]	; 0x3c
 8002e38:	eddb 6a0e 	vldr	s13, [fp, #56]	; 0x38
 8002e3c:	f8cb 0014 	str.w	r0, [fp, #20]

  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 8002e40:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002e44:	eee7 8a67 	vfms.f32	s17, s14, s15
 8002e48:	eea6 8ae7 	vfms.f32	s16, s13, s15
 8002e4c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002ee0 <speed_control+0x3c0>
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 8002e50:	ee07 0a90 	vmov	s15, r0
  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 8002e54:	eea9 8a07 	vfma.f32	s16, s18, s14
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[1] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[1] * OMNI_OUTPUT_GAIN_FF;
 8002e58:	eee7 8a87 	vfma.f32	s17, s15, s14
  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 8002e5c:	ed8a 8a00 	vstr	s16, [sl]
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[1] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[1] * OMNI_OUTPUT_GAIN_FF;
 8002e60:	edca 8a01 	vstr	s17, [sl, #4]
}
 8002e64:	ecbd 8b0a 	vpop	{d8-d12}
 8002e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        target.local_velocity_current[i] -= output.accel_limit[i];
 8002e6c:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002e70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e74:	ee17 0a90 	vmov	r0, s15
 8002e78:	e6ac      	b.n	8002bd4 <speed_control+0xb4>
    } else if (target.position[i] - omni.odom[i] < -odom_diff_max) {
 8002e7a:	eddf 5a17 	vldr	s11, [pc, #92]	; 8002ed8 <speed_control+0x3b8>
 8002e7e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	d460      	bmi.n	8002f4a <speed_control+0x42a>
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e8c:	ee17 4a90 	vmov	r4, s15
 8002e90:	e781      	b.n	8002d96 <speed_control+0x276>
      target.position[i] = omni.odom[i] + odom_diff_max;
 8002e92:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e96:	4811      	ldr	r0, [pc, #68]	; (8002edc <speed_control+0x3bc>)
 8002e98:	ed84 6a00 	vstr	s12, [r4]
 8002e9c:	e769      	b.n	8002d72 <speed_control+0x252>
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ea2:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	f53f ae91 	bmi.w	8002bd0 <speed_control+0xb0>
        target.local_velocity_current[i] += output.accel_limit[i];
 8002eae:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002eb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eb6:	ee17 0a90 	vmov	r0, s15
 8002eba:	e68b      	b.n	8002bd4 <speed_control+0xb4>
 8002ebc:	20000aec 	.word	0x20000aec
 8002ec0:	3c449ba6 	.word	0x3c449ba6
 8002ec4:	3bc49ba6 	.word	0x3bc49ba6
 8002ec8:	20000790 	.word	0x20000790
 8002ecc:	2000079c 	.word	0x2000079c
 8002ed0:	3b03126f 	.word	0x3b03126f
 8002ed4:	3d888889 	.word	0x3d888889
 8002ed8:	bd888889 	.word	0xbd888889
 8002edc:	bd888889 	.word	0xbd888889
 8002ee0:	c3160000 	.word	0xc3160000
 8002ee4:	200008ac 	.word	0x200008ac
 8002ee8:	2000086c 	.word	0x2000086c
      if (target.local_velocity_current[i] - output.accel_limit[i] < target.local_velocity[i]) {
 8002eec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ef0:	eef4 8ac7 	vcmpe.f32	s17, s14
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	dc06      	bgt.n	8002f08 <speed_control+0x3e8>
        target.local_velocity_current[i] -= output.accel_limit[i];
 8002efa:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f02:	ee17 6a90 	vmov	r6, s15
 8002f06:	e6ac      	b.n	8002c62 <speed_control+0x142>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002f08:	ee18 6a90 	vmov	r6, s17
 8002f0c:	e6a9      	b.n	8002c62 <speed_control+0x142>
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8002f0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	f57f ae4b 	bpl.w	8002bb0 <speed_control+0x90>
      output.accel_limit[i] *= 5;
 8002f1a:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002f1e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002f22:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f26:	ed8a 7a05 	vstr	s14, [sl, #20]
 8002f2a:	e641      	b.n	8002bb0 <speed_control+0x90>
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8002f2c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f34:	f57f ae7f 	bpl.w	8002c36 <speed_control+0x116>
      output.accel_limit[i] *= 5;
 8002f38:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002f3c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002f40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f44:	ed8a 7a06 	vstr	s14, [sl, #24]
 8002f48:	e675      	b.n	8002c36 <speed_control+0x116>
      target.position[i] = omni.odom[i] - odom_diff_max;
 8002f4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f4e:	edc4 7a01 	vstr	s15, [r4, #4]
 8002f52:	ee16 4a90 	vmov	r4, s13
 8002f56:	e71e      	b.n	8002d96 <speed_control+0x276>

08002f58 <output_limit>:

void output_limit()
{
  if (debug.acc_step_down_flag) {
 8002f58:	4a3c      	ldr	r2, [pc, #240]	; (800304c <output_limit+0xf4>)
 8002f5a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8002f5e:	b38b      	cbz	r3, 8002fc4 <output_limit+0x6c>
    debug.limited_output = 0;  //スリップしてたら移動出力を0にする(仮)
 8002f60:	2300      	movs	r3, #0
 8002f62:	62d3      	str	r3, [r2, #44]	; 0x2c
  } else {
    debug.limited_output = OUTPUT_XY_LIMIT;
  }

  float limit_gain = 0;
  if (output.velocity[0] > debug.limited_output) {
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <output_limit+0xf8>)
 8002f66:	ed93 7a00 	vldr	s14, [r3]
 8002f6a:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	dd48      	ble.n	800300a <output_limit+0xb2>
    limit_gain = output.velocity[0] / debug.limited_output;
 8002f78:	edd3 6a00 	vldr	s13, [r3]
 8002f7c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
    output.velocity[0] = debug.limited_output;
 8002f80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f82:	6019      	str	r1, [r3, #0]
    output.velocity[1] /= limit_gain;
 8002f84:	ed93 6a01 	vldr	s12, [r3, #4]
 8002f88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f90:	edc3 7a01 	vstr	s15, [r3, #4]
    limit_gain = -output.velocity[0] / debug.limited_output;
    output.velocity[0] = -debug.limited_output;
    output.velocity[1] /= limit_gain;
  }

  if (output.velocity[1] > debug.limited_output) {
 8002f94:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f98:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	dd11      	ble.n	8002fca <output_limit+0x72>
    limit_gain = output.velocity[1] / debug.limited_output;
 8002fa6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002faa:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
    output.velocity[1] = debug.limited_output;
 8002fae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fb0:	605a      	str	r2, [r3, #4]
    output.velocity[0] /= limit_gain;
 8002fb2:	ed93 6a00 	vldr	s12, [r3]
 8002fb6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fbe:	edc3 7a00 	vstr	s15, [r3]
 8002fc2:	4770      	bx	lr
    debug.limited_output = OUTPUT_XY_LIMIT;
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <output_limit+0xfc>)
 8002fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fc8:	e7cc      	b.n	8002f64 <output_limit+0xc>
  } else if (output.velocity[1] < -debug.limited_output) {
 8002fca:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fce:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002fd2:	eef1 7a67 	vneg.f32	s15, s15
 8002fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	d513      	bpl.n	8003008 <output_limit+0xb0>
    limit_gain = -output.velocity[1] / debug.limited_output;
 8002fe0:	ed93 6a01 	vldr	s12, [r3, #4]
 8002fe4:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
    output.velocity[1] = -debug.limited_output;
 8002fe8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8002fec:	eef1 7a67 	vneg.f32	s15, s15
 8002ff0:	edc3 7a01 	vstr	s15, [r3, #4]
    output.velocity[0] /= limit_gain;
 8002ff4:	ed93 7a00 	vldr	s14, [r3]
 8002ff8:	eeb1 7a47 	vneg.f32	s14, s14
 8002ffc:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8003000:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003004:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8003008:	4770      	bx	lr
  } else if (output.velocity[0] < -debug.limited_output) {
 800300a:	ed93 7a00 	vldr	s14, [r3]
 800300e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8003012:	eef1 7a67 	vneg.f32	s15, s15
 8003016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d5b9      	bpl.n	8002f94 <output_limit+0x3c>
    limit_gain = -output.velocity[0] / debug.limited_output;
 8003020:	ed93 6a00 	vldr	s12, [r3]
 8003024:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
    output.velocity[0] = -debug.limited_output;
 8003028:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800302c:	eef1 7a67 	vneg.f32	s15, s15
 8003030:	edc3 7a00 	vstr	s15, [r3]
    output.velocity[1] /= limit_gain;
 8003034:	ed93 7a01 	vldr	s14, [r3, #4]
 8003038:	eeb1 7a47 	vneg.f32	s14, s14
 800303c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8003040:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003044:	edc3 7a01 	vstr	s15, [r3, #4]
 8003048:	e7a4      	b.n	8002f94 <output_limit+0x3c>
 800304a:	bf00      	nop
 800304c:	2000075c 	.word	0x2000075c
 8003050:	200008ac 	.word	0x200008ac
 8003054:	41200000 	.word	0x41200000

08003058 <send_accutuator_cmd_run>:

  send_accutuator_cmd_run();
}

void send_accutuator_cmd_run()
{
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ai_cmd.kick_power > 0) {
 800305a:	4c41      	ldr	r4, [pc, #260]	; (8003160 <send_accutuator_cmd_run+0x108>)
 800305c:	edd4 7a03 	vldr	s15, [r4, #12]
 8003060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003068:	dd08      	ble.n	800307c <send_accutuator_cmd_run+0x24>
    if (kick_state == 0) {
 800306a:	4d3e      	ldr	r5, [pc, #248]	; (8003164 <send_accutuator_cmd_run+0x10c>)
 800306c:	882b      	ldrh	r3, [r5, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	b98b      	cbnz	r3, 8003096 <send_accutuator_cmd_run+0x3e>
      if (can_raw.ball_detection[0] == 1) {
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <send_accutuator_cmd_run+0x110>)
 8003074:	f893 607c 	ldrb.w	r6, [r3, #124]	; 0x7c
 8003078:	2e01      	cmp	r6, #1
 800307a:	d03c      	beq.n	80030f6 <send_accutuator_cmd_run+0x9e>
    }
  }

  static uint8_t can_sending_index = 0;

  can_sending_index++;
 800307c:	4a3b      	ldr	r2, [pc, #236]	; (800316c <send_accutuator_cmd_run+0x114>)
 800307e:	7813      	ldrb	r3, [r2, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	b2db      	uxtb	r3, r3
  switch (can_sending_index) {
 8003084:	1e59      	subs	r1, r3, #1
  can_sending_index++;
 8003086:	7013      	strb	r3, [r2, #0]
  switch (can_sending_index) {
 8003088:	2904      	cmp	r1, #4
 800308a:	d80d      	bhi.n	80030a8 <send_accutuator_cmd_run+0x50>
 800308c:	e8df f001 	tbb	[pc, r1]
 8003090:	2721170e 	.word	0x2721170e
 8003094:	0f          	.byte	0x0f
 8003095:	00          	.byte	0x00
      if (kick_state > MAIN_LOOP_CYCLE / 2) {
 8003096:	882b      	ldrh	r3, [r5, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	2bfa      	cmp	r3, #250	; 0xfa
 800309c:	d825      	bhi.n	80030ea <send_accutuator_cmd_run+0x92>
        kick_state++;
 800309e:	882b      	ldrh	r3, [r5, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	802b      	strh	r3, [r5, #0]
 80030a6:	e7e9      	b.n	800307c <send_accutuator_cmd_run+0x24>
    case 5:
      actuator_motor5(ai_cmd.drible_power, 1.0);
      break;

    default:
      can_sending_index = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	7013      	strb	r3, [r2, #0]
      break;
  }
}
 80030ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      actuator_motor5(ai_cmd.drible_power, 1.0);
 80030ae:	ed94 0a02 	vldr	s0, [r4, #8]
 80030b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
}
 80030b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      actuator_motor5(ai_cmd.drible_power, 1.0);
 80030ba:	f7fe b80b 	b.w	80010d4 <actuator_motor5>
      if (ai_cmd.chip_en == true || ai_cmd.dribbler_up_flag) {
 80030be:	7c23      	ldrb	r3, [r4, #16]
 80030c0:	b91b      	cbnz	r3, 80030ca <send_accutuator_cmd_run+0x72>
 80030c2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d03f      	beq.n	800314a <send_accutuator_cmd_run+0xf2>
}
 80030ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        actuator_dribbler_up();
 80030ce:	f7fe b821 	b.w	8001114 <actuator_dribbler_up>
      actuator_kicker(1, 1);
 80030d2:	2101      	movs	r1, #1
}
 80030d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      actuator_kicker(1, 1);
 80030d8:	4608      	mov	r0, r1
 80030da:	f7fe b84f 	b.w	800117c <actuator_kicker>
}
 80030de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      actuator_kicker_voltage(300.0);
 80030e2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8003170 <send_accutuator_cmd_run+0x118>
 80030e6:	f7fe b839 	b.w	800115c <actuator_kicker_voltage>
        if (can_raw.ball_detection[0] == 0) {
 80030ea:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <send_accutuator_cmd_run+0x110>)
 80030ec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1c3      	bne.n	800307c <send_accutuator_cmd_run+0x24>
 80030f4:	e7d6      	b.n	80030a4 <send_accutuator_cmd_run+0x4c>
        uint8_t kick_power_param = (float)ai_cmd.kick_power * 255.0;
 80030f6:	ee17 0a90 	vmov	r0, s15
 80030fa:	f7fd fa4d 	bl	8000598 <__aeabi_f2d>
 80030fe:	a316      	add	r3, pc, #88	; (adr r3, 8003158 <send_accutuator_cmd_run+0x100>)
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	f7fd faa0 	bl	8000648 <__aeabi_dmul>
 8003108:	f7fd fd76 	bl	8000bf8 <__aeabi_d2uiz>
 800310c:	b2c7      	uxtb	r7, r0
        printf(" kick=%d\r\n", kick_power_param);
 800310e:	4639      	mov	r1, r7
 8003110:	4818      	ldr	r0, [pc, #96]	; (8003174 <send_accutuator_cmd_run+0x11c>)
 8003112:	f008 f9fb 	bl	800b50c <iprintf>
        if (ai_cmd.chip_en == true) {
 8003116:	7c21      	ldrb	r1, [r4, #16]
 8003118:	b991      	cbnz	r1, 8003140 <send_accutuator_cmd_run+0xe8>
          actuator_kicker(2, 0);
 800311a:	2002      	movs	r0, #2
 800311c:	f7fe f82e 	bl	800117c <actuator_kicker>
        actuator_kicker(3, (uint8_t)kick_power_param);
 8003120:	4639      	mov	r1, r7
 8003122:	2003      	movs	r0, #3
 8003124:	f7fe f82a 	bl	800117c <actuator_kicker>
    target.position[i] = omni.odom[i];
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <send_accutuator_cmd_run+0x120>)
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <send_accutuator_cmd_run+0x124>)
 800312c:	6991      	ldr	r1, [r2, #24]
 800312e:	69d2      	ldr	r2, [r2, #28]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	6019      	str	r1, [r3, #0]
        kick_state = 1;
 8003134:	2201      	movs	r2, #1
    ai_cmd.local_target_speed[i] = 0;
 8003136:	2300      	movs	r3, #0
        kick_state = 1;
 8003138:	802a      	strh	r2, [r5, #0]
    ai_cmd.local_target_speed[i] = 0;
 800313a:	6163      	str	r3, [r4, #20]
 800313c:	61a3      	str	r3, [r4, #24]
        kick_state = 1;
 800313e:	e79d      	b.n	800307c <send_accutuator_cmd_run+0x24>
          actuator_kicker(2, 1);
 8003140:	4631      	mov	r1, r6
 8003142:	2002      	movs	r0, #2
 8003144:	f7fe f81a 	bl	800117c <actuator_kicker>
 8003148:	e7ea      	b.n	8003120 <send_accutuator_cmd_run+0xc8>
}
 800314a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        actuator_dribbler_down();
 800314e:	f7fd bff3 	b.w	8001138 <actuator_dribbler_down>
 8003152:	bf00      	nop
 8003154:	f3af 8000 	nop.w
 8003158:	00000000 	.word	0x00000000
 800315c:	406fe000 	.word	0x406fe000
 8003160:	20000620 	.word	0x20000620
 8003164:	200007f0 	.word	0x200007f0
 8003168:	20000680 	.word	0x20000680
 800316c:	20000700 	.word	0x20000700
 8003170:	43960000 	.word	0x43960000
 8003174:	0800ec50 	.word	0x0800ec50
 8003178:	2000086c 	.word	0x2000086c
 800317c:	20000aec 	.word	0x20000aec

08003180 <maintask_run>:
{
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (ai_cmd.local_vision_en_flag == false /* && ai_cmd.stop_request_flag == false*/) {
 8003184:	4cd2      	ldr	r4, [pc, #840]	; (80034d0 <maintask_run+0x350>)
{
 8003186:	ed2d 8b08 	vpush	{d8-d11}
  if (ai_cmd.local_vision_en_flag == false /* && ai_cmd.stop_request_flag == false*/) {
 800318a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
{
 800318e:	b085      	sub	sp, #20
  if (ai_cmd.local_vision_en_flag == false /* && ai_cmd.stop_request_flag == false*/) {
 8003190:	2b00      	cmp	r3, #0
 8003192:	d072      	beq.n	800327a <maintask_run+0xfa>
    target.position[i] = omni.odom[i];
 8003194:	4dcf      	ldr	r5, [pc, #828]	; (80034d4 <maintask_run+0x354>)
 8003196:	4ad0      	ldr	r2, [pc, #832]	; (80034d8 <maintask_run+0x358>)
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 8003198:	f8df a360 	ldr.w	sl, [pc, #864]	; 80034fc <maintask_run+0x37c>
    target.position[i] = omni.odom[i];
 800319c:	6991      	ldr	r1, [r2, #24]
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 800319e:	ed9a 8a02 	vldr	s16, [sl, #8]
    target.position[i] = omni.odom[i];
 80031a2:	69d2      	ldr	r2, [r2, #28]
 80031a4:	6029      	str	r1, [r5, #0]
    ai_cmd.local_target_speed[i] = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	6163      	str	r3, [r4, #20]
 80031aa:	61a3      	str	r3, [r4, #24]
    target.velocity[0] = 0;
 80031ac:	612b      	str	r3, [r5, #16]
    target.velocity[1] = 0;
 80031ae:	616b      	str	r3, [r5, #20]
 80031b0:	4bca      	ldr	r3, [pc, #808]	; (80034dc <maintask_run+0x35c>)
    target.position[i] = omni.odom[i];
 80031b2:	606a      	str	r2, [r5, #4]
    target.velocity[1] = 0;
 80031b4:	9301      	str	r3, [sp, #4]
  speed_control();
 80031b6:	f7ff fcb3 	bl	8002b20 <speed_control>
  output_limit();
 80031ba:	f7ff fecd 	bl	8002f58 <output_limit>
  output.omega = (getAngleDiff(ai_cmd.target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 80031be:	eef0 0a48 	vmov.f32	s1, s16
 80031c2:	ed94 0a00 	vldr	s0, [r4]
 80031c6:	f002 fcef 	bl	8005ba8 <getAngleDiff>
 80031ca:	edda 0a03 	vldr	s1, [sl, #12]
 80031ce:	ee10 6a10 	vmov	r6, s0
 80031d2:	ed9a 0a02 	vldr	s0, [sl, #8]
 80031d6:	f002 fce7 	bl	8005ba8 <getAngleDiff>
 80031da:	4630      	mov	r0, r6
 80031dc:	ee10 7a10 	vmov	r7, s0
 80031e0:	f7fd f9da 	bl	8000598 <__aeabi_f2d>
 80031e4:	4bbe      	ldr	r3, [pc, #760]	; (80034e0 <maintask_run+0x360>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	f7fd fa2e 	bl	8000648 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4638      	mov	r0, r7
 80031f0:	4616      	mov	r6, r2
 80031f2:	460f      	mov	r7, r1
 80031f4:	f7fd f9d0 	bl	8000598 <__aeabi_f2d>
 80031f8:	4bba      	ldr	r3, [pc, #744]	; (80034e4 <maintask_run+0x364>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	f7fd fa24 	bl	8000648 <__aeabi_dmul>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4630      	mov	r0, r6
 8003206:	4639      	mov	r1, r7
 8003208:	f7fd f866 	bl	80002d8 <__aeabi_dsub>
 800320c:	f7fd fd14 	bl	8000c38 <__aeabi_d2f>
 8003210:	4bb5      	ldr	r3, [pc, #724]	; (80034e8 <maintask_run+0x368>)
  if (sys.main_mode != MAIN_MODE_CMD_DEBUG_MODE && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 8003212:	9a01      	ldr	r2, [sp, #4]
  output.omega = (getAngleDiff(ai_cmd.target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 8003214:	6118      	str	r0, [r3, #16]
  if (output.omega > OMEGA_LIMIT) {
 8003216:	ed93 7a04 	vldr	s14, [r3, #16]
  if (sys.main_mode != MAIN_MODE_CMD_DEBUG_MODE && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 800321a:	7b12      	ldrb	r2, [r2, #12]
  if (output.omega > OMEGA_LIMIT) {
 800321c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = OMEGA_LIMIT;
 8003228:	bfc8      	it	gt
 800322a:	edc3 7a04 	vstrgt	s15, [r3, #16]
  if (output.omega < -OMEGA_LIMIT) {
 800322e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003232:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8003236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = -OMEGA_LIMIT;
 800323e:	bf48      	it	mi
 8003240:	edc3 7a04 	vstrmi	s15, [r3, #16]
  if (sys.main_mode != MAIN_MODE_CMD_DEBUG_MODE && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 8003244:	2a02      	cmp	r2, #2
 8003246:	d007      	beq.n	8003258 <maintask_run+0xd8>
 8003248:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800324a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800324e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003252:	2a00      	cmp	r2, #0
 8003254:	f040 80f0 	bne.w	8003438 <maintask_run+0x2b8>
    omni_move(output.velocity[0], output.velocity[1], output.omega, OMNI_OUTPUT_LIMIT);
 8003258:	ed93 0a00 	vldr	s0, [r3]
 800325c:	edd3 0a01 	vldr	s1, [r3, #4]
 8003260:	ed93 1a04 	vldr	s2, [r3, #16]
 8003264:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8003268:	f001 ff92 	bl	8005190 <omni_move>
}
 800326c:	b005      	add	sp, #20
 800326e:	ecbd 8b08 	vpop	{d8-d11}
 8003272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  send_accutuator_cmd_run();
 8003276:	f7ff beef 	b.w	8003058 <send_accutuator_cmd_run>
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 800327a:	f8df b284 	ldr.w	fp, [pc, #644]	; 8003500 <maintask_run+0x380>
 800327e:	f8df a27c 	ldr.w	sl, [pc, #636]	; 80034fc <maintask_run+0x37c>
 8003282:	f8db 0018 	ldr.w	r0, [fp, #24]
 8003286:	f7fd f987 	bl	8000598 <__aeabi_f2d>
 800328a:	ed9a 8a02 	vldr	s16, [sl, #8]
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 800328e:	4b93      	ldr	r3, [pc, #588]	; (80034dc <maintask_run+0x35c>)
 8003290:	9301      	str	r3, [sp, #4]
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 8003292:	eef1 7a48 	vneg.f32	s15, s16
 8003296:	4680      	mov	r8, r0
 8003298:	ee17 0a90 	vmov	r0, s15
 800329c:	4689      	mov	r9, r1
 800329e:	f7fd f97b 	bl	8000598 <__aeabi_f2d>
 80032a2:	ec41 0b10 	vmov	d0, r0, r1
 80032a6:	ec41 0b19 	vmov	d9, r0, r1
 80032aa:	f00a fb29 	bl	800d900 <cos>
 80032ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80032b2:	eeb0 aa40 	vmov.f32	s20, s0
 80032b6:	eef0 aa60 	vmov.f32	s21, s1
 80032ba:	f7fd f96d 	bl	8000598 <__aeabi_f2d>
 80032be:	4606      	mov	r6, r0
 80032c0:	ee18 0a10 	vmov	r0, s16
 80032c4:	460f      	mov	r7, r1
 80032c6:	f7fd f967 	bl	8000598 <__aeabi_f2d>
 80032ca:	ec41 0b10 	vmov	d0, r0, r1
 80032ce:	f00a fb6b 	bl	800d9a8 <sin>
 80032d2:	ec53 2b1a 	vmov	r2, r3, d10
 80032d6:	4640      	mov	r0, r8
 80032d8:	4649      	mov	r1, r9
 80032da:	ed8d 0b02 	vstr	d0, [sp, #8]
 80032de:	f7fd f9b3 	bl	8000648 <__aeabi_dmul>
 80032e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032e6:	ec41 0b1b 	vmov	d11, r0, r1
 80032ea:	4630      	mov	r0, r6
 80032ec:	4639      	mov	r1, r7
 80032ee:	f7fd f9ab 	bl	8000648 <__aeabi_dmul>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ec51 0b1b 	vmov	r0, r1, d11
 80032fa:	f7fc ffef 	bl	80002dc <__adddf3>
 80032fe:	f7fd fc9b 	bl	8000c38 <__aeabi_d2f>
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 8003302:	eeb0 0a49 	vmov.f32	s0, s18
 8003306:	eef0 0a69 	vmov.f32	s1, s19
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 800330a:	4605      	mov	r5, r0
 800330c:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 8003310:	f00a fb4a 	bl	800d9a8 <sin>
 8003314:	4640      	mov	r0, r8
 8003316:	ec53 2b10 	vmov	r2, r3, d0
 800331a:	4649      	mov	r1, r9
 800331c:	f7fd f994 	bl	8000648 <__aeabi_dmul>
 8003320:	4632      	mov	r2, r6
 8003322:	463b      	mov	r3, r7
 8003324:	4606      	mov	r6, r0
 8003326:	460f      	mov	r7, r1
 8003328:	ec51 0b1a 	vmov	r0, r1, d10
 800332c:	f7fd f98c 	bl	8000648 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4630      	mov	r0, r6
 8003336:	4639      	mov	r1, r7
 8003338:	f7fc ffd0 	bl	80002dc <__adddf3>
 800333c:	f7fd fc7c 	bl	8000c38 <__aeabi_d2f>
 8003340:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8003344:	4606      	mov	r6, r0
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 8003346:	4628      	mov	r0, r5
 8003348:	f7fd f926 	bl	8000598 <__aeabi_f2d>
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 800334c:	4b63      	ldr	r3, [pc, #396]	; (80034dc <maintask_run+0x35c>)
 800334e:	7b1f      	ldrb	r7, [r3, #12]
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 8003350:	a357      	add	r3, pc, #348	; (adr r3, 80034b0 <maintask_run+0x330>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	4680      	mov	r8, r0
 8003358:	4689      	mov	r9, r1
 800335a:	f7fd fbe7 	bl	8000b2c <__aeabi_dcmplt>
 800335e:	2800      	cmp	r0, #0
 8003360:	f040 8084 	bne.w	800346c <maintask_run+0x2ec>
      if (integ.local_target_diff[i] < -0.3) {
 8003364:	a354      	add	r3, pc, #336	; (adr r3, 80034b8 <maintask_run+0x338>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	4640      	mov	r0, r8
 800336c:	4649      	mov	r1, r9
 800336e:	f7fd fbdd 	bl	8000b2c <__aeabi_dcmplt>
 8003372:	2800      	cmp	r0, #0
 8003374:	f000 808c 	beq.w	8003490 <maintask_run+0x310>
        integ.local_target_diff[i] = -0.3;
 8003378:	4d5c      	ldr	r5, [pc, #368]	; (80034ec <maintask_run+0x36c>)
 800337a:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 800337e:	6960      	ldr	r0, [r4, #20]
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 8003380:	b9cf      	cbnz	r7, 80033b6 <maintask_run+0x236>
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 8003382:	f7fd f909 	bl	8000598 <__aeabi_f2d>
 8003386:	ee07 5a10 	vmov	s14, r5
 800338a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800338e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003392:	4680      	mov	r8, r0
 8003394:	ee17 0a90 	vmov	r0, s15
 8003398:	4689      	mov	r9, r1
 800339a:	f7fd f8fd 	bl	8000598 <__aeabi_f2d>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4640      	mov	r0, r8
 80033a4:	4649      	mov	r1, r9
 80033a6:	f7fc ff99 	bl	80002dc <__adddf3>
 80033aa:	4b51      	ldr	r3, [pc, #324]	; (80034f0 <maintask_run+0x370>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	f7fd f94b 	bl	8000648 <__aeabi_dmul>
 80033b2:	f7fd fc41 	bl	8000c38 <__aeabi_d2f>
 80033b6:	4d47      	ldr	r5, [pc, #284]	; (80034d4 <maintask_run+0x354>)
 80033b8:	6128      	str	r0, [r5, #16]
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 80033ba:	4630      	mov	r0, r6
 80033bc:	f7fd f8ec 	bl	8000598 <__aeabi_f2d>
 80033c0:	a33b      	add	r3, pc, #236	; (adr r3, 80034b0 <maintask_run+0x330>)
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	4680      	mov	r8, r0
 80033c8:	4689      	mov	r9, r1
 80033ca:	f7fd fbaf 	bl	8000b2c <__aeabi_dcmplt>
 80033ce:	b140      	cbz	r0, 80033e2 <maintask_run+0x262>
 80033d0:	a33b      	add	r3, pc, #236	; (adr r3, 80034c0 <maintask_run+0x340>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	4640      	mov	r0, r8
 80033d8:	4649      	mov	r1, r9
 80033da:	f7fd fbc5 	bl	8000b68 <__aeabi_dcmpgt>
 80033de:	2800      	cmp	r0, #0
 80033e0:	d152      	bne.n	8003488 <maintask_run+0x308>
      if (integ.local_target_diff[i] < -0.3) {
 80033e2:	a335      	add	r3, pc, #212	; (adr r3, 80034b8 <maintask_run+0x338>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	4640      	mov	r0, r8
 80033ea:	4649      	mov	r1, r9
 80033ec:	f7fd fb9e 	bl	8000b2c <__aeabi_dcmplt>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	f000 8087 	beq.w	8003504 <maintask_run+0x384>
        integ.local_target_diff[i] = -0.3;
 80033f6:	4e3d      	ldr	r6, [pc, #244]	; (80034ec <maintask_run+0x36c>)
 80033f8:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 80033fc:	69a0      	ldr	r0, [r4, #24]
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 80033fe:	b9cf      	cbnz	r7, 8003434 <maintask_run+0x2b4>
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 8003400:	f7fd f8ca 	bl	8000598 <__aeabi_f2d>
 8003404:	ee07 6a10 	vmov	s14, r6
 8003408:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800340c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003410:	4680      	mov	r8, r0
 8003412:	ee17 0a90 	vmov	r0, s15
 8003416:	4689      	mov	r9, r1
 8003418:	f7fd f8be 	bl	8000598 <__aeabi_f2d>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	f7fc ff5a 	bl	80002dc <__adddf3>
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <maintask_run+0x370>)
 800342a:	2200      	movs	r2, #0
 800342c:	f7fd f90c 	bl	8000648 <__aeabi_dmul>
 8003430:	f7fd fc02 	bl	8000c38 <__aeabi_d2f>
 8003434:	6168      	str	r0, [r5, #20]
    for (int i = 0; i < 2; i++) {
 8003436:	e6be      	b.n	80031b6 <maintask_run+0x36>
    target.position[i] = omni.odom[i];
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <maintask_run+0x358>)
    ai_cmd.local_target_speed[i] = 0;
 800343a:	eddf 1a2e 	vldr	s3, [pc, #184]	; 80034f4 <maintask_run+0x374>
    target.position[i] = omni.odom[i];
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	602a      	str	r2, [r5, #0]
    omni_move(0.0, 0.0, 0.0, 0.0);
 8003444:	eeb0 1a61 	vmov.f32	s2, s3
 8003448:	eef0 0a61 	vmov.f32	s1, s3
 800344c:	eeb0 0a61 	vmov.f32	s0, s3
    target.position[i] = omni.odom[i];
 8003450:	606b      	str	r3, [r5, #4]
    ai_cmd.local_target_speed[i] = 0;
 8003452:	edc4 1a05 	vstr	s3, [r4, #20]
 8003456:	edc4 1a06 	vstr	s3, [r4, #24]
    omni_move(0.0, 0.0, 0.0, 0.0);
 800345a:	f001 fe99 	bl	8005190 <omni_move>
}
 800345e:	b005      	add	sp, #20
 8003460:	ecbd 8b08 	vpop	{d8-d11}
 8003464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  send_accutuator_cmd_run();
 8003468:	f7ff bdf6 	b.w	8003058 <send_accutuator_cmd_run>
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 800346c:	a314      	add	r3, pc, #80	; (adr r3, 80034c0 <maintask_run+0x340>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	4640      	mov	r0, r8
 8003474:	4649      	mov	r1, r9
 8003476:	f7fd fb77 	bl	8000b68 <__aeabi_dcmpgt>
 800347a:	2800      	cmp	r0, #0
 800347c:	f43f af72 	beq.w	8003364 <maintask_run+0x1e4>
        integ.local_target_diff[i] = 0;
 8003480:	2500      	movs	r5, #0
 8003482:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
      if (integ.local_target_diff[i] < -0.3) {
 8003486:	e77a      	b.n	800337e <maintask_run+0x1fe>
        integ.local_target_diff[i] = 0;
 8003488:	2600      	movs	r6, #0
 800348a:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
      if (integ.local_target_diff[i] < -0.3) {
 800348e:	e7b5      	b.n	80033fc <maintask_run+0x27c>
      } else if (integ.local_target_diff[i] > 0.3) {
 8003490:	a30d      	add	r3, pc, #52	; (adr r3, 80034c8 <maintask_run+0x348>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	4640      	mov	r0, r8
 8003498:	4649      	mov	r1, r9
 800349a:	f7fd fb65 	bl	8000b68 <__aeabi_dcmpgt>
 800349e:	2800      	cmp	r0, #0
 80034a0:	f43f af6d 	beq.w	800337e <maintask_run+0x1fe>
        integ.local_target_diff[i] = 0.3;
 80034a4:	4d14      	ldr	r5, [pc, #80]	; (80034f8 <maintask_run+0x378>)
 80034a6:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
 80034aa:	e768      	b.n	800337e <maintask_run+0x1fe>
 80034ac:	f3af 8000 	nop.w
 80034b0:	eb851eb8 	.word	0xeb851eb8
 80034b4:	3f9eb851 	.word	0x3f9eb851
 80034b8:	33333333 	.word	0x33333333
 80034bc:	bfd33333 	.word	0xbfd33333
 80034c0:	eb851eb8 	.word	0xeb851eb8
 80034c4:	bf9eb851 	.word	0xbf9eb851
 80034c8:	33333333 	.word	0x33333333
 80034cc:	3fd33333 	.word	0x3fd33333
 80034d0:	20000620 	.word	0x20000620
 80034d4:	20000aec 	.word	0x20000aec
 80034d8:	2000086c 	.word	0x2000086c
 80034dc:	20000ad4 	.word	0x20000ad4
 80034e0:	40640000 	.word	0x40640000
 80034e4:	40af4000 	.word	0x40af4000
 80034e8:	200008ac 	.word	0x200008ac
 80034ec:	be99999a 	.word	0xbe99999a
 80034f0:	3fe00000 	.word	0x3fe00000
 80034f4:	00000000 	.word	0x00000000
 80034f8:	3e99999a 	.word	0x3e99999a
 80034fc:	2000079c 	.word	0x2000079c
 8003500:	200007b0 	.word	0x200007b0
      } else if (integ.local_target_diff[i] > 0.3) {
 8003504:	a307      	add	r3, pc, #28	; (adr r3, 8003524 <maintask_run+0x3a4>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	4640      	mov	r0, r8
 800350c:	4649      	mov	r1, r9
 800350e:	f7fd fb2b 	bl	8000b68 <__aeabi_dcmpgt>
 8003512:	2800      	cmp	r0, #0
 8003514:	f43f af72 	beq.w	80033fc <maintask_run+0x27c>
        integ.local_target_diff[i] = 0.3;
 8003518:	4e01      	ldr	r6, [pc, #4]	; (8003520 <maintask_run+0x3a0>)
 800351a:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
 800351e:	e76d      	b.n	80033fc <maintask_run+0x27c>
 8003520:	3e99999a 	.word	0x3e99999a
 8003524:	33333333 	.word	0x33333333
 8003528:	3fd33333 	.word	0x3fd33333

0800352c <HAL_TIM_PeriodElapsedCallback>:
{
 800352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  mouse.integral_loop_cnt++;
 8003530:	49a8      	ldr	r1, [pc, #672]	; (80037d4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003532:	4da9      	ldr	r5, [pc, #676]	; (80037d8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
  mouse.integral_loop_cnt++;
 8003534:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003536:	692a      	ldr	r2, [r5, #16]
  pre_sw_mode = sw_mode;
 8003538:	4ea8      	ldr	r6, [pc, #672]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800353a:	4fa9      	ldr	r7, [pc, #676]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800353c:	48a9      	ldr	r0, [pc, #676]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
  mouse.integral_loop_cnt++;
 800353e:	3301      	adds	r3, #1
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003540:	3202      	adds	r2, #2
{
 8003542:	b082      	sub	sp, #8
  mouse.integral_loop_cnt++;
 8003544:	630b      	str	r3, [r1, #48]	; 0x30
  pre_sw_mode = sw_mode;
 8003546:	7833      	ldrb	r3, [r6, #0]
 8003548:	703b      	strb	r3, [r7, #0]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800354a:	2120      	movs	r1, #32
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 800354c:	612a      	str	r2, [r5, #16]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800354e:	f004 f985 	bl	800785c <HAL_GPIO_ReadPin>
 8003552:	2140      	movs	r1, #64	; 0x40
 8003554:	4604      	mov	r4, r0
 8003556:	48a3      	ldr	r0, [pc, #652]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003558:	f004 f980 	bl	800785c <HAL_GPIO_ReadPin>
 800355c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003560:	4680      	mov	r8, r0
 8003562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003566:	f004 f979 	bl	800785c <HAL_GPIO_ReadPin>
 800356a:	f1c4 040f 	rsb	r4, r4, #15
 800356e:	eba4 0448 	sub.w	r4, r4, r8, lsl #1
 8003572:	2104      	movs	r1, #4
 8003574:	4680      	mov	r8, r0
 8003576:	489c      	ldr	r0, [pc, #624]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003578:	f004 f970 	bl	800785c <HAL_GPIO_ReadPin>
 800357c:	b2e4      	uxtb	r4, r4
 800357e:	eba4 04c8 	sub.w	r4, r4, r8, lsl #3
 8003582:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
  if (sys.error_flag) {
 8003586:	782b      	ldrb	r3, [r5, #0]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003588:	b2c0      	uxtb	r0, r0
  sw_mode = getModeSwitch();
 800358a:	7030      	strb	r0, [r6, #0]
  if (sys.error_flag) {
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05f      	beq.n	8003650 <HAL_TIM_PeriodElapsedCallback+0x124>
    target.position[i] = omni.odom[i];
 8003590:	4896      	ldr	r0, [pc, #600]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003592:	4997      	ldr	r1, [pc, #604]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003594:	6984      	ldr	r4, [r0, #24]
    ai_cmd.local_target_speed[i] = 0;
 8003596:	4b97      	ldr	r3, [pc, #604]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
    target.position[i] = omni.odom[i];
 8003598:	69c0      	ldr	r0, [r0, #28]
 800359a:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 800359c:	2200      	movs	r2, #0
    sys.main_mode = MAIN_MODE_ERROR;
 800359e:	2409      	movs	r4, #9
 80035a0:	732c      	strb	r4, [r5, #12]
    ai_cmd.local_target_speed[i] = 0;
 80035a2:	615a      	str	r2, [r3, #20]
    target.position[i] = omni.odom[i];
 80035a4:	6048      	str	r0, [r1, #4]
    ai_cmd.local_target_speed[i] = 0;
 80035a6:	619a      	str	r2, [r3, #24]
  if (sys.system_time_ms < sys.stop_flag_request_time) {
 80035a8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d24d      	bcs.n	800364c <HAL_TIM_PeriodElapsedCallback+0x120>
    target.position[i] = omni.odom[i];
 80035b0:	488e      	ldr	r0, [pc, #568]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
    ai_cmd.local_target_speed[i] = 0;
 80035b2:	4b90      	ldr	r3, [pc, #576]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
    target.position[i] = omni.odom[i];
 80035b4:	498e      	ldr	r1, [pc, #568]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80035b6:	6984      	ldr	r4, [r0, #24]
 80035b8:	69c0      	ldr	r0, [r0, #28]
 80035ba:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 80035bc:	2200      	movs	r2, #0
 80035be:	615a      	str	r2, [r3, #20]
 80035c0:	619a      	str	r2, [r3, #24]
    target.position[i] = omni.odom[i];
 80035c2:	6048      	str	r0, [r1, #4]
    sys.stop_flag = true;
 80035c4:	2301      	movs	r3, #1
 80035c6:	706b      	strb	r3, [r5, #1]
  yawFilter();
 80035c8:	f7ff f9e6 	bl	8002998 <yawFilter>
  omniOdometory();
 80035cc:	f001 fb9c 	bl	8004d08 <omniOdometory>
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80035d0:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80035d2:	4c8a      	ldr	r4, [pc, #552]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80035d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80035d8:	edd3 6a08 	vldr	s13, [r3, #32]
 80035dc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 80035e0:	4f87      	ldr	r7, [pc, #540]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
  switch (sys.main_mode) {
 80035e2:	7b2a      	ldrb	r2, [r5, #12]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80035e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80035ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035f0:	ed94 7a08 	vldr	s14, [r4, #32]
 80035f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 80035f8:	edd7 6a02 	vldr	s13, [r7, #8]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80035fc:	ee77 7a87 	vadd.f32	s15, s15, s14
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 8003600:	ed97 7a03 	vldr	s14, [r7, #12]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8003604:	edc4 7a08 	vstr	s15, [r4, #32]
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 8003608:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800360c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003610:	edd7 6a04 	vldr	s13, [r7, #16]
 8003614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003618:	ed97 7a05 	vldr	s14, [r7, #20]
 800361c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003624:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  debug.true_cycle_cnt++;
 8003628:	68a3      	ldr	r3, [r4, #8]
 800362a:	3301      	adds	r3, #1
 800362c:	60a3      	str	r3, [r4, #8]
  switch (sys.main_mode) {
 800362e:	2a09      	cmp	r2, #9
 8003630:	f200 8122 	bhi.w	8003878 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8003634:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003638:	001d001d 	.word	0x001d001d
 800363c:	0096003d 	.word	0x0096003d
 8003640:	008c009a 	.word	0x008c009a
 8003644:	01200091 	.word	0x01200091
 8003648:	00f600ba 	.word	0x00f600ba
    sys.stop_flag = false;
 800364c:	2300      	movs	r3, #0
 800364e:	e7ba      	b.n	80035c6 <HAL_TIM_PeriodElapsedCallback+0x9a>
  } else if (sw_mode != pre_sw_mode) {  // reset
 8003650:	783b      	ldrb	r3, [r7, #0]
 8003652:	4283      	cmp	r3, r0
 8003654:	f000 8190 	beq.w	8003978 <HAL_TIM_PeriodElapsedCallback+0x44c>
    target.position[i] = omni.odom[i];
 8003658:	4864      	ldr	r0, [pc, #400]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800365a:	4965      	ldr	r1, [pc, #404]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800365c:	6984      	ldr	r4, [r0, #24]
    ai_cmd.local_target_speed[i] = 0;
 800365e:	4b65      	ldr	r3, [pc, #404]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
    target.position[i] = omni.odom[i];
 8003660:	69c0      	ldr	r0, [r0, #28]
 8003662:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 8003664:	2200      	movs	r2, #0
    sys.main_mode = MAIN_MODE_NONE;
 8003666:	2407      	movs	r4, #7
 8003668:	732c      	strb	r4, [r5, #12]
    ai_cmd.local_target_speed[i] = 0;
 800366a:	615a      	str	r2, [r3, #20]
    target.position[i] = omni.odom[i];
 800366c:	6048      	str	r0, [r1, #4]
    ai_cmd.local_target_speed[i] = 0;
 800366e:	619a      	str	r2, [r3, #24]
  for (int i = 0; i < 2; i++) {
 8003670:	e79a      	b.n	80035a8 <HAL_TIM_PeriodElapsedCallback+0x7c>
      if (connection.connected_ai == false || sys.stop_flag) {
 8003672:	4e64      	ldr	r6, [pc, #400]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003674:	7833      	ldrb	r3, [r6, #0]
 8003676:	b10b      	cbz	r3, 800367c <HAL_TIM_PeriodElapsedCallback+0x150>
 8003678:	786b      	ldrb	r3, [r5, #1]
 800367a:	b1f3      	cbz	r3, 80036ba <HAL_TIM_PeriodElapsedCallback+0x18e>
  }
}

void maintask_stop()
{
  omni_move(0.0, 0.0, 0.0, 0.0);
 800367c:	eddf 1a68 	vldr	s3, [pc, #416]	; 8003820 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8003680:	eef0 0a61 	vmov.f32	s1, s3
 8003684:	eeb0 0a61 	vmov.f32	s0, s3
 8003688:	eeb0 1a61 	vmov.f32	s2, s3
 800368c:	f001 fd80 	bl	8005190 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003690:	eddf 0a63 	vldr	s1, [pc, #396]	; 8003820 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8003694:	eeb0 0a60 	vmov.f32	s0, s1
 8003698:	f7fd fd1c 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 800369c:	2100      	movs	r1, #0
 800369e:	2001      	movs	r0, #1
 80036a0:	f7fd fd6c 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 80036a4:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8003820 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80036a8:	f7fd fd58 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 80036ac:	f7fd fd44 	bl	8001138 <actuator_dribbler_down>
}
 80036b0:	e005      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
      if (sys.stop_flag) {
 80036b2:	786b      	ldrb	r3, [r5, #1]
 80036b4:	4e53      	ldr	r6, [pc, #332]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e0      	bne.n	800367c <HAL_TIM_PeriodElapsedCallback+0x150>
        maintask_run();
 80036ba:	f7ff fd61 	bl	8003180 <maintask_run>
  if (can_raw.power_voltage[5] < 21.0 && can_raw.power_voltage[5] == 0.0) {
 80036be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80036c2:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80036c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	f140 80ef 	bpl.w	80038b0 <HAL_TIM_PeriodElapsedCallback+0x384>
 80036d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	f040 80e9 	bne.w	80038b0 <HAL_TIM_PeriodElapsedCallback+0x384>
    buzzer_cnt++;
 80036de:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	3301      	adds	r3, #1
    if (buzzer_cnt > 100) {
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	f240 80ec 	bls.w	80038c2 <HAL_TIM_PeriodElapsedCallback+0x396>
      buzzer_cnt = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	6013      	str	r3, [r2, #0]
      if (buzzer_state == false) {
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	f040 812d 	bne.w	8003952 <HAL_TIM_PeriodElapsedCallback+0x426>
        buzzer_state = true;
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
        actuator_buzzer_on();
 80036fc:	f7fd fd8a 	bl	8001214 <actuator_buzzer_on>
  if (sys.system_time_ms - connection.latest_ai_cmd_update_time < 1000) {  // AI コマンドタイムアウト
 8003700:	692b      	ldr	r3, [r5, #16]
 8003702:	6932      	ldr	r2, [r6, #16]
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370a:	f080 80dc 	bcs.w	80038c6 <HAL_TIM_PeriodElapsedCallback+0x39a>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800370e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    connection.connected_ai = true;
 8003712:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003714:	483e      	ldr	r0, [pc, #248]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
    connection.connected_ai = true;
 8003716:	7032      	strb	r2, [r6, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003718:	f004 f8a6 	bl	8007868 <HAL_GPIO_WritePin>
    if (connection.vision_update_cycle_cnt < MAIN_LOOP_CYCLE * 2) {
 800371c:	68b3      	ldr	r3, [r6, #8]
 800371e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      connection.vision_update_cycle_cnt++;
 8003722:	bf37      	itett	cc
 8003724:	3301      	addcc	r3, #1
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 8003726:	6929      	ldrcs	r1, [r5, #16]
 8003728:	6929      	ldrcc	r1, [r5, #16]
      connection.vision_update_cycle_cnt++;
 800372a:	60b3      	strcc	r3, [r6, #8]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 800372c:	6973      	ldr	r3, [r6, #20]
 800372e:	1ac9      	subs	r1, r1, r3
 8003730:	29c7      	cmp	r1, #199	; 0xc7
 8003732:	f200 80f2 	bhi.w	800391a <HAL_TIM_PeriodElapsedCallback+0x3ee>
    connection.connected_cm4 = true;
 8003736:	2301      	movs	r3, #1
  cnt_time_50Hz++;
 8003738:	4a36      	ldr	r2, [pc, #216]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800373a:	7073      	strb	r3, [r6, #1]
 800373c:	8813      	ldrh	r3, [r2, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	b29b      	uxth	r3, r3
  if (cnt_time_50Hz > 10) {
 8003742:	2b0a      	cmp	r3, #10
 8003744:	f200 810a 	bhi.w	800395c <HAL_TIM_PeriodElapsedCallback+0x430>
  cnt_time_50Hz++;
 8003748:	8013      	strh	r3, [r2, #0]
}
 800374a:	b002      	add	sp, #8
 800374c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      kicker_test(false);
 8003750:	2000      	movs	r0, #0
 8003752:	f7ff f85d 	bl	8002810 <kicker_test>
      break;
 8003756:	4e2b      	ldr	r6, [pc, #172]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003758:	e7b1      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
      kicker_test(true);
 800375a:	2001      	movs	r0, #1
 800375c:	f7ff f858 	bl	8002810 <kicker_test>
      break;
 8003760:	4e28      	ldr	r6, [pc, #160]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003762:	e7ac      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
      motor_test();
 8003764:	f7fe ffe4 	bl	8002730 <motor_test>
      break;
 8003768:	4e26      	ldr	r6, [pc, #152]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800376a:	e7a8      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
  if (decode_SW(adc_sw_data) & 0b00010000) {
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800376e:	8818      	ldrh	r0, [r3, #0]
 8003770:	f002 faf2 	bl	8005d58 <decode_SW>
 8003774:	f010 0610 	ands.w	r6, r0, #16
 8003778:	f000 8100 	beq.w	800397c <HAL_TIM_PeriodElapsedCallback+0x450>
    actuator_motor5(0.5, 1.0);
 800377c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003780:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003784:	f7fd fca6 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003788:	4821      	ldr	r0, [pc, #132]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800378a:	2201      	movs	r2, #1
 800378c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003790:	f004 f86a 	bl	8007868 <HAL_GPIO_WritePin>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003794:	eddf 1a22 	vldr	s3, [pc, #136]	; 8003820 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8003798:	4e1a      	ldr	r6, [pc, #104]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800379a:	eeb0 1a61 	vmov.f32	s2, s3
 800379e:	eef0 0a61 	vmov.f32	s1, s3
 80037a2:	eeb0 0a61 	vmov.f32	s0, s3
 80037a6:	f001 fcf3 	bl	8005190 <omni_move>
}
 80037aa:	e788      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
  if (decode_SW(adc_sw_data) & 0b00000100) {
 80037ac:	4e1a      	ldr	r6, [pc, #104]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80037ae:	8830      	ldrh	r0, [r6, #0]
 80037b0:	f002 fad2 	bl	8005d58 <decode_SW>
 80037b4:	0743      	lsls	r3, r0, #29
 80037b6:	f140 80ee 	bpl.w	8003996 <HAL_TIM_PeriodElapsedCallback+0x46a>
    calib_start_cnt++;
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	3301      	adds	r3, #1
    if (calib_start_cnt > 1000) {
 80037c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    calib_start_cnt++;
 80037c4:	6013      	str	r3, [r2, #0]
    if (calib_start_cnt > 1000) {
 80037c6:	d971      	bls.n	80038ac <HAL_TIM_PeriodElapsedCallback+0x380>
      actuator_motor_calib(0);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fd fd4d 	bl	8001268 <actuator_motor_calib>
 80037ce:	4e0d      	ldr	r6, [pc, #52]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80037d0:	e775      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
 80037d2:	bf00      	nop
 80037d4:	2000082c 	.word	0x2000082c
 80037d8:	20000ad4 	.word	0x20000ad4
 80037dc:	20000ad1 	.word	0x20000ad1
 80037e0:	200008d8 	.word	0x200008d8
 80037e4:	48000400 	.word	0x48000400
 80037e8:	48000c00 	.word	0x48000c00
 80037ec:	2000086c 	.word	0x2000086c
 80037f0:	20000aec 	.word	0x20000aec
 80037f4:	20000620 	.word	0x20000620
 80037f8:	200008ac 	.word	0x200008ac
 80037fc:	2000075c 	.word	0x2000075c
 8003800:	20000680 	.word	0x20000680
 8003804:	20000704 	.word	0x20000704
 8003808:	20000674 	.word	0x20000674
 800380c:	20000678 	.word	0x20000678
 8003810:	48000800 	.word	0x48000800
 8003814:	20000702 	.word	0x20000702
 8003818:	2000061c 	.word	0x2000061c
 800381c:	2000067c 	.word	0x2000067c
 8003820:	00000000 	.word	0x00000000
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003824:	ed5f 1a02 	vldr	s3, [pc, #-8]	; 8003820 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8003828:	4e66      	ldr	r6, [pc, #408]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800382a:	eef0 0a61 	vmov.f32	s1, s3
 800382e:	eeb0 0a61 	vmov.f32	s0, s3
 8003832:	eeb0 1a61 	vmov.f32	s2, s3
 8003836:	f001 fcab 	bl	8005190 <omni_move>
  actuator_motor5(0.0, 0.0);
 800383a:	eddf 0a63 	vldr	s1, [pc, #396]	; 80039c8 <HAL_TIM_PeriodElapsedCallback+0x49c>
 800383e:	eeb0 0a60 	vmov.f32	s0, s1
 8003842:	f7fd fc47 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003846:	2100      	movs	r1, #0
 8003848:	2001      	movs	r0, #1
 800384a:	f7fd fc97 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 800384e:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80039c8 <HAL_TIM_PeriodElapsedCallback+0x49c>
 8003852:	f7fd fc83 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003856:	f7fd fc6f 	bl	8001138 <actuator_dribbler_down>

void send_can_error()
{
  uint8_t senddata_error[8];
  can1_send(0x000, senddata_error);
 800385a:	4669      	mov	r1, sp
 800385c:	2000      	movs	r0, #0
 800385e:	f7fd ff2d 	bl	80016bc <can1_send>
  can2_send(0x000, senddata_error);
 8003862:	4669      	mov	r1, sp
 8003864:	2000      	movs	r0, #0
 8003866:	f7fd ff79 	bl	800175c <can2_send>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800386a:	4858      	ldr	r0, [pc, #352]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800386c:	2201      	movs	r2, #1
 800386e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003872:	f003 fff9 	bl	8007868 <HAL_GPIO_WritePin>
}
 8003876:	e722      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003878:	eddf 1a53 	vldr	s3, [pc, #332]	; 80039c8 <HAL_TIM_PeriodElapsedCallback+0x49c>
 800387c:	eef0 0a61 	vmov.f32	s1, s3
 8003880:	eeb0 0a61 	vmov.f32	s0, s3
 8003884:	eeb0 1a61 	vmov.f32	s2, s3
 8003888:	f001 fc82 	bl	8005190 <omni_move>
  actuator_motor5(0.0, 0.0);
 800388c:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80039c8 <HAL_TIM_PeriodElapsedCallback+0x49c>
 8003890:	eeb0 0a60 	vmov.f32	s0, s1
 8003894:	f7fd fc1e 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003898:	2100      	movs	r1, #0
 800389a:	2001      	movs	r0, #1
 800389c:	f7fd fc6e 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 80038a0:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80039c8 <HAL_TIM_PeriodElapsedCallback+0x49c>
 80038a4:	f7fd fc5a 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 80038a8:	f7fd fc46 	bl	8001138 <actuator_dribbler_down>
 80038ac:	4e45      	ldr	r6, [pc, #276]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x498>)
}
 80038ae:	e706      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
  } else if (sys.error_flag) {
 80038b0:	782b      	ldrb	r3, [r5, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d048      	beq.n	8003948 <HAL_TIM_PeriodElapsedCallback+0x41c>
    buzzer_cnt++;
 80038b6:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	3301      	adds	r3, #1
    if (buzzer_cnt > 20) {
 80038bc:	2b14      	cmp	r3, #20
 80038be:	f63f af14 	bhi.w	80036ea <HAL_TIM_PeriodElapsedCallback+0x1be>
    buzzer_cnt++;
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	e71c      	b.n	8003700 <HAL_TIM_PeriodElapsedCallback+0x1d4>
    connection.connected_ai = false;
 80038c6:	f04f 0800 	mov.w	r8, #0
    connection.cmd_rx_frq = 0;
 80038ca:	2700      	movs	r7, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80038cc:	4642      	mov	r2, r8
 80038ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d2:	4840      	ldr	r0, [pc, #256]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
    connection.connected_ai = false;
 80038d4:	f886 8000 	strb.w	r8, [r6]
    connection.cmd_rx_frq = 0;
 80038d8:	6077      	str	r7, [r6, #4]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80038da:	f003 ffc5 	bl	8007868 <HAL_GPIO_WritePin>
void resetAiCmdData()
{
  ai_cmd.local_target_speed[0] = 0;
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
    sys.stop_flag_request_time = sys.system_time_ms + 1000;  // 前回のタイムアウト時から1.0s間は動かさない
 80038e0:	6929      	ldr	r1, [r5, #16]
  ai_cmd.local_target_speed[0] = 0;
 80038e2:	615f      	str	r7, [r3, #20]
  ai_cmd.ball_local_x = 0;
  ai_cmd.ball_local_y = 0;
  ai_cmd.ball_local_radius = 0;
  ai_cmd.ball_local_FPS = 0;*/

  ai_cmd.vision_lost_flag = true;
 80038e4:	2201      	movs	r2, #1
  ai_cmd.local_target_speed[1] = 0;
 80038e6:	619f      	str	r7, [r3, #24]
  ai_cmd.global_vision_theta = 0;
 80038e8:	605f      	str	r7, [r3, #4]
  ai_cmd.target_theta = 0;
 80038ea:	601f      	str	r7, [r3, #0]
  ai_cmd.chip_en = false;
 80038ec:	f883 8010 	strb.w	r8, [r3, #16]
  ai_cmd.allow_local_flags = 0;
 80038f0:	f883 8034 	strb.w	r8, [r3, #52]	; 0x34
  ai_cmd.kick_power = 0;
 80038f4:	60df      	str	r7, [r3, #12]
  ai_cmd.drible_power = 0;
 80038f6:	609f      	str	r7, [r3, #8]
  ai_cmd.global_ball_position[0] = 0;
 80038f8:	62df      	str	r7, [r3, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = 0;
 80038fa:	631f      	str	r7, [r3, #48]	; 0x30
  ai_cmd.global_robot_position[0] = 0;
 80038fc:	61df      	str	r7, [r3, #28]
  ai_cmd.global_robot_position[1] = 0;
 80038fe:	621f      	str	r7, [r3, #32]
  ai_cmd.global_target_position[0] = 0;
 8003900:	625f      	str	r7, [r3, #36]	; 0x24
  ai_cmd.global_target_position[1] = 0;
 8003902:	629f      	str	r7, [r3, #40]	; 0x28
  ai_cmd.vision_lost_flag = true;
 8003904:	649a      	str	r2, [r3, #72]	; 0x48
    sys.stop_flag_request_time = sys.system_time_ms + 1000;  // 前回のタイムアウト時から1.0s間は動かさない
 8003906:	f501 737a 	add.w	r3, r1, #1000	; 0x3e8
 800390a:	616b      	str	r3, [r5, #20]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 800390c:	6973      	ldr	r3, [r6, #20]
    connection.vision_update_cycle_cnt = 0;
 800390e:	f8c6 8008 	str.w	r8, [r6, #8]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 8003912:	1ac9      	subs	r1, r1, r3
 8003914:	29c7      	cmp	r1, #199	; 0xc7
 8003916:	f67f af0e 	bls.w	8003736 <HAL_TIM_PeriodElapsedCallback+0x20a>
  ai_cmd.local_target_speed[0] = 0;
 800391a:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 800391c:	2200      	movs	r2, #0
    connection.connected_ai = false;
 800391e:	2100      	movs	r1, #0
  ai_cmd.local_target_speed[0] = 0;
 8003920:	615a      	str	r2, [r3, #20]
  ai_cmd.local_target_speed[1] = 0;
 8003922:	619a      	str	r2, [r3, #24]
  ai_cmd.global_vision_theta = 0;
 8003924:	605a      	str	r2, [r3, #4]
  ai_cmd.target_theta = 0;
 8003926:	601a      	str	r2, [r3, #0]
  ai_cmd.kick_power = 0;
 8003928:	60da      	str	r2, [r3, #12]
  ai_cmd.drible_power = 0;
 800392a:	609a      	str	r2, [r3, #8]
  ai_cmd.global_ball_position[0] = 0;
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = 0;
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  ai_cmd.global_robot_position[0] = 0;
 8003930:	61da      	str	r2, [r3, #28]
  ai_cmd.global_robot_position[1] = 0;
 8003932:	621a      	str	r2, [r3, #32]
  ai_cmd.global_target_position[0] = 0;
 8003934:	625a      	str	r2, [r3, #36]	; 0x24
  ai_cmd.global_target_position[1] = 0;
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
  ai_cmd.vision_lost_flag = true;
 8003938:	2201      	movs	r2, #1
  ai_cmd.chip_en = false;
 800393a:	7419      	strb	r1, [r3, #16]
  ai_cmd.allow_local_flags = 0;
 800393c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  ai_cmd.vision_lost_flag = true;
 8003940:	649a      	str	r2, [r3, #72]	; 0x48
    connection.connected_ai = false;
 8003942:	7031      	strb	r1, [r6, #0]
    connection.connected_cm4 = false;
 8003944:	460b      	mov	r3, r1
  ai_cmd.local_vision_en_flag = false;
  ai_cmd.keeper_mode_en_flag = false;
  ai_cmd.stop_request_flag = false;  //
}
 8003946:	e6f7      	b.n	8003738 <HAL_TIM_PeriodElapsedCallback+0x20c>
  } else if (buzzer_state) {
 8003948:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	2a00      	cmp	r2, #0
 800394e:	f43f aed7 	beq.w	8003700 <HAL_TIM_PeriodElapsedCallback+0x1d4>
        buzzer_state = false;
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
        actuator_buzzer_off();
 8003956:	f7fd fc67 	bl	8001228 <actuator_buzzer_off>
 800395a:	e6d1      	b.n	8003700 <HAL_TIM_PeriodElapsedCallback+0x1d4>
    debug.print_flag = true;
 800395c:	2001      	movs	r0, #1
    cnt_time_50Hz = 0;
 800395e:	2300      	movs	r3, #0
    debug.print_flag = true;
 8003960:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    cnt_time_50Hz = 0;
 8003964:	8013      	strh	r3, [r2, #0]
    actuator_power_ONOFF(1);
 8003966:	f7fd fc1f 	bl	80011a8 <actuator_power_ONOFF>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800396a:	4818      	ldr	r0, [pc, #96]	; (80039cc <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800396c:	2180      	movs	r1, #128	; 0x80
}
 800396e:	b002      	add	sp, #8
 8003970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003974:	f003 bf7e 	b.w	8007874 <HAL_GPIO_TogglePin>
    sys.main_mode = sw_mode;
 8003978:	732b      	strb	r3, [r5, #12]
 800397a:	e615      	b.n	80035a8 <HAL_TIM_PeriodElapsedCallback+0x7c>
    actuator_motor5(0.0, 0.0);
 800397c:	eddf 0a12 	vldr	s1, [pc, #72]	; 80039c8 <HAL_TIM_PeriodElapsedCallback+0x49c>
 8003980:	eeb0 0a60 	vmov.f32	s0, s1
 8003984:	f7fd fba6 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003988:	4812      	ldr	r0, [pc, #72]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800398a:	4632      	mov	r2, r6
 800398c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003990:	f003 ff6a 	bl	8007868 <HAL_GPIO_WritePin>
 8003994:	e6fe      	b.n	8003794 <HAL_TIM_PeriodElapsedCallback+0x268>
  } else if (decode_SW(adc_sw_data) & 0b00001000) {
 8003996:	8830      	ldrh	r0, [r6, #0]
 8003998:	f002 f9de 	bl	8005d58 <decode_SW>
 800399c:	f010 0008 	ands.w	r0, r0, #8
 80039a0:	d00c      	beq.n	80039bc <HAL_TIM_PeriodElapsedCallback+0x490>
    calib_start_cnt++;
 80039a2:	4a0f      	ldr	r2, [pc, #60]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80039a4:	6813      	ldr	r3, [r2, #0]
 80039a6:	3301      	adds	r3, #1
    if (calib_start_cnt > 1000) {
 80039a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    calib_start_cnt++;
 80039ac:	6013      	str	r3, [r2, #0]
    if (calib_start_cnt > 1000) {
 80039ae:	f67f af7d 	bls.w	80038ac <HAL_TIM_PeriodElapsedCallback+0x380>
      actuator_motor_calib(1);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f7fd fc58 	bl	8001268 <actuator_motor_calib>
 80039b8:	4e02      	ldr	r6, [pc, #8]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80039ba:	e680      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
    calib_start_cnt = 0;
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 80039be:	4e01      	ldr	r6, [pc, #4]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80039c0:	6018      	str	r0, [r3, #0]
 80039c2:	e67c      	b.n	80036be <HAL_TIM_PeriodElapsedCallback+0x192>
 80039c4:	20000704 	.word	0x20000704
 80039c8:	00000000 	.word	0x00000000
 80039cc:	48000400 	.word	0x48000400
 80039d0:	20000674 	.word	0x20000674
 80039d4:	48000800 	.word	0x48000800
 80039d8:	20000620 	.word	0x20000620
 80039dc:	20000678 	.word	0x20000678
 80039e0:	2000067c 	.word	0x2000067c

080039e4 <sendRobotInfo>:
{
 80039e4:	b570      	push	{r4, r5, r6, lr}
  ring_counter++;
 80039e6:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <sendRobotInfo+0xb4>)
        senddata[7] = temp[3];
 80039e8:	4c2c      	ldr	r4, [pc, #176]	; (8003a9c <sendRobotInfo+0xb8>)
  ring_counter++;
 80039ea:	7813      	ldrb	r3, [r2, #0]
        senddata[8] = temp[0];
 80039ec:	482c      	ldr	r0, [pc, #176]	; (8003aa0 <sendRobotInfo+0xbc>)
        senddata[3] = ring_counter;
 80039ee:	7825      	ldrb	r5, [r4, #0]
 80039f0:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
 80039f4:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
  ring_counter++;
 80039f8:	3301      	adds	r3, #1
 80039fa:	b2db      	uxtb	r3, r3
  if (ring_counter > 200) {
 80039fc:	2bc8      	cmp	r3, #200	; 0xc8
    ring_counter = 0;
 80039fe:	bf88      	it	hi
 8003a00:	2300      	movhi	r3, #0
 8003a02:	7013      	strb	r3, [r2, #0]
 8003a04:	78e2      	ldrb	r2, [r4, #3]
 8003a06:	f04f 0e00 	mov.w	lr, #0
 8003a0a:	f362 0e07 	bfi	lr, r2, #0, #8
 8003a0e:	f361 2e0f 	bfi	lr, r1, #8, #8
 8003a12:	f04f 0c00 	mov.w	ip, #0
 8003a16:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 8003a1a:	f366 0c07 	bfi	ip, r6, #0, #8
 8003a1e:	f361 2c0f 	bfi	ip, r1, #8, #8
        senddata[3] = ring_counter;
 8003a22:	2100      	movs	r1, #0
 8003a24:	f363 0107 	bfi	r1, r3, #0, #8
 8003a28:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003a2c:	f363 4e17 	bfi	lr, r3, #16, #8
 8003a30:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
{
 8003a34:	b084      	sub	sp, #16
        senddata[0] = 0xAB;
 8003a36:	f64e 22ab 	movw	r2, #60075	; 0xeaab
 8003a3a:	f363 4c17 	bfi	ip, r3, #16, #8
        senddata[3] = ring_counter;
 8003a3e:	7863      	ldrb	r3, [r4, #1]
        senddata[0] = 0xAB;
 8003a40:	f8ad 2000 	strh.w	r2, [sp]
        senddata[3] = ring_counter;
 8003a44:	f365 210f 	bfi	r1, r5, #8, #8
        senddata[15] = kick_state / 10;
 8003a48:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <sendRobotInfo+0xc0>)
        senddata[3] = ring_counter;
 8003a4a:	f363 4117 	bfi	r1, r3, #16, #8
 8003a4e:	78a3      	ldrb	r3, [r4, #2]
        senddata[15] = kick_state / 10;
 8003a50:	8812      	ldrh	r2, [r2, #0]
        senddata[3] = ring_counter;
 8003a52:	f363 611f 	bfi	r1, r3, #24, #8
        senddata[15] = kick_state / 10;
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <sendRobotInfo+0xc4>)
        senddata[3] = ring_counter;
 8003a58:	f8cd 1003 	str.w	r1, [sp, #3]
        senddata[15] = kick_state / 10;
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	fba3 3202 	umull	r3, r2, r3, r2
 8003a62:	08d2      	lsrs	r2, r2, #3
 8003a64:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
 8003a68:	f88d 200f 	strb.w	r2, [sp, #15]
 8003a6c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    HAL_UART_Transmit(&huart2, senddata, sizeof(senddata), 0xff);
 8003a70:	480e      	ldr	r0, [pc, #56]	; (8003aac <sendRobotInfo+0xc8>)
 8003a72:	f361 6e1f 	bfi	lr, r1, #24, #8
 8003a76:	f362 6c1f 	bfi	ip, r2, #24, #8
 8003a7a:	23ff      	movs	r3, #255	; 0xff
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	4669      	mov	r1, sp
        senddata[2] = i + 10;
 8003a80:	240a      	movs	r4, #10
        senddata[3] = ring_counter;
 8003a82:	f8cd e007 	str.w	lr, [sp, #7]
 8003a86:	f8cd c00b 	str.w	ip, [sp, #11]
        senddata[2] = i + 10;
 8003a8a:	f88d 4002 	strb.w	r4, [sp, #2]
    HAL_UART_Transmit(&huart2, senddata, sizeof(senddata), 0xff);
 8003a8e:	f006 fd99 	bl	800a5c4 <HAL_UART_Transmit>
}
 8003a92:	b004      	add	sp, #16
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	bf00      	nop
 8003a98:	20000ad0 	.word	0x20000ad0
 8003a9c:	2000079c 	.word	0x2000079c
 8003aa0:	20000680 	.word	0x20000680
 8003aa4:	200007f0 	.word	0x200007f0
 8003aa8:	cccccccd 	.word	0xcccccccd
 8003aac:	20000e38 	.word	0x20000e38

08003ab0 <parseRxCmd>:

void parseRxCmd()
{
 8003ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  connection.check_ver = data_from_cm4[1];
 8003ab4:	4da0      	ldr	r5, [pc, #640]	; (8003d38 <parseRxCmd+0x288>)
 8003ab6:	4ea1      	ldr	r6, [pc, #644]	; (8003d3c <parseRxCmd+0x28c>)

  if (connection.check_ver != connection.check_pre) {
 8003ab8:	78aa      	ldrb	r2, [r5, #2]
  connection.check_ver = data_from_cm4[1];
 8003aba:	7873      	ldrb	r3, [r6, #1]
 8003abc:	70eb      	strb	r3, [r5, #3]
  if (connection.check_ver != connection.check_pre) {
 8003abe:	429a      	cmp	r2, r3
{
 8003ac0:	ed2d 8b02 	vpush	{d8}
  if (connection.check_ver != connection.check_pre) {
 8003ac4:	f000 812f 	beq.w	8003d26 <parseRxCmd+0x276>
    connection.latest_ai_cmd_update_time = sys.system_time_ms;
 8003ac8:	4a9d      	ldr	r2, [pc, #628]	; (8003d40 <parseRxCmd+0x290>)

    connection.pre_vision_update_cycle_cnt = connection.vision_update_cycle_cnt;
 8003aca:	68a9      	ldr	r1, [r5, #8]
    connection.latest_ai_cmd_update_time = sys.system_time_ms;
 8003acc:	6912      	ldr	r2, [r2, #16]
    connection.vision_update_cycle_cnt = 0;

    connection.check_pre = connection.check_ver;
 8003ace:	70ab      	strb	r3, [r5, #2]
    connection.pre_vision_update_cycle_cnt = connection.vision_update_cycle_cnt;
 8003ad0:	e9c5 1203 	strd	r1, r2, [r5, #12]
    connection.vision_update_cycle_cnt = 0;
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	60a9      	str	r1, [r5, #8]
  }

  float pre_update_time_ms = connection.latest_cm4_cmd_update_time;
  connection.latest_cm4_cmd_update_time = sys.system_time_ms;
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003ad8:	ee07 2a90 	vmov	s15, r2
  float pre_update_time_ms = connection.latest_cm4_cmd_update_time;
 8003adc:	ed95 7a05 	vldr	s14, [r5, #20]
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003ae0:	eddf 6a98 	vldr	s13, [pc, #608]	; 8003d44 <parseRxCmd+0x294>

  // aiコマンドに関係なくカメラ情報は入れる(デバッグ用)
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003ae4:	f8b6 3039 	ldrh.w	r3, [r6, #57]	; 0x39
 8003ae8:	4c97      	ldr	r4, [pc, #604]	; (8003d48 <parseRxCmd+0x298>)
  connection.latest_cm4_cmd_update_time = sys.system_time_ms;
 8003aea:	616a      	str	r2, [r5, #20]
  float pre_update_time_ms = connection.latest_cm4_cmd_update_time;
 8003aec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003af4:	ba5b      	rev16	r3, r3
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003af6:	ee77 7ac7 	vsub.f32	s15, s15, s14
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003afa:	b29b      	uxth	r3, r3
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  ai_cmd.ball_local_y = data_from_cm4[RX_BUF_SIZE_ETHER - 5] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 4];
 8003b00:	f8b6 203b 	ldrh.w	r2, [r6, #59]	; 0x3b
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003b04:	63a3      	str	r3, [r4, #56]	; 0x38
  ai_cmd.ball_local_radius = data_from_cm4[RX_BUF_SIZE_ETHER - 3] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 2];
 8003b06:	f8b6 303d 	ldrh.w	r3, [r6, #61]	; 0x3d
  ai_cmd.ball_local_FPS = data_from_cm4[RX_BUF_SIZE_ETHER - 1];

  // time out
  if (connection.connected_ai == 0) {
 8003b0a:	f895 8000 	ldrb.w	r8, [r5]
  ai_cmd.ball_local_y = data_from_cm4[RX_BUF_SIZE_ETHER - 5] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 4];
 8003b0e:	ba52      	rev16	r2, r2
  ai_cmd.ball_local_radius = data_from_cm4[RX_BUF_SIZE_ETHER - 3] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 2];
 8003b10:	ba5b      	rev16	r3, r3
 8003b12:	b29b      	uxth	r3, r3
  ai_cmd.ball_local_y = data_from_cm4[RX_BUF_SIZE_ETHER - 5] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 4];
 8003b14:	b292      	uxth	r2, r2
  ai_cmd.ball_local_radius = data_from_cm4[RX_BUF_SIZE_ETHER - 3] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 2];
 8003b16:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ai_cmd.ball_local_FPS = data_from_cm4[RX_BUF_SIZE_ETHER - 1];
 8003b1a:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
 8003b1e:	6463      	str	r3, [r4, #68]	; 0x44
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003b20:	ed85 7a01 	vstr	s14, [r5, #4]
  if (connection.connected_ai == 0) {
 8003b24:	f1b8 0f00 	cmp.w	r8, #0
 8003b28:	f000 80e6 	beq.w	8003cf8 <parseRxCmd+0x248>
    resetAiCmdData();
    return;
  }

  ai_cmd.local_target_speed[0] = two_to_float(&data_from_cm4[2]) * AI_CMD_VEL_MAX_MPS;
 8003b2c:	4887      	ldr	r0, [pc, #540]	; (8003d4c <parseRxCmd+0x29c>)
 8003b2e:	f002 f93b 	bl	8005da8 <two_to_float>
 8003b32:	eeb1 8a0c 	vmov.f32	s16, #28	; 0x40e00000  7.0
 8003b36:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_cm4[4]) * AI_CMD_VEL_MAX_MPS;
 8003b3a:	4885      	ldr	r0, [pc, #532]	; (8003d50 <parseRxCmd+0x2a0>)
  ai_cmd.local_target_speed[0] = two_to_float(&data_from_cm4[2]) * AI_CMD_VEL_MAX_MPS;
 8003b3c:	ed84 0a05 	vstr	s0, [r4, #20]
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_cm4[4]) * AI_CMD_VEL_MAX_MPS;
 8003b40:	f002 f932 	bl	8005da8 <two_to_float>
 8003b44:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_vision_theta = two_to_float(&data_from_cm4[6]) * M_PI;
 8003b48:	4882      	ldr	r0, [pc, #520]	; (8003d54 <parseRxCmd+0x2a4>)
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_cm4[4]) * AI_CMD_VEL_MAX_MPS;
 8003b4a:	ed84 0a06 	vstr	s0, [r4, #24]
  ai_cmd.global_vision_theta = two_to_float(&data_from_cm4[6]) * M_PI;
 8003b4e:	f002 f92b 	bl	8005da8 <two_to_float>
 8003b52:	ee10 0a10 	vmov	r0, s0
 8003b56:	f7fc fd1f 	bl	8000598 <__aeabi_f2d>
 8003b5a:	a375      	add	r3, pc, #468	; (adr r3, 8003d30 <parseRxCmd+0x280>)
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f7fc fd72 	bl	8000648 <__aeabi_dmul>
 8003b64:	f7fd f868 	bl	8000c38 <__aeabi_d2f>
 8003b68:	6060      	str	r0, [r4, #4]
  ai_cmd.target_theta = two_to_float(&data_from_cm4[8]) * M_PI;
 8003b6a:	487b      	ldr	r0, [pc, #492]	; (8003d58 <parseRxCmd+0x2a8>)
 8003b6c:	f002 f91c 	bl	8005da8 <two_to_float>
 8003b70:	ee10 0a10 	vmov	r0, s0
 8003b74:	f7fc fd10 	bl	8000598 <__aeabi_f2d>
 8003b78:	a36d      	add	r3, pc, #436	; (adr r3, 8003d30 <parseRxCmd+0x280>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f7fc fd63 	bl	8000648 <__aeabi_dmul>
 8003b82:	f7fd f859 	bl	8000c38 <__aeabi_d2f>
  if (data_from_cm4[10] >= 101) {
 8003b86:	7ab3      	ldrb	r3, [r6, #10]
  ai_cmd.target_theta = two_to_float(&data_from_cm4[8]) * M_PI;
 8003b88:	6020      	str	r0, [r4, #0]
  if (data_from_cm4[10] >= 101) {
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	f200 809c 	bhi.w	8003cc8 <parseRxCmd+0x218>
    ai_cmd.chip_en = true;
    ai_cmd.kick_power = (float)(data_from_cm4[10] - 101) / 20;
  } else {
    ai_cmd.kick_power = (float)data_from_cm4[10] / 20;
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003d5c <parseRxCmd+0x2ac>
 8003b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ai_cmd.chip_en = false;
 8003b9c:	f04f 0800 	mov.w	r8, #0
    ai_cmd.kick_power = (float)data_from_cm4[10] / 20;
 8003ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003ba4:	7af3      	ldrb	r3, [r6, #11]
 8003ba6:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8003d5c <parseRxCmd+0x2ac>

  ai_cmd.allow_local_flags = data_from_cm4[12];

  // integとai_cmdで分けてるだけで同じ情報の now と pre
  integ.pre_global_target_position[0] = ai_cmd.global_target_position[0];
 8003baa:	4f6d      	ldr	r7, [pc, #436]	; (8003d60 <parseRxCmd+0x2b0>)
  ai_cmd.allow_local_flags = data_from_cm4[12];
 8003bac:	7b32      	ldrb	r2, [r6, #12]
  integ.pre_global_target_position[1] = ai_cmd.global_target_position[1];

  // <int>[mm] -> <float>[m]
  ai_cmd.global_ball_position[0] = (float)two_to_int(&data_from_cm4[13]) / 1000;
 8003bae:	486d      	ldr	r0, [pc, #436]	; (8003d64 <parseRxCmd+0x2b4>)
 8003bb0:	edc4 7a03 	vstr	s15, [r4, #12]
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003bb4:	ee07 3a10 	vmov	s14, r3
 8003bb8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  integ.pre_global_target_position[0] = ai_cmd.global_target_position[0];
 8003bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bbe:	623b      	str	r3, [r7, #32]
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003bc0:	ee27 7a26 	vmul.f32	s14, s14, s13
  integ.pre_global_target_position[1] = ai_cmd.global_target_position[1];
 8003bc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003bc6:	ed84 7a02 	vstr	s14, [r4, #8]
  ai_cmd.allow_local_flags = data_from_cm4[12];
 8003bca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  integ.pre_global_target_position[1] = ai_cmd.global_target_position[1];
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd0:	f884 8010 	strb.w	r8, [r4, #16]
  ai_cmd.global_ball_position[0] = (float)two_to_int(&data_from_cm4[13]) / 1000;
 8003bd4:	f002 f90c 	bl	8005df0 <two_to_int>
 8003bd8:	ed9f 8a63 	vldr	s16, [pc, #396]	; 8003d68 <parseRxCmd+0x2b8>
  ai_cmd.global_ball_position[1] = (float)two_to_int(&data_from_cm4[15]) / 1000;
 8003bdc:	4863      	ldr	r0, [pc, #396]	; (8003d6c <parseRxCmd+0x2bc>)
  ai_cmd.global_ball_position[0] = (float)two_to_int(&data_from_cm4[13]) / 1000;
 8003bde:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003be2:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = (float)two_to_int(&data_from_cm4[15]) / 1000;
 8003be6:	f002 f903 	bl	8005df0 <two_to_int>
 8003bea:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_robot_position[0] = (float)two_to_int(&data_from_cm4[17]) / 1000;
 8003bee:	4860      	ldr	r0, [pc, #384]	; (8003d70 <parseRxCmd+0x2c0>)
  ai_cmd.global_ball_position[1] = (float)two_to_int(&data_from_cm4[15]) / 1000;
 8003bf0:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  ai_cmd.global_robot_position[0] = (float)two_to_int(&data_from_cm4[17]) / 1000;
 8003bf4:	f002 f8fc 	bl	8005df0 <two_to_int>
 8003bf8:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_robot_position[1] = (float)two_to_int(&data_from_cm4[19]) / 1000;
 8003bfc:	485d      	ldr	r0, [pc, #372]	; (8003d74 <parseRxCmd+0x2c4>)
  ai_cmd.global_robot_position[0] = (float)two_to_int(&data_from_cm4[17]) / 1000;
 8003bfe:	ed84 0a07 	vstr	s0, [r4, #28]
  ai_cmd.global_robot_position[1] = (float)two_to_int(&data_from_cm4[19]) / 1000;
 8003c02:	f002 f8f5 	bl	8005df0 <two_to_int>
 8003c06:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_target_position[0] = (float)two_to_int(&data_from_cm4[21]) / 1000;
 8003c0a:	485b      	ldr	r0, [pc, #364]	; (8003d78 <parseRxCmd+0x2c8>)
  ai_cmd.global_robot_position[1] = (float)two_to_int(&data_from_cm4[19]) / 1000;
 8003c0c:	ed84 0a08 	vstr	s0, [r4, #32]
  ai_cmd.global_target_position[0] = (float)two_to_int(&data_from_cm4[21]) / 1000;
 8003c10:	f002 f8ee 	bl	8005df0 <two_to_int>
 8003c14:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003c18:	4858      	ldr	r0, [pc, #352]	; (8003d7c <parseRxCmd+0x2cc>)
  ai_cmd.global_target_position[0] = (float)two_to_int(&data_from_cm4[21]) / 1000;
 8003c1a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003c1e:	f002 f8e7 	bl	8005df0 <two_to_int>

  // 値がおかしい時は0にする (+-30を超えることはない)
  for (int i = 0; i < 2; i++) {
    if (ai_cmd.global_target_position[i] > 30.0 || ai_cmd.global_target_position[i] < -30) {
 8003c22:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8003c26:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003c2a:	ee20 8a08 	vmul.f32	s16, s0, s16
    if (ai_cmd.global_target_position[i] > 30.0 || ai_cmd.global_target_position[i] < -30) {
 8003c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003c36:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
    if (ai_cmd.global_target_position[i] > 30.0 || ai_cmd.global_target_position[i] < -30) {
 8003c3a:	dc56      	bgt.n	8003cea <parseRxCmd+0x23a>
 8003c3c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	d44f      	bmi.n	8003cea <parseRxCmd+0x23a>
 8003c4a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003d80 <parseRxCmd+0x2d0>
 8003c4e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c56:	dc41      	bgt.n	8003cdc <parseRxCmd+0x22c>
 8003c58:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003d84 <parseRxCmd+0x2d4>
 8003c5c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c64:	d43a      	bmi.n	8003cdc <parseRxCmd+0x22c>
    ai_cmd.dribbler_up_flag = false;
  }

  // 目標座標の移動量と更新時間から推測される区間速度
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003c66:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003c6a:	ed95 7a03 	vldr	s14, [r5, #12]
 8003c6e:	ed97 6a08 	vldr	s12, [r7, #32]
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8003c72:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003c76:	ee38 8a66 	vsub.f32	s16, s16, s13
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003c7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c7e:	ee77 7ac6 	vsub.f32	s15, s15, s12
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8003c82:	43d9      	mvns	r1, r3
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003c84:	eec7 6a87 	vdiv.f32	s13, s15, s14
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8003c88:	f001 0101 	and.w	r1, r1, #1
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f361 0207 	bfi	r2, r1, #0, #8
  if ((ai_cmd.allow_local_flags & FLAG_ENABLE_LOCAL_VISION) != 0) {
 8003c92:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8003c96:	f361 220f 	bfi	r2, r1, #8, #8
  if ((ai_cmd.allow_local_flags & FLAG_ENABLE_KEEPER_MODE) != 0) {
 8003c9a:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8003c9e:	f361 4217 	bfi	r2, r1, #16, #8
  if ((ai_cmd.allow_local_flags & FLAG_STOP_REQUEST) != 0) {
 8003ca2:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003ca6:	f361 621f 	bfi	r2, r1, #24, #8
  if ((ai_cmd.allow_local_flags & FLAG_DRIBBLER_UP) != 0) {
 8003caa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003cae:	64a2      	str	r2, [r4, #72]	; 0x48
 8003cb0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003cb4:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8003cb8:	ecbd 8b02 	vpop	{d8}
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003cbc:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003cc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
}
 8003cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ai_cmd.kick_power = (float)(data_from_cm4[10] - 101) / 20;
 8003cc8:	3b65      	subs	r3, #101	; 0x65
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003d5c <parseRxCmd+0x2ac>
 8003cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cda:	e763      	b.n	8003ba4 <parseRxCmd+0xf4>
      ai_cmd.global_target_position[i] = 0;
 8003cdc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003d88 <parseRxCmd+0x2d8>
 8003ce0:	eeb0 8a47 	vmov.f32	s16, s14
 8003ce4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8003ce8:	e7bd      	b.n	8003c66 <parseRxCmd+0x1b6>
 8003cea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003d88 <parseRxCmd+0x2d8>
 8003cee:	eef0 7a47 	vmov.f32	s15, s14
 8003cf2:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8003cf6:	e7a8      	b.n	8003c4a <parseRxCmd+0x19a>
}
 8003cf8:	ecbd 8b02 	vpop	{d8}
  ai_cmd.local_target_speed[0] = 0;
 8003cfc:	2300      	movs	r3, #0
  ai_cmd.vision_lost_flag = true;
 8003cfe:	2201      	movs	r2, #1
  ai_cmd.local_target_speed[0] = 0;
 8003d00:	6163      	str	r3, [r4, #20]
  ai_cmd.local_target_speed[1] = 0;
 8003d02:	61a3      	str	r3, [r4, #24]
  ai_cmd.global_vision_theta = 0;
 8003d04:	6063      	str	r3, [r4, #4]
  ai_cmd.target_theta = 0;
 8003d06:	6023      	str	r3, [r4, #0]
  ai_cmd.chip_en = false;
 8003d08:	f884 8010 	strb.w	r8, [r4, #16]
  ai_cmd.kick_power = 0;
 8003d0c:	60e3      	str	r3, [r4, #12]
  ai_cmd.drible_power = 0;
 8003d0e:	60a3      	str	r3, [r4, #8]
  ai_cmd.allow_local_flags = 0;
 8003d10:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
  ai_cmd.global_ball_position[0] = 0;
 8003d14:	62e3      	str	r3, [r4, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = 0;
 8003d16:	6323      	str	r3, [r4, #48]	; 0x30
  ai_cmd.global_robot_position[0] = 0;
 8003d18:	61e3      	str	r3, [r4, #28]
  ai_cmd.global_robot_position[1] = 0;
 8003d1a:	6223      	str	r3, [r4, #32]
  ai_cmd.global_target_position[0] = 0;
 8003d1c:	6263      	str	r3, [r4, #36]	; 0x24
  ai_cmd.global_target_position[1] = 0;
 8003d1e:	62a3      	str	r3, [r4, #40]	; 0x28
  ai_cmd.vision_lost_flag = true;
 8003d20:	64a2      	str	r2, [r4, #72]	; 0x48
}
 8003d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connection.latest_ai_cmd_update_time = sys.system_time_ms;
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <parseRxCmd+0x290>)
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	e6d5      	b.n	8003ad8 <parseRxCmd+0x28>
 8003d2c:	f3af 8000 	nop.w
 8003d30:	54442d18 	.word	0x54442d18
 8003d34:	400921fb 	.word	0x400921fb
 8003d38:	20000704 	.word	0x20000704
 8003d3c:	2000071c 	.word	0x2000071c
 8003d40:	20000ad4 	.word	0x20000ad4
 8003d44:	447a0000 	.word	0x447a0000
 8003d48:	20000620 	.word	0x20000620
 8003d4c:	2000071e 	.word	0x2000071e
 8003d50:	20000720 	.word	0x20000720
 8003d54:	20000722 	.word	0x20000722
 8003d58:	20000724 	.word	0x20000724
 8003d5c:	3d4ccccd 	.word	0x3d4ccccd
 8003d60:	200007b0 	.word	0x200007b0
 8003d64:	20000729 	.word	0x20000729
 8003d68:	3a83126f 	.word	0x3a83126f
 8003d6c:	2000072b 	.word	0x2000072b
 8003d70:	2000072d 	.word	0x2000072d
 8003d74:	2000072f 	.word	0x2000072f
 8003d78:	20000731 	.word	0x20000731
 8003d7c:	20000733 	.word	0x20000733
 8003d80:	46ea5fff 	.word	0x46ea5fff
 8003d84:	c6ea5fff 	.word	0xc6ea5fff
 8003d88:	00000000 	.word	0x00000000

08003d8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8003d8c:	b538      	push	{r3, r4, r5, lr}
  static int32_t uart_rx_cmd_idx = 0;
  uint8_t rx_data_tmp;

  if (huart->Instance == USART2) {
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_UART_RxCpltCallback+0x78>)
 8003d90:	6803      	ldr	r3, [r0, #0]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_UART_RxCpltCallback+0x14>
      parseRxCmd();
      sendRobotInfo();
    }
  }

  if (huart->Instance == hlpuart1.Instance) {
 8003d96:	481c      	ldr	r0, [pc, #112]	; (8003e08 <HAL_UART_RxCpltCallback+0x7c>)
 8003d98:	6802      	ldr	r2, [r0, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d01d      	beq.n	8003dda <HAL_UART_RxCpltCallback+0x4e>
    debug.print_idx++;
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
  }
}
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
    rx_data_tmp = uart2_rx_it_buffer;
 8003da0:	491a      	ldr	r1, [pc, #104]	; (8003e0c <HAL_UART_RxCpltCallback+0x80>)
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8003da2:	2201      	movs	r2, #1
 8003da4:	4604      	mov	r4, r0
 8003da6:	481a      	ldr	r0, [pc, #104]	; (8003e10 <HAL_UART_RxCpltCallback+0x84>)
    rx_data_tmp = uart2_rx_it_buffer;
 8003da8:	780d      	ldrb	r5, [r1, #0]
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8003daa:	f005 fc09 	bl	80095c0 <HAL_UART_Receive_IT>
    if (uart_rx_cmd_idx >= 0 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 8003dae:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_UART_RxCpltCallback+0x88>)
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	2b3f      	cmp	r3, #63	; 0x3f
 8003db4:	d81b      	bhi.n	8003dee <HAL_UART_RxCpltCallback+0x62>
      data_from_cm4[uart_rx_cmd_idx] = rx_data_tmp;
 8003db6:	4918      	ldr	r1, [pc, #96]	; (8003e18 <HAL_UART_RxCpltCallback+0x8c>)
 8003db8:	54cd      	strb	r5, [r1, r3]
      uart_rx_cmd_idx++;
 8003dba:	3301      	adds	r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
    if (uart_rx_cmd_idx == RX_BUF_SIZE_ETHER) {
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_RxCpltCallback+0x44>
      uart_rx_cmd_idx = -1;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	6013      	str	r3, [r2, #0]
      parseRxCmd();
 8003dc8:	f7ff fe72 	bl	8003ab0 <parseRxCmd>
      sendRobotInfo();
 8003dcc:	f7ff fe0a 	bl	80039e4 <sendRobotInfo>
  if (huart->Instance == hlpuart1.Instance) {
 8003dd0:	480d      	ldr	r0, [pc, #52]	; (8003e08 <HAL_UART_RxCpltCallback+0x7c>)
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	6802      	ldr	r2, [r0, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d1e1      	bne.n	8003d9e <HAL_UART_RxCpltCallback+0x12>
    debug.print_idx++;
 8003dda:	4c10      	ldr	r4, [pc, #64]	; (8003e1c <HAL_UART_RxCpltCallback+0x90>)
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 8003ddc:	4910      	ldr	r1, [pc, #64]	; (8003e20 <HAL_UART_RxCpltCallback+0x94>)
    debug.print_idx++;
 8003dde:	6823      	ldr	r3, [r4, #0]
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 8003de0:	2201      	movs	r2, #1
    debug.print_idx++;
 8003de2:	4413      	add	r3, r2
 8003de4:	6023      	str	r3, [r4, #0]
}
 8003de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 8003dea:	f005 bbe9 	b.w	80095c0 <HAL_UART_Receive_IT>
    if (uart_rx_cmd_idx == -1 && rx_data_tmp == 254) {
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	d104      	bne.n	8003dfc <HAL_UART_RxCpltCallback+0x70>
 8003df2:	2dfe      	cmp	r5, #254	; 0xfe
      uart_rx_cmd_idx++;
 8003df4:	bf04      	itt	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	6013      	streq	r3, [r2, #0]
    if (uart_rx_cmd_idx == RX_BUF_SIZE_ETHER) {
 8003dfa:	e7e9      	b.n	8003dd0 <HAL_UART_RxCpltCallback+0x44>
    if (uart_rx_cmd_idx != -1 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 8003dfc:	2b3f      	cmp	r3, #63	; 0x3f
 8003dfe:	dcde      	bgt.n	8003dbe <HAL_UART_RxCpltCallback+0x32>
      uart_rx_cmd_idx++;
 8003e00:	3301      	adds	r3, #1
 8003e02:	e7db      	b.n	8003dbc <HAL_UART_RxCpltCallback+0x30>
 8003e04:	40004400 	.word	0x40004400
 8003e08:	20000da8 	.word	0x20000da8
 8003e0c:	20000b1c 	.word	0x20000b1c
 8003e10:	20000e38 	.word	0x20000e38
 8003e14:	20000b20 	.word	0x20000b20
 8003e18:	2000071c 	.word	0x2000071c
 8003e1c:	2000075c 	.word	0x2000075c
 8003e20:	200007f2 	.word	0x200007f2

08003e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e24:	b508      	push	{r3, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003e26:	ed9f 8a14 	vldr	s16, [pc, #80]	; 8003e78 <Error_Handler+0x54>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1) {
    maintask_stop(255, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003e2a:	4c14      	ldr	r4, [pc, #80]	; (8003e7c <Error_Handler+0x58>)
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003e2c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003e78 <Error_Handler+0x54>
 8003e30:	eef0 1a48 	vmov.f32	s3, s16
 8003e34:	eeb0 0a41 	vmov.f32	s0, s2
 8003e38:	eef0 0a41 	vmov.f32	s1, s2
 8003e3c:	f001 f9a8 	bl	8005190 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003e40:	eef0 0a48 	vmov.f32	s1, s16
 8003e44:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003e78 <Error_Handler+0x54>
 8003e48:	f7fd f944 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fd f994 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003e54:	eeb0 0a48 	vmov.f32	s0, s16
 8003e58:	f7fd f980 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003e5c:	f7fd f96c 	bl	8001138 <actuator_dribbler_down>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003e60:	4620      	mov	r0, r4
 8003e62:	2201      	movs	r2, #1
 8003e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e68:	f003 fcfe 	bl	8007868 <HAL_GPIO_WritePin>
    actuator_buzzer(200, 200);
 8003e6c:	21c8      	movs	r1, #200	; 0xc8
 8003e6e:	4608      	mov	r0, r1
 8003e70:	f7fd f9be 	bl	80011f0 <actuator_buzzer>
  while (1) {
 8003e74:	e7da      	b.n	8003e2c <Error_Handler+0x8>
 8003e76:	bf00      	nop
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	48000400 	.word	0x48000400

08003e80 <SystemClock_Config>:
{
 8003e80:	b510      	push	{r4, lr}
 8003e82:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e84:	2238      	movs	r2, #56	; 0x38
 8003e86:	2100      	movs	r1, #0
 8003e88:	a806      	add	r0, sp, #24
 8003e8a:	f007 fd5d 	bl	800b948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e8e:	2000      	movs	r0, #0
 8003e90:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8003e94:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003e98:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003e9a:	f003 fcf5 	bl	8007888 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ea4:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ea6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003eaa:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003eac:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003eae:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003eb0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003eb4:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003eb8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ebc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ebe:	f003 fd61 	bl	8007984 <HAL_RCC_OscConfig>
 8003ec2:	b970      	cbnz	r0, 8003ee2 <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ec8:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003eca:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ece:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ed2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ed6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003ed8:	f003 ffd8 	bl	8007e8c <HAL_RCC_ClockConfig>
 8003edc:	b908      	cbnz	r0, 8003ee2 <SystemClock_Config+0x62>
}
 8003ede:	b014      	add	sp, #80	; 0x50
 8003ee0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ee2:	f7ff ff9f 	bl	8003e24 <Error_Handler>
 8003ee6:	bf00      	nop

08003ee8 <main>:
{
 8003ee8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003eec:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8003eee:	f001 ffe3 	bl	8005eb8 <HAL_Init>
  SystemClock_Config();
 8003ef2:	f7ff ffc5 	bl	8003e80 <SystemClock_Config>
  MX_GPIO_Init();
 8003ef6:	f7fd fe81 	bl	8001bfc <MX_GPIO_Init>
  MX_DMA_Init();
 8003efa:	f7fd fd21 	bl	8001940 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003efe:	f7fd fd71 	bl	80019e4 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8003f02:	f001 fc1d 	bl	8005740 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8003f06:	f001 fc69 	bl	80057dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003f0a:	f001 fcaf 	bl	800586c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003f0e:	f001 fa1b 	bl	8005348 <MX_SPI1_Init>
  MX_TIM5_Init();
 8003f12:	f001 fb45 	bl	80055a0 <MX_TIM5_Init>
  MX_TIM7_Init();
 8003f16:	f001 fbb1 	bl	800567c <MX_TIM7_Init>
  MX_ADC5_Init();
 8003f1a:	f7fd fa6f 	bl	80013fc <MX_ADC5_Init>
  MX_ADC3_Init();
 8003f1e:	f7fd fa15 	bl	800134c <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8003f22:	f7fd fd85 	bl	8001a30 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8003f26:	f7fd f9bb 	bl	80012a0 <MX_ADC1_Init>
  integ.odom_log[0] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f2e:	f001 f9a9 	bl	8005284 <initRingBuffer>
 8003f32:	4cd1      	ldr	r4, [pc, #836]	; (8004278 <main+0x390>)
  ai_cmd.latency_time_ms = 100;
 8003f34:	4ed1      	ldr	r6, [pc, #836]	; (800427c <main+0x394>)
  setbuf(stdin, NULL);
 8003f36:	4dd2      	ldr	r5, [pc, #840]	; (8004280 <main+0x398>)
  integ.odom_log[0] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003f38:	4603      	mov	r3, r0
 8003f3a:	6023      	str	r3, [r4, #0]
  integ.odom_log[1] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f40:	f001 f9a0 	bl	8005284 <initRingBuffer>
  kick_state = 0;
 8003f44:	4bcf      	ldr	r3, [pc, #828]	; (8004284 <main+0x39c>)
  integ.odom_log[1] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003f46:	6060      	str	r0, [r4, #4]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003f48:	2104      	movs	r1, #4
  kick_state = 0;
 8003f4a:	2400      	movs	r4, #0
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003f4c:	48ce      	ldr	r0, [pc, #824]	; (8004288 <main+0x3a0>)
  kick_state = 0;
 8003f4e:	801c      	strh	r4, [r3, #0]
  ai_cmd.latency_time_ms = 100;
 8003f50:	2764      	movs	r7, #100	; 0x64
 8003f52:	6537      	str	r7, [r6, #80]	; 0x50
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003f54:	f004 ffba 	bl	8008ecc <HAL_TIM_PWM_Start>
  actuator_buzzer_frq(1046, 50);  //C5
 8003f58:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800428c <main+0x3a4>
 8003f5c:	2032      	movs	r0, #50	; 0x32
 8003f5e:	f7fd f96b 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 8003f62:	ed9f 0acb 	vldr	s0, [pc, #812]	; 8004290 <main+0x3a8>
 8003f66:	2032      	movs	r0, #50	; 0x32
 8003f68:	f7fd f966 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1318, 50);  //E5
 8003f6c:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 8004294 <main+0x3ac>
 8003f70:	2032      	movs	r0, #50	; 0x32
 8003f72:	f7fd f961 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1396, 50);  //F5
 8003f76:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8004298 <main+0x3b0>
 8003f7a:	2032      	movs	r0, #50	; 0x32
 8003f7c:	f7fd f95c 	bl	8001238 <actuator_buzzer_frq>
  setbuf(stdin, NULL);
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	4621      	mov	r1, r4
 8003f84:	6858      	ldr	r0, [r3, #4]
 8003f86:	f007 fb2f 	bl	800b5e8 <setbuf>
  setbuf(stdout, NULL);
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	6898      	ldr	r0, [r3, #8]
 8003f90:	f007 fb2a 	bl	800b5e8 <setbuf>
  setbuf(stderr, NULL);
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	4621      	mov	r1, r4
 8003f98:	68d8      	ldr	r0, [r3, #12]
 8003f9a:	f007 fb25 	bl	800b5e8 <setbuf>
  HAL_UART_Init(&hlpuart1);
 8003f9e:	48bf      	ldr	r0, [pc, #764]	; (800429c <main+0x3b4>)
 8003fa0:	f006 fbd6 	bl	800a750 <HAL_UART_Init>
  HAL_UART_Init(&huart2);
 8003fa4:	48be      	ldr	r0, [pc, #760]	; (80042a0 <main+0x3b8>)
 8003fa6:	f006 fbd3 	bl	800a750 <HAL_UART_Init>
  printf("start\r\n");
 8003faa:	48be      	ldr	r0, [pc, #760]	; (80042a4 <main+0x3bc>)
 8003fac:	f007 fb14 	bl	800b5d8 <puts>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8003fb0:	49bd      	ldr	r1, [pc, #756]	; (80042a8 <main+0x3c0>)
 8003fb2:	48bb      	ldr	r0, [pc, #748]	; (80042a0 <main+0x3b8>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f005 fb03 	bl	80095c0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 8003fba:	49bc      	ldr	r1, [pc, #752]	; (80042ac <main+0x3c4>)
 8003fbc:	48b7      	ldr	r0, [pc, #732]	; (800429c <main+0x3b4>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f005 fafe 	bl	80095c0 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc5, &adc_sw_data, 1);
 8003fc4:	49ba      	ldr	r1, [pc, #744]	; (80042b0 <main+0x3c8>)
 8003fc6:	48bb      	ldr	r0, [pc, #748]	; (80042b4 <main+0x3cc>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f002 fbe1 	bl	8006790 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003fce:	48ba      	ldr	r0, [pc, #744]	; (80042b8 <main+0x3d0>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fd6:	f003 fc47 	bl	8007868 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003fda:	2201      	movs	r2, #1
 8003fdc:	4611      	mov	r1, r2
 8003fde:	48b6      	ldr	r0, [pc, #728]	; (80042b8 <main+0x3d0>)
 8003fe0:	f003 fc42 	bl	8007868 <HAL_GPIO_WritePin>
  ICM20602_init();
 8003fe4:	f7fd fea6 	bl	8001d34 <ICM20602_init>
  ICM20602_init();
 8003fe8:	f7fd fea4 	bl	8001d34 <ICM20602_init>
  ICM20602_IMU_calibration2();
 8003fec:	f7fe f9ec 	bl	80023c8 <ICM20602_IMU_calibration2>
  ICM20602_clearAngle();
 8003ff0:	f7fd ff96 	bl	8001f20 <ICM20602_clearAngle>
  printf("\n\rcomplete imu init\r\n");
 8003ff4:	48b1      	ldr	r0, [pc, #708]	; (80042bc <main+0x3d4>)
 8003ff6:	f007 faef 	bl	800b5d8 <puts>
  can1_init_ibis(&hfdcan1);
 8003ffa:	48b1      	ldr	r0, [pc, #708]	; (80042c0 <main+0x3d8>)
 8003ffc:	f7fd fb30 	bl	8001660 <can1_init_ibis>
  can2_init_ibis(&hfdcan2);
 8004000:	48b0      	ldr	r0, [pc, #704]	; (80042c4 <main+0x3dc>)
 8004002:	f7fd fb7d 	bl	8001700 <can2_init_ibis>
  printf("\n\rstart can1\r\n");
 8004006:	48b0      	ldr	r0, [pc, #704]	; (80042c8 <main+0x3e0>)
 8004008:	f007 fae6 	bl	800b5d8 <puts>
  HAL_FDCAN_Start(&hfdcan1);
 800400c:	48ac      	ldr	r0, [pc, #688]	; (80042c0 <main+0x3d8>)
 800400e:	f003 f8d7 	bl	80071c0 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8004012:	48ab      	ldr	r0, [pc, #684]	; (80042c0 <main+0x3d8>)
 8004014:	4622      	mov	r2, r4
 8004016:	2101      	movs	r1, #1
 8004018:	f003 f9da 	bl	80073d0 <HAL_FDCAN_ActivateNotification>
 800401c:	2800      	cmp	r0, #0
 800401e:	f040 8122 	bne.w	8004266 <main+0x37e>
  printf("\n\rstart can2\r\n");
 8004022:	4604      	mov	r4, r0
 8004024:	48a9      	ldr	r0, [pc, #676]	; (80042cc <main+0x3e4>)
 8004026:	f007 fad7 	bl	800b5d8 <puts>
  HAL_FDCAN_Start(&hfdcan2);
 800402a:	48a6      	ldr	r0, [pc, #664]	; (80042c4 <main+0x3dc>)
 800402c:	f003 f8c8 	bl	80071c0 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8004030:	4622      	mov	r2, r4
 8004032:	48a4      	ldr	r0, [pc, #656]	; (80042c4 <main+0x3dc>)
 8004034:	2101      	movs	r1, #1
 8004036:	f003 f9cb 	bl	80073d0 <HAL_FDCAN_ActivateNotification>
 800403a:	4604      	mov	r4, r0
 800403c:	2800      	cmp	r0, #0
 800403e:	f040 8112 	bne.w	8004266 <main+0x37e>
  actuator_power_ONOFF(0);
 8004042:	f7fd f8b1 	bl	80011a8 <actuator_power_ONOFF>
  HAL_Delay(20);
 8004046:	2014      	movs	r0, #20
 8004048:	f001 ff52 	bl	8005ef0 <HAL_Delay>
  actuator_motor1(0.0, 0.0);
 800404c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80042d0 <main+0x3e8>
  sys.system_time_ms = 0;
 8004050:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8004300 <main+0x418>
      if (fabs(debug.true_yaw_speed - debug.true_fb_toral_spin) > 100 && fabs(ai_cmd.target_theta - imu.yaw_angle) > 5) {
 8004054:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 80042d4 <main+0x3ec>
          p("TPx %+4.1f TPy %+4.1f TW %+6.1f ", ai_cmd.global_target_position[0], ai_cmd.global_target_position[1], ai_cmd.target_theta * 180 / M_PI);
 8004058:	eddf 8a9f 	vldr	s17, [pc, #636]	; 80042d8 <main+0x3f0>
 800405c:	4d9f      	ldr	r5, [pc, #636]	; (80042dc <main+0x3f4>)
 800405e:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8004304 <main+0x41c>
 8004062:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8004308 <main+0x420>
 8004066:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 800430c <main+0x424>
  actuator_motor1(0.0, 0.0);
 800406a:	eeb0 0a60 	vmov.f32	s0, s1
 800406e:	f7fc ffb1 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 8004072:	eddf 0a97 	vldr	s1, [pc, #604]	; 80042d0 <main+0x3e8>
 8004076:	eeb0 0a60 	vmov.f32	s0, s1
 800407a:	f7fc ffcb 	bl	8001014 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 800407e:	eddf 0a94 	vldr	s1, [pc, #592]	; 80042d0 <main+0x3e8>
 8004082:	eeb0 0a60 	vmov.f32	s0, s1
 8004086:	f7fc ffe5 	bl	8001054 <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 800408a:	eddf 0a91 	vldr	s1, [pc, #580]	; 80042d0 <main+0x3e8>
 800408e:	eeb0 0a60 	vmov.f32	s0, s1
 8004092:	f7fc ffff 	bl	8001094 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 8004096:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80042d0 <main+0x3e8>
 800409a:	eeb0 0a60 	vmov.f32	s0, s1
 800409e:	f7fd f819 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 1);
 80040a2:	2101      	movs	r1, #1
 80040a4:	4608      	mov	r0, r1
 80040a6:	f7fd f869 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 80040aa:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80042d0 <main+0x3e8>
 80040ae:	f7fd f855 	bl	800115c <actuator_kicker_voltage>
  actuator_power_param(1, 15.0);  // min voltage
 80040b2:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80040b6:	2001      	movs	r0, #1
 80040b8:	f7fd f88a 	bl	80011d0 <actuator_power_param>
  actuator_power_param(2, 35.0);  // max voltage
 80040bc:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80042e0 <main+0x3f8>
 80040c0:	2002      	movs	r0, #2
 80040c2:	f7fd f885 	bl	80011d0 <actuator_power_param>
  actuator_power_param(3, 50.0);  // max can_raw.current
 80040c6:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80042e4 <main+0x3fc>
 80040ca:	2003      	movs	r0, #3
 80040cc:	f7fd f880 	bl	80011d0 <actuator_power_param>
  actuator_power_param(4, 90.0);  // max temp(fet)
 80040d0:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80042e8 <main+0x400>
 80040d4:	2004      	movs	r0, #4
 80040d6:	f7fd f87b 	bl	80011d0 <actuator_power_param>
  actuator_power_param(5, 90.0);  // max temp(solenoid)
 80040da:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80042e8 <main+0x400>
 80040de:	2005      	movs	r0, #5
 80040e0:	f7fd f876 	bl	80011d0 <actuator_power_param>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80040e4:	4622      	mov	r2, r4
 80040e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040ea:	4873      	ldr	r0, [pc, #460]	; (80042b8 <main+0x3d0>)
 80040ec:	f003 fbbc 	bl	8007868 <HAL_GPIO_WritePin>
  actuator_power_ONOFF(1);
 80040f0:	2001      	movs	r0, #1
 80040f2:	f7fd f859 	bl	80011a8 <actuator_power_ONOFF>
  actuator_buzzer_frq(1046, 50);  //C5
 80040f6:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800428c <main+0x3a4>
 80040fa:	2032      	movs	r0, #50	; 0x32
 80040fc:	f7fd f89c 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 8004100:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8004290 <main+0x3a8>
 8004104:	2032      	movs	r0, #50	; 0x32
 8004106:	f7fd f897 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1046, 50);  //C5
 800410a:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800428c <main+0x3a4>
 800410e:	2032      	movs	r0, #50	; 0x32
 8004110:	f7fd f892 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 8004114:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8004290 <main+0x3a8>
 8004118:	2032      	movs	r0, #50	; 0x32
 800411a:	f7fd f88d 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1318, 50);  //E5
 800411e:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8004294 <main+0x3ac>
 8004122:	2032      	movs	r0, #50	; 0x32
 8004124:	f7fd f888 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1396, 50);  //F5
 8004128:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8004298 <main+0x3b0>
 800412c:	2032      	movs	r0, #50	; 0x32
 800412e:	f7fd f883 	bl	8001238 <actuator_buzzer_frq>
  actuator_power_ONOFF(1);
 8004132:	2001      	movs	r0, #1
 8004134:	f7fd f838 	bl	80011a8 <actuator_power_ONOFF>
  sys.stop_flag_request_time = 1000;  // !!注意!! TIM7の割り込みがはじまってから1000ms間停止
 8004138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  HAL_Delay(100);
 800413c:	4638      	mov	r0, r7
  sys.stop_flag_request_time = 1000;  // !!注意!! TIM7の割り込みがはじまってから1000ms間停止
 800413e:	e9c9 4304 	strd	r4, r3, [r9, #16]
  HAL_Delay(100);
 8004142:	f001 fed5 	bl	8005ef0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 8004146:	4869      	ldr	r0, [pc, #420]	; (80042ec <main+0x404>)
 8004148:	4c69      	ldr	r4, [pc, #420]	; (80042f0 <main+0x408>)
 800414a:	4f6a      	ldr	r7, [pc, #424]	; (80042f4 <main+0x40c>)
 800414c:	f004 fde2 	bl	8008d14 <HAL_TIM_Base_Start_IT>
  HAL_Delay(500);
 8004150:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004154:	f001 fecc 	bl	8005ef0 <HAL_Delay>
    debug.main_loop_cnt++;
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	3301      	adds	r3, #1
 800415c:	6063      	str	r3, [r4, #4]
    if (debug.print_flag) {
 800415e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f8      	beq.n	8004158 <main+0x270>
      if (can_raw.power_voltage[5] < 22) {
 8004166:	edd5 7a11 	vldr	s15, [r5, #68]	; 0x44
 800416a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800416e:	eef4 7ac7 	vcmpe.f32	s15, s14
      debug.print_flag = false;
 8004172:	2300      	movs	r3, #0
      if (can_raw.power_voltage[5] < 22) {
 8004174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      debug.print_flag = false;
 8004178:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      printf_buffer[0] = 0;
 800417c:	703b      	strb	r3, [r7, #0]
      if (can_raw.power_voltage[5] < 22) {
 800417e:	f100 8429 	bmi.w	80049d4 <main+0xaec>
      p("yaw=%+6.1f ", imu.yaw_angle);
 8004182:	f8da 0000 	ldr.w	r0, [sl]
 8004186:	f7fc fa07 	bl	8000598 <__aeabi_f2d>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	485a      	ldr	r0, [pc, #360]	; (80042f8 <main+0x410>)
 8004190:	f7fe fab6 	bl	8002700 <p>
      p("Batt=%3.1f ", can_raw.power_voltage[5]);
 8004194:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8004196:	f7fc f9ff 	bl	8000598 <__aeabi_f2d>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4857      	ldr	r0, [pc, #348]	; (80042fc <main+0x414>)
 80041a0:	f7fe faae 	bl	8002700 <p>
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80041a4:	eddb 7a07 	vldr	s15, [fp, #28]
 80041a8:	ed9b 6a08 	vldr	s12, [fp, #32]
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80041ac:	edd5 6a03 	vldr	s13, [r5, #12]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80041b0:	eddb 5a09 	vldr	s11, [fp, #36]	; 0x24
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80041b4:	ed95 7a02 	vldr	s14, [r5, #8]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80041b8:	ee77 7a86 	vadd.f32	s15, s15, s12
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80041bc:	ee37 7a26 	vadd.f32	s14, s14, s13
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80041c0:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80041c4:	edd5 6a04 	vldr	s13, [r5, #16]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80041c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80041cc:	ee37 7a26 	vadd.f32	s14, s14, s13
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80041d0:	ee77 7a86 	vadd.f32	s15, s15, s12
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80041d4:	edd5 6a05 	vldr	s13, [r5, #20]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80041d8:	edc4 7a05 	vstr	s15, [r4, #20]
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80041dc:	ee77 7a26 	vadd.f32	s15, s14, s13
 80041e0:	ee17 0a90 	vmov	r0, s15
 80041e4:	f7fc f9d8 	bl	8000598 <__aeabi_f2d>
 80041e8:	a321      	add	r3, pc, #132	; (adr r3, 8004270 <main+0x388>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fc fa2b 	bl	8000648 <__aeabi_dmul>
 80041f2:	f7fc fd21 	bl	8000c38 <__aeabi_d2f>
 80041f6:	61a0      	str	r0, [r4, #24]
      debug.true_yaw_speed = imu.yaw_angle - debug.pre_yaw_angle;
 80041f8:	edd4 7a07 	vldr	s15, [r4, #28]
 80041fc:	ed9a 7a00 	vldr	s14, [sl]
 8004200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004204:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
      if (fabs(debug.true_yaw_speed - debug.true_fb_toral_spin) > 100 && fabs(ai_cmd.target_theta - imu.yaw_angle) > 5) {
 8004208:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800420c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8004210:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004214:	eef0 7ae7 	vabs.f32	s15, s15
 8004218:	eef4 7ac8 	vcmpe.f32	s15, s16
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	dd0c      	ble.n	800423c <main+0x354>
 8004222:	edd6 7a00 	vldr	s15, [r6]
 8004226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800422a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800422e:	eef0 7ae7 	vabs.f32	s15, s15
 8004232:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	dc02      	bgt.n	8004242 <main+0x35a>
        debug.acc_step_down_flag = false;
 800423c:	2300      	movs	r3, #0
 800423e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      if (sys.main_mode == MAIN_MODE_ERROR) {
 8004242:	f899 300c 	ldrb.w	r3, [r9, #12]
 8004246:	2b09      	cmp	r3, #9
 8004248:	f000 83cf 	beq.w	80049ea <main+0xb02>
      switch (debug.print_idx) {
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	2b06      	cmp	r3, #6
 8004250:	f200 8457 	bhi.w	8004b02 <main+0xc1a>
 8004254:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004258:	026802db 	.word	0x026802db
 800425c:	020e0248 	.word	0x020e0248
 8004260:	00eb012d 	.word	0x00eb012d
 8004264:	005c      	.short	0x005c
    Error_Handler();
 8004266:	f7ff fddd 	bl	8003e24 <Error_Handler>
 800426a:	bf00      	nop
 800426c:	f3af 8000 	nop.w
 8004270:	55555555 	.word	0x55555555
 8004274:	3fe55555 	.word	0x3fe55555
 8004278:	200007b0 	.word	0x200007b0
 800427c:	20000620 	.word	0x20000620
 8004280:	2000006c 	.word	0x2000006c
 8004284:	200007f0 	.word	0x200007f0
 8004288:	20000b8c 	.word	0x20000b8c
 800428c:	4482c000 	.word	0x4482c000
 8004290:	4492c000 	.word	0x4492c000
 8004294:	44a4c000 	.word	0x44a4c000
 8004298:	44ae8000 	.word	0x44ae8000
 800429c:	20000da8 	.word	0x20000da8
 80042a0:	20000e38 	.word	0x20000e38
 80042a4:	0800ec5c 	.word	0x0800ec5c
 80042a8:	20000b1c 	.word	0x20000b1c
 80042ac:	200007f2 	.word	0x200007f2
 80042b0:	2000061c 	.word	0x2000061c
 80042b4:	200002e8 	.word	0x200002e8
 80042b8:	48000800 	.word	0x48000800
 80042bc:	0800ec64 	.word	0x0800ec64
 80042c0:	2000049c 	.word	0x2000049c
 80042c4:	20000500 	.word	0x20000500
 80042c8:	0800ec7c 	.word	0x0800ec7c
 80042cc:	0800ec8c 	.word	0x0800ec8c
 80042d0:	00000000 	.word	0x00000000
 80042d4:	42c80000 	.word	0x42c80000
 80042d8:	43340000 	.word	0x43340000
 80042dc:	20000680 	.word	0x20000680
 80042e0:	420c0000 	.word	0x420c0000
 80042e4:	42480000 	.word	0x42480000
 80042e8:	42b40000 	.word	0x42b40000
 80042ec:	20000bd8 	.word	0x20000bd8
 80042f0:	2000075c 	.word	0x2000075c
 80042f4:	200008dc 	.word	0x200008dc
 80042f8:	0800ecb4 	.word	0x0800ecb4
 80042fc:	0800ecc0 	.word	0x0800ecc0
 8004300:	20000ad4 	.word	0x20000ad4
 8004304:	2000079c 	.word	0x2000079c
 8004308:	200008ac 	.word	0x200008ac
 800430c:	2000082c 	.word	0x2000082c
          p("CMD-ALL ");
 8004310:	48bf      	ldr	r0, [pc, #764]	; (8004610 <main+0x728>)
 8004312:	f7fe f9f5 	bl	8002700 <p>
          p("AIcmd Vx %+4.1f Vy %+4.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1]);
 8004316:	6970      	ldr	r0, [r6, #20]
 8004318:	f7fc f93e 	bl	8000598 <__aeabi_f2d>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	69b0      	ldr	r0, [r6, #24]
 8004322:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004326:	f7fc f937 	bl	8000598 <__aeabi_f2d>
 800432a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800432e:	e9cd 0100 	strd	r0, r1, [sp]
 8004332:	48b8      	ldr	r0, [pc, #736]	; (8004614 <main+0x72c>)
 8004334:	f7fe f9e4 	bl	8002700 <p>
          p("TPx %+4.1f TPy %+4.1f TW %+6.1f ", ai_cmd.global_target_position[0], ai_cmd.global_target_position[1], ai_cmd.target_theta * 180 / M_PI);
 8004338:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800433a:	f7fc f92d 	bl	8000598 <__aeabi_f2d>
 800433e:	edd6 7a00 	vldr	s15, [r6]
 8004342:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004346:	ec41 0b19 	vmov	d9, r0, r1
 800434a:	ee17 0a90 	vmov	r0, s15
 800434e:	f7fc f923 	bl	8000598 <__aeabi_f2d>
 8004352:	a3ad      	add	r3, pc, #692	; (adr r3, 8004608 <main+0x720>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f7fc f976 	bl	8000648 <__aeabi_dmul>
 800435c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004360:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8004362:	f7fc f919 	bl	8000598 <__aeabi_f2d>
 8004366:	ec53 2b19 	vmov	r2, r3, d9
 800436a:	e9cd 0100 	strd	r0, r1, [sp]
 800436e:	48aa      	ldr	r0, [pc, #680]	; (8004618 <main+0x730>)
 8004370:	f7fe f9c6 	bl	8002700 <p>
          p("Vision Gbrl-robot X %+6.2f Y %+6.2f Theta %+6.1f ", ai_cmd.global_robot_position[0], ai_cmd.global_robot_position[1], ai_cmd.global_vision_theta);
 8004374:	69f0      	ldr	r0, [r6, #28]
 8004376:	f7fc f90f 	bl	8000598 <__aeabi_f2d>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	6870      	ldr	r0, [r6, #4]
 8004380:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004384:	f7fc f908 	bl	8000598 <__aeabi_f2d>
 8004388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800438c:	6a30      	ldr	r0, [r6, #32]
 800438e:	f7fc f903 	bl	8000598 <__aeabi_f2d>
 8004392:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004396:	e9cd 0100 	strd	r0, r1, [sp]
 800439a:	48a0      	ldr	r0, [pc, #640]	; (800461c <main+0x734>)
 800439c:	f7fe f9b0 	bl	8002700 <p>
          p("Gbrl-ball X %+6.2f Y %+6.2f ", ai_cmd.global_ball_position[0], ai_cmd.global_ball_position[1]);
 80043a0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80043a2:	f7fc f8f9 	bl	8000598 <__aeabi_f2d>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80043ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043b0:	f7fc f8f2 	bl	8000598 <__aeabi_f2d>
 80043b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043b8:	e9cd 0100 	strd	r0, r1, [sp]
 80043bc:	4898      	ldr	r0, [pc, #608]	; (8004620 <main+0x738>)
 80043be:	f7fe f99f 	bl	8002700 <p>
          p("lost %d stop %d kic %3.2f chp %d dri %3.2f kpr %d lcl %d ", ai_cmd.vision_lost_flag, ai_cmd.stop_request_flag, ai_cmd.kick_power, ai_cmd.chip_en, ai_cmd.drible_power,
 80043c2:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
 80043c6:	9307      	str	r3, [sp, #28]
 80043c8:	68b0      	ldr	r0, [r6, #8]
 80043ca:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
 80043ce:	9306      	str	r3, [sp, #24]
 80043d0:	f7fc f8e2 	bl	8000598 <__aeabi_f2d>
 80043d4:	7c33      	ldrb	r3, [r6, #16]
 80043d6:	9302      	str	r3, [sp, #8]
 80043d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043dc:	68f0      	ldr	r0, [r6, #12]
 80043de:	f7fc f8db 	bl	8000598 <__aeabi_f2d>
 80043e2:	f896 204b 	ldrb.w	r2, [r6, #75]	; 0x4b
 80043e6:	e9cd 0100 	strd	r0, r1, [sp]
 80043ea:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
 80043ee:	488d      	ldr	r0, [pc, #564]	; (8004624 <main+0x73c>)
 80043f0:	f7fe f986 	bl	8002700 <p>
      if (debug.main_loop_cnt < 100000) {
 80043f4:	6862      	ldr	r2, [r4, #4]
 80043f6:	4b8c      	ldr	r3, [pc, #560]	; (8004628 <main+0x740>)
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d803      	bhi.n	8004404 <main+0x51c>
        p("loop %6d", debug.main_loop_cnt);
 80043fc:	6861      	ldr	r1, [r4, #4]
 80043fe:	488b      	ldr	r0, [pc, #556]	; (800462c <main+0x744>)
 8004400:	f7fe f97e 	bl	8002700 <p>
      p("\n");
 8004404:	488a      	ldr	r0, [pc, #552]	; (8004630 <main+0x748>)
 8004406:	f7fe f97b 	bl	8002700 <p>
      HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)printf_buffer, strlen(printf_buffer));
 800440a:	4638      	mov	r0, r7
 800440c:	f7fb ff58 	bl	80002c0 <strlen>
 8004410:	4639      	mov	r1, r7
 8004412:	b282      	uxth	r2, r0
 8004414:	4887      	ldr	r0, [pc, #540]	; (8004634 <main+0x74c>)
 8004416:	f005 f99f 	bl	8009758 <HAL_UART_Transmit_DMA>
      debug.true_fb_toral_spin = 0;
 800441a:	2300      	movs	r3, #0
      debug.main_loop_cnt = 0;
 800441c:	2200      	movs	r2, #0
      debug.pre_yaw_angle = imu.yaw_angle;
 800441e:	f8da 1000 	ldr.w	r1, [sl]
      debug.main_loop_cnt = 0;
 8004422:	6062      	str	r2, [r4, #4]
      debug.pre_yaw_angle = imu.yaw_angle;
 8004424:	61e1      	str	r1, [r4, #28]
      debug.true_cycle_cnt = 0;
 8004426:	60a2      	str	r2, [r4, #8]
      debug.true_fb_toral_spin = 0;
 8004428:	6263      	str	r3, [r4, #36]	; 0x24
      debug.true_out_total_spi = 0;
 800442a:	6223      	str	r3, [r4, #32]
 800442c:	e694      	b.n	8004158 <main+0x270>
          p("ODOM ");
 800442e:	4882      	ldr	r0, [pc, #520]	; (8004638 <main+0x750>)
          p("omni X %+8.2f Y %+8.2f ", omni.odom[0] * 1000, omni.odom[1] * 1000);
 8004430:	ed9f 9a82 	vldr	s18, [pc, #520]	; 800463c <main+0x754>
          p("ODOM ");
 8004434:	f7fe f964 	bl	8002700 <p>
          p("ENC angle %+4.1f %+4.1f %+4.1f %+4.1f ", motor.enc_angle[0], motor.enc_angle[1], motor.enc_angle[2], motor.enc_angle[3]);
 8004438:	4b81      	ldr	r3, [pc, #516]	; (8004640 <main+0x758>)
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	f7fc f8ac 	bl	8000598 <__aeabi_f2d>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004448:	4b7d      	ldr	r3, [pc, #500]	; (8004640 <main+0x758>)
 800444a:	68d8      	ldr	r0, [r3, #12]
 800444c:	f7fc f8a4 	bl	8000598 <__aeabi_f2d>
 8004450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004454:	4b7a      	ldr	r3, [pc, #488]	; (8004640 <main+0x758>)
 8004456:	6898      	ldr	r0, [r3, #8]
 8004458:	f7fc f89e 	bl	8000598 <__aeabi_f2d>
 800445c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004460:	4b77      	ldr	r3, [pc, #476]	; (8004640 <main+0x758>)
 8004462:	6858      	ldr	r0, [r3, #4]
 8004464:	f7fc f898 	bl	8000598 <__aeabi_f2d>
 8004468:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800446c:	e9cd 0100 	strd	r0, r1, [sp]
 8004470:	4874      	ldr	r0, [pc, #464]	; (8004644 <main+0x75c>)
 8004472:	f7fe f945 	bl	8002700 <p>
          p("omni X %+8.2f Y %+8.2f ", omni.odom[0] * 1000, omni.odom[1] * 1000);
 8004476:	4b74      	ldr	r3, [pc, #464]	; (8004648 <main+0x760>)
 8004478:	edd3 7a06 	vldr	s15, [r3, #24]
 800447c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004480:	ee17 0a90 	vmov	r0, s15
 8004484:	f7fc f888 	bl	8000598 <__aeabi_f2d>
 8004488:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <main+0x760>)
 800448a:	edd3 7a07 	vldr	s15, [r3, #28]
 800448e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	ee17 0a90 	vmov	r0, s15
 800449a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800449e:	f7fc f87b 	bl	8000598 <__aeabi_f2d>
 80044a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044a6:	e9cd 0100 	strd	r0, r1, [sp]
 80044aa:	4868      	ldr	r0, [pc, #416]	; (800464c <main+0x764>)
 80044ac:	f7fe f928 	bl	8002700 <p>
          break;
 80044b0:	e7a0      	b.n	80043f4 <main+0x50c>
          p("MOUSE ");
 80044b2:	4867      	ldr	r0, [pc, #412]	; (8004650 <main+0x768>)
          p("raw_odom X %+8.3f Y %+8.3f ", -mouse.raw_odom[0] * 1000, -mouse.raw_odom[1] * 1000);
 80044b4:	ed9f 9a67 	vldr	s18, [pc, #412]	; 8004654 <main+0x76c>
          p("Error X %+8.2f Y %+8.2f ", (omni.odom[0] + mouse.odom[0]) * 1000, (omni.odom[1] + mouse.odom[1]) * 1000);
 80044b8:	eddf 9a60 	vldr	s19, [pc, #384]	; 800463c <main+0x754>
          p("MOUSE ");
 80044bc:	f7fe f920 	bl	8002700 <p>
          p("raw_odom X %+8.3f Y %+8.3f ", -mouse.raw_odom[0] * 1000, -mouse.raw_odom[1] * 1000);
 80044c0:	edd8 7a02 	vldr	s15, [r8, #8]
 80044c4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80044c8:	ee17 0a90 	vmov	r0, s15
 80044cc:	f7fc f864 	bl	8000598 <__aeabi_f2d>
 80044d0:	edd8 7a03 	vldr	s15, [r8, #12]
 80044d4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	ee17 0a90 	vmov	r0, s15
 80044e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044e4:	f7fc f858 	bl	8000598 <__aeabi_f2d>
 80044e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044ec:	e9cd 0100 	strd	r0, r1, [sp]
 80044f0:	4859      	ldr	r0, [pc, #356]	; (8004658 <main+0x770>)
 80044f2:	f7fe f905 	bl	8002700 <p>
          p("mouse floor X %+8.3f Y %+8.3f ", -mouse.floor_odom[0] * 1000, -mouse.floor_odom[1] * 1000);
 80044f6:	edd8 7a04 	vldr	s15, [r8, #16]
 80044fa:	ee67 7a89 	vmul.f32	s15, s15, s18
 80044fe:	ee17 0a90 	vmov	r0, s15
 8004502:	f7fc f849 	bl	8000598 <__aeabi_f2d>
 8004506:	edd8 7a05 	vldr	s15, [r8, #20]
 800450a:	ee67 7a89 	vmul.f32	s15, s15, s18
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	ee17 0a90 	vmov	r0, s15
 8004516:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800451a:	f7fc f83d 	bl	8000598 <__aeabi_f2d>
 800451e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004522:	e9cd 0100 	strd	r0, r1, [sp]
 8004526:	484d      	ldr	r0, [pc, #308]	; (800465c <main+0x774>)
 8004528:	f7fe f8ea 	bl	8002700 <p>
          p("mouse X %+8.2f Y %+8.2f ", -mouse.odom[0] * 1000, -mouse.odom[1] * 1000);
 800452c:	edd8 7a06 	vldr	s15, [r8, #24]
 8004530:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004534:	ee17 0a90 	vmov	r0, s15
 8004538:	f7fc f82e 	bl	8000598 <__aeabi_f2d>
 800453c:	edd8 7a07 	vldr	s15, [r8, #28]
 8004540:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	ee17 0a90 	vmov	r0, s15
 800454c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004550:	f7fc f822 	bl	8000598 <__aeabi_f2d>
 8004554:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004558:	e9cd 0100 	strd	r0, r1, [sp]
 800455c:	4840      	ldr	r0, [pc, #256]	; (8004660 <main+0x778>)
 800455e:	f7fe f8cf 	bl	8002700 <p>
          p("Error X %+8.2f Y %+8.2f ", (omni.odom[0] + mouse.odom[0]) * 1000, (omni.odom[1] + mouse.odom[1]) * 1000);
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <main+0x760>)
 8004564:	ed98 7a06 	vldr	s14, [r8, #24]
 8004568:	edd3 7a06 	vldr	s15, [r3, #24]
 800456c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004570:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004574:	ee17 0a90 	vmov	r0, s15
 8004578:	f7fc f80e 	bl	8000598 <__aeabi_f2d>
 800457c:	4b32      	ldr	r3, [pc, #200]	; (8004648 <main+0x760>)
 800457e:	ed98 7a07 	vldr	s14, [r8, #28]
 8004582:	edd3 7a07 	vldr	s15, [r3, #28]
 8004586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800458a:	4602      	mov	r2, r0
 800458c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004590:	460b      	mov	r3, r1
 8004592:	ee17 0a90 	vmov	r0, s15
 8004596:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800459a:	f7fb fffd 	bl	8000598 <__aeabi_f2d>
 800459e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045a2:	e9cd 0100 	strd	r0, r1, [sp]
 80045a6:	482f      	ldr	r0, [pc, #188]	; (8004664 <main+0x77c>)
 80045a8:	f7fe f8aa 	bl	8002700 <p>
          p("diff X %+8.2f Y %+8.2f ", mouse.raw_diff[0] * 1000, mouse.raw_diff[1] * 1000);
 80045ac:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80045b0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80045b4:	ee17 0a90 	vmov	r0, s15
 80045b8:	f7fb ffee 	bl	8000598 <__aeabi_f2d>
 80045bc:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 80045c0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	ee17 0a90 	vmov	r0, s15
 80045cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80045d0:	f7fb ffe2 	bl	8000598 <__aeabi_f2d>
 80045d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045d8:	e9cd 0100 	strd	r0, r1, [sp]
 80045dc:	4822      	ldr	r0, [pc, #136]	; (8004668 <main+0x780>)
 80045de:	f7fe f88f 	bl	8002700 <p>
          p("mouseRaw X %+8.1f %+8.1f ", mouse.raw[0], mouse.raw[1]);
 80045e2:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 80045e6:	f9b8 1020 	ldrsh.w	r1, [r8, #32]
 80045ea:	4820      	ldr	r0, [pc, #128]	; (800466c <main+0x784>)
 80045ec:	f7fe f888 	bl	8002700 <p>
          p("raw X %+4d %+4d %6d", mouse.raw[0], mouse.raw[1], mouse.quality);
 80045f0:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 80045f4:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 80045f8:	f9b8 1020 	ldrsh.w	r1, [r8, #32]
 80045fc:	481c      	ldr	r0, [pc, #112]	; (8004670 <main+0x788>)
 80045fe:	f7fe f87f 	bl	8002700 <p>
          break;
 8004602:	e6f7      	b.n	80043f4 <main+0x50c>
 8004604:	f3af 8000 	nop.w
 8004608:	6dc9c883 	.word	0x6dc9c883
 800460c:	3fd45f30 	.word	0x3fd45f30
 8004610:	0800f0c8 	.word	0x0800f0c8
 8004614:	0800f0d4 	.word	0x0800f0d4
 8004618:	0800f0f0 	.word	0x0800f0f0
 800461c:	0800f114 	.word	0x0800f114
 8004620:	0800f148 	.word	0x0800f148
 8004624:	0800f168 	.word	0x0800f168
 8004628:	0001869f 	.word	0x0001869f
 800462c:	0800f1a4 	.word	0x0800f1a4
 8004630:	0800f1b0 	.word	0x0800f1b0
 8004634:	20000da8 	.word	0x20000da8
 8004638:	0800f080 	.word	0x0800f080
 800463c:	447a0000 	.word	0x447a0000
 8004640:	200007f4 	.word	0x200007f4
 8004644:	0800f088 	.word	0x0800f088
 8004648:	2000086c 	.word	0x2000086c
 800464c:	0800f0b0 	.word	0x0800f0b0
 8004650:	0800efbc 	.word	0x0800efbc
 8004654:	c47a0000 	.word	0xc47a0000
 8004658:	0800efc4 	.word	0x0800efc4
 800465c:	0800efe0 	.word	0x0800efe0
 8004660:	0800f000 	.word	0x0800f000
 8004664:	0800f01c 	.word	0x0800f01c
 8004668:	0800f038 	.word	0x0800f038
 800466c:	0800f050 	.word	0x0800f050
 8004670:	0800f06c 	.word	0x0800f06c
          p("KICKER ");
 8004674:	48be      	ldr	r0, [pc, #760]	; (8004970 <main+0xa88>)
 8004676:	f7fe f843 	bl	8002700 <p>
          p("Batt(Pw) %3.1f Cap=%3.0f BattC %+6.1f Batt(Sub) %3.1f ", can_raw.power_voltage[5], can_raw.power_voltage[6], can_raw.current[4], can_raw.power_voltage[4]);
 800467a:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800467c:	f7fb ff8c 	bl	8000598 <__aeabi_f2d>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004686:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800468a:	f7fb ff85 	bl	8000598 <__aeabi_f2d>
 800468e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004692:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8004694:	f7fb ff80 	bl	8000598 <__aeabi_f2d>
 8004698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800469c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800469e:	f7fb ff7b 	bl	8000598 <__aeabi_f2d>
 80046a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046a6:	e9cd 0100 	strd	r0, r1, [sp]
 80046aa:	48b2      	ldr	r0, [pc, #712]	; (8004974 <main+0xa8c>)
 80046ac:	f7fe f828 	bl	8002700 <p>
          p("BLDC v0=%+4.1f v1=%+4.1f v2=%+4.1f v3=%+4.1f ", can_raw.power_voltage[0], can_raw.power_voltage[1], can_raw.power_voltage[2], can_raw.power_voltage[3]);
 80046b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80046b2:	f7fb ff71 	bl	8000598 <__aeabi_f2d>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80046bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80046c0:	f7fb ff6a 	bl	8000598 <__aeabi_f2d>
 80046c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046c8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80046ca:	f7fb ff65 	bl	8000598 <__aeabi_f2d>
 80046ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046d2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80046d4:	f7fb ff60 	bl	8000598 <__aeabi_f2d>
 80046d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046dc:	e9cd 0100 	strd	r0, r1, [sp]
 80046e0:	48a5      	ldr	r0, [pc, #660]	; (8004978 <main+0xa90>)
 80046e2:	f7fe f80d 	bl	8002700 <p>
          break;
 80046e6:	e685      	b.n	80043f4 <main+0x50c>
          p("DRIBBLER ");
 80046e8:	48a4      	ldr	r0, [pc, #656]	; (800497c <main+0xa94>)
 80046ea:	f7fe f809 	bl	8002700 <p>
          p("Batt(Sub) %3.1f ", can_raw.power_voltage[4]);
 80046ee:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80046f0:	f7fb ff52 	bl	8000598 <__aeabi_f2d>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	48a1      	ldr	r0, [pc, #644]	; (8004980 <main+0xa98>)
 80046fa:	f7fe f801 	bl	8002700 <p>
          p("ball_sensor %d %d / ESC Spd %+5.0f ", can_raw.ball_detection[0], can_raw.ball_detection[1], can_raw.motor_feedback_velocity[4]);
 80046fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004700:	f7fb ff4a 	bl	8000598 <__aeabi_f2d>
 8004704:	e9cd 0100 	strd	r0, r1, [sp]
 8004708:	489e      	ldr	r0, [pc, #632]	; (8004984 <main+0xa9c>)
 800470a:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 800470e:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
 8004712:	f7fd fff5 	bl	8002700 <p>
          p("local_vision x=%3d y=%3d radius=%3d FPS=%3d ", ai_cmd.ball_local_x, ai_cmd.ball_local_y, ai_cmd.ball_local_radius, ai_cmd.ball_local_FPS);
 8004716:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 800471c:	489a      	ldr	r0, [pc, #616]	; (8004988 <main+0xaa0>)
 800471e:	e9d6 230f 	ldrd	r2, r3, [r6, #60]	; 0x3c
 8004722:	f7fd ffed 	bl	8002700 <p>
          break;
 8004726:	e665      	b.n	80043f4 <main+0x50c>
          p("MOTOR ");
 8004728:	4898      	ldr	r0, [pc, #608]	; (800498c <main+0xaa4>)
 800472a:	f7fd ffe9 	bl	8002700 <p>
          p("SW %2d ", decode_SW(adc_sw_data));
 800472e:	4b98      	ldr	r3, [pc, #608]	; (8004990 <main+0xaa8>)
 8004730:	8818      	ldrh	r0, [r3, #0]
 8004732:	f001 fb11 	bl	8005d58 <decode_SW>
 8004736:	4601      	mov	r1, r0
 8004738:	4896      	ldr	r0, [pc, #600]	; (8004994 <main+0xaac>)
 800473a:	f7fd ffe1 	bl	8002700 <p>
          p("Speed M0=%+6.1f M1=%+6.1f M2=%+6.1f M3=%+6.1f ", can_raw.motor_feedback[0], can_raw.motor_feedback[1], can_raw.motor_feedback[2], can_raw.motor_feedback[3]);
 800473e:	68a8      	ldr	r0, [r5, #8]
 8004740:	f7fb ff2a 	bl	8000598 <__aeabi_f2d>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	6968      	ldr	r0, [r5, #20]
 800474a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800474e:	f7fb ff23 	bl	8000598 <__aeabi_f2d>
 8004752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004756:	6928      	ldr	r0, [r5, #16]
 8004758:	f7fb ff1e 	bl	8000598 <__aeabi_f2d>
 800475c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004760:	68e8      	ldr	r0, [r5, #12]
 8004762:	f7fb ff19 	bl	8000598 <__aeabi_f2d>
 8004766:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800476a:	e9cd 0100 	strd	r0, r1, [sp]
 800476e:	488a      	ldr	r0, [pc, #552]	; (8004998 <main+0xab0>)
 8004770:	f7fd ffc6 	bl	8002700 <p>
          p("Pw v0=%+6.3f v1=%+6.3f v2=%+6.3f v3=%+6.3f ", can_raw.power_voltage[0], can_raw.power_voltage[1], can_raw.power_voltage[2], can_raw.power_voltage[3]);
 8004774:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004776:	f7fb ff0f 	bl	8000598 <__aeabi_f2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004780:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004784:	f7fb ff08 	bl	8000598 <__aeabi_f2d>
 8004788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800478c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800478e:	f7fb ff03 	bl	8000598 <__aeabi_f2d>
 8004792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004796:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004798:	f7fb fefe 	bl	8000598 <__aeabi_f2d>
 800479c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047a0:	e9cd 0100 	strd	r0, r1, [sp]
 80047a4:	487d      	ldr	r0, [pc, #500]	; (800499c <main+0xab4>)
 80047a6:	f7fd ffab 	bl	8002700 <p>
          p("Im i0=%+5.1f i1=%+5.1f i2=%+5.1f i3=%+5.1f ", can_raw.current[0], can_raw.current[1], can_raw.current[2], can_raw.current[3]);
 80047aa:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80047ac:	f7fb fef4 	bl	8000598 <__aeabi_f2d>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	6f68      	ldr	r0, [r5, #116]	; 0x74
 80047b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80047ba:	f7fb feed 	bl	8000598 <__aeabi_f2d>
 80047be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047c2:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80047c4:	f7fb fee8 	bl	8000598 <__aeabi_f2d>
 80047c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047cc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80047ce:	f7fb fee3 	bl	8000598 <__aeabi_f2d>
 80047d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047d6:	e9cd 0100 	strd	r0, r1, [sp]
 80047da:	4871      	ldr	r0, [pc, #452]	; (80049a0 <main+0xab8>)
 80047dc:	f7fd ff90 	bl	8002700 <p>
          p("FET=%4.1f L1=%4.1f L2=%4.1f ", can_raw.temperature[4], can_raw.temperature[5], can_raw.temperature[6]);
 80047e0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80047e2:	f7fb fed9 	bl	8000598 <__aeabi_f2d>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80047ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80047f0:	f7fb fed2 	bl	8000598 <__aeabi_f2d>
 80047f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047f8:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80047fa:	f7fb fecd 	bl	8000598 <__aeabi_f2d>
 80047fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004802:	e9cd 0100 	strd	r0, r1, [sp]
 8004806:	4867      	ldr	r0, [pc, #412]	; (80049a4 <main+0xabc>)
 8004808:	f7fd ff7a 	bl	8002700 <p>
          break;
 800480c:	e5f2      	b.n	80043f4 <main+0x50c>
          p("CMD ");
 800480e:	4866      	ldr	r0, [pc, #408]	; (80049a8 <main+0xac0>)
 8004810:	f7fd ff76 	bl	8002700 <p>
          if (connection.connected_ai) {
 8004814:	4b65      	ldr	r3, [pc, #404]	; (80049ac <main+0xac4>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f040 8100 	bne.w	8004a1e <main+0xb36>
          } else if (connection.connected_cm4) {
 800481e:	4a63      	ldr	r2, [pc, #396]	; (80049ac <main+0xac4>)
 8004820:	7853      	ldrb	r3, [r2, #1]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80ef 	beq.w	8004a06 <main+0xb1e>
            p("\e[33m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004828:	6850      	ldr	r0, [r2, #4]
 800482a:	f7fb feb5 	bl	8000598 <__aeabi_f2d>
 800482e:	460b      	mov	r3, r1
 8004830:	495e      	ldr	r1, [pc, #376]	; (80049ac <main+0xac4>)
 8004832:	4602      	mov	r2, r0
 8004834:	78c9      	ldrb	r1, [r1, #3]
 8004836:	485e      	ldr	r0, [pc, #376]	; (80049b0 <main+0xac8>)
 8004838:	f7fd ff62 	bl	8002700 <p>
          p("AIcmd Vx %+4.1f Vy %+4.1f Tw %+6.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta * 180 / M_PI);
 800483c:	6970      	ldr	r0, [r6, #20]
 800483e:	f7fb feab 	bl	8000598 <__aeabi_f2d>
 8004842:	edd6 7a00 	vldr	s15, [r6]
 8004846:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800484a:	ec41 0b19 	vmov	d9, r0, r1
 800484e:	ee17 0a90 	vmov	r0, s15
 8004852:	f7fb fea1 	bl	8000598 <__aeabi_f2d>
 8004856:	a342      	add	r3, pc, #264	; (adr r3, 8004960 <main+0xa78>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f7fb fef4 	bl	8000648 <__aeabi_dmul>
 8004860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004864:	69b0      	ldr	r0, [r6, #24]
 8004866:	f7fb fe97 	bl	8000598 <__aeabi_f2d>
 800486a:	ec53 2b19 	vmov	r2, r3, d9
 800486e:	e9cd 0100 	strd	r0, r1, [sp]
 8004872:	4850      	ldr	r0, [pc, #320]	; (80049b4 <main+0xacc>)
 8004874:	f7fd ff44 	bl	8002700 <p>
          if (sys.main_mode != MAIN_MODE_CMD_DEBUG_MODE) {
 8004878:	f899 300c 	ldrb.w	r3, [r9, #12]
 800487c:	2b02      	cmp	r3, #2
 800487e:	f000 80de 	beq.w	8004a3e <main+0xb56>
            if (ai_cmd.vision_lost_flag) {  // SSL-Vision (Robot)
 8004882:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 80d5 	bne.w	8004a36 <main+0xb4e>
            p("Vision X %+6.1f Y %+6.1f W %+4.1f ", ai_cmd.global_robot_position[0] * 1000, ai_cmd.global_robot_position[1] * 1000, ai_cmd.global_vision_theta);
 800488c:	edd6 7a07 	vldr	s15, [r6, #28]
 8004890:	ed9f 9a49 	vldr	s18, [pc, #292]	; 80049b8 <main+0xad0>
 8004894:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004898:	ee17 0a90 	vmov	r0, s15
 800489c:	f7fb fe7c 	bl	8000598 <__aeabi_f2d>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	6870      	ldr	r0, [r6, #4]
 80048a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80048aa:	f7fb fe75 	bl	8000598 <__aeabi_f2d>
 80048ae:	edd6 7a08 	vldr	s15, [r6, #32]
 80048b2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80048b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048ba:	ee17 0a90 	vmov	r0, s15
 80048be:	f7fb fe6b 	bl	8000598 <__aeabi_f2d>
 80048c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048c6:	e9cd 0100 	strd	r0, r1, [sp]
 80048ca:	483c      	ldr	r0, [pc, #240]	; (80049bc <main+0xad4>)
 80048cc:	f7fd ff18 	bl	8002700 <p>
            p("AIcmd X %+6.2f Y %+6.2f ", ai_cmd.global_target_position[0], ai_cmd.global_target_position[1]);
 80048d0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80048d2:	f7fb fe61 	bl	8000598 <__aeabi_f2d>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80048dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80048e0:	f7fb fe5a 	bl	8000598 <__aeabi_f2d>
 80048e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048e8:	e9cd 0100 	strd	r0, r1, [sp]
 80048ec:	4834      	ldr	r0, [pc, #208]	; (80049c0 <main+0xad8>)
 80048ee:	f7fd ff07 	bl	8002700 <p>
            p("Wdidd %+5.1f", (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180 / M_PI));
 80048f2:	ed9a 7a00 	vldr	s14, [sl]
 80048f6:	eddf 7a33 	vldr	s15, [pc, #204]	; 80049c4 <main+0xadc>
 80048fa:	edd6 0a01 	vldr	s1, [r6, #4]
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edcd 0a08 	vstr	s1, [sp, #32]
 8004906:	ee17 0a90 	vmov	r0, s15
 800490a:	f7fb fe45 	bl	8000598 <__aeabi_f2d>
 800490e:	a316      	add	r3, pc, #88	; (adr r3, 8004968 <main+0xa80>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fe98 	bl	8000648 <__aeabi_dmul>
 8004918:	f7fc f98e 	bl	8000c38 <__aeabi_d2f>
 800491c:	eddd 0a08 	vldr	s1, [sp, #32]
 8004920:	ee00 0a10 	vmov	s0, r0
 8004924:	f001 f940 	bl	8005ba8 <getAngleDiff>
 8004928:	ee60 7a28 	vmul.f32	s15, s0, s17
 800492c:	ee17 0a90 	vmov	r0, s15
 8004930:	f7fb fe32 	bl	8000598 <__aeabi_f2d>
 8004934:	a30a      	add	r3, pc, #40	; (adr r3, 8004960 <main+0xa78>)
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f7fb fe85 	bl	8000648 <__aeabi_dmul>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4821      	ldr	r0, [pc, #132]	; (80049c8 <main+0xae0>)
 8004944:	f7fd fedc 	bl	8002700 <p>
            p("\e[37m ");  // end color
 8004948:	4820      	ldr	r0, [pc, #128]	; (80049cc <main+0xae4>)
 800494a:	f7fd fed9 	bl	8002700 <p>
            p("update %d ", debug.theta_override_flag);
 800494e:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8004952:	481f      	ldr	r0, [pc, #124]	; (80049d0 <main+0xae8>)
 8004954:	f7fd fed4 	bl	8002700 <p>
 8004958:	e54c      	b.n	80043f4 <main+0x50c>
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w
 8004960:	6dc9c883 	.word	0x6dc9c883
 8004964:	3fd45f30 	.word	0x3fd45f30
 8004968:	16c16c17 	.word	0x16c16c17
 800496c:	3f76c16c 	.word	0x3f76c16c
 8004970:	0800ef4c 	.word	0x0800ef4c
 8004974:	0800ef54 	.word	0x0800ef54
 8004978:	0800ef8c 	.word	0x0800ef8c
 800497c:	0800eed8 	.word	0x0800eed8
 8004980:	0800eee4 	.word	0x0800eee4
 8004984:	0800eef8 	.word	0x0800eef8
 8004988:	0800ef1c 	.word	0x0800ef1c
 800498c:	0800ee20 	.word	0x0800ee20
 8004990:	2000061c 	.word	0x2000061c
 8004994:	0800ee28 	.word	0x0800ee28
 8004998:	0800ee30 	.word	0x0800ee30
 800499c:	0800ee60 	.word	0x0800ee60
 80049a0:	0800ee8c 	.word	0x0800ee8c
 80049a4:	0800eeb8 	.word	0x0800eeb8
 80049a8:	0800ed04 	.word	0x0800ed04
 80049ac:	20000704 	.word	0x20000704
 80049b0:	0800ed24 	.word	0x0800ed24
 80049b4:	0800ed54 	.word	0x0800ed54
 80049b8:	447a0000 	.word	0x447a0000
 80049bc:	0800ed84 	.word	0x0800ed84
 80049c0:	0800eda8 	.word	0x0800eda8
 80049c4:	40490fdb 	.word	0x40490fdb
 80049c8:	0800edc4 	.word	0x0800edc4
 80049cc:	0800edd4 	.word	0x0800edd4
 80049d0:	0800eddc 	.word	0x0800eddc
        p("\e[33mBatt=%3.1f\e[37m ", can_raw.power_voltage[5]);
 80049d4:	ee17 0a90 	vmov	r0, s15
 80049d8:	f7fb fdde 	bl	8000598 <__aeabi_f2d>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	484d      	ldr	r0, [pc, #308]	; (8004b18 <main+0xc30>)
 80049e2:	f7fd fe8d 	bl	8002700 <p>
 80049e6:	f7ff bbcc 	b.w	8004182 <main+0x29a>
        p("\e[31m error : ID %5d / Info %5d / Value %+8.3f \e[31m", sys.error_id, sys.error_info, sys.error_value);
 80049ea:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80049ee:	f7fb fdd3 	bl	8000598 <__aeabi_f2d>
 80049f2:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80049f6:	e9cd 0100 	strd	r0, r1, [sp]
 80049fa:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 80049fe:	4847      	ldr	r0, [pc, #284]	; (8004b1c <main+0xc34>)
 8004a00:	f7fd fe7e 	bl	8002700 <p>
 8004a04:	e422      	b.n	800424c <main+0x364>
            p("\e[31m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004a06:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <main+0xc38>)
 8004a08:	6858      	ldr	r0, [r3, #4]
 8004a0a:	f7fb fdc5 	bl	8000598 <__aeabi_f2d>
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4943      	ldr	r1, [pc, #268]	; (8004b20 <main+0xc38>)
 8004a12:	4602      	mov	r2, r0
 8004a14:	78c9      	ldrb	r1, [r1, #3]
 8004a16:	4843      	ldr	r0, [pc, #268]	; (8004b24 <main+0xc3c>)
 8004a18:	f7fd fe72 	bl	8002700 <p>
 8004a1c:	e70e      	b.n	800483c <main+0x954>
            p("\e[32m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004a1e:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <main+0xc38>)
 8004a20:	6858      	ldr	r0, [r3, #4]
 8004a22:	f7fb fdb9 	bl	8000598 <__aeabi_f2d>
 8004a26:	460b      	mov	r3, r1
 8004a28:	493d      	ldr	r1, [pc, #244]	; (8004b20 <main+0xc38>)
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	78c9      	ldrb	r1, [r1, #3]
 8004a2e:	483e      	ldr	r0, [pc, #248]	; (8004b28 <main+0xc40>)
 8004a30:	f7fd fe66 	bl	8002700 <p>
 8004a34:	e702      	b.n	800483c <main+0x954>
              p("\e[33m");
 8004a36:	483d      	ldr	r0, [pc, #244]	; (8004b2c <main+0xc44>)
 8004a38:	f7fd fe62 	bl	8002700 <p>
 8004a3c:	e726      	b.n	800488c <main+0x9a4>
            p("omni X %+8.3f Y %+8.3f ", omni.odom[0] * 1000, omni.odom[1] * 1000);
 8004a3e:	4b3c      	ldr	r3, [pc, #240]	; (8004b30 <main+0xc48>)
 8004a40:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 8004b34 <main+0xc4c>
 8004a44:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a48:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004a4c:	ee17 0a90 	vmov	r0, s15
 8004a50:	f7fb fda2 	bl	8000598 <__aeabi_f2d>
 8004a54:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <main+0xc48>)
 8004a56:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a5a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	ee17 0a90 	vmov	r0, s15
 8004a66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a6a:	f7fb fd95 	bl	8000598 <__aeabi_f2d>
 8004a6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a72:	e9cd 0100 	strd	r0, r1, [sp]
 8004a76:	4830      	ldr	r0, [pc, #192]	; (8004b38 <main+0xc50>)
 8004a78:	f7fd fe42 	bl	8002700 <p>
            p("Wdidd %+5.1f", (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180 / M_PI));
 8004a7c:	ed9a 7a00 	vldr	s14, [sl]
 8004a80:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004b3c <main+0xc54>
 8004a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a88:	ee17 0a90 	vmov	r0, s15
 8004a8c:	f7fb fd84 	bl	8000598 <__aeabi_f2d>
 8004a90:	a31d      	add	r3, pc, #116	; (adr r3, 8004b08 <main+0xc20>)
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f7fb fdd7 	bl	8000648 <__aeabi_dmul>
 8004a9a:	f7fc f8cd 	bl	8000c38 <__aeabi_d2f>
 8004a9e:	edd6 0a01 	vldr	s1, [r6, #4]
 8004aa2:	ee00 0a10 	vmov	s0, r0
 8004aa6:	f001 f87f 	bl	8005ba8 <getAngleDiff>
 8004aaa:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004aae:	ee17 0a90 	vmov	r0, s15
 8004ab2:	f7fb fd71 	bl	8000598 <__aeabi_f2d>
 8004ab6:	a316      	add	r3, pc, #88	; (adr r3, 8004b10 <main+0xc28>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb fdc4 	bl	8000648 <__aeabi_dmul>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	481e      	ldr	r0, [pc, #120]	; (8004b40 <main+0xc58>)
 8004ac6:	f7fd fe1b 	bl	8002700 <p>
            p("Temp %3.0f %3.0f %3.0f %3.0f", can_raw.temperature[0], can_raw.temperature[1], can_raw.temperature[2], can_raw.temperature[3]);
 8004aca:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8004acc:	f7fb fd64 	bl	8000598 <__aeabi_f2d>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ad6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ada:	f7fb fd5d 	bl	8000598 <__aeabi_f2d>
 8004ade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ae2:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004ae4:	f7fb fd58 	bl	8000598 <__aeabi_f2d>
 8004ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aec:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004aee:	f7fb fd53 	bl	8000598 <__aeabi_f2d>
 8004af2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004af6:	e9cd 0100 	strd	r0, r1, [sp]
 8004afa:	4812      	ldr	r0, [pc, #72]	; (8004b44 <main+0xc5c>)
 8004afc:	f7fd fe00 	bl	8002700 <p>
 8004b00:	e478      	b.n	80043f4 <main+0x50c>
          debug.print_idx = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	6023      	str	r3, [r4, #0]
          break;
 8004b06:	e475      	b.n	80043f4 <main+0x50c>
 8004b08:	16c16c17 	.word	0x16c16c17
 8004b0c:	3f76c16c 	.word	0x3f76c16c
 8004b10:	6dc9c883 	.word	0x6dc9c883
 8004b14:	3fd45f30 	.word	0x3fd45f30
 8004b18:	0800ec9c 	.word	0x0800ec9c
 8004b1c:	0800eccc 	.word	0x0800eccc
 8004b20:	20000704 	.word	0x20000704
 8004b24:	0800ed3c 	.word	0x0800ed3c
 8004b28:	0800ed0c 	.word	0x0800ed0c
 8004b2c:	0800ed7c 	.word	0x0800ed7c
 8004b30:	2000086c 	.word	0x2000086c
 8004b34:	447a0000 	.word	0x447a0000
 8004b38:	0800ede8 	.word	0x0800ede8
 8004b3c:	40490fdb 	.word	0x40490fdb
 8004b40:	0800edc4 	.word	0x0800edc4
 8004b44:	0800ee00 	.word	0x0800ee00

08004b48 <mouseOdometory>:

#include "management.h"
#include "ring_buffer.h"

void mouseOdometory()
{
 8004b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004b4c:	4c68      	ldr	r4, [pc, #416]	; (8004cf0 <mouseOdometory+0x1a8>)
 8004b4e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004cf4 <mouseOdometory+0x1ac>
 8004b52:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;

  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004b56:	edd4 6a02 	vldr	s13, [r4, #8]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004b5a:	ee07 3a90 	vmov	s15, r3
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004b5e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
{
 8004b62:	ed2d 8b04 	vpush	{d8-d9}
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004b66:	ee08 3a10 	vmov	s16, r3
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004b6e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004b72:	ee67 7a87 	vmul.f32	s15, s15, s14
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004b76:	ee28 8a07 	vmul.f32	s16, s16, s14
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004b7a:	ed94 7a03 	vldr	s14, [r4, #12]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004b7e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004b82:	ee37 7a08 	vadd.f32	s14, s14, s16
  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004b86:	ee76 6aa7 	vadd.f32	s13, s13, s15

  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004b8a:	ee17 0a90 	vmov	r0, s15
  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004b8e:	edc4 6a02 	vstr	s13, [r4, #8]
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004b92:	ed84 7a03 	vstr	s14, [r4, #12]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004b96:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004b9a:	f7fb fcfd 	bl	8000598 <__aeabi_f2d>
 8004b9e:	4b56      	ldr	r3, [pc, #344]	; (8004cf8 <mouseOdometory+0x1b0>)
 8004ba0:	689d      	ldr	r5, [r3, #8]
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	460f      	mov	r7, r1
 8004ba8:	f7fb fcf6 	bl	8000598 <__aeabi_f2d>
 8004bac:	ec41 0b10 	vmov	d0, r0, r1
 8004bb0:	ec41 0b19 	vmov	d9, r0, r1
 8004bb4:	f008 fea4 	bl	800d900 <cos>
 8004bb8:	ee18 0a10 	vmov	r0, s16
 8004bbc:	ec5b ab10 	vmov	sl, fp, d0
 8004bc0:	f7fb fcea 	bl	8000598 <__aeabi_f2d>
 8004bc4:	eeb0 0a49 	vmov.f32	s0, s18
 8004bc8:	eef0 0a69 	vmov.f32	s1, s19
 8004bcc:	ec41 0b18 	vmov	d8, r0, r1
 8004bd0:	f008 feea 	bl	800d9a8 <sin>
 8004bd4:	4652      	mov	r2, sl
 8004bd6:	465b      	mov	r3, fp
 8004bd8:	4630      	mov	r0, r6
 8004bda:	4639      	mov	r1, r7
 8004bdc:	eeb0 9a40 	vmov.f32	s18, s0
 8004be0:	eef0 9a60 	vmov.f32	s19, s1
 8004be4:	f7fb fd30 	bl	8000648 <__aeabi_dmul>
 8004be8:	ec53 2b19 	vmov	r2, r3, d9
 8004bec:	4680      	mov	r8, r0
 8004bee:	4689      	mov	r9, r1
 8004bf0:	ec51 0b18 	vmov	r0, r1, d8
 8004bf4:	f7fb fd28 	bl	8000648 <__aeabi_dmul>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	4649      	mov	r1, r9
 8004c00:	f7fb fb6a 	bl	80002d8 <__aeabi_dsub>
 8004c04:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <mouseOdometory+0x1b4>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	f7fb fd1e 	bl	8000648 <__aeabi_dmul>
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	6920      	ldr	r0, [r4, #16]
 8004c10:	4689      	mov	r9, r1
 8004c12:	f7fb fcc1 	bl	8000598 <__aeabi_f2d>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	f7fb fb5d 	bl	80002dc <__adddf3>
 8004c22:	f7fc f809 	bl	8000c38 <__aeabi_d2f>
 8004c26:	4603      	mov	r3, r0
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004c28:	4639      	mov	r1, r7
 8004c2a:	4630      	mov	r0, r6
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	461e      	mov	r6, r3
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004c30:	ec53 2b19 	vmov	r2, r3, d9
 8004c34:	f7fb fd08 	bl	8000648 <__aeabi_dmul>
 8004c38:	ec53 2b18 	vmov	r2, r3, d8
 8004c3c:	4680      	mov	r8, r0
 8004c3e:	4689      	mov	r9, r1
 8004c40:	4650      	mov	r0, sl
 8004c42:	4659      	mov	r1, fp
 8004c44:	f7fb fd00 	bl	8000648 <__aeabi_dmul>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	4649      	mov	r1, r9
 8004c50:	f7fb fb44 	bl	80002dc <__adddf3>
 8004c54:	4b29      	ldr	r3, [pc, #164]	; (8004cfc <mouseOdometory+0x1b4>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	f7fb fcf6 	bl	8000648 <__aeabi_dmul>
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	6960      	ldr	r0, [r4, #20]
 8004c60:	4689      	mov	r9, r1
 8004c62:	f7fb fc99 	bl	8000598 <__aeabi_f2d>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	f7fb fb35 	bl	80002dc <__adddf3>
 8004c72:	f7fb ffe1 	bl	8000c38 <__aeabi_d2f>

  // 旋回ぶん補正 X方向は誤差に埋もれてしまう。パラメーター調整を省略するために無効化
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 8004c76:	4652      	mov	r2, sl
 8004c78:	465b      	mov	r3, fp
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004c7a:	4680      	mov	r8, r0
 8004c7c:	6160      	str	r0, [r4, #20]
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 8004c7e:	4920      	ldr	r1, [pc, #128]	; (8004d00 <mouseOdometory+0x1b8>)
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7fb fb29 	bl	80002d8 <__aeabi_dsub>
 8004c86:	a318      	add	r3, pc, #96	; (adr r3, 8004ce8 <mouseOdometory+0x1a0>)
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f7fb fcdc 	bl	8000648 <__aeabi_dmul>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4630      	mov	r0, r6
 8004c94:	460f      	mov	r7, r1
 8004c96:	4616      	mov	r6, r2
 8004c98:	f7fb fc7e 	bl	8000598 <__aeabi_f2d>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	f7fb fb1a 	bl	80002dc <__adddf3>
 8004ca8:	f7fb ffc6 	bl	8000c38 <__aeabi_d2f>
 8004cac:	61a0      	str	r0, [r4, #24]
  //  +(0.009 * sin(imu.yaw_angle_rad));
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 8004cae:	4640      	mov	r0, r8
 8004cb0:	f7fb fc72 	bl	8000598 <__aeabi_f2d>
 8004cb4:	a30c      	add	r3, pc, #48	; (adr r3, 8004ce8 <mouseOdometory+0x1a0>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	4606      	mov	r6, r0
 8004cbc:	460f      	mov	r7, r1
 8004cbe:	ec51 0b19 	vmov	r0, r1, d9
 8004cc2:	f7fb fcc1 	bl	8000648 <__aeabi_dmul>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4630      	mov	r0, r6
 8004ccc:	4639      	mov	r1, r7
 8004cce:	f7fb fb03 	bl	80002d8 <__aeabi_dsub>
 8004cd2:	f7fb ffb1 	bl	8000c38 <__aeabi_d2f>
  //  +(0.009 * cos(imu.yaw_angle_rad) - 0.009);

  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
}
 8004cd6:	ecbd 8b04 	vpop	{d8-d9}
  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8004cda:	63a5      	str	r5, [r4, #56]	; 0x38
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 8004cdc:	61e0      	str	r0, [r4, #28]
}
 8004cde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce2:	bf00      	nop
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	4189374c 	.word	0x4189374c
 8004cec:	3fb0e560 	.word	0x3fb0e560
 8004cf0:	2000082c 	.word	0x2000082c
 8004cf4:	3b03126f 	.word	0x3b03126f
 8004cf8:	2000079c 	.word	0x2000079c
 8004cfc:	3fe00000 	.word	0x3fe00000
 8004d00:	3ff00000 	.word	0x3ff00000
 8004d04:	00000000 	.word	0x00000000

08004d08 <omniOdometory>:

void omniOdometory()
{
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	ed2d 8b0a 	vpush	{d8-d12}
 8004d10:	4ee9      	ldr	r6, [pc, #932]	; (80050b8 <omniOdometory+0x3b0>)
 8004d12:	b087      	sub	sp, #28
 8004d14:	4634      	mov	r4, r6
 8004d16:	f106 0510 	add.w	r5, r6, #16

  for (int i = 0; i < 4; i++) {
    if (isnan(motor.enc_angle[i])) {
      motor.enc_angle[i] = 0;
    }
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004d1a:	ecb4 0a01 	vldmia	r4!, {s0}
 8004d1e:	edd4 0a04 	vldr	s1, [r4, #16]
 8004d22:	f000 ff41 	bl	8005ba8 <getAngleDiff>
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 8004d26:	f854 3c04 	ldr.w	r3, [r4, #-4]
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004d2a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  for (int i = 0; i < 4; i++) {
 8004d2e:	42ac      	cmp	r4, r5
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 8004d30:	6123      	str	r3, [r4, #16]
  for (int i = 0; i < 4; i++) {
 8004d32:	d1f2      	bne.n	8004d1a <omniOdometory+0x12>
  }

  // float robot_rotation_adj;
  // robot_rotation_adj = normalizeAngle(imu.yaw_angle_rad - imu.pre_yaw_angle_rad) * OMNI_ROTATION_LENGTH;  // mm

  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004d34:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004d36:	f8df a3a4 	ldr.w	sl, [pc, #932]	; 80050dc <omniOdometory+0x3d4>
  // vision座標だけ更新されているが、vision_update_cycle_cntが0になっていない場合に、1cycleだけpositionが飛ぶ

  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
  for (int i = 0; i < 2; i++) {
    enqueue(integ.odom_log[i], omni.odom_speed[i]);
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8004d3a:	ed9f 9ae0 	vldr	s18, [pc, #896]	; 80050bc <omniOdometory+0x3b4>
 8004d3e:	f8df b3a0 	ldr.w	fp, [pc, #928]	; 80050e0 <omniOdometory+0x3d8>
  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004d42:	f7fb fc29 	bl	8000598 <__aeabi_f2d>
 8004d46:	a3d4      	add	r3, pc, #848	; (adr r3, 8005098 <omniOdometory+0x390>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f7fb fc7c 	bl	8000648 <__aeabi_dmul>
 8004d50:	f7fb ff72 	bl	8000c38 <__aeabi_d2f>
 8004d54:	4605      	mov	r5, r0
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004d56:	6b30      	ldr	r0, [r6, #48]	; 0x30
  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004d58:	f8ca 5000 	str.w	r5, [sl]
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004d5c:	f7fb fc1c 	bl	8000598 <__aeabi_f2d>
 8004d60:	a3cd      	add	r3, pc, #820	; (adr r3, 8005098 <omniOdometory+0x390>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fc6f 	bl	8000648 <__aeabi_dmul>
 8004d6a:	f7fb ff65 	bl	8000c38 <__aeabi_d2f>
 8004d6e:	4604      	mov	r4, r0
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 8004d70:	4628      	mov	r0, r5
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004d72:	f8ca 4004 	str.w	r4, [sl, #4]
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 8004d76:	f7fb fc0f 	bl	8000598 <__aeabi_f2d>
 8004d7a:	4bd1      	ldr	r3, [pc, #836]	; (80050c0 <omniOdometory+0x3b8>)
 8004d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d80:	4680      	mov	r8, r0
 8004d82:	ee17 0a90 	vmov	r0, s15
 8004d86:	edcd 7a00 	vstr	s15, [sp]
 8004d8a:	4689      	mov	r9, r1
 8004d8c:	f7fb fc04 	bl	8000598 <__aeabi_f2d>
 8004d90:	ec41 0b10 	vmov	d0, r0, r1
 8004d94:	ec41 0b18 	vmov	d8, r0, r1
 8004d98:	f008 fdb2 	bl	800d900 <cos>
 8004d9c:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	4bc8      	ldr	r3, [pc, #800]	; (80050c4 <omniOdometory+0x3bc>)
 8004da4:	eeb0 ca40 	vmov.f32	s24, s0
 8004da8:	eef0 ca60 	vmov.f32	s25, s1
 8004dac:	f103 021c 	add.w	r2, r3, #28
 8004db0:	4620      	mov	r0, r4
 8004db2:	9204      	str	r2, [sp, #16]
 8004db4:	f7fb fbf0 	bl	8000598 <__aeabi_f2d>
 8004db8:	eeb0 0a48 	vmov.f32	s0, s16
 8004dbc:	eef0 0a68 	vmov.f32	s1, s17
 8004dc0:	4606      	mov	r6, r0
 8004dc2:	460f      	mov	r7, r1
 8004dc4:	f008 fdf0 	bl	800d9a8 <sin>
 8004dc8:	ec53 2b1c 	vmov	r2, r3, d12
 8004dcc:	eeb0 ba40 	vmov.f32	s22, s0
 8004dd0:	eef0 ba60 	vmov.f32	s23, s1
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	f7fb fc36 	bl	8000648 <__aeabi_dmul>
 8004ddc:	ec53 2b1b 	vmov	r2, r3, d11
 8004de0:	4604      	mov	r4, r0
 8004de2:	460d      	mov	r5, r1
 8004de4:	4630      	mov	r0, r6
 8004de6:	4639      	mov	r1, r7
 8004de8:	f7fb fc2e 	bl	8000648 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fa72 	bl	80002dc <__adddf3>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8004dfe:	460d      	mov	r5, r1
 8004e00:	f7fb fbca 	bl	8000598 <__aeabi_f2d>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4620      	mov	r0, r4
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	f7fb fa66 	bl	80002dc <__adddf3>
 8004e10:	f7fb ff12 	bl	8000c38 <__aeabi_d2f>
 8004e14:	9003      	str	r0, [sp, #12]
 8004e16:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8004e1a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8004e1e:	f7fb fbbb 	bl	8000598 <__aeabi_f2d>
 8004e22:	ec53 2b1b 	vmov	r2, r3, d11
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	f7fb fc0b 	bl	8000648 <__aeabi_dmul>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4620      	mov	r0, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7fb fa4f 	bl	80002dc <__adddf3>
 8004e3e:	4632      	mov	r2, r6
 8004e40:	463b      	mov	r3, r7
 8004e42:	4604      	mov	r4, r0
 8004e44:	460d      	mov	r5, r1
 8004e46:	ec51 0b1c 	vmov	r0, r1, d12
 8004e4a:	f7fb fbfd 	bl	8000648 <__aeabi_dmul>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4620      	mov	r0, r4
 8004e54:	4629      	mov	r1, r5
 8004e56:	f7fb fa3f 	bl	80002d8 <__aeabi_dsub>
 8004e5a:	f7fb feed 	bl	8000c38 <__aeabi_d2f>
  omni.pre_odom[1] = omni.odom[1];
 8004e5e:	edda 8a07 	vldr	s17, [sl, #28]
  omni.pre_odom[0] = omni.odom[0];
 8004e62:	ed9a aa06 	vldr	s20, [sl, #24]
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8004e66:	4604      	mov	r4, r0
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8004e68:	9803      	ldr	r0, [sp, #12]
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8004e6a:	f8ca 402c 	str.w	r4, [sl, #44]	; 0x2c
  omni.pre_odom[0] = omni.odom[0];
 8004e6e:	ed8a aa08 	vstr	s20, [sl, #32]
  omni.pre_odom[1] = omni.odom[1];
 8004e72:	edca 8a09 	vstr	s17, [sl, #36]	; 0x24
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8004e76:	f7fb fb8f 	bl	8000598 <__aeabi_f2d>
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	460f      	mov	r7, r1
 8004e80:	f7fb fb8a 	bl	8000598 <__aeabi_f2d>
 8004e84:	a386      	add	r3, pc, #536	; (adr r3, 80050a0 <omniOdometory+0x398>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	4680      	mov	r8, r0
 8004e8c:	4689      	mov	r9, r1
 8004e8e:	4630      	mov	r0, r6
 8004e90:	4639      	mov	r1, r7
 8004e92:	f7fb fbd9 	bl	8000648 <__aeabi_dmul>
 8004e96:	a384      	add	r3, pc, #528	; (adr r3, 80050a8 <omniOdometory+0x3a0>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	f7fb fbd0 	bl	8000648 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4620      	mov	r0, r4
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f7fb fa12 	bl	80002d8 <__aeabi_dsub>
 8004eb4:	4b84      	ldr	r3, [pc, #528]	; (80050c8 <omniOdometory+0x3c0>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f7fb fbc6 	bl	8000648 <__aeabi_dmul>
 8004ebc:	4b83      	ldr	r3, [pc, #524]	; (80050cc <omniOdometory+0x3c4>)
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	ec51 0b1c 	vmov	r0, r1, d12
 8004ec8:	f7fb fa06 	bl	80002d8 <__aeabi_dsub>
 8004ecc:	a378      	add	r3, pc, #480	; (adr r3, 80050b0 <omniOdometory+0x3a8>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f7fb fbb9 	bl	8000648 <__aeabi_dmul>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4620      	mov	r0, r4
 8004edc:	4629      	mov	r1, r5
 8004ede:	f7fb f9fd 	bl	80002dc <__adddf3>
 8004ee2:	f7fb fea9 	bl	8000c38 <__aeabi_d2f>
 8004ee6:	ee08 0a10 	vmov	s16, r0
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004eea:	a36f      	add	r3, pc, #444	; (adr r3, 80050a8 <omniOdometory+0x3a0>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	4639      	mov	r1, r7
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8004ef4:	ed8a 8a06 	vstr	s16, [sl, #24]
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004ef8:	f7fb fba6 	bl	8000648 <__aeabi_dmul>
 8004efc:	a368      	add	r3, pc, #416	; (adr r3, 80050a0 <omniOdometory+0x398>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	4604      	mov	r4, r0
 8004f04:	460d      	mov	r5, r1
 8004f06:	4640      	mov	r0, r8
 8004f08:	4649      	mov	r1, r9
 8004f0a:	f7fb fb9d 	bl	8000648 <__aeabi_dmul>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7fb f9e1 	bl	80002dc <__adddf3>
 8004f1a:	4b6b      	ldr	r3, [pc, #428]	; (80050c8 <omniOdometory+0x3c0>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f7fb fb93 	bl	8000648 <__aeabi_dmul>
 8004f22:	a363      	add	r3, pc, #396	; (adr r3, 80050b0 <omniOdometory+0x3a8>)
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	4604      	mov	r4, r0
 8004f2a:	460d      	mov	r5, r1
 8004f2c:	ec51 0b1b 	vmov	r0, r1, d11
 8004f30:	f7fb fb8a 	bl	8000648 <__aeabi_dmul>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4620      	mov	r0, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7fb f9ce 	bl	80002dc <__adddf3>
 8004f40:	f7fb fe7a 	bl	8000c38 <__aeabi_d2f>
 8004f44:	ee07 0a10 	vmov	s14, r0
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004f48:	eddf 6a61 	vldr	s13, [pc, #388]	; 80050d0 <omniOdometory+0x3c8>
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004f4c:	f8ca 001c 	str.w	r0, [sl, #28]
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004f50:	ee78 7a4a 	vsub.f32	s15, s16, s20
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8004f54:	ee37 8a68 	vsub.f32	s16, s14, s17
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004f58:	ee67 7aa6 	vmul.f32	s15, s15, s13
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8004f5c:	ee28 8a26 	vmul.f32	s16, s16, s13
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8004f60:	ee17 0a90 	vmov	r0, s15
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004f64:	edca 7a0c 	vstr	s15, [sl, #48]	; 0x30
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8004f68:	ed8a 8a0d 	vstr	s16, [sl, #52]	; 0x34
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8004f6c:	f7fb fb14 	bl	8000598 <__aeabi_f2d>
 8004f70:	460f      	mov	r7, r1
 8004f72:	9900      	ldr	r1, [sp, #0]
 8004f74:	4606      	mov	r6, r0
 8004f76:	f081 4000 	eor.w	r0, r1, #2147483648	; 0x80000000
 8004f7a:	f7fb fb0d 	bl	8000598 <__aeabi_f2d>
 8004f7e:	ec41 0b10 	vmov	d0, r0, r1
 8004f82:	ec41 0b1a 	vmov	d10, r0, r1
 8004f86:	f008 fcbb 	bl	800d900 <cos>
 8004f8a:	ee18 0a10 	vmov	r0, s16
 8004f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8004f92:	eef0 8a60 	vmov.f32	s17, s1
 8004f96:	f7fb faff 	bl	8000598 <__aeabi_f2d>
 8004f9a:	ec53 2b18 	vmov	r2, r3, d8
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	f7fb fb4f 	bl	8000648 <__aeabi_dmul>
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	4680      	mov	r8, r0
 8004fb0:	4689      	mov	r9, r1
 8004fb2:	ec51 0b1b 	vmov	r0, r1, d11
 8004fb6:	f7fb fb47 	bl	8000648 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	f7fb f98b 	bl	80002dc <__adddf3>
 8004fc6:	f7fb fe37 	bl	8000c38 <__aeabi_d2f>
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004fca:	eeb0 0a4a 	vmov.f32	s0, s20
 8004fce:	eef0 0a6a 	vmov.f32	s1, s21
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8004fd2:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004fd6:	f008 fce7 	bl	800d9a8 <sin>
 8004fda:	4630      	mov	r0, r6
 8004fdc:	ec53 2b10 	vmov	r2, r3, d0
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	f7fb fb31 	bl	8000648 <__aeabi_dmul>
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	462b      	mov	r3, r5
 8004fea:	4604      	mov	r4, r0
 8004fec:	460d      	mov	r5, r1
 8004fee:	ec51 0b18 	vmov	r0, r1, d8
 8004ff2:	f7fb fb29 	bl	8000648 <__aeabi_dmul>
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f7fb f96d 	bl	80002dc <__adddf3>
 8005002:	f7fb fe19 	bl	8000c38 <__aeabi_d2f>
  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <omniOdometory+0x3bc>)
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8005008:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
 800500c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	ee07 3a90 	vmov	s15, r3
 8005014:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005018:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    enqueue(integ.odom_log[i], omni.odom_speed[i]);
 800501c:	ecb5 0a01 	vldmia	r5!, {s0}
 8005020:	f8db 0000 	ldr.w	r0, [fp]
 8005024:	f000 f942 	bl	80052ac <enqueue>
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8005028:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <omniOdometory+0x3cc>)
 800502a:	f85b 0b04 	ldr.w	r0, [fp], #4
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503a:	ee77 7a88 	vadd.f32	s15, s15, s16
 800503e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005042:	ee17 1a90 	vmov	r1, s15
 8005046:	f000 f95b 	bl	8005300 <sumNewestN>
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 800504a:	ecf4 7a01 	vldmia	r4!, {s15}
  for (int i = 0; i < 2; i++) {
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <omniOdometory+0x3d0>)
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 8005050:	ed94 7a01 	vldr	s14, [r4, #4]
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8005054:	ee20 0a09 	vmul.f32	s0, s0, s18
  for (int i = 0; i < 2; i++) {
 8005058:	459b      	cmp	fp, r3
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 800505a:	ee70 7a27 	vadd.f32	s15, s0, s15
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 800505e:	ed8b 0a01 	vstr	s0, [fp, #4]
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 8005062:	ee37 7a67 	vsub.f32	s14, s14, s15
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 8005066:	edcb 7a03 	vstr	s15, [fp, #12]
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 800506a:	ed8b 7a05 	vstr	s14, [fp, #20]
  for (int i = 0; i < 2; i++) {
 800506e:	d1d5      	bne.n	800501c <omniOdometory+0x314>
  }

  float target_diff[2], move_diff[2];
  for (int i = 0; i < 2; i++) {
    target_diff[i] = ai_cmd.global_robot_position[i] - ai_cmd.global_target_position[i];  // Visionが更新された時点での現在地とtargetの距離
 8005070:	4c14      	ldr	r4, [pc, #80]	; (80050c4 <omniOdometory+0x3bc>)
 8005072:	ed94 7a07 	vldr	s14, [r4, #28]
 8005076:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    move_diff[i] = ai_cmd.global_robot_position[i] - integ.vision_based_position[i];  // Visionとtargetが更新されてからの移動量
  }

  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));  
 800507a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800507e:	ee17 0a90 	vmov	r0, s15
 8005082:	f7fb fa89 	bl	8000598 <__aeabi_f2d>
    target_diff[i] = ai_cmd.global_robot_position[i] - ai_cmd.global_target_position[i];  // Visionが更新された時点での現在地とtargetの距離
 8005086:	ed94 7a08 	vldr	s14, [r4, #32]
 800508a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));  
 800508e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005092:	4602      	mov	r2, r0
 8005094:	e026      	b.n	80050e4 <omniOdometory+0x3dc>
 8005096:	bf00      	nop
 8005098:	3126e979 	.word	0x3126e979
 800509c:	3facac08 	.word	0x3facac08
 80050a0:	667f3bcc 	.word	0x667f3bcc
 80050a4:	bfe6a09e 	.word	0xbfe6a09e
 80050a8:	667f3bcd 	.word	0x667f3bcd
 80050ac:	3fe6a09e 	.word	0x3fe6a09e
 80050b0:	1cac0831 	.word	0x1cac0831
 80050b4:	3fbb645a 	.word	0x3fbb645a
 80050b8:	200007f4 	.word	0x200007f4
 80050bc:	3b03126f 	.word	0x3b03126f
 80050c0:	2000079c 	.word	0x2000079c
 80050c4:	20000620 	.word	0x20000620
 80050c8:	3fe00000 	.word	0x3fe00000
 80050cc:	3ff00000 	.word	0x3ff00000
 80050d0:	43fa0000 	.word	0x43fa0000
 80050d4:	20000704 	.word	0x20000704
 80050d8:	200007b8 	.word	0x200007b8
 80050dc:	2000086c 	.word	0x2000086c
 80050e0:	200007b0 	.word	0x200007b0
 80050e4:	460b      	mov	r3, r1
 80050e6:	ee17 0a90 	vmov	r0, s15
 80050ea:	e9cd 2300 	strd	r2, r3, [sp]
 80050ee:	f7fb fa53 	bl	8000598 <__aeabi_f2d>
 80050f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f6:	4606      	mov	r6, r0
 80050f8:	460f      	mov	r7, r1
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	f7fb faa3 	bl	8000648 <__aeabi_dmul>
 8005102:	4632      	mov	r2, r6
 8005104:	4604      	mov	r4, r0
 8005106:	460d      	mov	r5, r1
 8005108:	463b      	mov	r3, r7
 800510a:	4630      	mov	r0, r6
 800510c:	4639      	mov	r1, r7
 800510e:	f7fb fa9b 	bl	8000648 <__aeabi_dmul>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb f8df 	bl	80002dc <__adddf3>
 800511e:	ec41 0b10 	vmov	d0, r0, r1
 8005122:	f008 fbc1 	bl	800d8a8 <sqrt>
 8005126:	ec51 0b10 	vmov	r0, r1, d0
 800512a:	f7fb fd85 	bl	8000c38 <__aeabi_d2f>
  integ.move_dist = sqrt(pow(integ.position_diff[0], 2) + pow(integ.position_diff[1], 2)); 
 800512e:	4c16      	ldr	r4, [pc, #88]	; (8005188 <omniOdometory+0x480>)
  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));  
 8005130:	4603      	mov	r3, r0
 8005132:	6363      	str	r3, [r4, #52]	; 0x34
  integ.move_dist = sqrt(pow(integ.position_diff[0], 2) + pow(integ.position_diff[1], 2)); 
 8005134:	69a0      	ldr	r0, [r4, #24]
 8005136:	f7fb fa2f 	bl	8000598 <__aeabi_f2d>
 800513a:	4606      	mov	r6, r0
 800513c:	69e0      	ldr	r0, [r4, #28]
 800513e:	460f      	mov	r7, r1
 8005140:	f7fb fa2a 	bl	8000598 <__aeabi_f2d>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	f7fb fa7e 	bl	8000648 <__aeabi_dmul>
 800514c:	4632      	mov	r2, r6
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
 8005152:	463b      	mov	r3, r7
 8005154:	4630      	mov	r0, r6
 8005156:	4639      	mov	r1, r7
 8005158:	f7fb fa76 	bl	8000648 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4620      	mov	r0, r4
 8005162:	4629      	mov	r1, r5
 8005164:	f7fb f8ba 	bl	80002dc <__adddf3>
 8005168:	ec41 0b10 	vmov	d0, r0, r1
 800516c:	f008 fb9c 	bl	800d8a8 <sqrt>
 8005170:	ec51 0b10 	vmov	r0, r1, d0
 8005174:	f7fb fd60 	bl	8000c38 <__aeabi_d2f>
 8005178:	4c03      	ldr	r4, [pc, #12]	; (8005188 <omniOdometory+0x480>)
 800517a:	6320      	str	r0, [r4, #48]	; 0x30
 800517c:	b007      	add	sp, #28
 800517e:	ecbd 8b0a 	vpop	{d8-d12}
 8005182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005186:	bf00      	nop
 8005188:	200007b0 	.word	0x200007b0
 800518c:	00000000 	.word	0x00000000

08005190 <omni_move>:

const float sinM4 = sin(150 * M_PI / 180);
const float cosM4 = cos(150 * M_PI / 180);

void omni_move(float vel_y_robot, float vel_x_robot, float omega_roboot, float duty_limit)
{
 8005190:	b510      	push	{r4, lr}
 8005192:	ee11 0a10 	vmov	r0, s2
 8005196:	ed2d 8b04 	vpush	{d8-d9}
 800519a:	eef0 8a61 	vmov.f32	s17, s3
 800519e:	eeb0 8a60 	vmov.f32	s16, s1
 80051a2:	eeb0 9a40 	vmov.f32	s18, s0
  float rotation_omega_motor;

  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 80051a6:	f7fb f9f7 	bl	8000598 <__aeabi_f2d>
 80051aa:	a334      	add	r3, pc, #208	; (adr r3, 800527c <omni_move+0xec>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb fa4a 	bl	8000648 <__aeabi_dmul>
 80051b4:	f7fb fd40 	bl	8000c38 <__aeabi_d2f>

  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 80051b8:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <omni_move+0xd8>)
 80051ba:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800526c <omni_move+0xdc>
 80051be:	ed93 7a00 	vldr	s14, [r3]
 80051c2:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8005270 <omni_move+0xe0>
 80051c6:	4c2b      	ldr	r4, [pc, #172]	; (8005274 <omni_move+0xe4>)
 80051c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051cc:	eec6 5a87 	vdiv.f32	s11, s13, s14
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 80051d0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005278 <omni_move+0xe8>
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 80051d4:	ee69 7a27 	vmul.f32	s15, s18, s15
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 80051d8:	ee29 7a07 	vmul.f32	s14, s18, s14
 80051dc:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80051e0:	eeb0 6a67 	vmov.f32	s12, s15
 80051e4:	eea8 7a24 	vfma.f32	s14, s16, s9
 80051e8:	eea8 6a05 	vfma.f32	s12, s16, s10
 80051ec:	eed8 7a05 	vfnms.f32	s15, s16, s10
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 80051f0:	ee38 0a09 	vadd.f32	s0, s16, s18
 80051f4:	ee05 0a10 	vmov	s10, r0
  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 80051f8:	ee06 0a90 	vmov	s13, r0
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 80051fc:	eea0 5a24 	vfma.f32	s10, s0, s9
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005200:	ee36 6a86 	vadd.f32	s12, s13, s12
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005204:	ee36 7a87 	vadd.f32	s14, s13, s14
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8005208:	ee77 7aa6 	vadd.f32	s15, s15, s13
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 800520c:	ee27 7a25 	vmul.f32	s14, s14, s11
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005210:	ee66 6a25 	vmul.f32	s13, s12, s11
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8005214:	ee67 7aa5 	vmul.f32	s15, s15, s11
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005218:	ee25 6a25 	vmul.f32	s12, s10, s11
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 800521c:	edc4 6a07 	vstr	s13, [r4, #28]
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005220:	ed84 7a08 	vstr	s14, [r4, #32]
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005224:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8005228:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28

  actuator_motor1(output.motor_voltage[0], duty_limit);
 800522c:	ed94 0a07 	vldr	s0, [r4, #28]
 8005230:	eef0 0a68 	vmov.f32	s1, s17
 8005234:	f7fb fece 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(output.motor_voltage[1], duty_limit);
 8005238:	ed94 0a08 	vldr	s0, [r4, #32]
 800523c:	eef0 0a68 	vmov.f32	s1, s17
 8005240:	f7fb fee8 	bl	8001014 <actuator_motor2>
  actuator_motor3(output.motor_voltage[2], duty_limit);
 8005244:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005248:	eef0 0a68 	vmov.f32	s1, s17
 800524c:	f7fb ff02 	bl	8001054 <actuator_motor3>
  actuator_motor4(output.motor_voltage[3], duty_limit);
 8005250:	eef0 0a68 	vmov.f32	s1, s17
}
 8005254:	ecbd 8b04 	vpop	{d8-d9}
  actuator_motor4(output.motor_voltage[3], duty_limit);
 8005258:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
}
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor4(output.motor_voltage[3], duty_limit);
 8005260:	f7fb bf18 	b.w	8001094 <actuator_motor4>
 8005264:	f3af 8000 	nop.w
 8005268:	20000004 	.word	0x20000004
 800526c:	3f5db3d7 	.word	0x3f5db3d7
 8005270:	bf3504f3 	.word	0xbf3504f3
 8005274:	200008ac 	.word	0x200008ac
 8005278:	3f3504f3 	.word	0x3f3504f3
 800527c:	47ae147b 	.word	0x47ae147b
 8005280:	3fb47ae1 	.word	0x3fb47ae1

08005284 <initRingBuffer>:



// リングバッファの初期化
RingBuffer * initRingBuffer(int size)
{
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4605      	mov	r5, r0
  RingBuffer * rb = (RingBuffer *)malloc(sizeof(RingBuffer));
 8005288:	2014      	movs	r0, #20
 800528a:	f005 fb75 	bl	800a978 <malloc>
 800528e:	4604      	mov	r4, r0
  rb->buffer = (float *)malloc(size * sizeof(float));
 8005290:	00a8      	lsls	r0, r5, #2
 8005292:	f005 fb71 	bl	800a978 <malloc>
  rb->size = size;
  rb->front = 0;
 8005296:	2300      	movs	r3, #0
  rb->rear = -1;
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
  rb->size = size;
 800529c:	e9c4 0500 	strd	r0, r5, [r4]
  rb->rear = -1;
 80052a0:	e9c4 3202 	strd	r3, r2, [r4, #8]
  rb->count = 0;
 80052a4:	6123      	str	r3, [r4, #16]
  return rb;
}
 80052a6:	4620      	mov	r0, r4
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	bf00      	nop

080052ac <enqueue>:

// リングバッファに要素を追加
void enqueue(RingBuffer * rb, float data)
{
  if (rb->count < rb->size) {
 80052ac:	6901      	ldr	r1, [r0, #16]
 80052ae:	6843      	ldr	r3, [r0, #4]
 80052b0:	4299      	cmp	r1, r3
 80052b2:	da0e      	bge.n	80052d2 <enqueue+0x26>
    rb->rear = (rb->rear + 1) % rb->size;
 80052b4:	68c2      	ldr	r2, [r0, #12]
 80052b6:	3201      	adds	r2, #1
 80052b8:	fb92 fcf3 	sdiv	ip, r2, r3
 80052bc:	fb03 231c 	mls	r3, r3, ip, r2
    rb->buffer[rb->rear] = data;
 80052c0:	6802      	ldr	r2, [r0, #0]
    rb->rear = (rb->rear + 1) % rb->size;
 80052c2:	60c3      	str	r3, [r0, #12]
    rb->count++;
 80052c4:	3101      	adds	r1, #1
    rb->buffer[rb->rear] = data;
 80052c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80052ca:	ed82 0a00 	vstr	s0, [r2]
    rb->count++;
 80052ce:	6101      	str	r1, [r0, #16]
 80052d0:	4770      	bx	lr
  } else {
    // バッファがいっぱいの場合は古いデータを上書き
    rb->rear = (rb->rear + 1) % rb->size;
    rb->front = (rb->front + 1) % rb->size;
 80052d2:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
{
 80052d6:	b410      	push	{r4}
    rb->rear = (rb->rear + 1) % rb->size;
 80052d8:	3201      	adds	r2, #1
    rb->buffer[rb->rear] = data;
 80052da:	6804      	ldr	r4, [r0, #0]
    rb->rear = (rb->rear + 1) % rb->size;
 80052dc:	fb92 fcf3 	sdiv	ip, r2, r3
    rb->front = (rb->front + 1) % rb->size;
 80052e0:	3101      	adds	r1, #1
    rb->rear = (rb->rear + 1) % rb->size;
 80052e2:	fb03 221c 	mls	r2, r3, ip, r2
 80052e6:	60c2      	str	r2, [r0, #12]
    rb->front = (rb->front + 1) % rb->size;
 80052e8:	fb91 fcf3 	sdiv	ip, r1, r3
    rb->buffer[rb->rear] = data;
 80052ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    rb->front = (rb->front + 1) % rb->size;
 80052f0:	fb03 111c 	mls	r1, r3, ip, r1
 80052f4:	6081      	str	r1, [r0, #8]
  }
}
 80052f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    rb->buffer[rb->rear] = data;
 80052fa:	ed82 0a00 	vstr	s0, [r2]
}
 80052fe:	4770      	bx	lr

08005300 <sumNewestN>:
}

// リングバッファ上のデータを新しい順にn個加算した結果を取得
float sumNewestN(RingBuffer * rb, int n)
{
  if (n <= 0 || n > rb->count) {
 8005300:	2900      	cmp	r1, #0
 8005302:	dd1b      	ble.n	800533c <sumNewestN+0x3c>
 8005304:	6903      	ldr	r3, [r0, #16]
 8005306:	428b      	cmp	r3, r1
 8005308:	db18      	blt.n	800533c <sumNewestN+0x3c>
{
 800530a:	b410      	push	{r4}
    // 無効なnの値の場合はエラーとして0.0を返す
    return 0.0;
  }

  int index = rb->rear;
 800530c:	68c3      	ldr	r3, [r0, #12]
  float sum = 0.0;
 800530e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005344 <sumNewestN+0x44>
  for (int i = 0; i < n; i++) {
    sum += rb->buffer[index];
    index = (index - 1 + rb->size) % rb->size;
 8005312:	e9d0 4000 	ldrd	r4, r0, [r0]
  for (int i = 0; i < n; i++) {
 8005316:	2200      	movs	r2, #0
    sum += rb->buffer[index];
 8005318:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800531c:	eddc 7a00 	vldr	s15, [ip]
    index = (index - 1 + rb->size) % rb->size;
 8005320:	3b01      	subs	r3, #1
  for (int i = 0; i < n; i++) {
 8005322:	3201      	adds	r2, #1
    index = (index - 1 + rb->size) % rb->size;
 8005324:	4403      	add	r3, r0
  for (int i = 0; i < n; i++) {
 8005326:	4291      	cmp	r1, r2
    index = (index - 1 + rb->size) % rb->size;
 8005328:	fb93 fcf0 	sdiv	ip, r3, r0
    sum += rb->buffer[index];
 800532c:	ee30 0a27 	vadd.f32	s0, s0, s15
    index = (index - 1 + rb->size) % rb->size;
 8005330:	fb00 331c 	mls	r3, r0, ip, r3
  for (int i = 0; i < n; i++) {
 8005334:	d1f0      	bne.n	8005318 <sumNewestN+0x18>
  }
  return sum;
}
 8005336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800533a:	4770      	bx	lr
    return 0.0;
 800533c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005344 <sumNewestN+0x44>
}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	00000000 	.word	0x00000000

08005348 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005348:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800534a:	4811      	ldr	r0, [pc, #68]	; (8005390 <MX_SPI1_Init+0x48>)
 800534c:	4c11      	ldr	r4, [pc, #68]	; (8005394 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800534e:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005352:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005354:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005358:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800535c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005360:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005364:	2420      	movs	r4, #32
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005366:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8005368:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800536a:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800536c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005370:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005374:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005378:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800537c:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800537e:	f003 f949 	bl	8008614 <HAL_SPI_Init>
 8005382:	b900      	cbnz	r0, 8005386 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005384:	bd10      	pop	{r4, pc}
 8005386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800538a:	f7fe bd4b 	b.w	8003e24 <Error_Handler>
 800538e:	bf00      	nop
 8005390:	20000b28 	.word	0x20000b28
 8005394:	40013000 	.word	0x40013000

08005398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005398:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_SPI_MspInit+0x70>)
 800539c:	6801      	ldr	r1, [r0, #0]
{
 800539e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a0:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 80053a2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80053ac:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 80053ae:	d002      	beq.n	80053b6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80053b0:	b009      	add	sp, #36	; 0x24
 80053b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80053be:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005400 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053c8:	661a      	str	r2, [r3, #96]	; 0x60
 80053ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053d0:	9200      	str	r2, [sp, #0]
 80053d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	64da      	str	r2, [r3, #76]	; 0x4c
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053e6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80053ec:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053f0:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f4:	f002 f938 	bl	8007668 <HAL_GPIO_Init>
}
 80053f8:	b009      	add	sp, #36	; 0x24
 80053fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80053fe:	bf00      	nop
 8005400:	000000e0 	.word	0x000000e0
 8005404:	00000002 	.word	0x00000002
 8005408:	40013000 	.word	0x40013000

0800540c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_MspInit+0x30>)
 800540e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	661a      	str	r2, [r3, #96]	; 0x60
 8005416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8005418:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800541a:	f002 0201 	and.w	r2, r2, #1
 800541e:	9200      	str	r2, [sp, #0]
 8005420:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005422:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005428:	659a      	str	r2, [r3, #88]	; 0x58
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005434:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8005436:	f002 ba9d 	b.w	8007974 <HAL_PWREx_DisableUCPDDeadBattery>
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000

08005440 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop

08005444 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005444:	e7fe      	b.n	8005444 <HardFault_Handler>
 8005446:	bf00      	nop

08005448 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005448:	e7fe      	b.n	8005448 <MemManage_Handler>
 800544a:	bf00      	nop

0800544c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800544c:	e7fe      	b.n	800544c <BusFault_Handler>
 800544e:	bf00      	nop

08005450 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005450:	e7fe      	b.n	8005450 <UsageFault_Handler>
 8005452:	bf00      	nop

08005454 <SVC_Handler>:
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <DebugMon_Handler>:
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop

0800545c <PendSV_Handler>:
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop

08005460 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005460:	f000 bd3a 	b.w	8005ed8 <HAL_IncTick>

08005464 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <DMA1_Channel2_IRQHandler+0x8>)
 8005466:	f001 bcad 	b.w	8006dc4 <HAL_DMA_IRQHandler>
 800546a:	bf00      	nop
 800546c:	20000d44 	.word	0x20000d44

08005470 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <DMA1_Channel3_IRQHandler+0x8>)
 8005472:	f001 bca7 	b.w	8006dc4 <HAL_DMA_IRQHandler>
 8005476:	bf00      	nop
 8005478:	200003b4 	.word	0x200003b4

0800547c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <DMA1_Channel4_IRQHandler+0x8>)
 800547e:	f001 bca1 	b.w	8006dc4 <HAL_DMA_IRQHandler>
 8005482:	bf00      	nop
 8005484:	20000414 	.word	0x20000414

08005488 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005488:	4801      	ldr	r0, [pc, #4]	; (8005490 <DMA1_Channel5_IRQHandler+0x8>)
 800548a:	f001 bc9b 	b.w	8006dc4 <HAL_DMA_IRQHandler>
 800548e:	bf00      	nop
 8005490:	20000354 	.word	0x20000354

08005494 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <DMA1_Channel6_IRQHandler+0x8>)
 8005496:	f001 bc95 	b.w	8006dc4 <HAL_DMA_IRQHandler>
 800549a:	bf00      	nop
 800549c:	20000c24 	.word	0x20000c24

080054a0 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80054a0:	4801      	ldr	r0, [pc, #4]	; (80054a8 <DMA1_Channel7_IRQHandler+0x8>)
 80054a2:	f001 bc8f 	b.w	8006dc4 <HAL_DMA_IRQHandler>
 80054a6:	bf00      	nop
 80054a8:	20000c84 	.word	0x20000c84

080054ac <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80054ac:	4801      	ldr	r0, [pc, #4]	; (80054b4 <FDCAN1_IT0_IRQHandler+0x8>)
 80054ae:	f002 b817 	b.w	80074e0 <HAL_FDCAN_IRQHandler>
 80054b2:	bf00      	nop
 80054b4:	2000049c 	.word	0x2000049c

080054b8 <FDCAN1_IT1_IRQHandler>:
 80054b8:	4801      	ldr	r0, [pc, #4]	; (80054c0 <FDCAN1_IT1_IRQHandler+0x8>)
 80054ba:	f002 b811 	b.w	80074e0 <HAL_FDCAN_IRQHandler>
 80054be:	bf00      	nop
 80054c0:	2000049c 	.word	0x2000049c

080054c4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80054c4:	4801      	ldr	r0, [pc, #4]	; (80054cc <USART2_IRQHandler+0x8>)
 80054c6:	f004 ba43 	b.w	8009950 <HAL_UART_IRQHandler>
 80054ca:	bf00      	nop
 80054cc:	20000e38 	.word	0x20000e38

080054d0 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80054d0:	4801      	ldr	r0, [pc, #4]	; (80054d8 <TIM7_DAC_IRQHandler+0x8>)
 80054d2:	f003 bdb5 	b.w	8009040 <HAL_TIM_IRQHandler>
 80054d6:	bf00      	nop
 80054d8:	20000bd8 	.word	0x20000bd8

080054dc <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <FDCAN2_IT0_IRQHandler+0x8>)
 80054de:	f001 bfff 	b.w	80074e0 <HAL_FDCAN_IRQHandler>
 80054e2:	bf00      	nop
 80054e4:	20000500 	.word	0x20000500

080054e8 <FDCAN2_IT1_IRQHandler>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <FDCAN2_IT1_IRQHandler+0x8>)
 80054ea:	f001 bff9 	b.w	80074e0 <HAL_FDCAN_IRQHandler>
 80054ee:	bf00      	nop
 80054f0:	20000500 	.word	0x20000500

080054f4 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <LPUART1_IRQHandler+0x8>)
 80054f6:	f004 ba2b 	b.w	8009950 <HAL_UART_IRQHandler>
 80054fa:	bf00      	nop
 80054fc:	20000da8 	.word	0x20000da8

08005500 <DMA1_Channel8_IRQHandler>:
void DMA1_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005500:	4801      	ldr	r0, [pc, #4]	; (8005508 <DMA1_Channel8_IRQHandler+0x8>)
 8005502:	f001 bc5f 	b.w	8006dc4 <HAL_DMA_IRQHandler>
 8005506:	bf00      	nop
 8005508:	20000ce4 	.word	0x20000ce4

0800550c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800550c:	2001      	movs	r0, #1
 800550e:	4770      	bx	lr

08005510 <_kill>:

int _kill(int pid, int sig)
{
 8005510:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005512:	f006 fa7b 	bl	800ba0c <__errno>
 8005516:	2316      	movs	r3, #22
 8005518:	6003      	str	r3, [r0, #0]
	return -1;
}
 800551a:	f04f 30ff 	mov.w	r0, #4294967295
 800551e:	bd08      	pop	{r3, pc}

08005520 <_exit>:

void _exit (int status)
{
 8005520:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005522:	f006 fa73 	bl	800ba0c <__errno>
 8005526:	2316      	movs	r3, #22
 8005528:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800552a:	e7fe      	b.n	800552a <_exit+0xa>

0800552c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800552c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800552e:	1e16      	subs	r6, r2, #0
 8005530:	dd07      	ble.n	8005542 <_read+0x16>
 8005532:	460c      	mov	r4, r1
 8005534:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005536:	f3af 8000 	nop.w
 800553a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800553e:	42a5      	cmp	r5, r4
 8005540:	d1f9      	bne.n	8005536 <_read+0xa>
	}

return len;
}
 8005542:	4630      	mov	r0, r6
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	bf00      	nop

08005548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005548:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800554a:	1e16      	subs	r6, r2, #0
 800554c:	dd07      	ble.n	800555e <_write+0x16>
 800554e:	460c      	mov	r4, r1
 8005550:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8005552:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005556:	f7fd f8c1 	bl	80026dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800555a:	42ac      	cmp	r4, r5
 800555c:	d1f9      	bne.n	8005552 <_write+0xa>
	}
	return len;
}
 800555e:	4630      	mov	r0, r6
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	bf00      	nop

08005564 <_close>:

int _close(int file)
{
	return -1;
}
 8005564:	f04f 30ff 	mov.w	r0, #4294967295
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop

0800556c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800556c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005570:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005572:	2000      	movs	r0, #0
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005578:	2001      	movs	r0, #1
 800557a:	4770      	bx	lr

0800557c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800557c:	2000      	movs	r0, #0
 800557e:	4770      	bx	lr

08005580 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <SystemInit+0x18>)
 8005582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005586:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800558a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800558e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005592:	6099      	str	r1, [r3, #8]
#endif
}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	e000ed00 	.word	0xe000ed00
 800559c:	00000000 	.word	0x00000000

080055a0 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80055a0:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80055a2:	4c33      	ldr	r4, [pc, #204]	; (8005670 <MX_TIM5_Init+0xd0>)
 80055a4:	4a33      	ldr	r2, [pc, #204]	; (8005674 <MX_TIM5_Init+0xd4>)
 80055a6:	6022      	str	r2, [r4, #0]
{
 80055a8:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 80055aa:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ac:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 80055ae:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80055b0:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 80055b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055b6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055ba:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80055be:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80055c2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 80055c6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ca:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055cc:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055ce:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055d0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80055d2:	f003 fbe1 	bl	8008d98 <HAL_TIM_PWM_Init>
 80055d6:	bb00      	cbnz	r0, 800561a <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055d8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80055da:	4825      	ldr	r0, [pc, #148]	; (8005670 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055dc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80055de:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80055e2:	f003 ff83 	bl	80094ec <HAL_TIMEx_MasterConfigSynchronization>
 80055e6:	b9f0      	cbnz	r0, 8005626 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055e8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8005660 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055ec:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055ee:	4820      	ldr	r0, [pc, #128]	; (8005670 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055f0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055f2:	2204      	movs	r2, #4
 80055f4:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055fa:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80055fc:	f003 fe6c 	bl	80092d8 <HAL_TIM_PWM_ConfigChannel>
 8005600:	b970      	cbnz	r0, 8005620 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 8005602:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <MX_TIM5_Init+0xd4>)
 8005604:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005606:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8005608:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800560e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005612:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 8005614:	d00a      	beq.n	800562c <MX_TIM5_Init+0x8c>
}
 8005616:	b012      	add	sp, #72	; 0x48
 8005618:	bd10      	pop	{r4, pc}
    Error_Handler();
 800561a:	f7fe fc03 	bl	8003e24 <Error_Handler>
 800561e:	e7db      	b.n	80055d8 <MX_TIM5_Init+0x38>
    Error_Handler();
 8005620:	f7fe fc00 	bl	8003e24 <Error_Handler>
 8005624:	e7ed      	b.n	8005602 <MX_TIM5_Init+0x62>
    Error_Handler();
 8005626:	f7fe fbfd 	bl	8003e24 <Error_Handler>
 800562a:	e7dd      	b.n	80055e8 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800562c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005630:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8005634:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8005668 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800563a:	480f      	ldr	r0, [pc, #60]	; (8005678 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800563c:	f042 0204 	orr.w	r2, r2, #4
 8005640:	64da      	str	r2, [r3, #76]	; 0x4c
 8005642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800564a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800564c:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 800564e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005652:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005654:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005656:	f002 f807 	bl	8007668 <HAL_GPIO_Init>
}
 800565a:	b012      	add	sp, #72	; 0x48
 800565c:	bd10      	pop	{r4, pc}
 800565e:	bf00      	nop
 8005660:	00000060 	.word	0x00000060
 8005664:	00000000 	.word	0x00000000
 8005668:	00001000 	.word	0x00001000
 800566c:	00000002 	.word	0x00000002
 8005670:	20000b8c 	.word	0x20000b8c
 8005674:	40000c00 	.word	0x40000c00
 8005678:	48000800 	.word	0x48000800

0800567c <MX_TIM7_Init>:
{
 800567c:	b500      	push	{lr}
  htim7.Instance = TIM7;
 800567e:	4812      	ldr	r0, [pc, #72]	; (80056c8 <MX_TIM7_Init+0x4c>)
 8005680:	4912      	ldr	r1, [pc, #72]	; (80056cc <MX_TIM7_Init+0x50>)
{
 8005682:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 8005684:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005686:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8005688:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 2000;
 800568c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005690:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 2000;
 8005694:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005698:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800569a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800569c:	f003 faa0 	bl	8008be0 <HAL_TIM_Base_Init>
 80056a0:	b950      	cbnz	r0, 80056b8 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056a2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80056a4:	4808      	ldr	r0, [pc, #32]	; (80056c8 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056a6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80056a8:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80056ac:	f003 ff1e 	bl	80094ec <HAL_TIMEx_MasterConfigSynchronization>
 80056b0:	b928      	cbnz	r0, 80056be <MX_TIM7_Init+0x42>
}
 80056b2:	b005      	add	sp, #20
 80056b4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80056b8:	f7fe fbb4 	bl	8003e24 <Error_Handler>
 80056bc:	e7f1      	b.n	80056a2 <MX_TIM7_Init+0x26>
    Error_Handler();
 80056be:	f7fe fbb1 	bl	8003e24 <Error_Handler>
}
 80056c2:	b005      	add	sp, #20
 80056c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80056c8:	20000bd8 	.word	0x20000bd8
 80056cc:	40001400 	.word	0x40001400

080056d0 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_TIM_PWM_MspInit+0x28>)
 80056d2:	6802      	ldr	r2, [r0, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d000      	beq.n	80056da <HAL_TIM_PWM_MspInit+0xa>
 80056d8:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056da:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 80056de:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056e2:	f042 0208 	orr.w	r2, r2, #8
 80056e6:	659a      	str	r2, [r3, #88]	; 0x58
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	9b01      	ldr	r3, [sp, #4]
}
 80056f2:	b002      	add	sp, #8
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40000c00 	.word	0x40000c00

080056fc <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 80056fc:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <HAL_TIM_Base_MspInit+0x3c>)
 80056fe:	6802      	ldr	r2, [r0, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d000      	beq.n	8005706 <HAL_TIM_Base_MspInit+0xa>
 8005704:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005706:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 800570a:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800570c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800570e:	f041 0120 	orr.w	r1, r1, #32
 8005712:	6599      	str	r1, [r3, #88]	; 0x58
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8005716:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 800571e:	2037      	movs	r0, #55	; 0x37
 8005720:	2200      	movs	r2, #0
 8005722:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005724:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8005726:	f001 f97f 	bl	8006a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800572a:	2037      	movs	r0, #55	; 0x37
}
 800572c:	b003      	add	sp, #12
 800572e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005732:	f001 b9b7 	b.w	8006aa4 <HAL_NVIC_EnableIRQ>
 8005736:	bf00      	nop
 8005738:	40001400 	.word	0x40001400
 800573c:	00000000 	.word	0x00000000

08005740 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005740:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80057c8 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 8005744:	4822      	ldr	r0, [pc, #136]	; (80057d0 <MX_LPUART1_UART_Init+0x90>)
 8005746:	4923      	ldr	r1, [pc, #140]	; (80057d4 <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 8005748:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <MX_LPUART1_UART_Init+0x98>)
{
 800574a:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800574c:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 800574e:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005752:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005754:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800575a:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800575e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005762:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005766:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005768:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800576a:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800576c:	f004 fff0 	bl	800a750 <HAL_UART_Init>
 8005770:	b970      	cbnz	r0, 8005790 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005772:	4817      	ldr	r0, [pc, #92]	; (80057d0 <MX_LPUART1_UART_Init+0x90>)
 8005774:	2100      	movs	r1, #0
 8005776:	f005 f87b 	bl	800a870 <HAL_UARTEx_SetTxFifoThreshold>
 800577a:	b988      	cbnz	r0, 80057a0 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800577c:	4814      	ldr	r0, [pc, #80]	; (80057d0 <MX_LPUART1_UART_Init+0x90>)
 800577e:	2100      	movs	r1, #0
 8005780:	f005 f8b8 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 8005784:	b9a0      	cbnz	r0, 80057b0 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005786:	4812      	ldr	r0, [pc, #72]	; (80057d0 <MX_LPUART1_UART_Init+0x90>)
 8005788:	f005 f854 	bl	800a834 <HAL_UARTEx_DisableFifoMode>
 800578c:	b9b8      	cbnz	r0, 80057be <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800578e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005790:	f7fe fb48 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005794:	480e      	ldr	r0, [pc, #56]	; (80057d0 <MX_LPUART1_UART_Init+0x90>)
 8005796:	2100      	movs	r1, #0
 8005798:	f005 f86a 	bl	800a870 <HAL_UARTEx_SetTxFifoThreshold>
 800579c:	2800      	cmp	r0, #0
 800579e:	d0ed      	beq.n	800577c <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 80057a0:	f7fe fb40 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057a4:	480a      	ldr	r0, [pc, #40]	; (80057d0 <MX_LPUART1_UART_Init+0x90>)
 80057a6:	2100      	movs	r1, #0
 80057a8:	f005 f8a4 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d0ea      	beq.n	8005786 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 80057b0:	f7fe fb38 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80057b4:	4806      	ldr	r0, [pc, #24]	; (80057d0 <MX_LPUART1_UART_Init+0x90>)
 80057b6:	f005 f83d 	bl	800a834 <HAL_UARTEx_DisableFifoMode>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d0e7      	beq.n	800578e <MX_LPUART1_UART_Init+0x4e>
}
 80057be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80057c2:	f7fe bb2f 	b.w	8003e24 <Error_Handler>
 80057c6:	bf00      	nop
	...
 80057d0:	20000da8 	.word	0x20000da8
 80057d4:	40008000 	.word	0x40008000
 80057d8:	001e8480 	.word	0x001e8480

080057dc <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80057dc:	4821      	ldr	r0, [pc, #132]	; (8005864 <MX_USART2_UART_Init+0x88>)
 80057de:	4922      	ldr	r1, [pc, #136]	; (8005868 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 80057e0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 80057e4:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80057e6:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 80057e8:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80057ec:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80057ee:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80057f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 80057f4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80057f8:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80057fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005800:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005804:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005806:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005808:	f004 ffa2 	bl	800a750 <HAL_UART_Init>
 800580c:	b970      	cbnz	r0, 800582c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800580e:	4815      	ldr	r0, [pc, #84]	; (8005864 <MX_USART2_UART_Init+0x88>)
 8005810:	2100      	movs	r1, #0
 8005812:	f005 f82d 	bl	800a870 <HAL_UARTEx_SetTxFifoThreshold>
 8005816:	b988      	cbnz	r0, 800583c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005818:	4812      	ldr	r0, [pc, #72]	; (8005864 <MX_USART2_UART_Init+0x88>)
 800581a:	2100      	movs	r1, #0
 800581c:	f005 f86a 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 8005820:	b9a0      	cbnz	r0, 800584c <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005822:	4810      	ldr	r0, [pc, #64]	; (8005864 <MX_USART2_UART_Init+0x88>)
 8005824:	f005 f806 	bl	800a834 <HAL_UARTEx_DisableFifoMode>
 8005828:	b9b8      	cbnz	r0, 800585a <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800582a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800582c:	f7fe fafa 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005830:	480c      	ldr	r0, [pc, #48]	; (8005864 <MX_USART2_UART_Init+0x88>)
 8005832:	2100      	movs	r1, #0
 8005834:	f005 f81c 	bl	800a870 <HAL_UARTEx_SetTxFifoThreshold>
 8005838:	2800      	cmp	r0, #0
 800583a:	d0ed      	beq.n	8005818 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 800583c:	f7fe faf2 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005840:	4808      	ldr	r0, [pc, #32]	; (8005864 <MX_USART2_UART_Init+0x88>)
 8005842:	2100      	movs	r1, #0
 8005844:	f005 f856 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 8005848:	2800      	cmp	r0, #0
 800584a:	d0ea      	beq.n	8005822 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 800584c:	f7fe faea 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005850:	4804      	ldr	r0, [pc, #16]	; (8005864 <MX_USART2_UART_Init+0x88>)
 8005852:	f004 ffef 	bl	800a834 <HAL_UARTEx_DisableFifoMode>
 8005856:	2800      	cmp	r0, #0
 8005858:	d0e7      	beq.n	800582a <MX_USART2_UART_Init+0x4e>
}
 800585a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800585e:	f7fe bae1 	b.w	8003e24 <Error_Handler>
 8005862:	bf00      	nop
 8005864:	20000e38 	.word	0x20000e38
 8005868:	40004400 	.word	0x40004400

0800586c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800586c:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800586e:	481f      	ldr	r0, [pc, #124]	; (80058ec <MX_USART3_UART_Init+0x80>)
 8005870:	4c1f      	ldr	r4, [pc, #124]	; (80058f0 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005872:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8005874:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005878:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 800587a:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800587e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005882:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005886:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800588a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800588e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005890:	f004 ff5e 	bl	800a750 <HAL_UART_Init>
 8005894:	b970      	cbnz	r0, 80058b4 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005896:	4815      	ldr	r0, [pc, #84]	; (80058ec <MX_USART3_UART_Init+0x80>)
 8005898:	2100      	movs	r1, #0
 800589a:	f004 ffe9 	bl	800a870 <HAL_UARTEx_SetTxFifoThreshold>
 800589e:	b988      	cbnz	r0, 80058c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058a0:	4812      	ldr	r0, [pc, #72]	; (80058ec <MX_USART3_UART_Init+0x80>)
 80058a2:	2100      	movs	r1, #0
 80058a4:	f005 f826 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 80058a8:	b9a0      	cbnz	r0, 80058d4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80058aa:	4810      	ldr	r0, [pc, #64]	; (80058ec <MX_USART3_UART_Init+0x80>)
 80058ac:	f004 ffc2 	bl	800a834 <HAL_UARTEx_DisableFifoMode>
 80058b0:	b9b8      	cbnz	r0, 80058e2 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80058b2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80058b4:	f7fe fab6 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058b8:	480c      	ldr	r0, [pc, #48]	; (80058ec <MX_USART3_UART_Init+0x80>)
 80058ba:	2100      	movs	r1, #0
 80058bc:	f004 ffd8 	bl	800a870 <HAL_UARTEx_SetTxFifoThreshold>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d0ed      	beq.n	80058a0 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 80058c4:	f7fe faae 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058c8:	4808      	ldr	r0, [pc, #32]	; (80058ec <MX_USART3_UART_Init+0x80>)
 80058ca:	2100      	movs	r1, #0
 80058cc:	f005 f812 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0ea      	beq.n	80058aa <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 80058d4:	f7fe faa6 	bl	8003e24 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80058d8:	4804      	ldr	r0, [pc, #16]	; (80058ec <MX_USART3_UART_Init+0x80>)
 80058da:	f004 ffab 	bl	800a834 <HAL_UARTEx_DisableFifoMode>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0e7      	beq.n	80058b2 <MX_USART3_UART_Init+0x46>
}
 80058e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80058e6:	f7fe ba9d 	b.w	8003e24 <Error_Handler>
 80058ea:	bf00      	nop
 80058ec:	20000ec8 	.word	0x20000ec8
 80058f0:	40004800 	.word	0x40004800

080058f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4604      	mov	r4, r0
 80058f8:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058fa:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80058fc:	2254      	movs	r2, #84	; 0x54
 80058fe:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005900:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8005904:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8005908:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800590a:	f006 f81d 	bl	800b948 <memset>
  if(uartHandle->Instance==LPUART1)
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	4a93      	ldr	r2, [pc, #588]	; (8005b60 <HAL_UART_MspInit+0x26c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d008      	beq.n	8005928 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8005916:	4a93      	ldr	r2, [pc, #588]	; (8005b64 <HAL_UART_MspInit+0x270>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d067      	beq.n	80059ec <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800591c:	4a92      	ldr	r2, [pc, #584]	; (8005b68 <HAL_UART_MspInit+0x274>)
 800591e:	4293      	cmp	r3, r2
 8005920:	f000 80ba 	beq.w	8005a98 <HAL_UART_MspInit+0x1a4>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005924:	b020      	add	sp, #128	; 0x80
 8005926:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005928:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800592a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800592c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800592e:	f002 fbd5 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 8005932:	2800      	cmp	r0, #0
 8005934:	f040 8104 	bne.w	8005b40 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005938:	4b8c      	ldr	r3, [pc, #560]	; (8005b6c <HAL_UART_MspInit+0x278>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800593a:	4e8d      	ldr	r6, [pc, #564]	; (8005b70 <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800593c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	65da      	str	r2, [r3, #92]	; 0x5c
 8005944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005946:	f002 0201 	and.w	r2, r2, #1
 800594a:	9200      	str	r2, [sp, #0]
 800594c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800594e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	64da      	str	r2, [r3, #76]	; 0x4c
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800595e:	220c      	movs	r2, #12
 8005960:	2302      	movs	r3, #2
 8005962:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005966:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005968:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800596a:	2300      	movs	r3, #0
 800596c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005970:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005972:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005978:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597a:	f001 fe75 	bl	8007668 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800597e:	497d      	ldr	r1, [pc, #500]	; (8005b74 <HAL_UART_MspInit+0x280>)
 8005980:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005982:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005984:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005988:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800598a:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800598c:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800598e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005992:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005996:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800599a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800599c:	f001 f8aa 	bl	8006af4 <HAL_DMA_Init>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f040 80ca 	bne.w	8005b3a <HAL_UART_MspInit+0x246>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 80059a6:	4d74      	ldr	r5, [pc, #464]	; (8005b78 <HAL_UART_MspInit+0x284>)
 80059a8:	4974      	ldr	r1, [pc, #464]	; (8005b7c <HAL_UART_MspInit+0x288>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80059aa:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80059ac:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059ae:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80059b0:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80059b4:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059b6:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059b8:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059ba:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059be:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80059c2:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80059c6:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059c8:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80059ca:	f001 f893 	bl	8006af4 <HAL_DMA_Init>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f040 80b0 	bne.w	8005b34 <HAL_UART_MspInit+0x240>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 80059d4:	2200      	movs	r2, #0
 80059d6:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80059d8:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 80059da:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80059dc:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 80059de:	f001 f823 	bl	8006a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80059e2:	205b      	movs	r0, #91	; 0x5b
 80059e4:	f001 f85e 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
}
 80059e8:	b020      	add	sp, #128	; 0x80
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80059ec:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059ee:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80059f0:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059f2:	f002 fb73 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f040 80a5 	bne.w	8005b46 <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART2_CLK_ENABLE();
 80059fc:	4b5b      	ldr	r3, [pc, #364]	; (8005b6c <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 80059fe:	4860      	ldr	r0, [pc, #384]	; (8005b80 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_tx.Instance = DMA1_Channel8;
 8005a02:	4d60      	ldr	r5, [pc, #384]	; (8005b84 <HAL_UART_MspInit+0x290>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005a08:	659a      	str	r2, [r3, #88]	; 0x58
 8005a0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a0c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005a10:	9202      	str	r2, [sp, #8]
 8005a12:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a16:	f042 0202 	orr.w	r2, r2, #2
 8005a1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005a24:	2208      	movs	r2, #8
 8005a26:	2302      	movs	r3, #2
 8005a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a2c:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005a2e:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a30:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a32:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005a34:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005a36:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005a38:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005a3c:	f001 fe14 	bl	8007668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005a40:	2210      	movs	r2, #16
 8005a42:	2302      	movs	r3, #2
 8005a44:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005a48:	484d      	ldr	r0, [pc, #308]	; (8005b80 <HAL_UART_MspInit+0x28c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a4a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005a50:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005a52:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005a56:	f001 fe07 	bl	8007668 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005a5a:	494b      	ldr	r1, [pc, #300]	; (8005b88 <HAL_UART_MspInit+0x294>)
 8005a5c:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a5e:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005a60:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005a64:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a66:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a68:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6a:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a6e:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a72:	e9c5 3307 	strd	r3, r3, [r5, #28]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a76:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005a78:	f001 f83c 	bl	8006af4 <HAL_DMA_Init>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d165      	bne.n	8005b4c <HAL_UART_MspInit+0x258>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a80:	2200      	movs	r2, #0
 8005a82:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005a84:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a86:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005a88:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005a8a:	f000 ffcd 	bl	8006a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005a8e:	2026      	movs	r0, #38	; 0x26
 8005a90:	f001 f808 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
}
 8005a94:	b020      	add	sp, #128	; 0x80
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005a98:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a9a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005a9c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a9e:	f002 fb1d 	bl	80080dc <HAL_RCCEx_PeriphCLKConfig>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d158      	bne.n	8005b58 <HAL_UART_MspInit+0x264>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005aa6:	4b31      	ldr	r3, [pc, #196]	; (8005b6c <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005aa8:	4838      	ldr	r0, [pc, #224]	; (8005b8c <HAL_UART_MspInit+0x298>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005aaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8005aac:	4d38      	ldr	r5, [pc, #224]	; (8005b90 <HAL_UART_MspInit+0x29c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005aae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ab6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005aba:	9204      	str	r2, [sp, #16]
 8005abc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac0:	f042 0204 	orr.w	r2, r2, #4
 8005ac4:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ad8:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005ada:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005adc:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ade:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005ae0:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005ae2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005ae4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005ae8:	f001 fdbe 	bl	8007668 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8005aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af0:	2302      	movs	r3, #2
 8005af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005af6:	4825      	ldr	r0, [pc, #148]	; (8005b8c <HAL_UART_MspInit+0x298>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005af8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8005afa:	2201      	movs	r2, #1
 8005afc:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005afe:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8005b00:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005b04:	f001 fdb0 	bl	8007668 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005b08:	4922      	ldr	r1, [pc, #136]	; (8005b94 <HAL_UART_MspInit+0x2a0>)
 8005b0a:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b0c:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005b0e:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005b12:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b14:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005b16:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b18:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b1c:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005b20:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b24:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005b26:	f000 ffe5 	bl	8006af4 <HAL_DMA_Init>
 8005b2a:	b990      	cbnz	r0, 8005b52 <HAL_UART_MspInit+0x25e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005b2c:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005b2e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8005b30:	b020      	add	sp, #128	; 0x80
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005b34:	f7fe f976 	bl	8003e24 <Error_Handler>
 8005b38:	e74c      	b.n	80059d4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005b3a:	f7fe f973 	bl	8003e24 <Error_Handler>
 8005b3e:	e732      	b.n	80059a6 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8005b40:	f7fe f970 	bl	8003e24 <Error_Handler>
 8005b44:	e6f8      	b.n	8005938 <HAL_UART_MspInit+0x44>
      Error_Handler();
 8005b46:	f7fe f96d 	bl	8003e24 <Error_Handler>
 8005b4a:	e757      	b.n	80059fc <HAL_UART_MspInit+0x108>
      Error_Handler();
 8005b4c:	f7fe f96a 	bl	8003e24 <Error_Handler>
 8005b50:	e796      	b.n	8005a80 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8005b52:	f7fe f967 	bl	8003e24 <Error_Handler>
 8005b56:	e7e9      	b.n	8005b2c <HAL_UART_MspInit+0x238>
      Error_Handler();
 8005b58:	f7fe f964 	bl	8003e24 <Error_Handler>
 8005b5c:	e7a3      	b.n	8005aa6 <HAL_UART_MspInit+0x1b2>
 8005b5e:	bf00      	nop
 8005b60:	40008000 	.word	0x40008000
 8005b64:	40004400 	.word	0x40004400
 8005b68:	40004800 	.word	0x40004800
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	20000c24 	.word	0x20000c24
 8005b74:	4002006c 	.word	0x4002006c
 8005b78:	20000c84 	.word	0x20000c84
 8005b7c:	40020080 	.word	0x40020080
 8005b80:	48000400 	.word	0x48000400
 8005b84:	20000ce4 	.word	0x20000ce4
 8005b88:	40020094 	.word	0x40020094
 8005b8c:	48000800 	.word	0x48000800
 8005b90:	20000d44 	.word	0x20000d44
 8005b94:	4002001c 	.word	0x4002001c

08005b98 <uchar4_to_float>:
  Float_char4 tmp;
  tmp.char4_value[0] = value[0];
  tmp.char4_value[1] = value[1];
  tmp.char4_value[2] = value[2];
  tmp.char4_value[3] = value[3];
  return tmp.float_value;
 8005b98:	6803      	ldr	r3, [r0, #0]
 8005b9a:	ee00 3a10 	vmov	s0, r3
}
 8005b9e:	4770      	bx	lr

08005ba0 <float_to_uchar4>:

void float_to_uchar4(unsigned char * value, float float_value)
{
  Float_char4 tmp;
  tmp.float_value = float_value;
  value[0] = tmp.char4_value[0];
 8005ba0:	ee10 3a10 	vmov	r3, s0
 8005ba4:	6003      	str	r3, [r0, #0]
  value[1] = tmp.char4_value[1];
  value[2] = tmp.char4_value[2];
  value[3] = tmp.char4_value[3];
}
 8005ba6:	4770      	bx	lr

08005ba8 <getAngleDiff>:
  }
  return angle_rad;
}

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8005ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (angle_rad > M_PI) {
 8005bac:	ee10 0a10 	vmov	r0, s0
{
 8005bb0:	ed2d 8b04 	vpush	{d8-d9}
 8005bb4:	eeb0 8a40 	vmov.f32	s16, s0
 8005bb8:	eef0 8a60 	vmov.f32	s17, s1
  while (angle_rad > M_PI) {
 8005bbc:	f7fa fcec 	bl	8000598 <__aeabi_f2d>
 8005bc0:	a35f      	add	r3, pc, #380	; (adr r3, 8005d40 <getAngleDiff+0x198>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	f7fa ffcd 	bl	8000b68 <__aeabi_dcmpgt>
 8005bce:	b1d0      	cbz	r0, 8005c06 <getAngleDiff+0x5e>
    angle_rad -= 2.0f * M_PI;
 8005bd0:	f20f 1974 	addw	r9, pc, #372	; 0x174
 8005bd4:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 8005bd8:	a559      	add	r5, pc, #356	; (adr r5, 8005d40 <getAngleDiff+0x198>)
 8005bda:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad -= 2.0f * M_PI;
 8005bde:	4642      	mov	r2, r8
 8005be0:	464b      	mov	r3, r9
 8005be2:	4630      	mov	r0, r6
 8005be4:	4639      	mov	r1, r7
 8005be6:	f7fa fb77 	bl	80002d8 <__aeabi_dsub>
 8005bea:	f7fb f825 	bl	8000c38 <__aeabi_d2f>
 8005bee:	ee08 0a10 	vmov	s16, r0
  while (angle_rad > M_PI) {
 8005bf2:	f7fa fcd1 	bl	8000598 <__aeabi_f2d>
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	f7fa ffb3 	bl	8000b68 <__aeabi_dcmpgt>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d1eb      	bne.n	8005bde <getAngleDiff+0x36>
  while (angle_rad < -M_PI) {
 8005c06:	a352      	add	r3, pc, #328	; (adr r3, 8005d50 <getAngleDiff+0x1a8>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	4639      	mov	r1, r7
 8005c10:	f7fa ff8c 	bl	8000b2c <__aeabi_dcmplt>
 8005c14:	b1d0      	cbz	r0, 8005c4c <getAngleDiff+0xa4>
    angle_rad += 2.0f * M_PI;
 8005c16:	f20f 1930 	addw	r9, pc, #304	; 0x130
 8005c1a:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 8005c1e:	a54c      	add	r5, pc, #304	; (adr r5, 8005d50 <getAngleDiff+0x1a8>)
 8005c20:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad += 2.0f * M_PI;
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa fb56 	bl	80002dc <__adddf3>
 8005c30:	f7fb f802 	bl	8000c38 <__aeabi_d2f>
 8005c34:	ee08 0a10 	vmov	s16, r0
  while (angle_rad < -M_PI) {
 8005c38:	f7fa fcae 	bl	8000598 <__aeabi_f2d>
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	462b      	mov	r3, r5
 8005c40:	4606      	mov	r6, r0
 8005c42:	460f      	mov	r7, r1
 8005c44:	f7fa ff72 	bl	8000b2c <__aeabi_dcmplt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d1eb      	bne.n	8005c24 <getAngleDiff+0x7c>
  while (angle_rad > M_PI) {
 8005c4c:	ee18 0a90 	vmov	r0, s17
 8005c50:	f7fa fca2 	bl	8000598 <__aeabi_f2d>
 8005c54:	a33a      	add	r3, pc, #232	; (adr r3, 8005d40 <getAngleDiff+0x198>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	460d      	mov	r5, r1
 8005c5e:	f7fa ff83 	bl	8000b68 <__aeabi_dcmpgt>
 8005c62:	b1d8      	cbz	r0, 8005c9c <getAngleDiff+0xf4>
    angle_rad -= 2.0f * M_PI;
 8005c64:	f20f 09e0 	addw	r9, pc, #224	; 0xe0
 8005c68:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 8005c6c:	f20f 0bd0 	addw	fp, pc, #208	; 0xd0
 8005c70:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad -= 2.0f * M_PI;
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7fa fb2c 	bl	80002d8 <__aeabi_dsub>
 8005c80:	f7fa ffda 	bl	8000c38 <__aeabi_d2f>
 8005c84:	ee08 0a90 	vmov	s17, r0
  while (angle_rad > M_PI) {
 8005c88:	f7fa fc86 	bl	8000598 <__aeabi_f2d>
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	465b      	mov	r3, fp
 8005c90:	4604      	mov	r4, r0
 8005c92:	460d      	mov	r5, r1
 8005c94:	f7fa ff68 	bl	8000b68 <__aeabi_dcmpgt>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d1eb      	bne.n	8005c74 <getAngleDiff+0xcc>
  while (angle_rad < -M_PI) {
 8005c9c:	a32c      	add	r3, pc, #176	; (adr r3, 8005d50 <getAngleDiff+0x1a8>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f7fa ff41 	bl	8000b2c <__aeabi_dcmplt>
 8005caa:	b1d8      	cbz	r0, 8005ce4 <getAngleDiff+0x13c>
    angle_rad += 2.0f * M_PI;
 8005cac:	f20f 0998 	addw	r9, pc, #152	; 0x98
 8005cb0:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 8005cb4:	f20f 0b98 	addw	fp, pc, #152	; 0x98
 8005cb8:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad += 2.0f * M_PI;
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f7fa fb0a 	bl	80002dc <__adddf3>
 8005cc8:	f7fa ffb6 	bl	8000c38 <__aeabi_d2f>
 8005ccc:	ee08 0a90 	vmov	s17, r0
  while (angle_rad < -M_PI) {
 8005cd0:	f7fa fc62 	bl	8000598 <__aeabi_f2d>
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	465b      	mov	r3, fp
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	f7fa ff26 	bl	8000b2c <__aeabi_dcmplt>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d1eb      	bne.n	8005cbc <getAngleDiff+0x114>
  angle_rad1 = normalizeAngle(angle_rad1);
  angle_rad2 = normalizeAngle(angle_rad2);
  if (fabs(angle_rad1 - angle_rad2) > M_PI) {
 8005ce4:	ee38 9a68 	vsub.f32	s18, s16, s17
 8005ce8:	eef0 7ac9 	vabs.f32	s15, s18
 8005cec:	ee17 0a90 	vmov	r0, s15
 8005cf0:	f7fa fc52 	bl	8000598 <__aeabi_f2d>
 8005cf4:	a312      	add	r3, pc, #72	; (adr r3, 8005d40 <getAngleDiff+0x198>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa ff35 	bl	8000b68 <__aeabi_dcmpgt>
 8005cfe:	b198      	cbz	r0, 8005d28 <getAngleDiff+0x180>
    if (angle_rad1 > angle_rad2) {
 8005d00:	eef4 8ac8 	vcmpe.f32	s17, s16
 8005d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8005d08:	a30f      	add	r3, pc, #60	; (adr r3, 8005d48 <getAngleDiff+0x1a0>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	4630      	mov	r0, r6
 8005d10:	4639      	mov	r1, r7
    if (angle_rad1 > angle_rad2) {
 8005d12:	d40f      	bmi.n	8005d34 <getAngleDiff+0x18c>
    } else {
      return (angle_rad1 + 2 * M_PI) - angle_rad2;
 8005d14:	f7fa fae2 	bl	80002dc <__adddf3>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	f7fa fadc 	bl	80002d8 <__aeabi_dsub>
 8005d20:	f7fa ff8a 	bl	8000c38 <__aeabi_d2f>
 8005d24:	ee09 0a10 	vmov	s18, r0
    }
  } else {
    return angle_rad1 - angle_rad2;
  }
}
 8005d28:	eeb0 0a49 	vmov.f32	s0, s18
 8005d2c:	ecbd 8b04 	vpop	{d8-d9}
 8005d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8005d34:	f7fa fad0 	bl	80002d8 <__aeabi_dsub>
 8005d38:	e7ee      	b.n	8005d18 <getAngleDiff+0x170>
 8005d3a:	bf00      	nop
 8005d3c:	f3af 8000 	nop.w
 8005d40:	54442d18 	.word	0x54442d18
 8005d44:	400921fb 	.word	0x400921fb
 8005d48:	54442d18 	.word	0x54442d18
 8005d4c:	401921fb 	.word	0x401921fb
 8005d50:	54442d18 	.word	0x54442d18
 8005d54:	c00921fb 	.word	0xc00921fb

08005d58 <decode_SW>:

uint8_t decode_SW(uint16_t sw_raw_data)
{
  int data;
  sw_raw_data = sw_raw_data & 0xFFFF;
  if (sw_raw_data < 100) {
 8005d58:	2863      	cmp	r0, #99	; 0x63
 8005d5a:	d906      	bls.n	8005d6a <decode_SW+0x12>
    data = 0b00010000;  // C
  } else if (sw_raw_data < 500 && sw_raw_data > 100) {
 8005d5c:	f1a0 0365 	sub.w	r3, r0, #101	; 0x65
 8005d60:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8005d64:	d803      	bhi.n	8005d6e <decode_SW+0x16>
 8005d66:	2002      	movs	r0, #2
 8005d68:	4770      	bx	lr
 8005d6a:	2010      	movs	r0, #16
 8005d6c:	4770      	bx	lr
    data = 0b00000010;  // B
  } else if (sw_raw_data < 2000 && sw_raw_data > 500) {
 8005d6e:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 8005d72:	1883      	adds	r3, r0, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f240 52da 	movw	r2, #1498	; 0x5da
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d910      	bls.n	8005da0 <decode_SW+0x48>
    data = 0b00000100;  // R
  } else if (sw_raw_data < 3000 && sw_raw_data > 2000) {
 8005d7e:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
 8005d82:	18c3      	adds	r3, r0, r3
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f240 32e6 	movw	r2, #998	; 0x3e6
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d90a      	bls.n	8005da4 <decode_SW+0x4c>
    data = 0b00000001;  // F
  } else if (sw_raw_data < 4000 && sw_raw_data > 3000) {
 8005d8e:	f6a0 30b9 	subw	r0, r0, #3001	; 0xbb9
 8005d92:	b280      	uxth	r0, r0
 8005d94:	4290      	cmp	r0, r2
 8005d96:	bf8c      	ite	hi
 8005d98:	2000      	movhi	r0, #0
 8005d9a:	2001      	movls	r0, #1
    data = 0b00001000;  // L
  } else {
    data = 0b00000000;
  }
  return data;
 8005d9c:	00c0      	lsls	r0, r0, #3
 8005d9e:	4770      	bx	lr
 8005da0:	2004      	movs	r0, #4
 8005da2:	4770      	bx	lr
 8005da4:	2001      	movs	r0, #1
}
 8005da6:	4770      	bx	lr

08005da8 <two_to_float>:

float two_to_float(uint8_t data[2]) { return (float)((data[0] << 8 | data[1]) - 32767.0) / 32767.0; }
 8005da8:	b508      	push	{r3, lr}
 8005daa:	8800      	ldrh	r0, [r0, #0]
 8005dac:	ba40      	rev16	r0, r0
 8005dae:	b280      	uxth	r0, r0
 8005db0:	f7fa fbe0 	bl	8000574 <__aeabi_i2d>
 8005db4:	a30a      	add	r3, pc, #40	; (adr r3, 8005de0 <two_to_float+0x38>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f7fa fa8d 	bl	80002d8 <__aeabi_dsub>
 8005dbe:	f7fa ff3b 	bl	8000c38 <__aeabi_d2f>
 8005dc2:	f7fa fbe9 	bl	8000598 <__aeabi_f2d>
 8005dc6:	a308      	add	r3, pc, #32	; (adr r3, 8005de8 <two_to_float+0x40>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fc3c 	bl	8000648 <__aeabi_dmul>
 8005dd0:	f7fa ff32 	bl	8000c38 <__aeabi_d2f>
 8005dd4:	ee00 0a10 	vmov	s0, r0
 8005dd8:	bd08      	pop	{r3, pc}
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	00000000 	.word	0x00000000
 8005de4:	40dfffc0 	.word	0x40dfffc0
 8005de8:	00400080 	.word	0x00400080
 8005dec:	3f000020 	.word	0x3f000020

08005df0 <two_to_int>:
float two_to_int(uint8_t data[2]) { return ((data[0] << 8 | data[1]) - 32767.0); }
 8005df0:	b508      	push	{r3, lr}
 8005df2:	8800      	ldrh	r0, [r0, #0]
 8005df4:	ba40      	rev16	r0, r0
 8005df6:	b280      	uxth	r0, r0
 8005df8:	f7fa fbbc 	bl	8000574 <__aeabi_i2d>
 8005dfc:	a304      	add	r3, pc, #16	; (adr r3, 8005e10 <two_to_int+0x20>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa fa69 	bl	80002d8 <__aeabi_dsub>
 8005e06:	f7fa ff17 	bl	8000c38 <__aeabi_d2f>
 8005e0a:	ee00 0a10 	vmov	s0, r0
 8005e0e:	bd08      	pop	{r3, pc}
 8005e10:	00000000 	.word	0x00000000
 8005e14:	40dfffc0 	.word	0x40dfffc0

08005e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e18:	480d      	ldr	r0, [pc, #52]	; (8005e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e1c:	480d      	ldr	r0, [pc, #52]	; (8005e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e1e:	490e      	ldr	r1, [pc, #56]	; (8005e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e20:	4a0e      	ldr	r2, [pc, #56]	; (8005e5c <LoopForever+0xe>)
  movs r3, #0
 8005e22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e24:	e002      	b.n	8005e2c <LoopCopyDataInit>

08005e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e2a:	3304      	adds	r3, #4

08005e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e30:	d3f9      	bcc.n	8005e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e32:	4a0b      	ldr	r2, [pc, #44]	; (8005e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e34:	4c0b      	ldr	r4, [pc, #44]	; (8005e64 <LoopForever+0x16>)
  movs r3, #0
 8005e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e38:	e001      	b.n	8005e3e <LoopFillZerobss>

08005e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e3c:	3204      	adds	r2, #4

08005e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e40:	d3fb      	bcc.n	8005e3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005e42:	f7ff fb9d 	bl	8005580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e46:	f005 fde7 	bl	800ba18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e4a:	f7fe f84d 	bl	8003ee8 <main>

08005e4e <LoopForever>:

LoopForever:
    b LoopForever
 8005e4e:	e7fe      	b.n	8005e4e <LoopForever>
  ldr   r0, =_estack
 8005e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e58:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005e5c:	0800f778 	.word	0x0800f778
  ldr r2, =_sbss
 8005e60:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005e64:	200010ac 	.word	0x200010ac

08005e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e68:	e7fe      	b.n	8005e68 <ADC1_2_IRQHandler>
	...

08005e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e6c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <HAL_InitTick+0x40>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	b90b      	cbnz	r3, 8005e78 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e74:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e78:	490d      	ldr	r1, [pc, #52]	; (8005eb0 <HAL_InitTick+0x44>)
 8005e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e7e:	4605      	mov	r5, r0
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	6808      	ldr	r0, [r1, #0]
 8005e86:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e8a:	f000 fe19 	bl	8006ac0 <HAL_SYSTICK_Config>
 8005e8e:	4604      	mov	r4, r0
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d1ef      	bne.n	8005e74 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e94:	2d0f      	cmp	r5, #15
 8005e96:	d8ed      	bhi.n	8005e74 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea0:	f000 fdc2 	bl	8006a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ea4:	4b03      	ldr	r3, [pc, #12]	; (8005eb4 <HAL_InitTick+0x48>)
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	601d      	str	r5, [r3, #0]
}
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	2000000c 	.word	0x2000000c
 8005eb0:	20000008 	.word	0x20000008
 8005eb4:	20000010 	.word	0x20000010

08005eb8 <HAL_Init>:
{
 8005eb8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eba:	2003      	movs	r0, #3
 8005ebc:	f000 fda2 	bl	8006a04 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f7ff ffd3 	bl	8005e6c <HAL_InitTick>
 8005ec6:	b110      	cbz	r0, 8005ece <HAL_Init+0x16>
    status = HAL_ERROR;
 8005ec8:	2401      	movs	r4, #1
}
 8005eca:	4620      	mov	r0, r4
 8005ecc:	bd10      	pop	{r4, pc}
 8005ece:	4604      	mov	r4, r0
    HAL_MspInit();
 8005ed0:	f7ff fa9c 	bl	800540c <HAL_MspInit>
}
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	bd10      	pop	{r4, pc}

08005ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005ed8:	4a03      	ldr	r2, [pc, #12]	; (8005ee8 <HAL_IncTick+0x10>)
 8005eda:	4904      	ldr	r1, [pc, #16]	; (8005eec <HAL_IncTick+0x14>)
 8005edc:	6813      	ldr	r3, [r2, #0]
 8005ede:	6809      	ldr	r1, [r1, #0]
 8005ee0:	440b      	add	r3, r1
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000f58 	.word	0x20000f58
 8005eec:	2000000c 	.word	0x2000000c

08005ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005ef4:	f7fc fbec 	bl	80026d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ef8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005efa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005efc:	d002      	beq.n	8005f04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <HAL_Delay+0x20>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f04:	f7fc fbe4 	bl	80026d0 <HAL_GetTick>
 8005f08:	1b43      	subs	r3, r0, r5
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	d3fa      	bcc.n	8005f04 <HAL_Delay+0x14>
  {
  }
}
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	2000000c 	.word	0x2000000c

08005f14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f14:	b530      	push	{r4, r5, lr}
 8005f16:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f000 80d4 	beq.w	80060ca <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f22:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8005f24:	4604      	mov	r4, r0
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	f000 809d 	beq.w	8006066 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f2c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005f2e:	6893      	ldr	r3, [r2, #8]
 8005f30:	009d      	lsls	r5, r3, #2
 8005f32:	d505      	bpl.n	8005f40 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f34:	6893      	ldr	r3, [r2, #8]
 8005f36:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005f3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f3e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f40:	6893      	ldr	r3, [r2, #8]
 8005f42:	00d8      	lsls	r0, r3, #3
 8005f44:	d419      	bmi.n	8005f7a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f46:	4b7e      	ldr	r3, [pc, #504]	; (8006140 <HAL_ADC_Init+0x22c>)
 8005f48:	487e      	ldr	r0, [pc, #504]	; (8006144 <HAL_ADC_Init+0x230>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005f4c:	6891      	ldr	r1, [r2, #8]
 8005f4e:	099b      	lsrs	r3, r3, #6
 8005f50:	fba0 0303 	umull	r0, r3, r0, r3
 8005f54:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8005f58:	099b      	lsrs	r3, r3, #6
 8005f5a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005f5e:	3301      	adds	r3, #1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005f66:	6091      	str	r1, [r2, #8]
 8005f68:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	b12b      	cbz	r3, 8005f7a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005f74:	9b01      	ldr	r3, [sp, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f9      	bne.n	8005f6e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f7a:	6893      	ldr	r3, [r2, #8]
 8005f7c:	00d9      	lsls	r1, r3, #3
 8005f7e:	d464      	bmi.n	800604a <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f82:	f043 0310 	orr.w	r3, r3, #16
 8005f86:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f88:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005f8a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f8c:	4303      	orrs	r3, r0
 8005f8e:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f90:	6893      	ldr	r3, [r2, #8]
 8005f92:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f96:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f98:	d15e      	bne.n	8006058 <HAL_ADC_Init+0x144>
 8005f9a:	06db      	lsls	r3, r3, #27
 8005f9c:	d45c      	bmi.n	8006058 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005fa0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005fa4:	f043 0302 	orr.w	r3, r3, #2
 8005fa8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005faa:	6893      	ldr	r3, [r2, #8]
 8005fac:	07dd      	lsls	r5, r3, #31
 8005fae:	d419      	bmi.n	8005fe4 <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fb0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005fb4:	4b64      	ldr	r3, [pc, #400]	; (8006148 <HAL_ADC_Init+0x234>)
 8005fb6:	f000 80a0 	beq.w	80060fa <HAL_ADC_Init+0x1e6>
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	f000 80a5 	beq.w	800610a <HAL_ADC_Init+0x1f6>
 8005fc0:	4962      	ldr	r1, [pc, #392]	; (800614c <HAL_ADC_Init+0x238>)
 8005fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc6:	6889      	ldr	r1, [r1, #8]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	4960      	ldr	r1, [pc, #384]	; (8006150 <HAL_ADC_Init+0x23c>)
 8005fce:	6889      	ldr	r1, [r1, #8]
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	07d9      	lsls	r1, r3, #31
 8005fd4:	d406      	bmi.n	8005fe4 <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005fd6:	495f      	ldr	r1, [pc, #380]	; (8006154 <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005fd8:	688b      	ldr	r3, [r1, #8]
 8005fda:	6865      	ldr	r5, [r4, #4]
 8005fdc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005fe0:	432b      	orrs	r3, r5
 8005fe2:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8005fe4:	68e5      	ldr	r5, [r4, #12]
 8005fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005fe8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8005fec:	432b      	orrs	r3, r5
 8005fee:	68a5      	ldr	r5, [r4, #8]
 8005ff0:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ff2:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ff4:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8005ff6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ffa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ffe:	d05f      	beq.n	80060c0 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006000:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006002:	b121      	cbz	r1, 800600e <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8006004:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006006:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800600a:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800600c:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800600e:	68d5      	ldr	r5, [r2, #12]
 8006010:	4951      	ldr	r1, [pc, #324]	; (8006158 <HAL_ADC_Init+0x244>)
 8006012:	4029      	ands	r1, r5
 8006014:	4319      	orrs	r1, r3
 8006016:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006018:	6913      	ldr	r3, [r2, #16]
 800601a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800601c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006020:	430b      	orrs	r3, r1
 8006022:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006024:	6893      	ldr	r3, [r2, #8]
 8006026:	075b      	lsls	r3, r3, #29
 8006028:	d523      	bpl.n	8006072 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800602a:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800602c:	6963      	ldr	r3, [r4, #20]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d04e      	beq.n	80060d0 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006032:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006034:	f023 030f 	bic.w	r3, r3, #15
 8006038:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800603a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8006046:	b003      	add	sp, #12
 8006048:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800604a:	6893      	ldr	r3, [r2, #8]
 800604c:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006050:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006054:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006056:	d0a0      	beq.n	8005f9a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006058:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800605a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800605c:	f043 0310 	orr.w	r3, r3, #16
 8006060:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8006062:	b003      	add	sp, #12
 8006064:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8006066:	f7fb fa13 	bl	8001490 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800606a:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 800606c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8006070:	e75c      	b.n	8005f2c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006072:	6893      	ldr	r3, [r2, #8]
 8006074:	071d      	lsls	r5, r3, #28
 8006076:	d4d9      	bmi.n	800602c <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006078:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800607a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800607e:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006080:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006084:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006086:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800608a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800608e:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8006090:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006092:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006094:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8006096:	bb19      	cbnz	r1, 80060e0 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800609e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80060a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80060ae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d032      	beq.n	800611c <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80060b6:	6913      	ldr	r3, [r2, #16]
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	6113      	str	r3, [r2, #16]
 80060be:	e7b5      	b.n	800602c <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80060c2:	3901      	subs	r1, #1
 80060c4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80060c8:	e79a      	b.n	8006000 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 80060ca:	2001      	movs	r0, #1
}
 80060cc:	b003      	add	sp, #12
 80060ce:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80060d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80060d2:	6a23      	ldr	r3, [r4, #32]
 80060d4:	f021 010f 	bic.w	r1, r1, #15
 80060d8:	3b01      	subs	r3, #1
 80060da:	430b      	orrs	r3, r1
 80060dc:	6313      	str	r3, [r2, #48]	; 0x30
 80060de:	e7ac      	b.n	800603a <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80060e6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80060ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060f2:	430b      	orrs	r3, r1
 80060f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80060f8:	e7d9      	b.n	80060ae <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060fa:	6891      	ldr	r1, [r2, #8]
 80060fc:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060fe:	430b      	orrs	r3, r1
 8006100:	07db      	lsls	r3, r3, #31
 8006102:	f53f af6f 	bmi.w	8005fe4 <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006106:	4915      	ldr	r1, [pc, #84]	; (800615c <HAL_ADC_Init+0x248>)
 8006108:	e766      	b.n	8005fd8 <HAL_ADC_Init+0xc4>
 800610a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006112:	430b      	orrs	r3, r1
 8006114:	07d9      	lsls	r1, r3, #31
 8006116:	f53f af65 	bmi.w	8005fe4 <HAL_ADC_Init+0xd0>
 800611a:	e7f4      	b.n	8006106 <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 800611c:	6911      	ldr	r1, [r2, #16]
 800611e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006120:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8006122:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8006126:	f021 0104 	bic.w	r1, r1, #4
 800612a:	432b      	orrs	r3, r5
 800612c:	430b      	orrs	r3, r1
 800612e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006130:	430b      	orrs	r3, r1
 8006132:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006134:	430b      	orrs	r3, r1
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6113      	str	r3, [r2, #16]
 800613c:	e776      	b.n	800602c <HAL_ADC_Init+0x118>
 800613e:	bf00      	nop
 8006140:	20000008 	.word	0x20000008
 8006144:	053e2d63 	.word	0x053e2d63
 8006148:	50000100 	.word	0x50000100
 800614c:	50000400 	.word	0x50000400
 8006150:	50000600 	.word	0x50000600
 8006154:	50000700 	.word	0x50000700
 8006158:	fff04007 	.word	0xfff04007
 800615c:	50000300 	.word	0x50000300

08006160 <HAL_ADC_ConvCpltCallback>:
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop

08006164 <HAL_ADC_ConvHalfCpltCallback>:
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop

08006168 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006168:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800616a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800616c:	f7ff fffa 	bl	8006164 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006170:	bd08      	pop	{r3, pc}
 8006172:	bf00      	nop

08006174 <HAL_ADC_ErrorCallback>:
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop

08006178 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006178:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800617a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800617c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8006180:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006182:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006184:	d11d      	bne.n	80061c2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006186:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618c:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800618e:	680a      	ldr	r2, [r1, #0]
 8006190:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006194:	68ca      	ldr	r2, [r1, #12]
 8006196:	d01b      	beq.n	80061d0 <ADC_DMAConvCplt+0x58>
 8006198:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800619c:	d10d      	bne.n	80061ba <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800619e:	68ca      	ldr	r2, [r1, #12]
 80061a0:	0494      	lsls	r4, r2, #18
 80061a2:	d40a      	bmi.n	80061ba <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80061a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061aa:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80061ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061ae:	04d1      	lsls	r1, r2, #19
 80061b0:	d403      	bmi.n	80061ba <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff ffd0 	bl	8006160 <HAL_ADC_ConvCpltCallback>
}
 80061c0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80061c2:	06d2      	lsls	r2, r2, #27
 80061c4:	d40a      	bmi.n	80061dc <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80061c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80061d0:	0790      	lsls	r0, r2, #30
 80061d2:	d5e7      	bpl.n	80061a4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff ffc3 	bl	8006160 <HAL_ADC_ConvCpltCallback>
 80061da:	e7f1      	b.n	80061c0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff ffc9 	bl	8006174 <HAL_ADC_ErrorCallback>
}
 80061e2:	bd10      	pop	{r4, pc}

080061e4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80061e6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80061e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80061ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ee:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80061f0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80061f8:	f7ff ffbc 	bl	8006174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061fc:	bd08      	pop	{r3, pc}
 80061fe:	bf00      	nop

08006200 <HAL_ADC_ConfigChannel>:
{
 8006200:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8006202:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8006206:	b083      	sub	sp, #12
 8006208:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800620a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800620c:	f04f 0000 	mov.w	r0, #0
 8006210:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8006212:	f000 8174 	beq.w	80064fe <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006216:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006218:	2001      	movs	r0, #1
 800621a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800621e:	6894      	ldr	r4, [r2, #8]
 8006220:	0766      	lsls	r6, r4, #29
 8006222:	d45e      	bmi.n	80062e2 <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006224:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006226:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 800622a:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800622e:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8006232:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006234:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8006238:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800623c:	f854 500e 	ldr.w	r5, [r4, lr]
 8006240:	261f      	movs	r6, #31
 8006242:	fa00 f00c 	lsl.w	r0, r0, ip
 8006246:	fa06 fc0c 	lsl.w	ip, r6, ip
 800624a:	ea25 0c0c 	bic.w	ip, r5, ip
 800624e:	ea40 000c 	orr.w	r0, r0, ip
 8006252:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006256:	6890      	ldr	r0, [r2, #8]
 8006258:	0745      	lsls	r5, r0, #29
 800625a:	d572      	bpl.n	8006342 <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800625c:	6890      	ldr	r0, [r2, #8]
 800625e:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006260:	6894      	ldr	r4, [r2, #8]
 8006262:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006266:	4604      	mov	r4, r0
 8006268:	d10c      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800626a:	4dbd      	ldr	r5, [pc, #756]	; (8006560 <HAL_ADC_ConfigChannel+0x360>)
 800626c:	68ce      	ldr	r6, [r1, #12]
 800626e:	42ae      	cmp	r6, r5
 8006270:	f000 80eb 	beq.w	800644a <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 8006274:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8006278:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800627c:	ea21 0100 	bic.w	r1, r1, r0
 8006280:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006284:	49b7      	ldr	r1, [pc, #732]	; (8006564 <HAL_ADC_ConfigChannel+0x364>)
 8006286:	420c      	tst	r4, r1
 8006288:	d059      	beq.n	800633e <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800628a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800628e:	f000 8134 	beq.w	80064fa <HAL_ADC_ConfigChannel+0x2fa>
 8006292:	4db5      	ldr	r5, [pc, #724]	; (8006568 <HAL_ADC_ConfigChannel+0x368>)
 8006294:	49b5      	ldr	r1, [pc, #724]	; (800656c <HAL_ADC_ConfigChannel+0x36c>)
 8006296:	48b6      	ldr	r0, [pc, #728]	; (8006570 <HAL_ADC_ConfigChannel+0x370>)
 8006298:	42aa      	cmp	r2, r5
 800629a:	bf18      	it	ne
 800629c:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800629e:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80062a0:	49b4      	ldr	r1, [pc, #720]	; (8006574 <HAL_ADC_ConfigChannel+0x374>)
 80062a2:	428c      	cmp	r4, r1
 80062a4:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 80062a8:	d024      	beq.n	80062f4 <HAL_ADC_ConfigChannel+0xf4>
 80062aa:	49b3      	ldr	r1, [pc, #716]	; (8006578 <HAL_ADC_ConfigChannel+0x378>)
 80062ac:	428c      	cmp	r4, r1
 80062ae:	d021      	beq.n	80062f4 <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80062b0:	49b2      	ldr	r1, [pc, #712]	; (800657c <HAL_ADC_ConfigChannel+0x37c>)
 80062b2:	428c      	cmp	r4, r1
 80062b4:	f040 8139 	bne.w	800652a <HAL_ADC_ConfigChannel+0x32a>
 80062b8:	01c4      	lsls	r4, r0, #7
 80062ba:	d440      	bmi.n	800633e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062bc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80062c0:	f000 8215 	beq.w	80066ee <HAL_ADC_ConfigChannel+0x4ee>
 80062c4:	4ca8      	ldr	r4, [pc, #672]	; (8006568 <HAL_ADC_ConfigChannel+0x368>)
 80062c6:	49a9      	ldr	r1, [pc, #676]	; (800656c <HAL_ADC_ConfigChannel+0x36c>)
 80062c8:	48a9      	ldr	r0, [pc, #676]	; (8006570 <HAL_ADC_ConfigChannel+0x370>)
 80062ca:	42a2      	cmp	r2, r4
 80062cc:	bf18      	it	ne
 80062ce:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80062d0:	688a      	ldr	r2, [r1, #8]
 80062d2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80062d6:	432a      	orrs	r2, r5
 80062d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062dc:	2000      	movs	r0, #0
 80062de:	608a      	str	r2, [r1, #8]
}
 80062e0:	e003      	b.n	80062ea <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062e4:	f042 0220 	orr.w	r2, r2, #32
 80062e8:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80062f0:	b003      	add	sp, #12
 80062f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80062f4:	0201      	lsls	r1, r0, #8
 80062f6:	d422      	bmi.n	800633e <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062f8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80062fc:	f000 8113 	beq.w	8006526 <HAL_ADC_ConfigChannel+0x326>
 8006300:	499f      	ldr	r1, [pc, #636]	; (8006580 <HAL_ADC_ConfigChannel+0x380>)
 8006302:	428a      	cmp	r2, r1
 8006304:	d11b      	bne.n	800633e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006306:	489a      	ldr	r0, [pc, #616]	; (8006570 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006308:	4a9e      	ldr	r2, [pc, #632]	; (8006584 <HAL_ADC_ConfigChannel+0x384>)
 800630a:	4c9f      	ldr	r4, [pc, #636]	; (8006588 <HAL_ADC_ConfigChannel+0x388>)
 800630c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800630e:	6881      	ldr	r1, [r0, #8]
 8006310:	0992      	lsrs	r2, r2, #6
 8006312:	fba4 4202 	umull	r4, r2, r4, r2
 8006316:	0992      	lsrs	r2, r2, #6
 8006318:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800631c:	3201      	adds	r2, #1
 800631e:	4329      	orrs	r1, r5
 8006320:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006324:	0092      	lsls	r2, r2, #2
 8006326:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800632a:	6081      	str	r1, [r0, #8]
 800632c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800632e:	9a01      	ldr	r2, [sp, #4]
 8006330:	b12a      	cbz	r2, 800633e <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 8006332:	9a01      	ldr	r2, [sp, #4]
 8006334:	3a01      	subs	r2, #1
 8006336:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006338:	9a01      	ldr	r2, [sp, #4]
 800633a:	2a00      	cmp	r2, #0
 800633c:	d1f9      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800633e:	2000      	movs	r0, #0
 8006340:	e7d3      	b.n	80062ea <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006342:	6890      	ldr	r0, [r2, #8]
 8006344:	0700      	lsls	r0, r0, #28
 8006346:	d47e      	bmi.n	8006446 <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006348:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800634a:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800634c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8006350:	f000 8120 	beq.w	8006594 <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006354:	0dee      	lsrs	r6, r5, #23
 8006356:	f102 0c14 	add.w	ip, r2, #20
 800635a:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 800635e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8006362:	f85c 4006 	ldr.w	r4, [ip, r6]
 8006366:	2707      	movs	r7, #7
 8006368:	40a8      	lsls	r0, r5
 800636a:	fa07 f505 	lsl.w	r5, r7, r5
 800636e:	ea24 0405 	bic.w	r4, r4, r5
 8006372:	4320      	orrs	r0, r4
 8006374:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006378:	6950      	ldr	r0, [r2, #20]
 800637a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800637e:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006380:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006384:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006386:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006388:	d02d      	beq.n	80063e6 <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800638a:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800638e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8006392:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8006394:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8006398:	4f7c      	ldr	r7, [pc, #496]	; (800658c <HAL_ADC_ConfigChannel+0x38c>)
 800639a:	4086      	lsls	r6, r0
 800639c:	6808      	ldr	r0, [r1, #0]
 800639e:	ea0c 0707 	and.w	r7, ip, r7
 80063a2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80063a6:	4338      	orrs	r0, r7
 80063a8:	4330      	orrs	r0, r6
 80063aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80063ae:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063b2:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 80063b4:	698e      	ldr	r6, [r1, #24]
 80063b6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80063ba:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 80063be:	4330      	orrs	r0, r6
 80063c0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063c4:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80063c6:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 80063c8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80063cc:	f1a5 0501 	sub.w	r5, r5, #1
 80063d0:	fab5 f585 	clz	r5, r5
 80063d4:	096d      	lsrs	r5, r5, #5
 80063d6:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80063da:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 80063de:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80063e2:	6808      	ldr	r0, [r1, #0]
}
 80063e4:	e73c      	b.n	8006260 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063e6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80063e8:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80063ea:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80063ec:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80063f0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	f040 80df 	bne.w	80065b8 <HAL_ADC_ConfigChannel+0x3b8>
 80063fa:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80063fe:	42ac      	cmp	r4, r5
 8006400:	f000 813d 	beq.w	800667e <HAL_ADC_ConfigChannel+0x47e>
 8006404:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8006406:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006408:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800640c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006410:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8006414:	42ae      	cmp	r6, r5
 8006416:	f000 8158 	beq.w	80066ca <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800641a:	68a6      	ldr	r6, [r4, #8]
 800641c:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800641e:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006422:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006426:	42ae      	cmp	r6, r5
 8006428:	f000 813d 	beq.w	80066a6 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800642c:	68e6      	ldr	r6, [r4, #12]
 800642e:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006430:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006434:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8006438:	42a5      	cmp	r5, r4
 800643a:	f47f af11 	bne.w	8006260 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 800643e:	6838      	ldr	r0, [r7, #0]
 8006440:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006444:	6038      	str	r0, [r7, #0]
 8006446:	6808      	ldr	r0, [r1, #0]
}
 8006448:	e70a      	b.n	8006260 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 800644a:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800644e:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8006452:	432c      	orrs	r4, r5
 8006454:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006458:	2d00      	cmp	r5, #0
 800645a:	d053      	beq.n	8006504 <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645c:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006460:	2c00      	cmp	r4, #0
 8006462:	f000 80e8 	beq.w	8006636 <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006466:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800646a:	3401      	adds	r4, #1
 800646c:	f004 041f 	and.w	r4, r4, #31
 8006470:	2c09      	cmp	r4, #9
 8006472:	f240 80e0 	bls.w	8006636 <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006476:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800647a:	2c00      	cmp	r4, #0
 800647c:	f000 813d 	beq.w	80066fa <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8006480:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006484:	3401      	adds	r4, #1
 8006486:	06a4      	lsls	r4, r4, #26
 8006488:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006490:	2d00      	cmp	r5, #0
 8006492:	f000 8130 	beq.w	80066f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006496:	fab5 f585 	clz	r5, r5
 800649a:	3501      	adds	r5, #1
 800649c:	f005 051f 	and.w	r5, r5, #31
 80064a0:	2601      	movs	r6, #1
 80064a2:	fa06 f505 	lsl.w	r5, r6, r5
 80064a6:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80064ac:	2800      	cmp	r0, #0
 80064ae:	f000 8120 	beq.w	80066f2 <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 80064b2:	fab0 f080 	clz	r0, r0
 80064b6:	1c45      	adds	r5, r0, #1
 80064b8:	f005 051f 	and.w	r5, r5, #31
 80064bc:	2003      	movs	r0, #3
 80064be:	f06f 061d 	mvn.w	r6, #29
 80064c2:	fb10 6005 	smlabb	r0, r0, r5, r6
 80064c6:	0500      	lsls	r0, r0, #20
 80064c8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064cc:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064ce:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80064d0:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064d2:	f005 0504 	and.w	r5, r5, #4
 80064d6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80064da:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80064de:	fa04 fc00 	lsl.w	ip, r4, r0
 80064e2:	f04f 0e07 	mov.w	lr, #7
 80064e6:	5974      	ldr	r4, [r6, r5]
 80064e8:	fa0e f000 	lsl.w	r0, lr, r0
 80064ec:	ea24 0000 	bic.w	r0, r4, r0
 80064f0:	ea40 000c 	orr.w	r0, r0, ip
 80064f4:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064f6:	680c      	ldr	r4, [r1, #0]
}
 80064f8:	e6c4      	b.n	8006284 <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064fa:	491c      	ldr	r1, [pc, #112]	; (800656c <HAL_ADC_ConfigChannel+0x36c>)
 80064fc:	e6cf      	b.n	800629e <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 80064fe:	2002      	movs	r0, #2
}
 8006500:	b003      	add	sp, #12
 8006502:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006504:	0e80      	lsrs	r0, r0, #26
 8006506:	3001      	adds	r0, #1
 8006508:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800650c:	2d09      	cmp	r5, #9
 800650e:	f200 8084 	bhi.w	800661a <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006512:	0684      	lsls	r4, r0, #26
 8006514:	2001      	movs	r0, #1
 8006516:	40a8      	lsls	r0, r5
 8006518:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800651c:	4304      	orrs	r4, r0
 800651e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8006522:	0500      	lsls	r0, r0, #20
 8006524:	e7d2      	b.n	80064cc <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006526:	4811      	ldr	r0, [pc, #68]	; (800656c <HAL_ADC_ConfigChannel+0x36c>)
 8006528:	e6ee      	b.n	8006308 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800652a:	4919      	ldr	r1, [pc, #100]	; (8006590 <HAL_ADC_ConfigChannel+0x390>)
 800652c:	428c      	cmp	r4, r1
 800652e:	f47f af06 	bne.w	800633e <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006532:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8006536:	f47f af02 	bne.w	800633e <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 800653a:	490b      	ldr	r1, [pc, #44]	; (8006568 <HAL_ADC_ConfigChannel+0x368>)
 800653c:	428a      	cmp	r2, r1
 800653e:	f43f aefe 	beq.w	800633e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006542:	4c0b      	ldr	r4, [pc, #44]	; (8006570 <HAL_ADC_ConfigChannel+0x370>)
 8006544:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8006548:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800654c:	bf18      	it	ne
 800654e:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006550:	688a      	ldr	r2, [r1, #8]
 8006552:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006556:	432a      	orrs	r2, r5
 8006558:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800655c:	608a      	str	r2, [r1, #8]
}
 800655e:	e6c4      	b.n	80062ea <HAL_ADC_ConfigChannel+0xea>
 8006560:	407f0000 	.word	0x407f0000
 8006564:	80080000 	.word	0x80080000
 8006568:	50000100 	.word	0x50000100
 800656c:	50000300 	.word	0x50000300
 8006570:	50000700 	.word	0x50000700
 8006574:	c3210000 	.word	0xc3210000
 8006578:	90c00010 	.word	0x90c00010
 800657c:	c7520000 	.word	0xc7520000
 8006580:	50000600 	.word	0x50000600
 8006584:	20000008 	.word	0x20000008
 8006588:	053e2d63 	.word	0x053e2d63
 800658c:	03fff000 	.word	0x03fff000
 8006590:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006594:	0de8      	lsrs	r0, r5, #23
 8006596:	f000 0004 	and.w	r0, r0, #4
 800659a:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 800659e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80065a2:	2607      	movs	r6, #7
 80065a4:	40ae      	lsls	r6, r5
 80065a6:	5825      	ldr	r5, [r4, r0]
 80065a8:	ea25 0506 	bic.w	r5, r5, r6
 80065ac:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80065ae:	6950      	ldr	r0, [r2, #20]
 80065b0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80065b4:	6150      	str	r0, [r2, #20]
}
 80065b6:	e6e3      	b.n	8006380 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80065bc:	b11d      	cbz	r5, 80065c6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80065be:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80065c2:	42ac      	cmp	r4, r5
 80065c4:	d05b      	beq.n	800667e <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065c6:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80065c8:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065ca:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80065ce:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80065d2:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80065da:	b11d      	cbz	r5, 80065e4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80065dc:	fab5 f585 	clz	r5, r5
 80065e0:	42ae      	cmp	r6, r5
 80065e2:	d072      	beq.n	80066ca <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065e4:	68a5      	ldr	r5, [r4, #8]
 80065e6:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065e8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80065ec:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80065f4:	b11d      	cbz	r5, 80065fe <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 80065f6:	fab5 f585 	clz	r5, r5
 80065fa:	42ae      	cmp	r6, r5
 80065fc:	d053      	beq.n	80066a6 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065fe:	68e5      	ldr	r5, [r4, #12]
 8006600:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006602:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006606:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800660e:	2d00      	cmp	r5, #0
 8006610:	f43f ae26 	beq.w	8006260 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 8006614:	fab5 f585 	clz	r5, r5
 8006618:	e70e      	b.n	8006438 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800661a:	0684      	lsls	r4, r0, #26
 800661c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8006620:	381e      	subs	r0, #30
 8006622:	2601      	movs	r6, #1
 8006624:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8006628:	0500      	lsls	r0, r0, #20
 800662a:	fa06 f505 	lsl.w	r5, r6, r5
 800662e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006632:	432c      	orrs	r4, r5
 8006634:	e74a      	b.n	80064cc <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006636:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800663a:	2c00      	cmp	r4, #0
 800663c:	d065      	beq.n	800670a <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 800663e:	fab4 f484 	clz	r4, r4
 8006642:	3401      	adds	r4, #1
 8006644:	06a4      	lsls	r4, r4, #26
 8006646:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800664e:	2d00      	cmp	r5, #0
 8006650:	d059      	beq.n	8006706 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8006652:	fab5 f585 	clz	r5, r5
 8006656:	3501      	adds	r5, #1
 8006658:	f005 051f 	and.w	r5, r5, #31
 800665c:	2601      	movs	r6, #1
 800665e:	fa06 f505 	lsl.w	r5, r6, r5
 8006662:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006664:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006668:	2800      	cmp	r0, #0
 800666a:	d049      	beq.n	8006700 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 800666c:	fab0 f080 	clz	r0, r0
 8006670:	3001      	adds	r0, #1
 8006672:	f000 001f 	and.w	r0, r0, #31
 8006676:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800667a:	0500      	lsls	r0, r0, #20
 800667c:	e726      	b.n	80064cc <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 800667e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006680:	4614      	mov	r4, r2
 8006682:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006686:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800668a:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800668c:	6808      	ldr	r0, [r1, #0]
 800668e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8006690:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006694:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006698:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800669c:	2d00      	cmp	r5, #0
 800669e:	d19a      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x3d6>
 80066a0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80066a4:	e6b6      	b.n	8006414 <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 80066a6:	6838      	ldr	r0, [r7, #0]
 80066a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066ac:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066ae:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066b0:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066b2:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066b6:	68e4      	ldr	r4, [r4, #12]
 80066b8:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80066bc:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	d1a2      	bne.n	800660a <HAL_ADC_ConfigChannel+0x40a>
 80066c4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80066c8:	e6b6      	b.n	8006438 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 80066ca:	6838      	ldr	r0, [r7, #0]
 80066cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066d0:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066d2:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	68a6      	ldr	r6, [r4, #8]
 80066d8:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066dc:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80066e0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	d183      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x3f0>
 80066e8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80066ec:	e69b      	b.n	8006426 <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066ee:	4908      	ldr	r1, [pc, #32]	; (8006710 <HAL_ADC_ConfigChannel+0x510>)
 80066f0:	e5ee      	b.n	80062d0 <HAL_ADC_ConfigChannel+0xd0>
 80066f2:	4808      	ldr	r0, [pc, #32]	; (8006714 <HAL_ADC_ConfigChannel+0x514>)
 80066f4:	e6ea      	b.n	80064cc <HAL_ADC_ConfigChannel+0x2cc>
 80066f6:	2502      	movs	r5, #2
 80066f8:	e6d5      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x2a6>
 80066fa:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80066fe:	e6c5      	b.n	800648c <HAL_ADC_ConfigChannel+0x28c>
 8006700:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006704:	e6e2      	b.n	80064cc <HAL_ADC_ConfigChannel+0x2cc>
 8006706:	2502      	movs	r5, #2
 8006708:	e7ab      	b.n	8006662 <HAL_ADC_ConfigChannel+0x462>
 800670a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 800670e:	e79c      	b.n	800664a <HAL_ADC_ConfigChannel+0x44a>
 8006710:	50000300 	.word	0x50000300
 8006714:	fe500000 	.word	0xfe500000

08006718 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006718:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	07d2      	lsls	r2, r2, #31
 800671e:	d501      	bpl.n	8006724 <ADC_Enable+0xc>
  return HAL_OK;
 8006720:	2000      	movs	r0, #0
}
 8006722:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006724:	6899      	ldr	r1, [r3, #8]
 8006726:	4a18      	ldr	r2, [pc, #96]	; (8006788 <ADC_Enable+0x70>)
 8006728:	4211      	tst	r1, r2
{
 800672a:	b570      	push	{r4, r5, r6, lr}
 800672c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800672e:	d008      	beq.n	8006742 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006730:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006732:	f043 0310 	orr.w	r3, r3, #16
 8006736:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006738:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800673a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800673c:	4303      	orrs	r3, r0
 800673e:	6633      	str	r3, [r6, #96]	; 0x60
}
 8006740:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	4d11      	ldr	r5, [pc, #68]	; (800678c <ADC_Enable+0x74>)
 8006746:	402a      	ands	r2, r5
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800674e:	f7fb ffbf 	bl	80026d0 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006752:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006754:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	07d0      	lsls	r0, r2, #31
 800675a:	d413      	bmi.n	8006784 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	07d1      	lsls	r1, r2, #31
 8006760:	d404      	bmi.n	800676c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	402a      	ands	r2, r5
 8006766:	f042 0201 	orr.w	r2, r2, #1
 800676a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800676c:	f7fb ffb0 	bl	80026d0 <HAL_GetTick>
 8006770:	1b03      	subs	r3, r0, r4
 8006772:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006774:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006776:	d9ee      	bls.n	8006756 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	07d2      	lsls	r2, r2, #31
 800677c:	d5d8      	bpl.n	8006730 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d5eb      	bpl.n	800675c <ADC_Enable+0x44>
  return HAL_OK;
 8006784:	2000      	movs	r0, #0
}
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	8000003f 	.word	0x8000003f
 800678c:	7fffffc0 	.word	0x7fffffc0

08006790 <HAL_ADC_Start_DMA>:
{
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006794:	6805      	ldr	r5, [r0, #0]
 8006796:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 800679a:	4604      	mov	r4, r0
 800679c:	460e      	mov	r6, r1
 800679e:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067a0:	d022      	beq.n	80067e8 <HAL_ADC_Start_DMA+0x58>
 80067a2:	4a39      	ldr	r2, [pc, #228]	; (8006888 <HAL_ADC_Start_DMA+0xf8>)
 80067a4:	4839      	ldr	r0, [pc, #228]	; (800688c <HAL_ADC_Start_DMA+0xfc>)
 80067a6:	4b3a      	ldr	r3, [pc, #232]	; (8006890 <HAL_ADC_Start_DMA+0x100>)
 80067a8:	4295      	cmp	r5, r2
 80067aa:	bf08      	it	eq
 80067ac:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80067ae:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067b0:	68ab      	ldr	r3, [r5, #8]
 80067b2:	075b      	lsls	r3, r3, #29
 80067b4:	d415      	bmi.n	80067e2 <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 80067b6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d011      	beq.n	80067e2 <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80067be:	4b35      	ldr	r3, [pc, #212]	; (8006894 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 80067c0:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80067c2:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80067c4:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 80067c8:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80067cc:	d00e      	beq.n	80067ec <HAL_ADC_Start_DMA+0x5c>
 80067ce:	f240 2321 	movw	r3, #545	; 0x221
 80067d2:	fa23 f308 	lsr.w	r3, r3, r8
 80067d6:	4003      	ands	r3, r0
 80067d8:	d108      	bne.n	80067ec <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 80067da:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 80067de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80067e2:	2002      	movs	r0, #2
}
 80067e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067e8:	4829      	ldr	r0, [pc, #164]	; (8006890 <HAL_ADC_Start_DMA+0x100>)
 80067ea:	e7e0      	b.n	80067ae <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 80067ec:	4620      	mov	r0, r4
 80067ee:	f7ff ff93 	bl	8006718 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d13f      	bne.n	8006876 <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 80067f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067f8:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80067fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006806:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006808:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <HAL_ADC_Start_DMA+0xf8>)
 800680a:	4299      	cmp	r1, r3
 800680c:	d038      	beq.n	8006880 <HAL_ADC_Start_DMA+0xf0>
 800680e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006812:	4299      	cmp	r1, r3
 8006814:	d034      	beq.n	8006880 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006816:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006818:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800681c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800681e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006822:	4d1d      	ldr	r5, [pc, #116]	; (8006898 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006824:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006828:	bf1c      	itt	ne
 800682a:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 800682c:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8006830:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006832:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006834:	4d19      	ldr	r5, [pc, #100]	; (800689c <HAL_ADC_Start_DMA+0x10c>)
 8006836:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006838:	4d19      	ldr	r5, [pc, #100]	; (80068a0 <HAL_ADC_Start_DMA+0x110>)
 800683a:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800683c:	251c      	movs	r5, #28
 800683e:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8006840:	2500      	movs	r5, #0
 8006842:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006846:	684d      	ldr	r5, [r1, #4]
 8006848:	f045 0510 	orr.w	r5, r5, #16
 800684c:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800684e:	68cd      	ldr	r5, [r1, #12]
 8006850:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006854:	463b      	mov	r3, r7
 8006856:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006858:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800685a:	3140      	adds	r1, #64	; 0x40
 800685c:	f000 f9e0 	bl	8006c20 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006860:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006862:	6893      	ldr	r3, [r2, #8]
 8006864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800686c:	f043 0304 	orr.w	r3, r3, #4
 8006870:	6093      	str	r3, [r2, #8]
}
 8006872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8006876:	2300      	movs	r3, #0
 8006878:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006880:	f1b8 0f00 	cmp.w	r8, #0
 8006884:	d1cb      	bne.n	800681e <HAL_ADC_Start_DMA+0x8e>
 8006886:	e7c6      	b.n	8006816 <HAL_ADC_Start_DMA+0x86>
 8006888:	50000100 	.word	0x50000100
 800688c:	50000700 	.word	0x50000700
 8006890:	50000300 	.word	0x50000300
 8006894:	50000600 	.word	0x50000600
 8006898:	08006179 	.word	0x08006179
 800689c:	08006169 	.word	0x08006169
 80068a0:	080061e5 	.word	0x080061e5

080068a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80068a4:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80068a6:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068aa:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80068ac:	2a01      	cmp	r2, #1
{
 80068ae:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 80068b0:	d056      	beq.n	8006960 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80068b2:	6802      	ldr	r2, [r0, #0]
 80068b4:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80068b6:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80068b8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80068ba:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80068be:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80068c0:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80068c4:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80068c6:	d00b      	beq.n	80068e0 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 80068c8:	4d48      	ldr	r5, [pc, #288]	; (80069ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80068ca:	42aa      	cmp	r2, r5
 80068cc:	d046      	beq.n	800695c <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80068d0:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068d4:	f042 0220 	orr.w	r2, r2, #32
 80068d8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80068da:	b01d      	add	sp, #116	; 0x74
 80068dc:	bc70      	pop	{r4, r5, r6}
 80068de:	4770      	bx	lr
 80068e0:	4843      	ldr	r0, [pc, #268]	; (80069f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80068e2:	6880      	ldr	r0, [r0, #8]
 80068e4:	0740      	lsls	r0, r0, #29
 80068e6:	d50b      	bpl.n	8006900 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80068e8:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ec:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80068f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f2:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80068fa:	b01d      	add	sp, #116	; 0x74
 80068fc:	bc70      	pop	{r4, r5, r6}
 80068fe:	4770      	bx	lr
 8006900:	6890      	ldr	r0, [r2, #8]
 8006902:	0744      	lsls	r4, r0, #29
 8006904:	d4f1      	bmi.n	80068ea <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006906:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800690a:	d02d      	beq.n	8006968 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800690c:	4838      	ldr	r0, [pc, #224]	; (80069f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800690e:	4282      	cmp	r2, r0
 8006910:	d02a      	beq.n	8006968 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006912:	2e00      	cmp	r6, #0
 8006914:	d058      	beq.n	80069c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006916:	4837      	ldr	r0, [pc, #220]	; (80069f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006918:	684c      	ldr	r4, [r1, #4]
 800691a:	6882      	ldr	r2, [r0, #8]
 800691c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006920:	4322      	orrs	r2, r4
 8006922:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8006926:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800692a:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800692c:	4a2f      	ldr	r2, [pc, #188]	; (80069ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800692e:	6894      	ldr	r4, [r2, #8]
 8006930:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006934:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006936:	4322      	orrs	r2, r4
 8006938:	4c2f      	ldr	r4, [pc, #188]	; (80069f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800693a:	68a4      	ldr	r4, [r4, #8]
 800693c:	4322      	orrs	r2, r4
 800693e:	43d2      	mvns	r2, r2
 8006940:	f002 0201 	and.w	r2, r2, #1
 8006944:	b142      	cbz	r2, 8006958 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 8006946:	6884      	ldr	r4, [r0, #8]
 8006948:	688a      	ldr	r2, [r1, #8]
 800694a:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 800694e:	4332      	orrs	r2, r6
 8006950:	f021 010f 	bic.w	r1, r1, #15
 8006954:	430a      	orrs	r2, r1
 8006956:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006958:	2000      	movs	r0, #0
 800695a:	e7cb      	b.n	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 800695c:	4827      	ldr	r0, [pc, #156]	; (80069fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800695e:	e7c0      	b.n	80068e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8006960:	2002      	movs	r0, #2
}
 8006962:	b01d      	add	sp, #116	; 0x74
 8006964:	bc70      	pop	{r4, r5, r6}
 8006966:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006968:	b1ae      	cbz	r6, 8006996 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800696a:	4825      	ldr	r0, [pc, #148]	; (8006a00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800696c:	684c      	ldr	r4, [r1, #4]
 800696e:	6882      	ldr	r2, [r0, #8]
 8006970:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006974:	4322      	orrs	r2, r4
 8006976:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800697a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800697e:	6082      	str	r2, [r0, #8]
 8006980:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006982:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006986:	6880      	ldr	r0, [r0, #8]
 8006988:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800698a:	4302      	orrs	r2, r0
 800698c:	43d2      	mvns	r2, r2
 800698e:	481c      	ldr	r0, [pc, #112]	; (8006a00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006990:	f002 0201 	and.w	r2, r2, #1
 8006994:	e7d6      	b.n	8006944 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006996:	491a      	ldr	r1, [pc, #104]	; (8006a00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006998:	688a      	ldr	r2, [r1, #8]
 800699a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800699e:	608a      	str	r2, [r1, #8]
 80069a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80069a4:	4a12      	ldr	r2, [pc, #72]	; (80069f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80069a6:	6880      	ldr	r0, [r0, #8]
 80069a8:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069aa:	4915      	ldr	r1, [pc, #84]	; (8006a00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80069ac:	4302      	orrs	r2, r0
 80069ae:	43d2      	mvns	r2, r2
 80069b0:	f002 0201 	and.w	r2, r2, #1
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d0cf      	beq.n	8006958 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80069b8:	688a      	ldr	r2, [r1, #8]
 80069ba:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80069be:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069c2:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80069c4:	608a      	str	r2, [r1, #8]
 80069c6:	e795      	b.n	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80069c8:	490a      	ldr	r1, [pc, #40]	; (80069f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80069ca:	4808      	ldr	r0, [pc, #32]	; (80069ec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80069cc:	688a      	ldr	r2, [r1, #8]
 80069ce:	4c0b      	ldr	r4, [pc, #44]	; (80069fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80069d0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80069d4:	608a      	str	r2, [r1, #8]
 80069d6:	6880      	ldr	r0, [r0, #8]
 80069d8:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069da:	4302      	orrs	r2, r0
 80069dc:	4806      	ldr	r0, [pc, #24]	; (80069f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80069de:	6880      	ldr	r0, [r0, #8]
 80069e0:	4302      	orrs	r2, r0
 80069e2:	43d2      	mvns	r2, r2
 80069e4:	f002 0201 	and.w	r2, r2, #1
 80069e8:	e7e4      	b.n	80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80069ea:	bf00      	nop
 80069ec:	50000400 	.word	0x50000400
 80069f0:	50000100 	.word	0x50000100
 80069f4:	50000700 	.word	0x50000700
 80069f8:	50000600 	.word	0x50000600
 80069fc:	50000500 	.word	0x50000500
 8006a00:	50000300 	.word	0x50000300

08006a04 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a04:	4907      	ldr	r1, [pc, #28]	; (8006a24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006a06:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a08:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a0a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a12:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a14:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a16:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006a1e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	e000ed00 	.word	0xe000ed00

08006a28 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a28:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <HAL_NVIC_SetPriority+0x74>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a30:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a32:	f1c3 0e07 	rsb	lr, r3, #7
 8006a36:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a3a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a3e:	bf28      	it	cs
 8006a40:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a44:	f1bc 0f06 	cmp.w	ip, #6
 8006a48:	d91b      	bls.n	8006a82 <HAL_NVIC_SetPriority+0x5a>
 8006a4a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8006a50:	fa0c fc03 	lsl.w	ip, ip, r3
 8006a54:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a58:	f04f 3cff 	mov.w	ip, #4294967295
 8006a5c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006a60:	ea21 010c 	bic.w	r1, r1, ip
 8006a64:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006a66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a68:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006a6c:	db0c      	blt.n	8006a88 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a6e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006a72:	0109      	lsls	r1, r1, #4
 8006a74:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006a78:	b2c9      	uxtb	r1, r1
 8006a7a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a82:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a84:	4613      	mov	r3, r2
 8006a86:	e7e7      	b.n	8006a58 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_NVIC_SetPriority+0x78>)
 8006a8a:	f000 000f 	and.w	r0, r0, #15
 8006a8e:	0109      	lsls	r1, r1, #4
 8006a90:	4403      	add	r3, r0
 8006a92:	b2c9      	uxtb	r1, r1
 8006a94:	7619      	strb	r1, [r3, #24]
 8006a96:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a9a:	bf00      	nop
 8006a9c:	e000ed00 	.word	0xe000ed00
 8006aa0:	e000ecfc 	.word	0xe000ecfc

08006aa4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	db07      	blt.n	8006ab8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006aa8:	4a04      	ldr	r2, [pc, #16]	; (8006abc <HAL_NVIC_EnableIRQ+0x18>)
 8006aaa:	0941      	lsrs	r1, r0, #5
 8006aac:	2301      	movs	r3, #1
 8006aae:	f000 001f 	and.w	r0, r0, #31
 8006ab2:	4083      	lsls	r3, r0
 8006ab4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	e000e100 	.word	0xe000e100

08006ac0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ac0:	3801      	subs	r0, #1
 8006ac2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006ac6:	d210      	bcs.n	8006aea <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ac8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ace:	4c08      	ldr	r4, [pc, #32]	; (8006af0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ad0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8006ad6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ada:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006adc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ade:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ae0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8006ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ae6:	6119      	str	r1, [r3, #16]
 8006ae8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006aea:	2001      	movs	r0, #1
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000ed00 	.word	0xe000ed00

08006af4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d078      	beq.n	8006bea <HAL_DMA_Init+0xf6>
{
 8006af8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006afa:	4b3d      	ldr	r3, [pc, #244]	; (8006bf0 <HAL_DMA_Init+0xfc>)
 8006afc:	6804      	ldr	r4, [r0, #0]
 8006afe:	429c      	cmp	r4, r3
 8006b00:	d95f      	bls.n	8006bc2 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b02:	4a3c      	ldr	r2, [pc, #240]	; (8006bf4 <HAL_DMA_Init+0x100>)
 8006b04:	4b3c      	ldr	r3, [pc, #240]	; (8006bf8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8006b06:	493d      	ldr	r1, [pc, #244]	; (8006bfc <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b08:	4422      	add	r2, r4
 8006b0a:	fba3 3202 	umull	r3, r2, r3, r2
 8006b0e:	0912      	lsrs	r2, r2, #4
 8006b10:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b12:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b14:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b16:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8006b1a:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b1c:	4e36      	ldr	r6, [pc, #216]	; (8006bf8 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b1e:	4f34      	ldr	r7, [pc, #208]	; (8006bf0 <HAL_DMA_Init+0xfc>)
 8006b20:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b24:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8006b26:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6941      	ldr	r1, [r0, #20]
 8006b2c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b2e:	6981      	ldr	r1, [r0, #24]
 8006b30:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8006b32:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b34:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b38:	69c1      	ldr	r1, [r0, #28]
 8006b3a:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b3c:	b2e1      	uxtb	r1, r4
 8006b3e:	3908      	subs	r1, #8
 8006b40:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b44:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b46:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b4a:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8006b4c:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8006b50:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b52:	4e2b      	ldr	r6, [pc, #172]	; (8006c00 <HAL_DMA_Init+0x10c>)
 8006b54:	4b2b      	ldr	r3, [pc, #172]	; (8006c04 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b56:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b5a:	42bc      	cmp	r4, r7
 8006b5c:	bf98      	it	ls
 8006b5e:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b60:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b64:	4c28      	ldr	r4, [pc, #160]	; (8006c08 <HAL_DMA_Init+0x114>)
 8006b66:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b68:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b6c:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b6e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b72:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b74:	6484      	str	r4, [r0, #72]	; 0x48
 8006b76:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b7a:	d02b      	beq.n	8006bd4 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b7c:	6845      	ldr	r5, [r0, #4]
 8006b7e:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b80:	3d01      	subs	r5, #1
 8006b82:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b84:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b88:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b8c:	d828      	bhi.n	8006be0 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b8e:	4b1f      	ldr	r3, [pc, #124]	; (8006c0c <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b90:	4d1f      	ldr	r5, [pc, #124]	; (8006c10 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b92:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b94:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b96:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b98:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b9a:	f004 041f 	and.w	r4, r4, #31
 8006b9e:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ba2:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ba4:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006ba8:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006baa:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bac:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bae:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006bb0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bb2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006bb4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006bb8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8006bbc:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006bbe:	4618      	mov	r0, r3
}
 8006bc0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <HAL_DMA_Init+0x124>)
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8006bc6:	4915      	ldr	r1, [pc, #84]	; (8006c1c <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006bc8:	4422      	add	r2, r4
 8006bca:	fba3 3202 	umull	r3, r2, r3, r2
 8006bce:	0912      	lsrs	r2, r2, #4
 8006bd0:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8006bd2:	e79e      	b.n	8006b12 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006bd4:	2400      	movs	r4, #0
 8006bd6:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006bd8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bdc:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006be0:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8006be2:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006be6:	65c3      	str	r3, [r0, #92]	; 0x5c
 8006be8:	e7e1      	b.n	8006bae <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8006bea:	2001      	movs	r0, #1
}
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40020407 	.word	0x40020407
 8006bf4:	bffdfbf8 	.word	0xbffdfbf8
 8006bf8:	cccccccd 	.word	0xcccccccd
 8006bfc:	40020400 	.word	0x40020400
 8006c00:	40020800 	.word	0x40020800
 8006c04:	40020820 	.word	0x40020820
 8006c08:	40020880 	.word	0x40020880
 8006c0c:	1000823f 	.word	0x1000823f
 8006c10:	40020940 	.word	0x40020940
 8006c14:	40020900 	.word	0x40020900
 8006c18:	bffdfff8 	.word	0xbffdfff8
 8006c1c:	40020000 	.word	0x40020000

08006c20 <HAL_DMA_Start_IT>:
{
 8006c20:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8006c22:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8006c26:	2c01      	cmp	r4, #1
 8006c28:	d051      	beq.n	8006cce <HAL_DMA_Start_IT+0xae>
 8006c2a:	2401      	movs	r4, #1
 8006c2c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006c30:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8006c34:	2c01      	cmp	r4, #1
 8006c36:	d005      	beq.n	8006c44 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8006c3e:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8006c40:	2002      	movs	r0, #2
}
 8006c42:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c44:	2402      	movs	r4, #2
 8006c46:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c4a:	2400      	movs	r4, #0
 8006c4c:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006c4e:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c50:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	f025 0501 	bic.w	r5, r5, #1
 8006c58:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c5a:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8006c5e:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8006c60:	b115      	cbz	r5, 8006c68 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c62:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8006c66:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c68:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8006c6a:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8006c6c:	f006 0c1f 	and.w	ip, r6, #31
 8006c70:	2601      	movs	r6, #1
 8006c72:	fa06 f60c 	lsl.w	r6, r6, ip
 8006c76:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006c78:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c7a:	6883      	ldr	r3, [r0, #8]
 8006c7c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8006c7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8006c80:	bf0b      	itete	eq
 8006c82:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006c84:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006c86:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006c88:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8006c8a:	b1bb      	cbz	r3, 8006cbc <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	f043 030e 	orr.w	r3, r3, #14
 8006c92:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c94:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	03d2      	lsls	r2, r2, #15
 8006c9a:	d503      	bpl.n	8006ca4 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006ca4:	b11d      	cbz	r5, 8006cae <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ca6:	682b      	ldr	r3, [r5, #0]
 8006ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cac:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8006cb4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006cb6:	6023      	str	r3, [r4, #0]
}
 8006cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8006cba:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	f023 0304 	bic.w	r3, r3, #4
 8006cc2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	f043 030a 	orr.w	r3, r3, #10
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	e7e2      	b.n	8006c94 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8006cce:	2002      	movs	r0, #2
}
 8006cd0:	bcf0      	pop	{r4, r5, r6, r7}
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cd4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006cd8:	2a02      	cmp	r2, #2
{
 8006cda:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cdc:	d009      	beq.n	8006cf2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cde:	2204      	movs	r2, #4
 8006ce0:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8006ce2:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8006ce4:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8006ce6:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8006ce8:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006cf0:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cf2:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cf4:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8006cf6:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cf8:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cfa:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cfc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cfe:	f020 000e 	bic.w	r0, r0, #14
 8006d02:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d04:	6820      	ldr	r0, [r4, #0]
 8006d06:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8006d0a:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8006d0c:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d0e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8006d10:	f020 0001 	bic.w	r0, r0, #1
 8006d14:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d16:	f001 011f 	and.w	r1, r1, #31
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d1e:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d22:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d24:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8006d26:	b138      	cbz	r0, 8006d38 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d28:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d2a:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d32:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d34:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d36:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006d38:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8006d3a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006d3c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006d44:	bc30      	pop	{r4, r5}
 8006d46:	4770      	bx	lr

08006d48 <HAL_DMA_Abort_IT>:
{
 8006d48:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006d4a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d009      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8006d52:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d54:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8006d56:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d58:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006d5a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006d5e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 8006d62:	4618      	mov	r0, r3
}
 8006d64:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d66:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d68:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d6a:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d6e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d70:	f021 010e 	bic.w	r1, r1, #14
 8006d74:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006d76:	6819      	ldr	r1, [r3, #0]
 8006d78:	f021 0101 	bic.w	r1, r1, #1
 8006d7c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d7e:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d80:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d86:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d88:	f002 021f 	and.w	r2, r2, #31
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d90:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d94:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d96:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006d98:	b132      	cbz	r2, 8006da8 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d9a:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d9c:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da4:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006da6:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8006da8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006daa:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8006dac:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006dae:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006db2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8006db6:	b113      	cbz	r3, 8006dbe <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8006db8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	4620      	mov	r0, r4
}
 8006dbc:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006dbe:	4618      	mov	r0, r3
}
 8006dc0:	bd38      	pop	{r3, r4, r5, pc}
 8006dc2:	bf00      	nop

08006dc4 <HAL_DMA_IRQHandler>:
{
 8006dc4:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006dc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dc8:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8006dca:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dcc:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006dce:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	420a      	tst	r2, r1
 8006dda:	d00e      	beq.n	8006dfa <HAL_DMA_IRQHandler+0x36>
 8006ddc:	f014 0f04 	tst.w	r4, #4
 8006de0:	d00b      	beq.n	8006dfa <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	069b      	lsls	r3, r3, #26
 8006de6:	d403      	bmi.n	8006df0 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	f023 0304 	bic.w	r3, r3, #4
 8006dee:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006df0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006df2:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006df4:	b1cb      	cbz	r3, 8006e2a <HAL_DMA_IRQHandler+0x66>
}
 8006df6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006df8:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	409a      	lsls	r2, r3
 8006dfe:	420a      	tst	r2, r1
 8006e00:	d015      	beq.n	8006e2e <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8006e02:	f014 0f02 	tst.w	r4, #2
 8006e06:	d012      	beq.n	8006e2e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	0699      	lsls	r1, r3, #26
 8006e0c:	d406      	bmi.n	8006e1c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	f023 030a 	bic.w	r3, r3, #10
 8006e14:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8006e1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e1e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006e20:	2100      	movs	r1, #0
 8006e22:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e5      	bne.n	8006df6 <HAL_DMA_IRQHandler+0x32>
}
 8006e2a:	bc70      	pop	{r4, r5, r6}
 8006e2c:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006e2e:	2208      	movs	r2, #8
 8006e30:	409a      	lsls	r2, r3
 8006e32:	420a      	tst	r2, r1
 8006e34:	d0f9      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8006e36:	0722      	lsls	r2, r4, #28
 8006e38:	d5f7      	bpl.n	8006e2a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e3a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006e3c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e3e:	f022 020e 	bic.w	r2, r2, #14
 8006e42:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e44:	2201      	movs	r2, #1
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8006e4a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e4c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e4e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006e50:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006e54:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d0e6      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x66>
}
 8006e5c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006e5e:	4708      	bx	r1

08006e60 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f000 814c 	beq.w	80070fe <HAL_FDCAN_Init+0x29e>
{
 8006e66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006e6a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006e6e:	4604      	mov	r4, r0
 8006e70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d073      	beq.n	8006f60 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006e78:	6822      	ldr	r2, [r4, #0]
 8006e7a:	6993      	ldr	r3, [r2, #24]
 8006e7c:	f023 0310 	bic.w	r3, r3, #16
 8006e80:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e82:	f7fb fc25 	bl	80026d0 <HAL_GetTick>
 8006e86:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e88:	e004      	b.n	8006e94 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e8a:	f7fb fc21 	bl	80026d0 <HAL_GetTick>
 8006e8e:	1b43      	subs	r3, r0, r5
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d85b      	bhi.n	8006f4c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	0711      	lsls	r1, r2, #28
 8006e9a:	d4f6      	bmi.n	8006e8a <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ea4:	f7fb fc14 	bl	80026d0 <HAL_GetTick>
 8006ea8:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006eaa:	e004      	b.n	8006eb6 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006eac:	f7fb fc10 	bl	80026d0 <HAL_GetTick>
 8006eb0:	1b40      	subs	r0, r0, r5
 8006eb2:	280a      	cmp	r0, #10
 8006eb4:	d84a      	bhi.n	8006f4c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	07d2      	lsls	r2, r2, #31
 8006ebc:	d5f6      	bpl.n	8006eac <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ebe:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006ec0:	4998      	ldr	r1, [pc, #608]	; (8007124 <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ec2:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8006ec6:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ec8:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006eca:	f000 8113 	beq.w	80070f4 <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006ece:	7c22      	ldrb	r2, [r4, #16]
 8006ed0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	bf0c      	ite	eq
 8006ed6:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006eda:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8006ede:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006ee0:	7c62      	ldrb	r2, [r4, #17]
 8006ee2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	bf0c      	ite	eq
 8006ee8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006eec:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8006ef0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006ef2:	7ca2      	ldrb	r2, [r4, #18]
 8006ef4:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	bf0c      	ite	eq
 8006efa:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006efe:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006f02:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006f08:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006f0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f0e:	4302      	orrs	r2, r0
 8006f10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006f12:	699a      	ldr	r2, [r3, #24]
 8006f14:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006f18:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f1a:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006f1c:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f1e:	f022 0210 	bic.w	r2, r2, #16
 8006f22:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006f24:	d021      	beq.n	8006f6a <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006f26:	b321      	cbz	r1, 8006f72 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006f28:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006f2a:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006f2c:	f000 80f5 	beq.w	800711a <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006f30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f36:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f38:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f3a:	f042 0210 	orr.w	r2, r2, #16
 8006f3e:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f40:	d117      	bne.n	8006f72 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	f042 0220 	orr.w	r2, r2, #32
 8006f48:	619a      	str	r2, [r3, #24]
 8006f4a:	e012      	b.n	8006f72 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f4c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f4e:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f56:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006f5a:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006f60:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006f64:	f7fa fd8c 	bl	8001a80 <HAL_FDCAN_MspInit>
 8006f68:	e786      	b.n	8006e78 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	f042 0204 	orr.w	r2, r2, #4
 8006f70:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f72:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f76:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f78:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f7a:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f7c:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f80:	6a21      	ldr	r1, [r4, #32]
 8006f82:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f84:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f86:	6961      	ldr	r1, [r4, #20]
 8006f88:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f8e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f92:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f94:	d10e      	bne.n	8006fb4 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f96:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006f9c:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f9e:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fa0:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fa2:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006fa4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006fa8:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006faa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006fac:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fb2:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006fb4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006fb8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006fba:	495b      	ldr	r1, [pc, #364]	; (8007128 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006fbc:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 8006fbe:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006fc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8006fc4:	f000 809d 	beq.w	8007102 <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006fc8:	4a58      	ldr	r2, [pc, #352]	; (800712c <HAL_FDCAN_Init+0x2cc>)
 8006fca:	4e59      	ldr	r6, [pc, #356]	; (8007130 <HAL_FDCAN_Init+0x2d0>)
 8006fcc:	4f59      	ldr	r7, [pc, #356]	; (8007134 <HAL_FDCAN_Init+0x2d4>)
 8006fce:	4d5a      	ldr	r5, [pc, #360]	; (8007138 <HAL_FDCAN_Init+0x2d8>)
 8006fd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006fd4:	428b      	cmp	r3, r1
 8006fd6:	bf18      	it	ne
 8006fd8:	4691      	movne	r9, r2
 8006fda:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8006fde:	f1a2 0218 	sub.w	r2, r2, #24
 8006fe2:	f101 0110 	add.w	r1, r1, #16
 8006fe6:	bf18      	it	ne
 8006fe8:	4616      	movne	r6, r2
 8006fea:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006fee:	bf14      	ite	ne
 8006ff0:	4617      	movne	r7, r2
 8006ff2:	468e      	moveq	lr, r1
 8006ff4:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006ff8:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8006ffc:	bf14      	ite	ne
 8006ffe:	4696      	movne	lr, r2
 8007000:	4688      	moveq	r8, r1
 8007002:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8007006:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 800700a:	bf14      	ite	ne
 800700c:	4690      	movne	r8, r2
 800700e:	468c      	moveq	ip, r1
 8007010:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8007014:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 8007018:	bf14      	ite	ne
 800701a:	4694      	movne	ip, r2
 800701c:	46a9      	moveq	r9, r5
 800701e:	f502 7254 	add.w	r2, r2, #848	; 0x350
 8007022:	bf18      	it	ne
 8007024:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007026:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800702a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800702c:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800702e:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8007032:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007036:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800703a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800703e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007040:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007044:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8007048:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 800704c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007050:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007054:	1a89      	subs	r1, r1, r2
 8007056:	1c53      	adds	r3, r2, #1
 8007058:	4563      	cmp	r3, ip
 800705a:	ea4f 0391 	mov.w	r3, r1, lsr #2
 800705e:	f103 0301 	add.w	r3, r3, #1
 8007062:	bf98      	it	ls
 8007064:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007066:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800706a:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800706e:	bf88      	it	hi
 8007070:	2501      	movhi	r5, #1
 8007072:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8007076:	d81a      	bhi.n	80070ae <HAL_FDCAN_Init+0x24e>
 8007078:	2917      	cmp	r1, #23
 800707a:	bf8c      	ite	hi
 800707c:	2100      	movhi	r1, #0
 800707e:	2101      	movls	r1, #1
 8007080:	b9a9      	cbnz	r1, 80070ae <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007082:	4616      	mov	r6, r2
 8007084:	b10b      	cbz	r3, 800708a <HAL_FDCAN_Init+0x22a>
 8007086:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800708a:	1aed      	subs	r5, r5, r3
 800708c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007090:	086a      	lsrs	r2, r5, #1
 8007092:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007096:	2000      	movs	r0, #0
 8007098:	2100      	movs	r1, #0
 800709a:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800709e:	429a      	cmp	r2, r3
 80070a0:	d1fb      	bne.n	800709a <HAL_FDCAN_Init+0x23a>
 80070a2:	f025 0301 	bic.w	r3, r5, #1
 80070a6:	429d      	cmp	r5, r3
 80070a8:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80070ac:	d01a      	beq.n	80070e4 <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80070ae:	4611      	mov	r1, r2
 80070b0:	2300      	movs	r3, #0
 80070b2:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80070b6:	458c      	cmp	ip, r1
 80070b8:	d914      	bls.n	80070e4 <HAL_FDCAN_Init+0x284>
 80070ba:	f102 0108 	add.w	r1, r2, #8
 80070be:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80070c0:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80070c2:	d90f      	bls.n	80070e4 <HAL_FDCAN_Init+0x284>
 80070c4:	f102 010c 	add.w	r1, r2, #12
 80070c8:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80070ca:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80070cc:	d90a      	bls.n	80070e4 <HAL_FDCAN_Init+0x284>
 80070ce:	f102 0110 	add.w	r1, r2, #16
 80070d2:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80070d4:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80070d6:	d905      	bls.n	80070e4 <HAL_FDCAN_Init+0x284>
 80070d8:	f102 0114 	add.w	r1, r2, #20
 80070dc:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80070de:	6113      	str	r3, [r2, #16]
 80070e0:	bf88      	it	hi
 80070e2:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 80070e4:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80070e6:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80070e8:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80070ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 80070ee:	65a0      	str	r0, [r4, #88]	; 0x58
}
 80070f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80070f4:	4a11      	ldr	r2, [pc, #68]	; (800713c <HAL_FDCAN_Init+0x2dc>)
 80070f6:	6861      	ldr	r1, [r4, #4]
 80070f8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 80070fc:	e6e7      	b.n	8006ece <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 80070fe:	2001      	movs	r0, #1
}
 8007100:	4770      	bx	lr
 8007102:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800714c <HAL_FDCAN_Init+0x2ec>
 8007106:	4e0e      	ldr	r6, [pc, #56]	; (8007140 <HAL_FDCAN_Init+0x2e0>)
 8007108:	4f0e      	ldr	r7, [pc, #56]	; (8007144 <HAL_FDCAN_Init+0x2e4>)
 800710a:	f8df e044 	ldr.w	lr, [pc, #68]	; 8007150 <HAL_FDCAN_Init+0x2f0>
 800710e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8007154 <HAL_FDCAN_Init+0x2f4>
 8007112:	f8df c044 	ldr.w	ip, [pc, #68]	; 8007158 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007116:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <HAL_FDCAN_Init+0x2e8>)
 8007118:	e785      	b.n	8007026 <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800711a:	f042 0220 	orr.w	r2, r2, #32
 800711e:	619a      	str	r2, [r3, #24]
 8007120:	e727      	b.n	8006f72 <HAL_FDCAN_Init+0x112>
 8007122:	bf00      	nop
 8007124:	40006400 	.word	0x40006400
 8007128:	40006800 	.word	0x40006800
 800712c:	4000a678 	.word	0x4000a678
 8007130:	4000ad00 	.word	0x4000ad00
 8007134:	4000ac28 	.word	0x4000ac28
 8007138:	4000ad18 	.word	0x4000ad18
 800713c:	40006000 	.word	0x40006000
 8007140:	4000a9b0 	.word	0x4000a9b0
 8007144:	4000a8d8 	.word	0x4000a8d8
 8007148:	4000a750 	.word	0x4000a750
 800714c:	4000a9c8 	.word	0x4000a9c8
 8007150:	4000a800 	.word	0x4000a800
 8007154:	4000a7c0 	.word	0x4000a7c0
 8007158:	4000aaa0 	.word	0x4000aaa0

0800715c <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800715c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007160:	3a01      	subs	r2, #1
 8007162:	2a01      	cmp	r2, #1
{
 8007164:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007166:	d905      	bls.n	8007174 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007168:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800716a:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 800716e:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007170:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007172:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007174:	6808      	ldr	r0, [r1, #0]
{
 8007176:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007178:	b978      	cbnz	r0, 800719a <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 800717a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800717e:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007180:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 8007184:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007186:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007188:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800718a:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 800718c:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800718e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 8007192:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 8007196:	bc30      	pop	{r4, r5}
 8007198:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800719a:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80071a0:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80071a2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80071a6:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80071aa:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80071ae:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 80071b2:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 80071b6:	2000      	movs	r0, #0
}
 80071b8:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 80071ba:	f8cc 3004 	str.w	r3, [ip, #4]
}
 80071be:	4770      	bx	lr

080071c0 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80071c0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80071c4:	2a01      	cmp	r2, #1
{
 80071c6:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80071c8:	d005      	beq.n	80071d6 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80071ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80071cc:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 80071d0:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80071d2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80071d4:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071d6:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80071d8:	2202      	movs	r2, #2
 80071da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071de:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80071e0:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 80071e8:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80071ea:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80071f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80071f2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80071f6:	2b02      	cmp	r3, #2
{
 80071f8:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80071fa:	d10c      	bne.n	8007216 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80071fc:	6805      	ldr	r5, [r0, #0]
 80071fe:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8007202:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8007206:	d00d      	beq.n	8007224 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007208:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800720a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 800720e:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007210:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8007214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007216:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007218:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 800721c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800721e:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8007222:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007224:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007228:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800722a:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800722e:	2b00      	cmp	r3, #0
 8007230:	d139      	bne.n	80072a6 <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8007232:	688b      	ldr	r3, [r1, #8]
 8007234:	690f      	ldr	r7, [r1, #16]
 8007236:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8007238:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800723a:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800723e:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8007242:	4303      	orrs	r3, r0
 8007244:	6948      	ldr	r0, [r1, #20]
 8007246:	6a0c      	ldr	r4, [r1, #32]
 8007248:	4303      	orrs	r3, r0
 800724a:	68c8      	ldr	r0, [r1, #12]
 800724c:	4303      	orrs	r3, r0
 800724e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007252:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 8007256:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800725a:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800725e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007262:	4c15      	ldr	r4, [pc, #84]	; (80072b8 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8007264:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007266:	89cb      	ldrh	r3, [r1, #14]
 8007268:	5ce3      	ldrb	r3, [r4, r3]
 800726a:	b1a3      	cbz	r3, 8007296 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800726c:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800726e:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007270:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007272:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8007276:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007278:	433b      	orrs	r3, r7
 800727a:	7857      	ldrb	r7, [r2, #1]
 800727c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007280:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007284:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007288:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800728a:	89cb      	ldrh	r3, [r1, #14]
 800728c:	5ce3      	ldrb	r3, [r4, r3]
 800728e:	459c      	cmp	ip, r3
 8007290:	f102 0204 	add.w	r2, r2, #4
 8007294:	d3ea      	bcc.n	800726c <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007296:	2301      	movs	r3, #1
 8007298:	40b3      	lsls	r3, r6
 800729a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 800729e:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80072a0:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 80072a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 80072a6:	690b      	ldr	r3, [r1, #16]
 80072a8:	6808      	ldr	r0, [r1, #0]
 80072aa:	ea43 0700 	orr.w	r7, r3, r0
 80072ae:	688b      	ldr	r3, [r1, #8]
 80072b0:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80072b2:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 80072b6:	e7c2      	b.n	800723e <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 80072b8:	0800f1cc 	.word	0x0800f1cc

080072bc <HAL_FDCAN_GetRxMessage>:
{
 80072bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072be:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072c0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 80072c4:	2802      	cmp	r0, #2
 80072c6:	d10d      	bne.n	80072e4 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80072c8:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80072ca:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80072ce:	d00f      	beq.n	80072f0 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80072d0:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 80072d4:	0700      	lsls	r0, r0, #28
 80072d6:	d160      	bne.n	800739a <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80072d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80072da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 80072de:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80072e0:	6623      	str	r3, [r4, #96]	; 0x60
}
 80072e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80072e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80072e6:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 80072ea:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80072ec:	6623      	str	r3, [r4, #96]	; 0x60
}
 80072ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80072f0:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 80072f4:	0705      	lsls	r5, r0, #28
 80072f6:	d0ef      	beq.n	80072d8 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80072f8:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80072fc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80072fe:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007302:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8007306:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800730a:	6828      	ldr	r0, [r5, #0]
 800730c:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8007310:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007312:	2800      	cmp	r0, #0
 8007314:	d150      	bne.n	80073b8 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007316:	6828      	ldr	r0, [r5, #0]
 8007318:	f3c0 408a 	ubfx	r0, r0, #18, #11
 800731c:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800731e:	6828      	ldr	r0, [r5, #0]
 8007320:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8007324:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007326:	6828      	ldr	r0, [r5, #0]
 8007328:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800732c:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800732e:	88a8      	ldrh	r0, [r5, #4]
 8007330:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007332:	6868      	ldr	r0, [r5, #4]
 8007334:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8007338:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800733a:	686e      	ldr	r6, [r5, #4]
 800733c:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8007340:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007342:	686e      	ldr	r6, [r5, #4]
 8007344:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8007348:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800734a:	79ee      	ldrb	r6, [r5, #7]
 800734c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007350:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007352:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007354:	4e1a      	ldr	r6, [pc, #104]	; (80073c0 <HAL_FDCAN_GetRxMessage+0x104>)
 8007356:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800735a:	6868      	ldr	r0, [r5, #4]
 800735c:	0fc0      	lsrs	r0, r0, #31
 800735e:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007360:	f1be 0f00 	cmp.w	lr, #0
 8007364:	d011      	beq.n	800738a <HAL_FDCAN_GetRxMessage+0xce>
 8007366:	3b01      	subs	r3, #1
 8007368:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 800736c:	46f4      	mov	ip, lr
 800736e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8007372:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007376:	89d0      	ldrh	r0, [r2, #14]
 8007378:	f1ac 0c06 	sub.w	ip, ip, #6
 800737c:	5c30      	ldrb	r0, [r6, r0]
 800737e:	ebac 0c05 	sub.w	ip, ip, r5
 8007382:	4560      	cmp	r0, ip
 8007384:	d8f2      	bhi.n	800736c <HAL_FDCAN_GetRxMessage+0xb0>
 8007386:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800738a:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 800738c:	bf0c      	ite	eq
 800738e:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8007392:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8007396:	2000      	movs	r0, #0
}
 8007398:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800739a:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800739e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80073a0:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80073a4:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 80073a8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80073ac:	6828      	ldr	r0, [r5, #0]
 80073ae:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 80073b2:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d0ae      	beq.n	8007316 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80073b8:	6828      	ldr	r0, [r5, #0]
 80073ba:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80073be:	e7ad      	b.n	800731c <HAL_FDCAN_GetRxMessage+0x60>
 80073c0:	0800f1cc 	.word	0x0800f1cc

080073c4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80073c4:	6803      	ldr	r3, [r0, #0]
 80073c6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 80073ca:	f000 0007 	and.w	r0, r0, #7
 80073ce:	4770      	bx	lr

080073d0 <HAL_FDCAN_ActivateNotification>:
{
 80073d0:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80073d2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80073d6:	3801      	subs	r0, #1
 80073d8:	2801      	cmp	r0, #1
 80073da:	d905      	bls.n	80073e8 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073de:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80073e2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073e4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80073e6:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 80073e8:	681b      	ldr	r3, [r3, #0]
{
 80073ea:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80073ec:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 80073f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80073f2:	d03d      	beq.n	8007470 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80073f4:	07c4      	lsls	r4, r0, #31
 80073f6:	d43b      	bmi.n	8007470 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80073f8:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80073fa:	f044 0401 	orr.w	r4, r4, #1
 80073fe:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007400:	b1cd      	cbz	r5, 8007436 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007402:	07c5      	lsls	r5, r0, #31
 8007404:	d517      	bpl.n	8007436 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007406:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007408:	f040 0002 	orr.w	r0, r0, #2
 800740c:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800740e:	060c      	lsls	r4, r1, #24
 8007410:	d504      	bpl.n	800741c <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007412:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8007416:	4310      	orrs	r0, r2
 8007418:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800741c:	05c8      	lsls	r0, r1, #23
 800741e:	d504      	bpl.n	800742a <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007420:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8007424:	4302      	orrs	r2, r0
 8007426:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800742a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800742c:	430a      	orrs	r2, r1
    return HAL_OK;
 800742e:	2000      	movs	r0, #0
}
 8007430:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007434:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007436:	f011 0f38 	tst.w	r1, #56	; 0x38
 800743a:	d001      	beq.n	8007440 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800743c:	0784      	lsls	r4, r0, #30
 800743e:	d4e2      	bmi.n	8007406 <HAL_FDCAN_ActivateNotification+0x36>
 8007440:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8007444:	d131      	bne.n	80074aa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007446:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 800744a:	d001      	beq.n	8007450 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800744c:	0704      	lsls	r4, r0, #28
 800744e:	d4da      	bmi.n	8007406 <HAL_FDCAN_ActivateNotification+0x36>
 8007450:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8007454:	d001      	beq.n	800745a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007456:	06c5      	lsls	r5, r0, #27
 8007458:	d4d5      	bmi.n	8007406 <HAL_FDCAN_ActivateNotification+0x36>
 800745a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 800745e:	d001      	beq.n	8007464 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007460:	0684      	lsls	r4, r0, #26
 8007462:	d4d0      	bmi.n	8007406 <HAL_FDCAN_ActivateNotification+0x36>
 8007464:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8007468:	d0d1      	beq.n	800740e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800746a:	0645      	lsls	r5, r0, #25
 800746c:	d5cf      	bpl.n	800740e <HAL_FDCAN_ActivateNotification+0x3e>
 800746e:	e7ca      	b.n	8007406 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007470:	f011 0f38 	tst.w	r1, #56	; 0x38
 8007474:	d001      	beq.n	800747a <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007476:	0784      	lsls	r4, r0, #30
 8007478:	d5be      	bpl.n	80073f8 <HAL_FDCAN_ActivateNotification+0x28>
 800747a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 800747e:	d117      	bne.n	80074b0 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007480:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8007484:	d001      	beq.n	800748a <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007486:	0704      	lsls	r4, r0, #28
 8007488:	d5b6      	bpl.n	80073f8 <HAL_FDCAN_ActivateNotification+0x28>
 800748a:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 800748e:	d001      	beq.n	8007494 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007490:	06c4      	lsls	r4, r0, #27
 8007492:	d5b1      	bpl.n	80073f8 <HAL_FDCAN_ActivateNotification+0x28>
 8007494:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8007498:	d001      	beq.n	800749e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800749a:	0684      	lsls	r4, r0, #26
 800749c:	d5ac      	bpl.n	80073f8 <HAL_FDCAN_ActivateNotification+0x28>
 800749e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80074a2:	d0ad      	beq.n	8007400 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80074a4:	0644      	lsls	r4, r0, #25
 80074a6:	d4ab      	bmi.n	8007400 <HAL_FDCAN_ActivateNotification+0x30>
 80074a8:	e7a6      	b.n	80073f8 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80074aa:	0745      	lsls	r5, r0, #29
 80074ac:	d4ab      	bmi.n	8007406 <HAL_FDCAN_ActivateNotification+0x36>
 80074ae:	e7ca      	b.n	8007446 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80074b0:	0744      	lsls	r4, r0, #29
 80074b2:	d5a1      	bpl.n	80073f8 <HAL_FDCAN_ActivateNotification+0x28>
 80074b4:	e7e4      	b.n	8007480 <HAL_FDCAN_ActivateNotification+0xb0>
 80074b6:	bf00      	nop

080074b8 <HAL_FDCAN_TxEventFifoCallback>:
}
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop

080074bc <HAL_FDCAN_RxFifo1Callback>:
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop

080074c0 <HAL_FDCAN_TxFifoEmptyCallback>:
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop

080074c4 <HAL_FDCAN_TxBufferCompleteCallback>:
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop

080074c8 <HAL_FDCAN_TxBufferAbortCallback>:
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop

080074cc <HAL_FDCAN_TimestampWraparoundCallback>:
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop

080074d0 <HAL_FDCAN_TimeoutOccurredCallback>:
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop

080074d4 <HAL_FDCAN_HighPriorityMessageCallback>:
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop

080074d8 <HAL_FDCAN_ErrorCallback>:
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop

080074dc <HAL_FDCAN_ErrorStatusCallback>:
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <HAL_FDCAN_IRQHandler>:
{
 80074e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80074e4:	6803      	ldr	r3, [r0, #0]
 80074e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80074e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074ea:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80074ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80074f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80074f2:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80074f4:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 80074f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80074fa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80074fc:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 80074fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007500:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8007502:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007506:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800750a:	0652      	lsls	r2, r2, #25
{
 800750c:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 800750e:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007512:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007516:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 800751a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800751e:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007522:	d502      	bpl.n	800752a <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007526:	0651      	lsls	r1, r2, #25
 8007528:	d473      	bmi.n	8007612 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800752a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800752c:	05d2      	lsls	r2, r2, #23
 800752e:	d502      	bpl.n	8007536 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007532:	05d0      	lsls	r0, r2, #23
 8007534:	d45d      	bmi.n	80075f2 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8007536:	f1b9 0f00 	cmp.w	r9, #0
 800753a:	d14a      	bne.n	80075d2 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 800753c:	f1b8 0f00 	cmp.w	r8, #0
 8007540:	d137      	bne.n	80075b2 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8007542:	2f00      	cmp	r7, #0
 8007544:	d13e      	bne.n	80075c4 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007548:	0591      	lsls	r1, r2, #22
 800754a:	d502      	bpl.n	8007552 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800754c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800754e:	0592      	lsls	r2, r2, #22
 8007550:	d475      	bmi.n	800763e <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007554:	0617      	lsls	r7, r2, #24
 8007556:	d502      	bpl.n	800755e <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800755a:	0610      	lsls	r0, r2, #24
 800755c:	d477      	bmi.n	800764e <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800755e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007560:	0491      	lsls	r1, r2, #18
 8007562:	d502      	bpl.n	800756a <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007566:	0492      	lsls	r2, r2, #18
 8007568:	d459      	bmi.n	800761e <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800756a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800756c:	0417      	lsls	r7, r2, #16
 800756e:	d502      	bpl.n	8007576 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007572:	0410      	lsls	r0, r2, #16
 8007574:	d45b      	bmi.n	800762e <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007578:	0451      	lsls	r1, r2, #17
 800757a:	d509      	bpl.n	8007590 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800757c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800757e:	0452      	lsls	r2, r2, #17
 8007580:	d506      	bpl.n	8007590 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007586:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007588:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800758a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800758e:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8007590:	b94e      	cbnz	r6, 80075a6 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8007592:	b125      	cbz	r5, 800759e <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8007598:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800759a:	432b      	orrs	r3, r5
 800759c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800759e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80075a0:	bb13      	cbnz	r3, 80075e8 <HAL_FDCAN_IRQHandler+0x108>
}
 80075a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80075a6:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80075a8:	4631      	mov	r1, r6
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7ff ff96 	bl	80074dc <HAL_FDCAN_ErrorStatusCallback>
 80075b0:	e7ef      	b.n	8007592 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80075b2:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80075b6:	4641      	mov	r1, r8
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7fa f8f1 	bl	80017a0 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80075be:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	d0c0      	beq.n	8007546 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80075c4:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80075c6:	4639      	mov	r1, r7
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7ff ff77 	bl	80074bc <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	e7b9      	b.n	8007546 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80075d2:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80075d6:	4649      	mov	r1, r9
 80075d8:	4620      	mov	r0, r4
 80075da:	f7ff ff6d 	bl	80074b8 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80075de:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 80075e0:	f1b8 0f00 	cmp.w	r8, #0
 80075e4:	d0ad      	beq.n	8007542 <HAL_FDCAN_IRQHandler+0x62>
 80075e6:	e7e4      	b.n	80075b2 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff ff75 	bl	80074d8 <HAL_FDCAN_ErrorCallback>
}
 80075ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80075f2:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80075f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80075fa:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80075fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007600:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff ff60 	bl	80074c8 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007608:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 800760a:	f1b9 0f00 	cmp.w	r9, #0
 800760e:	d095      	beq.n	800753c <HAL_FDCAN_IRQHandler+0x5c>
 8007610:	e7df      	b.n	80075d2 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007612:	2240      	movs	r2, #64	; 0x40
 8007614:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007616:	f7ff ff5d 	bl	80074d4 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	e785      	b.n	800752a <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800761e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007622:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff ff51 	bl	80074cc <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	e79d      	b.n	800756a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800762e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007632:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007634:	4620      	mov	r0, r4
 8007636:	f7ff ff4b 	bl	80074d0 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	e79b      	b.n	8007576 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800763e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007642:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff ff3b 	bl	80074c0 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	e781      	b.n	8007552 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800764e:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007652:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007656:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800765c:	4620      	mov	r0, r4
 800765e:	f7ff ff31 	bl	80074c4 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	e77b      	b.n	800755e <HAL_FDCAN_IRQHandler+0x7e>
 8007666:	bf00      	nop

08007668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800766c:	680c      	ldr	r4, [r1, #0]
{
 800766e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007670:	2c00      	cmp	r4, #0
 8007672:	d07d      	beq.n	8007770 <HAL_GPIO_Init+0x108>
 8007674:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007678:	4e71      	ldr	r6, [pc, #452]	; (8007840 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 800767a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800767c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007680:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007682:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8007686:	ea17 0a04 	ands.w	sl, r7, r4
 800768a:	d06b      	beq.n	8007764 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800768c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8007690:	f001 0203 	and.w	r2, r1, #3
 8007694:	1e55      	subs	r5, r2, #1
 8007696:	2d01      	cmp	r5, #1
 8007698:	d96d      	bls.n	8007776 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800769a:	2a03      	cmp	r2, #3
 800769c:	f040 80b1 	bne.w	8007802 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076a0:	fa02 f20c 	lsl.w	r2, r2, ip
 80076a4:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 80076a6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076a8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076aa:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80076ac:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 80076b0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80076b2:	d057      	beq.n	8007764 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076b4:	4d63      	ldr	r5, [pc, #396]	; (8007844 <HAL_GPIO_Init+0x1dc>)
 80076b6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80076b8:	f042 0201 	orr.w	r2, r2, #1
 80076bc:	662a      	str	r2, [r5, #96]	; 0x60
 80076be:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80076c0:	f002 0201 	and.w	r2, r2, #1
 80076c4:	9203      	str	r2, [sp, #12]
 80076c6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80076c8:	f023 0203 	bic.w	r2, r3, #3
 80076cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80076d0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076d4:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80076d8:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076da:	00bf      	lsls	r7, r7, #2
 80076dc:	f04f 080f 	mov.w	r8, #15
 80076e0:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076e4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076e8:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076ec:	d01a      	beq.n	8007724 <HAL_GPIO_Init+0xbc>
 80076ee:	4d56      	ldr	r5, [pc, #344]	; (8007848 <HAL_GPIO_Init+0x1e0>)
 80076f0:	42a8      	cmp	r0, r5
 80076f2:	f000 8092 	beq.w	800781a <HAL_GPIO_Init+0x1b2>
 80076f6:	4d55      	ldr	r5, [pc, #340]	; (800784c <HAL_GPIO_Init+0x1e4>)
 80076f8:	42a8      	cmp	r0, r5
 80076fa:	f000 8093 	beq.w	8007824 <HAL_GPIO_Init+0x1bc>
 80076fe:	4d54      	ldr	r5, [pc, #336]	; (8007850 <HAL_GPIO_Init+0x1e8>)
 8007700:	42a8      	cmp	r0, r5
 8007702:	f000 8083 	beq.w	800780c <HAL_GPIO_Init+0x1a4>
 8007706:	4d53      	ldr	r5, [pc, #332]	; (8007854 <HAL_GPIO_Init+0x1ec>)
 8007708:	42a8      	cmp	r0, r5
 800770a:	f000 8092 	beq.w	8007832 <HAL_GPIO_Init+0x1ca>
 800770e:	4d52      	ldr	r5, [pc, #328]	; (8007858 <HAL_GPIO_Init+0x1f0>)
 8007710:	42a8      	cmp	r0, r5
 8007712:	bf0c      	ite	eq
 8007714:	f04f 0805 	moveq.w	r8, #5
 8007718:	f04f 0806 	movne.w	r8, #6
 800771c:	fa08 f707 	lsl.w	r7, r8, r7
 8007720:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007724:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8007728:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 800772a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800772e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8007730:	bf54      	ite	pl
 8007732:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007734:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8007738:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800773a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800773c:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 800773e:	bf54      	ite	pl
 8007740:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007742:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8007746:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8007748:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800774a:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 800774c:	bf54      	ite	pl
 800774e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007750:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8007754:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007756:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007758:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 800775a:	bf54      	ite	pl
 800775c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800775e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8007762:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8007764:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007766:	fa34 f203 	lsrs.w	r2, r4, r3
 800776a:	f10c 0c02 	add.w	ip, ip, #2
 800776e:	d188      	bne.n	8007682 <HAL_GPIO_Init+0x1a>
  }
}
 8007770:	b005      	add	sp, #20
 8007772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007776:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800777a:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800777e:	f04f 0803 	mov.w	r8, #3
 8007782:	fa08 f80c 	lsl.w	r8, r8, ip
 8007786:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800778a:	fa05 f50c 	lsl.w	r5, r5, ip
 800778e:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8007792:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007794:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8007798:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800779c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077a0:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80077a4:	409f      	lsls	r7, r3
 80077a6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80077aa:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80077ac:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077ae:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077b2:	f8de 7008 	ldr.w	r7, [lr, #8]
 80077b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80077ba:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077be:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80077c0:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077c2:	fa02 f20c 	lsl.w	r2, r2, ip
 80077c6:	f47f af6e 	bne.w	80076a6 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 80077ca:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80077ce:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077d2:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80077d6:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80077da:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077dc:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077e0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077e4:	fa07 f708 	lsl.w	r7, r7, r8
 80077e8:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077ea:	270f      	movs	r7, #15
 80077ec:	fa07 f808 	lsl.w	r8, r7, r8
 80077f0:	9f00      	ldr	r7, [sp, #0]
 80077f2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077f6:	9f01      	ldr	r7, [sp, #4]
 80077f8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80077fc:	f8c9 7020 	str.w	r7, [r9, #32]
 8007800:	e751      	b.n	80076a6 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007802:	2503      	movs	r5, #3
 8007804:	fa05 f50c 	lsl.w	r5, r5, ip
 8007808:	43ed      	mvns	r5, r5
 800780a:	e7cf      	b.n	80077ac <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800780c:	f04f 0803 	mov.w	r8, #3
 8007810:	fa08 f707 	lsl.w	r7, r8, r7
 8007814:	ea49 0907 	orr.w	r9, r9, r7
 8007818:	e784      	b.n	8007724 <HAL_GPIO_Init+0xbc>
 800781a:	fa0b f707 	lsl.w	r7, fp, r7
 800781e:	ea49 0907 	orr.w	r9, r9, r7
 8007822:	e77f      	b.n	8007724 <HAL_GPIO_Init+0xbc>
 8007824:	f04f 0802 	mov.w	r8, #2
 8007828:	fa08 f707 	lsl.w	r7, r8, r7
 800782c:	ea49 0907 	orr.w	r9, r9, r7
 8007830:	e778      	b.n	8007724 <HAL_GPIO_Init+0xbc>
 8007832:	f04f 0804 	mov.w	r8, #4
 8007836:	fa08 f707 	lsl.w	r7, r8, r7
 800783a:	ea49 0907 	orr.w	r9, r9, r7
 800783e:	e771      	b.n	8007724 <HAL_GPIO_Init+0xbc>
 8007840:	40010400 	.word	0x40010400
 8007844:	40021000 	.word	0x40021000
 8007848:	48000400 	.word	0x48000400
 800784c:	48000800 	.word	0x48000800
 8007850:	48000c00 	.word	0x48000c00
 8007854:	48001000 	.word	0x48001000
 8007858:	48001400 	.word	0x48001400

0800785c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800785c:	6903      	ldr	r3, [r0, #16]
 800785e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007860:	bf14      	ite	ne
 8007862:	2001      	movne	r0, #1
 8007864:	2000      	moveq	r0, #0
 8007866:	4770      	bx	lr

08007868 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007868:	b10a      	cbz	r2, 800786e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800786a:	6181      	str	r1, [r0, #24]
 800786c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800786e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop

08007874 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007874:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007876:	ea01 0203 	and.w	r2, r1, r3
 800787a:	ea21 0103 	bic.w	r1, r1, r3
 800787e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007882:	6181      	str	r1, [r0, #24]
}
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop

08007888 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007888:	4a37      	ldr	r2, [pc, #220]	; (8007968 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800788a:	b960      	cbnz	r0, 80078a6 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800788c:	6813      	ldr	r3, [r2, #0]
 800788e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007896:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800789a:	d01d      	beq.n	80078d8 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800789c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80078a4:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078a6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80078aa:	d007      	beq.n	80078bc <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80078ac:	6813      	ldr	r3, [r2, #0]
 80078ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80078b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80078b6:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80078b8:	6013      	str	r3, [r2, #0]
}
 80078ba:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078bc:	6813      	ldr	r3, [r2, #0]
 80078be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80078ca:	d02b      	beq.n	8007924 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80078d0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80078d6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078e0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078e2:	4822      	ldr	r0, [pc, #136]	; (800796c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80078e4:	4922      	ldr	r1, [pc, #136]	; (8007970 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80078ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078ee:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078f0:	6803      	ldr	r3, [r0, #0]
 80078f2:	2032      	movs	r0, #50	; 0x32
 80078f4:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078f8:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078fa:	fba1 1303 	umull	r1, r3, r1, r3
 80078fe:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007900:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007902:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007906:	d506      	bpl.n	8007916 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007908:	e000      	b.n	800790c <HAL_PWREx_ControlVoltageScaling+0x84>
 800790a:	b123      	cbz	r3, 8007916 <HAL_PWREx_ControlVoltageScaling+0x8e>
 800790c:	6951      	ldr	r1, [r2, #20]
 800790e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007910:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007914:	d4f9      	bmi.n	800790a <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 800791c:	bf54      	ite	pl
 800791e:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8007920:	2003      	movmi	r0, #3
 8007922:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800792c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800792e:	480f      	ldr	r0, [pc, #60]	; (800796c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007930:	490f      	ldr	r1, [pc, #60]	; (8007970 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800793a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800793c:	6803      	ldr	r3, [r0, #0]
 800793e:	2032      	movs	r0, #50	; 0x32
 8007940:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007944:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007946:	fba1 1303 	umull	r1, r3, r1, r3
 800794a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800794c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800794e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007952:	d5e0      	bpl.n	8007916 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007954:	e001      	b.n	800795a <HAL_PWREx_ControlVoltageScaling+0xd2>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0dd      	beq.n	8007916 <HAL_PWREx_ControlVoltageScaling+0x8e>
 800795a:	6951      	ldr	r1, [r2, #20]
 800795c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800795e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007962:	d5d8      	bpl.n	8007916 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007964:	e7f7      	b.n	8007956 <HAL_PWREx_ControlVoltageScaling+0xce>
 8007966:	bf00      	nop
 8007968:	40007000 	.word	0x40007000
 800796c:	20000008 	.word	0x20000008
 8007970:	431bde83 	.word	0x431bde83

08007974 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007974:	4a02      	ldr	r2, [pc, #8]	; (8007980 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007976:	6893      	ldr	r3, [r2, #8]
 8007978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800797c:	6093      	str	r3, [r2, #8]
}
 800797e:	4770      	bx	lr
 8007980:	40007000 	.word	0x40007000

08007984 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007984:	2800      	cmp	r0, #0
 8007986:	f000 81c3 	beq.w	8007d10 <HAL_RCC_OscConfig+0x38c>
{
 800798a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800798e:	6803      	ldr	r3, [r0, #0]
 8007990:	07d9      	lsls	r1, r3, #31
{
 8007992:	b082      	sub	sp, #8
 8007994:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007996:	d52d      	bpl.n	80079f4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007998:	49a6      	ldr	r1, [pc, #664]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 800799a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800799c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800799e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80079a2:	2a0c      	cmp	r2, #12
 80079a4:	f000 810a 	beq.w	8007bbc <HAL_RCC_OscConfig+0x238>
 80079a8:	2a08      	cmp	r2, #8
 80079aa:	f000 810c 	beq.w	8007bc6 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b4:	f000 8133 	beq.w	8007c1e <HAL_RCC_OscConfig+0x29a>
 80079b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079bc:	f000 819b 	beq.w	8007cf6 <HAL_RCC_OscConfig+0x372>
 80079c0:	4d9c      	ldr	r5, [pc, #624]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 80079c2:	682a      	ldr	r2, [r5, #0]
 80079c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	682a      	ldr	r2, [r5, #0]
 80079cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079d0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f040 8128 	bne.w	8007c28 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fa fe7a 	bl	80026d0 <HAL_GetTick>
 80079dc:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079de:	e005      	b.n	80079ec <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079e0:	f7fa fe76 	bl	80026d0 <HAL_GetTick>
 80079e4:	1b80      	subs	r0, r0, r6
 80079e6:	2864      	cmp	r0, #100	; 0x64
 80079e8:	f200 8142 	bhi.w	8007c70 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	039f      	lsls	r7, r3, #14
 80079f0:	d4f6      	bmi.n	80079e0 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	079e      	lsls	r6, r3, #30
 80079f6:	d528      	bpl.n	8007a4a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079f8:	4a8e      	ldr	r2, [pc, #568]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 80079fa:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079fc:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079fe:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007a02:	2b0c      	cmp	r3, #12
 8007a04:	f000 80ec 	beq.w	8007be0 <HAL_RCC_OscConfig+0x25c>
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	f000 80ee 	beq.w	8007bea <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a0e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a10:	4d88      	ldr	r5, [pc, #544]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 811d 	beq.w	8007c52 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a20:	f7fa fe56 	bl	80026d0 <HAL_GetTick>
 8007a24:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a26:	e005      	b.n	8007a34 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a28:	f7fa fe52 	bl	80026d0 <HAL_GetTick>
 8007a2c:	1b80      	subs	r0, r0, r6
 8007a2e:	2802      	cmp	r0, #2
 8007a30:	f200 811e 	bhi.w	8007c70 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	0558      	lsls	r0, r3, #21
 8007a38:	d5f6      	bpl.n	8007a28 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a3a:	686b      	ldr	r3, [r5, #4]
 8007a3c:	6922      	ldr	r2, [r4, #16]
 8007a3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007a42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007a46:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	071a      	lsls	r2, r3, #28
 8007a4c:	d519      	bpl.n	8007a82 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a4e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a50:	4d78      	ldr	r5, [pc, #480]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 809e 	beq.w	8007b94 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8007a58:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007a5c:	f043 0301 	orr.w	r3, r3, #1
 8007a60:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a64:	f7fa fe34 	bl	80026d0 <HAL_GetTick>
 8007a68:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a6a:	e005      	b.n	8007a78 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a6c:	f7fa fe30 	bl	80026d0 <HAL_GetTick>
 8007a70:	1b80      	subs	r0, r0, r6
 8007a72:	2802      	cmp	r0, #2
 8007a74:	f200 80fc 	bhi.w	8007c70 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007a7c:	079f      	lsls	r7, r3, #30
 8007a7e:	d5f5      	bpl.n	8007a6c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	0759      	lsls	r1, r3, #29
 8007a84:	d541      	bpl.n	8007b0a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a86:	4b6b      	ldr	r3, [pc, #428]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a8a:	00d2      	lsls	r2, r2, #3
 8007a8c:	f100 80f4 	bmi.w	8007c78 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a96:	659a      	str	r2, [r3, #88]	; 0x58
 8007a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007aa2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aa4:	4e64      	ldr	r6, [pc, #400]	; (8007c38 <HAL_RCC_OscConfig+0x2b4>)
 8007aa6:	6833      	ldr	r3, [r6, #0]
 8007aa8:	05df      	lsls	r7, r3, #23
 8007aaa:	f140 8113 	bpl.w	8007cd4 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aae:	68a3      	ldr	r3, [r4, #8]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	f000 80e3 	beq.w	8007c7c <HAL_RCC_OscConfig+0x2f8>
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	f000 8169 	beq.w	8007d8e <HAL_RCC_OscConfig+0x40a>
 8007abc:	4e5d      	ldr	r6, [pc, #372]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007abe:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8007aca:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007ace:	f022 0204 	bic.w	r2, r2, #4
 8007ad2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 80d7 	bne.w	8007c8a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007adc:	f7fa fdf8 	bl	80026d0 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007ae4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ae6:	e005      	b.n	8007af4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae8:	f7fa fdf2 	bl	80026d0 <HAL_GetTick>
 8007aec:	1bc0      	subs	r0, r0, r7
 8007aee:	4540      	cmp	r0, r8
 8007af0:	f200 80be 	bhi.w	8007c70 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007af4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8007af8:	079a      	lsls	r2, r3, #30
 8007afa:	d4f5      	bmi.n	8007ae8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007afc:	b125      	cbz	r5, 8007b08 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007afe:	4a4d      	ldr	r2, [pc, #308]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007b00:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	069b      	lsls	r3, r3, #26
 8007b0c:	d518      	bpl.n	8007b40 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b0e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b10:	4d48      	ldr	r5, [pc, #288]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80ca 	beq.w	8007cac <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8007b18:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007b1c:	f043 0301 	orr.w	r3, r3, #1
 8007b20:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b24:	f7fa fdd4 	bl	80026d0 <HAL_GetTick>
 8007b28:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b2a:	e005      	b.n	8007b38 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b2c:	f7fa fdd0 	bl	80026d0 <HAL_GetTick>
 8007b30:	1b80      	subs	r0, r0, r6
 8007b32:	2802      	cmp	r0, #2
 8007b34:	f200 809c 	bhi.w	8007c70 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b38:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007b3c:	079f      	lsls	r7, r3, #30
 8007b3e:	d5f5      	bpl.n	8007b2c <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b40:	69e0      	ldr	r0, [r4, #28]
 8007b42:	b318      	cbz	r0, 8007b8c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b44:	4d3b      	ldr	r5, [pc, #236]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007b46:	68ab      	ldr	r3, [r5, #8]
 8007b48:	f003 030c 	and.w	r3, r3, #12
 8007b4c:	2b0c      	cmp	r3, #12
 8007b4e:	f000 812c 	beq.w	8007daa <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b52:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b54:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b5a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b5c:	f000 80da 	beq.w	8007d14 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007b60:	68eb      	ldr	r3, [r5, #12]
 8007b62:	f023 0303 	bic.w	r3, r3, #3
 8007b66:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007b68:	68eb      	ldr	r3, [r5, #12]
 8007b6a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b72:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fa fdac 	bl	80026d0 <HAL_GetTick>
 8007b78:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b7a:	e004      	b.n	8007b86 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b7c:	f7fa fda8 	bl	80026d0 <HAL_GetTick>
 8007b80:	1b00      	subs	r0, r0, r4
 8007b82:	2802      	cmp	r0, #2
 8007b84:	d874      	bhi.n	8007c70 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	019b      	lsls	r3, r3, #6
 8007b8a:	d4f7      	bmi.n	8007b7c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8007b8c:	2000      	movs	r0, #0
}
 8007b8e:	b002      	add	sp, #8
 8007b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007b94:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007ba0:	f7fa fd96 	bl	80026d0 <HAL_GetTick>
 8007ba4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ba6:	e004      	b.n	8007bb2 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba8:	f7fa fd92 	bl	80026d0 <HAL_GetTick>
 8007bac:	1b80      	subs	r0, r0, r6
 8007bae:	2802      	cmp	r0, #2
 8007bb0:	d85e      	bhi.n	8007c70 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bb2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007bb6:	0798      	lsls	r0, r3, #30
 8007bb8:	d4f6      	bmi.n	8007ba8 <HAL_RCC_OscConfig+0x224>
 8007bba:	e761      	b.n	8007a80 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bbc:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007bc0:	2903      	cmp	r1, #3
 8007bc2:	f47f aef4 	bne.w	80079ae <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bc6:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	0392      	lsls	r2, r2, #14
 8007bcc:	f57f af12 	bpl.w	80079f4 <HAL_RCC_OscConfig+0x70>
 8007bd0:	6862      	ldr	r2, [r4, #4]
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	f47f af0e 	bne.w	80079f4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8007bd8:	2001      	movs	r0, #1
}
 8007bda:	b002      	add	sp, #8
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007be0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007be4:	2a02      	cmp	r2, #2
 8007be6:	f47f af12 	bne.w	8007a0e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bea:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	055d      	lsls	r5, r3, #21
 8007bf0:	d502      	bpl.n	8007bf8 <HAL_RCC_OscConfig+0x274>
 8007bf2:	68e3      	ldr	r3, [r4, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0ef      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bf8:	4a0e      	ldr	r2, [pc, #56]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007bfa:	6920      	ldr	r0, [r4, #16]
 8007bfc:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007bfe:	490f      	ldr	r1, [pc, #60]	; (8007c3c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c00:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c04:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007c08:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007c0a:	6808      	ldr	r0, [r1, #0]
 8007c0c:	f7fe f92e 	bl	8005e6c <HAL_InitTick>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d1e1      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	071a      	lsls	r2, r3, #28
 8007c18:	f57f af33 	bpl.w	8007a82 <HAL_RCC_OscConfig+0xfe>
 8007c1c:	e717      	b.n	8007a4e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c1e:	4a05      	ldr	r2, [pc, #20]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
 8007c20:	6813      	ldr	r3, [r2, #0]
 8007c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007c28:	f7fa fd52 	bl	80026d0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c2c:	4e01      	ldr	r6, [pc, #4]	; (8007c34 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8007c2e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c30:	e00b      	b.n	8007c4a <HAL_RCC_OscConfig+0x2c6>
 8007c32:	bf00      	nop
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40007000 	.word	0x40007000
 8007c3c:	20000010 	.word	0x20000010
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c40:	f7fa fd46 	bl	80026d0 <HAL_GetTick>
 8007c44:	1b40      	subs	r0, r0, r5
 8007c46:	2864      	cmp	r0, #100	; 0x64
 8007c48:	d812      	bhi.n	8007c70 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c4a:	6833      	ldr	r3, [r6, #0]
 8007c4c:	039b      	lsls	r3, r3, #14
 8007c4e:	d5f7      	bpl.n	8007c40 <HAL_RCC_OscConfig+0x2bc>
 8007c50:	e6cf      	b.n	80079f2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007c5a:	f7fa fd39 	bl	80026d0 <HAL_GetTick>
 8007c5e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	0559      	lsls	r1, r3, #21
 8007c64:	d5d6      	bpl.n	8007c14 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c66:	f7fa fd33 	bl	80026d0 <HAL_GetTick>
 8007c6a:	1b80      	subs	r0, r0, r6
 8007c6c:	2802      	cmp	r0, #2
 8007c6e:	d9f7      	bls.n	8007c60 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8007c70:	2003      	movs	r0, #3
}
 8007c72:	b002      	add	sp, #8
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007c78:	2500      	movs	r5, #0
 8007c7a:	e713      	b.n	8007aa4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c7c:	4a65      	ldr	r2, [pc, #404]	; (8007e14 <HAL_RCC_OscConfig+0x490>)
 8007c7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8007c8a:	f7fa fd21 	bl	80026d0 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c8e:	4f61      	ldr	r7, [pc, #388]	; (8007e14 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8007c90:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c92:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c96:	e004      	b.n	8007ca2 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c98:	f7fa fd1a 	bl	80026d0 <HAL_GetTick>
 8007c9c:	1b80      	subs	r0, r0, r6
 8007c9e:	4540      	cmp	r0, r8
 8007ca0:	d8e6      	bhi.n	8007c70 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ca6:	0799      	lsls	r1, r3, #30
 8007ca8:	d5f6      	bpl.n	8007c98 <HAL_RCC_OscConfig+0x314>
 8007caa:	e727      	b.n	8007afc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8007cac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8007cb8:	f7fa fd0a 	bl	80026d0 <HAL_GetTick>
 8007cbc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007cbe:	e004      	b.n	8007cca <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cc0:	f7fa fd06 	bl	80026d0 <HAL_GetTick>
 8007cc4:	1b80      	subs	r0, r0, r6
 8007cc6:	2802      	cmp	r0, #2
 8007cc8:	d8d2      	bhi.n	8007c70 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007cca:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007cce:	0798      	lsls	r0, r3, #30
 8007cd0:	d4f6      	bmi.n	8007cc0 <HAL_RCC_OscConfig+0x33c>
 8007cd2:	e735      	b.n	8007b40 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cd4:	6833      	ldr	r3, [r6, #0]
 8007cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cda:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007cdc:	f7fa fcf8 	bl	80026d0 <HAL_GetTick>
 8007ce0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ce2:	6833      	ldr	r3, [r6, #0]
 8007ce4:	05d8      	lsls	r0, r3, #23
 8007ce6:	f53f aee2 	bmi.w	8007aae <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cea:	f7fa fcf1 	bl	80026d0 <HAL_GetTick>
 8007cee:	1bc0      	subs	r0, r0, r7
 8007cf0:	2802      	cmp	r0, #2
 8007cf2:	d9f6      	bls.n	8007ce2 <HAL_RCC_OscConfig+0x35e>
 8007cf4:	e7bc      	b.n	8007c70 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cfa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d0c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d0e:	e78b      	b.n	8007c28 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007d10:	2001      	movs	r0, #1
}
 8007d12:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007d14:	f7fa fcdc 	bl	80026d0 <HAL_GetTick>
 8007d18:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d1a:	e004      	b.n	8007d26 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d1c:	f7fa fcd8 	bl	80026d0 <HAL_GetTick>
 8007d20:	1b80      	subs	r0, r0, r6
 8007d22:	2802      	cmp	r0, #2
 8007d24:	d8a4      	bhi.n	8007c70 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	0199      	lsls	r1, r3, #6
 8007d2a:	d4f7      	bmi.n	8007d1c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d2c:	68e9      	ldr	r1, [r5, #12]
 8007d2e:	4b3a      	ldr	r3, [pc, #232]	; (8007e18 <HAL_RCC_OscConfig+0x494>)
 8007d30:	6a22      	ldr	r2, [r4, #32]
 8007d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d34:	4e37      	ldr	r6, [pc, #220]	; (8007e14 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d36:	400b      	ands	r3, r1
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8007d3e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007d42:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8007d46:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8007d4a:	3801      	subs	r0, #1
 8007d4c:	0849      	lsrs	r1, r1, #1
 8007d4e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007d52:	3901      	subs	r1, #1
 8007d54:	0852      	lsrs	r2, r2, #1
 8007d56:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007d5a:	3a01      	subs	r2, #1
 8007d5c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007d60:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007d62:	682b      	ldr	r3, [r5, #0]
 8007d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d68:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d6a:	68eb      	ldr	r3, [r5, #12]
 8007d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d70:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007d72:	f7fa fcad 	bl	80026d0 <HAL_GetTick>
 8007d76:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d78:	e005      	b.n	8007d86 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d7a:	f7fa fca9 	bl	80026d0 <HAL_GetTick>
 8007d7e:	1b00      	subs	r0, r0, r4
 8007d80:	2802      	cmp	r0, #2
 8007d82:	f63f af75 	bhi.w	8007c70 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d86:	6833      	ldr	r3, [r6, #0]
 8007d88:	019a      	lsls	r2, r3, #6
 8007d8a:	d5f6      	bpl.n	8007d7a <HAL_RCC_OscConfig+0x3f6>
 8007d8c:	e6fe      	b.n	8007b8c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d8e:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <HAL_RCC_OscConfig+0x490>)
 8007d90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007d94:	f042 0204 	orr.w	r2, r2, #4
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007d9c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007da0:	f042 0201 	orr.w	r2, r2, #1
 8007da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007da8:	e76f      	b.n	8007c8a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007daa:	2801      	cmp	r0, #1
 8007dac:	f43f aeef 	beq.w	8007b8e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8007db0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007db2:	6a22      	ldr	r2, [r4, #32]
 8007db4:	f003 0103 	and.w	r1, r3, #3
 8007db8:	4291      	cmp	r1, r2
 8007dba:	f47f af0d 	bne.w	8007bd8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007dbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007dc4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007dca:	f47f af05 	bne.w	8007bd8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007dd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007dd4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007dd8:	f47f aefe 	bne.w	8007bd8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ddc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007dde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007de2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007de6:	f47f aef7 	bne.w	8007bd8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007dec:	0852      	lsrs	r2, r2, #1
 8007dee:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007df2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007df4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007df8:	f47f aeee 	bne.w	8007bd8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007dfc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007dfe:	0852      	lsrs	r2, r2, #1
 8007e00:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007e04:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e06:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007e0a:	bf14      	ite	ne
 8007e0c:	2001      	movne	r0, #1
 8007e0e:	2000      	moveq	r0, #0
 8007e10:	e6bd      	b.n	8007b8e <HAL_RCC_OscConfig+0x20a>
 8007e12:	bf00      	nop
 8007e14:	40021000 	.word	0x40021000
 8007e18:	019f800c 	.word	0x019f800c

08007e1c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007e1c:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x64>)
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	f002 020c 	and.w	r2, r2, #12
 8007e24:	2a04      	cmp	r2, #4
 8007e26:	d026      	beq.n	8007e76 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	f002 020c 	and.w	r2, r2, #12
 8007e2e:	2a08      	cmp	r2, #8
 8007e30:	d023      	beq.n	8007e7a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	f002 020c 	and.w	r2, r2, #12
 8007e38:	2a0c      	cmp	r2, #12
 8007e3a:	d001      	beq.n	8007e40 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007e3c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007e3e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e40:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e42:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e44:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e46:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007e4a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e4c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e50:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e54:	bf0c      	ite	eq
 8007e56:	4b0b      	ldreq	r3, [pc, #44]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e58:	4b0b      	ldrne	r3, [pc, #44]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e5a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e60:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x64>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007e70:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007e74:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007e76:	4804      	ldr	r0, [pc, #16]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007e78:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007e7a:	4802      	ldr	r0, [pc, #8]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x68>)
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40021000 	.word	0x40021000
 8007e84:	007a1200 	.word	0x007a1200
 8007e88:	00f42400 	.word	0x00f42400

08007e8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f000 80ee 	beq.w	800806e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e92:	4a78      	ldr	r2, [pc, #480]	; (8008074 <HAL_RCC_ClockConfig+0x1e8>)
{
 8007e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e98:	6813      	ldr	r3, [r2, #0]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	d20c      	bcs.n	8007ec0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea6:	6813      	ldr	r3, [r2, #0]
 8007ea8:	f023 030f 	bic.w	r3, r3, #15
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eb0:	6813      	ldr	r3, [r2, #0]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	428b      	cmp	r3, r1
 8007eb8:	d002      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007eba:	2001      	movs	r0, #1
}
 8007ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	07df      	lsls	r7, r3, #31
 8007ec4:	d569      	bpl.n	8007f9a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ec6:	6867      	ldr	r7, [r4, #4]
 8007ec8:	2f03      	cmp	r7, #3
 8007eca:	f000 80a0 	beq.w	800800e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ece:	4b6a      	ldr	r3, [pc, #424]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ed2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed4:	f000 8097 	beq.w	8008006 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ed8:	055b      	lsls	r3, r3, #21
 8007eda:	d5ee      	bpl.n	8007eba <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007edc:	f7ff ff9e 	bl	8007e1c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007ee0:	4b66      	ldr	r3, [pc, #408]	; (800807c <HAL_RCC_ClockConfig+0x1f0>)
 8007ee2:	4298      	cmp	r0, r3
 8007ee4:	f240 80c0 	bls.w	8008068 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ee8:	4a63      	ldr	r2, [pc, #396]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007eea:	6893      	ldr	r3, [r2, #8]
 8007eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007ef6:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007efa:	4e5f      	ldr	r6, [pc, #380]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007efc:	68b3      	ldr	r3, [r6, #8]
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	433b      	orrs	r3, r7
 8007f04:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007f06:	f7fa fbe3 	bl	80026d0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f0a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007f0e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f10:	e004      	b.n	8007f1c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f12:	f7fa fbdd 	bl	80026d0 <HAL_GetTick>
 8007f16:	1bc0      	subs	r0, r0, r7
 8007f18:	4540      	cmp	r0, r8
 8007f1a:	d871      	bhi.n	8008000 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1c:	68b3      	ldr	r3, [r6, #8]
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	f003 030c 	and.w	r3, r3, #12
 8007f24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007f28:	d1f3      	bne.n	8007f12 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	079f      	lsls	r7, r3, #30
 8007f2e:	d436      	bmi.n	8007f9e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8007f30:	f1b9 0f00 	cmp.w	r9, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007f36:	68b3      	ldr	r3, [r6, #8]
 8007f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f3c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f3e:	4e4d      	ldr	r6, [pc, #308]	; (8008074 <HAL_RCC_ClockConfig+0x1e8>)
 8007f40:	6833      	ldr	r3, [r6, #0]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	42ab      	cmp	r3, r5
 8007f48:	d846      	bhi.n	8007fd8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	075a      	lsls	r2, r3, #29
 8007f4e:	d506      	bpl.n	8007f5e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f50:	4949      	ldr	r1, [pc, #292]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007f52:	68e0      	ldr	r0, [r4, #12]
 8007f54:	688a      	ldr	r2, [r1, #8]
 8007f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f5a:	4302      	orrs	r2, r0
 8007f5c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5e:	071b      	lsls	r3, r3, #28
 8007f60:	d507      	bpl.n	8007f72 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f62:	4a45      	ldr	r2, [pc, #276]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007f64:	6921      	ldr	r1, [r4, #16]
 8007f66:	6893      	ldr	r3, [r2, #8]
 8007f68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007f6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007f70:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f72:	f7ff ff53 	bl	8007e1c <HAL_RCC_GetSysClockFreq>
 8007f76:	4a40      	ldr	r2, [pc, #256]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007f78:	4c41      	ldr	r4, [pc, #260]	; (8008080 <HAL_RCC_ClockConfig+0x1f4>)
 8007f7a:	6892      	ldr	r2, [r2, #8]
 8007f7c:	4941      	ldr	r1, [pc, #260]	; (8008084 <HAL_RCC_ClockConfig+0x1f8>)
 8007f7e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007f82:	4603      	mov	r3, r0
 8007f84:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007f86:	4840      	ldr	r0, [pc, #256]	; (8008088 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f88:	f002 021f 	and.w	r2, r2, #31
 8007f8c:	40d3      	lsrs	r3, r2
 8007f8e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007f90:	6800      	ldr	r0, [r0, #0]
}
 8007f92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007f96:	f7fd bf69 	b.w	8005e6c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f9a:	079e      	lsls	r6, r3, #30
 8007f9c:	d5cf      	bpl.n	8007f3e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f9e:	0758      	lsls	r0, r3, #29
 8007fa0:	d504      	bpl.n	8007fac <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fa2:	4935      	ldr	r1, [pc, #212]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007fa4:	688a      	ldr	r2, [r1, #8]
 8007fa6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007faa:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fac:	0719      	lsls	r1, r3, #28
 8007fae:	d506      	bpl.n	8007fbe <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007fb0:	4a31      	ldr	r2, [pc, #196]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007fb2:	6893      	ldr	r3, [r2, #8]
 8007fb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007fb8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007fbc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fbe:	4a2e      	ldr	r2, [pc, #184]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8007fc0:	68a1      	ldr	r1, [r4, #8]
 8007fc2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fc4:	4e2b      	ldr	r6, [pc, #172]	; (8008074 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fce:	6833      	ldr	r3, [r6, #0]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	d9b8      	bls.n	8007f4a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fd8:	6833      	ldr	r3, [r6, #0]
 8007fda:	f023 030f 	bic.w	r3, r3, #15
 8007fde:	432b      	orrs	r3, r5
 8007fe0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007fe2:	f7fa fb75 	bl	80026d0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fe6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007fea:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fec:	6833      	ldr	r3, [r6, #0]
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	42ab      	cmp	r3, r5
 8007ff4:	d0a9      	beq.n	8007f4a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff6:	f7fa fb6b 	bl	80026d0 <HAL_GetTick>
 8007ffa:	1bc0      	subs	r0, r0, r7
 8007ffc:	4540      	cmp	r0, r8
 8007ffe:	d9f5      	bls.n	8007fec <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8008000:	2003      	movs	r0, #3
}
 8008002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008006:	039a      	lsls	r2, r3, #14
 8008008:	f53f af68 	bmi.w	8007edc <HAL_RCC_ClockConfig+0x50>
 800800c:	e755      	b.n	8007eba <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800800e:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
 8008010:	6811      	ldr	r1, [r2, #0]
 8008012:	0188      	lsls	r0, r1, #6
 8008014:	f57f af51 	bpl.w	8007eba <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008018:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800801a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800801c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800801e:	4e17      	ldr	r6, [pc, #92]	; (800807c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008020:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8008024:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008026:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800802a:	bf0c      	ite	eq
 800802c:	4817      	ldreq	r0, [pc, #92]	; (800808c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800802e:	4818      	ldrne	r0, [pc, #96]	; (8008090 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008030:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008032:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008036:	4810      	ldr	r0, [pc, #64]	; (8008078 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008038:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800803c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008040:	68c1      	ldr	r1, [r0, #12]
 8008042:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8008046:	3101      	adds	r1, #1
 8008048:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800804a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800804e:	42b2      	cmp	r2, r6
 8008050:	d90a      	bls.n	8008068 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008052:	6882      	ldr	r2, [r0, #8]
 8008054:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8008058:	f43f af46 	beq.w	8007ee8 <HAL_RCC_ClockConfig+0x5c>
 800805c:	0799      	lsls	r1, r3, #30
 800805e:	d503      	bpl.n	8008068 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008060:	68a3      	ldr	r3, [r4, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f43f af40 	beq.w	8007ee8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008068:	f04f 0900 	mov.w	r9, #0
 800806c:	e745      	b.n	8007efa <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800806e:	2001      	movs	r0, #1
}
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40022000 	.word	0x40022000
 8008078:	40021000 	.word	0x40021000
 800807c:	04c4b400 	.word	0x04c4b400
 8008080:	0800f1b4 	.word	0x0800f1b4
 8008084:	20000008 	.word	0x20000008
 8008088:	20000010 	.word	0x20000010
 800808c:	007a1200 	.word	0x007a1200
 8008090:	00f42400 	.word	0x00f42400

08008094 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8008096:	4a06      	ldr	r2, [pc, #24]	; (80080b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008098:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800809a:	4906      	ldr	r1, [pc, #24]	; (80080b4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800809c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80080a0:	6808      	ldr	r0, [r1, #0]
 80080a2:	5cd3      	ldrb	r3, [r2, r3]
 80080a4:	f003 031f 	and.w	r3, r3, #31
}
 80080a8:	40d8      	lsrs	r0, r3
 80080aa:	4770      	bx	lr
 80080ac:	40021000 	.word	0x40021000
 80080b0:	0800f1c4 	.word	0x0800f1c4
 80080b4:	20000008 	.word	0x20000008

080080b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80080ba:	4a06      	ldr	r2, [pc, #24]	; (80080d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80080bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80080be:	4906      	ldr	r1, [pc, #24]	; (80080d8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80080c0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80080c4:	6808      	ldr	r0, [r1, #0]
 80080c6:	5cd3      	ldrb	r3, [r2, r3]
 80080c8:	f003 031f 	and.w	r3, r3, #31
}
 80080cc:	40d8      	lsrs	r0, r3
 80080ce:	4770      	bx	lr
 80080d0:	40021000 	.word	0x40021000
 80080d4:	0800f1c4 	.word	0x0800f1c4
 80080d8:	20000008 	.word	0x20000008

080080dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080e0:	6803      	ldr	r3, [r0, #0]
{
 80080e2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080e4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80080e8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080ea:	d056      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080ec:	4bac      	ldr	r3, [pc, #688]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80080ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080f0:	00d5      	lsls	r5, r2, #3
 80080f2:	f140 813e 	bpl.w	8008372 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 80080f6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080f8:	4daa      	ldr	r5, [pc, #680]	; (80083a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008100:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008102:	f7fa fae5 	bl	80026d0 <HAL_GetTick>
 8008106:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008108:	e005      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800810a:	f7fa fae1 	bl	80026d0 <HAL_GetTick>
 800810e:	1b83      	subs	r3, r0, r6
 8008110:	2b02      	cmp	r3, #2
 8008112:	f200 8139 	bhi.w	8008388 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	05d8      	lsls	r0, r3, #23
 800811a:	d5f6      	bpl.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800811c:	4da0      	ldr	r5, [pc, #640]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800811e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008122:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008126:	d027      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8008128:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800812a:	429a      	cmp	r2, r3
 800812c:	d025      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800812e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008132:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800813a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800813e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008146:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800814a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800814e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8008150:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008154:	f140 8148 	bpl.w	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008158:	f7fa faba 	bl	80026d0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800815c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008160:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008162:	e005      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008164:	f7fa fab4 	bl	80026d0 <HAL_GetTick>
 8008168:	1b80      	subs	r0, r0, r6
 800816a:	4540      	cmp	r0, r8
 800816c:	f200 810c 	bhi.w	8008388 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008170:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008174:	079b      	lsls	r3, r3, #30
 8008176:	d5f5      	bpl.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008178:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800817a:	4989      	ldr	r1, [pc, #548]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800817c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008180:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800818a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800818c:	b127      	cbz	r7, 8008198 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800818e:	4a84      	ldr	r2, [pc, #528]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008190:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008196:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	07dd      	lsls	r5, r3, #31
 800819c:	d508      	bpl.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800819e:	4980      	ldr	r1, [pc, #512]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081a0:	6865      	ldr	r5, [r4, #4]
 80081a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081a6:	f022 0203 	bic.w	r2, r2, #3
 80081aa:	432a      	orrs	r2, r5
 80081ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081b0:	0799      	lsls	r1, r3, #30
 80081b2:	d508      	bpl.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081b4:	497a      	ldr	r1, [pc, #488]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081b6:	68a5      	ldr	r5, [r4, #8]
 80081b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081bc:	f022 020c 	bic.w	r2, r2, #12
 80081c0:	432a      	orrs	r2, r5
 80081c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081c6:	075a      	lsls	r2, r3, #29
 80081c8:	d508      	bpl.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081ca:	4975      	ldr	r1, [pc, #468]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081cc:	68e5      	ldr	r5, [r4, #12]
 80081ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081d2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80081d6:	432a      	orrs	r2, r5
 80081d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081dc:	071f      	lsls	r7, r3, #28
 80081de:	d508      	bpl.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081e0:	496f      	ldr	r1, [pc, #444]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081e2:	6925      	ldr	r5, [r4, #16]
 80081e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80081ec:	432a      	orrs	r2, r5
 80081ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081f2:	06de      	lsls	r6, r3, #27
 80081f4:	d508      	bpl.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081f6:	496a      	ldr	r1, [pc, #424]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081f8:	6965      	ldr	r5, [r4, #20]
 80081fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008202:	432a      	orrs	r2, r5
 8008204:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008208:	069d      	lsls	r5, r3, #26
 800820a:	d508      	bpl.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800820c:	4964      	ldr	r1, [pc, #400]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800820e:	69a5      	ldr	r5, [r4, #24]
 8008210:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008214:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008218:	432a      	orrs	r2, r5
 800821a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800821e:	0659      	lsls	r1, r3, #25
 8008220:	d508      	bpl.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008222:	495f      	ldr	r1, [pc, #380]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008224:	69e5      	ldr	r5, [r4, #28]
 8008226:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800822a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800822e:	432a      	orrs	r2, r5
 8008230:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008234:	061a      	lsls	r2, r3, #24
 8008236:	d508      	bpl.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008238:	4959      	ldr	r1, [pc, #356]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800823a:	6a25      	ldr	r5, [r4, #32]
 800823c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008240:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008244:	432a      	orrs	r2, r5
 8008246:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800824a:	05df      	lsls	r7, r3, #23
 800824c:	d508      	bpl.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800824e:	4954      	ldr	r1, [pc, #336]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008250:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008252:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008256:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800825a:	432a      	orrs	r2, r5
 800825c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008260:	039e      	lsls	r6, r3, #14
 8008262:	d508      	bpl.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008264:	494e      	ldr	r1, [pc, #312]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008266:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008268:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800826c:	f022 0203 	bic.w	r2, r2, #3
 8008270:	432a      	orrs	r2, r5
 8008272:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008276:	059d      	lsls	r5, r3, #22
 8008278:	d508      	bpl.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800827a:	4949      	ldr	r1, [pc, #292]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800827c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800827e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008282:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008286:	432a      	orrs	r2, r5
 8008288:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800828c:	0559      	lsls	r1, r3, #21
 800828e:	d50b      	bpl.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008290:	4943      	ldr	r1, [pc, #268]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008292:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008294:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008298:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800829c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800829e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80082a6:	d071      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80082a8:	051a      	lsls	r2, r3, #20
 80082aa:	d50b      	bpl.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082ac:	493c      	ldr	r1, [pc, #240]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082ae:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80082b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80082b4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80082b8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80082ba:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80082c2:	d068      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082c4:	04df      	lsls	r7, r3, #19
 80082c6:	d50b      	bpl.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082c8:	4935      	ldr	r1, [pc, #212]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082ca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80082cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80082d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80082d4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80082d6:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80082de:	d063      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082e0:	049e      	lsls	r6, r3, #18
 80082e2:	d50b      	bpl.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082e4:	492e      	ldr	r1, [pc, #184]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082e6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80082e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80082ec:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80082f0:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082f2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082fa:	d05a      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082fc:	045d      	lsls	r5, r3, #17
 80082fe:	d50b      	bpl.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008300:	4927      	ldr	r1, [pc, #156]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008302:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8008304:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008308:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800830c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800830e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008312:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008316:	d051      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008318:	0419      	lsls	r1, r3, #16
 800831a:	d50b      	bpl.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800831c:	4920      	ldr	r1, [pc, #128]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800831e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8008320:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008328:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800832a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800832e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008332:	d048      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008334:	03da      	lsls	r2, r3, #15
 8008336:	d50b      	bpl.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008338:	4919      	ldr	r1, [pc, #100]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800833a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800833c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008340:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8008344:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008346:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800834a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800834e:	d03f      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008350:	035b      	lsls	r3, r3, #13
 8008352:	d50b      	bpl.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008354:	4a12      	ldr	r2, [pc, #72]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008356:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008358:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800835c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008360:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008362:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008366:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800836a:	d036      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 800836c:	b002      	add	sp, #8
 800836e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8008372:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008374:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008378:	659a      	str	r2, [r3, #88]	; 0x58
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008384:	2701      	movs	r7, #1
 8008386:	e6b7      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8008388:	2003      	movs	r0, #3
 800838a:	e6ff      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800838c:	68ca      	ldr	r2, [r1, #12]
 800838e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008392:	60ca      	str	r2, [r1, #12]
 8008394:	e788      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008396:	68ca      	ldr	r2, [r1, #12]
 8008398:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800839c:	60ca      	str	r2, [r1, #12]
 800839e:	e791      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80083a0:	40021000 	.word	0x40021000
 80083a4:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083a8:	68ca      	ldr	r2, [r1, #12]
 80083aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80083ae:	60ca      	str	r2, [r1, #12]
 80083b0:	e796      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083b2:	68ca      	ldr	r2, [r1, #12]
 80083b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80083b8:	60ca      	str	r2, [r1, #12]
 80083ba:	e79f      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083bc:	68ca      	ldr	r2, [r1, #12]
 80083be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80083c2:	60ca      	str	r2, [r1, #12]
 80083c4:	e7a8      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80083c6:	68ca      	ldr	r2, [r1, #12]
 80083c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083cc:	60ca      	str	r2, [r1, #12]
 80083ce:	e7b1      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80083d0:	68ca      	ldr	r2, [r1, #12]
 80083d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083d6:	60ca      	str	r2, [r1, #12]
 80083d8:	e7ba      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083da:	68d3      	ldr	r3, [r2, #12]
 80083dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083e0:	60d3      	str	r3, [r2, #12]
}
 80083e2:	b002      	add	sp, #8
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e8:	4613      	mov	r3, r2
 80083ea:	e6c6      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x9e>

080083ec <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083f2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80083f4:	4617      	mov	r7, r2
 80083f6:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 80083f8:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80083fc:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083fe:	f7fa f967 	bl	80026d0 <HAL_GetTick>
 8008402:	442f      	add	r7, r5
 8008404:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8008406:	f7fa f963 	bl	80026d0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800840a:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800840c:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008414:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008418:	0d1b      	lsrs	r3, r3, #20
 800841a:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 800841e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008420:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8008422:	4622      	mov	r2, r4
 8008424:	1c69      	adds	r1, r5, #1
 8008426:	6893      	ldr	r3, [r2, #8]
 8008428:	d110      	bne.n	800844c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 800842a:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800842e:	d009      	beq.n	8008444 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008430:	7b23      	ldrb	r3, [r4, #12]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008438:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800843c:	6893      	ldr	r3, [r2, #8]
 800843e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8008442:	d1f5      	bne.n	8008430 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8008444:	2000      	movs	r0, #0
}
 8008446:	b002      	add	sp, #8
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800844c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8008450:	d0f8      	beq.n	8008444 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8008452:	7b23      	ldrb	r3, [r4, #12]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800845a:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800845e:	f7fa f937 	bl	80026d0 <HAL_GetTick>
 8008462:	eba0 0008 	sub.w	r0, r0, r8
 8008466:	42b8      	cmp	r0, r7
 8008468:	d209      	bcs.n	800847e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 800846a:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800846c:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800846e:	2b00      	cmp	r3, #0
      count--;
 8008470:	9b01      	ldr	r3, [sp, #4]
 8008472:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8008476:	bf08      	it	eq
 8008478:	2700      	moveq	r7, #0
      count--;
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	e7d2      	b.n	8008424 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800847e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008482:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008484:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800848c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800848e:	d013      	beq.n	80084b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008490:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8008492:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008496:	d107      	bne.n	80084a8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084a6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80084a8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80084aa:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80084ac:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80084b0:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80084b4:	2003      	movs	r0, #3
 80084b6:	e7c6      	b.n	8008446 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b8:	68b2      	ldr	r2, [r6, #8]
 80084ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80084be:	d002      	beq.n	80084c6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80084c4:	d1e4      	bne.n	8008490 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	e7df      	b.n	8008490 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 80084d0:	20000008 	.word	0x20000008

080084d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80084e0:	eb01 0902 	add.w	r9, r1, r2
{
 80084e4:	460e      	mov	r6, r1
 80084e6:	4617      	mov	r7, r2
 80084e8:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084ea:	f7fa f8f1 	bl	80026d0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084ee:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008610 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084f2:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 80084f6:	f7fa f8eb 	bl	80026d0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084fa:	f8d8 3000 	ldr.w	r3, [r8]
 80084fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008506:	0d1b      	lsrs	r3, r3, #20
 8008508:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 800850c:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800850e:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8008510:	1c70      	adds	r0, r6, #1
 8008512:	682c      	ldr	r4, [r5, #0]
 8008514:	d120      	bne.n	8008558 <SPI_EndRxTxTransaction+0x84>
 8008516:	68a3      	ldr	r3, [r4, #8]
 8008518:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800851c:	d1fb      	bne.n	8008516 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800851e:	f7fa f8d7 	bl	80026d0 <HAL_GetTick>
 8008522:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8008526:	f7fa f8d3 	bl	80026d0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800852a:	f8d8 3000 	ldr.w	r3, [r8]
 800852e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008532:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8008536:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008538:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800853a:	1c71      	adds	r1, r6, #1
 800853c:	682c      	ldr	r4, [r5, #0]
 800853e:	d11f      	bne.n	8008580 <SPI_EndRxTxTransaction+0xac>
 8008540:	68a3      	ldr	r3, [r4, #8]
 8008542:	061a      	lsls	r2, r3, #24
 8008544:	d4fc      	bmi.n	8008540 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008546:	463a      	mov	r2, r7
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	f7ff ff4e 	bl	80083ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008550:	bb48      	cbnz	r0, 80085a6 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8008552:	b005      	add	sp, #20
 8008554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800855e:	d0de      	beq.n	800851e <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008560:	f7fa f8b6 	bl	80026d0 <HAL_GetTick>
 8008564:	eba0 000b 	sub.w	r0, r0, fp
 8008568:	4550      	cmp	r0, sl
 800856a:	d222      	bcs.n	80085b2 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 800856c:	9a02      	ldr	r2, [sp, #8]
      count--;
 800856e:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8008570:	2a00      	cmp	r2, #0
      count--;
 8008572:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8008576:	bf08      	it	eq
 8008578:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800857c:	9302      	str	r3, [sp, #8]
 800857e:	e7c7      	b.n	8008510 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008580:	68a3      	ldr	r3, [r4, #8]
 8008582:	061b      	lsls	r3, r3, #24
 8008584:	d5df      	bpl.n	8008546 <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008586:	f7fa f8a3 	bl	80026d0 <HAL_GetTick>
 800858a:	eba0 0008 	sub.w	r0, r0, r8
 800858e:	4548      	cmp	r0, r9
 8008590:	d20f      	bcs.n	80085b2 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8008592:	9a03      	ldr	r2, [sp, #12]
      count--;
 8008594:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8008596:	2a00      	cmp	r2, #0
      count--;
 8008598:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800859c:	bf08      	it	eq
 800859e:	f04f 0900 	moveq.w	r9, #0
      count--;
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	e7c9      	b.n	800853a <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085a6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80085a8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80085ac:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ae:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 80085b0:	e7cf      	b.n	8008552 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085b2:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085b6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085b8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085c0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c2:	d019      	beq.n	80085f8 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80085c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80085ca:	d107      	bne.n	80085dc <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085da:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80085dc:	2301      	movs	r3, #1
 80085de:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085e2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80085e4:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085e6:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80085ea:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80085ec:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f0:	662b      	str	r3, [r5, #96]	; 0x60
}
 80085f2:	b005      	add	sp, #20
 80085f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f8:	68aa      	ldr	r2, [r5, #8]
 80085fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80085fe:	d002      	beq.n	8008606 <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008600:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008604:	d1de      	bne.n	80085c4 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e7d9      	b.n	80085c4 <SPI_EndRxTxTransaction+0xf0>
 8008610:	20000008 	.word	0x20000008

08008614 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008614:	2800      	cmp	r0, #0
 8008616:	d077      	beq.n	8008708 <HAL_SPI_Init+0xf4>
{
 8008618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800861c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800861e:	4604      	mov	r4, r0
 8008620:	2e00      	cmp	r6, #0
 8008622:	d058      	beq.n	80086d6 <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008624:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008626:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800862a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800862e:	2200      	movs	r2, #0
 8008630:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008632:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008636:	2b00      	cmp	r3, #0
 8008638:	d059      	beq.n	80086ee <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 800863a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800863c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800863e:	2302      	movs	r3, #2
 8008640:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8008644:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008646:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800864a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800864e:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008650:	d947      	bls.n	80086e2 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008652:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8008656:	d159      	bne.n	800870c <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008658:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800865a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800865c:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8008660:	6862      	ldr	r2, [r4, #4]
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8008668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800866c:	431a      	orrs	r2, r3
 800866e:	6923      	ldr	r3, [r4, #16]
 8008670:	f003 0302 	and.w	r3, r3, #2
 8008674:	4313      	orrs	r3, r2
 8008676:	6962      	ldr	r2, [r4, #20]
 8008678:	f002 0201 	and.w	r2, r2, #1
 800867c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800867e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008680:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800868c:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800868e:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008692:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8008696:	69a6      	ldr	r6, [r4, #24]
 8008698:	6a23      	ldr	r3, [r4, #32]
 800869a:	f003 0780 	and.w	r7, r3, #128	; 0x80
 800869e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80086a2:	4313      	orrs	r3, r2
 80086a4:	ea43 0308 	orr.w	r3, r3, r8
 80086a8:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086aa:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086ac:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086ae:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086b4:	ea4e 0306 	orr.w	r3, lr, r6
 80086b8:	ea43 030c 	orr.w	r3, r3, ip
 80086bc:	4303      	orrs	r3, r0
 80086be:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086c0:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086c2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80086c8:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086ca:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086cc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086ce:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 80086d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086d6:	6843      	ldr	r3, [r0, #4]
 80086d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086dc:	d0a5      	beq.n	800862a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086de:	61c6      	str	r6, [r0, #28]
 80086e0:	e7a3      	b.n	800862a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80086e2:	d00b      	beq.n	80086fc <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80086e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086e8:	2500      	movs	r5, #0
 80086ea:	62a5      	str	r5, [r4, #40]	; 0x28
 80086ec:	e7b8      	b.n	8008660 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 80086ee:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80086f2:	4620      	mov	r0, r4
 80086f4:	f7fc fe50 	bl	8005398 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086fa:	e79e      	b.n	800863a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086fc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80086fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008702:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8008706:	e7ab      	b.n	8008660 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8008708:	2001      	movs	r0, #1
}
 800870a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800870c:	2000      	movs	r0, #0
 800870e:	e7eb      	b.n	80086e8 <HAL_SPI_Init+0xd4>

08008710 <HAL_SPI_TransmitReceive>:
{
 8008710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008714:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008716:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800871a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 800871c:	2801      	cmp	r0, #1
 800871e:	f000 8097 	beq.w	8008850 <HAL_SPI_TransmitReceive+0x140>
 8008722:	461f      	mov	r7, r3
 8008724:	2301      	movs	r3, #1
 8008726:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800872a:	4689      	mov	r9, r1
 800872c:	4690      	mov	r8, r2
 800872e:	f7f9 ffcf 	bl	80026d0 <HAL_GetTick>
 8008732:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8008734:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8008738:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800873a:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 800873c:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800873e:	d010      	beq.n	8008762 <HAL_SPI_TransmitReceive+0x52>
 8008740:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008744:	d008      	beq.n	8008758 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8008746:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008748:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800874a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800874c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008750:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8008754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008758:	68a2      	ldr	r2, [r4, #8]
 800875a:	2a00      	cmp	r2, #0
 800875c:	d1f3      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x36>
 800875e:	2904      	cmp	r1, #4
 8008760:	d1f1      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008762:	f1b9 0f00 	cmp.w	r9, #0
 8008766:	d076      	beq.n	8008856 <HAL_SPI_TransmitReceive+0x146>
 8008768:	f1b8 0f00 	cmp.w	r8, #0
 800876c:	d073      	beq.n	8008856 <HAL_SPI_TransmitReceive+0x146>
 800876e:	2f00      	cmp	r7, #0
 8008770:	d071      	beq.n	8008856 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008772:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008776:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008778:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800877c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800877e:	bf1c      	itt	ne
 8008780:	2205      	movne	r2, #5
 8008782:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008786:	2200      	movs	r2, #0
 8008788:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800878a:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800878e:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8008790:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008794:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 8008798:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800879a:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 800879c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087a0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80087a4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80087a6:	d858      	bhi.n	800885a <HAL_SPI_TransmitReceive+0x14a>
 80087a8:	2f01      	cmp	r7, #1
 80087aa:	f000 8124 	beq.w	80089f6 <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087ae:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80087b2:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087b4:	6811      	ldr	r1, [r2, #0]
 80087b6:	0649      	lsls	r1, r1, #25
 80087b8:	f100 80e3 	bmi.w	8008982 <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 80087bc:	6811      	ldr	r1, [r2, #0]
 80087be:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80087c2:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80df 	beq.w	8008988 <HAL_SPI_TransmitReceive+0x278>
 80087ca:	2f01      	cmp	r7, #1
 80087cc:	f000 80dc 	beq.w	8008988 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 80087d0:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	b92b      	cbnz	r3, 80087e4 <HAL_SPI_TransmitReceive+0xd4>
 80087d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 8086 	beq.w	80088f0 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	6893      	ldr	r3, [r2, #8]
 80087e8:	0799      	lsls	r1, r3, #30
 80087ea:	d505      	bpl.n	80087f8 <HAL_SPI_TransmitReceive+0xe8>
 80087ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	b113      	cbz	r3, 80087f8 <HAL_SPI_TransmitReceive+0xe8>
 80087f2:	2f00      	cmp	r7, #0
 80087f4:	f040 80e4 	bne.w	80089c0 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087f8:	6893      	ldr	r3, [r2, #8]
 80087fa:	f013 0301 	ands.w	r3, r3, #1
 80087fe:	d01e      	beq.n	800883e <HAL_SPI_TransmitReceive+0x12e>
 8008800:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008804:	b289      	uxth	r1, r1
 8008806:	b1d1      	cbz	r1, 800883e <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8008808:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800880c:	b289      	uxth	r1, r1
 800880e:	2901      	cmp	r1, #1
 8008810:	f240 80c8 	bls.w	80089a4 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008814:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008816:	68d0      	ldr	r0, [r2, #12]
 8008818:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800881c:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800881e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008822:	3902      	subs	r1, #2
 8008824:	b289      	uxth	r1, r1
 8008826:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800882a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800882e:	b289      	uxth	r1, r1
 8008830:	2901      	cmp	r1, #1
        txallowed = 1U;
 8008832:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 8008834:	d803      	bhi.n	800883e <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008836:	6853      	ldr	r3, [r2, #4]
 8008838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800883c:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800883e:	f7f9 ff47 	bl	80026d0 <HAL_GetTick>
 8008842:	1b43      	subs	r3, r0, r5
 8008844:	42b3      	cmp	r3, r6
 8008846:	d3c4      	bcc.n	80087d2 <HAL_SPI_TransmitReceive+0xc2>
 8008848:	1c73      	adds	r3, r6, #1
 800884a:	d0c2      	beq.n	80087d2 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 800884c:	2003      	movs	r0, #3
 800884e:	e77b      	b.n	8008748 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8008850:	2002      	movs	r0, #2
}
 8008852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8008856:	2001      	movs	r0, #1
 8008858:	e776      	b.n	8008748 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800885a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800885e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008860:	6811      	ldr	r1, [r2, #0]
 8008862:	0648      	lsls	r0, r1, #25
 8008864:	d403      	bmi.n	800886e <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 8008866:	6811      	ldr	r1, [r2, #0]
 8008868:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800886c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800886e:	2b00      	cmp	r3, #0
 8008870:	d161      	bne.n	8008936 <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008872:	4649      	mov	r1, r9
 8008874:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008878:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800887a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800887c:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800887e:	3b01      	subs	r3, #1
 8008880:	b29b      	uxth	r3, r3
 8008882:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008884:	1c72      	adds	r2, r6, #1
{
 8008886:	f04f 0701 	mov.w	r7, #1
 800888a:	d028      	beq.n	80088de <HAL_SPI_TransmitReceive+0x1ce>
 800888c:	e04e      	b.n	800892c <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	6893      	ldr	r3, [r2, #8]
 8008892:	079b      	lsls	r3, r3, #30
 8008894:	d50d      	bpl.n	80088b2 <HAL_SPI_TransmitReceive+0x1a2>
 8008896:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008898:	b29b      	uxth	r3, r3
 800889a:	b153      	cbz	r3, 80088b2 <HAL_SPI_TransmitReceive+0x1a2>
 800889c:	b14f      	cbz	r7, 80088b2 <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800889e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80088a0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80088a4:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80088a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088a8:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80088ae:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80088b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088b2:	6893      	ldr	r3, [r2, #8]
 80088b4:	f013 0301 	ands.w	r3, r3, #1
 80088b8:	d00f      	beq.n	80088da <HAL_SPI_TransmitReceive+0x1ca>
 80088ba:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80088be:	b289      	uxth	r1, r1
 80088c0:	b159      	cbz	r1, 80088da <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088c2:	68d1      	ldr	r1, [r2, #12]
 80088c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088c6:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80088ca:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80088cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088d0:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088da:	f7f9 fef9 	bl	80026d0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1d3      	bne.n	800888e <HAL_SPI_TransmitReceive+0x17e>
 80088e6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ce      	bne.n	800888e <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088f0:	462a      	mov	r2, r5
 80088f2:	4631      	mov	r1, r6
 80088f4:	4620      	mov	r0, r4
 80088f6:	f7ff fded 	bl	80084d4 <SPI_EndRxTxTransaction>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f43f af24 	beq.w	8008748 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008900:	2320      	movs	r3, #32
 8008902:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008904:	2001      	movs	r0, #1
 8008906:	e71f      	b.n	8008748 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008908:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0ee      	beq.n	80088f0 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	6893      	ldr	r3, [r2, #8]
 8008916:	0798      	lsls	r0, r3, #30
 8008918:	d422      	bmi.n	8008960 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800891a:	6893      	ldr	r3, [r2, #8]
 800891c:	f013 0301 	ands.w	r3, r3, #1
 8008920:	d10c      	bne.n	800893c <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008922:	f7f9 fed5 	bl	80026d0 <HAL_GetTick>
 8008926:	1b40      	subs	r0, r0, r5
 8008928:	42b0      	cmp	r0, r6
 800892a:	d28f      	bcs.n	800884c <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800892c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1ee      	bne.n	8008912 <HAL_SPI_TransmitReceive+0x202>
 8008934:	e7e8      	b.n	8008908 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008936:	2f01      	cmp	r7, #1
 8008938:	d1a4      	bne.n	8008884 <HAL_SPI_TransmitReceive+0x174>
 800893a:	e79a      	b.n	8008872 <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800893c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008940:	b289      	uxth	r1, r1
 8008942:	2900      	cmp	r1, #0
 8008944:	d0ed      	beq.n	8008922 <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008946:	68d1      	ldr	r1, [r2, #12]
 8008948:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800894a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800894e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008950:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008954:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008956:	3b01      	subs	r3, #1
 8008958:	b29b      	uxth	r3, r3
 800895a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800895e:	e7e0      	b.n	8008922 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008960:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008962:	b29b      	uxth	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0d8      	beq.n	800891a <HAL_SPI_TransmitReceive+0x20a>
 8008968:	2f00      	cmp	r7, #0
 800896a:	d0d6      	beq.n	800891a <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800896c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800896e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008972:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008974:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008976:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008978:	3b01      	subs	r3, #1
 800897a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800897c:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800897e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008980:	e7cb      	b.n	800891a <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008982:	2b00      	cmp	r3, #0
 8008984:	f47f af24 	bne.w	80087d0 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8008988:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d93a      	bls.n	8008a06 <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008990:	4649      	mov	r1, r9
 8008992:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008996:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8008998:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800899a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800899c:	3b02      	subs	r3, #2
 800899e:	b29b      	uxth	r3, r3
 80089a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80089a2:	e715      	b.n	80087d0 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 80089a4:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80089a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089a8:	7b12      	ldrb	r2, [r2, #12]
 80089aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80089ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089ae:	3301      	adds	r3, #1
 80089b0:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80089b2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80089be:	e73e      	b.n	800883e <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 80089c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80089c8:	d909      	bls.n	80089de <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089ca:	f833 1b02 	ldrh.w	r1, [r3], #2
 80089ce:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80089d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80089d4:	3b02      	subs	r3, #2
 80089d6:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80089d8:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 80089da:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80089dc:	e70c      	b.n	80087f8 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80089e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80089e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80089e6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80089e8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80089ea:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80089ec:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80089ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089f0:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80089f2:	2700      	movs	r7, #0
 80089f4:	e700      	b.n	80087f8 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089f6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80089fa:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089fc:	6811      	ldr	r1, [r2, #0]
 80089fe:	0649      	lsls	r1, r1, #25
 8008a00:	f57f aedc 	bpl.w	80087bc <HAL_SPI_TransmitReceive+0xac>
 8008a04:	e7c0      	b.n	8008988 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a06:	f899 3000 	ldrb.w	r3, [r9]
 8008a0a:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8008a0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008a0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008a10:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8008a12:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8008a14:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8008a16:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008a18:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008a1a:	e6d9      	b.n	80087d0 <HAL_SPI_TransmitReceive+0xc0>

08008a1c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a1c:	6a03      	ldr	r3, [r0, #32]
 8008a1e:	f023 0301 	bic.w	r3, r3, #1
 8008a22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a24:	6a03      	ldr	r3, [r0, #32]
{
 8008a26:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a2a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008a32:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008a36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008a3a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008a3e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a40:	4d15      	ldr	r5, [pc, #84]	; (8008a98 <TIM_OC1_SetConfig+0x7c>)
 8008a42:	42a8      	cmp	r0, r5
 8008a44:	d013      	beq.n	8008a6e <TIM_OC1_SetConfig+0x52>
 8008a46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008a4a:	42a8      	cmp	r0, r5
 8008a4c:	d00f      	beq.n	8008a6e <TIM_OC1_SetConfig+0x52>
 8008a4e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008a52:	42a8      	cmp	r0, r5
 8008a54:	d00b      	beq.n	8008a6e <TIM_OC1_SetConfig+0x52>
 8008a56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008a5a:	42a8      	cmp	r0, r5
 8008a5c:	d007      	beq.n	8008a6e <TIM_OC1_SetConfig+0x52>
 8008a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008a62:	42a8      	cmp	r0, r5
 8008a64:	d003      	beq.n	8008a6e <TIM_OC1_SetConfig+0x52>
 8008a66:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008a6a:	42a8      	cmp	r0, r5
 8008a6c:	d10d      	bne.n	8008a8a <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a6e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a70:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008a74:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a76:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a7a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a7e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a82:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a86:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a8a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008a8c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008a8e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008a90:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8008a92:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8008a94:	6203      	str	r3, [r0, #32]
}
 8008a96:	4770      	bx	lr
 8008a98:	40012c00 	.word	0x40012c00

08008a9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a9c:	6a03      	ldr	r3, [r0, #32]
 8008a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aa2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa4:	6a03      	ldr	r3, [r0, #32]
{
 8008aa6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aaa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008aae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ab2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008ab6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ab8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008aba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008abe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ac2:	4d1c      	ldr	r5, [pc, #112]	; (8008b34 <TIM_OC3_SetConfig+0x98>)
 8008ac4:	42a8      	cmp	r0, r5
 8008ac6:	d017      	beq.n	8008af8 <TIM_OC3_SetConfig+0x5c>
 8008ac8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008acc:	42a8      	cmp	r0, r5
 8008ace:	d013      	beq.n	8008af8 <TIM_OC3_SetConfig+0x5c>
 8008ad0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008ad4:	42a8      	cmp	r0, r5
 8008ad6:	d025      	beq.n	8008b24 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad8:	4d17      	ldr	r5, [pc, #92]	; (8008b38 <TIM_OC3_SetConfig+0x9c>)
 8008ada:	42a8      	cmp	r0, r5
 8008adc:	d013      	beq.n	8008b06 <TIM_OC3_SetConfig+0x6a>
 8008ade:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ae2:	42a8      	cmp	r0, r5
 8008ae4:	d00f      	beq.n	8008b06 <TIM_OC3_SetConfig+0x6a>
 8008ae6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008aea:	42a8      	cmp	r0, r5
 8008aec:	d00b      	beq.n	8008b06 <TIM_OC3_SetConfig+0x6a>
 8008aee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008af2:	42a8      	cmp	r0, r5
 8008af4:	d10f      	bne.n	8008b16 <TIM_OC3_SetConfig+0x7a>
 8008af6:	e006      	b.n	8008b06 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008af8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008afe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b06:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b0a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b0e:	ea46 0c05 	orr.w	ip, r6, r5
 8008b12:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b16:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008b18:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008b1a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008b1c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8008b1e:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8008b20:	6203      	str	r3, [r0, #32]
}
 8008b22:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b24:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b32:	e7d1      	b.n	8008ad8 <TIM_OC3_SetConfig+0x3c>
 8008b34:	40012c00 	.word	0x40012c00
 8008b38:	40014000 	.word	0x40014000

08008b3c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b3c:	6a03      	ldr	r3, [r0, #32]
 8008b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b42:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b44:	6a03      	ldr	r3, [r0, #32]
{
 8008b46:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b48:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b4a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b4e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008b52:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b5a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b60:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b64:	4d1c      	ldr	r5, [pc, #112]	; (8008bd8 <TIM_OC4_SetConfig+0x9c>)
 8008b66:	42a8      	cmp	r0, r5
 8008b68:	d017      	beq.n	8008b9a <TIM_OC4_SetConfig+0x5e>
 8008b6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b6e:	42a8      	cmp	r0, r5
 8008b70:	d013      	beq.n	8008b9a <TIM_OC4_SetConfig+0x5e>
 8008b72:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008b76:	42a8      	cmp	r0, r5
 8008b78:	d025      	beq.n	8008bc6 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b7a:	4d18      	ldr	r5, [pc, #96]	; (8008bdc <TIM_OC4_SetConfig+0xa0>)
 8008b7c:	42a8      	cmp	r0, r5
 8008b7e:	d013      	beq.n	8008ba8 <TIM_OC4_SetConfig+0x6c>
 8008b80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b84:	42a8      	cmp	r0, r5
 8008b86:	d00f      	beq.n	8008ba8 <TIM_OC4_SetConfig+0x6c>
 8008b88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b8c:	42a8      	cmp	r0, r5
 8008b8e:	d00b      	beq.n	8008ba8 <TIM_OC4_SetConfig+0x6c>
 8008b90:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b94:	42a8      	cmp	r0, r5
 8008b96:	d10f      	bne.n	8008bb8 <TIM_OC4_SetConfig+0x7c>
 8008b98:	e006      	b.n	8008ba8 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b9a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008b9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ba0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008ba8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008bac:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008bb0:	ea46 0c05 	orr.w	ip, r6, r5
 8008bb4:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bb8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008bba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008bbc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008bbe:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8008bc0:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8008bc2:	6203      	str	r3, [r0, #32]
}
 8008bc4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bc6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bcc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd4:	e7d1      	b.n	8008b7a <TIM_OC4_SetConfig+0x3e>
 8008bd6:	bf00      	nop
 8008bd8:	40012c00 	.word	0x40012c00
 8008bdc:	40014000 	.word	0x40014000

08008be0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f000 808c 	beq.w	8008cfe <HAL_TIM_Base_Init+0x11e>
{
 8008be6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008be8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008bec:	4604      	mov	r4, r0
 8008bee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d078      	beq.n	8008ce8 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bf6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bf8:	4944      	ldr	r1, [pc, #272]	; (8008d0c <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c00:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008c02:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c04:	d05c      	beq.n	8008cc0 <HAL_TIM_Base_Init+0xe0>
 8008c06:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008c0a:	d02c      	beq.n	8008c66 <HAL_TIM_Base_Init+0x86>
 8008c0c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008c10:	428a      	cmp	r2, r1
 8008c12:	d028      	beq.n	8008c66 <HAL_TIM_Base_Init+0x86>
 8008c14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c18:	428a      	cmp	r2, r1
 8008c1a:	d024      	beq.n	8008c66 <HAL_TIM_Base_Init+0x86>
 8008c1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c20:	428a      	cmp	r2, r1
 8008c22:	d020      	beq.n	8008c66 <HAL_TIM_Base_Init+0x86>
 8008c24:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008c28:	428a      	cmp	r2, r1
 8008c2a:	d049      	beq.n	8008cc0 <HAL_TIM_Base_Init+0xe0>
 8008c2c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008c30:	428a      	cmp	r2, r1
 8008c32:	d066      	beq.n	8008d02 <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c34:	4936      	ldr	r1, [pc, #216]	; (8008d10 <HAL_TIM_Base_Init+0x130>)
 8008c36:	428a      	cmp	r2, r1
 8008c38:	d05b      	beq.n	8008cf2 <HAL_TIM_Base_Init+0x112>
 8008c3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c3e:	428a      	cmp	r2, r1
 8008c40:	d057      	beq.n	8008cf2 <HAL_TIM_Base_Init+0x112>
 8008c42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c46:	428a      	cmp	r2, r1
 8008c48:	d053      	beq.n	8008cf2 <HAL_TIM_Base_Init+0x112>
 8008c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c4e:	428a      	cmp	r2, r1
 8008c50:	d04f      	beq.n	8008cf2 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c52:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c54:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c5a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008c5c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8008c5e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c60:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c62:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c64:	e010      	b.n	8008c88 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008c66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c68:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c6e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c74:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c7c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c7e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008c80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008c82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c86:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008c94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008c98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008c9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008cac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cb0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008cb4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008cb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008cbc:	2000      	movs	r0, #0
}
 8008cbe:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008cc0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cc2:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008cc8:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cce:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cd0:	69a1      	ldr	r1, [r4, #24]
 8008cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cd6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008cd8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cda:	68e3      	ldr	r3, [r4, #12]
 8008cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008ce2:	6963      	ldr	r3, [r4, #20]
 8008ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ce6:	e7cf      	b.n	8008c88 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008ce8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008cec:	f7fc fd06 	bl	80056fc <HAL_TIM_Base_MspInit>
 8008cf0:	e781      	b.n	8008bf6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cf2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cf4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cfa:	4303      	orrs	r3, r0
 8008cfc:	e7e9      	b.n	8008cd2 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8008cfe:	2001      	movs	r0, #1
}
 8008d00:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008d02:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008d08:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d0a:	e793      	b.n	8008c34 <HAL_TIM_Base_Init+0x54>
 8008d0c:	40012c00 	.word	0x40012c00
 8008d10:	40014000 	.word	0x40014000

08008d14 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008d14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d132      	bne.n	8008d82 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d1c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1e:	491b      	ldr	r1, [pc, #108]	; (8008d8c <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008d20:	2202      	movs	r2, #2
 8008d22:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d26:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d28:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d2a:	f042 0201 	orr.w	r2, r2, #1
 8008d2e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d30:	d019      	beq.n	8008d66 <HAL_TIM_Base_Start_IT+0x52>
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d36:	d016      	beq.n	8008d66 <HAL_TIM_Base_Start_IT+0x52>
 8008d38:	4a15      	ldr	r2, [pc, #84]	; (8008d90 <HAL_TIM_Base_Start_IT+0x7c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <HAL_TIM_Base_Start_IT+0x52>
 8008d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00f      	beq.n	8008d66 <HAL_TIM_Base_Start_IT+0x52>
 8008d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <HAL_TIM_Base_Start_IT+0x52>
 8008d4e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <HAL_TIM_Base_Start_IT+0x52>
 8008d56:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <HAL_TIM_Base_Start_IT+0x52>
 8008d5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d107      	bne.n	8008d76 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d66:	6899      	ldr	r1, [r3, #8]
 8008d68:	4a0a      	ldr	r2, [pc, #40]	; (8008d94 <HAL_TIM_Base_Start_IT+0x80>)
 8008d6a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d6c:	2a06      	cmp	r2, #6
 8008d6e:	d00a      	beq.n	8008d86 <HAL_TIM_Base_Start_IT+0x72>
 8008d70:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008d74:	d007      	beq.n	8008d86 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8008d7c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	4770      	bx	lr
    return HAL_ERROR;
 8008d82:	2001      	movs	r0, #1
 8008d84:	4770      	bx	lr
  return HAL_OK;
 8008d86:	2000      	movs	r0, #0
}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40012c00 	.word	0x40012c00
 8008d90:	40000400 	.word	0x40000400
 8008d94:	00010007 	.word	0x00010007

08008d98 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	f000 808c 	beq.w	8008eb6 <HAL_TIM_PWM_Init+0x11e>
{
 8008d9e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008da0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008da4:	4604      	mov	r4, r0
 8008da6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d078      	beq.n	8008ea0 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dae:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008db0:	4944      	ldr	r1, [pc, #272]	; (8008ec4 <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008db2:	2302      	movs	r3, #2
 8008db4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008db8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008dba:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dbc:	d05c      	beq.n	8008e78 <HAL_TIM_PWM_Init+0xe0>
 8008dbe:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008dc2:	d02c      	beq.n	8008e1e <HAL_TIM_PWM_Init+0x86>
 8008dc4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008dc8:	428a      	cmp	r2, r1
 8008dca:	d028      	beq.n	8008e1e <HAL_TIM_PWM_Init+0x86>
 8008dcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008dd0:	428a      	cmp	r2, r1
 8008dd2:	d024      	beq.n	8008e1e <HAL_TIM_PWM_Init+0x86>
 8008dd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008dd8:	428a      	cmp	r2, r1
 8008dda:	d020      	beq.n	8008e1e <HAL_TIM_PWM_Init+0x86>
 8008ddc:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008de0:	428a      	cmp	r2, r1
 8008de2:	d049      	beq.n	8008e78 <HAL_TIM_PWM_Init+0xe0>
 8008de4:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008de8:	428a      	cmp	r2, r1
 8008dea:	d066      	beq.n	8008eba <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dec:	4936      	ldr	r1, [pc, #216]	; (8008ec8 <HAL_TIM_PWM_Init+0x130>)
 8008dee:	428a      	cmp	r2, r1
 8008df0:	d05b      	beq.n	8008eaa <HAL_TIM_PWM_Init+0x112>
 8008df2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008df6:	428a      	cmp	r2, r1
 8008df8:	d057      	beq.n	8008eaa <HAL_TIM_PWM_Init+0x112>
 8008dfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008dfe:	428a      	cmp	r2, r1
 8008e00:	d053      	beq.n	8008eaa <HAL_TIM_PWM_Init+0x112>
 8008e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e06:	428a      	cmp	r2, r1
 8008e08:	d04f      	beq.n	8008eaa <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e0a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e0c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e12:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008e14:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8008e16:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e18:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008e1a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e1c:	e010      	b.n	8008e40 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008e1e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e20:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008e26:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e2c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e2e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e34:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e36:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008e38:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008e3a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e3c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008e3e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008e40:	2301      	movs	r3, #1
 8008e42:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e44:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008e4c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008e50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008e54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008e64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e68:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008e6c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008e70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008e74:	2000      	movs	r0, #0
}
 8008e76:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008e78:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e7a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008e80:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e86:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e88:	69a1      	ldr	r1, [r4, #24]
 8008e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e8e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008e90:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e92:	68e3      	ldr	r3, [r4, #12]
 8008e94:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008e9a:	6963      	ldr	r3, [r4, #20]
 8008e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e9e:	e7cf      	b.n	8008e40 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008ea0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008ea4:	f7fc fc14 	bl	80056d0 <HAL_TIM_PWM_MspInit>
 8008ea8:	e781      	b.n	8008dae <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eaa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eac:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eb2:	4303      	orrs	r3, r0
 8008eb4:	e7e9      	b.n	8008e8a <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 8008eb6:	2001      	movs	r0, #1
}
 8008eb8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008eba:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ec0:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ec2:	e793      	b.n	8008dec <HAL_TIM_PWM_Init+0x54>
 8008ec4:	40012c00 	.word	0x40012c00
 8008ec8:	40014000 	.word	0x40014000

08008ecc <HAL_TIM_PWM_Start>:
 8008ecc:	2910      	cmp	r1, #16
 8008ece:	d80a      	bhi.n	8008ee6 <HAL_TIM_PWM_Start+0x1a>
 8008ed0:	e8df f001 	tbb	[pc, r1]
 8008ed4:	09090961 	.word	0x09090961
 8008ed8:	09090967 	.word	0x09090967
 8008edc:	0909096f 	.word	0x0909096f
 8008ee0:	09090974 	.word	0x09090974
 8008ee4:	7d          	.byte	0x7d
 8008ee5:	00          	.byte	0x00
 8008ee6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d157      	bne.n	8008f9e <HAL_TIM_PWM_Start+0xd2>
 8008eee:	2910      	cmp	r1, #16
 8008ef0:	d80a      	bhi.n	8008f08 <HAL_TIM_PWM_Start+0x3c>
 8008ef2:	e8df f001 	tbb	[pc, r1]
 8008ef6:	0993      	.short	0x0993
 8008ef8:	095a0909 	.word	0x095a0909
 8008efc:	097c0909 	.word	0x097c0909
 8008f00:	09780909 	.word	0x09780909
 8008f04:	0909      	.short	0x0909
 8008f06:	74          	.byte	0x74
 8008f07:	00          	.byte	0x00
 8008f08:	2302      	movs	r3, #2
 8008f0a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008f0e:	6803      	ldr	r3, [r0, #0]
 8008f10:	2201      	movs	r2, #1
 8008f12:	6a18      	ldr	r0, [r3, #32]
 8008f14:	f001 011f 	and.w	r1, r1, #31
 8008f18:	fa02 f101 	lsl.w	r1, r2, r1
 8008f1c:	ea20 0001 	bic.w	r0, r0, r1
 8008f20:	6218      	str	r0, [r3, #32]
 8008f22:	6a18      	ldr	r0, [r3, #32]
 8008f24:	4a3f      	ldr	r2, [pc, #252]	; (8009024 <HAL_TIM_PWM_Start+0x158>)
 8008f26:	4301      	orrs	r1, r0
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	6219      	str	r1, [r3, #32]
 8008f2c:	d063      	beq.n	8008ff6 <HAL_TIM_PWM_Start+0x12a>
 8008f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d06d      	beq.n	8009012 <HAL_TIM_PWM_Start+0x146>
 8008f36:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d069      	beq.n	8009012 <HAL_TIM_PWM_Start+0x146>
 8008f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d065      	beq.n	8009012 <HAL_TIM_PWM_Start+0x146>
 8008f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d061      	beq.n	8009012 <HAL_TIM_PWM_Start+0x146>
 8008f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d05d      	beq.n	8009012 <HAL_TIM_PWM_Start+0x146>
 8008f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5a:	d050      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x132>
 8008f5c:	4a32      	ldr	r2, [pc, #200]	; (8009028 <HAL_TIM_PWM_Start+0x15c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d04d      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x132>
 8008f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d049      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x132>
 8008f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d045      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x132>
 8008f72:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d041      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x132>
 8008f7a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d03d      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x132>
 8008f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d039      	beq.n	8008ffe <HAL_TIM_PWM_Start+0x132>
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	f042 0201 	orr.w	r2, r2, #1
 8008f90:	2000      	movs	r0, #0
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	4770      	bx	lr
 8008f96:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d03e      	beq.n	800901c <HAL_TIM_PWM_Start+0x150>
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	4770      	bx	lr
 8008fa2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d1f9      	bne.n	8008f9e <HAL_TIM_PWM_Start+0xd2>
 8008faa:	2302      	movs	r3, #2
 8008fac:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008fb0:	e7ad      	b.n	8008f0e <HAL_TIM_PWM_Start+0x42>
 8008fb2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d099      	beq.n	8008eee <HAL_TIM_PWM_Start+0x22>
 8008fba:	e7f0      	b.n	8008f9e <HAL_TIM_PWM_Start+0xd2>
 8008fbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	bf18      	it	ne
 8008fc4:	2301      	movne	r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d091      	beq.n	8008eee <HAL_TIM_PWM_Start+0x22>
 8008fca:	2001      	movs	r0, #1
 8008fcc:	4770      	bx	lr
 8008fce:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	bf18      	it	ne
 8008fd6:	2301      	movne	r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d088      	beq.n	8008eee <HAL_TIM_PWM_Start+0x22>
 8008fdc:	e7f5      	b.n	8008fca <HAL_TIM_PWM_Start+0xfe>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008fe4:	e793      	b.n	8008f0e <HAL_TIM_PWM_Start+0x42>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008fec:	e78f      	b.n	8008f0e <HAL_TIM_PWM_Start+0x42>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008ff4:	e78b      	b.n	8008f0e <HAL_TIM_PWM_Start+0x42>
 8008ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ffc:	645a      	str	r2, [r3, #68]	; 0x44
 8008ffe:	6899      	ldr	r1, [r3, #8]
 8009000:	4a0a      	ldr	r2, [pc, #40]	; (800902c <HAL_TIM_PWM_Start+0x160>)
 8009002:	400a      	ands	r2, r1
 8009004:	2a06      	cmp	r2, #6
 8009006:	d002      	beq.n	800900e <HAL_TIM_PWM_Start+0x142>
 8009008:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800900c:	d1bd      	bne.n	8008f8a <HAL_TIM_PWM_Start+0xbe>
 800900e:	2000      	movs	r0, #0
 8009010:	4770      	bx	lr
 8009012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009018:	645a      	str	r2, [r3, #68]	; 0x44
 800901a:	e79c      	b.n	8008f56 <HAL_TIM_PWM_Start+0x8a>
 800901c:	2302      	movs	r3, #2
 800901e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8009022:	e774      	b.n	8008f0e <HAL_TIM_PWM_Start+0x42>
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40000400 	.word	0x40000400
 800902c:	00010007 	.word	0x00010007

08009030 <HAL_TIM_OC_DelayElapsedCallback>:
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop

08009034 <HAL_TIM_IC_CaptureCallback>:
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop

08009038 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop

0800903c <HAL_TIM_TriggerCallback>:
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop

08009040 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009040:	6803      	ldr	r3, [r0, #0]
 8009042:	691a      	ldr	r2, [r3, #16]
 8009044:	0791      	lsls	r1, r2, #30
{
 8009046:	b510      	push	{r4, lr}
 8009048:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800904a:	d503      	bpl.n	8009054 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	0792      	lsls	r2, r2, #30
 8009050:	f100 808a 	bmi.w	8009168 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	0752      	lsls	r2, r2, #29
 8009058:	d502      	bpl.n	8009060 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	0750      	lsls	r0, r2, #29
 800905e:	d470      	bmi.n	8009142 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	0711      	lsls	r1, r2, #28
 8009064:	d502      	bpl.n	800906c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	0712      	lsls	r2, r2, #28
 800906a:	d458      	bmi.n	800911e <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	06d1      	lsls	r1, r2, #27
 8009070:	d502      	bpl.n	8009078 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	06d2      	lsls	r2, r2, #27
 8009076:	d43e      	bmi.n	80090f6 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009078:	691a      	ldr	r2, [r3, #16]
 800907a:	07d0      	lsls	r0, r2, #31
 800907c:	d503      	bpl.n	8009086 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	07d1      	lsls	r1, r2, #31
 8009082:	f100 808a 	bmi.w	800919a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	0612      	lsls	r2, r2, #24
 800908a:	d503      	bpl.n	8009094 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	0610      	lsls	r0, r2, #24
 8009090:	f100 808b 	bmi.w	80091aa <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009094:	691a      	ldr	r2, [r3, #16]
 8009096:	05d1      	lsls	r1, r2, #23
 8009098:	d503      	bpl.n	80090a2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	0612      	lsls	r2, r2, #24
 800909e:	f100 808c 	bmi.w	80091ba <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	0650      	lsls	r0, r2, #25
 80090a6:	d503      	bpl.n	80090b0 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	0651      	lsls	r1, r2, #25
 80090ac:	f100 808d 	bmi.w	80091ca <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090b0:	691a      	ldr	r2, [r3, #16]
 80090b2:	0692      	lsls	r2, r2, #26
 80090b4:	d503      	bpl.n	80090be <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	0690      	lsls	r0, r2, #26
 80090ba:	f100 808e 	bmi.w	80091da <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	02d1      	lsls	r1, r2, #11
 80090c2:	d503      	bpl.n	80090cc <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	02d2      	lsls	r2, r2, #11
 80090c8:	f100 808f 	bmi.w	80091ea <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80090cc:	691a      	ldr	r2, [r3, #16]
 80090ce:	0290      	lsls	r0, r2, #10
 80090d0:	d503      	bpl.n	80090da <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	0291      	lsls	r1, r2, #10
 80090d6:	f100 8090 	bmi.w	80091fa <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	0252      	lsls	r2, r2, #9
 80090de:	d503      	bpl.n	80090e8 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	0250      	lsls	r0, r2, #9
 80090e4:	f100 8091 	bmi.w	800920a <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80090e8:	691a      	ldr	r2, [r3, #16]
 80090ea:	0211      	lsls	r1, r2, #8
 80090ec:	d502      	bpl.n	80090f4 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	0212      	lsls	r2, r2, #8
 80090f2:	d44a      	bmi.n	800918a <HAL_TIM_IRQHandler+0x14a>
}
 80090f4:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090f6:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090fa:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090fc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009106:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009108:	f040 8090 	bne.w	800922c <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800910c:	f7ff ff90 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009110:	4620      	mov	r0, r4
 8009112:	f7ff ff91 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009116:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009118:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911a:	7722      	strb	r2, [r4, #28]
 800911c:	e7ac      	b.n	8009078 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800911e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009122:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009124:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009126:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800912c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800912e:	d17a      	bne.n	8009226 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009130:	f7ff ff7e 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009134:	4620      	mov	r0, r4
 8009136:	f7ff ff7f 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800913c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913e:	7722      	strb	r2, [r4, #28]
 8009140:	e794      	b.n	800906c <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009142:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009146:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009148:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800914a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009152:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009154:	d164      	bne.n	8009220 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009156:	f7ff ff6b 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff ff6c 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009160:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009162:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009164:	7722      	strb	r2, [r4, #28]
 8009166:	e77b      	b.n	8009060 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009168:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800916c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800916e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009170:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	0799      	lsls	r1, r3, #30
 8009176:	d150      	bne.n	800921a <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009178:	f7ff ff5a 	bl	8009030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	4620      	mov	r0, r4
 800917e:	f7ff ff5b 	bl	8009038 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009184:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009186:	7722      	strb	r2, [r4, #28]
 8009188:	e764      	b.n	8009054 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800918a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800918e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009190:	611a      	str	r2, [r3, #16]
}
 8009192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009196:	f000 ba11 	b.w	80095bc <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800919a:	f06f 0201 	mvn.w	r2, #1
 800919e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7fa f9c3 	bl	800352c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	e76d      	b.n	8009086 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 f9f9 	bl	80095a8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	e76c      	b.n	8009094 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80091be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 f9f3 	bl	80095ac <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	e76b      	b.n	80090a2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7ff ff33 	bl	800903c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	e76a      	b.n	80090b0 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091da:	f06f 0220 	mvn.w	r2, #32
 80091de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 f9df 	bl	80095a4 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	e769      	b.n	80090be <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80091ea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80091ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 f9dd 	bl	80095b0 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	e768      	b.n	80090cc <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80091fa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80091fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009200:	4620      	mov	r0, r4
 8009202:	f000 f9d7 	bl	80095b4 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	e767      	b.n	80090da <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800920a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800920e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8009210:	4620      	mov	r0, r4
 8009212:	f000 f9d1 	bl	80095b8 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	e766      	b.n	80090e8 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 800921a:	f7ff ff0b 	bl	8009034 <HAL_TIM_IC_CaptureCallback>
 800921e:	e7b0      	b.n	8009182 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8009220:	f7ff ff08 	bl	8009034 <HAL_TIM_IC_CaptureCallback>
 8009224:	e79c      	b.n	8009160 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8009226:	f7ff ff05 	bl	8009034 <HAL_TIM_IC_CaptureCallback>
 800922a:	e786      	b.n	800913a <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 800922c:	f7ff ff02 	bl	8009034 <HAL_TIM_IC_CaptureCallback>
 8009230:	e771      	b.n	8009116 <HAL_TIM_IRQHandler+0xd6>
 8009232:	bf00      	nop

08009234 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009234:	6a03      	ldr	r3, [r0, #32]
 8009236:	f023 0310 	bic.w	r3, r3, #16
 800923a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800923c:	6a03      	ldr	r3, [r0, #32]
{
 800923e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8009240:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009242:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009244:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009246:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800924a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800924e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009252:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8009254:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009258:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800925c:	4d1c      	ldr	r5, [pc, #112]	; (80092d0 <TIM_OC2_SetConfig+0x9c>)
 800925e:	42a8      	cmp	r0, r5
 8009260:	d017      	beq.n	8009292 <TIM_OC2_SetConfig+0x5e>
 8009262:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009266:	42a8      	cmp	r0, r5
 8009268:	d013      	beq.n	8009292 <TIM_OC2_SetConfig+0x5e>
 800926a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800926e:	42a8      	cmp	r0, r5
 8009270:	d025      	beq.n	80092be <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009272:	4d18      	ldr	r5, [pc, #96]	; (80092d4 <TIM_OC2_SetConfig+0xa0>)
 8009274:	42a8      	cmp	r0, r5
 8009276:	d013      	beq.n	80092a0 <TIM_OC2_SetConfig+0x6c>
 8009278:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800927c:	42a8      	cmp	r0, r5
 800927e:	d00f      	beq.n	80092a0 <TIM_OC2_SetConfig+0x6c>
 8009280:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009284:	42a8      	cmp	r0, r5
 8009286:	d00b      	beq.n	80092a0 <TIM_OC2_SetConfig+0x6c>
 8009288:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800928c:	42a8      	cmp	r0, r5
 800928e:	d10f      	bne.n	80092b0 <TIM_OC2_SetConfig+0x7c>
 8009290:	e006      	b.n	80092a0 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009292:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009298:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800929c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092a0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092a4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092a8:	ea46 0c05 	orr.w	ip, r6, r5
 80092ac:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80092b0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80092b2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80092b4:	6182      	str	r2, [r0, #24]
}
 80092b6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80092b8:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80092ba:	6203      	str	r3, [r0, #32]
}
 80092bc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80092c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80092c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092cc:	e7d1      	b.n	8009272 <TIM_OC2_SetConfig+0x3e>
 80092ce:	bf00      	nop
 80092d0:	40012c00 	.word	0x40012c00
 80092d4:	40014000 	.word	0x40014000

080092d8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80092d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	f000 80ff 	beq.w	80094e0 <HAL_TIM_PWM_ConfigChannel+0x208>
 80092e2:	2301      	movs	r3, #1
{
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80092ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80092ee:	2a14      	cmp	r2, #20
 80092f0:	d80c      	bhi.n	800930c <HAL_TIM_PWM_ConfigChannel+0x34>
 80092f2:	e8df f002 	tbb	[pc, r2]
 80092f6:	0b59      	.short	0x0b59
 80092f8:	0b6e0b0b 	.word	0x0b6e0b0b
 80092fc:	0b840b0b 	.word	0x0b840b0b
 8009300:	0b990b0b 	.word	0x0b990b0b
 8009304:	0baf0b0b 	.word	0x0baf0b0b
 8009308:	0b0b      	.short	0x0b0b
 800930a:	11          	.byte	0x11
 800930b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800930c:	2300      	movs	r3, #0
  switch (Channel)
 800930e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8009310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009314:	4610      	mov	r0, r2
 8009316:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009318:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800931a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800931c:	6a1a      	ldr	r2, [r3, #32]
 800931e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009322:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009324:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009326:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009328:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800932a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800932e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009332:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009336:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009338:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800933c:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009340:	4e69      	ldr	r6, [pc, #420]	; (80094e8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8009342:	42b3      	cmp	r3, r6
 8009344:	d013      	beq.n	800936e <HAL_TIM_PWM_ConfigChannel+0x96>
 8009346:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800934a:	42b3      	cmp	r3, r6
 800934c:	d00f      	beq.n	800936e <HAL_TIM_PWM_ConfigChannel+0x96>
 800934e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8009352:	42b3      	cmp	r3, r6
 8009354:	d00b      	beq.n	800936e <HAL_TIM_PWM_ConfigChannel+0x96>
 8009356:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800935a:	42b3      	cmp	r3, r6
 800935c:	d007      	beq.n	800936e <HAL_TIM_PWM_ConfigChannel+0x96>
 800935e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009362:	42b3      	cmp	r3, r6
 8009364:	d003      	beq.n	800936e <HAL_TIM_PWM_ConfigChannel+0x96>
 8009366:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800936a:	42b3      	cmp	r3, r6
 800936c:	d104      	bne.n	8009378 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800936e:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009370:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009374:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009378:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800937a:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800937c:	6869      	ldr	r1, [r5, #4]
 800937e:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009380:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009384:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800938a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800938c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800938e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009392:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009394:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009396:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800939a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800939c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800939e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80093a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80093a4:	4610      	mov	r0, r2
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093a8:	6800      	ldr	r0, [r0, #0]
 80093aa:	f7ff fb37 	bl	8008a1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093ae:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093b0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093b2:	f043 0308 	orr.w	r3, r3, #8
 80093b6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093b8:	6983      	ldr	r3, [r0, #24]
 80093ba:	f023 0304 	bic.w	r3, r3, #4
 80093be:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093c0:	6983      	ldr	r3, [r0, #24]
 80093c2:	430b      	orrs	r3, r1
 80093c4:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80093c6:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80093c8:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80093ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80093ce:	4610      	mov	r0, r2
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093d2:	6800      	ldr	r0, [r0, #0]
 80093d4:	f7ff ff2e 	bl	8009234 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093d8:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093da:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80093e0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093e2:	6983      	ldr	r3, [r0, #24]
 80093e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093e8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093ea:	6983      	ldr	r3, [r0, #24]
 80093ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093f0:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80093f2:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80093f4:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80093f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80093fa:	4610      	mov	r0, r2
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093fe:	6800      	ldr	r0, [r0, #0]
 8009400:	f7ff fb4c 	bl	8008a9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009404:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009406:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009408:	f043 0308 	orr.w	r3, r3, #8
 800940c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800940e:	69c3      	ldr	r3, [r0, #28]
 8009410:	f023 0304 	bic.w	r3, r3, #4
 8009414:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009416:	69c3      	ldr	r3, [r0, #28]
 8009418:	430b      	orrs	r3, r1
 800941a:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800941c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800941e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009420:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009424:	4610      	mov	r0, r2
 8009426:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009428:	6800      	ldr	r0, [r0, #0]
 800942a:	f7ff fb87 	bl	8008b3c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800942e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009430:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009436:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009438:	69c3      	ldr	r3, [r0, #28]
 800943a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800943e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009440:	69c3      	ldr	r3, [r0, #28]
 8009442:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009446:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8009448:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800944a:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800944c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009450:	4610      	mov	r0, r2
 8009452:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009454:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8009456:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800945e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009460:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009462:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009464:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009466:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800946a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800946e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009470:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8009472:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009476:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800947a:	4e1b      	ldr	r6, [pc, #108]	; (80094e8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800947c:	42b3      	cmp	r3, r6
 800947e:	d013      	beq.n	80094a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8009480:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009484:	42b3      	cmp	r3, r6
 8009486:	d00f      	beq.n	80094a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8009488:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800948c:	42b3      	cmp	r3, r6
 800948e:	d00b      	beq.n	80094a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8009490:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009494:	42b3      	cmp	r3, r6
 8009496:	d007      	beq.n	80094a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8009498:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800949c:	42b3      	cmp	r3, r6
 800949e:	d003      	beq.n	80094a8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80094a0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80094a4:	42b3      	cmp	r3, r6
 80094a6:	d104      	bne.n	80094b2 <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80094a8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80094aa:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80094ae:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80094b2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80094b4:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80094b6:	6869      	ldr	r1, [r5, #4]
 80094b8:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80094ba:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094be:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094c0:	f042 0208 	orr.w	r2, r2, #8
 80094c4:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094c6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80094c8:	f021 0104 	bic.w	r1, r1, #4
 80094cc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094ce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80094d0:	4301      	orrs	r1, r0
 80094d2:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80094d4:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80094d6:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80094d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80094dc:	4610      	mov	r0, r2
 80094de:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80094e0:	2202      	movs	r2, #2
}
 80094e2:	4610      	mov	r0, r2
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40012c00 	.word	0x40012c00

080094ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d051      	beq.n	8009598 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 80094f4:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094f6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094f8:	4d28      	ldr	r5, [pc, #160]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80094fa:	2302      	movs	r3, #2
 80094fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009500:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8009502:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009504:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009506:	d03b      	beq.n	8009580 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8009508:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800950c:	42aa      	cmp	r2, r5
 800950e:	d032      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8009510:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009514:	42aa      	cmp	r2, r5
 8009516:	d02e      	beq.n	8009576 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009518:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800951a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800951e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009522:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009524:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8009528:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800952a:	d016      	beq.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800952c:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800952e:	429a      	cmp	r2, r3
 8009530:	d013      	beq.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009536:	429a      	cmp	r2, r3
 8009538:	d00f      	beq.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800953a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800953e:	429a      	cmp	r2, r3
 8009540:	d00b      	beq.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009542:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8009546:	429a      	cmp	r2, r3
 8009548:	d007      	beq.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800954a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800954e:	429a      	cmp	r2, r3
 8009550:	d003      	beq.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009556:	429a      	cmp	r2, r3
 8009558:	d104      	bne.n	8009564 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800955a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800955c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009560:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009562:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8009564:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8009566:	2201      	movs	r2, #1
 8009568:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800956c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8009570:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8009572:	4618      	mov	r0, r3
}
 8009574:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009576:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009578:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800957c:	432b      	orrs	r3, r5
 800957e:	e7cb      	b.n	8009518 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8009580:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009582:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009586:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8009588:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800958c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800958e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009592:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8009594:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009596:	e7e0      	b.n	800955a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8009598:	2002      	movs	r0, #2
}
 800959a:	4770      	bx	lr
 800959c:	40012c00 	.word	0x40012c00
 80095a0:	40000400 	.word	0x40000400

080095a4 <HAL_TIMEx_CommutCallback>:
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop

080095a8 <HAL_TIMEx_BreakCallback>:
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <HAL_TIMEx_Break2Callback>:
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop

080095b0 <HAL_TIMEx_EncoderIndexCallback>:
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop

080095b4 <HAL_TIMEx_DirectionChangeCallback>:
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop

080095b8 <HAL_TIMEx_IndexErrorCallback>:
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop

080095bc <HAL_TIMEx_TransitionErrorCallback>:
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095c0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	d15f      	bne.n	8009688 <HAL_UART_Receive_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80095c8:	2900      	cmp	r1, #0
 80095ca:	d05b      	beq.n	8009684 <HAL_UART_Receive_IT+0xc4>
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	d059      	beq.n	8009684 <HAL_UART_Receive_IT+0xc4>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80095d0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d057      	beq.n	8009688 <HAL_UART_Receive_IT+0xc8>
{
 80095d8:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095da:	6803      	ldr	r3, [r0, #0]
 80095dc:	4c59      	ldr	r4, [pc, #356]	; (8009744 <HAL_UART_Receive_IT+0x184>)
    __HAL_LOCK(huart);
 80095de:	2501      	movs	r5, #1
 80095e0:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095e4:	42a3      	cmp	r3, r4
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e6:	f04f 0500 	mov.w	r5, #0
 80095ea:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095ec:	d00a      	beq.n	8009604 <HAL_UART_Receive_IT+0x44>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095ee:	685c      	ldr	r4, [r3, #4]
 80095f0:	0224      	lsls	r4, r4, #8
 80095f2:	d507      	bpl.n	8009604 <HAL_UART_Receive_IT+0x44>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	e853 4f00 	ldrex	r4, [r3]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095f8:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	e843 4500 	strex	r5, r4, [r3]
 8009600:	2d00      	cmp	r5, #0
 8009602:	d1f7      	bne.n	80095f4 <HAL_UART_Receive_IT+0x34>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009604:	6885      	ldr	r5, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8009606:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 8009608:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 800960a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
  huart->RxXferSize  = Size;
 800960e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009612:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009616:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8009618:	d04f      	beq.n	80096ba <HAL_UART_Receive_IT+0xfa>
 800961a:	2d00      	cmp	r5, #0
 800961c:	d177      	bne.n	800970e <HAL_UART_Receive_IT+0x14e>
 800961e:	6901      	ldr	r1, [r0, #16]
 8009620:	2900      	cmp	r1, #0
 8009622:	bf14      	ite	ne
 8009624:	247f      	movne	r4, #127	; 0x7f
 8009626:	24ff      	moveq	r4, #255	; 0xff

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009628:	2100      	movs	r1, #0
 800962a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800962e:	2122      	movs	r1, #34	; 0x22
  UART_MASK_COMPUTATION(huart);
 8009630:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009634:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	f103 0108 	add.w	r1, r3, #8
 800963c:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009640:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	f103 0508 	add.w	r5, r3, #8
 8009648:	e845 1400 	strex	r4, r1, [r5]
 800964c:	2c00      	cmp	r4, #0
 800964e:	d1f3      	bne.n	8009638 <HAL_UART_Receive_IT+0x78>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009650:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8009652:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009656:	d037      	beq.n	80096c8 <HAL_UART_Receive_IT+0x108>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009658:	6882      	ldr	r2, [r0, #8]
 800965a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800965e:	6902      	ldr	r2, [r0, #16]
 8009660:	d014      	beq.n	800968c <HAL_UART_Receive_IT+0xcc>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009662:	4c39      	ldr	r4, [pc, #228]	; (8009748 <HAL_UART_Receive_IT+0x188>)
 8009664:	6704      	str	r4, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009666:	2100      	movs	r1, #0
 8009668:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800966c:	b1a2      	cbz	r2, 8009698 <HAL_UART_Receive_IT+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009672:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	e843 2100 	strex	r1, r2, [r3]
 800967a:	2900      	cmp	r1, #0
 800967c:	d1f7      	bne.n	800966e <HAL_UART_Receive_IT+0xae>
    return (UART_Start_Receive_IT(huart, pData, Size));
 800967e:	2000      	movs	r0, #0
}
 8009680:	bc30      	pop	{r4, r5}
 8009682:	4770      	bx	lr
      return HAL_ERROR;
 8009684:	2001      	movs	r0, #1
 8009686:	4770      	bx	lr
    return HAL_BUSY;
 8009688:	2002      	movs	r0, #2
}
 800968a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800968c:	2a00      	cmp	r2, #0
 800968e:	d147      	bne.n	8009720 <HAL_UART_Receive_IT+0x160>
 8009690:	492e      	ldr	r1, [pc, #184]	; (800974c <HAL_UART_Receive_IT+0x18c>)
 8009692:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009694:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800969c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	e843 2100 	strex	r1, r2, [r3]
 80096a4:	2900      	cmp	r1, #0
 80096a6:	d0ea      	beq.n	800967e <HAL_UART_Receive_IT+0xbe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	e853 2f00 	ldrex	r2, [r3]
 80096ac:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	e843 2100 	strex	r1, r2, [r3]
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d1ef      	bne.n	8009698 <HAL_UART_Receive_IT+0xd8>
 80096b8:	e7e1      	b.n	800967e <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 80096ba:	6901      	ldr	r1, [r0, #16]
 80096bc:	2900      	cmp	r1, #0
 80096be:	f240 14ff 	movw	r4, #511	; 0x1ff
 80096c2:	bf18      	it	ne
 80096c4:	24ff      	movne	r4, #255	; 0xff
 80096c6:	e7af      	b.n	8009628 <HAL_UART_Receive_IT+0x68>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80096c8:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 80096cc:	4291      	cmp	r1, r2
 80096ce:	d8c3      	bhi.n	8009658 <HAL_UART_Receive_IT+0x98>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096d0:	6882      	ldr	r2, [r0, #8]
 80096d2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80096d6:	6902      	ldr	r2, [r0, #16]
 80096d8:	d028      	beq.n	800972c <HAL_UART_Receive_IT+0x16c>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80096da:	491d      	ldr	r1, [pc, #116]	; (8009750 <HAL_UART_Receive_IT+0x190>)
 80096dc:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80096de:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 80096e2:	b13a      	cbz	r2, 80096f4 <HAL_UART_Receive_IT+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	e843 2100 	strex	r1, r2, [r3]
 80096f0:	2900      	cmp	r1, #0
 80096f2:	d1f7      	bne.n	80096e4 <HAL_UART_Receive_IT+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f4:	f103 0208 	add.w	r2, r3, #8
 80096f8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	f103 0008 	add.w	r0, r3, #8
 8009704:	e840 2100 	strex	r1, r2, [r0]
 8009708:	2900      	cmp	r1, #0
 800970a:	d1f3      	bne.n	80096f4 <HAL_UART_Receive_IT+0x134>
 800970c:	e7b7      	b.n	800967e <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 800970e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8009712:	d189      	bne.n	8009628 <HAL_UART_Receive_IT+0x68>
 8009714:	6901      	ldr	r1, [r0, #16]
 8009716:	2900      	cmp	r1, #0
 8009718:	bf0c      	ite	eq
 800971a:	247f      	moveq	r4, #127	; 0x7f
 800971c:	243f      	movne	r4, #63	; 0x3f
 800971e:	e783      	b.n	8009628 <HAL_UART_Receive_IT+0x68>
      huart->RxISR = UART_RxISR_8BIT;
 8009720:	4909      	ldr	r1, [pc, #36]	; (8009748 <HAL_UART_Receive_IT+0x188>)
 8009722:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009724:	2200      	movs	r2, #0
 8009726:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800972a:	e7a0      	b.n	800966e <HAL_UART_Receive_IT+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800972c:	b922      	cbnz	r2, 8009738 <HAL_UART_Receive_IT+0x178>
 800972e:	4909      	ldr	r1, [pc, #36]	; (8009754 <HAL_UART_Receive_IT+0x194>)
 8009730:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009732:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009736:	e7dd      	b.n	80096f4 <HAL_UART_Receive_IT+0x134>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009738:	4a05      	ldr	r2, [pc, #20]	; (8009750 <HAL_UART_Receive_IT+0x190>)
 800973a:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800973c:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009740:	e7d0      	b.n	80096e4 <HAL_UART_Receive_IT+0x124>
 8009742:	bf00      	nop
 8009744:	40008000 	.word	0x40008000
 8009748:	08009d75 	.word	0x08009d75
 800974c:	08009d29 	.word	0x08009d29
 8009750:	08009db5 	.word	0x08009db5
 8009754:	08009f61 	.word	0x08009f61

08009758 <HAL_UART_Transmit_DMA>:
{
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800975a:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800975e:	2e20      	cmp	r6, #32
 8009760:	d141      	bne.n	80097e6 <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8009762:	2900      	cmp	r1, #0
 8009764:	d03d      	beq.n	80097e2 <HAL_UART_Transmit_DMA+0x8a>
 8009766:	2a00      	cmp	r2, #0
 8009768:	d03b      	beq.n	80097e2 <HAL_UART_Transmit_DMA+0x8a>
 800976a:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 800976c:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8009770:	2801      	cmp	r0, #1
 8009772:	d038      	beq.n	80097e6 <HAL_UART_Transmit_DMA+0x8e>
    if (huart->hdmatx != NULL)
 8009774:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8009776:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800977a:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800977c:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800977e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009780:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 8009784:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009786:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 800978a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800978e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009792:	b190      	cbz	r0, 80097ba <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009794:	f8df c064 	ldr.w	ip, [pc, #100]	; 80097fc <HAL_UART_Transmit_DMA+0xa4>
      huart->hdmatx->XferAbortCallback = NULL;
 8009798:	6387      	str	r7, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800979a:	4613      	mov	r3, r2
 800979c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800979e:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097a2:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8009800 <HAL_UART_Transmit_DMA+0xa8>
 80097a6:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80097aa:	f8df c058 	ldr.w	ip, [pc, #88]	; 8009804 <HAL_UART_Transmit_DMA+0xac>
 80097ae:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80097b2:	3228      	adds	r2, #40	; 0x28
 80097b4:	f7fd fa34 	bl	8006c20 <HAL_DMA_Start_IT>
 80097b8:	b9b8      	cbnz	r0, 80097ea <HAL_UART_Transmit_DMA+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 80097be:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80097c0:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 80097c2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	f102 0308 	add.w	r3, r2, #8
 80097ca:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	f102 0008 	add.w	r0, r2, #8
 80097d6:	e840 3100 	strex	r1, r3, [r0]
 80097da:	2900      	cmp	r1, #0
 80097dc:	d1f3      	bne.n	80097c6 <HAL_UART_Transmit_DMA+0x6e>
    return HAL_OK;
 80097de:	2000      	movs	r0, #0
}
 80097e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80097e2:	2001      	movs	r0, #1
}
 80097e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80097e6:	2002      	movs	r0, #2
}
 80097e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097ea:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 80097ec:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097f0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 80097f4:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 80097f6:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 80097fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fc:	0800980d 	.word	0x0800980d
 8009800:	08009855 	.word	0x08009855
 8009804:	08009865 	.word	0x08009865

08009808 <HAL_UART_TxCpltCallback>:
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop

0800980c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800980c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800980e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009810:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f013 0320 	ands.w	r3, r3, #32
 8009818:	d117      	bne.n	800984a <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800981a:	6802      	ldr	r2, [r0, #0]
 800981c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	f102 0308 	add.w	r3, r2, #8
 8009824:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982c:	f102 0008 	add.w	r0, r2, #8
 8009830:	e840 3100 	strex	r1, r3, [r0]
 8009834:	2900      	cmp	r1, #0
 8009836:	d1f3      	bne.n	8009820 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800983c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	e842 3100 	strex	r1, r3, [r2]
 8009844:	2900      	cmp	r1, #0
 8009846:	d1f7      	bne.n	8009838 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009848:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800984a:	f7ff ffdd 	bl	8009808 <HAL_UART_TxCpltCallback>
}
 800984e:	bd08      	pop	{r3, pc}

08009850 <HAL_UART_TxHalfCpltCallback>:
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop

08009854 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009854:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009856:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009858:	f7ff fffa 	bl	8009850 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800985c:	bd08      	pop	{r3, pc}
 800985e:	bf00      	nop

08009860 <HAL_UART_ErrorCallback>:
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop

08009864 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009864:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009866:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009868:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800986c:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800986e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	0612      	lsls	r2, r2, #24
 8009876:	d501      	bpl.n	800987c <UART_DMAError+0x18>
 8009878:	2921      	cmp	r1, #33	; 0x21
 800987a:	d00d      	beq.n	8009898 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	0652      	lsls	r2, r2, #25
 8009880:	d501      	bpl.n	8009886 <UART_DMAError+0x22>
 8009882:	2c22      	cmp	r4, #34	; 0x22
 8009884:	d023      	beq.n	80098ce <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009886:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800988a:	f043 0310 	orr.w	r3, r3, #16
 800988e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009892:	f7ff ffe5 	bl	8009860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009896:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8009898:	2200      	movs	r2, #0
 800989a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80098a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	e843 2100 	strex	r1, r2, [r3]
 80098aa:	2900      	cmp	r1, #0
 80098ac:	d1f7      	bne.n	800989e <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	f103 0208 	add.w	r2, r3, #8
 80098b2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	f103 0c08 	add.w	ip, r3, #8
 80098be:	e84c 2100 	strex	r1, r2, [ip]
 80098c2:	2900      	cmp	r1, #0
 80098c4:	d1f3      	bne.n	80098ae <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 80098c6:	2220      	movs	r2, #32
 80098c8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 80098cc:	e7d6      	b.n	800987c <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	e843 2100 	strex	r1, r2, [r3]
 80098e0:	2900      	cmp	r1, #0
 80098e2:	d1f7      	bne.n	80098d4 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098e4:	4c13      	ldr	r4, [pc, #76]	; (8009934 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	f103 0208 	add.w	r2, r3, #8
 80098ea:	e852 2f00 	ldrex	r2, [r2]
 80098ee:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	f103 0c08 	add.w	ip, r3, #8
 80098f4:	e84c 2100 	strex	r1, r2, [ip]
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d1f4      	bne.n	80098e6 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098fc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80098fe:	2a01      	cmp	r2, #1
 8009900:	d006      	beq.n	8009910 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009902:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009904:	2220      	movs	r2, #32
 8009906:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 800990a:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800990e:	e7ba      	b.n	8009886 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009914:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	e843 2100 	strex	r1, r2, [r3]
 800991c:	2900      	cmp	r1, #0
 800991e:	d0f0      	beq.n	8009902 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009920:	e853 2f00 	ldrex	r2, [r3]
 8009924:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	e843 2100 	strex	r1, r2, [r3]
 800992c:	2900      	cmp	r1, #0
 800992e:	d1ef      	bne.n	8009910 <UART_DMAError+0xac>
 8009930:	e7e7      	b.n	8009902 <UART_DMAError+0x9e>
 8009932:	bf00      	nop
 8009934:	effffffe 	.word	0xeffffffe

08009938 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009938:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800993a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009942:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009946:	f7ff ff8b 	bl	8009860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800994a:	bd08      	pop	{r3, pc}

0800994c <HAL_UARTEx_RxEventCallback>:
}
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop

08009950 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009950:	6803      	ldr	r3, [r0, #0]
 8009952:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009954:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009956:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800995a:	ea12 0f0c 	tst.w	r2, ip
{
 800995e:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009960:	689d      	ldr	r5, [r3, #8]
{
 8009962:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8009964:	f000 80eb 	beq.w	8009b3e <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009968:	489a      	ldr	r0, [pc, #616]	; (8009bd4 <HAL_UART_IRQHandler+0x284>)
 800996a:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800996e:	489a      	ldr	r0, [pc, #616]	; (8009bd8 <HAL_UART_IRQHandler+0x288>)
 8009970:	4008      	ands	r0, r1
 8009972:	ea50 000c 	orrs.w	r0, r0, ip
 8009976:	d155      	bne.n	8009a24 <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009978:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800997a:	2801      	cmp	r0, #1
 800997c:	d022      	beq.n	80099c4 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800997e:	02d6      	lsls	r6, r2, #11
 8009980:	d502      	bpl.n	8009988 <HAL_UART_IRQHandler+0x38>
 8009982:	0268      	lsls	r0, r5, #9
 8009984:	f100 8104 	bmi.w	8009b90 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009988:	0616      	lsls	r6, r2, #24
 800998a:	d506      	bpl.n	800999a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800998c:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009990:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009994:	4328      	orrs	r0, r5
 8009996:	f040 80f3 	bne.w	8009b80 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800999a:	0650      	lsls	r0, r2, #25
 800999c:	d534      	bpl.n	8009a08 <HAL_UART_IRQHandler+0xb8>
 800999e:	064e      	lsls	r6, r1, #25
 80099a0:	d532      	bpl.n	8009a08 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	e843 2100 	strex	r1, r2, [r3]
 80099ae:	2900      	cmp	r1, #0
 80099b0:	d1f7      	bne.n	80099a2 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099b2:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099b4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80099b6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 80099ba:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff ff23 	bl	8009808 <HAL_UART_TxCpltCallback>
}
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099c4:	06d6      	lsls	r6, r2, #27
 80099c6:	d5da      	bpl.n	800997e <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099c8:	06c8      	lsls	r0, r1, #27
 80099ca:	d5d8      	bpl.n	800997e <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099cc:	2210      	movs	r2, #16
 80099ce:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d0:	689a      	ldr	r2, [r3, #8]
 80099d2:	0651      	lsls	r1, r2, #25
 80099d4:	f140 8106 	bpl.w	8009be4 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099d8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80099da:	6801      	ldr	r1, [r0, #0]
 80099dc:	684a      	ldr	r2, [r1, #4]
 80099de:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	d0ee      	beq.n	80099c2 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099e4:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80099e8:	4295      	cmp	r5, r2
 80099ea:	d9ea      	bls.n	80099c2 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 80099ec:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099f0:	680a      	ldr	r2, [r1, #0]
 80099f2:	0692      	lsls	r2, r2, #26
 80099f4:	f140 812b 	bpl.w	8009c4e <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80099fc:	1ae9      	subs	r1, r5, r3
 80099fe:	4620      	mov	r0, r4
 8009a00:	b289      	uxth	r1, r1
 8009a02:	f7ff ffa3 	bl	800994c <HAL_UARTEx_RxEventCallback>
}
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a08:	0215      	lsls	r5, r2, #8
 8009a0a:	d502      	bpl.n	8009a12 <HAL_UART_IRQHandler+0xc2>
 8009a0c:	0048      	lsls	r0, r1, #1
 8009a0e:	f100 80dc 	bmi.w	8009bca <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a12:	01d3      	lsls	r3, r2, #7
 8009a14:	d5d5      	bpl.n	80099c2 <HAL_UART_IRQHandler+0x72>
 8009a16:	2900      	cmp	r1, #0
 8009a18:	dad3      	bge.n	80099c2 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a1a:	4620      	mov	r0, r4
}
 8009a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a20:	f000 bf04 	b.w	800a82c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a24:	07d0      	lsls	r0, r2, #31
 8009a26:	d509      	bpl.n	8009a3c <HAL_UART_IRQHandler+0xec>
 8009a28:	05ce      	lsls	r6, r1, #23
 8009a2a:	d507      	bpl.n	8009a3c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a30:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009a34:	f040 0001 	orr.w	r0, r0, #1
 8009a38:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a3c:	0790      	lsls	r0, r2, #30
 8009a3e:	f140 8090 	bpl.w	8009b62 <HAL_UART_IRQHandler+0x212>
 8009a42:	07ee      	lsls	r6, r5, #31
 8009a44:	d50a      	bpl.n	8009a5c <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a46:	2002      	movs	r0, #2
 8009a48:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a4a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009a4e:	f040 0004 	orr.w	r0, r0, #4
 8009a52:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a56:	0750      	lsls	r0, r2, #29
 8009a58:	f100 8089 	bmi.w	8009b6e <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a5c:	0716      	lsls	r6, r2, #28
 8009a5e:	d50c      	bpl.n	8009a7a <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009a60:	f001 0020 	and.w	r0, r1, #32
 8009a64:	ea50 000c 	orrs.w	r0, r0, ip
 8009a68:	d007      	beq.n	8009a7a <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a6a:	2008      	movs	r0, #8
 8009a6c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a6e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009a72:	f040 0008 	orr.w	r0, r0, #8
 8009a76:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a7a:	0510      	lsls	r0, r2, #20
 8009a7c:	d50a      	bpl.n	8009a94 <HAL_UART_IRQHandler+0x144>
 8009a7e:	014e      	lsls	r6, r1, #5
 8009a80:	d508      	bpl.n	8009a94 <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009a86:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a88:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009a8c:	f040 0020 	orr.w	r0, r0, #32
 8009a90:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a94:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d092      	beq.n	80099c2 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a9c:	0690      	lsls	r0, r2, #26
 8009a9e:	d50a      	bpl.n	8009ab6 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009aa0:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009aa4:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8009aa8:	4329      	orrs	r1, r5
 8009aaa:	d004      	beq.n	8009ab6 <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 8009aac:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009aae:	b112      	cbz	r2, 8009ab6 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ab4:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8009ab6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009aba:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009abc:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ac0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009ac4:	ea52 0501 	orrs.w	r5, r2, r1
 8009ac8:	f000 80f2 	beq.w	8009cb0 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ad0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	e843 2100 	strex	r1, r2, [r3]
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	d1f7      	bne.n	8009acc <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009adc:	483f      	ldr	r0, [pc, #252]	; (8009bdc <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ade:	f103 0208 	add.w	r2, r3, #8
 8009ae2:	e852 2f00 	ldrex	r2, [r2]
 8009ae6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	f103 0508 	add.w	r5, r3, #8
 8009aec:	e845 2100 	strex	r1, r2, [r5]
 8009af0:	2900      	cmp	r1, #0
 8009af2:	d1f4      	bne.n	8009ade <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009af6:	2a01      	cmp	r2, #1
 8009af8:	d052      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009afa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009afc:	2120      	movs	r1, #32
 8009afe:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b02:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b04:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8009b06:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b08:	064a      	lsls	r2, r1, #25
 8009b0a:	d55a      	bpl.n	8009bc2 <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0c:	f103 0208 	add.w	r2, r3, #8
 8009b10:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	f103 0008 	add.w	r0, r3, #8
 8009b1c:	e840 2100 	strex	r1, r2, [r0]
 8009b20:	2900      	cmp	r1, #0
 8009b22:	d1f3      	bne.n	8009b0c <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 8009b24:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d04b      	beq.n	8009bc2 <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b2a:	4b2d      	ldr	r3, [pc, #180]	; (8009be0 <HAL_UART_IRQHandler+0x290>)
 8009b2c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b2e:	f7fd f90b 	bl	8006d48 <HAL_DMA_Abort_IT>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f43f af45 	beq.w	80099c2 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b38:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009b3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b3c:	e00e      	b.n	8009b5c <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b3e:	0696      	lsls	r6, r2, #26
 8009b40:	f57f af1a 	bpl.w	8009978 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b44:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b48:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 8009b4c:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8009b50:	f43f af12 	beq.w	8009978 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8009b54:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f43f af33 	beq.w	80099c2 <HAL_UART_IRQHandler+0x72>
}
 8009b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b60:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b62:	0756      	lsls	r6, r2, #29
 8009b64:	f57f af7a 	bpl.w	8009a5c <HAL_UART_IRQHandler+0x10c>
 8009b68:	07e8      	lsls	r0, r5, #31
 8009b6a:	f57f af77 	bpl.w	8009a5c <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b6e:	2004      	movs	r0, #4
 8009b70:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b72:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009b76:	f040 0002 	orr.w	r0, r0, #2
 8009b7a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8009b7e:	e76d      	b.n	8009a5c <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 8009b80:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f43f af1d 	beq.w	80099c2 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8009b88:	4620      	mov	r0, r4
}
 8009b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8009b8e:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8009b94:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b96:	621a      	str	r2, [r3, #32]
}
 8009b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8009b9c:	f000 be44 	b.w	800a828 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	e843 2100 	strex	r1, r2, [r3]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d0a4      	beq.n	8009afa <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	e853 2f00 	ldrex	r2, [r3]
 8009bb4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	e843 2100 	strex	r1, r2, [r3]
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	d1ef      	bne.n	8009ba0 <HAL_UART_IRQHandler+0x250>
 8009bc0:	e79b      	b.n	8009afa <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f7ff fe4c 	bl	8009860 <HAL_UART_ErrorCallback>
}
 8009bc8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009bca:	4620      	mov	r0, r4
}
 8009bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009bd0:	f000 be2e 	b.w	800a830 <HAL_UARTEx_TxFifoEmptyCallback>
 8009bd4:	10000001 	.word	0x10000001
 8009bd8:	04000120 	.word	0x04000120
 8009bdc:	effffffe 	.word	0xeffffffe
 8009be0:	08009939 	.word	0x08009939
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009be4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8009be8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bec:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8009bf0:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bf2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	f43f aee4 	beq.w	80099c2 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bfa:	1a41      	subs	r1, r0, r1
 8009bfc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	f43f aedf 	beq.w	80099c2 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	e843 2000 	strex	r0, r2, [r3]
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1f7      	bne.n	8009c04 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c14:	4d29      	ldr	r5, [pc, #164]	; (8009cbc <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	f103 0208 	add.w	r2, r3, #8
 8009c1a:	e852 2f00 	ldrex	r2, [r2]
 8009c1e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c20:	f103 0c08 	add.w	ip, r3, #8
 8009c24:	e84c 2000 	strex	r0, r2, [ip]
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d1f4      	bne.n	8009c16 <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8009c32:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c34:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	e843 2000 	strex	r0, r2, [r3]
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d1f7      	bne.n	8009c36 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c46:	4620      	mov	r0, r4
 8009c48:	f7ff fe80 	bl	800994c <HAL_UARTEx_RxEventCallback>
}
 8009c4c:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	e843 2100 	strex	r1, r2, [r3]
 8009c5a:	2900      	cmp	r1, #0
 8009c5c:	d1f7      	bne.n	8009c4e <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	f103 0208 	add.w	r2, r3, #8
 8009c62:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c66:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	f103 0508 	add.w	r5, r3, #8
 8009c6e:	e845 2100 	strex	r1, r2, [r5]
 8009c72:	2900      	cmp	r1, #0
 8009c74:	d1f3      	bne.n	8009c5e <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	f103 0208 	add.w	r2, r3, #8
 8009c7a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	f103 0508 	add.w	r5, r3, #8
 8009c86:	e845 2100 	strex	r1, r2, [r5]
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d1f3      	bne.n	8009c76 <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c94:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c9a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	e843 2100 	strex	r1, r2, [r3]
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d1f7      	bne.n	8009c96 <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ca6:	f7fd f815 	bl	8006cd4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009caa:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009cae:	e6a3      	b.n	80099f8 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f7ff fdd5 	bl	8009860 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	effffffe 	.word	0xeffffffe

08009cc0 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8009cc0:	b508      	push	{r3, lr}
 8009cc2:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	e843 2100 	strex	r1, r2, [r3]
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	d1f7      	bne.n	8009cc4 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	f103 0208 	add.w	r2, r3, #8
 8009cd8:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cdc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	f103 0c08 	add.w	ip, r3, #8
 8009ce4:	e84c 2100 	strex	r1, r2, [ip]
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d1f3      	bne.n	8009cd4 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cec:	2220      	movs	r2, #32
 8009cee:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8009cf4:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf6:	2a01      	cmp	r2, #1
 8009cf8:	d112      	bne.n	8009d20 <UART_RxISR_16BIT.part.0+0x60>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cfa:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d00:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	e843 2100 	strex	r1, r2, [r3]
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	d1f7      	bne.n	8009cfc <UART_RxISR_16BIT.part.0+0x3c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d0c:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d0e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d12:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d14:	bf44      	itt	mi
 8009d16:	2210      	movmi	r2, #16
 8009d18:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d1a:	f7ff fe17 	bl	800994c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d1e:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8009d20:	f7fa f834 	bl	8003d8c <HAL_UART_RxCpltCallback>
}
 8009d24:	bd08      	pop	{r3, pc}
 8009d26:	bf00      	nop

08009d28 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d28:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 8009d2c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d30:	2922      	cmp	r1, #34	; 0x22
 8009d32:	d005      	beq.n	8009d40 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d34:	6802      	ldr	r2, [r0, #0]
 8009d36:	6993      	ldr	r3, [r2, #24]
 8009d38:	f043 0308 	orr.w	r3, r3, #8
 8009d3c:	6193      	str	r3, [r2, #24]
 8009d3e:	4770      	bx	lr
{
 8009d40:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d42:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d44:	6d81      	ldr	r1, [r0, #88]	; 0x58
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d46:	6a64      	ldr	r4, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d48:	4022      	ands	r2, r4
 8009d4a:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8009d4e:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8009d52:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8009d54:	3a01      	subs	r2, #1
 8009d56:	b292      	uxth	r2, r2
 8009d58:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8009d5c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	b91b      	cbnz	r3, 8009d6c <UART_RxISR_16BIT+0x44>
  }
}
 8009d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d68:	f7ff bfaa 	b.w	8009cc0 <UART_RxISR_16BIT.part.0>
 8009d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop

08009d74 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d74:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 8009d78:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d7c:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d7e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d80:	d004      	beq.n	8009d8c <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d82:	6993      	ldr	r3, [r2, #24]
 8009d84:	f043 0308 	orr.w	r3, r3, #8
 8009d88:	6193      	str	r3, [r2, #24]
}
 8009d8a:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d8e:	400a      	ands	r2, r1
 8009d90:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009d92:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8009d94:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8009d98:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8009d9a:	3a01      	subs	r2, #1
 8009d9c:	b292      	uxth	r2, r2
 8009d9e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8009da2:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8009da6:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8009da8:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8009daa:	6581      	str	r1, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	d1ec      	bne.n	8009d8a <UART_RxISR_8BIT+0x16>
 8009db0:	f7ff bf86 	b.w	8009cc0 <UART_RxISR_16BIT.part.0>

08009db4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009db8:	6802      	ldr	r2, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8009dba:	f8b0 b060 	ldrh.w	fp, [r0, #96]	; 0x60
{
 8009dbe:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009dc0:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009dc2:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009dc4:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dc6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009dca:	2922      	cmp	r1, #34	; 0x22
 8009dcc:	d006      	beq.n	8009ddc <UART_RxISR_8BIT_FIFOEN+0x28>
 8009dce:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dd0:	6992      	ldr	r2, [r2, #24]
 8009dd2:	f042 0208 	orr.w	r2, r2, #8
 8009dd6:	619a      	str	r2, [r3, #24]
  }
}
 8009dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ddc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 80b5 	beq.w	8009f50 <UART_RxISR_8BIT_FIFOEN+0x19c>
 8009de6:	0685      	lsls	r5, r0, #26
 8009de8:	d57b      	bpl.n	8009ee2 <UART_RxISR_8BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dea:	f8df a170 	ldr.w	sl, [pc, #368]	; 8009f5c <UART_RxISR_8BIT_FIFOEN+0x1a8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dee:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009df2:	f006 0601 	and.w	r6, r6, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009df6:	fa5f fb8b 	uxtb.w	fp, fp
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dfa:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dfe:	f04f 0904 	mov.w	r9, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e02:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e06:	ea0b 0202 	and.w	r2, fp, r2
 8009e0a:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 8009e0c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e10:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr++;
 8009e12:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8009e14:	3901      	subs	r1, #1
 8009e16:	b289      	uxth	r1, r1
 8009e18:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e1c:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 8009e1e:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e20:	0768      	lsls	r0, r5, #29
      huart->pRxBuffPtr++;
 8009e22:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e24:	d01a      	beq.n	8009e5c <UART_RxISR_8BIT_FIFOEN+0xa8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e26:	07e9      	lsls	r1, r5, #31
 8009e28:	d508      	bpl.n	8009e3c <UART_RxISR_8BIT_FIFOEN+0x88>
 8009e2a:	b13f      	cbz	r7, 8009e3c <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e30:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e34:	f042 0201 	orr.w	r2, r2, #1
 8009e38:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e3c:	07aa      	lsls	r2, r5, #30
 8009e3e:	d515      	bpl.n	8009e6c <UART_RxISR_8BIT_FIFOEN+0xb8>
 8009e40:	b14e      	cbz	r6, 8009e56 <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e42:	2202      	movs	r2, #2
 8009e44:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e46:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e4a:	0768      	lsls	r0, r5, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e4c:	f042 0204 	orr.w	r2, r2, #4
 8009e50:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e54:	d40e      	bmi.n	8009e74 <UART_RxISR_8BIT_FIFOEN+0xc0>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e56:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e5a:	b9bb      	cbnz	r3, 8009e8c <UART_RxISR_8BIT_FIFOEN+0xd8>
      if (huart->RxXferCount == 0U)
 8009e5c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	b1eb      	cbz	r3, 8009ea0 <UART_RxISR_8BIT_FIFOEN+0xec>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e64:	06ab      	lsls	r3, r5, #26
 8009e66:	d53c      	bpl.n	8009ee2 <UART_RxISR_8BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	e7ca      	b.n	8009e02 <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e6c:	0769      	lsls	r1, r5, #29
 8009e6e:	d5f2      	bpl.n	8009e56 <UART_RxISR_8BIT_FIFOEN+0xa2>
 8009e70:	2e00      	cmp	r6, #0
 8009e72:	d0f0      	beq.n	8009e56 <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e74:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e78:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e7c:	f043 0302 	orr.w	r3, r3, #2
 8009e80:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0e7      	beq.n	8009e5c <UART_RxISR_8BIT_FIFOEN+0xa8>
          HAL_UART_ErrorCallback(huart);
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f7ff fce7 	bl	8009860 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e92:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8009e96:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e1      	bne.n	8009e64 <UART_RxISR_8BIT_FIFOEN+0xb0>
 8009ea0:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	e843 2100 	strex	r1, r2, [r3]
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	d1f7      	bne.n	8009ea2 <UART_RxISR_8BIT_FIFOEN+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb2:	f103 0208 	add.w	r2, r3, #8
 8009eb6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eba:	ea02 020a 	and.w	r2, r2, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	f103 0008 	add.w	r0, r3, #8
 8009ec2:	e840 2100 	strex	r1, r2, [r0]
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	d1f3      	bne.n	8009eb2 <UART_RxISR_8BIT_FIFOEN+0xfe>
        huart->RxState = HAL_UART_STATE_READY;
 8009eca:	2220      	movs	r2, #32
 8009ecc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009ed2:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed4:	2a01      	cmp	r2, #1
 8009ed6:	d027      	beq.n	8009f28 <UART_RxISR_8BIT_FIFOEN+0x174>
          HAL_UART_RxCpltCallback(huart);
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f7f9 ff57 	bl	8003d8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ede:	06ab      	lsls	r3, r5, #26
 8009ee0:	d4c2      	bmi.n	8009e68 <UART_RxISR_8BIT_FIFOEN+0xb4>
    rxdatacount = huart->RxXferCount;
 8009ee2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009ee6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f43f af75 	beq.w	8009dd8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009eee:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	f67f af70 	bls.w	8009dd8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009ef8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	f103 0208 	add.w	r2, r3, #8
 8009efe:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f02:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	f103 0008 	add.w	r0, r3, #8
 8009f0a:	e840 2100 	strex	r1, r2, [r0]
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d1f3      	bne.n	8009efa <UART_RxISR_8BIT_FIFOEN+0x146>
      huart->RxISR = UART_RxISR_8BIT;
 8009f12:	4a11      	ldr	r2, [pc, #68]	; (8009f58 <UART_RxISR_8BIT_FIFOEN+0x1a4>)
 8009f14:	6722      	str	r2, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f1a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	e843 2100 	strex	r1, r2, [r3]
 8009f22:	2900      	cmp	r1, #0
 8009f24:	d1f7      	bne.n	8009f16 <UART_RxISR_8BIT_FIFOEN+0x162>
 8009f26:	e757      	b.n	8009dd8 <UART_RxISR_8BIT_FIFOEN+0x24>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f28:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f2e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	e843 2100 	strex	r1, r2, [r3]
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d1f7      	bne.n	8009f2a <UART_RxISR_8BIT_FIFOEN+0x176>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f3a:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f3c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f40:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f42:	bf44      	itt	mi
 8009f44:	2210      	movmi	r2, #16
 8009f46:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff fcff 	bl	800994c <HAL_UARTEx_RxEventCallback>
 8009f4e:	e789      	b.n	8009e64 <UART_RxISR_8BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 8009f50:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f54:	e740      	b.n	8009dd8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009f56:	bf00      	nop
 8009f58:	08009d75 	.word	0x08009d75
 8009f5c:	effffffe 	.word	0xeffffffe

08009f60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f64:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8009f66:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f6a:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f6c:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f6e:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f70:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009f74:	2a22      	cmp	r2, #34	; 0x22
 8009f76:	d005      	beq.n	8009f84 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	f042 0208 	orr.w	r2, r2, #8
 8009f7e:	619a      	str	r2, [r3, #24]
  }
}
 8009f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f84:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8009f88:	4683      	mov	fp, r0
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	f000 80b9 	beq.w	800a102 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8009f90:	068c      	lsls	r4, r1, #26
 8009f92:	d57c      	bpl.n	800a08e <UART_RxISR_16BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f94:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a10c <UART_RxISR_16BIT_FIFOEN+0x1ac>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f98:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f9c:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa0:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fa2:	f04f 0804 	mov.w	r8, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8009fa8:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
 8009fac:	ea0a 0202 	and.w	r2, sl, r2
 8009fb0:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 8009fb4:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8009fb8:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
 8009fbc:	3a01      	subs	r2, #1
 8009fbe:	b292      	uxth	r2, r2
 8009fc0:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009fc4:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009fc6:	0760      	lsls	r0, r4, #29
 8009fc8:	d01a      	beq.n	800a000 <UART_RxISR_16BIT_FIFOEN+0xa0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fca:	07e1      	lsls	r1, r4, #31
 8009fcc:	d508      	bpl.n	8009fe0 <UART_RxISR_16BIT_FIFOEN+0x80>
 8009fce:	b13e      	cbz	r6, 8009fe0 <UART_RxISR_16BIT_FIFOEN+0x80>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fd4:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 8009fd8:	f042 0201 	orr.w	r2, r2, #1
 8009fdc:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fe0:	07a2      	lsls	r2, r4, #30
 8009fe2:	d516      	bpl.n	800a012 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8009fe4:	b14d      	cbz	r5, 8009ffa <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fea:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fee:	0760      	lsls	r0, r4, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ff0:	f042 0204 	orr.w	r2, r2, #4
 8009ff4:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ff8:	d40f      	bmi.n	800a01a <UART_RxISR_16BIT_FIFOEN+0xba>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ffa:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8009ffe:	b9c3      	cbnz	r3, 800a032 <UART_RxISR_16BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800a000:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800a004:	b29b      	uxth	r3, r3
 800a006:	b1f3      	cbz	r3, 800a046 <UART_RxISR_16BIT_FIFOEN+0xe6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a008:	06a3      	lsls	r3, r4, #26
 800a00a:	d540      	bpl.n	800a08e <UART_RxISR_16BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a00c:	f8db 3000 	ldr.w	r3, [fp]
 800a010:	e7c9      	b.n	8009fa6 <UART_RxISR_16BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a012:	0761      	lsls	r1, r4, #29
 800a014:	d5f1      	bpl.n	8009ffa <UART_RxISR_16BIT_FIFOEN+0x9a>
 800a016:	2d00      	cmp	r5, #0
 800a018:	d0ef      	beq.n	8009ffa <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a01a:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a01e:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800a022:	f043 0302 	orr.w	r3, r3, #2
 800a026:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a02a:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0e6      	beq.n	800a000 <UART_RxISR_16BIT_FIFOEN+0xa0>
          HAL_UART_ErrorCallback(huart);
 800a032:	4658      	mov	r0, fp
 800a034:	f7ff fc14 	bl	8009860 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800a03c:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e0      	bne.n	800a008 <UART_RxISR_16BIT_FIFOEN+0xa8>
 800a046:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a04e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	e843 2100 	strex	r1, r2, [r3]
 800a056:	2900      	cmp	r1, #0
 800a058:	d1f7      	bne.n	800a04a <UART_RxISR_16BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05a:	f103 0208 	add.w	r2, r3, #8
 800a05e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a062:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	f103 0008 	add.w	r0, r3, #8
 800a06a:	e840 2100 	strex	r1, r2, [r0]
 800a06e:	2900      	cmp	r1, #0
 800a070:	d1f3      	bne.n	800a05a <UART_RxISR_16BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 800a072:	2220      	movs	r2, #32
 800a074:	f8cb 2088 	str.w	r2, [fp, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a078:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
        huart->RxISR = NULL;
 800a07c:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a080:	2a01      	cmp	r2, #1
 800a082:	d029      	beq.n	800a0d8 <UART_RxISR_16BIT_FIFOEN+0x178>
          HAL_UART_RxCpltCallback(huart);
 800a084:	4658      	mov	r0, fp
 800a086:	f7f9 fe81 	bl	8003d8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a08a:	06a3      	lsls	r3, r4, #26
 800a08c:	d4be      	bmi.n	800a00c <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 800a08e:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800a092:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a094:	2b00      	cmp	r3, #0
 800a096:	f43f af73 	beq.w	8009f80 <UART_RxISR_16BIT_FIFOEN+0x20>
 800a09a:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	f67f af6e 	bls.w	8009f80 <UART_RxISR_16BIT_FIFOEN+0x20>
 800a0a4:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	f103 0208 	add.w	r2, r3, #8
 800a0ac:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	f103 0008 	add.w	r0, r3, #8
 800a0b8:	e840 2100 	strex	r1, r2, [r0]
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	d1f3      	bne.n	800a0a8 <UART_RxISR_16BIT_FIFOEN+0x148>
      huart->RxISR = UART_RxISR_16BIT;
 800a0c0:	4a11      	ldr	r2, [pc, #68]	; (800a108 <UART_RxISR_16BIT_FIFOEN+0x1a8>)
 800a0c2:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0ca:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	e843 2100 	strex	r1, r2, [r3]
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	d1f7      	bne.n	800a0c6 <UART_RxISR_16BIT_FIFOEN+0x166>
 800a0d6:	e753      	b.n	8009f80 <UART_RxISR_16BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d8:	f8cb 106c 	str.w	r1, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	e843 2100 	strex	r1, r2, [r3]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d1f7      	bne.n	800a0dc <UART_RxISR_16BIT_FIFOEN+0x17c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0ec:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0ee:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0f2:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0f4:	bf44      	itt	mi
 800a0f6:	2210      	movmi	r2, #16
 800a0f8:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0fa:	4658      	mov	r0, fp
 800a0fc:	f7ff fc26 	bl	800994c <HAL_UARTEx_RxEventCallback>
 800a100:	e782      	b.n	800a008 <UART_RxISR_16BIT_FIFOEN+0xa8>
    rxdatacount = huart->RxXferCount;
 800a102:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a106:	e73b      	b.n	8009f80 <UART_RxISR_16BIT_FIFOEN+0x20>
 800a108:	08009d29 	.word	0x08009d29
 800a10c:	effffffe 	.word	0xeffffffe

0800a110 <UART_SetConfig>:
{
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a114:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a116:	6882      	ldr	r2, [r0, #8]
 800a118:	6900      	ldr	r0, [r0, #16]
 800a11a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a11c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a11e:	4302      	orrs	r2, r0
 800a120:	430a      	orrs	r2, r1
 800a122:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a124:	49b2      	ldr	r1, [pc, #712]	; (800a3f0 <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a126:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a128:	4029      	ands	r1, r5
 800a12a:	430a      	orrs	r2, r1
 800a12c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	68e1      	ldr	r1, [r4, #12]
 800a132:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a136:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a138:	49ae      	ldr	r1, [pc, #696]	; (800a3f4 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a13a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a13c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a13e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a140:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a142:	f000 8081 	beq.w	800a248 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 800a146:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a148:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a14c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800a150:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a152:	430a      	orrs	r2, r1
 800a154:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a158:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a15a:	f022 020f 	bic.w	r2, r2, #15
 800a15e:	430a      	orrs	r2, r1
 800a160:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a162:	4aa5      	ldr	r2, [pc, #660]	; (800a3f8 <UART_SetConfig+0x2e8>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d027      	beq.n	800a1b8 <UART_SetConfig+0xa8>
 800a168:	4aa4      	ldr	r2, [pc, #656]	; (800a3fc <UART_SetConfig+0x2ec>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d04b      	beq.n	800a206 <UART_SetConfig+0xf6>
 800a16e:	4aa4      	ldr	r2, [pc, #656]	; (800a400 <UART_SetConfig+0x2f0>)
 800a170:	4293      	cmp	r3, r2
 800a172:	f000 8111 	beq.w	800a398 <UART_SetConfig+0x288>
 800a176:	4aa3      	ldr	r2, [pc, #652]	; (800a404 <UART_SetConfig+0x2f4>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	f000 80b9 	beq.w	800a2f0 <UART_SetConfig+0x1e0>
 800a17e:	4aa2      	ldr	r2, [pc, #648]	; (800a408 <UART_SetConfig+0x2f8>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d111      	bne.n	800a1a8 <UART_SetConfig+0x98>
 800a184:	4ba1      	ldr	r3, [pc, #644]	; (800a40c <UART_SetConfig+0x2fc>)
 800a186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a18a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a18e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a192:	f000 8126 	beq.w	800a3e2 <UART_SetConfig+0x2d2>
 800a196:	f200 80d5 	bhi.w	800a344 <UART_SetConfig+0x234>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80d9 	beq.w	800a352 <UART_SetConfig+0x242>
 800a1a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a4:	f000 80b0 	beq.w	800a308 <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 800a1a8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800a1aa:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800a1ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800a1b0:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800a1b4:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1b8:	4b94      	ldr	r3, [pc, #592]	; (800a40c <UART_SetConfig+0x2fc>)
 800a1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	f240 808d 	bls.w	800a2e4 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a1ce:	f000 8103 	beq.w	800a3d8 <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1d2:	f7fd ff71 	bl	80080b8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f000 80dc 	beq.w	800a394 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a1de:	6862      	ldr	r2, [r4, #4]
 800a1e0:	4b8b      	ldr	r3, [pc, #556]	; (800a410 <UART_SetConfig+0x300>)
 800a1e2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a1e6:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ea:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a1f2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f6:	f1a3 0210 	sub.w	r2, r3, #16
 800a1fa:	428a      	cmp	r2, r1
 800a1fc:	d8d4      	bhi.n	800a1a8 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	2000      	movs	r0, #0
 800a202:	60d3      	str	r3, [r2, #12]
 800a204:	e7d1      	b.n	800a1aa <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a206:	4b81      	ldr	r3, [pc, #516]	; (800a40c <UART_SetConfig+0x2fc>)
 800a208:	4a82      	ldr	r2, [pc, #520]	; (800a414 <UART_SetConfig+0x304>)
 800a20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20e:	f003 030c 	and.w	r3, r3, #12
 800a212:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a214:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a218:	d07c      	beq.n	800a314 <UART_SetConfig+0x204>
    switch (clocksource)
 800a21a:	2b08      	cmp	r3, #8
 800a21c:	d8c4      	bhi.n	800a1a8 <UART_SetConfig+0x98>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <UART_SetConfig+0x114>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a34d 	.word	0x0800a34d
 800a228:	0800a1d3 	.word	0x0800a1d3
 800a22c:	0800a3cf 	.word	0x0800a3cf
 800a230:	0800a1a9 	.word	0x0800a1a9
 800a234:	0800a30f 	.word	0x0800a30f
 800a238:	0800a1a9 	.word	0x0800a1a9
 800a23c:	0800a1a9 	.word	0x0800a1a9
 800a240:	0800a1a9 	.word	0x0800a1a9
 800a244:	0800a3bf 	.word	0x0800a3bf
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a248:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a24c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a250:	4311      	orrs	r1, r2
 800a252:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a256:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a258:	486c      	ldr	r0, [pc, #432]	; (800a40c <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a25a:	f022 020f 	bic.w	r2, r2, #15
 800a25e:	430a      	orrs	r2, r1
 800a260:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a262:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a266:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a26a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a26e:	f000 80ac 	beq.w	800a3ca <UART_SetConfig+0x2ba>
 800a272:	d80b      	bhi.n	800a28c <UART_SetConfig+0x17c>
 800a274:	2b00      	cmp	r3, #0
 800a276:	d038      	beq.n	800a2ea <UART_SetConfig+0x1da>
 800a278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a27c:	d194      	bne.n	800a1a8 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 800a27e:	f7fd fdcd 	bl	8007e1c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800a282:	2800      	cmp	r0, #0
 800a284:	f000 8086 	beq.w	800a394 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a288:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a28a:	e004      	b.n	800a296 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a28c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a290:	d18a      	bne.n	800a1a8 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 800a292:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a296:	4b5e      	ldr	r3, [pc, #376]	; (800a410 <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a298:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a29a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800a29e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2a2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	f63f af7e 	bhi.w	800a1a8 <UART_SetConfig+0x98>
 800a2ac:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a2b0:	f63f af7a 	bhi.w	800a1a8 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	f7f6 fd0e 	bl	8000cd8 <__aeabi_uldivmod>
 800a2bc:	086a      	lsrs	r2, r5, #1
 800a2be:	0203      	lsls	r3, r0, #8
 800a2c0:	0209      	lsls	r1, r1, #8
 800a2c2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a2c6:	1898      	adds	r0, r3, r2
 800a2c8:	f141 0100 	adc.w	r1, r1, #0
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f7f6 fd02 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2d4:	4a50      	ldr	r2, [pc, #320]	; (800a418 <UART_SetConfig+0x308>)
 800a2d6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800a2da:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2dc:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2de:	f63f af63 	bhi.w	800a1a8 <UART_SetConfig+0x98>
 800a2e2:	e78c      	b.n	800a1fe <UART_SetConfig+0xee>
 800a2e4:	4a4d      	ldr	r2, [pc, #308]	; (800a41c <UART_SetConfig+0x30c>)
 800a2e6:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2e8:	e794      	b.n	800a214 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ea:	f7fd fed3 	bl	8008094 <HAL_RCC_GetPCLK1Freq>
        break;
 800a2ee:	e7c8      	b.n	800a282 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2f0:	4b46      	ldr	r3, [pc, #280]	; (800a40c <UART_SetConfig+0x2fc>)
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2fa:	2b80      	cmp	r3, #128	; 0x80
 800a2fc:	d071      	beq.n	800a3e2 <UART_SetConfig+0x2d2>
 800a2fe:	d861      	bhi.n	800a3c4 <UART_SetConfig+0x2b4>
 800a300:	b33b      	cbz	r3, 800a352 <UART_SetConfig+0x242>
 800a302:	2b40      	cmp	r3, #64	; 0x40
 800a304:	f47f af50 	bne.w	800a1a8 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a308:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a30c:	d061      	beq.n	800a3d2 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a30e:	f7fd fd85 	bl	8007e1c <HAL_RCC_GetSysClockFreq>
        break;
 800a312:	e760      	b.n	800a1d6 <UART_SetConfig+0xc6>
    switch (clocksource)
 800a314:	2b08      	cmp	r3, #8
 800a316:	f63f af47 	bhi.w	800a1a8 <UART_SetConfig+0x98>
 800a31a:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <UART_SetConfig+0x210>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a359 	.word	0x0800a359
 800a324:	0800a3d9 	.word	0x0800a3d9
 800a328:	0800a3df 	.word	0x0800a3df
 800a32c:	0800a1a9 	.word	0x0800a1a9
 800a330:	0800a3d3 	.word	0x0800a3d3
 800a334:	0800a1a9 	.word	0x0800a1a9
 800a338:	0800a1a9 	.word	0x0800a1a9
 800a33c:	0800a1a9 	.word	0x0800a1a9
 800a340:	0800a361 	.word	0x0800a361
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a348:	d036      	beq.n	800a3b8 <UART_SetConfig+0x2a8>
 800a34a:	e72d      	b.n	800a1a8 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a34c:	f7fd fea2 	bl	8008094 <HAL_RCC_GetPCLK1Freq>
        break;
 800a350:	e741      	b.n	800a1d6 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a352:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a356:	d1f9      	bne.n	800a34c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a358:	f7fd fe9c 	bl	8008094 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a35c:	b1d0      	cbz	r0, 800a394 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a360:	6862      	ldr	r2, [r4, #4]
 800a362:	4b2b      	ldr	r3, [pc, #172]	; (800a410 <UART_SetConfig+0x300>)
 800a364:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800a368:	fbb0 f0f1 	udiv	r0, r0, r1
 800a36c:	0853      	lsrs	r3, r2, #1
 800a36e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a372:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a376:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a37a:	f1a3 0210 	sub.w	r2, r3, #16
 800a37e:	428a      	cmp	r2, r1
 800a380:	f63f af12 	bhi.w	800a1a8 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a384:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800a388:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a38a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a38c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a390:	4313      	orrs	r3, r2
 800a392:	60cb      	str	r3, [r1, #12]
 800a394:	2000      	movs	r0, #0
 800a396:	e708      	b.n	800a1aa <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a398:	4b1c      	ldr	r3, [pc, #112]	; (800a40c <UART_SetConfig+0x2fc>)
 800a39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3a2:	2b20      	cmp	r3, #32
 800a3a4:	d01d      	beq.n	800a3e2 <UART_SetConfig+0x2d2>
 800a3a6:	d804      	bhi.n	800a3b2 <UART_SetConfig+0x2a2>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d0d2      	beq.n	800a352 <UART_SetConfig+0x242>
 800a3ac:	2b10      	cmp	r3, #16
 800a3ae:	d0ab      	beq.n	800a308 <UART_SetConfig+0x1f8>
 800a3b0:	e6fa      	b.n	800a1a8 <UART_SetConfig+0x98>
 800a3b2:	2b30      	cmp	r3, #48	; 0x30
 800a3b4:	f47f aef8 	bne.w	800a1a8 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a3bc:	d0d0      	beq.n	800a360 <UART_SetConfig+0x250>
    switch (clocksource)
 800a3be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a3c2:	e70c      	b.n	800a1de <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3c4:	2bc0      	cmp	r3, #192	; 0xc0
 800a3c6:	d0f7      	beq.n	800a3b8 <UART_SetConfig+0x2a8>
 800a3c8:	e6ee      	b.n	800a1a8 <UART_SetConfig+0x98>
 800a3ca:	4815      	ldr	r0, [pc, #84]	; (800a420 <UART_SetConfig+0x310>)
 800a3cc:	e763      	b.n	800a296 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 800a3ce:	4814      	ldr	r0, [pc, #80]	; (800a420 <UART_SetConfig+0x310>)
 800a3d0:	e705      	b.n	800a1de <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800a3d2:	f7fd fd23 	bl	8007e1c <HAL_RCC_GetSysClockFreq>
        break;
 800a3d6:	e7c1      	b.n	800a35c <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3d8:	f7fd fe6e 	bl	80080b8 <HAL_RCC_GetPCLK2Freq>
        break;
 800a3dc:	e7be      	b.n	800a35c <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 800a3de:	4810      	ldr	r0, [pc, #64]	; (800a420 <UART_SetConfig+0x310>)
 800a3e0:	e7be      	b.n	800a360 <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800a3e6:	480e      	ldr	r0, [pc, #56]	; (800a420 <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3e8:	f47f aef9 	bne.w	800a1de <UART_SetConfig+0xce>
 800a3ec:	e7b8      	b.n	800a360 <UART_SetConfig+0x250>
 800a3ee:	bf00      	nop
 800a3f0:	cfff69f3 	.word	0xcfff69f3
 800a3f4:	40008000 	.word	0x40008000
 800a3f8:	40013800 	.word	0x40013800
 800a3fc:	40004400 	.word	0x40004400
 800a400:	40004800 	.word	0x40004800
 800a404:	40004c00 	.word	0x40004c00
 800a408:	40005000 	.word	0x40005000
 800a40c:	40021000 	.word	0x40021000
 800a410:	0800f1f0 	.word	0x0800f1f0
 800a414:	0800f1e0 	.word	0x0800f1e0
 800a418:	000ffcff 	.word	0x000ffcff
 800a41c:	0800f1dc 	.word	0x0800f1dc
 800a420:	00f42400 	.word	0x00f42400

0800a424 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a424:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a426:	07da      	lsls	r2, r3, #31
{
 800a428:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a42a:	d506      	bpl.n	800a43a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a42c:	6801      	ldr	r1, [r0, #0]
 800a42e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a430:	684a      	ldr	r2, [r1, #4]
 800a432:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a436:	4322      	orrs	r2, r4
 800a438:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a43a:	079c      	lsls	r4, r3, #30
 800a43c:	d506      	bpl.n	800a44c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a43e:	6801      	ldr	r1, [r0, #0]
 800a440:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a442:	684a      	ldr	r2, [r1, #4]
 800a444:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a448:	4322      	orrs	r2, r4
 800a44a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a44c:	0759      	lsls	r1, r3, #29
 800a44e:	d506      	bpl.n	800a45e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a450:	6801      	ldr	r1, [r0, #0]
 800a452:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a454:	684a      	ldr	r2, [r1, #4]
 800a456:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a45a:	4322      	orrs	r2, r4
 800a45c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a45e:	071a      	lsls	r2, r3, #28
 800a460:	d506      	bpl.n	800a470 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a462:	6801      	ldr	r1, [r0, #0]
 800a464:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a466:	684a      	ldr	r2, [r1, #4]
 800a468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a46c:	4322      	orrs	r2, r4
 800a46e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a470:	06dc      	lsls	r4, r3, #27
 800a472:	d506      	bpl.n	800a482 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a474:	6801      	ldr	r1, [r0, #0]
 800a476:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a478:	688a      	ldr	r2, [r1, #8]
 800a47a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a47e:	4322      	orrs	r2, r4
 800a480:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a482:	0699      	lsls	r1, r3, #26
 800a484:	d506      	bpl.n	800a494 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a486:	6801      	ldr	r1, [r0, #0]
 800a488:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a48a:	688a      	ldr	r2, [r1, #8]
 800a48c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a490:	4322      	orrs	r2, r4
 800a492:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a494:	065a      	lsls	r2, r3, #25
 800a496:	d509      	bpl.n	800a4ac <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a498:	6801      	ldr	r1, [r0, #0]
 800a49a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a49c:	684a      	ldr	r2, [r1, #4]
 800a49e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a4a2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4aa:	d00b      	beq.n	800a4c4 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ac:	061b      	lsls	r3, r3, #24
 800a4ae:	d506      	bpl.n	800a4be <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4b0:	6802      	ldr	r2, [r0, #0]
 800a4b2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a4b4:	6853      	ldr	r3, [r2, #4]
 800a4b6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	6053      	str	r3, [r2, #4]
}
 800a4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4c2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4c4:	684a      	ldr	r2, [r1, #4]
 800a4c6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800a4c8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800a4cc:	4322      	orrs	r2, r4
 800a4ce:	604a      	str	r2, [r1, #4]
 800a4d0:	e7ec      	b.n	800a4ac <UART_AdvFeatureConfig+0x88>
 800a4d2:	bf00      	nop

0800a4d4 <UART_WaitOnFlagUntilTimeout>:
{
 800a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4dc:	6804      	ldr	r4, [r0, #0]
{
 800a4de:	4607      	mov	r7, r0
 800a4e0:	460e      	mov	r6, r1
 800a4e2:	4615      	mov	r5, r2
 800a4e4:	4699      	mov	r9, r3
 800a4e6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a4ea:	d10a      	bne.n	800a502 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ec:	69e3      	ldr	r3, [r4, #28]
 800a4ee:	ea36 0303 	bics.w	r3, r6, r3
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2301      	moveq	r3, #1
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	429d      	cmp	r5, r3
 800a4fa:	d0f7      	beq.n	800a4ec <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800a4fc:	2000      	movs	r0, #0
}
 800a4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a502:	69e2      	ldr	r2, [r4, #28]
 800a504:	ea36 0202 	bics.w	r2, r6, r2
 800a508:	bf0c      	ite	eq
 800a50a:	2301      	moveq	r3, #1
 800a50c:	2300      	movne	r3, #0
 800a50e:	42ab      	cmp	r3, r5
 800a510:	d1f4      	bne.n	800a4fc <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a512:	f7f8 f8dd 	bl	80026d0 <HAL_GetTick>
 800a516:	eba0 0009 	sub.w	r0, r0, r9
 800a51a:	4540      	cmp	r0, r8
 800a51c:	d833      	bhi.n	800a586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a51e:	f1b8 0f00 	cmp.w	r8, #0
 800a522:	d030      	beq.n	800a586 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a524:	683c      	ldr	r4, [r7, #0]
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	0758      	lsls	r0, r3, #29
 800a52a:	4622      	mov	r2, r4
 800a52c:	d5db      	bpl.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a52e:	69e3      	ldr	r3, [r4, #28]
 800a530:	0519      	lsls	r1, r3, #20
 800a532:	d5d8      	bpl.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a538:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a53e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	e844 3100 	strex	r1, r3, [r4]
 800a546:	b139      	cbz	r1, 800a558 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	e852 3f00 	ldrex	r3, [r2]
 800a54c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	e842 3100 	strex	r1, r3, [r2]
 800a554:	2900      	cmp	r1, #0
 800a556:	d1f7      	bne.n	800a548 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	f102 0308 	add.w	r3, r2, #8
 800a55c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a560:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a564:	f102 0008 	add.w	r0, r2, #8
 800a568:	e840 3100 	strex	r1, r3, [r0]
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d1f3      	bne.n	800a558 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800a570:	2320      	movs	r3, #32
 800a572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800a576:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a57a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800a57e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a580:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800a584:	e7bb      	b.n	800a4fe <UART_WaitOnFlagUntilTimeout+0x2a>
 800a586:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a58c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	e842 3100 	strex	r1, r3, [r2]
 800a594:	2900      	cmp	r1, #0
 800a596:	d1f7      	bne.n	800a588 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a598:	f102 0308 	add.w	r3, r2, #8
 800a59c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	f102 0008 	add.w	r0, r2, #8
 800a5a8:	e840 3100 	strex	r1, r3, [r0]
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	d1f3      	bne.n	800a598 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800a5b6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a5ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800a5be:	2003      	movs	r0, #3
 800a5c0:	e79d      	b.n	800a4fe <UART_WaitOnFlagUntilTimeout+0x2a>
 800a5c2:	bf00      	nop

0800a5c4 <HAL_UART_Transmit>:
{
 800a5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5c8:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ca:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800a5ce:	2820      	cmp	r0, #32
{
 800a5d0:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800a5d2:	f040 8090 	bne.w	800a6f6 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 800a5d6:	4689      	mov	r9, r1
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	d048      	beq.n	800a66e <HAL_UART_Transmit+0xaa>
 800a5dc:	4614      	mov	r4, r2
 800a5de:	2a00      	cmp	r2, #0
 800a5e0:	d045      	beq.n	800a66e <HAL_UART_Transmit+0xaa>
 800a5e2:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800a5e4:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	f000 8084 	beq.w	800a6f6 <HAL_UART_Transmit+0x132>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f4:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5f8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5fa:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5fe:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 800a602:	f7f8 f865 	bl	80026d0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a606:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800a608:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a60c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800a610:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 800a614:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a616:	d072      	beq.n	800a6fe <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 800a618:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 800a61c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800a61e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800a620:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800a624:	b1b3      	cbz	r3, 800a654 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a626:	682c      	ldr	r4, [r5, #0]
 800a628:	1c71      	adds	r1, r6, #1
 800a62a:	d124      	bne.n	800a676 <HAL_UART_Transmit+0xb2>
 800a62c:	69e2      	ldr	r2, [r4, #28]
 800a62e:	0612      	lsls	r2, r2, #24
 800a630:	d5fc      	bpl.n	800a62c <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 800a632:	f1b9 0f00 	cmp.w	r9, #0
 800a636:	d059      	beq.n	800a6ec <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a638:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a63c:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800a63e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800a642:	3b01      	subs	r3, #1
 800a644:	b29b      	uxth	r3, r3
 800a646:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a64a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800a64e:	b29b      	uxth	r3, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e9      	bne.n	800a628 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a654:	9600      	str	r6, [sp, #0]
 800a656:	463b      	mov	r3, r7
 800a658:	2200      	movs	r2, #0
 800a65a:	2140      	movs	r1, #64	; 0x40
 800a65c:	4628      	mov	r0, r5
 800a65e:	f7ff ff39 	bl	800a4d4 <UART_WaitOnFlagUntilTimeout>
 800a662:	2800      	cmp	r0, #0
 800a664:	d171      	bne.n	800a74a <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 800a666:	2320      	movs	r3, #32
 800a668:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 800a66c:	e000      	b.n	800a670 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800a66e:	2001      	movs	r0, #1
}
 800a670:	b003      	add	sp, #12
 800a672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a676:	69e3      	ldr	r3, [r4, #28]
 800a678:	061b      	lsls	r3, r3, #24
 800a67a:	d4da      	bmi.n	800a632 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a67c:	f7f8 f828 	bl	80026d0 <HAL_GetTick>
 800a680:	1bc0      	subs	r0, r0, r7
 800a682:	4286      	cmp	r6, r0
 800a684:	d341      	bcc.n	800a70a <HAL_UART_Transmit+0x146>
 800a686:	2e00      	cmp	r6, #0
 800a688:	d03f      	beq.n	800a70a <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a68a:	682c      	ldr	r4, [r5, #0]
 800a68c:	6822      	ldr	r2, [r4, #0]
 800a68e:	0752      	lsls	r2, r2, #29
 800a690:	4623      	mov	r3, r4
 800a692:	d5c9      	bpl.n	800a628 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a694:	69e2      	ldr	r2, [r4, #28]
 800a696:	0510      	lsls	r0, r2, #20
 800a698:	d5c6      	bpl.n	800a628 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a69a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a69e:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a8:	e844 2100 	strex	r1, r2, [r4]
 800a6ac:	b139      	cbz	r1, 800a6be <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	e853 2f00 	ldrex	r2, [r3]
 800a6b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b6:	e843 2100 	strex	r1, r2, [r3]
 800a6ba:	2900      	cmp	r1, #0
 800a6bc:	d1f7      	bne.n	800a6ae <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	f103 0208 	add.w	r2, r3, #8
 800a6c2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	f103 0008 	add.w	r0, r3, #8
 800a6ce:	e840 2100 	strex	r1, r2, [r0]
 800a6d2:	2900      	cmp	r1, #0
 800a6d4:	d1f3      	bne.n	800a6be <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 800a6d6:	2320      	movs	r3, #32
 800a6d8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800a6dc:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a6e0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 800a6e4:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6e6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 800a6ea:	e7c1      	b.n	800a670 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6ec:	f838 3b02 	ldrh.w	r3, [r8], #2
 800a6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f4:	e7a2      	b.n	800a63c <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 800a6f6:	2002      	movs	r0, #2
}
 800a6f8:	b003      	add	sp, #12
 800a6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6fe:	692b      	ldr	r3, [r5, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d189      	bne.n	800a618 <HAL_UART_Transmit+0x54>
 800a704:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800a706:	4699      	mov	r9, r3
 800a708:	e786      	b.n	800a618 <HAL_UART_Transmit+0x54>
 800a70a:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a714:	e843 2100 	strex	r1, r2, [r3]
 800a718:	2900      	cmp	r1, #0
 800a71a:	d1f7      	bne.n	800a70c <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	f103 0208 	add.w	r2, r3, #8
 800a720:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a724:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	f103 0008 	add.w	r0, r3, #8
 800a72c:	e840 2100 	strex	r1, r2, [r0]
 800a730:	2900      	cmp	r1, #0
 800a732:	d1f3      	bne.n	800a71c <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 800a734:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800a736:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800a738:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800a73c:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a740:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800a744:	b003      	add	sp, #12
 800a746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800a74a:	2003      	movs	r0, #3
 800a74c:	e790      	b.n	800a670 <HAL_UART_Transmit+0xac>
 800a74e:	bf00      	nop

0800a750 <HAL_UART_Init>:
  if (huart == NULL)
 800a750:	2800      	cmp	r0, #0
 800a752:	d066      	beq.n	800a822 <HAL_UART_Init+0xd2>
{
 800a754:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800a756:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800a75a:	b082      	sub	sp, #8
 800a75c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d04c      	beq.n	800a7fc <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800a762:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a764:	2324      	movs	r3, #36	; 0x24
 800a766:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a76a:	6813      	ldr	r3, [r2, #0]
 800a76c:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a770:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800a772:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a774:	f7ff fccc 	bl	800a110 <UART_SetConfig>
 800a778:	2801      	cmp	r0, #1
 800a77a:	d03c      	beq.n	800a7f6 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a77c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d135      	bne.n	800a7ee <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	6859      	ldr	r1, [r3, #4]
 800a786:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800a78a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a78c:	6899      	ldr	r1, [r3, #8]
 800a78e:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800a792:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a794:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a796:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800a798:	f041 0101 	orr.w	r1, r1, #1
 800a79c:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a79e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a7a2:	f7f7 ff95 	bl	80026d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800a7ac:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7ae:	d40e      	bmi.n	800a7ce <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	075b      	lsls	r3, r3, #29
 800a7b4:	d427      	bmi.n	800a806 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a7be:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a7c2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800a7c6:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800a7ca:	b002      	add	sp, #8
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7ff fe79 	bl	800a4d4 <UART_WaitOnFlagUntilTimeout>
 800a7e2:	b9e0      	cbnz	r0, 800a81e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	075b      	lsls	r3, r3, #29
 800a7ea:	d40c      	bmi.n	800a806 <HAL_UART_Init+0xb6>
 800a7ec:	e7e3      	b.n	800a7b6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7ff fe18 	bl	800a424 <UART_AdvFeatureConfig>
 800a7f4:	e7c5      	b.n	800a782 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800a7f6:	2001      	movs	r0, #1
}
 800a7f8:	b002      	add	sp, #8
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800a7fc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a800:	f7fb f878 	bl	80058f4 <HAL_UART_MspInit>
 800a804:	e7ad      	b.n	800a762 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a806:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	2200      	movs	r2, #0
 800a80e:	4633      	mov	r3, r6
 800a810:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a814:	4620      	mov	r0, r4
 800a816:	f7ff fe5d 	bl	800a4d4 <UART_WaitOnFlagUntilTimeout>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0cb      	beq.n	800a7b6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800a81e:	2003      	movs	r0, #3
 800a820:	e7d3      	b.n	800a7ca <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800a822:	2001      	movs	r0, #1
}
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop

0800a828 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop

0800a82c <HAL_UARTEx_RxFifoFullCallback>:
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop

0800a830 <HAL_UARTEx_TxFifoEmptyCallback>:
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop

0800a834 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a834:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d017      	beq.n	800a86c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a83c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a83e:	2324      	movs	r3, #36	; 0x24
{
 800a840:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800a842:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a846:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a848:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a84a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800a84c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a850:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800a854:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a856:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a858:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a85a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800a85e:	2220      	movs	r2, #32
 800a860:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800a864:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800a868:	4618      	mov	r0, r3
}
 800a86a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a86c:	2002      	movs	r0, #2
}
 800a86e:	4770      	bx	lr

0800a870 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a870:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a874:	2a01      	cmp	r2, #1
 800a876:	d037      	beq.n	800a8e8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800a878:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a87a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a87c:	2024      	movs	r0, #36	; 0x24
{
 800a87e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a880:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a884:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a886:	6810      	ldr	r0, [r2, #0]
 800a888:	f020 0001 	bic.w	r0, r0, #1
 800a88c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a88e:	6890      	ldr	r0, [r2, #8]
 800a890:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800a894:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a896:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a898:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a89a:	b310      	cbz	r0, 800a8e2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a89c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a89e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8a0:	4d12      	ldr	r5, [pc, #72]	; (800a8ec <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8a2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8a6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8aa:	4911      	ldr	r1, [pc, #68]	; (800a8f0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800a8ac:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8b0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8b4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8b8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8bc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8be:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8c0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8c4:	fbb1 f1f5 	udiv	r1, r1, r5
 800a8c8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a8d2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a8d6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800a8da:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a8dc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800a8e0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a8e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	e7ef      	b.n	800a8c8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a8e8:	2002      	movs	r0, #2
}
 800a8ea:	4770      	bx	lr
 800a8ec:	0800f208 	.word	0x0800f208
 800a8f0:	0800f210 	.word	0x0800f210

0800a8f4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800a8f4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a8f8:	2a01      	cmp	r2, #1
 800a8fa:	d037      	beq.n	800a96c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800a8fc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fe:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a900:	2024      	movs	r0, #36	; 0x24
{
 800a902:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a904:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a908:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a90a:	6810      	ldr	r0, [r2, #0]
 800a90c:	f020 0001 	bic.w	r0, r0, #1
 800a910:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a912:	6890      	ldr	r0, [r2, #8]
 800a914:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800a918:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a91a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a91c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a91e:	b310      	cbz	r0, 800a966 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a920:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a922:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a924:	4d12      	ldr	r5, [pc, #72]	; (800a970 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a926:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a92a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a92e:	4911      	ldr	r1, [pc, #68]	; (800a974 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a930:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a934:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a938:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a93c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a940:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a942:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a944:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a948:	fbb1 f1f5 	udiv	r1, r1, r5
 800a94c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a950:	2100      	movs	r1, #0
 800a952:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a956:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a958:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a95a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800a95e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a960:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800a964:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a966:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a968:	4608      	mov	r0, r1
 800a96a:	e7ef      	b.n	800a94c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a96c:	2002      	movs	r0, #2
}
 800a96e:	4770      	bx	lr
 800a970:	0800f208 	.word	0x0800f208
 800a974:	0800f210 	.word	0x0800f210

0800a978 <malloc>:
 800a978:	4b02      	ldr	r3, [pc, #8]	; (800a984 <malloc+0xc>)
 800a97a:	4601      	mov	r1, r0
 800a97c:	6818      	ldr	r0, [r3, #0]
 800a97e:	f000 b823 	b.w	800a9c8 <_malloc_r>
 800a982:	bf00      	nop
 800a984:	2000006c 	.word	0x2000006c

0800a988 <sbrk_aligned>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	4e0e      	ldr	r6, [pc, #56]	; (800a9c4 <sbrk_aligned+0x3c>)
 800a98c:	460c      	mov	r4, r1
 800a98e:	6831      	ldr	r1, [r6, #0]
 800a990:	4605      	mov	r5, r0
 800a992:	b911      	cbnz	r1, 800a99a <sbrk_aligned+0x12>
 800a994:	f001 f818 	bl	800b9c8 <_sbrk_r>
 800a998:	6030      	str	r0, [r6, #0]
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	f001 f813 	bl	800b9c8 <_sbrk_r>
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d00a      	beq.n	800a9bc <sbrk_aligned+0x34>
 800a9a6:	1cc4      	adds	r4, r0, #3
 800a9a8:	f024 0403 	bic.w	r4, r4, #3
 800a9ac:	42a0      	cmp	r0, r4
 800a9ae:	d007      	beq.n	800a9c0 <sbrk_aligned+0x38>
 800a9b0:	1a21      	subs	r1, r4, r0
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f001 f808 	bl	800b9c8 <_sbrk_r>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d101      	bne.n	800a9c0 <sbrk_aligned+0x38>
 800a9bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	20000f60 	.word	0x20000f60

0800a9c8 <_malloc_r>:
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	1ccd      	adds	r5, r1, #3
 800a9ce:	f025 0503 	bic.w	r5, r5, #3
 800a9d2:	3508      	adds	r5, #8
 800a9d4:	2d0c      	cmp	r5, #12
 800a9d6:	bf38      	it	cc
 800a9d8:	250c      	movcc	r5, #12
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	4607      	mov	r7, r0
 800a9de:	db01      	blt.n	800a9e4 <_malloc_r+0x1c>
 800a9e0:	42a9      	cmp	r1, r5
 800a9e2:	d905      	bls.n	800a9f0 <_malloc_r+0x28>
 800a9e4:	230c      	movs	r3, #12
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	2600      	movs	r6, #0
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aac4 <_malloc_r+0xfc>
 800a9f4:	f000 f868 	bl	800aac8 <__malloc_lock>
 800a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fc:	461c      	mov	r4, r3
 800a9fe:	bb5c      	cbnz	r4, 800aa58 <_malloc_r+0x90>
 800aa00:	4629      	mov	r1, r5
 800aa02:	4638      	mov	r0, r7
 800aa04:	f7ff ffc0 	bl	800a988 <sbrk_aligned>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	d155      	bne.n	800aaba <_malloc_r+0xf2>
 800aa0e:	f8d8 4000 	ldr.w	r4, [r8]
 800aa12:	4626      	mov	r6, r4
 800aa14:	2e00      	cmp	r6, #0
 800aa16:	d145      	bne.n	800aaa4 <_malloc_r+0xdc>
 800aa18:	2c00      	cmp	r4, #0
 800aa1a:	d048      	beq.n	800aaae <_malloc_r+0xe6>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	4631      	mov	r1, r6
 800aa20:	4638      	mov	r0, r7
 800aa22:	eb04 0903 	add.w	r9, r4, r3
 800aa26:	f000 ffcf 	bl	800b9c8 <_sbrk_r>
 800aa2a:	4581      	cmp	r9, r0
 800aa2c:	d13f      	bne.n	800aaae <_malloc_r+0xe6>
 800aa2e:	6821      	ldr	r1, [r4, #0]
 800aa30:	1a6d      	subs	r5, r5, r1
 800aa32:	4629      	mov	r1, r5
 800aa34:	4638      	mov	r0, r7
 800aa36:	f7ff ffa7 	bl	800a988 <sbrk_aligned>
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	d037      	beq.n	800aaae <_malloc_r+0xe6>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	442b      	add	r3, r5
 800aa42:	6023      	str	r3, [r4, #0]
 800aa44:	f8d8 3000 	ldr.w	r3, [r8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d038      	beq.n	800aabe <_malloc_r+0xf6>
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	42a2      	cmp	r2, r4
 800aa50:	d12b      	bne.n	800aaaa <_malloc_r+0xe2>
 800aa52:	2200      	movs	r2, #0
 800aa54:	605a      	str	r2, [r3, #4]
 800aa56:	e00f      	b.n	800aa78 <_malloc_r+0xb0>
 800aa58:	6822      	ldr	r2, [r4, #0]
 800aa5a:	1b52      	subs	r2, r2, r5
 800aa5c:	d41f      	bmi.n	800aa9e <_malloc_r+0xd6>
 800aa5e:	2a0b      	cmp	r2, #11
 800aa60:	d917      	bls.n	800aa92 <_malloc_r+0xca>
 800aa62:	1961      	adds	r1, r4, r5
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	6025      	str	r5, [r4, #0]
 800aa68:	bf18      	it	ne
 800aa6a:	6059      	strne	r1, [r3, #4]
 800aa6c:	6863      	ldr	r3, [r4, #4]
 800aa6e:	bf08      	it	eq
 800aa70:	f8c8 1000 	streq.w	r1, [r8]
 800aa74:	5162      	str	r2, [r4, r5]
 800aa76:	604b      	str	r3, [r1, #4]
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f104 060b 	add.w	r6, r4, #11
 800aa7e:	f000 f829 	bl	800aad4 <__malloc_unlock>
 800aa82:	f026 0607 	bic.w	r6, r6, #7
 800aa86:	1d23      	adds	r3, r4, #4
 800aa88:	1af2      	subs	r2, r6, r3
 800aa8a:	d0ae      	beq.n	800a9ea <_malloc_r+0x22>
 800aa8c:	1b9b      	subs	r3, r3, r6
 800aa8e:	50a3      	str	r3, [r4, r2]
 800aa90:	e7ab      	b.n	800a9ea <_malloc_r+0x22>
 800aa92:	42a3      	cmp	r3, r4
 800aa94:	6862      	ldr	r2, [r4, #4]
 800aa96:	d1dd      	bne.n	800aa54 <_malloc_r+0x8c>
 800aa98:	f8c8 2000 	str.w	r2, [r8]
 800aa9c:	e7ec      	b.n	800aa78 <_malloc_r+0xb0>
 800aa9e:	4623      	mov	r3, r4
 800aaa0:	6864      	ldr	r4, [r4, #4]
 800aaa2:	e7ac      	b.n	800a9fe <_malloc_r+0x36>
 800aaa4:	4634      	mov	r4, r6
 800aaa6:	6876      	ldr	r6, [r6, #4]
 800aaa8:	e7b4      	b.n	800aa14 <_malloc_r+0x4c>
 800aaaa:	4613      	mov	r3, r2
 800aaac:	e7cc      	b.n	800aa48 <_malloc_r+0x80>
 800aaae:	230c      	movs	r3, #12
 800aab0:	603b      	str	r3, [r7, #0]
 800aab2:	4638      	mov	r0, r7
 800aab4:	f000 f80e 	bl	800aad4 <__malloc_unlock>
 800aab8:	e797      	b.n	800a9ea <_malloc_r+0x22>
 800aaba:	6025      	str	r5, [r4, #0]
 800aabc:	e7dc      	b.n	800aa78 <_malloc_r+0xb0>
 800aabe:	605b      	str	r3, [r3, #4]
 800aac0:	deff      	udf	#255	; 0xff
 800aac2:	bf00      	nop
 800aac4:	20000f5c 	.word	0x20000f5c

0800aac8 <__malloc_lock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__malloc_lock+0x8>)
 800aaca:	f000 bfc9 	b.w	800ba60 <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	200010a4 	.word	0x200010a4

0800aad4 <__malloc_unlock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__malloc_unlock+0x8>)
 800aad6:	f000 bfc4 	b.w	800ba62 <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	200010a4 	.word	0x200010a4

0800aae0 <__cvt>:
 800aae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	ec55 4b10 	vmov	r4, r5, d0
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	460e      	mov	r6, r1
 800aaec:	4619      	mov	r1, r3
 800aaee:	462b      	mov	r3, r5
 800aaf0:	bfbb      	ittet	lt
 800aaf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aaf6:	461d      	movlt	r5, r3
 800aaf8:	2300      	movge	r3, #0
 800aafa:	232d      	movlt	r3, #45	; 0x2d
 800aafc:	700b      	strb	r3, [r1, #0]
 800aafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab04:	4691      	mov	r9, r2
 800ab06:	f023 0820 	bic.w	r8, r3, #32
 800ab0a:	bfbc      	itt	lt
 800ab0c:	4622      	movlt	r2, r4
 800ab0e:	4614      	movlt	r4, r2
 800ab10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab14:	d005      	beq.n	800ab22 <__cvt+0x42>
 800ab16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab1a:	d100      	bne.n	800ab1e <__cvt+0x3e>
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	2102      	movs	r1, #2
 800ab20:	e000      	b.n	800ab24 <__cvt+0x44>
 800ab22:	2103      	movs	r1, #3
 800ab24:	ab03      	add	r3, sp, #12
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	ab02      	add	r3, sp, #8
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	ec45 4b10 	vmov	d0, r4, r5
 800ab30:	4653      	mov	r3, sl
 800ab32:	4632      	mov	r2, r6
 800ab34:	f001 f820 	bl	800bb78 <_dtoa_r>
 800ab38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	d102      	bne.n	800ab46 <__cvt+0x66>
 800ab40:	f019 0f01 	tst.w	r9, #1
 800ab44:	d022      	beq.n	800ab8c <__cvt+0xac>
 800ab46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab4a:	eb07 0906 	add.w	r9, r7, r6
 800ab4e:	d110      	bne.n	800ab72 <__cvt+0x92>
 800ab50:	783b      	ldrb	r3, [r7, #0]
 800ab52:	2b30      	cmp	r3, #48	; 0x30
 800ab54:	d10a      	bne.n	800ab6c <__cvt+0x8c>
 800ab56:	2200      	movs	r2, #0
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	f7f5 ffdb 	bl	8000b18 <__aeabi_dcmpeq>
 800ab62:	b918      	cbnz	r0, 800ab6c <__cvt+0x8c>
 800ab64:	f1c6 0601 	rsb	r6, r6, #1
 800ab68:	f8ca 6000 	str.w	r6, [sl]
 800ab6c:	f8da 3000 	ldr.w	r3, [sl]
 800ab70:	4499      	add	r9, r3
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	4620      	mov	r0, r4
 800ab78:	4629      	mov	r1, r5
 800ab7a:	f7f5 ffcd 	bl	8000b18 <__aeabi_dcmpeq>
 800ab7e:	b108      	cbz	r0, 800ab84 <__cvt+0xa4>
 800ab80:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab84:	2230      	movs	r2, #48	; 0x30
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	454b      	cmp	r3, r9
 800ab8a:	d307      	bcc.n	800ab9c <__cvt+0xbc>
 800ab8c:	9b03      	ldr	r3, [sp, #12]
 800ab8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab90:	1bdb      	subs	r3, r3, r7
 800ab92:	4638      	mov	r0, r7
 800ab94:	6013      	str	r3, [r2, #0]
 800ab96:	b004      	add	sp, #16
 800ab98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9c:	1c59      	adds	r1, r3, #1
 800ab9e:	9103      	str	r1, [sp, #12]
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	e7f0      	b.n	800ab86 <__cvt+0xa6>

0800aba4 <__exponent>:
 800aba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba6:	4603      	mov	r3, r0
 800aba8:	2900      	cmp	r1, #0
 800abaa:	bfb8      	it	lt
 800abac:	4249      	neglt	r1, r1
 800abae:	f803 2b02 	strb.w	r2, [r3], #2
 800abb2:	bfb4      	ite	lt
 800abb4:	222d      	movlt	r2, #45	; 0x2d
 800abb6:	222b      	movge	r2, #43	; 0x2b
 800abb8:	2909      	cmp	r1, #9
 800abba:	7042      	strb	r2, [r0, #1]
 800abbc:	dd2a      	ble.n	800ac14 <__exponent+0x70>
 800abbe:	f10d 0207 	add.w	r2, sp, #7
 800abc2:	4617      	mov	r7, r2
 800abc4:	260a      	movs	r6, #10
 800abc6:	4694      	mov	ip, r2
 800abc8:	fb91 f5f6 	sdiv	r5, r1, r6
 800abcc:	fb06 1415 	mls	r4, r6, r5, r1
 800abd0:	3430      	adds	r4, #48	; 0x30
 800abd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800abd6:	460c      	mov	r4, r1
 800abd8:	2c63      	cmp	r4, #99	; 0x63
 800abda:	f102 32ff 	add.w	r2, r2, #4294967295
 800abde:	4629      	mov	r1, r5
 800abe0:	dcf1      	bgt.n	800abc6 <__exponent+0x22>
 800abe2:	3130      	adds	r1, #48	; 0x30
 800abe4:	f1ac 0402 	sub.w	r4, ip, #2
 800abe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800abec:	1c41      	adds	r1, r0, #1
 800abee:	4622      	mov	r2, r4
 800abf0:	42ba      	cmp	r2, r7
 800abf2:	d30a      	bcc.n	800ac0a <__exponent+0x66>
 800abf4:	f10d 0209 	add.w	r2, sp, #9
 800abf8:	eba2 020c 	sub.w	r2, r2, ip
 800abfc:	42bc      	cmp	r4, r7
 800abfe:	bf88      	it	hi
 800ac00:	2200      	movhi	r2, #0
 800ac02:	4413      	add	r3, r2
 800ac04:	1a18      	subs	r0, r3, r0
 800ac06:	b003      	add	sp, #12
 800ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ac12:	e7ed      	b.n	800abf0 <__exponent+0x4c>
 800ac14:	2330      	movs	r3, #48	; 0x30
 800ac16:	3130      	adds	r1, #48	; 0x30
 800ac18:	7083      	strb	r3, [r0, #2]
 800ac1a:	70c1      	strb	r1, [r0, #3]
 800ac1c:	1d03      	adds	r3, r0, #4
 800ac1e:	e7f1      	b.n	800ac04 <__exponent+0x60>

0800ac20 <_printf_float>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	ed2d 8b02 	vpush	{d8}
 800ac28:	b08d      	sub	sp, #52	; 0x34
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac30:	4616      	mov	r6, r2
 800ac32:	461f      	mov	r7, r3
 800ac34:	4605      	mov	r5, r0
 800ac36:	f000 fe8f 	bl	800b958 <_localeconv_r>
 800ac3a:	f8d0 a000 	ldr.w	sl, [r0]
 800ac3e:	4650      	mov	r0, sl
 800ac40:	f7f5 fb3e 	bl	80002c0 <strlen>
 800ac44:	2300      	movs	r3, #0
 800ac46:	930a      	str	r3, [sp, #40]	; 0x28
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	9305      	str	r3, [sp, #20]
 800ac4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac50:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac54:	3307      	adds	r3, #7
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	f103 0208 	add.w	r2, r3, #8
 800ac5e:	f8c8 2000 	str.w	r2, [r8]
 800ac62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac70:	ee08 0a10 	vmov	s16, r0
 800ac74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ac78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac7c:	4b9e      	ldr	r3, [pc, #632]	; (800aef8 <_printf_float+0x2d8>)
 800ac7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac82:	f7f5 ff7b 	bl	8000b7c <__aeabi_dcmpun>
 800ac86:	bb88      	cbnz	r0, 800acec <_printf_float+0xcc>
 800ac88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac8c:	4b9a      	ldr	r3, [pc, #616]	; (800aef8 <_printf_float+0x2d8>)
 800ac8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac92:	f7f5 ff55 	bl	8000b40 <__aeabi_dcmple>
 800ac96:	bb48      	cbnz	r0, 800acec <_printf_float+0xcc>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 ff44 	bl	8000b2c <__aeabi_dcmplt>
 800aca4:	b110      	cbz	r0, 800acac <_printf_float+0x8c>
 800aca6:	232d      	movs	r3, #45	; 0x2d
 800aca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acac:	4a93      	ldr	r2, [pc, #588]	; (800aefc <_printf_float+0x2dc>)
 800acae:	4b94      	ldr	r3, [pc, #592]	; (800af00 <_printf_float+0x2e0>)
 800acb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800acb4:	bf94      	ite	ls
 800acb6:	4690      	movls	r8, r2
 800acb8:	4698      	movhi	r8, r3
 800acba:	2303      	movs	r3, #3
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	f023 0304 	bic.w	r3, r3, #4
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	9700      	str	r7, [sp, #0]
 800accc:	4633      	mov	r3, r6
 800acce:	aa0b      	add	r2, sp, #44	; 0x2c
 800acd0:	4621      	mov	r1, r4
 800acd2:	4628      	mov	r0, r5
 800acd4:	f000 f9da 	bl	800b08c <_printf_common>
 800acd8:	3001      	adds	r0, #1
 800acda:	f040 8090 	bne.w	800adfe <_printf_float+0x1de>
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	b00d      	add	sp, #52	; 0x34
 800ace4:	ecbd 8b02 	vpop	{d8}
 800ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	4642      	mov	r2, r8
 800acee:	464b      	mov	r3, r9
 800acf0:	4640      	mov	r0, r8
 800acf2:	4649      	mov	r1, r9
 800acf4:	f7f5 ff42 	bl	8000b7c <__aeabi_dcmpun>
 800acf8:	b140      	cbz	r0, 800ad0c <_printf_float+0xec>
 800acfa:	464b      	mov	r3, r9
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	bfbc      	itt	lt
 800ad00:	232d      	movlt	r3, #45	; 0x2d
 800ad02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad06:	4a7f      	ldr	r2, [pc, #508]	; (800af04 <_printf_float+0x2e4>)
 800ad08:	4b7f      	ldr	r3, [pc, #508]	; (800af08 <_printf_float+0x2e8>)
 800ad0a:	e7d1      	b.n	800acb0 <_printf_float+0x90>
 800ad0c:	6863      	ldr	r3, [r4, #4]
 800ad0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad12:	9206      	str	r2, [sp, #24]
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	d13f      	bne.n	800ad98 <_printf_float+0x178>
 800ad18:	2306      	movs	r3, #6
 800ad1a:	6063      	str	r3, [r4, #4]
 800ad1c:	9b05      	ldr	r3, [sp, #20]
 800ad1e:	6861      	ldr	r1, [r4, #4]
 800ad20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad24:	2300      	movs	r3, #0
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	ab0a      	add	r3, sp, #40	; 0x28
 800ad2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad2e:	ab09      	add	r3, sp, #36	; 0x24
 800ad30:	ec49 8b10 	vmov	d0, r8, r9
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	6022      	str	r2, [r4, #0]
 800ad38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f7ff fecf 	bl	800aae0 <__cvt>
 800ad42:	9b06      	ldr	r3, [sp, #24]
 800ad44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad46:	2b47      	cmp	r3, #71	; 0x47
 800ad48:	4680      	mov	r8, r0
 800ad4a:	d108      	bne.n	800ad5e <_printf_float+0x13e>
 800ad4c:	1cc8      	adds	r0, r1, #3
 800ad4e:	db02      	blt.n	800ad56 <_printf_float+0x136>
 800ad50:	6863      	ldr	r3, [r4, #4]
 800ad52:	4299      	cmp	r1, r3
 800ad54:	dd41      	ble.n	800adda <_printf_float+0x1ba>
 800ad56:	f1ab 0302 	sub.w	r3, fp, #2
 800ad5a:	fa5f fb83 	uxtb.w	fp, r3
 800ad5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad62:	d820      	bhi.n	800ada6 <_printf_float+0x186>
 800ad64:	3901      	subs	r1, #1
 800ad66:	465a      	mov	r2, fp
 800ad68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad6c:	9109      	str	r1, [sp, #36]	; 0x24
 800ad6e:	f7ff ff19 	bl	800aba4 <__exponent>
 800ad72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad74:	1813      	adds	r3, r2, r0
 800ad76:	2a01      	cmp	r2, #1
 800ad78:	4681      	mov	r9, r0
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	dc02      	bgt.n	800ad84 <_printf_float+0x164>
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	07d2      	lsls	r2, r2, #31
 800ad82:	d501      	bpl.n	800ad88 <_printf_float+0x168>
 800ad84:	3301      	adds	r3, #1
 800ad86:	6123      	str	r3, [r4, #16]
 800ad88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d09c      	beq.n	800acca <_printf_float+0xaa>
 800ad90:	232d      	movs	r3, #45	; 0x2d
 800ad92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad96:	e798      	b.n	800acca <_printf_float+0xaa>
 800ad98:	9a06      	ldr	r2, [sp, #24]
 800ad9a:	2a47      	cmp	r2, #71	; 0x47
 800ad9c:	d1be      	bne.n	800ad1c <_printf_float+0xfc>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1bc      	bne.n	800ad1c <_printf_float+0xfc>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e7b9      	b.n	800ad1a <_printf_float+0xfa>
 800ada6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adaa:	d118      	bne.n	800adde <_printf_float+0x1be>
 800adac:	2900      	cmp	r1, #0
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	dd0b      	ble.n	800adca <_printf_float+0x1aa>
 800adb2:	6121      	str	r1, [r4, #16]
 800adb4:	b913      	cbnz	r3, 800adbc <_printf_float+0x19c>
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	07d0      	lsls	r0, r2, #31
 800adba:	d502      	bpl.n	800adc2 <_printf_float+0x1a2>
 800adbc:	3301      	adds	r3, #1
 800adbe:	440b      	add	r3, r1
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800adc4:	f04f 0900 	mov.w	r9, #0
 800adc8:	e7de      	b.n	800ad88 <_printf_float+0x168>
 800adca:	b913      	cbnz	r3, 800add2 <_printf_float+0x1b2>
 800adcc:	6822      	ldr	r2, [r4, #0]
 800adce:	07d2      	lsls	r2, r2, #31
 800add0:	d501      	bpl.n	800add6 <_printf_float+0x1b6>
 800add2:	3302      	adds	r3, #2
 800add4:	e7f4      	b.n	800adc0 <_printf_float+0x1a0>
 800add6:	2301      	movs	r3, #1
 800add8:	e7f2      	b.n	800adc0 <_printf_float+0x1a0>
 800adda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade0:	4299      	cmp	r1, r3
 800ade2:	db05      	blt.n	800adf0 <_printf_float+0x1d0>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	6121      	str	r1, [r4, #16]
 800ade8:	07d8      	lsls	r0, r3, #31
 800adea:	d5ea      	bpl.n	800adc2 <_printf_float+0x1a2>
 800adec:	1c4b      	adds	r3, r1, #1
 800adee:	e7e7      	b.n	800adc0 <_printf_float+0x1a0>
 800adf0:	2900      	cmp	r1, #0
 800adf2:	bfd4      	ite	le
 800adf4:	f1c1 0202 	rsble	r2, r1, #2
 800adf8:	2201      	movgt	r2, #1
 800adfa:	4413      	add	r3, r2
 800adfc:	e7e0      	b.n	800adc0 <_printf_float+0x1a0>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	055a      	lsls	r2, r3, #21
 800ae02:	d407      	bmi.n	800ae14 <_printf_float+0x1f4>
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	4642      	mov	r2, r8
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	47b8      	blx	r7
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d12c      	bne.n	800ae6c <_printf_float+0x24c>
 800ae12:	e764      	b.n	800acde <_printf_float+0xbe>
 800ae14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae18:	f240 80e0 	bls.w	800afdc <_printf_float+0x3bc>
 800ae1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae20:	2200      	movs	r2, #0
 800ae22:	2300      	movs	r3, #0
 800ae24:	f7f5 fe78 	bl	8000b18 <__aeabi_dcmpeq>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d034      	beq.n	800ae96 <_printf_float+0x276>
 800ae2c:	4a37      	ldr	r2, [pc, #220]	; (800af0c <_printf_float+0x2ec>)
 800ae2e:	2301      	movs	r3, #1
 800ae30:	4631      	mov	r1, r6
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f af51 	beq.w	800acde <_printf_float+0xbe>
 800ae3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae40:	429a      	cmp	r2, r3
 800ae42:	db02      	blt.n	800ae4a <_printf_float+0x22a>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	07d8      	lsls	r0, r3, #31
 800ae48:	d510      	bpl.n	800ae6c <_printf_float+0x24c>
 800ae4a:	ee18 3a10 	vmov	r3, s16
 800ae4e:	4652      	mov	r2, sl
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	f43f af41 	beq.w	800acde <_printf_float+0xbe>
 800ae5c:	f04f 0800 	mov.w	r8, #0
 800ae60:	f104 091a 	add.w	r9, r4, #26
 800ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae66:	3b01      	subs	r3, #1
 800ae68:	4543      	cmp	r3, r8
 800ae6a:	dc09      	bgt.n	800ae80 <_printf_float+0x260>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	079b      	lsls	r3, r3, #30
 800ae70:	f100 8107 	bmi.w	800b082 <_printf_float+0x462>
 800ae74:	68e0      	ldr	r0, [r4, #12]
 800ae76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae78:	4298      	cmp	r0, r3
 800ae7a:	bfb8      	it	lt
 800ae7c:	4618      	movlt	r0, r3
 800ae7e:	e730      	b.n	800ace2 <_printf_float+0xc2>
 800ae80:	2301      	movs	r3, #1
 800ae82:	464a      	mov	r2, r9
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f43f af27 	beq.w	800acde <_printf_float+0xbe>
 800ae90:	f108 0801 	add.w	r8, r8, #1
 800ae94:	e7e6      	b.n	800ae64 <_printf_float+0x244>
 800ae96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dc39      	bgt.n	800af10 <_printf_float+0x2f0>
 800ae9c:	4a1b      	ldr	r2, [pc, #108]	; (800af0c <_printf_float+0x2ec>)
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4631      	mov	r1, r6
 800aea2:	4628      	mov	r0, r5
 800aea4:	47b8      	blx	r7
 800aea6:	3001      	adds	r0, #1
 800aea8:	f43f af19 	beq.w	800acde <_printf_float+0xbe>
 800aeac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	d102      	bne.n	800aeba <_printf_float+0x29a>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	07d9      	lsls	r1, r3, #31
 800aeb8:	d5d8      	bpl.n	800ae6c <_printf_float+0x24c>
 800aeba:	ee18 3a10 	vmov	r3, s16
 800aebe:	4652      	mov	r2, sl
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	f43f af09 	beq.w	800acde <_printf_float+0xbe>
 800aecc:	f04f 0900 	mov.w	r9, #0
 800aed0:	f104 0a1a 	add.w	sl, r4, #26
 800aed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed6:	425b      	negs	r3, r3
 800aed8:	454b      	cmp	r3, r9
 800aeda:	dc01      	bgt.n	800aee0 <_printf_float+0x2c0>
 800aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aede:	e792      	b.n	800ae06 <_printf_float+0x1e6>
 800aee0:	2301      	movs	r3, #1
 800aee2:	4652      	mov	r2, sl
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f43f aef7 	beq.w	800acde <_printf_float+0xbe>
 800aef0:	f109 0901 	add.w	r9, r9, #1
 800aef4:	e7ee      	b.n	800aed4 <_printf_float+0x2b4>
 800aef6:	bf00      	nop
 800aef8:	7fefffff 	.word	0x7fefffff
 800aefc:	0800f218 	.word	0x0800f218
 800af00:	0800f21c 	.word	0x0800f21c
 800af04:	0800f220 	.word	0x0800f220
 800af08:	0800f224 	.word	0x0800f224
 800af0c:	0800f228 	.word	0x0800f228
 800af10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af14:	429a      	cmp	r2, r3
 800af16:	bfa8      	it	ge
 800af18:	461a      	movge	r2, r3
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	4691      	mov	r9, r2
 800af1e:	dc37      	bgt.n	800af90 <_printf_float+0x370>
 800af20:	f04f 0b00 	mov.w	fp, #0
 800af24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af28:	f104 021a 	add.w	r2, r4, #26
 800af2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af2e:	9305      	str	r3, [sp, #20]
 800af30:	eba3 0309 	sub.w	r3, r3, r9
 800af34:	455b      	cmp	r3, fp
 800af36:	dc33      	bgt.n	800afa0 <_printf_float+0x380>
 800af38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af3c:	429a      	cmp	r2, r3
 800af3e:	db3b      	blt.n	800afb8 <_printf_float+0x398>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	07da      	lsls	r2, r3, #31
 800af44:	d438      	bmi.n	800afb8 <_printf_float+0x398>
 800af46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af4a:	eba2 0903 	sub.w	r9, r2, r3
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	1ad2      	subs	r2, r2, r3
 800af52:	4591      	cmp	r9, r2
 800af54:	bfa8      	it	ge
 800af56:	4691      	movge	r9, r2
 800af58:	f1b9 0f00 	cmp.w	r9, #0
 800af5c:	dc35      	bgt.n	800afca <_printf_float+0x3aa>
 800af5e:	f04f 0800 	mov.w	r8, #0
 800af62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af66:	f104 0a1a 	add.w	sl, r4, #26
 800af6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	eba3 0309 	sub.w	r3, r3, r9
 800af74:	4543      	cmp	r3, r8
 800af76:	f77f af79 	ble.w	800ae6c <_printf_float+0x24c>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4652      	mov	r2, sl
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f aeaa 	beq.w	800acde <_printf_float+0xbe>
 800af8a:	f108 0801 	add.w	r8, r8, #1
 800af8e:	e7ec      	b.n	800af6a <_printf_float+0x34a>
 800af90:	4613      	mov	r3, r2
 800af92:	4631      	mov	r1, r6
 800af94:	4642      	mov	r2, r8
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	d1c0      	bne.n	800af20 <_printf_float+0x300>
 800af9e:	e69e      	b.n	800acde <_printf_float+0xbe>
 800afa0:	2301      	movs	r3, #1
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	47b8      	blx	r7
 800afaa:	3001      	adds	r0, #1
 800afac:	f43f ae97 	beq.w	800acde <_printf_float+0xbe>
 800afb0:	9a05      	ldr	r2, [sp, #20]
 800afb2:	f10b 0b01 	add.w	fp, fp, #1
 800afb6:	e7b9      	b.n	800af2c <_printf_float+0x30c>
 800afb8:	ee18 3a10 	vmov	r3, s16
 800afbc:	4652      	mov	r2, sl
 800afbe:	4631      	mov	r1, r6
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b8      	blx	r7
 800afc4:	3001      	adds	r0, #1
 800afc6:	d1be      	bne.n	800af46 <_printf_float+0x326>
 800afc8:	e689      	b.n	800acde <_printf_float+0xbe>
 800afca:	9a05      	ldr	r2, [sp, #20]
 800afcc:	464b      	mov	r3, r9
 800afce:	4442      	add	r2, r8
 800afd0:	4631      	mov	r1, r6
 800afd2:	4628      	mov	r0, r5
 800afd4:	47b8      	blx	r7
 800afd6:	3001      	adds	r0, #1
 800afd8:	d1c1      	bne.n	800af5e <_printf_float+0x33e>
 800afda:	e680      	b.n	800acde <_printf_float+0xbe>
 800afdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afde:	2a01      	cmp	r2, #1
 800afe0:	dc01      	bgt.n	800afe6 <_printf_float+0x3c6>
 800afe2:	07db      	lsls	r3, r3, #31
 800afe4:	d53a      	bpl.n	800b05c <_printf_float+0x43c>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4642      	mov	r2, r8
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f ae74 	beq.w	800acde <_printf_float+0xbe>
 800aff6:	ee18 3a10 	vmov	r3, s16
 800affa:	4652      	mov	r2, sl
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	f43f ae6b 	beq.w	800acde <_printf_float+0xbe>
 800b008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b00c:	2200      	movs	r2, #0
 800b00e:	2300      	movs	r3, #0
 800b010:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b014:	f7f5 fd80 	bl	8000b18 <__aeabi_dcmpeq>
 800b018:	b9d8      	cbnz	r0, 800b052 <_printf_float+0x432>
 800b01a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b01e:	f108 0201 	add.w	r2, r8, #1
 800b022:	4631      	mov	r1, r6
 800b024:	4628      	mov	r0, r5
 800b026:	47b8      	blx	r7
 800b028:	3001      	adds	r0, #1
 800b02a:	d10e      	bne.n	800b04a <_printf_float+0x42a>
 800b02c:	e657      	b.n	800acde <_printf_float+0xbe>
 800b02e:	2301      	movs	r3, #1
 800b030:	4652      	mov	r2, sl
 800b032:	4631      	mov	r1, r6
 800b034:	4628      	mov	r0, r5
 800b036:	47b8      	blx	r7
 800b038:	3001      	adds	r0, #1
 800b03a:	f43f ae50 	beq.w	800acde <_printf_float+0xbe>
 800b03e:	f108 0801 	add.w	r8, r8, #1
 800b042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b044:	3b01      	subs	r3, #1
 800b046:	4543      	cmp	r3, r8
 800b048:	dcf1      	bgt.n	800b02e <_printf_float+0x40e>
 800b04a:	464b      	mov	r3, r9
 800b04c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b050:	e6da      	b.n	800ae08 <_printf_float+0x1e8>
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	f104 0a1a 	add.w	sl, r4, #26
 800b05a:	e7f2      	b.n	800b042 <_printf_float+0x422>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4642      	mov	r2, r8
 800b060:	e7df      	b.n	800b022 <_printf_float+0x402>
 800b062:	2301      	movs	r3, #1
 800b064:	464a      	mov	r2, r9
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	f43f ae36 	beq.w	800acde <_printf_float+0xbe>
 800b072:	f108 0801 	add.w	r8, r8, #1
 800b076:	68e3      	ldr	r3, [r4, #12]
 800b078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b07a:	1a5b      	subs	r3, r3, r1
 800b07c:	4543      	cmp	r3, r8
 800b07e:	dcf0      	bgt.n	800b062 <_printf_float+0x442>
 800b080:	e6f8      	b.n	800ae74 <_printf_float+0x254>
 800b082:	f04f 0800 	mov.w	r8, #0
 800b086:	f104 0919 	add.w	r9, r4, #25
 800b08a:	e7f4      	b.n	800b076 <_printf_float+0x456>

0800b08c <_printf_common>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	4616      	mov	r6, r2
 800b092:	4699      	mov	r9, r3
 800b094:	688a      	ldr	r2, [r1, #8]
 800b096:	690b      	ldr	r3, [r1, #16]
 800b098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	bfb8      	it	lt
 800b0a0:	4613      	movlt	r3, r2
 800b0a2:	6033      	str	r3, [r6, #0]
 800b0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b10a      	cbz	r2, 800b0b2 <_printf_common+0x26>
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	0699      	lsls	r1, r3, #26
 800b0b6:	bf42      	ittt	mi
 800b0b8:	6833      	ldrmi	r3, [r6, #0]
 800b0ba:	3302      	addmi	r3, #2
 800b0bc:	6033      	strmi	r3, [r6, #0]
 800b0be:	6825      	ldr	r5, [r4, #0]
 800b0c0:	f015 0506 	ands.w	r5, r5, #6
 800b0c4:	d106      	bne.n	800b0d4 <_printf_common+0x48>
 800b0c6:	f104 0a19 	add.w	sl, r4, #25
 800b0ca:	68e3      	ldr	r3, [r4, #12]
 800b0cc:	6832      	ldr	r2, [r6, #0]
 800b0ce:	1a9b      	subs	r3, r3, r2
 800b0d0:	42ab      	cmp	r3, r5
 800b0d2:	dc26      	bgt.n	800b122 <_printf_common+0x96>
 800b0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0d8:	1e13      	subs	r3, r2, #0
 800b0da:	6822      	ldr	r2, [r4, #0]
 800b0dc:	bf18      	it	ne
 800b0de:	2301      	movne	r3, #1
 800b0e0:	0692      	lsls	r2, r2, #26
 800b0e2:	d42b      	bmi.n	800b13c <_printf_common+0xb0>
 800b0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c0      	blx	r8
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d01e      	beq.n	800b130 <_printf_common+0xa4>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	6922      	ldr	r2, [r4, #16]
 800b0f6:	f003 0306 	and.w	r3, r3, #6
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	bf02      	ittt	eq
 800b0fe:	68e5      	ldreq	r5, [r4, #12]
 800b100:	6833      	ldreq	r3, [r6, #0]
 800b102:	1aed      	subeq	r5, r5, r3
 800b104:	68a3      	ldr	r3, [r4, #8]
 800b106:	bf0c      	ite	eq
 800b108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b10c:	2500      	movne	r5, #0
 800b10e:	4293      	cmp	r3, r2
 800b110:	bfc4      	itt	gt
 800b112:	1a9b      	subgt	r3, r3, r2
 800b114:	18ed      	addgt	r5, r5, r3
 800b116:	2600      	movs	r6, #0
 800b118:	341a      	adds	r4, #26
 800b11a:	42b5      	cmp	r5, r6
 800b11c:	d11a      	bne.n	800b154 <_printf_common+0xc8>
 800b11e:	2000      	movs	r0, #0
 800b120:	e008      	b.n	800b134 <_printf_common+0xa8>
 800b122:	2301      	movs	r3, #1
 800b124:	4652      	mov	r2, sl
 800b126:	4649      	mov	r1, r9
 800b128:	4638      	mov	r0, r7
 800b12a:	47c0      	blx	r8
 800b12c:	3001      	adds	r0, #1
 800b12e:	d103      	bne.n	800b138 <_printf_common+0xac>
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b138:	3501      	adds	r5, #1
 800b13a:	e7c6      	b.n	800b0ca <_printf_common+0x3e>
 800b13c:	18e1      	adds	r1, r4, r3
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	2030      	movs	r0, #48	; 0x30
 800b142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b146:	4422      	add	r2, r4
 800b148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b150:	3302      	adds	r3, #2
 800b152:	e7c7      	b.n	800b0e4 <_printf_common+0x58>
 800b154:	2301      	movs	r3, #1
 800b156:	4622      	mov	r2, r4
 800b158:	4649      	mov	r1, r9
 800b15a:	4638      	mov	r0, r7
 800b15c:	47c0      	blx	r8
 800b15e:	3001      	adds	r0, #1
 800b160:	d0e6      	beq.n	800b130 <_printf_common+0xa4>
 800b162:	3601      	adds	r6, #1
 800b164:	e7d9      	b.n	800b11a <_printf_common+0x8e>
	...

0800b168 <_printf_i>:
 800b168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b16c:	7e0f      	ldrb	r7, [r1, #24]
 800b16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b170:	2f78      	cmp	r7, #120	; 0x78
 800b172:	4691      	mov	r9, r2
 800b174:	4680      	mov	r8, r0
 800b176:	460c      	mov	r4, r1
 800b178:	469a      	mov	sl, r3
 800b17a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b17e:	d807      	bhi.n	800b190 <_printf_i+0x28>
 800b180:	2f62      	cmp	r7, #98	; 0x62
 800b182:	d80a      	bhi.n	800b19a <_printf_i+0x32>
 800b184:	2f00      	cmp	r7, #0
 800b186:	f000 80d4 	beq.w	800b332 <_printf_i+0x1ca>
 800b18a:	2f58      	cmp	r7, #88	; 0x58
 800b18c:	f000 80c0 	beq.w	800b310 <_printf_i+0x1a8>
 800b190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b198:	e03a      	b.n	800b210 <_printf_i+0xa8>
 800b19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b19e:	2b15      	cmp	r3, #21
 800b1a0:	d8f6      	bhi.n	800b190 <_printf_i+0x28>
 800b1a2:	a101      	add	r1, pc, #4	; (adr r1, 800b1a8 <_printf_i+0x40>)
 800b1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a8:	0800b201 	.word	0x0800b201
 800b1ac:	0800b215 	.word	0x0800b215
 800b1b0:	0800b191 	.word	0x0800b191
 800b1b4:	0800b191 	.word	0x0800b191
 800b1b8:	0800b191 	.word	0x0800b191
 800b1bc:	0800b191 	.word	0x0800b191
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b191 	.word	0x0800b191
 800b1c8:	0800b191 	.word	0x0800b191
 800b1cc:	0800b191 	.word	0x0800b191
 800b1d0:	0800b191 	.word	0x0800b191
 800b1d4:	0800b319 	.word	0x0800b319
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b2d3 	.word	0x0800b2d3
 800b1e0:	0800b191 	.word	0x0800b191
 800b1e4:	0800b191 	.word	0x0800b191
 800b1e8:	0800b33b 	.word	0x0800b33b
 800b1ec:	0800b191 	.word	0x0800b191
 800b1f0:	0800b241 	.word	0x0800b241
 800b1f4:	0800b191 	.word	0x0800b191
 800b1f8:	0800b191 	.word	0x0800b191
 800b1fc:	0800b2db 	.word	0x0800b2db
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	1d1a      	adds	r2, r3, #4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	602a      	str	r2, [r5, #0]
 800b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b210:	2301      	movs	r3, #1
 800b212:	e09f      	b.n	800b354 <_printf_i+0x1ec>
 800b214:	6820      	ldr	r0, [r4, #0]
 800b216:	682b      	ldr	r3, [r5, #0]
 800b218:	0607      	lsls	r7, r0, #24
 800b21a:	f103 0104 	add.w	r1, r3, #4
 800b21e:	6029      	str	r1, [r5, #0]
 800b220:	d501      	bpl.n	800b226 <_printf_i+0xbe>
 800b222:	681e      	ldr	r6, [r3, #0]
 800b224:	e003      	b.n	800b22e <_printf_i+0xc6>
 800b226:	0646      	lsls	r6, r0, #25
 800b228:	d5fb      	bpl.n	800b222 <_printf_i+0xba>
 800b22a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b22e:	2e00      	cmp	r6, #0
 800b230:	da03      	bge.n	800b23a <_printf_i+0xd2>
 800b232:	232d      	movs	r3, #45	; 0x2d
 800b234:	4276      	negs	r6, r6
 800b236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23a:	485a      	ldr	r0, [pc, #360]	; (800b3a4 <_printf_i+0x23c>)
 800b23c:	230a      	movs	r3, #10
 800b23e:	e012      	b.n	800b266 <_printf_i+0xfe>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	6029      	str	r1, [r5, #0]
 800b248:	0605      	lsls	r5, r0, #24
 800b24a:	d501      	bpl.n	800b250 <_printf_i+0xe8>
 800b24c:	681e      	ldr	r6, [r3, #0]
 800b24e:	e002      	b.n	800b256 <_printf_i+0xee>
 800b250:	0641      	lsls	r1, r0, #25
 800b252:	d5fb      	bpl.n	800b24c <_printf_i+0xe4>
 800b254:	881e      	ldrh	r6, [r3, #0]
 800b256:	4853      	ldr	r0, [pc, #332]	; (800b3a4 <_printf_i+0x23c>)
 800b258:	2f6f      	cmp	r7, #111	; 0x6f
 800b25a:	bf0c      	ite	eq
 800b25c:	2308      	moveq	r3, #8
 800b25e:	230a      	movne	r3, #10
 800b260:	2100      	movs	r1, #0
 800b262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b266:	6865      	ldr	r5, [r4, #4]
 800b268:	60a5      	str	r5, [r4, #8]
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	bfa2      	ittt	ge
 800b26e:	6821      	ldrge	r1, [r4, #0]
 800b270:	f021 0104 	bicge.w	r1, r1, #4
 800b274:	6021      	strge	r1, [r4, #0]
 800b276:	b90e      	cbnz	r6, 800b27c <_printf_i+0x114>
 800b278:	2d00      	cmp	r5, #0
 800b27a:	d04b      	beq.n	800b314 <_printf_i+0x1ac>
 800b27c:	4615      	mov	r5, r2
 800b27e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b282:	fb03 6711 	mls	r7, r3, r1, r6
 800b286:	5dc7      	ldrb	r7, [r0, r7]
 800b288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b28c:	4637      	mov	r7, r6
 800b28e:	42bb      	cmp	r3, r7
 800b290:	460e      	mov	r6, r1
 800b292:	d9f4      	bls.n	800b27e <_printf_i+0x116>
 800b294:	2b08      	cmp	r3, #8
 800b296:	d10b      	bne.n	800b2b0 <_printf_i+0x148>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	07de      	lsls	r6, r3, #31
 800b29c:	d508      	bpl.n	800b2b0 <_printf_i+0x148>
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	bfde      	ittt	le
 800b2a6:	2330      	movle	r3, #48	; 0x30
 800b2a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2b0:	1b52      	subs	r2, r2, r5
 800b2b2:	6122      	str	r2, [r4, #16]
 800b2b4:	f8cd a000 	str.w	sl, [sp]
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	aa03      	add	r2, sp, #12
 800b2bc:	4621      	mov	r1, r4
 800b2be:	4640      	mov	r0, r8
 800b2c0:	f7ff fee4 	bl	800b08c <_printf_common>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d14a      	bne.n	800b35e <_printf_i+0x1f6>
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2cc:	b004      	add	sp, #16
 800b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	f043 0320 	orr.w	r3, r3, #32
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	4833      	ldr	r0, [pc, #204]	; (800b3a8 <_printf_i+0x240>)
 800b2dc:	2778      	movs	r7, #120	; 0x78
 800b2de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	6829      	ldr	r1, [r5, #0]
 800b2e6:	061f      	lsls	r7, r3, #24
 800b2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2ec:	d402      	bmi.n	800b2f4 <_printf_i+0x18c>
 800b2ee:	065f      	lsls	r7, r3, #25
 800b2f0:	bf48      	it	mi
 800b2f2:	b2b6      	uxthmi	r6, r6
 800b2f4:	07df      	lsls	r7, r3, #31
 800b2f6:	bf48      	it	mi
 800b2f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b2fc:	6029      	str	r1, [r5, #0]
 800b2fe:	bf48      	it	mi
 800b300:	6023      	strmi	r3, [r4, #0]
 800b302:	b91e      	cbnz	r6, 800b30c <_printf_i+0x1a4>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	f023 0320 	bic.w	r3, r3, #32
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	2310      	movs	r3, #16
 800b30e:	e7a7      	b.n	800b260 <_printf_i+0xf8>
 800b310:	4824      	ldr	r0, [pc, #144]	; (800b3a4 <_printf_i+0x23c>)
 800b312:	e7e4      	b.n	800b2de <_printf_i+0x176>
 800b314:	4615      	mov	r5, r2
 800b316:	e7bd      	b.n	800b294 <_printf_i+0x12c>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	6826      	ldr	r6, [r4, #0]
 800b31c:	6961      	ldr	r1, [r4, #20]
 800b31e:	1d18      	adds	r0, r3, #4
 800b320:	6028      	str	r0, [r5, #0]
 800b322:	0635      	lsls	r5, r6, #24
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	d501      	bpl.n	800b32c <_printf_i+0x1c4>
 800b328:	6019      	str	r1, [r3, #0]
 800b32a:	e002      	b.n	800b332 <_printf_i+0x1ca>
 800b32c:	0670      	lsls	r0, r6, #25
 800b32e:	d5fb      	bpl.n	800b328 <_printf_i+0x1c0>
 800b330:	8019      	strh	r1, [r3, #0]
 800b332:	2300      	movs	r3, #0
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	4615      	mov	r5, r2
 800b338:	e7bc      	b.n	800b2b4 <_printf_i+0x14c>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	1d1a      	adds	r2, r3, #4
 800b33e:	602a      	str	r2, [r5, #0]
 800b340:	681d      	ldr	r5, [r3, #0]
 800b342:	6862      	ldr	r2, [r4, #4]
 800b344:	2100      	movs	r1, #0
 800b346:	4628      	mov	r0, r5
 800b348:	f7f4 ff6a 	bl	8000220 <memchr>
 800b34c:	b108      	cbz	r0, 800b352 <_printf_i+0x1ea>
 800b34e:	1b40      	subs	r0, r0, r5
 800b350:	6060      	str	r0, [r4, #4]
 800b352:	6863      	ldr	r3, [r4, #4]
 800b354:	6123      	str	r3, [r4, #16]
 800b356:	2300      	movs	r3, #0
 800b358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b35c:	e7aa      	b.n	800b2b4 <_printf_i+0x14c>
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	462a      	mov	r2, r5
 800b362:	4649      	mov	r1, r9
 800b364:	4640      	mov	r0, r8
 800b366:	47d0      	blx	sl
 800b368:	3001      	adds	r0, #1
 800b36a:	d0ad      	beq.n	800b2c8 <_printf_i+0x160>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	079b      	lsls	r3, r3, #30
 800b370:	d413      	bmi.n	800b39a <_printf_i+0x232>
 800b372:	68e0      	ldr	r0, [r4, #12]
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	4298      	cmp	r0, r3
 800b378:	bfb8      	it	lt
 800b37a:	4618      	movlt	r0, r3
 800b37c:	e7a6      	b.n	800b2cc <_printf_i+0x164>
 800b37e:	2301      	movs	r3, #1
 800b380:	4632      	mov	r2, r6
 800b382:	4649      	mov	r1, r9
 800b384:	4640      	mov	r0, r8
 800b386:	47d0      	blx	sl
 800b388:	3001      	adds	r0, #1
 800b38a:	d09d      	beq.n	800b2c8 <_printf_i+0x160>
 800b38c:	3501      	adds	r5, #1
 800b38e:	68e3      	ldr	r3, [r4, #12]
 800b390:	9903      	ldr	r1, [sp, #12]
 800b392:	1a5b      	subs	r3, r3, r1
 800b394:	42ab      	cmp	r3, r5
 800b396:	dcf2      	bgt.n	800b37e <_printf_i+0x216>
 800b398:	e7eb      	b.n	800b372 <_printf_i+0x20a>
 800b39a:	2500      	movs	r5, #0
 800b39c:	f104 0619 	add.w	r6, r4, #25
 800b3a0:	e7f5      	b.n	800b38e <_printf_i+0x226>
 800b3a2:	bf00      	nop
 800b3a4:	0800f22a 	.word	0x0800f22a
 800b3a8:	0800f23b 	.word	0x0800f23b

0800b3ac <std>:
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	b510      	push	{r4, lr}
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3ba:	6083      	str	r3, [r0, #8]
 800b3bc:	8181      	strh	r1, [r0, #12]
 800b3be:	6643      	str	r3, [r0, #100]	; 0x64
 800b3c0:	81c2      	strh	r2, [r0, #14]
 800b3c2:	6183      	str	r3, [r0, #24]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	2208      	movs	r2, #8
 800b3c8:	305c      	adds	r0, #92	; 0x5c
 800b3ca:	f000 fabd 	bl	800b948 <memset>
 800b3ce:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <std+0x38>)
 800b3d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b3d2:	4b05      	ldr	r3, [pc, #20]	; (800b3e8 <std+0x3c>)
 800b3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <std+0x40>)
 800b3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <std+0x44>)
 800b3dc:	6224      	str	r4, [r4, #32]
 800b3de:	6323      	str	r3, [r4, #48]	; 0x30
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800b755 	.word	0x0800b755
 800b3e8:	0800b777 	.word	0x0800b777
 800b3ec:	0800b7af 	.word	0x0800b7af
 800b3f0:	0800b7d3 	.word	0x0800b7d3

0800b3f4 <stdio_exit_handler>:
 800b3f4:	4a02      	ldr	r2, [pc, #8]	; (800b400 <stdio_exit_handler+0xc>)
 800b3f6:	4903      	ldr	r1, [pc, #12]	; (800b404 <stdio_exit_handler+0x10>)
 800b3f8:	4803      	ldr	r0, [pc, #12]	; (800b408 <stdio_exit_handler+0x14>)
 800b3fa:	f000 b869 	b.w	800b4d0 <_fwalk_sglue>
 800b3fe:	bf00      	nop
 800b400:	20000014 	.word	0x20000014
 800b404:	0800d531 	.word	0x0800d531
 800b408:	20000020 	.word	0x20000020

0800b40c <cleanup_stdio>:
 800b40c:	6841      	ldr	r1, [r0, #4]
 800b40e:	4b0c      	ldr	r3, [pc, #48]	; (800b440 <cleanup_stdio+0x34>)
 800b410:	4299      	cmp	r1, r3
 800b412:	b510      	push	{r4, lr}
 800b414:	4604      	mov	r4, r0
 800b416:	d001      	beq.n	800b41c <cleanup_stdio+0x10>
 800b418:	f002 f88a 	bl	800d530 <_fflush_r>
 800b41c:	68a1      	ldr	r1, [r4, #8]
 800b41e:	4b09      	ldr	r3, [pc, #36]	; (800b444 <cleanup_stdio+0x38>)
 800b420:	4299      	cmp	r1, r3
 800b422:	d002      	beq.n	800b42a <cleanup_stdio+0x1e>
 800b424:	4620      	mov	r0, r4
 800b426:	f002 f883 	bl	800d530 <_fflush_r>
 800b42a:	68e1      	ldr	r1, [r4, #12]
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <cleanup_stdio+0x3c>)
 800b42e:	4299      	cmp	r1, r3
 800b430:	d004      	beq.n	800b43c <cleanup_stdio+0x30>
 800b432:	4620      	mov	r0, r4
 800b434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b438:	f002 b87a 	b.w	800d530 <_fflush_r>
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	20000f64 	.word	0x20000f64
 800b444:	20000fcc 	.word	0x20000fcc
 800b448:	20001034 	.word	0x20001034

0800b44c <global_stdio_init.part.0>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <global_stdio_init.part.0+0x30>)
 800b450:	4c0b      	ldr	r4, [pc, #44]	; (800b480 <global_stdio_init.part.0+0x34>)
 800b452:	4a0c      	ldr	r2, [pc, #48]	; (800b484 <global_stdio_init.part.0+0x38>)
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	4620      	mov	r0, r4
 800b458:	2200      	movs	r2, #0
 800b45a:	2104      	movs	r1, #4
 800b45c:	f7ff ffa6 	bl	800b3ac <std>
 800b460:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b464:	2201      	movs	r2, #1
 800b466:	2109      	movs	r1, #9
 800b468:	f7ff ffa0 	bl	800b3ac <std>
 800b46c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b470:	2202      	movs	r2, #2
 800b472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b476:	2112      	movs	r1, #18
 800b478:	f7ff bf98 	b.w	800b3ac <std>
 800b47c:	2000109c 	.word	0x2000109c
 800b480:	20000f64 	.word	0x20000f64
 800b484:	0800b3f5 	.word	0x0800b3f5

0800b488 <__sfp_lock_acquire>:
 800b488:	4801      	ldr	r0, [pc, #4]	; (800b490 <__sfp_lock_acquire+0x8>)
 800b48a:	f000 bae9 	b.w	800ba60 <__retarget_lock_acquire_recursive>
 800b48e:	bf00      	nop
 800b490:	200010a5 	.word	0x200010a5

0800b494 <__sfp_lock_release>:
 800b494:	4801      	ldr	r0, [pc, #4]	; (800b49c <__sfp_lock_release+0x8>)
 800b496:	f000 bae4 	b.w	800ba62 <__retarget_lock_release_recursive>
 800b49a:	bf00      	nop
 800b49c:	200010a5 	.word	0x200010a5

0800b4a0 <__sinit>:
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	f7ff fff0 	bl	800b488 <__sfp_lock_acquire>
 800b4a8:	6a23      	ldr	r3, [r4, #32]
 800b4aa:	b11b      	cbz	r3, 800b4b4 <__sinit+0x14>
 800b4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b0:	f7ff bff0 	b.w	800b494 <__sfp_lock_release>
 800b4b4:	4b04      	ldr	r3, [pc, #16]	; (800b4c8 <__sinit+0x28>)
 800b4b6:	6223      	str	r3, [r4, #32]
 800b4b8:	4b04      	ldr	r3, [pc, #16]	; (800b4cc <__sinit+0x2c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1f5      	bne.n	800b4ac <__sinit+0xc>
 800b4c0:	f7ff ffc4 	bl	800b44c <global_stdio_init.part.0>
 800b4c4:	e7f2      	b.n	800b4ac <__sinit+0xc>
 800b4c6:	bf00      	nop
 800b4c8:	0800b40d 	.word	0x0800b40d
 800b4cc:	2000109c 	.word	0x2000109c

0800b4d0 <_fwalk_sglue>:
 800b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	4688      	mov	r8, r1
 800b4d8:	4614      	mov	r4, r2
 800b4da:	2600      	movs	r6, #0
 800b4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b4e4:	d505      	bpl.n	800b4f2 <_fwalk_sglue+0x22>
 800b4e6:	6824      	ldr	r4, [r4, #0]
 800b4e8:	2c00      	cmp	r4, #0
 800b4ea:	d1f7      	bne.n	800b4dc <_fwalk_sglue+0xc>
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f2:	89ab      	ldrh	r3, [r5, #12]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d907      	bls.n	800b508 <_fwalk_sglue+0x38>
 800b4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	d003      	beq.n	800b508 <_fwalk_sglue+0x38>
 800b500:	4629      	mov	r1, r5
 800b502:	4638      	mov	r0, r7
 800b504:	47c0      	blx	r8
 800b506:	4306      	orrs	r6, r0
 800b508:	3568      	adds	r5, #104	; 0x68
 800b50a:	e7e9      	b.n	800b4e0 <_fwalk_sglue+0x10>

0800b50c <iprintf>:
 800b50c:	b40f      	push	{r0, r1, r2, r3}
 800b50e:	b507      	push	{r0, r1, r2, lr}
 800b510:	4906      	ldr	r1, [pc, #24]	; (800b52c <iprintf+0x20>)
 800b512:	ab04      	add	r3, sp, #16
 800b514:	6808      	ldr	r0, [r1, #0]
 800b516:	f853 2b04 	ldr.w	r2, [r3], #4
 800b51a:	6881      	ldr	r1, [r0, #8]
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	f001 fe67 	bl	800d1f0 <_vfiprintf_r>
 800b522:	b003      	add	sp, #12
 800b524:	f85d eb04 	ldr.w	lr, [sp], #4
 800b528:	b004      	add	sp, #16
 800b52a:	4770      	bx	lr
 800b52c:	2000006c 	.word	0x2000006c

0800b530 <_puts_r>:
 800b530:	6a03      	ldr	r3, [r0, #32]
 800b532:	b570      	push	{r4, r5, r6, lr}
 800b534:	6884      	ldr	r4, [r0, #8]
 800b536:	4605      	mov	r5, r0
 800b538:	460e      	mov	r6, r1
 800b53a:	b90b      	cbnz	r3, 800b540 <_puts_r+0x10>
 800b53c:	f7ff ffb0 	bl	800b4a0 <__sinit>
 800b540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b542:	07db      	lsls	r3, r3, #31
 800b544:	d405      	bmi.n	800b552 <_puts_r+0x22>
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	0598      	lsls	r0, r3, #22
 800b54a:	d402      	bmi.n	800b552 <_puts_r+0x22>
 800b54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b54e:	f000 fa87 	bl	800ba60 <__retarget_lock_acquire_recursive>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	0719      	lsls	r1, r3, #28
 800b556:	d513      	bpl.n	800b580 <_puts_r+0x50>
 800b558:	6923      	ldr	r3, [r4, #16]
 800b55a:	b18b      	cbz	r3, 800b580 <_puts_r+0x50>
 800b55c:	3e01      	subs	r6, #1
 800b55e:	68a3      	ldr	r3, [r4, #8]
 800b560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b564:	3b01      	subs	r3, #1
 800b566:	60a3      	str	r3, [r4, #8]
 800b568:	b9e9      	cbnz	r1, 800b5a6 <_puts_r+0x76>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da2e      	bge.n	800b5cc <_puts_r+0x9c>
 800b56e:	4622      	mov	r2, r4
 800b570:	210a      	movs	r1, #10
 800b572:	4628      	mov	r0, r5
 800b574:	f000 f952 	bl	800b81c <__swbuf_r>
 800b578:	3001      	adds	r0, #1
 800b57a:	d007      	beq.n	800b58c <_puts_r+0x5c>
 800b57c:	250a      	movs	r5, #10
 800b57e:	e007      	b.n	800b590 <_puts_r+0x60>
 800b580:	4621      	mov	r1, r4
 800b582:	4628      	mov	r0, r5
 800b584:	f000 f988 	bl	800b898 <__swsetup_r>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d0e7      	beq.n	800b55c <_puts_r+0x2c>
 800b58c:	f04f 35ff 	mov.w	r5, #4294967295
 800b590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b592:	07da      	lsls	r2, r3, #31
 800b594:	d405      	bmi.n	800b5a2 <_puts_r+0x72>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	059b      	lsls	r3, r3, #22
 800b59a:	d402      	bmi.n	800b5a2 <_puts_r+0x72>
 800b59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b59e:	f000 fa60 	bl	800ba62 <__retarget_lock_release_recursive>
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	bd70      	pop	{r4, r5, r6, pc}
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	da04      	bge.n	800b5b4 <_puts_r+0x84>
 800b5aa:	69a2      	ldr	r2, [r4, #24]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	dc06      	bgt.n	800b5be <_puts_r+0x8e>
 800b5b0:	290a      	cmp	r1, #10
 800b5b2:	d004      	beq.n	800b5be <_puts_r+0x8e>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	6022      	str	r2, [r4, #0]
 800b5ba:	7019      	strb	r1, [r3, #0]
 800b5bc:	e7cf      	b.n	800b55e <_puts_r+0x2e>
 800b5be:	4622      	mov	r2, r4
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f000 f92b 	bl	800b81c <__swbuf_r>
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	d1c9      	bne.n	800b55e <_puts_r+0x2e>
 800b5ca:	e7df      	b.n	800b58c <_puts_r+0x5c>
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	250a      	movs	r5, #10
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	6022      	str	r2, [r4, #0]
 800b5d4:	701d      	strb	r5, [r3, #0]
 800b5d6:	e7db      	b.n	800b590 <_puts_r+0x60>

0800b5d8 <puts>:
 800b5d8:	4b02      	ldr	r3, [pc, #8]	; (800b5e4 <puts+0xc>)
 800b5da:	4601      	mov	r1, r0
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f7ff bfa7 	b.w	800b530 <_puts_r>
 800b5e2:	bf00      	nop
 800b5e4:	2000006c 	.word	0x2000006c

0800b5e8 <setbuf>:
 800b5e8:	fab1 f281 	clz	r2, r1
 800b5ec:	0952      	lsrs	r2, r2, #5
 800b5ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5f2:	0052      	lsls	r2, r2, #1
 800b5f4:	f000 b800 	b.w	800b5f8 <setvbuf>

0800b5f8 <setvbuf>:
 800b5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5fc:	461d      	mov	r5, r3
 800b5fe:	4b54      	ldr	r3, [pc, #336]	; (800b750 <setvbuf+0x158>)
 800b600:	681f      	ldr	r7, [r3, #0]
 800b602:	4604      	mov	r4, r0
 800b604:	460e      	mov	r6, r1
 800b606:	4690      	mov	r8, r2
 800b608:	b127      	cbz	r7, 800b614 <setvbuf+0x1c>
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	b913      	cbnz	r3, 800b614 <setvbuf+0x1c>
 800b60e:	4638      	mov	r0, r7
 800b610:	f7ff ff46 	bl	800b4a0 <__sinit>
 800b614:	f1b8 0f02 	cmp.w	r8, #2
 800b618:	d006      	beq.n	800b628 <setvbuf+0x30>
 800b61a:	f1b8 0f01 	cmp.w	r8, #1
 800b61e:	f200 8094 	bhi.w	800b74a <setvbuf+0x152>
 800b622:	2d00      	cmp	r5, #0
 800b624:	f2c0 8091 	blt.w	800b74a <setvbuf+0x152>
 800b628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b62a:	07da      	lsls	r2, r3, #31
 800b62c:	d405      	bmi.n	800b63a <setvbuf+0x42>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	059b      	lsls	r3, r3, #22
 800b632:	d402      	bmi.n	800b63a <setvbuf+0x42>
 800b634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b636:	f000 fa13 	bl	800ba60 <__retarget_lock_acquire_recursive>
 800b63a:	4621      	mov	r1, r4
 800b63c:	4638      	mov	r0, r7
 800b63e:	f001 ff77 	bl	800d530 <_fflush_r>
 800b642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b644:	b141      	cbz	r1, 800b658 <setvbuf+0x60>
 800b646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b64a:	4299      	cmp	r1, r3
 800b64c:	d002      	beq.n	800b654 <setvbuf+0x5c>
 800b64e:	4638      	mov	r0, r7
 800b650:	f001 f884 	bl	800c75c <_free_r>
 800b654:	2300      	movs	r3, #0
 800b656:	6363      	str	r3, [r4, #52]	; 0x34
 800b658:	2300      	movs	r3, #0
 800b65a:	61a3      	str	r3, [r4, #24]
 800b65c:	6063      	str	r3, [r4, #4]
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	0618      	lsls	r0, r3, #24
 800b662:	d503      	bpl.n	800b66c <setvbuf+0x74>
 800b664:	6921      	ldr	r1, [r4, #16]
 800b666:	4638      	mov	r0, r7
 800b668:	f001 f878 	bl	800c75c <_free_r>
 800b66c:	89a3      	ldrh	r3, [r4, #12]
 800b66e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b672:	f023 0303 	bic.w	r3, r3, #3
 800b676:	f1b8 0f02 	cmp.w	r8, #2
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	d05f      	beq.n	800b73e <setvbuf+0x146>
 800b67e:	ab01      	add	r3, sp, #4
 800b680:	466a      	mov	r2, sp
 800b682:	4621      	mov	r1, r4
 800b684:	4638      	mov	r0, r7
 800b686:	f001 ff7b 	bl	800d580 <__swhatbuf_r>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	4318      	orrs	r0, r3
 800b68e:	81a0      	strh	r0, [r4, #12]
 800b690:	bb2d      	cbnz	r5, 800b6de <setvbuf+0xe6>
 800b692:	9d00      	ldr	r5, [sp, #0]
 800b694:	4628      	mov	r0, r5
 800b696:	f7ff f96f 	bl	800a978 <malloc>
 800b69a:	4606      	mov	r6, r0
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d150      	bne.n	800b742 <setvbuf+0x14a>
 800b6a0:	f8dd 9000 	ldr.w	r9, [sp]
 800b6a4:	45a9      	cmp	r9, r5
 800b6a6:	d13e      	bne.n	800b726 <setvbuf+0x12e>
 800b6a8:	f04f 35ff 	mov.w	r5, #4294967295
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	60a2      	str	r2, [r4, #8]
 800b6b0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b6b4:	6022      	str	r2, [r4, #0]
 800b6b6:	6122      	str	r2, [r4, #16]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6be:	6162      	str	r2, [r4, #20]
 800b6c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6c2:	f043 0302 	orr.w	r3, r3, #2
 800b6c6:	07d1      	lsls	r1, r2, #31
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	d404      	bmi.n	800b6d6 <setvbuf+0xde>
 800b6cc:	059b      	lsls	r3, r3, #22
 800b6ce:	d402      	bmi.n	800b6d6 <setvbuf+0xde>
 800b6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6d2:	f000 f9c6 	bl	800ba62 <__retarget_lock_release_recursive>
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	b003      	add	sp, #12
 800b6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6de:	2e00      	cmp	r6, #0
 800b6e0:	d0d8      	beq.n	800b694 <setvbuf+0x9c>
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	b913      	cbnz	r3, 800b6ec <setvbuf+0xf4>
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	f7ff feda 	bl	800b4a0 <__sinit>
 800b6ec:	f1b8 0f01 	cmp.w	r8, #1
 800b6f0:	bf08      	it	eq
 800b6f2:	89a3      	ldrheq	r3, [r4, #12]
 800b6f4:	6026      	str	r6, [r4, #0]
 800b6f6:	bf04      	itt	eq
 800b6f8:	f043 0301 	orreq.w	r3, r3, #1
 800b6fc:	81a3      	strheq	r3, [r4, #12]
 800b6fe:	89a3      	ldrh	r3, [r4, #12]
 800b700:	f013 0208 	ands.w	r2, r3, #8
 800b704:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b708:	d01d      	beq.n	800b746 <setvbuf+0x14e>
 800b70a:	07da      	lsls	r2, r3, #31
 800b70c:	bf41      	itttt	mi
 800b70e:	2200      	movmi	r2, #0
 800b710:	426d      	negmi	r5, r5
 800b712:	60a2      	strmi	r2, [r4, #8]
 800b714:	61a5      	strmi	r5, [r4, #24]
 800b716:	bf58      	it	pl
 800b718:	60a5      	strpl	r5, [r4, #8]
 800b71a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b71c:	f015 0501 	ands.w	r5, r5, #1
 800b720:	d0d4      	beq.n	800b6cc <setvbuf+0xd4>
 800b722:	2500      	movs	r5, #0
 800b724:	e7d7      	b.n	800b6d6 <setvbuf+0xde>
 800b726:	4648      	mov	r0, r9
 800b728:	f7ff f926 	bl	800a978 <malloc>
 800b72c:	4606      	mov	r6, r0
 800b72e:	2800      	cmp	r0, #0
 800b730:	d0ba      	beq.n	800b6a8 <setvbuf+0xb0>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	464d      	mov	r5, r9
 800b73c:	e7d1      	b.n	800b6e2 <setvbuf+0xea>
 800b73e:	2500      	movs	r5, #0
 800b740:	e7b4      	b.n	800b6ac <setvbuf+0xb4>
 800b742:	46a9      	mov	r9, r5
 800b744:	e7f5      	b.n	800b732 <setvbuf+0x13a>
 800b746:	60a2      	str	r2, [r4, #8]
 800b748:	e7e7      	b.n	800b71a <setvbuf+0x122>
 800b74a:	f04f 35ff 	mov.w	r5, #4294967295
 800b74e:	e7c2      	b.n	800b6d6 <setvbuf+0xde>
 800b750:	2000006c 	.word	0x2000006c

0800b754 <__sread>:
 800b754:	b510      	push	{r4, lr}
 800b756:	460c      	mov	r4, r1
 800b758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75c:	f000 f922 	bl	800b9a4 <_read_r>
 800b760:	2800      	cmp	r0, #0
 800b762:	bfab      	itete	ge
 800b764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b766:	89a3      	ldrhlt	r3, [r4, #12]
 800b768:	181b      	addge	r3, r3, r0
 800b76a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b76e:	bfac      	ite	ge
 800b770:	6563      	strge	r3, [r4, #84]	; 0x54
 800b772:	81a3      	strhlt	r3, [r4, #12]
 800b774:	bd10      	pop	{r4, pc}

0800b776 <__swrite>:
 800b776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77a:	461f      	mov	r7, r3
 800b77c:	898b      	ldrh	r3, [r1, #12]
 800b77e:	05db      	lsls	r3, r3, #23
 800b780:	4605      	mov	r5, r0
 800b782:	460c      	mov	r4, r1
 800b784:	4616      	mov	r6, r2
 800b786:	d505      	bpl.n	800b794 <__swrite+0x1e>
 800b788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78c:	2302      	movs	r3, #2
 800b78e:	2200      	movs	r2, #0
 800b790:	f000 f8f6 	bl	800b980 <_lseek_r>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b79a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	463b      	mov	r3, r7
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7aa:	f000 b91d 	b.w	800b9e8 <_write_r>

0800b7ae <__sseek>:
 800b7ae:	b510      	push	{r4, lr}
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b6:	f000 f8e3 	bl	800b980 <_lseek_r>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	bf15      	itete	ne
 800b7c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7ca:	81a3      	strheq	r3, [r4, #12]
 800b7cc:	bf18      	it	ne
 800b7ce:	81a3      	strhne	r3, [r4, #12]
 800b7d0:	bd10      	pop	{r4, pc}

0800b7d2 <__sclose>:
 800b7d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d6:	f000 b8c3 	b.w	800b960 <_close_r>
	...

0800b7dc <_vsiprintf_r>:
 800b7dc:	b500      	push	{lr}
 800b7de:	b09b      	sub	sp, #108	; 0x6c
 800b7e0:	9100      	str	r1, [sp, #0]
 800b7e2:	9104      	str	r1, [sp, #16]
 800b7e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7e8:	9105      	str	r1, [sp, #20]
 800b7ea:	9102      	str	r1, [sp, #8]
 800b7ec:	4905      	ldr	r1, [pc, #20]	; (800b804 <_vsiprintf_r+0x28>)
 800b7ee:	9103      	str	r1, [sp, #12]
 800b7f0:	4669      	mov	r1, sp
 800b7f2:	f001 fbd5 	bl	800cfa0 <_svfiprintf_r>
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	701a      	strb	r2, [r3, #0]
 800b7fc:	b01b      	add	sp, #108	; 0x6c
 800b7fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b802:	bf00      	nop
 800b804:	ffff0208 	.word	0xffff0208

0800b808 <vsiprintf>:
 800b808:	4613      	mov	r3, r2
 800b80a:	460a      	mov	r2, r1
 800b80c:	4601      	mov	r1, r0
 800b80e:	4802      	ldr	r0, [pc, #8]	; (800b818 <vsiprintf+0x10>)
 800b810:	6800      	ldr	r0, [r0, #0]
 800b812:	f7ff bfe3 	b.w	800b7dc <_vsiprintf_r>
 800b816:	bf00      	nop
 800b818:	2000006c 	.word	0x2000006c

0800b81c <__swbuf_r>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	460e      	mov	r6, r1
 800b820:	4614      	mov	r4, r2
 800b822:	4605      	mov	r5, r0
 800b824:	b118      	cbz	r0, 800b82e <__swbuf_r+0x12>
 800b826:	6a03      	ldr	r3, [r0, #32]
 800b828:	b90b      	cbnz	r3, 800b82e <__swbuf_r+0x12>
 800b82a:	f7ff fe39 	bl	800b4a0 <__sinit>
 800b82e:	69a3      	ldr	r3, [r4, #24]
 800b830:	60a3      	str	r3, [r4, #8]
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	071a      	lsls	r2, r3, #28
 800b836:	d525      	bpl.n	800b884 <__swbuf_r+0x68>
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	b31b      	cbz	r3, 800b884 <__swbuf_r+0x68>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	1a98      	subs	r0, r3, r2
 800b842:	6963      	ldr	r3, [r4, #20]
 800b844:	b2f6      	uxtb	r6, r6
 800b846:	4283      	cmp	r3, r0
 800b848:	4637      	mov	r7, r6
 800b84a:	dc04      	bgt.n	800b856 <__swbuf_r+0x3a>
 800b84c:	4621      	mov	r1, r4
 800b84e:	4628      	mov	r0, r5
 800b850:	f001 fe6e 	bl	800d530 <_fflush_r>
 800b854:	b9e0      	cbnz	r0, 800b890 <__swbuf_r+0x74>
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	3b01      	subs	r3, #1
 800b85a:	60a3      	str	r3, [r4, #8]
 800b85c:	6823      	ldr	r3, [r4, #0]
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	6022      	str	r2, [r4, #0]
 800b862:	701e      	strb	r6, [r3, #0]
 800b864:	6962      	ldr	r2, [r4, #20]
 800b866:	1c43      	adds	r3, r0, #1
 800b868:	429a      	cmp	r2, r3
 800b86a:	d004      	beq.n	800b876 <__swbuf_r+0x5a>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	07db      	lsls	r3, r3, #31
 800b870:	d506      	bpl.n	800b880 <__swbuf_r+0x64>
 800b872:	2e0a      	cmp	r6, #10
 800b874:	d104      	bne.n	800b880 <__swbuf_r+0x64>
 800b876:	4621      	mov	r1, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	f001 fe59 	bl	800d530 <_fflush_r>
 800b87e:	b938      	cbnz	r0, 800b890 <__swbuf_r+0x74>
 800b880:	4638      	mov	r0, r7
 800b882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b884:	4621      	mov	r1, r4
 800b886:	4628      	mov	r0, r5
 800b888:	f000 f806 	bl	800b898 <__swsetup_r>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d0d5      	beq.n	800b83c <__swbuf_r+0x20>
 800b890:	f04f 37ff 	mov.w	r7, #4294967295
 800b894:	e7f4      	b.n	800b880 <__swbuf_r+0x64>
	...

0800b898 <__swsetup_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4b2a      	ldr	r3, [pc, #168]	; (800b944 <__swsetup_r+0xac>)
 800b89c:	4605      	mov	r5, r0
 800b89e:	6818      	ldr	r0, [r3, #0]
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	b118      	cbz	r0, 800b8ac <__swsetup_r+0x14>
 800b8a4:	6a03      	ldr	r3, [r0, #32]
 800b8a6:	b90b      	cbnz	r3, 800b8ac <__swsetup_r+0x14>
 800b8a8:	f7ff fdfa 	bl	800b4a0 <__sinit>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8b2:	0718      	lsls	r0, r3, #28
 800b8b4:	d422      	bmi.n	800b8fc <__swsetup_r+0x64>
 800b8b6:	06d9      	lsls	r1, r3, #27
 800b8b8:	d407      	bmi.n	800b8ca <__swsetup_r+0x32>
 800b8ba:	2309      	movs	r3, #9
 800b8bc:	602b      	str	r3, [r5, #0]
 800b8be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	e034      	b.n	800b934 <__swsetup_r+0x9c>
 800b8ca:	0758      	lsls	r0, r3, #29
 800b8cc:	d512      	bpl.n	800b8f4 <__swsetup_r+0x5c>
 800b8ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d0:	b141      	cbz	r1, 800b8e4 <__swsetup_r+0x4c>
 800b8d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	d002      	beq.n	800b8e0 <__swsetup_r+0x48>
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f000 ff3e 	bl	800c75c <_free_r>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6363      	str	r3, [r4, #52]	; 0x34
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	6063      	str	r3, [r4, #4]
 800b8f0:	6923      	ldr	r3, [r4, #16]
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	f043 0308 	orr.w	r3, r3, #8
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	b94b      	cbnz	r3, 800b914 <__swsetup_r+0x7c>
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b90a:	d003      	beq.n	800b914 <__swsetup_r+0x7c>
 800b90c:	4621      	mov	r1, r4
 800b90e:	4628      	mov	r0, r5
 800b910:	f001 fe5c 	bl	800d5cc <__smakebuf_r>
 800b914:	89a0      	ldrh	r0, [r4, #12]
 800b916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b91a:	f010 0301 	ands.w	r3, r0, #1
 800b91e:	d00a      	beq.n	800b936 <__swsetup_r+0x9e>
 800b920:	2300      	movs	r3, #0
 800b922:	60a3      	str	r3, [r4, #8]
 800b924:	6963      	ldr	r3, [r4, #20]
 800b926:	425b      	negs	r3, r3
 800b928:	61a3      	str	r3, [r4, #24]
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	b943      	cbnz	r3, 800b940 <__swsetup_r+0xa8>
 800b92e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b932:	d1c4      	bne.n	800b8be <__swsetup_r+0x26>
 800b934:	bd38      	pop	{r3, r4, r5, pc}
 800b936:	0781      	lsls	r1, r0, #30
 800b938:	bf58      	it	pl
 800b93a:	6963      	ldrpl	r3, [r4, #20]
 800b93c:	60a3      	str	r3, [r4, #8]
 800b93e:	e7f4      	b.n	800b92a <__swsetup_r+0x92>
 800b940:	2000      	movs	r0, #0
 800b942:	e7f7      	b.n	800b934 <__swsetup_r+0x9c>
 800b944:	2000006c 	.word	0x2000006c

0800b948 <memset>:
 800b948:	4402      	add	r2, r0
 800b94a:	4603      	mov	r3, r0
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d100      	bne.n	800b952 <memset+0xa>
 800b950:	4770      	bx	lr
 800b952:	f803 1b01 	strb.w	r1, [r3], #1
 800b956:	e7f9      	b.n	800b94c <memset+0x4>

0800b958 <_localeconv_r>:
 800b958:	4800      	ldr	r0, [pc, #0]	; (800b95c <_localeconv_r+0x4>)
 800b95a:	4770      	bx	lr
 800b95c:	20000160 	.word	0x20000160

0800b960 <_close_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d06      	ldr	r5, [pc, #24]	; (800b97c <_close_r+0x1c>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	f7f9 fdfa 	bl	8005564 <_close>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_close_r+0x1a>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_close_r+0x1a>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	200010a0 	.word	0x200010a0

0800b980 <_lseek_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d07      	ldr	r5, [pc, #28]	; (800b9a0 <_lseek_r+0x20>)
 800b984:	4604      	mov	r4, r0
 800b986:	4608      	mov	r0, r1
 800b988:	4611      	mov	r1, r2
 800b98a:	2200      	movs	r2, #0
 800b98c:	602a      	str	r2, [r5, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	f7f9 fdf4 	bl	800557c <_lseek>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_lseek_r+0x1e>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_lseek_r+0x1e>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	200010a0 	.word	0x200010a0

0800b9a4 <_read_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d07      	ldr	r5, [pc, #28]	; (800b9c4 <_read_r+0x20>)
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	602a      	str	r2, [r5, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f7f9 fdba 	bl	800552c <_read>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d102      	bne.n	800b9c2 <_read_r+0x1e>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	b103      	cbz	r3, 800b9c2 <_read_r+0x1e>
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	200010a0 	.word	0x200010a0

0800b9c8 <_sbrk_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4d06      	ldr	r5, [pc, #24]	; (800b9e4 <_sbrk_r+0x1c>)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	602b      	str	r3, [r5, #0]
 800b9d4:	f003 f904 	bl	800ebe0 <_sbrk>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_sbrk_r+0x1a>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_sbrk_r+0x1a>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	200010a0 	.word	0x200010a0

0800b9e8 <_write_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d07      	ldr	r5, [pc, #28]	; (800ba08 <_write_r+0x20>)
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	4608      	mov	r0, r1
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	602a      	str	r2, [r5, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f7f9 fda6 	bl	8005548 <_write>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_write_r+0x1e>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_write_r+0x1e>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	200010a0 	.word	0x200010a0

0800ba0c <__errno>:
 800ba0c:	4b01      	ldr	r3, [pc, #4]	; (800ba14 <__errno+0x8>)
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	2000006c 	.word	0x2000006c

0800ba18 <__libc_init_array>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	4d0d      	ldr	r5, [pc, #52]	; (800ba50 <__libc_init_array+0x38>)
 800ba1c:	4c0d      	ldr	r4, [pc, #52]	; (800ba54 <__libc_init_array+0x3c>)
 800ba1e:	1b64      	subs	r4, r4, r5
 800ba20:	10a4      	asrs	r4, r4, #2
 800ba22:	2600      	movs	r6, #0
 800ba24:	42a6      	cmp	r6, r4
 800ba26:	d109      	bne.n	800ba3c <__libc_init_array+0x24>
 800ba28:	4d0b      	ldr	r5, [pc, #44]	; (800ba58 <__libc_init_array+0x40>)
 800ba2a:	4c0c      	ldr	r4, [pc, #48]	; (800ba5c <__libc_init_array+0x44>)
 800ba2c:	f003 f8e6 	bl	800ebfc <_init>
 800ba30:	1b64      	subs	r4, r4, r5
 800ba32:	10a4      	asrs	r4, r4, #2
 800ba34:	2600      	movs	r6, #0
 800ba36:	42a6      	cmp	r6, r4
 800ba38:	d105      	bne.n	800ba46 <__libc_init_array+0x2e>
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba40:	4798      	blx	r3
 800ba42:	3601      	adds	r6, #1
 800ba44:	e7ee      	b.n	800ba24 <__libc_init_array+0xc>
 800ba46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba4a:	4798      	blx	r3
 800ba4c:	3601      	adds	r6, #1
 800ba4e:	e7f2      	b.n	800ba36 <__libc_init_array+0x1e>
 800ba50:	0800f770 	.word	0x0800f770
 800ba54:	0800f770 	.word	0x0800f770
 800ba58:	0800f770 	.word	0x0800f770
 800ba5c:	0800f774 	.word	0x0800f774

0800ba60 <__retarget_lock_acquire_recursive>:
 800ba60:	4770      	bx	lr

0800ba62 <__retarget_lock_release_recursive>:
 800ba62:	4770      	bx	lr

0800ba64 <quorem>:
 800ba64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	6903      	ldr	r3, [r0, #16]
 800ba6a:	690c      	ldr	r4, [r1, #16]
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	4607      	mov	r7, r0
 800ba70:	db7e      	blt.n	800bb70 <quorem+0x10c>
 800ba72:	3c01      	subs	r4, #1
 800ba74:	f101 0814 	add.w	r8, r1, #20
 800ba78:	f100 0514 	add.w	r5, r0, #20
 800ba7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba96:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba9a:	d331      	bcc.n	800bb00 <quorem+0x9c>
 800ba9c:	f04f 0e00 	mov.w	lr, #0
 800baa0:	4640      	mov	r0, r8
 800baa2:	46ac      	mov	ip, r5
 800baa4:	46f2      	mov	sl, lr
 800baa6:	f850 2b04 	ldr.w	r2, [r0], #4
 800baaa:	b293      	uxth	r3, r2
 800baac:	fb06 e303 	mla	r3, r6, r3, lr
 800bab0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bab4:	0c1a      	lsrs	r2, r3, #16
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	ebaa 0303 	sub.w	r3, sl, r3
 800babc:	f8dc a000 	ldr.w	sl, [ip]
 800bac0:	fa13 f38a 	uxtah	r3, r3, sl
 800bac4:	fb06 220e 	mla	r2, r6, lr, r2
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	9b00      	ldr	r3, [sp, #0]
 800bacc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bad0:	b292      	uxth	r2, r2
 800bad2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bad6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bada:	f8bd 3000 	ldrh.w	r3, [sp]
 800bade:	4581      	cmp	r9, r0
 800bae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bae4:	f84c 3b04 	str.w	r3, [ip], #4
 800bae8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800baec:	d2db      	bcs.n	800baa6 <quorem+0x42>
 800baee:	f855 300b 	ldr.w	r3, [r5, fp]
 800baf2:	b92b      	cbnz	r3, 800bb00 <quorem+0x9c>
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	3b04      	subs	r3, #4
 800baf8:	429d      	cmp	r5, r3
 800bafa:	461a      	mov	r2, r3
 800bafc:	d32c      	bcc.n	800bb58 <quorem+0xf4>
 800bafe:	613c      	str	r4, [r7, #16]
 800bb00:	4638      	mov	r0, r7
 800bb02:	f001 f8f3 	bl	800ccec <__mcmp>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	db22      	blt.n	800bb50 <quorem+0xec>
 800bb0a:	3601      	adds	r6, #1
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	2000      	movs	r0, #0
 800bb10:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb14:	f8d1 c000 	ldr.w	ip, [r1]
 800bb18:	b293      	uxth	r3, r2
 800bb1a:	1ac3      	subs	r3, r0, r3
 800bb1c:	0c12      	lsrs	r2, r2, #16
 800bb1e:	fa13 f38c 	uxtah	r3, r3, ip
 800bb22:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bb26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb30:	45c1      	cmp	r9, r8
 800bb32:	f841 3b04 	str.w	r3, [r1], #4
 800bb36:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb3a:	d2e9      	bcs.n	800bb10 <quorem+0xac>
 800bb3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb44:	b922      	cbnz	r2, 800bb50 <quorem+0xec>
 800bb46:	3b04      	subs	r3, #4
 800bb48:	429d      	cmp	r5, r3
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	d30a      	bcc.n	800bb64 <quorem+0x100>
 800bb4e:	613c      	str	r4, [r7, #16]
 800bb50:	4630      	mov	r0, r6
 800bb52:	b003      	add	sp, #12
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	3b04      	subs	r3, #4
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	d1ce      	bne.n	800bafe <quorem+0x9a>
 800bb60:	3c01      	subs	r4, #1
 800bb62:	e7c9      	b.n	800baf8 <quorem+0x94>
 800bb64:	6812      	ldr	r2, [r2, #0]
 800bb66:	3b04      	subs	r3, #4
 800bb68:	2a00      	cmp	r2, #0
 800bb6a:	d1f0      	bne.n	800bb4e <quorem+0xea>
 800bb6c:	3c01      	subs	r4, #1
 800bb6e:	e7eb      	b.n	800bb48 <quorem+0xe4>
 800bb70:	2000      	movs	r0, #0
 800bb72:	e7ee      	b.n	800bb52 <quorem+0xee>
 800bb74:	0000      	movs	r0, r0
	...

0800bb78 <_dtoa_r>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	ed2d 8b04 	vpush	{d8-d9}
 800bb80:	69c5      	ldr	r5, [r0, #28]
 800bb82:	b093      	sub	sp, #76	; 0x4c
 800bb84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb88:	ec57 6b10 	vmov	r6, r7, d0
 800bb8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bb90:	9107      	str	r1, [sp, #28]
 800bb92:	4604      	mov	r4, r0
 800bb94:	920a      	str	r2, [sp, #40]	; 0x28
 800bb96:	930d      	str	r3, [sp, #52]	; 0x34
 800bb98:	b975      	cbnz	r5, 800bbb8 <_dtoa_r+0x40>
 800bb9a:	2010      	movs	r0, #16
 800bb9c:	f7fe feec 	bl	800a978 <malloc>
 800bba0:	4602      	mov	r2, r0
 800bba2:	61e0      	str	r0, [r4, #28]
 800bba4:	b920      	cbnz	r0, 800bbb0 <_dtoa_r+0x38>
 800bba6:	4bae      	ldr	r3, [pc, #696]	; (800be60 <_dtoa_r+0x2e8>)
 800bba8:	21ef      	movs	r1, #239	; 0xef
 800bbaa:	48ae      	ldr	r0, [pc, #696]	; (800be64 <_dtoa_r+0x2ec>)
 800bbac:	f001 fd94 	bl	800d6d8 <__assert_func>
 800bbb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbb4:	6005      	str	r5, [r0, #0]
 800bbb6:	60c5      	str	r5, [r0, #12]
 800bbb8:	69e3      	ldr	r3, [r4, #28]
 800bbba:	6819      	ldr	r1, [r3, #0]
 800bbbc:	b151      	cbz	r1, 800bbd4 <_dtoa_r+0x5c>
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	604a      	str	r2, [r1, #4]
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	4093      	lsls	r3, r2
 800bbc6:	608b      	str	r3, [r1, #8]
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 fe53 	bl	800c874 <_Bfree>
 800bbce:	69e3      	ldr	r3, [r4, #28]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	1e3b      	subs	r3, r7, #0
 800bbd6:	bfbb      	ittet	lt
 800bbd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbdc:	9303      	strlt	r3, [sp, #12]
 800bbde:	2300      	movge	r3, #0
 800bbe0:	2201      	movlt	r2, #1
 800bbe2:	bfac      	ite	ge
 800bbe4:	f8c8 3000 	strge.w	r3, [r8]
 800bbe8:	f8c8 2000 	strlt.w	r2, [r8]
 800bbec:	4b9e      	ldr	r3, [pc, #632]	; (800be68 <_dtoa_r+0x2f0>)
 800bbee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bbf2:	ea33 0308 	bics.w	r3, r3, r8
 800bbf6:	d11b      	bne.n	800bc30 <_dtoa_r+0xb8>
 800bbf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbfa:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bc04:	4333      	orrs	r3, r6
 800bc06:	f000 8593 	beq.w	800c730 <_dtoa_r+0xbb8>
 800bc0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc0c:	b963      	cbnz	r3, 800bc28 <_dtoa_r+0xb0>
 800bc0e:	4b97      	ldr	r3, [pc, #604]	; (800be6c <_dtoa_r+0x2f4>)
 800bc10:	e027      	b.n	800bc62 <_dtoa_r+0xea>
 800bc12:	4b97      	ldr	r3, [pc, #604]	; (800be70 <_dtoa_r+0x2f8>)
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	3308      	adds	r3, #8
 800bc18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	9800      	ldr	r0, [sp, #0]
 800bc1e:	b013      	add	sp, #76	; 0x4c
 800bc20:	ecbd 8b04 	vpop	{d8-d9}
 800bc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc28:	4b90      	ldr	r3, [pc, #576]	; (800be6c <_dtoa_r+0x2f4>)
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	3303      	adds	r3, #3
 800bc2e:	e7f3      	b.n	800bc18 <_dtoa_r+0xa0>
 800bc30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc34:	2200      	movs	r2, #0
 800bc36:	ec51 0b17 	vmov	r0, r1, d7
 800bc3a:	eeb0 8a47 	vmov.f32	s16, s14
 800bc3e:	eef0 8a67 	vmov.f32	s17, s15
 800bc42:	2300      	movs	r3, #0
 800bc44:	f7f4 ff68 	bl	8000b18 <__aeabi_dcmpeq>
 800bc48:	4681      	mov	r9, r0
 800bc4a:	b160      	cbz	r0, 800bc66 <_dtoa_r+0xee>
 800bc4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc4e:	2301      	movs	r3, #1
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 8568 	beq.w	800c72a <_dtoa_r+0xbb2>
 800bc5a:	4b86      	ldr	r3, [pc, #536]	; (800be74 <_dtoa_r+0x2fc>)
 800bc5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	e7da      	b.n	800bc1c <_dtoa_r+0xa4>
 800bc66:	aa10      	add	r2, sp, #64	; 0x40
 800bc68:	a911      	add	r1, sp, #68	; 0x44
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc70:	eef0 0a68 	vmov.f32	s1, s17
 800bc74:	f001 f8e0 	bl	800ce38 <__d2b>
 800bc78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bc7c:	4682      	mov	sl, r0
 800bc7e:	2d00      	cmp	r5, #0
 800bc80:	d07f      	beq.n	800bd82 <_dtoa_r+0x20a>
 800bc82:	ee18 3a90 	vmov	r3, s17
 800bc86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bc8e:	ec51 0b18 	vmov	r0, r1, d8
 800bc92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bc9e:	4619      	mov	r1, r3
 800bca0:	2200      	movs	r2, #0
 800bca2:	4b75      	ldr	r3, [pc, #468]	; (800be78 <_dtoa_r+0x300>)
 800bca4:	f7f4 fb18 	bl	80002d8 <__aeabi_dsub>
 800bca8:	a367      	add	r3, pc, #412	; (adr r3, 800be48 <_dtoa_r+0x2d0>)
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f7f4 fccb 	bl	8000648 <__aeabi_dmul>
 800bcb2:	a367      	add	r3, pc, #412	; (adr r3, 800be50 <_dtoa_r+0x2d8>)
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	f7f4 fb10 	bl	80002dc <__adddf3>
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	460f      	mov	r7, r1
 800bcc2:	f7f4 fc57 	bl	8000574 <__aeabi_i2d>
 800bcc6:	a364      	add	r3, pc, #400	; (adr r3, 800be58 <_dtoa_r+0x2e0>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f7f4 fcbc 	bl	8000648 <__aeabi_dmul>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fb00 	bl	80002dc <__adddf3>
 800bcdc:	4606      	mov	r6, r0
 800bcde:	460f      	mov	r7, r1
 800bce0:	f7f4 ff62 	bl	8000ba8 <__aeabi_d2iz>
 800bce4:	2200      	movs	r2, #0
 800bce6:	4683      	mov	fp, r0
 800bce8:	2300      	movs	r3, #0
 800bcea:	4630      	mov	r0, r6
 800bcec:	4639      	mov	r1, r7
 800bcee:	f7f4 ff1d 	bl	8000b2c <__aeabi_dcmplt>
 800bcf2:	b148      	cbz	r0, 800bd08 <_dtoa_r+0x190>
 800bcf4:	4658      	mov	r0, fp
 800bcf6:	f7f4 fc3d 	bl	8000574 <__aeabi_i2d>
 800bcfa:	4632      	mov	r2, r6
 800bcfc:	463b      	mov	r3, r7
 800bcfe:	f7f4 ff0b 	bl	8000b18 <__aeabi_dcmpeq>
 800bd02:	b908      	cbnz	r0, 800bd08 <_dtoa_r+0x190>
 800bd04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd08:	f1bb 0f16 	cmp.w	fp, #22
 800bd0c:	d857      	bhi.n	800bdbe <_dtoa_r+0x246>
 800bd0e:	4b5b      	ldr	r3, [pc, #364]	; (800be7c <_dtoa_r+0x304>)
 800bd10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	ec51 0b18 	vmov	r0, r1, d8
 800bd1c:	f7f4 ff06 	bl	8000b2c <__aeabi_dcmplt>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d04e      	beq.n	800bdc2 <_dtoa_r+0x24a>
 800bd24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd28:	2300      	movs	r3, #0
 800bd2a:	930c      	str	r3, [sp, #48]	; 0x30
 800bd2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd2e:	1b5b      	subs	r3, r3, r5
 800bd30:	1e5a      	subs	r2, r3, #1
 800bd32:	bf45      	ittet	mi
 800bd34:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd38:	9305      	strmi	r3, [sp, #20]
 800bd3a:	2300      	movpl	r3, #0
 800bd3c:	2300      	movmi	r3, #0
 800bd3e:	9206      	str	r2, [sp, #24]
 800bd40:	bf54      	ite	pl
 800bd42:	9305      	strpl	r3, [sp, #20]
 800bd44:	9306      	strmi	r3, [sp, #24]
 800bd46:	f1bb 0f00 	cmp.w	fp, #0
 800bd4a:	db3c      	blt.n	800bdc6 <_dtoa_r+0x24e>
 800bd4c:	9b06      	ldr	r3, [sp, #24]
 800bd4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bd52:	445b      	add	r3, fp
 800bd54:	9306      	str	r3, [sp, #24]
 800bd56:	2300      	movs	r3, #0
 800bd58:	9308      	str	r3, [sp, #32]
 800bd5a:	9b07      	ldr	r3, [sp, #28]
 800bd5c:	2b09      	cmp	r3, #9
 800bd5e:	d868      	bhi.n	800be32 <_dtoa_r+0x2ba>
 800bd60:	2b05      	cmp	r3, #5
 800bd62:	bfc4      	itt	gt
 800bd64:	3b04      	subgt	r3, #4
 800bd66:	9307      	strgt	r3, [sp, #28]
 800bd68:	9b07      	ldr	r3, [sp, #28]
 800bd6a:	f1a3 0302 	sub.w	r3, r3, #2
 800bd6e:	bfcc      	ite	gt
 800bd70:	2500      	movgt	r5, #0
 800bd72:	2501      	movle	r5, #1
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	f200 8085 	bhi.w	800be84 <_dtoa_r+0x30c>
 800bd7a:	e8df f003 	tbb	[pc, r3]
 800bd7e:	3b2e      	.short	0x3b2e
 800bd80:	5839      	.short	0x5839
 800bd82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bd86:	441d      	add	r5, r3
 800bd88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bd8c:	2b20      	cmp	r3, #32
 800bd8e:	bfc1      	itttt	gt
 800bd90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd94:	fa08 f803 	lslgt.w	r8, r8, r3
 800bd98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bd9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bda0:	bfd6      	itet	le
 800bda2:	f1c3 0320 	rsble	r3, r3, #32
 800bda6:	ea48 0003 	orrgt.w	r0, r8, r3
 800bdaa:	fa06 f003 	lslle.w	r0, r6, r3
 800bdae:	f7f4 fbd1 	bl	8000554 <__aeabi_ui2d>
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bdb8:	3d01      	subs	r5, #1
 800bdba:	920e      	str	r2, [sp, #56]	; 0x38
 800bdbc:	e76f      	b.n	800bc9e <_dtoa_r+0x126>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e7b3      	b.n	800bd2a <_dtoa_r+0x1b2>
 800bdc2:	900c      	str	r0, [sp, #48]	; 0x30
 800bdc4:	e7b2      	b.n	800bd2c <_dtoa_r+0x1b4>
 800bdc6:	9b05      	ldr	r3, [sp, #20]
 800bdc8:	eba3 030b 	sub.w	r3, r3, fp
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	f1cb 0300 	rsb	r3, fp, #0
 800bdd2:	9308      	str	r3, [sp, #32]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdd8:	e7bf      	b.n	800bd5a <_dtoa_r+0x1e2>
 800bdda:	2300      	movs	r3, #0
 800bddc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	dc52      	bgt.n	800be8a <_dtoa_r+0x312>
 800bde4:	2301      	movs	r3, #1
 800bde6:	9301      	str	r3, [sp, #4]
 800bde8:	9304      	str	r3, [sp, #16]
 800bdea:	461a      	mov	r2, r3
 800bdec:	920a      	str	r2, [sp, #40]	; 0x28
 800bdee:	e00b      	b.n	800be08 <_dtoa_r+0x290>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e7f3      	b.n	800bddc <_dtoa_r+0x264>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdfa:	445b      	add	r3, fp
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	3301      	adds	r3, #1
 800be00:	2b01      	cmp	r3, #1
 800be02:	9304      	str	r3, [sp, #16]
 800be04:	bfb8      	it	lt
 800be06:	2301      	movlt	r3, #1
 800be08:	69e0      	ldr	r0, [r4, #28]
 800be0a:	2100      	movs	r1, #0
 800be0c:	2204      	movs	r2, #4
 800be0e:	f102 0614 	add.w	r6, r2, #20
 800be12:	429e      	cmp	r6, r3
 800be14:	d93d      	bls.n	800be92 <_dtoa_r+0x31a>
 800be16:	6041      	str	r1, [r0, #4]
 800be18:	4620      	mov	r0, r4
 800be1a:	f000 fceb 	bl	800c7f4 <_Balloc>
 800be1e:	9000      	str	r0, [sp, #0]
 800be20:	2800      	cmp	r0, #0
 800be22:	d139      	bne.n	800be98 <_dtoa_r+0x320>
 800be24:	4b16      	ldr	r3, [pc, #88]	; (800be80 <_dtoa_r+0x308>)
 800be26:	4602      	mov	r2, r0
 800be28:	f240 11af 	movw	r1, #431	; 0x1af
 800be2c:	e6bd      	b.n	800bbaa <_dtoa_r+0x32>
 800be2e:	2301      	movs	r3, #1
 800be30:	e7e1      	b.n	800bdf6 <_dtoa_r+0x27e>
 800be32:	2501      	movs	r5, #1
 800be34:	2300      	movs	r3, #0
 800be36:	9307      	str	r3, [sp, #28]
 800be38:	9509      	str	r5, [sp, #36]	; 0x24
 800be3a:	f04f 33ff 	mov.w	r3, #4294967295
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	2200      	movs	r2, #0
 800be44:	2312      	movs	r3, #18
 800be46:	e7d1      	b.n	800bdec <_dtoa_r+0x274>
 800be48:	636f4361 	.word	0x636f4361
 800be4c:	3fd287a7 	.word	0x3fd287a7
 800be50:	8b60c8b3 	.word	0x8b60c8b3
 800be54:	3fc68a28 	.word	0x3fc68a28
 800be58:	509f79fb 	.word	0x509f79fb
 800be5c:	3fd34413 	.word	0x3fd34413
 800be60:	0800f259 	.word	0x0800f259
 800be64:	0800f270 	.word	0x0800f270
 800be68:	7ff00000 	.word	0x7ff00000
 800be6c:	0800f255 	.word	0x0800f255
 800be70:	0800f24c 	.word	0x0800f24c
 800be74:	0800f229 	.word	0x0800f229
 800be78:	3ff80000 	.word	0x3ff80000
 800be7c:	0800f360 	.word	0x0800f360
 800be80:	0800f2c8 	.word	0x0800f2c8
 800be84:	2301      	movs	r3, #1
 800be86:	9309      	str	r3, [sp, #36]	; 0x24
 800be88:	e7d7      	b.n	800be3a <_dtoa_r+0x2c2>
 800be8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	9304      	str	r3, [sp, #16]
 800be90:	e7ba      	b.n	800be08 <_dtoa_r+0x290>
 800be92:	3101      	adds	r1, #1
 800be94:	0052      	lsls	r2, r2, #1
 800be96:	e7ba      	b.n	800be0e <_dtoa_r+0x296>
 800be98:	69e3      	ldr	r3, [r4, #28]
 800be9a:	9a00      	ldr	r2, [sp, #0]
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	2b0e      	cmp	r3, #14
 800bea2:	f200 80a8 	bhi.w	800bff6 <_dtoa_r+0x47e>
 800bea6:	2d00      	cmp	r5, #0
 800bea8:	f000 80a5 	beq.w	800bff6 <_dtoa_r+0x47e>
 800beac:	f1bb 0f00 	cmp.w	fp, #0
 800beb0:	dd38      	ble.n	800bf24 <_dtoa_r+0x3ac>
 800beb2:	4bc0      	ldr	r3, [pc, #768]	; (800c1b4 <_dtoa_r+0x63c>)
 800beb4:	f00b 020f 	and.w	r2, fp, #15
 800beb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bebc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bec0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bec4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bec8:	d019      	beq.n	800befe <_dtoa_r+0x386>
 800beca:	4bbb      	ldr	r3, [pc, #748]	; (800c1b8 <_dtoa_r+0x640>)
 800becc:	ec51 0b18 	vmov	r0, r1, d8
 800bed0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bed4:	f7f4 fce2 	bl	800089c <__aeabi_ddiv>
 800bed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bedc:	f008 080f 	and.w	r8, r8, #15
 800bee0:	2503      	movs	r5, #3
 800bee2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c1b8 <_dtoa_r+0x640>
 800bee6:	f1b8 0f00 	cmp.w	r8, #0
 800beea:	d10a      	bne.n	800bf02 <_dtoa_r+0x38a>
 800beec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bef0:	4632      	mov	r2, r6
 800bef2:	463b      	mov	r3, r7
 800bef4:	f7f4 fcd2 	bl	800089c <__aeabi_ddiv>
 800bef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800befc:	e02b      	b.n	800bf56 <_dtoa_r+0x3de>
 800befe:	2502      	movs	r5, #2
 800bf00:	e7ef      	b.n	800bee2 <_dtoa_r+0x36a>
 800bf02:	f018 0f01 	tst.w	r8, #1
 800bf06:	d008      	beq.n	800bf1a <_dtoa_r+0x3a2>
 800bf08:	4630      	mov	r0, r6
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf10:	f7f4 fb9a 	bl	8000648 <__aeabi_dmul>
 800bf14:	3501      	adds	r5, #1
 800bf16:	4606      	mov	r6, r0
 800bf18:	460f      	mov	r7, r1
 800bf1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf1e:	f109 0908 	add.w	r9, r9, #8
 800bf22:	e7e0      	b.n	800bee6 <_dtoa_r+0x36e>
 800bf24:	f000 809f 	beq.w	800c066 <_dtoa_r+0x4ee>
 800bf28:	f1cb 0600 	rsb	r6, fp, #0
 800bf2c:	4ba1      	ldr	r3, [pc, #644]	; (800c1b4 <_dtoa_r+0x63c>)
 800bf2e:	4fa2      	ldr	r7, [pc, #648]	; (800c1b8 <_dtoa_r+0x640>)
 800bf30:	f006 020f 	and.w	r2, r6, #15
 800bf34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	ec51 0b18 	vmov	r0, r1, d8
 800bf40:	f7f4 fb82 	bl	8000648 <__aeabi_dmul>
 800bf44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf48:	1136      	asrs	r6, r6, #4
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	2502      	movs	r5, #2
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	d17e      	bne.n	800c050 <_dtoa_r+0x4d8>
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1d0      	bne.n	800bef8 <_dtoa_r+0x380>
 800bf56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 8084 	beq.w	800c06a <_dtoa_r+0x4f2>
 800bf62:	4b96      	ldr	r3, [pc, #600]	; (800c1bc <_dtoa_r+0x644>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	4640      	mov	r0, r8
 800bf68:	4649      	mov	r1, r9
 800bf6a:	f7f4 fddf 	bl	8000b2c <__aeabi_dcmplt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d07b      	beq.n	800c06a <_dtoa_r+0x4f2>
 800bf72:	9b04      	ldr	r3, [sp, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d078      	beq.n	800c06a <_dtoa_r+0x4f2>
 800bf78:	9b01      	ldr	r3, [sp, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dd39      	ble.n	800bff2 <_dtoa_r+0x47a>
 800bf7e:	4b90      	ldr	r3, [pc, #576]	; (800c1c0 <_dtoa_r+0x648>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	4640      	mov	r0, r8
 800bf84:	4649      	mov	r1, r9
 800bf86:	f7f4 fb5f 	bl	8000648 <__aeabi_dmul>
 800bf8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf8e:	9e01      	ldr	r6, [sp, #4]
 800bf90:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bf94:	3501      	adds	r5, #1
 800bf96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f7f4 faea 	bl	8000574 <__aeabi_i2d>
 800bfa0:	4642      	mov	r2, r8
 800bfa2:	464b      	mov	r3, r9
 800bfa4:	f7f4 fb50 	bl	8000648 <__aeabi_dmul>
 800bfa8:	4b86      	ldr	r3, [pc, #536]	; (800c1c4 <_dtoa_r+0x64c>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f7f4 f996 	bl	80002dc <__adddf3>
 800bfb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bfb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfb8:	9303      	str	r3, [sp, #12]
 800bfba:	2e00      	cmp	r6, #0
 800bfbc:	d158      	bne.n	800c070 <_dtoa_r+0x4f8>
 800bfbe:	4b82      	ldr	r3, [pc, #520]	; (800c1c8 <_dtoa_r+0x650>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	f7f4 f987 	bl	80002d8 <__aeabi_dsub>
 800bfca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfce:	4680      	mov	r8, r0
 800bfd0:	4689      	mov	r9, r1
 800bfd2:	f7f4 fdc9 	bl	8000b68 <__aeabi_dcmpgt>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	f040 8296 	bne.w	800c508 <_dtoa_r+0x990>
 800bfdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bfe0:	4640      	mov	r0, r8
 800bfe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfe6:	4649      	mov	r1, r9
 800bfe8:	f7f4 fda0 	bl	8000b2c <__aeabi_dcmplt>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	f040 8289 	bne.w	800c504 <_dtoa_r+0x98c>
 800bff2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f2c0 814e 	blt.w	800c29a <_dtoa_r+0x722>
 800bffe:	f1bb 0f0e 	cmp.w	fp, #14
 800c002:	f300 814a 	bgt.w	800c29a <_dtoa_r+0x722>
 800c006:	4b6b      	ldr	r3, [pc, #428]	; (800c1b4 <_dtoa_r+0x63c>)
 800c008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c00c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c012:	2b00      	cmp	r3, #0
 800c014:	f280 80dc 	bge.w	800c1d0 <_dtoa_r+0x658>
 800c018:	9b04      	ldr	r3, [sp, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f300 80d8 	bgt.w	800c1d0 <_dtoa_r+0x658>
 800c020:	f040 826f 	bne.w	800c502 <_dtoa_r+0x98a>
 800c024:	4b68      	ldr	r3, [pc, #416]	; (800c1c8 <_dtoa_r+0x650>)
 800c026:	2200      	movs	r2, #0
 800c028:	4640      	mov	r0, r8
 800c02a:	4649      	mov	r1, r9
 800c02c:	f7f4 fb0c 	bl	8000648 <__aeabi_dmul>
 800c030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c034:	f7f4 fd8e 	bl	8000b54 <__aeabi_dcmpge>
 800c038:	9e04      	ldr	r6, [sp, #16]
 800c03a:	4637      	mov	r7, r6
 800c03c:	2800      	cmp	r0, #0
 800c03e:	f040 8245 	bne.w	800c4cc <_dtoa_r+0x954>
 800c042:	9d00      	ldr	r5, [sp, #0]
 800c044:	2331      	movs	r3, #49	; 0x31
 800c046:	f805 3b01 	strb.w	r3, [r5], #1
 800c04a:	f10b 0b01 	add.w	fp, fp, #1
 800c04e:	e241      	b.n	800c4d4 <_dtoa_r+0x95c>
 800c050:	07f2      	lsls	r2, r6, #31
 800c052:	d505      	bpl.n	800c060 <_dtoa_r+0x4e8>
 800c054:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c058:	f7f4 faf6 	bl	8000648 <__aeabi_dmul>
 800c05c:	3501      	adds	r5, #1
 800c05e:	2301      	movs	r3, #1
 800c060:	1076      	asrs	r6, r6, #1
 800c062:	3708      	adds	r7, #8
 800c064:	e773      	b.n	800bf4e <_dtoa_r+0x3d6>
 800c066:	2502      	movs	r5, #2
 800c068:	e775      	b.n	800bf56 <_dtoa_r+0x3de>
 800c06a:	9e04      	ldr	r6, [sp, #16]
 800c06c:	465f      	mov	r7, fp
 800c06e:	e792      	b.n	800bf96 <_dtoa_r+0x41e>
 800c070:	9900      	ldr	r1, [sp, #0]
 800c072:	4b50      	ldr	r3, [pc, #320]	; (800c1b4 <_dtoa_r+0x63c>)
 800c074:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c078:	4431      	add	r1, r6
 800c07a:	9102      	str	r1, [sp, #8]
 800c07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c07e:	eeb0 9a47 	vmov.f32	s18, s14
 800c082:	eef0 9a67 	vmov.f32	s19, s15
 800c086:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c08a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c08e:	2900      	cmp	r1, #0
 800c090:	d044      	beq.n	800c11c <_dtoa_r+0x5a4>
 800c092:	494e      	ldr	r1, [pc, #312]	; (800c1cc <_dtoa_r+0x654>)
 800c094:	2000      	movs	r0, #0
 800c096:	f7f4 fc01 	bl	800089c <__aeabi_ddiv>
 800c09a:	ec53 2b19 	vmov	r2, r3, d9
 800c09e:	f7f4 f91b 	bl	80002d8 <__aeabi_dsub>
 800c0a2:	9d00      	ldr	r5, [sp, #0]
 800c0a4:	ec41 0b19 	vmov	d9, r0, r1
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	f7f4 fd7c 	bl	8000ba8 <__aeabi_d2iz>
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	f7f4 fa5f 	bl	8000574 <__aeabi_i2d>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 f90b 	bl	80002d8 <__aeabi_dsub>
 800c0c2:	3630      	adds	r6, #48	; 0x30
 800c0c4:	f805 6b01 	strb.w	r6, [r5], #1
 800c0c8:	ec53 2b19 	vmov	r2, r3, d9
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	4689      	mov	r9, r1
 800c0d0:	f7f4 fd2c 	bl	8000b2c <__aeabi_dcmplt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d164      	bne.n	800c1a2 <_dtoa_r+0x62a>
 800c0d8:	4642      	mov	r2, r8
 800c0da:	464b      	mov	r3, r9
 800c0dc:	4937      	ldr	r1, [pc, #220]	; (800c1bc <_dtoa_r+0x644>)
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f7f4 f8fa 	bl	80002d8 <__aeabi_dsub>
 800c0e4:	ec53 2b19 	vmov	r2, r3, d9
 800c0e8:	f7f4 fd20 	bl	8000b2c <__aeabi_dcmplt>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	f040 80b6 	bne.w	800c25e <_dtoa_r+0x6e6>
 800c0f2:	9b02      	ldr	r3, [sp, #8]
 800c0f4:	429d      	cmp	r5, r3
 800c0f6:	f43f af7c 	beq.w	800bff2 <_dtoa_r+0x47a>
 800c0fa:	4b31      	ldr	r3, [pc, #196]	; (800c1c0 <_dtoa_r+0x648>)
 800c0fc:	ec51 0b19 	vmov	r0, r1, d9
 800c100:	2200      	movs	r2, #0
 800c102:	f7f4 faa1 	bl	8000648 <__aeabi_dmul>
 800c106:	4b2e      	ldr	r3, [pc, #184]	; (800c1c0 <_dtoa_r+0x648>)
 800c108:	ec41 0b19 	vmov	d9, r0, r1
 800c10c:	2200      	movs	r2, #0
 800c10e:	4640      	mov	r0, r8
 800c110:	4649      	mov	r1, r9
 800c112:	f7f4 fa99 	bl	8000648 <__aeabi_dmul>
 800c116:	4680      	mov	r8, r0
 800c118:	4689      	mov	r9, r1
 800c11a:	e7c5      	b.n	800c0a8 <_dtoa_r+0x530>
 800c11c:	ec51 0b17 	vmov	r0, r1, d7
 800c120:	f7f4 fa92 	bl	8000648 <__aeabi_dmul>
 800c124:	9b02      	ldr	r3, [sp, #8]
 800c126:	9d00      	ldr	r5, [sp, #0]
 800c128:	930f      	str	r3, [sp, #60]	; 0x3c
 800c12a:	ec41 0b19 	vmov	d9, r0, r1
 800c12e:	4649      	mov	r1, r9
 800c130:	4640      	mov	r0, r8
 800c132:	f7f4 fd39 	bl	8000ba8 <__aeabi_d2iz>
 800c136:	4606      	mov	r6, r0
 800c138:	f7f4 fa1c 	bl	8000574 <__aeabi_i2d>
 800c13c:	3630      	adds	r6, #48	; 0x30
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4640      	mov	r0, r8
 800c144:	4649      	mov	r1, r9
 800c146:	f7f4 f8c7 	bl	80002d8 <__aeabi_dsub>
 800c14a:	f805 6b01 	strb.w	r6, [r5], #1
 800c14e:	9b02      	ldr	r3, [sp, #8]
 800c150:	429d      	cmp	r5, r3
 800c152:	4680      	mov	r8, r0
 800c154:	4689      	mov	r9, r1
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	d124      	bne.n	800c1a6 <_dtoa_r+0x62e>
 800c15c:	4b1b      	ldr	r3, [pc, #108]	; (800c1cc <_dtoa_r+0x654>)
 800c15e:	ec51 0b19 	vmov	r0, r1, d9
 800c162:	f7f4 f8bb 	bl	80002dc <__adddf3>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4640      	mov	r0, r8
 800c16c:	4649      	mov	r1, r9
 800c16e:	f7f4 fcfb 	bl	8000b68 <__aeabi_dcmpgt>
 800c172:	2800      	cmp	r0, #0
 800c174:	d173      	bne.n	800c25e <_dtoa_r+0x6e6>
 800c176:	ec53 2b19 	vmov	r2, r3, d9
 800c17a:	4914      	ldr	r1, [pc, #80]	; (800c1cc <_dtoa_r+0x654>)
 800c17c:	2000      	movs	r0, #0
 800c17e:	f7f4 f8ab 	bl	80002d8 <__aeabi_dsub>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	4640      	mov	r0, r8
 800c188:	4649      	mov	r1, r9
 800c18a:	f7f4 fccf 	bl	8000b2c <__aeabi_dcmplt>
 800c18e:	2800      	cmp	r0, #0
 800c190:	f43f af2f 	beq.w	800bff2 <_dtoa_r+0x47a>
 800c194:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c196:	1e6b      	subs	r3, r5, #1
 800c198:	930f      	str	r3, [sp, #60]	; 0x3c
 800c19a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c19e:	2b30      	cmp	r3, #48	; 0x30
 800c1a0:	d0f8      	beq.n	800c194 <_dtoa_r+0x61c>
 800c1a2:	46bb      	mov	fp, r7
 800c1a4:	e04a      	b.n	800c23c <_dtoa_r+0x6c4>
 800c1a6:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <_dtoa_r+0x648>)
 800c1a8:	f7f4 fa4e 	bl	8000648 <__aeabi_dmul>
 800c1ac:	4680      	mov	r8, r0
 800c1ae:	4689      	mov	r9, r1
 800c1b0:	e7bd      	b.n	800c12e <_dtoa_r+0x5b6>
 800c1b2:	bf00      	nop
 800c1b4:	0800f360 	.word	0x0800f360
 800c1b8:	0800f338 	.word	0x0800f338
 800c1bc:	3ff00000 	.word	0x3ff00000
 800c1c0:	40240000 	.word	0x40240000
 800c1c4:	401c0000 	.word	0x401c0000
 800c1c8:	40140000 	.word	0x40140000
 800c1cc:	3fe00000 	.word	0x3fe00000
 800c1d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1d4:	9d00      	ldr	r5, [sp, #0]
 800c1d6:	4642      	mov	r2, r8
 800c1d8:	464b      	mov	r3, r9
 800c1da:	4630      	mov	r0, r6
 800c1dc:	4639      	mov	r1, r7
 800c1de:	f7f4 fb5d 	bl	800089c <__aeabi_ddiv>
 800c1e2:	f7f4 fce1 	bl	8000ba8 <__aeabi_d2iz>
 800c1e6:	9001      	str	r0, [sp, #4]
 800c1e8:	f7f4 f9c4 	bl	8000574 <__aeabi_i2d>
 800c1ec:	4642      	mov	r2, r8
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	f7f4 fa2a 	bl	8000648 <__aeabi_dmul>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 f86c 	bl	80002d8 <__aeabi_dsub>
 800c200:	9e01      	ldr	r6, [sp, #4]
 800c202:	9f04      	ldr	r7, [sp, #16]
 800c204:	3630      	adds	r6, #48	; 0x30
 800c206:	f805 6b01 	strb.w	r6, [r5], #1
 800c20a:	9e00      	ldr	r6, [sp, #0]
 800c20c:	1bae      	subs	r6, r5, r6
 800c20e:	42b7      	cmp	r7, r6
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	d134      	bne.n	800c280 <_dtoa_r+0x708>
 800c216:	f7f4 f861 	bl	80002dc <__adddf3>
 800c21a:	4642      	mov	r2, r8
 800c21c:	464b      	mov	r3, r9
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	f7f4 fca1 	bl	8000b68 <__aeabi_dcmpgt>
 800c226:	b9c8      	cbnz	r0, 800c25c <_dtoa_r+0x6e4>
 800c228:	4642      	mov	r2, r8
 800c22a:	464b      	mov	r3, r9
 800c22c:	4630      	mov	r0, r6
 800c22e:	4639      	mov	r1, r7
 800c230:	f7f4 fc72 	bl	8000b18 <__aeabi_dcmpeq>
 800c234:	b110      	cbz	r0, 800c23c <_dtoa_r+0x6c4>
 800c236:	9b01      	ldr	r3, [sp, #4]
 800c238:	07db      	lsls	r3, r3, #31
 800c23a:	d40f      	bmi.n	800c25c <_dtoa_r+0x6e4>
 800c23c:	4651      	mov	r1, sl
 800c23e:	4620      	mov	r0, r4
 800c240:	f000 fb18 	bl	800c874 <_Bfree>
 800c244:	2300      	movs	r3, #0
 800c246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c248:	702b      	strb	r3, [r5, #0]
 800c24a:	f10b 0301 	add.w	r3, fp, #1
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c252:	2b00      	cmp	r3, #0
 800c254:	f43f ace2 	beq.w	800bc1c <_dtoa_r+0xa4>
 800c258:	601d      	str	r5, [r3, #0]
 800c25a:	e4df      	b.n	800bc1c <_dtoa_r+0xa4>
 800c25c:	465f      	mov	r7, fp
 800c25e:	462b      	mov	r3, r5
 800c260:	461d      	mov	r5, r3
 800c262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c266:	2a39      	cmp	r2, #57	; 0x39
 800c268:	d106      	bne.n	800c278 <_dtoa_r+0x700>
 800c26a:	9a00      	ldr	r2, [sp, #0]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d1f7      	bne.n	800c260 <_dtoa_r+0x6e8>
 800c270:	9900      	ldr	r1, [sp, #0]
 800c272:	2230      	movs	r2, #48	; 0x30
 800c274:	3701      	adds	r7, #1
 800c276:	700a      	strb	r2, [r1, #0]
 800c278:	781a      	ldrb	r2, [r3, #0]
 800c27a:	3201      	adds	r2, #1
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	e790      	b.n	800c1a2 <_dtoa_r+0x62a>
 800c280:	4ba3      	ldr	r3, [pc, #652]	; (800c510 <_dtoa_r+0x998>)
 800c282:	2200      	movs	r2, #0
 800c284:	f7f4 f9e0 	bl	8000648 <__aeabi_dmul>
 800c288:	2200      	movs	r2, #0
 800c28a:	2300      	movs	r3, #0
 800c28c:	4606      	mov	r6, r0
 800c28e:	460f      	mov	r7, r1
 800c290:	f7f4 fc42 	bl	8000b18 <__aeabi_dcmpeq>
 800c294:	2800      	cmp	r0, #0
 800c296:	d09e      	beq.n	800c1d6 <_dtoa_r+0x65e>
 800c298:	e7d0      	b.n	800c23c <_dtoa_r+0x6c4>
 800c29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c29c:	2a00      	cmp	r2, #0
 800c29e:	f000 80ca 	beq.w	800c436 <_dtoa_r+0x8be>
 800c2a2:	9a07      	ldr	r2, [sp, #28]
 800c2a4:	2a01      	cmp	r2, #1
 800c2a6:	f300 80ad 	bgt.w	800c404 <_dtoa_r+0x88c>
 800c2aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	f000 80a5 	beq.w	800c3fc <_dtoa_r+0x884>
 800c2b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2b6:	9e08      	ldr	r6, [sp, #32]
 800c2b8:	9d05      	ldr	r5, [sp, #20]
 800c2ba:	9a05      	ldr	r2, [sp, #20]
 800c2bc:	441a      	add	r2, r3
 800c2be:	9205      	str	r2, [sp, #20]
 800c2c0:	9a06      	ldr	r2, [sp, #24]
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	441a      	add	r2, r3
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	9206      	str	r2, [sp, #24]
 800c2ca:	f000 fb89 	bl	800c9e0 <__i2b>
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	b165      	cbz	r5, 800c2ec <_dtoa_r+0x774>
 800c2d2:	9b06      	ldr	r3, [sp, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	dd09      	ble.n	800c2ec <_dtoa_r+0x774>
 800c2d8:	42ab      	cmp	r3, r5
 800c2da:	9a05      	ldr	r2, [sp, #20]
 800c2dc:	bfa8      	it	ge
 800c2de:	462b      	movge	r3, r5
 800c2e0:	1ad2      	subs	r2, r2, r3
 800c2e2:	9205      	str	r2, [sp, #20]
 800c2e4:	9a06      	ldr	r2, [sp, #24]
 800c2e6:	1aed      	subs	r5, r5, r3
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	9306      	str	r3, [sp, #24]
 800c2ec:	9b08      	ldr	r3, [sp, #32]
 800c2ee:	b1f3      	cbz	r3, 800c32e <_dtoa_r+0x7b6>
 800c2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 80a3 	beq.w	800c43e <_dtoa_r+0x8c6>
 800c2f8:	2e00      	cmp	r6, #0
 800c2fa:	dd10      	ble.n	800c31e <_dtoa_r+0x7a6>
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4632      	mov	r2, r6
 800c300:	4620      	mov	r0, r4
 800c302:	f000 fc2d 	bl	800cb60 <__pow5mult>
 800c306:	4652      	mov	r2, sl
 800c308:	4601      	mov	r1, r0
 800c30a:	4607      	mov	r7, r0
 800c30c:	4620      	mov	r0, r4
 800c30e:	f000 fb7d 	bl	800ca0c <__multiply>
 800c312:	4651      	mov	r1, sl
 800c314:	4680      	mov	r8, r0
 800c316:	4620      	mov	r0, r4
 800c318:	f000 faac 	bl	800c874 <_Bfree>
 800c31c:	46c2      	mov	sl, r8
 800c31e:	9b08      	ldr	r3, [sp, #32]
 800c320:	1b9a      	subs	r2, r3, r6
 800c322:	d004      	beq.n	800c32e <_dtoa_r+0x7b6>
 800c324:	4651      	mov	r1, sl
 800c326:	4620      	mov	r0, r4
 800c328:	f000 fc1a 	bl	800cb60 <__pow5mult>
 800c32c:	4682      	mov	sl, r0
 800c32e:	2101      	movs	r1, #1
 800c330:	4620      	mov	r0, r4
 800c332:	f000 fb55 	bl	800c9e0 <__i2b>
 800c336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c338:	2b00      	cmp	r3, #0
 800c33a:	4606      	mov	r6, r0
 800c33c:	f340 8081 	ble.w	800c442 <_dtoa_r+0x8ca>
 800c340:	461a      	mov	r2, r3
 800c342:	4601      	mov	r1, r0
 800c344:	4620      	mov	r0, r4
 800c346:	f000 fc0b 	bl	800cb60 <__pow5mult>
 800c34a:	9b07      	ldr	r3, [sp, #28]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	4606      	mov	r6, r0
 800c350:	dd7a      	ble.n	800c448 <_dtoa_r+0x8d0>
 800c352:	f04f 0800 	mov.w	r8, #0
 800c356:	6933      	ldr	r3, [r6, #16]
 800c358:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c35c:	6918      	ldr	r0, [r3, #16]
 800c35e:	f000 faf1 	bl	800c944 <__hi0bits>
 800c362:	f1c0 0020 	rsb	r0, r0, #32
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	4418      	add	r0, r3
 800c36a:	f010 001f 	ands.w	r0, r0, #31
 800c36e:	f000 8094 	beq.w	800c49a <_dtoa_r+0x922>
 800c372:	f1c0 0320 	rsb	r3, r0, #32
 800c376:	2b04      	cmp	r3, #4
 800c378:	f340 8085 	ble.w	800c486 <_dtoa_r+0x90e>
 800c37c:	9b05      	ldr	r3, [sp, #20]
 800c37e:	f1c0 001c 	rsb	r0, r0, #28
 800c382:	4403      	add	r3, r0
 800c384:	9305      	str	r3, [sp, #20]
 800c386:	9b06      	ldr	r3, [sp, #24]
 800c388:	4403      	add	r3, r0
 800c38a:	4405      	add	r5, r0
 800c38c:	9306      	str	r3, [sp, #24]
 800c38e:	9b05      	ldr	r3, [sp, #20]
 800c390:	2b00      	cmp	r3, #0
 800c392:	dd05      	ble.n	800c3a0 <_dtoa_r+0x828>
 800c394:	4651      	mov	r1, sl
 800c396:	461a      	mov	r2, r3
 800c398:	4620      	mov	r0, r4
 800c39a:	f000 fc3b 	bl	800cc14 <__lshift>
 800c39e:	4682      	mov	sl, r0
 800c3a0:	9b06      	ldr	r3, [sp, #24]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	dd05      	ble.n	800c3b2 <_dtoa_r+0x83a>
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 fc32 	bl	800cc14 <__lshift>
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d072      	beq.n	800c49e <_dtoa_r+0x926>
 800c3b8:	4631      	mov	r1, r6
 800c3ba:	4650      	mov	r0, sl
 800c3bc:	f000 fc96 	bl	800ccec <__mcmp>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	da6c      	bge.n	800c49e <_dtoa_r+0x926>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4651      	mov	r1, sl
 800c3c8:	220a      	movs	r2, #10
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 fa74 	bl	800c8b8 <__multadd>
 800c3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 81b0 	beq.w	800c73e <_dtoa_r+0xbc6>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	220a      	movs	r2, #10
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 fa67 	bl	800c8b8 <__multadd>
 800c3ea:	9b01      	ldr	r3, [sp, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	f300 8096 	bgt.w	800c520 <_dtoa_r+0x9a8>
 800c3f4:	9b07      	ldr	r3, [sp, #28]
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	dc59      	bgt.n	800c4ae <_dtoa_r+0x936>
 800c3fa:	e091      	b.n	800c520 <_dtoa_r+0x9a8>
 800c3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c402:	e758      	b.n	800c2b6 <_dtoa_r+0x73e>
 800c404:	9b04      	ldr	r3, [sp, #16]
 800c406:	1e5e      	subs	r6, r3, #1
 800c408:	9b08      	ldr	r3, [sp, #32]
 800c40a:	42b3      	cmp	r3, r6
 800c40c:	bfbf      	itttt	lt
 800c40e:	9b08      	ldrlt	r3, [sp, #32]
 800c410:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c412:	9608      	strlt	r6, [sp, #32]
 800c414:	1af3      	sublt	r3, r6, r3
 800c416:	bfb4      	ite	lt
 800c418:	18d2      	addlt	r2, r2, r3
 800c41a:	1b9e      	subge	r6, r3, r6
 800c41c:	9b04      	ldr	r3, [sp, #16]
 800c41e:	bfbc      	itt	lt
 800c420:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c422:	2600      	movlt	r6, #0
 800c424:	2b00      	cmp	r3, #0
 800c426:	bfb7      	itett	lt
 800c428:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c42c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c430:	1a9d      	sublt	r5, r3, r2
 800c432:	2300      	movlt	r3, #0
 800c434:	e741      	b.n	800c2ba <_dtoa_r+0x742>
 800c436:	9e08      	ldr	r6, [sp, #32]
 800c438:	9d05      	ldr	r5, [sp, #20]
 800c43a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c43c:	e748      	b.n	800c2d0 <_dtoa_r+0x758>
 800c43e:	9a08      	ldr	r2, [sp, #32]
 800c440:	e770      	b.n	800c324 <_dtoa_r+0x7ac>
 800c442:	9b07      	ldr	r3, [sp, #28]
 800c444:	2b01      	cmp	r3, #1
 800c446:	dc19      	bgt.n	800c47c <_dtoa_r+0x904>
 800c448:	9b02      	ldr	r3, [sp, #8]
 800c44a:	b9bb      	cbnz	r3, 800c47c <_dtoa_r+0x904>
 800c44c:	9b03      	ldr	r3, [sp, #12]
 800c44e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c452:	b99b      	cbnz	r3, 800c47c <_dtoa_r+0x904>
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c45a:	0d1b      	lsrs	r3, r3, #20
 800c45c:	051b      	lsls	r3, r3, #20
 800c45e:	b183      	cbz	r3, 800c482 <_dtoa_r+0x90a>
 800c460:	9b05      	ldr	r3, [sp, #20]
 800c462:	3301      	adds	r3, #1
 800c464:	9305      	str	r3, [sp, #20]
 800c466:	9b06      	ldr	r3, [sp, #24]
 800c468:	3301      	adds	r3, #1
 800c46a:	9306      	str	r3, [sp, #24]
 800c46c:	f04f 0801 	mov.w	r8, #1
 800c470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c472:	2b00      	cmp	r3, #0
 800c474:	f47f af6f 	bne.w	800c356 <_dtoa_r+0x7de>
 800c478:	2001      	movs	r0, #1
 800c47a:	e774      	b.n	800c366 <_dtoa_r+0x7ee>
 800c47c:	f04f 0800 	mov.w	r8, #0
 800c480:	e7f6      	b.n	800c470 <_dtoa_r+0x8f8>
 800c482:	4698      	mov	r8, r3
 800c484:	e7f4      	b.n	800c470 <_dtoa_r+0x8f8>
 800c486:	d082      	beq.n	800c38e <_dtoa_r+0x816>
 800c488:	9a05      	ldr	r2, [sp, #20]
 800c48a:	331c      	adds	r3, #28
 800c48c:	441a      	add	r2, r3
 800c48e:	9205      	str	r2, [sp, #20]
 800c490:	9a06      	ldr	r2, [sp, #24]
 800c492:	441a      	add	r2, r3
 800c494:	441d      	add	r5, r3
 800c496:	9206      	str	r2, [sp, #24]
 800c498:	e779      	b.n	800c38e <_dtoa_r+0x816>
 800c49a:	4603      	mov	r3, r0
 800c49c:	e7f4      	b.n	800c488 <_dtoa_r+0x910>
 800c49e:	9b04      	ldr	r3, [sp, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	dc37      	bgt.n	800c514 <_dtoa_r+0x99c>
 800c4a4:	9b07      	ldr	r3, [sp, #28]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	dd34      	ble.n	800c514 <_dtoa_r+0x99c>
 800c4aa:	9b04      	ldr	r3, [sp, #16]
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	b963      	cbnz	r3, 800c4cc <_dtoa_r+0x954>
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	2205      	movs	r2, #5
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 f9fe 	bl	800c8b8 <__multadd>
 800c4bc:	4601      	mov	r1, r0
 800c4be:	4606      	mov	r6, r0
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	f000 fc13 	bl	800ccec <__mcmp>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	f73f adbb 	bgt.w	800c042 <_dtoa_r+0x4ca>
 800c4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ce:	9d00      	ldr	r5, [sp, #0]
 800c4d0:	ea6f 0b03 	mvn.w	fp, r3
 800c4d4:	f04f 0800 	mov.w	r8, #0
 800c4d8:	4631      	mov	r1, r6
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f000 f9ca 	bl	800c874 <_Bfree>
 800c4e0:	2f00      	cmp	r7, #0
 800c4e2:	f43f aeab 	beq.w	800c23c <_dtoa_r+0x6c4>
 800c4e6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ea:	d005      	beq.n	800c4f8 <_dtoa_r+0x980>
 800c4ec:	45b8      	cmp	r8, r7
 800c4ee:	d003      	beq.n	800c4f8 <_dtoa_r+0x980>
 800c4f0:	4641      	mov	r1, r8
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 f9be 	bl	800c874 <_Bfree>
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 f9ba 	bl	800c874 <_Bfree>
 800c500:	e69c      	b.n	800c23c <_dtoa_r+0x6c4>
 800c502:	2600      	movs	r6, #0
 800c504:	4637      	mov	r7, r6
 800c506:	e7e1      	b.n	800c4cc <_dtoa_r+0x954>
 800c508:	46bb      	mov	fp, r7
 800c50a:	4637      	mov	r7, r6
 800c50c:	e599      	b.n	800c042 <_dtoa_r+0x4ca>
 800c50e:	bf00      	nop
 800c510:	40240000 	.word	0x40240000
 800c514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 80c8 	beq.w	800c6ac <_dtoa_r+0xb34>
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	2d00      	cmp	r5, #0
 800c522:	dd05      	ble.n	800c530 <_dtoa_r+0x9b8>
 800c524:	4639      	mov	r1, r7
 800c526:	462a      	mov	r2, r5
 800c528:	4620      	mov	r0, r4
 800c52a:	f000 fb73 	bl	800cc14 <__lshift>
 800c52e:	4607      	mov	r7, r0
 800c530:	f1b8 0f00 	cmp.w	r8, #0
 800c534:	d05b      	beq.n	800c5ee <_dtoa_r+0xa76>
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	4620      	mov	r0, r4
 800c53a:	f000 f95b 	bl	800c7f4 <_Balloc>
 800c53e:	4605      	mov	r5, r0
 800c540:	b928      	cbnz	r0, 800c54e <_dtoa_r+0x9d6>
 800c542:	4b83      	ldr	r3, [pc, #524]	; (800c750 <_dtoa_r+0xbd8>)
 800c544:	4602      	mov	r2, r0
 800c546:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c54a:	f7ff bb2e 	b.w	800bbaa <_dtoa_r+0x32>
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	3202      	adds	r2, #2
 800c552:	0092      	lsls	r2, r2, #2
 800c554:	f107 010c 	add.w	r1, r7, #12
 800c558:	300c      	adds	r0, #12
 800c55a:	f001 f8af 	bl	800d6bc <memcpy>
 800c55e:	2201      	movs	r2, #1
 800c560:	4629      	mov	r1, r5
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fb56 	bl	800cc14 <__lshift>
 800c568:	9b00      	ldr	r3, [sp, #0]
 800c56a:	3301      	adds	r3, #1
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c572:	4413      	add	r3, r2
 800c574:	9308      	str	r3, [sp, #32]
 800c576:	9b02      	ldr	r3, [sp, #8]
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	46b8      	mov	r8, r7
 800c57e:	9306      	str	r3, [sp, #24]
 800c580:	4607      	mov	r7, r0
 800c582:	9b04      	ldr	r3, [sp, #16]
 800c584:	4631      	mov	r1, r6
 800c586:	3b01      	subs	r3, #1
 800c588:	4650      	mov	r0, sl
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	f7ff fa6a 	bl	800ba64 <quorem>
 800c590:	4641      	mov	r1, r8
 800c592:	9002      	str	r0, [sp, #8]
 800c594:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c598:	4650      	mov	r0, sl
 800c59a:	f000 fba7 	bl	800ccec <__mcmp>
 800c59e:	463a      	mov	r2, r7
 800c5a0:	9005      	str	r0, [sp, #20]
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f000 fbbd 	bl	800cd24 <__mdiff>
 800c5aa:	68c2      	ldr	r2, [r0, #12]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	bb02      	cbnz	r2, 800c5f2 <_dtoa_r+0xa7a>
 800c5b0:	4601      	mov	r1, r0
 800c5b2:	4650      	mov	r0, sl
 800c5b4:	f000 fb9a 	bl	800ccec <__mcmp>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	4620      	mov	r0, r4
 800c5be:	9209      	str	r2, [sp, #36]	; 0x24
 800c5c0:	f000 f958 	bl	800c874 <_Bfree>
 800c5c4:	9b07      	ldr	r3, [sp, #28]
 800c5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5c8:	9d04      	ldr	r5, [sp, #16]
 800c5ca:	ea43 0102 	orr.w	r1, r3, r2
 800c5ce:	9b06      	ldr	r3, [sp, #24]
 800c5d0:	4319      	orrs	r1, r3
 800c5d2:	d110      	bne.n	800c5f6 <_dtoa_r+0xa7e>
 800c5d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c5d8:	d029      	beq.n	800c62e <_dtoa_r+0xab6>
 800c5da:	9b05      	ldr	r3, [sp, #20]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	dd02      	ble.n	800c5e6 <_dtoa_r+0xa6e>
 800c5e0:	9b02      	ldr	r3, [sp, #8]
 800c5e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	f883 9000 	strb.w	r9, [r3]
 800c5ec:	e774      	b.n	800c4d8 <_dtoa_r+0x960>
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	e7ba      	b.n	800c568 <_dtoa_r+0x9f0>
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	e7e1      	b.n	800c5ba <_dtoa_r+0xa42>
 800c5f6:	9b05      	ldr	r3, [sp, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	db04      	blt.n	800c606 <_dtoa_r+0xa8e>
 800c5fc:	9907      	ldr	r1, [sp, #28]
 800c5fe:	430b      	orrs	r3, r1
 800c600:	9906      	ldr	r1, [sp, #24]
 800c602:	430b      	orrs	r3, r1
 800c604:	d120      	bne.n	800c648 <_dtoa_r+0xad0>
 800c606:	2a00      	cmp	r2, #0
 800c608:	dded      	ble.n	800c5e6 <_dtoa_r+0xa6e>
 800c60a:	4651      	mov	r1, sl
 800c60c:	2201      	movs	r2, #1
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 fb00 	bl	800cc14 <__lshift>
 800c614:	4631      	mov	r1, r6
 800c616:	4682      	mov	sl, r0
 800c618:	f000 fb68 	bl	800ccec <__mcmp>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	dc03      	bgt.n	800c628 <_dtoa_r+0xab0>
 800c620:	d1e1      	bne.n	800c5e6 <_dtoa_r+0xa6e>
 800c622:	f019 0f01 	tst.w	r9, #1
 800c626:	d0de      	beq.n	800c5e6 <_dtoa_r+0xa6e>
 800c628:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c62c:	d1d8      	bne.n	800c5e0 <_dtoa_r+0xa68>
 800c62e:	9a01      	ldr	r2, [sp, #4]
 800c630:	2339      	movs	r3, #57	; 0x39
 800c632:	7013      	strb	r3, [r2, #0]
 800c634:	462b      	mov	r3, r5
 800c636:	461d      	mov	r5, r3
 800c638:	3b01      	subs	r3, #1
 800c63a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c63e:	2a39      	cmp	r2, #57	; 0x39
 800c640:	d06c      	beq.n	800c71c <_dtoa_r+0xba4>
 800c642:	3201      	adds	r2, #1
 800c644:	701a      	strb	r2, [r3, #0]
 800c646:	e747      	b.n	800c4d8 <_dtoa_r+0x960>
 800c648:	2a00      	cmp	r2, #0
 800c64a:	dd07      	ble.n	800c65c <_dtoa_r+0xae4>
 800c64c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c650:	d0ed      	beq.n	800c62e <_dtoa_r+0xab6>
 800c652:	9a01      	ldr	r2, [sp, #4]
 800c654:	f109 0301 	add.w	r3, r9, #1
 800c658:	7013      	strb	r3, [r2, #0]
 800c65a:	e73d      	b.n	800c4d8 <_dtoa_r+0x960>
 800c65c:	9b04      	ldr	r3, [sp, #16]
 800c65e:	9a08      	ldr	r2, [sp, #32]
 800c660:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c664:	4293      	cmp	r3, r2
 800c666:	d043      	beq.n	800c6f0 <_dtoa_r+0xb78>
 800c668:	4651      	mov	r1, sl
 800c66a:	2300      	movs	r3, #0
 800c66c:	220a      	movs	r2, #10
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 f922 	bl	800c8b8 <__multadd>
 800c674:	45b8      	cmp	r8, r7
 800c676:	4682      	mov	sl, r0
 800c678:	f04f 0300 	mov.w	r3, #0
 800c67c:	f04f 020a 	mov.w	r2, #10
 800c680:	4641      	mov	r1, r8
 800c682:	4620      	mov	r0, r4
 800c684:	d107      	bne.n	800c696 <_dtoa_r+0xb1e>
 800c686:	f000 f917 	bl	800c8b8 <__multadd>
 800c68a:	4680      	mov	r8, r0
 800c68c:	4607      	mov	r7, r0
 800c68e:	9b04      	ldr	r3, [sp, #16]
 800c690:	3301      	adds	r3, #1
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	e775      	b.n	800c582 <_dtoa_r+0xa0a>
 800c696:	f000 f90f 	bl	800c8b8 <__multadd>
 800c69a:	4639      	mov	r1, r7
 800c69c:	4680      	mov	r8, r0
 800c69e:	2300      	movs	r3, #0
 800c6a0:	220a      	movs	r2, #10
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 f908 	bl	800c8b8 <__multadd>
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	e7f0      	b.n	800c68e <_dtoa_r+0xb16>
 800c6ac:	9b04      	ldr	r3, [sp, #16]
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	9d00      	ldr	r5, [sp, #0]
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4650      	mov	r0, sl
 800c6b6:	f7ff f9d5 	bl	800ba64 <quorem>
 800c6ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6be:	9b00      	ldr	r3, [sp, #0]
 800c6c0:	f805 9b01 	strb.w	r9, [r5], #1
 800c6c4:	1aea      	subs	r2, r5, r3
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	dd07      	ble.n	800c6dc <_dtoa_r+0xb64>
 800c6cc:	4651      	mov	r1, sl
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	220a      	movs	r2, #10
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f000 f8f0 	bl	800c8b8 <__multadd>
 800c6d8:	4682      	mov	sl, r0
 800c6da:	e7ea      	b.n	800c6b2 <_dtoa_r+0xb3a>
 800c6dc:	9b01      	ldr	r3, [sp, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfc8      	it	gt
 800c6e2:	461d      	movgt	r5, r3
 800c6e4:	9b00      	ldr	r3, [sp, #0]
 800c6e6:	bfd8      	it	le
 800c6e8:	2501      	movle	r5, #1
 800c6ea:	441d      	add	r5, r3
 800c6ec:	f04f 0800 	mov.w	r8, #0
 800c6f0:	4651      	mov	r1, sl
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 fa8d 	bl	800cc14 <__lshift>
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4682      	mov	sl, r0
 800c6fe:	f000 faf5 	bl	800ccec <__mcmp>
 800c702:	2800      	cmp	r0, #0
 800c704:	dc96      	bgt.n	800c634 <_dtoa_r+0xabc>
 800c706:	d102      	bne.n	800c70e <_dtoa_r+0xb96>
 800c708:	f019 0f01 	tst.w	r9, #1
 800c70c:	d192      	bne.n	800c634 <_dtoa_r+0xabc>
 800c70e:	462b      	mov	r3, r5
 800c710:	461d      	mov	r5, r3
 800c712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c716:	2a30      	cmp	r2, #48	; 0x30
 800c718:	d0fa      	beq.n	800c710 <_dtoa_r+0xb98>
 800c71a:	e6dd      	b.n	800c4d8 <_dtoa_r+0x960>
 800c71c:	9a00      	ldr	r2, [sp, #0]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d189      	bne.n	800c636 <_dtoa_r+0xabe>
 800c722:	f10b 0b01 	add.w	fp, fp, #1
 800c726:	2331      	movs	r3, #49	; 0x31
 800c728:	e796      	b.n	800c658 <_dtoa_r+0xae0>
 800c72a:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <_dtoa_r+0xbdc>)
 800c72c:	f7ff ba99 	b.w	800bc62 <_dtoa_r+0xea>
 800c730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c732:	2b00      	cmp	r3, #0
 800c734:	f47f aa6d 	bne.w	800bc12 <_dtoa_r+0x9a>
 800c738:	4b07      	ldr	r3, [pc, #28]	; (800c758 <_dtoa_r+0xbe0>)
 800c73a:	f7ff ba92 	b.w	800bc62 <_dtoa_r+0xea>
 800c73e:	9b01      	ldr	r3, [sp, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	dcb5      	bgt.n	800c6b0 <_dtoa_r+0xb38>
 800c744:	9b07      	ldr	r3, [sp, #28]
 800c746:	2b02      	cmp	r3, #2
 800c748:	f73f aeb1 	bgt.w	800c4ae <_dtoa_r+0x936>
 800c74c:	e7b0      	b.n	800c6b0 <_dtoa_r+0xb38>
 800c74e:	bf00      	nop
 800c750:	0800f2c8 	.word	0x0800f2c8
 800c754:	0800f228 	.word	0x0800f228
 800c758:	0800f24c 	.word	0x0800f24c

0800c75c <_free_r>:
 800c75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c75e:	2900      	cmp	r1, #0
 800c760:	d044      	beq.n	800c7ec <_free_r+0x90>
 800c762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c766:	9001      	str	r0, [sp, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f1a1 0404 	sub.w	r4, r1, #4
 800c76e:	bfb8      	it	lt
 800c770:	18e4      	addlt	r4, r4, r3
 800c772:	f7fe f9a9 	bl	800aac8 <__malloc_lock>
 800c776:	4a1e      	ldr	r2, [pc, #120]	; (800c7f0 <_free_r+0x94>)
 800c778:	9801      	ldr	r0, [sp, #4]
 800c77a:	6813      	ldr	r3, [r2, #0]
 800c77c:	b933      	cbnz	r3, 800c78c <_free_r+0x30>
 800c77e:	6063      	str	r3, [r4, #4]
 800c780:	6014      	str	r4, [r2, #0]
 800c782:	b003      	add	sp, #12
 800c784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c788:	f7fe b9a4 	b.w	800aad4 <__malloc_unlock>
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	d908      	bls.n	800c7a2 <_free_r+0x46>
 800c790:	6825      	ldr	r5, [r4, #0]
 800c792:	1961      	adds	r1, r4, r5
 800c794:	428b      	cmp	r3, r1
 800c796:	bf01      	itttt	eq
 800c798:	6819      	ldreq	r1, [r3, #0]
 800c79a:	685b      	ldreq	r3, [r3, #4]
 800c79c:	1949      	addeq	r1, r1, r5
 800c79e:	6021      	streq	r1, [r4, #0]
 800c7a0:	e7ed      	b.n	800c77e <_free_r+0x22>
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	b10b      	cbz	r3, 800c7ac <_free_r+0x50>
 800c7a8:	42a3      	cmp	r3, r4
 800c7aa:	d9fa      	bls.n	800c7a2 <_free_r+0x46>
 800c7ac:	6811      	ldr	r1, [r2, #0]
 800c7ae:	1855      	adds	r5, r2, r1
 800c7b0:	42a5      	cmp	r5, r4
 800c7b2:	d10b      	bne.n	800c7cc <_free_r+0x70>
 800c7b4:	6824      	ldr	r4, [r4, #0]
 800c7b6:	4421      	add	r1, r4
 800c7b8:	1854      	adds	r4, r2, r1
 800c7ba:	42a3      	cmp	r3, r4
 800c7bc:	6011      	str	r1, [r2, #0]
 800c7be:	d1e0      	bne.n	800c782 <_free_r+0x26>
 800c7c0:	681c      	ldr	r4, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	6053      	str	r3, [r2, #4]
 800c7c6:	440c      	add	r4, r1
 800c7c8:	6014      	str	r4, [r2, #0]
 800c7ca:	e7da      	b.n	800c782 <_free_r+0x26>
 800c7cc:	d902      	bls.n	800c7d4 <_free_r+0x78>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	6003      	str	r3, [r0, #0]
 800c7d2:	e7d6      	b.n	800c782 <_free_r+0x26>
 800c7d4:	6825      	ldr	r5, [r4, #0]
 800c7d6:	1961      	adds	r1, r4, r5
 800c7d8:	428b      	cmp	r3, r1
 800c7da:	bf04      	itt	eq
 800c7dc:	6819      	ldreq	r1, [r3, #0]
 800c7de:	685b      	ldreq	r3, [r3, #4]
 800c7e0:	6063      	str	r3, [r4, #4]
 800c7e2:	bf04      	itt	eq
 800c7e4:	1949      	addeq	r1, r1, r5
 800c7e6:	6021      	streq	r1, [r4, #0]
 800c7e8:	6054      	str	r4, [r2, #4]
 800c7ea:	e7ca      	b.n	800c782 <_free_r+0x26>
 800c7ec:	b003      	add	sp, #12
 800c7ee:	bd30      	pop	{r4, r5, pc}
 800c7f0:	20000f5c 	.word	0x20000f5c

0800c7f4 <_Balloc>:
 800c7f4:	b570      	push	{r4, r5, r6, lr}
 800c7f6:	69c6      	ldr	r6, [r0, #28]
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	460d      	mov	r5, r1
 800c7fc:	b976      	cbnz	r6, 800c81c <_Balloc+0x28>
 800c7fe:	2010      	movs	r0, #16
 800c800:	f7fe f8ba 	bl	800a978 <malloc>
 800c804:	4602      	mov	r2, r0
 800c806:	61e0      	str	r0, [r4, #28]
 800c808:	b920      	cbnz	r0, 800c814 <_Balloc+0x20>
 800c80a:	4b18      	ldr	r3, [pc, #96]	; (800c86c <_Balloc+0x78>)
 800c80c:	4818      	ldr	r0, [pc, #96]	; (800c870 <_Balloc+0x7c>)
 800c80e:	216b      	movs	r1, #107	; 0x6b
 800c810:	f000 ff62 	bl	800d6d8 <__assert_func>
 800c814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c818:	6006      	str	r6, [r0, #0]
 800c81a:	60c6      	str	r6, [r0, #12]
 800c81c:	69e6      	ldr	r6, [r4, #28]
 800c81e:	68f3      	ldr	r3, [r6, #12]
 800c820:	b183      	cbz	r3, 800c844 <_Balloc+0x50>
 800c822:	69e3      	ldr	r3, [r4, #28]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c82a:	b9b8      	cbnz	r0, 800c85c <_Balloc+0x68>
 800c82c:	2101      	movs	r1, #1
 800c82e:	fa01 f605 	lsl.w	r6, r1, r5
 800c832:	1d72      	adds	r2, r6, #5
 800c834:	0092      	lsls	r2, r2, #2
 800c836:	4620      	mov	r0, r4
 800c838:	f000 ff6c 	bl	800d714 <_calloc_r>
 800c83c:	b160      	cbz	r0, 800c858 <_Balloc+0x64>
 800c83e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c842:	e00e      	b.n	800c862 <_Balloc+0x6e>
 800c844:	2221      	movs	r2, #33	; 0x21
 800c846:	2104      	movs	r1, #4
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 ff63 	bl	800d714 <_calloc_r>
 800c84e:	69e3      	ldr	r3, [r4, #28]
 800c850:	60f0      	str	r0, [r6, #12]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e4      	bne.n	800c822 <_Balloc+0x2e>
 800c858:	2000      	movs	r0, #0
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	6802      	ldr	r2, [r0, #0]
 800c85e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c862:	2300      	movs	r3, #0
 800c864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c868:	e7f7      	b.n	800c85a <_Balloc+0x66>
 800c86a:	bf00      	nop
 800c86c:	0800f259 	.word	0x0800f259
 800c870:	0800f2d9 	.word	0x0800f2d9

0800c874 <_Bfree>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	69c6      	ldr	r6, [r0, #28]
 800c878:	4605      	mov	r5, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	b976      	cbnz	r6, 800c89c <_Bfree+0x28>
 800c87e:	2010      	movs	r0, #16
 800c880:	f7fe f87a 	bl	800a978 <malloc>
 800c884:	4602      	mov	r2, r0
 800c886:	61e8      	str	r0, [r5, #28]
 800c888:	b920      	cbnz	r0, 800c894 <_Bfree+0x20>
 800c88a:	4b09      	ldr	r3, [pc, #36]	; (800c8b0 <_Bfree+0x3c>)
 800c88c:	4809      	ldr	r0, [pc, #36]	; (800c8b4 <_Bfree+0x40>)
 800c88e:	218f      	movs	r1, #143	; 0x8f
 800c890:	f000 ff22 	bl	800d6d8 <__assert_func>
 800c894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c898:	6006      	str	r6, [r0, #0]
 800c89a:	60c6      	str	r6, [r0, #12]
 800c89c:	b13c      	cbz	r4, 800c8ae <_Bfree+0x3a>
 800c89e:	69eb      	ldr	r3, [r5, #28]
 800c8a0:	6862      	ldr	r2, [r4, #4]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8a8:	6021      	str	r1, [r4, #0]
 800c8aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	0800f259 	.word	0x0800f259
 800c8b4:	0800f2d9 	.word	0x0800f2d9

0800c8b8 <__multadd>:
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	690d      	ldr	r5, [r1, #16]
 800c8be:	4607      	mov	r7, r0
 800c8c0:	460c      	mov	r4, r1
 800c8c2:	461e      	mov	r6, r3
 800c8c4:	f101 0c14 	add.w	ip, r1, #20
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f8dc 3000 	ldr.w	r3, [ip]
 800c8ce:	b299      	uxth	r1, r3
 800c8d0:	fb02 6101 	mla	r1, r2, r1, r6
 800c8d4:	0c1e      	lsrs	r6, r3, #16
 800c8d6:	0c0b      	lsrs	r3, r1, #16
 800c8d8:	fb02 3306 	mla	r3, r2, r6, r3
 800c8dc:	b289      	uxth	r1, r1
 800c8de:	3001      	adds	r0, #1
 800c8e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8e4:	4285      	cmp	r5, r0
 800c8e6:	f84c 1b04 	str.w	r1, [ip], #4
 800c8ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8ee:	dcec      	bgt.n	800c8ca <__multadd+0x12>
 800c8f0:	b30e      	cbz	r6, 800c936 <__multadd+0x7e>
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	42ab      	cmp	r3, r5
 800c8f6:	dc19      	bgt.n	800c92c <__multadd+0x74>
 800c8f8:	6861      	ldr	r1, [r4, #4]
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	3101      	adds	r1, #1
 800c8fe:	f7ff ff79 	bl	800c7f4 <_Balloc>
 800c902:	4680      	mov	r8, r0
 800c904:	b928      	cbnz	r0, 800c912 <__multadd+0x5a>
 800c906:	4602      	mov	r2, r0
 800c908:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <__multadd+0x84>)
 800c90a:	480d      	ldr	r0, [pc, #52]	; (800c940 <__multadd+0x88>)
 800c90c:	21ba      	movs	r1, #186	; 0xba
 800c90e:	f000 fee3 	bl	800d6d8 <__assert_func>
 800c912:	6922      	ldr	r2, [r4, #16]
 800c914:	3202      	adds	r2, #2
 800c916:	f104 010c 	add.w	r1, r4, #12
 800c91a:	0092      	lsls	r2, r2, #2
 800c91c:	300c      	adds	r0, #12
 800c91e:	f000 fecd 	bl	800d6bc <memcpy>
 800c922:	4621      	mov	r1, r4
 800c924:	4638      	mov	r0, r7
 800c926:	f7ff ffa5 	bl	800c874 <_Bfree>
 800c92a:	4644      	mov	r4, r8
 800c92c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c930:	3501      	adds	r5, #1
 800c932:	615e      	str	r6, [r3, #20]
 800c934:	6125      	str	r5, [r4, #16]
 800c936:	4620      	mov	r0, r4
 800c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93c:	0800f2c8 	.word	0x0800f2c8
 800c940:	0800f2d9 	.word	0x0800f2d9

0800c944 <__hi0bits>:
 800c944:	0c03      	lsrs	r3, r0, #16
 800c946:	041b      	lsls	r3, r3, #16
 800c948:	b9d3      	cbnz	r3, 800c980 <__hi0bits+0x3c>
 800c94a:	0400      	lsls	r0, r0, #16
 800c94c:	2310      	movs	r3, #16
 800c94e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c952:	bf04      	itt	eq
 800c954:	0200      	lsleq	r0, r0, #8
 800c956:	3308      	addeq	r3, #8
 800c958:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c95c:	bf04      	itt	eq
 800c95e:	0100      	lsleq	r0, r0, #4
 800c960:	3304      	addeq	r3, #4
 800c962:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c966:	bf04      	itt	eq
 800c968:	0080      	lsleq	r0, r0, #2
 800c96a:	3302      	addeq	r3, #2
 800c96c:	2800      	cmp	r0, #0
 800c96e:	db05      	blt.n	800c97c <__hi0bits+0x38>
 800c970:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c974:	f103 0301 	add.w	r3, r3, #1
 800c978:	bf08      	it	eq
 800c97a:	2320      	moveq	r3, #32
 800c97c:	4618      	mov	r0, r3
 800c97e:	4770      	bx	lr
 800c980:	2300      	movs	r3, #0
 800c982:	e7e4      	b.n	800c94e <__hi0bits+0xa>

0800c984 <__lo0bits>:
 800c984:	6803      	ldr	r3, [r0, #0]
 800c986:	f013 0207 	ands.w	r2, r3, #7
 800c98a:	d00c      	beq.n	800c9a6 <__lo0bits+0x22>
 800c98c:	07d9      	lsls	r1, r3, #31
 800c98e:	d422      	bmi.n	800c9d6 <__lo0bits+0x52>
 800c990:	079a      	lsls	r2, r3, #30
 800c992:	bf49      	itett	mi
 800c994:	085b      	lsrmi	r3, r3, #1
 800c996:	089b      	lsrpl	r3, r3, #2
 800c998:	6003      	strmi	r3, [r0, #0]
 800c99a:	2201      	movmi	r2, #1
 800c99c:	bf5c      	itt	pl
 800c99e:	6003      	strpl	r3, [r0, #0]
 800c9a0:	2202      	movpl	r2, #2
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	4770      	bx	lr
 800c9a6:	b299      	uxth	r1, r3
 800c9a8:	b909      	cbnz	r1, 800c9ae <__lo0bits+0x2a>
 800c9aa:	0c1b      	lsrs	r3, r3, #16
 800c9ac:	2210      	movs	r2, #16
 800c9ae:	b2d9      	uxtb	r1, r3
 800c9b0:	b909      	cbnz	r1, 800c9b6 <__lo0bits+0x32>
 800c9b2:	3208      	adds	r2, #8
 800c9b4:	0a1b      	lsrs	r3, r3, #8
 800c9b6:	0719      	lsls	r1, r3, #28
 800c9b8:	bf04      	itt	eq
 800c9ba:	091b      	lsreq	r3, r3, #4
 800c9bc:	3204      	addeq	r2, #4
 800c9be:	0799      	lsls	r1, r3, #30
 800c9c0:	bf04      	itt	eq
 800c9c2:	089b      	lsreq	r3, r3, #2
 800c9c4:	3202      	addeq	r2, #2
 800c9c6:	07d9      	lsls	r1, r3, #31
 800c9c8:	d403      	bmi.n	800c9d2 <__lo0bits+0x4e>
 800c9ca:	085b      	lsrs	r3, r3, #1
 800c9cc:	f102 0201 	add.w	r2, r2, #1
 800c9d0:	d003      	beq.n	800c9da <__lo0bits+0x56>
 800c9d2:	6003      	str	r3, [r0, #0]
 800c9d4:	e7e5      	b.n	800c9a2 <__lo0bits+0x1e>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	e7e3      	b.n	800c9a2 <__lo0bits+0x1e>
 800c9da:	2220      	movs	r2, #32
 800c9dc:	e7e1      	b.n	800c9a2 <__lo0bits+0x1e>
	...

0800c9e0 <__i2b>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	f7ff ff05 	bl	800c7f4 <_Balloc>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	b928      	cbnz	r0, 800c9fa <__i2b+0x1a>
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <__i2b+0x24>)
 800c9f0:	4805      	ldr	r0, [pc, #20]	; (800ca08 <__i2b+0x28>)
 800c9f2:	f240 1145 	movw	r1, #325	; 0x145
 800c9f6:	f000 fe6f 	bl	800d6d8 <__assert_func>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	6144      	str	r4, [r0, #20]
 800c9fe:	6103      	str	r3, [r0, #16]
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	bf00      	nop
 800ca04:	0800f2c8 	.word	0x0800f2c8
 800ca08:	0800f2d9 	.word	0x0800f2d9

0800ca0c <__multiply>:
 800ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	4691      	mov	r9, r2
 800ca12:	690a      	ldr	r2, [r1, #16]
 800ca14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	bfb8      	it	lt
 800ca1c:	460b      	movlt	r3, r1
 800ca1e:	460c      	mov	r4, r1
 800ca20:	bfbc      	itt	lt
 800ca22:	464c      	movlt	r4, r9
 800ca24:	4699      	movlt	r9, r3
 800ca26:	6927      	ldr	r7, [r4, #16]
 800ca28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca2c:	68a3      	ldr	r3, [r4, #8]
 800ca2e:	6861      	ldr	r1, [r4, #4]
 800ca30:	eb07 060a 	add.w	r6, r7, sl
 800ca34:	42b3      	cmp	r3, r6
 800ca36:	b085      	sub	sp, #20
 800ca38:	bfb8      	it	lt
 800ca3a:	3101      	addlt	r1, #1
 800ca3c:	f7ff feda 	bl	800c7f4 <_Balloc>
 800ca40:	b930      	cbnz	r0, 800ca50 <__multiply+0x44>
 800ca42:	4602      	mov	r2, r0
 800ca44:	4b44      	ldr	r3, [pc, #272]	; (800cb58 <__multiply+0x14c>)
 800ca46:	4845      	ldr	r0, [pc, #276]	; (800cb5c <__multiply+0x150>)
 800ca48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ca4c:	f000 fe44 	bl	800d6d8 <__assert_func>
 800ca50:	f100 0514 	add.w	r5, r0, #20
 800ca54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca58:	462b      	mov	r3, r5
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	4543      	cmp	r3, r8
 800ca5e:	d321      	bcc.n	800caa4 <__multiply+0x98>
 800ca60:	f104 0314 	add.w	r3, r4, #20
 800ca64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca68:	f109 0314 	add.w	r3, r9, #20
 800ca6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca70:	9202      	str	r2, [sp, #8]
 800ca72:	1b3a      	subs	r2, r7, r4
 800ca74:	3a15      	subs	r2, #21
 800ca76:	f022 0203 	bic.w	r2, r2, #3
 800ca7a:	3204      	adds	r2, #4
 800ca7c:	f104 0115 	add.w	r1, r4, #21
 800ca80:	428f      	cmp	r7, r1
 800ca82:	bf38      	it	cc
 800ca84:	2204      	movcc	r2, #4
 800ca86:	9201      	str	r2, [sp, #4]
 800ca88:	9a02      	ldr	r2, [sp, #8]
 800ca8a:	9303      	str	r3, [sp, #12]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d80c      	bhi.n	800caaa <__multiply+0x9e>
 800ca90:	2e00      	cmp	r6, #0
 800ca92:	dd03      	ble.n	800ca9c <__multiply+0x90>
 800ca94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d05b      	beq.n	800cb54 <__multiply+0x148>
 800ca9c:	6106      	str	r6, [r0, #16]
 800ca9e:	b005      	add	sp, #20
 800caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa4:	f843 2b04 	str.w	r2, [r3], #4
 800caa8:	e7d8      	b.n	800ca5c <__multiply+0x50>
 800caaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800caae:	f1ba 0f00 	cmp.w	sl, #0
 800cab2:	d024      	beq.n	800cafe <__multiply+0xf2>
 800cab4:	f104 0e14 	add.w	lr, r4, #20
 800cab8:	46a9      	mov	r9, r5
 800caba:	f04f 0c00 	mov.w	ip, #0
 800cabe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cac2:	f8d9 1000 	ldr.w	r1, [r9]
 800cac6:	fa1f fb82 	uxth.w	fp, r2
 800caca:	b289      	uxth	r1, r1
 800cacc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cad0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cad4:	f8d9 2000 	ldr.w	r2, [r9]
 800cad8:	4461      	add	r1, ip
 800cada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cade:	fb0a c20b 	mla	r2, sl, fp, ip
 800cae2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cae6:	b289      	uxth	r1, r1
 800cae8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800caec:	4577      	cmp	r7, lr
 800caee:	f849 1b04 	str.w	r1, [r9], #4
 800caf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800caf6:	d8e2      	bhi.n	800cabe <__multiply+0xb2>
 800caf8:	9a01      	ldr	r2, [sp, #4]
 800cafa:	f845 c002 	str.w	ip, [r5, r2]
 800cafe:	9a03      	ldr	r2, [sp, #12]
 800cb00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb04:	3304      	adds	r3, #4
 800cb06:	f1b9 0f00 	cmp.w	r9, #0
 800cb0a:	d021      	beq.n	800cb50 <__multiply+0x144>
 800cb0c:	6829      	ldr	r1, [r5, #0]
 800cb0e:	f104 0c14 	add.w	ip, r4, #20
 800cb12:	46ae      	mov	lr, r5
 800cb14:	f04f 0a00 	mov.w	sl, #0
 800cb18:	f8bc b000 	ldrh.w	fp, [ip]
 800cb1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb20:	fb09 220b 	mla	r2, r9, fp, r2
 800cb24:	4452      	add	r2, sl
 800cb26:	b289      	uxth	r1, r1
 800cb28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb2c:	f84e 1b04 	str.w	r1, [lr], #4
 800cb30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb38:	f8be 1000 	ldrh.w	r1, [lr]
 800cb3c:	fb09 110a 	mla	r1, r9, sl, r1
 800cb40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cb44:	4567      	cmp	r7, ip
 800cb46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb4a:	d8e5      	bhi.n	800cb18 <__multiply+0x10c>
 800cb4c:	9a01      	ldr	r2, [sp, #4]
 800cb4e:	50a9      	str	r1, [r5, r2]
 800cb50:	3504      	adds	r5, #4
 800cb52:	e799      	b.n	800ca88 <__multiply+0x7c>
 800cb54:	3e01      	subs	r6, #1
 800cb56:	e79b      	b.n	800ca90 <__multiply+0x84>
 800cb58:	0800f2c8 	.word	0x0800f2c8
 800cb5c:	0800f2d9 	.word	0x0800f2d9

0800cb60 <__pow5mult>:
 800cb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb64:	4615      	mov	r5, r2
 800cb66:	f012 0203 	ands.w	r2, r2, #3
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	d007      	beq.n	800cb80 <__pow5mult+0x20>
 800cb70:	4c25      	ldr	r4, [pc, #148]	; (800cc08 <__pow5mult+0xa8>)
 800cb72:	3a01      	subs	r2, #1
 800cb74:	2300      	movs	r3, #0
 800cb76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb7a:	f7ff fe9d 	bl	800c8b8 <__multadd>
 800cb7e:	4607      	mov	r7, r0
 800cb80:	10ad      	asrs	r5, r5, #2
 800cb82:	d03d      	beq.n	800cc00 <__pow5mult+0xa0>
 800cb84:	69f4      	ldr	r4, [r6, #28]
 800cb86:	b97c      	cbnz	r4, 800cba8 <__pow5mult+0x48>
 800cb88:	2010      	movs	r0, #16
 800cb8a:	f7fd fef5 	bl	800a978 <malloc>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	61f0      	str	r0, [r6, #28]
 800cb92:	b928      	cbnz	r0, 800cba0 <__pow5mult+0x40>
 800cb94:	4b1d      	ldr	r3, [pc, #116]	; (800cc0c <__pow5mult+0xac>)
 800cb96:	481e      	ldr	r0, [pc, #120]	; (800cc10 <__pow5mult+0xb0>)
 800cb98:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb9c:	f000 fd9c 	bl	800d6d8 <__assert_func>
 800cba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cba4:	6004      	str	r4, [r0, #0]
 800cba6:	60c4      	str	r4, [r0, #12]
 800cba8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cbac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbb0:	b94c      	cbnz	r4, 800cbc6 <__pow5mult+0x66>
 800cbb2:	f240 2171 	movw	r1, #625	; 0x271
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f7ff ff12 	bl	800c9e0 <__i2b>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	6003      	str	r3, [r0, #0]
 800cbc6:	f04f 0900 	mov.w	r9, #0
 800cbca:	07eb      	lsls	r3, r5, #31
 800cbcc:	d50a      	bpl.n	800cbe4 <__pow5mult+0x84>
 800cbce:	4639      	mov	r1, r7
 800cbd0:	4622      	mov	r2, r4
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f7ff ff1a 	bl	800ca0c <__multiply>
 800cbd8:	4639      	mov	r1, r7
 800cbda:	4680      	mov	r8, r0
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7ff fe49 	bl	800c874 <_Bfree>
 800cbe2:	4647      	mov	r7, r8
 800cbe4:	106d      	asrs	r5, r5, #1
 800cbe6:	d00b      	beq.n	800cc00 <__pow5mult+0xa0>
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	b938      	cbnz	r0, 800cbfc <__pow5mult+0x9c>
 800cbec:	4622      	mov	r2, r4
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f7ff ff0b 	bl	800ca0c <__multiply>
 800cbf6:	6020      	str	r0, [r4, #0]
 800cbf8:	f8c0 9000 	str.w	r9, [r0]
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	e7e4      	b.n	800cbca <__pow5mult+0x6a>
 800cc00:	4638      	mov	r0, r7
 800cc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc06:	bf00      	nop
 800cc08:	0800f428 	.word	0x0800f428
 800cc0c:	0800f259 	.word	0x0800f259
 800cc10:	0800f2d9 	.word	0x0800f2d9

0800cc14 <__lshift>:
 800cc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc18:	460c      	mov	r4, r1
 800cc1a:	6849      	ldr	r1, [r1, #4]
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc22:	68a3      	ldr	r3, [r4, #8]
 800cc24:	4607      	mov	r7, r0
 800cc26:	4691      	mov	r9, r2
 800cc28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc2c:	f108 0601 	add.w	r6, r8, #1
 800cc30:	42b3      	cmp	r3, r6
 800cc32:	db0b      	blt.n	800cc4c <__lshift+0x38>
 800cc34:	4638      	mov	r0, r7
 800cc36:	f7ff fddd 	bl	800c7f4 <_Balloc>
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	b948      	cbnz	r0, 800cc52 <__lshift+0x3e>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	4b28      	ldr	r3, [pc, #160]	; (800cce4 <__lshift+0xd0>)
 800cc42:	4829      	ldr	r0, [pc, #164]	; (800cce8 <__lshift+0xd4>)
 800cc44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cc48:	f000 fd46 	bl	800d6d8 <__assert_func>
 800cc4c:	3101      	adds	r1, #1
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	e7ee      	b.n	800cc30 <__lshift+0x1c>
 800cc52:	2300      	movs	r3, #0
 800cc54:	f100 0114 	add.w	r1, r0, #20
 800cc58:	f100 0210 	add.w	r2, r0, #16
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	4553      	cmp	r3, sl
 800cc60:	db33      	blt.n	800ccca <__lshift+0xb6>
 800cc62:	6920      	ldr	r0, [r4, #16]
 800cc64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc68:	f104 0314 	add.w	r3, r4, #20
 800cc6c:	f019 091f 	ands.w	r9, r9, #31
 800cc70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc78:	d02b      	beq.n	800ccd2 <__lshift+0xbe>
 800cc7a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc7e:	468a      	mov	sl, r1
 800cc80:	2200      	movs	r2, #0
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	fa00 f009 	lsl.w	r0, r0, r9
 800cc88:	4310      	orrs	r0, r2
 800cc8a:	f84a 0b04 	str.w	r0, [sl], #4
 800cc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc92:	459c      	cmp	ip, r3
 800cc94:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc98:	d8f3      	bhi.n	800cc82 <__lshift+0x6e>
 800cc9a:	ebac 0304 	sub.w	r3, ip, r4
 800cc9e:	3b15      	subs	r3, #21
 800cca0:	f023 0303 	bic.w	r3, r3, #3
 800cca4:	3304      	adds	r3, #4
 800cca6:	f104 0015 	add.w	r0, r4, #21
 800ccaa:	4584      	cmp	ip, r0
 800ccac:	bf38      	it	cc
 800ccae:	2304      	movcc	r3, #4
 800ccb0:	50ca      	str	r2, [r1, r3]
 800ccb2:	b10a      	cbz	r2, 800ccb8 <__lshift+0xa4>
 800ccb4:	f108 0602 	add.w	r6, r8, #2
 800ccb8:	3e01      	subs	r6, #1
 800ccba:	4638      	mov	r0, r7
 800ccbc:	612e      	str	r6, [r5, #16]
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	f7ff fdd8 	bl	800c874 <_Bfree>
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccca:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccce:	3301      	adds	r3, #1
 800ccd0:	e7c5      	b.n	800cc5e <__lshift+0x4a>
 800ccd2:	3904      	subs	r1, #4
 800ccd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccdc:	459c      	cmp	ip, r3
 800ccde:	d8f9      	bhi.n	800ccd4 <__lshift+0xc0>
 800cce0:	e7ea      	b.n	800ccb8 <__lshift+0xa4>
 800cce2:	bf00      	nop
 800cce4:	0800f2c8 	.word	0x0800f2c8
 800cce8:	0800f2d9 	.word	0x0800f2d9

0800ccec <__mcmp>:
 800ccec:	b530      	push	{r4, r5, lr}
 800ccee:	6902      	ldr	r2, [r0, #16]
 800ccf0:	690c      	ldr	r4, [r1, #16]
 800ccf2:	1b12      	subs	r2, r2, r4
 800ccf4:	d10e      	bne.n	800cd14 <__mcmp+0x28>
 800ccf6:	f100 0314 	add.w	r3, r0, #20
 800ccfa:	3114      	adds	r1, #20
 800ccfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd0c:	42a5      	cmp	r5, r4
 800cd0e:	d003      	beq.n	800cd18 <__mcmp+0x2c>
 800cd10:	d305      	bcc.n	800cd1e <__mcmp+0x32>
 800cd12:	2201      	movs	r2, #1
 800cd14:	4610      	mov	r0, r2
 800cd16:	bd30      	pop	{r4, r5, pc}
 800cd18:	4283      	cmp	r3, r0
 800cd1a:	d3f3      	bcc.n	800cd04 <__mcmp+0x18>
 800cd1c:	e7fa      	b.n	800cd14 <__mcmp+0x28>
 800cd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd22:	e7f7      	b.n	800cd14 <__mcmp+0x28>

0800cd24 <__mdiff>:
 800cd24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	460c      	mov	r4, r1
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4690      	mov	r8, r2
 800cd32:	f7ff ffdb 	bl	800ccec <__mcmp>
 800cd36:	1e05      	subs	r5, r0, #0
 800cd38:	d110      	bne.n	800cd5c <__mdiff+0x38>
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f7ff fd59 	bl	800c7f4 <_Balloc>
 800cd42:	b930      	cbnz	r0, 800cd52 <__mdiff+0x2e>
 800cd44:	4b3a      	ldr	r3, [pc, #232]	; (800ce30 <__mdiff+0x10c>)
 800cd46:	4602      	mov	r2, r0
 800cd48:	f240 2137 	movw	r1, #567	; 0x237
 800cd4c:	4839      	ldr	r0, [pc, #228]	; (800ce34 <__mdiff+0x110>)
 800cd4e:	f000 fcc3 	bl	800d6d8 <__assert_func>
 800cd52:	2301      	movs	r3, #1
 800cd54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5c:	bfa4      	itt	ge
 800cd5e:	4643      	movge	r3, r8
 800cd60:	46a0      	movge	r8, r4
 800cd62:	4630      	mov	r0, r6
 800cd64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd68:	bfa6      	itte	ge
 800cd6a:	461c      	movge	r4, r3
 800cd6c:	2500      	movge	r5, #0
 800cd6e:	2501      	movlt	r5, #1
 800cd70:	f7ff fd40 	bl	800c7f4 <_Balloc>
 800cd74:	b920      	cbnz	r0, 800cd80 <__mdiff+0x5c>
 800cd76:	4b2e      	ldr	r3, [pc, #184]	; (800ce30 <__mdiff+0x10c>)
 800cd78:	4602      	mov	r2, r0
 800cd7a:	f240 2145 	movw	r1, #581	; 0x245
 800cd7e:	e7e5      	b.n	800cd4c <__mdiff+0x28>
 800cd80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd84:	6926      	ldr	r6, [r4, #16]
 800cd86:	60c5      	str	r5, [r0, #12]
 800cd88:	f104 0914 	add.w	r9, r4, #20
 800cd8c:	f108 0514 	add.w	r5, r8, #20
 800cd90:	f100 0e14 	add.w	lr, r0, #20
 800cd94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd9c:	f108 0210 	add.w	r2, r8, #16
 800cda0:	46f2      	mov	sl, lr
 800cda2:	2100      	movs	r1, #0
 800cda4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cda8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cdac:	fa11 f88b 	uxtah	r8, r1, fp
 800cdb0:	b299      	uxth	r1, r3
 800cdb2:	0c1b      	lsrs	r3, r3, #16
 800cdb4:	eba8 0801 	sub.w	r8, r8, r1
 800cdb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cdbc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cdc0:	fa1f f888 	uxth.w	r8, r8
 800cdc4:	1419      	asrs	r1, r3, #16
 800cdc6:	454e      	cmp	r6, r9
 800cdc8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cdcc:	f84a 3b04 	str.w	r3, [sl], #4
 800cdd0:	d8e8      	bhi.n	800cda4 <__mdiff+0x80>
 800cdd2:	1b33      	subs	r3, r6, r4
 800cdd4:	3b15      	subs	r3, #21
 800cdd6:	f023 0303 	bic.w	r3, r3, #3
 800cdda:	3304      	adds	r3, #4
 800cddc:	3415      	adds	r4, #21
 800cdde:	42a6      	cmp	r6, r4
 800cde0:	bf38      	it	cc
 800cde2:	2304      	movcc	r3, #4
 800cde4:	441d      	add	r5, r3
 800cde6:	4473      	add	r3, lr
 800cde8:	469e      	mov	lr, r3
 800cdea:	462e      	mov	r6, r5
 800cdec:	4566      	cmp	r6, ip
 800cdee:	d30e      	bcc.n	800ce0e <__mdiff+0xea>
 800cdf0:	f10c 0203 	add.w	r2, ip, #3
 800cdf4:	1b52      	subs	r2, r2, r5
 800cdf6:	f022 0203 	bic.w	r2, r2, #3
 800cdfa:	3d03      	subs	r5, #3
 800cdfc:	45ac      	cmp	ip, r5
 800cdfe:	bf38      	it	cc
 800ce00:	2200      	movcc	r2, #0
 800ce02:	4413      	add	r3, r2
 800ce04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ce08:	b17a      	cbz	r2, 800ce2a <__mdiff+0x106>
 800ce0a:	6107      	str	r7, [r0, #16]
 800ce0c:	e7a4      	b.n	800cd58 <__mdiff+0x34>
 800ce0e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce12:	fa11 f288 	uxtah	r2, r1, r8
 800ce16:	1414      	asrs	r4, r2, #16
 800ce18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce1c:	b292      	uxth	r2, r2
 800ce1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce22:	f84e 2b04 	str.w	r2, [lr], #4
 800ce26:	1421      	asrs	r1, r4, #16
 800ce28:	e7e0      	b.n	800cdec <__mdiff+0xc8>
 800ce2a:	3f01      	subs	r7, #1
 800ce2c:	e7ea      	b.n	800ce04 <__mdiff+0xe0>
 800ce2e:	bf00      	nop
 800ce30:	0800f2c8 	.word	0x0800f2c8
 800ce34:	0800f2d9 	.word	0x0800f2d9

0800ce38 <__d2b>:
 800ce38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce3c:	460f      	mov	r7, r1
 800ce3e:	2101      	movs	r1, #1
 800ce40:	ec59 8b10 	vmov	r8, r9, d0
 800ce44:	4616      	mov	r6, r2
 800ce46:	f7ff fcd5 	bl	800c7f4 <_Balloc>
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	b930      	cbnz	r0, 800ce5c <__d2b+0x24>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	4b24      	ldr	r3, [pc, #144]	; (800cee4 <__d2b+0xac>)
 800ce52:	4825      	ldr	r0, [pc, #148]	; (800cee8 <__d2b+0xb0>)
 800ce54:	f240 310f 	movw	r1, #783	; 0x30f
 800ce58:	f000 fc3e 	bl	800d6d8 <__assert_func>
 800ce5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce64:	bb2d      	cbnz	r5, 800ceb2 <__d2b+0x7a>
 800ce66:	9301      	str	r3, [sp, #4]
 800ce68:	f1b8 0300 	subs.w	r3, r8, #0
 800ce6c:	d026      	beq.n	800cebc <__d2b+0x84>
 800ce6e:	4668      	mov	r0, sp
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	f7ff fd87 	bl	800c984 <__lo0bits>
 800ce76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce7a:	b1e8      	cbz	r0, 800ceb8 <__d2b+0x80>
 800ce7c:	f1c0 0320 	rsb	r3, r0, #32
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	430b      	orrs	r3, r1
 800ce86:	40c2      	lsrs	r2, r0
 800ce88:	6163      	str	r3, [r4, #20]
 800ce8a:	9201      	str	r2, [sp, #4]
 800ce8c:	9b01      	ldr	r3, [sp, #4]
 800ce8e:	61a3      	str	r3, [r4, #24]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	bf14      	ite	ne
 800ce94:	2202      	movne	r2, #2
 800ce96:	2201      	moveq	r2, #1
 800ce98:	6122      	str	r2, [r4, #16]
 800ce9a:	b1bd      	cbz	r5, 800cecc <__d2b+0x94>
 800ce9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cea0:	4405      	add	r5, r0
 800cea2:	603d      	str	r5, [r7, #0]
 800cea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cea8:	6030      	str	r0, [r6, #0]
 800ceaa:	4620      	mov	r0, r4
 800ceac:	b003      	add	sp, #12
 800ceae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceb6:	e7d6      	b.n	800ce66 <__d2b+0x2e>
 800ceb8:	6161      	str	r1, [r4, #20]
 800ceba:	e7e7      	b.n	800ce8c <__d2b+0x54>
 800cebc:	a801      	add	r0, sp, #4
 800cebe:	f7ff fd61 	bl	800c984 <__lo0bits>
 800cec2:	9b01      	ldr	r3, [sp, #4]
 800cec4:	6163      	str	r3, [r4, #20]
 800cec6:	3020      	adds	r0, #32
 800cec8:	2201      	movs	r2, #1
 800ceca:	e7e5      	b.n	800ce98 <__d2b+0x60>
 800cecc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ced0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ced4:	6038      	str	r0, [r7, #0]
 800ced6:	6918      	ldr	r0, [r3, #16]
 800ced8:	f7ff fd34 	bl	800c944 <__hi0bits>
 800cedc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cee0:	e7e2      	b.n	800cea8 <__d2b+0x70>
 800cee2:	bf00      	nop
 800cee4:	0800f2c8 	.word	0x0800f2c8
 800cee8:	0800f2d9 	.word	0x0800f2d9

0800ceec <__ssputs_r>:
 800ceec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef0:	688e      	ldr	r6, [r1, #8]
 800cef2:	461f      	mov	r7, r3
 800cef4:	42be      	cmp	r6, r7
 800cef6:	680b      	ldr	r3, [r1, #0]
 800cef8:	4682      	mov	sl, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	4690      	mov	r8, r2
 800cefe:	d82c      	bhi.n	800cf5a <__ssputs_r+0x6e>
 800cf00:	898a      	ldrh	r2, [r1, #12]
 800cf02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf06:	d026      	beq.n	800cf56 <__ssputs_r+0x6a>
 800cf08:	6965      	ldr	r5, [r4, #20]
 800cf0a:	6909      	ldr	r1, [r1, #16]
 800cf0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf10:	eba3 0901 	sub.w	r9, r3, r1
 800cf14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf18:	1c7b      	adds	r3, r7, #1
 800cf1a:	444b      	add	r3, r9
 800cf1c:	106d      	asrs	r5, r5, #1
 800cf1e:	429d      	cmp	r5, r3
 800cf20:	bf38      	it	cc
 800cf22:	461d      	movcc	r5, r3
 800cf24:	0553      	lsls	r3, r2, #21
 800cf26:	d527      	bpl.n	800cf78 <__ssputs_r+0x8c>
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7fd fd4d 	bl	800a9c8 <_malloc_r>
 800cf2e:	4606      	mov	r6, r0
 800cf30:	b360      	cbz	r0, 800cf8c <__ssputs_r+0xa0>
 800cf32:	6921      	ldr	r1, [r4, #16]
 800cf34:	464a      	mov	r2, r9
 800cf36:	f000 fbc1 	bl	800d6bc <memcpy>
 800cf3a:	89a3      	ldrh	r3, [r4, #12]
 800cf3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf44:	81a3      	strh	r3, [r4, #12]
 800cf46:	6126      	str	r6, [r4, #16]
 800cf48:	6165      	str	r5, [r4, #20]
 800cf4a:	444e      	add	r6, r9
 800cf4c:	eba5 0509 	sub.w	r5, r5, r9
 800cf50:	6026      	str	r6, [r4, #0]
 800cf52:	60a5      	str	r5, [r4, #8]
 800cf54:	463e      	mov	r6, r7
 800cf56:	42be      	cmp	r6, r7
 800cf58:	d900      	bls.n	800cf5c <__ssputs_r+0x70>
 800cf5a:	463e      	mov	r6, r7
 800cf5c:	6820      	ldr	r0, [r4, #0]
 800cf5e:	4632      	mov	r2, r6
 800cf60:	4641      	mov	r1, r8
 800cf62:	f000 fb6f 	bl	800d644 <memmove>
 800cf66:	68a3      	ldr	r3, [r4, #8]
 800cf68:	1b9b      	subs	r3, r3, r6
 800cf6a:	60a3      	str	r3, [r4, #8]
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	4433      	add	r3, r6
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	2000      	movs	r0, #0
 800cf74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf78:	462a      	mov	r2, r5
 800cf7a:	f000 fbf3 	bl	800d764 <_realloc_r>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d1e0      	bne.n	800cf46 <__ssputs_r+0x5a>
 800cf84:	6921      	ldr	r1, [r4, #16]
 800cf86:	4650      	mov	r0, sl
 800cf88:	f7ff fbe8 	bl	800c75c <_free_r>
 800cf8c:	230c      	movs	r3, #12
 800cf8e:	f8ca 3000 	str.w	r3, [sl]
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf98:	81a3      	strh	r3, [r4, #12]
 800cf9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9e:	e7e9      	b.n	800cf74 <__ssputs_r+0x88>

0800cfa0 <_svfiprintf_r>:
 800cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa4:	4698      	mov	r8, r3
 800cfa6:	898b      	ldrh	r3, [r1, #12]
 800cfa8:	061b      	lsls	r3, r3, #24
 800cfaa:	b09d      	sub	sp, #116	; 0x74
 800cfac:	4607      	mov	r7, r0
 800cfae:	460d      	mov	r5, r1
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	d50e      	bpl.n	800cfd2 <_svfiprintf_r+0x32>
 800cfb4:	690b      	ldr	r3, [r1, #16]
 800cfb6:	b963      	cbnz	r3, 800cfd2 <_svfiprintf_r+0x32>
 800cfb8:	2140      	movs	r1, #64	; 0x40
 800cfba:	f7fd fd05 	bl	800a9c8 <_malloc_r>
 800cfbe:	6028      	str	r0, [r5, #0]
 800cfc0:	6128      	str	r0, [r5, #16]
 800cfc2:	b920      	cbnz	r0, 800cfce <_svfiprintf_r+0x2e>
 800cfc4:	230c      	movs	r3, #12
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfcc:	e0d0      	b.n	800d170 <_svfiprintf_r+0x1d0>
 800cfce:	2340      	movs	r3, #64	; 0x40
 800cfd0:	616b      	str	r3, [r5, #20]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd6:	2320      	movs	r3, #32
 800cfd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe0:	2330      	movs	r3, #48	; 0x30
 800cfe2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d188 <_svfiprintf_r+0x1e8>
 800cfe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfea:	f04f 0901 	mov.w	r9, #1
 800cfee:	4623      	mov	r3, r4
 800cff0:	469a      	mov	sl, r3
 800cff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cff6:	b10a      	cbz	r2, 800cffc <_svfiprintf_r+0x5c>
 800cff8:	2a25      	cmp	r2, #37	; 0x25
 800cffa:	d1f9      	bne.n	800cff0 <_svfiprintf_r+0x50>
 800cffc:	ebba 0b04 	subs.w	fp, sl, r4
 800d000:	d00b      	beq.n	800d01a <_svfiprintf_r+0x7a>
 800d002:	465b      	mov	r3, fp
 800d004:	4622      	mov	r2, r4
 800d006:	4629      	mov	r1, r5
 800d008:	4638      	mov	r0, r7
 800d00a:	f7ff ff6f 	bl	800ceec <__ssputs_r>
 800d00e:	3001      	adds	r0, #1
 800d010:	f000 80a9 	beq.w	800d166 <_svfiprintf_r+0x1c6>
 800d014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d016:	445a      	add	r2, fp
 800d018:	9209      	str	r2, [sp, #36]	; 0x24
 800d01a:	f89a 3000 	ldrb.w	r3, [sl]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 80a1 	beq.w	800d166 <_svfiprintf_r+0x1c6>
 800d024:	2300      	movs	r3, #0
 800d026:	f04f 32ff 	mov.w	r2, #4294967295
 800d02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02e:	f10a 0a01 	add.w	sl, sl, #1
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	9307      	str	r3, [sp, #28]
 800d036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d03a:	931a      	str	r3, [sp, #104]	; 0x68
 800d03c:	4654      	mov	r4, sl
 800d03e:	2205      	movs	r2, #5
 800d040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d044:	4850      	ldr	r0, [pc, #320]	; (800d188 <_svfiprintf_r+0x1e8>)
 800d046:	f7f3 f8eb 	bl	8000220 <memchr>
 800d04a:	9a04      	ldr	r2, [sp, #16]
 800d04c:	b9d8      	cbnz	r0, 800d086 <_svfiprintf_r+0xe6>
 800d04e:	06d0      	lsls	r0, r2, #27
 800d050:	bf44      	itt	mi
 800d052:	2320      	movmi	r3, #32
 800d054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d058:	0711      	lsls	r1, r2, #28
 800d05a:	bf44      	itt	mi
 800d05c:	232b      	movmi	r3, #43	; 0x2b
 800d05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d062:	f89a 3000 	ldrb.w	r3, [sl]
 800d066:	2b2a      	cmp	r3, #42	; 0x2a
 800d068:	d015      	beq.n	800d096 <_svfiprintf_r+0xf6>
 800d06a:	9a07      	ldr	r2, [sp, #28]
 800d06c:	4654      	mov	r4, sl
 800d06e:	2000      	movs	r0, #0
 800d070:	f04f 0c0a 	mov.w	ip, #10
 800d074:	4621      	mov	r1, r4
 800d076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d07a:	3b30      	subs	r3, #48	; 0x30
 800d07c:	2b09      	cmp	r3, #9
 800d07e:	d94d      	bls.n	800d11c <_svfiprintf_r+0x17c>
 800d080:	b1b0      	cbz	r0, 800d0b0 <_svfiprintf_r+0x110>
 800d082:	9207      	str	r2, [sp, #28]
 800d084:	e014      	b.n	800d0b0 <_svfiprintf_r+0x110>
 800d086:	eba0 0308 	sub.w	r3, r0, r8
 800d08a:	fa09 f303 	lsl.w	r3, r9, r3
 800d08e:	4313      	orrs	r3, r2
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	46a2      	mov	sl, r4
 800d094:	e7d2      	b.n	800d03c <_svfiprintf_r+0x9c>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	1d19      	adds	r1, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9103      	str	r1, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfbb      	ittet	lt
 800d0a2:	425b      	neglt	r3, r3
 800d0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d0a8:	9307      	strge	r3, [sp, #28]
 800d0aa:	9307      	strlt	r3, [sp, #28]
 800d0ac:	bfb8      	it	lt
 800d0ae:	9204      	strlt	r2, [sp, #16]
 800d0b0:	7823      	ldrb	r3, [r4, #0]
 800d0b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d0b4:	d10c      	bne.n	800d0d0 <_svfiprintf_r+0x130>
 800d0b6:	7863      	ldrb	r3, [r4, #1]
 800d0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ba:	d134      	bne.n	800d126 <_svfiprintf_r+0x186>
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	1d1a      	adds	r2, r3, #4
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	9203      	str	r2, [sp, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	bfb8      	it	lt
 800d0c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0cc:	3402      	adds	r4, #2
 800d0ce:	9305      	str	r3, [sp, #20]
 800d0d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d198 <_svfiprintf_r+0x1f8>
 800d0d4:	7821      	ldrb	r1, [r4, #0]
 800d0d6:	2203      	movs	r2, #3
 800d0d8:	4650      	mov	r0, sl
 800d0da:	f7f3 f8a1 	bl	8000220 <memchr>
 800d0de:	b138      	cbz	r0, 800d0f0 <_svfiprintf_r+0x150>
 800d0e0:	9b04      	ldr	r3, [sp, #16]
 800d0e2:	eba0 000a 	sub.w	r0, r0, sl
 800d0e6:	2240      	movs	r2, #64	; 0x40
 800d0e8:	4082      	lsls	r2, r0
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	3401      	adds	r4, #1
 800d0ee:	9304      	str	r3, [sp, #16]
 800d0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f4:	4825      	ldr	r0, [pc, #148]	; (800d18c <_svfiprintf_r+0x1ec>)
 800d0f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0fa:	2206      	movs	r2, #6
 800d0fc:	f7f3 f890 	bl	8000220 <memchr>
 800d100:	2800      	cmp	r0, #0
 800d102:	d038      	beq.n	800d176 <_svfiprintf_r+0x1d6>
 800d104:	4b22      	ldr	r3, [pc, #136]	; (800d190 <_svfiprintf_r+0x1f0>)
 800d106:	bb1b      	cbnz	r3, 800d150 <_svfiprintf_r+0x1b0>
 800d108:	9b03      	ldr	r3, [sp, #12]
 800d10a:	3307      	adds	r3, #7
 800d10c:	f023 0307 	bic.w	r3, r3, #7
 800d110:	3308      	adds	r3, #8
 800d112:	9303      	str	r3, [sp, #12]
 800d114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d116:	4433      	add	r3, r6
 800d118:	9309      	str	r3, [sp, #36]	; 0x24
 800d11a:	e768      	b.n	800cfee <_svfiprintf_r+0x4e>
 800d11c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d120:	460c      	mov	r4, r1
 800d122:	2001      	movs	r0, #1
 800d124:	e7a6      	b.n	800d074 <_svfiprintf_r+0xd4>
 800d126:	2300      	movs	r3, #0
 800d128:	3401      	adds	r4, #1
 800d12a:	9305      	str	r3, [sp, #20]
 800d12c:	4619      	mov	r1, r3
 800d12e:	f04f 0c0a 	mov.w	ip, #10
 800d132:	4620      	mov	r0, r4
 800d134:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d138:	3a30      	subs	r2, #48	; 0x30
 800d13a:	2a09      	cmp	r2, #9
 800d13c:	d903      	bls.n	800d146 <_svfiprintf_r+0x1a6>
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d0c6      	beq.n	800d0d0 <_svfiprintf_r+0x130>
 800d142:	9105      	str	r1, [sp, #20]
 800d144:	e7c4      	b.n	800d0d0 <_svfiprintf_r+0x130>
 800d146:	fb0c 2101 	mla	r1, ip, r1, r2
 800d14a:	4604      	mov	r4, r0
 800d14c:	2301      	movs	r3, #1
 800d14e:	e7f0      	b.n	800d132 <_svfiprintf_r+0x192>
 800d150:	ab03      	add	r3, sp, #12
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	462a      	mov	r2, r5
 800d156:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <_svfiprintf_r+0x1f4>)
 800d158:	a904      	add	r1, sp, #16
 800d15a:	4638      	mov	r0, r7
 800d15c:	f7fd fd60 	bl	800ac20 <_printf_float>
 800d160:	1c42      	adds	r2, r0, #1
 800d162:	4606      	mov	r6, r0
 800d164:	d1d6      	bne.n	800d114 <_svfiprintf_r+0x174>
 800d166:	89ab      	ldrh	r3, [r5, #12]
 800d168:	065b      	lsls	r3, r3, #25
 800d16a:	f53f af2d 	bmi.w	800cfc8 <_svfiprintf_r+0x28>
 800d16e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d170:	b01d      	add	sp, #116	; 0x74
 800d172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d176:	ab03      	add	r3, sp, #12
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	462a      	mov	r2, r5
 800d17c:	4b05      	ldr	r3, [pc, #20]	; (800d194 <_svfiprintf_r+0x1f4>)
 800d17e:	a904      	add	r1, sp, #16
 800d180:	4638      	mov	r0, r7
 800d182:	f7fd fff1 	bl	800b168 <_printf_i>
 800d186:	e7eb      	b.n	800d160 <_svfiprintf_r+0x1c0>
 800d188:	0800f434 	.word	0x0800f434
 800d18c:	0800f43e 	.word	0x0800f43e
 800d190:	0800ac21 	.word	0x0800ac21
 800d194:	0800ceed 	.word	0x0800ceed
 800d198:	0800f43a 	.word	0x0800f43a

0800d19c <__sfputc_r>:
 800d19c:	6893      	ldr	r3, [r2, #8]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	b410      	push	{r4}
 800d1a4:	6093      	str	r3, [r2, #8]
 800d1a6:	da08      	bge.n	800d1ba <__sfputc_r+0x1e>
 800d1a8:	6994      	ldr	r4, [r2, #24]
 800d1aa:	42a3      	cmp	r3, r4
 800d1ac:	db01      	blt.n	800d1b2 <__sfputc_r+0x16>
 800d1ae:	290a      	cmp	r1, #10
 800d1b0:	d103      	bne.n	800d1ba <__sfputc_r+0x1e>
 800d1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b6:	f7fe bb31 	b.w	800b81c <__swbuf_r>
 800d1ba:	6813      	ldr	r3, [r2, #0]
 800d1bc:	1c58      	adds	r0, r3, #1
 800d1be:	6010      	str	r0, [r2, #0]
 800d1c0:	7019      	strb	r1, [r3, #0]
 800d1c2:	4608      	mov	r0, r1
 800d1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <__sfputs_r>:
 800d1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	460f      	mov	r7, r1
 800d1d0:	4614      	mov	r4, r2
 800d1d2:	18d5      	adds	r5, r2, r3
 800d1d4:	42ac      	cmp	r4, r5
 800d1d6:	d101      	bne.n	800d1dc <__sfputs_r+0x12>
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e007      	b.n	800d1ec <__sfputs_r+0x22>
 800d1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e0:	463a      	mov	r2, r7
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ffda 	bl	800d19c <__sfputc_r>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d1f3      	bne.n	800d1d4 <__sfputs_r+0xa>
 800d1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1f0 <_vfiprintf_r>:
 800d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	460d      	mov	r5, r1
 800d1f6:	b09d      	sub	sp, #116	; 0x74
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	4698      	mov	r8, r3
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	b118      	cbz	r0, 800d208 <_vfiprintf_r+0x18>
 800d200:	6a03      	ldr	r3, [r0, #32]
 800d202:	b90b      	cbnz	r3, 800d208 <_vfiprintf_r+0x18>
 800d204:	f7fe f94c 	bl	800b4a0 <__sinit>
 800d208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d20a:	07d9      	lsls	r1, r3, #31
 800d20c:	d405      	bmi.n	800d21a <_vfiprintf_r+0x2a>
 800d20e:	89ab      	ldrh	r3, [r5, #12]
 800d210:	059a      	lsls	r2, r3, #22
 800d212:	d402      	bmi.n	800d21a <_vfiprintf_r+0x2a>
 800d214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d216:	f7fe fc23 	bl	800ba60 <__retarget_lock_acquire_recursive>
 800d21a:	89ab      	ldrh	r3, [r5, #12]
 800d21c:	071b      	lsls	r3, r3, #28
 800d21e:	d501      	bpl.n	800d224 <_vfiprintf_r+0x34>
 800d220:	692b      	ldr	r3, [r5, #16]
 800d222:	b99b      	cbnz	r3, 800d24c <_vfiprintf_r+0x5c>
 800d224:	4629      	mov	r1, r5
 800d226:	4630      	mov	r0, r6
 800d228:	f7fe fb36 	bl	800b898 <__swsetup_r>
 800d22c:	b170      	cbz	r0, 800d24c <_vfiprintf_r+0x5c>
 800d22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d230:	07dc      	lsls	r4, r3, #31
 800d232:	d504      	bpl.n	800d23e <_vfiprintf_r+0x4e>
 800d234:	f04f 30ff 	mov.w	r0, #4294967295
 800d238:	b01d      	add	sp, #116	; 0x74
 800d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	0598      	lsls	r0, r3, #22
 800d242:	d4f7      	bmi.n	800d234 <_vfiprintf_r+0x44>
 800d244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d246:	f7fe fc0c 	bl	800ba62 <__retarget_lock_release_recursive>
 800d24a:	e7f3      	b.n	800d234 <_vfiprintf_r+0x44>
 800d24c:	2300      	movs	r3, #0
 800d24e:	9309      	str	r3, [sp, #36]	; 0x24
 800d250:	2320      	movs	r3, #32
 800d252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d256:	f8cd 800c 	str.w	r8, [sp, #12]
 800d25a:	2330      	movs	r3, #48	; 0x30
 800d25c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d410 <_vfiprintf_r+0x220>
 800d260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d264:	f04f 0901 	mov.w	r9, #1
 800d268:	4623      	mov	r3, r4
 800d26a:	469a      	mov	sl, r3
 800d26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d270:	b10a      	cbz	r2, 800d276 <_vfiprintf_r+0x86>
 800d272:	2a25      	cmp	r2, #37	; 0x25
 800d274:	d1f9      	bne.n	800d26a <_vfiprintf_r+0x7a>
 800d276:	ebba 0b04 	subs.w	fp, sl, r4
 800d27a:	d00b      	beq.n	800d294 <_vfiprintf_r+0xa4>
 800d27c:	465b      	mov	r3, fp
 800d27e:	4622      	mov	r2, r4
 800d280:	4629      	mov	r1, r5
 800d282:	4630      	mov	r0, r6
 800d284:	f7ff ffa1 	bl	800d1ca <__sfputs_r>
 800d288:	3001      	adds	r0, #1
 800d28a:	f000 80a9 	beq.w	800d3e0 <_vfiprintf_r+0x1f0>
 800d28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d290:	445a      	add	r2, fp
 800d292:	9209      	str	r2, [sp, #36]	; 0x24
 800d294:	f89a 3000 	ldrb.w	r3, [sl]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 80a1 	beq.w	800d3e0 <_vfiprintf_r+0x1f0>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2a8:	f10a 0a01 	add.w	sl, sl, #1
 800d2ac:	9304      	str	r3, [sp, #16]
 800d2ae:	9307      	str	r3, [sp, #28]
 800d2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d2b6:	4654      	mov	r4, sl
 800d2b8:	2205      	movs	r2, #5
 800d2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2be:	4854      	ldr	r0, [pc, #336]	; (800d410 <_vfiprintf_r+0x220>)
 800d2c0:	f7f2 ffae 	bl	8000220 <memchr>
 800d2c4:	9a04      	ldr	r2, [sp, #16]
 800d2c6:	b9d8      	cbnz	r0, 800d300 <_vfiprintf_r+0x110>
 800d2c8:	06d1      	lsls	r1, r2, #27
 800d2ca:	bf44      	itt	mi
 800d2cc:	2320      	movmi	r3, #32
 800d2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2d2:	0713      	lsls	r3, r2, #28
 800d2d4:	bf44      	itt	mi
 800d2d6:	232b      	movmi	r3, #43	; 0x2b
 800d2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2e2:	d015      	beq.n	800d310 <_vfiprintf_r+0x120>
 800d2e4:	9a07      	ldr	r2, [sp, #28]
 800d2e6:	4654      	mov	r4, sl
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f04f 0c0a 	mov.w	ip, #10
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2f4:	3b30      	subs	r3, #48	; 0x30
 800d2f6:	2b09      	cmp	r3, #9
 800d2f8:	d94d      	bls.n	800d396 <_vfiprintf_r+0x1a6>
 800d2fa:	b1b0      	cbz	r0, 800d32a <_vfiprintf_r+0x13a>
 800d2fc:	9207      	str	r2, [sp, #28]
 800d2fe:	e014      	b.n	800d32a <_vfiprintf_r+0x13a>
 800d300:	eba0 0308 	sub.w	r3, r0, r8
 800d304:	fa09 f303 	lsl.w	r3, r9, r3
 800d308:	4313      	orrs	r3, r2
 800d30a:	9304      	str	r3, [sp, #16]
 800d30c:	46a2      	mov	sl, r4
 800d30e:	e7d2      	b.n	800d2b6 <_vfiprintf_r+0xc6>
 800d310:	9b03      	ldr	r3, [sp, #12]
 800d312:	1d19      	adds	r1, r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	9103      	str	r1, [sp, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bfbb      	ittet	lt
 800d31c:	425b      	neglt	r3, r3
 800d31e:	f042 0202 	orrlt.w	r2, r2, #2
 800d322:	9307      	strge	r3, [sp, #28]
 800d324:	9307      	strlt	r3, [sp, #28]
 800d326:	bfb8      	it	lt
 800d328:	9204      	strlt	r2, [sp, #16]
 800d32a:	7823      	ldrb	r3, [r4, #0]
 800d32c:	2b2e      	cmp	r3, #46	; 0x2e
 800d32e:	d10c      	bne.n	800d34a <_vfiprintf_r+0x15a>
 800d330:	7863      	ldrb	r3, [r4, #1]
 800d332:	2b2a      	cmp	r3, #42	; 0x2a
 800d334:	d134      	bne.n	800d3a0 <_vfiprintf_r+0x1b0>
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	1d1a      	adds	r2, r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	9203      	str	r2, [sp, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfb8      	it	lt
 800d342:	f04f 33ff 	movlt.w	r3, #4294967295
 800d346:	3402      	adds	r4, #2
 800d348:	9305      	str	r3, [sp, #20]
 800d34a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d420 <_vfiprintf_r+0x230>
 800d34e:	7821      	ldrb	r1, [r4, #0]
 800d350:	2203      	movs	r2, #3
 800d352:	4650      	mov	r0, sl
 800d354:	f7f2 ff64 	bl	8000220 <memchr>
 800d358:	b138      	cbz	r0, 800d36a <_vfiprintf_r+0x17a>
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	eba0 000a 	sub.w	r0, r0, sl
 800d360:	2240      	movs	r2, #64	; 0x40
 800d362:	4082      	lsls	r2, r0
 800d364:	4313      	orrs	r3, r2
 800d366:	3401      	adds	r4, #1
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36e:	4829      	ldr	r0, [pc, #164]	; (800d414 <_vfiprintf_r+0x224>)
 800d370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d374:	2206      	movs	r2, #6
 800d376:	f7f2 ff53 	bl	8000220 <memchr>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d03f      	beq.n	800d3fe <_vfiprintf_r+0x20e>
 800d37e:	4b26      	ldr	r3, [pc, #152]	; (800d418 <_vfiprintf_r+0x228>)
 800d380:	bb1b      	cbnz	r3, 800d3ca <_vfiprintf_r+0x1da>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	3307      	adds	r3, #7
 800d386:	f023 0307 	bic.w	r3, r3, #7
 800d38a:	3308      	adds	r3, #8
 800d38c:	9303      	str	r3, [sp, #12]
 800d38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d390:	443b      	add	r3, r7
 800d392:	9309      	str	r3, [sp, #36]	; 0x24
 800d394:	e768      	b.n	800d268 <_vfiprintf_r+0x78>
 800d396:	fb0c 3202 	mla	r2, ip, r2, r3
 800d39a:	460c      	mov	r4, r1
 800d39c:	2001      	movs	r0, #1
 800d39e:	e7a6      	b.n	800d2ee <_vfiprintf_r+0xfe>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	3401      	adds	r4, #1
 800d3a4:	9305      	str	r3, [sp, #20]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	f04f 0c0a 	mov.w	ip, #10
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b2:	3a30      	subs	r2, #48	; 0x30
 800d3b4:	2a09      	cmp	r2, #9
 800d3b6:	d903      	bls.n	800d3c0 <_vfiprintf_r+0x1d0>
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d0c6      	beq.n	800d34a <_vfiprintf_r+0x15a>
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	e7c4      	b.n	800d34a <_vfiprintf_r+0x15a>
 800d3c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e7f0      	b.n	800d3ac <_vfiprintf_r+0x1bc>
 800d3ca:	ab03      	add	r3, sp, #12
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	462a      	mov	r2, r5
 800d3d0:	4b12      	ldr	r3, [pc, #72]	; (800d41c <_vfiprintf_r+0x22c>)
 800d3d2:	a904      	add	r1, sp, #16
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f7fd fc23 	bl	800ac20 <_printf_float>
 800d3da:	4607      	mov	r7, r0
 800d3dc:	1c78      	adds	r0, r7, #1
 800d3de:	d1d6      	bne.n	800d38e <_vfiprintf_r+0x19e>
 800d3e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3e2:	07d9      	lsls	r1, r3, #31
 800d3e4:	d405      	bmi.n	800d3f2 <_vfiprintf_r+0x202>
 800d3e6:	89ab      	ldrh	r3, [r5, #12]
 800d3e8:	059a      	lsls	r2, r3, #22
 800d3ea:	d402      	bmi.n	800d3f2 <_vfiprintf_r+0x202>
 800d3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3ee:	f7fe fb38 	bl	800ba62 <__retarget_lock_release_recursive>
 800d3f2:	89ab      	ldrh	r3, [r5, #12]
 800d3f4:	065b      	lsls	r3, r3, #25
 800d3f6:	f53f af1d 	bmi.w	800d234 <_vfiprintf_r+0x44>
 800d3fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3fc:	e71c      	b.n	800d238 <_vfiprintf_r+0x48>
 800d3fe:	ab03      	add	r3, sp, #12
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	462a      	mov	r2, r5
 800d404:	4b05      	ldr	r3, [pc, #20]	; (800d41c <_vfiprintf_r+0x22c>)
 800d406:	a904      	add	r1, sp, #16
 800d408:	4630      	mov	r0, r6
 800d40a:	f7fd fead 	bl	800b168 <_printf_i>
 800d40e:	e7e4      	b.n	800d3da <_vfiprintf_r+0x1ea>
 800d410:	0800f434 	.word	0x0800f434
 800d414:	0800f43e 	.word	0x0800f43e
 800d418:	0800ac21 	.word	0x0800ac21
 800d41c:	0800d1cb 	.word	0x0800d1cb
 800d420:	0800f43a 	.word	0x0800f43a

0800d424 <__sflush_r>:
 800d424:	898a      	ldrh	r2, [r1, #12]
 800d426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d42a:	4605      	mov	r5, r0
 800d42c:	0710      	lsls	r0, r2, #28
 800d42e:	460c      	mov	r4, r1
 800d430:	d458      	bmi.n	800d4e4 <__sflush_r+0xc0>
 800d432:	684b      	ldr	r3, [r1, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	dc05      	bgt.n	800d444 <__sflush_r+0x20>
 800d438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	dc02      	bgt.n	800d444 <__sflush_r+0x20>
 800d43e:	2000      	movs	r0, #0
 800d440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d446:	2e00      	cmp	r6, #0
 800d448:	d0f9      	beq.n	800d43e <__sflush_r+0x1a>
 800d44a:	2300      	movs	r3, #0
 800d44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d450:	682f      	ldr	r7, [r5, #0]
 800d452:	6a21      	ldr	r1, [r4, #32]
 800d454:	602b      	str	r3, [r5, #0]
 800d456:	d032      	beq.n	800d4be <__sflush_r+0x9a>
 800d458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	075a      	lsls	r2, r3, #29
 800d45e:	d505      	bpl.n	800d46c <__sflush_r+0x48>
 800d460:	6863      	ldr	r3, [r4, #4]
 800d462:	1ac0      	subs	r0, r0, r3
 800d464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d466:	b10b      	cbz	r3, 800d46c <__sflush_r+0x48>
 800d468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d46a:	1ac0      	subs	r0, r0, r3
 800d46c:	2300      	movs	r3, #0
 800d46e:	4602      	mov	r2, r0
 800d470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d472:	6a21      	ldr	r1, [r4, #32]
 800d474:	4628      	mov	r0, r5
 800d476:	47b0      	blx	r6
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	89a3      	ldrh	r3, [r4, #12]
 800d47c:	d106      	bne.n	800d48c <__sflush_r+0x68>
 800d47e:	6829      	ldr	r1, [r5, #0]
 800d480:	291d      	cmp	r1, #29
 800d482:	d82b      	bhi.n	800d4dc <__sflush_r+0xb8>
 800d484:	4a29      	ldr	r2, [pc, #164]	; (800d52c <__sflush_r+0x108>)
 800d486:	410a      	asrs	r2, r1
 800d488:	07d6      	lsls	r6, r2, #31
 800d48a:	d427      	bmi.n	800d4dc <__sflush_r+0xb8>
 800d48c:	2200      	movs	r2, #0
 800d48e:	6062      	str	r2, [r4, #4]
 800d490:	04d9      	lsls	r1, r3, #19
 800d492:	6922      	ldr	r2, [r4, #16]
 800d494:	6022      	str	r2, [r4, #0]
 800d496:	d504      	bpl.n	800d4a2 <__sflush_r+0x7e>
 800d498:	1c42      	adds	r2, r0, #1
 800d49a:	d101      	bne.n	800d4a0 <__sflush_r+0x7c>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	b903      	cbnz	r3, 800d4a2 <__sflush_r+0x7e>
 800d4a0:	6560      	str	r0, [r4, #84]	; 0x54
 800d4a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4a4:	602f      	str	r7, [r5, #0]
 800d4a6:	2900      	cmp	r1, #0
 800d4a8:	d0c9      	beq.n	800d43e <__sflush_r+0x1a>
 800d4aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4ae:	4299      	cmp	r1, r3
 800d4b0:	d002      	beq.n	800d4b8 <__sflush_r+0x94>
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f7ff f952 	bl	800c75c <_free_r>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	6360      	str	r0, [r4, #52]	; 0x34
 800d4bc:	e7c0      	b.n	800d440 <__sflush_r+0x1c>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	47b0      	blx	r6
 800d4c4:	1c41      	adds	r1, r0, #1
 800d4c6:	d1c8      	bne.n	800d45a <__sflush_r+0x36>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0c5      	beq.n	800d45a <__sflush_r+0x36>
 800d4ce:	2b1d      	cmp	r3, #29
 800d4d0:	d001      	beq.n	800d4d6 <__sflush_r+0xb2>
 800d4d2:	2b16      	cmp	r3, #22
 800d4d4:	d101      	bne.n	800d4da <__sflush_r+0xb6>
 800d4d6:	602f      	str	r7, [r5, #0]
 800d4d8:	e7b1      	b.n	800d43e <__sflush_r+0x1a>
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	e7ad      	b.n	800d440 <__sflush_r+0x1c>
 800d4e4:	690f      	ldr	r7, [r1, #16]
 800d4e6:	2f00      	cmp	r7, #0
 800d4e8:	d0a9      	beq.n	800d43e <__sflush_r+0x1a>
 800d4ea:	0793      	lsls	r3, r2, #30
 800d4ec:	680e      	ldr	r6, [r1, #0]
 800d4ee:	bf08      	it	eq
 800d4f0:	694b      	ldreq	r3, [r1, #20]
 800d4f2:	600f      	str	r7, [r1, #0]
 800d4f4:	bf18      	it	ne
 800d4f6:	2300      	movne	r3, #0
 800d4f8:	eba6 0807 	sub.w	r8, r6, r7
 800d4fc:	608b      	str	r3, [r1, #8]
 800d4fe:	f1b8 0f00 	cmp.w	r8, #0
 800d502:	dd9c      	ble.n	800d43e <__sflush_r+0x1a>
 800d504:	6a21      	ldr	r1, [r4, #32]
 800d506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d508:	4643      	mov	r3, r8
 800d50a:	463a      	mov	r2, r7
 800d50c:	4628      	mov	r0, r5
 800d50e:	47b0      	blx	r6
 800d510:	2800      	cmp	r0, #0
 800d512:	dc06      	bgt.n	800d522 <__sflush_r+0xfe>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	e78e      	b.n	800d440 <__sflush_r+0x1c>
 800d522:	4407      	add	r7, r0
 800d524:	eba8 0800 	sub.w	r8, r8, r0
 800d528:	e7e9      	b.n	800d4fe <__sflush_r+0xda>
 800d52a:	bf00      	nop
 800d52c:	dfbffffe 	.word	0xdfbffffe

0800d530 <_fflush_r>:
 800d530:	b538      	push	{r3, r4, r5, lr}
 800d532:	690b      	ldr	r3, [r1, #16]
 800d534:	4605      	mov	r5, r0
 800d536:	460c      	mov	r4, r1
 800d538:	b913      	cbnz	r3, 800d540 <_fflush_r+0x10>
 800d53a:	2500      	movs	r5, #0
 800d53c:	4628      	mov	r0, r5
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	b118      	cbz	r0, 800d54a <_fflush_r+0x1a>
 800d542:	6a03      	ldr	r3, [r0, #32]
 800d544:	b90b      	cbnz	r3, 800d54a <_fflush_r+0x1a>
 800d546:	f7fd ffab 	bl	800b4a0 <__sinit>
 800d54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d0f3      	beq.n	800d53a <_fflush_r+0xa>
 800d552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d554:	07d0      	lsls	r0, r2, #31
 800d556:	d404      	bmi.n	800d562 <_fflush_r+0x32>
 800d558:	0599      	lsls	r1, r3, #22
 800d55a:	d402      	bmi.n	800d562 <_fflush_r+0x32>
 800d55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d55e:	f7fe fa7f 	bl	800ba60 <__retarget_lock_acquire_recursive>
 800d562:	4628      	mov	r0, r5
 800d564:	4621      	mov	r1, r4
 800d566:	f7ff ff5d 	bl	800d424 <__sflush_r>
 800d56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d56c:	07da      	lsls	r2, r3, #31
 800d56e:	4605      	mov	r5, r0
 800d570:	d4e4      	bmi.n	800d53c <_fflush_r+0xc>
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	059b      	lsls	r3, r3, #22
 800d576:	d4e1      	bmi.n	800d53c <_fflush_r+0xc>
 800d578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d57a:	f7fe fa72 	bl	800ba62 <__retarget_lock_release_recursive>
 800d57e:	e7dd      	b.n	800d53c <_fflush_r+0xc>

0800d580 <__swhatbuf_r>:
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	460c      	mov	r4, r1
 800d584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d588:	2900      	cmp	r1, #0
 800d58a:	b096      	sub	sp, #88	; 0x58
 800d58c:	4615      	mov	r5, r2
 800d58e:	461e      	mov	r6, r3
 800d590:	da0d      	bge.n	800d5ae <__swhatbuf_r+0x2e>
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d598:	f04f 0100 	mov.w	r1, #0
 800d59c:	bf0c      	ite	eq
 800d59e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d5a2:	2340      	movne	r3, #64	; 0x40
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	6031      	str	r1, [r6, #0]
 800d5a8:	602b      	str	r3, [r5, #0]
 800d5aa:	b016      	add	sp, #88	; 0x58
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}
 800d5ae:	466a      	mov	r2, sp
 800d5b0:	f000 f862 	bl	800d678 <_fstat_r>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	dbec      	blt.n	800d592 <__swhatbuf_r+0x12>
 800d5b8:	9901      	ldr	r1, [sp, #4]
 800d5ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5c2:	4259      	negs	r1, r3
 800d5c4:	4159      	adcs	r1, r3
 800d5c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5ca:	e7eb      	b.n	800d5a4 <__swhatbuf_r+0x24>

0800d5cc <__smakebuf_r>:
 800d5cc:	898b      	ldrh	r3, [r1, #12]
 800d5ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5d0:	079d      	lsls	r5, r3, #30
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	d507      	bpl.n	800d5e8 <__smakebuf_r+0x1c>
 800d5d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	6163      	str	r3, [r4, #20]
 800d5e4:	b002      	add	sp, #8
 800d5e6:	bd70      	pop	{r4, r5, r6, pc}
 800d5e8:	ab01      	add	r3, sp, #4
 800d5ea:	466a      	mov	r2, sp
 800d5ec:	f7ff ffc8 	bl	800d580 <__swhatbuf_r>
 800d5f0:	9900      	ldr	r1, [sp, #0]
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7fd f9e7 	bl	800a9c8 <_malloc_r>
 800d5fa:	b948      	cbnz	r0, 800d610 <__smakebuf_r+0x44>
 800d5fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d600:	059a      	lsls	r2, r3, #22
 800d602:	d4ef      	bmi.n	800d5e4 <__smakebuf_r+0x18>
 800d604:	f023 0303 	bic.w	r3, r3, #3
 800d608:	f043 0302 	orr.w	r3, r3, #2
 800d60c:	81a3      	strh	r3, [r4, #12]
 800d60e:	e7e3      	b.n	800d5d8 <__smakebuf_r+0xc>
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	6020      	str	r0, [r4, #0]
 800d614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	9b00      	ldr	r3, [sp, #0]
 800d61c:	6163      	str	r3, [r4, #20]
 800d61e:	9b01      	ldr	r3, [sp, #4]
 800d620:	6120      	str	r0, [r4, #16]
 800d622:	b15b      	cbz	r3, 800d63c <__smakebuf_r+0x70>
 800d624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d628:	4630      	mov	r0, r6
 800d62a:	f000 f837 	bl	800d69c <_isatty_r>
 800d62e:	b128      	cbz	r0, 800d63c <__smakebuf_r+0x70>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f023 0303 	bic.w	r3, r3, #3
 800d636:	f043 0301 	orr.w	r3, r3, #1
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	89a3      	ldrh	r3, [r4, #12]
 800d63e:	431d      	orrs	r5, r3
 800d640:	81a5      	strh	r5, [r4, #12]
 800d642:	e7cf      	b.n	800d5e4 <__smakebuf_r+0x18>

0800d644 <memmove>:
 800d644:	4288      	cmp	r0, r1
 800d646:	b510      	push	{r4, lr}
 800d648:	eb01 0402 	add.w	r4, r1, r2
 800d64c:	d902      	bls.n	800d654 <memmove+0x10>
 800d64e:	4284      	cmp	r4, r0
 800d650:	4623      	mov	r3, r4
 800d652:	d807      	bhi.n	800d664 <memmove+0x20>
 800d654:	1e43      	subs	r3, r0, #1
 800d656:	42a1      	cmp	r1, r4
 800d658:	d008      	beq.n	800d66c <memmove+0x28>
 800d65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d662:	e7f8      	b.n	800d656 <memmove+0x12>
 800d664:	4402      	add	r2, r0
 800d666:	4601      	mov	r1, r0
 800d668:	428a      	cmp	r2, r1
 800d66a:	d100      	bne.n	800d66e <memmove+0x2a>
 800d66c:	bd10      	pop	{r4, pc}
 800d66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d676:	e7f7      	b.n	800d668 <memmove+0x24>

0800d678 <_fstat_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d07      	ldr	r5, [pc, #28]	; (800d698 <_fstat_r+0x20>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	4611      	mov	r1, r2
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	f7f7 ff71 	bl	800556c <_fstat>
 800d68a:	1c43      	adds	r3, r0, #1
 800d68c:	d102      	bne.n	800d694 <_fstat_r+0x1c>
 800d68e:	682b      	ldr	r3, [r5, #0]
 800d690:	b103      	cbz	r3, 800d694 <_fstat_r+0x1c>
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	bd38      	pop	{r3, r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	200010a0 	.word	0x200010a0

0800d69c <_isatty_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4d06      	ldr	r5, [pc, #24]	; (800d6b8 <_isatty_r+0x1c>)
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	4608      	mov	r0, r1
 800d6a6:	602b      	str	r3, [r5, #0]
 800d6a8:	f7f7 ff66 	bl	8005578 <_isatty>
 800d6ac:	1c43      	adds	r3, r0, #1
 800d6ae:	d102      	bne.n	800d6b6 <_isatty_r+0x1a>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b103      	cbz	r3, 800d6b6 <_isatty_r+0x1a>
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}
 800d6b8:	200010a0 	.word	0x200010a0

0800d6bc <memcpy>:
 800d6bc:	440a      	add	r2, r1
 800d6be:	4291      	cmp	r1, r2
 800d6c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6c4:	d100      	bne.n	800d6c8 <memcpy+0xc>
 800d6c6:	4770      	bx	lr
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6d2:	4291      	cmp	r1, r2
 800d6d4:	d1f9      	bne.n	800d6ca <memcpy+0xe>
 800d6d6:	bd10      	pop	{r4, pc}

0800d6d8 <__assert_func>:
 800d6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6da:	4614      	mov	r4, r2
 800d6dc:	461a      	mov	r2, r3
 800d6de:	4b09      	ldr	r3, [pc, #36]	; (800d704 <__assert_func+0x2c>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4605      	mov	r5, r0
 800d6e4:	68d8      	ldr	r0, [r3, #12]
 800d6e6:	b14c      	cbz	r4, 800d6fc <__assert_func+0x24>
 800d6e8:	4b07      	ldr	r3, [pc, #28]	; (800d708 <__assert_func+0x30>)
 800d6ea:	9100      	str	r1, [sp, #0]
 800d6ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6f0:	4906      	ldr	r1, [pc, #24]	; (800d70c <__assert_func+0x34>)
 800d6f2:	462b      	mov	r3, r5
 800d6f4:	f000 f872 	bl	800d7dc <fiprintf>
 800d6f8:	f000 f882 	bl	800d800 <abort>
 800d6fc:	4b04      	ldr	r3, [pc, #16]	; (800d710 <__assert_func+0x38>)
 800d6fe:	461c      	mov	r4, r3
 800d700:	e7f3      	b.n	800d6ea <__assert_func+0x12>
 800d702:	bf00      	nop
 800d704:	2000006c 	.word	0x2000006c
 800d708:	0800f44f 	.word	0x0800f44f
 800d70c:	0800f45c 	.word	0x0800f45c
 800d710:	0800f48a 	.word	0x0800f48a

0800d714 <_calloc_r>:
 800d714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d716:	fba1 2402 	umull	r2, r4, r1, r2
 800d71a:	b94c      	cbnz	r4, 800d730 <_calloc_r+0x1c>
 800d71c:	4611      	mov	r1, r2
 800d71e:	9201      	str	r2, [sp, #4]
 800d720:	f7fd f952 	bl	800a9c8 <_malloc_r>
 800d724:	9a01      	ldr	r2, [sp, #4]
 800d726:	4605      	mov	r5, r0
 800d728:	b930      	cbnz	r0, 800d738 <_calloc_r+0x24>
 800d72a:	4628      	mov	r0, r5
 800d72c:	b003      	add	sp, #12
 800d72e:	bd30      	pop	{r4, r5, pc}
 800d730:	220c      	movs	r2, #12
 800d732:	6002      	str	r2, [r0, #0]
 800d734:	2500      	movs	r5, #0
 800d736:	e7f8      	b.n	800d72a <_calloc_r+0x16>
 800d738:	4621      	mov	r1, r4
 800d73a:	f7fe f905 	bl	800b948 <memset>
 800d73e:	e7f4      	b.n	800d72a <_calloc_r+0x16>

0800d740 <__ascii_mbtowc>:
 800d740:	b082      	sub	sp, #8
 800d742:	b901      	cbnz	r1, 800d746 <__ascii_mbtowc+0x6>
 800d744:	a901      	add	r1, sp, #4
 800d746:	b142      	cbz	r2, 800d75a <__ascii_mbtowc+0x1a>
 800d748:	b14b      	cbz	r3, 800d75e <__ascii_mbtowc+0x1e>
 800d74a:	7813      	ldrb	r3, [r2, #0]
 800d74c:	600b      	str	r3, [r1, #0]
 800d74e:	7812      	ldrb	r2, [r2, #0]
 800d750:	1e10      	subs	r0, r2, #0
 800d752:	bf18      	it	ne
 800d754:	2001      	movne	r0, #1
 800d756:	b002      	add	sp, #8
 800d758:	4770      	bx	lr
 800d75a:	4610      	mov	r0, r2
 800d75c:	e7fb      	b.n	800d756 <__ascii_mbtowc+0x16>
 800d75e:	f06f 0001 	mvn.w	r0, #1
 800d762:	e7f8      	b.n	800d756 <__ascii_mbtowc+0x16>

0800d764 <_realloc_r>:
 800d764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d768:	4680      	mov	r8, r0
 800d76a:	4614      	mov	r4, r2
 800d76c:	460e      	mov	r6, r1
 800d76e:	b921      	cbnz	r1, 800d77a <_realloc_r+0x16>
 800d770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d774:	4611      	mov	r1, r2
 800d776:	f7fd b927 	b.w	800a9c8 <_malloc_r>
 800d77a:	b92a      	cbnz	r2, 800d788 <_realloc_r+0x24>
 800d77c:	f7fe ffee 	bl	800c75c <_free_r>
 800d780:	4625      	mov	r5, r4
 800d782:	4628      	mov	r0, r5
 800d784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d788:	f000 f841 	bl	800d80e <_malloc_usable_size_r>
 800d78c:	4284      	cmp	r4, r0
 800d78e:	4607      	mov	r7, r0
 800d790:	d802      	bhi.n	800d798 <_realloc_r+0x34>
 800d792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d796:	d812      	bhi.n	800d7be <_realloc_r+0x5a>
 800d798:	4621      	mov	r1, r4
 800d79a:	4640      	mov	r0, r8
 800d79c:	f7fd f914 	bl	800a9c8 <_malloc_r>
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d0ed      	beq.n	800d782 <_realloc_r+0x1e>
 800d7a6:	42bc      	cmp	r4, r7
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	4631      	mov	r1, r6
 800d7ac:	bf28      	it	cs
 800d7ae:	463a      	movcs	r2, r7
 800d7b0:	f7ff ff84 	bl	800d6bc <memcpy>
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	f7fe ffd0 	bl	800c75c <_free_r>
 800d7bc:	e7e1      	b.n	800d782 <_realloc_r+0x1e>
 800d7be:	4635      	mov	r5, r6
 800d7c0:	e7df      	b.n	800d782 <_realloc_r+0x1e>

0800d7c2 <__ascii_wctomb>:
 800d7c2:	b149      	cbz	r1, 800d7d8 <__ascii_wctomb+0x16>
 800d7c4:	2aff      	cmp	r2, #255	; 0xff
 800d7c6:	bf85      	ittet	hi
 800d7c8:	238a      	movhi	r3, #138	; 0x8a
 800d7ca:	6003      	strhi	r3, [r0, #0]
 800d7cc:	700a      	strbls	r2, [r1, #0]
 800d7ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800d7d2:	bf98      	it	ls
 800d7d4:	2001      	movls	r0, #1
 800d7d6:	4770      	bx	lr
 800d7d8:	4608      	mov	r0, r1
 800d7da:	4770      	bx	lr

0800d7dc <fiprintf>:
 800d7dc:	b40e      	push	{r1, r2, r3}
 800d7de:	b503      	push	{r0, r1, lr}
 800d7e0:	4601      	mov	r1, r0
 800d7e2:	ab03      	add	r3, sp, #12
 800d7e4:	4805      	ldr	r0, [pc, #20]	; (800d7fc <fiprintf+0x20>)
 800d7e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ea:	6800      	ldr	r0, [r0, #0]
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	f7ff fcff 	bl	800d1f0 <_vfiprintf_r>
 800d7f2:	b002      	add	sp, #8
 800d7f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7f8:	b003      	add	sp, #12
 800d7fa:	4770      	bx	lr
 800d7fc:	2000006c 	.word	0x2000006c

0800d800 <abort>:
 800d800:	b508      	push	{r3, lr}
 800d802:	2006      	movs	r0, #6
 800d804:	f000 f834 	bl	800d870 <raise>
 800d808:	2001      	movs	r0, #1
 800d80a:	f7f7 fe89 	bl	8005520 <_exit>

0800d80e <_malloc_usable_size_r>:
 800d80e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d812:	1f18      	subs	r0, r3, #4
 800d814:	2b00      	cmp	r3, #0
 800d816:	bfbc      	itt	lt
 800d818:	580b      	ldrlt	r3, [r1, r0]
 800d81a:	18c0      	addlt	r0, r0, r3
 800d81c:	4770      	bx	lr

0800d81e <_raise_r>:
 800d81e:	291f      	cmp	r1, #31
 800d820:	b538      	push	{r3, r4, r5, lr}
 800d822:	4604      	mov	r4, r0
 800d824:	460d      	mov	r5, r1
 800d826:	d904      	bls.n	800d832 <_raise_r+0x14>
 800d828:	2316      	movs	r3, #22
 800d82a:	6003      	str	r3, [r0, #0]
 800d82c:	f04f 30ff 	mov.w	r0, #4294967295
 800d830:	bd38      	pop	{r3, r4, r5, pc}
 800d832:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d834:	b112      	cbz	r2, 800d83c <_raise_r+0x1e>
 800d836:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d83a:	b94b      	cbnz	r3, 800d850 <_raise_r+0x32>
 800d83c:	4620      	mov	r0, r4
 800d83e:	f000 f831 	bl	800d8a4 <_getpid_r>
 800d842:	462a      	mov	r2, r5
 800d844:	4601      	mov	r1, r0
 800d846:	4620      	mov	r0, r4
 800d848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d84c:	f000 b818 	b.w	800d880 <_kill_r>
 800d850:	2b01      	cmp	r3, #1
 800d852:	d00a      	beq.n	800d86a <_raise_r+0x4c>
 800d854:	1c59      	adds	r1, r3, #1
 800d856:	d103      	bne.n	800d860 <_raise_r+0x42>
 800d858:	2316      	movs	r3, #22
 800d85a:	6003      	str	r3, [r0, #0]
 800d85c:	2001      	movs	r0, #1
 800d85e:	e7e7      	b.n	800d830 <_raise_r+0x12>
 800d860:	2400      	movs	r4, #0
 800d862:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d866:	4628      	mov	r0, r5
 800d868:	4798      	blx	r3
 800d86a:	2000      	movs	r0, #0
 800d86c:	e7e0      	b.n	800d830 <_raise_r+0x12>
	...

0800d870 <raise>:
 800d870:	4b02      	ldr	r3, [pc, #8]	; (800d87c <raise+0xc>)
 800d872:	4601      	mov	r1, r0
 800d874:	6818      	ldr	r0, [r3, #0]
 800d876:	f7ff bfd2 	b.w	800d81e <_raise_r>
 800d87a:	bf00      	nop
 800d87c:	2000006c 	.word	0x2000006c

0800d880 <_kill_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4d07      	ldr	r5, [pc, #28]	; (800d8a0 <_kill_r+0x20>)
 800d884:	2300      	movs	r3, #0
 800d886:	4604      	mov	r4, r0
 800d888:	4608      	mov	r0, r1
 800d88a:	4611      	mov	r1, r2
 800d88c:	602b      	str	r3, [r5, #0]
 800d88e:	f7f7 fe3f 	bl	8005510 <_kill>
 800d892:	1c43      	adds	r3, r0, #1
 800d894:	d102      	bne.n	800d89c <_kill_r+0x1c>
 800d896:	682b      	ldr	r3, [r5, #0]
 800d898:	b103      	cbz	r3, 800d89c <_kill_r+0x1c>
 800d89a:	6023      	str	r3, [r4, #0]
 800d89c:	bd38      	pop	{r3, r4, r5, pc}
 800d89e:	bf00      	nop
 800d8a0:	200010a0 	.word	0x200010a0

0800d8a4 <_getpid_r>:
 800d8a4:	f7f7 be32 	b.w	800550c <_getpid>

0800d8a8 <sqrt>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	ed2d 8b02 	vpush	{d8}
 800d8ae:	ec55 4b10 	vmov	r4, r5, d0
 800d8b2:	f000 f8d1 	bl	800da58 <__ieee754_sqrt>
 800d8b6:	4622      	mov	r2, r4
 800d8b8:	462b      	mov	r3, r5
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	4629      	mov	r1, r5
 800d8be:	eeb0 8a40 	vmov.f32	s16, s0
 800d8c2:	eef0 8a60 	vmov.f32	s17, s1
 800d8c6:	f7f3 f959 	bl	8000b7c <__aeabi_dcmpun>
 800d8ca:	b990      	cbnz	r0, 800d8f2 <sqrt+0x4a>
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f7f3 f92a 	bl	8000b2c <__aeabi_dcmplt>
 800d8d8:	b158      	cbz	r0, 800d8f2 <sqrt+0x4a>
 800d8da:	f7fe f897 	bl	800ba0c <__errno>
 800d8de:	2321      	movs	r3, #33	; 0x21
 800d8e0:	6003      	str	r3, [r0, #0]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7f2 ffd7 	bl	800089c <__aeabi_ddiv>
 800d8ee:	ec41 0b18 	vmov	d8, r0, r1
 800d8f2:	eeb0 0a48 	vmov.f32	s0, s16
 800d8f6:	eef0 0a68 	vmov.f32	s1, s17
 800d8fa:	ecbd 8b02 	vpop	{d8}
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}

0800d900 <cos>:
 800d900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d902:	ec53 2b10 	vmov	r2, r3, d0
 800d906:	4826      	ldr	r0, [pc, #152]	; (800d9a0 <cos+0xa0>)
 800d908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d90c:	4281      	cmp	r1, r0
 800d90e:	dc06      	bgt.n	800d91e <cos+0x1e>
 800d910:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d998 <cos+0x98>
 800d914:	b005      	add	sp, #20
 800d916:	f85d eb04 	ldr.w	lr, [sp], #4
 800d91a:	f000 b979 	b.w	800dc10 <__kernel_cos>
 800d91e:	4821      	ldr	r0, [pc, #132]	; (800d9a4 <cos+0xa4>)
 800d920:	4281      	cmp	r1, r0
 800d922:	dd09      	ble.n	800d938 <cos+0x38>
 800d924:	ee10 0a10 	vmov	r0, s0
 800d928:	4619      	mov	r1, r3
 800d92a:	f7f2 fcd5 	bl	80002d8 <__aeabi_dsub>
 800d92e:	ec41 0b10 	vmov	d0, r0, r1
 800d932:	b005      	add	sp, #20
 800d934:	f85d fb04 	ldr.w	pc, [sp], #4
 800d938:	4668      	mov	r0, sp
 800d93a:	f000 faf1 	bl	800df20 <__ieee754_rem_pio2>
 800d93e:	f000 0003 	and.w	r0, r0, #3
 800d942:	2801      	cmp	r0, #1
 800d944:	d00b      	beq.n	800d95e <cos+0x5e>
 800d946:	2802      	cmp	r0, #2
 800d948:	d016      	beq.n	800d978 <cos+0x78>
 800d94a:	b9e0      	cbnz	r0, 800d986 <cos+0x86>
 800d94c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d950:	ed9d 0b00 	vldr	d0, [sp]
 800d954:	f000 f95c 	bl	800dc10 <__kernel_cos>
 800d958:	ec51 0b10 	vmov	r0, r1, d0
 800d95c:	e7e7      	b.n	800d92e <cos+0x2e>
 800d95e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d962:	ed9d 0b00 	vldr	d0, [sp]
 800d966:	f000 fa1b 	bl	800dda0 <__kernel_sin>
 800d96a:	ec53 2b10 	vmov	r2, r3, d0
 800d96e:	ee10 0a10 	vmov	r0, s0
 800d972:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d976:	e7da      	b.n	800d92e <cos+0x2e>
 800d978:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d97c:	ed9d 0b00 	vldr	d0, [sp]
 800d980:	f000 f946 	bl	800dc10 <__kernel_cos>
 800d984:	e7f1      	b.n	800d96a <cos+0x6a>
 800d986:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d98a:	ed9d 0b00 	vldr	d0, [sp]
 800d98e:	2001      	movs	r0, #1
 800d990:	f000 fa06 	bl	800dda0 <__kernel_sin>
 800d994:	e7e0      	b.n	800d958 <cos+0x58>
 800d996:	bf00      	nop
	...
 800d9a0:	3fe921fb 	.word	0x3fe921fb
 800d9a4:	7fefffff 	.word	0x7fefffff

0800d9a8 <sin>:
 800d9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9aa:	ec53 2b10 	vmov	r2, r3, d0
 800d9ae:	4828      	ldr	r0, [pc, #160]	; (800da50 <sin+0xa8>)
 800d9b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d9b4:	4281      	cmp	r1, r0
 800d9b6:	dc07      	bgt.n	800d9c8 <sin+0x20>
 800d9b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800da48 <sin+0xa0>
 800d9bc:	2000      	movs	r0, #0
 800d9be:	b005      	add	sp, #20
 800d9c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9c4:	f000 b9ec 	b.w	800dda0 <__kernel_sin>
 800d9c8:	4822      	ldr	r0, [pc, #136]	; (800da54 <sin+0xac>)
 800d9ca:	4281      	cmp	r1, r0
 800d9cc:	dd09      	ble.n	800d9e2 <sin+0x3a>
 800d9ce:	ee10 0a10 	vmov	r0, s0
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	f7f2 fc80 	bl	80002d8 <__aeabi_dsub>
 800d9d8:	ec41 0b10 	vmov	d0, r0, r1
 800d9dc:	b005      	add	sp, #20
 800d9de:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9e2:	4668      	mov	r0, sp
 800d9e4:	f000 fa9c 	bl	800df20 <__ieee754_rem_pio2>
 800d9e8:	f000 0003 	and.w	r0, r0, #3
 800d9ec:	2801      	cmp	r0, #1
 800d9ee:	d00c      	beq.n	800da0a <sin+0x62>
 800d9f0:	2802      	cmp	r0, #2
 800d9f2:	d011      	beq.n	800da18 <sin+0x70>
 800d9f4:	b9f0      	cbnz	r0, 800da34 <sin+0x8c>
 800d9f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9fa:	ed9d 0b00 	vldr	d0, [sp]
 800d9fe:	2001      	movs	r0, #1
 800da00:	f000 f9ce 	bl	800dda0 <__kernel_sin>
 800da04:	ec51 0b10 	vmov	r0, r1, d0
 800da08:	e7e6      	b.n	800d9d8 <sin+0x30>
 800da0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da0e:	ed9d 0b00 	vldr	d0, [sp]
 800da12:	f000 f8fd 	bl	800dc10 <__kernel_cos>
 800da16:	e7f5      	b.n	800da04 <sin+0x5c>
 800da18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da1c:	ed9d 0b00 	vldr	d0, [sp]
 800da20:	2001      	movs	r0, #1
 800da22:	f000 f9bd 	bl	800dda0 <__kernel_sin>
 800da26:	ec53 2b10 	vmov	r2, r3, d0
 800da2a:	ee10 0a10 	vmov	r0, s0
 800da2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da32:	e7d1      	b.n	800d9d8 <sin+0x30>
 800da34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da38:	ed9d 0b00 	vldr	d0, [sp]
 800da3c:	f000 f8e8 	bl	800dc10 <__kernel_cos>
 800da40:	e7f1      	b.n	800da26 <sin+0x7e>
 800da42:	bf00      	nop
 800da44:	f3af 8000 	nop.w
	...
 800da50:	3fe921fb 	.word	0x3fe921fb
 800da54:	7fefffff 	.word	0x7fefffff

0800da58 <__ieee754_sqrt>:
 800da58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	ec55 4b10 	vmov	r4, r5, d0
 800da60:	4e67      	ldr	r6, [pc, #412]	; (800dc00 <__ieee754_sqrt+0x1a8>)
 800da62:	43ae      	bics	r6, r5
 800da64:	ee10 0a10 	vmov	r0, s0
 800da68:	ee10 2a10 	vmov	r2, s0
 800da6c:	4629      	mov	r1, r5
 800da6e:	462b      	mov	r3, r5
 800da70:	d10d      	bne.n	800da8e <__ieee754_sqrt+0x36>
 800da72:	f7f2 fde9 	bl	8000648 <__aeabi_dmul>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	4620      	mov	r0, r4
 800da7c:	4629      	mov	r1, r5
 800da7e:	f7f2 fc2d 	bl	80002dc <__adddf3>
 800da82:	4604      	mov	r4, r0
 800da84:	460d      	mov	r5, r1
 800da86:	ec45 4b10 	vmov	d0, r4, r5
 800da8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8e:	2d00      	cmp	r5, #0
 800da90:	dc0b      	bgt.n	800daaa <__ieee754_sqrt+0x52>
 800da92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800da96:	4326      	orrs	r6, r4
 800da98:	d0f5      	beq.n	800da86 <__ieee754_sqrt+0x2e>
 800da9a:	b135      	cbz	r5, 800daaa <__ieee754_sqrt+0x52>
 800da9c:	f7f2 fc1c 	bl	80002d8 <__aeabi_dsub>
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	f7f2 fefa 	bl	800089c <__aeabi_ddiv>
 800daa8:	e7eb      	b.n	800da82 <__ieee754_sqrt+0x2a>
 800daaa:	1509      	asrs	r1, r1, #20
 800daac:	f000 808d 	beq.w	800dbca <__ieee754_sqrt+0x172>
 800dab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dab4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dabc:	07c9      	lsls	r1, r1, #31
 800dabe:	bf5c      	itt	pl
 800dac0:	005b      	lslpl	r3, r3, #1
 800dac2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dac6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800daca:	bf58      	it	pl
 800dacc:	0052      	lslpl	r2, r2, #1
 800dace:	2500      	movs	r5, #0
 800dad0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dad4:	1076      	asrs	r6, r6, #1
 800dad6:	0052      	lsls	r2, r2, #1
 800dad8:	f04f 0e16 	mov.w	lr, #22
 800dadc:	46ac      	mov	ip, r5
 800dade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dae2:	eb0c 0001 	add.w	r0, ip, r1
 800dae6:	4298      	cmp	r0, r3
 800dae8:	bfde      	ittt	le
 800daea:	1a1b      	suble	r3, r3, r0
 800daec:	eb00 0c01 	addle.w	ip, r0, r1
 800daf0:	186d      	addle	r5, r5, r1
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	f1be 0e01 	subs.w	lr, lr, #1
 800daf8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dafc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800db00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800db04:	d1ed      	bne.n	800dae2 <__ieee754_sqrt+0x8a>
 800db06:	4674      	mov	r4, lr
 800db08:	2720      	movs	r7, #32
 800db0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800db0e:	4563      	cmp	r3, ip
 800db10:	eb01 000e 	add.w	r0, r1, lr
 800db14:	dc02      	bgt.n	800db1c <__ieee754_sqrt+0xc4>
 800db16:	d113      	bne.n	800db40 <__ieee754_sqrt+0xe8>
 800db18:	4290      	cmp	r0, r2
 800db1a:	d811      	bhi.n	800db40 <__ieee754_sqrt+0xe8>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	eb00 0e01 	add.w	lr, r0, r1
 800db22:	da57      	bge.n	800dbd4 <__ieee754_sqrt+0x17c>
 800db24:	f1be 0f00 	cmp.w	lr, #0
 800db28:	db54      	blt.n	800dbd4 <__ieee754_sqrt+0x17c>
 800db2a:	f10c 0801 	add.w	r8, ip, #1
 800db2e:	eba3 030c 	sub.w	r3, r3, ip
 800db32:	4290      	cmp	r0, r2
 800db34:	bf88      	it	hi
 800db36:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800db3a:	1a12      	subs	r2, r2, r0
 800db3c:	440c      	add	r4, r1
 800db3e:	46c4      	mov	ip, r8
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	3f01      	subs	r7, #1
 800db44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800db48:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800db4c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800db50:	d1dd      	bne.n	800db0e <__ieee754_sqrt+0xb6>
 800db52:	4313      	orrs	r3, r2
 800db54:	d01b      	beq.n	800db8e <__ieee754_sqrt+0x136>
 800db56:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800dc04 <__ieee754_sqrt+0x1ac>
 800db5a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800dc08 <__ieee754_sqrt+0x1b0>
 800db5e:	e9da 0100 	ldrd	r0, r1, [sl]
 800db62:	e9db 2300 	ldrd	r2, r3, [fp]
 800db66:	f7f2 fbb7 	bl	80002d8 <__aeabi_dsub>
 800db6a:	e9da 8900 	ldrd	r8, r9, [sl]
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4640      	mov	r0, r8
 800db74:	4649      	mov	r1, r9
 800db76:	f7f2 ffe3 	bl	8000b40 <__aeabi_dcmple>
 800db7a:	b140      	cbz	r0, 800db8e <__ieee754_sqrt+0x136>
 800db7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800db80:	e9da 0100 	ldrd	r0, r1, [sl]
 800db84:	e9db 2300 	ldrd	r2, r3, [fp]
 800db88:	d126      	bne.n	800dbd8 <__ieee754_sqrt+0x180>
 800db8a:	3501      	adds	r5, #1
 800db8c:	463c      	mov	r4, r7
 800db8e:	106a      	asrs	r2, r5, #1
 800db90:	0863      	lsrs	r3, r4, #1
 800db92:	07e9      	lsls	r1, r5, #31
 800db94:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800db98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800db9c:	bf48      	it	mi
 800db9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dba2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dba6:	461c      	mov	r4, r3
 800dba8:	e76d      	b.n	800da86 <__ieee754_sqrt+0x2e>
 800dbaa:	0ad3      	lsrs	r3, r2, #11
 800dbac:	3815      	subs	r0, #21
 800dbae:	0552      	lsls	r2, r2, #21
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d0fa      	beq.n	800dbaa <__ieee754_sqrt+0x152>
 800dbb4:	02dc      	lsls	r4, r3, #11
 800dbb6:	d50a      	bpl.n	800dbce <__ieee754_sqrt+0x176>
 800dbb8:	f1c1 0420 	rsb	r4, r1, #32
 800dbbc:	fa22 f404 	lsr.w	r4, r2, r4
 800dbc0:	1e4d      	subs	r5, r1, #1
 800dbc2:	408a      	lsls	r2, r1
 800dbc4:	4323      	orrs	r3, r4
 800dbc6:	1b41      	subs	r1, r0, r5
 800dbc8:	e772      	b.n	800dab0 <__ieee754_sqrt+0x58>
 800dbca:	4608      	mov	r0, r1
 800dbcc:	e7f0      	b.n	800dbb0 <__ieee754_sqrt+0x158>
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	3101      	adds	r1, #1
 800dbd2:	e7ef      	b.n	800dbb4 <__ieee754_sqrt+0x15c>
 800dbd4:	46e0      	mov	r8, ip
 800dbd6:	e7aa      	b.n	800db2e <__ieee754_sqrt+0xd6>
 800dbd8:	f7f2 fb80 	bl	80002dc <__adddf3>
 800dbdc:	e9da 8900 	ldrd	r8, r9, [sl]
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	f7f2 ffa0 	bl	8000b2c <__aeabi_dcmplt>
 800dbec:	b120      	cbz	r0, 800dbf8 <__ieee754_sqrt+0x1a0>
 800dbee:	1ca0      	adds	r0, r4, #2
 800dbf0:	bf08      	it	eq
 800dbf2:	3501      	addeq	r5, #1
 800dbf4:	3402      	adds	r4, #2
 800dbf6:	e7ca      	b.n	800db8e <__ieee754_sqrt+0x136>
 800dbf8:	3401      	adds	r4, #1
 800dbfa:	f024 0401 	bic.w	r4, r4, #1
 800dbfe:	e7c6      	b.n	800db8e <__ieee754_sqrt+0x136>
 800dc00:	7ff00000 	.word	0x7ff00000
 800dc04:	200001e0 	.word	0x200001e0
 800dc08:	200001e8 	.word	0x200001e8
 800dc0c:	00000000 	.word	0x00000000

0800dc10 <__kernel_cos>:
 800dc10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	ec57 6b10 	vmov	r6, r7, d0
 800dc18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dc1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dc20:	ed8d 1b00 	vstr	d1, [sp]
 800dc24:	da07      	bge.n	800dc36 <__kernel_cos+0x26>
 800dc26:	ee10 0a10 	vmov	r0, s0
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	f7f2 ffbc 	bl	8000ba8 <__aeabi_d2iz>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	f000 8088 	beq.w	800dd46 <__kernel_cos+0x136>
 800dc36:	4632      	mov	r2, r6
 800dc38:	463b      	mov	r3, r7
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	f7f2 fd03 	bl	8000648 <__aeabi_dmul>
 800dc42:	4b51      	ldr	r3, [pc, #324]	; (800dd88 <__kernel_cos+0x178>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	4604      	mov	r4, r0
 800dc48:	460d      	mov	r5, r1
 800dc4a:	f7f2 fcfd 	bl	8000648 <__aeabi_dmul>
 800dc4e:	a340      	add	r3, pc, #256	; (adr r3, 800dd50 <__kernel_cos+0x140>)
 800dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc54:	4682      	mov	sl, r0
 800dc56:	468b      	mov	fp, r1
 800dc58:	4620      	mov	r0, r4
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	f7f2 fcf4 	bl	8000648 <__aeabi_dmul>
 800dc60:	a33d      	add	r3, pc, #244	; (adr r3, 800dd58 <__kernel_cos+0x148>)
 800dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc66:	f7f2 fb39 	bl	80002dc <__adddf3>
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	f7f2 fceb 	bl	8000648 <__aeabi_dmul>
 800dc72:	a33b      	add	r3, pc, #236	; (adr r3, 800dd60 <__kernel_cos+0x150>)
 800dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc78:	f7f2 fb2e 	bl	80002d8 <__aeabi_dsub>
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	462b      	mov	r3, r5
 800dc80:	f7f2 fce2 	bl	8000648 <__aeabi_dmul>
 800dc84:	a338      	add	r3, pc, #224	; (adr r3, 800dd68 <__kernel_cos+0x158>)
 800dc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8a:	f7f2 fb27 	bl	80002dc <__adddf3>
 800dc8e:	4622      	mov	r2, r4
 800dc90:	462b      	mov	r3, r5
 800dc92:	f7f2 fcd9 	bl	8000648 <__aeabi_dmul>
 800dc96:	a336      	add	r3, pc, #216	; (adr r3, 800dd70 <__kernel_cos+0x160>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	f7f2 fb1c 	bl	80002d8 <__aeabi_dsub>
 800dca0:	4622      	mov	r2, r4
 800dca2:	462b      	mov	r3, r5
 800dca4:	f7f2 fcd0 	bl	8000648 <__aeabi_dmul>
 800dca8:	a333      	add	r3, pc, #204	; (adr r3, 800dd78 <__kernel_cos+0x168>)
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	f7f2 fb15 	bl	80002dc <__adddf3>
 800dcb2:	4622      	mov	r2, r4
 800dcb4:	462b      	mov	r3, r5
 800dcb6:	f7f2 fcc7 	bl	8000648 <__aeabi_dmul>
 800dcba:	4622      	mov	r2, r4
 800dcbc:	462b      	mov	r3, r5
 800dcbe:	f7f2 fcc3 	bl	8000648 <__aeabi_dmul>
 800dcc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	460d      	mov	r5, r1
 800dcca:	4630      	mov	r0, r6
 800dccc:	4639      	mov	r1, r7
 800dcce:	f7f2 fcbb 	bl	8000648 <__aeabi_dmul>
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f7f2 fafd 	bl	80002d8 <__aeabi_dsub>
 800dcde:	4b2b      	ldr	r3, [pc, #172]	; (800dd8c <__kernel_cos+0x17c>)
 800dce0:	4598      	cmp	r8, r3
 800dce2:	4606      	mov	r6, r0
 800dce4:	460f      	mov	r7, r1
 800dce6:	dc10      	bgt.n	800dd0a <__kernel_cos+0xfa>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4650      	mov	r0, sl
 800dcee:	4659      	mov	r1, fp
 800dcf0:	f7f2 faf2 	bl	80002d8 <__aeabi_dsub>
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4926      	ldr	r1, [pc, #152]	; (800dd90 <__kernel_cos+0x180>)
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	f7f2 faec 	bl	80002d8 <__aeabi_dsub>
 800dd00:	ec41 0b10 	vmov	d0, r0, r1
 800dd04:	b003      	add	sp, #12
 800dd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0a:	4b22      	ldr	r3, [pc, #136]	; (800dd94 <__kernel_cos+0x184>)
 800dd0c:	4920      	ldr	r1, [pc, #128]	; (800dd90 <__kernel_cos+0x180>)
 800dd0e:	4598      	cmp	r8, r3
 800dd10:	bfcc      	ite	gt
 800dd12:	4d21      	ldrgt	r5, [pc, #132]	; (800dd98 <__kernel_cos+0x188>)
 800dd14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dd18:	2400      	movs	r4, #0
 800dd1a:	4622      	mov	r2, r4
 800dd1c:	462b      	mov	r3, r5
 800dd1e:	2000      	movs	r0, #0
 800dd20:	f7f2 fada 	bl	80002d8 <__aeabi_dsub>
 800dd24:	4622      	mov	r2, r4
 800dd26:	4680      	mov	r8, r0
 800dd28:	4689      	mov	r9, r1
 800dd2a:	462b      	mov	r3, r5
 800dd2c:	4650      	mov	r0, sl
 800dd2e:	4659      	mov	r1, fp
 800dd30:	f7f2 fad2 	bl	80002d8 <__aeabi_dsub>
 800dd34:	4632      	mov	r2, r6
 800dd36:	463b      	mov	r3, r7
 800dd38:	f7f2 face 	bl	80002d8 <__aeabi_dsub>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	4640      	mov	r0, r8
 800dd42:	4649      	mov	r1, r9
 800dd44:	e7da      	b.n	800dcfc <__kernel_cos+0xec>
 800dd46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dd80 <__kernel_cos+0x170>
 800dd4a:	e7db      	b.n	800dd04 <__kernel_cos+0xf4>
 800dd4c:	f3af 8000 	nop.w
 800dd50:	be8838d4 	.word	0xbe8838d4
 800dd54:	bda8fae9 	.word	0xbda8fae9
 800dd58:	bdb4b1c4 	.word	0xbdb4b1c4
 800dd5c:	3e21ee9e 	.word	0x3e21ee9e
 800dd60:	809c52ad 	.word	0x809c52ad
 800dd64:	3e927e4f 	.word	0x3e927e4f
 800dd68:	19cb1590 	.word	0x19cb1590
 800dd6c:	3efa01a0 	.word	0x3efa01a0
 800dd70:	16c15177 	.word	0x16c15177
 800dd74:	3f56c16c 	.word	0x3f56c16c
 800dd78:	5555554c 	.word	0x5555554c
 800dd7c:	3fa55555 	.word	0x3fa55555
 800dd80:	00000000 	.word	0x00000000
 800dd84:	3ff00000 	.word	0x3ff00000
 800dd88:	3fe00000 	.word	0x3fe00000
 800dd8c:	3fd33332 	.word	0x3fd33332
 800dd90:	3ff00000 	.word	0x3ff00000
 800dd94:	3fe90000 	.word	0x3fe90000
 800dd98:	3fd20000 	.word	0x3fd20000
 800dd9c:	00000000 	.word	0x00000000

0800dda0 <__kernel_sin>:
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	ed2d 8b04 	vpush	{d8-d9}
 800dda8:	eeb0 8a41 	vmov.f32	s16, s2
 800ddac:	eef0 8a61 	vmov.f32	s17, s3
 800ddb0:	ec55 4b10 	vmov	r4, r5, d0
 800ddb4:	b083      	sub	sp, #12
 800ddb6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ddba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ddbe:	9001      	str	r0, [sp, #4]
 800ddc0:	da06      	bge.n	800ddd0 <__kernel_sin+0x30>
 800ddc2:	ee10 0a10 	vmov	r0, s0
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	f7f2 feee 	bl	8000ba8 <__aeabi_d2iz>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d051      	beq.n	800de74 <__kernel_sin+0xd4>
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	f7f2 fc36 	bl	8000648 <__aeabi_dmul>
 800dddc:	4682      	mov	sl, r0
 800ddde:	468b      	mov	fp, r1
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4620      	mov	r0, r4
 800dde6:	4629      	mov	r1, r5
 800dde8:	f7f2 fc2e 	bl	8000648 <__aeabi_dmul>
 800ddec:	a341      	add	r3, pc, #260	; (adr r3, 800def4 <__kernel_sin+0x154>)
 800ddee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf2:	4680      	mov	r8, r0
 800ddf4:	4689      	mov	r9, r1
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	4659      	mov	r1, fp
 800ddfa:	f7f2 fc25 	bl	8000648 <__aeabi_dmul>
 800ddfe:	a33f      	add	r3, pc, #252	; (adr r3, 800defc <__kernel_sin+0x15c>)
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	f7f2 fa68 	bl	80002d8 <__aeabi_dsub>
 800de08:	4652      	mov	r2, sl
 800de0a:	465b      	mov	r3, fp
 800de0c:	f7f2 fc1c 	bl	8000648 <__aeabi_dmul>
 800de10:	a33c      	add	r3, pc, #240	; (adr r3, 800df04 <__kernel_sin+0x164>)
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	f7f2 fa61 	bl	80002dc <__adddf3>
 800de1a:	4652      	mov	r2, sl
 800de1c:	465b      	mov	r3, fp
 800de1e:	f7f2 fc13 	bl	8000648 <__aeabi_dmul>
 800de22:	a33a      	add	r3, pc, #232	; (adr r3, 800df0c <__kernel_sin+0x16c>)
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	f7f2 fa56 	bl	80002d8 <__aeabi_dsub>
 800de2c:	4652      	mov	r2, sl
 800de2e:	465b      	mov	r3, fp
 800de30:	f7f2 fc0a 	bl	8000648 <__aeabi_dmul>
 800de34:	a337      	add	r3, pc, #220	; (adr r3, 800df14 <__kernel_sin+0x174>)
 800de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3a:	f7f2 fa4f 	bl	80002dc <__adddf3>
 800de3e:	9b01      	ldr	r3, [sp, #4]
 800de40:	4606      	mov	r6, r0
 800de42:	460f      	mov	r7, r1
 800de44:	b9eb      	cbnz	r3, 800de82 <__kernel_sin+0xe2>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4650      	mov	r0, sl
 800de4c:	4659      	mov	r1, fp
 800de4e:	f7f2 fbfb 	bl	8000648 <__aeabi_dmul>
 800de52:	a325      	add	r3, pc, #148	; (adr r3, 800dee8 <__kernel_sin+0x148>)
 800de54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de58:	f7f2 fa3e 	bl	80002d8 <__aeabi_dsub>
 800de5c:	4642      	mov	r2, r8
 800de5e:	464b      	mov	r3, r9
 800de60:	f7f2 fbf2 	bl	8000648 <__aeabi_dmul>
 800de64:	4602      	mov	r2, r0
 800de66:	460b      	mov	r3, r1
 800de68:	4620      	mov	r0, r4
 800de6a:	4629      	mov	r1, r5
 800de6c:	f7f2 fa36 	bl	80002dc <__adddf3>
 800de70:	4604      	mov	r4, r0
 800de72:	460d      	mov	r5, r1
 800de74:	ec45 4b10 	vmov	d0, r4, r5
 800de78:	b003      	add	sp, #12
 800de7a:	ecbd 8b04 	vpop	{d8-d9}
 800de7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de82:	4b1b      	ldr	r3, [pc, #108]	; (800def0 <__kernel_sin+0x150>)
 800de84:	ec51 0b18 	vmov	r0, r1, d8
 800de88:	2200      	movs	r2, #0
 800de8a:	f7f2 fbdd 	bl	8000648 <__aeabi_dmul>
 800de8e:	4632      	mov	r2, r6
 800de90:	ec41 0b19 	vmov	d9, r0, r1
 800de94:	463b      	mov	r3, r7
 800de96:	4640      	mov	r0, r8
 800de98:	4649      	mov	r1, r9
 800de9a:	f7f2 fbd5 	bl	8000648 <__aeabi_dmul>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	ec51 0b19 	vmov	r0, r1, d9
 800dea6:	f7f2 fa17 	bl	80002d8 <__aeabi_dsub>
 800deaa:	4652      	mov	r2, sl
 800deac:	465b      	mov	r3, fp
 800deae:	f7f2 fbcb 	bl	8000648 <__aeabi_dmul>
 800deb2:	ec53 2b18 	vmov	r2, r3, d8
 800deb6:	f7f2 fa0f 	bl	80002d8 <__aeabi_dsub>
 800deba:	a30b      	add	r3, pc, #44	; (adr r3, 800dee8 <__kernel_sin+0x148>)
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	4606      	mov	r6, r0
 800dec2:	460f      	mov	r7, r1
 800dec4:	4640      	mov	r0, r8
 800dec6:	4649      	mov	r1, r9
 800dec8:	f7f2 fbbe 	bl	8000648 <__aeabi_dmul>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4630      	mov	r0, r6
 800ded2:	4639      	mov	r1, r7
 800ded4:	f7f2 fa02 	bl	80002dc <__adddf3>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	4620      	mov	r0, r4
 800dede:	4629      	mov	r1, r5
 800dee0:	f7f2 f9fa 	bl	80002d8 <__aeabi_dsub>
 800dee4:	e7c4      	b.n	800de70 <__kernel_sin+0xd0>
 800dee6:	bf00      	nop
 800dee8:	55555549 	.word	0x55555549
 800deec:	3fc55555 	.word	0x3fc55555
 800def0:	3fe00000 	.word	0x3fe00000
 800def4:	5acfd57c 	.word	0x5acfd57c
 800def8:	3de5d93a 	.word	0x3de5d93a
 800defc:	8a2b9ceb 	.word	0x8a2b9ceb
 800df00:	3e5ae5e6 	.word	0x3e5ae5e6
 800df04:	57b1fe7d 	.word	0x57b1fe7d
 800df08:	3ec71de3 	.word	0x3ec71de3
 800df0c:	19c161d5 	.word	0x19c161d5
 800df10:	3f2a01a0 	.word	0x3f2a01a0
 800df14:	1110f8a6 	.word	0x1110f8a6
 800df18:	3f811111 	.word	0x3f811111
 800df1c:	00000000 	.word	0x00000000

0800df20 <__ieee754_rem_pio2>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	ed2d 8b02 	vpush	{d8}
 800df28:	ec55 4b10 	vmov	r4, r5, d0
 800df2c:	4bca      	ldr	r3, [pc, #808]	; (800e258 <__ieee754_rem_pio2+0x338>)
 800df2e:	b08b      	sub	sp, #44	; 0x2c
 800df30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800df34:	4598      	cmp	r8, r3
 800df36:	4682      	mov	sl, r0
 800df38:	9502      	str	r5, [sp, #8]
 800df3a:	dc08      	bgt.n	800df4e <__ieee754_rem_pio2+0x2e>
 800df3c:	2200      	movs	r2, #0
 800df3e:	2300      	movs	r3, #0
 800df40:	ed80 0b00 	vstr	d0, [r0]
 800df44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800df48:	f04f 0b00 	mov.w	fp, #0
 800df4c:	e028      	b.n	800dfa0 <__ieee754_rem_pio2+0x80>
 800df4e:	4bc3      	ldr	r3, [pc, #780]	; (800e25c <__ieee754_rem_pio2+0x33c>)
 800df50:	4598      	cmp	r8, r3
 800df52:	dc78      	bgt.n	800e046 <__ieee754_rem_pio2+0x126>
 800df54:	9b02      	ldr	r3, [sp, #8]
 800df56:	4ec2      	ldr	r6, [pc, #776]	; (800e260 <__ieee754_rem_pio2+0x340>)
 800df58:	2b00      	cmp	r3, #0
 800df5a:	ee10 0a10 	vmov	r0, s0
 800df5e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e220 <__ieee754_rem_pio2+0x300>)
 800df60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df64:	4629      	mov	r1, r5
 800df66:	dd39      	ble.n	800dfdc <__ieee754_rem_pio2+0xbc>
 800df68:	f7f2 f9b6 	bl	80002d8 <__aeabi_dsub>
 800df6c:	45b0      	cmp	r8, r6
 800df6e:	4604      	mov	r4, r0
 800df70:	460d      	mov	r5, r1
 800df72:	d01b      	beq.n	800dfac <__ieee754_rem_pio2+0x8c>
 800df74:	a3ac      	add	r3, pc, #688	; (adr r3, 800e228 <__ieee754_rem_pio2+0x308>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	f7f2 f9ad 	bl	80002d8 <__aeabi_dsub>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	e9ca 2300 	strd	r2, r3, [sl]
 800df86:	4620      	mov	r0, r4
 800df88:	4629      	mov	r1, r5
 800df8a:	f7f2 f9a5 	bl	80002d8 <__aeabi_dsub>
 800df8e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e228 <__ieee754_rem_pio2+0x308>)
 800df90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df94:	f7f2 f9a0 	bl	80002d8 <__aeabi_dsub>
 800df98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df9c:	f04f 0b01 	mov.w	fp, #1
 800dfa0:	4658      	mov	r0, fp
 800dfa2:	b00b      	add	sp, #44	; 0x2c
 800dfa4:	ecbd 8b02 	vpop	{d8}
 800dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	a3a0      	add	r3, pc, #640	; (adr r3, 800e230 <__ieee754_rem_pio2+0x310>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 f991 	bl	80002d8 <__aeabi_dsub>
 800dfb6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e238 <__ieee754_rem_pio2+0x318>)
 800dfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	460d      	mov	r5, r1
 800dfc0:	f7f2 f98a 	bl	80002d8 <__aeabi_dsub>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	e9ca 2300 	strd	r2, r3, [sl]
 800dfcc:	4620      	mov	r0, r4
 800dfce:	4629      	mov	r1, r5
 800dfd0:	f7f2 f982 	bl	80002d8 <__aeabi_dsub>
 800dfd4:	a398      	add	r3, pc, #608	; (adr r3, 800e238 <__ieee754_rem_pio2+0x318>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	e7db      	b.n	800df94 <__ieee754_rem_pio2+0x74>
 800dfdc:	f7f2 f97e 	bl	80002dc <__adddf3>
 800dfe0:	45b0      	cmp	r8, r6
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	460d      	mov	r5, r1
 800dfe6:	d016      	beq.n	800e016 <__ieee754_rem_pio2+0xf6>
 800dfe8:	a38f      	add	r3, pc, #572	; (adr r3, 800e228 <__ieee754_rem_pio2+0x308>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	f7f2 f975 	bl	80002dc <__adddf3>
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	e9ca 2300 	strd	r2, r3, [sl]
 800dffa:	4620      	mov	r0, r4
 800dffc:	4629      	mov	r1, r5
 800dffe:	f7f2 f96b 	bl	80002d8 <__aeabi_dsub>
 800e002:	a389      	add	r3, pc, #548	; (adr r3, 800e228 <__ieee754_rem_pio2+0x308>)
 800e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e008:	f7f2 f968 	bl	80002dc <__adddf3>
 800e00c:	f04f 3bff 	mov.w	fp, #4294967295
 800e010:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e014:	e7c4      	b.n	800dfa0 <__ieee754_rem_pio2+0x80>
 800e016:	a386      	add	r3, pc, #536	; (adr r3, 800e230 <__ieee754_rem_pio2+0x310>)
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	f7f2 f95e 	bl	80002dc <__adddf3>
 800e020:	a385      	add	r3, pc, #532	; (adr r3, 800e238 <__ieee754_rem_pio2+0x318>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	f7f2 f957 	bl	80002dc <__adddf3>
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	e9ca 2300 	strd	r2, r3, [sl]
 800e036:	4620      	mov	r0, r4
 800e038:	4629      	mov	r1, r5
 800e03a:	f7f2 f94d 	bl	80002d8 <__aeabi_dsub>
 800e03e:	a37e      	add	r3, pc, #504	; (adr r3, 800e238 <__ieee754_rem_pio2+0x318>)
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	e7e0      	b.n	800e008 <__ieee754_rem_pio2+0xe8>
 800e046:	4b87      	ldr	r3, [pc, #540]	; (800e264 <__ieee754_rem_pio2+0x344>)
 800e048:	4598      	cmp	r8, r3
 800e04a:	f300 80d8 	bgt.w	800e1fe <__ieee754_rem_pio2+0x2de>
 800e04e:	f000 f96d 	bl	800e32c <fabs>
 800e052:	ec55 4b10 	vmov	r4, r5, d0
 800e056:	ee10 0a10 	vmov	r0, s0
 800e05a:	a379      	add	r3, pc, #484	; (adr r3, 800e240 <__ieee754_rem_pio2+0x320>)
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	4629      	mov	r1, r5
 800e062:	f7f2 faf1 	bl	8000648 <__aeabi_dmul>
 800e066:	4b80      	ldr	r3, [pc, #512]	; (800e268 <__ieee754_rem_pio2+0x348>)
 800e068:	2200      	movs	r2, #0
 800e06a:	f7f2 f937 	bl	80002dc <__adddf3>
 800e06e:	f7f2 fd9b 	bl	8000ba8 <__aeabi_d2iz>
 800e072:	4683      	mov	fp, r0
 800e074:	f7f2 fa7e 	bl	8000574 <__aeabi_i2d>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	ec43 2b18 	vmov	d8, r2, r3
 800e080:	a367      	add	r3, pc, #412	; (adr r3, 800e220 <__ieee754_rem_pio2+0x300>)
 800e082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e086:	f7f2 fadf 	bl	8000648 <__aeabi_dmul>
 800e08a:	4602      	mov	r2, r0
 800e08c:	460b      	mov	r3, r1
 800e08e:	4620      	mov	r0, r4
 800e090:	4629      	mov	r1, r5
 800e092:	f7f2 f921 	bl	80002d8 <__aeabi_dsub>
 800e096:	a364      	add	r3, pc, #400	; (adr r3, 800e228 <__ieee754_rem_pio2+0x308>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	4606      	mov	r6, r0
 800e09e:	460f      	mov	r7, r1
 800e0a0:	ec51 0b18 	vmov	r0, r1, d8
 800e0a4:	f7f2 fad0 	bl	8000648 <__aeabi_dmul>
 800e0a8:	f1bb 0f1f 	cmp.w	fp, #31
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	dc0d      	bgt.n	800e0ce <__ieee754_rem_pio2+0x1ae>
 800e0b2:	4b6e      	ldr	r3, [pc, #440]	; (800e26c <__ieee754_rem_pio2+0x34c>)
 800e0b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0bc:	4543      	cmp	r3, r8
 800e0be:	d006      	beq.n	800e0ce <__ieee754_rem_pio2+0x1ae>
 800e0c0:	4622      	mov	r2, r4
 800e0c2:	462b      	mov	r3, r5
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	4639      	mov	r1, r7
 800e0c8:	f7f2 f906 	bl	80002d8 <__aeabi_dsub>
 800e0cc:	e00e      	b.n	800e0ec <__ieee754_rem_pio2+0x1cc>
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	f7f2 f8ff 	bl	80002d8 <__aeabi_dsub>
 800e0da:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e0de:	9303      	str	r3, [sp, #12]
 800e0e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0e4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e0e8:	2b10      	cmp	r3, #16
 800e0ea:	dc02      	bgt.n	800e0f2 <__ieee754_rem_pio2+0x1d2>
 800e0ec:	e9ca 0100 	strd	r0, r1, [sl]
 800e0f0:	e039      	b.n	800e166 <__ieee754_rem_pio2+0x246>
 800e0f2:	a34f      	add	r3, pc, #316	; (adr r3, 800e230 <__ieee754_rem_pio2+0x310>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	ec51 0b18 	vmov	r0, r1, d8
 800e0fc:	f7f2 faa4 	bl	8000648 <__aeabi_dmul>
 800e100:	4604      	mov	r4, r0
 800e102:	460d      	mov	r5, r1
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	4630      	mov	r0, r6
 800e10a:	4639      	mov	r1, r7
 800e10c:	f7f2 f8e4 	bl	80002d8 <__aeabi_dsub>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	4680      	mov	r8, r0
 800e116:	4689      	mov	r9, r1
 800e118:	4630      	mov	r0, r6
 800e11a:	4639      	mov	r1, r7
 800e11c:	f7f2 f8dc 	bl	80002d8 <__aeabi_dsub>
 800e120:	4622      	mov	r2, r4
 800e122:	462b      	mov	r3, r5
 800e124:	f7f2 f8d8 	bl	80002d8 <__aeabi_dsub>
 800e128:	a343      	add	r3, pc, #268	; (adr r3, 800e238 <__ieee754_rem_pio2+0x318>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	4604      	mov	r4, r0
 800e130:	460d      	mov	r5, r1
 800e132:	ec51 0b18 	vmov	r0, r1, d8
 800e136:	f7f2 fa87 	bl	8000648 <__aeabi_dmul>
 800e13a:	4622      	mov	r2, r4
 800e13c:	462b      	mov	r3, r5
 800e13e:	f7f2 f8cb 	bl	80002d8 <__aeabi_dsub>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4604      	mov	r4, r0
 800e148:	460d      	mov	r5, r1
 800e14a:	4640      	mov	r0, r8
 800e14c:	4649      	mov	r1, r9
 800e14e:	f7f2 f8c3 	bl	80002d8 <__aeabi_dsub>
 800e152:	9a03      	ldr	r2, [sp, #12]
 800e154:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	2b31      	cmp	r3, #49	; 0x31
 800e15c:	dc24      	bgt.n	800e1a8 <__ieee754_rem_pio2+0x288>
 800e15e:	e9ca 0100 	strd	r0, r1, [sl]
 800e162:	4646      	mov	r6, r8
 800e164:	464f      	mov	r7, r9
 800e166:	e9da 8900 	ldrd	r8, r9, [sl]
 800e16a:	4630      	mov	r0, r6
 800e16c:	4642      	mov	r2, r8
 800e16e:	464b      	mov	r3, r9
 800e170:	4639      	mov	r1, r7
 800e172:	f7f2 f8b1 	bl	80002d8 <__aeabi_dsub>
 800e176:	462b      	mov	r3, r5
 800e178:	4622      	mov	r2, r4
 800e17a:	f7f2 f8ad 	bl	80002d8 <__aeabi_dsub>
 800e17e:	9b02      	ldr	r3, [sp, #8]
 800e180:	2b00      	cmp	r3, #0
 800e182:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e186:	f6bf af0b 	bge.w	800dfa0 <__ieee754_rem_pio2+0x80>
 800e18a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e18e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e196:	f8ca 8000 	str.w	r8, [sl]
 800e19a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e19e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e1a2:	f1cb 0b00 	rsb	fp, fp, #0
 800e1a6:	e6fb      	b.n	800dfa0 <__ieee754_rem_pio2+0x80>
 800e1a8:	a327      	add	r3, pc, #156	; (adr r3, 800e248 <__ieee754_rem_pio2+0x328>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	ec51 0b18 	vmov	r0, r1, d8
 800e1b2:	f7f2 fa49 	bl	8000648 <__aeabi_dmul>
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	460d      	mov	r5, r1
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	460b      	mov	r3, r1
 800e1be:	4640      	mov	r0, r8
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	f7f2 f889 	bl	80002d8 <__aeabi_dsub>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4606      	mov	r6, r0
 800e1cc:	460f      	mov	r7, r1
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	f7f2 f881 	bl	80002d8 <__aeabi_dsub>
 800e1d6:	4622      	mov	r2, r4
 800e1d8:	462b      	mov	r3, r5
 800e1da:	f7f2 f87d 	bl	80002d8 <__aeabi_dsub>
 800e1de:	a31c      	add	r3, pc, #112	; (adr r3, 800e250 <__ieee754_rem_pio2+0x330>)
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	460d      	mov	r5, r1
 800e1e8:	ec51 0b18 	vmov	r0, r1, d8
 800e1ec:	f7f2 fa2c 	bl	8000648 <__aeabi_dmul>
 800e1f0:	4622      	mov	r2, r4
 800e1f2:	462b      	mov	r3, r5
 800e1f4:	f7f2 f870 	bl	80002d8 <__aeabi_dsub>
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	460d      	mov	r5, r1
 800e1fc:	e760      	b.n	800e0c0 <__ieee754_rem_pio2+0x1a0>
 800e1fe:	4b1c      	ldr	r3, [pc, #112]	; (800e270 <__ieee754_rem_pio2+0x350>)
 800e200:	4598      	cmp	r8, r3
 800e202:	dd37      	ble.n	800e274 <__ieee754_rem_pio2+0x354>
 800e204:	ee10 2a10 	vmov	r2, s0
 800e208:	462b      	mov	r3, r5
 800e20a:	4620      	mov	r0, r4
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7f2 f863 	bl	80002d8 <__aeabi_dsub>
 800e212:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e216:	e9ca 0100 	strd	r0, r1, [sl]
 800e21a:	e695      	b.n	800df48 <__ieee754_rem_pio2+0x28>
 800e21c:	f3af 8000 	nop.w
 800e220:	54400000 	.word	0x54400000
 800e224:	3ff921fb 	.word	0x3ff921fb
 800e228:	1a626331 	.word	0x1a626331
 800e22c:	3dd0b461 	.word	0x3dd0b461
 800e230:	1a600000 	.word	0x1a600000
 800e234:	3dd0b461 	.word	0x3dd0b461
 800e238:	2e037073 	.word	0x2e037073
 800e23c:	3ba3198a 	.word	0x3ba3198a
 800e240:	6dc9c883 	.word	0x6dc9c883
 800e244:	3fe45f30 	.word	0x3fe45f30
 800e248:	2e000000 	.word	0x2e000000
 800e24c:	3ba3198a 	.word	0x3ba3198a
 800e250:	252049c1 	.word	0x252049c1
 800e254:	397b839a 	.word	0x397b839a
 800e258:	3fe921fb 	.word	0x3fe921fb
 800e25c:	4002d97b 	.word	0x4002d97b
 800e260:	3ff921fb 	.word	0x3ff921fb
 800e264:	413921fb 	.word	0x413921fb
 800e268:	3fe00000 	.word	0x3fe00000
 800e26c:	0800f58c 	.word	0x0800f58c
 800e270:	7fefffff 	.word	0x7fefffff
 800e274:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e278:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e27c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e280:	4620      	mov	r0, r4
 800e282:	460d      	mov	r5, r1
 800e284:	f7f2 fc90 	bl	8000ba8 <__aeabi_d2iz>
 800e288:	f7f2 f974 	bl	8000574 <__aeabi_i2d>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4620      	mov	r0, r4
 800e292:	4629      	mov	r1, r5
 800e294:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e298:	f7f2 f81e 	bl	80002d8 <__aeabi_dsub>
 800e29c:	4b21      	ldr	r3, [pc, #132]	; (800e324 <__ieee754_rem_pio2+0x404>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f7f2 f9d2 	bl	8000648 <__aeabi_dmul>
 800e2a4:	460d      	mov	r5, r1
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	f7f2 fc7e 	bl	8000ba8 <__aeabi_d2iz>
 800e2ac:	f7f2 f962 	bl	8000574 <__aeabi_i2d>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e2bc:	f7f2 f80c 	bl	80002d8 <__aeabi_dsub>
 800e2c0:	4b18      	ldr	r3, [pc, #96]	; (800e324 <__ieee754_rem_pio2+0x404>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f7f2 f9c0 	bl	8000648 <__aeabi_dmul>
 800e2c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e2cc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e2d0:	2703      	movs	r7, #3
 800e2d2:	2400      	movs	r4, #0
 800e2d4:	2500      	movs	r5, #0
 800e2d6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e2da:	4622      	mov	r2, r4
 800e2dc:	462b      	mov	r3, r5
 800e2de:	46b9      	mov	r9, r7
 800e2e0:	3f01      	subs	r7, #1
 800e2e2:	f7f2 fc19 	bl	8000b18 <__aeabi_dcmpeq>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d1f5      	bne.n	800e2d6 <__ieee754_rem_pio2+0x3b6>
 800e2ea:	4b0f      	ldr	r3, [pc, #60]	; (800e328 <__ieee754_rem_pio2+0x408>)
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	464b      	mov	r3, r9
 800e2f6:	4651      	mov	r1, sl
 800e2f8:	a804      	add	r0, sp, #16
 800e2fa:	f000 f821 	bl	800e340 <__kernel_rem_pio2>
 800e2fe:	9b02      	ldr	r3, [sp, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	4683      	mov	fp, r0
 800e304:	f6bf ae4c 	bge.w	800dfa0 <__ieee754_rem_pio2+0x80>
 800e308:	e9da 2100 	ldrd	r2, r1, [sl]
 800e30c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e310:	e9ca 2300 	strd	r2, r3, [sl]
 800e314:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e31c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e320:	e73f      	b.n	800e1a2 <__ieee754_rem_pio2+0x282>
 800e322:	bf00      	nop
 800e324:	41700000 	.word	0x41700000
 800e328:	0800f60c 	.word	0x0800f60c

0800e32c <fabs>:
 800e32c:	ec51 0b10 	vmov	r0, r1, d0
 800e330:	ee10 2a10 	vmov	r2, s0
 800e334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e338:	ec43 2b10 	vmov	d0, r2, r3
 800e33c:	4770      	bx	lr
	...

0800e340 <__kernel_rem_pio2>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	ed2d 8b02 	vpush	{d8}
 800e348:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e34c:	f112 0f14 	cmn.w	r2, #20
 800e350:	9306      	str	r3, [sp, #24]
 800e352:	9104      	str	r1, [sp, #16]
 800e354:	4bc2      	ldr	r3, [pc, #776]	; (800e660 <__kernel_rem_pio2+0x320>)
 800e356:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e358:	9009      	str	r0, [sp, #36]	; 0x24
 800e35a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	9b06      	ldr	r3, [sp, #24]
 800e362:	f103 33ff 	add.w	r3, r3, #4294967295
 800e366:	bfa8      	it	ge
 800e368:	1ed4      	subge	r4, r2, #3
 800e36a:	9305      	str	r3, [sp, #20]
 800e36c:	bfb2      	itee	lt
 800e36e:	2400      	movlt	r4, #0
 800e370:	2318      	movge	r3, #24
 800e372:	fb94 f4f3 	sdivge	r4, r4, r3
 800e376:	f06f 0317 	mvn.w	r3, #23
 800e37a:	fb04 3303 	mla	r3, r4, r3, r3
 800e37e:	eb03 0a02 	add.w	sl, r3, r2
 800e382:	9b00      	ldr	r3, [sp, #0]
 800e384:	9a05      	ldr	r2, [sp, #20]
 800e386:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e650 <__kernel_rem_pio2+0x310>
 800e38a:	eb03 0802 	add.w	r8, r3, r2
 800e38e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e390:	1aa7      	subs	r7, r4, r2
 800e392:	ae20      	add	r6, sp, #128	; 0x80
 800e394:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e398:	2500      	movs	r5, #0
 800e39a:	4545      	cmp	r5, r8
 800e39c:	dd13      	ble.n	800e3c6 <__kernel_rem_pio2+0x86>
 800e39e:	9b06      	ldr	r3, [sp, #24]
 800e3a0:	aa20      	add	r2, sp, #128	; 0x80
 800e3a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e3a6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e3aa:	f04f 0800 	mov.w	r8, #0
 800e3ae:	9b00      	ldr	r3, [sp, #0]
 800e3b0:	4598      	cmp	r8, r3
 800e3b2:	dc31      	bgt.n	800e418 <__kernel_rem_pio2+0xd8>
 800e3b4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e650 <__kernel_rem_pio2+0x310>
 800e3b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e3bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3c0:	462f      	mov	r7, r5
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	e01b      	b.n	800e3fe <__kernel_rem_pio2+0xbe>
 800e3c6:	42ef      	cmn	r7, r5
 800e3c8:	d407      	bmi.n	800e3da <__kernel_rem_pio2+0x9a>
 800e3ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e3ce:	f7f2 f8d1 	bl	8000574 <__aeabi_i2d>
 800e3d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e3d6:	3501      	adds	r5, #1
 800e3d8:	e7df      	b.n	800e39a <__kernel_rem_pio2+0x5a>
 800e3da:	ec51 0b18 	vmov	r0, r1, d8
 800e3de:	e7f8      	b.n	800e3d2 <__kernel_rem_pio2+0x92>
 800e3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e3e8:	f7f2 f92e 	bl	8000648 <__aeabi_dmul>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f4:	f7f1 ff72 	bl	80002dc <__adddf3>
 800e3f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3fc:	3601      	adds	r6, #1
 800e3fe:	9b05      	ldr	r3, [sp, #20]
 800e400:	429e      	cmp	r6, r3
 800e402:	f1a7 0708 	sub.w	r7, r7, #8
 800e406:	ddeb      	ble.n	800e3e0 <__kernel_rem_pio2+0xa0>
 800e408:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e40c:	f108 0801 	add.w	r8, r8, #1
 800e410:	ecab 7b02 	vstmia	fp!, {d7}
 800e414:	3508      	adds	r5, #8
 800e416:	e7ca      	b.n	800e3ae <__kernel_rem_pio2+0x6e>
 800e418:	9b00      	ldr	r3, [sp, #0]
 800e41a:	aa0c      	add	r2, sp, #48	; 0x30
 800e41c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e420:	930b      	str	r3, [sp, #44]	; 0x2c
 800e422:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e424:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e428:	9c00      	ldr	r4, [sp, #0]
 800e42a:	930a      	str	r3, [sp, #40]	; 0x28
 800e42c:	00e3      	lsls	r3, r4, #3
 800e42e:	9308      	str	r3, [sp, #32]
 800e430:	ab98      	add	r3, sp, #608	; 0x260
 800e432:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e436:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e43a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e43e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e440:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e444:	46c3      	mov	fp, r8
 800e446:	46a1      	mov	r9, r4
 800e448:	f1b9 0f00 	cmp.w	r9, #0
 800e44c:	f1a5 0508 	sub.w	r5, r5, #8
 800e450:	dc77      	bgt.n	800e542 <__kernel_rem_pio2+0x202>
 800e452:	ec47 6b10 	vmov	d0, r6, r7
 800e456:	4650      	mov	r0, sl
 800e458:	f000 fac2 	bl	800e9e0 <scalbn>
 800e45c:	ec57 6b10 	vmov	r6, r7, d0
 800e460:	2200      	movs	r2, #0
 800e462:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e466:	ee10 0a10 	vmov	r0, s0
 800e46a:	4639      	mov	r1, r7
 800e46c:	f7f2 f8ec 	bl	8000648 <__aeabi_dmul>
 800e470:	ec41 0b10 	vmov	d0, r0, r1
 800e474:	f000 fb34 	bl	800eae0 <floor>
 800e478:	4b7a      	ldr	r3, [pc, #488]	; (800e664 <__kernel_rem_pio2+0x324>)
 800e47a:	ec51 0b10 	vmov	r0, r1, d0
 800e47e:	2200      	movs	r2, #0
 800e480:	f7f2 f8e2 	bl	8000648 <__aeabi_dmul>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	4630      	mov	r0, r6
 800e48a:	4639      	mov	r1, r7
 800e48c:	f7f1 ff24 	bl	80002d8 <__aeabi_dsub>
 800e490:	460f      	mov	r7, r1
 800e492:	4606      	mov	r6, r0
 800e494:	f7f2 fb88 	bl	8000ba8 <__aeabi_d2iz>
 800e498:	9002      	str	r0, [sp, #8]
 800e49a:	f7f2 f86b 	bl	8000574 <__aeabi_i2d>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	f7f1 ff17 	bl	80002d8 <__aeabi_dsub>
 800e4aa:	f1ba 0f00 	cmp.w	sl, #0
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	460f      	mov	r7, r1
 800e4b2:	dd6d      	ble.n	800e590 <__kernel_rem_pio2+0x250>
 800e4b4:	1e61      	subs	r1, r4, #1
 800e4b6:	ab0c      	add	r3, sp, #48	; 0x30
 800e4b8:	9d02      	ldr	r5, [sp, #8]
 800e4ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4be:	f1ca 0018 	rsb	r0, sl, #24
 800e4c2:	fa43 f200 	asr.w	r2, r3, r0
 800e4c6:	4415      	add	r5, r2
 800e4c8:	4082      	lsls	r2, r0
 800e4ca:	1a9b      	subs	r3, r3, r2
 800e4cc:	aa0c      	add	r2, sp, #48	; 0x30
 800e4ce:	9502      	str	r5, [sp, #8]
 800e4d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e4d4:	f1ca 0217 	rsb	r2, sl, #23
 800e4d8:	fa43 fb02 	asr.w	fp, r3, r2
 800e4dc:	f1bb 0f00 	cmp.w	fp, #0
 800e4e0:	dd65      	ble.n	800e5ae <__kernel_rem_pio2+0x26e>
 800e4e2:	9b02      	ldr	r3, [sp, #8]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	9302      	str	r3, [sp, #8]
 800e4ea:	4615      	mov	r5, r2
 800e4ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e4f0:	4294      	cmp	r4, r2
 800e4f2:	f300 809f 	bgt.w	800e634 <__kernel_rem_pio2+0x2f4>
 800e4f6:	f1ba 0f00 	cmp.w	sl, #0
 800e4fa:	dd07      	ble.n	800e50c <__kernel_rem_pio2+0x1cc>
 800e4fc:	f1ba 0f01 	cmp.w	sl, #1
 800e500:	f000 80c1 	beq.w	800e686 <__kernel_rem_pio2+0x346>
 800e504:	f1ba 0f02 	cmp.w	sl, #2
 800e508:	f000 80c7 	beq.w	800e69a <__kernel_rem_pio2+0x35a>
 800e50c:	f1bb 0f02 	cmp.w	fp, #2
 800e510:	d14d      	bne.n	800e5ae <__kernel_rem_pio2+0x26e>
 800e512:	4632      	mov	r2, r6
 800e514:	463b      	mov	r3, r7
 800e516:	4954      	ldr	r1, [pc, #336]	; (800e668 <__kernel_rem_pio2+0x328>)
 800e518:	2000      	movs	r0, #0
 800e51a:	f7f1 fedd 	bl	80002d8 <__aeabi_dsub>
 800e51e:	4606      	mov	r6, r0
 800e520:	460f      	mov	r7, r1
 800e522:	2d00      	cmp	r5, #0
 800e524:	d043      	beq.n	800e5ae <__kernel_rem_pio2+0x26e>
 800e526:	4650      	mov	r0, sl
 800e528:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e658 <__kernel_rem_pio2+0x318>
 800e52c:	f000 fa58 	bl	800e9e0 <scalbn>
 800e530:	4630      	mov	r0, r6
 800e532:	4639      	mov	r1, r7
 800e534:	ec53 2b10 	vmov	r2, r3, d0
 800e538:	f7f1 fece 	bl	80002d8 <__aeabi_dsub>
 800e53c:	4606      	mov	r6, r0
 800e53e:	460f      	mov	r7, r1
 800e540:	e035      	b.n	800e5ae <__kernel_rem_pio2+0x26e>
 800e542:	4b4a      	ldr	r3, [pc, #296]	; (800e66c <__kernel_rem_pio2+0x32c>)
 800e544:	2200      	movs	r2, #0
 800e546:	4630      	mov	r0, r6
 800e548:	4639      	mov	r1, r7
 800e54a:	f7f2 f87d 	bl	8000648 <__aeabi_dmul>
 800e54e:	f7f2 fb2b 	bl	8000ba8 <__aeabi_d2iz>
 800e552:	f7f2 f80f 	bl	8000574 <__aeabi_i2d>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	ec43 2b18 	vmov	d8, r2, r3
 800e55e:	4b44      	ldr	r3, [pc, #272]	; (800e670 <__kernel_rem_pio2+0x330>)
 800e560:	2200      	movs	r2, #0
 800e562:	f7f2 f871 	bl	8000648 <__aeabi_dmul>
 800e566:	4602      	mov	r2, r0
 800e568:	460b      	mov	r3, r1
 800e56a:	4630      	mov	r0, r6
 800e56c:	4639      	mov	r1, r7
 800e56e:	f7f1 feb3 	bl	80002d8 <__aeabi_dsub>
 800e572:	f7f2 fb19 	bl	8000ba8 <__aeabi_d2iz>
 800e576:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e57a:	f84b 0b04 	str.w	r0, [fp], #4
 800e57e:	ec51 0b18 	vmov	r0, r1, d8
 800e582:	f7f1 feab 	bl	80002dc <__adddf3>
 800e586:	f109 39ff 	add.w	r9, r9, #4294967295
 800e58a:	4606      	mov	r6, r0
 800e58c:	460f      	mov	r7, r1
 800e58e:	e75b      	b.n	800e448 <__kernel_rem_pio2+0x108>
 800e590:	d106      	bne.n	800e5a0 <__kernel_rem_pio2+0x260>
 800e592:	1e63      	subs	r3, r4, #1
 800e594:	aa0c      	add	r2, sp, #48	; 0x30
 800e596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e59a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e59e:	e79d      	b.n	800e4dc <__kernel_rem_pio2+0x19c>
 800e5a0:	4b34      	ldr	r3, [pc, #208]	; (800e674 <__kernel_rem_pio2+0x334>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f7f2 fad6 	bl	8000b54 <__aeabi_dcmpge>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d140      	bne.n	800e62e <__kernel_rem_pio2+0x2ee>
 800e5ac:	4683      	mov	fp, r0
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	4639      	mov	r1, r7
 800e5b6:	f7f2 faaf 	bl	8000b18 <__aeabi_dcmpeq>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	f000 80c1 	beq.w	800e742 <__kernel_rem_pio2+0x402>
 800e5c0:	1e65      	subs	r5, r4, #1
 800e5c2:	462b      	mov	r3, r5
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	9900      	ldr	r1, [sp, #0]
 800e5c8:	428b      	cmp	r3, r1
 800e5ca:	da6d      	bge.n	800e6a8 <__kernel_rem_pio2+0x368>
 800e5cc:	2a00      	cmp	r2, #0
 800e5ce:	f000 808a 	beq.w	800e6e6 <__kernel_rem_pio2+0x3a6>
 800e5d2:	ab0c      	add	r3, sp, #48	; 0x30
 800e5d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e5d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 80ae 	beq.w	800e73e <__kernel_rem_pio2+0x3fe>
 800e5e2:	4650      	mov	r0, sl
 800e5e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e658 <__kernel_rem_pio2+0x318>
 800e5e8:	f000 f9fa 	bl	800e9e0 <scalbn>
 800e5ec:	1c6b      	adds	r3, r5, #1
 800e5ee:	00da      	lsls	r2, r3, #3
 800e5f0:	9205      	str	r2, [sp, #20]
 800e5f2:	ec57 6b10 	vmov	r6, r7, d0
 800e5f6:	aa70      	add	r2, sp, #448	; 0x1c0
 800e5f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e66c <__kernel_rem_pio2+0x32c>
 800e5fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e600:	462c      	mov	r4, r5
 800e602:	f04f 0800 	mov.w	r8, #0
 800e606:	2c00      	cmp	r4, #0
 800e608:	f280 80d4 	bge.w	800e7b4 <__kernel_rem_pio2+0x474>
 800e60c:	462c      	mov	r4, r5
 800e60e:	2c00      	cmp	r4, #0
 800e610:	f2c0 8102 	blt.w	800e818 <__kernel_rem_pio2+0x4d8>
 800e614:	4b18      	ldr	r3, [pc, #96]	; (800e678 <__kernel_rem_pio2+0x338>)
 800e616:	461e      	mov	r6, r3
 800e618:	ab70      	add	r3, sp, #448	; 0x1c0
 800e61a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e61e:	1b2b      	subs	r3, r5, r4
 800e620:	f04f 0900 	mov.w	r9, #0
 800e624:	f04f 0a00 	mov.w	sl, #0
 800e628:	2700      	movs	r7, #0
 800e62a:	9306      	str	r3, [sp, #24]
 800e62c:	e0e6      	b.n	800e7fc <__kernel_rem_pio2+0x4bc>
 800e62e:	f04f 0b02 	mov.w	fp, #2
 800e632:	e756      	b.n	800e4e2 <__kernel_rem_pio2+0x1a2>
 800e634:	f8d8 3000 	ldr.w	r3, [r8]
 800e638:	bb05      	cbnz	r5, 800e67c <__kernel_rem_pio2+0x33c>
 800e63a:	b123      	cbz	r3, 800e646 <__kernel_rem_pio2+0x306>
 800e63c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e640:	f8c8 3000 	str.w	r3, [r8]
 800e644:	2301      	movs	r3, #1
 800e646:	3201      	adds	r2, #1
 800e648:	f108 0804 	add.w	r8, r8, #4
 800e64c:	461d      	mov	r5, r3
 800e64e:	e74f      	b.n	800e4f0 <__kernel_rem_pio2+0x1b0>
	...
 800e65c:	3ff00000 	.word	0x3ff00000
 800e660:	0800f758 	.word	0x0800f758
 800e664:	40200000 	.word	0x40200000
 800e668:	3ff00000 	.word	0x3ff00000
 800e66c:	3e700000 	.word	0x3e700000
 800e670:	41700000 	.word	0x41700000
 800e674:	3fe00000 	.word	0x3fe00000
 800e678:	0800f718 	.word	0x0800f718
 800e67c:	1acb      	subs	r3, r1, r3
 800e67e:	f8c8 3000 	str.w	r3, [r8]
 800e682:	462b      	mov	r3, r5
 800e684:	e7df      	b.n	800e646 <__kernel_rem_pio2+0x306>
 800e686:	1e62      	subs	r2, r4, #1
 800e688:	ab0c      	add	r3, sp, #48	; 0x30
 800e68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e692:	a90c      	add	r1, sp, #48	; 0x30
 800e694:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e698:	e738      	b.n	800e50c <__kernel_rem_pio2+0x1cc>
 800e69a:	1e62      	subs	r2, r4, #1
 800e69c:	ab0c      	add	r3, sp, #48	; 0x30
 800e69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6a6:	e7f4      	b.n	800e692 <__kernel_rem_pio2+0x352>
 800e6a8:	a90c      	add	r1, sp, #48	; 0x30
 800e6aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	e788      	b.n	800e5c6 <__kernel_rem_pio2+0x286>
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e6ba:	2900      	cmp	r1, #0
 800e6bc:	d0fa      	beq.n	800e6b4 <__kernel_rem_pio2+0x374>
 800e6be:	9a08      	ldr	r2, [sp, #32]
 800e6c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e6c4:	446a      	add	r2, sp
 800e6c6:	3a98      	subs	r2, #152	; 0x98
 800e6c8:	9208      	str	r2, [sp, #32]
 800e6ca:	9a06      	ldr	r2, [sp, #24]
 800e6cc:	a920      	add	r1, sp, #128	; 0x80
 800e6ce:	18a2      	adds	r2, r4, r2
 800e6d0:	18e3      	adds	r3, r4, r3
 800e6d2:	f104 0801 	add.w	r8, r4, #1
 800e6d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e6da:	9302      	str	r3, [sp, #8]
 800e6dc:	9b02      	ldr	r3, [sp, #8]
 800e6de:	4543      	cmp	r3, r8
 800e6e0:	da04      	bge.n	800e6ec <__kernel_rem_pio2+0x3ac>
 800e6e2:	461c      	mov	r4, r3
 800e6e4:	e6a2      	b.n	800e42c <__kernel_rem_pio2+0xec>
 800e6e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e7e4      	b.n	800e6b6 <__kernel_rem_pio2+0x376>
 800e6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e6f2:	f7f1 ff3f 	bl	8000574 <__aeabi_i2d>
 800e6f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6fc:	46ab      	mov	fp, r5
 800e6fe:	461c      	mov	r4, r3
 800e700:	f04f 0900 	mov.w	r9, #0
 800e704:	2600      	movs	r6, #0
 800e706:	2700      	movs	r7, #0
 800e708:	9b05      	ldr	r3, [sp, #20]
 800e70a:	4599      	cmp	r9, r3
 800e70c:	dd06      	ble.n	800e71c <__kernel_rem_pio2+0x3dc>
 800e70e:	9b08      	ldr	r3, [sp, #32]
 800e710:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e714:	f108 0801 	add.w	r8, r8, #1
 800e718:	9308      	str	r3, [sp, #32]
 800e71a:	e7df      	b.n	800e6dc <__kernel_rem_pio2+0x39c>
 800e71c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e720:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e724:	f7f1 ff90 	bl	8000648 <__aeabi_dmul>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4630      	mov	r0, r6
 800e72e:	4639      	mov	r1, r7
 800e730:	f7f1 fdd4 	bl	80002dc <__adddf3>
 800e734:	f109 0901 	add.w	r9, r9, #1
 800e738:	4606      	mov	r6, r0
 800e73a:	460f      	mov	r7, r1
 800e73c:	e7e4      	b.n	800e708 <__kernel_rem_pio2+0x3c8>
 800e73e:	3d01      	subs	r5, #1
 800e740:	e747      	b.n	800e5d2 <__kernel_rem_pio2+0x292>
 800e742:	ec47 6b10 	vmov	d0, r6, r7
 800e746:	f1ca 0000 	rsb	r0, sl, #0
 800e74a:	f000 f949 	bl	800e9e0 <scalbn>
 800e74e:	ec57 6b10 	vmov	r6, r7, d0
 800e752:	4ba0      	ldr	r3, [pc, #640]	; (800e9d4 <__kernel_rem_pio2+0x694>)
 800e754:	ee10 0a10 	vmov	r0, s0
 800e758:	2200      	movs	r2, #0
 800e75a:	4639      	mov	r1, r7
 800e75c:	f7f2 f9fa 	bl	8000b54 <__aeabi_dcmpge>
 800e760:	b1f8      	cbz	r0, 800e7a2 <__kernel_rem_pio2+0x462>
 800e762:	4b9d      	ldr	r3, [pc, #628]	; (800e9d8 <__kernel_rem_pio2+0x698>)
 800e764:	2200      	movs	r2, #0
 800e766:	4630      	mov	r0, r6
 800e768:	4639      	mov	r1, r7
 800e76a:	f7f1 ff6d 	bl	8000648 <__aeabi_dmul>
 800e76e:	f7f2 fa1b 	bl	8000ba8 <__aeabi_d2iz>
 800e772:	4680      	mov	r8, r0
 800e774:	f7f1 fefe 	bl	8000574 <__aeabi_i2d>
 800e778:	4b96      	ldr	r3, [pc, #600]	; (800e9d4 <__kernel_rem_pio2+0x694>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	f7f1 ff64 	bl	8000648 <__aeabi_dmul>
 800e780:	460b      	mov	r3, r1
 800e782:	4602      	mov	r2, r0
 800e784:	4639      	mov	r1, r7
 800e786:	4630      	mov	r0, r6
 800e788:	f7f1 fda6 	bl	80002d8 <__aeabi_dsub>
 800e78c:	f7f2 fa0c 	bl	8000ba8 <__aeabi_d2iz>
 800e790:	1c65      	adds	r5, r4, #1
 800e792:	ab0c      	add	r3, sp, #48	; 0x30
 800e794:	f10a 0a18 	add.w	sl, sl, #24
 800e798:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e79c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e7a0:	e71f      	b.n	800e5e2 <__kernel_rem_pio2+0x2a2>
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	f7f2 f9ff 	bl	8000ba8 <__aeabi_d2iz>
 800e7aa:	ab0c      	add	r3, sp, #48	; 0x30
 800e7ac:	4625      	mov	r5, r4
 800e7ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e7b2:	e716      	b.n	800e5e2 <__kernel_rem_pio2+0x2a2>
 800e7b4:	ab0c      	add	r3, sp, #48	; 0x30
 800e7b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e7ba:	f7f1 fedb 	bl	8000574 <__aeabi_i2d>
 800e7be:	4632      	mov	r2, r6
 800e7c0:	463b      	mov	r3, r7
 800e7c2:	f7f1 ff41 	bl	8000648 <__aeabi_dmul>
 800e7c6:	4642      	mov	r2, r8
 800e7c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e7cc:	464b      	mov	r3, r9
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	4639      	mov	r1, r7
 800e7d2:	f7f1 ff39 	bl	8000648 <__aeabi_dmul>
 800e7d6:	3c01      	subs	r4, #1
 800e7d8:	4606      	mov	r6, r0
 800e7da:	460f      	mov	r7, r1
 800e7dc:	e713      	b.n	800e606 <__kernel_rem_pio2+0x2c6>
 800e7de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e7e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e7e6:	f7f1 ff2f 	bl	8000648 <__aeabi_dmul>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4648      	mov	r0, r9
 800e7f0:	4651      	mov	r1, sl
 800e7f2:	f7f1 fd73 	bl	80002dc <__adddf3>
 800e7f6:	3701      	adds	r7, #1
 800e7f8:	4681      	mov	r9, r0
 800e7fa:	468a      	mov	sl, r1
 800e7fc:	9b00      	ldr	r3, [sp, #0]
 800e7fe:	429f      	cmp	r7, r3
 800e800:	dc02      	bgt.n	800e808 <__kernel_rem_pio2+0x4c8>
 800e802:	9b06      	ldr	r3, [sp, #24]
 800e804:	429f      	cmp	r7, r3
 800e806:	ddea      	ble.n	800e7de <__kernel_rem_pio2+0x49e>
 800e808:	9a06      	ldr	r2, [sp, #24]
 800e80a:	ab48      	add	r3, sp, #288	; 0x120
 800e80c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e810:	e9c6 9a00 	strd	r9, sl, [r6]
 800e814:	3c01      	subs	r4, #1
 800e816:	e6fa      	b.n	800e60e <__kernel_rem_pio2+0x2ce>
 800e818:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e81a:	2b02      	cmp	r3, #2
 800e81c:	dc0b      	bgt.n	800e836 <__kernel_rem_pio2+0x4f6>
 800e81e:	2b00      	cmp	r3, #0
 800e820:	dc39      	bgt.n	800e896 <__kernel_rem_pio2+0x556>
 800e822:	d05d      	beq.n	800e8e0 <__kernel_rem_pio2+0x5a0>
 800e824:	9b02      	ldr	r3, [sp, #8]
 800e826:	f003 0007 	and.w	r0, r3, #7
 800e82a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e82e:	ecbd 8b02 	vpop	{d8}
 800e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e836:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e838:	2b03      	cmp	r3, #3
 800e83a:	d1f3      	bne.n	800e824 <__kernel_rem_pio2+0x4e4>
 800e83c:	9b05      	ldr	r3, [sp, #20]
 800e83e:	9500      	str	r5, [sp, #0]
 800e840:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e844:	eb0d 0403 	add.w	r4, sp, r3
 800e848:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e84c:	46a2      	mov	sl, r4
 800e84e:	9b00      	ldr	r3, [sp, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	f1aa 0a08 	sub.w	sl, sl, #8
 800e856:	dc69      	bgt.n	800e92c <__kernel_rem_pio2+0x5ec>
 800e858:	46aa      	mov	sl, r5
 800e85a:	f1ba 0f01 	cmp.w	sl, #1
 800e85e:	f1a4 0408 	sub.w	r4, r4, #8
 800e862:	f300 8083 	bgt.w	800e96c <__kernel_rem_pio2+0x62c>
 800e866:	9c05      	ldr	r4, [sp, #20]
 800e868:	ab48      	add	r3, sp, #288	; 0x120
 800e86a:	441c      	add	r4, r3
 800e86c:	2000      	movs	r0, #0
 800e86e:	2100      	movs	r1, #0
 800e870:	2d01      	cmp	r5, #1
 800e872:	f300 809a 	bgt.w	800e9aa <__kernel_rem_pio2+0x66a>
 800e876:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e87a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e87e:	f1bb 0f00 	cmp.w	fp, #0
 800e882:	f040 8098 	bne.w	800e9b6 <__kernel_rem_pio2+0x676>
 800e886:	9b04      	ldr	r3, [sp, #16]
 800e888:	e9c3 7800 	strd	r7, r8, [r3]
 800e88c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e890:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e894:	e7c6      	b.n	800e824 <__kernel_rem_pio2+0x4e4>
 800e896:	9e05      	ldr	r6, [sp, #20]
 800e898:	ab48      	add	r3, sp, #288	; 0x120
 800e89a:	441e      	add	r6, r3
 800e89c:	462c      	mov	r4, r5
 800e89e:	2000      	movs	r0, #0
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	2c00      	cmp	r4, #0
 800e8a4:	da33      	bge.n	800e90e <__kernel_rem_pio2+0x5ce>
 800e8a6:	f1bb 0f00 	cmp.w	fp, #0
 800e8aa:	d036      	beq.n	800e91a <__kernel_rem_pio2+0x5da>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8b2:	9c04      	ldr	r4, [sp, #16]
 800e8b4:	e9c4 2300 	strd	r2, r3, [r4]
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e8c0:	f7f1 fd0a 	bl	80002d8 <__aeabi_dsub>
 800e8c4:	ae4a      	add	r6, sp, #296	; 0x128
 800e8c6:	2401      	movs	r4, #1
 800e8c8:	42a5      	cmp	r5, r4
 800e8ca:	da29      	bge.n	800e920 <__kernel_rem_pio2+0x5e0>
 800e8cc:	f1bb 0f00 	cmp.w	fp, #0
 800e8d0:	d002      	beq.n	800e8d8 <__kernel_rem_pio2+0x598>
 800e8d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	9b04      	ldr	r3, [sp, #16]
 800e8da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e8de:	e7a1      	b.n	800e824 <__kernel_rem_pio2+0x4e4>
 800e8e0:	9c05      	ldr	r4, [sp, #20]
 800e8e2:	ab48      	add	r3, sp, #288	; 0x120
 800e8e4:	441c      	add	r4, r3
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	2d00      	cmp	r5, #0
 800e8ec:	da09      	bge.n	800e902 <__kernel_rem_pio2+0x5c2>
 800e8ee:	f1bb 0f00 	cmp.w	fp, #0
 800e8f2:	d002      	beq.n	800e8fa <__kernel_rem_pio2+0x5ba>
 800e8f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	9b04      	ldr	r3, [sp, #16]
 800e8fc:	e9c3 0100 	strd	r0, r1, [r3]
 800e900:	e790      	b.n	800e824 <__kernel_rem_pio2+0x4e4>
 800e902:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e906:	f7f1 fce9 	bl	80002dc <__adddf3>
 800e90a:	3d01      	subs	r5, #1
 800e90c:	e7ed      	b.n	800e8ea <__kernel_rem_pio2+0x5aa>
 800e90e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e912:	f7f1 fce3 	bl	80002dc <__adddf3>
 800e916:	3c01      	subs	r4, #1
 800e918:	e7c3      	b.n	800e8a2 <__kernel_rem_pio2+0x562>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	e7c8      	b.n	800e8b2 <__kernel_rem_pio2+0x572>
 800e920:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e924:	f7f1 fcda 	bl	80002dc <__adddf3>
 800e928:	3401      	adds	r4, #1
 800e92a:	e7cd      	b.n	800e8c8 <__kernel_rem_pio2+0x588>
 800e92c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e930:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e934:	9b00      	ldr	r3, [sp, #0]
 800e936:	3b01      	subs	r3, #1
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4632      	mov	r2, r6
 800e93c:	463b      	mov	r3, r7
 800e93e:	4640      	mov	r0, r8
 800e940:	4649      	mov	r1, r9
 800e942:	f7f1 fccb 	bl	80002dc <__adddf3>
 800e946:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	4640      	mov	r0, r8
 800e950:	4649      	mov	r1, r9
 800e952:	f7f1 fcc1 	bl	80002d8 <__aeabi_dsub>
 800e956:	4632      	mov	r2, r6
 800e958:	463b      	mov	r3, r7
 800e95a:	f7f1 fcbf 	bl	80002dc <__adddf3>
 800e95e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e962:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e966:	ed8a 7b00 	vstr	d7, [sl]
 800e96a:	e770      	b.n	800e84e <__kernel_rem_pio2+0x50e>
 800e96c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e970:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e974:	4640      	mov	r0, r8
 800e976:	4632      	mov	r2, r6
 800e978:	463b      	mov	r3, r7
 800e97a:	4649      	mov	r1, r9
 800e97c:	f7f1 fcae 	bl	80002dc <__adddf3>
 800e980:	e9cd 0100 	strd	r0, r1, [sp]
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	4640      	mov	r0, r8
 800e98a:	4649      	mov	r1, r9
 800e98c:	f7f1 fca4 	bl	80002d8 <__aeabi_dsub>
 800e990:	4632      	mov	r2, r6
 800e992:	463b      	mov	r3, r7
 800e994:	f7f1 fca2 	bl	80002dc <__adddf3>
 800e998:	ed9d 7b00 	vldr	d7, [sp]
 800e99c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e9a0:	ed84 7b00 	vstr	d7, [r4]
 800e9a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9a8:	e757      	b.n	800e85a <__kernel_rem_pio2+0x51a>
 800e9aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e9ae:	f7f1 fc95 	bl	80002dc <__adddf3>
 800e9b2:	3d01      	subs	r5, #1
 800e9b4:	e75c      	b.n	800e870 <__kernel_rem_pio2+0x530>
 800e9b6:	9b04      	ldr	r3, [sp, #16]
 800e9b8:	9a04      	ldr	r2, [sp, #16]
 800e9ba:	601f      	str	r7, [r3, #0]
 800e9bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e9c0:	605c      	str	r4, [r3, #4]
 800e9c2:	609d      	str	r5, [r3, #8]
 800e9c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e9c8:	60d3      	str	r3, [r2, #12]
 800e9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9ce:	6110      	str	r0, [r2, #16]
 800e9d0:	6153      	str	r3, [r2, #20]
 800e9d2:	e727      	b.n	800e824 <__kernel_rem_pio2+0x4e4>
 800e9d4:	41700000 	.word	0x41700000
 800e9d8:	3e700000 	.word	0x3e700000
 800e9dc:	00000000 	.word	0x00000000

0800e9e0 <scalbn>:
 800e9e0:	b570      	push	{r4, r5, r6, lr}
 800e9e2:	ec55 4b10 	vmov	r4, r5, d0
 800e9e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	462b      	mov	r3, r5
 800e9ee:	b999      	cbnz	r1, 800ea18 <scalbn+0x38>
 800e9f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e9f4:	4323      	orrs	r3, r4
 800e9f6:	d03f      	beq.n	800ea78 <scalbn+0x98>
 800e9f8:	4b35      	ldr	r3, [pc, #212]	; (800ead0 <scalbn+0xf0>)
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	ee10 0a10 	vmov	r0, s0
 800ea00:	2200      	movs	r2, #0
 800ea02:	f7f1 fe21 	bl	8000648 <__aeabi_dmul>
 800ea06:	4b33      	ldr	r3, [pc, #204]	; (800ead4 <scalbn+0xf4>)
 800ea08:	429e      	cmp	r6, r3
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	460d      	mov	r5, r1
 800ea0e:	da10      	bge.n	800ea32 <scalbn+0x52>
 800ea10:	a327      	add	r3, pc, #156	; (adr r3, 800eab0 <scalbn+0xd0>)
 800ea12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea16:	e01f      	b.n	800ea58 <scalbn+0x78>
 800ea18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ea1c:	4291      	cmp	r1, r2
 800ea1e:	d10c      	bne.n	800ea3a <scalbn+0x5a>
 800ea20:	ee10 2a10 	vmov	r2, s0
 800ea24:	4620      	mov	r0, r4
 800ea26:	4629      	mov	r1, r5
 800ea28:	f7f1 fc58 	bl	80002dc <__adddf3>
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	460d      	mov	r5, r1
 800ea30:	e022      	b.n	800ea78 <scalbn+0x98>
 800ea32:	460b      	mov	r3, r1
 800ea34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ea38:	3936      	subs	r1, #54	; 0x36
 800ea3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ea3e:	4296      	cmp	r6, r2
 800ea40:	dd0d      	ble.n	800ea5e <scalbn+0x7e>
 800ea42:	2d00      	cmp	r5, #0
 800ea44:	a11c      	add	r1, pc, #112	; (adr r1, 800eab8 <scalbn+0xd8>)
 800ea46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea4a:	da02      	bge.n	800ea52 <scalbn+0x72>
 800ea4c:	a11c      	add	r1, pc, #112	; (adr r1, 800eac0 <scalbn+0xe0>)
 800ea4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea52:	a319      	add	r3, pc, #100	; (adr r3, 800eab8 <scalbn+0xd8>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	f7f1 fdf6 	bl	8000648 <__aeabi_dmul>
 800ea5c:	e7e6      	b.n	800ea2c <scalbn+0x4c>
 800ea5e:	1872      	adds	r2, r6, r1
 800ea60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ea64:	428a      	cmp	r2, r1
 800ea66:	dcec      	bgt.n	800ea42 <scalbn+0x62>
 800ea68:	2a00      	cmp	r2, #0
 800ea6a:	dd08      	ble.n	800ea7e <scalbn+0x9e>
 800ea6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ea78:	ec45 4b10 	vmov	d0, r4, r5
 800ea7c:	bd70      	pop	{r4, r5, r6, pc}
 800ea7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ea82:	da08      	bge.n	800ea96 <scalbn+0xb6>
 800ea84:	2d00      	cmp	r5, #0
 800ea86:	a10a      	add	r1, pc, #40	; (adr r1, 800eab0 <scalbn+0xd0>)
 800ea88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea8c:	dac0      	bge.n	800ea10 <scalbn+0x30>
 800ea8e:	a10e      	add	r1, pc, #56	; (adr r1, 800eac8 <scalbn+0xe8>)
 800ea90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea94:	e7bc      	b.n	800ea10 <scalbn+0x30>
 800ea96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea9a:	3236      	adds	r2, #54	; 0x36
 800ea9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaa0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	4b0c      	ldr	r3, [pc, #48]	; (800ead8 <scalbn+0xf8>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	e7d5      	b.n	800ea58 <scalbn+0x78>
 800eaac:	f3af 8000 	nop.w
 800eab0:	c2f8f359 	.word	0xc2f8f359
 800eab4:	01a56e1f 	.word	0x01a56e1f
 800eab8:	8800759c 	.word	0x8800759c
 800eabc:	7e37e43c 	.word	0x7e37e43c
 800eac0:	8800759c 	.word	0x8800759c
 800eac4:	fe37e43c 	.word	0xfe37e43c
 800eac8:	c2f8f359 	.word	0xc2f8f359
 800eacc:	81a56e1f 	.word	0x81a56e1f
 800ead0:	43500000 	.word	0x43500000
 800ead4:	ffff3cb0 	.word	0xffff3cb0
 800ead8:	3c900000 	.word	0x3c900000
 800eadc:	00000000 	.word	0x00000000

0800eae0 <floor>:
 800eae0:	ec51 0b10 	vmov	r0, r1, d0
 800eae4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800eaf0:	2e13      	cmp	r6, #19
 800eaf2:	ee10 5a10 	vmov	r5, s0
 800eaf6:	ee10 8a10 	vmov	r8, s0
 800eafa:	460c      	mov	r4, r1
 800eafc:	dc31      	bgt.n	800eb62 <floor+0x82>
 800eafe:	2e00      	cmp	r6, #0
 800eb00:	da14      	bge.n	800eb2c <floor+0x4c>
 800eb02:	a333      	add	r3, pc, #204	; (adr r3, 800ebd0 <floor+0xf0>)
 800eb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb08:	f7f1 fbe8 	bl	80002dc <__adddf3>
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	2300      	movs	r3, #0
 800eb10:	f7f2 f82a 	bl	8000b68 <__aeabi_dcmpgt>
 800eb14:	b138      	cbz	r0, 800eb26 <floor+0x46>
 800eb16:	2c00      	cmp	r4, #0
 800eb18:	da53      	bge.n	800ebc2 <floor+0xe2>
 800eb1a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800eb1e:	4325      	orrs	r5, r4
 800eb20:	d052      	beq.n	800ebc8 <floor+0xe8>
 800eb22:	4c2d      	ldr	r4, [pc, #180]	; (800ebd8 <floor+0xf8>)
 800eb24:	2500      	movs	r5, #0
 800eb26:	4621      	mov	r1, r4
 800eb28:	4628      	mov	r0, r5
 800eb2a:	e024      	b.n	800eb76 <floor+0x96>
 800eb2c:	4f2b      	ldr	r7, [pc, #172]	; (800ebdc <floor+0xfc>)
 800eb2e:	4137      	asrs	r7, r6
 800eb30:	ea01 0307 	and.w	r3, r1, r7
 800eb34:	4303      	orrs	r3, r0
 800eb36:	d01e      	beq.n	800eb76 <floor+0x96>
 800eb38:	a325      	add	r3, pc, #148	; (adr r3, 800ebd0 <floor+0xf0>)
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f7f1 fbcd 	bl	80002dc <__adddf3>
 800eb42:	2200      	movs	r2, #0
 800eb44:	2300      	movs	r3, #0
 800eb46:	f7f2 f80f 	bl	8000b68 <__aeabi_dcmpgt>
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d0eb      	beq.n	800eb26 <floor+0x46>
 800eb4e:	2c00      	cmp	r4, #0
 800eb50:	bfbe      	ittt	lt
 800eb52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800eb56:	4133      	asrlt	r3, r6
 800eb58:	18e4      	addlt	r4, r4, r3
 800eb5a:	ea24 0407 	bic.w	r4, r4, r7
 800eb5e:	2500      	movs	r5, #0
 800eb60:	e7e1      	b.n	800eb26 <floor+0x46>
 800eb62:	2e33      	cmp	r6, #51	; 0x33
 800eb64:	dd0b      	ble.n	800eb7e <floor+0x9e>
 800eb66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eb6a:	d104      	bne.n	800eb76 <floor+0x96>
 800eb6c:	ee10 2a10 	vmov	r2, s0
 800eb70:	460b      	mov	r3, r1
 800eb72:	f7f1 fbb3 	bl	80002dc <__adddf3>
 800eb76:	ec41 0b10 	vmov	d0, r0, r1
 800eb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb7e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800eb82:	f04f 37ff 	mov.w	r7, #4294967295
 800eb86:	40df      	lsrs	r7, r3
 800eb88:	4238      	tst	r0, r7
 800eb8a:	d0f4      	beq.n	800eb76 <floor+0x96>
 800eb8c:	a310      	add	r3, pc, #64	; (adr r3, 800ebd0 <floor+0xf0>)
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	f7f1 fba3 	bl	80002dc <__adddf3>
 800eb96:	2200      	movs	r2, #0
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f7f1 ffe5 	bl	8000b68 <__aeabi_dcmpgt>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d0c1      	beq.n	800eb26 <floor+0x46>
 800eba2:	2c00      	cmp	r4, #0
 800eba4:	da0a      	bge.n	800ebbc <floor+0xdc>
 800eba6:	2e14      	cmp	r6, #20
 800eba8:	d101      	bne.n	800ebae <floor+0xce>
 800ebaa:	3401      	adds	r4, #1
 800ebac:	e006      	b.n	800ebbc <floor+0xdc>
 800ebae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	40b3      	lsls	r3, r6
 800ebb6:	441d      	add	r5, r3
 800ebb8:	45a8      	cmp	r8, r5
 800ebba:	d8f6      	bhi.n	800ebaa <floor+0xca>
 800ebbc:	ea25 0507 	bic.w	r5, r5, r7
 800ebc0:	e7b1      	b.n	800eb26 <floor+0x46>
 800ebc2:	2500      	movs	r5, #0
 800ebc4:	462c      	mov	r4, r5
 800ebc6:	e7ae      	b.n	800eb26 <floor+0x46>
 800ebc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ebcc:	e7ab      	b.n	800eb26 <floor+0x46>
 800ebce:	bf00      	nop
 800ebd0:	8800759c 	.word	0x8800759c
 800ebd4:	7e37e43c 	.word	0x7e37e43c
 800ebd8:	bff00000 	.word	0xbff00000
 800ebdc:	000fffff 	.word	0x000fffff

0800ebe0 <_sbrk>:
 800ebe0:	4a04      	ldr	r2, [pc, #16]	; (800ebf4 <_sbrk+0x14>)
 800ebe2:	6811      	ldr	r1, [r2, #0]
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	b909      	cbnz	r1, 800ebec <_sbrk+0xc>
 800ebe8:	4903      	ldr	r1, [pc, #12]	; (800ebf8 <_sbrk+0x18>)
 800ebea:	6011      	str	r1, [r2, #0]
 800ebec:	6810      	ldr	r0, [r2, #0]
 800ebee:	4403      	add	r3, r0
 800ebf0:	6013      	str	r3, [r2, #0]
 800ebf2:	4770      	bx	lr
 800ebf4:	200010a8 	.word	0x200010a8
 800ebf8:	200010b0 	.word	0x200010b0

0800ebfc <_init>:
 800ebfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebfe:	bf00      	nop
 800ec00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec02:	bc08      	pop	{r3}
 800ec04:	469e      	mov	lr, r3
 800ec06:	4770      	bx	lr

0800ec08 <_fini>:
 800ec08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0a:	bf00      	nop
 800ec0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec0e:	bc08      	pop	{r3}
 800ec10:	469e      	mov	lr, r3
 800ec12:	4770      	bx	lr
