
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800d488  0800d488  0001d488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dad8  0800dad8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dad8  0800dad8  0001dad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dae0  0800dae0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dae0  0800dae0  0001dae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dae4  0800dae4  0001dae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800dae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001604  200001d8  0800dcc0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200017dc  0800dcc0  000217dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003799f  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006067  00000000  00000000  00057bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001671a  00000000  00000000  0005dc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f8  00000000  00000000  00074370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d25  00000000  00000000  00075b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d3db  00000000  00000000  0007888d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036379  00000000  00000000  000a5c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e3c4  00000000  00000000  000dbfe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063ac  00000000  00000000  001fa3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00200754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d46c 	.word	0x0800d46c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d46c 	.word	0x0800d46c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
  uint8_t senddata_motor[8];
  float_to_uchar4(senddata_motor, duty);
  can1_send(motor_id, senddata_motor);
}

void actuator_motor1(float duty, float duty_Limit1) { motor_cmd(0x100, duty); }
 8000fd4:	b500      	push	{lr}
 8000fd6:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8000fd8:	4668      	mov	r0, sp
 8000fda:	f003 fd33 	bl	8004a44 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8000fde:	4669      	mov	r1, sp
 8000fe0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fe4:	f000 faba 	bl	800155c <can1_send>
void actuator_motor1(float duty, float duty_Limit1) { motor_cmd(0x100, duty); }
 8000fe8:	b003      	add	sp, #12
 8000fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fee:	bf00      	nop

08000ff0 <actuator_motor2>:
void actuator_motor2(float duty, float duty_Limit2) { motor_cmd(0x101, duty); }
 8000ff0:	b500      	push	{lr}
 8000ff2:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8000ff4:	4668      	mov	r0, sp
 8000ff6:	f003 fd25 	bl	8004a44 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8000ffa:	4669      	mov	r1, sp
 8000ffc:	f240 1001 	movw	r0, #257	; 0x101
 8001000:	f000 faac 	bl	800155c <can1_send>
void actuator_motor2(float duty, float duty_Limit2) { motor_cmd(0x101, duty); }
 8001004:	b003      	add	sp, #12
 8001006:	f85d fb04 	ldr.w	pc, [sp], #4
 800100a:	bf00      	nop

0800100c <actuator_motor3>:
void actuator_motor3(float duty, float duty_Limit3) { motor_cmd(0x102, duty); }
 800100c:	b500      	push	{lr}
 800100e:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001010:	4668      	mov	r0, sp
 8001012:	f003 fd17 	bl	8004a44 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001016:	4669      	mov	r1, sp
 8001018:	f44f 7081 	mov.w	r0, #258	; 0x102
 800101c:	f000 fa9e 	bl	800155c <can1_send>
void actuator_motor3(float duty, float duty_Limit3) { motor_cmd(0x102, duty); }
 8001020:	b003      	add	sp, #12
 8001022:	f85d fb04 	ldr.w	pc, [sp], #4
 8001026:	bf00      	nop

08001028 <actuator_motor4>:
void actuator_motor4(float duty, float duty_Limit4) { motor_cmd(0x103, duty); }
 8001028:	b500      	push	{lr}
 800102a:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 800102c:	4668      	mov	r0, sp
 800102e:	f003 fd09 	bl	8004a44 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001032:	4669      	mov	r1, sp
 8001034:	f240 1003 	movw	r0, #259	; 0x103
 8001038:	f000 fa90 	bl	800155c <can1_send>
void actuator_motor4(float duty, float duty_Limit4) { motor_cmd(0x103, duty); }
 800103c:	b003      	add	sp, #12
 800103e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001042:	bf00      	nop

08001044 <actuator_motor5>:
void actuator_motor5(float duty, float duty_Limit5) { motor_cmd(0x104, duty); }
 8001044:	b500      	push	{lr}
 8001046:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001048:	4668      	mov	r0, sp
 800104a:	f003 fcfb 	bl	8004a44 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 800104e:	4669      	mov	r1, sp
 8001050:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001054:	f000 fa82 	bl	800155c <can1_send>
void actuator_motor5(float duty, float duty_Limit5) { motor_cmd(0x104, duty); }
 8001058:	b003      	add	sp, #12
 800105a:	f85d fb04 	ldr.w	pc, [sp], #4
 800105e:	bf00      	nop

08001060 <actuator_kicker_voltage>:

void actuator_kicker_voltage(float voltage)
{
 8001060:	b500      	push	{lr}
 8001062:	b085      	sub	sp, #20
  uint8_t senddata_kick[8];
  uint8_t senddata_voltage[4];
  float_to_uchar4(senddata_voltage, voltage);
 8001064:	a801      	add	r0, sp, #4
 8001066:	f003 fced 	bl	8004a44 <float_to_uchar4>

  senddata_kick[0] = 0;
  senddata_kick[1] = senddata_voltage[0];
  senddata_kick[2] = senddata_voltage[1];
 800106a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  senddata_kick[1] = senddata_voltage[0];
 800106e:	f89d c004 	ldrb.w	ip, [sp, #4]
  senddata_kick[3] = senddata_voltage[2];
 8001072:	f89d 2006 	ldrb.w	r2, [sp, #6]
  senddata_kick[4] = senddata_voltage[3];
 8001076:	f89d 3007 	ldrb.w	r3, [sp, #7]
  senddata_kick[2] = senddata_voltage[1];
 800107a:	f88d 000a 	strb.w	r0, [sp, #10]
  senddata_kick[0] = 0;
 800107e:	2100      	movs	r1, #0
 8001080:	f88d 1008 	strb.w	r1, [sp, #8]
  can1_send(0x110, senddata_kick);
 8001084:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001088:	a902      	add	r1, sp, #8
  senddata_kick[1] = senddata_voltage[0];
 800108a:	f88d c009 	strb.w	ip, [sp, #9]
  senddata_kick[3] = senddata_voltage[2];
 800108e:	f88d 200b 	strb.w	r2, [sp, #11]
  senddata_kick[4] = senddata_voltage[3];
 8001092:	f88d 300c 	strb.w	r3, [sp, #12]
  can1_send(0x110, senddata_kick);
 8001096:	f000 fa61 	bl	800155c <can1_send>
}
 800109a:	b005      	add	sp, #20
 800109c:	f85d fb04 	ldr.w	pc, [sp], #4

080010a0 <actuator_kicker>:

void actuator_kicker(uint8_t id, uint8_t param)
{
 80010a0:	b500      	push	{lr}
 80010a2:	b083      	sub	sp, #12
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
  uint8_t senddata_kick[8];
  senddata_kick[0] = id;
  senddata_kick[1] = param;
  can1_send(0x110, senddata_kick);
 80010a8:	f44f 7088 	mov.w	r0, #272	; 0x110
 80010ac:	4669      	mov	r1, sp
  senddata_kick[0] = id;
 80010ae:	f88d 2000 	strb.w	r2, [sp]
  senddata_kick[1] = param;
 80010b2:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x110, senddata_kick);
 80010b6:	f000 fa51 	bl	800155c <can1_send>
}
 80010ba:	b003      	add	sp, #12
 80010bc:	f85d fb04 	ldr.w	pc, [sp], #4

080010c0 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on)
{
 80010c0:	b500      	push	{lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	4603      	mov	r3, r0
  /*id 0=>off
	 *   1=>on
	 * */
  uint8_t senddata_power[8];
  senddata_power[0] = 0;
 80010c6:	2200      	movs	r2, #0
  senddata_power[1] = power_on;
  can1_send(0x010, senddata_power);
 80010c8:	4669      	mov	r1, sp
 80010ca:	2010      	movs	r0, #16
  senddata_power[0] = 0;
 80010cc:	f88d 2000 	strb.w	r2, [sp]
  senddata_power[1] = power_on;
 80010d0:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x010, senddata_power);
 80010d4:	f000 fa42 	bl	800155c <can1_send>
}
 80010d8:	b003      	add	sp, #12
 80010da:	f85d fb04 	ldr.w	pc, [sp], #4
 80010de:	bf00      	nop

080010e0 <actuator_power_param>:
  senddata_shutdown[3] = 0xFF;
  can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id, float param)
{
 80010e0:	b510      	push	{r4, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	4604      	mov	r4, r0
 * */

  uint8_t senddata_power_param_temp[8];
  uint8_t senddata_power_param[8];

  float_to_uchar4(senddata_power_param_temp, param);
 80010e6:	4668      	mov	r0, sp
 80010e8:	f003 fcac 	bl	8004a44 <float_to_uchar4>
  senddata_power_param[0] = id;
 80010ec:	f89d 0000 	ldrb.w	r0, [sp]
 80010f0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80010f4:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80010f8:	2300      	movs	r3, #0
 80010fa:	f364 0307 	bfi	r3, r4, #0, #8
 80010fe:	f360 230f 	bfi	r3, r0, #8, #8
 8001102:	f362 4317 	bfi	r3, r2, #16, #8
 8001106:	f361 631f 	bfi	r3, r1, #24, #8
  senddata_power_param[1] = senddata_power_param_temp[0];
  senddata_power_param[2] = senddata_power_param_temp[1];
  senddata_power_param[3] = senddata_power_param_temp[2];
  senddata_power_param[4] = senddata_power_param_temp[3];
 800110a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  senddata_power_param[0] = id;
 800110e:	9302      	str	r3, [sp, #8]

  can1_send(0x010, senddata_power_param);
 8001110:	a902      	add	r1, sp, #8
 8001112:	2010      	movs	r0, #16
  senddata_power_param[4] = senddata_power_param_temp[3];
 8001114:	f88d 200c 	strb.w	r2, [sp, #12]
  can1_send(0x010, senddata_power_param);
 8001118:	f000 fa20 	bl	800155c <can1_send>
}
 800111c:	b004      	add	sp, #16
 800111e:	bd10      	pop	{r4, pc}

08001120 <actuator_buzzer>:
  senddata_param[0] = param5;
  can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime, uint16_t offtime)
{
 8001120:	b538      	push	{r3, r4, r5, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001122:	4d07      	ldr	r5, [pc, #28]	; (8001140 <actuator_buzzer+0x20>)
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	22fa      	movs	r2, #250	; 0xfa
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
{
 800112a:	460c      	mov	r4, r1
  HAL_Delay(ontime);
 800112c:	f003 fe34 	bl	8004d98 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(offtime);
 8001136:	4620      	mov	r0, r4
}
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(offtime);
 800113c:	f003 be2c 	b.w	8004d98 <HAL_Delay>
 8001140:	2000125c 	.word	0x2000125c

08001144 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001144:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001146:	2400      	movs	r4, #0
{
 8001148:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	2220      	movs	r2, #32
 800114c:	4621      	mov	r1, r4
 800114e:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001150:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001154:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	f009 f885 	bl	800a264 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <MX_ADC1_Init+0xa4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001160:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001166:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116e:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001170:	8383      	strh	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001172:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 8001174:	2301      	movs	r3, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001176:	2240      	movs	r2, #64	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001178:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117c:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001180:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8001184:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001186:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800118a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800118e:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001190:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.OversamplingMode = ENABLE;
 8001192:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001196:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001198:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	f003 fe0f 	bl	8004dbc <HAL_ADC_Init>
 800119e:	b9c8      	cbnz	r0, 80011d4 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a6:	a901      	add	r1, sp, #4
 80011a8:	f004 fad0 	bl	800574c <HAL_ADCEx_MultiModeConfigChannel>
 80011ac:	b9c8      	cbnz	r0, 80011e2 <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011b8:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	237f      	movs	r3, #127	; 0x7f
 80011bc:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c0:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80011c2:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80011c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	f003 ff6d 	bl	80050a8 <HAL_ADC_ConfigChannel>
 80011ce:	b920      	cbnz	r0, 80011da <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	b00c      	add	sp, #48	; 0x30
 80011d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011d4:	f002 fd1e 	bl	8003c14 <Error_Handler>
 80011d8:	e7e2      	b.n	80011a0 <MX_ADC1_Init+0x5c>
    Error_Handler();
 80011da:	f002 fd1b 	bl	8003c14 <Error_Handler>
}
 80011de:	b00c      	add	sp, #48	; 0x30
 80011e0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011e2:	f002 fd17 	bl	8003c14 <Error_Handler>
 80011e6:	e7e2      	b.n	80011ae <MX_ADC1_Init+0x6a>
 80011e8:	200001f8 	.word	0x200001f8
 80011ec:	3ef08000 	.word	0x3ef08000

080011f0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011f0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011f2:	2400      	movs	r4, #0
{
 80011f4:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	2220      	movs	r2, #32
 80011f8:	4621      	mov	r1, r4
 80011fa:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80011fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001200:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	f009 f82f 	bl	800a264 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001206:	4823      	ldr	r0, [pc, #140]	; (8001294 <MX_ADC3_Init+0xa4>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001208:	4923      	ldr	r1, [pc, #140]	; (8001298 <MX_ADC3_Init+0xa8>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800120a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800120e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001212:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	e9c0 1300 	strd	r1, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121c:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800121e:	8383      	strh	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001220:	6442      	str	r2, [r0, #68]	; 0x44
  hadc3.Init.NbrOfConversion = 1;
 8001222:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001224:	2240      	movs	r2, #64	; 0x40
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001226:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800122a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122e:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 8001232:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001234:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001238:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800123a:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc3.Init.OversamplingMode = ENABLE;
 800123c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001240:	6482      	str	r2, [r0, #72]	; 0x48
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001242:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001244:	f003 fdba 	bl	8004dbc <HAL_ADC_Init>
 8001248:	b9c8      	cbnz	r0, 800127e <MX_ADC3_Init+0x8e>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124a:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <MX_ADC3_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001250:	a901      	add	r1, sp, #4
 8001252:	f004 fa7b 	bl	800574c <HAL_ADCEx_MultiModeConfigChannel>
 8001256:	b9c8      	cbnz	r0, 800128c <MX_ADC3_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001258:	4a10      	ldr	r2, [pc, #64]	; (800129c <MX_ADC3_Init+0xac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <MX_ADC3_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2306      	movs	r3, #6
 800125e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001262:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001264:	237f      	movs	r3, #127	; 0x7f
 8001266:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126a:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800126c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800126e:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001270:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001274:	f003 ff18 	bl	80050a8 <HAL_ADC_ConfigChannel>
 8001278:	b920      	cbnz	r0, 8001284 <MX_ADC3_Init+0x94>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800127a:	b00c      	add	sp, #48	; 0x30
 800127c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800127e:	f002 fcc9 	bl	8003c14 <Error_Handler>
 8001282:	e7e2      	b.n	800124a <MX_ADC3_Init+0x5a>
    Error_Handler();
 8001284:	f002 fcc6 	bl	8003c14 <Error_Handler>
}
 8001288:	b00c      	add	sp, #48	; 0x30
 800128a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800128c:	f002 fcc2 	bl	8003c14 <Error_Handler>
 8001290:	e7e2      	b.n	8001258 <MX_ADC3_Init+0x68>
 8001292:	bf00      	nop
 8001294:	20000264 	.word	0x20000264
 8001298:	50000400 	.word	0x50000400
 800129c:	04300002 	.word	0x04300002

080012a0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	4668      	mov	r0, sp
 80012aa:	f008 ffdb 	bl	800a264 <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ae:	4c1e      	ldr	r4, [pc, #120]	; (8001328 <MX_ADC5_Init+0x88>)
  hadc5.Instance = ADC5;
 80012b0:	481e      	ldr	r0, [pc, #120]	; (800132c <MX_ADC5_Init+0x8c>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80012b6:	2300      	movs	r3, #0
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b8:	e9c0 4200 	strd	r4, r2, [r0]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c0:	2104      	movs	r1, #4
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ca:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012ce:	8382      	strh	r2, [r0, #28]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80012d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.NbrOfConversion = 1;
 80012d4:	2201      	movs	r2, #1
  hadc5.Init.DMAContinuousRequests = ENABLE;
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012d8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012da:	2340      	movs	r3, #64	; 0x40
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012dc:	6181      	str	r1, [r0, #24]
  hadc5.Init.NbrOfConversion = 1;
 80012de:	6202      	str	r2, [r0, #32]
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80012e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.OversamplingMode = ENABLE;
 80012e4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012e8:	6441      	str	r1, [r0, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012ea:	6483      	str	r3, [r0, #72]	; 0x48
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012ec:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80012ee:	f003 fd65 	bl	8004dbc <HAL_ADC_Init>
 80012f2:	b990      	cbnz	r0, 800131a <MX_ADC5_Init+0x7a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <MX_ADC5_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_ADC5_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f8:	2306      	movs	r3, #6
 80012fa:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012fe:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001300:	237f      	movs	r3, #127	; 0x7f
 8001302:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001306:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001308:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800130a:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 800130c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001310:	f003 feca 	bl	80050a8 <HAL_ADC_ConfigChannel>
 8001314:	b920      	cbnz	r0, 8001320 <MX_ADC5_Init+0x80>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001316:	b008      	add	sp, #32
 8001318:	bd10      	pop	{r4, pc}
    Error_Handler();
 800131a:	f002 fc7b 	bl	8003c14 <Error_Handler>
 800131e:	e7e9      	b.n	80012f4 <MX_ADC5_Init+0x54>
    Error_Handler();
 8001320:	f002 fc78 	bl	8003c14 <Error_Handler>
}
 8001324:	b008      	add	sp, #32
 8001326:	bd10      	pop	{r4, pc}
 8001328:	50000600 	.word	0x50000600
 800132c:	200002d0 	.word	0x200002d0
 8001330:	08600004 	.word	0x08600004

08001334 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	4604      	mov	r4, r0
 8001338:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	2254      	movs	r2, #84	; 0x54
 800133e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001344:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001348:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134a:	f008 ff8b 	bl	800a264 <memset>
  if(adcHandle->Instance==ADC1)
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001354:	d007      	beq.n	8001366 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_ADC_MspInit+0x1a0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d04a      	beq.n	80013f2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 800135c:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_ADC_MspInit+0x1a4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d07a      	beq.n	8001458 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001362:	b020      	add	sp, #128	; 0x80
 8001364:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001366:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800136a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001370:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001372:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f005 fe12 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 8001378:	2800      	cmp	r0, #0
 800137a:	f040 80a2 	bne.w	80014c2 <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001380:	4857      	ldr	r0, [pc, #348]	; (80014e0 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 8001384:	4d57      	ldr	r5, [pc, #348]	; (80014e4 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800138a:	64da      	str	r2, [r3, #76]	; 0x4c
 800138c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800138e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001392:	9200      	str	r2, [sp, #0]
 8001394:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001398:	f042 0202 	orr.w	r2, r2, #2
 800139c:	64da      	str	r2, [r3, #76]	; 0x4c
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 80013a6:	2201      	movs	r2, #1
 80013a8:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013aa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 80013ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f005 f8ab 	bl	8006510 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 80013ba:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013bc:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80013be:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80013c2:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d2:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013d6:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013da:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013dc:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013de:	f004 fadd 	bl	800599c <HAL_DMA_Init>
 80013e2:	b918      	cbnz	r0, 80013ec <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013e4:	6565      	str	r5, [r4, #84]	; 0x54
 80013e6:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80013e8:	b020      	add	sp, #128	; 0x80
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80013ec:	f002 fc12 	bl	8003c14 <Error_Handler>
 80013f0:	e7f8      	b.n	80013e4 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013fc:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013fe:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f005 fdcc 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 8001404:	2800      	cmp	r0, #0
 8001406:	d15f      	bne.n	80014c8 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001408:	4a38      	ldr	r2, [pc, #224]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800140e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001410:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001412:	d109      	bne.n	8001428 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
 8001416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800141c:	64da      	str	r2, [r3, #76]	; 0x4c
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800142a:	482d      	ldr	r0, [pc, #180]	; (80014e0 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800142e:	4d30      	ldr	r5, [pc, #192]	; (80014f0 <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	f042 0202 	orr.w	r2, r2, #2
 8001434:	64da      	str	r2, [r3, #76]	; 0x4c
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 800143e:	2202      	movs	r2, #2
 8001440:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001442:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 8001446:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800144e:	f005 f85f 	bl	8006510 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001452:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001454:	2325      	movs	r3, #37	; 0x25
 8001456:	e7b2      	b.n	80013be <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800145c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001460:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001462:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001464:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	f005 fd99 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 800146a:	2800      	cmp	r0, #0
 800146c:	d12f      	bne.n	80014ce <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001474:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001476:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001478:	d109      	bne.n	800148e <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
 800147c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800147e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001482:	64da      	str	r2, [r3, #76]	; 0x4c
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	9304      	str	r3, [sp, #16]
 800148c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 8001490:	4d19      	ldr	r5, [pc, #100]	; (80014f8 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	f042 0201 	orr.w	r2, r2, #1
 8001498:	64da      	str	r2, [r3, #76]	; 0x4c
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f005 f82a 	bl	8006510 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80014be:	2327      	movs	r3, #39	; 0x27
 80014c0:	e77d      	b.n	80013be <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 80014c2:	f002 fba7 	bl	8003c14 <Error_Handler>
 80014c6:	e75a      	b.n	800137e <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 80014c8:	f002 fba4 	bl	8003c14 <Error_Handler>
 80014cc:	e79c      	b.n	8001408 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 80014ce:	f002 fba1 	bl	8003c14 <Error_Handler>
 80014d2:	e7cc      	b.n	800146e <HAL_ADC_MspInit+0x13a>
 80014d4:	50000400 	.word	0x50000400
 80014d8:	50000600 	.word	0x50000600
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000400 	.word	0x48000400
 80014e4:	2000033c 	.word	0x2000033c
 80014e8:	40020058 	.word	0x40020058
 80014ec:	200001f4 	.word	0x200001f4
 80014f0:	2000039c 	.word	0x2000039c
 80014f4:	40020030 	.word	0x40020030
 80014f8:	200003fc 	.word	0x200003fc
 80014fc:	40020044 	.word	0x40020044

08001500 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001500:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 8001502:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001550 <can1_init_ibis+0x50>
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001506:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001508:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800150a:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800150c:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800150e:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <can1_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001512:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001514:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 8001516:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 800151a:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800151e:	f004 fd71 	bl	8006004 <HAL_FDCAN_ConfigFilter>
 8001522:	b930      	cbnz	r0, 8001532 <can1_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <can1_init_ibis+0x58>)
 8001526:	f004 fd9f 	bl	8006068 <HAL_FDCAN_Start>
 800152a:	b948      	cbnz	r0, 8001540 <can1_init_ibis+0x40>
}
 800152c:	b007      	add	sp, #28
 800152e:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 8001532:	f002 fb6f 	bl	8003c14 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <can1_init_ibis+0x58>)
 8001538:	f004 fd96 	bl	8006068 <HAL_FDCAN_Start>
 800153c:	2800      	cmp	r0, #0
 800153e:	d0f5      	beq.n	800152c <can1_init_ibis+0x2c>
 8001540:	f002 fb68 	bl	8003c14 <Error_Handler>
}
 8001544:	b007      	add	sp, #28
 8001546:	f85d fb04 	ldr.w	pc, [sp], #4
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
	...
 8001558:	20000c88 	.word	0x20000c88

0800155c <can1_send>:

void can1_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <can1_send+0x38>)
void can1_send(int id, uint8_t senddata[]){
 800155e:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001560:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001564:	2500      	movs	r5, #0
 8001566:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800156a:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800156e:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001572:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 8001576:	4c08      	ldr	r4, [pc, #32]	; (8001598 <can1_send+0x3c>)
	TxHeader.MessageMarker = 0;
 8001578:	621d      	str	r5, [r3, #32]
void can1_send(int id, uint8_t senddata[]){
 800157a:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 800157c:	4620      	mov	r0, r4
 800157e:	f004 fe75 	bl	800626c <HAL_FDCAN_GetTxFifoFreeLevel>
 8001582:	2803      	cmp	r0, #3
 8001584:	d1fa      	bne.n	800157c <can1_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001586:	4632      	mov	r2, r6
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <can1_send+0x38>)
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <can1_send+0x3c>)

}
 800158c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001590:	f004 bd82 	b.w	8006098 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001594:	20000e04 	.word	0x20000e04
 8001598:	20000c88 	.word	0x20000c88
 800159c:	00000000 	.word	0x00000000

080015a0 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 80015a0:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 80015a2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80015f0 <can2_init_ibis+0x50>
void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 80015a6:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015a8:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80015aa:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015ac:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015ae:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <can2_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015b2:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80015b4:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 80015b6:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 80015ba:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80015be:	f004 fd21 	bl	8006004 <HAL_FDCAN_ConfigFilter>
 80015c2:	b930      	cbnz	r0, 80015d2 <can2_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <can2_init_ibis+0x58>)
 80015c6:	f004 fd4f 	bl	8006068 <HAL_FDCAN_Start>
 80015ca:	b948      	cbnz	r0, 80015e0 <can2_init_ibis+0x40>
}
 80015cc:	b007      	add	sp, #28
 80015ce:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 80015d2:	f002 fb1f 	bl	8003c14 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 80015d6:	4808      	ldr	r0, [pc, #32]	; (80015f8 <can2_init_ibis+0x58>)
 80015d8:	f004 fd46 	bl	8006068 <HAL_FDCAN_Start>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d0f5      	beq.n	80015cc <can2_init_ibis+0x2c>
 80015e0:	f002 fb18 	bl	8003c14 <Error_Handler>
}
 80015e4:	b007      	add	sp, #28
 80015e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
	...
 80015f8:	20000cec 	.word	0x20000cec

080015fc <can2_send>:

void can2_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <can2_send+0x38>)
void can2_send(int id, uint8_t senddata[]){
 80015fe:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001600:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001604:	2500      	movs	r5, #0
 8001606:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800160a:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800160e:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001612:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 8001616:	4c08      	ldr	r4, [pc, #32]	; (8001638 <can2_send+0x3c>)
	TxHeader.MessageMarker = 0;
 8001618:	621d      	str	r5, [r3, #32]
void can2_send(int id, uint8_t senddata[]){
 800161a:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 800161c:	4620      	mov	r0, r4
 800161e:	f004 fe25 	bl	800626c <HAL_FDCAN_GetTxFifoFreeLevel>
 8001622:	2803      	cmp	r0, #3
 8001624:	d1fa      	bne.n	800161c <can2_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001626:	4632      	mov	r2, r6
 8001628:	4902      	ldr	r1, [pc, #8]	; (8001634 <can2_send+0x38>)
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <can2_send+0x3c>)

}
 800162c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001630:	f004 bd32 	b.w	8006098 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001634:	20000e04 	.word	0x20000e04
 8001638:	20000cec 	.word	0x20000cec

0800163c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_DMA_Init+0xb0>)
{
 800163e:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001640:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001642:	f040 0004 	orr.w	r0, r0, #4
 8001646:	6498      	str	r0, [r3, #72]	; 0x48
 8001648:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 800164a:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800164c:	f004 0404 	and.w	r4, r4, #4
 8001650:	9400      	str	r4, [sp, #0]
 8001652:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001654:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001656:	f044 0401 	orr.w	r4, r4, #1
 800165a:	649c      	str	r4, [r3, #72]	; 0x48
 800165c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165e:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001666:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001668:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800166c:	f004 f930 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001670:	200b      	movs	r0, #11
 8001672:	f004 f96b 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	200c      	movs	r0, #12
 800167c:	f004 f928 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001680:	200c      	movs	r0, #12
 8001682:	f004 f963 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2109      	movs	r1, #9
 800168a:	200d      	movs	r0, #13
 800168c:	f004 f920 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001690:	200d      	movs	r0, #13
 8001692:	f004 f95b 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	210a      	movs	r1, #10
 800169a:	200e      	movs	r0, #14
 800169c:	f004 f918 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016a0:	200e      	movs	r0, #14
 80016a2:	f004 f953 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	210b      	movs	r1, #11
 80016aa:	200f      	movs	r0, #15
 80016ac:	f004 f910 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016b0:	200f      	movs	r0, #15
 80016b2:	f004 f94b 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	210e      	movs	r1, #14
 80016ba:	2010      	movs	r0, #16
 80016bc:	f004 f908 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016c0:	2010      	movs	r0, #16
 80016c2:	f004 f943 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	2011      	movs	r0, #17
 80016cc:	f004 f900 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80016d0:	2011      	movs	r0, #17
 80016d2:	f004 f93b 	bl	800594c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2060      	movs	r0, #96	; 0x60
 80016da:	4611      	mov	r1, r2
 80016dc:	f004 f8f8 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80016e0:	2060      	movs	r0, #96	; 0x60

}
 80016e2:	b002      	add	sp, #8
 80016e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80016e8:	f004 b930 	b.w	800594c <HAL_NVIC_EnableIRQ>
 80016ec:	40021000 	.word	0x40021000

080016f0 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 80016f0:	b510      	push	{r4, lr}
    dmi.huart = printf_huart;
 80016f2:	4c06      	ldr	r4, [pc, #24]	; (800170c <dma_printf_init+0x1c>)
void dma_printf_init(UART_HandleTypeDef *printf_huart){
 80016f4:	4601      	mov	r1, r0
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80016f6:	4620      	mov	r0, r4
    dmi.huart = printf_huart;
 80016f8:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80016fc:	f000 f830 	bl	8001760 <dma_ring_init>
    dmi.sending = false;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 8001706:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
}
 800170a:	bd10      	pop	{r4, pc}
 800170c:	2000045c 	.word	0x2000045c

08001710 <dma_printf_send_it>:
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }
}

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001710:	b570      	push	{r4, r5, r6, lr}
    if(dmi.huart != printf_huart) return;
 8001712:	4c12      	ldr	r4, [pc, #72]	; (800175c <dma_printf_send_it+0x4c>)
 8001714:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8001718:	4283      	cmp	r3, r0
 800171a:	d000      	beq.n	800171e <dma_printf_send_it+0xe>
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }else{
        dmi.sending = false;
    }
}
 800171c:	bd70      	pop	{r4, r5, r6, pc}
    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 800171e:	f8d4 1414 	ldr.w	r1, [r4, #1044]	; 0x414
 8001722:	4620      	mov	r0, r4
 8001724:	f000 f834 	bl	8001790 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001728:	4620      	mov	r0, r4
 800172a:	f000 f823 	bl	8001774 <dma_ring_available_linear>
 800172e:	b285      	uxth	r5, r0
    if (len > 0 ) {
 8001730:	b915      	cbnz	r5, 8001738 <dma_printf_send_it+0x28>
        dmi.sending = false;
 8001732:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
}
 8001736:	bd70      	pop	{r4, r5, r6, pc}
        dmi.sending = true;
 8001738:	2301      	movs	r3, #1
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 800173a:	4620      	mov	r0, r4
 800173c:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        dmi.previous_send_len = len;
 8001740:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
        dmi.sending = true;
 8001744:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001748:	f000 f81e 	bl	8001788 <dma_ring_get_r_ptr>
 800174c:	462a      	mov	r2, r5
 800174e:	1821      	adds	r1, r4, r0
 8001750:	4630      	mov	r0, r6
}
 8001752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001756:	f006 be93 	b.w	8008480 <HAL_UART_Transmit_DMA>
 800175a:	bf00      	nop
 800175c:	2000045c 	.word	0x2000045c

08001760 <dma_ring_init>:
static void update_w_ptr(struct dma_ring_buf *ring){
	ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx))&0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart){
  ring->buf_size = RING_BUF_SIZE;
 8001760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001764:	2300      	movs	r3, #0
 8001766:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 800176a:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  ring->w_ptr = 0;
  ring->r_ptr = 0;
  ring->overwrite_cnt = 0;
  ring->huart = huart;
 800176e:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
}
 8001772:	4770      	bx	lr

08001774 <dma_ring_available_linear>:
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
  if(ring->w_ptr >= ring->r_ptr){
 8001774:	f8b0 2402 	ldrh.w	r2, [r0, #1026]	; 0x402
 8001778:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 800177c:	429a      	cmp	r2, r3
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size - ring->r_ptr;
 800177e:	bf38      	it	cc
 8001780:	f8b0 2400 	ldrhcc.w	r2, [r0, #1024]	; 0x400
 8001784:	1ad0      	subs	r0, r2, r3
  }
}
 8001786:	4770      	bx	lr

08001788 <dma_ring_get_r_ptr>:
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
  return ring->r_ptr;
}
 8001788:	f8b0 0404 	ldrh.w	r0, [r0, #1028]	; 0x404
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
  while(len > 0){
 8001790:	2900      	cmp	r1, #0
 8001792:	dd0c      	ble.n	80017ae <dma_ring_forward_r_ptr+0x1e>
 8001794:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
    if(ring->r_ptr+1 >= ring->buf_size){
 8001798:	f8b0 2400 	ldrh.w	r2, [r0, #1024]	; 0x400
 800179c:	3301      	adds	r3, #1
 800179e:	429a      	cmp	r2, r3
      ring->r_ptr = 0;
    }else{
      ring->r_ptr += 1;
 80017a0:	bfcc      	ite	gt
 80017a2:	b29b      	uxthgt	r3, r3
      ring->r_ptr = 0;
 80017a4:	2300      	movle	r3, #0
  while(len > 0){
 80017a6:	3901      	subs	r1, #1
 80017a8:	d1f8      	bne.n	800179c <dma_ring_forward_r_ptr+0xc>
 80017aa:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    }
    len--;
  }
}
 80017ae:	4770      	bx	lr

080017b0 <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 80017b0:	b510      	push	{r4, lr}
    dsi.huart = scanf_huart;
 80017b2:	4c08      	ldr	r4, [pc, #32]	; (80017d4 <dma_scanf_init+0x24>)
void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 80017b4:	4601      	mov	r1, r0
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 80017b6:	4620      	mov	r0, r4
    dsi.huart = scanf_huart;
 80017b8:	f8c4 140c 	str.w	r1, [r4, #1036]	; 0x40c
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 80017bc:	f7ff ffd0 	bl	8001760 <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 80017c0:	f8b4 2400 	ldrh.w	r2, [r4, #1024]	; 0x400
 80017c4:	f8d4 040c 	ldr.w	r0, [r4, #1036]	; 0x40c
 80017c8:	4621      	mov	r1, r4
}
 80017ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 80017ce:	f007 bd45 	b.w	800925c <HAL_UART_Receive_DMA>
 80017d2:	bf00      	nop
 80017d4:	20000874 	.word	0x20000874

080017d8 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017d8:	4810      	ldr	r0, [pc, #64]	; (800181c <MX_FDCAN1_Init+0x44>)
{
 80017da:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 80017dc:	4c10      	ldr	r4, [pc, #64]	; (8001820 <MX_FDCAN1_Init+0x48>)
 80017de:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017e0:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 80017e2:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80017e4:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017e6:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017e8:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80017ec:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 80017ee:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80017f0:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 80017f2:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017f4:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 80017fa:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 80017fe:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001802:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001804:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001806:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001808:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800180a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800180c:	f004 fa7c 	bl	8005d08 <HAL_FDCAN_Init>
 8001810:	b900      	cbnz	r0, 8001814 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001812:	bd10      	pop	{r4, pc}
 8001814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001818:	f002 b9fc 	b.w	8003c14 <Error_Handler>
 800181c:	20000c88 	.word	0x20000c88
 8001820:	40006400 	.word	0x40006400

08001824 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <MX_FDCAN2_Init+0x44>)
{
 8001826:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001828:	4c10      	ldr	r4, [pc, #64]	; (800186c <MX_FDCAN2_Init+0x48>)
 800182a:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800182c:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 800182e:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001830:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001832:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001834:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001838:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 800183a:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800183c:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 800183e:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001840:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001842:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001846:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 800184a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800184e:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001850:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001852:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001854:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001856:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001858:	f004 fa56 	bl	8005d08 <HAL_FDCAN_Init>
 800185c:	b900      	cbnz	r0, 8001860 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800185e:	bd10      	pop	{r4, pc}
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001864:	f002 b9d6 	b.w	8003c14 <Error_Handler>
 8001868:	20000cec 	.word	0x20000cec
 800186c:	40006800 	.word	0x40006800

08001870 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	2254      	movs	r2, #84	; 0x54
 800187a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001880:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001884:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001886:	f008 fced 	bl	800a264 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_FDCAN_MspInit+0x168>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8001892:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_FDCAN_MspInit+0x16c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d047      	beq.n	8001928 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001898:	b01e      	add	sp, #120	; 0x78
 800189a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800189c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80018a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80018a6:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80018a8:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	f005 fb77 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d17f      	bne.n	80019b2 <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80018b2:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_FDCAN_MspInit+0x170>)
 80018b4:	6813      	ldr	r3, [r2, #0]
 80018b6:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80018b8:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80018ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80018bc:	d109      	bne.n	80018d2 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
 80018c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018c2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80018c6:	659a      	str	r2, [r3, #88]	; 0x58
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
 80018d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018d6:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 80019c0 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	64da      	str	r2, [r3, #76]	; 0x4c
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018e6:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80019c8 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018f2:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018f8:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018fc:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f004 fe06 	bl	8006510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2103      	movs	r1, #3
 8001908:	2015      	movs	r0, #21
 800190a:	f003 ffe1 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800190e:	2015      	movs	r0, #21
 8001910:	f004 f81c 	bl	800594c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2104      	movs	r1, #4
 8001918:	2016      	movs	r0, #22
 800191a:	f003 ffd9 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800191e:	2016      	movs	r0, #22
 8001920:	f004 f814 	bl	800594c <HAL_NVIC_EnableIRQ>
}
 8001924:	b01e      	add	sp, #120	; 0x78
 8001926:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001928:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800192c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001930:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001932:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001934:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001936:	f005 fb31 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 800193a:	2800      	cmp	r0, #0
 800193c:	d13c      	bne.n	80019b8 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800193e:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <HAL_FDCAN_MspInit+0x170>)
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001944:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001946:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001948:	d109      	bne.n	800195e <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
 800194c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800194e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	4821      	ldr	r0, [pc, #132]	; (80019e8 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001964:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 80019d0 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	f042 0202 	orr.w	r2, r2, #2
 800196c:	64da      	str	r2, [r3, #76]	; 0x4c
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001970:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001974:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80019c8 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001980:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001982:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001986:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f004 fdc1 	bl	8006510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2106      	movs	r1, #6
 8001992:	2056      	movs	r0, #86	; 0x56
 8001994:	f003 ff9c 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001998:	2056      	movs	r0, #86	; 0x56
 800199a:	f003 ffd7 	bl	800594c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2107      	movs	r1, #7
 80019a2:	2057      	movs	r0, #87	; 0x57
 80019a4:	f003 ff94 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80019a8:	2057      	movs	r0, #87	; 0x57
 80019aa:	f003 ffcf 	bl	800594c <HAL_NVIC_EnableIRQ>
}
 80019ae:	b01e      	add	sp, #120	; 0x78
 80019b0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80019b2:	f002 f92f 	bl	8003c14 <Error_Handler>
 80019b6:	e77c      	b.n	80018b2 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 80019b8:	f002 f92c 	bl	8003c14 <Error_Handler>
 80019bc:	e7bf      	b.n	800193e <HAL_FDCAN_MspInit+0xce>
 80019be:	bf00      	nop
 80019c0:	00001800 	.word	0x00001800
 80019c4:	00000002 	.word	0x00000002
	...
 80019d0:	00003000 	.word	0x00003000
 80019d4:	00000002 	.word	0x00000002
 80019d8:	40006400 	.word	0x40006400
 80019dc:	40006800 	.word	0x40006800
 80019e0:	20000c84 	.word	0x20000c84
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	2400      	movs	r4, #0
{
 80019f0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80019f6:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <MX_GPIO_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a00:	4f4e      	ldr	r7, [pc, #312]	; (8001b3c <MX_GPIO_Init+0x150>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a02:	4e4f      	ldr	r6, [pc, #316]	; (8001b40 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	f042 0204 	orr.w	r2, r2, #4
 8001a08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0c:	f002 0204 	and.w	r2, r2, #4
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1e:	f002 0220 	and.w	r2, r2, #32
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a30:	f002 0201 	and.w	r2, r2, #1
 8001a34:	9203      	str	r2, [sp, #12]
 8001a36:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3a:	f042 0202 	orr.w	r2, r2, #2
 8001a3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a42:	f002 0202 	and.w	r2, r2, #2
 8001a46:	9204      	str	r2, [sp, #16]
 8001a48:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4c:	f042 0208 	orr.w	r2, r2, #8
 8001a50:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a64:	f004 fe54 	bl	8006710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a68:	4622      	mov	r2, r4
 8001a6a:	f248 0110 	movw	r1, #32784	; 0x8010
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f004 fe4d 	bl	8006710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a76:	4622      	mov	r2, r4
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f244 4184 	movw	r1, #17540	; 0x4484
 8001a7e:	f004 fe47 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2501      	movs	r5, #1
 8001a84:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	a906      	add	r1, sp, #24
 8001a8a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f004 fd3c 	bl	8006510 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001a9a:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001aa2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f004 fd31 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aae:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	4638      	mov	r0, r7
 8001ab2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f004 fd28 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001ac0:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	a906      	add	r1, sp, #24
 8001ac6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001ac8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f004 fd1e 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ada:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f004 fd13 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aec:	2204      	movs	r2, #4
 8001aee:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f004 fd0a 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	a906      	add	r1, sp, #24
 8001afe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b00:	2260      	movs	r2, #96	; 0x60
 8001b02:	2300      	movs	r3, #0
 8001b04:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f004 fd01 	bl	8006510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001b12:	4630      	mov	r0, r6
 8001b14:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f004 fcf6 	bl	8006510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b24:	4622      	mov	r2, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	2017      	movs	r0, #23
 8001b2a:	f003 fed1 	bl	80058d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b2e:	2017      	movs	r0, #23
 8001b30:	f003 ff0c 	bl	800594c <HAL_NVIC_EnableIRQ>

}
 8001b34:	b00d      	add	sp, #52	; 0x34
 8001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000c00 	.word	0x48000c00

08001b48 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001b48:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001b4a:	4870      	ldr	r0, [pc, #448]	; (8001d0c <ICM20602_init+0x1c4>)
{
 8001b4c:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2120      	movs	r1, #32
 8001b52:	f004 fddd 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2110      	movs	r1, #16
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f004 fdd7 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b62:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001b66:	216b      	movs	r1, #107	; 0x6b
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b68:	2301      	movs	r3, #1
 8001b6a:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001b6c:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b70:	9400      	str	r4, [sp, #0]
 8001b72:	a902      	add	r1, sp, #8
 8001b74:	4866      	ldr	r0, [pc, #408]	; (8001d10 <ICM20602_init+0x1c8>)
 8001b76:	f005 fd2b 	bl	80075d0 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001b7a:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9400      	str	r4, [sp, #0]
 8001b80:	aa03      	add	r2, sp, #12
 8001b82:	a902      	add	r1, sp, #8
 8001b84:	4862      	ldr	r0, [pc, #392]	; (8001d10 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001b86:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b8a:	f005 fd21 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2110      	movs	r1, #16
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f004 fdbb 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f004 fdb5 	bl	8006710 <HAL_GPIO_WritePin>
	send_data[0]=reg & 0x7F;
 8001ba6:	2319      	movs	r3, #25
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ba8:	9400      	str	r4, [sp, #0]
	send_data[0]=reg & 0x7F;
 8001baa:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bae:	aa03      	add	r2, sp, #12
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	a902      	add	r1, sp, #8
 8001bb4:	4856      	ldr	r0, [pc, #344]	; (8001d10 <ICM20602_init+0x1c8>)
 8001bb6:	f005 fd0b 	bl	80075d0 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001bba:	2307      	movs	r3, #7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bbc:	9400      	str	r4, [sp, #0]
	send_data[0]=data;
 8001bbe:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bc2:	aa03      	add	r2, sp, #12
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	a902      	add	r1, sp, #8
 8001bc8:	4851      	ldr	r0, [pc, #324]	; (8001d10 <ICM20602_init+0x1c8>)
 8001bca:	f005 fd01 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f004 fd9b 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001bda:	462a      	mov	r2, r5
 8001bdc:	2110      	movs	r1, #16
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f004 fd95 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001be6:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001be8:	211a      	movs	r1, #26
	send_data[0]=data;
 8001bea:	461d      	mov	r5, r3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bec:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001bee:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bf2:	9400      	str	r4, [sp, #0]
 8001bf4:	a902      	add	r1, sp, #8
 8001bf6:	4846      	ldr	r0, [pc, #280]	; (8001d10 <ICM20602_init+0x1c8>)
 8001bf8:	f005 fcea 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	9400      	str	r4, [sp, #0]
 8001c00:	a902      	add	r1, sp, #8
 8001c02:	aa03      	add	r2, sp, #12
 8001c04:	4842      	ldr	r0, [pc, #264]	; (8001d10 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001c06:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c0a:	f005 fce1 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c0e:	462a      	mov	r2, r5
 8001c10:	2110      	movs	r1, #16
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c16:	f004 fd7b 	bl	8006710 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

	ICM20602_setAccRange(Ascale);
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <ICM20602_init+0x1cc>)
 8001c1c:	681c      	ldr	r4, [r3, #0]

// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{

    switch(Ascale)
 8001c1e:	2c03      	cmp	r4, #3
 8001c20:	d807      	bhi.n	8001c32 <ICM20602_init+0xea>
 8001c22:	e8df f004 	tbb	[pc, r4]
 8001c26:	686d      	.short	0x686d
 8001c28:	6302      	.short	0x6302
            break;
        case AFS_4G:
            aRes = 4.0/32768.0;
            break;
        case AFS_8G:
            aRes = 8.0/32768.0;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <ICM20602_init+0x1d0>)
 8001c2c:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001c30:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2110      	movs	r1, #16
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f004 fd69 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c3e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001c42:	221c      	movs	r2, #28
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c44:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001c46:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c4a:	a902      	add	r1, sp, #8
 8001c4c:	aa03      	add	r2, sp, #12
 8001c4e:	4830      	ldr	r0, [pc, #192]	; (8001d10 <ICM20602_init+0x1c8>)
 8001c50:	9500      	str	r5, [sp, #0]
 8001c52:	f005 fcbd 	bl	80075d0 <HAL_SPI_TransmitReceive>
        case AFS_16G:
            aRes = 16.0/32768.0;
            break;         
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001c56:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c58:	2301      	movs	r3, #1
 8001c5a:	aa03      	add	r2, sp, #12
 8001c5c:	a902      	add	r1, sp, #8
 8001c5e:	482c      	ldr	r0, [pc, #176]	; (8001d10 <ICM20602_init+0x1c8>)
 8001c60:	9500      	str	r5, [sp, #0]
	send_data[0]=data;
 8001c62:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c66:	f005 fcb3 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f004 fd4d 	bl	8006710 <HAL_GPIO_WritePin>
	ICM20602_setGyroRange(Gscale);
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <ICM20602_init+0x1d4>)
 8001c78:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
    switch (Gscale) {
 8001c7a:	2c03      	cmp	r4, #3
 8001c7c:	d806      	bhi.n	8001c8c <ICM20602_init+0x144>
 8001c7e:	e8df f004 	tbb	[pc, r4]
 8001c82:	2d31      	.short	0x2d31
 8001c84:	2902      	.short	0x2902
            break;
        case GFS_500DPS:
            gRes = 500.0/32768.0;
            break;
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <ICM20602_init+0x1d8>)
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <ICM20602_init+0x1dc>)
 8001c8a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2110      	movs	r1, #16
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c94:	f004 fd3c 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c98:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001c9c:	221b      	movs	r2, #27
 8001c9e:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ca2:	a902      	add	r1, sp, #8
 8001ca4:	aa03      	add	r2, sp, #12
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	9500      	str	r5, [sp, #0]
 8001caa:	4819      	ldr	r0, [pc, #100]	; (8001d10 <ICM20602_init+0x1c8>)
 8001cac:	f005 fc90 	bl	80075d0 <HAL_SPI_TransmitReceive>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
            break;
    }

    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001cb0:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cb2:	aa03      	add	r2, sp, #12
 8001cb4:	a902      	add	r1, sp, #8
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9500      	str	r5, [sp, #0]
 8001cba:	4815      	ldr	r0, [pc, #84]	; (8001d10 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001cbc:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cc0:	f005 fc86 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f004 fd20 	bl	8006710 <HAL_GPIO_WritePin>
}
 8001cd0:	b005      	add	sp, #20
 8001cd2:	bd30      	pop	{r4, r5, pc}
            gRes = 2000.0/32768.0;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <ICM20602_init+0x1d8>)
 8001cd6:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <ICM20602_init+0x1e0>)
 8001cd8:	601a      	str	r2, [r3, #0]
            break;
 8001cda:	e7d7      	b.n	8001c8c <ICM20602_init+0x144>
            gRes = 500.0/32768.0;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <ICM20602_init+0x1d8>)
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <ICM20602_init+0x1e4>)
 8001ce0:	601a      	str	r2, [r3, #0]
            break;
 8001ce2:	e7d3      	b.n	8001c8c <ICM20602_init+0x144>
            gRes = 250.0/32768.0;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <ICM20602_init+0x1d8>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <ICM20602_init+0x1e8>)
 8001ce8:	601a      	str	r2, [r3, #0]
            break;
 8001cea:	e7cf      	b.n	8001c8c <ICM20602_init+0x144>
            aRes = 16.0/32768.0;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <ICM20602_init+0x1d0>)
 8001cee:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001cf2:	601a      	str	r2, [r3, #0]
            break;         
 8001cf4:	e79d      	b.n	8001c32 <ICM20602_init+0xea>
            aRes = 4.0/32768.0;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <ICM20602_init+0x1d0>)
 8001cf8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001cfc:	601a      	str	r2, [r3, #0]
            break;
 8001cfe:	e798      	b.n	8001c32 <ICM20602_init+0xea>
            aRes = 2.0/32768.0;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <ICM20602_init+0x1d0>)
 8001d02:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001d06:	601a      	str	r2, [r3, #0]
            break;
 8001d08:	e793      	b.n	8001c32 <ICM20602_init+0xea>
 8001d0a:	bf00      	nop
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	200011f8 	.word	0x200011f8
 8001d14:	20000d50 	.word	0x20000d50
 8001d18:	20000d54 	.word	0x20000d54
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000da0 	.word	0x20000da0
 8001d24:	3cfa0000 	.word	0x3cfa0000
 8001d28:	3d7a0000 	.word	0x3d7a0000
 8001d2c:	3c7a0000 	.word	0x3c7a0000
 8001d30:	3bfa0000 	.word	0x3bfa0000

08001d34 <ICM20602_clearAngle>:
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
    pitch_angle = 0.0f;
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <ICM20602_clearAngle+0x10>)
    roll_angle  = 0.0f;
 8001d36:	4904      	ldr	r1, [pc, #16]	; (8001d48 <ICM20602_clearAngle+0x14>)
    yaw_angle   = 0.0f;
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <ICM20602_clearAngle+0x18>)
    pitch_angle = 0.0f;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	6003      	str	r3, [r0, #0]
    roll_angle  = 0.0f;
 8001d3e:	600b      	str	r3, [r1, #0]
    yaw_angle   = 0.0f;
 8001d40:	6013      	str	r3, [r2, #0]
}
 8001d42:	4770      	bx	lr
 8001d44:	20001130 	.word	0x20001130
 8001d48:	20001160 	.word	0x20001160
 8001d4c:	200011f0 	.word	0x200011f0

08001d50 <ICM20602_medianFilter>:
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d50:	4a79      	ldr	r2, [pc, #484]	; (8001f38 <ICM20602_medianFilter+0x1e8>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
    	gyro_mdat[i][0] = gyro[i];
 8001d52:	487a      	ldr	r0, [pc, #488]	; (8001f3c <ICM20602_medianFilter+0x1ec>)

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d54:	4b7a      	ldr	r3, [pc, #488]	; (8001f40 <ICM20602_medianFilter+0x1f0>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d56:	ed92 6a01 	vldr	s12, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001d5a:	edd0 5a00 	vldr	s11, [r0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
    	acc_mdat[i][0]  = acc[i];
 8001d5e:	4979      	ldr	r1, [pc, #484]	; (8001f44 <ICM20602_medianFilter+0x1f4>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001d60:	ed92 7a00 	vldr	s14, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d64:	ed93 5a01 	vldr	s10, [r3, #4]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001d68:	edd3 7a00 	vldr	s15, [r3]
    	acc_mdat[i][0]  = acc[i];
 8001d6c:	edd1 6a00 	vldr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d70:	ed82 6a02 	vstr	s12, [r2, #8]

    	a = 0;
    	b = 2;

    	for (j = 2; j >= 0; j--) {
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d74:	eef4 5ac6 	vcmpe.f32	s11, s12
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001d7c:	ed82 7a01 	vstr	s14, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001d80:	edc2 5a00 	vstr	s11, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d84:	ed83 5a02 	vstr	s10, [r3, #8]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001d88:	edc3 7a01 	vstr	s15, [r3, #4]
    	acc_mdat[i][0]  = acc[i];
 8001d8c:	edc3 6a00 	vstr	s13, [r3]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d90:	dc05      	bgt.n	8001d9e <ICM20602_medianFilter+0x4e>
 8001d92:	eef0 4a46 	vmov.f32	s9, s12
    	gyro_mdat[i][0] = gyro[i];
 8001d96:	eeb0 6a65 	vmov.f32	s12, s11
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d9a:	eef0 5a64 	vmov.f32	s11, s9
    			tmp         = gyro_tmp[a];
    			gyro_tmp[a] = gyro_tmp[b];
    			gyro_tmp[b] = tmp;
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001d9e:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d405      	bmi.n	8001db4 <ICM20602_medianFilter+0x64>
 8001da8:	eef0 4a45 	vmov.f32	s9, s10
    	acc_mdat[i][0]  = acc[i];
 8001dac:	eeb0 5a66 	vmov.f32	s10, s13
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001db0:	eef0 6a64 	vmov.f32	s13, s9
				acc_tmp[b]  = tmp;
			}
    		a = j-1;
    		b = j;
    	}
    	gyro[i] = gyro_tmp[1];
 8001db4:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	bf88      	it	hi
 8001dbe:	eeb0 7a65 	vmovhi.f32	s14, s11
 8001dc2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001dca:	eef4 7ae6 	vcmpe.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 8001dce:	bfa8      	it	ge
 8001dd0:	eeb0 6a47 	vmovge.f32	s12, s14
    	acc[i]  = acc_tmp[1];
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	bf98      	it	ls
 8001dda:	eef0 6a67 	vmovls.f32	s13, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001dde:	edd2 5a04 	vldr	s11, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001de2:	ed90 7a01 	vldr	s14, [r0, #4]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001de6:	edd2 3a03 	vldr	s7, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001dea:	ed93 4a04 	vldr	s8, [r3, #16]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001dee:	edd3 4a03 	vldr	s9, [r3, #12]
    	acc_mdat[i][0]  = acc[i];
 8001df2:	edd1 7a01 	vldr	s15, [r1, #4]
    	gyro[i] = gyro_tmp[1];
 8001df6:	ed80 6a00 	vstr	s12, [r0]
    	acc[i]  = acc_tmp[1];
 8001dfa:	eef4 6ac5 	vcmpe.f32	s13, s10
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e02:	eef4 5ac7 	vcmpe.f32	s11, s14
    	acc[i]  = acc_tmp[1];
 8001e06:	bfb8      	it	lt
 8001e08:	eef0 6a45 	vmovlt.f32	s13, s10
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001e10:	edc1 6a00 	vstr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e14:	edc2 5a05 	vstr	s11, [r2, #20]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e18:	edc2 3a04 	vstr	s7, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001e1c:	ed82 7a03 	vstr	s14, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e20:	ed83 4a05 	vstr	s8, [r3, #20]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e24:	edc3 4a04 	vstr	s9, [r3, #16]
    	acc_mdat[i][0]  = acc[i];
 8001e28:	edc3 7a03 	vstr	s15, [r3, #12]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e2c:	d405      	bmi.n	8001e3a <ICM20602_medianFilter+0xea>
 8001e2e:	eef0 6a65 	vmov.f32	s13, s11
    	gyro_mdat[i][0] = gyro[i];
 8001e32:	eef0 5a47 	vmov.f32	s11, s14
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e36:	eeb0 7a66 	vmov.f32	s14, s13
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e3a:	eef4 7ac4 	vcmpe.f32	s15, s8
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	dc05      	bgt.n	8001e50 <ICM20602_medianFilter+0x100>
 8001e44:	eef0 6a44 	vmov.f32	s13, s8
    	acc_mdat[i][0]  = acc[i];
 8001e48:	eeb0 4a67 	vmov.f32	s8, s15
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e4c:	eef0 7a66 	vmov.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 8001e50:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	bf88      	it	hi
 8001e5a:	eeb0 7a63 	vmovhi.f32	s14, s7
 8001e5e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001e66:	eef4 7ae4 	vcmpe.f32	s15, s9
    	gyro[i] = gyro_tmp[1];
 8001e6a:	bfb4      	ite	lt
 8001e6c:	eef0 6a65 	vmovlt.f32	s13, s11
 8001e70:	eef0 6a47 	vmovge.f32	s13, s14
    	acc[i]  = acc_tmp[1];
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	bf8c      	ite	hi
 8001e7a:	eeb0 7a64 	vmovhi.f32	s14, s9
 8001e7e:	eeb0 7a67 	vmovls.f32	s14, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e82:	edd2 4a07 	vldr	s9, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001e86:	edd0 7a02 	vldr	s15, [r0, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e8a:	edd2 3a06 	vldr	s7, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e8e:	edd3 5a07 	vldr	s11, [r3, #28]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e92:	ed93 6a06 	vldr	s12, [r3, #24]
    	acc_mdat[i][0]  = acc[i];
 8001e96:	ed91 5a02 	vldr	s10, [r1, #8]
    	gyro[i] = gyro_tmp[1];
 8001e9a:	edc0 6a01 	vstr	s13, [r0, #4]
    	acc[i]  = acc_tmp[1];
 8001e9e:	eeb4 7ac4 	vcmpe.f32	s14, s8
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001ea6:	eef4 7ae4 	vcmpe.f32	s15, s9
    	acc[i]  = acc_tmp[1];
 8001eaa:	bfb8      	it	lt
 8001eac:	eeb0 7a44 	vmovlt.f32	s14, s8
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001eb4:	ed81 7a01 	vstr	s14, [r1, #4]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001eb8:	edc2 4a08 	vstr	s9, [r2, #32]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001ebc:	edc2 3a07 	vstr	s7, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001ec0:	edc2 7a06 	vstr	s15, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ec4:	edc3 5a08 	vstr	s11, [r3, #32]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001ec8:	ed83 6a07 	vstr	s12, [r3, #28]
    	acc_mdat[i][0]  = acc[i];
 8001ecc:	ed83 5a06 	vstr	s10, [r3, #24]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001ed0:	dc05      	bgt.n	8001ede <ICM20602_medianFilter+0x18e>
 8001ed2:	eeb0 7a64 	vmov.f32	s14, s9
    	gyro_mdat[i][0] = gyro[i];
 8001ed6:	eef0 4a67 	vmov.f32	s9, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001eda:	eef0 7a47 	vmov.f32	s15, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001ede:	eef4 5ac5 	vcmpe.f32	s11, s10
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d405      	bmi.n	8001ef4 <ICM20602_medianFilter+0x1a4>
 8001ee8:	eeb0 7a65 	vmov.f32	s14, s11
    	acc_mdat[i][0]  = acc[i];
 8001eec:	eef0 5a45 	vmov.f32	s11, s10
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ef0:	eeb0 5a47 	vmov.f32	s10, s14
    	gyro[i] = gyro_tmp[1];
 8001ef4:	eef4 7ae3 	vcmpe.f32	s15, s7
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	bf88      	it	hi
 8001efe:	eef0 7a63 	vmovhi.f32	s15, s7
 8001f02:	eef4 7ae4 	vcmpe.f32	s15, s9
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001f0a:	eeb4 6ac5 	vcmpe.f32	s12, s10
    	gyro[i] = gyro_tmp[1];
 8001f0e:	bfb8      	it	lt
 8001f10:	eef0 7a64 	vmovlt.f32	s15, s9
    	acc[i]  = acc_tmp[1];
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	bf88      	it	hi
 8001f1a:	eeb0 6a45 	vmovhi.f32	s12, s10
 8001f1e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	bfb8      	it	lt
 8001f28:	eeb0 6a65 	vmovlt.f32	s12, s11
    	gyro[i] = gyro_tmp[1];
 8001f2c:	edc0 7a02 	vstr	s15, [r0, #8]
    	acc[i]  = acc_tmp[1];
 8001f30:	ed81 6a02 	vstr	s12, [r1, #8]
    }
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000dbc 	.word	0x20000dbc
 8001f3c:	20000da4 	.word	0x20000da4
 8001f40:	20000d70 	.word	0x20000d70
 8001f44:	20000d58 	.word	0x20000d58

08001f48 <ICM20602_read_IMU_data>:
{
 8001f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f4c:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f50:	2200      	movs	r2, #0
{
 8001f52:	b084      	sub	sp, #16
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f54:	2110      	movs	r1, #16
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8001f5a:	eeb0 8a40 	vmov.f32	s16, s0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f5e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f62:	f004 fbd5 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001f66:	21bc      	movs	r1, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f68:	2301      	movs	r3, #1
 8001f6a:	aa03      	add	r2, sp, #12
    send_data[0]= reg | 0x80;
 8001f6c:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f70:	9400      	str	r4, [sp, #0]
 8001f72:	a902      	add	r1, sp, #8
 8001f74:	48d2      	ldr	r0, [pc, #840]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001f76:	f8df 8354 	ldr.w	r8, [pc, #852]	; 80022cc <ICM20602_read_IMU_data+0x384>
 8001f7a:	eddf 8ad2 	vldr	s17, [pc, #840]	; 80022c4 <ICM20602_read_IMU_data+0x37c>
    send_data[0]=0x00;
 8001f7e:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f80:	f005 fb26 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f84:	2301      	movs	r3, #1
 8001f86:	9400      	str	r4, [sp, #0]
 8001f88:	aa03      	add	r2, sp, #12
 8001f8a:	a902      	add	r1, sp, #8
 8001f8c:	48cc      	ldr	r0, [pc, #816]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8001f8e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f92:	f005 fb1d 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f96:	2110      	movs	r1, #16
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8001f9e:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fa2:	f004 fbb5 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001fa6:	462a      	mov	r2, r5
 8001fa8:	2110      	movs	r1, #16
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f004 fbaf 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001fb2:	27bb      	movs	r7, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fb4:	9400      	str	r4, [sp, #0]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	aa03      	add	r2, sp, #12
 8001fba:	a902      	add	r1, sp, #8
 8001fbc:	48c0      	ldr	r0, [pc, #768]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8001fbe:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc2:	f005 fb05 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	9400      	str	r4, [sp, #0]
 8001fca:	aa03      	add	r2, sp, #12
 8001fcc:	a902      	add	r1, sp, #8
 8001fce:	48bc      	ldr	r0, [pc, #752]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8001fd0:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fd4:	f005 fafc 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001fd8:	f89d 700c 	ldrb.w	r7, [sp, #12]
    return((HiByte<<8) | LoByte);
 8001fdc:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001fe8:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fea:	f004 fb91 	bl	8006710 <HAL_GPIO_WritePin>
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001fee:	ed98 7a00 	vldr	s14, [r8]
 8001ff2:	4fb5      	ldr	r7, [pc, #724]	; (80022c8 <ICM20602_read_IMU_data+0x380>)
 8001ff4:	ee07 6a90 	vmov	s15, r6
 8001ff8:	ee27 7a28 	vmul.f32	s14, s14, s17
 8001ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002000:	462a      	mov	r2, r5
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002002:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002006:	2110      	movs	r1, #16
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002008:	edc7 7a00 	vstr	s15, [r7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800200c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002010:	f004 fb7e 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002014:	26be      	movs	r6, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002016:	9400      	str	r4, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	aa03      	add	r2, sp, #12
 800201c:	a902      	add	r1, sp, #8
 800201e:	48a8      	ldr	r0, [pc, #672]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002020:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002024:	f005 fad4 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002028:	2301      	movs	r3, #1
 800202a:	9400      	str	r4, [sp, #0]
 800202c:	aa03      	add	r2, sp, #12
 800202e:	a902      	add	r1, sp, #8
 8002030:	48a3      	ldr	r0, [pc, #652]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002032:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002036:	f005 facb 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800203a:	2110      	movs	r1, #16
 800203c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002040:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002042:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002046:	f004 fb63 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800204a:	462a      	mov	r2, r5
 800204c:	2110      	movs	r1, #16
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f004 fb5d 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002056:	f04f 0cbd 	mov.w	ip, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800205a:	9400      	str	r4, [sp, #0]
 800205c:	2301      	movs	r3, #1
 800205e:	aa03      	add	r2, sp, #12
 8002060:	a902      	add	r1, sp, #8
 8002062:	4897      	ldr	r0, [pc, #604]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002064:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002068:	f005 fab2 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800206c:	2301      	movs	r3, #1
 800206e:	9400      	str	r4, [sp, #0]
 8002070:	aa03      	add	r2, sp, #12
 8002072:	a902      	add	r1, sp, #8
 8002074:	4892      	ldr	r0, [pc, #584]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002076:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800207a:	f005 faa9 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800207e:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002082:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002086:	2201      	movs	r2, #1
 8002088:	2110      	movs	r1, #16
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800208e:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002090:	f004 fb3e 	bl	8006710 <HAL_GPIO_WritePin>
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002094:	ed98 7a00 	vldr	s14, [r8]
 8002098:	ee07 6a90 	vmov	s15, r6
 800209c:	ee27 7a28 	vmul.f32	s14, s14, s17
 80020a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020a4:	462a      	mov	r2, r5
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80020a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020aa:	2110      	movs	r1, #16
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80020ac:	edc7 7a01 	vstr	s15, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f004 fb2c 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020b8:	26c0      	movs	r6, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ba:	9400      	str	r4, [sp, #0]
 80020bc:	2301      	movs	r3, #1
 80020be:	aa03      	add	r2, sp, #12
 80020c0:	a902      	add	r1, sp, #8
 80020c2:	487f      	ldr	r0, [pc, #508]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 80020c4:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020c8:	f005 fa82 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020cc:	2301      	movs	r3, #1
 80020ce:	9400      	str	r4, [sp, #0]
 80020d0:	aa03      	add	r2, sp, #12
 80020d2:	a902      	add	r1, sp, #8
 80020d4:	487a      	ldr	r0, [pc, #488]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 80020d6:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020da:	f005 fa79 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020de:	2110      	movs	r1, #16
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80020e6:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020ea:	f004 fb11 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020ee:	462a      	mov	r2, r5
 80020f0:	2110      	movs	r1, #16
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f6:	f004 fb0b 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020fa:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020fe:	9400      	str	r4, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	aa03      	add	r2, sp, #12
 8002104:	a902      	add	r1, sp, #8
 8002106:	486e      	ldr	r0, [pc, #440]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002108:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800210c:	f005 fa60 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002110:	2301      	movs	r3, #1
 8002112:	9400      	str	r4, [sp, #0]
 8002114:	aa03      	add	r2, sp, #12
 8002116:	a902      	add	r1, sp, #8
 8002118:	4869      	ldr	r0, [pc, #420]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 800211a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800211e:	f005 fa57 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002122:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002126:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800212a:	2201      	movs	r2, #1
 800212c:	2110      	movs	r1, #16
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002132:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002134:	f004 faec 	bl	8006710 <HAL_GPIO_WritePin>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002138:	ed98 7a00 	vldr	s14, [r8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800213c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80022d0 <ICM20602_read_IMU_data+0x388>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002140:	ee07 6a90 	vmov	s15, r6
 8002144:	ee27 7a28 	vmul.f32	s14, s14, s17
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800214c:	462a      	mov	r2, r5
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 800214e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002152:	2110      	movs	r1, #16
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002154:	edc7 7a02 	vstr	s15, [r7, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f004 fad8 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002160:	26c4      	movs	r6, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002162:	9400      	str	r4, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	aa03      	add	r2, sp, #12
 8002168:	a902      	add	r1, sp, #8
 800216a:	4855      	ldr	r0, [pc, #340]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 800216c:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002170:	f005 fa2e 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002174:	2301      	movs	r3, #1
 8002176:	9400      	str	r4, [sp, #0]
 8002178:	aa03      	add	r2, sp, #12
 800217a:	a902      	add	r1, sp, #8
 800217c:	4850      	ldr	r0, [pc, #320]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 800217e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002182:	f005 fa25 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002186:	2110      	movs	r1, #16
 8002188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800218e:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002192:	f004 fabd 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002196:	462a      	mov	r2, r5
 8002198:	2110      	movs	r1, #16
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219e:	f004 fab7 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021a2:	f04f 0cc3 	mov.w	ip, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021a6:	9400      	str	r4, [sp, #0]
 80021a8:	2301      	movs	r3, #1
 80021aa:	aa03      	add	r2, sp, #12
 80021ac:	a902      	add	r1, sp, #8
 80021ae:	4844      	ldr	r0, [pc, #272]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 80021b0:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b4:	f005 fa0c 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b8:	2301      	movs	r3, #1
 80021ba:	9400      	str	r4, [sp, #0]
 80021bc:	aa03      	add	r2, sp, #12
 80021be:	a902      	add	r1, sp, #8
 80021c0:	483f      	ldr	r0, [pc, #252]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 80021c2:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021c6:	f005 fa03 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80021ca:	f89d 800c 	ldrb.w	r8, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80021ce:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2110      	movs	r1, #16
 80021d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021da:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021dc:	f004 fa98 	bl	8006710 <HAL_GPIO_WritePin>
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021e0:	ee07 6a90 	vmov	s15, r6
 80021e4:	ed99 7a00 	vldr	s14, [r9]
 80021e8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80022d4 <ICM20602_read_IMU_data+0x38c>
 80021ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021f0:	462a      	mov	r2, r5
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021f6:	2110      	movs	r1, #16
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021f8:	edc8 7a00 	vstr	s15, [r8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002200:	f004 fa86 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002204:	26c6      	movs	r6, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002206:	9400      	str	r4, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	aa03      	add	r2, sp, #12
 800220c:	a902      	add	r1, sp, #8
 800220e:	482c      	ldr	r0, [pc, #176]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002210:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002214:	f005 f9dc 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002218:	2301      	movs	r3, #1
 800221a:	9400      	str	r4, [sp, #0]
 800221c:	aa03      	add	r2, sp, #12
 800221e:	a902      	add	r1, sp, #8
 8002220:	4827      	ldr	r0, [pc, #156]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002222:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002226:	f005 f9d3 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800222a:	2110      	movs	r1, #16
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002232:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002236:	f004 fa6b 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800223a:	462a      	mov	r2, r5
 800223c:	2110      	movs	r1, #16
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f004 fa65 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002246:	f04f 0cc5 	mov.w	ip, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800224a:	9400      	str	r4, [sp, #0]
 800224c:	2301      	movs	r3, #1
 800224e:	aa03      	add	r2, sp, #12
 8002250:	a902      	add	r1, sp, #8
 8002252:	481b      	ldr	r0, [pc, #108]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002254:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002258:	f005 f9ba 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800225c:	2301      	movs	r3, #1
 800225e:	9400      	str	r4, [sp, #0]
 8002260:	aa03      	add	r2, sp, #12
 8002262:	a902      	add	r1, sp, #8
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002266:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800226a:	f005 f9b1 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800226e:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002272:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002276:	2201      	movs	r2, #1
 8002278:	2110      	movs	r1, #16
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800227e:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002280:	f004 fa46 	bl	8006710 <HAL_GPIO_WritePin>
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002284:	ee07 6a90 	vmov	s15, r6
 8002288:	ed99 7a00 	vldr	s14, [r9]
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002290:	462a      	mov	r2, r5
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002292:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002296:	2110      	movs	r1, #16
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002298:	edc8 7a01 	vstr	s15, [r8, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800229c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a0:	f004 fa36 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80022a4:	26c8      	movs	r6, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022a6:	9400      	str	r4, [sp, #0]
 80022a8:	2301      	movs	r3, #1
 80022aa:	aa03      	add	r2, sp, #12
 80022ac:	a902      	add	r1, sp, #8
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 80022b0:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b4:	f005 f98c 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b8:	2301      	movs	r3, #1
 80022ba:	9400      	str	r4, [sp, #0]
 80022bc:	e00c      	b.n	80022d8 <ICM20602_read_IMU_data+0x390>
 80022be:	bf00      	nop
 80022c0:	200011f8 	.word	0x200011f8
 80022c4:	411ce80a 	.word	0x411ce80a
 80022c8:	20000d58 	.word	0x20000d58
 80022cc:	20000d54 	.word	0x20000d54
 80022d0:	20000da0 	.word	0x20000da0
 80022d4:	20000da4 	.word	0x20000da4
 80022d8:	aa03      	add	r2, sp, #12
 80022da:	a902      	add	r1, sp, #8
 80022dc:	48b8      	ldr	r0, [pc, #736]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 80022de:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022e2:	f005 f975 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022e6:	2110      	movs	r1, #16
 80022e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ec:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80022ee:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022f2:	f004 fa0d 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022f6:	462a      	mov	r2, r5
 80022f8:	2110      	movs	r1, #16
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fe:	f004 fa07 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002302:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002306:	9400      	str	r4, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	aa03      	add	r2, sp, #12
 800230c:	a902      	add	r1, sp, #8
 800230e:	48ac      	ldr	r0, [pc, #688]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]= reg | 0x80;
 8002310:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002314:	f005 f95c 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002318:	2301      	movs	r3, #1
 800231a:	9400      	str	r4, [sp, #0]
 800231c:	aa03      	add	r2, sp, #12
 800231e:	a902      	add	r1, sp, #8
 8002320:	48a7      	ldr	r0, [pc, #668]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 8002322:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002326:	f005 f953 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800232a:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800232e:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002332:	2110      	movs	r1, #16
 8002334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002338:	2201      	movs	r2, #1
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800233a:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800233c:	f004 f9e8 	bl	8006710 <HAL_GPIO_WritePin>
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002340:	ee07 6a90 	vmov	s15, r6
 8002344:	ed99 7a00 	vldr	s14, [r9]
 8002348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    send_data[0]= reg | 0x80;
 800234c:	26c2      	movs	r6, #194	; 0xc2
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	edc8 7a02 	vstr	s15, [r8, #8]
    ICM20602_medianFilter();
 8002356:	f7ff fcfb 	bl	8001d50 <ICM20602_medianFilter>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800235a:	462a      	mov	r2, r5
 800235c:	2110      	movs	r1, #16
 800235e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002362:	f004 f9d5 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002366:	9400      	str	r4, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	aa03      	add	r2, sp, #12
 800236c:	a902      	add	r1, sp, #8
 800236e:	4894      	ldr	r0, [pc, #592]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]= reg | 0x80;
 8002370:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002374:	f005 f92c 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002378:	2301      	movs	r3, #1
 800237a:	9400      	str	r4, [sp, #0]
 800237c:	aa03      	add	r2, sp, #12
 800237e:	a902      	add	r1, sp, #8
 8002380:	488f      	ldr	r0, [pc, #572]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 8002382:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002386:	f005 f923 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800238a:	2110      	movs	r1, #16
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002392:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002396:	f004 f9bb 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800239a:	462a      	mov	r2, r5
 800239c:	2110      	movs	r1, #16
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f004 f9b5 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80023a6:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023aa:	9400      	str	r4, [sp, #0]
 80023ac:	2301      	movs	r3, #1
 80023ae:	aa03      	add	r2, sp, #12
 80023b0:	a902      	add	r1, sp, #8
 80023b2:	4883      	ldr	r0, [pc, #524]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]= reg | 0x80;
 80023b4:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023b8:	f005 f90a 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023bc:	2301      	movs	r3, #1
 80023be:	9400      	str	r4, [sp, #0]
 80023c0:	aa03      	add	r2, sp, #12
 80023c2:	a902      	add	r1, sp, #8
 80023c4:	487e      	ldr	r0, [pc, #504]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 80023c6:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023ca:	f005 f901 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2110      	movs	r1, #16
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80023d6:	f89d 500c 	ldrb.w	r5, [sp, #12]
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 80023da:	4c7a      	ldr	r4, [pc, #488]	; (80025c4 <ICM20602_read_IMU_data+0x67c>)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023dc:	f004 f998 	bl	8006710 <HAL_GPIO_WritePin>
void ICM20602_IMU_compensate(void)
{
    int k;
    for(k=0;k<3;k++){
        acc_comp[k] = acc[k] - acc_off[k];
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023e0:	4a79      	ldr	r2, [pc, #484]	; (80025c8 <ICM20602_read_IMU_data+0x680>)
 80023e2:	edd8 3a00 	vldr	s7, [r8]
 80023e6:	edd2 7a00 	vldr	s15, [r2]
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 80023ea:	4b78      	ldr	r3, [pc, #480]	; (80025cc <ICM20602_read_IMU_data+0x684>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023ec:	edd8 4a02 	vldr	s9, [r8, #8]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80023f0:	edd3 5a00 	vldr	s11, [r3]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023f4:	ed9f 3a76 	vldr	s6, [pc, #472]	; 80025d0 <ICM20602_read_IMU_data+0x688>
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023f8:	ed92 7a01 	vldr	s14, [r2, #4]
 80023fc:	ed98 4a01 	vldr	s8, [r8, #4]
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 8002400:	edd4 6a00 	vldr	s13, [r4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002404:	ed93 6a01 	vldr	s12, [r3, #4]
        acc_comp[k] = acc[k] - acc_off[k];
 8002408:	ed97 2a00 	vldr	s4, [r7]
 800240c:	edd7 2a01 	vldr	s5, [r7, #4]
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 8002410:	4870      	ldr	r0, [pc, #448]	; (80025d4 <ICM20602_read_IMU_data+0x68c>)
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 8002412:	4971      	ldr	r1, [pc, #452]	; (80025d8 <ICM20602_read_IMU_data+0x690>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002414:	ee73 3ae7 	vsub.f32	s7, s7, s15
    return ((HiByte<<8) | LoByte);
 8002418:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800241c:	edd2 7a02 	vldr	s15, [r2, #8]
        acc_comp[k] = acc[k] - acc_off[k];
 8002420:	4a6e      	ldr	r2, [pc, #440]	; (80025dc <ICM20602_read_IMU_data+0x694>)
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002422:	b236      	sxth	r6, r6
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002424:	ee74 4ae7 	vsub.f32	s9, s9, s15
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002428:	ee07 6a90 	vmov	s15, r6
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 800242c:	ee73 5aa5 	vadd.f32	s11, s7, s11
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002434:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 8002438:	eee7 1a83 	vfma.f32	s3, s15, s6
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 800243c:	ee65 5a88 	vmul.f32	s11, s11, s16
 8002440:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
        acc_comp[k] = acc[k] - acc_off[k];
 8002444:	ed92 0a00 	vldr	s0, [r2]
 8002448:	edd2 0a01 	vldr	s1, [r2, #4]
 800244c:	ed92 1a02 	vldr	s2, [r2, #8]
 8002450:	ed97 3a02 	vldr	s6, [r7, #8]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002454:	4a62      	ldr	r2, [pc, #392]	; (80025e0 <ICM20602_read_IMU_data+0x698>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002456:	ee34 4a47 	vsub.f32	s8, s8, s14
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 800245a:	eee5 6a85 	vfma.f32	s13, s11, s10
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 800245e:	ed93 7a02 	vldr	s14, [r3, #8]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002462:	edc2 1a00 	vstr	s3, [r2]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002466:	ee74 7a87 	vadd.f32	s15, s9, s14
        acc_comp[k] = acc[k] - acc_off[k];
 800246a:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <ICM20602_read_IMU_data+0x69c>)
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 800246c:	ed90 7a00 	vldr	s14, [r0]
        acc_comp[k] = acc[k] - acc_off[k];
 8002470:	ee32 2a40 	vsub.f32	s4, s4, s0
 8002474:	ee73 5a41 	vsub.f32	s11, s6, s2
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002478:	ee34 6a06 	vadd.f32	s12, s8, s12
        acc_comp[k] = acc[k] - acc_off[k];
 800247c:	ee72 2ae0 	vsub.f32	s5, s5, s1
    while (deg < -180.0f) deg += 360.0f;
 8002480:	ed9f 3a59 	vldr	s6, [pc, #356]	; 80025e8 <ICM20602_read_IMU_data+0x6a0>
        acc_comp[k] = acc[k] - acc_off[k];
 8002484:	ed82 2a00 	vstr	s4, [r2]
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 8002488:	ee27 0a88 	vmul.f32	s0, s15, s16
        acc_comp[k] = acc[k] - acc_off[k];
 800248c:	edc2 2a01 	vstr	s5, [r2, #4]
 8002490:	edc2 5a02 	vstr	s11, [r2, #8]
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 8002494:	ee26 6a08 	vmul.f32	s12, s12, s16
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002498:	4a54      	ldr	r2, [pc, #336]	; (80025ec <ICM20602_read_IMU_data+0x6a4>)
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800249a:	edd1 7a00 	vldr	s15, [r1]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800249e:	edc2 3a00 	vstr	s7, [r2]
    while (deg < -180.0f) deg += 360.0f;
 80024a2:	eef4 6ac3 	vcmpe.f32	s13, s6
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 80024aa:	eea6 7a05 	vfma.f32	s14, s12, s10
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 80024ae:	eee0 7a05 	vfma.f32	s15, s0, s10
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80024b2:	ed82 4a01 	vstr	s8, [r2, #4]
 80024b6:	edc2 4a02 	vstr	s9, [r2, #8]
    while (deg < -180.0f) deg += 360.0f;
 80024ba:	d50c      	bpl.n	80024d6 <ICM20602_read_IMU_data+0x58e>
 80024bc:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 80024c0:	eddf 5a4c 	vldr	s11, [pc, #304]	; 80025f4 <ICM20602_read_IMU_data+0x6ac>
 80024c4:	eeb0 6a66 	vmov.f32	s12, s13
 80024c8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80024d4:	d4f6      	bmi.n	80024c4 <ICM20602_read_IMU_data+0x57c>
    while (deg >= 180.0f) deg -= 360.0f;
 80024d6:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80025f8 <ICM20602_read_IMU_data+0x6b0>
 80024da:	eef4 6ac6 	vcmpe.f32	s13, s12
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	db0c      	blt.n	80024fe <ICM20602_read_IMU_data+0x5b6>
 80024e4:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 80024e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80025fc <ICM20602_read_IMU_data+0x6b4>
 80024ec:	eeb0 6a66 	vmov.f32	s12, s13
 80024f0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80024fc:	daf6      	bge.n	80024ec <ICM20602_read_IMU_data+0x5a4>
    while (deg < -180.0f) deg += 360.0f;
 80024fe:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80025e8 <ICM20602_read_IMU_data+0x6a0>
    pitch_angle = ICM20602_normAngle(pitch_angle);
 8002502:	edc4 6a00 	vstr	s13, [r4]
    while (deg < -180.0f) deg += 360.0f;
 8002506:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d50c      	bpl.n	800252a <ICM20602_read_IMU_data+0x5e2>
 8002510:	eddf 5a37 	vldr	s11, [pc, #220]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 8002514:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80025f4 <ICM20602_read_IMU_data+0x6ac>
 8002518:	eef0 6a47 	vmov.f32	s13, s14
 800251c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002524:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002528:	d4f6      	bmi.n	8002518 <ICM20602_read_IMU_data+0x5d0>
    while (deg >= 180.0f) deg -= 360.0f;
 800252a:	eddf 6a33 	vldr	s13, [pc, #204]	; 80025f8 <ICM20602_read_IMU_data+0x6b0>
 800252e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	db0c      	blt.n	8002552 <ICM20602_read_IMU_data+0x60a>
 8002538:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 800253c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80025fc <ICM20602_read_IMU_data+0x6b4>
 8002540:	eef0 6a47 	vmov.f32	s13, s14
 8002544:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002550:	daf6      	bge.n	8002540 <ICM20602_read_IMU_data+0x5f8>
    while (deg < -180.0f) deg += 360.0f;
 8002552:	eddf 6a25 	vldr	s13, [pc, #148]	; 80025e8 <ICM20602_read_IMU_data+0x6a0>
    roll_angle  = ICM20602_normAngle(roll_angle);
 8002556:	ed80 7a00 	vstr	s14, [r0]
    while (deg < -180.0f) deg += 360.0f;
 800255a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d50c      	bpl.n	800257e <ICM20602_read_IMU_data+0x636>
 8002564:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 8002568:	eddf 6a22 	vldr	s13, [pc, #136]	; 80025f4 <ICM20602_read_IMU_data+0x6ac>
 800256c:	eeb0 7a67 	vmov.f32	s14, s15
 8002570:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	ee77 7a86 	vadd.f32	s15, s15, s12
 800257c:	d4f6      	bmi.n	800256c <ICM20602_read_IMU_data+0x624>
    while (deg >= 180.0f) deg -= 360.0f;
 800257e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80025f8 <ICM20602_read_IMU_data+0x6b0>
 8002582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	db0c      	blt.n	80025a6 <ICM20602_read_IMU_data+0x65e>
 800258c:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 8002590:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80025fc <ICM20602_read_IMU_data+0x6b4>
 8002594:	eeb0 7a67 	vmov.f32	s14, s15
 8002598:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025a4:	daf6      	bge.n	8002594 <ICM20602_read_IMU_data+0x64c>
    yaw_angle   = ICM20602_normAngle(yaw_angle);
 80025a6:	edc1 7a00 	vstr	s15, [r1]
    gyro_prv[0] = gyro_comp[0];
 80025aa:	edc3 3a00 	vstr	s7, [r3]
    gyro_prv[1] = gyro_comp[1];
 80025ae:	ed83 4a01 	vstr	s8, [r3, #4]
    gyro_prv[2] = gyro_comp[2];
 80025b2:	edc3 4a02 	vstr	s9, [r3, #8]
}
 80025b6:	b004      	add	sp, #16
 80025b8:	ecbd 8b02 	vpop	{d8}
 80025bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025c0:	200011f8 	.word	0x200011f8
 80025c4:	20001130 	.word	0x20001130
 80025c8:	20000de0 	.word	0x20000de0
 80025cc:	20000dec 	.word	0x20000dec
 80025d0:	3b4889df 	.word	0x3b4889df
 80025d4:	20001160 	.word	0x20001160
 80025d8:	200011f0 	.word	0x200011f0
 80025dc:	20000d94 	.word	0x20000d94
 80025e0:	20000df8 	.word	0x20000df8
 80025e4:	20000d64 	.word	0x20000d64
 80025e8:	c3340000 	.word	0xc3340000
 80025ec:	20000db0 	.word	0x20000db0
 80025f0:	43b40000 	.word	0x43b40000
 80025f4:	c4070000 	.word	0xc4070000
 80025f8:	43340000 	.word	0x43340000
 80025fc:	44070000 	.word	0x44070000

08002600 <ICM20602_IMU_calibration2>:
{
 8002600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002604:	ed2d 8b06 	vpush	{d8-d10}
    double acc_sum[3]={0};
 8002608:	2400      	movs	r4, #0
{
 800260a:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    double acc_ave[3][10] = {{0.0}};
 800260e:	22f0      	movs	r2, #240	; 0xf0
 8002610:	4621      	mov	r1, r4
 8002612:	a822      	add	r0, sp, #136	; 0x88
    double acc_sum[3]={0};
 8002614:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8002618:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800261c:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    double gyro_sum[3]={0};
 8002620:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8002624:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8002628:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    double acc_ave[3][10] = {{0.0}};
 800262c:	f007 fe1a 	bl	800a264 <memset>
    double gyro_ave[3][10] = {{0.0}};
 8002630:	4621      	mov	r1, r4
 8002632:	22f0      	movs	r2, #240	; 0xf0
 8002634:	a85e      	add	r0, sp, #376	; 0x178
 8002636:	f007 fe15 	bl	800a264 <memset>
    printf("put the IMU still!\n");
 800263a:	48c9      	ldr	r0, [pc, #804]	; (8002960 <ICM20602_IMU_calibration2+0x360>)
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800263c:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8002964 <ICM20602_IMU_calibration2+0x364>
    printf("put the IMU still!\n");
 8002640:	f007 fc5a 	bl	8009ef8 <puts>
    HAL_Delay(200);
 8002644:	20c8      	movs	r0, #200	; 0xc8
 8002646:	f002 fba7 	bl	8004d98 <HAL_Delay>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 800264a:	2200      	movs	r2, #0
 800264c:	2300      	movs	r3, #0
    double cal_len = 0.0f;
 800264e:	ec43 2b1a 	vmov	d10, r2, r3
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fd fe3f 	bl	80002d8 <__aeabi_dsub>
 800265a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
 8002660:	9008      	str	r0, [sp, #32]
		|| cal_len < 500.0
 8002662:	a3bd      	add	r3, pc, #756	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800266c:	f7fe fa7c 	bl	8000b68 <__aeabi_dcmpgt>
 8002670:	2800      	cmp	r0, #0
 8002672:	d15d      	bne.n	8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002674:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8002678:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800267c:	f7fd fe2c 	bl	80002d8 <__aeabi_dsub>
 8002680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002684:	930b      	str	r3, [sp, #44]	; 0x2c
 8002686:	900a      	str	r0, [sp, #40]	; 0x28
 8002688:	a3b3      	add	r3, pc, #716	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002692:	f7fe fa69 	bl	8000b68 <__aeabi_dcmpgt>
 8002696:	2800      	cmp	r0, #0
 8002698:	d14a      	bne.n	8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 800269a:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800269e:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 80026a2:	f7fd fe19 	bl	80002d8 <__aeabi_dsub>
 80026a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026aa:	930d      	str	r3, [sp, #52]	; 0x34
 80026ac:	900c      	str	r0, [sp, #48]	; 0x30
 80026ae:	a3aa      	add	r3, pc, #680	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80026b8:	f7fe fa56 	bl	8000b68 <__aeabi_dcmpgt>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d137      	bne.n	8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 80026c0:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
 80026c4:	e9dd 0170 	ldrd	r0, r1, [sp, #448]	; 0x1c0
 80026c8:	f7fd fe06 	bl	80002d8 <__aeabi_dsub>
 80026cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80026d2:	900e      	str	r0, [sp, #56]	; 0x38
 80026d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80026de:	f7fe fa43 	bl	8000b68 <__aeabi_dcmpgt>
 80026e2:	bb28      	cbnz	r0, 8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 80026e4:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 80026e8:	e9dd 0184 	ldrd	r0, r1, [sp, #528]	; 0x210
 80026ec:	f7fd fdf4 	bl	80002d8 <__aeabi_dsub>
 80026f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026f4:	9311      	str	r3, [sp, #68]	; 0x44
 80026f6:	9010      	str	r0, [sp, #64]	; 0x40
 80026f8:	a397      	add	r3, pc, #604	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002702:	f7fe fa31 	bl	8000b68 <__aeabi_dcmpgt>
 8002706:	b998      	cbnz	r0, 8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002708:	e9dd 2386 	ldrd	r2, r3, [sp, #536]	; 0x218
 800270c:	e9dd 0198 	ldrd	r0, r1, [sp, #608]	; 0x260
 8002710:	f7fd fde2 	bl	80002d8 <__aeabi_dsub>
 8002714:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002718:	9313      	str	r3, [sp, #76]	; 0x4c
 800271a:	9012      	str	r0, [sp, #72]	; 0x48
 800271c:	a38e      	add	r3, pc, #568	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002726:	f7fe fa1f 	bl	8000b68 <__aeabi_dcmpgt>
 800272a:	2800      	cmp	r0, #0
 800272c:	f000 82f4 	beq.w	8002d18 <ICM20602_IMU_calibration2+0x718>
    	printf("cal_len=%f\r\n",cal_len);
 8002730:	ab16      	add	r3, sp, #88	; 0x58
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <ICM20602_IMU_calibration2+0x368>)
 8002736:	9304      	str	r3, [sp, #16]
 8002738:	ec59 8b1a 	vmov	r8, r9, d10
 800273c:	ab1c      	add	r3, sp, #112	; 0x70
 800273e:	9303      	str	r3, [sp, #12]
 8002740:	4b8a      	ldr	r3, [pc, #552]	; (800296c <ICM20602_IMU_calibration2+0x36c>)
 8002742:	9305      	str	r3, [sp, #20]
 8002744:	ee1a 2a10 	vmov	r2, s20
 8002748:	464b      	mov	r3, r9
 800274a:	4889      	ldr	r0, [pc, #548]	; (8002970 <ICM20602_IMU_calibration2+0x370>)
 800274c:	f8df b230 	ldr.w	fp, [pc, #560]	; 8002980 <ICM20602_IMU_calibration2+0x380>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002750:	4c88      	ldr	r4, [pc, #544]	; (8002974 <ICM20602_IMU_calibration2+0x374>)
    	printf("cal_len=%f\r\n",cal_len);
 8002752:	f007 fb6b 	bl	8009e2c <iprintf>
    	for(j = 0; j < 3; j++){
 8002756:	ee1a 2a10 	vmov	r2, s20
 800275a:	4987      	ldr	r1, [pc, #540]	; (8002978 <ICM20602_IMU_calibration2+0x378>)
 800275c:	464b      	mov	r3, r9
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe f89c 	bl	800089c <__aeabi_ddiv>
 8002764:	ec41 0b19 	vmov	d9, r0, r1
 8002768:	ae22      	add	r6, sp, #136	; 0x88
 800276a:	ad5e      	add	r5, sp, #376	; 0x178
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800276c:	2700      	movs	r7, #0
 800276e:	2200      	movs	r2, #0
 8002770:	2110      	movs	r1, #16
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002776:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800277a:	f003 ffc9 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800277e:	20bc      	movs	r0, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002780:	f8cd 8000 	str.w	r8, [sp]
 8002784:	2301      	movs	r3, #1
 8002786:	aa15      	add	r2, sp, #84	; 0x54
 8002788:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800278a:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800278e:	4620      	mov	r0, r4
 8002790:	f004 ff1e 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002794:	2301      	movs	r3, #1
 8002796:	f8cd 8000 	str.w	r8, [sp]
 800279a:	aa15      	add	r2, sp, #84	; 0x54
 800279c:	a914      	add	r1, sp, #80	; 0x50
 800279e:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80027a0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027a4:	f004 ff14 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027a8:	2201      	movs	r2, #1
 80027aa:	2110      	movs	r1, #16
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80027b0:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027b4:	f003 ffac 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2110      	movs	r1, #16
 80027bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c0:	f003 ffa6 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80027c4:	20bb      	movs	r0, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027c6:	f8cd 8000 	str.w	r8, [sp]
 80027ca:	2301      	movs	r3, #1
 80027cc:	aa15      	add	r2, sp, #84	; 0x54
 80027ce:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80027d0:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027d4:	4620      	mov	r0, r4
 80027d6:	f004 fefb 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027da:	2301      	movs	r3, #1
 80027dc:	f8cd 8000 	str.w	r8, [sp]
 80027e0:	aa15      	add	r2, sp, #84	; 0x54
 80027e2:	a914      	add	r1, sp, #80	; 0x50
 80027e4:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80027e6:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027ea:	f004 fef1 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80027ee:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027f2:	2201      	movs	r2, #1
 80027f4:	2110      	movs	r1, #16
 80027f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fa:	f003 ff89 	bl	8006710 <HAL_GPIO_WritePin>
    return((HiByte<<8) | LoByte);
 80027fe:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002802:	4b5e      	ldr	r3, [pc, #376]	; (800297c <ICM20602_IMU_calibration2+0x37c>)
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <ICM20602_IMU_calibration2+0x368>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	fa0f f989 	sxth.w	r9, r9
 800280e:	ee07 9a90 	vmov	s15, r9
 8002812:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800281a:	2110      	movs	r1, #16
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800281c:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002824:	edc2 7a00 	vstr	s15, [r2]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	f003 ff71 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800282e:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002830:	20be      	movs	r0, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002832:	460a      	mov	r2, r1
 8002834:	f8cd 8000 	str.w	r8, [sp]
 8002838:	2301      	movs	r3, #1
 800283a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800283c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002840:	4620      	mov	r0, r4
 8002842:	f004 fec5 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002846:	a915      	add	r1, sp, #84	; 0x54
 8002848:	2301      	movs	r3, #1
 800284a:	460a      	mov	r2, r1
 800284c:	f8cd 8000 	str.w	r8, [sp]
 8002850:	a914      	add	r1, sp, #80	; 0x50
 8002852:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002854:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002858:	f004 feba 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800285c:	2201      	movs	r2, #1
 800285e:	2110      	movs	r1, #16
 8002860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002864:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002868:	f003 ff52 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2110      	movs	r1, #16
 8002870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002874:	f003 ff4c 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002878:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 800287a:	20bd      	movs	r0, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800287c:	460a      	mov	r2, r1
 800287e:	f8cd 8000 	str.w	r8, [sp]
 8002882:	2301      	movs	r3, #1
 8002884:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002886:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800288a:	4620      	mov	r0, r4
 800288c:	f004 fea0 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002890:	a915      	add	r1, sp, #84	; 0x54
 8002892:	2301      	movs	r3, #1
 8002894:	460a      	mov	r2, r1
 8002896:	f8cd 8000 	str.w	r8, [sp]
 800289a:	a914      	add	r1, sp, #80	; 0x50
 800289c:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800289e:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028a2:	f004 fe95 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80028a6:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028aa:	2201      	movs	r2, #1
 80028ac:	2110      	movs	r1, #16
 80028ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b2:	f003 ff2d 	bl	8006710 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 80028b6:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <ICM20602_IMU_calibration2+0x37c>)
 80028bc:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <ICM20602_IMU_calibration2+0x368>)
 80028be:	ed93 7a00 	vldr	s14, [r3]
 80028c2:	fa0f f989 	sxth.w	r9, r9
 80028c6:	ee07 9a90 	vmov	s15, r9
 80028ca:	ee27 7a08 	vmul.f32	s14, s14, s16
 80028ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028d2:	2110      	movs	r1, #16
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028dc:	edc2 7a01 	vstr	s15, [r2, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f003 ff15 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028e6:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80028e8:	20c0      	movs	r0, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028ea:	460a      	mov	r2, r1
 80028ec:	f8cd 8000 	str.w	r8, [sp]
 80028f0:	2301      	movs	r3, #1
 80028f2:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80028f4:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028f8:	4620      	mov	r0, r4
 80028fa:	f004 fe69 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028fe:	a915      	add	r1, sp, #84	; 0x54
 8002900:	2301      	movs	r3, #1
 8002902:	460a      	mov	r2, r1
 8002904:	f8cd 8000 	str.w	r8, [sp]
 8002908:	a914      	add	r1, sp, #80	; 0x50
 800290a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800290c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002910:	f004 fe5e 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	2110      	movs	r1, #16
 8002918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 800291c:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002920:	f003 fef6 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2110      	movs	r1, #16
 8002928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292c:	f003 fef0 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002930:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002932:	20bf      	movs	r0, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002934:	460a      	mov	r2, r1
 8002936:	f8cd 8000 	str.w	r8, [sp]
 800293a:	2301      	movs	r3, #1
 800293c:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800293e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002942:	4620      	mov	r0, r4
 8002944:	f004 fe44 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002948:	a915      	add	r1, sp, #84	; 0x54
 800294a:	2301      	movs	r3, #1
 800294c:	460a      	mov	r2, r1
 800294e:	f8cd 8000 	str.w	r8, [sp]
 8002952:	a914      	add	r1, sp, #80	; 0x50
 8002954:	e016      	b.n	8002984 <ICM20602_IMU_calibration2+0x384>
 8002956:	bf00      	nop
 8002958:	eb1c432d 	.word	0xeb1c432d
 800295c:	3f2a36e2 	.word	0x3f2a36e2
 8002960:	0800d488 	.word	0x0800d488
 8002964:	411ce80a 	.word	0x411ce80a
 8002968:	20000d58 	.word	0x20000d58
 800296c:	20000da4 	.word	0x20000da4
 8002970:	0800d49c 	.word	0x0800d49c
 8002974:	200011f8 	.word	0x200011f8
 8002978:	3ff00000 	.word	0x3ff00000
 800297c:	20000d54 	.word	0x20000d54
 8002980:	20000da0 	.word	0x20000da0
 8002984:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002986:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800298a:	f004 fe21 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800298e:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002992:	2201      	movs	r2, #1
 8002994:	2110      	movs	r1, #16
 8002996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299a:	f003 feb9 	bl	8006710 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 800299e:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80029a2:	4bc5      	ldr	r3, [pc, #788]	; (8002cb8 <ICM20602_IMU_calibration2+0x6b8>)
 80029a4:	4ac5      	ldr	r2, [pc, #788]	; (8002cbc <ICM20602_IMU_calibration2+0x6bc>)
 80029a6:	ed93 7a00 	vldr	s14, [r3]
 80029aa:	fa0f f989 	sxth.w	r9, r9
 80029ae:	ee07 9a90 	vmov	s15, r9
 80029b2:	ee27 7a08 	vmul.f32	s14, s14, s16
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029ba:	2110      	movs	r1, #16
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80029bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80029c4:	edc2 7a02 	vstr	s15, [r2, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f003 fea1 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80029ce:	20c4      	movs	r0, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029d0:	f8cd 8000 	str.w	r8, [sp]
 80029d4:	2301      	movs	r3, #1
 80029d6:	aa15      	add	r2, sp, #84	; 0x54
 80029d8:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80029da:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029de:	4620      	mov	r0, r4
 80029e0:	f004 fdf6 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029e4:	2301      	movs	r3, #1
 80029e6:	f8cd 8000 	str.w	r8, [sp]
 80029ea:	aa15      	add	r2, sp, #84	; 0x54
 80029ec:	a914      	add	r1, sp, #80	; 0x50
 80029ee:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80029f0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029f4:	f004 fdec 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2110      	movs	r1, #16
 80029fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002a00:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a04:	f003 fe84 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2110      	movs	r1, #16
 8002a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a10:	f003 fe7e 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a14:	20c3      	movs	r0, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a16:	f8cd 8000 	str.w	r8, [sp]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	aa15      	add	r2, sp, #84	; 0x54
 8002a1e:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a20:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a24:	4620      	mov	r0, r4
 8002a26:	f004 fdd3 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f8cd 8000 	str.w	r8, [sp]
 8002a30:	aa15      	add	r2, sp, #84	; 0x54
 8002a32:	a914      	add	r1, sp, #80	; 0x50
 8002a34:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a36:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a3a:	f004 fdc9 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002a3e:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002a42:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a46:	2201      	movs	r2, #1
 8002a48:	2110      	movs	r1, #16
 8002a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a4e:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a52:	f003 fe5d 	bl	8006710 <HAL_GPIO_WritePin>
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a56:	ee07 9a90 	vmov	s15, r9
 8002a5a:	ed9b 7a00 	vldr	s14, [fp]
 8002a5e:	4b98      	ldr	r3, [pc, #608]	; (8002cc0 <ICM20602_IMU_calibration2+0x6c0>)
 8002a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a64:	2200      	movs	r2, #0
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a66:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a6a:	2110      	movs	r1, #16
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a6c:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a74:	f003 fe4c 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a78:	20c6      	movs	r0, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a7a:	f8cd 8000 	str.w	r8, [sp]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	aa15      	add	r2, sp, #84	; 0x54
 8002a82:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a84:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f004 fda1 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f8cd 8000 	str.w	r8, [sp]
 8002a94:	aa15      	add	r2, sp, #84	; 0x54
 8002a96:	a914      	add	r1, sp, #80	; 0x50
 8002a98:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a9a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a9e:	f004 fd97 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002aaa:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002aae:	f003 fe2f 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2110      	movs	r1, #16
 8002ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aba:	f003 fe29 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002abe:	20c5      	movs	r0, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ac0:	f8cd 8000 	str.w	r8, [sp]
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	aa15      	add	r2, sp, #84	; 0x54
 8002ac8:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002aca:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f004 fd7e 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f8cd 8000 	str.w	r8, [sp]
 8002ada:	aa15      	add	r2, sp, #84	; 0x54
 8002adc:	a914      	add	r1, sp, #80	; 0x50
 8002ade:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002ae0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ae4:	f004 fd74 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002ae8:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002aec:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002af0:	2201      	movs	r2, #1
 8002af2:	2110      	movs	r1, #16
 8002af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002af8:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002afc:	f003 fe08 	bl	8006710 <HAL_GPIO_WritePin>
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002b00:	ee07 9a90 	vmov	s15, r9
 8002b04:	ed9b 7a00 	vldr	s14, [fp]
 8002b08:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <ICM20602_IMU_calibration2+0x6c0>)
 8002b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b0e:	2200      	movs	r2, #0
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002b10:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b14:	2110      	movs	r1, #16
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002b16:	edc3 7a01 	vstr	s15, [r3, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b1e:	f003 fdf7 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b22:	20c8      	movs	r0, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b24:	f8cd 8000 	str.w	r8, [sp]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	aa15      	add	r2, sp, #84	; 0x54
 8002b2c:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b2e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b32:	4620      	mov	r0, r4
 8002b34:	f004 fd4c 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f8cd 8000 	str.w	r8, [sp]
 8002b3e:	aa15      	add	r2, sp, #84	; 0x54
 8002b40:	a914      	add	r1, sp, #80	; 0x50
 8002b42:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b44:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b48:	f004 fd42 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2110      	movs	r1, #16
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002b54:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b58:	f003 fdda 	bl	8006710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2110      	movs	r1, #16
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b64:	f003 fdd4 	bl	8006710 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b68:	20c7      	movs	r0, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b6a:	f8cd 8000 	str.w	r8, [sp]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	aa15      	add	r2, sp, #84	; 0x54
 8002b72:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b74:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f004 fd29 	bl	80075d0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f8cd 8000 	str.w	r8, [sp]
 8002b84:	aa15      	add	r2, sp, #84	; 0x54
 8002b86:	a914      	add	r1, sp, #80	; 0x50
 8002b88:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b8a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b8e:	f004 fd1f 	bl	80075d0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002b92:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002b96:	ea49 2908 	orr.w	r9, r9, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002ba2:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002ba6:	f003 fdb3 	bl	8006710 <HAL_GPIO_WritePin>
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002baa:	ee07 9a90 	vmov	s15, r9
 8002bae:	ed9b 7a00 	vldr	s14, [fp]
 8002bb2:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <ICM20602_IMU_calibration2+0x6c0>)
 8002bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    	for(j = 0; j < 3; j++){
 8002bb8:	3650      	adds	r6, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002bba:	ee67 7a87 	vmul.f32	s15, s15, s14
    	for(j = 0; j < 3; j++){
 8002bbe:	3550      	adds	r5, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002bc0:	edc3 7a02 	vstr	s15, [r3, #8]
    		acc_sum[j]  += acc[j];
 8002bc4:	9b04      	ldr	r3, [sp, #16]
 8002bc6:	f853 0b04 	ldr.w	r0, [r3], #4
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	9b02      	ldr	r3, [sp, #8]
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002bd6:	f7fd fcdf 	bl	8000598 <__aeabi_f2d>
 8002bda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002bde:	f7fd fb7d 	bl	80002dc <__adddf3>
 8002be2:	9b02      	ldr	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002be4:	9a05      	ldr	r2, [sp, #20]
    		acc_sum[j]  += acc[j];
 8002be6:	4680      	mov	r8, r0
 8002be8:	4689      	mov	r9, r1
 8002bea:	e8e3 8902 	strd	r8, r9, [r3], #8
    		gyro_sum[j] += gyro[j];
 8002bee:	f852 0b04 	ldr.w	r0, [r2], #4
 8002bf2:	9205      	str	r2, [sp, #20]
 8002bf4:	9a03      	ldr	r2, [sp, #12]
    		acc_sum[j]  += acc[j];
 8002bf6:	9302      	str	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002bf8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002bfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c00:	f7fd fcca 	bl	8000598 <__aeabi_f2d>
 8002c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002c08:	f7fd fb68 	bl	80002dc <__adddf3>
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c0c:	464b      	mov	r3, r9
    		gyro_sum[j] += gyro[j];
 8002c0e:	4689      	mov	r9, r1
 8002c10:	9903      	ldr	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c12:	4642      	mov	r2, r8
    		gyro_sum[j] += gyro[j];
 8002c14:	4680      	mov	r8, r0
 8002c16:	e8e1 8902 	strd	r8, r9, [r1], #8
 8002c1a:	9103      	str	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c1c:	ec51 0b19 	vmov	r0, r1, d9
 8002c20:	f7fd fd12 	bl	8000648 <__aeabi_dmul>
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c28:	4680      	mov	r8, r0
 8002c2a:	4689      	mov	r9, r1
 8002c2c:	e946 8914 	strd	r8, r9, [r6, #-80]	; 0x50
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002c30:	ec51 0b19 	vmov	r0, r1, d9
 8002c34:	f7fd fd08 	bl	8000648 <__aeabi_dmul>
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c38:	e956 2304 	ldrd	r2, r3, [r6, #-16]
 8002c3c:	e946 2302 	strd	r2, r3, [r6, #-8]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c40:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8002c44:	e945 2302 	strd	r2, r3, [r5, #-8]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c48:	e956 2306 	ldrd	r2, r3, [r6, #-24]
 8002c4c:	e946 2304 	strd	r2, r3, [r6, #-16]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c50:	e955 2306 	ldrd	r2, r3, [r5, #-24]
 8002c54:	e945 2304 	strd	r2, r3, [r5, #-16]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c58:	e956 2308 	ldrd	r2, r3, [r6, #-32]
 8002c5c:	e946 2306 	strd	r2, r3, [r6, #-24]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c60:	e955 2308 	ldrd	r2, r3, [r5, #-32]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002c64:	e945 0114 	strd	r0, r1, [r5, #-80]	; 0x50
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c68:	e945 2306 	strd	r2, r3, [r5, #-24]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c6c:	e956 230a 	ldrd	r2, r3, [r6, #-40]	; 0x28
 8002c70:	e946 2308 	strd	r2, r3, [r6, #-32]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c74:	e955 230a 	ldrd	r2, r3, [r5, #-40]	; 0x28
 8002c78:	e945 2308 	strd	r2, r3, [r5, #-32]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c7c:	e956 230c 	ldrd	r2, r3, [r6, #-48]	; 0x30
 8002c80:	e946 230a 	strd	r2, r3, [r6, #-40]	; 0x28
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c84:	e955 230c 	ldrd	r2, r3, [r5, #-48]	; 0x30
 8002c88:	e945 230a 	strd	r2, r3, [r5, #-40]	; 0x28
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c8c:	e956 230e 	ldrd	r2, r3, [r6, #-56]	; 0x38
 8002c90:	e946 230c 	strd	r2, r3, [r6, #-48]	; 0x30
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c94:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 8002c98:	e945 230c 	strd	r2, r3, [r5, #-48]	; 0x30
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c9c:	e956 2310 	ldrd	r2, r3, [r6, #-64]	; 0x40
 8002ca0:	e946 230e 	strd	r2, r3, [r6, #-56]	; 0x38
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002ca4:	e955 2310 	ldrd	r2, r3, [r5, #-64]	; 0x40
 8002ca8:	e945 230e 	strd	r2, r3, [r5, #-56]	; 0x38
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cac:	e956 2312 	ldrd	r2, r3, [r6, #-72]	; 0x48
 8002cb0:	e946 2310 	strd	r2, r3, [r6, #-64]	; 0x40
 8002cb4:	e006      	b.n	8002cc4 <ICM20602_IMU_calibration2+0x6c4>
 8002cb6:	bf00      	nop
 8002cb8:	20000d54 	.word	0x20000d54
 8002cbc:	20000d58 	.word	0x20000d58
 8002cc0:	20000da4 	.word	0x20000da4
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002cc4:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 8002cc8:	e945 2310 	strd	r2, r3, [r5, #-64]	; 0x40
    	for(j = 0; j < 3; j++){
 8002ccc:	9b02      	ldr	r3, [sp, #8]
 8002cce:	aa1c      	add	r2, sp, #112	; 0x70
 8002cd0:	4293      	cmp	r3, r2
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cd2:	e946 8912 	strd	r8, r9, [r6, #-72]	; 0x48
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002cd6:	e945 0112 	strd	r0, r1, [r5, #-72]	; 0x48
    	for(j = 0; j < 3; j++){
 8002cda:	f47f ad48 	bne.w	800276e <ICM20602_IMU_calibration2+0x16e>
    	cal_len ++;
 8002cde:	ec55 4b1a 	vmov	r4, r5, d10
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <ICM20602_IMU_calibration2+0x7e8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	ee1a 0a10 	vmov	r0, s20
 8002cec:	f7fd faf6 	bl	80002dc <__adddf3>
    	if(cal_len>5000){break;}
 8002cf0:	a33b      	add	r3, pc, #236	; (adr r3, 8002de0 <ICM20602_IMU_calibration2+0x7e0>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    	cal_len ++;
 8002cf6:	4606      	mov	r6, r0
 8002cf8:	460f      	mov	r7, r1
    	if(cal_len>5000){break;}
 8002cfa:	ee1a 0a10 	vmov	r0, s20
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f7fd ff32 	bl	8000b68 <__aeabi_dcmpgt>
    	cal_len ++;
 8002d04:	4634      	mov	r4, r6
 8002d06:	463d      	mov	r5, r7
    	if(cal_len>5000){break;}
 8002d08:	b988      	cbnz	r0, 8002d2e <ICM20602_IMU_calibration2+0x72e>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002d0a:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8002d0e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
    	cal_len ++;
 8002d12:	ec47 6b1a 	vmov	d10, r6, r7
 8002d16:	e49e      	b.n	8002656 <ICM20602_IMU_calibration2+0x56>
		|| cal_len < 500.0
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <ICM20602_IMU_calibration2+0x7ec>)
 8002d1a:	ec51 0b1a 	vmov	r0, r1, d10
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f7fd ff04 	bl	8000b2c <__aeabi_dcmplt>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f47f ad03 	bne.w	8002730 <ICM20602_IMU_calibration2+0x130>
 8002d2a:	ec55 4b1a 	vmov	r4, r5, d10
    if(cal_len==500){NVIC_SystemReset();}
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <ICM20602_IMU_calibration2+0x7ec>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd feef 	bl	8000b18 <__aeabi_dcmpeq>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d143      	bne.n	8002dc6 <ICM20602_IMU_calibration2+0x7c6>
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	4929      	ldr	r1, [pc, #164]	; (8002de8 <ICM20602_IMU_calibration2+0x7e8>)
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d44:	4f2a      	ldr	r7, [pc, #168]	; (8002df0 <ICM20602_IMU_calibration2+0x7f0>)
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d46:	4e2b      	ldr	r6, [pc, #172]	; (8002df4 <ICM20602_IMU_calibration2+0x7f4>)
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd fda7 	bl	800089c <__aeabi_ddiv>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d4e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	f7fd fc77 	bl	8000648 <__aeabi_dmul>
 8002d5a:	f7fd ff6d 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d5e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d62:	6038      	str	r0, [r7, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d64:	4629      	mov	r1, r5
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7fd fc6e 	bl	8000648 <__aeabi_dmul>
 8002d6c:	f7fd ff64 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d70:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d74:	6030      	str	r0, [r6, #0]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d76:	4629      	mov	r1, r5
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fd fc65 	bl	8000648 <__aeabi_dmul>
 8002d7e:	f7fd ff5b 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d82:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d86:	6078      	str	r0, [r7, #4]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7fd fc5c 	bl	8000648 <__aeabi_dmul>
 8002d90:	f7fd ff52 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d94:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d98:	6070      	str	r0, [r6, #4]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7fd fc53 	bl	8000648 <__aeabi_dmul>
 8002da2:	f7fd ff49 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002da6:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002daa:	60b8      	str	r0, [r7, #8]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002dac:	4629      	mov	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7fd fc4a 	bl	8000648 <__aeabi_dmul>
 8002db4:	f7fd ff40 	bl	8000c38 <__aeabi_d2f>
 8002db8:	60b0      	str	r0, [r6, #8]
}
 8002dba:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002dbe:	ecbd 8b06 	vpop	{d8-d10}
 8002dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002dca:	490b      	ldr	r1, [pc, #44]	; (8002df8 <ICM20602_IMU_calibration2+0x7f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <ICM20602_IMU_calibration2+0x7fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002dce:	68ca      	ldr	r2, [r1, #12]
 8002dd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
 8002dd8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002ddc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002dde:	e7fd      	b.n	8002ddc <ICM20602_IMU_calibration2+0x7dc>
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40b38700 	.word	0x40b38700
 8002de8:	3ff00000 	.word	0x3ff00000
 8002dec:	407f4000 	.word	0x407f4000
 8002df0:	20000d94 	.word	0x20000d94
 8002df4:	20000de0 	.word	0x20000de0
 8002df8:	e000ed00 	.word	0xe000ed00
 8002dfc:	05fa0004 	.word	0x05fa0004

08002e00 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE * f)
#endif /* __GNUC__ */

void __io_putchar(uint8_t ch) { HAL_UART_Transmit(&hlpuart1, &ch, 1, 1); }
 8002e00:	b500      	push	{lr}
 8002e02:	2301      	movs	r3, #1
 8002e04:	b083      	sub	sp, #12
 8002e06:	4684      	mov	ip, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f10d 0107 	add.w	r1, sp, #7
 8002e0e:	4804      	ldr	r0, [pc, #16]	; (8002e20 <__io_putchar+0x20>)
 8002e10:	f88d c007 	strb.w	ip, [sp, #7]
 8002e14:	f006 f89c 	bl	8008f50 <HAL_UART_Transmit>
 8002e18:	b003      	add	sp, #12
 8002e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e1e:	bf00      	nop
 8002e20:	200014d8 	.word	0x200014d8

08002e24 <HAL_GetTick>:
void maintask_emargency();
void maintask_state_stop();
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2);
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void) { return uwTick; }
 8002e24:	4b01      	ldr	r3, [pc, #4]	; (8002e2c <HAL_GetTick+0x8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20001688 	.word	0x20001688

08002e30 <speed_control>:
}

float output_vel_surge, output_vel_sway;

void speed_control(/*float global_target_position[2],float global_robot_odom_position[2],float robot_theta*/)
{
 8002e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tar_pos[0] += tar_vel[0] / 500;
 8002e34:	4a6c      	ldr	r2, [pc, #432]	; (8002fe8 <speed_control+0x1b8>)
 8002e36:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <speed_control+0x1bc>)
 8002e38:	edd2 5a00 	vldr	s11, [r2]
  tar_pos[1] += tar_vel[1] / 500;
 8002e3c:	ed92 6a01 	vldr	s12, [r2, #4]
  tar_pos[0] += tar_vel[0] / 500;
 8002e40:	edd3 6a00 	vldr	s13, [r3]
  tar_pos[1] += tar_vel[1] / 500;
 8002e44:	ed93 7a01 	vldr	s14, [r3, #4]
  tar_pos[0] += tar_vel[0] / 500;
 8002e48:	eddf 7a69 	vldr	s15, [pc, #420]	; 8002ff0 <speed_control+0x1c0>

  // 絶対座標系
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 8002e4c:	4a69      	ldr	r2, [pc, #420]	; (8002ff4 <speed_control+0x1c4>)
  tar_pos[1] += tar_vel[1] / 500;
 8002e4e:	eea6 7a27 	vfma.f32	s14, s12, s15
  tar_pos[0] += tar_vel[0] / 500;
 8002e52:	eee5 6aa7 	vfma.f32	s13, s11, s15
{
 8002e56:	ed2d 8b04 	vpush	{d8-d9}
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 8002e5a:	edd2 7a00 	vldr	s15, [r2]
  floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 8002e5e:	ed92 9a01 	vldr	s18, [r2, #4]
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 8002e62:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <speed_control+0x1c8>)
  tar_pos[0] += tar_vel[0] / 500;
 8002e64:	edc3 6a00 	vstr	s13, [r3]
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 8002e68:	ee77 7ae6 	vsub.f32	s15, s15, s13
  floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 8002e6c:	ee39 9a47 	vsub.f32	s18, s18, s14
  tar_pos[1] += tar_vel[1] / 500;
 8002e70:	ed83 7a01 	vstr	s14, [r3, #4]
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 8002e74:	edc2 7a00 	vstr	s15, [r2]

  // ロボット座標系
  // X
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 8002e78:	ee17 0a90 	vmov	r0, s15
  floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 8002e7c:	ed82 9a01 	vstr	s18, [r2, #4]
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 8002e80:	f7fd fb8a 	bl	8000598 <__aeabi_f2d>
 8002e84:	4b5d      	ldr	r3, [pc, #372]	; (8002ffc <speed_control+0x1cc>)
 8002e86:	4604      	mov	r4, r0
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	460d      	mov	r5, r1
 8002e8c:	f7fd fb84 	bl	8000598 <__aeabi_f2d>
 8002e90:	ec41 0b10 	vmov	d0, r0, r1
 8002e94:	ec41 0b18 	vmov	d8, r0, r1
 8002e98:	f009 fa46 	bl	800c328 <cos>
 8002e9c:	ee19 0a10 	vmov	r0, s18
 8002ea0:	ec59 8b10 	vmov	r8, r9, d0
 8002ea4:	f7fd fb78 	bl	8000598 <__aeabi_f2d>
 8002ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8002eac:	eef0 0a68 	vmov.f32	s1, s17
 8002eb0:	4682      	mov	sl, r0
 8002eb2:	468b      	mov	fp, r1
 8002eb4:	f009 fa8c 	bl	800c3d0 <sin>
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	ec57 6b10 	vmov	r6, r7, d0
 8002ec4:	f7fd fbc0 	bl	8000648 <__aeabi_dmul>
 8002ec8:	4632      	mov	r2, r6
 8002eca:	ec41 0b18 	vmov	d8, r0, r1
 8002ece:	463b      	mov	r3, r7
 8002ed0:	4650      	mov	r0, sl
 8002ed2:	4659      	mov	r1, fp
 8002ed4:	f7fd fbb8 	bl	8000648 <__aeabi_dmul>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	ec51 0b18 	vmov	r0, r1, d8
 8002ee0:	f7fd f9fc 	bl	80002dc <__adddf3>
 8002ee4:	f7fd fea8 	bl	8000c38 <__aeabi_d2f>
  // Y
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 8002ee8:	4632      	mov	r2, r6
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 8002eea:	ee08 0a10 	vmov	s16, r0
 8002eee:	4e44      	ldr	r6, [pc, #272]	; (8003000 <speed_control+0x1d0>)
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 8002ef6:	ed86 8a00 	vstr	s16, [r6]
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 8002efa:	f7fd fba5 	bl	8000648 <__aeabi_dmul>
 8002efe:	4652      	mov	r2, sl
 8002f00:	465b      	mov	r3, fp
 8002f02:	4604      	mov	r4, r0
 8002f04:	460d      	mov	r5, r1
 8002f06:	4640      	mov	r0, r8
 8002f08:	4649      	mov	r1, r9
 8002f0a:	f7fd fb9d 	bl	8000648 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f7fd f9e1 	bl	80002dc <__adddf3>
 8002f1a:	f7fd fe8d 	bl	8000c38 <__aeabi_d2f>
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 8002f1e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003004 <speed_control+0x1d4>
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
  //+target_move_speed * 2;

  float limit_gain = 0;
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 8002f22:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8003008 <speed_control+0x1d8>
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <speed_control+0x1dc>)
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
 8002f28:	4a39      	ldr	r2, [pc, #228]	; (8003010 <speed_control+0x1e0>)
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 8002f2a:	6070      	str	r0, [r6, #4]
 8002f2c:	ee06 0a90 	vmov	s13, r0
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 8002f30:	ee28 7a27 	vmul.f32	s14, s16, s15
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 8002f34:	eeb4 8ac6 	vcmpe.f32	s16, s12
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
 8002f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 8002f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 8002f40:	ed83 7a00 	vstr	s14, [r3]
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
 8002f44:	edc2 7a00 	vstr	s15, [r2]
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 8002f48:	d51e      	bpl.n	8002f88 <speed_control+0x158>
    limit_gain = output_vel_surge / OMNI_OUTPUT_LIMIT;
    output_vel_surge = OMNI_OUTPUT_LIMIT;
 8002f4a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    output_vel_sway /= limit_gain;
 8002f4e:	ee27 6aa6 	vmul.f32	s12, s15, s13
    output_vel_surge = OMNI_OUTPUT_LIMIT;
 8002f52:	edc3 6a00 	vstr	s13, [r3]
    output_vel_sway /= limit_gain;
 8002f56:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002f5a:	eeb0 7a66 	vmov.f32	s14, s13
 8002f5e:	edc2 7a00 	vstr	s15, [r2]
    limit_gain = -output_vel_surge / OMNI_OUTPUT_LIMIT;
    output_vel_surge = -OMNI_OUTPUT_LIMIT;
    output_vel_sway /= limit_gain;
  }

  if (output_vel_sway > OMNI_OUTPUT_LIMIT) {
 8002f62:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002f66:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	dd27      	ble.n	8002fc0 <speed_control+0x190>
    limit_gain = output_vel_sway / OMNI_OUTPUT_LIMIT;
    output_vel_sway = OMNI_OUTPUT_LIMIT;
    output_vel_surge /= limit_gain;
 8002f70:	ee27 7a26 	vmul.f32	s14, s14, s13
    output_vel_sway = OMNI_OUTPUT_LIMIT;
 8002f74:	edc2 6a00 	vstr	s13, [r2]
    output_vel_surge /= limit_gain;
 8002f78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f7c:	edc3 6a00 	vstr	s13, [r3]
    output_vel_sway = -OMNI_OUTPUT_LIMIT;
    output_vel_surge /= limit_gain;
  }

  // output vel X/Y
}
 8002f80:	ecbd 8b04 	vpop	{d8-d9}
 8002f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output_vel_surge < -OMNI_OUTPUT_LIMIT) {
 8002f88:	eddf 6a22 	vldr	s13, [pc, #136]	; 8003014 <speed_control+0x1e4>
 8002f8c:	eeb4 8ae6 	vcmpe.f32	s16, s13
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	dde5      	ble.n	8002f62 <speed_control+0x132>
    output_vel_sway /= limit_gain;
 8002f96:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002f9a:	ee66 6ae7 	vnmul.f32	s13, s13, s15
    output_vel_surge = -OMNI_OUTPUT_LIMIT;
 8002f9e:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
    output_vel_sway /= limit_gain;
 8002fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
  if (output_vel_sway > OMNI_OUTPUT_LIMIT) {
 8002fa6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002faa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_vel_sway /= limit_gain;
 8002fb2:	eeb0 7a46 	vmov.f32	s14, s12
    output_vel_surge = -OMNI_OUTPUT_LIMIT;
 8002fb6:	ed83 6a00 	vstr	s12, [r3]
    output_vel_sway /= limit_gain;
 8002fba:	edc2 7a00 	vstr	s15, [r2]
  if (output_vel_sway > OMNI_OUTPUT_LIMIT) {
 8002fbe:	dcd7      	bgt.n	8002f70 <speed_control+0x140>
  } else if (output_vel_sway < -OMNI_OUTPUT_LIMIT) {
 8002fc0:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8002fc4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d5d8      	bpl.n	8002f80 <speed_control+0x150>
    output_vel_surge /= limit_gain;
 8002fce:	ee66 6ac7 	vnmul.f32	s13, s13, s14
}
 8002fd2:	ecbd 8b04 	vpop	{d8-d9}
    output_vel_surge /= limit_gain;
 8002fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    output_vel_sway = -OMNI_OUTPUT_LIMIT;
 8002fda:	ed82 6a00 	vstr	s12, [r2]
    output_vel_surge /= limit_gain;
 8002fde:	ed83 7a00 	vstr	s14, [r3]
}
 8002fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200011b0 	.word	0x200011b0
 8002fec:	200011a8 	.word	0x200011a8
 8002ff0:	3b03126f 	.word	0x3b03126f
 8002ff4:	20001120 	.word	0x20001120
 8002ff8:	200010c4 	.word	0x200010c4
 8002ffc:	200011f4 	.word	0x200011f4
 8003000:	20001158 	.word	0x20001158
 8003004:	c37a0000 	.word	0xc37a0000
 8003008:	bc83126f 	.word	0xbc83126f
 800300c:	20001128 	.word	0x20001128
 8003010:	2000112c 	.word	0x2000112c
 8003014:	3c83126f 	.word	0x3c83126f

08003018 <maintask_emargency>:
  tx_data_uart[8] = (uint8_t)power_voltage[4];
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
}

void maintask_emargency()
{
 8003018:	b500      	push	{lr}
  actuator_motor1(0.0, 0.0);
 800301a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80030b8 <maintask_emargency+0xa0>
{
 800301e:	b085      	sub	sp, #20
  actuator_motor1(0.0, 0.0);
 8003020:	eef0 0a40 	vmov.f32	s1, s0
 8003024:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003028:	f7fd ffd4 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 800302c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003030:	eef0 0a40 	vmov.f32	s1, s0
 8003034:	f7fd ffdc 	bl	8000ff0 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 8003038:	ed9d 0a01 	vldr	s0, [sp, #4]
 800303c:	eef0 0a40 	vmov.f32	s1, s0
 8003040:	f7fd ffe4 	bl	800100c <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 8003044:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003048:	eef0 0a40 	vmov.f32	s1, s0
 800304c:	f7fd ffec 	bl	8001028 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 8003050:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003054:	eef0 0a40 	vmov.f32	s1, s0
 8003058:	f7fd fff4 	bl	8001044 <actuator_motor5>

  tx_data_uart[0] = 0xFE;
  tx_data_uart[1] = 0xFC;
  tx_data_uart[2] = error_no[0];
 800305c:	4b17      	ldr	r3, [pc, #92]	; (80030bc <maintask_emargency+0xa4>)
  tx_data_uart[0] = 0xFE;
 800305e:	4918      	ldr	r1, [pc, #96]	; (80030c0 <maintask_emargency+0xa8>)
  tx_data_uart[2] = error_no[0];
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8c1 3002 	str.w	r3, [r1, #2]
  tx_data_uart[3] = error_no[1];
  tx_data_uart[4] = error_no[2];
  tx_data_uart[5] = error_no[3];
  tx_data_uart[6] = 252;
 8003066:	f647 23fc 	movw	r3, #31484	; 0x7afc
 800306a:	80cb      	strh	r3, [r1, #6]
  tx_data_uart[0] = 0xFE;
 800306c:	f64f 40fe 	movw	r0, #64766	; 0xfcfe
  tx_data_uart[7] = 122;
  tx_data_uart[8] = 200;
 8003070:	23c8      	movs	r3, #200	; 0xc8
 8003072:	720b      	strb	r3, [r1, #8]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 8003074:	2240      	movs	r2, #64	; 0x40
  tx_data_uart[0] = 0xFE;
 8003076:	8008      	strh	r0, [r1, #0]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 8003078:	4812      	ldr	r0, [pc, #72]	; (80030c4 <maintask_emargency+0xac>)
 800307a:	f005 fa01 	bl	8008480 <HAL_UART_Transmit_DMA>

  actuator_buzzer(150, 150);
 800307e:	2196      	movs	r1, #150	; 0x96
 8003080:	4608      	mov	r0, r1
 8003082:	f7fe f84d 	bl	8001120 <actuator_buzzer>

  uint8_t senddata_error[8];

  can1_send(0x000, senddata_error);
 8003086:	a902      	add	r1, sp, #8
 8003088:	2000      	movs	r0, #0
 800308a:	f7fe fa67 	bl	800155c <can1_send>
  can2_send(0x000, senddata_error);
 800308e:	a902      	add	r1, sp, #8
 8003090:	2000      	movs	r0, #0
 8003092:	f7fe fab3 	bl	80015fc <can2_send>

  actuator_kicker(1, 0);
 8003096:	2100      	movs	r1, #0
 8003098:	2001      	movs	r0, #1
 800309a:	f7fe f801 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(0.0);
 800309e:	ed9d 0a01 	vldr	s0, [sp, #4]
 80030a2:	f7fd ffdd 	bl	8001060 <actuator_kicker_voltage>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80030a6:	4808      	ldr	r0, [pc, #32]	; (80030c8 <maintask_emargency+0xb0>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ae:	f003 fb2f 	bl	8006710 <HAL_GPIO_WritePin>
}
 80030b2:	b005      	add	sp, #20
 80030b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b8:	00000000 	.word	0x00000000
 80030bc:	200010bc 	.word	0x200010bc
 80030c0:	200011d0 	.word	0x200011d0
 80030c4:	20001568 	.word	0x20001568
 80030c8:	48000400 	.word	0x48000400

080030cc <HAL_GPIO_EXTI_Callback>:
uint32_t HAL_GetTick(void) { return uwTick; }
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <HAL_GPIO_EXTI_Callback+0x74>)
 80030ce:	681b      	ldr	r3, [r3, #0]
  if (HAL_GetTick() > 2000) {
 80030d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80030d4:	d915      	bls.n	8003102 <HAL_GPIO_EXTI_Callback+0x36>
{
 80030d6:	b570      	push	{r4, r5, r6, lr}
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1) {
 80030d8:	4e1a      	ldr	r6, [pc, #104]	; (8003144 <HAL_GPIO_EXTI_Callback+0x78>)
 80030da:	2464      	movs	r4, #100	; 0x64
 80030dc:	e005      	b.n	80030ea <HAL_GPIO_EXTI_Callback+0x1e>
        delayUs(1);
 80030de:	f000 ffd7 	bl	8004090 <delayUs>
    while (cnt < 100) {
 80030e2:	1e63      	subs	r3, r4, #1
 80030e4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80030e8:	d00c      	beq.n	8003104 <HAL_GPIO_EXTI_Callback+0x38>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1) {
 80030ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ee:	4630      	mov	r0, r6
 80030f0:	f003 fb08 	bl	8006704 <HAL_GPIO_ReadPin>
 80030f4:	2801      	cmp	r0, #1
 80030f6:	4605      	mov	r5, r0
 80030f8:	d0f1      	beq.n	80030de <HAL_GPIO_EXTI_Callback+0x12>
      emergency_flag = 0;
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_GPIO_EXTI_Callback+0x7c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
}
 8003100:	bd70      	pop	{r4, r5, r6, pc}
 8003102:	4770      	bx	lr
      emergency_flag = 1;
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_GPIO_EXTI_Callback+0x7c>)
      printf("Emergency Stop !!!!!!!!!!!!!");
 8003106:	4811      	ldr	r0, [pc, #68]	; (800314c <HAL_GPIO_EXTI_Callback+0x80>)
      emergency_flag = 1;
 8003108:	701d      	strb	r5, [r3, #0]
      printf("Emergency Stop !!!!!!!!!!!!!");
 800310a:	2432      	movs	r4, #50	; 0x32
 800310c:	f006 fe8e 	bl	8009e2c <iprintf>
        maintask_emargency();
 8003110:	f7ff ff82 	bl	8003018 <maintask_emargency>
      for (int i = 0; i < 50; i++) {
 8003114:	3c01      	subs	r4, #1
 8003116:	d1fb      	bne.n	8003110 <HAL_GPIO_EXTI_Callback+0x44>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8003118:	480a      	ldr	r0, [pc, #40]	; (8003144 <HAL_GPIO_EXTI_Callback+0x78>)
 800311a:	4622      	mov	r2, r4
 800311c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003120:	f003 faf6 	bl	8006710 <HAL_GPIO_WritePin>
 8003124:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003128:	4909      	ldr	r1, [pc, #36]	; (8003150 <HAL_GPIO_EXTI_Callback+0x84>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_GPIO_EXTI_Callback+0x88>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800312c:	68ca      	ldr	r2, [r1, #12]
 800312e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003132:	4313      	orrs	r3, r2
 8003134:	60cb      	str	r3, [r1, #12]
 8003136:	f3bf 8f4f 	dsb	sy
    __NOP();
 800313a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800313c:	e7fd      	b.n	800313a <HAL_GPIO_EXTI_Callback+0x6e>
 800313e:	bf00      	nop
 8003140:	20001688 	.word	0x20001688
 8003144:	48000400 	.word	0x48000400
 8003148:	200010b8 	.word	0x200010b8
 800314c:	0800d4ac 	.word	0x0800d4ac
 8003150:	e000ed00 	.word	0xe000ed00
 8003154:	05fa0004 	.word	0x05fa0004

08003158 <maintask_state_stop>:

void maintask_state_stop()
{
 8003158:	b510      	push	{r4, lr}
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <maintask_state_stop+0x98>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;

  omni_move(0.0, 0.0, 0.0, 0.0);
 800315c:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80031f4 <maintask_state_stop+0x9c>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
{
 8003168:	b082      	sub	sp, #8
  omni_move(0.0, 0.0, 0.0, 0.0);
 800316a:	eef0 1a40 	vmov.f32	s3, s0
 800316e:	eeb0 1a40 	vmov.f32	s2, s0
 8003172:	eef0 0a40 	vmov.f32	s1, s0
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 8003176:	ee17 4a90 	vmov	r4, s15
  omni_move(0.0, 0.0, 0.0, 0.0);
 800317a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800317e:	f000 ffc7 	bl	8004110 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003182:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003186:	eef0 0a40 	vmov.f32	s1, s0
 800318a:	f7fd ff5b 	bl	8001044 <actuator_motor5>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 800318e:	f104 0168 	add.w	r1, r4, #104	; 0x68

  tx_data_uart[0] = 0xFE;
  tx_data_uart[1] = 0xFC;
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003192:	2300      	movs	r3, #0
 8003194:	f361 0307 	bfi	r3, r1, #0, #8
  tx_data_uart[3] = (uint8_t)yaw_angle_send_high;
  tx_data_uart[4] = error_no[0];
  tx_data_uart[5] = error_no[1];
  tx_data_uart[6] = 1;
  tx_data_uart[7] = 1;
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003198:	4917      	ldr	r1, [pc, #92]	; (80031f8 <maintask_state_stop+0xa0>)
  tx_data_uart[4] = error_no[0];
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <maintask_state_stop+0xa4>)
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800319c:	edd1 7a04 	vldr	s15, [r1, #16]
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80031a0:	7810      	ldrb	r0, [r2, #0]
 80031a2:	7852      	ldrb	r2, [r2, #1]
  tx_data_uart[0] = 0xFE;
 80031a4:	4916      	ldr	r1, [pc, #88]	; (8003200 <maintask_state_stop+0xa8>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 80031a6:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 80031aa:	1224      	asrs	r4, r4, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80031ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80031b0:	f364 230f 	bfi	r3, r4, #8, #8
 80031b4:	f360 4317 	bfi	r3, r0, #16, #8
 80031b8:	f362 631f 	bfi	r3, r2, #24, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80031bc:	ee17 0a90 	vmov	r0, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80031c0:	f8c1 3002 	str.w	r3, [r1, #2]
  tx_data_uart[6] = 1;
 80031c4:	f240 1201 	movw	r2, #257	; 0x101
  tx_data_uart[0] = 0xFE;
 80031c8:	f64f 43fe 	movw	r3, #64766	; 0xfcfe
 80031cc:	800b      	strh	r3, [r1, #0]
  tx_data_uart[6] = 1;
 80031ce:	80ca      	strh	r2, [r1, #6]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80031d0:	7208      	strb	r0, [r1, #8]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	480b      	ldr	r0, [pc, #44]	; (8003204 <maintask_state_stop+0xac>)
 80031d6:	f005 f953 	bl	8008480 <HAL_UART_Transmit_DMA>

  actuator_kicker(1, 0);
 80031da:	2100      	movs	r1, #0
 80031dc:	2001      	movs	r0, #1
 80031de:	f7fd ff5f 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(0.0);
 80031e2:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 80031e6:	b002      	add	sp, #8
 80031e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_kicker_voltage(0.0);
 80031ec:	f7fd bf38 	b.w	8001060 <actuator_kicker_voltage>
 80031f0:	200011f0 	.word	0x200011f0
 80031f4:	00000000 	.word	0x00000000
 80031f8:	20001134 	.word	0x20001134
 80031fc:	200010bc 	.word	0x200010bc
 8003200:	200011d0 	.word	0x200011d0
 8003204:	20001568 	.word	0x20001568

08003208 <maintask_run>:
{
 8003208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800320c:	ed2d 8b02 	vpush	{d8}
  yaw_angle_rad = yaw_angle * M_PI / 180;
 8003210:	f8df 8288 	ldr.w	r8, [pc, #648]	; 800349c <maintask_run+0x294>
  tar_vel[0] = ai_cmd.local_target_speed[0];
 8003214:	4c8c      	ldr	r4, [pc, #560]	; (8003448 <maintask_run+0x240>)
  yaw_angle_rad = yaw_angle * M_PI / 180;
 8003216:	f8d8 0000 	ldr.w	r0, [r8]
 800321a:	4d8c      	ldr	r5, [pc, #560]	; (800344c <maintask_run+0x244>)
  omega = (getAngleDiff(ai_cmd.target_theta, yaw_angle_rad) * 160.0) - (getAngleDiff(yaw_angle_rad, pre_yaw_angle_rad) * 4000.0);
 800321c:	f8df 9280 	ldr.w	r9, [pc, #640]	; 80034a0 <maintask_run+0x298>
{
 8003220:	b083      	sub	sp, #12
  yaw_angle_rad = yaw_angle * M_PI / 180;
 8003222:	f7fd f9b9 	bl	8000598 <__aeabi_f2d>
 8003226:	a380      	add	r3, pc, #512	; (adr r3, 8003428 <maintask_run+0x220>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f7fd fa0c 	bl	8000648 <__aeabi_dmul>
 8003230:	f7fd fd02 	bl	8000c38 <__aeabi_d2f>
  tar_vel[0] = ai_cmd.local_target_speed[0];
 8003234:	4b86      	ldr	r3, [pc, #536]	; (8003450 <maintask_run+0x248>)
 8003236:	6962      	ldr	r2, [r4, #20]
 8003238:	601a      	str	r2, [r3, #0]
  tar_vel[1] = ai_cmd.local_target_speed[1];
 800323a:	69a2      	ldr	r2, [r4, #24]
 800323c:	605a      	str	r2, [r3, #4]
  yaw_angle_rad = yaw_angle * M_PI / 180;
 800323e:	6028      	str	r0, [r5, #0]
  speed_control();
 8003240:	f7ff fdf6 	bl	8002e30 <speed_control>
  omega = (getAngleDiff(ai_cmd.target_theta, yaw_angle_rad) * 160.0) - (getAngleDiff(yaw_angle_rad, pre_yaw_angle_rad) * 4000.0);
 8003244:	edd5 0a00 	vldr	s1, [r5]
 8003248:	ed94 0a00 	vldr	s0, [r4]
 800324c:	f001 fc00 	bl	8004a50 <getAngleDiff>
 8003250:	edd9 0a00 	vldr	s1, [r9]
 8003254:	ee10 6a10 	vmov	r6, s0
 8003258:	ed95 0a00 	vldr	s0, [r5]
 800325c:	f001 fbf8 	bl	8004a50 <getAngleDiff>
 8003260:	4630      	mov	r0, r6
 8003262:	ee10 7a10 	vmov	r7, s0
 8003266:	f7fd f997 	bl	8000598 <__aeabi_f2d>
 800326a:	4b7a      	ldr	r3, [pc, #488]	; (8003454 <maintask_run+0x24c>)
 800326c:	2200      	movs	r2, #0
 800326e:	f7fd f9eb 	bl	8000648 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	4638      	mov	r0, r7
 8003276:	4616      	mov	r6, r2
 8003278:	460f      	mov	r7, r1
 800327a:	f7fd f98d 	bl	8000598 <__aeabi_f2d>
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <maintask_run+0x250>)
 8003280:	2200      	movs	r2, #0
 8003282:	f7fd f9e1 	bl	8000648 <__aeabi_dmul>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4630      	mov	r0, r6
 800328c:	4639      	mov	r1, r7
 800328e:	f7fd f823 	bl	80002d8 <__aeabi_dsub>
 8003292:	f7fd fcd1 	bl	8000c38 <__aeabi_d2f>
 8003296:	ee08 0a10 	vmov	s16, r0
  if (omega > 6 * M_PI) {
 800329a:	f7fd f97d 	bl	8000598 <__aeabi_f2d>
 800329e:	a364      	add	r3, pc, #400	; (adr r3, 8003430 <maintask_run+0x228>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	4606      	mov	r6, r0
 80032a6:	460f      	mov	r7, r1
 80032a8:	f7fd fc5e 	bl	8000b68 <__aeabi_dcmpgt>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d075      	beq.n	800339c <maintask_run+0x194>
    omega = 6 * M_PI;
 80032b0:	eddf 7a6a 	vldr	s15, [pc, #424]	; 800345c <maintask_run+0x254>
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <maintask_run+0x258>)
 80032b6:	eeb0 8a67 	vmov.f32	s16, s15
 80032ba:	edc3 7a00 	vstr	s15, [r3]
  pre_yaw_angle_rad = yaw_angle_rad;
 80032be:	682a      	ldr	r2, [r5, #0]
  if (!ether_connect && sw_mode == 0) {
 80032c0:	4b68      	ldr	r3, [pc, #416]	; (8003464 <maintask_run+0x25c>)
  pre_yaw_angle_rad = yaw_angle_rad;
 80032c2:	f8c9 2000 	str.w	r2, [r9]
  if (!ether_connect && sw_mode == 0) {
 80032c6:	4a68      	ldr	r2, [pc, #416]	; (8003468 <maintask_run+0x260>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	7812      	ldrb	r2, [r2, #0]
  pre_yaw_angle = yaw_angle;
 80032cc:	4967      	ldr	r1, [pc, #412]	; (800346c <maintask_run+0x264>)
 80032ce:	f8d8 0000 	ldr.w	r0, [r8]
 80032d2:	6008      	str	r0, [r1, #0]
  if (!ether_connect && sw_mode == 0) {
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f000 8098 	beq.w	800340a <maintask_run+0x202>
  omni_move(output_vel_surge, output_vel_sway, omega, 1.0);
 80032da:	4a65      	ldr	r2, [pc, #404]	; (8003470 <maintask_run+0x268>)
 80032dc:	4b65      	ldr	r3, [pc, #404]	; (8003474 <maintask_run+0x26c>)
 80032de:	edd2 0a00 	vldr	s1, [r2]
 80032e2:	ed93 0a00 	vldr	s0, [r3]
    if (ball_detection[0] == 1) {
 80032e6:	4d64      	ldr	r5, [pc, #400]	; (8003478 <maintask_run+0x270>)
  omni_move(output_vel_surge, output_vel_sway, omega, 1.0);
 80032e8:	eeb0 1a48 	vmov.f32	s2, s16
 80032ec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80032f0:	f000 ff0e 	bl	8004110 <omni_move>
  if (ai_cmd.kick_power > 0) {
 80032f4:	edd4 7a03 	vldr	s15, [r4, #12]
 80032f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	dd5d      	ble.n	80033be <maintask_run+0x1b6>
    if (ball_detection[0] == 1) {
 8003302:	782f      	ldrb	r7, [r5, #0]
      if (kick_state == 0) {
 8003304:	4e5d      	ldr	r6, [pc, #372]	; (800347c <maintask_run+0x274>)
    if (ball_detection[0] == 1) {
 8003306:	2f01      	cmp	r7, #1
 8003308:	d066      	beq.n	80033d8 <maintask_run+0x1d0>
    if (kick_state == 1) {
 800330a:	6833      	ldr	r3, [r6, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d058      	beq.n	80033c2 <maintask_run+0x1ba>
  if (ai_cmd.chip_en == 1) {
 8003310:	7c61      	ldrb	r1, [r4, #17]
 8003312:	2901      	cmp	r1, #1
    actuator_kicker(2, 0);
 8003314:	bf18      	it	ne
 8003316:	2100      	movne	r1, #0
 8003318:	2002      	movs	r0, #2
 800331a:	f7fd fec1 	bl	80010a0 <actuator_kicker>
  actuator_kicker(1, 1);
 800331e:	2101      	movs	r1, #1
 8003320:	4608      	mov	r0, r1
 8003322:	f7fd febd 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(250.0);
 8003326:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8003480 <maintask_run+0x278>
 800332a:	f7fd fe99 	bl	8001060 <actuator_kicker_voltage>
  actuator_motor5(ai_cmd.drible_power, 1.0);
 800332e:	ed94 0a02 	vldr	s0, [r4, #8]
 8003332:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003336:	f7fd fe85 	bl	8001044 <actuator_motor5>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 800333a:	edd8 7a00 	vldr	s15, [r8]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800333e:	4851      	ldr	r0, [pc, #324]	; (8003484 <maintask_run+0x27c>)
  tx_data_uart[0] = 0xFE;
 8003340:	4951      	ldr	r1, [pc, #324]	; (8003488 <maintask_run+0x280>)
  tx_data_uart[6] = ai_cmd.chip_en;
 8003342:	7c62      	ldrb	r2, [r4, #17]
 8003344:	718a      	strb	r2, [r1, #6]
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 8003346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800334a:	2400      	movs	r4, #0
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 800334c:	ee17 3a90 	vmov	r3, s15
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003350:	edd0 7a04 	vldr	s15, [r0, #16]
  tx_data_uart[7] = kick_state;
 8003354:	6832      	ldr	r2, [r6, #0]
 8003356:	71ca      	strb	r2, [r1, #7]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 800335c:	2240      	movs	r2, #64	; 0x40
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800335e:	ee17 0a90 	vmov	r0, s15
 8003362:	7208      	strb	r0, [r1, #8]
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 8003364:	f103 0068 	add.w	r0, r3, #104	; 0x68
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 8003368:	f503 73b4 	add.w	r3, r3, #360	; 0x168
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800336c:	f360 0407 	bfi	r4, r0, #0, #8
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 8003370:	121b      	asrs	r3, r3, #8
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003372:	7828      	ldrb	r0, [r5, #0]
 8003374:	f363 240f 	bfi	r4, r3, #8, #8
 8003378:	786b      	ldrb	r3, [r5, #1]
 800337a:	f360 4417 	bfi	r4, r0, #16, #8
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 800337e:	4843      	ldr	r0, [pc, #268]	; (800348c <maintask_run+0x284>)
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003380:	f363 641f 	bfi	r4, r3, #24, #8
  tx_data_uart[0] = 0xFE;
 8003384:	f64f 43fe 	movw	r3, #64766	; 0xfcfe
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003388:	f8c1 4002 	str.w	r4, [r1, #2]
  tx_data_uart[0] = 0xFE;
 800338c:	800b      	strh	r3, [r1, #0]
}
 800338e:	b003      	add	sp, #12
 8003390:	ecbd 8b02 	vpop	{d8}
 8003394:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 8003398:	f005 b872 	b.w	8008480 <HAL_UART_Transmit_DMA>
  if (omega < -6 * M_PI) {
 800339c:	a326      	add	r3, pc, #152	; (adr r3, 8003438 <maintask_run+0x230>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	4630      	mov	r0, r6
 80033a4:	4639      	mov	r1, r7
 80033a6:	f7fd fbc1 	bl	8000b2c <__aeabi_dcmplt>
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d037      	beq.n	800341e <maintask_run+0x216>
    omega = -6 * M_PI;
 80033ae:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003490 <maintask_run+0x288>
 80033b2:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <maintask_run+0x258>)
 80033b4:	eeb0 8a67 	vmov.f32	s16, s15
 80033b8:	edc3 7a00 	vstr	s15, [r3]
 80033bc:	e77f      	b.n	80032be <maintask_run+0xb6>
 80033be:	4e2f      	ldr	r6, [pc, #188]	; (800347c <maintask_run+0x274>)
 80033c0:	e7a6      	b.n	8003310 <maintask_run+0x108>
      kick_time++;
 80033c2:	4b34      	ldr	r3, [pc, #208]	; (8003494 <maintask_run+0x28c>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	3201      	adds	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
      if (kick_time > 100) {
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2a64      	cmp	r2, #100	; 0x64
 80033ce:	dd9f      	ble.n	8003310 <maintask_run+0x108>
        kick_state = 0;
 80033d0:	2200      	movs	r2, #0
 80033d2:	6032      	str	r2, [r6, #0]
        kick_time = 0;
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e79b      	b.n	8003310 <maintask_run+0x108>
      if (kick_state == 0) {
 80033d8:	6833      	ldr	r3, [r6, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d195      	bne.n	800330a <maintask_run+0x102>
        uint8_t kick_power_param = (float)ai_cmd.kick_power * 255.0;
 80033de:	ee17 0a90 	vmov	r0, s15
 80033e2:	f7fd f8d9 	bl	8000598 <__aeabi_f2d>
 80033e6:	a316      	add	r3, pc, #88	; (adr r3, 8003440 <maintask_run+0x238>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fd f92c 	bl	8000648 <__aeabi_dmul>
 80033f0:	f7fd fc02 	bl	8000bf8 <__aeabi_d2uiz>
 80033f4:	b2c1      	uxtb	r1, r0
        printf(" kick=%d\r\n", kick_power_param);
 80033f6:	4828      	ldr	r0, [pc, #160]	; (8003498 <maintask_run+0x290>)
 80033f8:	9101      	str	r1, [sp, #4]
 80033fa:	f006 fd17 	bl	8009e2c <iprintf>
        actuator_kicker(3, (uint8_t)kick_power_param);
 80033fe:	9901      	ldr	r1, [sp, #4]
 8003400:	2003      	movs	r0, #3
 8003402:	f7fd fe4d 	bl	80010a0 <actuator_kicker>
        kick_state = 1;
 8003406:	6037      	str	r7, [r6, #0]
 8003408:	e77f      	b.n	800330a <maintask_run+0x102>
    ai_cmd.local_target_speed[0] = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	6163      	str	r3, [r4, #20]
    ai_cmd.local_target_speed[1] = 0;
 800340e:	61a3      	str	r3, [r4, #24]
}
 8003410:	b003      	add	sp, #12
 8003412:	ecbd 8b02 	vpop	{d8}
 8003416:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    maintask_state_stop();
 800341a:	f7ff be9d 	b.w	8003158 <maintask_state_stop>
  omega = (getAngleDiff(ai_cmd.target_theta, yaw_angle_rad) * 160.0) - (getAngleDiff(yaw_angle_rad, pre_yaw_angle_rad) * 4000.0);
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <maintask_run+0x258>)
 8003420:	ed83 8a00 	vstr	s16, [r3]
 8003424:	e74b      	b.n	80032be <maintask_run+0xb6>
 8003426:	bf00      	nop
 8003428:	a2529d39 	.word	0xa2529d39
 800342c:	3f91df46 	.word	0x3f91df46
 8003430:	7f3321d2 	.word	0x7f3321d2
 8003434:	4032d97c 	.word	0x4032d97c
 8003438:	7f3321d2 	.word	0x7f3321d2
 800343c:	c032d97c 	.word	0xc032d97c
 8003440:	00000000 	.word	0x00000000
 8003444:	406fe000 	.word	0x406fe000
 8003448:	20001020 	.word	0x20001020
 800344c:	200011f4 	.word	0x200011f4
 8003450:	200011b0 	.word	0x200011b0
 8003454:	40640000 	.word	0x40640000
 8003458:	40af4000 	.word	0x40af4000
 800345c:	4196cbe4 	.word	0x4196cbe4
 8003460:	2000111c 	.word	0x2000111c
 8003464:	200010c0 	.word	0x200010c0
 8003468:	200011a4 	.word	0x200011a4
 800346c:	20001150 	.word	0x20001150
 8003470:	2000112c 	.word	0x2000112c
 8003474:	20001128 	.word	0x20001128
 8003478:	2000106c 	.word	0x2000106c
 800347c:	200010cc 	.word	0x200010cc
 8003480:	437a0000 	.word	0x437a0000
 8003484:	20001134 	.word	0x20001134
 8003488:	200011d0 	.word	0x200011d0
 800348c:	20001568 	.word	0x20001568
 8003490:	c196cbe4 	.word	0xc196cbe4
 8003494:	200010d0 	.word	0x200010d0
 8003498:	0800d4cc 	.word	0x0800d4cc
 800349c:	200011f0 	.word	0x200011f0
 80034a0:	20001154 	.word	0x20001154

080034a4 <maintask_stop>:

void maintask_stop()
{
 80034a4:	b510      	push	{r4, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 80034a6:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800355c <maintask_stop+0xb8>
{
 80034aa:	b082      	sub	sp, #8
  omni_move(0.0, 0.0, 0.0, 0.0);
 80034ac:	eef0 1a40 	vmov.f32	s3, s0
 80034b0:	eeb0 1a40 	vmov.f32	s2, s0
 80034b4:	eef0 0a40 	vmov.f32	s1, s0
 80034b8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80034bc:	f000 fe28 	bl	8004110 <omni_move>
  actuator_motor5(0.0, 0.0);
 80034c0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80034c4:	eef0 0a40 	vmov.f32	s1, s0
 80034c8:	f7fd fdbc 	bl	8001044 <actuator_motor5>

  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <maintask_stop+0xbc>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;

  omni_move(0.0, 0.0, 0.0, 0.0);
 80034ce:	ed9d 0a01 	vldr	s0, [sp, #4]
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  omni_move(0.0, 0.0, 0.0, 0.0);
 80034da:	eef0 1a40 	vmov.f32	s3, s0
 80034de:	eeb0 1a40 	vmov.f32	s2, s0
 80034e2:	eef0 0a40 	vmov.f32	s1, s0
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80034e6:	ee17 4a90 	vmov	r4, s15
  omni_move(0.0, 0.0, 0.0, 0.0);
 80034ea:	f000 fe11 	bl	8004110 <omni_move>
  actuator_motor5(0.0, 0.0);
 80034ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80034f2:	eef0 0a40 	vmov.f32	s1, s0
 80034f6:	f7fd fda5 	bl	8001044 <actuator_motor5>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80034fa:	f104 0168 	add.w	r1, r4, #104	; 0x68

  tx_data_uart[0] = 0xFE;
  tx_data_uart[1] = 0xFC;
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80034fe:	2300      	movs	r3, #0
 8003500:	f361 0307 	bfi	r3, r1, #0, #8
  tx_data_uart[3] = (uint8_t)yaw_angle_send_high;
  tx_data_uart[4] = error_no[0];
  tx_data_uart[5] = error_no[1];
  tx_data_uart[6] = 0;
  tx_data_uart[7] = 0;
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003504:	4917      	ldr	r1, [pc, #92]	; (8003564 <maintask_stop+0xc0>)
  tx_data_uart[4] = error_no[0];
 8003506:	4a18      	ldr	r2, [pc, #96]	; (8003568 <maintask_stop+0xc4>)
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003508:	edd1 7a04 	vldr	s15, [r1, #16]
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800350c:	f892 c000 	ldrb.w	ip, [r2]
 8003510:	7850      	ldrb	r0, [r2, #1]
  tx_data_uart[0] = 0xFE;
 8003512:	4916      	ldr	r1, [pc, #88]	; (800356c <maintask_stop+0xc8>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 8003514:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8003518:	1224      	asrs	r4, r4, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800351a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800351e:	f364 230f 	bfi	r3, r4, #8, #8
 8003522:	f36c 4317 	bfi	r3, ip, #16, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003526:	ee17 2a90 	vmov	r2, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800352a:	f360 631f 	bfi	r3, r0, #24, #8
  tx_data_uart[6] = 0;
 800352e:	2400      	movs	r4, #0
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003530:	f8c1 3002 	str.w	r3, [r1, #2]
  tx_data_uart[0] = 0xFE;
 8003534:	f64f 43fe 	movw	r3, #64766	; 0xfcfe
 8003538:	800b      	strh	r3, [r1, #0]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800353a:	720a      	strb	r2, [r1, #8]
  tx_data_uart[6] = 0;
 800353c:	80cc      	strh	r4, [r1, #6]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, 32);
 800353e:	2220      	movs	r2, #32
 8003540:	480b      	ldr	r0, [pc, #44]	; (8003570 <maintask_stop+0xcc>)
 8003542:	f004 ff9d 	bl	8008480 <HAL_UART_Transmit_DMA>

  actuator_kicker(1, 0);
 8003546:	4621      	mov	r1, r4
 8003548:	2001      	movs	r0, #1
 800354a:	f7fd fda9 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(0.0);
 800354e:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 8003552:	b002      	add	sp, #8
 8003554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_kicker_voltage(0.0);
 8003558:	f7fd bd82 	b.w	8001060 <actuator_kicker_voltage>
 800355c:	00000000 	.word	0x00000000
 8003560:	200011f0 	.word	0x200011f0
 8003564:	20001134 	.word	0x20001134
 8003568:	200010bc 	.word	0x200010bc
 800356c:	200011d0 	.word	0x200011d0
 8003570:	20001568 	.word	0x20001568
 8003574:	00000000 	.word	0x00000000

08003578 <HAL_TIM_PeriodElapsedCallback>:
{
 8003578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357c:	ed2d 8b02 	vpush	{d8}
  pre_sw_mode = sw_mode;
 8003580:	4dc3      	ldr	r5, [pc, #780]	; (8003890 <HAL_TIM_PeriodElapsedCallback+0x318>)
  ICM20602_read_IMU_data(0.002);
 8003582:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8003894 <HAL_TIM_PeriodElapsedCallback+0x31c>
  pre_sw_mode = sw_mode;
 8003586:	4ec4      	ldr	r6, [pc, #784]	; (8003898 <HAL_TIM_PeriodElapsedCallback+0x320>)
{
 8003588:	b088      	sub	sp, #32
  ICM20602_read_IMU_data(0.002);
 800358a:	f7fe fcdd 	bl	8001f48 <ICM20602_read_IMU_data>
  pre_sw_mode = sw_mode;
 800358e:	782b      	ldrb	r3, [r5, #0]
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003590:	48c2      	ldr	r0, [pc, #776]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x324>)
  pre_sw_mode = sw_mode;
 8003592:	7033      	strb	r3, [r6, #0]
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003594:	2120      	movs	r1, #32
 8003596:	f003 f8b5 	bl	8006704 <HAL_GPIO_ReadPin>
 800359a:	2140      	movs	r1, #64	; 0x40
 800359c:	4604      	mov	r4, r0
 800359e:	48bf      	ldr	r0, [pc, #764]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80035a0:	f003 f8b0 	bl	8006704 <HAL_GPIO_ReadPin>
 80035a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035a8:	4607      	mov	r7, r0
 80035aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ae:	f003 f8a9 	bl	8006704 <HAL_GPIO_ReadPin>
 80035b2:	f1c4 040f 	rsb	r4, r4, #15
 80035b6:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
 80035ba:	2104      	movs	r1, #4
 80035bc:	4607      	mov	r7, r0
 80035be:	48b8      	ldr	r0, [pc, #736]	; (80038a0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80035c0:	f003 f8a0 	bl	8006704 <HAL_GPIO_ReadPin>
 80035c4:	b2e4      	uxtb	r4, r4
 80035c6:	eba4 04c7 	sub.w	r4, r4, r7, lsl #3
  if (sw_mode != pre_sw_mode) {
 80035ca:	7833      	ldrb	r3, [r6, #0]
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 80035cc:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
 80035d0:	b2c0      	uxtb	r0, r0
  if (sw_mode != pre_sw_mode) {
 80035d2:	4283      	cmp	r3, r0
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 80035d4:	7028      	strb	r0, [r5, #0]
  if (sw_mode != pre_sw_mode) {
 80035d6:	d008      	beq.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x72>
    omni_odom[0] = tar_pos[1];
 80035d8:	4bb2      	ldr	r3, [pc, #712]	; (80038a4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80035da:	4ab3      	ldr	r2, [pc, #716]	; (80038a8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80035dc:	6859      	ldr	r1, [r3, #4]
    ai_cmd.local_target_speed[0] = 0;
 80035de:	4bb3      	ldr	r3, [pc, #716]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x334>)
    omni_odom[0] = tar_pos[1];
 80035e0:	6011      	str	r1, [r2, #0]
    omni_odom[1] = tar_pos[1];
 80035e2:	6051      	str	r1, [r2, #4]
    ai_cmd.local_target_speed[0] = 0;
 80035e4:	2200      	movs	r2, #0
 80035e6:	615a      	str	r2, [r3, #20]
    ai_cmd.local_target_speed[1] = 0;
 80035e8:	619a      	str	r2, [r3, #24]
  switch (sw_mode) {
 80035ea:	2806      	cmp	r0, #6
 80035ec:	f200 821c 	bhi.w	8003a28 <HAL_TIM_PeriodElapsedCallback+0x4b0>
 80035f0:	e8df f000 	tbb	[pc, r0]
 80035f4:	b98b0404 	.word	0xb98b0404
 80035f8:	d7a4      	.short	0xd7a4
 80035fa:	5c          	.byte	0x5c
 80035fb:	00          	.byte	0x00
      yaw_angle = yaw_angle - (getAngleDiff(yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;
 80035fc:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 80038d8 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003600:	eddf 7aab 	vldr	s15, [pc, #684]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x338>
 8003604:	ed98 8a00 	vldr	s16, [r8]
 8003608:	4ba8      	ldr	r3, [pc, #672]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x334>)
 800360a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800360e:	edd3 0a01 	vldr	s1, [r3, #4]
 8003612:	ee17 0a90 	vmov	r0, s15
 8003616:	edcd 0a04 	vstr	s1, [sp, #16]
 800361a:	f7fc ffbd 	bl	8000598 <__aeabi_f2d>
 800361e:	a398      	add	r3, pc, #608	; (adr r3, 8003880 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f7fd f810 	bl	8000648 <__aeabi_dmul>
 8003628:	f7fd fb06 	bl	8000c38 <__aeabi_d2f>
 800362c:	eddd 0a04 	vldr	s1, [sp, #16]
 8003630:	ee00 0a10 	vmov	s0, r0
 8003634:	f001 fa0c 	bl	8004a50 <getAngleDiff>
 8003638:	ee18 0a10 	vmov	r0, s16
 800363c:	ee10 4a10 	vmov	r4, s0
 8003640:	f7fc ffaa 	bl	8000598 <__aeabi_f2d>
 8003644:	4606      	mov	r6, r0
 8003646:	4620      	mov	r0, r4
 8003648:	460f      	mov	r7, r1
 800364a:	f7fc ffa5 	bl	8000598 <__aeabi_f2d>
 800364e:	a38e      	add	r3, pc, #568	; (adr r3, 8003888 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fc fff8 	bl	8000648 <__aeabi_dmul>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4630      	mov	r0, r6
 800365e:	4639      	mov	r1, r7
 8003660:	f7fc fe3a 	bl	80002d8 <__aeabi_dsub>
 8003664:	f7fd fae8 	bl	8000c38 <__aeabi_d2f>
 8003668:	f8c8 0000 	str.w	r0, [r8]
      maintask_run();
 800366c:	f7ff fdcc 	bl	8003208 <maintask_run>
  if(sw_mode>0){
 8003670:	782b      	ldrb	r3, [r5, #0]
 8003672:	b13b      	cbz	r3, 8003684 <HAL_TIM_PeriodElapsedCallback+0x10c>
  cnt_time_100Hz++;
 8003674:	4a8f      	ldr	r2, [pc, #572]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003676:	8813      	ldrh	r3, [r2, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	b29b      	uxth	r3, r3
  if (cnt_time_100Hz > 10) {
 800367c:	2b0a      	cmp	r3, #10
 800367e:	f200 80af 	bhi.w	80037e0 <HAL_TIM_PeriodElapsedCallback+0x268>
  cnt_time_100Hz++;
 8003682:	8013      	strh	r3, [r2, #0]
  connection_check_cnt++;
 8003684:	4a8c      	ldr	r2, [pc, #560]	; (80038b8 <HAL_TIM_PeriodElapsedCallback+0x340>)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003686:	488d      	ldr	r0, [pc, #564]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x344>)
  connection_check_cnt++;
 8003688:	6813      	ldr	r3, [r2, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	6013      	str	r3, [r2, #0]
  if (connection_check_cnt > 200) {
 800368e:	2bc8      	cmp	r3, #200	; 0xc8
    ether_connect = 1;
 8003690:	4b8b      	ldr	r3, [pc, #556]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x348>)
    ether_connect = 0;
 8003692:	bf8c      	ite	hi
 8003694:	2200      	movhi	r2, #0
    ether_connect = 1;
 8003696:	2201      	movls	r2, #1
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    ether_connect = 1;
 800369c:	701a      	strb	r2, [r3, #0]
}
 800369e:	b008      	add	sp, #32
 80036a0:	ecbd 8b02 	vpop	{d8}
 80036a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80036a8:	f003 b832 	b.w	8006710 <HAL_GPIO_WritePin>
      if (decode_SW(SWdata[0]) & 0b00010000) {
 80036ac:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036ae:	8818      	ldrh	r0, [r3, #0]
 80036b0:	f001 faa6 	bl	8004c00 <decode_SW>
 80036b4:	f010 0410 	ands.w	r4, r0, #16
 80036b8:	f040 811e 	bne.w	80038f8 <HAL_TIM_PeriodElapsedCallback+0x380>
        actuator_motor5(0.0, 0.0);
 80036bc:	eddf 0a82 	vldr	s1, [pc, #520]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x350>
 80036c0:	eeb0 0a60 	vmov.f32	s0, s1
 80036c4:	f7fd fcbe 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80036c8:	4622      	mov	r2, r4
 80036ca:	487c      	ldr	r0, [pc, #496]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x344>)
 80036cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036d0:	f003 f81e 	bl	8006710 <HAL_GPIO_WritePin>
        actuator_kicker(1, 1);
 80036d4:	2101      	movs	r1, #1
 80036d6:	4608      	mov	r0, r1
 80036d8:	f7fd fce2 	bl	80010a0 <actuator_kicker>
        actuator_kicker(2, 1);
 80036dc:	2101      	movs	r1, #1
 80036de:	2002      	movs	r0, #2
 80036e0:	f7fd fcde 	bl	80010a0 <actuator_kicker>
        actuator_kicker_voltage(0.0);
 80036e4:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x350>
 80036e8:	f7fd fcba 	bl	8001060 <actuator_kicker_voltage>
        kick_state = 0;
 80036ec:	4a77      	ldr	r2, [pc, #476]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x354>)
        kick_time = 0;
 80036ee:	4b78      	ldr	r3, [pc, #480]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x358>)
        kick_state = 0;
 80036f0:	6014      	str	r4, [r2, #0]
        kick_time = 0;
 80036f2:	601c      	str	r4, [r3, #0]
      omni_move(0.0, 0.0, 0.0, 0.0);
 80036f4:	eddf 1a74 	vldr	s3, [pc, #464]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x350>
 80036f8:	eeb0 1a61 	vmov.f32	s2, s3
 80036fc:	eef0 0a61 	vmov.f32	s1, s3
 8003700:	eeb0 0a61 	vmov.f32	s0, s3
 8003704:	f000 fd04 	bl	8004110 <omni_move>
      break;
 8003708:	e7b2      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0xf8>
      if (decode_SW(SWdata[0]) & 0b00010000) {
 800370a:	4b6e      	ldr	r3, [pc, #440]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800370c:	8818      	ldrh	r0, [r3, #0]
 800370e:	f001 fa77 	bl	8004c00 <decode_SW>
 8003712:	f010 0410 	ands.w	r4, r0, #16
 8003716:	f000 811d 	beq.w	8003954 <HAL_TIM_PeriodElapsedCallback+0x3dc>
        can1_send(0x310, senddata_calib);  // calibration
 800371a:	a906      	add	r1, sp, #24
 800371c:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003720:	f7fd ff1c 	bl	800155c <can1_send>
        can2_send(0x310, senddata_calib);  // calibration
 8003724:	a906      	add	r1, sp, #24
 8003726:	f44f 7044 	mov.w	r0, #784	; 0x310
 800372a:	f7fd ff67 	bl	80015fc <can2_send>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800372e:	4863      	ldr	r0, [pc, #396]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003730:	2201      	movs	r2, #1
 8003732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003736:	f002 ffeb 	bl	8006710 <HAL_GPIO_WritePin>
 800373a:	e799      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0xf8>
      if (decode_SW(SWdata[0]) & 0b00010000) {
 800373c:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800373e:	8818      	ldrh	r0, [r3, #0]
 8003740:	f001 fa5e 	bl	8004c00 <decode_SW>
 8003744:	f010 0410 	ands.w	r4, r0, #16
 8003748:	f000 80f7 	beq.w	800393a <HAL_TIM_PeriodElapsedCallback+0x3c2>
        actuator_motor5(0.5, 1.0);
 800374c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003750:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003754:	f7fd fc76 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003758:	4858      	ldr	r0, [pc, #352]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800375a:	2201      	movs	r2, #1
 800375c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003760:	f002 ffd6 	bl	8006710 <HAL_GPIO_WritePin>
 8003764:	e7c6      	b.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x17c>
      if (decode_SW(SWdata[0]) & 0b00000001) {
 8003766:	4c57      	ldr	r4, [pc, #348]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003768:	8820      	ldrh	r0, [r4, #0]
 800376a:	f001 fa49 	bl	8004c00 <decode_SW>
 800376e:	07c0      	lsls	r0, r0, #31
 8003770:	f140 8107 	bpl.w	8003982 <HAL_TIM_PeriodElapsedCallback+0x40a>
        omni_move(1.0, 0.0, 0.0, 1.0);  // fwd
 8003774:	ed9f 1a54 	vldr	s2, [pc, #336]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x350>
 8003778:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800377c:	eef0 0a41 	vmov.f32	s1, s2
 8003780:	eeb0 0a61 	vmov.f32	s0, s3
        omni_move(-1.0, 0.0, 0.0, 1.0);  // back
 8003784:	f000 fcc4 	bl	8004110 <omni_move>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003788:	484c      	ldr	r0, [pc, #304]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800378a:	2201      	movs	r2, #1
 800378c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003790:	f002 ffbe 	bl	8006710 <HAL_GPIO_WritePin>
      actuator_motor5(0.0, 0.0);
 8003794:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x350>
 8003798:	eeb0 0a60 	vmov.f32	s0, s1
 800379c:	f7fd fc52 	bl	8001044 <actuator_motor5>
      break;
 80037a0:	e766      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0xf8>
      if (decode_SW(SWdata[0]) & 0b00010000) {
 80037a2:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80037a4:	8818      	ldrh	r0, [r3, #0]
 80037a6:	f001 fa2b 	bl	8004c00 <decode_SW>
 80037aa:	f010 0410 	ands.w	r4, r0, #16
 80037ae:	f040 80a3 	bne.w	80038f8 <HAL_TIM_PeriodElapsedCallback+0x380>
        actuator_motor5(0.0, 0.0);
 80037b2:	eddf 0a45 	vldr	s1, [pc, #276]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x350>
 80037b6:	eeb0 0a60 	vmov.f32	s0, s1
 80037ba:	f7fd fc43 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80037be:	4622      	mov	r2, r4
 80037c0:	483e      	ldr	r0, [pc, #248]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x344>)
 80037c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037c6:	f002 ffa3 	bl	8006710 <HAL_GPIO_WritePin>
        actuator_kicker(1, 1);
 80037ca:	2101      	movs	r1, #1
 80037cc:	4608      	mov	r0, r1
 80037ce:	f7fd fc67 	bl	80010a0 <actuator_kicker>
        actuator_kicker(2, 0);
 80037d2:	4621      	mov	r1, r4
 80037d4:	2002      	movs	r0, #2
 80037d6:	f7fd fc63 	bl	80010a0 <actuator_kicker>
        actuator_kicker_voltage(250.0);
 80037da:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80038d4 <HAL_TIM_PeriodElapsedCallback+0x35c>
 80037de:	e783      	b.n	80036e8 <HAL_TIM_PeriodElapsedCallback+0x170>
	sprintf(Tx_printf_data,"yaw=%+6.1f ", yaw_angle);
 80037e0:	493d      	ldr	r1, [pc, #244]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80037e2:	4c3e      	ldr	r4, [pc, #248]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x364>)
 80037e4:	6808      	ldr	r0, [r1, #0]
	sprintf(Tx_printf_data + strlen(Tx_printf_data)," vel X %+4.1f Y %+4.1f tharW %+4.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta);
 80037e6:	4e31      	ldr	r6, [pc, #196]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x334>)
    cnt_time_100Hz = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	8013      	strh	r3, [r2, #0]
	sprintf(Tx_printf_data,"yaw=%+6.1f ", yaw_angle);
 80037ec:	f7fc fed4 	bl	8000598 <__aeabi_f2d>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4620      	mov	r0, r4
 80037f6:	493a      	ldr	r1, [pc, #232]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80037f8:	f006 fc3c 	bl	800a074 <siprintf>
	sprintf(Tx_printf_data + strlen(Tx_printf_data)," Batt=%3.1f ", power_voltage[0]);
 80037fc:	4620      	mov	r0, r4
 80037fe:	f7fc fd5f 	bl	80002c0 <strlen>
 8003802:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003804:	4605      	mov	r5, r0
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f7fc fec6 	bl	8000598 <__aeabi_f2d>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	1960      	adds	r0, r4, r5
 8003812:	4935      	ldr	r1, [pc, #212]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003814:	f006 fc2e 	bl	800a074 <siprintf>
	sprintf(Tx_printf_data + strlen(Tx_printf_data)," vel X %+4.1f Y %+4.1f tharW %+4.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta);
 8003818:	4620      	mov	r0, r4
 800381a:	f7fc fd51 	bl	80002c0 <strlen>
 800381e:	4605      	mov	r5, r0
 8003820:	6970      	ldr	r0, [r6, #20]
 8003822:	f7fc feb9 	bl	8000598 <__aeabi_f2d>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	6830      	ldr	r0, [r6, #0]
 800382c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003830:	f7fc feb2 	bl	8000598 <__aeabi_f2d>
 8003834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003838:	69b0      	ldr	r0, [r6, #24]
 800383a:	f7fc fead 	bl	8000598 <__aeabi_f2d>
 800383e:	4425      	add	r5, r4
 8003840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003844:	e9cd 0100 	strd	r0, r1, [sp]
 8003848:	4928      	ldr	r1, [pc, #160]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x374>)
 800384a:	4628      	mov	r0, r5
 800384c:	f006 fc12 	bl	800a074 <siprintf>
	sprintf(Tx_printf_data + strlen(Tx_printf_data),"\r\n");
 8003850:	4620      	mov	r0, r4
 8003852:	f7fc fd35 	bl	80002c0 <strlen>
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003858:	1825      	adds	r5, r4, r0
 800385a:	881a      	ldrh	r2, [r3, #0]
 800385c:	789b      	ldrb	r3, [r3, #2]
 800385e:	5222      	strh	r2, [r4, r0]
    HAL_UART_Transmit_DMA(&hlpuart1,(uint8_t *) Tx_printf_data, printf_LOG_BUF_SIZE);
 8003860:	4621      	mov	r1, r4
 8003862:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	sprintf(Tx_printf_data + strlen(Tx_printf_data),"\r\n");
 8003866:	70ab      	strb	r3, [r5, #2]
    HAL_UART_Transmit_DMA(&hlpuart1,(uint8_t *) Tx_printf_data, printf_LOG_BUF_SIZE);
 8003868:	4822      	ldr	r0, [pc, #136]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800386a:	f004 fe09 	bl	8008480 <HAL_UART_Transmit_DMA>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800386e:	480b      	ldr	r0, [pc, #44]	; (800389c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003870:	2180      	movs	r1, #128	; 0x80
 8003872:	f002 ff53 	bl	800671c <HAL_GPIO_TogglePin>
    actuator_power_ONOFF(1);
 8003876:	2001      	movs	r0, #1
 8003878:	f7fd fc22 	bl	80010c0 <actuator_power_ONOFF>
 800387c:	e702      	b.n	8003684 <HAL_TIM_PeriodElapsedCallback+0x10c>
 800387e:	bf00      	nop
 8003880:	16c16c17 	.word	0x16c16c17
 8003884:	3f76c16c 	.word	0x3f76c16c
 8003888:	48b81fe5 	.word	0x48b81fe5
 800388c:	3fad55df 	.word	0x3fad55df
 8003890:	200011a4 	.word	0x200011a4
 8003894:	3b03126f 	.word	0x3b03126f
 8003898:	2000114c 	.word	0x2000114c
 800389c:	48000400 	.word	0x48000400
 80038a0:	48000c00 	.word	0x48000c00
 80038a4:	200011a8 	.word	0x200011a8
 80038a8:	20001120 	.word	0x20001120
 80038ac:	20001020 	.word	0x20001020
 80038b0:	40490fdb 	.word	0x40490fdb
 80038b4:	20001070 	.word	0x20001070
 80038b8:	20001074 	.word	0x20001074
 80038bc:	48000800 	.word	0x48000800
 80038c0:	200010c0 	.word	0x200010c0
 80038c4:	20000e00 	.word	0x20000e00
 80038c8:	00000000 	.word	0x00000000
 80038cc:	200010cc 	.word	0x200010cc
 80038d0:	200010d0 	.word	0x200010d0
 80038d4:	437a0000 	.word	0x437a0000
 80038d8:	200011f0 	.word	0x200011f0
 80038dc:	20000e28 	.word	0x20000e28
 80038e0:	0800d4d8 	.word	0x0800d4d8
 80038e4:	20001134 	.word	0x20001134
 80038e8:	0800d4e4 	.word	0x0800d4e4
 80038ec:	0800d4f4 	.word	0x0800d4f4
 80038f0:	0800d4d4 	.word	0x0800d4d4
 80038f4:	200014d8 	.word	0x200014d8
        actuator_motor5(0.5, 1.0);
 80038f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80038fc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003900:	f7fd fba0 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003904:	484a      	ldr	r0, [pc, #296]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
          if (kick_state == 0) {
 8003906:	4c4b      	ldr	r4, [pc, #300]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003908:	2201      	movs	r2, #1
 800390a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800390e:	f002 feff 	bl	8006710 <HAL_GPIO_WritePin>
        if (ball_detection[0] == 1) {
 8003912:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8003914:	781e      	ldrb	r6, [r3, #0]
 8003916:	2e01      	cmp	r6, #1
 8003918:	d04f      	beq.n	80039ba <HAL_TIM_PeriodElapsedCallback+0x442>
        if (kick_state == 1) {
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f47f aee9 	bne.w	80036f4 <HAL_TIM_PeriodElapsedCallback+0x17c>
          kick_time++;
 8003922:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	3201      	adds	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
          if (kick_time > 100) {
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2a64      	cmp	r2, #100	; 0x64
 800392e:	f77f aee1 	ble.w	80036f4 <HAL_TIM_PeriodElapsedCallback+0x17c>
            kick_state = 0;
 8003932:	2200      	movs	r2, #0
 8003934:	6022      	str	r2, [r4, #0]
            kick_time = 0;
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e6dc      	b.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x17c>
        actuator_motor5(0.0, 0.0);
 800393a:	eddf 0a41 	vldr	s1, [pc, #260]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 800393e:	eeb0 0a60 	vmov.f32	s0, s1
 8003942:	f7fd fb7f 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003946:	483a      	ldr	r0, [pc, #232]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8003948:	4622      	mov	r2, r4
 800394a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800394e:	f002 fedf 	bl	8006710 <HAL_GPIO_WritePin>
 8003952:	e6cf      	b.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0x17c>
        omni_move(0.0, 0.0, 0.0, 0.0);
 8003954:	eddf 1a3a 	vldr	s3, [pc, #232]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8003958:	eef0 0a61 	vmov.f32	s1, s3
 800395c:	eeb0 0a61 	vmov.f32	s0, s3
 8003960:	eeb0 1a61 	vmov.f32	s2, s3
 8003964:	f000 fbd4 	bl	8004110 <omni_move>
        actuator_motor5(0.0, 0.0);
 8003968:	eddf 0a35 	vldr	s1, [pc, #212]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 800396c:	eeb0 0a60 	vmov.f32	s0, s1
 8003970:	f7fd fb68 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003974:	482e      	ldr	r0, [pc, #184]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8003976:	4622      	mov	r2, r4
 8003978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800397c:	f002 fec8 	bl	8006710 <HAL_GPIO_WritePin>
 8003980:	e676      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0xf8>
      } else if (decode_SW(SWdata[0]) & 0b00000010) {
 8003982:	8820      	ldrh	r0, [r4, #0]
 8003984:	f001 f93c 	bl	8004c00 <decode_SW>
 8003988:	0781      	lsls	r1, r0, #30
 800398a:	d40d      	bmi.n	80039a8 <HAL_TIM_PeriodElapsedCallback+0x430>
      } else if (decode_SW(SWdata[0]) & 0b00000100) {
 800398c:	8820      	ldrh	r0, [r4, #0]
 800398e:	f001 f937 	bl	8004c00 <decode_SW>
 8003992:	0742      	lsls	r2, r0, #29
 8003994:	d51a      	bpl.n	80039cc <HAL_TIM_PeriodElapsedCallback+0x454>
        omni_move(0.0, -1.0, 0.0, 1.0);  // left
 8003996:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 800399a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800399e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80039a2:	eeb0 0a41 	vmov.f32	s0, s2
 80039a6:	e6ed      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x20c>
        omni_move(-1.0, 0.0, 0.0, 1.0);  // back
 80039a8:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80039ac:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80039b0:	eef0 0a41 	vmov.f32	s1, s2
 80039b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80039b8:	e6e4      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x20c>
          if (kick_state == 0) {
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ac      	bne.n	800391a <HAL_TIM_PeriodElapsedCallback+0x3a2>
            actuator_kicker(3, 100);
 80039c0:	2164      	movs	r1, #100	; 0x64
 80039c2:	2003      	movs	r0, #3
 80039c4:	f7fd fb6c 	bl	80010a0 <actuator_kicker>
            kick_state = 1;
 80039c8:	6026      	str	r6, [r4, #0]
 80039ca:	e7a6      	b.n	800391a <HAL_TIM_PeriodElapsedCallback+0x3a2>
      } else if (decode_SW(SWdata[0]) & 0b00001000) {
 80039cc:	8820      	ldrh	r0, [r4, #0]
 80039ce:	f001 f917 	bl	8004c00 <decode_SW>
 80039d2:	0703      	lsls	r3, r0, #28
 80039d4:	d508      	bpl.n	80039e8 <HAL_TIM_PeriodElapsedCallback+0x470>
        omni_move(0.0, 1.0, 0.0, 1.0);  // right
 80039d6:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80039da:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80039de:	eef0 0a61 	vmov.f32	s1, s3
 80039e2:	eeb0 0a41 	vmov.f32	s0, s2
 80039e6:	e6cd      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x20c>
      } else if (decode_SW(SWdata[0]) & 0b00010000) {
 80039e8:	8820      	ldrh	r0, [r4, #0]
 80039ea:	f001 f909 	bl	8004c00 <decode_SW>
 80039ee:	f010 0410 	ands.w	r4, r0, #16
 80039f2:	d008      	beq.n	8003a06 <HAL_TIM_PeriodElapsedCallback+0x48e>
        omni_move(0.0, 0.0, 7.0, 1.0);  // spin
 80039f4:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80039f8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80039fc:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003a00:	eeb0 0a60 	vmov.f32	s0, s1
 8003a04:	e6be      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0x20c>
        omni_move(0.0, 0.0, 0.0, 0.0);
 8003a06:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8003a40 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8003a0a:	eeb0 1a61 	vmov.f32	s2, s3
 8003a0e:	eef0 0a61 	vmov.f32	s1, s3
 8003a12:	eeb0 0a61 	vmov.f32	s0, s3
 8003a16:	f000 fb7b 	bl	8004110 <omni_move>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003a1a:	4805      	ldr	r0, [pc, #20]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a22:	f002 fe75 	bl	8006710 <HAL_GPIO_WritePin>
 8003a26:	e6b5      	b.n	8003794 <HAL_TIM_PeriodElapsedCallback+0x21c>
      maintask_stop();
 8003a28:	f7ff fd3c 	bl	80034a4 <maintask_stop>
      break;
 8003a2c:	e620      	b.n	8003670 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8003a2e:	bf00      	nop
 8003a30:	48000800 	.word	0x48000800
 8003a34:	200010cc 	.word	0x200010cc
 8003a38:	2000106c 	.word	0x2000106c
 8003a3c:	200010d0 	.word	0x200010d0
	...

08003a48 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
  uint8_t start_byte_idx = 0;

  if (huart->Instance == huart2.Instance) {
 8003a48:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <HAL_UART_RxCpltCallback+0x180>)
 8003a4a:	6802      	ldr	r2, [r0, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d000      	beq.n	8003a54 <HAL_UART_RxCpltCallback+0xc>
 8003a52:	4770      	bx	lr
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
      }
      return;
      //受信なしデータクリア
    } else {
      for (int i = 0; i < RX_BUF_SIZE_ETHER - 1; i++) {
        data_from_ether[i] = rxbuf_from_ether[i + 1];
 8003a56:	4c5d      	ldr	r4, [pc, #372]	; (8003bcc <HAL_UART_RxCpltCallback+0x184>)
 8003a58:	4d5d      	ldr	r5, [pc, #372]	; (8003bd0 <HAL_UART_RxCpltCallback+0x188>)
{
 8003a5a:	ed2d 8b02 	vpush	{d8}
        data_from_ether[i] = rxbuf_from_ether[i + 1];
 8003a5e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003a62:	46ae      	mov	lr, r5
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	6861      	ldr	r1, [r4, #4]
 8003a68:	68a2      	ldr	r2, [r4, #8]
 8003a6a:	68e3      	ldr	r3, [r4, #12]
 8003a6c:	3410      	adds	r4, #16
 8003a6e:	46f4      	mov	ip, lr
 8003a70:	42b4      	cmp	r4, r6
 8003a72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a76:	f10e 0e10 	add.w	lr, lr, #16
 8003a7a:	d1f3      	bne.n	8003a64 <HAL_UART_RxCpltCallback+0x1c>
 8003a7c:	6861      	ldr	r1, [r4, #4]
 8003a7e:	68a2      	ldr	r2, [r4, #8]
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 8003a86:	89a2      	ldrh	r2, [r4, #12]
 8003a88:	7ba3      	ldrb	r3, [r4, #14]
 8003a8a:	f88e 3002 	strb.w	r3, [lr, #2]
 8003a8e:	f8ae 2000 	strh.w	r2, [lr]
    ai_cmd.local_target_speed[0] = ((float32_t)(data_from_ether[0] << 8 | data_from_ether[1]) - 32767.0) / 32767.0 * 7.0;
    ai_cmd.local_target_speed[1] = ((float32_t)(data_from_ether[2] << 8 | data_from_ether[3]) - 32767.0) / 32767.0 * 7.0;
    ai_cmd.global_vision_theta = ((float32_t)(data_from_ether[4] << 8 | data_from_ether[5]) - 32767) / 32767.0 * M_PI;
    ai_cmd.target_theta = ((float32_t)(data_from_ether[6] << 8 | data_from_ether[7]) - 32767) / 32767.0 * M_PI;
    */
    ai_cmd.local_target_speed[0] = two_to_float(&data_from_ether[0]) * 7.0;
 8003a92:	484f      	ldr	r0, [pc, #316]	; (8003bd0 <HAL_UART_RxCpltCallback+0x188>)
 8003a94:	4c4f      	ldr	r4, [pc, #316]	; (8003bd4 <HAL_UART_RxCpltCallback+0x18c>)
 8003a96:	f001 f8db 	bl	8004c50 <two_to_float>
 8003a9a:	eeb1 8a0c 	vmov.f32	s16, #28	; 0x40e00000  7.0
 8003a9e:	ee20 0a08 	vmul.f32	s0, s0, s16
    ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[2]) * 7.0;
 8003aa2:	484d      	ldr	r0, [pc, #308]	; (8003bd8 <HAL_UART_RxCpltCallback+0x190>)
    ai_cmd.local_target_speed[0] = two_to_float(&data_from_ether[0]) * 7.0;
 8003aa4:	ed84 0a05 	vstr	s0, [r4, #20]
    ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[2]) * 7.0;
 8003aa8:	f001 f8d2 	bl	8004c50 <two_to_float>
 8003aac:	ee20 0a08 	vmul.f32	s0, s0, s16
    ai_cmd.global_vision_theta = two_to_float(&data_from_ether[4]) * M_PI;
 8003ab0:	484a      	ldr	r0, [pc, #296]	; (8003bdc <HAL_UART_RxCpltCallback+0x194>)
    ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[2]) * 7.0;
 8003ab2:	ed84 0a06 	vstr	s0, [r4, #24]
    ai_cmd.global_vision_theta = two_to_float(&data_from_ether[4]) * M_PI;
 8003ab6:	f001 f8cb 	bl	8004c50 <two_to_float>
 8003aba:	ee10 0a10 	vmov	r0, s0
 8003abe:	f7fc fd6b 	bl	8000598 <__aeabi_f2d>
 8003ac2:	a33d      	add	r3, pc, #244	; (adr r3, 8003bb8 <HAL_UART_RxCpltCallback+0x170>)
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f7fc fdbe 	bl	8000648 <__aeabi_dmul>
 8003acc:	f7fd f8b4 	bl	8000c38 <__aeabi_d2f>
 8003ad0:	4603      	mov	r3, r0
    ai_cmd.target_theta = two_to_float(&data_from_ether[5]) * M_PI;
 8003ad2:	4843      	ldr	r0, [pc, #268]	; (8003be0 <HAL_UART_RxCpltCallback+0x198>)
    ai_cmd.global_vision_theta = two_to_float(&data_from_ether[4]) * M_PI;
 8003ad4:	6063      	str	r3, [r4, #4]
    ai_cmd.target_theta = two_to_float(&data_from_ether[5]) * M_PI;
 8003ad6:	f001 f8bb 	bl	8004c50 <two_to_float>
 8003ada:	ee10 0a10 	vmov	r0, s0
 8003ade:	f7fc fd5b 	bl	8000598 <__aeabi_f2d>
 8003ae2:	a335      	add	r3, pc, #212	; (adr r3, 8003bb8 <HAL_UART_RxCpltCallback+0x170>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f7fc fdae 	bl	8000648 <__aeabi_dmul>
 8003aec:	f7fd f8a4 	bl	8000c38 <__aeabi_d2f>

    if (data_from_ether[8] > 100) {
 8003af0:	7a2b      	ldrb	r3, [r5, #8]
    ai_cmd.target_theta = two_to_float(&data_from_ether[5]) * M_PI;
 8003af2:	6020      	str	r0, [r4, #0]
    if (data_from_ether[8] > 100) {
 8003af4:	2b64      	cmp	r3, #100	; 0x64
 8003af6:	d858      	bhi.n	8003baa <HAL_UART_RxCpltCallback+0x162>
      ai_cmd.chip_en = 1;
      data_from_ether[8] = data_from_ether[8] - 100;
    } else {
      ai_cmd.chip_en = 0;
 8003af8:	2200      	movs	r2, #0
    }
    ai_cmd.kick_power = (float32_t)data_from_ether[8] / 20.0;
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	7462      	strb	r2, [r4, #17]
 8003b04:	ee17 0a90 	vmov	r0, s15
 8003b08:	f7fc fd46 	bl	8000598 <__aeabi_f2d>
 8003b0c:	a32c      	add	r3, pc, #176	; (adr r3, 8003bc0 <HAL_UART_RxCpltCallback+0x178>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f7fc fd99 	bl	8000648 <__aeabi_dmul>
 8003b16:	f7fd f88f 	bl	8000c38 <__aeabi_d2f>
    ai_cmd.drible_power = (float32_t)data_from_ether[9] / 20.0;
 8003b1a:	7a6b      	ldrb	r3, [r5, #9]
    ai_cmd.kick_power = (float32_t)data_from_ether[8] / 20.0;
 8003b1c:	60e0      	str	r0, [r4, #12]
    ai_cmd.drible_power = (float32_t)data_from_ether[9] / 20.0;
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	ee17 0a90 	vmov	r0, s15
 8003b2a:	f7fc fd35 	bl	8000598 <__aeabi_f2d>
 8003b2e:	a324      	add	r3, pc, #144	; (adr r3, 8003bc0 <HAL_UART_RxCpltCallback+0x178>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f7fc fd88 	bl	8000648 <__aeabi_dmul>
 8003b38:	f7fd f87e 	bl	8000c38 <__aeabi_d2f>

    ai_cmd.keeper_en = data_from_ether[10];
 8003b3c:	7aab      	ldrb	r3, [r5, #10]
 8003b3e:	7423      	strb	r3, [r4, #16]
    ai_cmd.drible_power = (float32_t)data_from_ether[9] / 20.0;
 8003b40:	4602      	mov	r2, r0

    ai_cmd.global_global_target_position[0] = ((int)(data_from_ether[19] << 8 | data_from_ether[20]) - 32767);
    ai_cmd.global_global_target_position[1] = ((int)(data_from_ether[21] << 8 | data_from_ether[22]) - 32767);
    */

    ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[11]);
 8003b42:	4828      	ldr	r0, [pc, #160]	; (8003be4 <HAL_UART_RxCpltCallback+0x19c>)
    ai_cmd.drible_power = (float32_t)data_from_ether[9] / 20.0;
 8003b44:	60a2      	str	r2, [r4, #8]
    ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[11]);
 8003b46:	f001 f8a7 	bl	8004c98 <two_to_int>
 8003b4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[13]);
 8003b4e:	4826      	ldr	r0, [pc, #152]	; (8003be8 <HAL_UART_RxCpltCallback+0x1a0>)
    ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[11]);
 8003b50:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[13]);
 8003b54:	f001 f8a0 	bl	8004c98 <two_to_int>
 8003b58:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[15]);
 8003b5c:	4823      	ldr	r0, [pc, #140]	; (8003bec <HAL_UART_RxCpltCallback+0x1a4>)
    ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[13]);
 8003b5e:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[15]);
 8003b62:	f001 f899 	bl	8004c98 <two_to_int>
 8003b66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[18]);
 8003b6a:	4821      	ldr	r0, [pc, #132]	; (8003bf0 <HAL_UART_RxCpltCallback+0x1a8>)
    ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[15]);
 8003b6c:	ed84 0a07 	vstr	s0, [r4, #28]
    ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[18]);
 8003b70:	f001 f892 	bl	8004c98 <two_to_int>
 8003b74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_global_target_position[0] = two_to_int(&data_from_ether[19]);
 8003b78:	481e      	ldr	r0, [pc, #120]	; (8003bf4 <HAL_UART_RxCpltCallback+0x1ac>)
    ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[18]);
 8003b7a:	ed84 0a08 	vstr	s0, [r4, #32]
    ai_cmd.global_global_target_position[0] = two_to_int(&data_from_ether[19]);
 8003b7e:	f001 f88b 	bl	8004c98 <two_to_int>
 8003b82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_global_target_position[1] = two_to_int(&data_from_ether[21]);
 8003b86:	481c      	ldr	r0, [pc, #112]	; (8003bf8 <HAL_UART_RxCpltCallback+0x1b0>)
    ai_cmd.global_global_target_position[0] = two_to_int(&data_from_ether[19]);
 8003b88:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    ai_cmd.global_global_target_position[1] = two_to_int(&data_from_ether[21]);
 8003b8c:	f001 f884 	bl	8004c98 <two_to_int>

    ai_cmd.allow_local_feedback = data_from_ether[23];
 8003b90:	7de9      	ldrb	r1, [r5, #23]
 8003b92:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34

    connection_check_cnt = 0;
  }
}
 8003b96:	ecbd 8b02 	vpop	{d8}
    connection_check_cnt = 0;
 8003b9a:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <HAL_UART_RxCpltCallback+0x1b4>)
    ai_cmd.global_global_target_position[1] = two_to_int(&data_from_ether[21]);
 8003b9c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    connection_check_cnt = 0;
 8003ba0:	2200      	movs	r2, #0
    ai_cmd.global_global_target_position[1] = two_to_int(&data_from_ether[21]);
 8003ba2:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    connection_check_cnt = 0;
 8003ba6:	601a      	str	r2, [r3, #0]
}
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
      data_from_ether[8] = data_from_ether[8] - 100;
 8003baa:	3b64      	subs	r3, #100	; 0x64
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	722b      	strb	r3, [r5, #8]
      ai_cmd.chip_en = 1;
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	e7a2      	b.n	8003afa <HAL_UART_RxCpltCallback+0xb2>
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	54442d18 	.word	0x54442d18
 8003bbc:	400921fb 	.word	0x400921fb
 8003bc0:	9999999a 	.word	0x9999999a
 8003bc4:	3fa99999 	.word	0x3fa99999
 8003bc8:	20001568 	.word	0x20001568
 8003bcc:	20001165 	.word	0x20001165
 8003bd0:	20001078 	.word	0x20001078
 8003bd4:	20001020 	.word	0x20001020
 8003bd8:	2000107a 	.word	0x2000107a
 8003bdc:	2000107c 	.word	0x2000107c
 8003be0:	2000107d 	.word	0x2000107d
 8003be4:	20001083 	.word	0x20001083
 8003be8:	20001085 	.word	0x20001085
 8003bec:	20001087 	.word	0x20001087
 8003bf0:	2000108a 	.word	0x2000108a
 8003bf4:	2000108b 	.word	0x2000108b
 8003bf8:	2000108d 	.word	0x2000108d
 8003bfc:	20001074 	.word	0x20001074

08003c00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart)
{
  if (huart->Instance == hlpuart1.Instance) {
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_UART_TxCpltCallback+0x10>)
 8003c02:	6802      	ldr	r2, [r0, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d000      	beq.n	8003c0c <HAL_UART_TxCpltCallback+0xc>
    dma_printf_send_it(huart);
  }
}
 8003c0a:	4770      	bx	lr
    dma_printf_send_it(huart);
 8003c0c:	f7fd bd80 	b.w	8001710 <dma_printf_send_it>
 8003c10:	200014d8 	.word	0x200014d8

08003c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1) {
    maintask_emargency();
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003c16:	4c07      	ldr	r4, [pc, #28]	; (8003c34 <Error_Handler+0x20>)
    maintask_emargency();
 8003c18:	f7ff f9fe 	bl	8003018 <maintask_emargency>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c24:	f002 fd74 	bl	8006710 <HAL_GPIO_WritePin>
    actuator_buzzer(200, 200);
 8003c28:	21c8      	movs	r1, #200	; 0xc8
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	f7fd fa78 	bl	8001120 <actuator_buzzer>
  while (1) {
 8003c30:	e7f2      	b.n	8003c18 <Error_Handler+0x4>
 8003c32:	bf00      	nop
 8003c34:	48000400 	.word	0x48000400

08003c38 <SystemClock_Config>:
{
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c3c:	2238      	movs	r2, #56	; 0x38
 8003c3e:	2100      	movs	r1, #0
 8003c40:	a806      	add	r0, sp, #24
 8003c42:	f006 fb0f 	bl	800a264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c46:	2000      	movs	r0, #0
 8003c48:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8003c4c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003c50:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003c52:	f002 fd79 	bl	8006748 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c56:	2001      	movs	r0, #1
 8003c58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c5c:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c62:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003c64:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c66:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c68:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003c6c:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c70:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c74:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c76:	f002 fde5 	bl	8006844 <HAL_RCC_OscConfig>
 8003c7a:	b970      	cbnz	r0, 8003c9a <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c80:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c82:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c86:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c8a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c8e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c90:	f003 f85c 	bl	8006d4c <HAL_RCC_ClockConfig>
 8003c94:	b908      	cbnz	r0, 8003c9a <SystemClock_Config+0x62>
}
 8003c96:	b014      	add	sp, #80	; 0x50
 8003c98:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003c9a:	f7ff ffbb 	bl	8003c14 <Error_Handler>
 8003c9e:	bf00      	nop

08003ca0 <main>:
{
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	ed2d 8b02 	vpush	{d8}
  HAL_Init();
 8003ca6:	f001 f85b 	bl	8004d60 <HAL_Init>
  SystemClock_Config();
 8003caa:	f7ff ffc5 	bl	8003c38 <SystemClock_Config>
  MX_GPIO_Init();
 8003cae:	f7fd fe9d 	bl	80019ec <MX_GPIO_Init>
  MX_DMA_Init();
 8003cb2:	f7fd fcc3 	bl	800163c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003cb6:	f7fd fd8f 	bl	80017d8 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8003cba:	f000 fc91 	bl	80045e0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8003cbe:	f000 fcdd 	bl	800467c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003cc2:	f000 fd23 	bl	800470c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003cc6:	f000 fa87 	bl	80041d8 <MX_SPI1_Init>
  MX_TIM5_Init();
 8003cca:	f000 fbb9 	bl	8004440 <MX_TIM5_Init>
  MX_TIM7_Init();
 8003cce:	f000 fc25 	bl	800451c <MX_TIM7_Init>
  MX_ADC5_Init();
 8003cd2:	f7fd fae5 	bl	80012a0 <MX_ADC5_Init>
  MX_ADC3_Init();
 8003cd6:	f7fd fa8b 	bl	80011f0 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8003cda:	f7fd fda3 	bl	8001824 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8003cde:	f7fd fa31 	bl	8001144 <MX_ADC1_Init>
  kick_state = 0;
 8003ce2:	4b70      	ldr	r3, [pc, #448]	; (8003ea4 <main+0x204>)
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003ce4:	4870      	ldr	r0, [pc, #448]	; (8003ea8 <main+0x208>)
  setbuf(stdin, NULL);
 8003ce6:	4d71      	ldr	r5, [pc, #452]	; (8003eac <main+0x20c>)
  kick_state = 0;
 8003ce8:	2400      	movs	r4, #0
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003cea:	2104      	movs	r1, #4
  kick_state = 0;
 8003cec:	601c      	str	r4, [r3, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003cee:	f004 f84d 	bl	8007d8c <HAL_TIM_PWM_Start>
    actuator_buzzer(20, 20);
 8003cf2:	2114      	movs	r1, #20
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	f7fd fa13 	bl	8001120 <actuator_buzzer>
 8003cfa:	2114      	movs	r1, #20
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	f7fd fa0f 	bl	8001120 <actuator_buzzer>
 8003d02:	2114      	movs	r1, #20
 8003d04:	4608      	mov	r0, r1
 8003d06:	f7fd fa0b 	bl	8001120 <actuator_buzzer>
  HAL_UART_Init(&hlpuart1);
 8003d0a:	4869      	ldr	r0, [pc, #420]	; (8003eb0 <main+0x210>)
 8003d0c:	f005 f9e6 	bl	80090dc <HAL_UART_Init>
  setbuf(stdin, NULL);
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	4621      	mov	r1, r4
 8003d14:	6858      	ldr	r0, [r3, #4]
 8003d16:	f006 f8f7 	bl	8009f08 <setbuf>
  setbuf(stdout, NULL);
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	6898      	ldr	r0, [r3, #8]
 8003d20:	f006 f8f2 	bl	8009f08 <setbuf>
  setbuf(stderr, NULL);
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	4621      	mov	r1, r4
 8003d28:	68d8      	ldr	r0, [r3, #12]
 8003d2a:	f006 f8ed 	bl	8009f08 <setbuf>
  dma_printf_init(&hlpuart1);
 8003d2e:	4860      	ldr	r0, [pc, #384]	; (8003eb0 <main+0x210>)
 8003d30:	f7fd fcde 	bl	80016f0 <dma_printf_init>
  dma_scanf_init(&hlpuart1);
 8003d34:	485e      	ldr	r0, [pc, #376]	; (8003eb0 <main+0x210>)
 8003d36:	f7fd fd3b 	bl	80017b0 <dma_scanf_init>
  printf("start\r\n");
 8003d3a:	485e      	ldr	r0, [pc, #376]	; (8003eb4 <main+0x214>)
 8003d3c:	f006 f8dc 	bl	8009ef8 <puts>
  can1_init_ibis(&hfdcan1);
 8003d40:	485d      	ldr	r0, [pc, #372]	; (8003eb8 <main+0x218>)
 8003d42:	f7fd fbdd 	bl	8001500 <can1_init_ibis>
  can2_init_ibis(&hfdcan2);
 8003d46:	485d      	ldr	r0, [pc, #372]	; (8003ebc <main+0x21c>)
 8003d48:	f7fd fc2a 	bl	80015a0 <can2_init_ibis>
  HAL_FDCAN_Start(&hfdcan1);
 8003d4c:	485a      	ldr	r0, [pc, #360]	; (8003eb8 <main+0x218>)
 8003d4e:	f002 f98b 	bl	8006068 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8003d52:	4859      	ldr	r0, [pc, #356]	; (8003eb8 <main+0x218>)
 8003d54:	4622      	mov	r2, r4
 8003d56:	2101      	movs	r1, #1
 8003d58:	f002 fa8e 	bl	8006278 <HAL_FDCAN_ActivateNotification>
 8003d5c:	b950      	cbnz	r0, 8003d74 <main+0xd4>
  HAL_FDCAN_Start(&hfdcan2);
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4856      	ldr	r0, [pc, #344]	; (8003ebc <main+0x21c>)
 8003d62:	f002 f981 	bl	8006068 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8003d66:	4622      	mov	r2, r4
 8003d68:	4854      	ldr	r0, [pc, #336]	; (8003ebc <main+0x21c>)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	f002 fa84 	bl	8006278 <HAL_FDCAN_ActivateNotification>
 8003d70:	4604      	mov	r4, r0
 8003d72:	b108      	cbz	r0, 8003d78 <main+0xd8>
    Error_Handler();
 8003d74:	f7ff ff4e 	bl	8003c14 <Error_Handler>
  HAL_UART_Init(&huart2);
 8003d78:	4851      	ldr	r0, [pc, #324]	; (8003ec0 <main+0x220>)
  actuator_motor1(0.0, 0.0);
 8003d7a:	ed9f 8a52 	vldr	s16, [pc, #328]	; 8003ec4 <main+0x224>
  HAL_UART_Init(&huart2);
 8003d7e:	f005 f9ad 	bl	80090dc <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxbuf_from_ether, RX_BUF_SIZE_ETHER);
 8003d82:	4951      	ldr	r1, [pc, #324]	; (8003ec8 <main+0x228>)
 8003d84:	484e      	ldr	r0, [pc, #312]	; (8003ec0 <main+0x220>)
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	f005 fa68 	bl	800925c <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense, 1);
 8003d8c:	494f      	ldr	r1, [pc, #316]	; (8003ecc <main+0x22c>)
 8003d8e:	4850      	ldr	r0, [pc, #320]	; (8003ed0 <main+0x230>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	f001 fc51 	bl	8005638 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense, 1);
 8003d96:	494f      	ldr	r1, [pc, #316]	; (8003ed4 <main+0x234>)
 8003d98:	484f      	ldr	r0, [pc, #316]	; (8003ed8 <main+0x238>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f001 fc4c 	bl	8005638 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata, 1);
 8003da0:	2201      	movs	r2, #1
 8003da2:	494e      	ldr	r1, [pc, #312]	; (8003edc <main+0x23c>)
 8003da4:	484e      	ldr	r0, [pc, #312]	; (8003ee0 <main+0x240>)
 8003da6:	f001 fc47 	bl	8005638 <HAL_ADC_Start_DMA>
  actuator_power_ONOFF(0);
 8003daa:	4620      	mov	r0, r4
 8003dac:	f7fd f988 	bl	80010c0 <actuator_power_ONOFF>
  HAL_Delay(20);
 8003db0:	2014      	movs	r0, #20
 8003db2:	f000 fff1 	bl	8004d98 <HAL_Delay>
  actuator_motor1(0.0, 0.0);
 8003db6:	eef0 0a48 	vmov.f32	s1, s16
 8003dba:	eeb0 0a48 	vmov.f32	s0, s16
 8003dbe:	f7fd f909 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 8003dc2:	eef0 0a48 	vmov.f32	s1, s16
 8003dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8003dca:	f7fd f911 	bl	8000ff0 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 8003dce:	eef0 0a48 	vmov.f32	s1, s16
 8003dd2:	eeb0 0a48 	vmov.f32	s0, s16
 8003dd6:	f7fd f919 	bl	800100c <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 8003dda:	eef0 0a48 	vmov.f32	s1, s16
 8003dde:	eeb0 0a48 	vmov.f32	s0, s16
 8003de2:	f7fd f921 	bl	8001028 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 8003de6:	eef0 0a48 	vmov.f32	s1, s16
 8003dea:	eeb0 0a48 	vmov.f32	s0, s16
 8003dee:	f7fd f929 	bl	8001044 <actuator_motor5>
  actuator_kicker(1, 1);
 8003df2:	2101      	movs	r1, #1
 8003df4:	4608      	mov	r0, r1
 8003df6:	f7fd f953 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(250.0);
 8003dfa:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8003ee4 <main+0x244>
 8003dfe:	f7fd f92f 	bl	8001060 <actuator_kicker_voltage>
  actuator_power_param(1, 15.0);  // min voltage
 8003e02:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003e06:	2001      	movs	r0, #1
 8003e08:	f7fd f96a 	bl	80010e0 <actuator_power_param>
  actuator_power_param(2, 35.0);  // max voltage
 8003e0c:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8003ee8 <main+0x248>
 8003e10:	2002      	movs	r0, #2
 8003e12:	f7fd f965 	bl	80010e0 <actuator_power_param>
  actuator_power_param(3, 50.0);  // max current
 8003e16:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003eec <main+0x24c>
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	f7fd f960 	bl	80010e0 <actuator_power_param>
  actuator_power_param(4, 90.0);  // max temp(fet)
 8003e20:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8003ef0 <main+0x250>
 8003e24:	2004      	movs	r0, #4
 8003e26:	f7fd f95b 	bl	80010e0 <actuator_power_param>
  actuator_power_param(5, 90.0);  // max temp(solenoid)
 8003e2a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003ef0 <main+0x250>
 8003e2e:	2005      	movs	r0, #5
 8003e30:	f7fd f956 	bl	80010e0 <actuator_power_param>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003e34:	482f      	ldr	r0, [pc, #188]	; (8003ef4 <main+0x254>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e3c:	f002 fc68 	bl	8006710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003e40:	2201      	movs	r2, #1
 8003e42:	4611      	mov	r1, r2
 8003e44:	482b      	ldr	r0, [pc, #172]	; (8003ef4 <main+0x254>)
 8003e46:	f002 fc63 	bl	8006710 <HAL_GPIO_WritePin>
  ICM20602_init();
 8003e4a:	f7fd fe7d 	bl	8001b48 <ICM20602_init>
  ICM20602_IMU_calibration2();
 8003e4e:	f7fe fbd7 	bl	8002600 <ICM20602_IMU_calibration2>
  ICM20602_clearAngle();
 8003e52:	f7fd ff6f 	bl	8001d34 <ICM20602_clearAngle>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003e56:	4622      	mov	r2, r4
 8003e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e5c:	4825      	ldr	r0, [pc, #148]	; (8003ef4 <main+0x254>)
 8003e5e:	f002 fc57 	bl	8006710 <HAL_GPIO_WritePin>
  actuator_power_ONOFF(1);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7fd f92c 	bl	80010c0 <actuator_power_ONOFF>
    actuator_buzzer(40, 40);
 8003e68:	2128      	movs	r1, #40	; 0x28
 8003e6a:	4608      	mov	r0, r1
 8003e6c:	f7fd f958 	bl	8001120 <actuator_buzzer>
 8003e70:	2128      	movs	r1, #40	; 0x28
 8003e72:	4608      	mov	r0, r1
 8003e74:	f7fd f954 	bl	8001120 <actuator_buzzer>
 8003e78:	2128      	movs	r1, #40	; 0x28
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	f7fd f950 	bl	8001120 <actuator_buzzer>
  HAL_Delay(100);
 8003e80:	2064      	movs	r0, #100	; 0x64
 8003e82:	f000 ff89 	bl	8004d98 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 8003e86:	481c      	ldr	r0, [pc, #112]	; (8003ef8 <main+0x258>)
 8003e88:	f003 fea4 	bl	8007bd4 <HAL_TIM_Base_Start_IT>
  mouse_odom[0] = 0;
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <main+0x25c>)
  omni_odom[0] = 0;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <main+0x260>)
  mouse_odom[0] = 0;
 8003e90:	ed82 8a00 	vstr	s16, [r2]
  mouse_odom[1] = 0;
 8003e94:	ed82 8a01 	vstr	s16, [r2, #4]
  omni_odom[0] = 0;
 8003e98:	ed83 8a00 	vstr	s16, [r3]
  omni_odom[1] = 0;
 8003e9c:	ed83 8a01 	vstr	s16, [r3, #4]
  while (1) {
 8003ea0:	e7fe      	b.n	8003ea0 <main+0x200>
 8003ea2:	bf00      	nop
 8003ea4:	200010cc 	.word	0x200010cc
 8003ea8:	2000125c 	.word	0x2000125c
 8003eac:	20000068 	.word	0x20000068
 8003eb0:	200014d8 	.word	0x200014d8
 8003eb4:	0800d51c 	.word	0x0800d51c
 8003eb8:	20000c88 	.word	0x20000c88
 8003ebc:	20000cec 	.word	0x20000cec
 8003ec0:	20001568 	.word	0x20001568
 8003ec4:	00000000 	.word	0x00000000
 8003ec8:	20001164 	.word	0x20001164
 8003ecc:	2000101c 	.word	0x2000101c
 8003ed0:	200001f8 	.word	0x200001f8
 8003ed4:	20000dfc 	.word	0x20000dfc
 8003ed8:	20000264 	.word	0x20000264
 8003edc:	20000e00 	.word	0x20000e00
 8003ee0:	200002d0 	.word	0x200002d0
 8003ee4:	437a0000 	.word	0x437a0000
 8003ee8:	420c0000 	.word	0x420c0000
 8003eec:	42480000 	.word	0x42480000
 8003ef0:	42b40000 	.word	0x42b40000
 8003ef4:	48000800 	.word	0x48000800
 8003ef8:	200012a8 	.word	0x200012a8
 8003efc:	20001110 	.word	0x20001110
 8003f00:	20001120 	.word	0x20001120

08003f04 <HAL_FDCAN_RxFifo0Callback>:
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8003f04:	07cb      	lsls	r3, r1, #31
 8003f06:	d400      	bmi.n	8003f0a <HAL_FDCAN_RxFifo0Callback+0x6>
 8003f08:	4770      	bx	lr
{
 8003f0a:	b530      	push	{r4, r5, lr}
 8003f0c:	b08d      	sub	sp, #52	; 0x34
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8003f0e:	466b      	mov	r3, sp
 8003f10:	aa02      	add	r2, sp, #8
 8003f12:	2140      	movs	r1, #64	; 0x40
 8003f14:	f002 f926 	bl	8006164 <HAL_FDCAN_GetRxMessage>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	f040 809f 	bne.w	800405c <HAL_FDCAN_RxFifo0Callback+0x158>
    rx_can_id = RxHeader.Identifier;
 8003f1e:	9b02      	ldr	r3, [sp, #8]
    switch (rx_can_id) {
 8003f20:	f240 2241 	movw	r2, #577	; 0x241
 8003f24:	b29c      	uxth	r4, r3
 8003f26:	4294      	cmp	r4, r2
 8003f28:	d833      	bhi.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
 8003f2a:	f413 4f7e 	tst.w	r3, #65024	; 0xfe00
 8003f2e:	d026      	beq.n	8003f7e <HAL_FDCAN_RxFifo0Callback+0x7a>
 8003f30:	f5a4 7500 	sub.w	r5, r4, #512	; 0x200
 8003f34:	2d41      	cmp	r5, #65	; 0x41
 8003f36:	d82c      	bhi.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
 8003f38:	e8df f005 	tbb	[pc, r5]
 8003f3c:	4e4e4e4e 	.word	0x4e4e4e4e
 8003f40:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f44:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f48:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f4c:	2d2d2d2d 	.word	0x2d2d2d2d
 8003f50:	2b2d2d2d 	.word	0x2b2d2d2d
 8003f54:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f58:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f5c:	38383838 	.word	0x38383838
 8003f60:	2b2b3838 	.word	0x2b2b3838
 8003f64:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f68:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f6c:	43434343 	.word	0x43434343
 8003f70:	2b2b2b43 	.word	0x2b2b2b43
 8003f74:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f78:	2b2b2b2b 	.word	0x2b2b2b2b
 8003f7c:	6986      	.short	0x6986
 8003f7e:	2c00      	cmp	r4, #0
 8003f80:	d066      	beq.n	8004050 <HAL_FDCAN_RxFifo0Callback+0x14c>
 8003f82:	2c01      	cmp	r4, #1
 8003f84:	d105      	bne.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
        error_no[0] = RxData[0];
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_FDCAN_RxFifo0Callback+0x15c>)
 8003f88:	f8bd 2000 	ldrh.w	r2, [sp]
 8003f8c:	801a      	strh	r2, [r3, #0]
        maintask_stop();
 8003f8e:	f7ff fa89 	bl	80034a4 <maintask_stop>
}
 8003f92:	b00d      	add	sp, #52	; 0x34
 8003f94:	bd30      	pop	{r4, r5, pc}
        power_voltage[rx_can_id - 0x210] = uchar4_to_float(RxData);
 8003f96:	4668      	mov	r0, sp
 8003f98:	f000 fd50 	bl	8004a3c <uchar4_to_float>
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <HAL_FDCAN_RxFifo0Callback+0x160>)
 8003f9e:	f5a4 7404 	sub.w	r4, r4, #528	; 0x210
 8003fa2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003fa6:	ed83 0a00 	vstr	s0, [r3]
        break;
 8003faa:	e7f2      	b.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
        temperature[rx_can_id - 0x220] = uchar4_to_float(RxData);
 8003fac:	4668      	mov	r0, sp
 8003fae:	f000 fd45 	bl	8004a3c <uchar4_to_float>
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8003fb4:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8003fb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003fbc:	ed83 0a00 	vstr	s0, [r3]
        break;
 8003fc0:	e7e7      	b.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
        amplitude[rx_can_id - 0x230] = uchar4_to_float(RxData);
 8003fc2:	4668      	mov	r0, sp
 8003fc4:	f000 fd3a 	bl	8004a3c <uchar4_to_float>
 8003fc8:	4b28      	ldr	r3, [pc, #160]	; (800406c <HAL_FDCAN_RxFifo0Callback+0x168>)
 8003fca:	f5a4 740c 	sub.w	r4, r4, #560	; 0x230
 8003fce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003fd2:	ed83 0a00 	vstr	s0, [r3]
        break;
 8003fd6:	e7dc      	b.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
        motor_enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8003fd8:	a801      	add	r0, sp, #4
 8003fda:	f000 fd2f 	bl	8004a3c <uchar4_to_float>
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_FDCAN_RxFifo0Callback+0x16c>)
 8003fe0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003fe4:	ed83 0a00 	vstr	s0, [r3]
        motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8003fe8:	4668      	mov	r0, sp
 8003fea:	f000 fd27 	bl	8004a3c <uchar4_to_float>
 8003fee:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_FDCAN_RxFifo0Callback+0x170>)
        motor_feedback_velocity[rx_can_id - 0x200] = motor_feedback[3] * OMNI_DIR_LENGTH;
 8003ff0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004078 <HAL_FDCAN_RxFifo0Callback+0x174>
        motor_enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8003ff4:	00ad      	lsls	r5, r5, #2
        motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8003ff6:	195a      	adds	r2, r3, r5
 8003ff8:	ed82 0a00 	vstr	s0, [r2]
        motor_feedback_velocity[rx_can_id - 0x200] = motor_feedback[3] * OMNI_DIR_LENGTH;
 8003ffc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <HAL_FDCAN_RxFifo0Callback+0x178>)
 8004002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004006:	442b      	add	r3, r5
 8004008:	edc3 7a00 	vstr	s15, [r3]
        break;
 800400c:	e7c1      	b.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
        mouse_raw_latest[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 800400e:	9a00      	ldr	r2, [sp, #0]
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_FDCAN_RxFifo0Callback+0x17c>)
 8004012:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004084 <HAL_FDCAN_RxFifo0Callback+0x180>
 8004016:	ed93 7a00 	vldr	s14, [r3]
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 800401a:	edd3 7a01 	vldr	s15, [r3, #4]
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 800401e:	b211      	sxth	r1, r2
 8004020:	ee06 1a10 	vmov	s12, r1
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 8004024:	1411      	asrs	r1, r2, #16
 8004026:	ee06 1a90 	vmov	s13, r1
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 800402a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 800402e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 8004032:	eea6 7a25 	vfma.f32	s14, s12, s11
        mouse_raw_latest[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8004036:	4914      	ldr	r1, [pc, #80]	; (8004088 <HAL_FDCAN_RxFifo0Callback+0x184>)
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 8004038:	eee6 7aa5 	vfma.f32	s15, s13, s11
        mouse_raw_latest[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 800403c:	600a      	str	r2, [r1, #0]
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 800403e:	ed83 7a00 	vstr	s14, [r3]
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 8004042:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004046:	e7a4      	b.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
        ball_detection[0] = RxData[0];
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_FDCAN_RxFifo0Callback+0x188>)
 800404a:	9a00      	ldr	r2, [sp, #0]
 800404c:	601a      	str	r2, [r3, #0]
        break;
 800404e:	e7a0      	b.n	8003f92 <HAL_FDCAN_RxFifo0Callback+0x8e>
        error_no[0] = RxData[0];
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_FDCAN_RxFifo0Callback+0x15c>)
 8004052:	f8bd 2000 	ldrh.w	r2, [sp]
 8004056:	801a      	strh	r2, [r3, #0]
        Error_Handler();
 8004058:	f7ff fddc 	bl	8003c14 <Error_Handler>
      Error_Handler();
 800405c:	f7ff fdda 	bl	8003c14 <Error_Handler>
 8004060:	200010bc 	.word	0x200010bc
 8004064:	20001134 	.word	0x20001134
 8004068:	200011b8 	.word	0x200011b8
 800406c:	20001058 	.word	0x20001058
 8004070:	200010d4 	.word	0x200010d4
 8004074:	200010e8 	.word	0x200010e8
 8004078:	3e3426c8 	.word	0x3e3426c8
 800407c:	200010fc 	.word	0x200010fc
 8004080:	20001110 	.word	0x20001110
 8004084:	3a83126f 	.word	0x3a83126f
 8004088:	20001118 	.word	0x20001118
 800408c:	2000106c 	.word	0x2000106c

08004090 <delayUs>:
cycle_cnt = SysTick->VAL;
} while (ms != HAL_GetTick());
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
}

void delayUs(uint16_t micros) {
 8004090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	4682      	mov	sl, r0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004096:	f002 fe21 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 800409a:	4b1c      	ldr	r3, [pc, #112]	; (800410c <delayUs+0x7c>)
 800409c:	fba3 3700 	umull	r3, r7, r3, r0
 80040a0:	0cbf      	lsrs	r7, r7, #18
cycle_cnt = SysTick->VAL;
 80040a2:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
ms = HAL_GetTick();
 80040a6:	f7fe febd 	bl	8002e24 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 80040aa:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 80040ac:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 80040ae:	f7fe feb9 	bl	8002e24 <HAL_GetTick>
 80040b2:	4284      	cmp	r4, r0
 80040b4:	d1f7      	bne.n	80040a6 <delayUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80040b6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80040ba:	fb08 f907 	mul.w	r9, r8, r7
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 80040be:	f8df b04c 	ldr.w	fp, [pc, #76]	; 800410c <delayUs+0x7c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80040c2:	eba9 0905 	sub.w	r9, r9, r5
cycle_cnt = SysTick->VAL;
 80040c6:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80040ca:	fbb9 f9f7 	udiv	r9, r9, r7
 80040ce:	fb08 9904 	mla	r9, r8, r4, r9
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 80040d2:	f002 fe03 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 80040d6:	fbab 3700 	umull	r3, r7, fp, r0
 80040da:	0cbf      	lsrs	r7, r7, #18
ms = HAL_GetTick();
 80040dc:	f7fe fea2 	bl	8002e24 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 80040e0:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 80040e2:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 80040e4:	f7fe fe9e 	bl	8002e24 <HAL_GetTick>
 80040e8:	4284      	cmp	r4, r0
 80040ea:	d1f7      	bne.n	80040dc <delayUs+0x4c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80040ec:	fb08 f307 	mul.w	r3, r8, r7
 80040f0:	1b5b      	subs	r3, r3, r5
 80040f2:	fbb3 f3f7 	udiv	r3, r3, r7
uint32_t start = getUs();
while (getUs()-start < (uint32_t) micros) {
 80040f6:	eba3 0309 	sub.w	r3, r3, r9
 80040fa:	fb08 3304 	mla	r3, r8, r4, r3
 80040fe:	4553      	cmp	r3, sl
 8004100:	d201      	bcs.n	8004106 <delayUs+0x76>
	asm("nop");
 8004102:	bf00      	nop
 8004104:	e7e5      	b.n	80040d2 <delayUs+0x42>
}
}
 8004106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410a:	bf00      	nop
 800410c:	431bde83 	.word	0x431bde83

08004110 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004110:	b508      	push	{r3, lr}
 8004112:	ee11 0a10 	vmov	r0, s2
 8004116:	ed2d 8b08 	vpush	{d8-d11}
 800411a:	eeb0 9a61 	vmov.f32	s18, s3
 800411e:	eeb0 aa60 	vmov.f32	s20, s1
 8004122:	eeb0 8a40 	vmov.f32	s16, s0
	float32_t v_round;
	float32_t m1, m2, m3, m4;

	v_round=ROBOT_RADIUS*omega_omni;
 8004126:	f7fc fa37 	bl	8000598 <__aeabi_f2d>
 800412a:	a329      	add	r3, pc, #164	; (adr r3, 80041d0 <omni_move+0xc0>)
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f7fc fa8a 	bl	8000648 <__aeabi_dmul>
 8004134:	f7fc fd80 	bl	8000c38 <__aeabi_d2f>

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni;
 8004138:	eddf 7a21 	vldr	s15, [pc, #132]	; 80041c0 <omni_move+0xb0>
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 800413c:	eddf 8a21 	vldr	s17, [pc, #132]	; 80041c4 <omni_move+0xb4>
 8004140:	eddf 6a21 	vldr	s13, [pc, #132]	; 80041c8 <omni_move+0xb8>
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni;
 8004144:	eddf aa21 	vldr	s21, [pc, #132]	; 80041cc <omni_move+0xbc>
 8004148:	ee68 7a27 	vmul.f32	s15, s16, s15
 800414c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004150:	eeb0 0a67 	vmov.f32	s0, s15
 8004154:	eeaa 0a07 	vfma.f32	s0, s20, s14
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 8004158:	ee68 8a28 	vmul.f32	s17, s16, s17
	v_round=ROBOT_RADIUS*omega_omni;
 800415c:	ee09 0a90 	vmov	s19, r0
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 8004160:	eeea 8a26 	vfma.f32	s17, s20, s13
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni;
 8004164:	eeda 7a07 	vfnms.f32	s15, s20, s14
 8004168:	ee0b 0a10 	vmov	s22, r0
 800416c:	ee3a 8a08 	vadd.f32	s16, s20, s16
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni;
 8004170:	ee39 0a80 	vadd.f32	s0, s19, s0
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni;
 8004174:	eea8 ba26 	vfma.f32	s22, s16, s13
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni;

	actuator_motor1(m1,duty_Limit);
 8004178:	ee20 0a2a 	vmul.f32	s0, s0, s21
 800417c:	eef0 0a49 	vmov.f32	s1, s18
 8004180:	eeb0 8a67 	vmov.f32	s16, s15
 8004184:	f7fc ff26 	bl	8000fd4 <actuator_motor1>
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 8004188:	ee39 0aa8 	vadd.f32	s0, s19, s17
	actuator_motor2(m2,duty_Limit);
 800418c:	eef0 0a49 	vmov.f32	s1, s18
 8004190:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8004194:	f7fc ff2c 	bl	8000ff0 <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 8004198:	ee2b 0a2a 	vmul.f32	s0, s22, s21
 800419c:	eef0 0a49 	vmov.f32	s1, s18
 80041a0:	f7fc ff34 	bl	800100c <actuator_motor3>
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni;
 80041a4:	ee38 0a29 	vadd.f32	s0, s16, s19
	actuator_motor4(m4,duty_Limit);
 80041a8:	eef0 0a49 	vmov.f32	s1, s18
 80041ac:	ee20 0a2a 	vmul.f32	s0, s0, s21
}
 80041b0:	ecbd 8b08 	vpop	{d8-d11}
 80041b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	actuator_motor4(m4,duty_Limit);
 80041b8:	f7fc bf36 	b.w	8001028 <actuator_motor4>
 80041bc:	f3af 8000 	nop.w
 80041c0:	3f5db3d7 	.word	0x3f5db3d7
 80041c4:	3f3504f3 	.word	0x3f3504f3
 80041c8:	bf3504f3 	.word	0xbf3504f3
 80041cc:	40b5e430 	.word	0x40b5e430
 80041d0:	47ae147b 	.word	0x47ae147b
 80041d4:	3fb47ae1 	.word	0x3fb47ae1

080041d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041d8:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041da:	4811      	ldr	r0, [pc, #68]	; (8004220 <MX_SPI1_Init+0x48>)
 80041dc:	4c11      	ldr	r4, [pc, #68]	; (8004224 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041de:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041e2:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041e4:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041ec:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041f0:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80041f4:	2430      	movs	r4, #48	; 0x30
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041f6:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80041f8:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041fa:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004200:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004204:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004208:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800420c:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800420e:	f003 f961 	bl	80074d4 <HAL_SPI_Init>
 8004212:	b900      	cbnz	r0, 8004216 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004214:	bd10      	pop	{r4, pc}
 8004216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800421a:	f7ff bcfb 	b.w	8003c14 <Error_Handler>
 800421e:	bf00      	nop
 8004220:	200011f8 	.word	0x200011f8
 8004224:	40013000 	.word	0x40013000

08004228 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004228:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800422a:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_SPI_MspInit+0x70>)
 800422c:	6801      	ldr	r1, [r0, #0]
{
 800422e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8004232:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004238:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800423c:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 800423e:	d002      	beq.n	8004246 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004240:	b009      	add	sp, #36	; 0x24
 8004242:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004246:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800424a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800424e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8004290 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004258:	661a      	str	r2, [r3, #96]	; 0x60
 800425a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800425c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004260:	9200      	str	r2, [sp, #0]
 8004262:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	64da      	str	r2, [r3, #76]	; 0x4c
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004276:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800427c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004280:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004282:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004284:	f002 f944 	bl	8006510 <HAL_GPIO_Init>
}
 8004288:	b009      	add	sp, #36	; 0x24
 800428a:	f85d fb04 	ldr.w	pc, [sp], #4
 800428e:	bf00      	nop
 8004290:	000000e0 	.word	0x000000e0
 8004294:	00000002 	.word	0x00000002
 8004298:	40013000 	.word	0x40013000

0800429c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_MspInit+0x30>)
 800429e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60
 80042a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80042a8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042aa:	f002 0201 	and.w	r2, r2, #1
 80042ae:	9200      	str	r2, [sp, #0]
 80042b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042b8:	659a      	str	r2, [r3, #88]	; 0x58
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042c4:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80042c6:	f002 bab5 	b.w	8006834 <HAL_PWREx_DisableUCPDDeadBattery>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000

080042d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop

080042d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <HardFault_Handler>
 80042d6:	bf00      	nop

080042d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042d8:	e7fe      	b.n	80042d8 <MemManage_Handler>
 80042da:	bf00      	nop

080042dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042dc:	e7fe      	b.n	80042dc <BusFault_Handler>
 80042de:	bf00      	nop

080042e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042e0:	e7fe      	b.n	80042e0 <UsageFault_Handler>
 80042e2:	bf00      	nop

080042e4 <SVC_Handler>:
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop

080042e8 <DebugMon_Handler>:
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <PendSV_Handler>:
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop

080042f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042f0:	f000 bd46 	b.w	8004d80 <HAL_IncTick>

080042f4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <DMA1_Channel1_IRQHandler+0x8>)
 80042f6:	f001 bcb9 	b.w	8005c6c <HAL_DMA_IRQHandler>
 80042fa:	bf00      	nop
 80042fc:	200013b4 	.word	0x200013b4

08004300 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <DMA1_Channel2_IRQHandler+0x8>)
 8004302:	f001 bcb3 	b.w	8005c6c <HAL_DMA_IRQHandler>
 8004306:	bf00      	nop
 8004308:	20001474 	.word	0x20001474

0800430c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <DMA1_Channel3_IRQHandler+0x8>)
 800430e:	f001 bcad 	b.w	8005c6c <HAL_DMA_IRQHandler>
 8004312:	bf00      	nop
 8004314:	2000039c 	.word	0x2000039c

08004318 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <DMA1_Channel4_IRQHandler+0x8>)
 800431a:	f001 bca7 	b.w	8005c6c <HAL_DMA_IRQHandler>
 800431e:	bf00      	nop
 8004320:	200003fc 	.word	0x200003fc

08004324 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <DMA1_Channel5_IRQHandler+0x8>)
 8004326:	f001 bca1 	b.w	8005c6c <HAL_DMA_IRQHandler>
 800432a:	bf00      	nop
 800432c:	2000033c 	.word	0x2000033c

08004330 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <DMA1_Channel6_IRQHandler+0x8>)
 8004332:	f001 bc9b 	b.w	8005c6c <HAL_DMA_IRQHandler>
 8004336:	bf00      	nop
 8004338:	200012f4 	.word	0x200012f4

0800433c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800433c:	4801      	ldr	r0, [pc, #4]	; (8004344 <DMA1_Channel7_IRQHandler+0x8>)
 800433e:	f001 bc95 	b.w	8005c6c <HAL_DMA_IRQHandler>
 8004342:	bf00      	nop
 8004344:	20001354 	.word	0x20001354

08004348 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004348:	4801      	ldr	r0, [pc, #4]	; (8004350 <FDCAN1_IT0_IRQHandler+0x8>)
 800434a:	f002 b81d 	b.w	8006388 <HAL_FDCAN_IRQHandler>
 800434e:	bf00      	nop
 8004350:	20000c88 	.word	0x20000c88

08004354 <FDCAN1_IT1_IRQHandler>:
 8004354:	4801      	ldr	r0, [pc, #4]	; (800435c <FDCAN1_IT1_IRQHandler+0x8>)
 8004356:	f002 b817 	b.w	8006388 <HAL_FDCAN_IRQHandler>
 800435a:	bf00      	nop
 800435c:	20000c88 	.word	0x20000c88

08004360 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8004360:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004364:	f002 b9e4 	b.w	8006730 <HAL_GPIO_EXTI_IRQHandler>

08004368 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004368:	4801      	ldr	r0, [pc, #4]	; (8004370 <USART2_IRQHandler+0x8>)
 800436a:	f004 b985 	b.w	8008678 <HAL_UART_IRQHandler>
 800436e:	bf00      	nop
 8004370:	20001568 	.word	0x20001568

08004374 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004374:	4801      	ldr	r0, [pc, #4]	; (800437c <TIM7_DAC_IRQHandler+0x8>)
 8004376:	f003 bdc3 	b.w	8007f00 <HAL_TIM_IRQHandler>
 800437a:	bf00      	nop
 800437c:	200012a8 	.word	0x200012a8

08004380 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004380:	4801      	ldr	r0, [pc, #4]	; (8004388 <FDCAN2_IT0_IRQHandler+0x8>)
 8004382:	f002 b801 	b.w	8006388 <HAL_FDCAN_IRQHandler>
 8004386:	bf00      	nop
 8004388:	20000cec 	.word	0x20000cec

0800438c <FDCAN2_IT1_IRQHandler>:
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <FDCAN2_IT1_IRQHandler+0x8>)
 800438e:	f001 bffb 	b.w	8006388 <HAL_FDCAN_IRQHandler>
 8004392:	bf00      	nop
 8004394:	20000cec 	.word	0x20000cec

08004398 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <LPUART1_IRQHandler+0x8>)
 800439a:	f004 b96d 	b.w	8008678 <HAL_UART_IRQHandler>
 800439e:	bf00      	nop
 80043a0:	200014d8 	.word	0x200014d8

080043a4 <DMA1_Channel8_IRQHandler>:
void DMA1_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <DMA1_Channel8_IRQHandler+0x8>)
 80043a6:	f001 bc61 	b.w	8005c6c <HAL_DMA_IRQHandler>
 80043aa:	bf00      	nop
 80043ac:	20001414 	.word	0x20001414

080043b0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80043b0:	2001      	movs	r0, #1
 80043b2:	4770      	bx	lr

080043b4 <_kill>:

int _kill(int pid, int sig)
{
 80043b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80043b6:	f005 ffa7 	bl	800a308 <__errno>
 80043ba:	2316      	movs	r3, #22
 80043bc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80043be:	f04f 30ff 	mov.w	r0, #4294967295
 80043c2:	bd08      	pop	{r3, pc}

080043c4 <_exit>:

void _exit (int status)
{
 80043c4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80043c6:	f005 ff9f 	bl	800a308 <__errno>
 80043ca:	2316      	movs	r3, #22
 80043cc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80043ce:	e7fe      	b.n	80043ce <_exit+0xa>

080043d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043d0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d2:	1e16      	subs	r6, r2, #0
 80043d4:	dd07      	ble.n	80043e6 <_read+0x16>
 80043d6:	460c      	mov	r4, r1
 80043d8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80043da:	f3af 8000 	nop.w
 80043de:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e2:	42a5      	cmp	r5, r4
 80043e4:	d1f9      	bne.n	80043da <_read+0xa>
	}

return len;
}
 80043e6:	4630      	mov	r0, r6
 80043e8:	bd70      	pop	{r4, r5, r6, pc}
 80043ea:	bf00      	nop

080043ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043ec:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ee:	1e16      	subs	r6, r2, #0
 80043f0:	dd07      	ble.n	8004402 <_write+0x16>
 80043f2:	460c      	mov	r4, r1
 80043f4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80043f6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80043fa:	f7fe fd01 	bl	8002e00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043fe:	42ac      	cmp	r4, r5
 8004400:	d1f9      	bne.n	80043f6 <_write+0xa>
	}
	return len;
}
 8004402:	4630      	mov	r0, r6
 8004404:	bd70      	pop	{r4, r5, r6, pc}
 8004406:	bf00      	nop

08004408 <_close>:

int _close(int file)
{
	return -1;
}
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop

08004410 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004414:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004416:	2000      	movs	r0, #0
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop

0800441c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800441c:	2001      	movs	r0, #1
 800441e:	4770      	bx	lr

08004420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004420:	2000      	movs	r0, #0
 8004422:	4770      	bx	lr

08004424 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <SystemInit+0x18>)
 8004426:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800442a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800442e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004436:	6099      	str	r1, [r3, #8]
#endif
}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004440:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004442:	4c33      	ldr	r4, [pc, #204]	; (8004510 <MX_TIM5_Init+0xd0>)
 8004444:	4a33      	ldr	r2, [pc, #204]	; (8004514 <MX_TIM5_Init+0xd4>)
 8004446:	6022      	str	r2, [r4, #0]
{
 8004448:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 800444a:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800444c:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 800444e:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004450:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 8004452:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004456:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800445a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800445e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004462:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 8004466:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800446a:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800446c:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446e:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004470:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004472:	f003 fbf1 	bl	8007c58 <HAL_TIM_PWM_Init>
 8004476:	bb00      	cbnz	r0, 80044ba <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004478:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800447a:	4825      	ldr	r0, [pc, #148]	; (8004510 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800447c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800447e:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004480:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004482:	f003 ff93 	bl	80083ac <HAL_TIMEx_MasterConfigSynchronization>
 8004486:	b9f0      	cbnz	r0, 80044c6 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004488:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8004500 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800448c:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800448e:	4820      	ldr	r0, [pc, #128]	; (8004510 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004490:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004492:	2204      	movs	r2, #4
 8004494:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004496:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800449a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800449c:	f003 fe7c 	bl	8008198 <HAL_TIM_PWM_ConfigChannel>
 80044a0:	b970      	cbnz	r0, 80044c0 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <MX_TIM5_Init+0xd4>)
 80044a4:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a6:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 80044a8:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044aa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80044ae:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80044b2:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 80044b4:	d00a      	beq.n	80044cc <MX_TIM5_Init+0x8c>
}
 80044b6:	b012      	add	sp, #72	; 0x48
 80044b8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80044ba:	f7ff fbab 	bl	8003c14 <Error_Handler>
 80044be:	e7db      	b.n	8004478 <MX_TIM5_Init+0x38>
    Error_Handler();
 80044c0:	f7ff fba8 	bl	8003c14 <Error_Handler>
 80044c4:	e7ed      	b.n	80044a2 <MX_TIM5_Init+0x62>
    Error_Handler();
 80044c6:	f7ff fba5 	bl	8003c14 <Error_Handler>
 80044ca:	e7dd      	b.n	8004488 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044d0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80044d4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8004508 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80044da:	480f      	ldr	r0, [pc, #60]	; (8004518 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044dc:	f042 0204 	orr.w	r2, r2, #4
 80044e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80044ea:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80044ec:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80044ee:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044f2:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80044f4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80044f6:	f002 f80b 	bl	8006510 <HAL_GPIO_Init>
}
 80044fa:	b012      	add	sp, #72	; 0x48
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	bf00      	nop
 8004500:	00000060 	.word	0x00000060
 8004504:	00000000 	.word	0x00000000
 8004508:	00001000 	.word	0x00001000
 800450c:	00000002 	.word	0x00000002
 8004510:	2000125c 	.word	0x2000125c
 8004514:	40000c00 	.word	0x40000c00
 8004518:	48000800 	.word	0x48000800

0800451c <MX_TIM7_Init>:
{
 800451c:	b500      	push	{lr}
  htim7.Instance = TIM7;
 800451e:	4812      	ldr	r0, [pc, #72]	; (8004568 <MX_TIM7_Init+0x4c>)
 8004520:	4912      	ldr	r1, [pc, #72]	; (800456c <MX_TIM7_Init+0x50>)
{
 8004522:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 8004524:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004526:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8004528:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 2000;
 800452c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004530:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 2000;
 8004534:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004538:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800453a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800453c:	f003 fab0 	bl	8007aa0 <HAL_TIM_Base_Init>
 8004540:	b950      	cbnz	r0, 8004558 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004542:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004544:	4808      	ldr	r0, [pc, #32]	; (8004568 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004546:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004548:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800454a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800454c:	f003 ff2e 	bl	80083ac <HAL_TIMEx_MasterConfigSynchronization>
 8004550:	b928      	cbnz	r0, 800455e <MX_TIM7_Init+0x42>
}
 8004552:	b005      	add	sp, #20
 8004554:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004558:	f7ff fb5c 	bl	8003c14 <Error_Handler>
 800455c:	e7f1      	b.n	8004542 <MX_TIM7_Init+0x26>
    Error_Handler();
 800455e:	f7ff fb59 	bl	8003c14 <Error_Handler>
}
 8004562:	b005      	add	sp, #20
 8004564:	f85d fb04 	ldr.w	pc, [sp], #4
 8004568:	200012a8 	.word	0x200012a8
 800456c:	40001400 	.word	0x40001400

08004570 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_TIM_PWM_MspInit+0x28>)
 8004572:	6802      	ldr	r2, [r0, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d000      	beq.n	800457a <HAL_TIM_PWM_MspInit+0xa>
 8004578:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 800457a:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 800457e:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004582:	f042 0208 	orr.w	r2, r2, #8
 8004586:	659a      	str	r2, [r3, #88]	; 0x58
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	9b01      	ldr	r3, [sp, #4]
}
 8004592:	b002      	add	sp, #8
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40000c00 	.word	0x40000c00

0800459c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 800459c:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <HAL_TIM_Base_MspInit+0x3c>)
 800459e:	6802      	ldr	r2, [r0, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d000      	beq.n	80045a6 <HAL_TIM_Base_MspInit+0xa>
 80045a4:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045a6:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 80045aa:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045ac:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80045ae:	f041 0120 	orr.w	r1, r1, #32
 80045b2:	6599      	str	r1, [r3, #88]	; 0x58
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80045b6:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80045be:	2037      	movs	r0, #55	; 0x37
 80045c0:	2200      	movs	r2, #0
 80045c2:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 80045c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80045c6:	f001 f983 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80045ca:	2037      	movs	r0, #55	; 0x37
}
 80045cc:	b003      	add	sp, #12
 80045ce:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80045d2:	f001 b9bb 	b.w	800594c <HAL_NVIC_EnableIRQ>
 80045d6:	bf00      	nop
 80045d8:	40001400 	.word	0x40001400
 80045dc:	00000000 	.word	0x00000000

080045e0 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045e0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8004668 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 80045e4:	4822      	ldr	r0, [pc, #136]	; (8004670 <MX_LPUART1_UART_Init+0x90>)
 80045e6:	4923      	ldr	r1, [pc, #140]	; (8004674 <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 80045e8:	4a23      	ldr	r2, [pc, #140]	; (8004678 <MX_LPUART1_UART_Init+0x98>)
{
 80045ea:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045ec:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 80045ee:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80045f2:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80045f4:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80045f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045fa:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80045fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004602:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004606:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004608:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800460a:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800460c:	f004 fd66 	bl	80090dc <HAL_UART_Init>
 8004610:	b970      	cbnz	r0, 8004630 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004612:	4817      	ldr	r0, [pc, #92]	; (8004670 <MX_LPUART1_UART_Init+0x90>)
 8004614:	2100      	movs	r1, #0
 8004616:	f004 fe6f 	bl	80092f8 <HAL_UARTEx_SetTxFifoThreshold>
 800461a:	b988      	cbnz	r0, 8004640 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800461c:	4814      	ldr	r0, [pc, #80]	; (8004670 <MX_LPUART1_UART_Init+0x90>)
 800461e:	2100      	movs	r1, #0
 8004620:	f004 feac 	bl	800937c <HAL_UARTEx_SetRxFifoThreshold>
 8004624:	b9a0      	cbnz	r0, 8004650 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004626:	4812      	ldr	r0, [pc, #72]	; (8004670 <MX_LPUART1_UART_Init+0x90>)
 8004628:	f004 fe48 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 800462c:	b9b8      	cbnz	r0, 800465e <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800462e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004630:	f7ff faf0 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004634:	480e      	ldr	r0, [pc, #56]	; (8004670 <MX_LPUART1_UART_Init+0x90>)
 8004636:	2100      	movs	r1, #0
 8004638:	f004 fe5e 	bl	80092f8 <HAL_UARTEx_SetTxFifoThreshold>
 800463c:	2800      	cmp	r0, #0
 800463e:	d0ed      	beq.n	800461c <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 8004640:	f7ff fae8 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004644:	480a      	ldr	r0, [pc, #40]	; (8004670 <MX_LPUART1_UART_Init+0x90>)
 8004646:	2100      	movs	r1, #0
 8004648:	f004 fe98 	bl	800937c <HAL_UARTEx_SetRxFifoThreshold>
 800464c:	2800      	cmp	r0, #0
 800464e:	d0ea      	beq.n	8004626 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 8004650:	f7ff fae0 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004654:	4806      	ldr	r0, [pc, #24]	; (8004670 <MX_LPUART1_UART_Init+0x90>)
 8004656:	f004 fe31 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 800465a:	2800      	cmp	r0, #0
 800465c:	d0e7      	beq.n	800462e <MX_LPUART1_UART_Init+0x4e>
}
 800465e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004662:	f7ff bad7 	b.w	8003c14 <Error_Handler>
 8004666:	bf00      	nop
	...
 8004670:	200014d8 	.word	0x200014d8
 8004674:	40008000 	.word	0x40008000
 8004678:	001e8480 	.word	0x001e8480

0800467c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800467c:	4821      	ldr	r0, [pc, #132]	; (8004704 <MX_USART2_UART_Init+0x88>)
 800467e:	4922      	ldr	r1, [pc, #136]	; (8004708 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 8004680:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 8004684:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004686:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8004688:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800468c:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800468e:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004690:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004694:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004698:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800469c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046a0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80046a4:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80046a6:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046a8:	f004 fd18 	bl	80090dc <HAL_UART_Init>
 80046ac:	b970      	cbnz	r0, 80046cc <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046ae:	4815      	ldr	r0, [pc, #84]	; (8004704 <MX_USART2_UART_Init+0x88>)
 80046b0:	2100      	movs	r1, #0
 80046b2:	f004 fe21 	bl	80092f8 <HAL_UARTEx_SetTxFifoThreshold>
 80046b6:	b988      	cbnz	r0, 80046dc <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046b8:	4812      	ldr	r0, [pc, #72]	; (8004704 <MX_USART2_UART_Init+0x88>)
 80046ba:	2100      	movs	r1, #0
 80046bc:	f004 fe5e 	bl	800937c <HAL_UARTEx_SetRxFifoThreshold>
 80046c0:	b9a0      	cbnz	r0, 80046ec <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80046c2:	4810      	ldr	r0, [pc, #64]	; (8004704 <MX_USART2_UART_Init+0x88>)
 80046c4:	f004 fdfa 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 80046c8:	b9b8      	cbnz	r0, 80046fa <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046ca:	bd10      	pop	{r4, pc}
    Error_Handler();
 80046cc:	f7ff faa2 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046d0:	480c      	ldr	r0, [pc, #48]	; (8004704 <MX_USART2_UART_Init+0x88>)
 80046d2:	2100      	movs	r1, #0
 80046d4:	f004 fe10 	bl	80092f8 <HAL_UARTEx_SetTxFifoThreshold>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d0ed      	beq.n	80046b8 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 80046dc:	f7ff fa9a 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046e0:	4808      	ldr	r0, [pc, #32]	; (8004704 <MX_USART2_UART_Init+0x88>)
 80046e2:	2100      	movs	r1, #0
 80046e4:	f004 fe4a 	bl	800937c <HAL_UARTEx_SetRxFifoThreshold>
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d0ea      	beq.n	80046c2 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80046ec:	f7ff fa92 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80046f0:	4804      	ldr	r0, [pc, #16]	; (8004704 <MX_USART2_UART_Init+0x88>)
 80046f2:	f004 fde3 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d0e7      	beq.n	80046ca <MX_USART2_UART_Init+0x4e>
}
 80046fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80046fe:	f7ff ba89 	b.w	8003c14 <Error_Handler>
 8004702:	bf00      	nop
 8004704:	20001568 	.word	0x20001568
 8004708:	40004400 	.word	0x40004400

0800470c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800470c:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800470e:	481f      	ldr	r0, [pc, #124]	; (800478c <MX_USART3_UART_Init+0x80>)
 8004710:	4c1f      	ldr	r4, [pc, #124]	; (8004790 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004712:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8004714:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004718:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 800471a:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800471e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004722:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004726:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800472a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800472e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004730:	f004 fcd4 	bl	80090dc <HAL_UART_Init>
 8004734:	b970      	cbnz	r0, 8004754 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004736:	4815      	ldr	r0, [pc, #84]	; (800478c <MX_USART3_UART_Init+0x80>)
 8004738:	2100      	movs	r1, #0
 800473a:	f004 fddd 	bl	80092f8 <HAL_UARTEx_SetTxFifoThreshold>
 800473e:	b988      	cbnz	r0, 8004764 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004740:	4812      	ldr	r0, [pc, #72]	; (800478c <MX_USART3_UART_Init+0x80>)
 8004742:	2100      	movs	r1, #0
 8004744:	f004 fe1a 	bl	800937c <HAL_UARTEx_SetRxFifoThreshold>
 8004748:	b9a0      	cbnz	r0, 8004774 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800474a:	4810      	ldr	r0, [pc, #64]	; (800478c <MX_USART3_UART_Init+0x80>)
 800474c:	f004 fdb6 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 8004750:	b9b8      	cbnz	r0, 8004782 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004752:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004754:	f7ff fa5e 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004758:	480c      	ldr	r0, [pc, #48]	; (800478c <MX_USART3_UART_Init+0x80>)
 800475a:	2100      	movs	r1, #0
 800475c:	f004 fdcc 	bl	80092f8 <HAL_UARTEx_SetTxFifoThreshold>
 8004760:	2800      	cmp	r0, #0
 8004762:	d0ed      	beq.n	8004740 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8004764:	f7ff fa56 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004768:	4808      	ldr	r0, [pc, #32]	; (800478c <MX_USART3_UART_Init+0x80>)
 800476a:	2100      	movs	r1, #0
 800476c:	f004 fe06 	bl	800937c <HAL_UARTEx_SetRxFifoThreshold>
 8004770:	2800      	cmp	r0, #0
 8004772:	d0ea      	beq.n	800474a <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8004774:	f7ff fa4e 	bl	8003c14 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004778:	4804      	ldr	r0, [pc, #16]	; (800478c <MX_USART3_UART_Init+0x80>)
 800477a:	f004 fd9f 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 800477e:	2800      	cmp	r0, #0
 8004780:	d0e7      	beq.n	8004752 <MX_USART3_UART_Init+0x46>
}
 8004782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004786:	f7ff ba45 	b.w	8003c14 <Error_Handler>
 800478a:	bf00      	nop
 800478c:	200015f8 	.word	0x200015f8
 8004790:	40004800 	.word	0x40004800

08004794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	4604      	mov	r4, r0
 8004798:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800479c:	2254      	movs	r2, #84	; 0x54
 800479e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80047a4:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80047a8:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047aa:	f005 fd5b 	bl	800a264 <memset>
  if(uartHandle->Instance==LPUART1)
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	4a92      	ldr	r2, [pc, #584]	; (80049fc <HAL_UART_MspInit+0x268>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d008      	beq.n	80047c8 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80047b6:	4a92      	ldr	r2, [pc, #584]	; (8004a00 <HAL_UART_MspInit+0x26c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d067      	beq.n	800488c <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80047bc:	4a91      	ldr	r2, [pc, #580]	; (8004a04 <HAL_UART_MspInit+0x270>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f000 80c3 	beq.w	800494a <HAL_UART_MspInit+0x1b6>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80047c4:	b020      	add	sp, #128	; 0x80
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80047c8:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ca:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80047cc:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ce:	f002 fbe5 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f040 80ff 	bne.w	80049d6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80047d8:	4b8b      	ldr	r3, [pc, #556]	; (8004a08 <HAL_UART_MspInit+0x274>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 80047da:	4e8c      	ldr	r6, [pc, #560]	; (8004a0c <HAL_UART_MspInit+0x278>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80047dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80047e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047e6:	f002 0201 	and.w	r2, r2, #1
 80047ea:	9200      	str	r2, [sp, #0]
 80047ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80047f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047fe:	220c      	movs	r2, #12
 8004800:	2302      	movs	r3, #2
 8004802:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004806:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004808:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800480a:	2300      	movs	r3, #0
 800480c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004810:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004812:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004818:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481a:	f001 fe79 	bl	8006510 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800481e:	497c      	ldr	r1, [pc, #496]	; (8004a10 <HAL_UART_MspInit+0x27c>)
 8004820:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004822:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004824:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004828:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800482a:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800482c:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800482e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004832:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004836:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800483a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800483c:	f001 f8ae 	bl	800599c <HAL_DMA_Init>
 8004840:	2800      	cmp	r0, #0
 8004842:	f040 80c5 	bne.w	80049d0 <HAL_UART_MspInit+0x23c>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8004846:	4d73      	ldr	r5, [pc, #460]	; (8004a14 <HAL_UART_MspInit+0x280>)
 8004848:	4973      	ldr	r1, [pc, #460]	; (8004a18 <HAL_UART_MspInit+0x284>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800484a:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800484c:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800484e:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004850:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004854:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004856:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004858:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800485a:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800485e:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004862:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004866:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004868:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800486a:	f001 f897 	bl	800599c <HAL_DMA_Init>
 800486e:	2800      	cmp	r0, #0
 8004870:	f040 80ab 	bne.w	80049ca <HAL_UART_MspInit+0x236>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8004874:	2200      	movs	r2, #0
 8004876:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004878:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800487a:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800487c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800487e:	f001 f827 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004882:	205b      	movs	r0, #91	; 0x5b
 8004884:	f001 f862 	bl	800594c <HAL_NVIC_EnableIRQ>
}
 8004888:	b020      	add	sp, #128	; 0x80
 800488a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800488c:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800488e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004890:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004892:	f002 fb83 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 8004896:	2800      	cmp	r0, #0
 8004898:	f040 80a0 	bne.w	80049dc <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART2_CLK_ENABLE();
 800489c:	4b5a      	ldr	r3, [pc, #360]	; (8004a08 <HAL_UART_MspInit+0x274>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489e:	485f      	ldr	r0, [pc, #380]	; (8004a1c <HAL_UART_MspInit+0x288>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80048a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80048a2:	4e5f      	ldr	r6, [pc, #380]	; (8004a20 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80048a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048a8:	659a      	str	r2, [r3, #88]	; 0x58
 80048aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80048b0:	9202      	str	r2, [sp, #8]
 80048b2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048b6:	f042 0202 	orr.w	r2, r2, #2
 80048ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80048c4:	2218      	movs	r2, #24
 80048c6:	2302      	movs	r3, #2
 80048c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048cc:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ce:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048d8:	2307      	movs	r3, #7
 80048da:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048dc:	f001 fe18 	bl	8006510 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80048e0:	4950      	ldr	r1, [pc, #320]	; (8004a24 <HAL_UART_MspInit+0x290>)
 80048e2:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048e4:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80048e6:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048ea:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ec:	2180      	movs	r1, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80048ee:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f0:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048f4:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80048f8:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048fc:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048fe:	f001 f84d 	bl	800599c <HAL_DMA_Init>
 8004902:	2800      	cmp	r0, #0
 8004904:	d170      	bne.n	80049e8 <HAL_UART_MspInit+0x254>
    hdma_usart2_tx.Instance = DMA1_Channel8;
 8004906:	4d48      	ldr	r5, [pc, #288]	; (8004a28 <HAL_UART_MspInit+0x294>)
 8004908:	4948      	ldr	r1, [pc, #288]	; (8004a2c <HAL_UART_MspInit+0x298>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800490a:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800490c:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800490e:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004910:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004914:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004916:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004918:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800491a:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800491e:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004922:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004926:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004928:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800492a:	f001 f837 	bl	800599c <HAL_DMA_Init>
 800492e:	2800      	cmp	r0, #0
 8004930:	d157      	bne.n	80049e2 <HAL_UART_MspInit+0x24e>
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8004932:	2200      	movs	r2, #0
 8004934:	210c      	movs	r1, #12
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004936:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8004938:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800493a:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 800493c:	f000 ffc8 	bl	80058d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004940:	2026      	movs	r0, #38	; 0x26
 8004942:	f001 f803 	bl	800594c <HAL_NVIC_EnableIRQ>
}
 8004946:	b020      	add	sp, #128	; 0x80
 8004948:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800494a:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800494c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800494e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004950:	f002 fb24 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 8004954:	2800      	cmp	r0, #0
 8004956:	d14d      	bne.n	80049f4 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_UART_MspInit+0x274>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800495a:	4835      	ldr	r0, [pc, #212]	; (8004a30 <HAL_UART_MspInit+0x29c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800495c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800495e:	4d35      	ldr	r5, [pc, #212]	; (8004a34 <HAL_UART_MspInit+0x2a0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004960:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004964:	659a      	str	r2, [r3, #88]	; 0x58
 8004966:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004968:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800496c:	9204      	str	r2, [sp, #16]
 800496e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004972:	f042 0204 	orr.w	r2, r2, #4
 8004976:	64da      	str	r2, [r3, #76]	; 0x4c
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8004980:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004984:	2302      	movs	r3, #2
 8004986:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800498a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800498c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 800498e:	2300      	movs	r3, #0
 8004990:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004994:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004996:	2307      	movs	r3, #7
 8004998:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800499a:	f001 fdb9 	bl	8006510 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800499e:	4926      	ldr	r1, [pc, #152]	; (8004a38 <HAL_UART_MspInit+0x2a4>)
 80049a0:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049a2:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80049a4:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80049a8:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049aa:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80049ac:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ae:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049b2:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80049b6:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049ba:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80049bc:	f000 ffee 	bl	800599c <HAL_DMA_Init>
 80049c0:	b9a8      	cbnz	r0, 80049ee <HAL_UART_MspInit+0x25a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80049c2:	67e5      	str	r5, [r4, #124]	; 0x7c
 80049c4:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80049c6:	b020      	add	sp, #128	; 0x80
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80049ca:	f7ff f923 	bl	8003c14 <Error_Handler>
 80049ce:	e751      	b.n	8004874 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80049d0:	f7ff f920 	bl	8003c14 <Error_Handler>
 80049d4:	e737      	b.n	8004846 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 80049d6:	f7ff f91d 	bl	8003c14 <Error_Handler>
 80049da:	e6fd      	b.n	80047d8 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80049dc:	f7ff f91a 	bl	8003c14 <Error_Handler>
 80049e0:	e75c      	b.n	800489c <HAL_UART_MspInit+0x108>
      Error_Handler();
 80049e2:	f7ff f917 	bl	8003c14 <Error_Handler>
 80049e6:	e7a4      	b.n	8004932 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80049e8:	f7ff f914 	bl	8003c14 <Error_Handler>
 80049ec:	e78b      	b.n	8004906 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80049ee:	f7ff f911 	bl	8003c14 <Error_Handler>
 80049f2:	e7e6      	b.n	80049c2 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80049f4:	f7ff f90e 	bl	8003c14 <Error_Handler>
 80049f8:	e7ae      	b.n	8004958 <HAL_UART_MspInit+0x1c4>
 80049fa:	bf00      	nop
 80049fc:	40008000 	.word	0x40008000
 8004a00:	40004400 	.word	0x40004400
 8004a04:	40004800 	.word	0x40004800
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	200012f4 	.word	0x200012f4
 8004a10:	4002006c 	.word	0x4002006c
 8004a14:	20001354 	.word	0x20001354
 8004a18:	40020080 	.word	0x40020080
 8004a1c:	48000400 	.word	0x48000400
 8004a20:	200013b4 	.word	0x200013b4
 8004a24:	40020008 	.word	0x40020008
 8004a28:	20001414 	.word	0x20001414
 8004a2c:	40020094 	.word	0x40020094
 8004a30:	48000800 	.word	0x48000800
 8004a34:	20001474 	.word	0x20001474
 8004a38:	4002001c 	.word	0x4002001c

08004a3c <uchar4_to_float>:
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
    tmp.char4_value[1]=value[1];
    tmp.char4_value[2]=value[2];
    tmp.char4_value[3]=value[3];
    return tmp.float_value;
 8004a3c:	6803      	ldr	r3, [r0, #0]
 8004a3e:	ee00 3a10 	vmov	s0, r3
}
 8004a42:	4770      	bx	lr

08004a44 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
    Float_char4 tmp;
    tmp.float_value=float_value;
    value[0]=tmp.char4_value[0];
 8004a44:	ee10 3a10 	vmov	r3, s0
 8004a48:	6003      	str	r3, [r0, #0]
    value[1]=tmp.char4_value[1];
    value[2]=tmp.char4_value[2];
    value[3]=tmp.char4_value[3];
}
 8004a4a:	4770      	bx	lr
 8004a4c:	0000      	movs	r0, r0
	...

08004a50 <getAngleDiff>:
    }
    return angle_rad;
}

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8004a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while (angle_rad > M_PI) {
 8004a54:	ee10 0a10 	vmov	r0, s0
{
 8004a58:	ed2d 8b04 	vpush	{d8-d9}
 8004a5c:	eeb0 8a40 	vmov.f32	s16, s0
 8004a60:	eef0 8a60 	vmov.f32	s17, s1
    while (angle_rad > M_PI) {
 8004a64:	f7fb fd98 	bl	8000598 <__aeabi_f2d>
 8004a68:	a35f      	add	r3, pc, #380	; (adr r3, 8004be8 <getAngleDiff+0x198>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	4606      	mov	r6, r0
 8004a70:	460f      	mov	r7, r1
 8004a72:	f7fc f879 	bl	8000b68 <__aeabi_dcmpgt>
 8004a76:	b1d0      	cbz	r0, 8004aae <getAngleDiff+0x5e>
      angle_rad -= 2.0f * M_PI;
 8004a78:	f20f 1974 	addw	r9, pc, #372	; 0x174
 8004a7c:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad > M_PI) {
 8004a80:	a559      	add	r5, pc, #356	; (adr r5, 8004be8 <getAngleDiff+0x198>)
 8004a82:	e9d5 4500 	ldrd	r4, r5, [r5]
      angle_rad -= 2.0f * M_PI;
 8004a86:	4642      	mov	r2, r8
 8004a88:	464b      	mov	r3, r9
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	4639      	mov	r1, r7
 8004a8e:	f7fb fc23 	bl	80002d8 <__aeabi_dsub>
 8004a92:	f7fc f8d1 	bl	8000c38 <__aeabi_d2f>
 8004a96:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8004a9a:	f7fb fd7d 	bl	8000598 <__aeabi_f2d>
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460f      	mov	r7, r1
 8004aa6:	f7fc f85f 	bl	8000b68 <__aeabi_dcmpgt>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d1eb      	bne.n	8004a86 <getAngleDiff+0x36>
    while (angle_rad < -M_PI) {
 8004aae:	a352      	add	r3, pc, #328	; (adr r3, 8004bf8 <getAngleDiff+0x1a8>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	f7fc f838 	bl	8000b2c <__aeabi_dcmplt>
 8004abc:	b1d0      	cbz	r0, 8004af4 <getAngleDiff+0xa4>
      angle_rad += 2.0f * M_PI;
 8004abe:	f20f 1930 	addw	r9, pc, #304	; 0x130
 8004ac2:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad < -M_PI) {
 8004ac6:	a54c      	add	r5, pc, #304	; (adr r5, 8004bf8 <getAngleDiff+0x1a8>)
 8004ac8:	e9d5 4500 	ldrd	r4, r5, [r5]
      angle_rad += 2.0f * M_PI;
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	f7fb fc02 	bl	80002dc <__adddf3>
 8004ad8:	f7fc f8ae 	bl	8000c38 <__aeabi_d2f>
 8004adc:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8004ae0:	f7fb fd5a 	bl	8000598 <__aeabi_f2d>
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	4606      	mov	r6, r0
 8004aea:	460f      	mov	r7, r1
 8004aec:	f7fc f81e 	bl	8000b2c <__aeabi_dcmplt>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d1eb      	bne.n	8004acc <getAngleDiff+0x7c>
    while (angle_rad > M_PI) {
 8004af4:	ee18 0a90 	vmov	r0, s17
 8004af8:	f7fb fd4e 	bl	8000598 <__aeabi_f2d>
 8004afc:	a33a      	add	r3, pc, #232	; (adr r3, 8004be8 <getAngleDiff+0x198>)
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	4604      	mov	r4, r0
 8004b04:	460d      	mov	r5, r1
 8004b06:	f7fc f82f 	bl	8000b68 <__aeabi_dcmpgt>
 8004b0a:	b1d8      	cbz	r0, 8004b44 <getAngleDiff+0xf4>
      angle_rad -= 2.0f * M_PI;
 8004b0c:	f20f 09e0 	addw	r9, pc, #224	; 0xe0
 8004b10:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad > M_PI) {
 8004b14:	f20f 0bd0 	addw	fp, pc, #208	; 0xd0
 8004b18:	e9db ab00 	ldrd	sl, fp, [fp]
      angle_rad -= 2.0f * M_PI;
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	4620      	mov	r0, r4
 8004b22:	4629      	mov	r1, r5
 8004b24:	f7fb fbd8 	bl	80002d8 <__aeabi_dsub>
 8004b28:	f7fc f886 	bl	8000c38 <__aeabi_d2f>
 8004b2c:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8004b30:	f7fb fd32 	bl	8000598 <__aeabi_f2d>
 8004b34:	4652      	mov	r2, sl
 8004b36:	465b      	mov	r3, fp
 8004b38:	4604      	mov	r4, r0
 8004b3a:	460d      	mov	r5, r1
 8004b3c:	f7fc f814 	bl	8000b68 <__aeabi_dcmpgt>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d1eb      	bne.n	8004b1c <getAngleDiff+0xcc>
    while (angle_rad < -M_PI) {
 8004b44:	a32c      	add	r3, pc, #176	; (adr r3, 8004bf8 <getAngleDiff+0x1a8>)
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	f7fb ffed 	bl	8000b2c <__aeabi_dcmplt>
 8004b52:	b1d8      	cbz	r0, 8004b8c <getAngleDiff+0x13c>
      angle_rad += 2.0f * M_PI;
 8004b54:	f20f 0998 	addw	r9, pc, #152	; 0x98
 8004b58:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad < -M_PI) {
 8004b5c:	f20f 0b98 	addw	fp, pc, #152	; 0x98
 8004b60:	e9db ab00 	ldrd	sl, fp, [fp]
      angle_rad += 2.0f * M_PI;
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	4620      	mov	r0, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f7fb fbb6 	bl	80002dc <__adddf3>
 8004b70:	f7fc f862 	bl	8000c38 <__aeabi_d2f>
 8004b74:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8004b78:	f7fb fd0e 	bl	8000598 <__aeabi_f2d>
 8004b7c:	4652      	mov	r2, sl
 8004b7e:	465b      	mov	r3, fp
 8004b80:	4604      	mov	r4, r0
 8004b82:	460d      	mov	r5, r1
 8004b84:	f7fb ffd2 	bl	8000b2c <__aeabi_dcmplt>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d1eb      	bne.n	8004b64 <getAngleDiff+0x114>
    angle_rad1 = normalizeAngle(angle_rad1);
    angle_rad2 = normalizeAngle(angle_rad2);
    if (fabs(angle_rad1 - angle_rad2) > M_PI) {
 8004b8c:	ee38 9a68 	vsub.f32	s18, s16, s17
 8004b90:	eef0 7ac9 	vabs.f32	s15, s18
 8004b94:	ee17 0a90 	vmov	r0, s15
 8004b98:	f7fb fcfe 	bl	8000598 <__aeabi_f2d>
 8004b9c:	a312      	add	r3, pc, #72	; (adr r3, 8004be8 <getAngleDiff+0x198>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f7fb ffe1 	bl	8000b68 <__aeabi_dcmpgt>
 8004ba6:	b198      	cbz	r0, 8004bd0 <getAngleDiff+0x180>
      if (angle_rad1 > angle_rad2) {
 8004ba8:	eef4 8ac8 	vcmpe.f32	s17, s16
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8004bb0:	a30f      	add	r3, pc, #60	; (adr r3, 8004bf0 <getAngleDiff+0x1a0>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4639      	mov	r1, r7
      if (angle_rad1 > angle_rad2) {
 8004bba:	d40f      	bmi.n	8004bdc <getAngleDiff+0x18c>
      } else {
        return (angle_rad1 + 2 * M_PI) - angle_rad2;
 8004bbc:	f7fb fb8e 	bl	80002dc <__adddf3>
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	462b      	mov	r3, r5
 8004bc4:	f7fb fb88 	bl	80002d8 <__aeabi_dsub>
 8004bc8:	f7fc f836 	bl	8000c38 <__aeabi_d2f>
 8004bcc:	ee09 0a10 	vmov	s18, r0
      }
    } else {
      return angle_rad1 - angle_rad2;
    }
}
 8004bd0:	eeb0 0a49 	vmov.f32	s0, s18
 8004bd4:	ecbd 8b04 	vpop	{d8-d9}
 8004bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8004bdc:	f7fb fb7c 	bl	80002d8 <__aeabi_dsub>
 8004be0:	e7ee      	b.n	8004bc0 <getAngleDiff+0x170>
 8004be2:	bf00      	nop
 8004be4:	f3af 8000 	nop.w
 8004be8:	54442d18 	.word	0x54442d18
 8004bec:	400921fb 	.word	0x400921fb
 8004bf0:	54442d18 	.word	0x54442d18
 8004bf4:	401921fb 	.word	0x401921fb
 8004bf8:	54442d18 	.word	0x54442d18
 8004bfc:	c00921fb 	.word	0xc00921fb

08004c00 <decode_SW>:

uint8_t decode_SW(uint16_t sw_raw_data)
{
    int data;
    if (sw_raw_data < 100) {
 8004c00:	2863      	cmp	r0, #99	; 0x63
 8004c02:	d906      	bls.n	8004c12 <decode_SW+0x12>
      data = 0b00010000;  // C
    } else if (sw_raw_data < 500 && sw_raw_data > 100) {
 8004c04:	f1a0 0365 	sub.w	r3, r0, #101	; 0x65
 8004c08:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8004c0c:	d803      	bhi.n	8004c16 <decode_SW+0x16>
 8004c0e:	2002      	movs	r0, #2
 8004c10:	4770      	bx	lr
 8004c12:	2010      	movs	r0, #16
 8004c14:	4770      	bx	lr
      data = 0b00000010;  // B
    } else if (sw_raw_data < 2000 && sw_raw_data > 500) {
 8004c16:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 8004c1a:	1883      	adds	r3, r0, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f240 52da 	movw	r2, #1498	; 0x5da
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d910      	bls.n	8004c48 <decode_SW+0x48>
      data = 0b00000100;  // R
    } else if (sw_raw_data < 3000 && sw_raw_data > 2000) {
 8004c26:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
 8004c2a:	18c3      	adds	r3, r0, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d90a      	bls.n	8004c4c <decode_SW+0x4c>
      data = 0b00000001;  // F
    } else if (sw_raw_data < 4000 && sw_raw_data > 3000) {
 8004c36:	f6a0 30b9 	subw	r0, r0, #3001	; 0xbb9
 8004c3a:	b280      	uxth	r0, r0
 8004c3c:	4290      	cmp	r0, r2
 8004c3e:	bf8c      	ite	hi
 8004c40:	2000      	movhi	r0, #0
 8004c42:	2001      	movls	r0, #1
      data = 0b00001000;  // L
    } else {
      data = 0b00000000;
    }
    return data;
 8004c44:	00c0      	lsls	r0, r0, #3
 8004c46:	4770      	bx	lr
 8004c48:	2004      	movs	r0, #4
 8004c4a:	4770      	bx	lr
 8004c4c:	2001      	movs	r0, #1
}
 8004c4e:	4770      	bx	lr

08004c50 <two_to_float>:

float two_to_float(uint8_t data[2]) { return (float)((data[0] << 8 | data[1]) - 32767.0) / 32767.0; }
 8004c50:	b508      	push	{r3, lr}
 8004c52:	8800      	ldrh	r0, [r0, #0]
 8004c54:	ba40      	rev16	r0, r0
 8004c56:	b280      	uxth	r0, r0
 8004c58:	f7fb fc8c 	bl	8000574 <__aeabi_i2d>
 8004c5c:	a30a      	add	r3, pc, #40	; (adr r3, 8004c88 <two_to_float+0x38>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f7fb fb39 	bl	80002d8 <__aeabi_dsub>
 8004c66:	f7fb ffe7 	bl	8000c38 <__aeabi_d2f>
 8004c6a:	f7fb fc95 	bl	8000598 <__aeabi_f2d>
 8004c6e:	a308      	add	r3, pc, #32	; (adr r3, 8004c90 <two_to_float+0x40>)
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f7fb fce8 	bl	8000648 <__aeabi_dmul>
 8004c78:	f7fb ffde 	bl	8000c38 <__aeabi_d2f>
 8004c7c:	ee00 0a10 	vmov	s0, r0
 8004c80:	bd08      	pop	{r3, pc}
 8004c82:	bf00      	nop
 8004c84:	f3af 8000 	nop.w
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	40dfffc0 	.word	0x40dfffc0
 8004c90:	00400080 	.word	0x00400080
 8004c94:	3f000020 	.word	0x3f000020

08004c98 <two_to_int>:
float two_to_int(uint8_t data[2]) { return ((data[0] << 8 | data[1]) - 32767.0); }
 8004c98:	b508      	push	{r3, lr}
 8004c9a:	8800      	ldrh	r0, [r0, #0]
 8004c9c:	ba40      	rev16	r0, r0
 8004c9e:	b280      	uxth	r0, r0
 8004ca0:	f7fb fc68 	bl	8000574 <__aeabi_i2d>
 8004ca4:	a304      	add	r3, pc, #16	; (adr r3, 8004cb8 <two_to_int+0x20>)
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f7fb fb15 	bl	80002d8 <__aeabi_dsub>
 8004cae:	f7fb ffc3 	bl	8000c38 <__aeabi_d2f>
 8004cb2:	ee00 0a10 	vmov	s0, r0
 8004cb6:	bd08      	pop	{r3, pc}
 8004cb8:	00000000 	.word	0x00000000
 8004cbc:	40dfffc0 	.word	0x40dfffc0

08004cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004cc0:	480d      	ldr	r0, [pc, #52]	; (8004cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004cc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cc4:	480d      	ldr	r0, [pc, #52]	; (8004cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8004cc6:	490e      	ldr	r1, [pc, #56]	; (8004d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <LoopForever+0xe>)
  movs r3, #0
 8004cca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004ccc:	e002      	b.n	8004cd4 <LoopCopyDataInit>

08004cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cd2:	3304      	adds	r3, #4

08004cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cd8:	d3f9      	bcc.n	8004cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cda:	4a0b      	ldr	r2, [pc, #44]	; (8004d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004cdc:	4c0b      	ldr	r4, [pc, #44]	; (8004d0c <LoopForever+0x16>)
  movs r3, #0
 8004cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ce0:	e001      	b.n	8004ce6 <LoopFillZerobss>

08004ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ce4:	3204      	adds	r2, #4

08004ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ce8:	d3fb      	bcc.n	8004ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cea:	f7ff fb9b 	bl	8004424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cee:	f005 fb11 	bl	800a314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004cf2:	f7fe ffd5 	bl	8003ca0 <main>

08004cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8004cf6:	e7fe      	b.n	8004cf6 <LoopForever>
  ldr   r0, =_estack
 8004cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d00:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004d04:	0800dae8 	.word	0x0800dae8
  ldr r2, =_sbss
 8004d08:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004d0c:	200017dc 	.word	0x200017dc

08004d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d10:	e7fe      	b.n	8004d10 <ADC1_2_IRQHandler>
	...

08004d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d14:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_InitTick+0x40>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b90b      	cbnz	r3, 8004d20 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d1c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004d20:	490d      	ldr	r1, [pc, #52]	; (8004d58 <HAL_InitTick+0x44>)
 8004d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d26:	4605      	mov	r5, r0
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	6808      	ldr	r0, [r1, #0]
 8004d2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d32:	f000 fe19 	bl	8005968 <HAL_SYSTICK_Config>
 8004d36:	4604      	mov	r4, r0
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d1ef      	bne.n	8004d1c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d3c:	2d0f      	cmp	r5, #15
 8004d3e:	d8ed      	bhi.n	8004d1c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d40:	4602      	mov	r2, r0
 8004d42:	4629      	mov	r1, r5
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	f000 fdc2 	bl	80058d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_InitTick+0x48>)
 8004d4e:	4620      	mov	r0, r4
 8004d50:	601d      	str	r5, [r3, #0]
}
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	20000008 	.word	0x20000008
 8004d58:	20000004 	.word	0x20000004
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <HAL_Init>:
{
 8004d60:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d62:	2003      	movs	r0, #3
 8004d64:	f000 fda2 	bl	80058ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f7ff ffd3 	bl	8004d14 <HAL_InitTick>
 8004d6e:	b110      	cbz	r0, 8004d76 <HAL_Init+0x16>
    status = HAL_ERROR;
 8004d70:	2401      	movs	r4, #1
}
 8004d72:	4620      	mov	r0, r4
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	4604      	mov	r4, r0
    HAL_MspInit();
 8004d78:	f7ff fa90 	bl	800429c <HAL_MspInit>
}
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	bd10      	pop	{r4, pc}

08004d80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004d80:	4a03      	ldr	r2, [pc, #12]	; (8004d90 <HAL_IncTick+0x10>)
 8004d82:	4904      	ldr	r1, [pc, #16]	; (8004d94 <HAL_IncTick+0x14>)
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	6809      	ldr	r1, [r1, #0]
 8004d88:	440b      	add	r3, r1
 8004d8a:	6013      	str	r3, [r2, #0]
}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20001688 	.word	0x20001688
 8004d94:	20000008 	.word	0x20000008

08004d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	f7fe f842 	bl	8002e24 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004da0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004da2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004da4:	d002      	beq.n	8004dac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004da6:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_Delay+0x20>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004dac:	f7fe f83a 	bl	8002e24 <HAL_GetTick>
 8004db0:	1b43      	subs	r3, r0, r5
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	d3fa      	bcc.n	8004dac <HAL_Delay+0x14>
  {
  }
}
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	20000008 	.word	0x20000008

08004dbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004dbc:	b530      	push	{r4, r5, lr}
 8004dbe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	f000 80d4 	beq.w	8004f72 <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dca:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004dcc:	4604      	mov	r4, r0
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	f000 809d 	beq.w	8004f0e <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004dd4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004dd6:	6893      	ldr	r3, [r2, #8]
 8004dd8:	009d      	lsls	r5, r3, #2
 8004dda:	d505      	bpl.n	8004de8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ddc:	6893      	ldr	r3, [r2, #8]
 8004dde:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004de2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004de6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004de8:	6893      	ldr	r3, [r2, #8]
 8004dea:	00d8      	lsls	r0, r3, #3
 8004dec:	d419      	bmi.n	8004e22 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dee:	4b7e      	ldr	r3, [pc, #504]	; (8004fe8 <HAL_ADC_Init+0x22c>)
 8004df0:	487e      	ldr	r0, [pc, #504]	; (8004fec <HAL_ADC_Init+0x230>)
 8004df2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004df4:	6891      	ldr	r1, [r2, #8]
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	fba0 0303 	umull	r0, r3, r0, r3
 8004dfc:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004e00:	099b      	lsrs	r3, r3, #6
 8004e02:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004e06:	3301      	adds	r3, #1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004e0e:	6091      	str	r1, [r2, #8]
 8004e10:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004e12:	9b01      	ldr	r3, [sp, #4]
 8004e14:	b12b      	cbz	r3, 8004e22 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004e1c:	9b01      	ldr	r3, [sp, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f9      	bne.n	8004e16 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e22:	6893      	ldr	r3, [r2, #8]
 8004e24:	00d9      	lsls	r1, r3, #3
 8004e26:	d464      	bmi.n	8004ef2 <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e2a:	f043 0310 	orr.w	r3, r3, #16
 8004e2e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e30:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004e32:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e34:	4303      	orrs	r3, r0
 8004e36:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e38:	6893      	ldr	r3, [r2, #8]
 8004e3a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e40:	d15e      	bne.n	8004f00 <HAL_ADC_Init+0x144>
 8004e42:	06db      	lsls	r3, r3, #27
 8004e44:	d45c      	bmi.n	8004f00 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e52:	6893      	ldr	r3, [r2, #8]
 8004e54:	07dd      	lsls	r5, r3, #31
 8004e56:	d419      	bmi.n	8004e8c <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e58:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004e5c:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <HAL_ADC_Init+0x234>)
 8004e5e:	f000 80a0 	beq.w	8004fa2 <HAL_ADC_Init+0x1e6>
 8004e62:	429a      	cmp	r2, r3
 8004e64:	f000 80a5 	beq.w	8004fb2 <HAL_ADC_Init+0x1f6>
 8004e68:	4962      	ldr	r1, [pc, #392]	; (8004ff4 <HAL_ADC_Init+0x238>)
 8004e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6e:	6889      	ldr	r1, [r1, #8]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	430b      	orrs	r3, r1
 8004e74:	4960      	ldr	r1, [pc, #384]	; (8004ff8 <HAL_ADC_Init+0x23c>)
 8004e76:	6889      	ldr	r1, [r1, #8]
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	07d9      	lsls	r1, r3, #31
 8004e7c:	d406      	bmi.n	8004e8c <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e7e:	495f      	ldr	r1, [pc, #380]	; (8004ffc <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e80:	688b      	ldr	r3, [r1, #8]
 8004e82:	6865      	ldr	r5, [r4, #4]
 8004e84:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004e88:	432b      	orrs	r3, r5
 8004e8a:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004e8c:	68e5      	ldr	r5, [r4, #12]
 8004e8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e90:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004e94:	432b      	orrs	r3, r5
 8004e96:	68a5      	ldr	r5, [r4, #8]
 8004e98:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e9a:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e9c:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8004e9e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ea2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ea6:	d05f      	beq.n	8004f68 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ea8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004eaa:	b121      	cbz	r1, 8004eb6 <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004eac:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eae:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004eb2:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eb4:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004eb6:	68d5      	ldr	r5, [r2, #12]
 8004eb8:	4951      	ldr	r1, [pc, #324]	; (8005000 <HAL_ADC_Init+0x244>)
 8004eba:	4029      	ands	r1, r5
 8004ebc:	4319      	orrs	r1, r3
 8004ebe:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004ec0:	6913      	ldr	r3, [r2, #16]
 8004ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ec4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ecc:	6893      	ldr	r3, [r2, #8]
 8004ece:	075b      	lsls	r3, r3, #29
 8004ed0:	d523      	bpl.n	8004f1a <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ed2:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ed4:	6963      	ldr	r3, [r4, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d04e      	beq.n	8004f78 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004eda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004edc:	f023 030f 	bic.w	r3, r3, #15
 8004ee0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ee2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ee4:	f023 0303 	bic.w	r3, r3, #3
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004eee:	b003      	add	sp, #12
 8004ef0:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ef2:	6893      	ldr	r3, [r2, #8]
 8004ef4:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ef8:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004efc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004efe:	d0a0      	beq.n	8004e42 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004f02:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f04:	f043 0310 	orr.w	r3, r3, #16
 8004f08:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004f0a:	b003      	add	sp, #12
 8004f0c:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004f0e:	f7fc fa11 	bl	8001334 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004f12:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004f14:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004f18:	e75c      	b.n	8004dd4 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f1a:	6893      	ldr	r3, [r2, #8]
 8004f1c:	071d      	lsls	r5, r3, #28
 8004f1e:	d4d9      	bmi.n	8004ed4 <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f20:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f26:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f28:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f2c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f2e:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f32:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f36:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8004f38:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f3a:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f3c:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004f3e:	bb19      	cbnz	r1, 8004f88 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f44:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f46:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004f4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004f56:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d032      	beq.n	8004fc4 <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f5e:	6913      	ldr	r3, [r2, #16]
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	6113      	str	r3, [r2, #16]
 8004f66:	e7b5      	b.n	8004ed4 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004f6a:	3901      	subs	r1, #1
 8004f6c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004f70:	e79a      	b.n	8004ea8 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 8004f72:	2001      	movs	r0, #1
}
 8004f74:	b003      	add	sp, #12
 8004f76:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f78:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004f7a:	6a23      	ldr	r3, [r4, #32]
 8004f7c:	f021 010f 	bic.w	r1, r1, #15
 8004f80:	3b01      	subs	r3, #1
 8004f82:	430b      	orrs	r3, r1
 8004f84:	6313      	str	r3, [r2, #48]	; 0x30
 8004f86:	e7ac      	b.n	8004ee2 <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f8e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004f92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004fa0:	e7d9      	b.n	8004f56 <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fa2:	6891      	ldr	r1, [r2, #8]
 8004fa4:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	f53f af6f 	bmi.w	8004e8c <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fae:	4915      	ldr	r1, [pc, #84]	; (8005004 <HAL_ADC_Init+0x248>)
 8004fb0:	e766      	b.n	8004e80 <HAL_ADC_Init+0xc4>
 8004fb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	07d9      	lsls	r1, r3, #31
 8004fbe:	f53f af65 	bmi.w	8004e8c <HAL_ADC_Init+0xd0>
 8004fc2:	e7f4      	b.n	8004fae <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004fc4:	6911      	ldr	r1, [r2, #16]
 8004fc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fc8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004fca:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004fce:	f021 0104 	bic.w	r1, r1, #4
 8004fd2:	432b      	orrs	r3, r5
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6113      	str	r3, [r2, #16]
 8004fe4:	e776      	b.n	8004ed4 <HAL_ADC_Init+0x118>
 8004fe6:	bf00      	nop
 8004fe8:	20000004 	.word	0x20000004
 8004fec:	053e2d63 	.word	0x053e2d63
 8004ff0:	50000100 	.word	0x50000100
 8004ff4:	50000400 	.word	0x50000400
 8004ff8:	50000600 	.word	0x50000600
 8004ffc:	50000700 	.word	0x50000700
 8005000:	fff04007 	.word	0xfff04007
 8005004:	50000300 	.word	0x50000300

08005008 <HAL_ADC_ConvCpltCallback>:
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop

0800500c <HAL_ADC_ConvHalfCpltCallback>:
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005010:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005012:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005014:	f7ff fffa 	bl	800500c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005018:	bd08      	pop	{r3, pc}
 800501a:	bf00      	nop

0800501c <HAL_ADC_ErrorCallback>:
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop

08005020 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005020:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005024:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8005028:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800502a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800502c:	d11d      	bne.n	800506a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800502e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005036:	680a      	ldr	r2, [r1, #0]
 8005038:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800503c:	68ca      	ldr	r2, [r1, #12]
 800503e:	d01b      	beq.n	8005078 <ADC_DMAConvCplt+0x58>
 8005040:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005044:	d10d      	bne.n	8005062 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005046:	68ca      	ldr	r2, [r1, #12]
 8005048:	0494      	lsls	r4, r2, #18
 800504a:	d40a      	bmi.n	8005062 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800504c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800504e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005052:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005056:	04d1      	lsls	r1, r2, #19
 8005058:	d403      	bmi.n	8005062 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800505a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff ffd0 	bl	8005008 <HAL_ADC_ConvCpltCallback>
}
 8005068:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800506a:	06d2      	lsls	r2, r2, #27
 800506c:	d40a      	bmi.n	8005084 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005078:	0790      	lsls	r0, r2, #30
 800507a:	d5e7      	bpl.n	800504c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff ffc3 	bl	8005008 <HAL_ADC_ConvCpltCallback>
 8005082:	e7f1      	b.n	8005068 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff ffc9 	bl	800501c <HAL_ADC_ErrorCallback>
}
 800508a:	bd10      	pop	{r4, pc}

0800508c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800508e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005090:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005096:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005098:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800509a:	f043 0304 	orr.w	r3, r3, #4
 800509e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050a0:	f7ff ffbc 	bl	800501c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050a4:	bd08      	pop	{r3, pc}
 80050a6:	bf00      	nop

080050a8 <HAL_ADC_ConfigChannel>:
{
 80050a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80050aa:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80050ae:	b083      	sub	sp, #12
 80050b0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80050b2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80050b4:	f04f 0000 	mov.w	r0, #0
 80050b8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80050ba:	f000 8174 	beq.w	80053a6 <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050be:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80050c0:	2001      	movs	r0, #1
 80050c2:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050c6:	6894      	ldr	r4, [r2, #8]
 80050c8:	0766      	lsls	r6, r4, #29
 80050ca:	d45e      	bmi.n	800518a <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80050cc:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80050ce:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 80050d2:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80050d6:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80050da:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80050dc:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 80050e0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80050e4:	f854 500e 	ldr.w	r5, [r4, lr]
 80050e8:	261f      	movs	r6, #31
 80050ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80050ee:	fa06 fc0c 	lsl.w	ip, r6, ip
 80050f2:	ea25 0c0c 	bic.w	ip, r5, ip
 80050f6:	ea40 000c 	orr.w	r0, r0, ip
 80050fa:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050fe:	6890      	ldr	r0, [r2, #8]
 8005100:	0745      	lsls	r5, r0, #29
 8005102:	d572      	bpl.n	80051ea <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005104:	6890      	ldr	r0, [r2, #8]
 8005106:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005108:	6894      	ldr	r4, [r2, #8]
 800510a:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800510e:	4604      	mov	r4, r0
 8005110:	d10c      	bne.n	800512c <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005112:	4dbd      	ldr	r5, [pc, #756]	; (8005408 <HAL_ADC_ConfigChannel+0x360>)
 8005114:	68ce      	ldr	r6, [r1, #12]
 8005116:	42ae      	cmp	r6, r5
 8005118:	f000 80eb 	beq.w	80052f2 <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 800511c:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8005120:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005124:	ea21 0100 	bic.w	r1, r1, r0
 8005128:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800512c:	49b7      	ldr	r1, [pc, #732]	; (800540c <HAL_ADC_ConfigChannel+0x364>)
 800512e:	420c      	tst	r4, r1
 8005130:	d059      	beq.n	80051e6 <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005132:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005136:	f000 8134 	beq.w	80053a2 <HAL_ADC_ConfigChannel+0x2fa>
 800513a:	4db5      	ldr	r5, [pc, #724]	; (8005410 <HAL_ADC_ConfigChannel+0x368>)
 800513c:	49b5      	ldr	r1, [pc, #724]	; (8005414 <HAL_ADC_ConfigChannel+0x36c>)
 800513e:	48b6      	ldr	r0, [pc, #728]	; (8005418 <HAL_ADC_ConfigChannel+0x370>)
 8005140:	42aa      	cmp	r2, r5
 8005142:	bf18      	it	ne
 8005144:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005146:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005148:	49b4      	ldr	r1, [pc, #720]	; (800541c <HAL_ADC_ConfigChannel+0x374>)
 800514a:	428c      	cmp	r4, r1
 800514c:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8005150:	d024      	beq.n	800519c <HAL_ADC_ConfigChannel+0xf4>
 8005152:	49b3      	ldr	r1, [pc, #716]	; (8005420 <HAL_ADC_ConfigChannel+0x378>)
 8005154:	428c      	cmp	r4, r1
 8005156:	d021      	beq.n	800519c <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005158:	49b2      	ldr	r1, [pc, #712]	; (8005424 <HAL_ADC_ConfigChannel+0x37c>)
 800515a:	428c      	cmp	r4, r1
 800515c:	f040 8139 	bne.w	80053d2 <HAL_ADC_ConfigChannel+0x32a>
 8005160:	01c4      	lsls	r4, r0, #7
 8005162:	d440      	bmi.n	80051e6 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005164:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005168:	f000 8215 	beq.w	8005596 <HAL_ADC_ConfigChannel+0x4ee>
 800516c:	4ca8      	ldr	r4, [pc, #672]	; (8005410 <HAL_ADC_ConfigChannel+0x368>)
 800516e:	49a9      	ldr	r1, [pc, #676]	; (8005414 <HAL_ADC_ConfigChannel+0x36c>)
 8005170:	48a9      	ldr	r0, [pc, #676]	; (8005418 <HAL_ADC_ConfigChannel+0x370>)
 8005172:	42a2      	cmp	r2, r4
 8005174:	bf18      	it	ne
 8005176:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005178:	688a      	ldr	r2, [r1, #8]
 800517a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800517e:	432a      	orrs	r2, r5
 8005180:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005184:	2000      	movs	r0, #0
 8005186:	608a      	str	r2, [r1, #8]
}
 8005188:	e003      	b.n	8005192 <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800518a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800518c:	f042 0220 	orr.w	r2, r2, #32
 8005190:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005198:	b003      	add	sp, #12
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800519c:	0201      	lsls	r1, r0, #8
 800519e:	d422      	bmi.n	80051e6 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051a0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80051a4:	f000 8113 	beq.w	80053ce <HAL_ADC_ConfigChannel+0x326>
 80051a8:	499f      	ldr	r1, [pc, #636]	; (8005428 <HAL_ADC_ConfigChannel+0x380>)
 80051aa:	428a      	cmp	r2, r1
 80051ac:	d11b      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ae:	489a      	ldr	r0, [pc, #616]	; (8005418 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051b0:	4a9e      	ldr	r2, [pc, #632]	; (800542c <HAL_ADC_ConfigChannel+0x384>)
 80051b2:	4c9f      	ldr	r4, [pc, #636]	; (8005430 <HAL_ADC_ConfigChannel+0x388>)
 80051b4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051b6:	6881      	ldr	r1, [r0, #8]
 80051b8:	0992      	lsrs	r2, r2, #6
 80051ba:	fba4 4202 	umull	r4, r2, r4, r2
 80051be:	0992      	lsrs	r2, r2, #6
 80051c0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80051c4:	3201      	adds	r2, #1
 80051c6:	4329      	orrs	r1, r5
 80051c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80051cc:	0092      	lsls	r2, r2, #2
 80051ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80051d2:	6081      	str	r1, [r0, #8]
 80051d4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80051d6:	9a01      	ldr	r2, [sp, #4]
 80051d8:	b12a      	cbz	r2, 80051e6 <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 80051da:	9a01      	ldr	r2, [sp, #4]
 80051dc:	3a01      	subs	r2, #1
 80051de:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80051e0:	9a01      	ldr	r2, [sp, #4]
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	d1f9      	bne.n	80051da <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e6:	2000      	movs	r0, #0
 80051e8:	e7d3      	b.n	8005192 <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051ea:	6890      	ldr	r0, [r2, #8]
 80051ec:	0700      	lsls	r0, r0, #28
 80051ee:	d47e      	bmi.n	80052ee <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051f0:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80051f2:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051f4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80051f8:	f000 8120 	beq.w	800543c <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80051fc:	0dee      	lsrs	r6, r5, #23
 80051fe:	f102 0c14 	add.w	ip, r2, #20
 8005202:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8005206:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800520a:	f85c 4006 	ldr.w	r4, [ip, r6]
 800520e:	2707      	movs	r7, #7
 8005210:	40a8      	lsls	r0, r5
 8005212:	fa07 f505 	lsl.w	r5, r7, r5
 8005216:	ea24 0405 	bic.w	r4, r4, r5
 800521a:	4320      	orrs	r0, r4
 800521c:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005220:	6950      	ldr	r0, [r2, #20]
 8005222:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005226:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005228:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800522c:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800522e:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005230:	d02d      	beq.n	800528e <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005232:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005236:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800523a:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 800523c:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8005240:	4f7c      	ldr	r7, [pc, #496]	; (8005434 <HAL_ADC_ConfigChannel+0x38c>)
 8005242:	4086      	lsls	r6, r0
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	ea0c 0707 	and.w	r7, ip, r7
 800524a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800524e:	4338      	orrs	r0, r7
 8005250:	4330      	orrs	r0, r6
 8005252:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005256:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800525a:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800525c:	698e      	ldr	r6, [r1, #24]
 800525e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005262:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8005266:	4330      	orrs	r0, r6
 8005268:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800526c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800526e:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8005270:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005274:	f1a5 0501 	sub.w	r5, r5, #1
 8005278:	fab5 f585 	clz	r5, r5
 800527c:	096d      	lsrs	r5, r5, #5
 800527e:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8005282:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8005286:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 800528a:	6808      	ldr	r0, [r1, #0]
}
 800528c:	e73c      	b.n	8005108 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800528e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005290:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005292:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005294:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005298:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800529c:	2d00      	cmp	r5, #0
 800529e:	f040 80df 	bne.w	8005460 <HAL_ADC_ConfigChannel+0x3b8>
 80052a2:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052a6:	42ac      	cmp	r4, r5
 80052a8:	f000 813d 	beq.w	8005526 <HAL_ADC_ConfigChannel+0x47e>
 80052ac:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80052ae:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052b0:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052b4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80052b8:	f102 0764 	add.w	r7, r2, #100	; 0x64
 80052bc:	42ae      	cmp	r6, r5
 80052be:	f000 8158 	beq.w	8005572 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052c2:	68a6      	ldr	r6, [r4, #8]
 80052c4:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052c6:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052ca:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80052ce:	42ae      	cmp	r6, r5
 80052d0:	f000 813d 	beq.w	800554e <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052d4:	68e6      	ldr	r6, [r4, #12]
 80052d6:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052d8:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052dc:	f3c6 6484 	ubfx	r4, r6, #26, #5
 80052e0:	42a5      	cmp	r5, r4
 80052e2:	f47f af11 	bne.w	8005108 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 80052e6:	6838      	ldr	r0, [r7, #0]
 80052e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80052ec:	6038      	str	r0, [r7, #0]
 80052ee:	6808      	ldr	r0, [r1, #0]
}
 80052f0:	e70a      	b.n	8005108 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 80052f2:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80052f6:	f3c0 0512 	ubfx	r5, r0, #0, #19
 80052fa:	432c      	orrs	r4, r5
 80052fc:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005300:	2d00      	cmp	r5, #0
 8005302:	d053      	beq.n	80053ac <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005304:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005308:	2c00      	cmp	r4, #0
 800530a:	f000 80e8 	beq.w	80054de <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800530e:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005312:	3401      	adds	r4, #1
 8005314:	f004 041f 	and.w	r4, r4, #31
 8005318:	2c09      	cmp	r4, #9
 800531a:	f240 80e0 	bls.w	80054de <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005322:	2c00      	cmp	r4, #0
 8005324:	f000 813d 	beq.w	80055a2 <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8005328:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800532c:	3401      	adds	r4, #1
 800532e:	06a4      	lsls	r4, r4, #26
 8005330:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005338:	2d00      	cmp	r5, #0
 800533a:	f000 8130 	beq.w	800559e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800533e:	fab5 f585 	clz	r5, r5
 8005342:	3501      	adds	r5, #1
 8005344:	f005 051f 	and.w	r5, r5, #31
 8005348:	2601      	movs	r6, #1
 800534a:	fa06 f505 	lsl.w	r5, r6, r5
 800534e:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005350:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005354:	2800      	cmp	r0, #0
 8005356:	f000 8120 	beq.w	800559a <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 800535a:	fab0 f080 	clz	r0, r0
 800535e:	1c45      	adds	r5, r0, #1
 8005360:	f005 051f 	and.w	r5, r5, #31
 8005364:	2003      	movs	r0, #3
 8005366:	f06f 061d 	mvn.w	r6, #29
 800536a:	fb10 6005 	smlabb	r0, r0, r5, r6
 800536e:	0500      	lsls	r0, r0, #20
 8005370:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005374:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005376:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005378:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800537a:	f005 0504 	and.w	r5, r5, #4
 800537e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005382:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005386:	fa04 fc00 	lsl.w	ip, r4, r0
 800538a:	f04f 0e07 	mov.w	lr, #7
 800538e:	5974      	ldr	r4, [r6, r5]
 8005390:	fa0e f000 	lsl.w	r0, lr, r0
 8005394:	ea24 0000 	bic.w	r0, r4, r0
 8005398:	ea40 000c 	orr.w	r0, r0, ip
 800539c:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800539e:	680c      	ldr	r4, [r1, #0]
}
 80053a0:	e6c4      	b.n	800512c <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053a2:	491c      	ldr	r1, [pc, #112]	; (8005414 <HAL_ADC_ConfigChannel+0x36c>)
 80053a4:	e6cf      	b.n	8005146 <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 80053a6:	2002      	movs	r0, #2
}
 80053a8:	b003      	add	sp, #12
 80053aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80053ac:	0e80      	lsrs	r0, r0, #26
 80053ae:	3001      	adds	r0, #1
 80053b0:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053b4:	2d09      	cmp	r5, #9
 80053b6:	f200 8084 	bhi.w	80054c2 <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80053ba:	0684      	lsls	r4, r0, #26
 80053bc:	2001      	movs	r0, #1
 80053be:	40a8      	lsls	r0, r5
 80053c0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80053c4:	4304      	orrs	r4, r0
 80053c6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80053ca:	0500      	lsls	r0, r0, #20
 80053cc:	e7d2      	b.n	8005374 <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053ce:	4811      	ldr	r0, [pc, #68]	; (8005414 <HAL_ADC_ConfigChannel+0x36c>)
 80053d0:	e6ee      	b.n	80051b0 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80053d2:	4919      	ldr	r1, [pc, #100]	; (8005438 <HAL_ADC_ConfigChannel+0x390>)
 80053d4:	428c      	cmp	r4, r1
 80053d6:	f47f af06 	bne.w	80051e6 <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80053da:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80053de:	f47f af02 	bne.w	80051e6 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 80053e2:	490b      	ldr	r1, [pc, #44]	; (8005410 <HAL_ADC_ConfigChannel+0x368>)
 80053e4:	428a      	cmp	r2, r1
 80053e6:	f43f aefe 	beq.w	80051e6 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053ea:	4c0b      	ldr	r4, [pc, #44]	; (8005418 <HAL_ADC_ConfigChannel+0x370>)
 80053ec:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80053f0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80053f4:	bf18      	it	ne
 80053f6:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80053f8:	688a      	ldr	r2, [r1, #8]
 80053fa:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80053fe:	432a      	orrs	r2, r5
 8005400:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005404:	608a      	str	r2, [r1, #8]
}
 8005406:	e6c4      	b.n	8005192 <HAL_ADC_ConfigChannel+0xea>
 8005408:	407f0000 	.word	0x407f0000
 800540c:	80080000 	.word	0x80080000
 8005410:	50000100 	.word	0x50000100
 8005414:	50000300 	.word	0x50000300
 8005418:	50000700 	.word	0x50000700
 800541c:	c3210000 	.word	0xc3210000
 8005420:	90c00010 	.word	0x90c00010
 8005424:	c7520000 	.word	0xc7520000
 8005428:	50000600 	.word	0x50000600
 800542c:	20000004 	.word	0x20000004
 8005430:	053e2d63 	.word	0x053e2d63
 8005434:	03fff000 	.word	0x03fff000
 8005438:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800543c:	0de8      	lsrs	r0, r5, #23
 800543e:	f000 0004 	and.w	r0, r0, #4
 8005442:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 8005446:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800544a:	2607      	movs	r6, #7
 800544c:	40ae      	lsls	r6, r5
 800544e:	5825      	ldr	r5, [r4, r0]
 8005450:	ea25 0506 	bic.w	r5, r5, r6
 8005454:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005456:	6950      	ldr	r0, [r2, #20]
 8005458:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800545c:	6150      	str	r0, [r2, #20]
}
 800545e:	e6e3      	b.n	8005228 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005464:	b11d      	cbz	r5, 800546e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005466:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800546a:	42ac      	cmp	r4, r5
 800546c:	d05b      	beq.n	8005526 <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800546e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005470:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005472:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005476:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800547a:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005482:	b11d      	cbz	r5, 800548c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8005484:	fab5 f585 	clz	r5, r5
 8005488:	42ae      	cmp	r6, r5
 800548a:	d072      	beq.n	8005572 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800548c:	68a5      	ldr	r5, [r4, #8]
 800548e:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005490:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005494:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800549c:	b11d      	cbz	r5, 80054a6 <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 800549e:	fab5 f585 	clz	r5, r5
 80054a2:	42ae      	cmp	r6, r5
 80054a4:	d053      	beq.n	800554e <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054a6:	68e5      	ldr	r5, [r4, #12]
 80054a8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054aa:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054ae:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	f43f ae26 	beq.w	8005108 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 80054bc:	fab5 f585 	clz	r5, r5
 80054c0:	e70e      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054c2:	0684      	lsls	r4, r0, #26
 80054c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80054c8:	381e      	subs	r0, #30
 80054ca:	2601      	movs	r6, #1
 80054cc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80054d0:	0500      	lsls	r0, r0, #20
 80054d2:	fa06 f505 	lsl.w	r5, r6, r5
 80054d6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80054da:	432c      	orrs	r4, r5
 80054dc:	e74a      	b.n	8005374 <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80054e2:	2c00      	cmp	r4, #0
 80054e4:	d065      	beq.n	80055b2 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 80054e6:	fab4 f484 	clz	r4, r4
 80054ea:	3401      	adds	r4, #1
 80054ec:	06a4      	lsls	r4, r4, #26
 80054ee:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80054f6:	2d00      	cmp	r5, #0
 80054f8:	d059      	beq.n	80055ae <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 80054fa:	fab5 f585 	clz	r5, r5
 80054fe:	3501      	adds	r5, #1
 8005500:	f005 051f 	and.w	r5, r5, #31
 8005504:	2601      	movs	r6, #1
 8005506:	fa06 f505 	lsl.w	r5, r6, r5
 800550a:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005510:	2800      	cmp	r0, #0
 8005512:	d049      	beq.n	80055a8 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8005514:	fab0 f080 	clz	r0, r0
 8005518:	3001      	adds	r0, #1
 800551a:	f000 001f 	and.w	r0, r0, #31
 800551e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005522:	0500      	lsls	r0, r0, #20
 8005524:	e726      	b.n	8005374 <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 8005526:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005528:	4614      	mov	r4, r2
 800552a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800552e:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005532:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005534:	6808      	ldr	r0, [r1, #0]
 8005536:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005538:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800553c:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005540:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005544:	2d00      	cmp	r5, #0
 8005546:	d19a      	bne.n	800547e <HAL_ADC_ConfigChannel+0x3d6>
 8005548:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800554c:	e6b6      	b.n	80052bc <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 800554e:	6838      	ldr	r0, [r7, #0]
 8005550:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005554:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005556:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005558:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800555a:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800555e:	68e4      	ldr	r4, [r4, #12]
 8005560:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005564:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005568:	2d00      	cmp	r5, #0
 800556a:	d1a2      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x40a>
 800556c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005570:	e6b6      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8005572:	6838      	ldr	r0, [r7, #0]
 8005574:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005578:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800557a:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800557c:	6808      	ldr	r0, [r1, #0]
 800557e:	68a6      	ldr	r6, [r4, #8]
 8005580:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005584:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005588:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800558c:	2d00      	cmp	r5, #0
 800558e:	d183      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x3f0>
 8005590:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005594:	e69b      	b.n	80052ce <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005596:	4908      	ldr	r1, [pc, #32]	; (80055b8 <HAL_ADC_ConfigChannel+0x510>)
 8005598:	e5ee      	b.n	8005178 <HAL_ADC_ConfigChannel+0xd0>
 800559a:	4808      	ldr	r0, [pc, #32]	; (80055bc <HAL_ADC_ConfigChannel+0x514>)
 800559c:	e6ea      	b.n	8005374 <HAL_ADC_ConfigChannel+0x2cc>
 800559e:	2502      	movs	r5, #2
 80055a0:	e6d5      	b.n	800534e <HAL_ADC_ConfigChannel+0x2a6>
 80055a2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80055a6:	e6c5      	b.n	8005334 <HAL_ADC_ConfigChannel+0x28c>
 80055a8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80055ac:	e6e2      	b.n	8005374 <HAL_ADC_ConfigChannel+0x2cc>
 80055ae:	2502      	movs	r5, #2
 80055b0:	e7ab      	b.n	800550a <HAL_ADC_ConfigChannel+0x462>
 80055b2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80055b6:	e79c      	b.n	80054f2 <HAL_ADC_ConfigChannel+0x44a>
 80055b8:	50000300 	.word	0x50000300
 80055bc:	fe500000 	.word	0xfe500000

080055c0 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055c0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	07d2      	lsls	r2, r2, #31
 80055c6:	d501      	bpl.n	80055cc <ADC_Enable+0xc>
  return HAL_OK;
 80055c8:	2000      	movs	r0, #0
}
 80055ca:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80055cc:	6899      	ldr	r1, [r3, #8]
 80055ce:	4a18      	ldr	r2, [pc, #96]	; (8005630 <ADC_Enable+0x70>)
 80055d0:	4211      	tst	r1, r2
{
 80055d2:	b570      	push	{r4, r5, r6, lr}
 80055d4:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80055d6:	d008      	beq.n	80055ea <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055d8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80055da:	f043 0310 	orr.w	r3, r3, #16
 80055de:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055e0:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 80055e2:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055e4:	4303      	orrs	r3, r0
 80055e6:	6633      	str	r3, [r6, #96]	; 0x60
}
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	4d11      	ldr	r5, [pc, #68]	; (8005634 <ADC_Enable+0x74>)
 80055ee:	402a      	ands	r2, r5
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80055f6:	f7fd fc15 	bl	8002e24 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055fa:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80055fc:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	07d0      	lsls	r0, r2, #31
 8005602:	d413      	bmi.n	800562c <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	07d1      	lsls	r1, r2, #31
 8005608:	d404      	bmi.n	8005614 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	402a      	ands	r2, r5
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005614:	f7fd fc06 	bl	8002e24 <HAL_GetTick>
 8005618:	1b03      	subs	r3, r0, r4
 800561a:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800561c:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800561e:	d9ee      	bls.n	80055fe <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	07d2      	lsls	r2, r2, #31
 8005624:	d5d8      	bpl.n	80055d8 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	07d0      	lsls	r0, r2, #31
 800562a:	d5eb      	bpl.n	8005604 <ADC_Enable+0x44>
  return HAL_OK;
 800562c:	2000      	movs	r0, #0
}
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	8000003f 	.word	0x8000003f
 8005634:	7fffffc0 	.word	0x7fffffc0

08005638 <HAL_ADC_Start_DMA>:
{
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800563c:	6805      	ldr	r5, [r0, #0]
 800563e:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 8005642:	4604      	mov	r4, r0
 8005644:	460e      	mov	r6, r1
 8005646:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005648:	d022      	beq.n	8005690 <HAL_ADC_Start_DMA+0x58>
 800564a:	4a39      	ldr	r2, [pc, #228]	; (8005730 <HAL_ADC_Start_DMA+0xf8>)
 800564c:	4839      	ldr	r0, [pc, #228]	; (8005734 <HAL_ADC_Start_DMA+0xfc>)
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <HAL_ADC_Start_DMA+0x100>)
 8005650:	4295      	cmp	r5, r2
 8005652:	bf08      	it	eq
 8005654:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005656:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005658:	68ab      	ldr	r3, [r5, #8]
 800565a:	075b      	lsls	r3, r3, #29
 800565c:	d415      	bmi.n	800568a <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 800565e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005662:	2b01      	cmp	r3, #1
 8005664:	d011      	beq.n	800568a <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005666:	4b35      	ldr	r3, [pc, #212]	; (800573c <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8005668:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800566a:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800566c:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8005670:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005674:	d00e      	beq.n	8005694 <HAL_ADC_Start_DMA+0x5c>
 8005676:	f240 2321 	movw	r3, #545	; 0x221
 800567a:	fa23 f308 	lsr.w	r3, r3, r8
 800567e:	4003      	ands	r3, r0
 8005680:	d108      	bne.n	8005694 <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 8005682:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8005686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 800568a:	2002      	movs	r0, #2
}
 800568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005690:	4829      	ldr	r0, [pc, #164]	; (8005738 <HAL_ADC_Start_DMA+0x100>)
 8005692:	e7e0      	b.n	8005656 <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 8005694:	4620      	mov	r0, r4
 8005696:	f7ff ff93 	bl	80055c0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800569a:	2800      	cmp	r0, #0
 800569c:	d13f      	bne.n	800571e <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 800569e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056a0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80056a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ae:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056b0:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <HAL_ADC_Start_DMA+0xf8>)
 80056b2:	4299      	cmp	r1, r3
 80056b4:	d038      	beq.n	8005728 <HAL_ADC_Start_DMA+0xf0>
 80056b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d034      	beq.n	8005728 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80056be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80056c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056c4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80056c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80056c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056ca:	4d1d      	ldr	r5, [pc, #116]	; (8005740 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80056cc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80056d0:	bf1c      	itt	ne
 80056d2:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80056d4:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80056d8:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80056da:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80056dc:	4d19      	ldr	r5, [pc, #100]	; (8005744 <HAL_ADC_Start_DMA+0x10c>)
 80056de:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80056e0:	4d19      	ldr	r5, [pc, #100]	; (8005748 <HAL_ADC_Start_DMA+0x110>)
 80056e2:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80056e4:	251c      	movs	r5, #28
 80056e6:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 80056e8:	2500      	movs	r5, #0
 80056ea:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80056ee:	684d      	ldr	r5, [r1, #4]
 80056f0:	f045 0510 	orr.w	r5, r5, #16
 80056f4:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80056f6:	68cd      	ldr	r5, [r1, #12]
 80056f8:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80056fc:	463b      	mov	r3, r7
 80056fe:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005700:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005702:	3140      	adds	r1, #64	; 0x40
 8005704:	f000 f9e0 	bl	8005ac8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005708:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800570a:	6893      	ldr	r3, [r2, #8]
 800570c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005714:	f043 0304 	orr.w	r3, r3, #4
 8005718:	6093      	str	r3, [r2, #8]
}
 800571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800571e:	2300      	movs	r3, #0
 8005720:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8005724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005728:	f1b8 0f00 	cmp.w	r8, #0
 800572c:	d1cb      	bne.n	80056c6 <HAL_ADC_Start_DMA+0x8e>
 800572e:	e7c6      	b.n	80056be <HAL_ADC_Start_DMA+0x86>
 8005730:	50000100 	.word	0x50000100
 8005734:	50000700 	.word	0x50000700
 8005738:	50000300 	.word	0x50000300
 800573c:	50000600 	.word	0x50000600
 8005740:	08005021 	.word	0x08005021
 8005744:	08005011 	.word	0x08005011
 8005748:	0800508d 	.word	0x0800508d

0800574c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800574c:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800574e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005752:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8005754:	2a01      	cmp	r2, #1
{
 8005756:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8005758:	d056      	beq.n	8005808 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800575a:	6802      	ldr	r2, [r0, #0]
 800575c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800575e:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8005760:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005762:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005766:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005768:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800576c:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800576e:	d00b      	beq.n	8005788 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8005770:	4d48      	ldr	r5, [pc, #288]	; (8005894 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005772:	42aa      	cmp	r2, r5
 8005774:	d046      	beq.n	8005804 <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005776:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005778:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800577c:	f042 0220 	orr.w	r2, r2, #32
 8005780:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005782:	b01d      	add	sp, #116	; 0x74
 8005784:	bc70      	pop	{r4, r5, r6}
 8005786:	4770      	bx	lr
 8005788:	4843      	ldr	r0, [pc, #268]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800578a:	6880      	ldr	r0, [r0, #8]
 800578c:	0740      	lsls	r0, r0, #29
 800578e:	d50b      	bpl.n	80057a8 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005790:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005794:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005798:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579a:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80057a2:	b01d      	add	sp, #116	; 0x74
 80057a4:	bc70      	pop	{r4, r5, r6}
 80057a6:	4770      	bx	lr
 80057a8:	6890      	ldr	r0, [r2, #8]
 80057aa:	0744      	lsls	r4, r0, #29
 80057ac:	d4f1      	bmi.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057ae:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80057b2:	d02d      	beq.n	8005810 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80057b4:	4838      	ldr	r0, [pc, #224]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80057b6:	4282      	cmp	r2, r0
 80057b8:	d02a      	beq.n	8005810 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	d058      	beq.n	8005870 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80057be:	4837      	ldr	r0, [pc, #220]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80057c0:	684c      	ldr	r4, [r1, #4]
 80057c2:	6882      	ldr	r2, [r0, #8]
 80057c4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057c8:	4322      	orrs	r2, r4
 80057ca:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 80057ce:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80057d2:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057d4:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80057d6:	6894      	ldr	r4, [r2, #8]
 80057d8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80057dc:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057de:	4322      	orrs	r2, r4
 80057e0:	4c2f      	ldr	r4, [pc, #188]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80057e2:	68a4      	ldr	r4, [r4, #8]
 80057e4:	4322      	orrs	r2, r4
 80057e6:	43d2      	mvns	r2, r2
 80057e8:	f002 0201 	and.w	r2, r2, #1
 80057ec:	b142      	cbz	r2, 8005800 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 80057ee:	6884      	ldr	r4, [r0, #8]
 80057f0:	688a      	ldr	r2, [r1, #8]
 80057f2:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 80057f6:	4332      	orrs	r2, r6
 80057f8:	f021 010f 	bic.w	r1, r1, #15
 80057fc:	430a      	orrs	r2, r1
 80057fe:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005800:	2000      	movs	r0, #0
 8005802:	e7cb      	b.n	800579c <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8005804:	4827      	ldr	r0, [pc, #156]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005806:	e7c0      	b.n	800578a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8005808:	2002      	movs	r0, #2
}
 800580a:	b01d      	add	sp, #116	; 0x74
 800580c:	bc70      	pop	{r4, r5, r6}
 800580e:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005810:	b1ae      	cbz	r6, 800583e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005812:	4825      	ldr	r0, [pc, #148]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005814:	684c      	ldr	r4, [r1, #4]
 8005816:	6882      	ldr	r2, [r0, #8]
 8005818:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800581c:	4322      	orrs	r2, r4
 800581e:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8005822:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8005826:	6082      	str	r2, [r0, #8]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800582a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800582e:	6880      	ldr	r0, [r0, #8]
 8005830:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005832:	4302      	orrs	r2, r0
 8005834:	43d2      	mvns	r2, r2
 8005836:	481c      	ldr	r0, [pc, #112]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005838:	f002 0201 	and.w	r2, r2, #1
 800583c:	e7d6      	b.n	80057ec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800583e:	491a      	ldr	r1, [pc, #104]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005840:	688a      	ldr	r2, [r1, #8]
 8005842:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005846:	608a      	str	r2, [r1, #8]
 8005848:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800584c:	4a12      	ldr	r2, [pc, #72]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800584e:	6880      	ldr	r0, [r0, #8]
 8005850:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005852:	4915      	ldr	r1, [pc, #84]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005854:	4302      	orrs	r2, r0
 8005856:	43d2      	mvns	r2, r2
 8005858:	f002 0201 	and.w	r2, r2, #1
 800585c:	2a00      	cmp	r2, #0
 800585e:	d0cf      	beq.n	8005800 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005860:	688a      	ldr	r2, [r1, #8]
 8005862:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005866:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800586a:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800586c:	608a      	str	r2, [r1, #8]
 800586e:	e795      	b.n	800579c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005870:	490a      	ldr	r1, [pc, #40]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005872:	4808      	ldr	r0, [pc, #32]	; (8005894 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005874:	688a      	ldr	r2, [r1, #8]
 8005876:	4c0b      	ldr	r4, [pc, #44]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005878:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800587c:	608a      	str	r2, [r1, #8]
 800587e:	6880      	ldr	r0, [r0, #8]
 8005880:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005882:	4302      	orrs	r2, r0
 8005884:	4806      	ldr	r0, [pc, #24]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005886:	6880      	ldr	r0, [r0, #8]
 8005888:	4302      	orrs	r2, r0
 800588a:	43d2      	mvns	r2, r2
 800588c:	f002 0201 	and.w	r2, r2, #1
 8005890:	e7e4      	b.n	800585c <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8005892:	bf00      	nop
 8005894:	50000400 	.word	0x50000400
 8005898:	50000100 	.word	0x50000100
 800589c:	50000700 	.word	0x50000700
 80058a0:	50000600 	.word	0x50000600
 80058a4:	50000500 	.word	0x50000500
 80058a8:	50000300 	.word	0x50000300

080058ac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058ac:	4907      	ldr	r1, [pc, #28]	; (80058cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80058ae:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058b2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058bc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80058c6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <HAL_NVIC_SetPriority+0x74>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d8:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058da:	f1c3 0e07 	rsb	lr, r3, #7
 80058de:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058e2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e6:	bf28      	it	cs
 80058e8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ec:	f1bc 0f06 	cmp.w	ip, #6
 80058f0:	d91b      	bls.n	800592a <HAL_NVIC_SetPriority+0x5a>
 80058f2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058f4:	f04f 3cff 	mov.w	ip, #4294967295
 80058f8:	fa0c fc03 	lsl.w	ip, ip, r3
 80058fc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	f04f 3cff 	mov.w	ip, #4294967295
 8005904:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005908:	ea21 010c 	bic.w	r1, r1, ip
 800590c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800590e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005910:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005914:	db0c      	blt.n	8005930 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005916:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800591a:	0109      	lsls	r1, r1, #4
 800591c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005920:	b2c9      	uxtb	r1, r1
 8005922:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005926:	f85d fb04 	ldr.w	pc, [sp], #4
 800592a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592c:	4613      	mov	r3, r2
 800592e:	e7e7      	b.n	8005900 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <HAL_NVIC_SetPriority+0x78>)
 8005932:	f000 000f 	and.w	r0, r0, #15
 8005936:	0109      	lsls	r1, r1, #4
 8005938:	4403      	add	r3, r0
 800593a:	b2c9      	uxtb	r1, r1
 800593c:	7619      	strb	r1, [r3, #24]
 800593e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005942:	bf00      	nop
 8005944:	e000ed00 	.word	0xe000ed00
 8005948:	e000ecfc 	.word	0xe000ecfc

0800594c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800594c:	2800      	cmp	r0, #0
 800594e:	db07      	blt.n	8005960 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <HAL_NVIC_EnableIRQ+0x18>)
 8005952:	0941      	lsrs	r1, r0, #5
 8005954:	2301      	movs	r3, #1
 8005956:	f000 001f 	and.w	r0, r0, #31
 800595a:	4083      	lsls	r3, r0
 800595c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	e000e100 	.word	0xe000e100

08005968 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005968:	3801      	subs	r0, #1
 800596a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800596e:	d210      	bcs.n	8005992 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005970:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005972:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005976:	4c08      	ldr	r4, [pc, #32]	; (8005998 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005978:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800597e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005982:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005984:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005986:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005988:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800598a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800598e:	6119      	str	r1, [r3, #16]
 8005990:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005992:	2001      	movs	r0, #1
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800599c:	2800      	cmp	r0, #0
 800599e:	d078      	beq.n	8005a92 <HAL_DMA_Init+0xf6>
{
 80059a0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059a2:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <HAL_DMA_Init+0xfc>)
 80059a4:	6804      	ldr	r4, [r0, #0]
 80059a6:	429c      	cmp	r4, r3
 80059a8:	d95f      	bls.n	8005a6a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80059aa:	4a3c      	ldr	r2, [pc, #240]	; (8005a9c <HAL_DMA_Init+0x100>)
 80059ac:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 80059ae:	493d      	ldr	r1, [pc, #244]	; (8005aa4 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80059b0:	4422      	add	r2, r4
 80059b2:	fba3 3202 	umull	r3, r2, r3, r2
 80059b6:	0912      	lsrs	r2, r2, #4
 80059b8:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059ba:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059bc:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80059be:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 80059c2:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059c4:	4e36      	ldr	r6, [pc, #216]	; (8005aa0 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059c6:	4f34      	ldr	r7, [pc, #208]	; (8005a98 <HAL_DMA_Init+0xfc>)
 80059c8:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059cc:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 80059ce:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6941      	ldr	r1, [r0, #20]
 80059d4:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059d6:	6981      	ldr	r1, [r0, #24]
 80059d8:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 80059da:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059dc:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059e0:	69c1      	ldr	r1, [r0, #28]
 80059e2:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059e4:	b2e1      	uxtb	r1, r4
 80059e6:	3908      	subs	r1, #8
 80059e8:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ec:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059ee:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80059f2:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80059f4:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 80059f8:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059fa:	4e2b      	ldr	r6, [pc, #172]	; (8005aa8 <HAL_DMA_Init+0x10c>)
 80059fc:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80059fe:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a02:	42bc      	cmp	r4, r7
 8005a04:	bf98      	it	ls
 8005a06:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a08:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a0c:	4c28      	ldr	r4, [pc, #160]	; (8005ab0 <HAL_DMA_Init+0x114>)
 8005a0e:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a10:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a14:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a16:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a1a:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005a1c:	6484      	str	r4, [r0, #72]	; 0x48
 8005a1e:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a22:	d02b      	beq.n	8005a7c <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a24:	6845      	ldr	r5, [r0, #4]
 8005a26:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a28:	3d01      	subs	r5, #1
 8005a2a:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a2c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a30:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a34:	d828      	bhi.n	8005a88 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a36:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a38:	4d1f      	ldr	r5, [pc, #124]	; (8005ab8 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a3a:	4a20      	ldr	r2, [pc, #128]	; (8005abc <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a3c:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a3e:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a40:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a42:	f004 041f 	and.w	r4, r4, #31
 8005a46:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a4a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a4c:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a50:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a52:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a54:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a56:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005a58:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a5a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005a5c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005a60:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005a64:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005a66:	4618      	mov	r0, r3
}
 8005a68:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a6a:	4a15      	ldr	r2, [pc, #84]	; (8005ac0 <HAL_DMA_Init+0x124>)
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8005a6e:	4915      	ldr	r1, [pc, #84]	; (8005ac4 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a70:	4422      	add	r2, r4
 8005a72:	fba3 3202 	umull	r3, r2, r3, r2
 8005a76:	0912      	lsrs	r2, r2, #4
 8005a78:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8005a7a:	e79e      	b.n	80059ba <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a7c:	2400      	movs	r4, #0
 8005a7e:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a80:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a84:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005a88:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a8a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a8e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005a90:	e7e1      	b.n	8005a56 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8005a92:	2001      	movs	r0, #1
}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40020407 	.word	0x40020407
 8005a9c:	bffdfbf8 	.word	0xbffdfbf8
 8005aa0:	cccccccd 	.word	0xcccccccd
 8005aa4:	40020400 	.word	0x40020400
 8005aa8:	40020800 	.word	0x40020800
 8005aac:	40020820 	.word	0x40020820
 8005ab0:	40020880 	.word	0x40020880
 8005ab4:	1000823f 	.word	0x1000823f
 8005ab8:	40020940 	.word	0x40020940
 8005abc:	40020900 	.word	0x40020900
 8005ac0:	bffdfff8 	.word	0xbffdfff8
 8005ac4:	40020000 	.word	0x40020000

08005ac8 <HAL_DMA_Start_IT>:
{
 8005ac8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8005aca:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8005ace:	2c01      	cmp	r4, #1
 8005ad0:	d051      	beq.n	8005b76 <HAL_DMA_Start_IT+0xae>
 8005ad2:	2401      	movs	r4, #1
 8005ad4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8005ad8:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8005adc:	2c01      	cmp	r4, #1
 8005ade:	d005      	beq.n	8005aec <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8005ae6:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8005ae8:	2002      	movs	r0, #2
}
 8005aea:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aec:	2402      	movs	r4, #2
 8005aee:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af2:	2400      	movs	r4, #0
 8005af4:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005af6:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005af8:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8005afa:	6825      	ldr	r5, [r4, #0]
 8005afc:	f025 0501 	bic.w	r5, r5, #1
 8005b00:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b02:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8005b06:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8005b08:	b115      	cbz	r5, 8005b10 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b0a:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8005b0e:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b10:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8005b12:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005b14:	f006 0c1f 	and.w	ip, r6, #31
 8005b18:	2601      	movs	r6, #1
 8005b1a:	fa06 f60c 	lsl.w	r6, r6, ip
 8005b1e:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8005b20:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b22:	6883      	ldr	r3, [r0, #8]
 8005b24:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8005b26:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8005b28:	bf0b      	itete	eq
 8005b2a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005b2c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005b2e:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005b30:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8005b32:	b1bb      	cbz	r3, 8005b64 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	f043 030e 	orr.w	r3, r3, #14
 8005b3a:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b3c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	03d2      	lsls	r2, r2, #15
 8005b42:	d503      	bpl.n	8005b4c <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005b4c:	b11d      	cbz	r5, 8005b56 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b54:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005b5c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005b5e:	6023      	str	r3, [r4, #0]
}
 8005b60:	bcf0      	pop	{r4, r5, r6, r7}
 8005b62:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	f023 0304 	bic.w	r3, r3, #4
 8005b6a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	f043 030a 	orr.w	r3, r3, #10
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	e7e2      	b.n	8005b3c <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8005b76:	2002      	movs	r0, #2
}
 8005b78:	bcf0      	pop	{r4, r5, r6, r7}
 8005b7a:	4770      	bx	lr

08005b7c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b7c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005b80:	2a02      	cmp	r2, #2
{
 8005b82:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b86:	2204      	movs	r2, #4
 8005b88:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8005b8a:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005b8c:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8005b8e:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005b90:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005b98:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b9a:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b9c:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8005b9e:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ba0:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba2:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ba4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba6:	f020 000e 	bic.w	r0, r0, #14
 8005baa:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005bb2:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8005bb4:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bb6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8005bb8:	f020 0001 	bic.w	r0, r0, #1
 8005bbc:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bbe:	f001 011f 	and.w	r1, r1, #31
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bc6:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bca:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bcc:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005bce:	b138      	cbz	r0, 8005be0 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bd0:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bd2:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bda:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bdc:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005be0:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005be2:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005be4:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005bec:	bc30      	pop	{r4, r5}
 8005bee:	4770      	bx	lr

08005bf0 <HAL_DMA_Abort_IT>:
{
 8005bf0:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005bf2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d009      	beq.n	8005c0e <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8005bfa:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bfc:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8005bfe:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c00:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005c02:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8005c06:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 8005c0a:	4618      	mov	r0, r3
}
 8005c0c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c0e:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c10:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c12:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c16:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c18:	f021 010e 	bic.w	r1, r1, #14
 8005c1c:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	f021 0101 	bic.w	r1, r1, #1
 8005c24:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c26:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c28:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c30:	f002 021f 	and.w	r2, r2, #31
 8005c34:	2301      	movs	r3, #1
 8005c36:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c38:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c3c:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c3e:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005c40:	b132      	cbz	r2, 8005c50 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c42:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c44:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4c:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c4e:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8005c50:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005c52:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8005c54:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8005c56:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005c5a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8005c5e:	b113      	cbz	r3, 8005c66 <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8005c60:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005c62:	4620      	mov	r0, r4
}
 8005c64:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005c66:	4618      	mov	r0, r3
}
 8005c68:	bd38      	pop	{r3, r4, r5, pc}
 8005c6a:	bf00      	nop

08005c6c <HAL_DMA_IRQHandler>:
{
 8005c6c:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c70:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005c72:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c74:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005c76:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c78:	f003 031f 	and.w	r3, r3, #31
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	420a      	tst	r2, r1
 8005c82:	d00e      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x36>
 8005c84:	f014 0f04 	tst.w	r4, #4
 8005c88:	d00b      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	069b      	lsls	r3, r3, #26
 8005c8e:	d403      	bmi.n	8005c98 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	f023 0304 	bic.w	r3, r3, #4
 8005c96:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8005c98:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c9a:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8005c9c:	b1cb      	cbz	r3, 8005cd2 <HAL_DMA_IRQHandler+0x66>
}
 8005c9e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8005ca0:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	420a      	tst	r2, r1
 8005ca8:	d015      	beq.n	8005cd6 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8005caa:	f014 0f02 	tst.w	r4, #2
 8005cae:	d012      	beq.n	8005cd6 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	0699      	lsls	r1, r3, #26
 8005cb4:	d406      	bmi.n	8005cc4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	f023 030a 	bic.w	r3, r3, #10
 8005cbc:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8005cc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cc6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8005cc8:	2100      	movs	r1, #0
 8005cca:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <HAL_DMA_IRQHandler+0x32>
}
 8005cd2:	bc70      	pop	{r4, r5, r6}
 8005cd4:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005cd6:	2208      	movs	r2, #8
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	420a      	tst	r2, r1
 8005cdc:	d0f9      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8005cde:	0722      	lsls	r2, r4, #28
 8005ce0:	d5f7      	bpl.n	8005cd2 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ce2:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8005ce4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ce6:	f022 020e 	bic.w	r2, r2, #14
 8005cea:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cec:	2201      	movs	r2, #1
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8005cf2:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cf4:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cf6:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005cf8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8005cfc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d0e6      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x66>
}
 8005d04:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005d06:	4708      	bx	r1

08005d08 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f000 814c 	beq.w	8005fa6 <HAL_FDCAN_Init+0x29e>
{
 8005d0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005d12:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005d16:	4604      	mov	r4, r0
 8005d18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d073      	beq.n	8005e08 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	6993      	ldr	r3, [r2, #24]
 8005d24:	f023 0310 	bic.w	r3, r3, #16
 8005d28:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d2a:	f7fd f87b 	bl	8002e24 <HAL_GetTick>
 8005d2e:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d30:	e004      	b.n	8005d3c <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d32:	f7fd f877 	bl	8002e24 <HAL_GetTick>
 8005d36:	1b43      	subs	r3, r0, r5
 8005d38:	2b0a      	cmp	r3, #10
 8005d3a:	d85b      	bhi.n	8005df4 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	0711      	lsls	r1, r2, #28
 8005d42:	d4f6      	bmi.n	8005d32 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d4c:	f7fd f86a 	bl	8002e24 <HAL_GetTick>
 8005d50:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d52:	e004      	b.n	8005d5e <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d54:	f7fd f866 	bl	8002e24 <HAL_GetTick>
 8005d58:	1b40      	subs	r0, r0, r5
 8005d5a:	280a      	cmp	r0, #10
 8005d5c:	d84a      	bhi.n	8005df4 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	07d2      	lsls	r2, r2, #31
 8005d64:	d5f6      	bpl.n	8005d54 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d66:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005d68:	4998      	ldr	r1, [pc, #608]	; (8005fcc <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d6a:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8005d6e:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d70:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8005d72:	f000 8113 	beq.w	8005f9c <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005d76:	7c22      	ldrb	r2, [r4, #16]
 8005d78:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	bf0c      	ite	eq
 8005d7e:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d82:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8005d86:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005d88:	7c62      	ldrb	r2, [r4, #17]
 8005d8a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	bf0c      	ite	eq
 8005d90:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d94:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8005d98:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005d9a:	7ca2      	ldrb	r2, [r4, #18]
 8005d9c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	bf0c      	ite	eq
 8005da2:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005da6:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8005daa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005db0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005db2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005db6:	4302      	orrs	r2, r0
 8005db8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005dc0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005dc2:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005dc4:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005dc6:	f022 0210 	bic.w	r2, r2, #16
 8005dca:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005dcc:	d021      	beq.n	8005e12 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005dce:	b321      	cbz	r1, 8005e1a <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005dd0:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005dd2:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005dd4:	f000 80f5 	beq.w	8005fc2 <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005dd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ddc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005dde:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005de0:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005de2:	f042 0210 	orr.w	r2, r2, #16
 8005de6:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005de8:	d117      	bne.n	8005e1a <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	f042 0220 	orr.w	r2, r2, #32
 8005df0:	619a      	str	r2, [r3, #24]
 8005df2:	e012      	b.n	8005e1a <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005df4:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005df6:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005dfe:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005e02:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005e08:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005e0c:	f7fb fd30 	bl	8001870 <HAL_FDCAN_MspInit>
 8005e10:	e786      	b.n	8005d20 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	f042 0204 	orr.w	r2, r2, #4
 8005e18:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e1a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e1e:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e20:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e22:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e24:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e28:	6a21      	ldr	r1, [r4, #32]
 8005e2a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e2c:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e2e:	6961      	ldr	r1, [r4, #20]
 8005e30:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e36:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e3a:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e3c:	d10e      	bne.n	8005e5c <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e3e:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e44:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e46:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e48:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e4a:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005e4c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005e50:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005e52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e54:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005e56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005e5a:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e5c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005e60:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005e62:	495b      	ldr	r1, [pc, #364]	; (8005fd0 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e64:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 8005e66:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8005e6c:	f000 809d 	beq.w	8005faa <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005e70:	4a58      	ldr	r2, [pc, #352]	; (8005fd4 <HAL_FDCAN_Init+0x2cc>)
 8005e72:	4e59      	ldr	r6, [pc, #356]	; (8005fd8 <HAL_FDCAN_Init+0x2d0>)
 8005e74:	4f59      	ldr	r7, [pc, #356]	; (8005fdc <HAL_FDCAN_Init+0x2d4>)
 8005e76:	4d5a      	ldr	r5, [pc, #360]	; (8005fe0 <HAL_FDCAN_Init+0x2d8>)
 8005e78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	bf18      	it	ne
 8005e80:	4691      	movne	r9, r2
 8005e82:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8005e86:	f1a2 0218 	sub.w	r2, r2, #24
 8005e8a:	f101 0110 	add.w	r1, r1, #16
 8005e8e:	bf18      	it	ne
 8005e90:	4616      	movne	r6, r2
 8005e92:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8005e96:	bf14      	ite	ne
 8005e98:	4617      	movne	r7, r2
 8005e9a:	468e      	moveq	lr, r1
 8005e9c:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8005ea0:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8005ea4:	bf14      	ite	ne
 8005ea6:	4696      	movne	lr, r2
 8005ea8:	4688      	moveq	r8, r1
 8005eaa:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8005eae:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 8005eb2:	bf14      	ite	ne
 8005eb4:	4690      	movne	r8, r2
 8005eb6:	468c      	moveq	ip, r1
 8005eb8:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8005ebc:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 8005ec0:	bf14      	ite	ne
 8005ec2:	4694      	movne	ip, r2
 8005ec4:	46a9      	moveq	r9, r5
 8005ec6:	f502 7254 	add.w	r2, r2, #848	; 0x350
 8005eca:	bf18      	it	ne
 8005ecc:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ece:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005ed4:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ed6:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8005eda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8005ede:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005ee2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005ee6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005ee8:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005eec:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8005ef0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8005ef4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005ef8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005efc:	1a89      	subs	r1, r1, r2
 8005efe:	1c53      	adds	r3, r2, #1
 8005f00:	4563      	cmp	r3, ip
 8005f02:	ea4f 0391 	mov.w	r3, r1, lsr #2
 8005f06:	f103 0301 	add.w	r3, r3, #1
 8005f0a:	bf98      	it	ls
 8005f0c:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005f0e:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005f12:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f16:	bf88      	it	hi
 8005f18:	2501      	movhi	r5, #1
 8005f1a:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8005f1e:	d81a      	bhi.n	8005f56 <HAL_FDCAN_Init+0x24e>
 8005f20:	2917      	cmp	r1, #23
 8005f22:	bf8c      	ite	hi
 8005f24:	2100      	movhi	r1, #0
 8005f26:	2101      	movls	r1, #1
 8005f28:	b9a9      	cbnz	r1, 8005f56 <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f2a:	4616      	mov	r6, r2
 8005f2c:	b10b      	cbz	r3, 8005f32 <HAL_FDCAN_Init+0x22a>
 8005f2e:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f32:	1aed      	subs	r5, r5, r3
 8005f34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f38:	086a      	lsrs	r2, r5, #1
 8005f3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f3e:	2000      	movs	r0, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d1fb      	bne.n	8005f42 <HAL_FDCAN_Init+0x23a>
 8005f4a:	f025 0301 	bic.w	r3, r5, #1
 8005f4e:	429d      	cmp	r5, r3
 8005f50:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8005f54:	d01a      	beq.n	8005f8c <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f56:	4611      	mov	r1, r2
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f5e:	458c      	cmp	ip, r1
 8005f60:	d914      	bls.n	8005f8c <HAL_FDCAN_Init+0x284>
 8005f62:	f102 0108 	add.w	r1, r2, #8
 8005f66:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f68:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f6a:	d90f      	bls.n	8005f8c <HAL_FDCAN_Init+0x284>
 8005f6c:	f102 010c 	add.w	r1, r2, #12
 8005f70:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f72:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f74:	d90a      	bls.n	8005f8c <HAL_FDCAN_Init+0x284>
 8005f76:	f102 0110 	add.w	r1, r2, #16
 8005f7a:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f7c:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005f7e:	d905      	bls.n	8005f8c <HAL_FDCAN_Init+0x284>
 8005f80:	f102 0114 	add.w	r1, r2, #20
 8005f84:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005f86:	6113      	str	r3, [r2, #16]
 8005f88:	bf88      	it	hi
 8005f8a:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8005f8c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005f8e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f90:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005f92:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005f96:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005f9c:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <HAL_FDCAN_Init+0x2dc>)
 8005f9e:	6861      	ldr	r1, [r4, #4]
 8005fa0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 8005fa4:	e6e7      	b.n	8005d76 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8005fa6:	2001      	movs	r0, #1
}
 8005fa8:	4770      	bx	lr
 8005faa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8005ff4 <HAL_FDCAN_Init+0x2ec>
 8005fae:	4e0e      	ldr	r6, [pc, #56]	; (8005fe8 <HAL_FDCAN_Init+0x2e0>)
 8005fb0:	4f0e      	ldr	r7, [pc, #56]	; (8005fec <HAL_FDCAN_Init+0x2e4>)
 8005fb2:	f8df e044 	ldr.w	lr, [pc, #68]	; 8005ff8 <HAL_FDCAN_Init+0x2f0>
 8005fb6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8005ffc <HAL_FDCAN_Init+0x2f4>
 8005fba:	f8df c044 	ldr.w	ip, [pc, #68]	; 8006000 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005fbe:	4a0c      	ldr	r2, [pc, #48]	; (8005ff0 <HAL_FDCAN_Init+0x2e8>)
 8005fc0:	e785      	b.n	8005ece <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005fc2:	f042 0220 	orr.w	r2, r2, #32
 8005fc6:	619a      	str	r2, [r3, #24]
 8005fc8:	e727      	b.n	8005e1a <HAL_FDCAN_Init+0x112>
 8005fca:	bf00      	nop
 8005fcc:	40006400 	.word	0x40006400
 8005fd0:	40006800 	.word	0x40006800
 8005fd4:	4000a678 	.word	0x4000a678
 8005fd8:	4000ad00 	.word	0x4000ad00
 8005fdc:	4000ac28 	.word	0x4000ac28
 8005fe0:	4000ad18 	.word	0x4000ad18
 8005fe4:	40006000 	.word	0x40006000
 8005fe8:	4000a9b0 	.word	0x4000a9b0
 8005fec:	4000a8d8 	.word	0x4000a8d8
 8005ff0:	4000a750 	.word	0x4000a750
 8005ff4:	4000a9c8 	.word	0x4000a9c8
 8005ff8:	4000a800 	.word	0x4000a800
 8005ffc:	4000a7c0 	.word	0x4000a7c0
 8006000:	4000aaa0 	.word	0x4000aaa0

08006004 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006004:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006008:	3a01      	subs	r2, #1
 800600a:	2a01      	cmp	r2, #1
{
 800600c:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800600e:	d905      	bls.n	800601c <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006010:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006012:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006016:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006018:	661a      	str	r2, [r3, #96]	; 0x60
}
 800601a:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800601c:	6808      	ldr	r0, [r1, #0]
{
 800601e:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006020:	b978      	cbnz	r0, 8006042 <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 8006022:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006026:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006028:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 800602c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800602e:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006030:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006032:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 8006034:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 800603a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 800603e:	bc30      	pop	{r4, r5}
 8006040:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006042:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006044:	688a      	ldr	r2, [r1, #8]
 8006046:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006048:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800604a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800604e:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006052:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006056:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 800605a:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 800605e:	2000      	movs	r0, #0
}
 8006060:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8006062:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8006066:	4770      	bx	lr

08006068 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006068:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800606c:	2a01      	cmp	r2, #1
{
 800606e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006070:	d005      	beq.n	800607e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006072:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006074:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8006078:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800607a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800607c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800607e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006080:	2202      	movs	r2, #2
 8006082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006086:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006088:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006090:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006092:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800609a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800609e:	2b02      	cmp	r3, #2
{
 80060a0:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80060a2:	d10c      	bne.n	80060be <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80060a4:	6805      	ldr	r5, [r0, #0]
 80060a6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 80060aa:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 80060ae:	d00d      	beq.n	80060cc <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80060b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80060b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80060b6:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80060b8:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 80060bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80060be:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80060c0:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 80060c4:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80060c6:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 80060ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80060cc:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80060d0:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80060d2:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d139      	bne.n	800614e <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 80060da:	688b      	ldr	r3, [r1, #8]
 80060dc:	690f      	ldr	r7, [r1, #16]
 80060de:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 80060e0:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80060e2:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80060e6:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 80060ea:	4303      	orrs	r3, r0
 80060ec:	6948      	ldr	r0, [r1, #20]
 80060ee:	6a0c      	ldr	r4, [r1, #32]
 80060f0:	4303      	orrs	r3, r0
 80060f2:	68c8      	ldr	r0, [r1, #12]
 80060f4:	4303      	orrs	r3, r0
 80060f6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80060fa:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 80060fe:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006102:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006106:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800610a:	4c15      	ldr	r4, [pc, #84]	; (8006160 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 800610c:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800610e:	89cb      	ldrh	r3, [r1, #14]
 8006110:	5ce3      	ldrb	r3, [r4, r3]
 8006112:	b1a3      	cbz	r3, 800613e <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006114:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006116:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006118:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800611a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 800611e:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006120:	433b      	orrs	r3, r7
 8006122:	7857      	ldrb	r7, [r2, #1]
 8006124:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006128:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800612c:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006130:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006132:	89cb      	ldrh	r3, [r1, #14]
 8006134:	5ce3      	ldrb	r3, [r4, r3]
 8006136:	459c      	cmp	ip, r3
 8006138:	f102 0204 	add.w	r2, r2, #4
 800613c:	d3ea      	bcc.n	8006114 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800613e:	2301      	movs	r3, #1
 8006140:	40b3      	lsls	r3, r6
 8006142:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 8006146:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006148:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 800614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 800614e:	690b      	ldr	r3, [r1, #16]
 8006150:	6808      	ldr	r0, [r1, #0]
 8006152:	ea43 0700 	orr.w	r7, r3, r0
 8006156:	688b      	ldr	r3, [r1, #8]
 8006158:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800615a:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 800615e:	e7c2      	b.n	80060e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006160:	0800d53c 	.word	0x0800d53c

08006164 <HAL_FDCAN_GetRxMessage>:
{
 8006164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006166:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006168:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 800616c:	2802      	cmp	r0, #2
 800616e:	d10d      	bne.n	800618c <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006170:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006172:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006176:	d00f      	beq.n	8006198 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006178:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 800617c:	0700      	lsls	r0, r0, #28
 800617e:	d160      	bne.n	8006242 <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006180:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8006186:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006188:	6623      	str	r3, [r4, #96]	; 0x60
}
 800618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800618c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800618e:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006192:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006194:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006196:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006198:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 800619c:	0705      	lsls	r5, r0, #28
 800619e:	d0ef      	beq.n	8006180 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80061a0:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80061a4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80061a6:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80061aa:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 80061ae:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80061b2:	6828      	ldr	r0, [r5, #0]
 80061b4:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 80061b8:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d150      	bne.n	8006260 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80061be:	6828      	ldr	r0, [r5, #0]
 80061c0:	f3c0 408a 	ubfx	r0, r0, #18, #11
 80061c4:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80061c6:	6828      	ldr	r0, [r5, #0]
 80061c8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80061cc:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80061ce:	6828      	ldr	r0, [r5, #0]
 80061d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80061d4:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80061d6:	88a8      	ldrh	r0, [r5, #4]
 80061d8:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80061da:	6868      	ldr	r0, [r5, #4]
 80061dc:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 80061e0:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80061e2:	686e      	ldr	r6, [r5, #4]
 80061e4:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 80061e8:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80061ea:	686e      	ldr	r6, [r5, #4]
 80061ec:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 80061f0:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80061f2:	79ee      	ldrb	r6, [r5, #7]
 80061f4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80061f8:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80061fa:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80061fc:	4e1a      	ldr	r6, [pc, #104]	; (8006268 <HAL_FDCAN_GetRxMessage+0x104>)
 80061fe:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006202:	6868      	ldr	r0, [r5, #4]
 8006204:	0fc0      	lsrs	r0, r0, #31
 8006206:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006208:	f1be 0f00 	cmp.w	lr, #0
 800620c:	d011      	beq.n	8006232 <HAL_FDCAN_GetRxMessage+0xce>
 800620e:	3b01      	subs	r3, #1
 8006210:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006214:	46f4      	mov	ip, lr
 8006216:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 800621a:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800621e:	89d0      	ldrh	r0, [r2, #14]
 8006220:	f1ac 0c06 	sub.w	ip, ip, #6
 8006224:	5c30      	ldrb	r0, [r6, r0]
 8006226:	ebac 0c05 	sub.w	ip, ip, r5
 800622a:	4560      	cmp	r0, ip
 800622c:	d8f2      	bhi.n	8006214 <HAL_FDCAN_GetRxMessage+0xb0>
 800622e:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006232:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006234:	bf0c      	ite	eq
 8006236:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 800623a:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 800623e:	2000      	movs	r0, #0
}
 8006240:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006242:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006246:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006248:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800624c:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006250:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006254:	6828      	ldr	r0, [r5, #0]
 8006256:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 800625a:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800625c:	2800      	cmp	r0, #0
 800625e:	d0ae      	beq.n	80061be <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006260:	6828      	ldr	r0, [r5, #0]
 8006262:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006266:	e7ad      	b.n	80061c4 <HAL_FDCAN_GetRxMessage+0x60>
 8006268:	0800d53c 	.word	0x0800d53c

0800626c <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800626c:	6803      	ldr	r3, [r0, #0]
 800626e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 8006272:	f000 0007 	and.w	r0, r0, #7
 8006276:	4770      	bx	lr

08006278 <HAL_FDCAN_ActivateNotification>:
{
 8006278:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800627a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800627e:	3801      	subs	r0, #1
 8006280:	2801      	cmp	r0, #1
 8006282:	d905      	bls.n	8006290 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006284:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006286:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 800628a:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800628c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800628e:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006290:	681b      	ldr	r3, [r3, #0]
{
 8006292:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006294:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006298:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800629a:	d03d      	beq.n	8006318 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800629c:	07c4      	lsls	r4, r0, #31
 800629e:	d43b      	bmi.n	8006318 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80062a0:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80062a2:	f044 0401 	orr.w	r4, r4, #1
 80062a6:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80062a8:	b1cd      	cbz	r5, 80062de <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80062aa:	07c5      	lsls	r5, r0, #31
 80062ac:	d517      	bpl.n	80062de <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80062ae:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80062b0:	f040 0002 	orr.w	r0, r0, #2
 80062b4:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80062b6:	060c      	lsls	r4, r1, #24
 80062b8:	d504      	bpl.n	80062c4 <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80062ba:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 80062be:	4310      	orrs	r0, r2
 80062c0:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062c4:	05c8      	lsls	r0, r1, #23
 80062c6:	d504      	bpl.n	80062d2 <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80062c8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80062cc:	4302      	orrs	r2, r0
 80062ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80062d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062d4:	430a      	orrs	r2, r1
    return HAL_OK;
 80062d6:	2000      	movs	r0, #0
}
 80062d8:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
}
 80062dc:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80062de:	f011 0f38 	tst.w	r1, #56	; 0x38
 80062e2:	d001      	beq.n	80062e8 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80062e4:	0784      	lsls	r4, r0, #30
 80062e6:	d4e2      	bmi.n	80062ae <HAL_FDCAN_ActivateNotification+0x36>
 80062e8:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80062ec:	d131      	bne.n	8006352 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80062ee:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80062f2:	d001      	beq.n	80062f8 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80062f4:	0704      	lsls	r4, r0, #28
 80062f6:	d4da      	bmi.n	80062ae <HAL_FDCAN_ActivateNotification+0x36>
 80062f8:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80062fc:	d001      	beq.n	8006302 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80062fe:	06c5      	lsls	r5, r0, #27
 8006300:	d4d5      	bmi.n	80062ae <HAL_FDCAN_ActivateNotification+0x36>
 8006302:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006306:	d001      	beq.n	800630c <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006308:	0684      	lsls	r4, r0, #26
 800630a:	d4d0      	bmi.n	80062ae <HAL_FDCAN_ActivateNotification+0x36>
 800630c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006310:	d0d1      	beq.n	80062b6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006312:	0645      	lsls	r5, r0, #25
 8006314:	d5cf      	bpl.n	80062b6 <HAL_FDCAN_ActivateNotification+0x3e>
 8006316:	e7ca      	b.n	80062ae <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006318:	f011 0f38 	tst.w	r1, #56	; 0x38
 800631c:	d001      	beq.n	8006322 <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800631e:	0784      	lsls	r4, r0, #30
 8006320:	d5be      	bpl.n	80062a0 <HAL_FDCAN_ActivateNotification+0x28>
 8006322:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006326:	d117      	bne.n	8006358 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006328:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 800632c:	d001      	beq.n	8006332 <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800632e:	0704      	lsls	r4, r0, #28
 8006330:	d5b6      	bpl.n	80062a0 <HAL_FDCAN_ActivateNotification+0x28>
 8006332:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006336:	d001      	beq.n	800633c <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006338:	06c4      	lsls	r4, r0, #27
 800633a:	d5b1      	bpl.n	80062a0 <HAL_FDCAN_ActivateNotification+0x28>
 800633c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006340:	d001      	beq.n	8006346 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006342:	0684      	lsls	r4, r0, #26
 8006344:	d5ac      	bpl.n	80062a0 <HAL_FDCAN_ActivateNotification+0x28>
 8006346:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 800634a:	d0ad      	beq.n	80062a8 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800634c:	0644      	lsls	r4, r0, #25
 800634e:	d4ab      	bmi.n	80062a8 <HAL_FDCAN_ActivateNotification+0x30>
 8006350:	e7a6      	b.n	80062a0 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006352:	0745      	lsls	r5, r0, #29
 8006354:	d4ab      	bmi.n	80062ae <HAL_FDCAN_ActivateNotification+0x36>
 8006356:	e7ca      	b.n	80062ee <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006358:	0744      	lsls	r4, r0, #29
 800635a:	d5a1      	bpl.n	80062a0 <HAL_FDCAN_ActivateNotification+0x28>
 800635c:	e7e4      	b.n	8006328 <HAL_FDCAN_ActivateNotification+0xb0>
 800635e:	bf00      	nop

08006360 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop

08006364 <HAL_FDCAN_RxFifo1Callback>:
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop

08006368 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop

0800636c <HAL_FDCAN_TxBufferCompleteCallback>:
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <HAL_FDCAN_TxBufferAbortCallback>:
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop

08006374 <HAL_FDCAN_TimestampWraparoundCallback>:
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop

0800637c <HAL_FDCAN_HighPriorityMessageCallback>:
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop

08006380 <HAL_FDCAN_ErrorCallback>:
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop

08006384 <HAL_FDCAN_ErrorStatusCallback>:
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <HAL_FDCAN_IRQHandler>:
{
 8006388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800638c:	6803      	ldr	r3, [r0, #0]
 800638e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006390:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006392:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006398:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800639a:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 800639c:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 80063a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80063a2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80063a4:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 80063a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80063a8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 80063aa:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 80063ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ae:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80063b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b2:	0652      	lsls	r2, r2, #25
{
 80063b4:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 80063b6:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 80063ba:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 80063be:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 80063c2:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80063c6:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80063ca:	d502      	bpl.n	80063d2 <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80063cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ce:	0651      	lsls	r1, r2, #25
 80063d0:	d473      	bmi.n	80064ba <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80063d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063d4:	05d2      	lsls	r2, r2, #23
 80063d6:	d502      	bpl.n	80063de <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80063d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063da:	05d0      	lsls	r0, r2, #23
 80063dc:	d45d      	bmi.n	800649a <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 80063de:	f1b9 0f00 	cmp.w	r9, #0
 80063e2:	d14a      	bne.n	800647a <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	d137      	bne.n	800645a <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	d13e      	bne.n	800646c <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80063ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063f0:	0591      	lsls	r1, r2, #22
 80063f2:	d502      	bpl.n	80063fa <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80063f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063f6:	0592      	lsls	r2, r2, #22
 80063f8:	d475      	bmi.n	80064e6 <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80063fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063fc:	0617      	lsls	r7, r2, #24
 80063fe:	d502      	bpl.n	8006406 <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006402:	0610      	lsls	r0, r2, #24
 8006404:	d477      	bmi.n	80064f6 <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006408:	0491      	lsls	r1, r2, #18
 800640a:	d502      	bpl.n	8006412 <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800640c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640e:	0492      	lsls	r2, r2, #18
 8006410:	d459      	bmi.n	80064c6 <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006412:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006414:	0417      	lsls	r7, r2, #16
 8006416:	d502      	bpl.n	800641e <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800641a:	0410      	lsls	r0, r2, #16
 800641c:	d45b      	bmi.n	80064d6 <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800641e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006420:	0451      	lsls	r1, r2, #17
 8006422:	d509      	bpl.n	8006438 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006426:	0452      	lsls	r2, r2, #17
 8006428:	d506      	bpl.n	8006438 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800642a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800642e:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006430:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006436:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006438:	b94e      	cbnz	r6, 800644e <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 800643a:	b125      	cbz	r5, 8006446 <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006440:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006442:	432b      	orrs	r3, r5
 8006444:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006446:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006448:	bb13      	cbnz	r3, 8006490 <HAL_FDCAN_IRQHandler+0x108>
}
 800644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800644e:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006450:	4631      	mov	r1, r6
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff ff96 	bl	8006384 <HAL_FDCAN_ErrorStatusCallback>
 8006458:	e7ef      	b.n	800643a <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800645a:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800645e:	4641      	mov	r1, r8
 8006460:	4620      	mov	r0, r4
 8006462:	f7fd fd4f 	bl	8003f04 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006466:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006468:	2f00      	cmp	r7, #0
 800646a:	d0c0      	beq.n	80063ee <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800646c:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800646e:	4639      	mov	r1, r7
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff ff77 	bl	8006364 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	e7b9      	b.n	80063ee <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800647a:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800647e:	4649      	mov	r1, r9
 8006480:	4620      	mov	r0, r4
 8006482:	f7ff ff6d 	bl	8006360 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006486:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006488:	f1b8 0f00 	cmp.w	r8, #0
 800648c:	d0ad      	beq.n	80063ea <HAL_FDCAN_IRQHandler+0x62>
 800648e:	e7e4      	b.n	800645a <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006490:	4620      	mov	r0, r4
 8006492:	f7ff ff75 	bl	8006380 <HAL_FDCAN_ErrorCallback>
}
 8006496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800649a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800649e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80064a2:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80064a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064a8:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff ff60 	bl	8006370 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80064b0:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80064b2:	f1b9 0f00 	cmp.w	r9, #0
 80064b6:	d095      	beq.n	80063e4 <HAL_FDCAN_IRQHandler+0x5c>
 80064b8:	e7df      	b.n	800647a <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80064ba:	2240      	movs	r2, #64	; 0x40
 80064bc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80064be:	f7ff ff5d 	bl	800637c <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	e785      	b.n	80063d2 <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80064c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064ca:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff ff51 	bl	8006374 <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	e79d      	b.n	8006412 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80064d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80064da:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80064dc:	4620      	mov	r0, r4
 80064de:	f7ff ff4b 	bl	8006378 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	e79b      	b.n	800641e <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80064e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ea:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff ff3b 	bl	8006368 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	e781      	b.n	80063fa <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80064f6:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80064fa:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80064fe:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006500:	2280      	movs	r2, #128	; 0x80
 8006502:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006504:	4620      	mov	r0, r4
 8006506:	f7ff ff31 	bl	800636c <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	e77b      	b.n	8006406 <HAL_FDCAN_IRQHandler+0x7e>
 800650e:	bf00      	nop

08006510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006514:	680c      	ldr	r4, [r1, #0]
{
 8006516:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006518:	2c00      	cmp	r4, #0
 800651a:	d07d      	beq.n	8006618 <HAL_GPIO_Init+0x108>
 800651c:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006520:	4e71      	ldr	r6, [pc, #452]	; (80066e8 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8006522:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006524:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006528:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800652a:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 800652e:	ea17 0a04 	ands.w	sl, r7, r4
 8006532:	d06b      	beq.n	800660c <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006534:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006538:	f001 0203 	and.w	r2, r1, #3
 800653c:	1e55      	subs	r5, r2, #1
 800653e:	2d01      	cmp	r5, #1
 8006540:	d96d      	bls.n	800661e <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006542:	2a03      	cmp	r2, #3
 8006544:	f040 80b1 	bne.w	80066aa <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006548:	fa02 f20c 	lsl.w	r2, r2, ip
 800654c:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 800654e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006550:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006552:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006554:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006558:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800655a:	d057      	beq.n	800660c <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800655c:	4d63      	ldr	r5, [pc, #396]	; (80066ec <HAL_GPIO_Init+0x1dc>)
 800655e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	662a      	str	r2, [r5, #96]	; 0x60
 8006566:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006568:	f002 0201 	and.w	r2, r2, #1
 800656c:	9203      	str	r2, [sp, #12]
 800656e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006570:	f023 0203 	bic.w	r2, r3, #3
 8006574:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006578:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800657c:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006580:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006582:	00bf      	lsls	r7, r7, #2
 8006584:	f04f 080f 	mov.w	r8, #15
 8006588:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800658c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006590:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006594:	d01a      	beq.n	80065cc <HAL_GPIO_Init+0xbc>
 8006596:	4d56      	ldr	r5, [pc, #344]	; (80066f0 <HAL_GPIO_Init+0x1e0>)
 8006598:	42a8      	cmp	r0, r5
 800659a:	f000 8092 	beq.w	80066c2 <HAL_GPIO_Init+0x1b2>
 800659e:	4d55      	ldr	r5, [pc, #340]	; (80066f4 <HAL_GPIO_Init+0x1e4>)
 80065a0:	42a8      	cmp	r0, r5
 80065a2:	f000 8093 	beq.w	80066cc <HAL_GPIO_Init+0x1bc>
 80065a6:	4d54      	ldr	r5, [pc, #336]	; (80066f8 <HAL_GPIO_Init+0x1e8>)
 80065a8:	42a8      	cmp	r0, r5
 80065aa:	f000 8083 	beq.w	80066b4 <HAL_GPIO_Init+0x1a4>
 80065ae:	4d53      	ldr	r5, [pc, #332]	; (80066fc <HAL_GPIO_Init+0x1ec>)
 80065b0:	42a8      	cmp	r0, r5
 80065b2:	f000 8092 	beq.w	80066da <HAL_GPIO_Init+0x1ca>
 80065b6:	4d52      	ldr	r5, [pc, #328]	; (8006700 <HAL_GPIO_Init+0x1f0>)
 80065b8:	42a8      	cmp	r0, r5
 80065ba:	bf0c      	ite	eq
 80065bc:	f04f 0805 	moveq.w	r8, #5
 80065c0:	f04f 0806 	movne.w	r8, #6
 80065c4:	fa08 f707 	lsl.w	r7, r8, r7
 80065c8:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065cc:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 80065d0:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 80065d2:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065d6:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 80065d8:	bf54      	ite	pl
 80065da:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80065dc:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 80065e0:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80065e2:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065e4:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 80065e6:	bf54      	ite	pl
 80065e8:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80065ea:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 80065ee:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 80065f0:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065f2:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 80065f4:	bf54      	ite	pl
 80065f6:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80065f8:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 80065fc:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80065fe:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006600:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8006602:	bf54      	ite	pl
 8006604:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006606:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 800660a:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 800660c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800660e:	fa34 f203 	lsrs.w	r2, r4, r3
 8006612:	f10c 0c02 	add.w	ip, ip, #2
 8006616:	d188      	bne.n	800652a <HAL_GPIO_Init+0x1a>
  }
}
 8006618:	b005      	add	sp, #20
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800661e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006622:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006626:	f04f 0803 	mov.w	r8, #3
 800662a:	fa08 f80c 	lsl.w	r8, r8, ip
 800662e:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006632:	fa05 f50c 	lsl.w	r5, r5, ip
 8006636:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 800663a:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800663c:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8006640:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006644:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006648:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800664c:	409f      	lsls	r7, r3
 800664e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006652:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006654:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006656:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800665a:	f8de 7008 	ldr.w	r7, [lr, #8]
 800665e:	fa07 f70c 	lsl.w	r7, r7, ip
 8006662:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006666:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006668:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800666a:	fa02 f20c 	lsl.w	r2, r2, ip
 800666e:	f47f af6e 	bne.w	800654e <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8006672:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8006676:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800667a:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800667e:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8006682:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006684:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006688:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800668c:	fa07 f708 	lsl.w	r7, r7, r8
 8006690:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006692:	270f      	movs	r7, #15
 8006694:	fa07 f808 	lsl.w	r8, r7, r8
 8006698:	9f00      	ldr	r7, [sp, #0]
 800669a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800669e:	9f01      	ldr	r7, [sp, #4]
 80066a0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80066a4:	f8c9 7020 	str.w	r7, [r9, #32]
 80066a8:	e751      	b.n	800654e <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066aa:	2503      	movs	r5, #3
 80066ac:	fa05 f50c 	lsl.w	r5, r5, ip
 80066b0:	43ed      	mvns	r5, r5
 80066b2:	e7cf      	b.n	8006654 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066b4:	f04f 0803 	mov.w	r8, #3
 80066b8:	fa08 f707 	lsl.w	r7, r8, r7
 80066bc:	ea49 0907 	orr.w	r9, r9, r7
 80066c0:	e784      	b.n	80065cc <HAL_GPIO_Init+0xbc>
 80066c2:	fa0b f707 	lsl.w	r7, fp, r7
 80066c6:	ea49 0907 	orr.w	r9, r9, r7
 80066ca:	e77f      	b.n	80065cc <HAL_GPIO_Init+0xbc>
 80066cc:	f04f 0802 	mov.w	r8, #2
 80066d0:	fa08 f707 	lsl.w	r7, r8, r7
 80066d4:	ea49 0907 	orr.w	r9, r9, r7
 80066d8:	e778      	b.n	80065cc <HAL_GPIO_Init+0xbc>
 80066da:	f04f 0804 	mov.w	r8, #4
 80066de:	fa08 f707 	lsl.w	r7, r8, r7
 80066e2:	ea49 0907 	orr.w	r9, r9, r7
 80066e6:	e771      	b.n	80065cc <HAL_GPIO_Init+0xbc>
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40021000 	.word	0x40021000
 80066f0:	48000400 	.word	0x48000400
 80066f4:	48000800 	.word	0x48000800
 80066f8:	48000c00 	.word	0x48000c00
 80066fc:	48001000 	.word	0x48001000
 8006700:	48001400 	.word	0x48001400

08006704 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006704:	6903      	ldr	r3, [r0, #16]
 8006706:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006708:	bf14      	ite	ne
 800670a:	2001      	movne	r0, #1
 800670c:	2000      	moveq	r0, #0
 800670e:	4770      	bx	lr

08006710 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006710:	b10a      	cbz	r2, 8006716 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006712:	6181      	str	r1, [r0, #24]
 8006714:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006716:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop

0800671c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800671c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800671e:	ea01 0203 	and.w	r2, r1, r3
 8006722:	ea21 0103 	bic.w	r1, r1, r3
 8006726:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800672a:	6181      	str	r1, [r0, #24]
}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop

08006730 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006730:	4a04      	ldr	r2, [pc, #16]	; (8006744 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8006732:	6951      	ldr	r1, [r2, #20]
 8006734:	4201      	tst	r1, r0
 8006736:	d100      	bne.n	800673a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006738:	4770      	bx	lr
{
 800673a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800673c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800673e:	f7fc fcc5 	bl	80030cc <HAL_GPIO_EXTI_Callback>
  }
}
 8006742:	bd08      	pop	{r3, pc}
 8006744:	40010400 	.word	0x40010400

08006748 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006748:	4a37      	ldr	r2, [pc, #220]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800674a:	b960      	cbnz	r0, 8006766 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800674c:	6813      	ldr	r3, [r2, #0]
 800674e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006756:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800675a:	d01d      	beq.n	8006798 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800675c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006764:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006766:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800676a:	d007      	beq.n	800677c <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006776:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006778:	6013      	str	r3, [r2, #0]
}
 800677a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006786:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800678a:	d02b      	beq.n	80067e4 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800678c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006790:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006792:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006796:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800679c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067a2:	4822      	ldr	r0, [pc, #136]	; (800682c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80067a4:	4922      	ldr	r1, [pc, #136]	; (8006830 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067ae:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067b0:	6803      	ldr	r3, [r0, #0]
 80067b2:	2032      	movs	r0, #50	; 0x32
 80067b4:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b8:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067ba:	fba1 1303 	umull	r1, r3, r1, r3
 80067be:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067c0:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067c2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067c6:	d506      	bpl.n	80067d6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80067c8:	e000      	b.n	80067cc <HAL_PWREx_ControlVoltageScaling+0x84>
 80067ca:	b123      	cbz	r3, 80067d6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80067cc:	6951      	ldr	r1, [r2, #20]
 80067ce:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80067d0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d4:	d4f9      	bmi.n	80067ca <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 80067dc:	bf54      	ite	pl
 80067de:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 80067e0:	2003      	movmi	r0, #3
 80067e2:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067ec:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067ee:	480f      	ldr	r0, [pc, #60]	; (800682c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80067f0:	490f      	ldr	r1, [pc, #60]	; (8006830 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067fa:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067fc:	6803      	ldr	r3, [r0, #0]
 80067fe:	2032      	movs	r0, #50	; 0x32
 8006800:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006804:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006806:	fba1 1303 	umull	r1, r3, r1, r3
 800680a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800680c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800680e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006812:	d5e0      	bpl.n	80067d6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006814:	e001      	b.n	800681a <HAL_PWREx_ControlVoltageScaling+0xd2>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0dd      	beq.n	80067d6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 800681a:	6951      	ldr	r1, [r2, #20]
 800681c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800681e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006822:	d5d8      	bpl.n	80067d6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006824:	e7f7      	b.n	8006816 <HAL_PWREx_ControlVoltageScaling+0xce>
 8006826:	bf00      	nop
 8006828:	40007000 	.word	0x40007000
 800682c:	20000004 	.word	0x20000004
 8006830:	431bde83 	.word	0x431bde83

08006834 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006834:	4a02      	ldr	r2, [pc, #8]	; (8006840 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8006836:	6893      	ldr	r3, [r2, #8]
 8006838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800683c:	6093      	str	r3, [r2, #8]
}
 800683e:	4770      	bx	lr
 8006840:	40007000 	.word	0x40007000

08006844 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006844:	2800      	cmp	r0, #0
 8006846:	f000 81c3 	beq.w	8006bd0 <HAL_RCC_OscConfig+0x38c>
{
 800684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800684e:	6803      	ldr	r3, [r0, #0]
 8006850:	07d9      	lsls	r1, r3, #31
{
 8006852:	b082      	sub	sp, #8
 8006854:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006856:	d52d      	bpl.n	80068b4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006858:	49a6      	ldr	r1, [pc, #664]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 800685a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800685c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006862:	2a0c      	cmp	r2, #12
 8006864:	f000 810a 	beq.w	8006a7c <HAL_RCC_OscConfig+0x238>
 8006868:	2a08      	cmp	r2, #8
 800686a:	f000 810c 	beq.w	8006a86 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800686e:	6863      	ldr	r3, [r4, #4]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006874:	f000 8133 	beq.w	8006ade <HAL_RCC_OscConfig+0x29a>
 8006878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800687c:	f000 819b 	beq.w	8006bb6 <HAL_RCC_OscConfig+0x372>
 8006880:	4d9c      	ldr	r5, [pc, #624]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 8006882:	682a      	ldr	r2, [r5, #0]
 8006884:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006888:	602a      	str	r2, [r5, #0]
 800688a:	682a      	ldr	r2, [r5, #0]
 800688c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006890:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 8128 	bne.w	8006ae8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fc fac4 	bl	8002e24 <HAL_GetTick>
 800689c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800689e:	e005      	b.n	80068ac <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fc fac0 	bl	8002e24 <HAL_GetTick>
 80068a4:	1b80      	subs	r0, r0, r6
 80068a6:	2864      	cmp	r0, #100	; 0x64
 80068a8:	f200 8142 	bhi.w	8006b30 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	039f      	lsls	r7, r3, #14
 80068b0:	d4f6      	bmi.n	80068a0 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	079e      	lsls	r6, r3, #30
 80068b6:	d528      	bpl.n	800690a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b8:	4a8e      	ldr	r2, [pc, #568]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 80068ba:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068bc:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068be:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	f000 80ec 	beq.w	8006aa0 <HAL_RCC_OscConfig+0x25c>
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	f000 80ee 	beq.w	8006aaa <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068ce:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068d0:	4d88      	ldr	r5, [pc, #544]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 811d 	beq.w	8006b12 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068de:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e0:	f7fc faa0 	bl	8002e24 <HAL_GetTick>
 80068e4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068e6:	e005      	b.n	80068f4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068e8:	f7fc fa9c 	bl	8002e24 <HAL_GetTick>
 80068ec:	1b80      	subs	r0, r0, r6
 80068ee:	2802      	cmp	r0, #2
 80068f0:	f200 811e 	bhi.w	8006b30 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	0558      	lsls	r0, r3, #21
 80068f8:	d5f6      	bpl.n	80068e8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fa:	686b      	ldr	r3, [r5, #4]
 80068fc:	6922      	ldr	r2, [r4, #16]
 80068fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006902:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006906:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	071a      	lsls	r2, r3, #28
 800690c:	d519      	bpl.n	8006942 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800690e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006910:	4d78      	ldr	r5, [pc, #480]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 809e 	beq.w	8006a54 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8006918:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fc fa7e 	bl	8002e24 <HAL_GetTick>
 8006928:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800692a:	e005      	b.n	8006938 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800692c:	f7fc fa7a 	bl	8002e24 <HAL_GetTick>
 8006930:	1b80      	subs	r0, r0, r6
 8006932:	2802      	cmp	r0, #2
 8006934:	f200 80fc 	bhi.w	8006b30 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006938:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800693c:	079f      	lsls	r7, r3, #30
 800693e:	d5f5      	bpl.n	800692c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	0759      	lsls	r1, r3, #29
 8006944:	d541      	bpl.n	80069ca <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006946:	4b6b      	ldr	r3, [pc, #428]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 8006948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800694a:	00d2      	lsls	r2, r2, #3
 800694c:	f100 80f4 	bmi.w	8006b38 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006950:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006952:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006956:	659a      	str	r2, [r3, #88]	; 0x58
 8006958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006962:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006964:	4e64      	ldr	r6, [pc, #400]	; (8006af8 <HAL_RCC_OscConfig+0x2b4>)
 8006966:	6833      	ldr	r3, [r6, #0]
 8006968:	05df      	lsls	r7, r3, #23
 800696a:	f140 8113 	bpl.w	8006b94 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	2b01      	cmp	r3, #1
 8006972:	f000 80e3 	beq.w	8006b3c <HAL_RCC_OscConfig+0x2f8>
 8006976:	2b05      	cmp	r3, #5
 8006978:	f000 8169 	beq.w	8006c4e <HAL_RCC_OscConfig+0x40a>
 800697c:	4e5d      	ldr	r6, [pc, #372]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 800697e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800698a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 80d7 	bne.w	8006b4a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fc fa42 	bl	8002e24 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80069a4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069a6:	e005      	b.n	80069b4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a8:	f7fc fa3c 	bl	8002e24 <HAL_GetTick>
 80069ac:	1bc0      	subs	r0, r0, r7
 80069ae:	4540      	cmp	r0, r8
 80069b0:	f200 80be 	bhi.w	8006b30 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80069b8:	079a      	lsls	r2, r3, #30
 80069ba:	d4f5      	bmi.n	80069a8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069bc:	b125      	cbz	r5, 80069c8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069be:	4a4d      	ldr	r2, [pc, #308]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 80069c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80069c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	069b      	lsls	r3, r3, #26
 80069cc:	d518      	bpl.n	8006a00 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069ce:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069d0:	4d48      	ldr	r5, [pc, #288]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80ca 	beq.w	8006b6c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80069d8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80069dc:	f043 0301 	orr.w	r3, r3, #1
 80069e0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fc fa1e 	bl	8002e24 <HAL_GetTick>
 80069e8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069ea:	e005      	b.n	80069f8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069ec:	f7fc fa1a 	bl	8002e24 <HAL_GetTick>
 80069f0:	1b80      	subs	r0, r0, r6
 80069f2:	2802      	cmp	r0, #2
 80069f4:	f200 809c 	bhi.w	8006b30 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069f8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80069fc:	079f      	lsls	r7, r3, #30
 80069fe:	d5f5      	bpl.n	80069ec <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a00:	69e0      	ldr	r0, [r4, #28]
 8006a02:	b318      	cbz	r0, 8006a4c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a04:	4d3b      	ldr	r5, [pc, #236]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 8006a06:	68ab      	ldr	r3, [r5, #8]
 8006a08:	f003 030c 	and.w	r3, r3, #12
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	f000 812c 	beq.w	8006c6a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a12:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a14:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a1c:	f000 80da 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a20:	68eb      	ldr	r3, [r5, #12]
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a28:	68eb      	ldr	r3, [r5, #12]
 8006a2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a32:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a34:	f7fc f9f6 	bl	8002e24 <HAL_GetTick>
 8006a38:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3a:	e004      	b.n	8006a46 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3c:	f7fc f9f2 	bl	8002e24 <HAL_GetTick>
 8006a40:	1b00      	subs	r0, r0, r4
 8006a42:	2802      	cmp	r0, #2
 8006a44:	d874      	bhi.n	8006b30 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a46:	682b      	ldr	r3, [r5, #0]
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	d4f7      	bmi.n	8006a3c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006a4c:	2000      	movs	r0, #0
}
 8006a4e:	b002      	add	sp, #8
 8006a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006a54:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006a60:	f7fc f9e0 	bl	8002e24 <HAL_GetTick>
 8006a64:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a66:	e004      	b.n	8006a72 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a68:	f7fc f9dc 	bl	8002e24 <HAL_GetTick>
 8006a6c:	1b80      	subs	r0, r0, r6
 8006a6e:	2802      	cmp	r0, #2
 8006a70:	d85e      	bhi.n	8006b30 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a72:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006a76:	0798      	lsls	r0, r3, #30
 8006a78:	d4f6      	bmi.n	8006a68 <HAL_RCC_OscConfig+0x224>
 8006a7a:	e761      	b.n	8006940 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a7c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a80:	2903      	cmp	r1, #3
 8006a82:	f47f aef4 	bne.w	800686e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a86:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	0392      	lsls	r2, r2, #14
 8006a8c:	f57f af12 	bpl.w	80068b4 <HAL_RCC_OscConfig+0x70>
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	f47f af0e 	bne.w	80068b4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006a98:	2001      	movs	r0, #1
}
 8006a9a:	b002      	add	sp, #8
 8006a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006aa0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006aa4:	2a02      	cmp	r2, #2
 8006aa6:	f47f af12 	bne.w	80068ce <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aaa:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	055d      	lsls	r5, r3, #21
 8006ab0:	d502      	bpl.n	8006ab8 <HAL_RCC_OscConfig+0x274>
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ef      	beq.n	8006a98 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab8:	4a0e      	ldr	r2, [pc, #56]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 8006aba:	6920      	ldr	r0, [r4, #16]
 8006abc:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006abe:	490f      	ldr	r1, [pc, #60]	; (8006afc <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ac4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006ac8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006aca:	6808      	ldr	r0, [r1, #0]
 8006acc:	f7fe f922 	bl	8004d14 <HAL_InitTick>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d1e1      	bne.n	8006a98 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	071a      	lsls	r2, r3, #28
 8006ad8:	f57f af33 	bpl.w	8006942 <HAL_RCC_OscConfig+0xfe>
 8006adc:	e717      	b.n	800690e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ade:	4a05      	ldr	r2, [pc, #20]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
 8006ae0:	6813      	ldr	r3, [r2, #0]
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006ae8:	f7fc f99c 	bl	8002e24 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aec:	4e01      	ldr	r6, [pc, #4]	; (8006af4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006aee:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006af0:	e00b      	b.n	8006b0a <HAL_RCC_OscConfig+0x2c6>
 8006af2:	bf00      	nop
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40007000 	.word	0x40007000
 8006afc:	2000000c 	.word	0x2000000c
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b00:	f7fc f990 	bl	8002e24 <HAL_GetTick>
 8006b04:	1b40      	subs	r0, r0, r5
 8006b06:	2864      	cmp	r0, #100	; 0x64
 8006b08:	d812      	bhi.n	8006b30 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b0a:	6833      	ldr	r3, [r6, #0]
 8006b0c:	039b      	lsls	r3, r3, #14
 8006b0e:	d5f7      	bpl.n	8006b00 <HAL_RCC_OscConfig+0x2bc>
 8006b10:	e6cf      	b.n	80068b2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006b1a:	f7fc f983 	bl	8002e24 <HAL_GetTick>
 8006b1e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	0559      	lsls	r1, r3, #21
 8006b24:	d5d6      	bpl.n	8006ad4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b26:	f7fc f97d 	bl	8002e24 <HAL_GetTick>
 8006b2a:	1b80      	subs	r0, r0, r6
 8006b2c:	2802      	cmp	r0, #2
 8006b2e:	d9f7      	bls.n	8006b20 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8006b30:	2003      	movs	r0, #3
}
 8006b32:	b002      	add	sp, #8
 8006b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006b38:	2500      	movs	r5, #0
 8006b3a:	e713      	b.n	8006964 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b3c:	4a65      	ldr	r2, [pc, #404]	; (8006cd4 <HAL_RCC_OscConfig+0x490>)
 8006b3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006b4a:	f7fc f96b 	bl	8002e24 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4e:	4f61      	ldr	r7, [pc, #388]	; (8006cd4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006b50:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b56:	e004      	b.n	8006b62 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b58:	f7fc f964 	bl	8002e24 <HAL_GetTick>
 8006b5c:	1b80      	subs	r0, r0, r6
 8006b5e:	4540      	cmp	r0, r8
 8006b60:	d8e6      	bhi.n	8006b30 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b66:	0799      	lsls	r1, r3, #30
 8006b68:	d5f6      	bpl.n	8006b58 <HAL_RCC_OscConfig+0x314>
 8006b6a:	e727      	b.n	80069bc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006b6c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006b78:	f7fc f954 	bl	8002e24 <HAL_GetTick>
 8006b7c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b7e:	e004      	b.n	8006b8a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b80:	f7fc f950 	bl	8002e24 <HAL_GetTick>
 8006b84:	1b80      	subs	r0, r0, r6
 8006b86:	2802      	cmp	r0, #2
 8006b88:	d8d2      	bhi.n	8006b30 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b8a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006b8e:	0798      	lsls	r0, r3, #30
 8006b90:	d4f6      	bmi.n	8006b80 <HAL_RCC_OscConfig+0x33c>
 8006b92:	e735      	b.n	8006a00 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b94:	6833      	ldr	r3, [r6, #0]
 8006b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006b9c:	f7fc f942 	bl	8002e24 <HAL_GetTick>
 8006ba0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba2:	6833      	ldr	r3, [r6, #0]
 8006ba4:	05d8      	lsls	r0, r3, #23
 8006ba6:	f53f aee2 	bmi.w	800696e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006baa:	f7fc f93b 	bl	8002e24 <HAL_GetTick>
 8006bae:	1bc0      	subs	r0, r0, r7
 8006bb0:	2802      	cmp	r0, #2
 8006bb2:	d9f6      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x35e>
 8006bb4:	e7bc      	b.n	8006b30 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006bba:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006bcc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bce:	e78b      	b.n	8006ae8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8006bd0:	2001      	movs	r0, #1
}
 8006bd2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006bd4:	f7fc f926 	bl	8002e24 <HAL_GetTick>
 8006bd8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bda:	e004      	b.n	8006be6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fc f922 	bl	8002e24 <HAL_GetTick>
 8006be0:	1b80      	subs	r0, r0, r6
 8006be2:	2802      	cmp	r0, #2
 8006be4:	d8a4      	bhi.n	8006b30 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	0199      	lsls	r1, r3, #6
 8006bea:	d4f7      	bmi.n	8006bdc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bec:	68e9      	ldr	r1, [r5, #12]
 8006bee:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <HAL_RCC_OscConfig+0x494>)
 8006bf0:	6a22      	ldr	r2, [r4, #32]
 8006bf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf4:	4e37      	ldr	r6, [pc, #220]	; (8006cd4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8006bfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006c02:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8006c06:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8006c0a:	3801      	subs	r0, #1
 8006c0c:	0849      	lsrs	r1, r1, #1
 8006c0e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006c12:	3901      	subs	r1, #1
 8006c14:	0852      	lsrs	r2, r2, #1
 8006c16:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006c1a:	3a01      	subs	r2, #1
 8006c1c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006c20:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c28:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c2a:	68eb      	ldr	r3, [r5, #12]
 8006c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c30:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006c32:	f7fc f8f7 	bl	8002e24 <HAL_GetTick>
 8006c36:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c38:	e005      	b.n	8006c46 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c3a:	f7fc f8f3 	bl	8002e24 <HAL_GetTick>
 8006c3e:	1b00      	subs	r0, r0, r4
 8006c40:	2802      	cmp	r0, #2
 8006c42:	f63f af75 	bhi.w	8006b30 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c46:	6833      	ldr	r3, [r6, #0]
 8006c48:	019a      	lsls	r2, r3, #6
 8006c4a:	d5f6      	bpl.n	8006c3a <HAL_RCC_OscConfig+0x3f6>
 8006c4c:	e6fe      	b.n	8006a4c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <HAL_RCC_OscConfig+0x490>)
 8006c50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c54:	f042 0204 	orr.w	r2, r2, #4
 8006c58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006c5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c68:	e76f      	b.n	8006b4a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c6a:	2801      	cmp	r0, #1
 8006c6c:	f43f aeef 	beq.w	8006a4e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006c70:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	6a22      	ldr	r2, [r4, #32]
 8006c74:	f003 0103 	and.w	r1, r3, #3
 8006c78:	4291      	cmp	r1, r2
 8006c7a:	f47f af0d 	bne.w	8006a98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c84:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c86:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006c8a:	f47f af05 	bne.w	8006a98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c94:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006c98:	f47f aefe 	bne.w	8006a98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ca2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006ca6:	f47f aef7 	bne.w	8006a98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006caa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006cac:	0852      	lsrs	r2, r2, #1
 8006cae:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8006cb2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cb4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006cb8:	f47f aeee 	bne.w	8006a98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cbc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006cbe:	0852      	lsrs	r2, r2, #1
 8006cc0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006cc4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cc6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8006cca:	bf14      	ite	ne
 8006ccc:	2001      	movne	r0, #1
 8006cce:	2000      	moveq	r0, #0
 8006cd0:	e6bd      	b.n	8006a4e <HAL_RCC_OscConfig+0x20a>
 8006cd2:	bf00      	nop
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	019f800c 	.word	0x019f800c

08006cdc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006cdc:	4b18      	ldr	r3, [pc, #96]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x64>)
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	f002 020c 	and.w	r2, r2, #12
 8006ce4:	2a04      	cmp	r2, #4
 8006ce6:	d026      	beq.n	8006d36 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	f002 020c 	and.w	r2, r2, #12
 8006cee:	2a08      	cmp	r2, #8
 8006cf0:	d023      	beq.n	8006d3a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	f002 020c 	and.w	r2, r2, #12
 8006cf8:	2a0c      	cmp	r2, #12
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006cfc:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006cfe:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d00:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d02:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d04:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d06:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8006d0a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d0c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d10:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d14:	bf0c      	ite	eq
 8006d16:	4b0b      	ldreq	r3, [pc, #44]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d18:	4b0b      	ldrne	r3, [pc, #44]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d1a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d20:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x64>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006d30:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006d34:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006d36:	4804      	ldr	r0, [pc, #16]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006d38:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006d3a:	4802      	ldr	r0, [pc, #8]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x68>)
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40021000 	.word	0x40021000
 8006d44:	007a1200 	.word	0x007a1200
 8006d48:	00f42400 	.word	0x00f42400

08006d4c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	f000 80ee 	beq.w	8006f2e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d52:	4a78      	ldr	r2, [pc, #480]	; (8006f34 <HAL_RCC_ClockConfig+0x1e8>)
{
 8006d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d58:	6813      	ldr	r3, [r2, #0]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	428b      	cmp	r3, r1
 8006d60:	460d      	mov	r5, r1
 8006d62:	4604      	mov	r4, r0
 8006d64:	d20c      	bcs.n	8006d80 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	f023 030f 	bic.w	r3, r3, #15
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	428b      	cmp	r3, r1
 8006d78:	d002      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006d7a:	2001      	movs	r0, #1
}
 8006d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	07df      	lsls	r7, r3, #31
 8006d84:	d569      	bpl.n	8006e5a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d86:	6867      	ldr	r7, [r4, #4]
 8006d88:	2f03      	cmp	r7, #3
 8006d8a:	f000 80a0 	beq.w	8006ece <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d8e:	4b6a      	ldr	r3, [pc, #424]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d90:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d92:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d94:	f000 8097 	beq.w	8006ec6 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d98:	055b      	lsls	r3, r3, #21
 8006d9a:	d5ee      	bpl.n	8006d7a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d9c:	f7ff ff9e 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006da0:	4b66      	ldr	r3, [pc, #408]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
 8006da2:	4298      	cmp	r0, r3
 8006da4:	f240 80c0 	bls.w	8006f28 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006da8:	4a63      	ldr	r2, [pc, #396]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006daa:	6893      	ldr	r3, [r2, #8]
 8006dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006db6:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dba:	4e5f      	ldr	r6, [pc, #380]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006dbc:	68b3      	ldr	r3, [r6, #8]
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	433b      	orrs	r3, r7
 8006dc4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006dc6:	f7fc f82d 	bl	8002e24 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006dce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd0:	e004      	b.n	8006ddc <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd2:	f7fc f827 	bl	8002e24 <HAL_GetTick>
 8006dd6:	1bc0      	subs	r0, r0, r7
 8006dd8:	4540      	cmp	r0, r8
 8006dda:	d871      	bhi.n	8006ec0 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ddc:	68b3      	ldr	r3, [r6, #8]
 8006dde:	6862      	ldr	r2, [r4, #4]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006de8:	d1f3      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	079f      	lsls	r7, r3, #30
 8006dee:	d436      	bmi.n	8006e5e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8006df0:	f1b9 0f00 	cmp.w	r9, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006df6:	68b3      	ldr	r3, [r6, #8]
 8006df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dfc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dfe:	4e4d      	ldr	r6, [pc, #308]	; (8006f34 <HAL_RCC_ClockConfig+0x1e8>)
 8006e00:	6833      	ldr	r3, [r6, #0]
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	42ab      	cmp	r3, r5
 8006e08:	d846      	bhi.n	8006e98 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	075a      	lsls	r2, r3, #29
 8006e0e:	d506      	bpl.n	8006e1e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e10:	4949      	ldr	r1, [pc, #292]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006e12:	68e0      	ldr	r0, [r4, #12]
 8006e14:	688a      	ldr	r2, [r1, #8]
 8006e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e1a:	4302      	orrs	r2, r0
 8006e1c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e1e:	071b      	lsls	r3, r3, #28
 8006e20:	d507      	bpl.n	8006e32 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e22:	4a45      	ldr	r2, [pc, #276]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006e24:	6921      	ldr	r1, [r4, #16]
 8006e26:	6893      	ldr	r3, [r2, #8]
 8006e28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006e2c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e30:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e32:	f7ff ff53 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
 8006e36:	4a40      	ldr	r2, [pc, #256]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006e38:	4c41      	ldr	r4, [pc, #260]	; (8006f40 <HAL_RCC_ClockConfig+0x1f4>)
 8006e3a:	6892      	ldr	r2, [r2, #8]
 8006e3c:	4941      	ldr	r1, [pc, #260]	; (8006f44 <HAL_RCC_ClockConfig+0x1f8>)
 8006e3e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006e42:	4603      	mov	r3, r0
 8006e44:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006e46:	4840      	ldr	r0, [pc, #256]	; (8006f48 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e48:	f002 021f 	and.w	r2, r2, #31
 8006e4c:	40d3      	lsrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006e50:	6800      	ldr	r0, [r0, #0]
}
 8006e52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006e56:	f7fd bf5d 	b.w	8004d14 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5a:	079e      	lsls	r6, r3, #30
 8006e5c:	d5cf      	bpl.n	8006dfe <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e5e:	0758      	lsls	r0, r3, #29
 8006e60:	d504      	bpl.n	8006e6c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e62:	4935      	ldr	r1, [pc, #212]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006e64:	688a      	ldr	r2, [r1, #8]
 8006e66:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e6a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6c:	0719      	lsls	r1, r3, #28
 8006e6e:	d506      	bpl.n	8006e7e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e70:	4a31      	ldr	r2, [pc, #196]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006e72:	6893      	ldr	r3, [r2, #8]
 8006e74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e78:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e7c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e7e:	4a2e      	ldr	r2, [pc, #184]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006e80:	68a1      	ldr	r1, [r4, #8]
 8006e82:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e84:	4e2b      	ldr	r6, [pc, #172]	; (8006f34 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e8e:	6833      	ldr	r3, [r6, #0]
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	d9b8      	bls.n	8006e0a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	f023 030f 	bic.w	r3, r3, #15
 8006e9e:	432b      	orrs	r3, r5
 8006ea0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006ea2:	f7fb ffbf 	bl	8002e24 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006eaa:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eac:	6833      	ldr	r3, [r6, #0]
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	42ab      	cmp	r3, r5
 8006eb4:	d0a9      	beq.n	8006e0a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb6:	f7fb ffb5 	bl	8002e24 <HAL_GetTick>
 8006eba:	1bc0      	subs	r0, r0, r7
 8006ebc:	4540      	cmp	r0, r8
 8006ebe:	d9f5      	bls.n	8006eac <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8006ec0:	2003      	movs	r0, #3
}
 8006ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ec6:	039a      	lsls	r2, r3, #14
 8006ec8:	f53f af68 	bmi.w	8006d9c <HAL_RCC_ClockConfig+0x50>
 8006ecc:	e755      	b.n	8006d7a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ece:	4a1a      	ldr	r2, [pc, #104]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
 8006ed0:	6811      	ldr	r1, [r2, #0]
 8006ed2:	0188      	lsls	r0, r1, #6
 8006ed4:	f57f af51 	bpl.w	8006d7a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ed8:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eda:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006edc:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8006ede:	4e17      	ldr	r6, [pc, #92]	; (8006f3c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ee0:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8006ee4:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ee6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eea:	bf0c      	ite	eq
 8006eec:	4817      	ldreq	r0, [pc, #92]	; (8006f4c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eee:	4818      	ldrne	r0, [pc, #96]	; (8006f50 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ef0:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ef2:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ef6:	4810      	ldr	r0, [pc, #64]	; (8006f38 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ef8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8006efc:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f00:	68c1      	ldr	r1, [r0, #12]
 8006f02:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8006f06:	3101      	adds	r1, #1
 8006f08:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8006f0a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8006f0e:	42b2      	cmp	r2, r6
 8006f10:	d90a      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f12:	6882      	ldr	r2, [r0, #8]
 8006f14:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8006f18:	f43f af46 	beq.w	8006da8 <HAL_RCC_ClockConfig+0x5c>
 8006f1c:	0799      	lsls	r1, r3, #30
 8006f1e:	d503      	bpl.n	8006f28 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f20:	68a3      	ldr	r3, [r4, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f43f af40 	beq.w	8006da8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f28:	f04f 0900 	mov.w	r9, #0
 8006f2c:	e745      	b.n	8006dba <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8006f2e:	2001      	movs	r0, #1
}
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40022000 	.word	0x40022000
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	04c4b400 	.word	0x04c4b400
 8006f40:	0800d524 	.word	0x0800d524
 8006f44:	20000004 	.word	0x20000004
 8006f48:	2000000c 	.word	0x2000000c
 8006f4c:	007a1200 	.word	0x007a1200
 8006f50:	00f42400 	.word	0x00f42400

08006f54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006f56:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f58:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006f5a:	4906      	ldr	r1, [pc, #24]	; (8006f74 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006f60:	6808      	ldr	r0, [r1, #0]
 8006f62:	5cd3      	ldrb	r3, [r2, r3]
 8006f64:	f003 031f 	and.w	r3, r3, #31
}
 8006f68:	40d8      	lsrs	r0, r3
 8006f6a:	4770      	bx	lr
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	0800d534 	.word	0x0800d534
 8006f74:	20000004 	.word	0x20000004

08006f78 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f78:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006f7a:	4a06      	ldr	r2, [pc, #24]	; (8006f94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006f7e:	4906      	ldr	r1, [pc, #24]	; (8006f98 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f80:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	5cd3      	ldrb	r3, [r2, r3]
 8006f88:	f003 031f 	and.w	r3, r3, #31
}
 8006f8c:	40d8      	lsrs	r0, r3
 8006f8e:	4770      	bx	lr
 8006f90:	40021000 	.word	0x40021000
 8006f94:	0800d534 	.word	0x0800d534
 8006f98:	20000004 	.word	0x20000004

08006f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fa0:	6803      	ldr	r3, [r0, #0]
{
 8006fa2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fa4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8006fa8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006faa:	d056      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fac:	4bac      	ldr	r3, [pc, #688]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fb0:	00d5      	lsls	r5, r2, #3
 8006fb2:	f140 813e 	bpl.w	8007232 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8006fb6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb8:	4daa      	ldr	r5, [pc, #680]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fc2:	f7fb ff2f 	bl	8002e24 <HAL_GetTick>
 8006fc6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc8:	e005      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fca:	f7fb ff2b 	bl	8002e24 <HAL_GetTick>
 8006fce:	1b83      	subs	r3, r0, r6
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	f200 8139 	bhi.w	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fd6:	682b      	ldr	r3, [r5, #0]
 8006fd8:	05d8      	lsls	r0, r3, #23
 8006fda:	d5f6      	bpl.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fdc:	4da0      	ldr	r5, [pc, #640]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fde:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fe2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006fe6:	d027      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006fe8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d025      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fee:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ff2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ffe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007006:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800700a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800700e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8007010:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007014:	f140 8148 	bpl.w	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fb ff04 	bl	8002e24 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007020:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007022:	e005      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007024:	f7fb fefe 	bl	8002e24 <HAL_GetTick>
 8007028:	1b80      	subs	r0, r0, r6
 800702a:	4540      	cmp	r0, r8
 800702c:	f200 810c 	bhi.w	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007030:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007034:	079b      	lsls	r3, r3, #30
 8007036:	d5f5      	bpl.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007038:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800703a:	4989      	ldr	r1, [pc, #548]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800703c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007040:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007044:	4313      	orrs	r3, r2
 8007046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800704a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800704c:	b127      	cbz	r7, 8007058 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800704e:	4a84      	ldr	r2, [pc, #528]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007050:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007056:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07dd      	lsls	r5, r3, #31
 800705c:	d508      	bpl.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800705e:	4980      	ldr	r1, [pc, #512]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007060:	6865      	ldr	r5, [r4, #4]
 8007062:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007066:	f022 0203 	bic.w	r2, r2, #3
 800706a:	432a      	orrs	r2, r5
 800706c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007070:	0799      	lsls	r1, r3, #30
 8007072:	d508      	bpl.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007074:	497a      	ldr	r1, [pc, #488]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007076:	68a5      	ldr	r5, [r4, #8]
 8007078:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800707c:	f022 020c 	bic.w	r2, r2, #12
 8007080:	432a      	orrs	r2, r5
 8007082:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007086:	075a      	lsls	r2, r3, #29
 8007088:	d508      	bpl.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800708a:	4975      	ldr	r1, [pc, #468]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800708c:	68e5      	ldr	r5, [r4, #12]
 800708e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007092:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007096:	432a      	orrs	r2, r5
 8007098:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800709c:	071f      	lsls	r7, r3, #28
 800709e:	d508      	bpl.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070a0:	496f      	ldr	r1, [pc, #444]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070a2:	6925      	ldr	r5, [r4, #16]
 80070a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070a8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80070ac:	432a      	orrs	r2, r5
 80070ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070b2:	06de      	lsls	r6, r3, #27
 80070b4:	d508      	bpl.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070b6:	496a      	ldr	r1, [pc, #424]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070b8:	6965      	ldr	r5, [r4, #20]
 80070ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070c2:	432a      	orrs	r2, r5
 80070c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070c8:	069d      	lsls	r5, r3, #26
 80070ca:	d508      	bpl.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070cc:	4964      	ldr	r1, [pc, #400]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070ce:	69a5      	ldr	r5, [r4, #24]
 80070d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070d8:	432a      	orrs	r2, r5
 80070da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070de:	0659      	lsls	r1, r3, #25
 80070e0:	d508      	bpl.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070e2:	495f      	ldr	r1, [pc, #380]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070e4:	69e5      	ldr	r5, [r4, #28]
 80070e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80070ee:	432a      	orrs	r2, r5
 80070f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070f4:	061a      	lsls	r2, r3, #24
 80070f6:	d508      	bpl.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070f8:	4959      	ldr	r1, [pc, #356]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070fa:	6a25      	ldr	r5, [r4, #32]
 80070fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007100:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007104:	432a      	orrs	r2, r5
 8007106:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800710a:	05df      	lsls	r7, r3, #23
 800710c:	d508      	bpl.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800710e:	4954      	ldr	r1, [pc, #336]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007110:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007112:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007116:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800711a:	432a      	orrs	r2, r5
 800711c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007120:	039e      	lsls	r6, r3, #14
 8007122:	d508      	bpl.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007124:	494e      	ldr	r1, [pc, #312]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007126:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007128:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800712c:	f022 0203 	bic.w	r2, r2, #3
 8007130:	432a      	orrs	r2, r5
 8007132:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007136:	059d      	lsls	r5, r3, #22
 8007138:	d508      	bpl.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800713a:	4949      	ldr	r1, [pc, #292]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800713c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800713e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007142:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007146:	432a      	orrs	r2, r5
 8007148:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800714c:	0559      	lsls	r1, r3, #21
 800714e:	d50b      	bpl.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007150:	4943      	ldr	r1, [pc, #268]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007152:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007154:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007158:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800715c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800715e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007162:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007166:	d071      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007168:	051a      	lsls	r2, r3, #20
 800716a:	d50b      	bpl.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800716c:	493c      	ldr	r1, [pc, #240]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800716e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007170:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007174:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007178:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800717a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800717e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007182:	d068      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007184:	04df      	lsls	r7, r3, #19
 8007186:	d50b      	bpl.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007188:	4935      	ldr	r1, [pc, #212]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800718a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800718c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007190:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007194:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007196:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800719a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800719e:	d063      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071a0:	049e      	lsls	r6, r3, #18
 80071a2:	d50b      	bpl.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a4:	492e      	ldr	r1, [pc, #184]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071a6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80071a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80071ac:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80071b0:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071b2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071ba:	d05a      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071bc:	045d      	lsls	r5, r3, #17
 80071be:	d50b      	bpl.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071c0:	4927      	ldr	r1, [pc, #156]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071c2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80071c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80071c8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80071cc:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071ce:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071d6:	d051      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80071d8:	0419      	lsls	r1, r3, #16
 80071da:	d50b      	bpl.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80071dc:	4920      	ldr	r1, [pc, #128]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071de:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80071e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80071e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80071e8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80071ea:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80071ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80071f2:	d048      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80071f4:	03da      	lsls	r2, r3, #15
 80071f6:	d50b      	bpl.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80071f8:	4919      	ldr	r1, [pc, #100]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071fa:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80071fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007200:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007204:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007206:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800720a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800720e:	d03f      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007210:	035b      	lsls	r3, r3, #13
 8007212:	d50b      	bpl.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007214:	4a12      	ldr	r2, [pc, #72]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007216:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007218:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800721c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007220:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007222:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007226:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800722a:	d036      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 800722c:	b002      	add	sp, #8
 800722e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007232:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007234:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007238:	659a      	str	r2, [r3, #88]	; 0x58
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007244:	2701      	movs	r7, #1
 8007246:	e6b7      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8007248:	2003      	movs	r0, #3
 800724a:	e6ff      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800724c:	68ca      	ldr	r2, [r1, #12]
 800724e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007252:	60ca      	str	r2, [r1, #12]
 8007254:	e788      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007256:	68ca      	ldr	r2, [r1, #12]
 8007258:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800725c:	60ca      	str	r2, [r1, #12]
 800725e:	e791      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007260:	40021000 	.word	0x40021000
 8007264:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007268:	68ca      	ldr	r2, [r1, #12]
 800726a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800726e:	60ca      	str	r2, [r1, #12]
 8007270:	e796      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007272:	68ca      	ldr	r2, [r1, #12]
 8007274:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007278:	60ca      	str	r2, [r1, #12]
 800727a:	e79f      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800727c:	68ca      	ldr	r2, [r1, #12]
 800727e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007282:	60ca      	str	r2, [r1, #12]
 8007284:	e7a8      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007286:	68ca      	ldr	r2, [r1, #12]
 8007288:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800728c:	60ca      	str	r2, [r1, #12]
 800728e:	e7b1      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007290:	68ca      	ldr	r2, [r1, #12]
 8007292:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007296:	60ca      	str	r2, [r1, #12]
 8007298:	e7ba      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800729a:	68d3      	ldr	r3, [r2, #12]
 800729c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072a0:	60d3      	str	r3, [r2, #12]
}
 80072a2:	b002      	add	sp, #8
 80072a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a8:	4613      	mov	r3, r2
 80072aa:	e6c6      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x9e>

080072ac <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80072ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b0:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072b2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80072b4:	4617      	mov	r7, r2
 80072b6:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 80072b8:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80072bc:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072be:	f7fb fdb1 	bl	8002e24 <HAL_GetTick>
 80072c2:	442f      	add	r7, r5
 80072c4:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80072c6:	f7fb fdad 	bl	8002e24 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072ca:	4b31      	ldr	r3, [pc, #196]	; (8007390 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072cc:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80072d8:	0d1b      	lsrs	r3, r3, #20
 80072da:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 80072de:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072e0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80072e2:	4622      	mov	r2, r4
 80072e4:	1c69      	adds	r1, r5, #1
 80072e6:	6893      	ldr	r3, [r2, #8]
 80072e8:	d110      	bne.n	800730c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 80072ea:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80072ee:	d009      	beq.n	8007304 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072f0:	7b23      	ldrb	r3, [r4, #12]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80072fc:	6893      	ldr	r3, [r2, #8]
 80072fe:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007302:	d1f5      	bne.n	80072f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8007304:	2000      	movs	r0, #0
}
 8007306:	b002      	add	sp, #8
 8007308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800730c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007310:	d0f8      	beq.n	8007304 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8007312:	7b23      	ldrb	r3, [r4, #12]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800731a:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800731e:	f7fb fd81 	bl	8002e24 <HAL_GetTick>
 8007322:	eba0 0008 	sub.w	r0, r0, r8
 8007326:	42b8      	cmp	r0, r7
 8007328:	d209      	bcs.n	800733e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 800732a:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800732c:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800732e:	2b00      	cmp	r3, #0
      count--;
 8007330:	9b01      	ldr	r3, [sp, #4]
 8007332:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007336:	bf08      	it	eq
 8007338:	2700      	moveq	r7, #0
      count--;
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	e7d2      	b.n	80072e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800733e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007342:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007344:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800734c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800734e:	d013      	beq.n	8007378 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007350:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007352:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007356:	d107      	bne.n	8007368 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007366:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007368:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800736a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800736c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007370:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007374:	2003      	movs	r0, #3
 8007376:	e7c6      	b.n	8007306 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007378:	68b2      	ldr	r2, [r6, #8]
 800737a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800737e:	d002      	beq.n	8007386 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007380:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007384:	d1e4      	bne.n	8007350 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e7df      	b.n	8007350 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8007390:	20000004 	.word	0x20000004

08007394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007398:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	f88d 3007 	strb.w	r3, [sp, #7]
 80073a0:	eb01 0902 	add.w	r9, r1, r2
{
 80073a4:	460e      	mov	r6, r1
 80073a6:	4617      	mov	r7, r2
 80073a8:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073aa:	f7fb fd3b 	bl	8002e24 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073ae:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80074d0 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073b2:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 80073b6:	f7fb fd35 	bl	8002e24 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073ba:	f8d8 3000 	ldr.w	r3, [r8]
 80073be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80073c6:	0d1b      	lsrs	r3, r3, #20
 80073c8:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 80073cc:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073ce:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80073d0:	1c70      	adds	r0, r6, #1
 80073d2:	682c      	ldr	r4, [r5, #0]
 80073d4:	d120      	bne.n	8007418 <SPI_EndRxTxTransaction+0x84>
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80073dc:	d1fb      	bne.n	80073d6 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073de:	f7fb fd21 	bl	8002e24 <HAL_GetTick>
 80073e2:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 80073e6:	f7fb fd1d 	bl	8002e24 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073ea:	f8d8 3000 	ldr.w	r3, [r8]
 80073ee:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80073f2:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 80073f6:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073f8:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073fa:	1c71      	adds	r1, r6, #1
 80073fc:	682c      	ldr	r4, [r5, #0]
 80073fe:	d11f      	bne.n	8007440 <SPI_EndRxTxTransaction+0xac>
 8007400:	68a3      	ldr	r3, [r4, #8]
 8007402:	061a      	lsls	r2, r3, #24
 8007404:	d4fc      	bmi.n	8007400 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007406:	463a      	mov	r2, r7
 8007408:	4631      	mov	r1, r6
 800740a:	4628      	mov	r0, r5
 800740c:	f7ff ff4e 	bl	80072ac <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007410:	bb48      	cbnz	r0, 8007466 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007412:	b005      	add	sp, #20
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007418:	68a3      	ldr	r3, [r4, #8]
 800741a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800741e:	d0de      	beq.n	80073de <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007420:	f7fb fd00 	bl	8002e24 <HAL_GetTick>
 8007424:	eba0 000b 	sub.w	r0, r0, fp
 8007428:	4550      	cmp	r0, sl
 800742a:	d222      	bcs.n	8007472 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 800742c:	9a02      	ldr	r2, [sp, #8]
      count--;
 800742e:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8007430:	2a00      	cmp	r2, #0
      count--;
 8007432:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007436:	bf08      	it	eq
 8007438:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800743c:	9302      	str	r3, [sp, #8]
 800743e:	e7c7      	b.n	80073d0 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007440:	68a3      	ldr	r3, [r4, #8]
 8007442:	061b      	lsls	r3, r3, #24
 8007444:	d5df      	bpl.n	8007406 <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007446:	f7fb fced 	bl	8002e24 <HAL_GetTick>
 800744a:	eba0 0008 	sub.w	r0, r0, r8
 800744e:	4548      	cmp	r0, r9
 8007450:	d20f      	bcs.n	8007472 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007452:	9a03      	ldr	r2, [sp, #12]
      count--;
 8007454:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8007456:	2a00      	cmp	r2, #0
      count--;
 8007458:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800745c:	bf08      	it	eq
 800745e:	f04f 0900 	moveq.w	r9, #0
      count--;
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	e7c9      	b.n	80073fa <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007466:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007468:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 800746c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800746e:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8007470:	e7cf      	b.n	8007412 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007472:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007476:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007478:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800747c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007480:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007482:	d019      	beq.n	80074b8 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007484:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007486:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800748a:	d107      	bne.n	800749c <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800749a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800749c:	2301      	movs	r3, #1
 800749e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80074a4:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a6:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80074aa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80074ac:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b0:	662b      	str	r3, [r5, #96]	; 0x60
}
 80074b2:	b005      	add	sp, #20
 80074b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b8:	68aa      	ldr	r2, [r5, #8]
 80074ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80074be:	d002      	beq.n	80074c6 <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80074c4:	d1de      	bne.n	8007484 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e7d9      	b.n	8007484 <SPI_EndRxTxTransaction+0xf0>
 80074d0:	20000004 	.word	0x20000004

080074d4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d077      	beq.n	80075c8 <HAL_SPI_Init+0xf4>
{
 80074d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074dc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074de:	4604      	mov	r4, r0
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	d058      	beq.n	8007596 <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074e4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80074ea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074ee:	2200      	movs	r2, #0
 80074f0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80074f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d059      	beq.n	80075ae <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 80074fa:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074fc:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80074fe:	2302      	movs	r3, #2
 8007500:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007504:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007506:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800750a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800750e:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007510:	d947      	bls.n	80075a2 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007512:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8007516:	d159      	bne.n	80075cc <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007518:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800751a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800751c:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007520:	6862      	ldr	r2, [r4, #4]
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800752c:	431a      	orrs	r2, r3
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	4313      	orrs	r3, r2
 8007536:	6962      	ldr	r2, [r4, #20]
 8007538:	f002 0201 	and.w	r2, r2, #1
 800753c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800753e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007540:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800754c:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800754e:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007552:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007556:	69a6      	ldr	r6, [r4, #24]
 8007558:	6a23      	ldr	r3, [r4, #32]
 800755a:	f003 0780 	and.w	r7, r3, #128	; 0x80
 800755e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007562:	4313      	orrs	r3, r2
 8007564:	ea43 0308 	orr.w	r3, r3, r8
 8007568:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800756a:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800756c:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800756e:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007572:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007574:	ea4e 0306 	orr.w	r3, lr, r6
 8007578:	ea43 030c 	orr.w	r3, r3, ip
 800757c:	4303      	orrs	r3, r0
 800757e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007580:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007582:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007588:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800758a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800758c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800758e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8007592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007596:	6843      	ldr	r3, [r0, #4]
 8007598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800759c:	d0a5      	beq.n	80074ea <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800759e:	61c6      	str	r6, [r0, #28]
 80075a0:	e7a3      	b.n	80074ea <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075a2:	d00b      	beq.n	80075bc <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a8:	2500      	movs	r5, #0
 80075aa:	62a5      	str	r5, [r4, #40]	; 0x28
 80075ac:	e7b8      	b.n	8007520 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 80075ae:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7fc fe38 	bl	8004228 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075ba:	e79e      	b.n	80074fa <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075bc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075c2:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 80075c6:	e7ab      	b.n	8007520 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80075c8:	2001      	movs	r0, #1
}
 80075ca:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075cc:	2000      	movs	r0, #0
 80075ce:	e7eb      	b.n	80075a8 <HAL_SPI_Init+0xd4>

080075d0 <HAL_SPI_TransmitReceive>:
{
 80075d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80075d6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 80075da:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 80075dc:	2801      	cmp	r0, #1
 80075de:	f000 8097 	beq.w	8007710 <HAL_SPI_TransmitReceive+0x140>
 80075e2:	461f      	mov	r7, r3
 80075e4:	2301      	movs	r3, #1
 80075e6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80075ea:	4689      	mov	r9, r1
 80075ec:	4690      	mov	r8, r2
 80075ee:	f7fb fc19 	bl	8002e24 <HAL_GetTick>
 80075f2:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80075f4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80075f8:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075fa:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80075fc:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075fe:	d010      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x52>
 8007600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007604:	d008      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8007606:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007608:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800760a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800760c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007610:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007618:	68a2      	ldr	r2, [r4, #8]
 800761a:	2a00      	cmp	r2, #0
 800761c:	d1f3      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x36>
 800761e:	2904      	cmp	r1, #4
 8007620:	d1f1      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007622:	f1b9 0f00 	cmp.w	r9, #0
 8007626:	d076      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x146>
 8007628:	f1b8 0f00 	cmp.w	r8, #0
 800762c:	d073      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x146>
 800762e:	2f00      	cmp	r7, #0
 8007630:	d071      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007632:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007636:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007638:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800763c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800763e:	bf1c      	itt	ne
 8007640:	2205      	movne	r2, #5
 8007642:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007646:	2200      	movs	r2, #0
 8007648:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800764a:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800764e:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8007650:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007654:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 8007658:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800765a:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 800765c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007660:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007664:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007666:	d858      	bhi.n	800771a <HAL_SPI_TransmitReceive+0x14a>
 8007668:	2f01      	cmp	r7, #1
 800766a:	f000 8124 	beq.w	80078b6 <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800766e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007672:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007674:	6811      	ldr	r1, [r2, #0]
 8007676:	0649      	lsls	r1, r1, #25
 8007678:	f100 80e3 	bmi.w	8007842 <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 800767c:	6811      	ldr	r1, [r2, #0]
 800767e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007682:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80df 	beq.w	8007848 <HAL_SPI_TransmitReceive+0x278>
 800768a:	2f01      	cmp	r7, #1
 800768c:	f000 80dc 	beq.w	8007848 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 8007690:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007692:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007694:	b29b      	uxth	r3, r3
 8007696:	b92b      	cbnz	r3, 80076a4 <HAL_SPI_TransmitReceive+0xd4>
 8007698:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8086 	beq.w	80077b0 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	6893      	ldr	r3, [r2, #8]
 80076a8:	0799      	lsls	r1, r3, #30
 80076aa:	d505      	bpl.n	80076b8 <HAL_SPI_TransmitReceive+0xe8>
 80076ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	b113      	cbz	r3, 80076b8 <HAL_SPI_TransmitReceive+0xe8>
 80076b2:	2f00      	cmp	r7, #0
 80076b4:	f040 80e4 	bne.w	8007880 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076b8:	6893      	ldr	r3, [r2, #8]
 80076ba:	f013 0301 	ands.w	r3, r3, #1
 80076be:	d01e      	beq.n	80076fe <HAL_SPI_TransmitReceive+0x12e>
 80076c0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80076c4:	b289      	uxth	r1, r1
 80076c6:	b1d1      	cbz	r1, 80076fe <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 80076c8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80076cc:	b289      	uxth	r1, r1
 80076ce:	2901      	cmp	r1, #1
 80076d0:	f240 80c8 	bls.w	8007864 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076d6:	68d0      	ldr	r0, [r2, #12]
 80076d8:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80076dc:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80076de:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80076e2:	3902      	subs	r1, #2
 80076e4:	b289      	uxth	r1, r1
 80076e6:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80076ea:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80076ee:	b289      	uxth	r1, r1
 80076f0:	2901      	cmp	r1, #1
        txallowed = 1U;
 80076f2:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 80076f4:	d803      	bhi.n	80076fe <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076f6:	6853      	ldr	r3, [r2, #4]
 80076f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076fc:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076fe:	f7fb fb91 	bl	8002e24 <HAL_GetTick>
 8007702:	1b43      	subs	r3, r0, r5
 8007704:	42b3      	cmp	r3, r6
 8007706:	d3c4      	bcc.n	8007692 <HAL_SPI_TransmitReceive+0xc2>
 8007708:	1c73      	adds	r3, r6, #1
 800770a:	d0c2      	beq.n	8007692 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 800770c:	2003      	movs	r0, #3
 800770e:	e77b      	b.n	8007608 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8007710:	2002      	movs	r0, #2
}
 8007712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8007716:	2001      	movs	r0, #1
 8007718:	e776      	b.n	8007608 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800771a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800771e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007720:	6811      	ldr	r1, [r2, #0]
 8007722:	0648      	lsls	r0, r1, #25
 8007724:	d403      	bmi.n	800772e <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 8007726:	6811      	ldr	r1, [r2, #0]
 8007728:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800772c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800772e:	2b00      	cmp	r3, #0
 8007730:	d161      	bne.n	80077f6 <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007732:	4649      	mov	r1, r9
 8007734:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007738:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800773a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800773c:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800773e:	3b01      	subs	r3, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007744:	1c72      	adds	r2, r6, #1
{
 8007746:	f04f 0701 	mov.w	r7, #1
 800774a:	d028      	beq.n	800779e <HAL_SPI_TransmitReceive+0x1ce>
 800774c:	e04e      	b.n	80077ec <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	6893      	ldr	r3, [r2, #8]
 8007752:	079b      	lsls	r3, r3, #30
 8007754:	d50d      	bpl.n	8007772 <HAL_SPI_TransmitReceive+0x1a2>
 8007756:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	b153      	cbz	r3, 8007772 <HAL_SPI_TransmitReceive+0x1a2>
 800775c:	b14f      	cbz	r7, 8007772 <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800775e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007760:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007764:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8007766:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007768:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800776a:	3b01      	subs	r3, #1
 800776c:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800776e:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8007770:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007772:	6893      	ldr	r3, [r2, #8]
 8007774:	f013 0301 	ands.w	r3, r3, #1
 8007778:	d00f      	beq.n	800779a <HAL_SPI_TransmitReceive+0x1ca>
 800777a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800777e:	b289      	uxth	r1, r1
 8007780:	b159      	cbz	r1, 800779a <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007782:	68d1      	ldr	r1, [r2, #12]
 8007784:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007786:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800778a:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800778c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007790:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007792:	3b01      	subs	r3, #1
 8007794:	b29b      	uxth	r3, r3
 8007796:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800779a:	f7fb fb43 	bl	8002e24 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800779e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1d3      	bne.n	800774e <HAL_SPI_TransmitReceive+0x17e>
 80077a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1ce      	bne.n	800774e <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077b0:	462a      	mov	r2, r5
 80077b2:	4631      	mov	r1, r6
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7ff fded 	bl	8007394 <SPI_EndRxTxTransaction>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f af24 	beq.w	8007608 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077c0:	2320      	movs	r3, #32
 80077c2:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80077c4:	2001      	movs	r0, #1
 80077c6:	e71f      	b.n	8007608 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0ee      	beq.n	80077b0 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	6893      	ldr	r3, [r2, #8]
 80077d6:	0798      	lsls	r0, r3, #30
 80077d8:	d422      	bmi.n	8007820 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077da:	6893      	ldr	r3, [r2, #8]
 80077dc:	f013 0301 	ands.w	r3, r3, #1
 80077e0:	d10c      	bne.n	80077fc <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077e2:	f7fb fb1f 	bl	8002e24 <HAL_GetTick>
 80077e6:	1b40      	subs	r0, r0, r5
 80077e8:	42b0      	cmp	r0, r6
 80077ea:	d28f      	bcs.n	800770c <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1ee      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x202>
 80077f4:	e7e8      	b.n	80077c8 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077f6:	2f01      	cmp	r7, #1
 80077f8:	d1a4      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x174>
 80077fa:	e79a      	b.n	8007732 <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077fc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007800:	b289      	uxth	r1, r1
 8007802:	2900      	cmp	r1, #0
 8007804:	d0ed      	beq.n	80077e2 <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007806:	68d1      	ldr	r1, [r2, #12]
 8007808:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800780a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800780e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8007810:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007814:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007816:	3b01      	subs	r3, #1
 8007818:	b29b      	uxth	r3, r3
 800781a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800781e:	e7e0      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007820:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007822:	b29b      	uxth	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0d8      	beq.n	80077da <HAL_SPI_TransmitReceive+0x20a>
 8007828:	2f00      	cmp	r7, #0
 800782a:	d0d6      	beq.n	80077da <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800782c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800782e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007832:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007834:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007836:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007838:	3b01      	subs	r3, #1
 800783a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800783c:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800783e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007840:	e7cb      	b.n	80077da <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007842:	2b00      	cmp	r3, #0
 8007844:	f47f af24 	bne.w	8007690 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8007848:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d93a      	bls.n	80078c6 <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007850:	4649      	mov	r1, r9
 8007852:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007856:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8007858:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800785a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800785c:	3b02      	subs	r3, #2
 800785e:	b29b      	uxth	r3, r3
 8007860:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007862:	e715      	b.n	8007690 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 8007864:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007868:	7b12      	ldrb	r2, [r2, #12]
 800786a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800786c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800786e:	3301      	adds	r3, #1
 8007870:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007872:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007876:	3b01      	subs	r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800787e:	e73e      	b.n	80076fe <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8007880:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8007888:	d909      	bls.n	800789e <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800788a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800788e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007890:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007892:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007894:	3b02      	subs	r3, #2
 8007896:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8007898:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 800789a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800789c:	e70c      	b.n	80076b8 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80078a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80078a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80078a6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80078a8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80078aa:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80078ac:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80078ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078b0:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80078b2:	2700      	movs	r7, #0
 80078b4:	e700      	b.n	80076b8 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078b6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80078ba:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078bc:	6811      	ldr	r1, [r2, #0]
 80078be:	0649      	lsls	r1, r1, #25
 80078c0:	f57f aedc 	bpl.w	800767c <HAL_SPI_TransmitReceive+0xac>
 80078c4:	e7c0      	b.n	8007848 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078c6:	f899 3000 	ldrb.w	r3, [r9]
 80078ca:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80078cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80078ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80078d0:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80078d2:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80078d4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80078d6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80078d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80078da:	e6d9      	b.n	8007690 <HAL_SPI_TransmitReceive+0xc0>

080078dc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078dc:	6a03      	ldr	r3, [r0, #32]
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e4:	6a03      	ldr	r3, [r0, #32]
{
 80078e6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80078f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80078f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80078fa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80078fe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007900:	4d15      	ldr	r5, [pc, #84]	; (8007958 <TIM_OC1_SetConfig+0x7c>)
 8007902:	42a8      	cmp	r0, r5
 8007904:	d013      	beq.n	800792e <TIM_OC1_SetConfig+0x52>
 8007906:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800790a:	42a8      	cmp	r0, r5
 800790c:	d00f      	beq.n	800792e <TIM_OC1_SetConfig+0x52>
 800790e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007912:	42a8      	cmp	r0, r5
 8007914:	d00b      	beq.n	800792e <TIM_OC1_SetConfig+0x52>
 8007916:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800791a:	42a8      	cmp	r0, r5
 800791c:	d007      	beq.n	800792e <TIM_OC1_SetConfig+0x52>
 800791e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007922:	42a8      	cmp	r0, r5
 8007924:	d003      	beq.n	800792e <TIM_OC1_SetConfig+0x52>
 8007926:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800792a:	42a8      	cmp	r0, r5
 800792c:	d10d      	bne.n	800794a <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800792e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007930:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007934:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007936:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800793a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800793e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007942:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007946:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800794a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800794c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800794e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007950:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007952:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007954:	6203      	str	r3, [r0, #32]
}
 8007956:	4770      	bx	lr
 8007958:	40012c00 	.word	0x40012c00

0800795c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800795c:	6a03      	ldr	r3, [r0, #32]
 800795e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007962:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007964:	6a03      	ldr	r3, [r0, #32]
{
 8007966:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800796c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800796e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007972:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007976:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007978:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800797a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800797e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007982:	4d1c      	ldr	r5, [pc, #112]	; (80079f4 <TIM_OC3_SetConfig+0x98>)
 8007984:	42a8      	cmp	r0, r5
 8007986:	d017      	beq.n	80079b8 <TIM_OC3_SetConfig+0x5c>
 8007988:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800798c:	42a8      	cmp	r0, r5
 800798e:	d013      	beq.n	80079b8 <TIM_OC3_SetConfig+0x5c>
 8007990:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007994:	42a8      	cmp	r0, r5
 8007996:	d025      	beq.n	80079e4 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007998:	4d17      	ldr	r5, [pc, #92]	; (80079f8 <TIM_OC3_SetConfig+0x9c>)
 800799a:	42a8      	cmp	r0, r5
 800799c:	d013      	beq.n	80079c6 <TIM_OC3_SetConfig+0x6a>
 800799e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80079a2:	42a8      	cmp	r0, r5
 80079a4:	d00f      	beq.n	80079c6 <TIM_OC3_SetConfig+0x6a>
 80079a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80079aa:	42a8      	cmp	r0, r5
 80079ac:	d00b      	beq.n	80079c6 <TIM_OC3_SetConfig+0x6a>
 80079ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80079b2:	42a8      	cmp	r0, r5
 80079b4:	d10f      	bne.n	80079d6 <TIM_OC3_SetConfig+0x7a>
 80079b6:	e006      	b.n	80079c6 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079b8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80079ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80079c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079c6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ca:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ce:	ea46 0c05 	orr.w	ip, r6, r5
 80079d2:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80079d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80079da:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80079dc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80079de:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80079e0:	6203      	str	r3, [r0, #32]
}
 80079e2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80079e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f2:	e7d1      	b.n	8007998 <TIM_OC3_SetConfig+0x3c>
 80079f4:	40012c00 	.word	0x40012c00
 80079f8:	40014000 	.word	0x40014000

080079fc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079fc:	6a03      	ldr	r3, [r0, #32]
 80079fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a02:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a04:	6a03      	ldr	r3, [r0, #32]
{
 8007a06:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a0a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a0e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007a12:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a20:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a24:	4d1c      	ldr	r5, [pc, #112]	; (8007a98 <TIM_OC4_SetConfig+0x9c>)
 8007a26:	42a8      	cmp	r0, r5
 8007a28:	d017      	beq.n	8007a5a <TIM_OC4_SetConfig+0x5e>
 8007a2a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007a2e:	42a8      	cmp	r0, r5
 8007a30:	d013      	beq.n	8007a5a <TIM_OC4_SetConfig+0x5e>
 8007a32:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007a36:	42a8      	cmp	r0, r5
 8007a38:	d025      	beq.n	8007a86 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3a:	4d18      	ldr	r5, [pc, #96]	; (8007a9c <TIM_OC4_SetConfig+0xa0>)
 8007a3c:	42a8      	cmp	r0, r5
 8007a3e:	d013      	beq.n	8007a68 <TIM_OC4_SetConfig+0x6c>
 8007a40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a44:	42a8      	cmp	r0, r5
 8007a46:	d00f      	beq.n	8007a68 <TIM_OC4_SetConfig+0x6c>
 8007a48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a4c:	42a8      	cmp	r0, r5
 8007a4e:	d00b      	beq.n	8007a68 <TIM_OC4_SetConfig+0x6c>
 8007a50:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007a54:	42a8      	cmp	r0, r5
 8007a56:	d10f      	bne.n	8007a78 <TIM_OC4_SetConfig+0x7c>
 8007a58:	e006      	b.n	8007a68 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a60:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a68:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a6c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a70:	ea46 0c05 	orr.w	ip, r6, r5
 8007a74:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a78:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007a7a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007a7c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007a7e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8007a80:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007a82:	6203      	str	r3, [r0, #32]
}
 8007a84:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a8c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a94:	e7d1      	b.n	8007a3a <TIM_OC4_SetConfig+0x3e>
 8007a96:	bf00      	nop
 8007a98:	40012c00 	.word	0x40012c00
 8007a9c:	40014000 	.word	0x40014000

08007aa0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f000 808c 	beq.w	8007bbe <HAL_TIM_Base_Init+0x11e>
{
 8007aa6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007aac:	4604      	mov	r4, r0
 8007aae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d078      	beq.n	8007ba8 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ab8:	4944      	ldr	r1, [pc, #272]	; (8007bcc <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007aba:	2302      	movs	r3, #2
 8007abc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ac0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007ac2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ac4:	d05c      	beq.n	8007b80 <HAL_TIM_Base_Init+0xe0>
 8007ac6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007aca:	d02c      	beq.n	8007b26 <HAL_TIM_Base_Init+0x86>
 8007acc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007ad0:	428a      	cmp	r2, r1
 8007ad2:	d028      	beq.n	8007b26 <HAL_TIM_Base_Init+0x86>
 8007ad4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ad8:	428a      	cmp	r2, r1
 8007ada:	d024      	beq.n	8007b26 <HAL_TIM_Base_Init+0x86>
 8007adc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ae0:	428a      	cmp	r2, r1
 8007ae2:	d020      	beq.n	8007b26 <HAL_TIM_Base_Init+0x86>
 8007ae4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8007ae8:	428a      	cmp	r2, r1
 8007aea:	d049      	beq.n	8007b80 <HAL_TIM_Base_Init+0xe0>
 8007aec:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8007af0:	428a      	cmp	r2, r1
 8007af2:	d066      	beq.n	8007bc2 <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007af4:	4936      	ldr	r1, [pc, #216]	; (8007bd0 <HAL_TIM_Base_Init+0x130>)
 8007af6:	428a      	cmp	r2, r1
 8007af8:	d05b      	beq.n	8007bb2 <HAL_TIM_Base_Init+0x112>
 8007afa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007afe:	428a      	cmp	r2, r1
 8007b00:	d057      	beq.n	8007bb2 <HAL_TIM_Base_Init+0x112>
 8007b02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007b06:	428a      	cmp	r2, r1
 8007b08:	d053      	beq.n	8007bb2 <HAL_TIM_Base_Init+0x112>
 8007b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b0e:	428a      	cmp	r2, r1
 8007b10:	d04f      	beq.n	8007bb2 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b12:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b14:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b1a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007b1c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007b1e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b20:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b22:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b24:	e010      	b.n	8007b48 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007b26:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b28:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b2e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b34:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b36:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b3c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b3e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007b40:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007b42:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b44:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b46:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007b54:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007b58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007b5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007b6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b70:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007b74:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007b7c:	2000      	movs	r0, #0
}
 8007b7e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007b80:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b82:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b88:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b90:	69a1      	ldr	r1, [r4, #24]
 8007b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b96:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007b98:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007b9e:	6863      	ldr	r3, [r4, #4]
 8007ba0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba2:	6963      	ldr	r3, [r4, #20]
 8007ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ba6:	e7cf      	b.n	8007b48 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007ba8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007bac:	f7fc fcf6 	bl	800459c <HAL_TIM_Base_MspInit>
 8007bb0:	e781      	b.n	8007ab6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bb4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bba:	4303      	orrs	r3, r0
 8007bbc:	e7e9      	b.n	8007b92 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8007bbe:	2001      	movs	r0, #1
}
 8007bc0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007bc2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007bc8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bca:	e793      	b.n	8007af4 <HAL_TIM_Base_Init+0x54>
 8007bcc:	40012c00 	.word	0x40012c00
 8007bd0:	40014000 	.word	0x40014000

08007bd4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d132      	bne.n	8007c42 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bdc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bde:	491b      	ldr	r1, [pc, #108]	; (8007c4c <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	2202      	movs	r2, #2
 8007be2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf0:	d019      	beq.n	8007c26 <HAL_TIM_Base_Start_IT+0x52>
 8007bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf6:	d016      	beq.n	8007c26 <HAL_TIM_Base_Start_IT+0x52>
 8007bf8:	4a15      	ldr	r2, [pc, #84]	; (8007c50 <HAL_TIM_Base_Start_IT+0x7c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <HAL_TIM_Base_Start_IT+0x52>
 8007bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00f      	beq.n	8007c26 <HAL_TIM_Base_Start_IT+0x52>
 8007c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00b      	beq.n	8007c26 <HAL_TIM_Base_Start_IT+0x52>
 8007c0e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <HAL_TIM_Base_Start_IT+0x52>
 8007c16:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d003      	beq.n	8007c26 <HAL_TIM_Base_Start_IT+0x52>
 8007c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d107      	bne.n	8007c36 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c26:	6899      	ldr	r1, [r3, #8]
 8007c28:	4a0a      	ldr	r2, [pc, #40]	; (8007c54 <HAL_TIM_Base_Start_IT+0x80>)
 8007c2a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2c:	2a06      	cmp	r2, #6
 8007c2e:	d00a      	beq.n	8007c46 <HAL_TIM_Base_Start_IT+0x72>
 8007c30:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007c34:	d007      	beq.n	8007c46 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8007c3c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	4770      	bx	lr
    return HAL_ERROR;
 8007c42:	2001      	movs	r0, #1
 8007c44:	4770      	bx	lr
  return HAL_OK;
 8007c46:	2000      	movs	r0, #0
}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40012c00 	.word	0x40012c00
 8007c50:	40000400 	.word	0x40000400
 8007c54:	00010007 	.word	0x00010007

08007c58 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f000 808c 	beq.w	8007d76 <HAL_TIM_PWM_Init+0x11e>
{
 8007c5e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007c60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007c64:	4604      	mov	r4, r0
 8007c66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d078      	beq.n	8007d60 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c6e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c70:	4944      	ldr	r1, [pc, #272]	; (8007d84 <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007c72:	2302      	movs	r3, #2
 8007c74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c78:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007c7a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c7c:	d05c      	beq.n	8007d38 <HAL_TIM_PWM_Init+0xe0>
 8007c7e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007c82:	d02c      	beq.n	8007cde <HAL_TIM_PWM_Init+0x86>
 8007c84:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007c88:	428a      	cmp	r2, r1
 8007c8a:	d028      	beq.n	8007cde <HAL_TIM_PWM_Init+0x86>
 8007c8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c90:	428a      	cmp	r2, r1
 8007c92:	d024      	beq.n	8007cde <HAL_TIM_PWM_Init+0x86>
 8007c94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c98:	428a      	cmp	r2, r1
 8007c9a:	d020      	beq.n	8007cde <HAL_TIM_PWM_Init+0x86>
 8007c9c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8007ca0:	428a      	cmp	r2, r1
 8007ca2:	d049      	beq.n	8007d38 <HAL_TIM_PWM_Init+0xe0>
 8007ca4:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8007ca8:	428a      	cmp	r2, r1
 8007caa:	d066      	beq.n	8007d7a <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cac:	4936      	ldr	r1, [pc, #216]	; (8007d88 <HAL_TIM_PWM_Init+0x130>)
 8007cae:	428a      	cmp	r2, r1
 8007cb0:	d05b      	beq.n	8007d6a <HAL_TIM_PWM_Init+0x112>
 8007cb2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007cb6:	428a      	cmp	r2, r1
 8007cb8:	d057      	beq.n	8007d6a <HAL_TIM_PWM_Init+0x112>
 8007cba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007cbe:	428a      	cmp	r2, r1
 8007cc0:	d053      	beq.n	8007d6a <HAL_TIM_PWM_Init+0x112>
 8007cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc6:	428a      	cmp	r2, r1
 8007cc8:	d04f      	beq.n	8007d6a <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cca:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ccc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007cd4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007cd6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cd8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007cda:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cdc:	e010      	b.n	8007d00 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007cde:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007ce6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cec:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007cf8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007cfa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cfc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007cfe:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007d00:	2301      	movs	r3, #1
 8007d02:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d04:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007d0c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007d10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007d14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d28:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007d2c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007d30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007d34:	2000      	movs	r0, #0
}
 8007d36:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007d38:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d3a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d40:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d46:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d48:	69a1      	ldr	r1, [r4, #24]
 8007d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d4e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007d50:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d52:	68e3      	ldr	r3, [r4, #12]
 8007d54:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007d56:	6863      	ldr	r3, [r4, #4]
 8007d58:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007d5a:	6963      	ldr	r3, [r4, #20]
 8007d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d5e:	e7cf      	b.n	8007d00 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007d60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007d64:	f7fc fc04 	bl	8004570 <HAL_TIM_PWM_MspInit>
 8007d68:	e781      	b.n	8007c6e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d6a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d6c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d72:	4303      	orrs	r3, r0
 8007d74:	e7e9      	b.n	8007d4a <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 8007d76:	2001      	movs	r0, #1
}
 8007d78:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007d7a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d80:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d82:	e793      	b.n	8007cac <HAL_TIM_PWM_Init+0x54>
 8007d84:	40012c00 	.word	0x40012c00
 8007d88:	40014000 	.word	0x40014000

08007d8c <HAL_TIM_PWM_Start>:
 8007d8c:	2910      	cmp	r1, #16
 8007d8e:	d80a      	bhi.n	8007da6 <HAL_TIM_PWM_Start+0x1a>
 8007d90:	e8df f001 	tbb	[pc, r1]
 8007d94:	09090961 	.word	0x09090961
 8007d98:	09090967 	.word	0x09090967
 8007d9c:	0909096f 	.word	0x0909096f
 8007da0:	09090974 	.word	0x09090974
 8007da4:	7d          	.byte	0x7d
 8007da5:	00          	.byte	0x00
 8007da6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d157      	bne.n	8007e5e <HAL_TIM_PWM_Start+0xd2>
 8007dae:	2910      	cmp	r1, #16
 8007db0:	d80a      	bhi.n	8007dc8 <HAL_TIM_PWM_Start+0x3c>
 8007db2:	e8df f001 	tbb	[pc, r1]
 8007db6:	0993      	.short	0x0993
 8007db8:	095a0909 	.word	0x095a0909
 8007dbc:	097c0909 	.word	0x097c0909
 8007dc0:	09780909 	.word	0x09780909
 8007dc4:	0909      	.short	0x0909
 8007dc6:	74          	.byte	0x74
 8007dc7:	00          	.byte	0x00
 8007dc8:	2302      	movs	r3, #2
 8007dca:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007dce:	6803      	ldr	r3, [r0, #0]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	6a18      	ldr	r0, [r3, #32]
 8007dd4:	f001 011f 	and.w	r1, r1, #31
 8007dd8:	fa02 f101 	lsl.w	r1, r2, r1
 8007ddc:	ea20 0001 	bic.w	r0, r0, r1
 8007de0:	6218      	str	r0, [r3, #32]
 8007de2:	6a18      	ldr	r0, [r3, #32]
 8007de4:	4a3f      	ldr	r2, [pc, #252]	; (8007ee4 <HAL_TIM_PWM_Start+0x158>)
 8007de6:	4301      	orrs	r1, r0
 8007de8:	4293      	cmp	r3, r2
 8007dea:	6219      	str	r1, [r3, #32]
 8007dec:	d063      	beq.n	8007eb6 <HAL_TIM_PWM_Start+0x12a>
 8007dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d06d      	beq.n	8007ed2 <HAL_TIM_PWM_Start+0x146>
 8007df6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d069      	beq.n	8007ed2 <HAL_TIM_PWM_Start+0x146>
 8007dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d065      	beq.n	8007ed2 <HAL_TIM_PWM_Start+0x146>
 8007e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d061      	beq.n	8007ed2 <HAL_TIM_PWM_Start+0x146>
 8007e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d05d      	beq.n	8007ed2 <HAL_TIM_PWM_Start+0x146>
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1a:	d050      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x132>
 8007e1c:	4a32      	ldr	r2, [pc, #200]	; (8007ee8 <HAL_TIM_PWM_Start+0x15c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d04d      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x132>
 8007e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d049      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x132>
 8007e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d045      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x132>
 8007e32:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d041      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x132>
 8007e3a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d03d      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x132>
 8007e42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d039      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x132>
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f042 0201 	orr.w	r2, r2, #1
 8007e50:	2000      	movs	r0, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	4770      	bx	lr
 8007e56:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d03e      	beq.n	8007edc <HAL_TIM_PWM_Start+0x150>
 8007e5e:	2001      	movs	r0, #1
 8007e60:	4770      	bx	lr
 8007e62:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d1f9      	bne.n	8007e5e <HAL_TIM_PWM_Start+0xd2>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007e70:	e7ad      	b.n	8007dce <HAL_TIM_PWM_Start+0x42>
 8007e72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d099      	beq.n	8007dae <HAL_TIM_PWM_Start+0x22>
 8007e7a:	e7f0      	b.n	8007e5e <HAL_TIM_PWM_Start+0xd2>
 8007e7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007e80:	3b01      	subs	r3, #1
 8007e82:	bf18      	it	ne
 8007e84:	2301      	movne	r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d091      	beq.n	8007dae <HAL_TIM_PWM_Start+0x22>
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	4770      	bx	lr
 8007e8e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007e92:	3b01      	subs	r3, #1
 8007e94:	bf18      	it	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d088      	beq.n	8007dae <HAL_TIM_PWM_Start+0x22>
 8007e9c:	e7f5      	b.n	8007e8a <HAL_TIM_PWM_Start+0xfe>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007ea4:	e793      	b.n	8007dce <HAL_TIM_PWM_Start+0x42>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007eac:	e78f      	b.n	8007dce <HAL_TIM_PWM_Start+0x42>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007eb4:	e78b      	b.n	8007dce <HAL_TIM_PWM_Start+0x42>
 8007eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8007ebe:	6899      	ldr	r1, [r3, #8]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <HAL_TIM_PWM_Start+0x160>)
 8007ec2:	400a      	ands	r2, r1
 8007ec4:	2a06      	cmp	r2, #6
 8007ec6:	d002      	beq.n	8007ece <HAL_TIM_PWM_Start+0x142>
 8007ec8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007ecc:	d1bd      	bne.n	8007e4a <HAL_TIM_PWM_Start+0xbe>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	4770      	bx	lr
 8007ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ed8:	645a      	str	r2, [r3, #68]	; 0x44
 8007eda:	e79c      	b.n	8007e16 <HAL_TIM_PWM_Start+0x8a>
 8007edc:	2302      	movs	r3, #2
 8007ede:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007ee2:	e774      	b.n	8007dce <HAL_TIM_PWM_Start+0x42>
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	00010007 	.word	0x00010007

08007ef0 <HAL_TIM_OC_DelayElapsedCallback>:
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop

08007ef4 <HAL_TIM_IC_CaptureCallback>:
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop

08007ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop

08007efc <HAL_TIM_TriggerCallback>:
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f00:	6803      	ldr	r3, [r0, #0]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	0791      	lsls	r1, r2, #30
{
 8007f06:	b510      	push	{r4, lr}
 8007f08:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f0a:	d503      	bpl.n	8007f14 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	0792      	lsls	r2, r2, #30
 8007f10:	f100 808a 	bmi.w	8008028 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	0752      	lsls	r2, r2, #29
 8007f18:	d502      	bpl.n	8007f20 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	0750      	lsls	r0, r2, #29
 8007f1e:	d470      	bmi.n	8008002 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f20:	691a      	ldr	r2, [r3, #16]
 8007f22:	0711      	lsls	r1, r2, #28
 8007f24:	d502      	bpl.n	8007f2c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	0712      	lsls	r2, r2, #28
 8007f2a:	d458      	bmi.n	8007fde <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	06d1      	lsls	r1, r2, #27
 8007f30:	d502      	bpl.n	8007f38 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	06d2      	lsls	r2, r2, #27
 8007f36:	d43e      	bmi.n	8007fb6 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	07d0      	lsls	r0, r2, #31
 8007f3c:	d503      	bpl.n	8007f46 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	07d1      	lsls	r1, r2, #31
 8007f42:	f100 808a 	bmi.w	800805a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	0612      	lsls	r2, r2, #24
 8007f4a:	d503      	bpl.n	8007f54 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	0610      	lsls	r0, r2, #24
 8007f50:	f100 808b 	bmi.w	800806a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	05d1      	lsls	r1, r2, #23
 8007f58:	d503      	bpl.n	8007f62 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	0612      	lsls	r2, r2, #24
 8007f5e:	f100 808c 	bmi.w	800807a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	0650      	lsls	r0, r2, #25
 8007f66:	d503      	bpl.n	8007f70 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	0651      	lsls	r1, r2, #25
 8007f6c:	f100 808d 	bmi.w	800808a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	0692      	lsls	r2, r2, #26
 8007f74:	d503      	bpl.n	8007f7e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	0690      	lsls	r0, r2, #26
 8007f7a:	f100 808e 	bmi.w	800809a <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	02d1      	lsls	r1, r2, #11
 8007f82:	d503      	bpl.n	8007f8c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	02d2      	lsls	r2, r2, #11
 8007f88:	f100 808f 	bmi.w	80080aa <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007f8c:	691a      	ldr	r2, [r3, #16]
 8007f8e:	0290      	lsls	r0, r2, #10
 8007f90:	d503      	bpl.n	8007f9a <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	0291      	lsls	r1, r2, #10
 8007f96:	f100 8090 	bmi.w	80080ba <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	0252      	lsls	r2, r2, #9
 8007f9e:	d503      	bpl.n	8007fa8 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	0250      	lsls	r0, r2, #9
 8007fa4:	f100 8091 	bmi.w	80080ca <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	0211      	lsls	r1, r2, #8
 8007fac:	d502      	bpl.n	8007fb4 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	0212      	lsls	r2, r2, #8
 8007fb2:	d44a      	bmi.n	800804a <HAL_TIM_IRQHandler+0x14a>
}
 8007fb4:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fb6:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fba:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fbc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fbe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007fc6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fc8:	f040 8090 	bne.w	80080ec <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fcc:	f7ff ff90 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f7ff ff91 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fd8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fda:	7722      	strb	r2, [r4, #28]
 8007fdc:	e7ac      	b.n	8007f38 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fde:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fe2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fe4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fe6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007fec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fee:	d17a      	bne.n	80080e6 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff0:	f7ff ff7e 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7ff ff7f 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ffc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffe:	7722      	strb	r2, [r4, #28]
 8008000:	e794      	b.n	8007f2c <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008002:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008006:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008008:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800800a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008012:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008014:	d164      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008016:	f7ff ff6b 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800801a:	4620      	mov	r0, r4
 800801c:	f7ff ff6c 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008020:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008022:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008024:	7722      	strb	r2, [r4, #28]
 8008026:	e77b      	b.n	8007f20 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008028:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800802c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800802e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008030:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	0799      	lsls	r1, r3, #30
 8008036:	d150      	bne.n	80080da <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008038:	f7ff ff5a 	bl	8007ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	4620      	mov	r0, r4
 800803e:	f7ff ff5b 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008044:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008046:	7722      	strb	r2, [r4, #28]
 8008048:	e764      	b.n	8007f14 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800804a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800804e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008050:	611a      	str	r2, [r3, #16]
}
 8008052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008056:	f000 ba11 	b.w	800847c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800805a:	f06f 0201 	mvn.w	r2, #1
 800805e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008060:	4620      	mov	r0, r4
 8008062:	f7fb fa89 	bl	8003578 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	e76d      	b.n	8007f46 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800806a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800806e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f9f9 	bl	8008468 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	e76c      	b.n	8007f54 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800807a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800807e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008080:	4620      	mov	r0, r4
 8008082:	f000 f9f3 	bl	800846c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	e76b      	b.n	8007f62 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800808a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800808e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008090:	4620      	mov	r0, r4
 8008092:	f7ff ff33 	bl	8007efc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	e76a      	b.n	8007f70 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800809a:	f06f 0220 	mvn.w	r2, #32
 800809e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 f9df 	bl	8008464 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	e769      	b.n	8007f7e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80080aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80080ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 f9dd 	bl	8008470 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	e768      	b.n	8007f8c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80080ba:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80080be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 f9d7 	bl	8008474 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	e767      	b.n	8007f9a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80080ca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80080ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 f9d1 	bl	8008478 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	e766      	b.n	8007fa8 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 80080da:	f7ff ff0b 	bl	8007ef4 <HAL_TIM_IC_CaptureCallback>
 80080de:	e7b0      	b.n	8008042 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80080e0:	f7ff ff08 	bl	8007ef4 <HAL_TIM_IC_CaptureCallback>
 80080e4:	e79c      	b.n	8008020 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	f7ff ff05 	bl	8007ef4 <HAL_TIM_IC_CaptureCallback>
 80080ea:	e786      	b.n	8007ffa <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 80080ec:	f7ff ff02 	bl	8007ef4 <HAL_TIM_IC_CaptureCallback>
 80080f0:	e771      	b.n	8007fd6 <HAL_TIM_IRQHandler+0xd6>
 80080f2:	bf00      	nop

080080f4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080f4:	6a03      	ldr	r3, [r0, #32]
 80080f6:	f023 0310 	bic.w	r3, r3, #16
 80080fa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80080fc:	6a03      	ldr	r3, [r0, #32]
{
 80080fe:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008100:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008102:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008104:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008106:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800810a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800810e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008112:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008114:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008118:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800811c:	4d1c      	ldr	r5, [pc, #112]	; (8008190 <TIM_OC2_SetConfig+0x9c>)
 800811e:	42a8      	cmp	r0, r5
 8008120:	d017      	beq.n	8008152 <TIM_OC2_SetConfig+0x5e>
 8008122:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008126:	42a8      	cmp	r0, r5
 8008128:	d013      	beq.n	8008152 <TIM_OC2_SetConfig+0x5e>
 800812a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800812e:	42a8      	cmp	r0, r5
 8008130:	d025      	beq.n	800817e <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008132:	4d18      	ldr	r5, [pc, #96]	; (8008194 <TIM_OC2_SetConfig+0xa0>)
 8008134:	42a8      	cmp	r0, r5
 8008136:	d013      	beq.n	8008160 <TIM_OC2_SetConfig+0x6c>
 8008138:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800813c:	42a8      	cmp	r0, r5
 800813e:	d00f      	beq.n	8008160 <TIM_OC2_SetConfig+0x6c>
 8008140:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008144:	42a8      	cmp	r0, r5
 8008146:	d00b      	beq.n	8008160 <TIM_OC2_SetConfig+0x6c>
 8008148:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800814c:	42a8      	cmp	r0, r5
 800814e:	d10f      	bne.n	8008170 <TIM_OC2_SetConfig+0x7c>
 8008150:	e006      	b.n	8008160 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008152:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008158:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800815c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008160:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008164:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008168:	ea46 0c05 	orr.w	ip, r6, r5
 800816c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008170:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008172:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008174:	6182      	str	r2, [r0, #24]
}
 8008176:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008178:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800817a:	6203      	str	r3, [r0, #32]
}
 800817c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800817e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008184:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800818c:	e7d1      	b.n	8008132 <TIM_OC2_SetConfig+0x3e>
 800818e:	bf00      	nop
 8008190:	40012c00 	.word	0x40012c00
 8008194:	40014000 	.word	0x40014000

08008198 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	f000 80ff 	beq.w	80083a0 <HAL_TIM_PWM_ConfigChannel+0x208>
 80081a2:	2301      	movs	r3, #1
{
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80081aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80081ae:	2a14      	cmp	r2, #20
 80081b0:	d80c      	bhi.n	80081cc <HAL_TIM_PWM_ConfigChannel+0x34>
 80081b2:	e8df f002 	tbb	[pc, r2]
 80081b6:	0b59      	.short	0x0b59
 80081b8:	0b6e0b0b 	.word	0x0b6e0b0b
 80081bc:	0b840b0b 	.word	0x0b840b0b
 80081c0:	0b990b0b 	.word	0x0b990b0b
 80081c4:	0baf0b0b 	.word	0x0baf0b0b
 80081c8:	0b0b      	.short	0x0b0b
 80081ca:	11          	.byte	0x11
 80081cb:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80081cc:	2300      	movs	r3, #0
  switch (Channel)
 80081ce:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80081d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80081d4:	4610      	mov	r0, r2
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081d8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081da:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081dc:	6a1a      	ldr	r2, [r3, #32]
 80081de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80081e2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80081e4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80081e6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80081e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081ea:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80081ee:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081f2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081f6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081f8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081fc:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008200:	4e69      	ldr	r6, [pc, #420]	; (80083a8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008202:	42b3      	cmp	r3, r6
 8008204:	d013      	beq.n	800822e <HAL_TIM_PWM_ConfigChannel+0x96>
 8008206:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800820a:	42b3      	cmp	r3, r6
 800820c:	d00f      	beq.n	800822e <HAL_TIM_PWM_ConfigChannel+0x96>
 800820e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008212:	42b3      	cmp	r3, r6
 8008214:	d00b      	beq.n	800822e <HAL_TIM_PWM_ConfigChannel+0x96>
 8008216:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800821a:	42b3      	cmp	r3, r6
 800821c:	d007      	beq.n	800822e <HAL_TIM_PWM_ConfigChannel+0x96>
 800821e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008222:	42b3      	cmp	r3, r6
 8008224:	d003      	beq.n	800822e <HAL_TIM_PWM_ConfigChannel+0x96>
 8008226:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800822a:	42b3      	cmp	r3, r6
 800822c:	d104      	bne.n	8008238 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800822e:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008230:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008234:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008238:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800823a:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800823c:	6869      	ldr	r1, [r5, #4]
 800823e:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008244:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800824a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800824c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800824e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008252:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008254:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008256:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800825a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800825c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800825e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008260:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008264:	4610      	mov	r0, r2
 8008266:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008268:	6800      	ldr	r0, [r0, #0]
 800826a:	f7ff fb37 	bl	80078dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800826e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008270:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008272:	f043 0308 	orr.w	r3, r3, #8
 8008276:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008278:	6983      	ldr	r3, [r0, #24]
 800827a:	f023 0304 	bic.w	r3, r3, #4
 800827e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008280:	6983      	ldr	r3, [r0, #24]
 8008282:	430b      	orrs	r3, r1
 8008284:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008286:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008288:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800828a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800828e:	4610      	mov	r0, r2
 8008290:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008292:	6800      	ldr	r0, [r0, #0]
 8008294:	f7ff ff2e 	bl	80080f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008298:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800829a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800829c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80082a0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082a2:	6983      	ldr	r3, [r0, #24]
 80082a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082a8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082aa:	6983      	ldr	r3, [r0, #24]
 80082ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80082b0:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80082b2:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80082b4:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80082b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80082ba:	4610      	mov	r0, r2
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082be:	6800      	ldr	r0, [r0, #0]
 80082c0:	f7ff fb4c 	bl	800795c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082c4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082c6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082c8:	f043 0308 	orr.w	r3, r3, #8
 80082cc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082ce:	69c3      	ldr	r3, [r0, #28]
 80082d0:	f023 0304 	bic.w	r3, r3, #4
 80082d4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082d6:	69c3      	ldr	r3, [r0, #28]
 80082d8:	430b      	orrs	r3, r1
 80082da:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 80082dc:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80082de:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80082e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80082e4:	4610      	mov	r0, r2
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082e8:	6800      	ldr	r0, [r0, #0]
 80082ea:	f7ff fb87 	bl	80079fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ee:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082f0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80082f6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082f8:	69c3      	ldr	r3, [r0, #28]
 80082fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082fe:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008300:	69c3      	ldr	r3, [r0, #28]
 8008302:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008306:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008308:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800830c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008310:	4610      	mov	r0, r2
 8008312:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008314:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008316:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008318:	6a1a      	ldr	r2, [r3, #32]
 800831a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800831e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008320:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008322:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008324:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008326:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800832a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800832e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008330:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008332:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008336:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833a:	4e1b      	ldr	r6, [pc, #108]	; (80083a8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800833c:	42b3      	cmp	r3, r6
 800833e:	d013      	beq.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008340:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008344:	42b3      	cmp	r3, r6
 8008346:	d00f      	beq.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008348:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800834c:	42b3      	cmp	r3, r6
 800834e:	d00b      	beq.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008350:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008354:	42b3      	cmp	r3, r6
 8008356:	d007      	beq.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008358:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800835c:	42b3      	cmp	r3, r6
 800835e:	d003      	beq.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008360:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008364:	42b3      	cmp	r3, r6
 8008366:	d104      	bne.n	8008372 <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008368:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800836a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800836e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008372:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008374:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008376:	6869      	ldr	r1, [r5, #4]
 8008378:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800837a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800837c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800837e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008380:	f042 0208 	orr.w	r2, r2, #8
 8008384:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008386:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008388:	f021 0104 	bic.w	r1, r1, #4
 800838c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800838e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008390:	4301      	orrs	r1, r0
 8008392:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008394:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008396:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008398:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800839c:	4610      	mov	r0, r2
 800839e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80083a0:	2202      	movs	r2, #2
}
 80083a2:	4610      	mov	r0, r2
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	40012c00 	.word	0x40012c00

080083ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d051      	beq.n	8008458 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 80083b4:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083b6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083b8:	4d28      	ldr	r5, [pc, #160]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80083ba:	2302      	movs	r3, #2
 80083bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083c0:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80083c2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80083c4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083c6:	d03b      	beq.n	8008440 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80083c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083cc:	42aa      	cmp	r2, r5
 80083ce:	d032      	beq.n	8008436 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80083d0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80083d4:	42aa      	cmp	r2, r5
 80083d6:	d02e      	beq.n	8008436 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083d8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80083da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083e2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80083e8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ea:	d016      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80083ec:	4b1c      	ldr	r3, [pc, #112]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d013      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80083f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d00f      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80083fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fe:	429a      	cmp	r2, r3
 8008400:	d00b      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008402:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008406:	429a      	cmp	r2, r3
 8008408:	d007      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800840a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800840e:	429a      	cmp	r2, r3
 8008410:	d003      	beq.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008416:	429a      	cmp	r2, r3
 8008418:	d104      	bne.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800841a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800841c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008420:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008422:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008424:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008426:	2201      	movs	r2, #1
 8008428:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800842c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008430:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008432:	4618      	mov	r0, r3
}
 8008434:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008436:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008438:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800843c:	432b      	orrs	r3, r5
 800843e:	e7cb      	b.n	80083d8 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8008440:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008442:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008446:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008448:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800844c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008452:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008454:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008456:	e7e0      	b.n	800841a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008458:	2002      	movs	r0, #2
}
 800845a:	4770      	bx	lr
 800845c:	40012c00 	.word	0x40012c00
 8008460:	40000400 	.word	0x40000400

08008464 <HAL_TIMEx_CommutCallback>:
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop

08008468 <HAL_TIMEx_BreakCallback>:
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop

0800846c <HAL_TIMEx_Break2Callback>:
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop

08008470 <HAL_TIMEx_EncoderIndexCallback>:
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop

08008474 <HAL_TIMEx_DirectionChangeCallback>:
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop

08008478 <HAL_TIMEx_IndexErrorCallback>:
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop

0800847c <HAL_TIMEx_TransitionErrorCallback>:
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008482:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8008486:	2e20      	cmp	r6, #32
 8008488:	d141      	bne.n	800850e <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 800848a:	2900      	cmp	r1, #0
 800848c:	d03d      	beq.n	800850a <HAL_UART_Transmit_DMA+0x8a>
 800848e:	2a00      	cmp	r2, #0
 8008490:	d03b      	beq.n	800850a <HAL_UART_Transmit_DMA+0x8a>
 8008492:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008494:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8008498:	2801      	cmp	r0, #1
 800849a:	d038      	beq.n	800850e <HAL_UART_Transmit_DMA+0x8e>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 800849c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 800849e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a2:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80084a4:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 80084ac:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 80084ae:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 80084b2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80084ba:	b190      	cbz	r0, 80084e2 <HAL_UART_Transmit_DMA+0x62>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084bc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008524 <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084c0:	6387      	str	r7, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084c2:	4613      	mov	r3, r2
 80084c4:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084c6:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084ca:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8008528 <HAL_UART_Transmit_DMA+0xa8>
 80084ce:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084d2:	f8df c058 	ldr.w	ip, [pc, #88]	; 800852c <HAL_UART_Transmit_DMA+0xac>
 80084d6:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084da:	3228      	adds	r2, #40	; 0x28
 80084dc:	f7fd faf4 	bl	8005ac8 <HAL_DMA_Start_IT>
 80084e0:	b9b8      	cbnz	r0, 8008512 <HAL_UART_Transmit_DMA+0x92>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084e2:	6822      	ldr	r2, [r4, #0]
 80084e4:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 80084e6:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084e8:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 80084ea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	f102 0308 	add.w	r3, r2, #8
 80084f2:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	f102 0008 	add.w	r0, r2, #8
 80084fe:	e840 3100 	strex	r1, r3, [r0]
 8008502:	2900      	cmp	r1, #0
 8008504:	d1f3      	bne.n	80084ee <HAL_UART_Transmit_DMA+0x6e>

    return HAL_OK;
 8008506:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800850a:	2001      	movs	r0, #1
}
 800850c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800850e:	2002      	movs	r0, #2
}
 8008510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008512:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8008514:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008518:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 800851c:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 800851e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8008522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008524:	08008531 	.word	0x08008531
 8008528:	08008579 	.word	0x08008579
 800852c:	0800858d 	.word	0x0800858d

08008530 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008530:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008532:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008534:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f013 0320 	ands.w	r3, r3, #32
 800853c:	d117      	bne.n	800856e <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800853e:	6802      	ldr	r2, [r0, #0]
 8008540:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	f102 0308 	add.w	r3, r2, #8
 8008548:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800854c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	f102 0008 	add.w	r0, r2, #8
 8008554:	e840 3100 	strex	r1, r3, [r0]
 8008558:	2900      	cmp	r1, #0
 800855a:	d1f3      	bne.n	8008544 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	e842 3100 	strex	r1, r3, [r2]
 8008568:	2900      	cmp	r1, #0
 800856a:	d1f7      	bne.n	800855c <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800856c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800856e:	f7fb fb47 	bl	8003c00 <HAL_UART_TxCpltCallback>
}
 8008572:	bd08      	pop	{r3, pc}

08008574 <HAL_UART_TxHalfCpltCallback>:
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop

08008578 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008578:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800857a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800857c:	f7ff fffa 	bl	8008574 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008580:	bd08      	pop	{r3, pc}
 8008582:	bf00      	nop

08008584 <HAL_UART_RxHalfCpltCallback>:
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <HAL_UART_ErrorCallback>:
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop

0800858c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800858c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800858e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008590:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 8008594:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008596:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	0612      	lsls	r2, r2, #24
 800859e:	d501      	bpl.n	80085a4 <UART_DMAError+0x18>
 80085a0:	2921      	cmp	r1, #33	; 0x21
 80085a2:	d00d      	beq.n	80085c0 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	0652      	lsls	r2, r2, #25
 80085a8:	d501      	bpl.n	80085ae <UART_DMAError+0x22>
 80085aa:	2c22      	cmp	r4, #34	; 0x22
 80085ac:	d023      	beq.n	80085f6 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085ae:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80085b2:	f043 0310 	orr.w	r3, r3, #16
 80085b6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ba:	f7ff ffe5 	bl	8008588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085be:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	e843 2100 	strex	r1, r2, [r3]
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d1f7      	bne.n	80085c6 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	f103 0208 	add.w	r2, r3, #8
 80085da:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80085de:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	f103 0c08 	add.w	ip, r3, #8
 80085e6:	e84c 2100 	strex	r1, r2, [ip]
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d1f3      	bne.n	80085d6 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 80085ee:	2220      	movs	r2, #32
 80085f0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 80085f4:	e7d6      	b.n	80085a4 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008600:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	e843 2100 	strex	r1, r2, [r3]
 8008608:	2900      	cmp	r1, #0
 800860a:	d1f7      	bne.n	80085fc <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800860c:	4c13      	ldr	r4, [pc, #76]	; (800865c <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	f103 0208 	add.w	r2, r3, #8
 8008612:	e852 2f00 	ldrex	r2, [r2]
 8008616:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	f103 0c08 	add.w	ip, r3, #8
 800861c:	e84c 2100 	strex	r1, r2, [ip]
 8008620:	2900      	cmp	r1, #0
 8008622:	d1f4      	bne.n	800860e <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008624:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008626:	2a01      	cmp	r2, #1
 8008628:	d006      	beq.n	8008638 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800862c:	2220      	movs	r2, #32
 800862e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8008632:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008634:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8008636:	e7ba      	b.n	80085ae <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	e843 2100 	strex	r1, r2, [r3]
 8008644:	2900      	cmp	r1, #0
 8008646:	d0f0      	beq.n	800862a <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	e853 2f00 	ldrex	r2, [r3]
 800864c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	e843 2100 	strex	r1, r2, [r3]
 8008654:	2900      	cmp	r1, #0
 8008656:	d1ef      	bne.n	8008638 <UART_DMAError+0xac>
 8008658:	e7e7      	b.n	800862a <UART_DMAError+0x9e>
 800865a:	bf00      	nop
 800865c:	effffffe 	.word	0xeffffffe

08008660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008660:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008662:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800866a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800866e:	f7ff ff8b 	bl	8008588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008672:	bd08      	pop	{r3, pc}

08008674 <HAL_UARTEx_RxEventCallback>:
}
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop

08008678 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008678:	6803      	ldr	r3, [r0, #0]
 800867a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800867c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800867e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8008682:	ea12 0f0c 	tst.w	r2, ip
{
 8008686:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008688:	689d      	ldr	r5, [r3, #8]
{
 800868a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800868c:	f000 80eb 	beq.w	8008866 <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008690:	489a      	ldr	r0, [pc, #616]	; (80088fc <HAL_UART_IRQHandler+0x284>)
 8008692:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008696:	489a      	ldr	r0, [pc, #616]	; (8008900 <HAL_UART_IRQHandler+0x288>)
 8008698:	4008      	ands	r0, r1
 800869a:	ea50 000c 	orrs.w	r0, r0, ip
 800869e:	d155      	bne.n	800874c <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80086a2:	2801      	cmp	r0, #1
 80086a4:	d022      	beq.n	80086ec <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086a6:	02d6      	lsls	r6, r2, #11
 80086a8:	d502      	bpl.n	80086b0 <HAL_UART_IRQHandler+0x38>
 80086aa:	0268      	lsls	r0, r5, #9
 80086ac:	f100 8104 	bmi.w	80088b8 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086b0:	0616      	lsls	r6, r2, #24
 80086b2:	d506      	bpl.n	80086c2 <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086b4:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086b8:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086bc:	4328      	orrs	r0, r5
 80086be:	f040 80f3 	bne.w	80088a8 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086c2:	0650      	lsls	r0, r2, #25
 80086c4:	d534      	bpl.n	8008730 <HAL_UART_IRQHandler+0xb8>
 80086c6:	064e      	lsls	r6, r1, #25
 80086c8:	d532      	bpl.n	8008730 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	e843 2100 	strex	r1, r2, [r3]
 80086d6:	2900      	cmp	r1, #0
 80086d8:	d1f7      	bne.n	80086ca <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086da:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086dc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80086de:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 80086e2:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7fb fa8b 	bl	8003c00 <HAL_UART_TxCpltCallback>
}
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086ec:	06d6      	lsls	r6, r2, #27
 80086ee:	d5da      	bpl.n	80086a6 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086f0:	06c8      	lsls	r0, r1, #27
 80086f2:	d5d8      	bpl.n	80086a6 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086f4:	2210      	movs	r2, #16
 80086f6:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	0651      	lsls	r1, r2, #25
 80086fc:	f140 8106 	bpl.w	800890c <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008700:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008702:	6801      	ldr	r1, [r0, #0]
 8008704:	684a      	ldr	r2, [r1, #4]
 8008706:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008708:	2a00      	cmp	r2, #0
 800870a:	d0ee      	beq.n	80086ea <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800870c:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008710:	4295      	cmp	r5, r2
 8008712:	d9ea      	bls.n	80086ea <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8008714:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008718:	680a      	ldr	r2, [r1, #0]
 800871a:	0692      	lsls	r2, r2, #26
 800871c:	f140 812b 	bpl.w	8008976 <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008720:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008724:	1ae9      	subs	r1, r5, r3
 8008726:	4620      	mov	r0, r4
 8008728:	b289      	uxth	r1, r1
 800872a:	f7ff ffa3 	bl	8008674 <HAL_UARTEx_RxEventCallback>
}
 800872e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008730:	0215      	lsls	r5, r2, #8
 8008732:	d502      	bpl.n	800873a <HAL_UART_IRQHandler+0xc2>
 8008734:	0048      	lsls	r0, r1, #1
 8008736:	f100 80dc 	bmi.w	80088f2 <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800873a:	01d3      	lsls	r3, r2, #7
 800873c:	d5d5      	bpl.n	80086ea <HAL_UART_IRQHandler+0x72>
 800873e:	2900      	cmp	r1, #0
 8008740:	dad3      	bge.n	80086ea <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008742:	4620      	mov	r0, r4
}
 8008744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008748:	f000 bdb4 	b.w	80092b4 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800874c:	07d0      	lsls	r0, r2, #31
 800874e:	d509      	bpl.n	8008764 <HAL_UART_IRQHandler+0xec>
 8008750:	05ce      	lsls	r6, r1, #23
 8008752:	d507      	bpl.n	8008764 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008754:	2001      	movs	r0, #1
 8008756:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008758:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800875c:	f040 0001 	orr.w	r0, r0, #1
 8008760:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008764:	0790      	lsls	r0, r2, #30
 8008766:	f140 8090 	bpl.w	800888a <HAL_UART_IRQHandler+0x212>
 800876a:	07ee      	lsls	r6, r5, #31
 800876c:	d50a      	bpl.n	8008784 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800876e:	2002      	movs	r0, #2
 8008770:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008772:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008776:	f040 0004 	orr.w	r0, r0, #4
 800877a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800877e:	0750      	lsls	r0, r2, #29
 8008780:	f100 8089 	bmi.w	8008896 <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008784:	0716      	lsls	r6, r2, #28
 8008786:	d50c      	bpl.n	80087a2 <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008788:	f001 0020 	and.w	r0, r1, #32
 800878c:	ea50 000c 	orrs.w	r0, r0, ip
 8008790:	d007      	beq.n	80087a2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008792:	2008      	movs	r0, #8
 8008794:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008796:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800879a:	f040 0008 	orr.w	r0, r0, #8
 800879e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087a2:	0510      	lsls	r0, r2, #20
 80087a4:	d50a      	bpl.n	80087bc <HAL_UART_IRQHandler+0x144>
 80087a6:	014e      	lsls	r6, r1, #5
 80087a8:	d508      	bpl.n	80087bc <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80087ae:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087b0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80087b4:	f040 0020 	orr.w	r0, r0, #32
 80087b8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087bc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d092      	beq.n	80086ea <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087c4:	0690      	lsls	r0, r2, #26
 80087c6:	d50a      	bpl.n	80087de <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087c8:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087cc:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 80087d0:	4329      	orrs	r1, r5
 80087d2:	d004      	beq.n	80087de <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 80087d4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80087d6:	b112      	cbz	r2, 80087de <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 80087d8:	4620      	mov	r0, r4
 80087da:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087dc:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80087de:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087e2:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087e4:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087e8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80087ec:	ea52 0501 	orrs.w	r5, r2, r1
 80087f0:	f000 80f2 	beq.w	80089d8 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	e843 2100 	strex	r1, r2, [r3]
 8008800:	2900      	cmp	r1, #0
 8008802:	d1f7      	bne.n	80087f4 <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008804:	483f      	ldr	r0, [pc, #252]	; (8008904 <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	f103 0208 	add.w	r2, r3, #8
 800880a:	e852 2f00 	ldrex	r2, [r2]
 800880e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	f103 0508 	add.w	r5, r3, #8
 8008814:	e845 2100 	strex	r1, r2, [r5]
 8008818:	2900      	cmp	r1, #0
 800881a:	d1f4      	bne.n	8008806 <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800881e:	2a01      	cmp	r2, #1
 8008820:	d052      	beq.n	80088c8 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008822:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008824:	2120      	movs	r1, #32
 8008826:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800882e:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	064a      	lsls	r2, r1, #25
 8008832:	d55a      	bpl.n	80088ea <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	f103 0208 	add.w	r2, r3, #8
 8008838:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800883c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	f103 0008 	add.w	r0, r3, #8
 8008844:	e840 2100 	strex	r1, r2, [r0]
 8008848:	2900      	cmp	r1, #0
 800884a:	d1f3      	bne.n	8008834 <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 800884c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800884e:	2800      	cmp	r0, #0
 8008850:	d04b      	beq.n	80088ea <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008852:	4b2d      	ldr	r3, [pc, #180]	; (8008908 <HAL_UART_IRQHandler+0x290>)
 8008854:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008856:	f7fd f9cb 	bl	8005bf0 <HAL_DMA_Abort_IT>
 800885a:	2800      	cmp	r0, #0
 800885c:	f43f af45 	beq.w	80086ea <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008860:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008862:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008864:	e00e      	b.n	8008884 <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008866:	0696      	lsls	r6, r2, #26
 8008868:	f57f af1a 	bpl.w	80086a0 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800886c:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008870:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 8008874:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8008878:	f43f af12 	beq.w	80086a0 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 800887c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800887e:	2b00      	cmp	r3, #0
 8008880:	f43f af33 	beq.w	80086ea <HAL_UART_IRQHandler+0x72>
}
 8008884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008888:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800888a:	0756      	lsls	r6, r2, #29
 800888c:	f57f af7a 	bpl.w	8008784 <HAL_UART_IRQHandler+0x10c>
 8008890:	07e8      	lsls	r0, r5, #31
 8008892:	f57f af77 	bpl.w	8008784 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008896:	2004      	movs	r0, #4
 8008898:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800889a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800889e:	f040 0002 	orr.w	r0, r0, #2
 80088a2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 80088a6:	e76d      	b.n	8008784 <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 80088a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f43f af1d 	beq.w	80086ea <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 80088b0:	4620      	mov	r0, r4
}
 80088b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80088b6:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80088bc:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088be:	621a      	str	r2, [r3, #32]
}
 80088c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80088c4:	f000 bcf4 	b.w	80092b0 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	e843 2100 	strex	r1, r2, [r3]
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d0a4      	beq.n	8008822 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	e853 2f00 	ldrex	r2, [r3]
 80088dc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	e843 2100 	strex	r1, r2, [r3]
 80088e4:	2900      	cmp	r1, #0
 80088e6:	d1ef      	bne.n	80088c8 <HAL_UART_IRQHandler+0x250>
 80088e8:	e79b      	b.n	8008822 <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 80088ea:	4620      	mov	r0, r4
 80088ec:	f7ff fe4c 	bl	8008588 <HAL_UART_ErrorCallback>
}
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088f2:	4620      	mov	r0, r4
}
 80088f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088f8:	f000 bcde 	b.w	80092b8 <HAL_UARTEx_TxFifoEmptyCallback>
 80088fc:	10000001 	.word	0x10000001
 8008900:	04000120 	.word	0x04000120
 8008904:	effffffe 	.word	0xeffffffe
 8008908:	08008661 	.word	0x08008661
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800890c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8008910:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008914:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8008918:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800891a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800891c:	2a00      	cmp	r2, #0
 800891e:	f43f aee4 	beq.w	80086ea <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008922:	1a41      	subs	r1, r0, r1
 8008924:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008926:	2900      	cmp	r1, #0
 8008928:	f43f aedf 	beq.w	80086ea <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008930:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008934:	e843 2000 	strex	r0, r2, [r3]
 8008938:	2800      	cmp	r0, #0
 800893a:	d1f7      	bne.n	800892c <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800893c:	4d29      	ldr	r5, [pc, #164]	; (80089e4 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	f103 0208 	add.w	r2, r3, #8
 8008942:	e852 2f00 	ldrex	r2, [r2]
 8008946:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	f103 0c08 	add.w	ip, r3, #8
 800894c:	e84c 2000 	strex	r0, r2, [ip]
 8008950:	2800      	cmp	r0, #0
 8008952:	d1f4      	bne.n	800893e <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 8008954:	2220      	movs	r2, #32
 8008956:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800895a:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895c:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008962:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	e843 2000 	strex	r0, r2, [r3]
 800896a:	2800      	cmp	r0, #0
 800896c:	d1f7      	bne.n	800895e <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff fe80 	bl	8008674 <HAL_UARTEx_RxEventCallback>
}
 8008974:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800897a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	e843 2100 	strex	r1, r2, [r3]
 8008982:	2900      	cmp	r1, #0
 8008984:	d1f7      	bne.n	8008976 <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	f103 0208 	add.w	r2, r3, #8
 800898a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	f103 0508 	add.w	r5, r3, #8
 8008996:	e845 2100 	strex	r1, r2, [r5]
 800899a:	2900      	cmp	r1, #0
 800899c:	d1f3      	bne.n	8008986 <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	f103 0208 	add.w	r2, r3, #8
 80089a2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	f103 0508 	add.w	r5, r3, #8
 80089ae:	e845 2100 	strex	r1, r2, [r5]
 80089b2:	2900      	cmp	r1, #0
 80089b4:	d1f3      	bne.n	800899e <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089bc:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	e843 2100 	strex	r1, r2, [r3]
 80089ca:	2900      	cmp	r1, #0
 80089cc:	d1f7      	bne.n	80089be <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ce:	f7fd f8d5 	bl	8005b7c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089d2:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80089d6:	e6a3      	b.n	8008720 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 80089d8:	4620      	mov	r0, r4
 80089da:	f7ff fdd5 	bl	8008588 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089de:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	effffffe 	.word	0xeffffffe

080089e8 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80089ea:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d002      	beq.n	80089f8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80089f2:	f7ff fdc7 	bl	8008584 <HAL_UART_RxHalfCpltCallback>
}
 80089f6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80089f8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80089fc:	0849      	lsrs	r1, r1, #1
 80089fe:	f7ff fe39 	bl	8008674 <HAL_UARTEx_RxEventCallback>
}
 8008a02:	bd08      	pop	{r3, pc}

08008a04 <UART_DMAReceiveCplt>:
{
 8008a04:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008a06:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a08:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	f012 0220 	ands.w	r2, r2, #32
 8008a10:	d128      	bne.n	8008a64 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8008a12:	6803      	ldr	r3, [r0, #0]
 8008a14:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	e843 2100 	strex	r1, r2, [r3]
 8008a24:	2900      	cmp	r1, #0
 8008a26:	d1f7      	bne.n	8008a18 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	f103 0208 	add.w	r2, r3, #8
 8008a2c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a30:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	f103 0c08 	add.w	ip, r3, #8
 8008a38:	e84c 2100 	strex	r1, r2, [ip]
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	d1f3      	bne.n	8008a28 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	f103 0208 	add.w	r2, r3, #8
 8008a44:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	f103 0c08 	add.w	ip, r3, #8
 8008a50:	e84c 2100 	strex	r1, r2, [ip]
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d1f3      	bne.n	8008a40 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008a60:	2a01      	cmp	r2, #1
 8008a62:	d005      	beq.n	8008a70 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a64:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d013      	beq.n	8008a92 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008a6a:	f7fa ffed 	bl	8003a48 <HAL_UART_RxCpltCallback>
}
 8008a6e:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a74:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	e843 2100 	strex	r1, r2, [r3]
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	d0f1      	beq.n	8008a64 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	e853 2f00 	ldrex	r2, [r3]
 8008a84:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	e843 2100 	strex	r1, r2, [r3]
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d1ef      	bne.n	8008a70 <UART_DMAReceiveCplt+0x6c>
 8008a90:	e7e8      	b.n	8008a64 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a92:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8008a96:	f7ff fded 	bl	8008674 <HAL_UARTEx_RxEventCallback>
}
 8008a9a:	bd08      	pop	{r3, pc}

08008a9c <UART_SetConfig>:
{
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aa0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aa2:	6882      	ldr	r2, [r0, #8]
 8008aa4:	6900      	ldr	r0, [r0, #16]
 8008aa6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aa8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aaa:	4302      	orrs	r2, r0
 8008aac:	430a      	orrs	r2, r1
 8008aae:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ab0:	49b2      	ldr	r1, [pc, #712]	; (8008d7c <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ab2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ab4:	4029      	ands	r1, r5
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	68e1      	ldr	r1, [r4, #12]
 8008abe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008ac2:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ac4:	49ae      	ldr	r1, [pc, #696]	; (8008d80 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ac6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ac8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aca:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008acc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ace:	f000 8081 	beq.w	8008bd4 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8008ad2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ad4:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008ad8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8008adc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ae6:	f022 020f 	bic.w	r2, r2, #15
 8008aea:	430a      	orrs	r2, r1
 8008aec:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aee:	4aa5      	ldr	r2, [pc, #660]	; (8008d84 <UART_SetConfig+0x2e8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d027      	beq.n	8008b44 <UART_SetConfig+0xa8>
 8008af4:	4aa4      	ldr	r2, [pc, #656]	; (8008d88 <UART_SetConfig+0x2ec>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d04b      	beq.n	8008b92 <UART_SetConfig+0xf6>
 8008afa:	4aa4      	ldr	r2, [pc, #656]	; (8008d8c <UART_SetConfig+0x2f0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	f000 8111 	beq.w	8008d24 <UART_SetConfig+0x288>
 8008b02:	4aa3      	ldr	r2, [pc, #652]	; (8008d90 <UART_SetConfig+0x2f4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	f000 80b9 	beq.w	8008c7c <UART_SetConfig+0x1e0>
 8008b0a:	4aa2      	ldr	r2, [pc, #648]	; (8008d94 <UART_SetConfig+0x2f8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d111      	bne.n	8008b34 <UART_SetConfig+0x98>
 8008b10:	4ba1      	ldr	r3, [pc, #644]	; (8008d98 <UART_SetConfig+0x2fc>)
 8008b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b1e:	f000 8126 	beq.w	8008d6e <UART_SetConfig+0x2d2>
 8008b22:	f200 80d5 	bhi.w	8008cd0 <UART_SetConfig+0x234>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f000 80d9 	beq.w	8008cde <UART_SetConfig+0x242>
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b30:	f000 80b0 	beq.w	8008c94 <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 8008b34:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8008b36:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008b38:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8008b3c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008b40:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b44:	4b94      	ldr	r3, [pc, #592]	; (8008d98 <UART_SetConfig+0x2fc>)
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	f240 808d 	bls.w	8008c70 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008b5a:	f000 8103 	beq.w	8008d64 <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b5e:	f7fe fa0b 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f000 80dc 	beq.w	8008d20 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b6a:	6862      	ldr	r2, [r4, #4]
 8008b6c:	4b8b      	ldr	r3, [pc, #556]	; (8008d9c <UART_SetConfig+0x300>)
 8008b6e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008b72:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b76:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b7a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008b7e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b82:	f1a3 0210 	sub.w	r2, r3, #16
 8008b86:	428a      	cmp	r2, r1
 8008b88:	d8d4      	bhi.n	8008b34 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	60d3      	str	r3, [r2, #12]
 8008b90:	e7d1      	b.n	8008b36 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b92:	4b81      	ldr	r3, [pc, #516]	; (8008d98 <UART_SetConfig+0x2fc>)
 8008b94:	4a82      	ldr	r2, [pc, #520]	; (8008da0 <UART_SetConfig+0x304>)
 8008b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ba0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008ba4:	d07c      	beq.n	8008ca0 <UART_SetConfig+0x204>
    switch (clocksource)
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d8c4      	bhi.n	8008b34 <UART_SetConfig+0x98>
 8008baa:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <UART_SetConfig+0x114>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008cd9 	.word	0x08008cd9
 8008bb4:	08008b5f 	.word	0x08008b5f
 8008bb8:	08008d5b 	.word	0x08008d5b
 8008bbc:	08008b35 	.word	0x08008b35
 8008bc0:	08008c9b 	.word	0x08008c9b
 8008bc4:	08008b35 	.word	0x08008b35
 8008bc8:	08008b35 	.word	0x08008b35
 8008bcc:	08008b35 	.word	0x08008b35
 8008bd0:	08008d4b 	.word	0x08008d4b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bd4:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008bd8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008bdc:	4311      	orrs	r1, r2
 8008bde:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008be4:	486c      	ldr	r0, [pc, #432]	; (8008d98 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008be6:	f022 020f 	bic.w	r2, r2, #15
 8008bea:	430a      	orrs	r2, r1
 8008bec:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bee:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008bf2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bfa:	f000 80ac 	beq.w	8008d56 <UART_SetConfig+0x2ba>
 8008bfe:	d80b      	bhi.n	8008c18 <UART_SetConfig+0x17c>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d038      	beq.n	8008c76 <UART_SetConfig+0x1da>
 8008c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c08:	d194      	bne.n	8008b34 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8008c0a:	f7fe f867 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f000 8086 	beq.w	8008d20 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c16:	e004      	b.n	8008c22 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c1c:	d18a      	bne.n	8008b34 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8008c1e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c22:	4b5e      	ldr	r3, [pc, #376]	; (8008d9c <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c24:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c26:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8008c2a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c2e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008c32:	4299      	cmp	r1, r3
 8008c34:	f63f af7e 	bhi.w	8008b34 <UART_SetConfig+0x98>
 8008c38:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008c3c:	f63f af7a 	bhi.w	8008b34 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c40:	2300      	movs	r3, #0
 8008c42:	4619      	mov	r1, r3
 8008c44:	f7f8 f848 	bl	8000cd8 <__aeabi_uldivmod>
 8008c48:	086a      	lsrs	r2, r5, #1
 8008c4a:	0203      	lsls	r3, r0, #8
 8008c4c:	0209      	lsls	r1, r1, #8
 8008c4e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008c52:	1898      	adds	r0, r3, r2
 8008c54:	f141 0100 	adc.w	r1, r1, #0
 8008c58:	462a      	mov	r2, r5
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f7f8 f83c 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c60:	4a50      	ldr	r2, [pc, #320]	; (8008da4 <UART_SetConfig+0x308>)
 8008c62:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8008c66:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c68:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c6a:	f63f af63 	bhi.w	8008b34 <UART_SetConfig+0x98>
 8008c6e:	e78c      	b.n	8008b8a <UART_SetConfig+0xee>
 8008c70:	4a4d      	ldr	r2, [pc, #308]	; (8008da8 <UART_SetConfig+0x30c>)
 8008c72:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c74:	e794      	b.n	8008ba0 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c76:	f7fe f96d 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
        break;
 8008c7a:	e7c8      	b.n	8008c0e <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c7c:	4b46      	ldr	r3, [pc, #280]	; (8008d98 <UART_SetConfig+0x2fc>)
 8008c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c86:	2b80      	cmp	r3, #128	; 0x80
 8008c88:	d071      	beq.n	8008d6e <UART_SetConfig+0x2d2>
 8008c8a:	d861      	bhi.n	8008d50 <UART_SetConfig+0x2b4>
 8008c8c:	b33b      	cbz	r3, 8008cde <UART_SetConfig+0x242>
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	f47f af50 	bne.w	8008b34 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008c98:	d061      	beq.n	8008d5e <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 8008c9a:	f7fe f81f 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
        break;
 8008c9e:	e760      	b.n	8008b62 <UART_SetConfig+0xc6>
    switch (clocksource)
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	f63f af47 	bhi.w	8008b34 <UART_SetConfig+0x98>
 8008ca6:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <UART_SetConfig+0x210>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008d65 	.word	0x08008d65
 8008cb4:	08008d6b 	.word	0x08008d6b
 8008cb8:	08008b35 	.word	0x08008b35
 8008cbc:	08008d5f 	.word	0x08008d5f
 8008cc0:	08008b35 	.word	0x08008b35
 8008cc4:	08008b35 	.word	0x08008b35
 8008cc8:	08008b35 	.word	0x08008b35
 8008ccc:	08008ced 	.word	0x08008ced
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cd4:	d036      	beq.n	8008d44 <UART_SetConfig+0x2a8>
 8008cd6:	e72d      	b.n	8008b34 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cd8:	f7fe f93c 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
        break;
 8008cdc:	e741      	b.n	8008b62 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cde:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008ce2:	d1f9      	bne.n	8008cd8 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ce4:	f7fe f936 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008ce8:	b1d0      	cbz	r0, 8008d20 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008cec:	6862      	ldr	r2, [r4, #4]
 8008cee:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <UART_SetConfig+0x300>)
 8008cf0:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8008cf4:	fbb0 f0f1 	udiv	r0, r0, r1
 8008cf8:	0853      	lsrs	r3, r2, #1
 8008cfa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cfe:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d02:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d06:	f1a3 0210 	sub.w	r2, r3, #16
 8008d0a:	428a      	cmp	r2, r1
 8008d0c:	f63f af12 	bhi.w	8008b34 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d10:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8008d14:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d16:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d18:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60cb      	str	r3, [r1, #12]
 8008d20:	2000      	movs	r0, #0
 8008d22:	e708      	b.n	8008b36 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d24:	4b1c      	ldr	r3, [pc, #112]	; (8008d98 <UART_SetConfig+0x2fc>)
 8008d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d01d      	beq.n	8008d6e <UART_SetConfig+0x2d2>
 8008d32:	d804      	bhi.n	8008d3e <UART_SetConfig+0x2a2>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0d2      	beq.n	8008cde <UART_SetConfig+0x242>
 8008d38:	2b10      	cmp	r3, #16
 8008d3a:	d0ab      	beq.n	8008c94 <UART_SetConfig+0x1f8>
 8008d3c:	e6fa      	b.n	8008b34 <UART_SetConfig+0x98>
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	f47f aef8 	bne.w	8008b34 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008d48:	d0d0      	beq.n	8008cec <UART_SetConfig+0x250>
    switch (clocksource)
 8008d4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008d4e:	e70c      	b.n	8008b6a <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d50:	2bc0      	cmp	r3, #192	; 0xc0
 8008d52:	d0f7      	beq.n	8008d44 <UART_SetConfig+0x2a8>
 8008d54:	e6ee      	b.n	8008b34 <UART_SetConfig+0x98>
 8008d56:	4815      	ldr	r0, [pc, #84]	; (8008dac <UART_SetConfig+0x310>)
 8008d58:	e763      	b.n	8008c22 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 8008d5a:	4814      	ldr	r0, [pc, #80]	; (8008dac <UART_SetConfig+0x310>)
 8008d5c:	e705      	b.n	8008b6a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8008d5e:	f7fd ffbd 	bl	8006cdc <HAL_RCC_GetSysClockFreq>
        break;
 8008d62:	e7c1      	b.n	8008ce8 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d64:	f7fe f908 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
        break;
 8008d68:	e7be      	b.n	8008ce8 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 8008d6a:	4810      	ldr	r0, [pc, #64]	; (8008dac <UART_SetConfig+0x310>)
 8008d6c:	e7be      	b.n	8008cec <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008d72:	480e      	ldr	r0, [pc, #56]	; (8008dac <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d74:	f47f aef9 	bne.w	8008b6a <UART_SetConfig+0xce>
 8008d78:	e7b8      	b.n	8008cec <UART_SetConfig+0x250>
 8008d7a:	bf00      	nop
 8008d7c:	cfff69f3 	.word	0xcfff69f3
 8008d80:	40008000 	.word	0x40008000
 8008d84:	40013800 	.word	0x40013800
 8008d88:	40004400 	.word	0x40004400
 8008d8c:	40004800 	.word	0x40004800
 8008d90:	40004c00 	.word	0x40004c00
 8008d94:	40005000 	.word	0x40005000
 8008d98:	40021000 	.word	0x40021000
 8008d9c:	0800d560 	.word	0x0800d560
 8008da0:	0800d550 	.word	0x0800d550
 8008da4:	000ffcff 	.word	0x000ffcff
 8008da8:	0800d54c 	.word	0x0800d54c
 8008dac:	00f42400 	.word	0x00f42400

08008db0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008db0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008db2:	07da      	lsls	r2, r3, #31
{
 8008db4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008db6:	d506      	bpl.n	8008dc6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008db8:	6801      	ldr	r1, [r0, #0]
 8008dba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008dbc:	684a      	ldr	r2, [r1, #4]
 8008dbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008dc2:	4322      	orrs	r2, r4
 8008dc4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dc6:	079c      	lsls	r4, r3, #30
 8008dc8:	d506      	bpl.n	8008dd8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dca:	6801      	ldr	r1, [r0, #0]
 8008dcc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008dce:	684a      	ldr	r2, [r1, #4]
 8008dd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dd4:	4322      	orrs	r2, r4
 8008dd6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dd8:	0759      	lsls	r1, r3, #29
 8008dda:	d506      	bpl.n	8008dea <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ddc:	6801      	ldr	r1, [r0, #0]
 8008dde:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008de0:	684a      	ldr	r2, [r1, #4]
 8008de2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008de6:	4322      	orrs	r2, r4
 8008de8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dea:	071a      	lsls	r2, r3, #28
 8008dec:	d506      	bpl.n	8008dfc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dee:	6801      	ldr	r1, [r0, #0]
 8008df0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008df2:	684a      	ldr	r2, [r1, #4]
 8008df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008df8:	4322      	orrs	r2, r4
 8008dfa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dfc:	06dc      	lsls	r4, r3, #27
 8008dfe:	d506      	bpl.n	8008e0e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e00:	6801      	ldr	r1, [r0, #0]
 8008e02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008e04:	688a      	ldr	r2, [r1, #8]
 8008e06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e0a:	4322      	orrs	r2, r4
 8008e0c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e0e:	0699      	lsls	r1, r3, #26
 8008e10:	d506      	bpl.n	8008e20 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e12:	6801      	ldr	r1, [r0, #0]
 8008e14:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008e16:	688a      	ldr	r2, [r1, #8]
 8008e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e1c:	4322      	orrs	r2, r4
 8008e1e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e20:	065a      	lsls	r2, r3, #25
 8008e22:	d509      	bpl.n	8008e38 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e24:	6801      	ldr	r1, [r0, #0]
 8008e26:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008e28:	684a      	ldr	r2, [r1, #4]
 8008e2a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008e2e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e34:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e36:	d00b      	beq.n	8008e50 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e38:	061b      	lsls	r3, r3, #24
 8008e3a:	d506      	bpl.n	8008e4a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e3c:	6802      	ldr	r2, [r0, #0]
 8008e3e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008e40:	6853      	ldr	r3, [r2, #4]
 8008e42:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008e46:	430b      	orrs	r3, r1
 8008e48:	6053      	str	r3, [r2, #4]
}
 8008e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e4e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e50:	684a      	ldr	r2, [r1, #4]
 8008e52:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008e54:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008e58:	4322      	orrs	r2, r4
 8008e5a:	604a      	str	r2, [r1, #4]
 8008e5c:	e7ec      	b.n	8008e38 <UART_AdvFeatureConfig+0x88>
 8008e5e:	bf00      	nop

08008e60 <UART_WaitOnFlagUntilTimeout>:
{
 8008e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e68:	6804      	ldr	r4, [r0, #0]
{
 8008e6a:	4607      	mov	r7, r0
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	4615      	mov	r5, r2
 8008e70:	4699      	mov	r9, r3
 8008e72:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008e76:	d10a      	bne.n	8008e8e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e78:	69e3      	ldr	r3, [r4, #28]
 8008e7a:	ea36 0303 	bics.w	r3, r6, r3
 8008e7e:	bf0c      	ite	eq
 8008e80:	2301      	moveq	r3, #1
 8008e82:	2300      	movne	r3, #0
 8008e84:	429d      	cmp	r5, r3
 8008e86:	d0f7      	beq.n	8008e78 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8008e88:	2000      	movs	r0, #0
}
 8008e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e8e:	69e2      	ldr	r2, [r4, #28]
 8008e90:	ea36 0202 	bics.w	r2, r6, r2
 8008e94:	bf0c      	ite	eq
 8008e96:	2301      	moveq	r3, #1
 8008e98:	2300      	movne	r3, #0
 8008e9a:	42ab      	cmp	r3, r5
 8008e9c:	d1f4      	bne.n	8008e88 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9e:	f7f9 ffc1 	bl	8002e24 <HAL_GetTick>
 8008ea2:	eba0 0009 	sub.w	r0, r0, r9
 8008ea6:	4540      	cmp	r0, r8
 8008ea8:	d833      	bhi.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008eaa:	f1b8 0f00 	cmp.w	r8, #0
 8008eae:	d030      	beq.n	8008f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008eb0:	683c      	ldr	r4, [r7, #0]
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	0758      	lsls	r0, r3, #29
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	d5db      	bpl.n	8008e72 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008eba:	69e3      	ldr	r3, [r4, #28]
 8008ebc:	0519      	lsls	r1, r3, #20
 8008ebe:	d5d8      	bpl.n	8008e72 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ec4:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008eca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	e844 3100 	strex	r1, r3, [r4]
 8008ed2:	b139      	cbz	r1, 8008ee4 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	e852 3f00 	ldrex	r3, [r2]
 8008ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	e842 3100 	strex	r1, r3, [r2]
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	d1f7      	bne.n	8008ed4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	f102 0308 	add.w	r3, r2, #8
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	f102 0008 	add.w	r0, r2, #8
 8008ef4:	e840 3100 	strex	r1, r3, [r0]
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	d1f3      	bne.n	8008ee4 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8008efc:	2320      	movs	r3, #32
 8008efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8008f02:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008f06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8008f0a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8008f10:	e7bb      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0x2a>
 8008f12:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	e842 3100 	strex	r1, r3, [r2]
 8008f20:	2900      	cmp	r1, #0
 8008f22:	d1f7      	bne.n	8008f14 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	f102 0308 	add.w	r3, r2, #8
 8008f28:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	f102 0008 	add.w	r0, r2, #8
 8008f34:	e840 3100 	strex	r1, r3, [r0]
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	d1f3      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8008f3c:	2320      	movs	r3, #32
 8008f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8008f42:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8008f4a:	2003      	movs	r0, #3
 8008f4c:	e79d      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0x2a>
 8008f4e:	bf00      	nop

08008f50 <HAL_UART_Transmit>:
{
 8008f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f54:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8008f56:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8008f5a:	2820      	cmp	r0, #32
{
 8008f5c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8008f5e:	f040 8090 	bne.w	8009082 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8008f62:	4689      	mov	r9, r1
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d048      	beq.n	8008ffa <HAL_UART_Transmit+0xaa>
 8008f68:	4614      	mov	r4, r2
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	d045      	beq.n	8008ffa <HAL_UART_Transmit+0xaa>
 8008f6e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8008f70:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	f000 8084 	beq.w	8009082 <HAL_UART_Transmit+0x132>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f80:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f84:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f86:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f8a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8008f8e:	f7f9 ff49 	bl	8002e24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f92:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8008f94:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8008f9c:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 8008fa0:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa2:	d072      	beq.n	800908a <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 8008fa4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8008fa8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8008faa:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8008fac:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8008fb0:	b1b3      	cbz	r3, 8008fe0 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb2:	682c      	ldr	r4, [r5, #0]
 8008fb4:	1c71      	adds	r1, r6, #1
 8008fb6:	d124      	bne.n	8009002 <HAL_UART_Transmit+0xb2>
 8008fb8:	69e2      	ldr	r2, [r4, #28]
 8008fba:	0612      	lsls	r2, r2, #24
 8008fbc:	d5fc      	bpl.n	8008fb8 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 8008fbe:	f1b9 0f00 	cmp.w	r9, #0
 8008fc2:	d059      	beq.n	8009078 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fc4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008fc8:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8008fca:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008fd6:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e9      	bne.n	8008fb4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fe0:	9600      	str	r6, [sp, #0]
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2140      	movs	r1, #64	; 0x40
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f7ff ff39 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d171      	bne.n	80090d6 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8008ff2:	2320      	movs	r3, #32
 8008ff4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8008ff8:	e000      	b.n	8008ffc <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8008ffa:	2001      	movs	r0, #1
}
 8008ffc:	b003      	add	sp, #12
 8008ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009002:	69e3      	ldr	r3, [r4, #28]
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	d4da      	bmi.n	8008fbe <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009008:	f7f9 ff0c 	bl	8002e24 <HAL_GetTick>
 800900c:	1bc0      	subs	r0, r0, r7
 800900e:	4286      	cmp	r6, r0
 8009010:	d341      	bcc.n	8009096 <HAL_UART_Transmit+0x146>
 8009012:	2e00      	cmp	r6, #0
 8009014:	d03f      	beq.n	8009096 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009016:	682c      	ldr	r4, [r5, #0]
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	0752      	lsls	r2, r2, #29
 800901c:	4623      	mov	r3, r4
 800901e:	d5c9      	bpl.n	8008fb4 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009020:	69e2      	ldr	r2, [r4, #28]
 8009022:	0510      	lsls	r0, r2, #20
 8009024:	d5c6      	bpl.n	8008fb4 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800902a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	e844 2100 	strex	r1, r2, [r4]
 8009038:	b139      	cbz	r1, 800904a <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	e853 2f00 	ldrex	r2, [r3]
 800903e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	e843 2100 	strex	r1, r2, [r3]
 8009046:	2900      	cmp	r1, #0
 8009048:	d1f7      	bne.n	800903a <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	f103 0208 	add.w	r2, r3, #8
 800904e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009052:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	f103 0008 	add.w	r0, r3, #8
 800905a:	e840 2100 	strex	r1, r2, [r0]
 800905e:	2900      	cmp	r1, #0
 8009060:	d1f3      	bne.n	800904a <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8009062:	2320      	movs	r3, #32
 8009064:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009068:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800906c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8009070:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009072:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009076:	e7c1      	b.n	8008ffc <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009078:	f838 3b02 	ldrh.w	r3, [r8], #2
 800907c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009080:	e7a2      	b.n	8008fc8 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 8009082:	2002      	movs	r0, #2
}
 8009084:	b003      	add	sp, #12
 8009086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800908a:	692b      	ldr	r3, [r5, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d189      	bne.n	8008fa4 <HAL_UART_Transmit+0x54>
 8009090:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8009092:	4699      	mov	r9, r3
 8009094:	e786      	b.n	8008fa4 <HAL_UART_Transmit+0x54>
 8009096:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800909c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	e843 2100 	strex	r1, r2, [r3]
 80090a4:	2900      	cmp	r1, #0
 80090a6:	d1f7      	bne.n	8009098 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	f103 0208 	add.w	r2, r3, #8
 80090ac:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	f103 0008 	add.w	r0, r3, #8
 80090b8:	e840 2100 	strex	r1, r2, [r0]
 80090bc:	2900      	cmp	r1, #0
 80090be:	d1f3      	bne.n	80090a8 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80090c0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80090c2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80090c4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80090c8:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80090cc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 80090d0:	b003      	add	sp, #12
 80090d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80090d6:	2003      	movs	r0, #3
 80090d8:	e790      	b.n	8008ffc <HAL_UART_Transmit+0xac>
 80090da:	bf00      	nop

080090dc <HAL_UART_Init>:
  if (huart == NULL)
 80090dc:	2800      	cmp	r0, #0
 80090de:	d066      	beq.n	80091ae <HAL_UART_Init+0xd2>
{
 80090e0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80090e2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80090e6:	b082      	sub	sp, #8
 80090e8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d04c      	beq.n	8009188 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80090ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80090f0:	2324      	movs	r3, #36	; 0x24
 80090f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80090f6:	6813      	ldr	r3, [r2, #0]
 80090f8:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090fc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80090fe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009100:	f7ff fccc 	bl	8008a9c <UART_SetConfig>
 8009104:	2801      	cmp	r0, #1
 8009106:	d03c      	beq.n	8009182 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d135      	bne.n	800917a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
 8009112:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8009116:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009118:	6899      	ldr	r1, [r3, #8]
 800911a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800911e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009120:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009122:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8009124:	f041 0101 	orr.w	r1, r1, #1
 8009128:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800912e:	f7f9 fe79 	bl	8002e24 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8009138:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800913a:	d40e      	bmi.n	800915a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	075b      	lsls	r3, r3, #29
 8009140:	d427      	bmi.n	8009192 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009142:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009144:	2220      	movs	r2, #32
 8009146:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800914a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800914e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8009152:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009154:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009156:	b002      	add	sp, #8
 8009158:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800915a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	462a      	mov	r2, r5
 8009162:	4603      	mov	r3, r0
 8009164:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009168:	4620      	mov	r0, r4
 800916a:	f7ff fe79 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 800916e:	b9e0      	cbnz	r0, 80091aa <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	075b      	lsls	r3, r3, #29
 8009176:	d40c      	bmi.n	8009192 <HAL_UART_Init+0xb6>
 8009178:	e7e3      	b.n	8009142 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800917a:	4620      	mov	r0, r4
 800917c:	f7ff fe18 	bl	8008db0 <UART_AdvFeatureConfig>
 8009180:	e7c5      	b.n	800910e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8009182:	2001      	movs	r0, #1
}
 8009184:	b002      	add	sp, #8
 8009186:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8009188:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800918c:	f7fb fb02 	bl	8004794 <HAL_UART_MspInit>
 8009190:	e7ad      	b.n	80090ee <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009192:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	2200      	movs	r2, #0
 800919a:	4633      	mov	r3, r6
 800919c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7ff fe5d 	bl	8008e60 <UART_WaitOnFlagUntilTimeout>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d0cb      	beq.n	8009142 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80091aa:	2003      	movs	r0, #3
 80091ac:	e7d3      	b.n	8009156 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80091ae:	2001      	movs	r0, #1
}
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop

080091b4 <UART_Start_Receive_DMA>:
{
 80091b4:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091b6:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b8:	2500      	movs	r5, #0
 80091ba:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 80091be:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80091c0:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 80091c2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091c6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 80091ca:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80091cc:	b168      	cbz	r0, 80091ea <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091ce:	4e20      	ldr	r6, [pc, #128]	; (8009250 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 80091d0:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80091d2:	4613      	mov	r3, r2
 80091d4:	460a      	mov	r2, r1
 80091d6:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091d8:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091da:	4e1e      	ldr	r6, [pc, #120]	; (8009254 <UART_Start_Receive_DMA+0xa0>)
 80091dc:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091de:	4e1e      	ldr	r6, [pc, #120]	; (8009258 <UART_Start_Receive_DMA+0xa4>)
 80091e0:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80091e2:	3124      	adds	r1, #36	; 0x24
 80091e4:	f7fc fc70 	bl	8005ac8 <HAL_DMA_Start_IT>
 80091e8:	bb40      	cbnz	r0, 800923c <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 80091ea:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 80091ec:	2200      	movs	r2, #0
 80091ee:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 80091f2:	b14b      	cbz	r3, 8009208 <UART_Start_Receive_DMA+0x54>
 80091f4:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	e843 2100 	strex	r1, r2, [r3]
 8009202:	2900      	cmp	r1, #0
 8009204:	d1f7      	bne.n	80091f6 <UART_Start_Receive_DMA+0x42>
 8009206:	e000      	b.n	800920a <UART_Start_Receive_DMA+0x56>
 8009208:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	f103 0208 	add.w	r2, r3, #8
 800920e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009212:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	f103 0008 	add.w	r0, r3, #8
 800921a:	e840 2100 	strex	r1, r2, [r0]
 800921e:	2900      	cmp	r1, #0
 8009220:	d1f3      	bne.n	800920a <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	f103 0208 	add.w	r2, r3, #8
 8009226:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800922a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	f103 0108 	add.w	r1, r3, #8
 8009232:	e841 2000 	strex	r0, r2, [r1]
 8009236:	2800      	cmp	r0, #0
 8009238:	d1f3      	bne.n	8009222 <UART_Start_Receive_DMA+0x6e>
}
 800923a:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800923c:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800923e:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8009240:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009244:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 8009248:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800924a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	08008a05 	.word	0x08008a05
 8009254:	080089e9 	.word	0x080089e9
 8009258:	0800858d 	.word	0x0800858d

0800925c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800925c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009260:	2b20      	cmp	r3, #32
 8009262:	d120      	bne.n	80092a6 <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8009264:	b1e9      	cbz	r1, 80092a2 <HAL_UART_Receive_DMA+0x46>
 8009266:	b1e2      	cbz	r2, 80092a2 <HAL_UART_Receive_DMA+0x46>
    __HAL_LOCK(huart);
 8009268:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800926c:	2b01      	cmp	r3, #1
 800926e:	d01a      	beq.n	80092a6 <HAL_UART_Receive_DMA+0x4a>
{
 8009270:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009272:	4b0e      	ldr	r3, [pc, #56]	; (80092ac <HAL_UART_Receive_DMA+0x50>)
 8009274:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8009276:	2501      	movs	r5, #1
 8009278:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800927c:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927e:	f04f 0500 	mov.w	r5, #0
 8009282:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009284:	d00a      	beq.n	800929c <HAL_UART_Receive_DMA+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009286:	6863      	ldr	r3, [r4, #4]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	d507      	bpl.n	800929c <HAL_UART_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	e844 3500 	strex	r5, r3, [r4]
 8009298:	2d00      	cmp	r5, #0
 800929a:	d1f7      	bne.n	800928c <HAL_UART_Receive_DMA+0x30>
}
 800929c:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800929e:	f7ff bf89 	b.w	80091b4 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80092a2:	2001      	movs	r0, #1
 80092a4:	4770      	bx	lr
    return HAL_BUSY;
 80092a6:	2002      	movs	r0, #2
}
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40008000 	.word	0x40008000

080092b0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop

080092b4 <HAL_UARTEx_RxFifoFullCallback>:
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop

080092b8 <HAL_UARTEx_TxFifoEmptyCallback>:
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop

080092bc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092bc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d017      	beq.n	80092f4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80092c6:	2324      	movs	r3, #36	; 0x24
{
 80092c8:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80092ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ce:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092d0:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092d2:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80092d4:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092d8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80092dc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092de:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e0:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80092e6:	2220      	movs	r2, #32
 80092e8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80092ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80092f0:	4618      	mov	r0, r3
}
 80092f2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80092f4:	2002      	movs	r0, #2
}
 80092f6:	4770      	bx	lr

080092f8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80092fc:	2a01      	cmp	r2, #1
 80092fe:	d037      	beq.n	8009370 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8009300:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009302:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009304:	2024      	movs	r0, #36	; 0x24
{
 8009306:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009308:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800930c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800930e:	6810      	ldr	r0, [r2, #0]
 8009310:	f020 0001 	bic.w	r0, r0, #1
 8009314:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009316:	6890      	ldr	r0, [r2, #8]
 8009318:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800931c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800931e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009320:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009322:	b310      	cbz	r0, 800936a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009324:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009326:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8009328:	4d12      	ldr	r5, [pc, #72]	; (8009374 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800932a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800932e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009332:	4911      	ldr	r1, [pc, #68]	; (8009378 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009334:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009338:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800933c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009340:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009344:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009346:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009348:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800934c:	fbb1 f1f5 	udiv	r1, r1, r5
 8009350:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009354:	2100      	movs	r1, #0
 8009356:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800935a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800935c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800935e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009362:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009364:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009368:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800936a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800936c:	4608      	mov	r0, r1
 800936e:	e7ef      	b.n	8009350 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009370:	2002      	movs	r0, #2
}
 8009372:	4770      	bx	lr
 8009374:	0800d578 	.word	0x0800d578
 8009378:	0800d580 	.word	0x0800d580

0800937c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800937c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009380:	2a01      	cmp	r2, #1
 8009382:	d037      	beq.n	80093f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8009384:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009386:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009388:	2024      	movs	r0, #36	; 0x24
{
 800938a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800938c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009390:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009392:	6810      	ldr	r0, [r2, #0]
 8009394:	f020 0001 	bic.w	r0, r0, #1
 8009398:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800939a:	6890      	ldr	r0, [r2, #8]
 800939c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80093a0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093a2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093a4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093a6:	b310      	cbz	r0, 80093ee <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093a8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093aa:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80093ac:	4d12      	ldr	r5, [pc, #72]	; (80093f8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ae:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093b2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093b6:	4911      	ldr	r1, [pc, #68]	; (80093fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80093b8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093bc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80093c0:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80093c4:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093c8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ca:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093cc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093d0:	fbb1 f1f5 	udiv	r1, r1, r5
 80093d4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80093d8:	2100      	movs	r1, #0
 80093da:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80093de:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e0:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80093e2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80093e6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80093e8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80093ec:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80093ee:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80093f0:	4608      	mov	r0, r1
 80093f2:	e7ef      	b.n	80093d4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80093f4:	2002      	movs	r0, #2
}
 80093f6:	4770      	bx	lr
 80093f8:	0800d578 	.word	0x0800d578
 80093fc:	0800d580 	.word	0x0800d580

08009400 <__cvt>:
 8009400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009404:	ec55 4b10 	vmov	r4, r5, d0
 8009408:	2d00      	cmp	r5, #0
 800940a:	460e      	mov	r6, r1
 800940c:	4619      	mov	r1, r3
 800940e:	462b      	mov	r3, r5
 8009410:	bfbb      	ittet	lt
 8009412:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009416:	461d      	movlt	r5, r3
 8009418:	2300      	movge	r3, #0
 800941a:	232d      	movlt	r3, #45	; 0x2d
 800941c:	700b      	strb	r3, [r1, #0]
 800941e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009420:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009424:	4691      	mov	r9, r2
 8009426:	f023 0820 	bic.w	r8, r3, #32
 800942a:	bfbc      	itt	lt
 800942c:	4622      	movlt	r2, r4
 800942e:	4614      	movlt	r4, r2
 8009430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009434:	d005      	beq.n	8009442 <__cvt+0x42>
 8009436:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800943a:	d100      	bne.n	800943e <__cvt+0x3e>
 800943c:	3601      	adds	r6, #1
 800943e:	2102      	movs	r1, #2
 8009440:	e000      	b.n	8009444 <__cvt+0x44>
 8009442:	2103      	movs	r1, #3
 8009444:	ab03      	add	r3, sp, #12
 8009446:	9301      	str	r3, [sp, #4]
 8009448:	ab02      	add	r3, sp, #8
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	ec45 4b10 	vmov	d0, r4, r5
 8009450:	4653      	mov	r3, sl
 8009452:	4632      	mov	r2, r6
 8009454:	f001 f80c 	bl	800a470 <_dtoa_r>
 8009458:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800945c:	4607      	mov	r7, r0
 800945e:	d102      	bne.n	8009466 <__cvt+0x66>
 8009460:	f019 0f01 	tst.w	r9, #1
 8009464:	d022      	beq.n	80094ac <__cvt+0xac>
 8009466:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800946a:	eb07 0906 	add.w	r9, r7, r6
 800946e:	d110      	bne.n	8009492 <__cvt+0x92>
 8009470:	783b      	ldrb	r3, [r7, #0]
 8009472:	2b30      	cmp	r3, #48	; 0x30
 8009474:	d10a      	bne.n	800948c <__cvt+0x8c>
 8009476:	2200      	movs	r2, #0
 8009478:	2300      	movs	r3, #0
 800947a:	4620      	mov	r0, r4
 800947c:	4629      	mov	r1, r5
 800947e:	f7f7 fb4b 	bl	8000b18 <__aeabi_dcmpeq>
 8009482:	b918      	cbnz	r0, 800948c <__cvt+0x8c>
 8009484:	f1c6 0601 	rsb	r6, r6, #1
 8009488:	f8ca 6000 	str.w	r6, [sl]
 800948c:	f8da 3000 	ldr.w	r3, [sl]
 8009490:	4499      	add	r9, r3
 8009492:	2200      	movs	r2, #0
 8009494:	2300      	movs	r3, #0
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f7 fb3d 	bl	8000b18 <__aeabi_dcmpeq>
 800949e:	b108      	cbz	r0, 80094a4 <__cvt+0xa4>
 80094a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80094a4:	2230      	movs	r2, #48	; 0x30
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	454b      	cmp	r3, r9
 80094aa:	d307      	bcc.n	80094bc <__cvt+0xbc>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094b0:	1bdb      	subs	r3, r3, r7
 80094b2:	4638      	mov	r0, r7
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	b004      	add	sp, #16
 80094b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094bc:	1c59      	adds	r1, r3, #1
 80094be:	9103      	str	r1, [sp, #12]
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	e7f0      	b.n	80094a6 <__cvt+0xa6>

080094c4 <__exponent>:
 80094c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094c6:	4603      	mov	r3, r0
 80094c8:	2900      	cmp	r1, #0
 80094ca:	bfb8      	it	lt
 80094cc:	4249      	neglt	r1, r1
 80094ce:	f803 2b02 	strb.w	r2, [r3], #2
 80094d2:	bfb4      	ite	lt
 80094d4:	222d      	movlt	r2, #45	; 0x2d
 80094d6:	222b      	movge	r2, #43	; 0x2b
 80094d8:	2909      	cmp	r1, #9
 80094da:	7042      	strb	r2, [r0, #1]
 80094dc:	dd2a      	ble.n	8009534 <__exponent+0x70>
 80094de:	f10d 0207 	add.w	r2, sp, #7
 80094e2:	4617      	mov	r7, r2
 80094e4:	260a      	movs	r6, #10
 80094e6:	4694      	mov	ip, r2
 80094e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80094ec:	fb06 1415 	mls	r4, r6, r5, r1
 80094f0:	3430      	adds	r4, #48	; 0x30
 80094f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80094f6:	460c      	mov	r4, r1
 80094f8:	2c63      	cmp	r4, #99	; 0x63
 80094fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80094fe:	4629      	mov	r1, r5
 8009500:	dcf1      	bgt.n	80094e6 <__exponent+0x22>
 8009502:	3130      	adds	r1, #48	; 0x30
 8009504:	f1ac 0402 	sub.w	r4, ip, #2
 8009508:	f802 1c01 	strb.w	r1, [r2, #-1]
 800950c:	1c41      	adds	r1, r0, #1
 800950e:	4622      	mov	r2, r4
 8009510:	42ba      	cmp	r2, r7
 8009512:	d30a      	bcc.n	800952a <__exponent+0x66>
 8009514:	f10d 0209 	add.w	r2, sp, #9
 8009518:	eba2 020c 	sub.w	r2, r2, ip
 800951c:	42bc      	cmp	r4, r7
 800951e:	bf88      	it	hi
 8009520:	2200      	movhi	r2, #0
 8009522:	4413      	add	r3, r2
 8009524:	1a18      	subs	r0, r3, r0
 8009526:	b003      	add	sp, #12
 8009528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800952e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009532:	e7ed      	b.n	8009510 <__exponent+0x4c>
 8009534:	2330      	movs	r3, #48	; 0x30
 8009536:	3130      	adds	r1, #48	; 0x30
 8009538:	7083      	strb	r3, [r0, #2]
 800953a:	70c1      	strb	r1, [r0, #3]
 800953c:	1d03      	adds	r3, r0, #4
 800953e:	e7f1      	b.n	8009524 <__exponent+0x60>

08009540 <_printf_float>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	ed2d 8b02 	vpush	{d8}
 8009548:	b08d      	sub	sp, #52	; 0x34
 800954a:	460c      	mov	r4, r1
 800954c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009550:	4616      	mov	r6, r2
 8009552:	461f      	mov	r7, r3
 8009554:	4605      	mov	r5, r0
 8009556:	f000 fe8d 	bl	800a274 <_localeconv_r>
 800955a:	f8d0 a000 	ldr.w	sl, [r0]
 800955e:	4650      	mov	r0, sl
 8009560:	f7f6 feae 	bl	80002c0 <strlen>
 8009564:	2300      	movs	r3, #0
 8009566:	930a      	str	r3, [sp, #40]	; 0x28
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	f8d8 3000 	ldr.w	r3, [r8]
 8009570:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009574:	3307      	adds	r3, #7
 8009576:	f023 0307 	bic.w	r3, r3, #7
 800957a:	f103 0208 	add.w	r2, r3, #8
 800957e:	f8c8 2000 	str.w	r2, [r8]
 8009582:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009586:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800958a:	9307      	str	r3, [sp, #28]
 800958c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009590:	ee08 0a10 	vmov	s16, r0
 8009594:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800959c:	4b9e      	ldr	r3, [pc, #632]	; (8009818 <_printf_float+0x2d8>)
 800959e:	f04f 32ff 	mov.w	r2, #4294967295
 80095a2:	f7f7 faeb 	bl	8000b7c <__aeabi_dcmpun>
 80095a6:	bb88      	cbnz	r0, 800960c <_printf_float+0xcc>
 80095a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ac:	4b9a      	ldr	r3, [pc, #616]	; (8009818 <_printf_float+0x2d8>)
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295
 80095b2:	f7f7 fac5 	bl	8000b40 <__aeabi_dcmple>
 80095b6:	bb48      	cbnz	r0, 800960c <_printf_float+0xcc>
 80095b8:	2200      	movs	r2, #0
 80095ba:	2300      	movs	r3, #0
 80095bc:	4640      	mov	r0, r8
 80095be:	4649      	mov	r1, r9
 80095c0:	f7f7 fab4 	bl	8000b2c <__aeabi_dcmplt>
 80095c4:	b110      	cbz	r0, 80095cc <_printf_float+0x8c>
 80095c6:	232d      	movs	r3, #45	; 0x2d
 80095c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095cc:	4a93      	ldr	r2, [pc, #588]	; (800981c <_printf_float+0x2dc>)
 80095ce:	4b94      	ldr	r3, [pc, #592]	; (8009820 <_printf_float+0x2e0>)
 80095d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095d4:	bf94      	ite	ls
 80095d6:	4690      	movls	r8, r2
 80095d8:	4698      	movhi	r8, r3
 80095da:	2303      	movs	r3, #3
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	9b05      	ldr	r3, [sp, #20]
 80095e0:	f023 0304 	bic.w	r3, r3, #4
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	f04f 0900 	mov.w	r9, #0
 80095ea:	9700      	str	r7, [sp, #0]
 80095ec:	4633      	mov	r3, r6
 80095ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80095f0:	4621      	mov	r1, r4
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f9da 	bl	80099ac <_printf_common>
 80095f8:	3001      	adds	r0, #1
 80095fa:	f040 8090 	bne.w	800971e <_printf_float+0x1de>
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	b00d      	add	sp, #52	; 0x34
 8009604:	ecbd 8b02 	vpop	{d8}
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	4642      	mov	r2, r8
 800960e:	464b      	mov	r3, r9
 8009610:	4640      	mov	r0, r8
 8009612:	4649      	mov	r1, r9
 8009614:	f7f7 fab2 	bl	8000b7c <__aeabi_dcmpun>
 8009618:	b140      	cbz	r0, 800962c <_printf_float+0xec>
 800961a:	464b      	mov	r3, r9
 800961c:	2b00      	cmp	r3, #0
 800961e:	bfbc      	itt	lt
 8009620:	232d      	movlt	r3, #45	; 0x2d
 8009622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009626:	4a7f      	ldr	r2, [pc, #508]	; (8009824 <_printf_float+0x2e4>)
 8009628:	4b7f      	ldr	r3, [pc, #508]	; (8009828 <_printf_float+0x2e8>)
 800962a:	e7d1      	b.n	80095d0 <_printf_float+0x90>
 800962c:	6863      	ldr	r3, [r4, #4]
 800962e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009632:	9206      	str	r2, [sp, #24]
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	d13f      	bne.n	80096b8 <_printf_float+0x178>
 8009638:	2306      	movs	r3, #6
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	9b05      	ldr	r3, [sp, #20]
 800963e:	6861      	ldr	r1, [r4, #4]
 8009640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009644:	2300      	movs	r3, #0
 8009646:	9303      	str	r3, [sp, #12]
 8009648:	ab0a      	add	r3, sp, #40	; 0x28
 800964a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800964e:	ab09      	add	r3, sp, #36	; 0x24
 8009650:	ec49 8b10 	vmov	d0, r8, r9
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	6022      	str	r2, [r4, #0]
 8009658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800965c:	4628      	mov	r0, r5
 800965e:	f7ff fecf 	bl	8009400 <__cvt>
 8009662:	9b06      	ldr	r3, [sp, #24]
 8009664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009666:	2b47      	cmp	r3, #71	; 0x47
 8009668:	4680      	mov	r8, r0
 800966a:	d108      	bne.n	800967e <_printf_float+0x13e>
 800966c:	1cc8      	adds	r0, r1, #3
 800966e:	db02      	blt.n	8009676 <_printf_float+0x136>
 8009670:	6863      	ldr	r3, [r4, #4]
 8009672:	4299      	cmp	r1, r3
 8009674:	dd41      	ble.n	80096fa <_printf_float+0x1ba>
 8009676:	f1ab 0302 	sub.w	r3, fp, #2
 800967a:	fa5f fb83 	uxtb.w	fp, r3
 800967e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009682:	d820      	bhi.n	80096c6 <_printf_float+0x186>
 8009684:	3901      	subs	r1, #1
 8009686:	465a      	mov	r2, fp
 8009688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800968c:	9109      	str	r1, [sp, #36]	; 0x24
 800968e:	f7ff ff19 	bl	80094c4 <__exponent>
 8009692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009694:	1813      	adds	r3, r2, r0
 8009696:	2a01      	cmp	r2, #1
 8009698:	4681      	mov	r9, r0
 800969a:	6123      	str	r3, [r4, #16]
 800969c:	dc02      	bgt.n	80096a4 <_printf_float+0x164>
 800969e:	6822      	ldr	r2, [r4, #0]
 80096a0:	07d2      	lsls	r2, r2, #31
 80096a2:	d501      	bpl.n	80096a8 <_printf_float+0x168>
 80096a4:	3301      	adds	r3, #1
 80096a6:	6123      	str	r3, [r4, #16]
 80096a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d09c      	beq.n	80095ea <_printf_float+0xaa>
 80096b0:	232d      	movs	r3, #45	; 0x2d
 80096b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b6:	e798      	b.n	80095ea <_printf_float+0xaa>
 80096b8:	9a06      	ldr	r2, [sp, #24]
 80096ba:	2a47      	cmp	r2, #71	; 0x47
 80096bc:	d1be      	bne.n	800963c <_printf_float+0xfc>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1bc      	bne.n	800963c <_printf_float+0xfc>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e7b9      	b.n	800963a <_printf_float+0xfa>
 80096c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096ca:	d118      	bne.n	80096fe <_printf_float+0x1be>
 80096cc:	2900      	cmp	r1, #0
 80096ce:	6863      	ldr	r3, [r4, #4]
 80096d0:	dd0b      	ble.n	80096ea <_printf_float+0x1aa>
 80096d2:	6121      	str	r1, [r4, #16]
 80096d4:	b913      	cbnz	r3, 80096dc <_printf_float+0x19c>
 80096d6:	6822      	ldr	r2, [r4, #0]
 80096d8:	07d0      	lsls	r0, r2, #31
 80096da:	d502      	bpl.n	80096e2 <_printf_float+0x1a2>
 80096dc:	3301      	adds	r3, #1
 80096de:	440b      	add	r3, r1
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80096e4:	f04f 0900 	mov.w	r9, #0
 80096e8:	e7de      	b.n	80096a8 <_printf_float+0x168>
 80096ea:	b913      	cbnz	r3, 80096f2 <_printf_float+0x1b2>
 80096ec:	6822      	ldr	r2, [r4, #0]
 80096ee:	07d2      	lsls	r2, r2, #31
 80096f0:	d501      	bpl.n	80096f6 <_printf_float+0x1b6>
 80096f2:	3302      	adds	r3, #2
 80096f4:	e7f4      	b.n	80096e0 <_printf_float+0x1a0>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e7f2      	b.n	80096e0 <_printf_float+0x1a0>
 80096fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009700:	4299      	cmp	r1, r3
 8009702:	db05      	blt.n	8009710 <_printf_float+0x1d0>
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	6121      	str	r1, [r4, #16]
 8009708:	07d8      	lsls	r0, r3, #31
 800970a:	d5ea      	bpl.n	80096e2 <_printf_float+0x1a2>
 800970c:	1c4b      	adds	r3, r1, #1
 800970e:	e7e7      	b.n	80096e0 <_printf_float+0x1a0>
 8009710:	2900      	cmp	r1, #0
 8009712:	bfd4      	ite	le
 8009714:	f1c1 0202 	rsble	r2, r1, #2
 8009718:	2201      	movgt	r2, #1
 800971a:	4413      	add	r3, r2
 800971c:	e7e0      	b.n	80096e0 <_printf_float+0x1a0>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	055a      	lsls	r2, r3, #21
 8009722:	d407      	bmi.n	8009734 <_printf_float+0x1f4>
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	4642      	mov	r2, r8
 8009728:	4631      	mov	r1, r6
 800972a:	4628      	mov	r0, r5
 800972c:	47b8      	blx	r7
 800972e:	3001      	adds	r0, #1
 8009730:	d12c      	bne.n	800978c <_printf_float+0x24c>
 8009732:	e764      	b.n	80095fe <_printf_float+0xbe>
 8009734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009738:	f240 80e0 	bls.w	80098fc <_printf_float+0x3bc>
 800973c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009740:	2200      	movs	r2, #0
 8009742:	2300      	movs	r3, #0
 8009744:	f7f7 f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 8009748:	2800      	cmp	r0, #0
 800974a:	d034      	beq.n	80097b6 <_printf_float+0x276>
 800974c:	4a37      	ldr	r2, [pc, #220]	; (800982c <_printf_float+0x2ec>)
 800974e:	2301      	movs	r3, #1
 8009750:	4631      	mov	r1, r6
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	f43f af51 	beq.w	80095fe <_printf_float+0xbe>
 800975c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009760:	429a      	cmp	r2, r3
 8009762:	db02      	blt.n	800976a <_printf_float+0x22a>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	07d8      	lsls	r0, r3, #31
 8009768:	d510      	bpl.n	800978c <_printf_float+0x24c>
 800976a:	ee18 3a10 	vmov	r3, s16
 800976e:	4652      	mov	r2, sl
 8009770:	4631      	mov	r1, r6
 8009772:	4628      	mov	r0, r5
 8009774:	47b8      	blx	r7
 8009776:	3001      	adds	r0, #1
 8009778:	f43f af41 	beq.w	80095fe <_printf_float+0xbe>
 800977c:	f04f 0800 	mov.w	r8, #0
 8009780:	f104 091a 	add.w	r9, r4, #26
 8009784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009786:	3b01      	subs	r3, #1
 8009788:	4543      	cmp	r3, r8
 800978a:	dc09      	bgt.n	80097a0 <_printf_float+0x260>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	079b      	lsls	r3, r3, #30
 8009790:	f100 8107 	bmi.w	80099a2 <_printf_float+0x462>
 8009794:	68e0      	ldr	r0, [r4, #12]
 8009796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009798:	4298      	cmp	r0, r3
 800979a:	bfb8      	it	lt
 800979c:	4618      	movlt	r0, r3
 800979e:	e730      	b.n	8009602 <_printf_float+0xc2>
 80097a0:	2301      	movs	r3, #1
 80097a2:	464a      	mov	r2, r9
 80097a4:	4631      	mov	r1, r6
 80097a6:	4628      	mov	r0, r5
 80097a8:	47b8      	blx	r7
 80097aa:	3001      	adds	r0, #1
 80097ac:	f43f af27 	beq.w	80095fe <_printf_float+0xbe>
 80097b0:	f108 0801 	add.w	r8, r8, #1
 80097b4:	e7e6      	b.n	8009784 <_printf_float+0x244>
 80097b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dc39      	bgt.n	8009830 <_printf_float+0x2f0>
 80097bc:	4a1b      	ldr	r2, [pc, #108]	; (800982c <_printf_float+0x2ec>)
 80097be:	2301      	movs	r3, #1
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b8      	blx	r7
 80097c6:	3001      	adds	r0, #1
 80097c8:	f43f af19 	beq.w	80095fe <_printf_float+0xbe>
 80097cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80097d0:	4313      	orrs	r3, r2
 80097d2:	d102      	bne.n	80097da <_printf_float+0x29a>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	07d9      	lsls	r1, r3, #31
 80097d8:	d5d8      	bpl.n	800978c <_printf_float+0x24c>
 80097da:	ee18 3a10 	vmov	r3, s16
 80097de:	4652      	mov	r2, sl
 80097e0:	4631      	mov	r1, r6
 80097e2:	4628      	mov	r0, r5
 80097e4:	47b8      	blx	r7
 80097e6:	3001      	adds	r0, #1
 80097e8:	f43f af09 	beq.w	80095fe <_printf_float+0xbe>
 80097ec:	f04f 0900 	mov.w	r9, #0
 80097f0:	f104 0a1a 	add.w	sl, r4, #26
 80097f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f6:	425b      	negs	r3, r3
 80097f8:	454b      	cmp	r3, r9
 80097fa:	dc01      	bgt.n	8009800 <_printf_float+0x2c0>
 80097fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fe:	e792      	b.n	8009726 <_printf_float+0x1e6>
 8009800:	2301      	movs	r3, #1
 8009802:	4652      	mov	r2, sl
 8009804:	4631      	mov	r1, r6
 8009806:	4628      	mov	r0, r5
 8009808:	47b8      	blx	r7
 800980a:	3001      	adds	r0, #1
 800980c:	f43f aef7 	beq.w	80095fe <_printf_float+0xbe>
 8009810:	f109 0901 	add.w	r9, r9, #1
 8009814:	e7ee      	b.n	80097f4 <_printf_float+0x2b4>
 8009816:	bf00      	nop
 8009818:	7fefffff 	.word	0x7fefffff
 800981c:	0800d588 	.word	0x0800d588
 8009820:	0800d58c 	.word	0x0800d58c
 8009824:	0800d590 	.word	0x0800d590
 8009828:	0800d594 	.word	0x0800d594
 800982c:	0800d598 	.word	0x0800d598
 8009830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009834:	429a      	cmp	r2, r3
 8009836:	bfa8      	it	ge
 8009838:	461a      	movge	r2, r3
 800983a:	2a00      	cmp	r2, #0
 800983c:	4691      	mov	r9, r2
 800983e:	dc37      	bgt.n	80098b0 <_printf_float+0x370>
 8009840:	f04f 0b00 	mov.w	fp, #0
 8009844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009848:	f104 021a 	add.w	r2, r4, #26
 800984c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800984e:	9305      	str	r3, [sp, #20]
 8009850:	eba3 0309 	sub.w	r3, r3, r9
 8009854:	455b      	cmp	r3, fp
 8009856:	dc33      	bgt.n	80098c0 <_printf_float+0x380>
 8009858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800985c:	429a      	cmp	r2, r3
 800985e:	db3b      	blt.n	80098d8 <_printf_float+0x398>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	07da      	lsls	r2, r3, #31
 8009864:	d438      	bmi.n	80098d8 <_printf_float+0x398>
 8009866:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800986a:	eba2 0903 	sub.w	r9, r2, r3
 800986e:	9b05      	ldr	r3, [sp, #20]
 8009870:	1ad2      	subs	r2, r2, r3
 8009872:	4591      	cmp	r9, r2
 8009874:	bfa8      	it	ge
 8009876:	4691      	movge	r9, r2
 8009878:	f1b9 0f00 	cmp.w	r9, #0
 800987c:	dc35      	bgt.n	80098ea <_printf_float+0x3aa>
 800987e:	f04f 0800 	mov.w	r8, #0
 8009882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009886:	f104 0a1a 	add.w	sl, r4, #26
 800988a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800988e:	1a9b      	subs	r3, r3, r2
 8009890:	eba3 0309 	sub.w	r3, r3, r9
 8009894:	4543      	cmp	r3, r8
 8009896:	f77f af79 	ble.w	800978c <_printf_float+0x24c>
 800989a:	2301      	movs	r3, #1
 800989c:	4652      	mov	r2, sl
 800989e:	4631      	mov	r1, r6
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b8      	blx	r7
 80098a4:	3001      	adds	r0, #1
 80098a6:	f43f aeaa 	beq.w	80095fe <_printf_float+0xbe>
 80098aa:	f108 0801 	add.w	r8, r8, #1
 80098ae:	e7ec      	b.n	800988a <_printf_float+0x34a>
 80098b0:	4613      	mov	r3, r2
 80098b2:	4631      	mov	r1, r6
 80098b4:	4642      	mov	r2, r8
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	d1c0      	bne.n	8009840 <_printf_float+0x300>
 80098be:	e69e      	b.n	80095fe <_printf_float+0xbe>
 80098c0:	2301      	movs	r3, #1
 80098c2:	4631      	mov	r1, r6
 80098c4:	4628      	mov	r0, r5
 80098c6:	9205      	str	r2, [sp, #20]
 80098c8:	47b8      	blx	r7
 80098ca:	3001      	adds	r0, #1
 80098cc:	f43f ae97 	beq.w	80095fe <_printf_float+0xbe>
 80098d0:	9a05      	ldr	r2, [sp, #20]
 80098d2:	f10b 0b01 	add.w	fp, fp, #1
 80098d6:	e7b9      	b.n	800984c <_printf_float+0x30c>
 80098d8:	ee18 3a10 	vmov	r3, s16
 80098dc:	4652      	mov	r2, sl
 80098de:	4631      	mov	r1, r6
 80098e0:	4628      	mov	r0, r5
 80098e2:	47b8      	blx	r7
 80098e4:	3001      	adds	r0, #1
 80098e6:	d1be      	bne.n	8009866 <_printf_float+0x326>
 80098e8:	e689      	b.n	80095fe <_printf_float+0xbe>
 80098ea:	9a05      	ldr	r2, [sp, #20]
 80098ec:	464b      	mov	r3, r9
 80098ee:	4442      	add	r2, r8
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	d1c1      	bne.n	800987e <_printf_float+0x33e>
 80098fa:	e680      	b.n	80095fe <_printf_float+0xbe>
 80098fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098fe:	2a01      	cmp	r2, #1
 8009900:	dc01      	bgt.n	8009906 <_printf_float+0x3c6>
 8009902:	07db      	lsls	r3, r3, #31
 8009904:	d53a      	bpl.n	800997c <_printf_float+0x43c>
 8009906:	2301      	movs	r3, #1
 8009908:	4642      	mov	r2, r8
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	47b8      	blx	r7
 8009910:	3001      	adds	r0, #1
 8009912:	f43f ae74 	beq.w	80095fe <_printf_float+0xbe>
 8009916:	ee18 3a10 	vmov	r3, s16
 800991a:	4652      	mov	r2, sl
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	f43f ae6b 	beq.w	80095fe <_printf_float+0xbe>
 8009928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800992c:	2200      	movs	r2, #0
 800992e:	2300      	movs	r3, #0
 8009930:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009934:	f7f7 f8f0 	bl	8000b18 <__aeabi_dcmpeq>
 8009938:	b9d8      	cbnz	r0, 8009972 <_printf_float+0x432>
 800993a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800993e:	f108 0201 	add.w	r2, r8, #1
 8009942:	4631      	mov	r1, r6
 8009944:	4628      	mov	r0, r5
 8009946:	47b8      	blx	r7
 8009948:	3001      	adds	r0, #1
 800994a:	d10e      	bne.n	800996a <_printf_float+0x42a>
 800994c:	e657      	b.n	80095fe <_printf_float+0xbe>
 800994e:	2301      	movs	r3, #1
 8009950:	4652      	mov	r2, sl
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	f43f ae50 	beq.w	80095fe <_printf_float+0xbe>
 800995e:	f108 0801 	add.w	r8, r8, #1
 8009962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009964:	3b01      	subs	r3, #1
 8009966:	4543      	cmp	r3, r8
 8009968:	dcf1      	bgt.n	800994e <_printf_float+0x40e>
 800996a:	464b      	mov	r3, r9
 800996c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009970:	e6da      	b.n	8009728 <_printf_float+0x1e8>
 8009972:	f04f 0800 	mov.w	r8, #0
 8009976:	f104 0a1a 	add.w	sl, r4, #26
 800997a:	e7f2      	b.n	8009962 <_printf_float+0x422>
 800997c:	2301      	movs	r3, #1
 800997e:	4642      	mov	r2, r8
 8009980:	e7df      	b.n	8009942 <_printf_float+0x402>
 8009982:	2301      	movs	r3, #1
 8009984:	464a      	mov	r2, r9
 8009986:	4631      	mov	r1, r6
 8009988:	4628      	mov	r0, r5
 800998a:	47b8      	blx	r7
 800998c:	3001      	adds	r0, #1
 800998e:	f43f ae36 	beq.w	80095fe <_printf_float+0xbe>
 8009992:	f108 0801 	add.w	r8, r8, #1
 8009996:	68e3      	ldr	r3, [r4, #12]
 8009998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800999a:	1a5b      	subs	r3, r3, r1
 800999c:	4543      	cmp	r3, r8
 800999e:	dcf0      	bgt.n	8009982 <_printf_float+0x442>
 80099a0:	e6f8      	b.n	8009794 <_printf_float+0x254>
 80099a2:	f04f 0800 	mov.w	r8, #0
 80099a6:	f104 0919 	add.w	r9, r4, #25
 80099aa:	e7f4      	b.n	8009996 <_printf_float+0x456>

080099ac <_printf_common>:
 80099ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	4616      	mov	r6, r2
 80099b2:	4699      	mov	r9, r3
 80099b4:	688a      	ldr	r2, [r1, #8]
 80099b6:	690b      	ldr	r3, [r1, #16]
 80099b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099bc:	4293      	cmp	r3, r2
 80099be:	bfb8      	it	lt
 80099c0:	4613      	movlt	r3, r2
 80099c2:	6033      	str	r3, [r6, #0]
 80099c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099c8:	4607      	mov	r7, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	b10a      	cbz	r2, 80099d2 <_printf_common+0x26>
 80099ce:	3301      	adds	r3, #1
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	0699      	lsls	r1, r3, #26
 80099d6:	bf42      	ittt	mi
 80099d8:	6833      	ldrmi	r3, [r6, #0]
 80099da:	3302      	addmi	r3, #2
 80099dc:	6033      	strmi	r3, [r6, #0]
 80099de:	6825      	ldr	r5, [r4, #0]
 80099e0:	f015 0506 	ands.w	r5, r5, #6
 80099e4:	d106      	bne.n	80099f4 <_printf_common+0x48>
 80099e6:	f104 0a19 	add.w	sl, r4, #25
 80099ea:	68e3      	ldr	r3, [r4, #12]
 80099ec:	6832      	ldr	r2, [r6, #0]
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	42ab      	cmp	r3, r5
 80099f2:	dc26      	bgt.n	8009a42 <_printf_common+0x96>
 80099f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099f8:	1e13      	subs	r3, r2, #0
 80099fa:	6822      	ldr	r2, [r4, #0]
 80099fc:	bf18      	it	ne
 80099fe:	2301      	movne	r3, #1
 8009a00:	0692      	lsls	r2, r2, #26
 8009a02:	d42b      	bmi.n	8009a5c <_printf_common+0xb0>
 8009a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	47c0      	blx	r8
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d01e      	beq.n	8009a50 <_printf_common+0xa4>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	6922      	ldr	r2, [r4, #16]
 8009a16:	f003 0306 	and.w	r3, r3, #6
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	bf02      	ittt	eq
 8009a1e:	68e5      	ldreq	r5, [r4, #12]
 8009a20:	6833      	ldreq	r3, [r6, #0]
 8009a22:	1aed      	subeq	r5, r5, r3
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	bf0c      	ite	eq
 8009a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a2c:	2500      	movne	r5, #0
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	bfc4      	itt	gt
 8009a32:	1a9b      	subgt	r3, r3, r2
 8009a34:	18ed      	addgt	r5, r5, r3
 8009a36:	2600      	movs	r6, #0
 8009a38:	341a      	adds	r4, #26
 8009a3a:	42b5      	cmp	r5, r6
 8009a3c:	d11a      	bne.n	8009a74 <_printf_common+0xc8>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	e008      	b.n	8009a54 <_printf_common+0xa8>
 8009a42:	2301      	movs	r3, #1
 8009a44:	4652      	mov	r2, sl
 8009a46:	4649      	mov	r1, r9
 8009a48:	4638      	mov	r0, r7
 8009a4a:	47c0      	blx	r8
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d103      	bne.n	8009a58 <_printf_common+0xac>
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a58:	3501      	adds	r5, #1
 8009a5a:	e7c6      	b.n	80099ea <_printf_common+0x3e>
 8009a5c:	18e1      	adds	r1, r4, r3
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	2030      	movs	r0, #48	; 0x30
 8009a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a66:	4422      	add	r2, r4
 8009a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a70:	3302      	adds	r3, #2
 8009a72:	e7c7      	b.n	8009a04 <_printf_common+0x58>
 8009a74:	2301      	movs	r3, #1
 8009a76:	4622      	mov	r2, r4
 8009a78:	4649      	mov	r1, r9
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	47c0      	blx	r8
 8009a7e:	3001      	adds	r0, #1
 8009a80:	d0e6      	beq.n	8009a50 <_printf_common+0xa4>
 8009a82:	3601      	adds	r6, #1
 8009a84:	e7d9      	b.n	8009a3a <_printf_common+0x8e>
	...

08009a88 <_printf_i>:
 8009a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a8c:	7e0f      	ldrb	r7, [r1, #24]
 8009a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a90:	2f78      	cmp	r7, #120	; 0x78
 8009a92:	4691      	mov	r9, r2
 8009a94:	4680      	mov	r8, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a9e:	d807      	bhi.n	8009ab0 <_printf_i+0x28>
 8009aa0:	2f62      	cmp	r7, #98	; 0x62
 8009aa2:	d80a      	bhi.n	8009aba <_printf_i+0x32>
 8009aa4:	2f00      	cmp	r7, #0
 8009aa6:	f000 80d4 	beq.w	8009c52 <_printf_i+0x1ca>
 8009aaa:	2f58      	cmp	r7, #88	; 0x58
 8009aac:	f000 80c0 	beq.w	8009c30 <_printf_i+0x1a8>
 8009ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ab8:	e03a      	b.n	8009b30 <_printf_i+0xa8>
 8009aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009abe:	2b15      	cmp	r3, #21
 8009ac0:	d8f6      	bhi.n	8009ab0 <_printf_i+0x28>
 8009ac2:	a101      	add	r1, pc, #4	; (adr r1, 8009ac8 <_printf_i+0x40>)
 8009ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ac8:	08009b21 	.word	0x08009b21
 8009acc:	08009b35 	.word	0x08009b35
 8009ad0:	08009ab1 	.word	0x08009ab1
 8009ad4:	08009ab1 	.word	0x08009ab1
 8009ad8:	08009ab1 	.word	0x08009ab1
 8009adc:	08009ab1 	.word	0x08009ab1
 8009ae0:	08009b35 	.word	0x08009b35
 8009ae4:	08009ab1 	.word	0x08009ab1
 8009ae8:	08009ab1 	.word	0x08009ab1
 8009aec:	08009ab1 	.word	0x08009ab1
 8009af0:	08009ab1 	.word	0x08009ab1
 8009af4:	08009c39 	.word	0x08009c39
 8009af8:	08009b61 	.word	0x08009b61
 8009afc:	08009bf3 	.word	0x08009bf3
 8009b00:	08009ab1 	.word	0x08009ab1
 8009b04:	08009ab1 	.word	0x08009ab1
 8009b08:	08009c5b 	.word	0x08009c5b
 8009b0c:	08009ab1 	.word	0x08009ab1
 8009b10:	08009b61 	.word	0x08009b61
 8009b14:	08009ab1 	.word	0x08009ab1
 8009b18:	08009ab1 	.word	0x08009ab1
 8009b1c:	08009bfb 	.word	0x08009bfb
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	1d1a      	adds	r2, r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	602a      	str	r2, [r5, #0]
 8009b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b30:	2301      	movs	r3, #1
 8009b32:	e09f      	b.n	8009c74 <_printf_i+0x1ec>
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	0607      	lsls	r7, r0, #24
 8009b3a:	f103 0104 	add.w	r1, r3, #4
 8009b3e:	6029      	str	r1, [r5, #0]
 8009b40:	d501      	bpl.n	8009b46 <_printf_i+0xbe>
 8009b42:	681e      	ldr	r6, [r3, #0]
 8009b44:	e003      	b.n	8009b4e <_printf_i+0xc6>
 8009b46:	0646      	lsls	r6, r0, #25
 8009b48:	d5fb      	bpl.n	8009b42 <_printf_i+0xba>
 8009b4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b4e:	2e00      	cmp	r6, #0
 8009b50:	da03      	bge.n	8009b5a <_printf_i+0xd2>
 8009b52:	232d      	movs	r3, #45	; 0x2d
 8009b54:	4276      	negs	r6, r6
 8009b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b5a:	485a      	ldr	r0, [pc, #360]	; (8009cc4 <_printf_i+0x23c>)
 8009b5c:	230a      	movs	r3, #10
 8009b5e:	e012      	b.n	8009b86 <_printf_i+0xfe>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	6820      	ldr	r0, [r4, #0]
 8009b64:	1d19      	adds	r1, r3, #4
 8009b66:	6029      	str	r1, [r5, #0]
 8009b68:	0605      	lsls	r5, r0, #24
 8009b6a:	d501      	bpl.n	8009b70 <_printf_i+0xe8>
 8009b6c:	681e      	ldr	r6, [r3, #0]
 8009b6e:	e002      	b.n	8009b76 <_printf_i+0xee>
 8009b70:	0641      	lsls	r1, r0, #25
 8009b72:	d5fb      	bpl.n	8009b6c <_printf_i+0xe4>
 8009b74:	881e      	ldrh	r6, [r3, #0]
 8009b76:	4853      	ldr	r0, [pc, #332]	; (8009cc4 <_printf_i+0x23c>)
 8009b78:	2f6f      	cmp	r7, #111	; 0x6f
 8009b7a:	bf0c      	ite	eq
 8009b7c:	2308      	moveq	r3, #8
 8009b7e:	230a      	movne	r3, #10
 8009b80:	2100      	movs	r1, #0
 8009b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b86:	6865      	ldr	r5, [r4, #4]
 8009b88:	60a5      	str	r5, [r4, #8]
 8009b8a:	2d00      	cmp	r5, #0
 8009b8c:	bfa2      	ittt	ge
 8009b8e:	6821      	ldrge	r1, [r4, #0]
 8009b90:	f021 0104 	bicge.w	r1, r1, #4
 8009b94:	6021      	strge	r1, [r4, #0]
 8009b96:	b90e      	cbnz	r6, 8009b9c <_printf_i+0x114>
 8009b98:	2d00      	cmp	r5, #0
 8009b9a:	d04b      	beq.n	8009c34 <_printf_i+0x1ac>
 8009b9c:	4615      	mov	r5, r2
 8009b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ba6:	5dc7      	ldrb	r7, [r0, r7]
 8009ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bac:	4637      	mov	r7, r6
 8009bae:	42bb      	cmp	r3, r7
 8009bb0:	460e      	mov	r6, r1
 8009bb2:	d9f4      	bls.n	8009b9e <_printf_i+0x116>
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d10b      	bne.n	8009bd0 <_printf_i+0x148>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	07de      	lsls	r6, r3, #31
 8009bbc:	d508      	bpl.n	8009bd0 <_printf_i+0x148>
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	6861      	ldr	r1, [r4, #4]
 8009bc2:	4299      	cmp	r1, r3
 8009bc4:	bfde      	ittt	le
 8009bc6:	2330      	movle	r3, #48	; 0x30
 8009bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bd0:	1b52      	subs	r2, r2, r5
 8009bd2:	6122      	str	r2, [r4, #16]
 8009bd4:	f8cd a000 	str.w	sl, [sp]
 8009bd8:	464b      	mov	r3, r9
 8009bda:	aa03      	add	r2, sp, #12
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4640      	mov	r0, r8
 8009be0:	f7ff fee4 	bl	80099ac <_printf_common>
 8009be4:	3001      	adds	r0, #1
 8009be6:	d14a      	bne.n	8009c7e <_printf_i+0x1f6>
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bec:	b004      	add	sp, #16
 8009bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	f043 0320 	orr.w	r3, r3, #32
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	4833      	ldr	r0, [pc, #204]	; (8009cc8 <_printf_i+0x240>)
 8009bfc:	2778      	movs	r7, #120	; 0x78
 8009bfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	6829      	ldr	r1, [r5, #0]
 8009c06:	061f      	lsls	r7, r3, #24
 8009c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c0c:	d402      	bmi.n	8009c14 <_printf_i+0x18c>
 8009c0e:	065f      	lsls	r7, r3, #25
 8009c10:	bf48      	it	mi
 8009c12:	b2b6      	uxthmi	r6, r6
 8009c14:	07df      	lsls	r7, r3, #31
 8009c16:	bf48      	it	mi
 8009c18:	f043 0320 	orrmi.w	r3, r3, #32
 8009c1c:	6029      	str	r1, [r5, #0]
 8009c1e:	bf48      	it	mi
 8009c20:	6023      	strmi	r3, [r4, #0]
 8009c22:	b91e      	cbnz	r6, 8009c2c <_printf_i+0x1a4>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	f023 0320 	bic.w	r3, r3, #32
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	e7a7      	b.n	8009b80 <_printf_i+0xf8>
 8009c30:	4824      	ldr	r0, [pc, #144]	; (8009cc4 <_printf_i+0x23c>)
 8009c32:	e7e4      	b.n	8009bfe <_printf_i+0x176>
 8009c34:	4615      	mov	r5, r2
 8009c36:	e7bd      	b.n	8009bb4 <_printf_i+0x12c>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	6826      	ldr	r6, [r4, #0]
 8009c3c:	6961      	ldr	r1, [r4, #20]
 8009c3e:	1d18      	adds	r0, r3, #4
 8009c40:	6028      	str	r0, [r5, #0]
 8009c42:	0635      	lsls	r5, r6, #24
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	d501      	bpl.n	8009c4c <_printf_i+0x1c4>
 8009c48:	6019      	str	r1, [r3, #0]
 8009c4a:	e002      	b.n	8009c52 <_printf_i+0x1ca>
 8009c4c:	0670      	lsls	r0, r6, #25
 8009c4e:	d5fb      	bpl.n	8009c48 <_printf_i+0x1c0>
 8009c50:	8019      	strh	r1, [r3, #0]
 8009c52:	2300      	movs	r3, #0
 8009c54:	6123      	str	r3, [r4, #16]
 8009c56:	4615      	mov	r5, r2
 8009c58:	e7bc      	b.n	8009bd4 <_printf_i+0x14c>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	1d1a      	adds	r2, r3, #4
 8009c5e:	602a      	str	r2, [r5, #0]
 8009c60:	681d      	ldr	r5, [r3, #0]
 8009c62:	6862      	ldr	r2, [r4, #4]
 8009c64:	2100      	movs	r1, #0
 8009c66:	4628      	mov	r0, r5
 8009c68:	f7f6 fada 	bl	8000220 <memchr>
 8009c6c:	b108      	cbz	r0, 8009c72 <_printf_i+0x1ea>
 8009c6e:	1b40      	subs	r0, r0, r5
 8009c70:	6060      	str	r0, [r4, #4]
 8009c72:	6863      	ldr	r3, [r4, #4]
 8009c74:	6123      	str	r3, [r4, #16]
 8009c76:	2300      	movs	r3, #0
 8009c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c7c:	e7aa      	b.n	8009bd4 <_printf_i+0x14c>
 8009c7e:	6923      	ldr	r3, [r4, #16]
 8009c80:	462a      	mov	r2, r5
 8009c82:	4649      	mov	r1, r9
 8009c84:	4640      	mov	r0, r8
 8009c86:	47d0      	blx	sl
 8009c88:	3001      	adds	r0, #1
 8009c8a:	d0ad      	beq.n	8009be8 <_printf_i+0x160>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	079b      	lsls	r3, r3, #30
 8009c90:	d413      	bmi.n	8009cba <_printf_i+0x232>
 8009c92:	68e0      	ldr	r0, [r4, #12]
 8009c94:	9b03      	ldr	r3, [sp, #12]
 8009c96:	4298      	cmp	r0, r3
 8009c98:	bfb8      	it	lt
 8009c9a:	4618      	movlt	r0, r3
 8009c9c:	e7a6      	b.n	8009bec <_printf_i+0x164>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	47d0      	blx	sl
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d09d      	beq.n	8009be8 <_printf_i+0x160>
 8009cac:	3501      	adds	r5, #1
 8009cae:	68e3      	ldr	r3, [r4, #12]
 8009cb0:	9903      	ldr	r1, [sp, #12]
 8009cb2:	1a5b      	subs	r3, r3, r1
 8009cb4:	42ab      	cmp	r3, r5
 8009cb6:	dcf2      	bgt.n	8009c9e <_printf_i+0x216>
 8009cb8:	e7eb      	b.n	8009c92 <_printf_i+0x20a>
 8009cba:	2500      	movs	r5, #0
 8009cbc:	f104 0619 	add.w	r6, r4, #25
 8009cc0:	e7f5      	b.n	8009cae <_printf_i+0x226>
 8009cc2:	bf00      	nop
 8009cc4:	0800d59a 	.word	0x0800d59a
 8009cc8:	0800d5ab 	.word	0x0800d5ab

08009ccc <std>:
 8009ccc:	2300      	movs	r3, #0
 8009cce:	b510      	push	{r4, lr}
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8009cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cda:	6083      	str	r3, [r0, #8]
 8009cdc:	8181      	strh	r1, [r0, #12]
 8009cde:	6643      	str	r3, [r0, #100]	; 0x64
 8009ce0:	81c2      	strh	r2, [r0, #14]
 8009ce2:	6183      	str	r3, [r0, #24]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	2208      	movs	r2, #8
 8009ce8:	305c      	adds	r0, #92	; 0x5c
 8009cea:	f000 fabb 	bl	800a264 <memset>
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <std+0x38>)
 8009cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8009cf2:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <std+0x3c>)
 8009cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cf6:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <std+0x40>)
 8009cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cfa:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <std+0x44>)
 8009cfc:	6224      	str	r4, [r4, #32]
 8009cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8009d00:	bd10      	pop	{r4, pc}
 8009d02:	bf00      	nop
 8009d04:	0800a0b5 	.word	0x0800a0b5
 8009d08:	0800a0d7 	.word	0x0800a0d7
 8009d0c:	0800a10f 	.word	0x0800a10f
 8009d10:	0800a133 	.word	0x0800a133

08009d14 <stdio_exit_handler>:
 8009d14:	4a02      	ldr	r2, [pc, #8]	; (8009d20 <stdio_exit_handler+0xc>)
 8009d16:	4903      	ldr	r1, [pc, #12]	; (8009d24 <stdio_exit_handler+0x10>)
 8009d18:	4803      	ldr	r0, [pc, #12]	; (8009d28 <stdio_exit_handler+0x14>)
 8009d1a:	f000 b869 	b.w	8009df0 <_fwalk_sglue>
 8009d1e:	bf00      	nop
 8009d20:	20000010 	.word	0x20000010
 8009d24:	0800bf91 	.word	0x0800bf91
 8009d28:	2000001c 	.word	0x2000001c

08009d2c <cleanup_stdio>:
 8009d2c:	6841      	ldr	r1, [r0, #4]
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <cleanup_stdio+0x34>)
 8009d30:	4299      	cmp	r1, r3
 8009d32:	b510      	push	{r4, lr}
 8009d34:	4604      	mov	r4, r0
 8009d36:	d001      	beq.n	8009d3c <cleanup_stdio+0x10>
 8009d38:	f002 f92a 	bl	800bf90 <_fflush_r>
 8009d3c:	68a1      	ldr	r1, [r4, #8]
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <cleanup_stdio+0x38>)
 8009d40:	4299      	cmp	r1, r3
 8009d42:	d002      	beq.n	8009d4a <cleanup_stdio+0x1e>
 8009d44:	4620      	mov	r0, r4
 8009d46:	f002 f923 	bl	800bf90 <_fflush_r>
 8009d4a:	68e1      	ldr	r1, [r4, #12]
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <cleanup_stdio+0x3c>)
 8009d4e:	4299      	cmp	r1, r3
 8009d50:	d004      	beq.n	8009d5c <cleanup_stdio+0x30>
 8009d52:	4620      	mov	r0, r4
 8009d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d58:	f002 b91a 	b.w	800bf90 <_fflush_r>
 8009d5c:	bd10      	pop	{r4, pc}
 8009d5e:	bf00      	nop
 8009d60:	2000168c 	.word	0x2000168c
 8009d64:	200016f4 	.word	0x200016f4
 8009d68:	2000175c 	.word	0x2000175c

08009d6c <global_stdio_init.part.0>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <global_stdio_init.part.0+0x30>)
 8009d70:	4c0b      	ldr	r4, [pc, #44]	; (8009da0 <global_stdio_init.part.0+0x34>)
 8009d72:	4a0c      	ldr	r2, [pc, #48]	; (8009da4 <global_stdio_init.part.0+0x38>)
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	4620      	mov	r0, r4
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2104      	movs	r1, #4
 8009d7c:	f7ff ffa6 	bl	8009ccc <std>
 8009d80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d84:	2201      	movs	r2, #1
 8009d86:	2109      	movs	r1, #9
 8009d88:	f7ff ffa0 	bl	8009ccc <std>
 8009d8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d90:	2202      	movs	r2, #2
 8009d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d96:	2112      	movs	r1, #18
 8009d98:	f7ff bf98 	b.w	8009ccc <std>
 8009d9c:	200017c4 	.word	0x200017c4
 8009da0:	2000168c 	.word	0x2000168c
 8009da4:	08009d15 	.word	0x08009d15

08009da8 <__sfp_lock_acquire>:
 8009da8:	4801      	ldr	r0, [pc, #4]	; (8009db0 <__sfp_lock_acquire+0x8>)
 8009daa:	f000 bad7 	b.w	800a35c <__retarget_lock_acquire_recursive>
 8009dae:	bf00      	nop
 8009db0:	200017cd 	.word	0x200017cd

08009db4 <__sfp_lock_release>:
 8009db4:	4801      	ldr	r0, [pc, #4]	; (8009dbc <__sfp_lock_release+0x8>)
 8009db6:	f000 bad2 	b.w	800a35e <__retarget_lock_release_recursive>
 8009dba:	bf00      	nop
 8009dbc:	200017cd 	.word	0x200017cd

08009dc0 <__sinit>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	f7ff fff0 	bl	8009da8 <__sfp_lock_acquire>
 8009dc8:	6a23      	ldr	r3, [r4, #32]
 8009dca:	b11b      	cbz	r3, 8009dd4 <__sinit+0x14>
 8009dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dd0:	f7ff bff0 	b.w	8009db4 <__sfp_lock_release>
 8009dd4:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <__sinit+0x28>)
 8009dd6:	6223      	str	r3, [r4, #32]
 8009dd8:	4b04      	ldr	r3, [pc, #16]	; (8009dec <__sinit+0x2c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f5      	bne.n	8009dcc <__sinit+0xc>
 8009de0:	f7ff ffc4 	bl	8009d6c <global_stdio_init.part.0>
 8009de4:	e7f2      	b.n	8009dcc <__sinit+0xc>
 8009de6:	bf00      	nop
 8009de8:	08009d2d 	.word	0x08009d2d
 8009dec:	200017c4 	.word	0x200017c4

08009df0 <_fwalk_sglue>:
 8009df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df4:	4607      	mov	r7, r0
 8009df6:	4688      	mov	r8, r1
 8009df8:	4614      	mov	r4, r2
 8009dfa:	2600      	movs	r6, #0
 8009dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e00:	f1b9 0901 	subs.w	r9, r9, #1
 8009e04:	d505      	bpl.n	8009e12 <_fwalk_sglue+0x22>
 8009e06:	6824      	ldr	r4, [r4, #0]
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	d1f7      	bne.n	8009dfc <_fwalk_sglue+0xc>
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e12:	89ab      	ldrh	r3, [r5, #12]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d907      	bls.n	8009e28 <_fwalk_sglue+0x38>
 8009e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	d003      	beq.n	8009e28 <_fwalk_sglue+0x38>
 8009e20:	4629      	mov	r1, r5
 8009e22:	4638      	mov	r0, r7
 8009e24:	47c0      	blx	r8
 8009e26:	4306      	orrs	r6, r0
 8009e28:	3568      	adds	r5, #104	; 0x68
 8009e2a:	e7e9      	b.n	8009e00 <_fwalk_sglue+0x10>

08009e2c <iprintf>:
 8009e2c:	b40f      	push	{r0, r1, r2, r3}
 8009e2e:	b507      	push	{r0, r1, r2, lr}
 8009e30:	4906      	ldr	r1, [pc, #24]	; (8009e4c <iprintf+0x20>)
 8009e32:	ab04      	add	r3, sp, #16
 8009e34:	6808      	ldr	r0, [r1, #0]
 8009e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3a:	6881      	ldr	r1, [r0, #8]
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	f001 ff07 	bl	800bc50 <_vfiprintf_r>
 8009e42:	b003      	add	sp, #12
 8009e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e48:	b004      	add	sp, #16
 8009e4a:	4770      	bx	lr
 8009e4c:	20000068 	.word	0x20000068

08009e50 <_puts_r>:
 8009e50:	6a03      	ldr	r3, [r0, #32]
 8009e52:	b570      	push	{r4, r5, r6, lr}
 8009e54:	6884      	ldr	r4, [r0, #8]
 8009e56:	4605      	mov	r5, r0
 8009e58:	460e      	mov	r6, r1
 8009e5a:	b90b      	cbnz	r3, 8009e60 <_puts_r+0x10>
 8009e5c:	f7ff ffb0 	bl	8009dc0 <__sinit>
 8009e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e62:	07db      	lsls	r3, r3, #31
 8009e64:	d405      	bmi.n	8009e72 <_puts_r+0x22>
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	0598      	lsls	r0, r3, #22
 8009e6a:	d402      	bmi.n	8009e72 <_puts_r+0x22>
 8009e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e6e:	f000 fa75 	bl	800a35c <__retarget_lock_acquire_recursive>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	0719      	lsls	r1, r3, #28
 8009e76:	d513      	bpl.n	8009ea0 <_puts_r+0x50>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	b18b      	cbz	r3, 8009ea0 <_puts_r+0x50>
 8009e7c:	3e01      	subs	r6, #1
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e84:	3b01      	subs	r3, #1
 8009e86:	60a3      	str	r3, [r4, #8]
 8009e88:	b9e9      	cbnz	r1, 8009ec6 <_puts_r+0x76>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	da2e      	bge.n	8009eec <_puts_r+0x9c>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	210a      	movs	r1, #10
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f951 	bl	800a13a <__swbuf_r>
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d007      	beq.n	8009eac <_puts_r+0x5c>
 8009e9c:	250a      	movs	r5, #10
 8009e9e:	e007      	b.n	8009eb0 <_puts_r+0x60>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f986 	bl	800a1b4 <__swsetup_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d0e7      	beq.n	8009e7c <_puts_r+0x2c>
 8009eac:	f04f 35ff 	mov.w	r5, #4294967295
 8009eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eb2:	07da      	lsls	r2, r3, #31
 8009eb4:	d405      	bmi.n	8009ec2 <_puts_r+0x72>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	059b      	lsls	r3, r3, #22
 8009eba:	d402      	bmi.n	8009ec2 <_puts_r+0x72>
 8009ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ebe:	f000 fa4e 	bl	800a35e <__retarget_lock_release_recursive>
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	da04      	bge.n	8009ed4 <_puts_r+0x84>
 8009eca:	69a2      	ldr	r2, [r4, #24]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	dc06      	bgt.n	8009ede <_puts_r+0x8e>
 8009ed0:	290a      	cmp	r1, #10
 8009ed2:	d004      	beq.n	8009ede <_puts_r+0x8e>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	7019      	strb	r1, [r3, #0]
 8009edc:	e7cf      	b.n	8009e7e <_puts_r+0x2e>
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f000 f92a 	bl	800a13a <__swbuf_r>
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d1c9      	bne.n	8009e7e <_puts_r+0x2e>
 8009eea:	e7df      	b.n	8009eac <_puts_r+0x5c>
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	250a      	movs	r5, #10
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	6022      	str	r2, [r4, #0]
 8009ef4:	701d      	strb	r5, [r3, #0]
 8009ef6:	e7db      	b.n	8009eb0 <_puts_r+0x60>

08009ef8 <puts>:
 8009ef8:	4b02      	ldr	r3, [pc, #8]	; (8009f04 <puts+0xc>)
 8009efa:	4601      	mov	r1, r0
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	f7ff bfa7 	b.w	8009e50 <_puts_r>
 8009f02:	bf00      	nop
 8009f04:	20000068 	.word	0x20000068

08009f08 <setbuf>:
 8009f08:	fab1 f281 	clz	r2, r1
 8009f0c:	0952      	lsrs	r2, r2, #5
 8009f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f12:	0052      	lsls	r2, r2, #1
 8009f14:	f000 b800 	b.w	8009f18 <setvbuf>

08009f18 <setvbuf>:
 8009f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f1c:	461d      	mov	r5, r3
 8009f1e:	4b54      	ldr	r3, [pc, #336]	; (800a070 <setvbuf+0x158>)
 8009f20:	681f      	ldr	r7, [r3, #0]
 8009f22:	4604      	mov	r4, r0
 8009f24:	460e      	mov	r6, r1
 8009f26:	4690      	mov	r8, r2
 8009f28:	b127      	cbz	r7, 8009f34 <setvbuf+0x1c>
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	b913      	cbnz	r3, 8009f34 <setvbuf+0x1c>
 8009f2e:	4638      	mov	r0, r7
 8009f30:	f7ff ff46 	bl	8009dc0 <__sinit>
 8009f34:	f1b8 0f02 	cmp.w	r8, #2
 8009f38:	d006      	beq.n	8009f48 <setvbuf+0x30>
 8009f3a:	f1b8 0f01 	cmp.w	r8, #1
 8009f3e:	f200 8094 	bhi.w	800a06a <setvbuf+0x152>
 8009f42:	2d00      	cmp	r5, #0
 8009f44:	f2c0 8091 	blt.w	800a06a <setvbuf+0x152>
 8009f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f4a:	07da      	lsls	r2, r3, #31
 8009f4c:	d405      	bmi.n	8009f5a <setvbuf+0x42>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	059b      	lsls	r3, r3, #22
 8009f52:	d402      	bmi.n	8009f5a <setvbuf+0x42>
 8009f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f56:	f000 fa01 	bl	800a35c <__retarget_lock_acquire_recursive>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f002 f817 	bl	800bf90 <_fflush_r>
 8009f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f64:	b141      	cbz	r1, 8009f78 <setvbuf+0x60>
 8009f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f6a:	4299      	cmp	r1, r3
 8009f6c:	d002      	beq.n	8009f74 <setvbuf+0x5c>
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f001 f870 	bl	800b054 <_free_r>
 8009f74:	2300      	movs	r3, #0
 8009f76:	6363      	str	r3, [r4, #52]	; 0x34
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61a3      	str	r3, [r4, #24]
 8009f7c:	6063      	str	r3, [r4, #4]
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	0618      	lsls	r0, r3, #24
 8009f82:	d503      	bpl.n	8009f8c <setvbuf+0x74>
 8009f84:	6921      	ldr	r1, [r4, #16]
 8009f86:	4638      	mov	r0, r7
 8009f88:	f001 f864 	bl	800b054 <_free_r>
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	f1b8 0f02 	cmp.w	r8, #2
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	d05f      	beq.n	800a05e <setvbuf+0x146>
 8009f9e:	ab01      	add	r3, sp, #4
 8009fa0:	466a      	mov	r2, sp
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	4638      	mov	r0, r7
 8009fa6:	f002 f81b 	bl	800bfe0 <__swhatbuf_r>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	4318      	orrs	r0, r3
 8009fae:	81a0      	strh	r0, [r4, #12]
 8009fb0:	bb2d      	cbnz	r5, 8009ffe <setvbuf+0xe6>
 8009fb2:	9d00      	ldr	r5, [sp, #0]
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f001 f899 	bl	800b0ec <malloc>
 8009fba:	4606      	mov	r6, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d150      	bne.n	800a062 <setvbuf+0x14a>
 8009fc0:	f8dd 9000 	ldr.w	r9, [sp]
 8009fc4:	45a9      	cmp	r9, r5
 8009fc6:	d13e      	bne.n	800a046 <setvbuf+0x12e>
 8009fc8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fcc:	2200      	movs	r2, #0
 8009fce:	60a2      	str	r2, [r4, #8]
 8009fd0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009fd4:	6022      	str	r2, [r4, #0]
 8009fd6:	6122      	str	r2, [r4, #16]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fde:	6162      	str	r2, [r4, #20]
 8009fe0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fe2:	f043 0302 	orr.w	r3, r3, #2
 8009fe6:	07d1      	lsls	r1, r2, #31
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	d404      	bmi.n	8009ff6 <setvbuf+0xde>
 8009fec:	059b      	lsls	r3, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <setvbuf+0xde>
 8009ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff2:	f000 f9b4 	bl	800a35e <__retarget_lock_release_recursive>
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	b003      	add	sp, #12
 8009ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d0d8      	beq.n	8009fb4 <setvbuf+0x9c>
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	b913      	cbnz	r3, 800a00c <setvbuf+0xf4>
 800a006:	4638      	mov	r0, r7
 800a008:	f7ff feda 	bl	8009dc0 <__sinit>
 800a00c:	f1b8 0f01 	cmp.w	r8, #1
 800a010:	bf08      	it	eq
 800a012:	89a3      	ldrheq	r3, [r4, #12]
 800a014:	6026      	str	r6, [r4, #0]
 800a016:	bf04      	itt	eq
 800a018:	f043 0301 	orreq.w	r3, r3, #1
 800a01c:	81a3      	strheq	r3, [r4, #12]
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f013 0208 	ands.w	r2, r3, #8
 800a024:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a028:	d01d      	beq.n	800a066 <setvbuf+0x14e>
 800a02a:	07da      	lsls	r2, r3, #31
 800a02c:	bf41      	itttt	mi
 800a02e:	2200      	movmi	r2, #0
 800a030:	426d      	negmi	r5, r5
 800a032:	60a2      	strmi	r2, [r4, #8]
 800a034:	61a5      	strmi	r5, [r4, #24]
 800a036:	bf58      	it	pl
 800a038:	60a5      	strpl	r5, [r4, #8]
 800a03a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a03c:	f015 0501 	ands.w	r5, r5, #1
 800a040:	d0d4      	beq.n	8009fec <setvbuf+0xd4>
 800a042:	2500      	movs	r5, #0
 800a044:	e7d7      	b.n	8009ff6 <setvbuf+0xde>
 800a046:	4648      	mov	r0, r9
 800a048:	f001 f850 	bl	800b0ec <malloc>
 800a04c:	4606      	mov	r6, r0
 800a04e:	2800      	cmp	r0, #0
 800a050:	d0ba      	beq.n	8009fc8 <setvbuf+0xb0>
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	464d      	mov	r5, r9
 800a05c:	e7d1      	b.n	800a002 <setvbuf+0xea>
 800a05e:	2500      	movs	r5, #0
 800a060:	e7b4      	b.n	8009fcc <setvbuf+0xb4>
 800a062:	46a9      	mov	r9, r5
 800a064:	e7f5      	b.n	800a052 <setvbuf+0x13a>
 800a066:	60a2      	str	r2, [r4, #8]
 800a068:	e7e7      	b.n	800a03a <setvbuf+0x122>
 800a06a:	f04f 35ff 	mov.w	r5, #4294967295
 800a06e:	e7c2      	b.n	8009ff6 <setvbuf+0xde>
 800a070:	20000068 	.word	0x20000068

0800a074 <siprintf>:
 800a074:	b40e      	push	{r1, r2, r3}
 800a076:	b500      	push	{lr}
 800a078:	b09c      	sub	sp, #112	; 0x70
 800a07a:	ab1d      	add	r3, sp, #116	; 0x74
 800a07c:	9002      	str	r0, [sp, #8]
 800a07e:	9006      	str	r0, [sp, #24]
 800a080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a084:	4809      	ldr	r0, [pc, #36]	; (800a0ac <siprintf+0x38>)
 800a086:	9107      	str	r1, [sp, #28]
 800a088:	9104      	str	r1, [sp, #16]
 800a08a:	4909      	ldr	r1, [pc, #36]	; (800a0b0 <siprintf+0x3c>)
 800a08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a090:	9105      	str	r1, [sp, #20]
 800a092:	6800      	ldr	r0, [r0, #0]
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	a902      	add	r1, sp, #8
 800a098:	f001 fcb2 	bl	800ba00 <_svfiprintf_r>
 800a09c:	9b02      	ldr	r3, [sp, #8]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	b01c      	add	sp, #112	; 0x70
 800a0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0a8:	b003      	add	sp, #12
 800a0aa:	4770      	bx	lr
 800a0ac:	20000068 	.word	0x20000068
 800a0b0:	ffff0208 	.word	0xffff0208

0800a0b4 <__sread>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0bc:	f000 f900 	bl	800a2c0 <_read_r>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	bfab      	itete	ge
 800a0c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0c8:	181b      	addge	r3, r3, r0
 800a0ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0ce:	bfac      	ite	ge
 800a0d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0d2:	81a3      	strhlt	r3, [r4, #12]
 800a0d4:	bd10      	pop	{r4, pc}

0800a0d6 <__swrite>:
 800a0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0da:	461f      	mov	r7, r3
 800a0dc:	898b      	ldrh	r3, [r1, #12]
 800a0de:	05db      	lsls	r3, r3, #23
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	4616      	mov	r6, r2
 800a0e6:	d505      	bpl.n	800a0f4 <__swrite+0x1e>
 800a0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f000 f8d4 	bl	800a29c <_lseek_r>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	4632      	mov	r2, r6
 800a102:	463b      	mov	r3, r7
 800a104:	4628      	mov	r0, r5
 800a106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a10a:	f000 b8eb 	b.w	800a2e4 <_write_r>

0800a10e <__sseek>:
 800a10e:	b510      	push	{r4, lr}
 800a110:	460c      	mov	r4, r1
 800a112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a116:	f000 f8c1 	bl	800a29c <_lseek_r>
 800a11a:	1c43      	adds	r3, r0, #1
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	bf15      	itete	ne
 800a120:	6560      	strne	r0, [r4, #84]	; 0x54
 800a122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a12a:	81a3      	strheq	r3, [r4, #12]
 800a12c:	bf18      	it	ne
 800a12e:	81a3      	strhne	r3, [r4, #12]
 800a130:	bd10      	pop	{r4, pc}

0800a132 <__sclose>:
 800a132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a136:	f000 b8a1 	b.w	800a27c <_close_r>

0800a13a <__swbuf_r>:
 800a13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13c:	460e      	mov	r6, r1
 800a13e:	4614      	mov	r4, r2
 800a140:	4605      	mov	r5, r0
 800a142:	b118      	cbz	r0, 800a14c <__swbuf_r+0x12>
 800a144:	6a03      	ldr	r3, [r0, #32]
 800a146:	b90b      	cbnz	r3, 800a14c <__swbuf_r+0x12>
 800a148:	f7ff fe3a 	bl	8009dc0 <__sinit>
 800a14c:	69a3      	ldr	r3, [r4, #24]
 800a14e:	60a3      	str	r3, [r4, #8]
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	071a      	lsls	r2, r3, #28
 800a154:	d525      	bpl.n	800a1a2 <__swbuf_r+0x68>
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	b31b      	cbz	r3, 800a1a2 <__swbuf_r+0x68>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	6922      	ldr	r2, [r4, #16]
 800a15e:	1a98      	subs	r0, r3, r2
 800a160:	6963      	ldr	r3, [r4, #20]
 800a162:	b2f6      	uxtb	r6, r6
 800a164:	4283      	cmp	r3, r0
 800a166:	4637      	mov	r7, r6
 800a168:	dc04      	bgt.n	800a174 <__swbuf_r+0x3a>
 800a16a:	4621      	mov	r1, r4
 800a16c:	4628      	mov	r0, r5
 800a16e:	f001 ff0f 	bl	800bf90 <_fflush_r>
 800a172:	b9e0      	cbnz	r0, 800a1ae <__swbuf_r+0x74>
 800a174:	68a3      	ldr	r3, [r4, #8]
 800a176:	3b01      	subs	r3, #1
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	6022      	str	r2, [r4, #0]
 800a180:	701e      	strb	r6, [r3, #0]
 800a182:	6962      	ldr	r2, [r4, #20]
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	429a      	cmp	r2, r3
 800a188:	d004      	beq.n	800a194 <__swbuf_r+0x5a>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	07db      	lsls	r3, r3, #31
 800a18e:	d506      	bpl.n	800a19e <__swbuf_r+0x64>
 800a190:	2e0a      	cmp	r6, #10
 800a192:	d104      	bne.n	800a19e <__swbuf_r+0x64>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f001 fefa 	bl	800bf90 <_fflush_r>
 800a19c:	b938      	cbnz	r0, 800a1ae <__swbuf_r+0x74>
 800a19e:	4638      	mov	r0, r7
 800a1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 f805 	bl	800a1b4 <__swsetup_r>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d0d5      	beq.n	800a15a <__swbuf_r+0x20>
 800a1ae:	f04f 37ff 	mov.w	r7, #4294967295
 800a1b2:	e7f4      	b.n	800a19e <__swbuf_r+0x64>

0800a1b4 <__swsetup_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4b2a      	ldr	r3, [pc, #168]	; (800a260 <__swsetup_r+0xac>)
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	460c      	mov	r4, r1
 800a1be:	b118      	cbz	r0, 800a1c8 <__swsetup_r+0x14>
 800a1c0:	6a03      	ldr	r3, [r0, #32]
 800a1c2:	b90b      	cbnz	r3, 800a1c8 <__swsetup_r+0x14>
 800a1c4:	f7ff fdfc 	bl	8009dc0 <__sinit>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ce:	0718      	lsls	r0, r3, #28
 800a1d0:	d422      	bmi.n	800a218 <__swsetup_r+0x64>
 800a1d2:	06d9      	lsls	r1, r3, #27
 800a1d4:	d407      	bmi.n	800a1e6 <__swsetup_r+0x32>
 800a1d6:	2309      	movs	r3, #9
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1de:	81a3      	strh	r3, [r4, #12]
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	e034      	b.n	800a250 <__swsetup_r+0x9c>
 800a1e6:	0758      	lsls	r0, r3, #29
 800a1e8:	d512      	bpl.n	800a210 <__swsetup_r+0x5c>
 800a1ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ec:	b141      	cbz	r1, 800a200 <__swsetup_r+0x4c>
 800a1ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1f2:	4299      	cmp	r1, r3
 800a1f4:	d002      	beq.n	800a1fc <__swsetup_r+0x48>
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 ff2c 	bl	800b054 <_free_r>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	6363      	str	r3, [r4, #52]	; 0x34
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	2300      	movs	r3, #0
 800a20a:	6063      	str	r3, [r4, #4]
 800a20c:	6923      	ldr	r3, [r4, #16]
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f043 0308 	orr.w	r3, r3, #8
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	6923      	ldr	r3, [r4, #16]
 800a21a:	b94b      	cbnz	r3, 800a230 <__swsetup_r+0x7c>
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a226:	d003      	beq.n	800a230 <__swsetup_r+0x7c>
 800a228:	4621      	mov	r1, r4
 800a22a:	4628      	mov	r0, r5
 800a22c:	f001 fefe 	bl	800c02c <__smakebuf_r>
 800a230:	89a0      	ldrh	r0, [r4, #12]
 800a232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a236:	f010 0301 	ands.w	r3, r0, #1
 800a23a:	d00a      	beq.n	800a252 <__swsetup_r+0x9e>
 800a23c:	2300      	movs	r3, #0
 800a23e:	60a3      	str	r3, [r4, #8]
 800a240:	6963      	ldr	r3, [r4, #20]
 800a242:	425b      	negs	r3, r3
 800a244:	61a3      	str	r3, [r4, #24]
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	b943      	cbnz	r3, 800a25c <__swsetup_r+0xa8>
 800a24a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a24e:	d1c4      	bne.n	800a1da <__swsetup_r+0x26>
 800a250:	bd38      	pop	{r3, r4, r5, pc}
 800a252:	0781      	lsls	r1, r0, #30
 800a254:	bf58      	it	pl
 800a256:	6963      	ldrpl	r3, [r4, #20]
 800a258:	60a3      	str	r3, [r4, #8]
 800a25a:	e7f4      	b.n	800a246 <__swsetup_r+0x92>
 800a25c:	2000      	movs	r0, #0
 800a25e:	e7f7      	b.n	800a250 <__swsetup_r+0x9c>
 800a260:	20000068 	.word	0x20000068

0800a264 <memset>:
 800a264:	4402      	add	r2, r0
 800a266:	4603      	mov	r3, r0
 800a268:	4293      	cmp	r3, r2
 800a26a:	d100      	bne.n	800a26e <memset+0xa>
 800a26c:	4770      	bx	lr
 800a26e:	f803 1b01 	strb.w	r1, [r3], #1
 800a272:	e7f9      	b.n	800a268 <memset+0x4>

0800a274 <_localeconv_r>:
 800a274:	4800      	ldr	r0, [pc, #0]	; (800a278 <_localeconv_r+0x4>)
 800a276:	4770      	bx	lr
 800a278:	2000015c 	.word	0x2000015c

0800a27c <_close_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d06      	ldr	r5, [pc, #24]	; (800a298 <_close_r+0x1c>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	f7fa f8be 	bl	8004408 <_close>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_close_r+0x1a>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_close_r+0x1a>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	200017c8 	.word	0x200017c8

0800a29c <_lseek_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	; (800a2bc <_lseek_r+0x20>)
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f7fa f8b8 	bl	8004420 <_lseek>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_lseek_r+0x1e>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_lseek_r+0x1e>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	200017c8 	.word	0x200017c8

0800a2c0 <_read_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_read_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7fa f87e 	bl	80043d0 <_read>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_read_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_read_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	200017c8 	.word	0x200017c8

0800a2e4 <_write_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_write_r+0x20>)
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	602a      	str	r2, [r5, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f7fa f87a 	bl	80043ec <_write>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_write_r+0x1e>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_write_r+0x1e>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	200017c8 	.word	0x200017c8

0800a308 <__errno>:
 800a308:	4b01      	ldr	r3, [pc, #4]	; (800a310 <__errno+0x8>)
 800a30a:	6818      	ldr	r0, [r3, #0]
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	20000068 	.word	0x20000068

0800a314 <__libc_init_array>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	4d0d      	ldr	r5, [pc, #52]	; (800a34c <__libc_init_array+0x38>)
 800a318:	4c0d      	ldr	r4, [pc, #52]	; (800a350 <__libc_init_array+0x3c>)
 800a31a:	1b64      	subs	r4, r4, r5
 800a31c:	10a4      	asrs	r4, r4, #2
 800a31e:	2600      	movs	r6, #0
 800a320:	42a6      	cmp	r6, r4
 800a322:	d109      	bne.n	800a338 <__libc_init_array+0x24>
 800a324:	4d0b      	ldr	r5, [pc, #44]	; (800a354 <__libc_init_array+0x40>)
 800a326:	4c0c      	ldr	r4, [pc, #48]	; (800a358 <__libc_init_array+0x44>)
 800a328:	f003 f8a0 	bl	800d46c <_init>
 800a32c:	1b64      	subs	r4, r4, r5
 800a32e:	10a4      	asrs	r4, r4, #2
 800a330:	2600      	movs	r6, #0
 800a332:	42a6      	cmp	r6, r4
 800a334:	d105      	bne.n	800a342 <__libc_init_array+0x2e>
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	f855 3b04 	ldr.w	r3, [r5], #4
 800a33c:	4798      	blx	r3
 800a33e:	3601      	adds	r6, #1
 800a340:	e7ee      	b.n	800a320 <__libc_init_array+0xc>
 800a342:	f855 3b04 	ldr.w	r3, [r5], #4
 800a346:	4798      	blx	r3
 800a348:	3601      	adds	r6, #1
 800a34a:	e7f2      	b.n	800a332 <__libc_init_array+0x1e>
 800a34c:	0800dae0 	.word	0x0800dae0
 800a350:	0800dae0 	.word	0x0800dae0
 800a354:	0800dae0 	.word	0x0800dae0
 800a358:	0800dae4 	.word	0x0800dae4

0800a35c <__retarget_lock_acquire_recursive>:
 800a35c:	4770      	bx	lr

0800a35e <__retarget_lock_release_recursive>:
 800a35e:	4770      	bx	lr

0800a360 <quorem>:
 800a360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	6903      	ldr	r3, [r0, #16]
 800a366:	690c      	ldr	r4, [r1, #16]
 800a368:	42a3      	cmp	r3, r4
 800a36a:	4607      	mov	r7, r0
 800a36c:	db7e      	blt.n	800a46c <quorem+0x10c>
 800a36e:	3c01      	subs	r4, #1
 800a370:	f101 0814 	add.w	r8, r1, #20
 800a374:	f100 0514 	add.w	r5, r0, #20
 800a378:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a386:	3301      	adds	r3, #1
 800a388:	429a      	cmp	r2, r3
 800a38a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a38e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a392:	fbb2 f6f3 	udiv	r6, r2, r3
 800a396:	d331      	bcc.n	800a3fc <quorem+0x9c>
 800a398:	f04f 0e00 	mov.w	lr, #0
 800a39c:	4640      	mov	r0, r8
 800a39e:	46ac      	mov	ip, r5
 800a3a0:	46f2      	mov	sl, lr
 800a3a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3a6:	b293      	uxth	r3, r2
 800a3a8:	fb06 e303 	mla	r3, r6, r3, lr
 800a3ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3b0:	0c1a      	lsrs	r2, r3, #16
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a3b8:	f8dc a000 	ldr.w	sl, [ip]
 800a3bc:	fa13 f38a 	uxtah	r3, r3, sl
 800a3c0:	fb06 220e 	mla	r2, r6, lr, r2
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	9b00      	ldr	r3, [sp, #0]
 800a3c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3cc:	b292      	uxth	r2, r2
 800a3ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a3d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3d6:	f8bd 3000 	ldrh.w	r3, [sp]
 800a3da:	4581      	cmp	r9, r0
 800a3dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e0:	f84c 3b04 	str.w	r3, [ip], #4
 800a3e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3e8:	d2db      	bcs.n	800a3a2 <quorem+0x42>
 800a3ea:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3ee:	b92b      	cbnz	r3, 800a3fc <quorem+0x9c>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	3b04      	subs	r3, #4
 800a3f4:	429d      	cmp	r5, r3
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	d32c      	bcc.n	800a454 <quorem+0xf4>
 800a3fa:	613c      	str	r4, [r7, #16]
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f001 f9a5 	bl	800b74c <__mcmp>
 800a402:	2800      	cmp	r0, #0
 800a404:	db22      	blt.n	800a44c <quorem+0xec>
 800a406:	3601      	adds	r6, #1
 800a408:	4629      	mov	r1, r5
 800a40a:	2000      	movs	r0, #0
 800a40c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a410:	f8d1 c000 	ldr.w	ip, [r1]
 800a414:	b293      	uxth	r3, r2
 800a416:	1ac3      	subs	r3, r0, r3
 800a418:	0c12      	lsrs	r2, r2, #16
 800a41a:	fa13 f38c 	uxtah	r3, r3, ip
 800a41e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a422:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a426:	b29b      	uxth	r3, r3
 800a428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a42c:	45c1      	cmp	r9, r8
 800a42e:	f841 3b04 	str.w	r3, [r1], #4
 800a432:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a436:	d2e9      	bcs.n	800a40c <quorem+0xac>
 800a438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a43c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a440:	b922      	cbnz	r2, 800a44c <quorem+0xec>
 800a442:	3b04      	subs	r3, #4
 800a444:	429d      	cmp	r5, r3
 800a446:	461a      	mov	r2, r3
 800a448:	d30a      	bcc.n	800a460 <quorem+0x100>
 800a44a:	613c      	str	r4, [r7, #16]
 800a44c:	4630      	mov	r0, r6
 800a44e:	b003      	add	sp, #12
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	6812      	ldr	r2, [r2, #0]
 800a456:	3b04      	subs	r3, #4
 800a458:	2a00      	cmp	r2, #0
 800a45a:	d1ce      	bne.n	800a3fa <quorem+0x9a>
 800a45c:	3c01      	subs	r4, #1
 800a45e:	e7c9      	b.n	800a3f4 <quorem+0x94>
 800a460:	6812      	ldr	r2, [r2, #0]
 800a462:	3b04      	subs	r3, #4
 800a464:	2a00      	cmp	r2, #0
 800a466:	d1f0      	bne.n	800a44a <quorem+0xea>
 800a468:	3c01      	subs	r4, #1
 800a46a:	e7eb      	b.n	800a444 <quorem+0xe4>
 800a46c:	2000      	movs	r0, #0
 800a46e:	e7ee      	b.n	800a44e <quorem+0xee>

0800a470 <_dtoa_r>:
 800a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	ed2d 8b04 	vpush	{d8-d9}
 800a478:	69c5      	ldr	r5, [r0, #28]
 800a47a:	b093      	sub	sp, #76	; 0x4c
 800a47c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a480:	ec57 6b10 	vmov	r6, r7, d0
 800a484:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a488:	9107      	str	r1, [sp, #28]
 800a48a:	4604      	mov	r4, r0
 800a48c:	920a      	str	r2, [sp, #40]	; 0x28
 800a48e:	930d      	str	r3, [sp, #52]	; 0x34
 800a490:	b975      	cbnz	r5, 800a4b0 <_dtoa_r+0x40>
 800a492:	2010      	movs	r0, #16
 800a494:	f000 fe2a 	bl	800b0ec <malloc>
 800a498:	4602      	mov	r2, r0
 800a49a:	61e0      	str	r0, [r4, #28]
 800a49c:	b920      	cbnz	r0, 800a4a8 <_dtoa_r+0x38>
 800a49e:	4bae      	ldr	r3, [pc, #696]	; (800a758 <_dtoa_r+0x2e8>)
 800a4a0:	21ef      	movs	r1, #239	; 0xef
 800a4a2:	48ae      	ldr	r0, [pc, #696]	; (800a75c <_dtoa_r+0x2ec>)
 800a4a4:	f001 fe58 	bl	800c158 <__assert_func>
 800a4a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4ac:	6005      	str	r5, [r0, #0]
 800a4ae:	60c5      	str	r5, [r0, #12]
 800a4b0:	69e3      	ldr	r3, [r4, #28]
 800a4b2:	6819      	ldr	r1, [r3, #0]
 800a4b4:	b151      	cbz	r1, 800a4cc <_dtoa_r+0x5c>
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	604a      	str	r2, [r1, #4]
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	4093      	lsls	r3, r2
 800a4be:	608b      	str	r3, [r1, #8]
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 ff07 	bl	800b2d4 <_Bfree>
 800a4c6:	69e3      	ldr	r3, [r4, #28]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	1e3b      	subs	r3, r7, #0
 800a4ce:	bfbb      	ittet	lt
 800a4d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4d4:	9303      	strlt	r3, [sp, #12]
 800a4d6:	2300      	movge	r3, #0
 800a4d8:	2201      	movlt	r2, #1
 800a4da:	bfac      	ite	ge
 800a4dc:	f8c8 3000 	strge.w	r3, [r8]
 800a4e0:	f8c8 2000 	strlt.w	r2, [r8]
 800a4e4:	4b9e      	ldr	r3, [pc, #632]	; (800a760 <_dtoa_r+0x2f0>)
 800a4e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a4ea:	ea33 0308 	bics.w	r3, r3, r8
 800a4ee:	d11b      	bne.n	800a528 <_dtoa_r+0xb8>
 800a4f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a4fc:	4333      	orrs	r3, r6
 800a4fe:	f000 8593 	beq.w	800b028 <_dtoa_r+0xbb8>
 800a502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a504:	b963      	cbnz	r3, 800a520 <_dtoa_r+0xb0>
 800a506:	4b97      	ldr	r3, [pc, #604]	; (800a764 <_dtoa_r+0x2f4>)
 800a508:	e027      	b.n	800a55a <_dtoa_r+0xea>
 800a50a:	4b97      	ldr	r3, [pc, #604]	; (800a768 <_dtoa_r+0x2f8>)
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	3308      	adds	r3, #8
 800a510:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	9800      	ldr	r0, [sp, #0]
 800a516:	b013      	add	sp, #76	; 0x4c
 800a518:	ecbd 8b04 	vpop	{d8-d9}
 800a51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a520:	4b90      	ldr	r3, [pc, #576]	; (800a764 <_dtoa_r+0x2f4>)
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	3303      	adds	r3, #3
 800a526:	e7f3      	b.n	800a510 <_dtoa_r+0xa0>
 800a528:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a52c:	2200      	movs	r2, #0
 800a52e:	ec51 0b17 	vmov	r0, r1, d7
 800a532:	eeb0 8a47 	vmov.f32	s16, s14
 800a536:	eef0 8a67 	vmov.f32	s17, s15
 800a53a:	2300      	movs	r3, #0
 800a53c:	f7f6 faec 	bl	8000b18 <__aeabi_dcmpeq>
 800a540:	4681      	mov	r9, r0
 800a542:	b160      	cbz	r0, 800a55e <_dtoa_r+0xee>
 800a544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a546:	2301      	movs	r3, #1
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 8568 	beq.w	800b022 <_dtoa_r+0xbb2>
 800a552:	4b86      	ldr	r3, [pc, #536]	; (800a76c <_dtoa_r+0x2fc>)
 800a554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	3b01      	subs	r3, #1
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	e7da      	b.n	800a514 <_dtoa_r+0xa4>
 800a55e:	aa10      	add	r2, sp, #64	; 0x40
 800a560:	a911      	add	r1, sp, #68	; 0x44
 800a562:	4620      	mov	r0, r4
 800a564:	eeb0 0a48 	vmov.f32	s0, s16
 800a568:	eef0 0a68 	vmov.f32	s1, s17
 800a56c:	f001 f994 	bl	800b898 <__d2b>
 800a570:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a574:	4682      	mov	sl, r0
 800a576:	2d00      	cmp	r5, #0
 800a578:	d07f      	beq.n	800a67a <_dtoa_r+0x20a>
 800a57a:	ee18 3a90 	vmov	r3, s17
 800a57e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a582:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a586:	ec51 0b18 	vmov	r0, r1, d8
 800a58a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a58e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a592:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a596:	4619      	mov	r1, r3
 800a598:	2200      	movs	r2, #0
 800a59a:	4b75      	ldr	r3, [pc, #468]	; (800a770 <_dtoa_r+0x300>)
 800a59c:	f7f5 fe9c 	bl	80002d8 <__aeabi_dsub>
 800a5a0:	a367      	add	r3, pc, #412	; (adr r3, 800a740 <_dtoa_r+0x2d0>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f6 f84f 	bl	8000648 <__aeabi_dmul>
 800a5aa:	a367      	add	r3, pc, #412	; (adr r3, 800a748 <_dtoa_r+0x2d8>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f5 fe94 	bl	80002dc <__adddf3>
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	f7f5 ffdb 	bl	8000574 <__aeabi_i2d>
 800a5be:	a364      	add	r3, pc, #400	; (adr r3, 800a750 <_dtoa_r+0x2e0>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	f7f6 f840 	bl	8000648 <__aeabi_dmul>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	f7f5 fe84 	bl	80002dc <__adddf3>
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	460f      	mov	r7, r1
 800a5d8:	f7f6 fae6 	bl	8000ba8 <__aeabi_d2iz>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	4683      	mov	fp, r0
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	f7f6 faa1 	bl	8000b2c <__aeabi_dcmplt>
 800a5ea:	b148      	cbz	r0, 800a600 <_dtoa_r+0x190>
 800a5ec:	4658      	mov	r0, fp
 800a5ee:	f7f5 ffc1 	bl	8000574 <__aeabi_i2d>
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	463b      	mov	r3, r7
 800a5f6:	f7f6 fa8f 	bl	8000b18 <__aeabi_dcmpeq>
 800a5fa:	b908      	cbnz	r0, 800a600 <_dtoa_r+0x190>
 800a5fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a600:	f1bb 0f16 	cmp.w	fp, #22
 800a604:	d857      	bhi.n	800a6b6 <_dtoa_r+0x246>
 800a606:	4b5b      	ldr	r3, [pc, #364]	; (800a774 <_dtoa_r+0x304>)
 800a608:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	ec51 0b18 	vmov	r0, r1, d8
 800a614:	f7f6 fa8a 	bl	8000b2c <__aeabi_dcmplt>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d04e      	beq.n	800a6ba <_dtoa_r+0x24a>
 800a61c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a620:	2300      	movs	r3, #0
 800a622:	930c      	str	r3, [sp, #48]	; 0x30
 800a624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a626:	1b5b      	subs	r3, r3, r5
 800a628:	1e5a      	subs	r2, r3, #1
 800a62a:	bf45      	ittet	mi
 800a62c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a630:	9305      	strmi	r3, [sp, #20]
 800a632:	2300      	movpl	r3, #0
 800a634:	2300      	movmi	r3, #0
 800a636:	9206      	str	r2, [sp, #24]
 800a638:	bf54      	ite	pl
 800a63a:	9305      	strpl	r3, [sp, #20]
 800a63c:	9306      	strmi	r3, [sp, #24]
 800a63e:	f1bb 0f00 	cmp.w	fp, #0
 800a642:	db3c      	blt.n	800a6be <_dtoa_r+0x24e>
 800a644:	9b06      	ldr	r3, [sp, #24]
 800a646:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a64a:	445b      	add	r3, fp
 800a64c:	9306      	str	r3, [sp, #24]
 800a64e:	2300      	movs	r3, #0
 800a650:	9308      	str	r3, [sp, #32]
 800a652:	9b07      	ldr	r3, [sp, #28]
 800a654:	2b09      	cmp	r3, #9
 800a656:	d868      	bhi.n	800a72a <_dtoa_r+0x2ba>
 800a658:	2b05      	cmp	r3, #5
 800a65a:	bfc4      	itt	gt
 800a65c:	3b04      	subgt	r3, #4
 800a65e:	9307      	strgt	r3, [sp, #28]
 800a660:	9b07      	ldr	r3, [sp, #28]
 800a662:	f1a3 0302 	sub.w	r3, r3, #2
 800a666:	bfcc      	ite	gt
 800a668:	2500      	movgt	r5, #0
 800a66a:	2501      	movle	r5, #1
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	f200 8085 	bhi.w	800a77c <_dtoa_r+0x30c>
 800a672:	e8df f003 	tbb	[pc, r3]
 800a676:	3b2e      	.short	0x3b2e
 800a678:	5839      	.short	0x5839
 800a67a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a67e:	441d      	add	r5, r3
 800a680:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a684:	2b20      	cmp	r3, #32
 800a686:	bfc1      	itttt	gt
 800a688:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a68c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a690:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a694:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a698:	bfd6      	itet	le
 800a69a:	f1c3 0320 	rsble	r3, r3, #32
 800a69e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a6a2:	fa06 f003 	lslle.w	r0, r6, r3
 800a6a6:	f7f5 ff55 	bl	8000554 <__aeabi_ui2d>
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a6b0:	3d01      	subs	r5, #1
 800a6b2:	920e      	str	r2, [sp, #56]	; 0x38
 800a6b4:	e76f      	b.n	800a596 <_dtoa_r+0x126>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e7b3      	b.n	800a622 <_dtoa_r+0x1b2>
 800a6ba:	900c      	str	r0, [sp, #48]	; 0x30
 800a6bc:	e7b2      	b.n	800a624 <_dtoa_r+0x1b4>
 800a6be:	9b05      	ldr	r3, [sp, #20]
 800a6c0:	eba3 030b 	sub.w	r3, r3, fp
 800a6c4:	9305      	str	r3, [sp, #20]
 800a6c6:	f1cb 0300 	rsb	r3, fp, #0
 800a6ca:	9308      	str	r3, [sp, #32]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6d0:	e7bf      	b.n	800a652 <_dtoa_r+0x1e2>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dc52      	bgt.n	800a782 <_dtoa_r+0x312>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	9304      	str	r3, [sp, #16]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a6e6:	e00b      	b.n	800a700 <_dtoa_r+0x290>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e7f3      	b.n	800a6d4 <_dtoa_r+0x264>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f2:	445b      	add	r3, fp
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	bfb8      	it	lt
 800a6fe:	2301      	movlt	r3, #1
 800a700:	69e0      	ldr	r0, [r4, #28]
 800a702:	2100      	movs	r1, #0
 800a704:	2204      	movs	r2, #4
 800a706:	f102 0614 	add.w	r6, r2, #20
 800a70a:	429e      	cmp	r6, r3
 800a70c:	d93d      	bls.n	800a78a <_dtoa_r+0x31a>
 800a70e:	6041      	str	r1, [r0, #4]
 800a710:	4620      	mov	r0, r4
 800a712:	f000 fd9f 	bl	800b254 <_Balloc>
 800a716:	9000      	str	r0, [sp, #0]
 800a718:	2800      	cmp	r0, #0
 800a71a:	d139      	bne.n	800a790 <_dtoa_r+0x320>
 800a71c:	4b16      	ldr	r3, [pc, #88]	; (800a778 <_dtoa_r+0x308>)
 800a71e:	4602      	mov	r2, r0
 800a720:	f240 11af 	movw	r1, #431	; 0x1af
 800a724:	e6bd      	b.n	800a4a2 <_dtoa_r+0x32>
 800a726:	2301      	movs	r3, #1
 800a728:	e7e1      	b.n	800a6ee <_dtoa_r+0x27e>
 800a72a:	2501      	movs	r5, #1
 800a72c:	2300      	movs	r3, #0
 800a72e:	9307      	str	r3, [sp, #28]
 800a730:	9509      	str	r5, [sp, #36]	; 0x24
 800a732:	f04f 33ff 	mov.w	r3, #4294967295
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	2200      	movs	r2, #0
 800a73c:	2312      	movs	r3, #18
 800a73e:	e7d1      	b.n	800a6e4 <_dtoa_r+0x274>
 800a740:	636f4361 	.word	0x636f4361
 800a744:	3fd287a7 	.word	0x3fd287a7
 800a748:	8b60c8b3 	.word	0x8b60c8b3
 800a74c:	3fc68a28 	.word	0x3fc68a28
 800a750:	509f79fb 	.word	0x509f79fb
 800a754:	3fd34413 	.word	0x3fd34413
 800a758:	0800d5c9 	.word	0x0800d5c9
 800a75c:	0800d5e0 	.word	0x0800d5e0
 800a760:	7ff00000 	.word	0x7ff00000
 800a764:	0800d5c5 	.word	0x0800d5c5
 800a768:	0800d5bc 	.word	0x0800d5bc
 800a76c:	0800d599 	.word	0x0800d599
 800a770:	3ff80000 	.word	0x3ff80000
 800a774:	0800d6d0 	.word	0x0800d6d0
 800a778:	0800d638 	.word	0x0800d638
 800a77c:	2301      	movs	r3, #1
 800a77e:	9309      	str	r3, [sp, #36]	; 0x24
 800a780:	e7d7      	b.n	800a732 <_dtoa_r+0x2c2>
 800a782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a784:	9301      	str	r3, [sp, #4]
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	e7ba      	b.n	800a700 <_dtoa_r+0x290>
 800a78a:	3101      	adds	r1, #1
 800a78c:	0052      	lsls	r2, r2, #1
 800a78e:	e7ba      	b.n	800a706 <_dtoa_r+0x296>
 800a790:	69e3      	ldr	r3, [r4, #28]
 800a792:	9a00      	ldr	r2, [sp, #0]
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	2b0e      	cmp	r3, #14
 800a79a:	f200 80a8 	bhi.w	800a8ee <_dtoa_r+0x47e>
 800a79e:	2d00      	cmp	r5, #0
 800a7a0:	f000 80a5 	beq.w	800a8ee <_dtoa_r+0x47e>
 800a7a4:	f1bb 0f00 	cmp.w	fp, #0
 800a7a8:	dd38      	ble.n	800a81c <_dtoa_r+0x3ac>
 800a7aa:	4bc0      	ldr	r3, [pc, #768]	; (800aaac <_dtoa_r+0x63c>)
 800a7ac:	f00b 020f 	and.w	r2, fp, #15
 800a7b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a7b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a7bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a7c0:	d019      	beq.n	800a7f6 <_dtoa_r+0x386>
 800a7c2:	4bbb      	ldr	r3, [pc, #748]	; (800aab0 <_dtoa_r+0x640>)
 800a7c4:	ec51 0b18 	vmov	r0, r1, d8
 800a7c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7cc:	f7f6 f866 	bl	800089c <__aeabi_ddiv>
 800a7d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7d4:	f008 080f 	and.w	r8, r8, #15
 800a7d8:	2503      	movs	r5, #3
 800a7da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aab0 <_dtoa_r+0x640>
 800a7de:	f1b8 0f00 	cmp.w	r8, #0
 800a7e2:	d10a      	bne.n	800a7fa <_dtoa_r+0x38a>
 800a7e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	f7f6 f856 	bl	800089c <__aeabi_ddiv>
 800a7f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7f4:	e02b      	b.n	800a84e <_dtoa_r+0x3de>
 800a7f6:	2502      	movs	r5, #2
 800a7f8:	e7ef      	b.n	800a7da <_dtoa_r+0x36a>
 800a7fa:	f018 0f01 	tst.w	r8, #1
 800a7fe:	d008      	beq.n	800a812 <_dtoa_r+0x3a2>
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a808:	f7f5 ff1e 	bl	8000648 <__aeabi_dmul>
 800a80c:	3501      	adds	r5, #1
 800a80e:	4606      	mov	r6, r0
 800a810:	460f      	mov	r7, r1
 800a812:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a816:	f109 0908 	add.w	r9, r9, #8
 800a81a:	e7e0      	b.n	800a7de <_dtoa_r+0x36e>
 800a81c:	f000 809f 	beq.w	800a95e <_dtoa_r+0x4ee>
 800a820:	f1cb 0600 	rsb	r6, fp, #0
 800a824:	4ba1      	ldr	r3, [pc, #644]	; (800aaac <_dtoa_r+0x63c>)
 800a826:	4fa2      	ldr	r7, [pc, #648]	; (800aab0 <_dtoa_r+0x640>)
 800a828:	f006 020f 	and.w	r2, r6, #15
 800a82c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	ec51 0b18 	vmov	r0, r1, d8
 800a838:	f7f5 ff06 	bl	8000648 <__aeabi_dmul>
 800a83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a840:	1136      	asrs	r6, r6, #4
 800a842:	2300      	movs	r3, #0
 800a844:	2502      	movs	r5, #2
 800a846:	2e00      	cmp	r6, #0
 800a848:	d17e      	bne.n	800a948 <_dtoa_r+0x4d8>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1d0      	bne.n	800a7f0 <_dtoa_r+0x380>
 800a84e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a850:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 8084 	beq.w	800a962 <_dtoa_r+0x4f2>
 800a85a:	4b96      	ldr	r3, [pc, #600]	; (800aab4 <_dtoa_r+0x644>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	4640      	mov	r0, r8
 800a860:	4649      	mov	r1, r9
 800a862:	f7f6 f963 	bl	8000b2c <__aeabi_dcmplt>
 800a866:	2800      	cmp	r0, #0
 800a868:	d07b      	beq.n	800a962 <_dtoa_r+0x4f2>
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d078      	beq.n	800a962 <_dtoa_r+0x4f2>
 800a870:	9b01      	ldr	r3, [sp, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	dd39      	ble.n	800a8ea <_dtoa_r+0x47a>
 800a876:	4b90      	ldr	r3, [pc, #576]	; (800aab8 <_dtoa_r+0x648>)
 800a878:	2200      	movs	r2, #0
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f5 fee3 	bl	8000648 <__aeabi_dmul>
 800a882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a886:	9e01      	ldr	r6, [sp, #4]
 800a888:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a88c:	3501      	adds	r5, #1
 800a88e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a892:	4628      	mov	r0, r5
 800a894:	f7f5 fe6e 	bl	8000574 <__aeabi_i2d>
 800a898:	4642      	mov	r2, r8
 800a89a:	464b      	mov	r3, r9
 800a89c:	f7f5 fed4 	bl	8000648 <__aeabi_dmul>
 800a8a0:	4b86      	ldr	r3, [pc, #536]	; (800aabc <_dtoa_r+0x64c>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f7f5 fd1a 	bl	80002dc <__adddf3>
 800a8a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8b0:	9303      	str	r3, [sp, #12]
 800a8b2:	2e00      	cmp	r6, #0
 800a8b4:	d158      	bne.n	800a968 <_dtoa_r+0x4f8>
 800a8b6:	4b82      	ldr	r3, [pc, #520]	; (800aac0 <_dtoa_r+0x650>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4649      	mov	r1, r9
 800a8be:	f7f5 fd0b 	bl	80002d8 <__aeabi_dsub>
 800a8c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	f7f6 f94d 	bl	8000b68 <__aeabi_dcmpgt>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f040 8296 	bne.w	800ae00 <_dtoa_r+0x990>
 800a8d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a8d8:	4640      	mov	r0, r8
 800a8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8de:	4649      	mov	r1, r9
 800a8e0:	f7f6 f924 	bl	8000b2c <__aeabi_dcmplt>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f040 8289 	bne.w	800adfc <_dtoa_r+0x98c>
 800a8ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a8ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f2c0 814e 	blt.w	800ab92 <_dtoa_r+0x722>
 800a8f6:	f1bb 0f0e 	cmp.w	fp, #14
 800a8fa:	f300 814a 	bgt.w	800ab92 <_dtoa_r+0x722>
 800a8fe:	4b6b      	ldr	r3, [pc, #428]	; (800aaac <_dtoa_r+0x63c>)
 800a900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a904:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f280 80dc 	bge.w	800aac8 <_dtoa_r+0x658>
 800a910:	9b04      	ldr	r3, [sp, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	f300 80d8 	bgt.w	800aac8 <_dtoa_r+0x658>
 800a918:	f040 826f 	bne.w	800adfa <_dtoa_r+0x98a>
 800a91c:	4b68      	ldr	r3, [pc, #416]	; (800aac0 <_dtoa_r+0x650>)
 800a91e:	2200      	movs	r2, #0
 800a920:	4640      	mov	r0, r8
 800a922:	4649      	mov	r1, r9
 800a924:	f7f5 fe90 	bl	8000648 <__aeabi_dmul>
 800a928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a92c:	f7f6 f912 	bl	8000b54 <__aeabi_dcmpge>
 800a930:	9e04      	ldr	r6, [sp, #16]
 800a932:	4637      	mov	r7, r6
 800a934:	2800      	cmp	r0, #0
 800a936:	f040 8245 	bne.w	800adc4 <_dtoa_r+0x954>
 800a93a:	9d00      	ldr	r5, [sp, #0]
 800a93c:	2331      	movs	r3, #49	; 0x31
 800a93e:	f805 3b01 	strb.w	r3, [r5], #1
 800a942:	f10b 0b01 	add.w	fp, fp, #1
 800a946:	e241      	b.n	800adcc <_dtoa_r+0x95c>
 800a948:	07f2      	lsls	r2, r6, #31
 800a94a:	d505      	bpl.n	800a958 <_dtoa_r+0x4e8>
 800a94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a950:	f7f5 fe7a 	bl	8000648 <__aeabi_dmul>
 800a954:	3501      	adds	r5, #1
 800a956:	2301      	movs	r3, #1
 800a958:	1076      	asrs	r6, r6, #1
 800a95a:	3708      	adds	r7, #8
 800a95c:	e773      	b.n	800a846 <_dtoa_r+0x3d6>
 800a95e:	2502      	movs	r5, #2
 800a960:	e775      	b.n	800a84e <_dtoa_r+0x3de>
 800a962:	9e04      	ldr	r6, [sp, #16]
 800a964:	465f      	mov	r7, fp
 800a966:	e792      	b.n	800a88e <_dtoa_r+0x41e>
 800a968:	9900      	ldr	r1, [sp, #0]
 800a96a:	4b50      	ldr	r3, [pc, #320]	; (800aaac <_dtoa_r+0x63c>)
 800a96c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a970:	4431      	add	r1, r6
 800a972:	9102      	str	r1, [sp, #8]
 800a974:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a976:	eeb0 9a47 	vmov.f32	s18, s14
 800a97a:	eef0 9a67 	vmov.f32	s19, s15
 800a97e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a982:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a986:	2900      	cmp	r1, #0
 800a988:	d044      	beq.n	800aa14 <_dtoa_r+0x5a4>
 800a98a:	494e      	ldr	r1, [pc, #312]	; (800aac4 <_dtoa_r+0x654>)
 800a98c:	2000      	movs	r0, #0
 800a98e:	f7f5 ff85 	bl	800089c <__aeabi_ddiv>
 800a992:	ec53 2b19 	vmov	r2, r3, d9
 800a996:	f7f5 fc9f 	bl	80002d8 <__aeabi_dsub>
 800a99a:	9d00      	ldr	r5, [sp, #0]
 800a99c:	ec41 0b19 	vmov	d9, r0, r1
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	f7f6 f900 	bl	8000ba8 <__aeabi_d2iz>
 800a9a8:	4606      	mov	r6, r0
 800a9aa:	f7f5 fde3 	bl	8000574 <__aeabi_i2d>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	f7f5 fc8f 	bl	80002d8 <__aeabi_dsub>
 800a9ba:	3630      	adds	r6, #48	; 0x30
 800a9bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a9c0:	ec53 2b19 	vmov	r2, r3, d9
 800a9c4:	4680      	mov	r8, r0
 800a9c6:	4689      	mov	r9, r1
 800a9c8:	f7f6 f8b0 	bl	8000b2c <__aeabi_dcmplt>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d164      	bne.n	800aa9a <_dtoa_r+0x62a>
 800a9d0:	4642      	mov	r2, r8
 800a9d2:	464b      	mov	r3, r9
 800a9d4:	4937      	ldr	r1, [pc, #220]	; (800aab4 <_dtoa_r+0x644>)
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	f7f5 fc7e 	bl	80002d8 <__aeabi_dsub>
 800a9dc:	ec53 2b19 	vmov	r2, r3, d9
 800a9e0:	f7f6 f8a4 	bl	8000b2c <__aeabi_dcmplt>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	f040 80b6 	bne.w	800ab56 <_dtoa_r+0x6e6>
 800a9ea:	9b02      	ldr	r3, [sp, #8]
 800a9ec:	429d      	cmp	r5, r3
 800a9ee:	f43f af7c 	beq.w	800a8ea <_dtoa_r+0x47a>
 800a9f2:	4b31      	ldr	r3, [pc, #196]	; (800aab8 <_dtoa_r+0x648>)
 800a9f4:	ec51 0b19 	vmov	r0, r1, d9
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f7f5 fe25 	bl	8000648 <__aeabi_dmul>
 800a9fe:	4b2e      	ldr	r3, [pc, #184]	; (800aab8 <_dtoa_r+0x648>)
 800aa00:	ec41 0b19 	vmov	d9, r0, r1
 800aa04:	2200      	movs	r2, #0
 800aa06:	4640      	mov	r0, r8
 800aa08:	4649      	mov	r1, r9
 800aa0a:	f7f5 fe1d 	bl	8000648 <__aeabi_dmul>
 800aa0e:	4680      	mov	r8, r0
 800aa10:	4689      	mov	r9, r1
 800aa12:	e7c5      	b.n	800a9a0 <_dtoa_r+0x530>
 800aa14:	ec51 0b17 	vmov	r0, r1, d7
 800aa18:	f7f5 fe16 	bl	8000648 <__aeabi_dmul>
 800aa1c:	9b02      	ldr	r3, [sp, #8]
 800aa1e:	9d00      	ldr	r5, [sp, #0]
 800aa20:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa22:	ec41 0b19 	vmov	d9, r0, r1
 800aa26:	4649      	mov	r1, r9
 800aa28:	4640      	mov	r0, r8
 800aa2a:	f7f6 f8bd 	bl	8000ba8 <__aeabi_d2iz>
 800aa2e:	4606      	mov	r6, r0
 800aa30:	f7f5 fda0 	bl	8000574 <__aeabi_i2d>
 800aa34:	3630      	adds	r6, #48	; 0x30
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	f7f5 fc4b 	bl	80002d8 <__aeabi_dsub>
 800aa42:	f805 6b01 	strb.w	r6, [r5], #1
 800aa46:	9b02      	ldr	r3, [sp, #8]
 800aa48:	429d      	cmp	r5, r3
 800aa4a:	4680      	mov	r8, r0
 800aa4c:	4689      	mov	r9, r1
 800aa4e:	f04f 0200 	mov.w	r2, #0
 800aa52:	d124      	bne.n	800aa9e <_dtoa_r+0x62e>
 800aa54:	4b1b      	ldr	r3, [pc, #108]	; (800aac4 <_dtoa_r+0x654>)
 800aa56:	ec51 0b19 	vmov	r0, r1, d9
 800aa5a:	f7f5 fc3f 	bl	80002dc <__adddf3>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	4640      	mov	r0, r8
 800aa64:	4649      	mov	r1, r9
 800aa66:	f7f6 f87f 	bl	8000b68 <__aeabi_dcmpgt>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d173      	bne.n	800ab56 <_dtoa_r+0x6e6>
 800aa6e:	ec53 2b19 	vmov	r2, r3, d9
 800aa72:	4914      	ldr	r1, [pc, #80]	; (800aac4 <_dtoa_r+0x654>)
 800aa74:	2000      	movs	r0, #0
 800aa76:	f7f5 fc2f 	bl	80002d8 <__aeabi_dsub>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4649      	mov	r1, r9
 800aa82:	f7f6 f853 	bl	8000b2c <__aeabi_dcmplt>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f af2f 	beq.w	800a8ea <_dtoa_r+0x47a>
 800aa8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa8e:	1e6b      	subs	r3, r5, #1
 800aa90:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa96:	2b30      	cmp	r3, #48	; 0x30
 800aa98:	d0f8      	beq.n	800aa8c <_dtoa_r+0x61c>
 800aa9a:	46bb      	mov	fp, r7
 800aa9c:	e04a      	b.n	800ab34 <_dtoa_r+0x6c4>
 800aa9e:	4b06      	ldr	r3, [pc, #24]	; (800aab8 <_dtoa_r+0x648>)
 800aaa0:	f7f5 fdd2 	bl	8000648 <__aeabi_dmul>
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	4689      	mov	r9, r1
 800aaa8:	e7bd      	b.n	800aa26 <_dtoa_r+0x5b6>
 800aaaa:	bf00      	nop
 800aaac:	0800d6d0 	.word	0x0800d6d0
 800aab0:	0800d6a8 	.word	0x0800d6a8
 800aab4:	3ff00000 	.word	0x3ff00000
 800aab8:	40240000 	.word	0x40240000
 800aabc:	401c0000 	.word	0x401c0000
 800aac0:	40140000 	.word	0x40140000
 800aac4:	3fe00000 	.word	0x3fe00000
 800aac8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aacc:	9d00      	ldr	r5, [sp, #0]
 800aace:	4642      	mov	r2, r8
 800aad0:	464b      	mov	r3, r9
 800aad2:	4630      	mov	r0, r6
 800aad4:	4639      	mov	r1, r7
 800aad6:	f7f5 fee1 	bl	800089c <__aeabi_ddiv>
 800aada:	f7f6 f865 	bl	8000ba8 <__aeabi_d2iz>
 800aade:	9001      	str	r0, [sp, #4]
 800aae0:	f7f5 fd48 	bl	8000574 <__aeabi_i2d>
 800aae4:	4642      	mov	r2, r8
 800aae6:	464b      	mov	r3, r9
 800aae8:	f7f5 fdae 	bl	8000648 <__aeabi_dmul>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	f7f5 fbf0 	bl	80002d8 <__aeabi_dsub>
 800aaf8:	9e01      	ldr	r6, [sp, #4]
 800aafa:	9f04      	ldr	r7, [sp, #16]
 800aafc:	3630      	adds	r6, #48	; 0x30
 800aafe:	f805 6b01 	strb.w	r6, [r5], #1
 800ab02:	9e00      	ldr	r6, [sp, #0]
 800ab04:	1bae      	subs	r6, r5, r6
 800ab06:	42b7      	cmp	r7, r6
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	d134      	bne.n	800ab78 <_dtoa_r+0x708>
 800ab0e:	f7f5 fbe5 	bl	80002dc <__adddf3>
 800ab12:	4642      	mov	r2, r8
 800ab14:	464b      	mov	r3, r9
 800ab16:	4606      	mov	r6, r0
 800ab18:	460f      	mov	r7, r1
 800ab1a:	f7f6 f825 	bl	8000b68 <__aeabi_dcmpgt>
 800ab1e:	b9c8      	cbnz	r0, 800ab54 <_dtoa_r+0x6e4>
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	4630      	mov	r0, r6
 800ab26:	4639      	mov	r1, r7
 800ab28:	f7f5 fff6 	bl	8000b18 <__aeabi_dcmpeq>
 800ab2c:	b110      	cbz	r0, 800ab34 <_dtoa_r+0x6c4>
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	07db      	lsls	r3, r3, #31
 800ab32:	d40f      	bmi.n	800ab54 <_dtoa_r+0x6e4>
 800ab34:	4651      	mov	r1, sl
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 fbcc 	bl	800b2d4 <_Bfree>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab40:	702b      	strb	r3, [r5, #0]
 800ab42:	f10b 0301 	add.w	r3, fp, #1
 800ab46:	6013      	str	r3, [r2, #0]
 800ab48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f43f ace2 	beq.w	800a514 <_dtoa_r+0xa4>
 800ab50:	601d      	str	r5, [r3, #0]
 800ab52:	e4df      	b.n	800a514 <_dtoa_r+0xa4>
 800ab54:	465f      	mov	r7, fp
 800ab56:	462b      	mov	r3, r5
 800ab58:	461d      	mov	r5, r3
 800ab5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab5e:	2a39      	cmp	r2, #57	; 0x39
 800ab60:	d106      	bne.n	800ab70 <_dtoa_r+0x700>
 800ab62:	9a00      	ldr	r2, [sp, #0]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d1f7      	bne.n	800ab58 <_dtoa_r+0x6e8>
 800ab68:	9900      	ldr	r1, [sp, #0]
 800ab6a:	2230      	movs	r2, #48	; 0x30
 800ab6c:	3701      	adds	r7, #1
 800ab6e:	700a      	strb	r2, [r1, #0]
 800ab70:	781a      	ldrb	r2, [r3, #0]
 800ab72:	3201      	adds	r2, #1
 800ab74:	701a      	strb	r2, [r3, #0]
 800ab76:	e790      	b.n	800aa9a <_dtoa_r+0x62a>
 800ab78:	4ba3      	ldr	r3, [pc, #652]	; (800ae08 <_dtoa_r+0x998>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f7f5 fd64 	bl	8000648 <__aeabi_dmul>
 800ab80:	2200      	movs	r2, #0
 800ab82:	2300      	movs	r3, #0
 800ab84:	4606      	mov	r6, r0
 800ab86:	460f      	mov	r7, r1
 800ab88:	f7f5 ffc6 	bl	8000b18 <__aeabi_dcmpeq>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d09e      	beq.n	800aace <_dtoa_r+0x65e>
 800ab90:	e7d0      	b.n	800ab34 <_dtoa_r+0x6c4>
 800ab92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	f000 80ca 	beq.w	800ad2e <_dtoa_r+0x8be>
 800ab9a:	9a07      	ldr	r2, [sp, #28]
 800ab9c:	2a01      	cmp	r2, #1
 800ab9e:	f300 80ad 	bgt.w	800acfc <_dtoa_r+0x88c>
 800aba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	f000 80a5 	beq.w	800acf4 <_dtoa_r+0x884>
 800abaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abae:	9e08      	ldr	r6, [sp, #32]
 800abb0:	9d05      	ldr	r5, [sp, #20]
 800abb2:	9a05      	ldr	r2, [sp, #20]
 800abb4:	441a      	add	r2, r3
 800abb6:	9205      	str	r2, [sp, #20]
 800abb8:	9a06      	ldr	r2, [sp, #24]
 800abba:	2101      	movs	r1, #1
 800abbc:	441a      	add	r2, r3
 800abbe:	4620      	mov	r0, r4
 800abc0:	9206      	str	r2, [sp, #24]
 800abc2:	f000 fc3d 	bl	800b440 <__i2b>
 800abc6:	4607      	mov	r7, r0
 800abc8:	b165      	cbz	r5, 800abe4 <_dtoa_r+0x774>
 800abca:	9b06      	ldr	r3, [sp, #24]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	dd09      	ble.n	800abe4 <_dtoa_r+0x774>
 800abd0:	42ab      	cmp	r3, r5
 800abd2:	9a05      	ldr	r2, [sp, #20]
 800abd4:	bfa8      	it	ge
 800abd6:	462b      	movge	r3, r5
 800abd8:	1ad2      	subs	r2, r2, r3
 800abda:	9205      	str	r2, [sp, #20]
 800abdc:	9a06      	ldr	r2, [sp, #24]
 800abde:	1aed      	subs	r5, r5, r3
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	9306      	str	r3, [sp, #24]
 800abe4:	9b08      	ldr	r3, [sp, #32]
 800abe6:	b1f3      	cbz	r3, 800ac26 <_dtoa_r+0x7b6>
 800abe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 80a3 	beq.w	800ad36 <_dtoa_r+0x8c6>
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	dd10      	ble.n	800ac16 <_dtoa_r+0x7a6>
 800abf4:	4639      	mov	r1, r7
 800abf6:	4632      	mov	r2, r6
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fce1 	bl	800b5c0 <__pow5mult>
 800abfe:	4652      	mov	r2, sl
 800ac00:	4601      	mov	r1, r0
 800ac02:	4607      	mov	r7, r0
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fc31 	bl	800b46c <__multiply>
 800ac0a:	4651      	mov	r1, sl
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 fb60 	bl	800b2d4 <_Bfree>
 800ac14:	46c2      	mov	sl, r8
 800ac16:	9b08      	ldr	r3, [sp, #32]
 800ac18:	1b9a      	subs	r2, r3, r6
 800ac1a:	d004      	beq.n	800ac26 <_dtoa_r+0x7b6>
 800ac1c:	4651      	mov	r1, sl
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 fcce 	bl	800b5c0 <__pow5mult>
 800ac24:	4682      	mov	sl, r0
 800ac26:	2101      	movs	r1, #1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 fc09 	bl	800b440 <__i2b>
 800ac2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	4606      	mov	r6, r0
 800ac34:	f340 8081 	ble.w	800ad3a <_dtoa_r+0x8ca>
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f000 fcbf 	bl	800b5c0 <__pow5mult>
 800ac42:	9b07      	ldr	r3, [sp, #28]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	4606      	mov	r6, r0
 800ac48:	dd7a      	ble.n	800ad40 <_dtoa_r+0x8d0>
 800ac4a:	f04f 0800 	mov.w	r8, #0
 800ac4e:	6933      	ldr	r3, [r6, #16]
 800ac50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac54:	6918      	ldr	r0, [r3, #16]
 800ac56:	f000 fba5 	bl	800b3a4 <__hi0bits>
 800ac5a:	f1c0 0020 	rsb	r0, r0, #32
 800ac5e:	9b06      	ldr	r3, [sp, #24]
 800ac60:	4418      	add	r0, r3
 800ac62:	f010 001f 	ands.w	r0, r0, #31
 800ac66:	f000 8094 	beq.w	800ad92 <_dtoa_r+0x922>
 800ac6a:	f1c0 0320 	rsb	r3, r0, #32
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	f340 8085 	ble.w	800ad7e <_dtoa_r+0x90e>
 800ac74:	9b05      	ldr	r3, [sp, #20]
 800ac76:	f1c0 001c 	rsb	r0, r0, #28
 800ac7a:	4403      	add	r3, r0
 800ac7c:	9305      	str	r3, [sp, #20]
 800ac7e:	9b06      	ldr	r3, [sp, #24]
 800ac80:	4403      	add	r3, r0
 800ac82:	4405      	add	r5, r0
 800ac84:	9306      	str	r3, [sp, #24]
 800ac86:	9b05      	ldr	r3, [sp, #20]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	dd05      	ble.n	800ac98 <_dtoa_r+0x828>
 800ac8c:	4651      	mov	r1, sl
 800ac8e:	461a      	mov	r2, r3
 800ac90:	4620      	mov	r0, r4
 800ac92:	f000 fcef 	bl	800b674 <__lshift>
 800ac96:	4682      	mov	sl, r0
 800ac98:	9b06      	ldr	r3, [sp, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dd05      	ble.n	800acaa <_dtoa_r+0x83a>
 800ac9e:	4631      	mov	r1, r6
 800aca0:	461a      	mov	r2, r3
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 fce6 	bl	800b674 <__lshift>
 800aca8:	4606      	mov	r6, r0
 800acaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acac:	2b00      	cmp	r3, #0
 800acae:	d072      	beq.n	800ad96 <_dtoa_r+0x926>
 800acb0:	4631      	mov	r1, r6
 800acb2:	4650      	mov	r0, sl
 800acb4:	f000 fd4a 	bl	800b74c <__mcmp>
 800acb8:	2800      	cmp	r0, #0
 800acba:	da6c      	bge.n	800ad96 <_dtoa_r+0x926>
 800acbc:	2300      	movs	r3, #0
 800acbe:	4651      	mov	r1, sl
 800acc0:	220a      	movs	r2, #10
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 fb28 	bl	800b318 <__multadd>
 800acc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acce:	4682      	mov	sl, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 81b0 	beq.w	800b036 <_dtoa_r+0xbc6>
 800acd6:	2300      	movs	r3, #0
 800acd8:	4639      	mov	r1, r7
 800acda:	220a      	movs	r2, #10
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 fb1b 	bl	800b318 <__multadd>
 800ace2:	9b01      	ldr	r3, [sp, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	4607      	mov	r7, r0
 800ace8:	f300 8096 	bgt.w	800ae18 <_dtoa_r+0x9a8>
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	dc59      	bgt.n	800ada6 <_dtoa_r+0x936>
 800acf2:	e091      	b.n	800ae18 <_dtoa_r+0x9a8>
 800acf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acfa:	e758      	b.n	800abae <_dtoa_r+0x73e>
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	1e5e      	subs	r6, r3, #1
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	42b3      	cmp	r3, r6
 800ad04:	bfbf      	itttt	lt
 800ad06:	9b08      	ldrlt	r3, [sp, #32]
 800ad08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ad0a:	9608      	strlt	r6, [sp, #32]
 800ad0c:	1af3      	sublt	r3, r6, r3
 800ad0e:	bfb4      	ite	lt
 800ad10:	18d2      	addlt	r2, r2, r3
 800ad12:	1b9e      	subge	r6, r3, r6
 800ad14:	9b04      	ldr	r3, [sp, #16]
 800ad16:	bfbc      	itt	lt
 800ad18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ad1a:	2600      	movlt	r6, #0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bfb7      	itett	lt
 800ad20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ad24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ad28:	1a9d      	sublt	r5, r3, r2
 800ad2a:	2300      	movlt	r3, #0
 800ad2c:	e741      	b.n	800abb2 <_dtoa_r+0x742>
 800ad2e:	9e08      	ldr	r6, [sp, #32]
 800ad30:	9d05      	ldr	r5, [sp, #20]
 800ad32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad34:	e748      	b.n	800abc8 <_dtoa_r+0x758>
 800ad36:	9a08      	ldr	r2, [sp, #32]
 800ad38:	e770      	b.n	800ac1c <_dtoa_r+0x7ac>
 800ad3a:	9b07      	ldr	r3, [sp, #28]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	dc19      	bgt.n	800ad74 <_dtoa_r+0x904>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	b9bb      	cbnz	r3, 800ad74 <_dtoa_r+0x904>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad4a:	b99b      	cbnz	r3, 800ad74 <_dtoa_r+0x904>
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad52:	0d1b      	lsrs	r3, r3, #20
 800ad54:	051b      	lsls	r3, r3, #20
 800ad56:	b183      	cbz	r3, 800ad7a <_dtoa_r+0x90a>
 800ad58:	9b05      	ldr	r3, [sp, #20]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	9305      	str	r3, [sp, #20]
 800ad5e:	9b06      	ldr	r3, [sp, #24]
 800ad60:	3301      	adds	r3, #1
 800ad62:	9306      	str	r3, [sp, #24]
 800ad64:	f04f 0801 	mov.w	r8, #1
 800ad68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f47f af6f 	bne.w	800ac4e <_dtoa_r+0x7de>
 800ad70:	2001      	movs	r0, #1
 800ad72:	e774      	b.n	800ac5e <_dtoa_r+0x7ee>
 800ad74:	f04f 0800 	mov.w	r8, #0
 800ad78:	e7f6      	b.n	800ad68 <_dtoa_r+0x8f8>
 800ad7a:	4698      	mov	r8, r3
 800ad7c:	e7f4      	b.n	800ad68 <_dtoa_r+0x8f8>
 800ad7e:	d082      	beq.n	800ac86 <_dtoa_r+0x816>
 800ad80:	9a05      	ldr	r2, [sp, #20]
 800ad82:	331c      	adds	r3, #28
 800ad84:	441a      	add	r2, r3
 800ad86:	9205      	str	r2, [sp, #20]
 800ad88:	9a06      	ldr	r2, [sp, #24]
 800ad8a:	441a      	add	r2, r3
 800ad8c:	441d      	add	r5, r3
 800ad8e:	9206      	str	r2, [sp, #24]
 800ad90:	e779      	b.n	800ac86 <_dtoa_r+0x816>
 800ad92:	4603      	mov	r3, r0
 800ad94:	e7f4      	b.n	800ad80 <_dtoa_r+0x910>
 800ad96:	9b04      	ldr	r3, [sp, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc37      	bgt.n	800ae0c <_dtoa_r+0x99c>
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	dd34      	ble.n	800ae0c <_dtoa_r+0x99c>
 800ada2:	9b04      	ldr	r3, [sp, #16]
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	b963      	cbnz	r3, 800adc4 <_dtoa_r+0x954>
 800adaa:	4631      	mov	r1, r6
 800adac:	2205      	movs	r2, #5
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 fab2 	bl	800b318 <__multadd>
 800adb4:	4601      	mov	r1, r0
 800adb6:	4606      	mov	r6, r0
 800adb8:	4650      	mov	r0, sl
 800adba:	f000 fcc7 	bl	800b74c <__mcmp>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f73f adbb 	bgt.w	800a93a <_dtoa_r+0x4ca>
 800adc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc6:	9d00      	ldr	r5, [sp, #0]
 800adc8:	ea6f 0b03 	mvn.w	fp, r3
 800adcc:	f04f 0800 	mov.w	r8, #0
 800add0:	4631      	mov	r1, r6
 800add2:	4620      	mov	r0, r4
 800add4:	f000 fa7e 	bl	800b2d4 <_Bfree>
 800add8:	2f00      	cmp	r7, #0
 800adda:	f43f aeab 	beq.w	800ab34 <_dtoa_r+0x6c4>
 800adde:	f1b8 0f00 	cmp.w	r8, #0
 800ade2:	d005      	beq.n	800adf0 <_dtoa_r+0x980>
 800ade4:	45b8      	cmp	r8, r7
 800ade6:	d003      	beq.n	800adf0 <_dtoa_r+0x980>
 800ade8:	4641      	mov	r1, r8
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fa72 	bl	800b2d4 <_Bfree>
 800adf0:	4639      	mov	r1, r7
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 fa6e 	bl	800b2d4 <_Bfree>
 800adf8:	e69c      	b.n	800ab34 <_dtoa_r+0x6c4>
 800adfa:	2600      	movs	r6, #0
 800adfc:	4637      	mov	r7, r6
 800adfe:	e7e1      	b.n	800adc4 <_dtoa_r+0x954>
 800ae00:	46bb      	mov	fp, r7
 800ae02:	4637      	mov	r7, r6
 800ae04:	e599      	b.n	800a93a <_dtoa_r+0x4ca>
 800ae06:	bf00      	nop
 800ae08:	40240000 	.word	0x40240000
 800ae0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 80c8 	beq.w	800afa4 <_dtoa_r+0xb34>
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	2d00      	cmp	r5, #0
 800ae1a:	dd05      	ble.n	800ae28 <_dtoa_r+0x9b8>
 800ae1c:	4639      	mov	r1, r7
 800ae1e:	462a      	mov	r2, r5
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 fc27 	bl	800b674 <__lshift>
 800ae26:	4607      	mov	r7, r0
 800ae28:	f1b8 0f00 	cmp.w	r8, #0
 800ae2c:	d05b      	beq.n	800aee6 <_dtoa_r+0xa76>
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 fa0f 	bl	800b254 <_Balloc>
 800ae36:	4605      	mov	r5, r0
 800ae38:	b928      	cbnz	r0, 800ae46 <_dtoa_r+0x9d6>
 800ae3a:	4b83      	ldr	r3, [pc, #524]	; (800b048 <_dtoa_r+0xbd8>)
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ae42:	f7ff bb2e 	b.w	800a4a2 <_dtoa_r+0x32>
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	3202      	adds	r2, #2
 800ae4a:	0092      	lsls	r2, r2, #2
 800ae4c:	f107 010c 	add.w	r1, r7, #12
 800ae50:	300c      	adds	r0, #12
 800ae52:	f001 f973 	bl	800c13c <memcpy>
 800ae56:	2201      	movs	r2, #1
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fc0a 	bl	800b674 <__lshift>
 800ae60:	9b00      	ldr	r3, [sp, #0]
 800ae62:	3301      	adds	r3, #1
 800ae64:	9304      	str	r3, [sp, #16]
 800ae66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	9308      	str	r3, [sp, #32]
 800ae6e:	9b02      	ldr	r3, [sp, #8]
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	46b8      	mov	r8, r7
 800ae76:	9306      	str	r3, [sp, #24]
 800ae78:	4607      	mov	r7, r0
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	4650      	mov	r0, sl
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	f7ff fa6c 	bl	800a360 <quorem>
 800ae88:	4641      	mov	r1, r8
 800ae8a:	9002      	str	r0, [sp, #8]
 800ae8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae90:	4650      	mov	r0, sl
 800ae92:	f000 fc5b 	bl	800b74c <__mcmp>
 800ae96:	463a      	mov	r2, r7
 800ae98:	9005      	str	r0, [sp, #20]
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 fc71 	bl	800b784 <__mdiff>
 800aea2:	68c2      	ldr	r2, [r0, #12]
 800aea4:	4605      	mov	r5, r0
 800aea6:	bb02      	cbnz	r2, 800aeea <_dtoa_r+0xa7a>
 800aea8:	4601      	mov	r1, r0
 800aeaa:	4650      	mov	r0, sl
 800aeac:	f000 fc4e 	bl	800b74c <__mcmp>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	9209      	str	r2, [sp, #36]	; 0x24
 800aeb8:	f000 fa0c 	bl	800b2d4 <_Bfree>
 800aebc:	9b07      	ldr	r3, [sp, #28]
 800aebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec0:	9d04      	ldr	r5, [sp, #16]
 800aec2:	ea43 0102 	orr.w	r1, r3, r2
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	4319      	orrs	r1, r3
 800aeca:	d110      	bne.n	800aeee <_dtoa_r+0xa7e>
 800aecc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aed0:	d029      	beq.n	800af26 <_dtoa_r+0xab6>
 800aed2:	9b05      	ldr	r3, [sp, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dd02      	ble.n	800aede <_dtoa_r+0xa6e>
 800aed8:	9b02      	ldr	r3, [sp, #8]
 800aeda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aede:	9b01      	ldr	r3, [sp, #4]
 800aee0:	f883 9000 	strb.w	r9, [r3]
 800aee4:	e774      	b.n	800add0 <_dtoa_r+0x960>
 800aee6:	4638      	mov	r0, r7
 800aee8:	e7ba      	b.n	800ae60 <_dtoa_r+0x9f0>
 800aeea:	2201      	movs	r2, #1
 800aeec:	e7e1      	b.n	800aeb2 <_dtoa_r+0xa42>
 800aeee:	9b05      	ldr	r3, [sp, #20]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	db04      	blt.n	800aefe <_dtoa_r+0xa8e>
 800aef4:	9907      	ldr	r1, [sp, #28]
 800aef6:	430b      	orrs	r3, r1
 800aef8:	9906      	ldr	r1, [sp, #24]
 800aefa:	430b      	orrs	r3, r1
 800aefc:	d120      	bne.n	800af40 <_dtoa_r+0xad0>
 800aefe:	2a00      	cmp	r2, #0
 800af00:	dded      	ble.n	800aede <_dtoa_r+0xa6e>
 800af02:	4651      	mov	r1, sl
 800af04:	2201      	movs	r2, #1
 800af06:	4620      	mov	r0, r4
 800af08:	f000 fbb4 	bl	800b674 <__lshift>
 800af0c:	4631      	mov	r1, r6
 800af0e:	4682      	mov	sl, r0
 800af10:	f000 fc1c 	bl	800b74c <__mcmp>
 800af14:	2800      	cmp	r0, #0
 800af16:	dc03      	bgt.n	800af20 <_dtoa_r+0xab0>
 800af18:	d1e1      	bne.n	800aede <_dtoa_r+0xa6e>
 800af1a:	f019 0f01 	tst.w	r9, #1
 800af1e:	d0de      	beq.n	800aede <_dtoa_r+0xa6e>
 800af20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af24:	d1d8      	bne.n	800aed8 <_dtoa_r+0xa68>
 800af26:	9a01      	ldr	r2, [sp, #4]
 800af28:	2339      	movs	r3, #57	; 0x39
 800af2a:	7013      	strb	r3, [r2, #0]
 800af2c:	462b      	mov	r3, r5
 800af2e:	461d      	mov	r5, r3
 800af30:	3b01      	subs	r3, #1
 800af32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af36:	2a39      	cmp	r2, #57	; 0x39
 800af38:	d06c      	beq.n	800b014 <_dtoa_r+0xba4>
 800af3a:	3201      	adds	r2, #1
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	e747      	b.n	800add0 <_dtoa_r+0x960>
 800af40:	2a00      	cmp	r2, #0
 800af42:	dd07      	ble.n	800af54 <_dtoa_r+0xae4>
 800af44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af48:	d0ed      	beq.n	800af26 <_dtoa_r+0xab6>
 800af4a:	9a01      	ldr	r2, [sp, #4]
 800af4c:	f109 0301 	add.w	r3, r9, #1
 800af50:	7013      	strb	r3, [r2, #0]
 800af52:	e73d      	b.n	800add0 <_dtoa_r+0x960>
 800af54:	9b04      	ldr	r3, [sp, #16]
 800af56:	9a08      	ldr	r2, [sp, #32]
 800af58:	f803 9c01 	strb.w	r9, [r3, #-1]
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d043      	beq.n	800afe8 <_dtoa_r+0xb78>
 800af60:	4651      	mov	r1, sl
 800af62:	2300      	movs	r3, #0
 800af64:	220a      	movs	r2, #10
 800af66:	4620      	mov	r0, r4
 800af68:	f000 f9d6 	bl	800b318 <__multadd>
 800af6c:	45b8      	cmp	r8, r7
 800af6e:	4682      	mov	sl, r0
 800af70:	f04f 0300 	mov.w	r3, #0
 800af74:	f04f 020a 	mov.w	r2, #10
 800af78:	4641      	mov	r1, r8
 800af7a:	4620      	mov	r0, r4
 800af7c:	d107      	bne.n	800af8e <_dtoa_r+0xb1e>
 800af7e:	f000 f9cb 	bl	800b318 <__multadd>
 800af82:	4680      	mov	r8, r0
 800af84:	4607      	mov	r7, r0
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	3301      	adds	r3, #1
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	e775      	b.n	800ae7a <_dtoa_r+0xa0a>
 800af8e:	f000 f9c3 	bl	800b318 <__multadd>
 800af92:	4639      	mov	r1, r7
 800af94:	4680      	mov	r8, r0
 800af96:	2300      	movs	r3, #0
 800af98:	220a      	movs	r2, #10
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 f9bc 	bl	800b318 <__multadd>
 800afa0:	4607      	mov	r7, r0
 800afa2:	e7f0      	b.n	800af86 <_dtoa_r+0xb16>
 800afa4:	9b04      	ldr	r3, [sp, #16]
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	9d00      	ldr	r5, [sp, #0]
 800afaa:	4631      	mov	r1, r6
 800afac:	4650      	mov	r0, sl
 800afae:	f7ff f9d7 	bl	800a360 <quorem>
 800afb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800afb6:	9b00      	ldr	r3, [sp, #0]
 800afb8:	f805 9b01 	strb.w	r9, [r5], #1
 800afbc:	1aea      	subs	r2, r5, r3
 800afbe:	9b01      	ldr	r3, [sp, #4]
 800afc0:	4293      	cmp	r3, r2
 800afc2:	dd07      	ble.n	800afd4 <_dtoa_r+0xb64>
 800afc4:	4651      	mov	r1, sl
 800afc6:	2300      	movs	r3, #0
 800afc8:	220a      	movs	r2, #10
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 f9a4 	bl	800b318 <__multadd>
 800afd0:	4682      	mov	sl, r0
 800afd2:	e7ea      	b.n	800afaa <_dtoa_r+0xb3a>
 800afd4:	9b01      	ldr	r3, [sp, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	bfc8      	it	gt
 800afda:	461d      	movgt	r5, r3
 800afdc:	9b00      	ldr	r3, [sp, #0]
 800afde:	bfd8      	it	le
 800afe0:	2501      	movle	r5, #1
 800afe2:	441d      	add	r5, r3
 800afe4:	f04f 0800 	mov.w	r8, #0
 800afe8:	4651      	mov	r1, sl
 800afea:	2201      	movs	r2, #1
 800afec:	4620      	mov	r0, r4
 800afee:	f000 fb41 	bl	800b674 <__lshift>
 800aff2:	4631      	mov	r1, r6
 800aff4:	4682      	mov	sl, r0
 800aff6:	f000 fba9 	bl	800b74c <__mcmp>
 800affa:	2800      	cmp	r0, #0
 800affc:	dc96      	bgt.n	800af2c <_dtoa_r+0xabc>
 800affe:	d102      	bne.n	800b006 <_dtoa_r+0xb96>
 800b000:	f019 0f01 	tst.w	r9, #1
 800b004:	d192      	bne.n	800af2c <_dtoa_r+0xabc>
 800b006:	462b      	mov	r3, r5
 800b008:	461d      	mov	r5, r3
 800b00a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b00e:	2a30      	cmp	r2, #48	; 0x30
 800b010:	d0fa      	beq.n	800b008 <_dtoa_r+0xb98>
 800b012:	e6dd      	b.n	800add0 <_dtoa_r+0x960>
 800b014:	9a00      	ldr	r2, [sp, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d189      	bne.n	800af2e <_dtoa_r+0xabe>
 800b01a:	f10b 0b01 	add.w	fp, fp, #1
 800b01e:	2331      	movs	r3, #49	; 0x31
 800b020:	e796      	b.n	800af50 <_dtoa_r+0xae0>
 800b022:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <_dtoa_r+0xbdc>)
 800b024:	f7ff ba99 	b.w	800a55a <_dtoa_r+0xea>
 800b028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f47f aa6d 	bne.w	800a50a <_dtoa_r+0x9a>
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <_dtoa_r+0xbe0>)
 800b032:	f7ff ba92 	b.w	800a55a <_dtoa_r+0xea>
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	dcb5      	bgt.n	800afa8 <_dtoa_r+0xb38>
 800b03c:	9b07      	ldr	r3, [sp, #28]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	f73f aeb1 	bgt.w	800ada6 <_dtoa_r+0x936>
 800b044:	e7b0      	b.n	800afa8 <_dtoa_r+0xb38>
 800b046:	bf00      	nop
 800b048:	0800d638 	.word	0x0800d638
 800b04c:	0800d598 	.word	0x0800d598
 800b050:	0800d5bc 	.word	0x0800d5bc

0800b054 <_free_r>:
 800b054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b056:	2900      	cmp	r1, #0
 800b058:	d044      	beq.n	800b0e4 <_free_r+0x90>
 800b05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b05e:	9001      	str	r0, [sp, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	f1a1 0404 	sub.w	r4, r1, #4
 800b066:	bfb8      	it	lt
 800b068:	18e4      	addlt	r4, r4, r3
 800b06a:	f000 f8e7 	bl	800b23c <__malloc_lock>
 800b06e:	4a1e      	ldr	r2, [pc, #120]	; (800b0e8 <_free_r+0x94>)
 800b070:	9801      	ldr	r0, [sp, #4]
 800b072:	6813      	ldr	r3, [r2, #0]
 800b074:	b933      	cbnz	r3, 800b084 <_free_r+0x30>
 800b076:	6063      	str	r3, [r4, #4]
 800b078:	6014      	str	r4, [r2, #0]
 800b07a:	b003      	add	sp, #12
 800b07c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b080:	f000 b8e2 	b.w	800b248 <__malloc_unlock>
 800b084:	42a3      	cmp	r3, r4
 800b086:	d908      	bls.n	800b09a <_free_r+0x46>
 800b088:	6825      	ldr	r5, [r4, #0]
 800b08a:	1961      	adds	r1, r4, r5
 800b08c:	428b      	cmp	r3, r1
 800b08e:	bf01      	itttt	eq
 800b090:	6819      	ldreq	r1, [r3, #0]
 800b092:	685b      	ldreq	r3, [r3, #4]
 800b094:	1949      	addeq	r1, r1, r5
 800b096:	6021      	streq	r1, [r4, #0]
 800b098:	e7ed      	b.n	800b076 <_free_r+0x22>
 800b09a:	461a      	mov	r2, r3
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	b10b      	cbz	r3, 800b0a4 <_free_r+0x50>
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	d9fa      	bls.n	800b09a <_free_r+0x46>
 800b0a4:	6811      	ldr	r1, [r2, #0]
 800b0a6:	1855      	adds	r5, r2, r1
 800b0a8:	42a5      	cmp	r5, r4
 800b0aa:	d10b      	bne.n	800b0c4 <_free_r+0x70>
 800b0ac:	6824      	ldr	r4, [r4, #0]
 800b0ae:	4421      	add	r1, r4
 800b0b0:	1854      	adds	r4, r2, r1
 800b0b2:	42a3      	cmp	r3, r4
 800b0b4:	6011      	str	r1, [r2, #0]
 800b0b6:	d1e0      	bne.n	800b07a <_free_r+0x26>
 800b0b8:	681c      	ldr	r4, [r3, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	6053      	str	r3, [r2, #4]
 800b0be:	440c      	add	r4, r1
 800b0c0:	6014      	str	r4, [r2, #0]
 800b0c2:	e7da      	b.n	800b07a <_free_r+0x26>
 800b0c4:	d902      	bls.n	800b0cc <_free_r+0x78>
 800b0c6:	230c      	movs	r3, #12
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	e7d6      	b.n	800b07a <_free_r+0x26>
 800b0cc:	6825      	ldr	r5, [r4, #0]
 800b0ce:	1961      	adds	r1, r4, r5
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	bf04      	itt	eq
 800b0d4:	6819      	ldreq	r1, [r3, #0]
 800b0d6:	685b      	ldreq	r3, [r3, #4]
 800b0d8:	6063      	str	r3, [r4, #4]
 800b0da:	bf04      	itt	eq
 800b0dc:	1949      	addeq	r1, r1, r5
 800b0de:	6021      	streq	r1, [r4, #0]
 800b0e0:	6054      	str	r4, [r2, #4]
 800b0e2:	e7ca      	b.n	800b07a <_free_r+0x26>
 800b0e4:	b003      	add	sp, #12
 800b0e6:	bd30      	pop	{r4, r5, pc}
 800b0e8:	200017d0 	.word	0x200017d0

0800b0ec <malloc>:
 800b0ec:	4b02      	ldr	r3, [pc, #8]	; (800b0f8 <malloc+0xc>)
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	6818      	ldr	r0, [r3, #0]
 800b0f2:	f000 b823 	b.w	800b13c <_malloc_r>
 800b0f6:	bf00      	nop
 800b0f8:	20000068 	.word	0x20000068

0800b0fc <sbrk_aligned>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	4e0e      	ldr	r6, [pc, #56]	; (800b138 <sbrk_aligned+0x3c>)
 800b100:	460c      	mov	r4, r1
 800b102:	6831      	ldr	r1, [r6, #0]
 800b104:	4605      	mov	r5, r0
 800b106:	b911      	cbnz	r1, 800b10e <sbrk_aligned+0x12>
 800b108:	f001 f808 	bl	800c11c <_sbrk_r>
 800b10c:	6030      	str	r0, [r6, #0]
 800b10e:	4621      	mov	r1, r4
 800b110:	4628      	mov	r0, r5
 800b112:	f001 f803 	bl	800c11c <_sbrk_r>
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	d00a      	beq.n	800b130 <sbrk_aligned+0x34>
 800b11a:	1cc4      	adds	r4, r0, #3
 800b11c:	f024 0403 	bic.w	r4, r4, #3
 800b120:	42a0      	cmp	r0, r4
 800b122:	d007      	beq.n	800b134 <sbrk_aligned+0x38>
 800b124:	1a21      	subs	r1, r4, r0
 800b126:	4628      	mov	r0, r5
 800b128:	f000 fff8 	bl	800c11c <_sbrk_r>
 800b12c:	3001      	adds	r0, #1
 800b12e:	d101      	bne.n	800b134 <sbrk_aligned+0x38>
 800b130:	f04f 34ff 	mov.w	r4, #4294967295
 800b134:	4620      	mov	r0, r4
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	200017d4 	.word	0x200017d4

0800b13c <_malloc_r>:
 800b13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b140:	1ccd      	adds	r5, r1, #3
 800b142:	f025 0503 	bic.w	r5, r5, #3
 800b146:	3508      	adds	r5, #8
 800b148:	2d0c      	cmp	r5, #12
 800b14a:	bf38      	it	cc
 800b14c:	250c      	movcc	r5, #12
 800b14e:	2d00      	cmp	r5, #0
 800b150:	4607      	mov	r7, r0
 800b152:	db01      	blt.n	800b158 <_malloc_r+0x1c>
 800b154:	42a9      	cmp	r1, r5
 800b156:	d905      	bls.n	800b164 <_malloc_r+0x28>
 800b158:	230c      	movs	r3, #12
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	2600      	movs	r6, #0
 800b15e:	4630      	mov	r0, r6
 800b160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b164:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b238 <_malloc_r+0xfc>
 800b168:	f000 f868 	bl	800b23c <__malloc_lock>
 800b16c:	f8d8 3000 	ldr.w	r3, [r8]
 800b170:	461c      	mov	r4, r3
 800b172:	bb5c      	cbnz	r4, 800b1cc <_malloc_r+0x90>
 800b174:	4629      	mov	r1, r5
 800b176:	4638      	mov	r0, r7
 800b178:	f7ff ffc0 	bl	800b0fc <sbrk_aligned>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	4604      	mov	r4, r0
 800b180:	d155      	bne.n	800b22e <_malloc_r+0xf2>
 800b182:	f8d8 4000 	ldr.w	r4, [r8]
 800b186:	4626      	mov	r6, r4
 800b188:	2e00      	cmp	r6, #0
 800b18a:	d145      	bne.n	800b218 <_malloc_r+0xdc>
 800b18c:	2c00      	cmp	r4, #0
 800b18e:	d048      	beq.n	800b222 <_malloc_r+0xe6>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	4631      	mov	r1, r6
 800b194:	4638      	mov	r0, r7
 800b196:	eb04 0903 	add.w	r9, r4, r3
 800b19a:	f000 ffbf 	bl	800c11c <_sbrk_r>
 800b19e:	4581      	cmp	r9, r0
 800b1a0:	d13f      	bne.n	800b222 <_malloc_r+0xe6>
 800b1a2:	6821      	ldr	r1, [r4, #0]
 800b1a4:	1a6d      	subs	r5, r5, r1
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	4638      	mov	r0, r7
 800b1aa:	f7ff ffa7 	bl	800b0fc <sbrk_aligned>
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	d037      	beq.n	800b222 <_malloc_r+0xe6>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	442b      	add	r3, r5
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d038      	beq.n	800b232 <_malloc_r+0xf6>
 800b1c0:	685a      	ldr	r2, [r3, #4]
 800b1c2:	42a2      	cmp	r2, r4
 800b1c4:	d12b      	bne.n	800b21e <_malloc_r+0xe2>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	605a      	str	r2, [r3, #4]
 800b1ca:	e00f      	b.n	800b1ec <_malloc_r+0xb0>
 800b1cc:	6822      	ldr	r2, [r4, #0]
 800b1ce:	1b52      	subs	r2, r2, r5
 800b1d0:	d41f      	bmi.n	800b212 <_malloc_r+0xd6>
 800b1d2:	2a0b      	cmp	r2, #11
 800b1d4:	d917      	bls.n	800b206 <_malloc_r+0xca>
 800b1d6:	1961      	adds	r1, r4, r5
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	6025      	str	r5, [r4, #0]
 800b1dc:	bf18      	it	ne
 800b1de:	6059      	strne	r1, [r3, #4]
 800b1e0:	6863      	ldr	r3, [r4, #4]
 800b1e2:	bf08      	it	eq
 800b1e4:	f8c8 1000 	streq.w	r1, [r8]
 800b1e8:	5162      	str	r2, [r4, r5]
 800b1ea:	604b      	str	r3, [r1, #4]
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	f104 060b 	add.w	r6, r4, #11
 800b1f2:	f000 f829 	bl	800b248 <__malloc_unlock>
 800b1f6:	f026 0607 	bic.w	r6, r6, #7
 800b1fa:	1d23      	adds	r3, r4, #4
 800b1fc:	1af2      	subs	r2, r6, r3
 800b1fe:	d0ae      	beq.n	800b15e <_malloc_r+0x22>
 800b200:	1b9b      	subs	r3, r3, r6
 800b202:	50a3      	str	r3, [r4, r2]
 800b204:	e7ab      	b.n	800b15e <_malloc_r+0x22>
 800b206:	42a3      	cmp	r3, r4
 800b208:	6862      	ldr	r2, [r4, #4]
 800b20a:	d1dd      	bne.n	800b1c8 <_malloc_r+0x8c>
 800b20c:	f8c8 2000 	str.w	r2, [r8]
 800b210:	e7ec      	b.n	800b1ec <_malloc_r+0xb0>
 800b212:	4623      	mov	r3, r4
 800b214:	6864      	ldr	r4, [r4, #4]
 800b216:	e7ac      	b.n	800b172 <_malloc_r+0x36>
 800b218:	4634      	mov	r4, r6
 800b21a:	6876      	ldr	r6, [r6, #4]
 800b21c:	e7b4      	b.n	800b188 <_malloc_r+0x4c>
 800b21e:	4613      	mov	r3, r2
 800b220:	e7cc      	b.n	800b1bc <_malloc_r+0x80>
 800b222:	230c      	movs	r3, #12
 800b224:	603b      	str	r3, [r7, #0]
 800b226:	4638      	mov	r0, r7
 800b228:	f000 f80e 	bl	800b248 <__malloc_unlock>
 800b22c:	e797      	b.n	800b15e <_malloc_r+0x22>
 800b22e:	6025      	str	r5, [r4, #0]
 800b230:	e7dc      	b.n	800b1ec <_malloc_r+0xb0>
 800b232:	605b      	str	r3, [r3, #4]
 800b234:	deff      	udf	#255	; 0xff
 800b236:	bf00      	nop
 800b238:	200017d0 	.word	0x200017d0

0800b23c <__malloc_lock>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__malloc_lock+0x8>)
 800b23e:	f7ff b88d 	b.w	800a35c <__retarget_lock_acquire_recursive>
 800b242:	bf00      	nop
 800b244:	200017cc 	.word	0x200017cc

0800b248 <__malloc_unlock>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__malloc_unlock+0x8>)
 800b24a:	f7ff b888 	b.w	800a35e <__retarget_lock_release_recursive>
 800b24e:	bf00      	nop
 800b250:	200017cc 	.word	0x200017cc

0800b254 <_Balloc>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	69c6      	ldr	r6, [r0, #28]
 800b258:	4604      	mov	r4, r0
 800b25a:	460d      	mov	r5, r1
 800b25c:	b976      	cbnz	r6, 800b27c <_Balloc+0x28>
 800b25e:	2010      	movs	r0, #16
 800b260:	f7ff ff44 	bl	800b0ec <malloc>
 800b264:	4602      	mov	r2, r0
 800b266:	61e0      	str	r0, [r4, #28]
 800b268:	b920      	cbnz	r0, 800b274 <_Balloc+0x20>
 800b26a:	4b18      	ldr	r3, [pc, #96]	; (800b2cc <_Balloc+0x78>)
 800b26c:	4818      	ldr	r0, [pc, #96]	; (800b2d0 <_Balloc+0x7c>)
 800b26e:	216b      	movs	r1, #107	; 0x6b
 800b270:	f000 ff72 	bl	800c158 <__assert_func>
 800b274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b278:	6006      	str	r6, [r0, #0]
 800b27a:	60c6      	str	r6, [r0, #12]
 800b27c:	69e6      	ldr	r6, [r4, #28]
 800b27e:	68f3      	ldr	r3, [r6, #12]
 800b280:	b183      	cbz	r3, 800b2a4 <_Balloc+0x50>
 800b282:	69e3      	ldr	r3, [r4, #28]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b28a:	b9b8      	cbnz	r0, 800b2bc <_Balloc+0x68>
 800b28c:	2101      	movs	r1, #1
 800b28e:	fa01 f605 	lsl.w	r6, r1, r5
 800b292:	1d72      	adds	r2, r6, #5
 800b294:	0092      	lsls	r2, r2, #2
 800b296:	4620      	mov	r0, r4
 800b298:	f000 ff7c 	bl	800c194 <_calloc_r>
 800b29c:	b160      	cbz	r0, 800b2b8 <_Balloc+0x64>
 800b29e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2a2:	e00e      	b.n	800b2c2 <_Balloc+0x6e>
 800b2a4:	2221      	movs	r2, #33	; 0x21
 800b2a6:	2104      	movs	r1, #4
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 ff73 	bl	800c194 <_calloc_r>
 800b2ae:	69e3      	ldr	r3, [r4, #28]
 800b2b0:	60f0      	str	r0, [r6, #12]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e4      	bne.n	800b282 <_Balloc+0x2e>
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	6802      	ldr	r2, [r0, #0]
 800b2be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2c8:	e7f7      	b.n	800b2ba <_Balloc+0x66>
 800b2ca:	bf00      	nop
 800b2cc:	0800d5c9 	.word	0x0800d5c9
 800b2d0:	0800d649 	.word	0x0800d649

0800b2d4 <_Bfree>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	69c6      	ldr	r6, [r0, #28]
 800b2d8:	4605      	mov	r5, r0
 800b2da:	460c      	mov	r4, r1
 800b2dc:	b976      	cbnz	r6, 800b2fc <_Bfree+0x28>
 800b2de:	2010      	movs	r0, #16
 800b2e0:	f7ff ff04 	bl	800b0ec <malloc>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	61e8      	str	r0, [r5, #28]
 800b2e8:	b920      	cbnz	r0, 800b2f4 <_Bfree+0x20>
 800b2ea:	4b09      	ldr	r3, [pc, #36]	; (800b310 <_Bfree+0x3c>)
 800b2ec:	4809      	ldr	r0, [pc, #36]	; (800b314 <_Bfree+0x40>)
 800b2ee:	218f      	movs	r1, #143	; 0x8f
 800b2f0:	f000 ff32 	bl	800c158 <__assert_func>
 800b2f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2f8:	6006      	str	r6, [r0, #0]
 800b2fa:	60c6      	str	r6, [r0, #12]
 800b2fc:	b13c      	cbz	r4, 800b30e <_Bfree+0x3a>
 800b2fe:	69eb      	ldr	r3, [r5, #28]
 800b300:	6862      	ldr	r2, [r4, #4]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b308:	6021      	str	r1, [r4, #0]
 800b30a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	0800d5c9 	.word	0x0800d5c9
 800b314:	0800d649 	.word	0x0800d649

0800b318 <__multadd>:
 800b318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	690d      	ldr	r5, [r1, #16]
 800b31e:	4607      	mov	r7, r0
 800b320:	460c      	mov	r4, r1
 800b322:	461e      	mov	r6, r3
 800b324:	f101 0c14 	add.w	ip, r1, #20
 800b328:	2000      	movs	r0, #0
 800b32a:	f8dc 3000 	ldr.w	r3, [ip]
 800b32e:	b299      	uxth	r1, r3
 800b330:	fb02 6101 	mla	r1, r2, r1, r6
 800b334:	0c1e      	lsrs	r6, r3, #16
 800b336:	0c0b      	lsrs	r3, r1, #16
 800b338:	fb02 3306 	mla	r3, r2, r6, r3
 800b33c:	b289      	uxth	r1, r1
 800b33e:	3001      	adds	r0, #1
 800b340:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b344:	4285      	cmp	r5, r0
 800b346:	f84c 1b04 	str.w	r1, [ip], #4
 800b34a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b34e:	dcec      	bgt.n	800b32a <__multadd+0x12>
 800b350:	b30e      	cbz	r6, 800b396 <__multadd+0x7e>
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	42ab      	cmp	r3, r5
 800b356:	dc19      	bgt.n	800b38c <__multadd+0x74>
 800b358:	6861      	ldr	r1, [r4, #4]
 800b35a:	4638      	mov	r0, r7
 800b35c:	3101      	adds	r1, #1
 800b35e:	f7ff ff79 	bl	800b254 <_Balloc>
 800b362:	4680      	mov	r8, r0
 800b364:	b928      	cbnz	r0, 800b372 <__multadd+0x5a>
 800b366:	4602      	mov	r2, r0
 800b368:	4b0c      	ldr	r3, [pc, #48]	; (800b39c <__multadd+0x84>)
 800b36a:	480d      	ldr	r0, [pc, #52]	; (800b3a0 <__multadd+0x88>)
 800b36c:	21ba      	movs	r1, #186	; 0xba
 800b36e:	f000 fef3 	bl	800c158 <__assert_func>
 800b372:	6922      	ldr	r2, [r4, #16]
 800b374:	3202      	adds	r2, #2
 800b376:	f104 010c 	add.w	r1, r4, #12
 800b37a:	0092      	lsls	r2, r2, #2
 800b37c:	300c      	adds	r0, #12
 800b37e:	f000 fedd 	bl	800c13c <memcpy>
 800b382:	4621      	mov	r1, r4
 800b384:	4638      	mov	r0, r7
 800b386:	f7ff ffa5 	bl	800b2d4 <_Bfree>
 800b38a:	4644      	mov	r4, r8
 800b38c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b390:	3501      	adds	r5, #1
 800b392:	615e      	str	r6, [r3, #20]
 800b394:	6125      	str	r5, [r4, #16]
 800b396:	4620      	mov	r0, r4
 800b398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b39c:	0800d638 	.word	0x0800d638
 800b3a0:	0800d649 	.word	0x0800d649

0800b3a4 <__hi0bits>:
 800b3a4:	0c03      	lsrs	r3, r0, #16
 800b3a6:	041b      	lsls	r3, r3, #16
 800b3a8:	b9d3      	cbnz	r3, 800b3e0 <__hi0bits+0x3c>
 800b3aa:	0400      	lsls	r0, r0, #16
 800b3ac:	2310      	movs	r3, #16
 800b3ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3b2:	bf04      	itt	eq
 800b3b4:	0200      	lsleq	r0, r0, #8
 800b3b6:	3308      	addeq	r3, #8
 800b3b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3bc:	bf04      	itt	eq
 800b3be:	0100      	lsleq	r0, r0, #4
 800b3c0:	3304      	addeq	r3, #4
 800b3c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3c6:	bf04      	itt	eq
 800b3c8:	0080      	lsleq	r0, r0, #2
 800b3ca:	3302      	addeq	r3, #2
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	db05      	blt.n	800b3dc <__hi0bits+0x38>
 800b3d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3d4:	f103 0301 	add.w	r3, r3, #1
 800b3d8:	bf08      	it	eq
 800b3da:	2320      	moveq	r3, #32
 800b3dc:	4618      	mov	r0, r3
 800b3de:	4770      	bx	lr
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e7e4      	b.n	800b3ae <__hi0bits+0xa>

0800b3e4 <__lo0bits>:
 800b3e4:	6803      	ldr	r3, [r0, #0]
 800b3e6:	f013 0207 	ands.w	r2, r3, #7
 800b3ea:	d00c      	beq.n	800b406 <__lo0bits+0x22>
 800b3ec:	07d9      	lsls	r1, r3, #31
 800b3ee:	d422      	bmi.n	800b436 <__lo0bits+0x52>
 800b3f0:	079a      	lsls	r2, r3, #30
 800b3f2:	bf49      	itett	mi
 800b3f4:	085b      	lsrmi	r3, r3, #1
 800b3f6:	089b      	lsrpl	r3, r3, #2
 800b3f8:	6003      	strmi	r3, [r0, #0]
 800b3fa:	2201      	movmi	r2, #1
 800b3fc:	bf5c      	itt	pl
 800b3fe:	6003      	strpl	r3, [r0, #0]
 800b400:	2202      	movpl	r2, #2
 800b402:	4610      	mov	r0, r2
 800b404:	4770      	bx	lr
 800b406:	b299      	uxth	r1, r3
 800b408:	b909      	cbnz	r1, 800b40e <__lo0bits+0x2a>
 800b40a:	0c1b      	lsrs	r3, r3, #16
 800b40c:	2210      	movs	r2, #16
 800b40e:	b2d9      	uxtb	r1, r3
 800b410:	b909      	cbnz	r1, 800b416 <__lo0bits+0x32>
 800b412:	3208      	adds	r2, #8
 800b414:	0a1b      	lsrs	r3, r3, #8
 800b416:	0719      	lsls	r1, r3, #28
 800b418:	bf04      	itt	eq
 800b41a:	091b      	lsreq	r3, r3, #4
 800b41c:	3204      	addeq	r2, #4
 800b41e:	0799      	lsls	r1, r3, #30
 800b420:	bf04      	itt	eq
 800b422:	089b      	lsreq	r3, r3, #2
 800b424:	3202      	addeq	r2, #2
 800b426:	07d9      	lsls	r1, r3, #31
 800b428:	d403      	bmi.n	800b432 <__lo0bits+0x4e>
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	f102 0201 	add.w	r2, r2, #1
 800b430:	d003      	beq.n	800b43a <__lo0bits+0x56>
 800b432:	6003      	str	r3, [r0, #0]
 800b434:	e7e5      	b.n	800b402 <__lo0bits+0x1e>
 800b436:	2200      	movs	r2, #0
 800b438:	e7e3      	b.n	800b402 <__lo0bits+0x1e>
 800b43a:	2220      	movs	r2, #32
 800b43c:	e7e1      	b.n	800b402 <__lo0bits+0x1e>
	...

0800b440 <__i2b>:
 800b440:	b510      	push	{r4, lr}
 800b442:	460c      	mov	r4, r1
 800b444:	2101      	movs	r1, #1
 800b446:	f7ff ff05 	bl	800b254 <_Balloc>
 800b44a:	4602      	mov	r2, r0
 800b44c:	b928      	cbnz	r0, 800b45a <__i2b+0x1a>
 800b44e:	4b05      	ldr	r3, [pc, #20]	; (800b464 <__i2b+0x24>)
 800b450:	4805      	ldr	r0, [pc, #20]	; (800b468 <__i2b+0x28>)
 800b452:	f240 1145 	movw	r1, #325	; 0x145
 800b456:	f000 fe7f 	bl	800c158 <__assert_func>
 800b45a:	2301      	movs	r3, #1
 800b45c:	6144      	str	r4, [r0, #20]
 800b45e:	6103      	str	r3, [r0, #16]
 800b460:	bd10      	pop	{r4, pc}
 800b462:	bf00      	nop
 800b464:	0800d638 	.word	0x0800d638
 800b468:	0800d649 	.word	0x0800d649

0800b46c <__multiply>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4691      	mov	r9, r2
 800b472:	690a      	ldr	r2, [r1, #16]
 800b474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b478:	429a      	cmp	r2, r3
 800b47a:	bfb8      	it	lt
 800b47c:	460b      	movlt	r3, r1
 800b47e:	460c      	mov	r4, r1
 800b480:	bfbc      	itt	lt
 800b482:	464c      	movlt	r4, r9
 800b484:	4699      	movlt	r9, r3
 800b486:	6927      	ldr	r7, [r4, #16]
 800b488:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	6861      	ldr	r1, [r4, #4]
 800b490:	eb07 060a 	add.w	r6, r7, sl
 800b494:	42b3      	cmp	r3, r6
 800b496:	b085      	sub	sp, #20
 800b498:	bfb8      	it	lt
 800b49a:	3101      	addlt	r1, #1
 800b49c:	f7ff feda 	bl	800b254 <_Balloc>
 800b4a0:	b930      	cbnz	r0, 800b4b0 <__multiply+0x44>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	4b44      	ldr	r3, [pc, #272]	; (800b5b8 <__multiply+0x14c>)
 800b4a6:	4845      	ldr	r0, [pc, #276]	; (800b5bc <__multiply+0x150>)
 800b4a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b4ac:	f000 fe54 	bl	800c158 <__assert_func>
 800b4b0:	f100 0514 	add.w	r5, r0, #20
 800b4b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	4543      	cmp	r3, r8
 800b4be:	d321      	bcc.n	800b504 <__multiply+0x98>
 800b4c0:	f104 0314 	add.w	r3, r4, #20
 800b4c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4c8:	f109 0314 	add.w	r3, r9, #20
 800b4cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4d0:	9202      	str	r2, [sp, #8]
 800b4d2:	1b3a      	subs	r2, r7, r4
 800b4d4:	3a15      	subs	r2, #21
 800b4d6:	f022 0203 	bic.w	r2, r2, #3
 800b4da:	3204      	adds	r2, #4
 800b4dc:	f104 0115 	add.w	r1, r4, #21
 800b4e0:	428f      	cmp	r7, r1
 800b4e2:	bf38      	it	cc
 800b4e4:	2204      	movcc	r2, #4
 800b4e6:	9201      	str	r2, [sp, #4]
 800b4e8:	9a02      	ldr	r2, [sp, #8]
 800b4ea:	9303      	str	r3, [sp, #12]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d80c      	bhi.n	800b50a <__multiply+0x9e>
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	dd03      	ble.n	800b4fc <__multiply+0x90>
 800b4f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d05b      	beq.n	800b5b4 <__multiply+0x148>
 800b4fc:	6106      	str	r6, [r0, #16]
 800b4fe:	b005      	add	sp, #20
 800b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b504:	f843 2b04 	str.w	r2, [r3], #4
 800b508:	e7d8      	b.n	800b4bc <__multiply+0x50>
 800b50a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b50e:	f1ba 0f00 	cmp.w	sl, #0
 800b512:	d024      	beq.n	800b55e <__multiply+0xf2>
 800b514:	f104 0e14 	add.w	lr, r4, #20
 800b518:	46a9      	mov	r9, r5
 800b51a:	f04f 0c00 	mov.w	ip, #0
 800b51e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b522:	f8d9 1000 	ldr.w	r1, [r9]
 800b526:	fa1f fb82 	uxth.w	fp, r2
 800b52a:	b289      	uxth	r1, r1
 800b52c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b530:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b534:	f8d9 2000 	ldr.w	r2, [r9]
 800b538:	4461      	add	r1, ip
 800b53a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b53e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b542:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b546:	b289      	uxth	r1, r1
 800b548:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b54c:	4577      	cmp	r7, lr
 800b54e:	f849 1b04 	str.w	r1, [r9], #4
 800b552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b556:	d8e2      	bhi.n	800b51e <__multiply+0xb2>
 800b558:	9a01      	ldr	r2, [sp, #4]
 800b55a:	f845 c002 	str.w	ip, [r5, r2]
 800b55e:	9a03      	ldr	r2, [sp, #12]
 800b560:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b564:	3304      	adds	r3, #4
 800b566:	f1b9 0f00 	cmp.w	r9, #0
 800b56a:	d021      	beq.n	800b5b0 <__multiply+0x144>
 800b56c:	6829      	ldr	r1, [r5, #0]
 800b56e:	f104 0c14 	add.w	ip, r4, #20
 800b572:	46ae      	mov	lr, r5
 800b574:	f04f 0a00 	mov.w	sl, #0
 800b578:	f8bc b000 	ldrh.w	fp, [ip]
 800b57c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b580:	fb09 220b 	mla	r2, r9, fp, r2
 800b584:	4452      	add	r2, sl
 800b586:	b289      	uxth	r1, r1
 800b588:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b58c:	f84e 1b04 	str.w	r1, [lr], #4
 800b590:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b598:	f8be 1000 	ldrh.w	r1, [lr]
 800b59c:	fb09 110a 	mla	r1, r9, sl, r1
 800b5a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b5a4:	4567      	cmp	r7, ip
 800b5a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5aa:	d8e5      	bhi.n	800b578 <__multiply+0x10c>
 800b5ac:	9a01      	ldr	r2, [sp, #4]
 800b5ae:	50a9      	str	r1, [r5, r2]
 800b5b0:	3504      	adds	r5, #4
 800b5b2:	e799      	b.n	800b4e8 <__multiply+0x7c>
 800b5b4:	3e01      	subs	r6, #1
 800b5b6:	e79b      	b.n	800b4f0 <__multiply+0x84>
 800b5b8:	0800d638 	.word	0x0800d638
 800b5bc:	0800d649 	.word	0x0800d649

0800b5c0 <__pow5mult>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	f012 0203 	ands.w	r2, r2, #3
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	d007      	beq.n	800b5e0 <__pow5mult+0x20>
 800b5d0:	4c25      	ldr	r4, [pc, #148]	; (800b668 <__pow5mult+0xa8>)
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5da:	f7ff fe9d 	bl	800b318 <__multadd>
 800b5de:	4607      	mov	r7, r0
 800b5e0:	10ad      	asrs	r5, r5, #2
 800b5e2:	d03d      	beq.n	800b660 <__pow5mult+0xa0>
 800b5e4:	69f4      	ldr	r4, [r6, #28]
 800b5e6:	b97c      	cbnz	r4, 800b608 <__pow5mult+0x48>
 800b5e8:	2010      	movs	r0, #16
 800b5ea:	f7ff fd7f 	bl	800b0ec <malloc>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	61f0      	str	r0, [r6, #28]
 800b5f2:	b928      	cbnz	r0, 800b600 <__pow5mult+0x40>
 800b5f4:	4b1d      	ldr	r3, [pc, #116]	; (800b66c <__pow5mult+0xac>)
 800b5f6:	481e      	ldr	r0, [pc, #120]	; (800b670 <__pow5mult+0xb0>)
 800b5f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b5fc:	f000 fdac 	bl	800c158 <__assert_func>
 800b600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b604:	6004      	str	r4, [r0, #0]
 800b606:	60c4      	str	r4, [r0, #12]
 800b608:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b60c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b610:	b94c      	cbnz	r4, 800b626 <__pow5mult+0x66>
 800b612:	f240 2171 	movw	r1, #625	; 0x271
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff ff12 	bl	800b440 <__i2b>
 800b61c:	2300      	movs	r3, #0
 800b61e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b622:	4604      	mov	r4, r0
 800b624:	6003      	str	r3, [r0, #0]
 800b626:	f04f 0900 	mov.w	r9, #0
 800b62a:	07eb      	lsls	r3, r5, #31
 800b62c:	d50a      	bpl.n	800b644 <__pow5mult+0x84>
 800b62e:	4639      	mov	r1, r7
 800b630:	4622      	mov	r2, r4
 800b632:	4630      	mov	r0, r6
 800b634:	f7ff ff1a 	bl	800b46c <__multiply>
 800b638:	4639      	mov	r1, r7
 800b63a:	4680      	mov	r8, r0
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7ff fe49 	bl	800b2d4 <_Bfree>
 800b642:	4647      	mov	r7, r8
 800b644:	106d      	asrs	r5, r5, #1
 800b646:	d00b      	beq.n	800b660 <__pow5mult+0xa0>
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	b938      	cbnz	r0, 800b65c <__pow5mult+0x9c>
 800b64c:	4622      	mov	r2, r4
 800b64e:	4621      	mov	r1, r4
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff ff0b 	bl	800b46c <__multiply>
 800b656:	6020      	str	r0, [r4, #0]
 800b658:	f8c0 9000 	str.w	r9, [r0]
 800b65c:	4604      	mov	r4, r0
 800b65e:	e7e4      	b.n	800b62a <__pow5mult+0x6a>
 800b660:	4638      	mov	r0, r7
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	bf00      	nop
 800b668:	0800d798 	.word	0x0800d798
 800b66c:	0800d5c9 	.word	0x0800d5c9
 800b670:	0800d649 	.word	0x0800d649

0800b674 <__lshift>:
 800b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b678:	460c      	mov	r4, r1
 800b67a:	6849      	ldr	r1, [r1, #4]
 800b67c:	6923      	ldr	r3, [r4, #16]
 800b67e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	4607      	mov	r7, r0
 800b686:	4691      	mov	r9, r2
 800b688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b68c:	f108 0601 	add.w	r6, r8, #1
 800b690:	42b3      	cmp	r3, r6
 800b692:	db0b      	blt.n	800b6ac <__lshift+0x38>
 800b694:	4638      	mov	r0, r7
 800b696:	f7ff fddd 	bl	800b254 <_Balloc>
 800b69a:	4605      	mov	r5, r0
 800b69c:	b948      	cbnz	r0, 800b6b2 <__lshift+0x3e>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4b28      	ldr	r3, [pc, #160]	; (800b744 <__lshift+0xd0>)
 800b6a2:	4829      	ldr	r0, [pc, #164]	; (800b748 <__lshift+0xd4>)
 800b6a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b6a8:	f000 fd56 	bl	800c158 <__assert_func>
 800b6ac:	3101      	adds	r1, #1
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	e7ee      	b.n	800b690 <__lshift+0x1c>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f100 0114 	add.w	r1, r0, #20
 800b6b8:	f100 0210 	add.w	r2, r0, #16
 800b6bc:	4618      	mov	r0, r3
 800b6be:	4553      	cmp	r3, sl
 800b6c0:	db33      	blt.n	800b72a <__lshift+0xb6>
 800b6c2:	6920      	ldr	r0, [r4, #16]
 800b6c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6c8:	f104 0314 	add.w	r3, r4, #20
 800b6cc:	f019 091f 	ands.w	r9, r9, #31
 800b6d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6d8:	d02b      	beq.n	800b732 <__lshift+0xbe>
 800b6da:	f1c9 0e20 	rsb	lr, r9, #32
 800b6de:	468a      	mov	sl, r1
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	fa00 f009 	lsl.w	r0, r0, r9
 800b6e8:	4310      	orrs	r0, r2
 800b6ea:	f84a 0b04 	str.w	r0, [sl], #4
 800b6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f2:	459c      	cmp	ip, r3
 800b6f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6f8:	d8f3      	bhi.n	800b6e2 <__lshift+0x6e>
 800b6fa:	ebac 0304 	sub.w	r3, ip, r4
 800b6fe:	3b15      	subs	r3, #21
 800b700:	f023 0303 	bic.w	r3, r3, #3
 800b704:	3304      	adds	r3, #4
 800b706:	f104 0015 	add.w	r0, r4, #21
 800b70a:	4584      	cmp	ip, r0
 800b70c:	bf38      	it	cc
 800b70e:	2304      	movcc	r3, #4
 800b710:	50ca      	str	r2, [r1, r3]
 800b712:	b10a      	cbz	r2, 800b718 <__lshift+0xa4>
 800b714:	f108 0602 	add.w	r6, r8, #2
 800b718:	3e01      	subs	r6, #1
 800b71a:	4638      	mov	r0, r7
 800b71c:	612e      	str	r6, [r5, #16]
 800b71e:	4621      	mov	r1, r4
 800b720:	f7ff fdd8 	bl	800b2d4 <_Bfree>
 800b724:	4628      	mov	r0, r5
 800b726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b72e:	3301      	adds	r3, #1
 800b730:	e7c5      	b.n	800b6be <__lshift+0x4a>
 800b732:	3904      	subs	r1, #4
 800b734:	f853 2b04 	ldr.w	r2, [r3], #4
 800b738:	f841 2f04 	str.w	r2, [r1, #4]!
 800b73c:	459c      	cmp	ip, r3
 800b73e:	d8f9      	bhi.n	800b734 <__lshift+0xc0>
 800b740:	e7ea      	b.n	800b718 <__lshift+0xa4>
 800b742:	bf00      	nop
 800b744:	0800d638 	.word	0x0800d638
 800b748:	0800d649 	.word	0x0800d649

0800b74c <__mcmp>:
 800b74c:	b530      	push	{r4, r5, lr}
 800b74e:	6902      	ldr	r2, [r0, #16]
 800b750:	690c      	ldr	r4, [r1, #16]
 800b752:	1b12      	subs	r2, r2, r4
 800b754:	d10e      	bne.n	800b774 <__mcmp+0x28>
 800b756:	f100 0314 	add.w	r3, r0, #20
 800b75a:	3114      	adds	r1, #20
 800b75c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b760:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b764:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b768:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b76c:	42a5      	cmp	r5, r4
 800b76e:	d003      	beq.n	800b778 <__mcmp+0x2c>
 800b770:	d305      	bcc.n	800b77e <__mcmp+0x32>
 800b772:	2201      	movs	r2, #1
 800b774:	4610      	mov	r0, r2
 800b776:	bd30      	pop	{r4, r5, pc}
 800b778:	4283      	cmp	r3, r0
 800b77a:	d3f3      	bcc.n	800b764 <__mcmp+0x18>
 800b77c:	e7fa      	b.n	800b774 <__mcmp+0x28>
 800b77e:	f04f 32ff 	mov.w	r2, #4294967295
 800b782:	e7f7      	b.n	800b774 <__mcmp+0x28>

0800b784 <__mdiff>:
 800b784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	4606      	mov	r6, r0
 800b78c:	4611      	mov	r1, r2
 800b78e:	4620      	mov	r0, r4
 800b790:	4690      	mov	r8, r2
 800b792:	f7ff ffdb 	bl	800b74c <__mcmp>
 800b796:	1e05      	subs	r5, r0, #0
 800b798:	d110      	bne.n	800b7bc <__mdiff+0x38>
 800b79a:	4629      	mov	r1, r5
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff fd59 	bl	800b254 <_Balloc>
 800b7a2:	b930      	cbnz	r0, 800b7b2 <__mdiff+0x2e>
 800b7a4:	4b3a      	ldr	r3, [pc, #232]	; (800b890 <__mdiff+0x10c>)
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	f240 2137 	movw	r1, #567	; 0x237
 800b7ac:	4839      	ldr	r0, [pc, #228]	; (800b894 <__mdiff+0x110>)
 800b7ae:	f000 fcd3 	bl	800c158 <__assert_func>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7bc:	bfa4      	itt	ge
 800b7be:	4643      	movge	r3, r8
 800b7c0:	46a0      	movge	r8, r4
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7c8:	bfa6      	itte	ge
 800b7ca:	461c      	movge	r4, r3
 800b7cc:	2500      	movge	r5, #0
 800b7ce:	2501      	movlt	r5, #1
 800b7d0:	f7ff fd40 	bl	800b254 <_Balloc>
 800b7d4:	b920      	cbnz	r0, 800b7e0 <__mdiff+0x5c>
 800b7d6:	4b2e      	ldr	r3, [pc, #184]	; (800b890 <__mdiff+0x10c>)
 800b7d8:	4602      	mov	r2, r0
 800b7da:	f240 2145 	movw	r1, #581	; 0x245
 800b7de:	e7e5      	b.n	800b7ac <__mdiff+0x28>
 800b7e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7e4:	6926      	ldr	r6, [r4, #16]
 800b7e6:	60c5      	str	r5, [r0, #12]
 800b7e8:	f104 0914 	add.w	r9, r4, #20
 800b7ec:	f108 0514 	add.w	r5, r8, #20
 800b7f0:	f100 0e14 	add.w	lr, r0, #20
 800b7f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7fc:	f108 0210 	add.w	r2, r8, #16
 800b800:	46f2      	mov	sl, lr
 800b802:	2100      	movs	r1, #0
 800b804:	f859 3b04 	ldr.w	r3, [r9], #4
 800b808:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b80c:	fa11 f88b 	uxtah	r8, r1, fp
 800b810:	b299      	uxth	r1, r3
 800b812:	0c1b      	lsrs	r3, r3, #16
 800b814:	eba8 0801 	sub.w	r8, r8, r1
 800b818:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b81c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b820:	fa1f f888 	uxth.w	r8, r8
 800b824:	1419      	asrs	r1, r3, #16
 800b826:	454e      	cmp	r6, r9
 800b828:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b82c:	f84a 3b04 	str.w	r3, [sl], #4
 800b830:	d8e8      	bhi.n	800b804 <__mdiff+0x80>
 800b832:	1b33      	subs	r3, r6, r4
 800b834:	3b15      	subs	r3, #21
 800b836:	f023 0303 	bic.w	r3, r3, #3
 800b83a:	3304      	adds	r3, #4
 800b83c:	3415      	adds	r4, #21
 800b83e:	42a6      	cmp	r6, r4
 800b840:	bf38      	it	cc
 800b842:	2304      	movcc	r3, #4
 800b844:	441d      	add	r5, r3
 800b846:	4473      	add	r3, lr
 800b848:	469e      	mov	lr, r3
 800b84a:	462e      	mov	r6, r5
 800b84c:	4566      	cmp	r6, ip
 800b84e:	d30e      	bcc.n	800b86e <__mdiff+0xea>
 800b850:	f10c 0203 	add.w	r2, ip, #3
 800b854:	1b52      	subs	r2, r2, r5
 800b856:	f022 0203 	bic.w	r2, r2, #3
 800b85a:	3d03      	subs	r5, #3
 800b85c:	45ac      	cmp	ip, r5
 800b85e:	bf38      	it	cc
 800b860:	2200      	movcc	r2, #0
 800b862:	4413      	add	r3, r2
 800b864:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b868:	b17a      	cbz	r2, 800b88a <__mdiff+0x106>
 800b86a:	6107      	str	r7, [r0, #16]
 800b86c:	e7a4      	b.n	800b7b8 <__mdiff+0x34>
 800b86e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b872:	fa11 f288 	uxtah	r2, r1, r8
 800b876:	1414      	asrs	r4, r2, #16
 800b878:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b87c:	b292      	uxth	r2, r2
 800b87e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b882:	f84e 2b04 	str.w	r2, [lr], #4
 800b886:	1421      	asrs	r1, r4, #16
 800b888:	e7e0      	b.n	800b84c <__mdiff+0xc8>
 800b88a:	3f01      	subs	r7, #1
 800b88c:	e7ea      	b.n	800b864 <__mdiff+0xe0>
 800b88e:	bf00      	nop
 800b890:	0800d638 	.word	0x0800d638
 800b894:	0800d649 	.word	0x0800d649

0800b898 <__d2b>:
 800b898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b89c:	460f      	mov	r7, r1
 800b89e:	2101      	movs	r1, #1
 800b8a0:	ec59 8b10 	vmov	r8, r9, d0
 800b8a4:	4616      	mov	r6, r2
 800b8a6:	f7ff fcd5 	bl	800b254 <_Balloc>
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	b930      	cbnz	r0, 800b8bc <__d2b+0x24>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	4b24      	ldr	r3, [pc, #144]	; (800b944 <__d2b+0xac>)
 800b8b2:	4825      	ldr	r0, [pc, #148]	; (800b948 <__d2b+0xb0>)
 800b8b4:	f240 310f 	movw	r1, #783	; 0x30f
 800b8b8:	f000 fc4e 	bl	800c158 <__assert_func>
 800b8bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8c4:	bb2d      	cbnz	r5, 800b912 <__d2b+0x7a>
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b8cc:	d026      	beq.n	800b91c <__d2b+0x84>
 800b8ce:	4668      	mov	r0, sp
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	f7ff fd87 	bl	800b3e4 <__lo0bits>
 800b8d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8da:	b1e8      	cbz	r0, 800b918 <__d2b+0x80>
 800b8dc:	f1c0 0320 	rsb	r3, r0, #32
 800b8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	40c2      	lsrs	r2, r0
 800b8e8:	6163      	str	r3, [r4, #20]
 800b8ea:	9201      	str	r2, [sp, #4]
 800b8ec:	9b01      	ldr	r3, [sp, #4]
 800b8ee:	61a3      	str	r3, [r4, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	bf14      	ite	ne
 800b8f4:	2202      	movne	r2, #2
 800b8f6:	2201      	moveq	r2, #1
 800b8f8:	6122      	str	r2, [r4, #16]
 800b8fa:	b1bd      	cbz	r5, 800b92c <__d2b+0x94>
 800b8fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b900:	4405      	add	r5, r0
 800b902:	603d      	str	r5, [r7, #0]
 800b904:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b908:	6030      	str	r0, [r6, #0]
 800b90a:	4620      	mov	r0, r4
 800b90c:	b003      	add	sp, #12
 800b90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b916:	e7d6      	b.n	800b8c6 <__d2b+0x2e>
 800b918:	6161      	str	r1, [r4, #20]
 800b91a:	e7e7      	b.n	800b8ec <__d2b+0x54>
 800b91c:	a801      	add	r0, sp, #4
 800b91e:	f7ff fd61 	bl	800b3e4 <__lo0bits>
 800b922:	9b01      	ldr	r3, [sp, #4]
 800b924:	6163      	str	r3, [r4, #20]
 800b926:	3020      	adds	r0, #32
 800b928:	2201      	movs	r2, #1
 800b92a:	e7e5      	b.n	800b8f8 <__d2b+0x60>
 800b92c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b930:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b934:	6038      	str	r0, [r7, #0]
 800b936:	6918      	ldr	r0, [r3, #16]
 800b938:	f7ff fd34 	bl	800b3a4 <__hi0bits>
 800b93c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b940:	e7e2      	b.n	800b908 <__d2b+0x70>
 800b942:	bf00      	nop
 800b944:	0800d638 	.word	0x0800d638
 800b948:	0800d649 	.word	0x0800d649

0800b94c <__ssputs_r>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	688e      	ldr	r6, [r1, #8]
 800b952:	461f      	mov	r7, r3
 800b954:	42be      	cmp	r6, r7
 800b956:	680b      	ldr	r3, [r1, #0]
 800b958:	4682      	mov	sl, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	4690      	mov	r8, r2
 800b95e:	d82c      	bhi.n	800b9ba <__ssputs_r+0x6e>
 800b960:	898a      	ldrh	r2, [r1, #12]
 800b962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b966:	d026      	beq.n	800b9b6 <__ssputs_r+0x6a>
 800b968:	6965      	ldr	r5, [r4, #20]
 800b96a:	6909      	ldr	r1, [r1, #16]
 800b96c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b970:	eba3 0901 	sub.w	r9, r3, r1
 800b974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b978:	1c7b      	adds	r3, r7, #1
 800b97a:	444b      	add	r3, r9
 800b97c:	106d      	asrs	r5, r5, #1
 800b97e:	429d      	cmp	r5, r3
 800b980:	bf38      	it	cc
 800b982:	461d      	movcc	r5, r3
 800b984:	0553      	lsls	r3, r2, #21
 800b986:	d527      	bpl.n	800b9d8 <__ssputs_r+0x8c>
 800b988:	4629      	mov	r1, r5
 800b98a:	f7ff fbd7 	bl	800b13c <_malloc_r>
 800b98e:	4606      	mov	r6, r0
 800b990:	b360      	cbz	r0, 800b9ec <__ssputs_r+0xa0>
 800b992:	6921      	ldr	r1, [r4, #16]
 800b994:	464a      	mov	r2, r9
 800b996:	f000 fbd1 	bl	800c13c <memcpy>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	6126      	str	r6, [r4, #16]
 800b9a8:	6165      	str	r5, [r4, #20]
 800b9aa:	444e      	add	r6, r9
 800b9ac:	eba5 0509 	sub.w	r5, r5, r9
 800b9b0:	6026      	str	r6, [r4, #0]
 800b9b2:	60a5      	str	r5, [r4, #8]
 800b9b4:	463e      	mov	r6, r7
 800b9b6:	42be      	cmp	r6, r7
 800b9b8:	d900      	bls.n	800b9bc <__ssputs_r+0x70>
 800b9ba:	463e      	mov	r6, r7
 800b9bc:	6820      	ldr	r0, [r4, #0]
 800b9be:	4632      	mov	r2, r6
 800b9c0:	4641      	mov	r1, r8
 800b9c2:	f000 fb6f 	bl	800c0a4 <memmove>
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	1b9b      	subs	r3, r3, r6
 800b9ca:	60a3      	str	r3, [r4, #8]
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	4433      	add	r3, r6
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d8:	462a      	mov	r2, r5
 800b9da:	f000 fc03 	bl	800c1e4 <_realloc_r>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d1e0      	bne.n	800b9a6 <__ssputs_r+0x5a>
 800b9e4:	6921      	ldr	r1, [r4, #16]
 800b9e6:	4650      	mov	r0, sl
 800b9e8:	f7ff fb34 	bl	800b054 <_free_r>
 800b9ec:	230c      	movs	r3, #12
 800b9ee:	f8ca 3000 	str.w	r3, [sl]
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f8:	81a3      	strh	r3, [r4, #12]
 800b9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fe:	e7e9      	b.n	800b9d4 <__ssputs_r+0x88>

0800ba00 <_svfiprintf_r>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4698      	mov	r8, r3
 800ba06:	898b      	ldrh	r3, [r1, #12]
 800ba08:	061b      	lsls	r3, r3, #24
 800ba0a:	b09d      	sub	sp, #116	; 0x74
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	4614      	mov	r4, r2
 800ba12:	d50e      	bpl.n	800ba32 <_svfiprintf_r+0x32>
 800ba14:	690b      	ldr	r3, [r1, #16]
 800ba16:	b963      	cbnz	r3, 800ba32 <_svfiprintf_r+0x32>
 800ba18:	2140      	movs	r1, #64	; 0x40
 800ba1a:	f7ff fb8f 	bl	800b13c <_malloc_r>
 800ba1e:	6028      	str	r0, [r5, #0]
 800ba20:	6128      	str	r0, [r5, #16]
 800ba22:	b920      	cbnz	r0, 800ba2e <_svfiprintf_r+0x2e>
 800ba24:	230c      	movs	r3, #12
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2c:	e0d0      	b.n	800bbd0 <_svfiprintf_r+0x1d0>
 800ba2e:	2340      	movs	r3, #64	; 0x40
 800ba30:	616b      	str	r3, [r5, #20]
 800ba32:	2300      	movs	r3, #0
 800ba34:	9309      	str	r3, [sp, #36]	; 0x24
 800ba36:	2320      	movs	r3, #32
 800ba38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba40:	2330      	movs	r3, #48	; 0x30
 800ba42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbe8 <_svfiprintf_r+0x1e8>
 800ba46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba4a:	f04f 0901 	mov.w	r9, #1
 800ba4e:	4623      	mov	r3, r4
 800ba50:	469a      	mov	sl, r3
 800ba52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba56:	b10a      	cbz	r2, 800ba5c <_svfiprintf_r+0x5c>
 800ba58:	2a25      	cmp	r2, #37	; 0x25
 800ba5a:	d1f9      	bne.n	800ba50 <_svfiprintf_r+0x50>
 800ba5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba60:	d00b      	beq.n	800ba7a <_svfiprintf_r+0x7a>
 800ba62:	465b      	mov	r3, fp
 800ba64:	4622      	mov	r2, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	4638      	mov	r0, r7
 800ba6a:	f7ff ff6f 	bl	800b94c <__ssputs_r>
 800ba6e:	3001      	adds	r0, #1
 800ba70:	f000 80a9 	beq.w	800bbc6 <_svfiprintf_r+0x1c6>
 800ba74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba76:	445a      	add	r2, fp
 800ba78:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 80a1 	beq.w	800bbc6 <_svfiprintf_r+0x1c6>
 800ba84:	2300      	movs	r3, #0
 800ba86:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba8e:	f10a 0a01 	add.w	sl, sl, #1
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	9307      	str	r3, [sp, #28]
 800ba96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba9c:	4654      	mov	r4, sl
 800ba9e:	2205      	movs	r2, #5
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	4850      	ldr	r0, [pc, #320]	; (800bbe8 <_svfiprintf_r+0x1e8>)
 800baa6:	f7f4 fbbb 	bl	8000220 <memchr>
 800baaa:	9a04      	ldr	r2, [sp, #16]
 800baac:	b9d8      	cbnz	r0, 800bae6 <_svfiprintf_r+0xe6>
 800baae:	06d0      	lsls	r0, r2, #27
 800bab0:	bf44      	itt	mi
 800bab2:	2320      	movmi	r3, #32
 800bab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bab8:	0711      	lsls	r1, r2, #28
 800baba:	bf44      	itt	mi
 800babc:	232b      	movmi	r3, #43	; 0x2b
 800babe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac2:	f89a 3000 	ldrb.w	r3, [sl]
 800bac6:	2b2a      	cmp	r3, #42	; 0x2a
 800bac8:	d015      	beq.n	800baf6 <_svfiprintf_r+0xf6>
 800baca:	9a07      	ldr	r2, [sp, #28]
 800bacc:	4654      	mov	r4, sl
 800bace:	2000      	movs	r0, #0
 800bad0:	f04f 0c0a 	mov.w	ip, #10
 800bad4:	4621      	mov	r1, r4
 800bad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bada:	3b30      	subs	r3, #48	; 0x30
 800badc:	2b09      	cmp	r3, #9
 800bade:	d94d      	bls.n	800bb7c <_svfiprintf_r+0x17c>
 800bae0:	b1b0      	cbz	r0, 800bb10 <_svfiprintf_r+0x110>
 800bae2:	9207      	str	r2, [sp, #28]
 800bae4:	e014      	b.n	800bb10 <_svfiprintf_r+0x110>
 800bae6:	eba0 0308 	sub.w	r3, r0, r8
 800baea:	fa09 f303 	lsl.w	r3, r9, r3
 800baee:	4313      	orrs	r3, r2
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	46a2      	mov	sl, r4
 800baf4:	e7d2      	b.n	800ba9c <_svfiprintf_r+0x9c>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	1d19      	adds	r1, r3, #4
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	9103      	str	r1, [sp, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bfbb      	ittet	lt
 800bb02:	425b      	neglt	r3, r3
 800bb04:	f042 0202 	orrlt.w	r2, r2, #2
 800bb08:	9307      	strge	r3, [sp, #28]
 800bb0a:	9307      	strlt	r3, [sp, #28]
 800bb0c:	bfb8      	it	lt
 800bb0e:	9204      	strlt	r2, [sp, #16]
 800bb10:	7823      	ldrb	r3, [r4, #0]
 800bb12:	2b2e      	cmp	r3, #46	; 0x2e
 800bb14:	d10c      	bne.n	800bb30 <_svfiprintf_r+0x130>
 800bb16:	7863      	ldrb	r3, [r4, #1]
 800bb18:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1a:	d134      	bne.n	800bb86 <_svfiprintf_r+0x186>
 800bb1c:	9b03      	ldr	r3, [sp, #12]
 800bb1e:	1d1a      	adds	r2, r3, #4
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	9203      	str	r2, [sp, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bfb8      	it	lt
 800bb28:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb2c:	3402      	adds	r4, #2
 800bb2e:	9305      	str	r3, [sp, #20]
 800bb30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bbf8 <_svfiprintf_r+0x1f8>
 800bb34:	7821      	ldrb	r1, [r4, #0]
 800bb36:	2203      	movs	r2, #3
 800bb38:	4650      	mov	r0, sl
 800bb3a:	f7f4 fb71 	bl	8000220 <memchr>
 800bb3e:	b138      	cbz	r0, 800bb50 <_svfiprintf_r+0x150>
 800bb40:	9b04      	ldr	r3, [sp, #16]
 800bb42:	eba0 000a 	sub.w	r0, r0, sl
 800bb46:	2240      	movs	r2, #64	; 0x40
 800bb48:	4082      	lsls	r2, r0
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	3401      	adds	r4, #1
 800bb4e:	9304      	str	r3, [sp, #16]
 800bb50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb54:	4825      	ldr	r0, [pc, #148]	; (800bbec <_svfiprintf_r+0x1ec>)
 800bb56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb5a:	2206      	movs	r2, #6
 800bb5c:	f7f4 fb60 	bl	8000220 <memchr>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d038      	beq.n	800bbd6 <_svfiprintf_r+0x1d6>
 800bb64:	4b22      	ldr	r3, [pc, #136]	; (800bbf0 <_svfiprintf_r+0x1f0>)
 800bb66:	bb1b      	cbnz	r3, 800bbb0 <_svfiprintf_r+0x1b0>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	3307      	adds	r3, #7
 800bb6c:	f023 0307 	bic.w	r3, r3, #7
 800bb70:	3308      	adds	r3, #8
 800bb72:	9303      	str	r3, [sp, #12]
 800bb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb76:	4433      	add	r3, r6
 800bb78:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7a:	e768      	b.n	800ba4e <_svfiprintf_r+0x4e>
 800bb7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb80:	460c      	mov	r4, r1
 800bb82:	2001      	movs	r0, #1
 800bb84:	e7a6      	b.n	800bad4 <_svfiprintf_r+0xd4>
 800bb86:	2300      	movs	r3, #0
 800bb88:	3401      	adds	r4, #1
 800bb8a:	9305      	str	r3, [sp, #20]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f04f 0c0a 	mov.w	ip, #10
 800bb92:	4620      	mov	r0, r4
 800bb94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb98:	3a30      	subs	r2, #48	; 0x30
 800bb9a:	2a09      	cmp	r2, #9
 800bb9c:	d903      	bls.n	800bba6 <_svfiprintf_r+0x1a6>
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d0c6      	beq.n	800bb30 <_svfiprintf_r+0x130>
 800bba2:	9105      	str	r1, [sp, #20]
 800bba4:	e7c4      	b.n	800bb30 <_svfiprintf_r+0x130>
 800bba6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbaa:	4604      	mov	r4, r0
 800bbac:	2301      	movs	r3, #1
 800bbae:	e7f0      	b.n	800bb92 <_svfiprintf_r+0x192>
 800bbb0:	ab03      	add	r3, sp, #12
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <_svfiprintf_r+0x1f4>)
 800bbb8:	a904      	add	r1, sp, #16
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f7fd fcc0 	bl	8009540 <_printf_float>
 800bbc0:	1c42      	adds	r2, r0, #1
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	d1d6      	bne.n	800bb74 <_svfiprintf_r+0x174>
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	065b      	lsls	r3, r3, #25
 800bbca:	f53f af2d 	bmi.w	800ba28 <_svfiprintf_r+0x28>
 800bbce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd0:	b01d      	add	sp, #116	; 0x74
 800bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd6:	ab03      	add	r3, sp, #12
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <_svfiprintf_r+0x1f4>)
 800bbde:	a904      	add	r1, sp, #16
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f7fd ff51 	bl	8009a88 <_printf_i>
 800bbe6:	e7eb      	b.n	800bbc0 <_svfiprintf_r+0x1c0>
 800bbe8:	0800d7a4 	.word	0x0800d7a4
 800bbec:	0800d7ae 	.word	0x0800d7ae
 800bbf0:	08009541 	.word	0x08009541
 800bbf4:	0800b94d 	.word	0x0800b94d
 800bbf8:	0800d7aa 	.word	0x0800d7aa

0800bbfc <__sfputc_r>:
 800bbfc:	6893      	ldr	r3, [r2, #8]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	b410      	push	{r4}
 800bc04:	6093      	str	r3, [r2, #8]
 800bc06:	da08      	bge.n	800bc1a <__sfputc_r+0x1e>
 800bc08:	6994      	ldr	r4, [r2, #24]
 800bc0a:	42a3      	cmp	r3, r4
 800bc0c:	db01      	blt.n	800bc12 <__sfputc_r+0x16>
 800bc0e:	290a      	cmp	r1, #10
 800bc10:	d103      	bne.n	800bc1a <__sfputc_r+0x1e>
 800bc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc16:	f7fe ba90 	b.w	800a13a <__swbuf_r>
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	1c58      	adds	r0, r3, #1
 800bc1e:	6010      	str	r0, [r2, #0]
 800bc20:	7019      	strb	r1, [r3, #0]
 800bc22:	4608      	mov	r0, r1
 800bc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <__sfputs_r>:
 800bc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	460f      	mov	r7, r1
 800bc30:	4614      	mov	r4, r2
 800bc32:	18d5      	adds	r5, r2, r3
 800bc34:	42ac      	cmp	r4, r5
 800bc36:	d101      	bne.n	800bc3c <__sfputs_r+0x12>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e007      	b.n	800bc4c <__sfputs_r+0x22>
 800bc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc40:	463a      	mov	r2, r7
 800bc42:	4630      	mov	r0, r6
 800bc44:	f7ff ffda 	bl	800bbfc <__sfputc_r>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d1f3      	bne.n	800bc34 <__sfputs_r+0xa>
 800bc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc50 <_vfiprintf_r>:
 800bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	460d      	mov	r5, r1
 800bc56:	b09d      	sub	sp, #116	; 0x74
 800bc58:	4614      	mov	r4, r2
 800bc5a:	4698      	mov	r8, r3
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	b118      	cbz	r0, 800bc68 <_vfiprintf_r+0x18>
 800bc60:	6a03      	ldr	r3, [r0, #32]
 800bc62:	b90b      	cbnz	r3, 800bc68 <_vfiprintf_r+0x18>
 800bc64:	f7fe f8ac 	bl	8009dc0 <__sinit>
 800bc68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc6a:	07d9      	lsls	r1, r3, #31
 800bc6c:	d405      	bmi.n	800bc7a <_vfiprintf_r+0x2a>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	059a      	lsls	r2, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_vfiprintf_r+0x2a>
 800bc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc76:	f7fe fb71 	bl	800a35c <__retarget_lock_acquire_recursive>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	071b      	lsls	r3, r3, #28
 800bc7e:	d501      	bpl.n	800bc84 <_vfiprintf_r+0x34>
 800bc80:	692b      	ldr	r3, [r5, #16]
 800bc82:	b99b      	cbnz	r3, 800bcac <_vfiprintf_r+0x5c>
 800bc84:	4629      	mov	r1, r5
 800bc86:	4630      	mov	r0, r6
 800bc88:	f7fe fa94 	bl	800a1b4 <__swsetup_r>
 800bc8c:	b170      	cbz	r0, 800bcac <_vfiprintf_r+0x5c>
 800bc8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc90:	07dc      	lsls	r4, r3, #31
 800bc92:	d504      	bpl.n	800bc9e <_vfiprintf_r+0x4e>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	b01d      	add	sp, #116	; 0x74
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	89ab      	ldrh	r3, [r5, #12]
 800bca0:	0598      	lsls	r0, r3, #22
 800bca2:	d4f7      	bmi.n	800bc94 <_vfiprintf_r+0x44>
 800bca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bca6:	f7fe fb5a 	bl	800a35e <__retarget_lock_release_recursive>
 800bcaa:	e7f3      	b.n	800bc94 <_vfiprintf_r+0x44>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb0:	2320      	movs	r3, #32
 800bcb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcba:	2330      	movs	r3, #48	; 0x30
 800bcbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be70 <_vfiprintf_r+0x220>
 800bcc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcc4:	f04f 0901 	mov.w	r9, #1
 800bcc8:	4623      	mov	r3, r4
 800bcca:	469a      	mov	sl, r3
 800bccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcd0:	b10a      	cbz	r2, 800bcd6 <_vfiprintf_r+0x86>
 800bcd2:	2a25      	cmp	r2, #37	; 0x25
 800bcd4:	d1f9      	bne.n	800bcca <_vfiprintf_r+0x7a>
 800bcd6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcda:	d00b      	beq.n	800bcf4 <_vfiprintf_r+0xa4>
 800bcdc:	465b      	mov	r3, fp
 800bcde:	4622      	mov	r2, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ffa1 	bl	800bc2a <__sfputs_r>
 800bce8:	3001      	adds	r0, #1
 800bcea:	f000 80a9 	beq.w	800be40 <_vfiprintf_r+0x1f0>
 800bcee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcf0:	445a      	add	r2, fp
 800bcf2:	9209      	str	r2, [sp, #36]	; 0x24
 800bcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 80a1 	beq.w	800be40 <_vfiprintf_r+0x1f0>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f04f 32ff 	mov.w	r2, #4294967295
 800bd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd08:	f10a 0a01 	add.w	sl, sl, #1
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd14:	931a      	str	r3, [sp, #104]	; 0x68
 800bd16:	4654      	mov	r4, sl
 800bd18:	2205      	movs	r2, #5
 800bd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1e:	4854      	ldr	r0, [pc, #336]	; (800be70 <_vfiprintf_r+0x220>)
 800bd20:	f7f4 fa7e 	bl	8000220 <memchr>
 800bd24:	9a04      	ldr	r2, [sp, #16]
 800bd26:	b9d8      	cbnz	r0, 800bd60 <_vfiprintf_r+0x110>
 800bd28:	06d1      	lsls	r1, r2, #27
 800bd2a:	bf44      	itt	mi
 800bd2c:	2320      	movmi	r3, #32
 800bd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd32:	0713      	lsls	r3, r2, #28
 800bd34:	bf44      	itt	mi
 800bd36:	232b      	movmi	r3, #43	; 0x2b
 800bd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd40:	2b2a      	cmp	r3, #42	; 0x2a
 800bd42:	d015      	beq.n	800bd70 <_vfiprintf_r+0x120>
 800bd44:	9a07      	ldr	r2, [sp, #28]
 800bd46:	4654      	mov	r4, sl
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd54:	3b30      	subs	r3, #48	; 0x30
 800bd56:	2b09      	cmp	r3, #9
 800bd58:	d94d      	bls.n	800bdf6 <_vfiprintf_r+0x1a6>
 800bd5a:	b1b0      	cbz	r0, 800bd8a <_vfiprintf_r+0x13a>
 800bd5c:	9207      	str	r2, [sp, #28]
 800bd5e:	e014      	b.n	800bd8a <_vfiprintf_r+0x13a>
 800bd60:	eba0 0308 	sub.w	r3, r0, r8
 800bd64:	fa09 f303 	lsl.w	r3, r9, r3
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	9304      	str	r3, [sp, #16]
 800bd6c:	46a2      	mov	sl, r4
 800bd6e:	e7d2      	b.n	800bd16 <_vfiprintf_r+0xc6>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d19      	adds	r1, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9103      	str	r1, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfbb      	ittet	lt
 800bd7c:	425b      	neglt	r3, r3
 800bd7e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd82:	9307      	strge	r3, [sp, #28]
 800bd84:	9307      	strlt	r3, [sp, #28]
 800bd86:	bfb8      	it	lt
 800bd88:	9204      	strlt	r2, [sp, #16]
 800bd8a:	7823      	ldrb	r3, [r4, #0]
 800bd8c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd8e:	d10c      	bne.n	800bdaa <_vfiprintf_r+0x15a>
 800bd90:	7863      	ldrb	r3, [r4, #1]
 800bd92:	2b2a      	cmp	r3, #42	; 0x2a
 800bd94:	d134      	bne.n	800be00 <_vfiprintf_r+0x1b0>
 800bd96:	9b03      	ldr	r3, [sp, #12]
 800bd98:	1d1a      	adds	r2, r3, #4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	9203      	str	r2, [sp, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	bfb8      	it	lt
 800bda2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bda6:	3402      	adds	r4, #2
 800bda8:	9305      	str	r3, [sp, #20]
 800bdaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be80 <_vfiprintf_r+0x230>
 800bdae:	7821      	ldrb	r1, [r4, #0]
 800bdb0:	2203      	movs	r2, #3
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	f7f4 fa34 	bl	8000220 <memchr>
 800bdb8:	b138      	cbz	r0, 800bdca <_vfiprintf_r+0x17a>
 800bdba:	9b04      	ldr	r3, [sp, #16]
 800bdbc:	eba0 000a 	sub.w	r0, r0, sl
 800bdc0:	2240      	movs	r2, #64	; 0x40
 800bdc2:	4082      	lsls	r2, r0
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	3401      	adds	r4, #1
 800bdc8:	9304      	str	r3, [sp, #16]
 800bdca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdce:	4829      	ldr	r0, [pc, #164]	; (800be74 <_vfiprintf_r+0x224>)
 800bdd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdd4:	2206      	movs	r2, #6
 800bdd6:	f7f4 fa23 	bl	8000220 <memchr>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d03f      	beq.n	800be5e <_vfiprintf_r+0x20e>
 800bdde:	4b26      	ldr	r3, [pc, #152]	; (800be78 <_vfiprintf_r+0x228>)
 800bde0:	bb1b      	cbnz	r3, 800be2a <_vfiprintf_r+0x1da>
 800bde2:	9b03      	ldr	r3, [sp, #12]
 800bde4:	3307      	adds	r3, #7
 800bde6:	f023 0307 	bic.w	r3, r3, #7
 800bdea:	3308      	adds	r3, #8
 800bdec:	9303      	str	r3, [sp, #12]
 800bdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf0:	443b      	add	r3, r7
 800bdf2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf4:	e768      	b.n	800bcc8 <_vfiprintf_r+0x78>
 800bdf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdfa:	460c      	mov	r4, r1
 800bdfc:	2001      	movs	r0, #1
 800bdfe:	e7a6      	b.n	800bd4e <_vfiprintf_r+0xfe>
 800be00:	2300      	movs	r3, #0
 800be02:	3401      	adds	r4, #1
 800be04:	9305      	str	r3, [sp, #20]
 800be06:	4619      	mov	r1, r3
 800be08:	f04f 0c0a 	mov.w	ip, #10
 800be0c:	4620      	mov	r0, r4
 800be0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be12:	3a30      	subs	r2, #48	; 0x30
 800be14:	2a09      	cmp	r2, #9
 800be16:	d903      	bls.n	800be20 <_vfiprintf_r+0x1d0>
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d0c6      	beq.n	800bdaa <_vfiprintf_r+0x15a>
 800be1c:	9105      	str	r1, [sp, #20]
 800be1e:	e7c4      	b.n	800bdaa <_vfiprintf_r+0x15a>
 800be20:	fb0c 2101 	mla	r1, ip, r1, r2
 800be24:	4604      	mov	r4, r0
 800be26:	2301      	movs	r3, #1
 800be28:	e7f0      	b.n	800be0c <_vfiprintf_r+0x1bc>
 800be2a:	ab03      	add	r3, sp, #12
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	462a      	mov	r2, r5
 800be30:	4b12      	ldr	r3, [pc, #72]	; (800be7c <_vfiprintf_r+0x22c>)
 800be32:	a904      	add	r1, sp, #16
 800be34:	4630      	mov	r0, r6
 800be36:	f7fd fb83 	bl	8009540 <_printf_float>
 800be3a:	4607      	mov	r7, r0
 800be3c:	1c78      	adds	r0, r7, #1
 800be3e:	d1d6      	bne.n	800bdee <_vfiprintf_r+0x19e>
 800be40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be42:	07d9      	lsls	r1, r3, #31
 800be44:	d405      	bmi.n	800be52 <_vfiprintf_r+0x202>
 800be46:	89ab      	ldrh	r3, [r5, #12]
 800be48:	059a      	lsls	r2, r3, #22
 800be4a:	d402      	bmi.n	800be52 <_vfiprintf_r+0x202>
 800be4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be4e:	f7fe fa86 	bl	800a35e <__retarget_lock_release_recursive>
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	065b      	lsls	r3, r3, #25
 800be56:	f53f af1d 	bmi.w	800bc94 <_vfiprintf_r+0x44>
 800be5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be5c:	e71c      	b.n	800bc98 <_vfiprintf_r+0x48>
 800be5e:	ab03      	add	r3, sp, #12
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	462a      	mov	r2, r5
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <_vfiprintf_r+0x22c>)
 800be66:	a904      	add	r1, sp, #16
 800be68:	4630      	mov	r0, r6
 800be6a:	f7fd fe0d 	bl	8009a88 <_printf_i>
 800be6e:	e7e4      	b.n	800be3a <_vfiprintf_r+0x1ea>
 800be70:	0800d7a4 	.word	0x0800d7a4
 800be74:	0800d7ae 	.word	0x0800d7ae
 800be78:	08009541 	.word	0x08009541
 800be7c:	0800bc2b 	.word	0x0800bc2b
 800be80:	0800d7aa 	.word	0x0800d7aa

0800be84 <__sflush_r>:
 800be84:	898a      	ldrh	r2, [r1, #12]
 800be86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be8a:	4605      	mov	r5, r0
 800be8c:	0710      	lsls	r0, r2, #28
 800be8e:	460c      	mov	r4, r1
 800be90:	d458      	bmi.n	800bf44 <__sflush_r+0xc0>
 800be92:	684b      	ldr	r3, [r1, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	dc05      	bgt.n	800bea4 <__sflush_r+0x20>
 800be98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	dc02      	bgt.n	800bea4 <__sflush_r+0x20>
 800be9e:	2000      	movs	r0, #0
 800bea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bea6:	2e00      	cmp	r6, #0
 800bea8:	d0f9      	beq.n	800be9e <__sflush_r+0x1a>
 800beaa:	2300      	movs	r3, #0
 800beac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800beb0:	682f      	ldr	r7, [r5, #0]
 800beb2:	6a21      	ldr	r1, [r4, #32]
 800beb4:	602b      	str	r3, [r5, #0]
 800beb6:	d032      	beq.n	800bf1e <__sflush_r+0x9a>
 800beb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	075a      	lsls	r2, r3, #29
 800bebe:	d505      	bpl.n	800becc <__sflush_r+0x48>
 800bec0:	6863      	ldr	r3, [r4, #4]
 800bec2:	1ac0      	subs	r0, r0, r3
 800bec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bec6:	b10b      	cbz	r3, 800becc <__sflush_r+0x48>
 800bec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beca:	1ac0      	subs	r0, r0, r3
 800becc:	2300      	movs	r3, #0
 800bece:	4602      	mov	r2, r0
 800bed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bed2:	6a21      	ldr	r1, [r4, #32]
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b0      	blx	r6
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	d106      	bne.n	800beec <__sflush_r+0x68>
 800bede:	6829      	ldr	r1, [r5, #0]
 800bee0:	291d      	cmp	r1, #29
 800bee2:	d82b      	bhi.n	800bf3c <__sflush_r+0xb8>
 800bee4:	4a29      	ldr	r2, [pc, #164]	; (800bf8c <__sflush_r+0x108>)
 800bee6:	410a      	asrs	r2, r1
 800bee8:	07d6      	lsls	r6, r2, #31
 800beea:	d427      	bmi.n	800bf3c <__sflush_r+0xb8>
 800beec:	2200      	movs	r2, #0
 800beee:	6062      	str	r2, [r4, #4]
 800bef0:	04d9      	lsls	r1, r3, #19
 800bef2:	6922      	ldr	r2, [r4, #16]
 800bef4:	6022      	str	r2, [r4, #0]
 800bef6:	d504      	bpl.n	800bf02 <__sflush_r+0x7e>
 800bef8:	1c42      	adds	r2, r0, #1
 800befa:	d101      	bne.n	800bf00 <__sflush_r+0x7c>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b903      	cbnz	r3, 800bf02 <__sflush_r+0x7e>
 800bf00:	6560      	str	r0, [r4, #84]	; 0x54
 800bf02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf04:	602f      	str	r7, [r5, #0]
 800bf06:	2900      	cmp	r1, #0
 800bf08:	d0c9      	beq.n	800be9e <__sflush_r+0x1a>
 800bf0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf0e:	4299      	cmp	r1, r3
 800bf10:	d002      	beq.n	800bf18 <__sflush_r+0x94>
 800bf12:	4628      	mov	r0, r5
 800bf14:	f7ff f89e 	bl	800b054 <_free_r>
 800bf18:	2000      	movs	r0, #0
 800bf1a:	6360      	str	r0, [r4, #52]	; 0x34
 800bf1c:	e7c0      	b.n	800bea0 <__sflush_r+0x1c>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	4628      	mov	r0, r5
 800bf22:	47b0      	blx	r6
 800bf24:	1c41      	adds	r1, r0, #1
 800bf26:	d1c8      	bne.n	800beba <__sflush_r+0x36>
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d0c5      	beq.n	800beba <__sflush_r+0x36>
 800bf2e:	2b1d      	cmp	r3, #29
 800bf30:	d001      	beq.n	800bf36 <__sflush_r+0xb2>
 800bf32:	2b16      	cmp	r3, #22
 800bf34:	d101      	bne.n	800bf3a <__sflush_r+0xb6>
 800bf36:	602f      	str	r7, [r5, #0]
 800bf38:	e7b1      	b.n	800be9e <__sflush_r+0x1a>
 800bf3a:	89a3      	ldrh	r3, [r4, #12]
 800bf3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf40:	81a3      	strh	r3, [r4, #12]
 800bf42:	e7ad      	b.n	800bea0 <__sflush_r+0x1c>
 800bf44:	690f      	ldr	r7, [r1, #16]
 800bf46:	2f00      	cmp	r7, #0
 800bf48:	d0a9      	beq.n	800be9e <__sflush_r+0x1a>
 800bf4a:	0793      	lsls	r3, r2, #30
 800bf4c:	680e      	ldr	r6, [r1, #0]
 800bf4e:	bf08      	it	eq
 800bf50:	694b      	ldreq	r3, [r1, #20]
 800bf52:	600f      	str	r7, [r1, #0]
 800bf54:	bf18      	it	ne
 800bf56:	2300      	movne	r3, #0
 800bf58:	eba6 0807 	sub.w	r8, r6, r7
 800bf5c:	608b      	str	r3, [r1, #8]
 800bf5e:	f1b8 0f00 	cmp.w	r8, #0
 800bf62:	dd9c      	ble.n	800be9e <__sflush_r+0x1a>
 800bf64:	6a21      	ldr	r1, [r4, #32]
 800bf66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf68:	4643      	mov	r3, r8
 800bf6a:	463a      	mov	r2, r7
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b0      	blx	r6
 800bf70:	2800      	cmp	r0, #0
 800bf72:	dc06      	bgt.n	800bf82 <__sflush_r+0xfe>
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	e78e      	b.n	800bea0 <__sflush_r+0x1c>
 800bf82:	4407      	add	r7, r0
 800bf84:	eba8 0800 	sub.w	r8, r8, r0
 800bf88:	e7e9      	b.n	800bf5e <__sflush_r+0xda>
 800bf8a:	bf00      	nop
 800bf8c:	dfbffffe 	.word	0xdfbffffe

0800bf90 <_fflush_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	690b      	ldr	r3, [r1, #16]
 800bf94:	4605      	mov	r5, r0
 800bf96:	460c      	mov	r4, r1
 800bf98:	b913      	cbnz	r3, 800bfa0 <_fflush_r+0x10>
 800bf9a:	2500      	movs	r5, #0
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	b118      	cbz	r0, 800bfaa <_fflush_r+0x1a>
 800bfa2:	6a03      	ldr	r3, [r0, #32]
 800bfa4:	b90b      	cbnz	r3, 800bfaa <_fflush_r+0x1a>
 800bfa6:	f7fd ff0b 	bl	8009dc0 <__sinit>
 800bfaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0f3      	beq.n	800bf9a <_fflush_r+0xa>
 800bfb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfb4:	07d0      	lsls	r0, r2, #31
 800bfb6:	d404      	bmi.n	800bfc2 <_fflush_r+0x32>
 800bfb8:	0599      	lsls	r1, r3, #22
 800bfba:	d402      	bmi.n	800bfc2 <_fflush_r+0x32>
 800bfbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfbe:	f7fe f9cd 	bl	800a35c <__retarget_lock_acquire_recursive>
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	f7ff ff5d 	bl	800be84 <__sflush_r>
 800bfca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfcc:	07da      	lsls	r2, r3, #31
 800bfce:	4605      	mov	r5, r0
 800bfd0:	d4e4      	bmi.n	800bf9c <_fflush_r+0xc>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	059b      	lsls	r3, r3, #22
 800bfd6:	d4e1      	bmi.n	800bf9c <_fflush_r+0xc>
 800bfd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfda:	f7fe f9c0 	bl	800a35e <__retarget_lock_release_recursive>
 800bfde:	e7dd      	b.n	800bf9c <_fflush_r+0xc>

0800bfe0 <__swhatbuf_r>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	b096      	sub	sp, #88	; 0x58
 800bfec:	4615      	mov	r5, r2
 800bfee:	461e      	mov	r6, r3
 800bff0:	da0d      	bge.n	800c00e <__swhatbuf_r+0x2e>
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bff8:	f04f 0100 	mov.w	r1, #0
 800bffc:	bf0c      	ite	eq
 800bffe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c002:	2340      	movne	r3, #64	; 0x40
 800c004:	2000      	movs	r0, #0
 800c006:	6031      	str	r1, [r6, #0]
 800c008:	602b      	str	r3, [r5, #0]
 800c00a:	b016      	add	sp, #88	; 0x58
 800c00c:	bd70      	pop	{r4, r5, r6, pc}
 800c00e:	466a      	mov	r2, sp
 800c010:	f000 f862 	bl	800c0d8 <_fstat_r>
 800c014:	2800      	cmp	r0, #0
 800c016:	dbec      	blt.n	800bff2 <__swhatbuf_r+0x12>
 800c018:	9901      	ldr	r1, [sp, #4]
 800c01a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c01e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c022:	4259      	negs	r1, r3
 800c024:	4159      	adcs	r1, r3
 800c026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c02a:	e7eb      	b.n	800c004 <__swhatbuf_r+0x24>

0800c02c <__smakebuf_r>:
 800c02c:	898b      	ldrh	r3, [r1, #12]
 800c02e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c030:	079d      	lsls	r5, r3, #30
 800c032:	4606      	mov	r6, r0
 800c034:	460c      	mov	r4, r1
 800c036:	d507      	bpl.n	800c048 <__smakebuf_r+0x1c>
 800c038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	6123      	str	r3, [r4, #16]
 800c040:	2301      	movs	r3, #1
 800c042:	6163      	str	r3, [r4, #20]
 800c044:	b002      	add	sp, #8
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	ab01      	add	r3, sp, #4
 800c04a:	466a      	mov	r2, sp
 800c04c:	f7ff ffc8 	bl	800bfe0 <__swhatbuf_r>
 800c050:	9900      	ldr	r1, [sp, #0]
 800c052:	4605      	mov	r5, r0
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff f871 	bl	800b13c <_malloc_r>
 800c05a:	b948      	cbnz	r0, 800c070 <__smakebuf_r+0x44>
 800c05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c060:	059a      	lsls	r2, r3, #22
 800c062:	d4ef      	bmi.n	800c044 <__smakebuf_r+0x18>
 800c064:	f023 0303 	bic.w	r3, r3, #3
 800c068:	f043 0302 	orr.w	r3, r3, #2
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	e7e3      	b.n	800c038 <__smakebuf_r+0xc>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	6020      	str	r0, [r4, #0]
 800c074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c078:	81a3      	strh	r3, [r4, #12]
 800c07a:	9b00      	ldr	r3, [sp, #0]
 800c07c:	6163      	str	r3, [r4, #20]
 800c07e:	9b01      	ldr	r3, [sp, #4]
 800c080:	6120      	str	r0, [r4, #16]
 800c082:	b15b      	cbz	r3, 800c09c <__smakebuf_r+0x70>
 800c084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c088:	4630      	mov	r0, r6
 800c08a:	f000 f837 	bl	800c0fc <_isatty_r>
 800c08e:	b128      	cbz	r0, 800c09c <__smakebuf_r+0x70>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	f023 0303 	bic.w	r3, r3, #3
 800c096:	f043 0301 	orr.w	r3, r3, #1
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	431d      	orrs	r5, r3
 800c0a0:	81a5      	strh	r5, [r4, #12]
 800c0a2:	e7cf      	b.n	800c044 <__smakebuf_r+0x18>

0800c0a4 <memmove>:
 800c0a4:	4288      	cmp	r0, r1
 800c0a6:	b510      	push	{r4, lr}
 800c0a8:	eb01 0402 	add.w	r4, r1, r2
 800c0ac:	d902      	bls.n	800c0b4 <memmove+0x10>
 800c0ae:	4284      	cmp	r4, r0
 800c0b0:	4623      	mov	r3, r4
 800c0b2:	d807      	bhi.n	800c0c4 <memmove+0x20>
 800c0b4:	1e43      	subs	r3, r0, #1
 800c0b6:	42a1      	cmp	r1, r4
 800c0b8:	d008      	beq.n	800c0cc <memmove+0x28>
 800c0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0c2:	e7f8      	b.n	800c0b6 <memmove+0x12>
 800c0c4:	4402      	add	r2, r0
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	428a      	cmp	r2, r1
 800c0ca:	d100      	bne.n	800c0ce <memmove+0x2a>
 800c0cc:	bd10      	pop	{r4, pc}
 800c0ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0d6:	e7f7      	b.n	800c0c8 <memmove+0x24>

0800c0d8 <_fstat_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	; (800c0f8 <_fstat_r+0x20>)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4604      	mov	r4, r0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	f7f8 f993 	bl	8004410 <_fstat>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d102      	bne.n	800c0f4 <_fstat_r+0x1c>
 800c0ee:	682b      	ldr	r3, [r5, #0]
 800c0f0:	b103      	cbz	r3, 800c0f4 <_fstat_r+0x1c>
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	bd38      	pop	{r3, r4, r5, pc}
 800c0f6:	bf00      	nop
 800c0f8:	200017c8 	.word	0x200017c8

0800c0fc <_isatty_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d06      	ldr	r5, [pc, #24]	; (800c118 <_isatty_r+0x1c>)
 800c100:	2300      	movs	r3, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	602b      	str	r3, [r5, #0]
 800c108:	f7f8 f988 	bl	800441c <_isatty>
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d102      	bne.n	800c116 <_isatty_r+0x1a>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	b103      	cbz	r3, 800c116 <_isatty_r+0x1a>
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	200017c8 	.word	0x200017c8

0800c11c <_sbrk_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d06      	ldr	r5, [pc, #24]	; (800c138 <_sbrk_r+0x1c>)
 800c120:	2300      	movs	r3, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	f001 f992 	bl	800d450 <_sbrk>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_sbrk_r+0x1a>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_sbrk_r+0x1a>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	200017c8 	.word	0x200017c8

0800c13c <memcpy>:
 800c13c:	440a      	add	r2, r1
 800c13e:	4291      	cmp	r1, r2
 800c140:	f100 33ff 	add.w	r3, r0, #4294967295
 800c144:	d100      	bne.n	800c148 <memcpy+0xc>
 800c146:	4770      	bx	lr
 800c148:	b510      	push	{r4, lr}
 800c14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c152:	4291      	cmp	r1, r2
 800c154:	d1f9      	bne.n	800c14a <memcpy+0xe>
 800c156:	bd10      	pop	{r4, pc}

0800c158 <__assert_func>:
 800c158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c15a:	4614      	mov	r4, r2
 800c15c:	461a      	mov	r2, r3
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <__assert_func+0x2c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4605      	mov	r5, r0
 800c164:	68d8      	ldr	r0, [r3, #12]
 800c166:	b14c      	cbz	r4, 800c17c <__assert_func+0x24>
 800c168:	4b07      	ldr	r3, [pc, #28]	; (800c188 <__assert_func+0x30>)
 800c16a:	9100      	str	r1, [sp, #0]
 800c16c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c170:	4906      	ldr	r1, [pc, #24]	; (800c18c <__assert_func+0x34>)
 800c172:	462b      	mov	r3, r5
 800c174:	f000 f872 	bl	800c25c <fiprintf>
 800c178:	f000 f882 	bl	800c280 <abort>
 800c17c:	4b04      	ldr	r3, [pc, #16]	; (800c190 <__assert_func+0x38>)
 800c17e:	461c      	mov	r4, r3
 800c180:	e7f3      	b.n	800c16a <__assert_func+0x12>
 800c182:	bf00      	nop
 800c184:	20000068 	.word	0x20000068
 800c188:	0800d7bf 	.word	0x0800d7bf
 800c18c:	0800d7cc 	.word	0x0800d7cc
 800c190:	0800d7fa 	.word	0x0800d7fa

0800c194 <_calloc_r>:
 800c194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c196:	fba1 2402 	umull	r2, r4, r1, r2
 800c19a:	b94c      	cbnz	r4, 800c1b0 <_calloc_r+0x1c>
 800c19c:	4611      	mov	r1, r2
 800c19e:	9201      	str	r2, [sp, #4]
 800c1a0:	f7fe ffcc 	bl	800b13c <_malloc_r>
 800c1a4:	9a01      	ldr	r2, [sp, #4]
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	b930      	cbnz	r0, 800c1b8 <_calloc_r+0x24>
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	b003      	add	sp, #12
 800c1ae:	bd30      	pop	{r4, r5, pc}
 800c1b0:	220c      	movs	r2, #12
 800c1b2:	6002      	str	r2, [r0, #0]
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	e7f8      	b.n	800c1aa <_calloc_r+0x16>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	f7fe f853 	bl	800a264 <memset>
 800c1be:	e7f4      	b.n	800c1aa <_calloc_r+0x16>

0800c1c0 <__ascii_mbtowc>:
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	b901      	cbnz	r1, 800c1c6 <__ascii_mbtowc+0x6>
 800c1c4:	a901      	add	r1, sp, #4
 800c1c6:	b142      	cbz	r2, 800c1da <__ascii_mbtowc+0x1a>
 800c1c8:	b14b      	cbz	r3, 800c1de <__ascii_mbtowc+0x1e>
 800c1ca:	7813      	ldrb	r3, [r2, #0]
 800c1cc:	600b      	str	r3, [r1, #0]
 800c1ce:	7812      	ldrb	r2, [r2, #0]
 800c1d0:	1e10      	subs	r0, r2, #0
 800c1d2:	bf18      	it	ne
 800c1d4:	2001      	movne	r0, #1
 800c1d6:	b002      	add	sp, #8
 800c1d8:	4770      	bx	lr
 800c1da:	4610      	mov	r0, r2
 800c1dc:	e7fb      	b.n	800c1d6 <__ascii_mbtowc+0x16>
 800c1de:	f06f 0001 	mvn.w	r0, #1
 800c1e2:	e7f8      	b.n	800c1d6 <__ascii_mbtowc+0x16>

0800c1e4 <_realloc_r>:
 800c1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e8:	4680      	mov	r8, r0
 800c1ea:	4614      	mov	r4, r2
 800c1ec:	460e      	mov	r6, r1
 800c1ee:	b921      	cbnz	r1, 800c1fa <_realloc_r+0x16>
 800c1f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	f7fe bfa1 	b.w	800b13c <_malloc_r>
 800c1fa:	b92a      	cbnz	r2, 800c208 <_realloc_r+0x24>
 800c1fc:	f7fe ff2a 	bl	800b054 <_free_r>
 800c200:	4625      	mov	r5, r4
 800c202:	4628      	mov	r0, r5
 800c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c208:	f000 f841 	bl	800c28e <_malloc_usable_size_r>
 800c20c:	4284      	cmp	r4, r0
 800c20e:	4607      	mov	r7, r0
 800c210:	d802      	bhi.n	800c218 <_realloc_r+0x34>
 800c212:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c216:	d812      	bhi.n	800c23e <_realloc_r+0x5a>
 800c218:	4621      	mov	r1, r4
 800c21a:	4640      	mov	r0, r8
 800c21c:	f7fe ff8e 	bl	800b13c <_malloc_r>
 800c220:	4605      	mov	r5, r0
 800c222:	2800      	cmp	r0, #0
 800c224:	d0ed      	beq.n	800c202 <_realloc_r+0x1e>
 800c226:	42bc      	cmp	r4, r7
 800c228:	4622      	mov	r2, r4
 800c22a:	4631      	mov	r1, r6
 800c22c:	bf28      	it	cs
 800c22e:	463a      	movcs	r2, r7
 800c230:	f7ff ff84 	bl	800c13c <memcpy>
 800c234:	4631      	mov	r1, r6
 800c236:	4640      	mov	r0, r8
 800c238:	f7fe ff0c 	bl	800b054 <_free_r>
 800c23c:	e7e1      	b.n	800c202 <_realloc_r+0x1e>
 800c23e:	4635      	mov	r5, r6
 800c240:	e7df      	b.n	800c202 <_realloc_r+0x1e>

0800c242 <__ascii_wctomb>:
 800c242:	b149      	cbz	r1, 800c258 <__ascii_wctomb+0x16>
 800c244:	2aff      	cmp	r2, #255	; 0xff
 800c246:	bf85      	ittet	hi
 800c248:	238a      	movhi	r3, #138	; 0x8a
 800c24a:	6003      	strhi	r3, [r0, #0]
 800c24c:	700a      	strbls	r2, [r1, #0]
 800c24e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c252:	bf98      	it	ls
 800c254:	2001      	movls	r0, #1
 800c256:	4770      	bx	lr
 800c258:	4608      	mov	r0, r1
 800c25a:	4770      	bx	lr

0800c25c <fiprintf>:
 800c25c:	b40e      	push	{r1, r2, r3}
 800c25e:	b503      	push	{r0, r1, lr}
 800c260:	4601      	mov	r1, r0
 800c262:	ab03      	add	r3, sp, #12
 800c264:	4805      	ldr	r0, [pc, #20]	; (800c27c <fiprintf+0x20>)
 800c266:	f853 2b04 	ldr.w	r2, [r3], #4
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	9301      	str	r3, [sp, #4]
 800c26e:	f7ff fcef 	bl	800bc50 <_vfiprintf_r>
 800c272:	b002      	add	sp, #8
 800c274:	f85d eb04 	ldr.w	lr, [sp], #4
 800c278:	b003      	add	sp, #12
 800c27a:	4770      	bx	lr
 800c27c:	20000068 	.word	0x20000068

0800c280 <abort>:
 800c280:	b508      	push	{r3, lr}
 800c282:	2006      	movs	r0, #6
 800c284:	f000 f834 	bl	800c2f0 <raise>
 800c288:	2001      	movs	r0, #1
 800c28a:	f7f8 f89b 	bl	80043c4 <_exit>

0800c28e <_malloc_usable_size_r>:
 800c28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c292:	1f18      	subs	r0, r3, #4
 800c294:	2b00      	cmp	r3, #0
 800c296:	bfbc      	itt	lt
 800c298:	580b      	ldrlt	r3, [r1, r0]
 800c29a:	18c0      	addlt	r0, r0, r3
 800c29c:	4770      	bx	lr

0800c29e <_raise_r>:
 800c29e:	291f      	cmp	r1, #31
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	460d      	mov	r5, r1
 800c2a6:	d904      	bls.n	800c2b2 <_raise_r+0x14>
 800c2a8:	2316      	movs	r3, #22
 800c2aa:	6003      	str	r3, [r0, #0]
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
 800c2b2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c2b4:	b112      	cbz	r2, 800c2bc <_raise_r+0x1e>
 800c2b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2ba:	b94b      	cbnz	r3, 800c2d0 <_raise_r+0x32>
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 f831 	bl	800c324 <_getpid_r>
 800c2c2:	462a      	mov	r2, r5
 800c2c4:	4601      	mov	r1, r0
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2cc:	f000 b818 	b.w	800c300 <_kill_r>
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d00a      	beq.n	800c2ea <_raise_r+0x4c>
 800c2d4:	1c59      	adds	r1, r3, #1
 800c2d6:	d103      	bne.n	800c2e0 <_raise_r+0x42>
 800c2d8:	2316      	movs	r3, #22
 800c2da:	6003      	str	r3, [r0, #0]
 800c2dc:	2001      	movs	r0, #1
 800c2de:	e7e7      	b.n	800c2b0 <_raise_r+0x12>
 800c2e0:	2400      	movs	r4, #0
 800c2e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	4798      	blx	r3
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	e7e0      	b.n	800c2b0 <_raise_r+0x12>
	...

0800c2f0 <raise>:
 800c2f0:	4b02      	ldr	r3, [pc, #8]	; (800c2fc <raise+0xc>)
 800c2f2:	4601      	mov	r1, r0
 800c2f4:	6818      	ldr	r0, [r3, #0]
 800c2f6:	f7ff bfd2 	b.w	800c29e <_raise_r>
 800c2fa:	bf00      	nop
 800c2fc:	20000068 	.word	0x20000068

0800c300 <_kill_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d07      	ldr	r5, [pc, #28]	; (800c320 <_kill_r+0x20>)
 800c304:	2300      	movs	r3, #0
 800c306:	4604      	mov	r4, r0
 800c308:	4608      	mov	r0, r1
 800c30a:	4611      	mov	r1, r2
 800c30c:	602b      	str	r3, [r5, #0]
 800c30e:	f7f8 f851 	bl	80043b4 <_kill>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	d102      	bne.n	800c31c <_kill_r+0x1c>
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	b103      	cbz	r3, 800c31c <_kill_r+0x1c>
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	bd38      	pop	{r3, r4, r5, pc}
 800c31e:	bf00      	nop
 800c320:	200017c8 	.word	0x200017c8

0800c324 <_getpid_r>:
 800c324:	f7f8 b844 	b.w	80043b0 <_getpid>

0800c328 <cos>:
 800c328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c32a:	ec53 2b10 	vmov	r2, r3, d0
 800c32e:	4826      	ldr	r0, [pc, #152]	; (800c3c8 <cos+0xa0>)
 800c330:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c334:	4281      	cmp	r1, r0
 800c336:	dc06      	bgt.n	800c346 <cos+0x1e>
 800c338:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c3c0 <cos+0x98>
 800c33c:	b005      	add	sp, #20
 800c33e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c342:	f000 b89d 	b.w	800c480 <__kernel_cos>
 800c346:	4821      	ldr	r0, [pc, #132]	; (800c3cc <cos+0xa4>)
 800c348:	4281      	cmp	r1, r0
 800c34a:	dd09      	ble.n	800c360 <cos+0x38>
 800c34c:	ee10 0a10 	vmov	r0, s0
 800c350:	4619      	mov	r1, r3
 800c352:	f7f3 ffc1 	bl	80002d8 <__aeabi_dsub>
 800c356:	ec41 0b10 	vmov	d0, r0, r1
 800c35a:	b005      	add	sp, #20
 800c35c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c360:	4668      	mov	r0, sp
 800c362:	f000 fa15 	bl	800c790 <__ieee754_rem_pio2>
 800c366:	f000 0003 	and.w	r0, r0, #3
 800c36a:	2801      	cmp	r0, #1
 800c36c:	d00b      	beq.n	800c386 <cos+0x5e>
 800c36e:	2802      	cmp	r0, #2
 800c370:	d016      	beq.n	800c3a0 <cos+0x78>
 800c372:	b9e0      	cbnz	r0, 800c3ae <cos+0x86>
 800c374:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c378:	ed9d 0b00 	vldr	d0, [sp]
 800c37c:	f000 f880 	bl	800c480 <__kernel_cos>
 800c380:	ec51 0b10 	vmov	r0, r1, d0
 800c384:	e7e7      	b.n	800c356 <cos+0x2e>
 800c386:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c38a:	ed9d 0b00 	vldr	d0, [sp]
 800c38e:	f000 f93f 	bl	800c610 <__kernel_sin>
 800c392:	ec53 2b10 	vmov	r2, r3, d0
 800c396:	ee10 0a10 	vmov	r0, s0
 800c39a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c39e:	e7da      	b.n	800c356 <cos+0x2e>
 800c3a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3a4:	ed9d 0b00 	vldr	d0, [sp]
 800c3a8:	f000 f86a 	bl	800c480 <__kernel_cos>
 800c3ac:	e7f1      	b.n	800c392 <cos+0x6a>
 800c3ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3b2:	ed9d 0b00 	vldr	d0, [sp]
 800c3b6:	2001      	movs	r0, #1
 800c3b8:	f000 f92a 	bl	800c610 <__kernel_sin>
 800c3bc:	e7e0      	b.n	800c380 <cos+0x58>
 800c3be:	bf00      	nop
	...
 800c3c8:	3fe921fb 	.word	0x3fe921fb
 800c3cc:	7fefffff 	.word	0x7fefffff

0800c3d0 <sin>:
 800c3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3d2:	ec53 2b10 	vmov	r2, r3, d0
 800c3d6:	4828      	ldr	r0, [pc, #160]	; (800c478 <sin+0xa8>)
 800c3d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c3dc:	4281      	cmp	r1, r0
 800c3de:	dc07      	bgt.n	800c3f0 <sin+0x20>
 800c3e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c470 <sin+0xa0>
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	b005      	add	sp, #20
 800c3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3ec:	f000 b910 	b.w	800c610 <__kernel_sin>
 800c3f0:	4822      	ldr	r0, [pc, #136]	; (800c47c <sin+0xac>)
 800c3f2:	4281      	cmp	r1, r0
 800c3f4:	dd09      	ble.n	800c40a <sin+0x3a>
 800c3f6:	ee10 0a10 	vmov	r0, s0
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f7f3 ff6c 	bl	80002d8 <__aeabi_dsub>
 800c400:	ec41 0b10 	vmov	d0, r0, r1
 800c404:	b005      	add	sp, #20
 800c406:	f85d fb04 	ldr.w	pc, [sp], #4
 800c40a:	4668      	mov	r0, sp
 800c40c:	f000 f9c0 	bl	800c790 <__ieee754_rem_pio2>
 800c410:	f000 0003 	and.w	r0, r0, #3
 800c414:	2801      	cmp	r0, #1
 800c416:	d00c      	beq.n	800c432 <sin+0x62>
 800c418:	2802      	cmp	r0, #2
 800c41a:	d011      	beq.n	800c440 <sin+0x70>
 800c41c:	b9f0      	cbnz	r0, 800c45c <sin+0x8c>
 800c41e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c422:	ed9d 0b00 	vldr	d0, [sp]
 800c426:	2001      	movs	r0, #1
 800c428:	f000 f8f2 	bl	800c610 <__kernel_sin>
 800c42c:	ec51 0b10 	vmov	r0, r1, d0
 800c430:	e7e6      	b.n	800c400 <sin+0x30>
 800c432:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c436:	ed9d 0b00 	vldr	d0, [sp]
 800c43a:	f000 f821 	bl	800c480 <__kernel_cos>
 800c43e:	e7f5      	b.n	800c42c <sin+0x5c>
 800c440:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c444:	ed9d 0b00 	vldr	d0, [sp]
 800c448:	2001      	movs	r0, #1
 800c44a:	f000 f8e1 	bl	800c610 <__kernel_sin>
 800c44e:	ec53 2b10 	vmov	r2, r3, d0
 800c452:	ee10 0a10 	vmov	r0, s0
 800c456:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c45a:	e7d1      	b.n	800c400 <sin+0x30>
 800c45c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c460:	ed9d 0b00 	vldr	d0, [sp]
 800c464:	f000 f80c 	bl	800c480 <__kernel_cos>
 800c468:	e7f1      	b.n	800c44e <sin+0x7e>
 800c46a:	bf00      	nop
 800c46c:	f3af 8000 	nop.w
	...
 800c478:	3fe921fb 	.word	0x3fe921fb
 800c47c:	7fefffff 	.word	0x7fefffff

0800c480 <__kernel_cos>:
 800c480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	ec57 6b10 	vmov	r6, r7, d0
 800c488:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c48c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c490:	ed8d 1b00 	vstr	d1, [sp]
 800c494:	da07      	bge.n	800c4a6 <__kernel_cos+0x26>
 800c496:	ee10 0a10 	vmov	r0, s0
 800c49a:	4639      	mov	r1, r7
 800c49c:	f7f4 fb84 	bl	8000ba8 <__aeabi_d2iz>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f000 8088 	beq.w	800c5b6 <__kernel_cos+0x136>
 800c4a6:	4632      	mov	r2, r6
 800c4a8:	463b      	mov	r3, r7
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	f7f4 f8cb 	bl	8000648 <__aeabi_dmul>
 800c4b2:	4b51      	ldr	r3, [pc, #324]	; (800c5f8 <__kernel_cos+0x178>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	f7f4 f8c5 	bl	8000648 <__aeabi_dmul>
 800c4be:	a340      	add	r3, pc, #256	; (adr r3, 800c5c0 <__kernel_cos+0x140>)
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	4682      	mov	sl, r0
 800c4c6:	468b      	mov	fp, r1
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	f7f4 f8bc 	bl	8000648 <__aeabi_dmul>
 800c4d0:	a33d      	add	r3, pc, #244	; (adr r3, 800c5c8 <__kernel_cos+0x148>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	f7f3 ff01 	bl	80002dc <__adddf3>
 800c4da:	4622      	mov	r2, r4
 800c4dc:	462b      	mov	r3, r5
 800c4de:	f7f4 f8b3 	bl	8000648 <__aeabi_dmul>
 800c4e2:	a33b      	add	r3, pc, #236	; (adr r3, 800c5d0 <__kernel_cos+0x150>)
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	f7f3 fef6 	bl	80002d8 <__aeabi_dsub>
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	462b      	mov	r3, r5
 800c4f0:	f7f4 f8aa 	bl	8000648 <__aeabi_dmul>
 800c4f4:	a338      	add	r3, pc, #224	; (adr r3, 800c5d8 <__kernel_cos+0x158>)
 800c4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fa:	f7f3 feef 	bl	80002dc <__adddf3>
 800c4fe:	4622      	mov	r2, r4
 800c500:	462b      	mov	r3, r5
 800c502:	f7f4 f8a1 	bl	8000648 <__aeabi_dmul>
 800c506:	a336      	add	r3, pc, #216	; (adr r3, 800c5e0 <__kernel_cos+0x160>)
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	f7f3 fee4 	bl	80002d8 <__aeabi_dsub>
 800c510:	4622      	mov	r2, r4
 800c512:	462b      	mov	r3, r5
 800c514:	f7f4 f898 	bl	8000648 <__aeabi_dmul>
 800c518:	a333      	add	r3, pc, #204	; (adr r3, 800c5e8 <__kernel_cos+0x168>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7f3 fedd 	bl	80002dc <__adddf3>
 800c522:	4622      	mov	r2, r4
 800c524:	462b      	mov	r3, r5
 800c526:	f7f4 f88f 	bl	8000648 <__aeabi_dmul>
 800c52a:	4622      	mov	r2, r4
 800c52c:	462b      	mov	r3, r5
 800c52e:	f7f4 f88b 	bl	8000648 <__aeabi_dmul>
 800c532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c536:	4604      	mov	r4, r0
 800c538:	460d      	mov	r5, r1
 800c53a:	4630      	mov	r0, r6
 800c53c:	4639      	mov	r1, r7
 800c53e:	f7f4 f883 	bl	8000648 <__aeabi_dmul>
 800c542:	460b      	mov	r3, r1
 800c544:	4602      	mov	r2, r0
 800c546:	4629      	mov	r1, r5
 800c548:	4620      	mov	r0, r4
 800c54a:	f7f3 fec5 	bl	80002d8 <__aeabi_dsub>
 800c54e:	4b2b      	ldr	r3, [pc, #172]	; (800c5fc <__kernel_cos+0x17c>)
 800c550:	4598      	cmp	r8, r3
 800c552:	4606      	mov	r6, r0
 800c554:	460f      	mov	r7, r1
 800c556:	dc10      	bgt.n	800c57a <__kernel_cos+0xfa>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4650      	mov	r0, sl
 800c55e:	4659      	mov	r1, fp
 800c560:	f7f3 feba 	bl	80002d8 <__aeabi_dsub>
 800c564:	460b      	mov	r3, r1
 800c566:	4926      	ldr	r1, [pc, #152]	; (800c600 <__kernel_cos+0x180>)
 800c568:	4602      	mov	r2, r0
 800c56a:	2000      	movs	r0, #0
 800c56c:	f7f3 feb4 	bl	80002d8 <__aeabi_dsub>
 800c570:	ec41 0b10 	vmov	d0, r0, r1
 800c574:	b003      	add	sp, #12
 800c576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57a:	4b22      	ldr	r3, [pc, #136]	; (800c604 <__kernel_cos+0x184>)
 800c57c:	4920      	ldr	r1, [pc, #128]	; (800c600 <__kernel_cos+0x180>)
 800c57e:	4598      	cmp	r8, r3
 800c580:	bfcc      	ite	gt
 800c582:	4d21      	ldrgt	r5, [pc, #132]	; (800c608 <__kernel_cos+0x188>)
 800c584:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c588:	2400      	movs	r4, #0
 800c58a:	4622      	mov	r2, r4
 800c58c:	462b      	mov	r3, r5
 800c58e:	2000      	movs	r0, #0
 800c590:	f7f3 fea2 	bl	80002d8 <__aeabi_dsub>
 800c594:	4622      	mov	r2, r4
 800c596:	4680      	mov	r8, r0
 800c598:	4689      	mov	r9, r1
 800c59a:	462b      	mov	r3, r5
 800c59c:	4650      	mov	r0, sl
 800c59e:	4659      	mov	r1, fp
 800c5a0:	f7f3 fe9a 	bl	80002d8 <__aeabi_dsub>
 800c5a4:	4632      	mov	r2, r6
 800c5a6:	463b      	mov	r3, r7
 800c5a8:	f7f3 fe96 	bl	80002d8 <__aeabi_dsub>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	e7da      	b.n	800c56c <__kernel_cos+0xec>
 800c5b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c5f0 <__kernel_cos+0x170>
 800c5ba:	e7db      	b.n	800c574 <__kernel_cos+0xf4>
 800c5bc:	f3af 8000 	nop.w
 800c5c0:	be8838d4 	.word	0xbe8838d4
 800c5c4:	bda8fae9 	.word	0xbda8fae9
 800c5c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c5cc:	3e21ee9e 	.word	0x3e21ee9e
 800c5d0:	809c52ad 	.word	0x809c52ad
 800c5d4:	3e927e4f 	.word	0x3e927e4f
 800c5d8:	19cb1590 	.word	0x19cb1590
 800c5dc:	3efa01a0 	.word	0x3efa01a0
 800c5e0:	16c15177 	.word	0x16c15177
 800c5e4:	3f56c16c 	.word	0x3f56c16c
 800c5e8:	5555554c 	.word	0x5555554c
 800c5ec:	3fa55555 	.word	0x3fa55555
 800c5f0:	00000000 	.word	0x00000000
 800c5f4:	3ff00000 	.word	0x3ff00000
 800c5f8:	3fe00000 	.word	0x3fe00000
 800c5fc:	3fd33332 	.word	0x3fd33332
 800c600:	3ff00000 	.word	0x3ff00000
 800c604:	3fe90000 	.word	0x3fe90000
 800c608:	3fd20000 	.word	0x3fd20000
 800c60c:	00000000 	.word	0x00000000

0800c610 <__kernel_sin>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	ed2d 8b04 	vpush	{d8-d9}
 800c618:	eeb0 8a41 	vmov.f32	s16, s2
 800c61c:	eef0 8a61 	vmov.f32	s17, s3
 800c620:	ec55 4b10 	vmov	r4, r5, d0
 800c624:	b083      	sub	sp, #12
 800c626:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c62a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c62e:	9001      	str	r0, [sp, #4]
 800c630:	da06      	bge.n	800c640 <__kernel_sin+0x30>
 800c632:	ee10 0a10 	vmov	r0, s0
 800c636:	4629      	mov	r1, r5
 800c638:	f7f4 fab6 	bl	8000ba8 <__aeabi_d2iz>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d051      	beq.n	800c6e4 <__kernel_sin+0xd4>
 800c640:	4622      	mov	r2, r4
 800c642:	462b      	mov	r3, r5
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f7f3 fffe 	bl	8000648 <__aeabi_dmul>
 800c64c:	4682      	mov	sl, r0
 800c64e:	468b      	mov	fp, r1
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f3 fff6 	bl	8000648 <__aeabi_dmul>
 800c65c:	a341      	add	r3, pc, #260	; (adr r3, 800c764 <__kernel_sin+0x154>)
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	4680      	mov	r8, r0
 800c664:	4689      	mov	r9, r1
 800c666:	4650      	mov	r0, sl
 800c668:	4659      	mov	r1, fp
 800c66a:	f7f3 ffed 	bl	8000648 <__aeabi_dmul>
 800c66e:	a33f      	add	r3, pc, #252	; (adr r3, 800c76c <__kernel_sin+0x15c>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f3 fe30 	bl	80002d8 <__aeabi_dsub>
 800c678:	4652      	mov	r2, sl
 800c67a:	465b      	mov	r3, fp
 800c67c:	f7f3 ffe4 	bl	8000648 <__aeabi_dmul>
 800c680:	a33c      	add	r3, pc, #240	; (adr r3, 800c774 <__kernel_sin+0x164>)
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	f7f3 fe29 	bl	80002dc <__adddf3>
 800c68a:	4652      	mov	r2, sl
 800c68c:	465b      	mov	r3, fp
 800c68e:	f7f3 ffdb 	bl	8000648 <__aeabi_dmul>
 800c692:	a33a      	add	r3, pc, #232	; (adr r3, 800c77c <__kernel_sin+0x16c>)
 800c694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c698:	f7f3 fe1e 	bl	80002d8 <__aeabi_dsub>
 800c69c:	4652      	mov	r2, sl
 800c69e:	465b      	mov	r3, fp
 800c6a0:	f7f3 ffd2 	bl	8000648 <__aeabi_dmul>
 800c6a4:	a337      	add	r3, pc, #220	; (adr r3, 800c784 <__kernel_sin+0x174>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f7f3 fe17 	bl	80002dc <__adddf3>
 800c6ae:	9b01      	ldr	r3, [sp, #4]
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	b9eb      	cbnz	r3, 800c6f2 <__kernel_sin+0xe2>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	4659      	mov	r1, fp
 800c6be:	f7f3 ffc3 	bl	8000648 <__aeabi_dmul>
 800c6c2:	a325      	add	r3, pc, #148	; (adr r3, 800c758 <__kernel_sin+0x148>)
 800c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c8:	f7f3 fe06 	bl	80002d8 <__aeabi_dsub>
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	f7f3 ffba 	bl	8000648 <__aeabi_dmul>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4620      	mov	r0, r4
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f7f3 fdfe 	bl	80002dc <__adddf3>
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	ec45 4b10 	vmov	d0, r4, r5
 800c6e8:	b003      	add	sp, #12
 800c6ea:	ecbd 8b04 	vpop	{d8-d9}
 800c6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f2:	4b1b      	ldr	r3, [pc, #108]	; (800c760 <__kernel_sin+0x150>)
 800c6f4:	ec51 0b18 	vmov	r0, r1, d8
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f7f3 ffa5 	bl	8000648 <__aeabi_dmul>
 800c6fe:	4632      	mov	r2, r6
 800c700:	ec41 0b19 	vmov	d9, r0, r1
 800c704:	463b      	mov	r3, r7
 800c706:	4640      	mov	r0, r8
 800c708:	4649      	mov	r1, r9
 800c70a:	f7f3 ff9d 	bl	8000648 <__aeabi_dmul>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	ec51 0b19 	vmov	r0, r1, d9
 800c716:	f7f3 fddf 	bl	80002d8 <__aeabi_dsub>
 800c71a:	4652      	mov	r2, sl
 800c71c:	465b      	mov	r3, fp
 800c71e:	f7f3 ff93 	bl	8000648 <__aeabi_dmul>
 800c722:	ec53 2b18 	vmov	r2, r3, d8
 800c726:	f7f3 fdd7 	bl	80002d8 <__aeabi_dsub>
 800c72a:	a30b      	add	r3, pc, #44	; (adr r3, 800c758 <__kernel_sin+0x148>)
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	4606      	mov	r6, r0
 800c732:	460f      	mov	r7, r1
 800c734:	4640      	mov	r0, r8
 800c736:	4649      	mov	r1, r9
 800c738:	f7f3 ff86 	bl	8000648 <__aeabi_dmul>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4630      	mov	r0, r6
 800c742:	4639      	mov	r1, r7
 800c744:	f7f3 fdca 	bl	80002dc <__adddf3>
 800c748:	4602      	mov	r2, r0
 800c74a:	460b      	mov	r3, r1
 800c74c:	4620      	mov	r0, r4
 800c74e:	4629      	mov	r1, r5
 800c750:	f7f3 fdc2 	bl	80002d8 <__aeabi_dsub>
 800c754:	e7c4      	b.n	800c6e0 <__kernel_sin+0xd0>
 800c756:	bf00      	nop
 800c758:	55555549 	.word	0x55555549
 800c75c:	3fc55555 	.word	0x3fc55555
 800c760:	3fe00000 	.word	0x3fe00000
 800c764:	5acfd57c 	.word	0x5acfd57c
 800c768:	3de5d93a 	.word	0x3de5d93a
 800c76c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c770:	3e5ae5e6 	.word	0x3e5ae5e6
 800c774:	57b1fe7d 	.word	0x57b1fe7d
 800c778:	3ec71de3 	.word	0x3ec71de3
 800c77c:	19c161d5 	.word	0x19c161d5
 800c780:	3f2a01a0 	.word	0x3f2a01a0
 800c784:	1110f8a6 	.word	0x1110f8a6
 800c788:	3f811111 	.word	0x3f811111
 800c78c:	00000000 	.word	0x00000000

0800c790 <__ieee754_rem_pio2>:
 800c790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c794:	ed2d 8b02 	vpush	{d8}
 800c798:	ec55 4b10 	vmov	r4, r5, d0
 800c79c:	4bca      	ldr	r3, [pc, #808]	; (800cac8 <__ieee754_rem_pio2+0x338>)
 800c79e:	b08b      	sub	sp, #44	; 0x2c
 800c7a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c7a4:	4598      	cmp	r8, r3
 800c7a6:	4682      	mov	sl, r0
 800c7a8:	9502      	str	r5, [sp, #8]
 800c7aa:	dc08      	bgt.n	800c7be <__ieee754_rem_pio2+0x2e>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	ed80 0b00 	vstr	d0, [r0]
 800c7b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c7b8:	f04f 0b00 	mov.w	fp, #0
 800c7bc:	e028      	b.n	800c810 <__ieee754_rem_pio2+0x80>
 800c7be:	4bc3      	ldr	r3, [pc, #780]	; (800cacc <__ieee754_rem_pio2+0x33c>)
 800c7c0:	4598      	cmp	r8, r3
 800c7c2:	dc78      	bgt.n	800c8b6 <__ieee754_rem_pio2+0x126>
 800c7c4:	9b02      	ldr	r3, [sp, #8]
 800c7c6:	4ec2      	ldr	r6, [pc, #776]	; (800cad0 <__ieee754_rem_pio2+0x340>)
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	ee10 0a10 	vmov	r0, s0
 800c7ce:	a3b0      	add	r3, pc, #704	; (adr r3, 800ca90 <__ieee754_rem_pio2+0x300>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	dd39      	ble.n	800c84c <__ieee754_rem_pio2+0xbc>
 800c7d8:	f7f3 fd7e 	bl	80002d8 <__aeabi_dsub>
 800c7dc:	45b0      	cmp	r8, r6
 800c7de:	4604      	mov	r4, r0
 800c7e0:	460d      	mov	r5, r1
 800c7e2:	d01b      	beq.n	800c81c <__ieee754_rem_pio2+0x8c>
 800c7e4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ca98 <__ieee754_rem_pio2+0x308>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f3 fd75 	bl	80002d8 <__aeabi_dsub>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	e9ca 2300 	strd	r2, r3, [sl]
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f7f3 fd6d 	bl	80002d8 <__aeabi_dsub>
 800c7fe:	a3a6      	add	r3, pc, #664	; (adr r3, 800ca98 <__ieee754_rem_pio2+0x308>)
 800c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c804:	f7f3 fd68 	bl	80002d8 <__aeabi_dsub>
 800c808:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c80c:	f04f 0b01 	mov.w	fp, #1
 800c810:	4658      	mov	r0, fp
 800c812:	b00b      	add	sp, #44	; 0x2c
 800c814:	ecbd 8b02 	vpop	{d8}
 800c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81c:	a3a0      	add	r3, pc, #640	; (adr r3, 800caa0 <__ieee754_rem_pio2+0x310>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fd59 	bl	80002d8 <__aeabi_dsub>
 800c826:	a3a0      	add	r3, pc, #640	; (adr r3, 800caa8 <__ieee754_rem_pio2+0x318>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	4604      	mov	r4, r0
 800c82e:	460d      	mov	r5, r1
 800c830:	f7f3 fd52 	bl	80002d8 <__aeabi_dsub>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	e9ca 2300 	strd	r2, r3, [sl]
 800c83c:	4620      	mov	r0, r4
 800c83e:	4629      	mov	r1, r5
 800c840:	f7f3 fd4a 	bl	80002d8 <__aeabi_dsub>
 800c844:	a398      	add	r3, pc, #608	; (adr r3, 800caa8 <__ieee754_rem_pio2+0x318>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	e7db      	b.n	800c804 <__ieee754_rem_pio2+0x74>
 800c84c:	f7f3 fd46 	bl	80002dc <__adddf3>
 800c850:	45b0      	cmp	r8, r6
 800c852:	4604      	mov	r4, r0
 800c854:	460d      	mov	r5, r1
 800c856:	d016      	beq.n	800c886 <__ieee754_rem_pio2+0xf6>
 800c858:	a38f      	add	r3, pc, #572	; (adr r3, 800ca98 <__ieee754_rem_pio2+0x308>)
 800c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85e:	f7f3 fd3d 	bl	80002dc <__adddf3>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	e9ca 2300 	strd	r2, r3, [sl]
 800c86a:	4620      	mov	r0, r4
 800c86c:	4629      	mov	r1, r5
 800c86e:	f7f3 fd33 	bl	80002d8 <__aeabi_dsub>
 800c872:	a389      	add	r3, pc, #548	; (adr r3, 800ca98 <__ieee754_rem_pio2+0x308>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f7f3 fd30 	bl	80002dc <__adddf3>
 800c87c:	f04f 3bff 	mov.w	fp, #4294967295
 800c880:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c884:	e7c4      	b.n	800c810 <__ieee754_rem_pio2+0x80>
 800c886:	a386      	add	r3, pc, #536	; (adr r3, 800caa0 <__ieee754_rem_pio2+0x310>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7f3 fd26 	bl	80002dc <__adddf3>
 800c890:	a385      	add	r3, pc, #532	; (adr r3, 800caa8 <__ieee754_rem_pio2+0x318>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	4604      	mov	r4, r0
 800c898:	460d      	mov	r5, r1
 800c89a:	f7f3 fd1f 	bl	80002dc <__adddf3>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	e9ca 2300 	strd	r2, r3, [sl]
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f3 fd15 	bl	80002d8 <__aeabi_dsub>
 800c8ae:	a37e      	add	r3, pc, #504	; (adr r3, 800caa8 <__ieee754_rem_pio2+0x318>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	e7e0      	b.n	800c878 <__ieee754_rem_pio2+0xe8>
 800c8b6:	4b87      	ldr	r3, [pc, #540]	; (800cad4 <__ieee754_rem_pio2+0x344>)
 800c8b8:	4598      	cmp	r8, r3
 800c8ba:	f300 80d8 	bgt.w	800ca6e <__ieee754_rem_pio2+0x2de>
 800c8be:	f000 f96d 	bl	800cb9c <fabs>
 800c8c2:	ec55 4b10 	vmov	r4, r5, d0
 800c8c6:	ee10 0a10 	vmov	r0, s0
 800c8ca:	a379      	add	r3, pc, #484	; (adr r3, 800cab0 <__ieee754_rem_pio2+0x320>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f3 feb9 	bl	8000648 <__aeabi_dmul>
 800c8d6:	4b80      	ldr	r3, [pc, #512]	; (800cad8 <__ieee754_rem_pio2+0x348>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f7f3 fcff 	bl	80002dc <__adddf3>
 800c8de:	f7f4 f963 	bl	8000ba8 <__aeabi_d2iz>
 800c8e2:	4683      	mov	fp, r0
 800c8e4:	f7f3 fe46 	bl	8000574 <__aeabi_i2d>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	ec43 2b18 	vmov	d8, r2, r3
 800c8f0:	a367      	add	r3, pc, #412	; (adr r3, 800ca90 <__ieee754_rem_pio2+0x300>)
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	f7f3 fea7 	bl	8000648 <__aeabi_dmul>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4620      	mov	r0, r4
 800c900:	4629      	mov	r1, r5
 800c902:	f7f3 fce9 	bl	80002d8 <__aeabi_dsub>
 800c906:	a364      	add	r3, pc, #400	; (adr r3, 800ca98 <__ieee754_rem_pio2+0x308>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	ec51 0b18 	vmov	r0, r1, d8
 800c914:	f7f3 fe98 	bl	8000648 <__aeabi_dmul>
 800c918:	f1bb 0f1f 	cmp.w	fp, #31
 800c91c:	4604      	mov	r4, r0
 800c91e:	460d      	mov	r5, r1
 800c920:	dc0d      	bgt.n	800c93e <__ieee754_rem_pio2+0x1ae>
 800c922:	4b6e      	ldr	r3, [pc, #440]	; (800cadc <__ieee754_rem_pio2+0x34c>)
 800c924:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92c:	4543      	cmp	r3, r8
 800c92e:	d006      	beq.n	800c93e <__ieee754_rem_pio2+0x1ae>
 800c930:	4622      	mov	r2, r4
 800c932:	462b      	mov	r3, r5
 800c934:	4630      	mov	r0, r6
 800c936:	4639      	mov	r1, r7
 800c938:	f7f3 fcce 	bl	80002d8 <__aeabi_dsub>
 800c93c:	e00e      	b.n	800c95c <__ieee754_rem_pio2+0x1cc>
 800c93e:	462b      	mov	r3, r5
 800c940:	4622      	mov	r2, r4
 800c942:	4630      	mov	r0, r6
 800c944:	4639      	mov	r1, r7
 800c946:	f7f3 fcc7 	bl	80002d8 <__aeabi_dsub>
 800c94a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c954:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c958:	2b10      	cmp	r3, #16
 800c95a:	dc02      	bgt.n	800c962 <__ieee754_rem_pio2+0x1d2>
 800c95c:	e9ca 0100 	strd	r0, r1, [sl]
 800c960:	e039      	b.n	800c9d6 <__ieee754_rem_pio2+0x246>
 800c962:	a34f      	add	r3, pc, #316	; (adr r3, 800caa0 <__ieee754_rem_pio2+0x310>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	ec51 0b18 	vmov	r0, r1, d8
 800c96c:	f7f3 fe6c 	bl	8000648 <__aeabi_dmul>
 800c970:	4604      	mov	r4, r0
 800c972:	460d      	mov	r5, r1
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 fcac 	bl	80002d8 <__aeabi_dsub>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4680      	mov	r8, r0
 800c986:	4689      	mov	r9, r1
 800c988:	4630      	mov	r0, r6
 800c98a:	4639      	mov	r1, r7
 800c98c:	f7f3 fca4 	bl	80002d8 <__aeabi_dsub>
 800c990:	4622      	mov	r2, r4
 800c992:	462b      	mov	r3, r5
 800c994:	f7f3 fca0 	bl	80002d8 <__aeabi_dsub>
 800c998:	a343      	add	r3, pc, #268	; (adr r3, 800caa8 <__ieee754_rem_pio2+0x318>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	4604      	mov	r4, r0
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	ec51 0b18 	vmov	r0, r1, d8
 800c9a6:	f7f3 fe4f 	bl	8000648 <__aeabi_dmul>
 800c9aa:	4622      	mov	r2, r4
 800c9ac:	462b      	mov	r3, r5
 800c9ae:	f7f3 fc93 	bl	80002d8 <__aeabi_dsub>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	4649      	mov	r1, r9
 800c9be:	f7f3 fc8b 	bl	80002d8 <__aeabi_dsub>
 800c9c2:	9a03      	ldr	r2, [sp, #12]
 800c9c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	2b31      	cmp	r3, #49	; 0x31
 800c9cc:	dc24      	bgt.n	800ca18 <__ieee754_rem_pio2+0x288>
 800c9ce:	e9ca 0100 	strd	r0, r1, [sl]
 800c9d2:	4646      	mov	r6, r8
 800c9d4:	464f      	mov	r7, r9
 800c9d6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9da:	4630      	mov	r0, r6
 800c9dc:	4642      	mov	r2, r8
 800c9de:	464b      	mov	r3, r9
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f3 fc79 	bl	80002d8 <__aeabi_dsub>
 800c9e6:	462b      	mov	r3, r5
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	f7f3 fc75 	bl	80002d8 <__aeabi_dsub>
 800c9ee:	9b02      	ldr	r3, [sp, #8]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c9f6:	f6bf af0b 	bge.w	800c810 <__ieee754_rem_pio2+0x80>
 800c9fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c9fe:	f8ca 3004 	str.w	r3, [sl, #4]
 800ca02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca06:	f8ca 8000 	str.w	r8, [sl]
 800ca0a:	f8ca 0008 	str.w	r0, [sl, #8]
 800ca0e:	f8ca 300c 	str.w	r3, [sl, #12]
 800ca12:	f1cb 0b00 	rsb	fp, fp, #0
 800ca16:	e6fb      	b.n	800c810 <__ieee754_rem_pio2+0x80>
 800ca18:	a327      	add	r3, pc, #156	; (adr r3, 800cab8 <__ieee754_rem_pio2+0x328>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	ec51 0b18 	vmov	r0, r1, d8
 800ca22:	f7f3 fe11 	bl	8000648 <__aeabi_dmul>
 800ca26:	4604      	mov	r4, r0
 800ca28:	460d      	mov	r5, r1
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4640      	mov	r0, r8
 800ca30:	4649      	mov	r1, r9
 800ca32:	f7f3 fc51 	bl	80002d8 <__aeabi_dsub>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460f      	mov	r7, r1
 800ca3e:	4640      	mov	r0, r8
 800ca40:	4649      	mov	r1, r9
 800ca42:	f7f3 fc49 	bl	80002d8 <__aeabi_dsub>
 800ca46:	4622      	mov	r2, r4
 800ca48:	462b      	mov	r3, r5
 800ca4a:	f7f3 fc45 	bl	80002d8 <__aeabi_dsub>
 800ca4e:	a31c      	add	r3, pc, #112	; (adr r3, 800cac0 <__ieee754_rem_pio2+0x330>)
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	4604      	mov	r4, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	ec51 0b18 	vmov	r0, r1, d8
 800ca5c:	f7f3 fdf4 	bl	8000648 <__aeabi_dmul>
 800ca60:	4622      	mov	r2, r4
 800ca62:	462b      	mov	r3, r5
 800ca64:	f7f3 fc38 	bl	80002d8 <__aeabi_dsub>
 800ca68:	4604      	mov	r4, r0
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	e760      	b.n	800c930 <__ieee754_rem_pio2+0x1a0>
 800ca6e:	4b1c      	ldr	r3, [pc, #112]	; (800cae0 <__ieee754_rem_pio2+0x350>)
 800ca70:	4598      	cmp	r8, r3
 800ca72:	dd37      	ble.n	800cae4 <__ieee754_rem_pio2+0x354>
 800ca74:	ee10 2a10 	vmov	r2, s0
 800ca78:	462b      	mov	r3, r5
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	f7f3 fc2b 	bl	80002d8 <__aeabi_dsub>
 800ca82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca86:	e9ca 0100 	strd	r0, r1, [sl]
 800ca8a:	e695      	b.n	800c7b8 <__ieee754_rem_pio2+0x28>
 800ca8c:	f3af 8000 	nop.w
 800ca90:	54400000 	.word	0x54400000
 800ca94:	3ff921fb 	.word	0x3ff921fb
 800ca98:	1a626331 	.word	0x1a626331
 800ca9c:	3dd0b461 	.word	0x3dd0b461
 800caa0:	1a600000 	.word	0x1a600000
 800caa4:	3dd0b461 	.word	0x3dd0b461
 800caa8:	2e037073 	.word	0x2e037073
 800caac:	3ba3198a 	.word	0x3ba3198a
 800cab0:	6dc9c883 	.word	0x6dc9c883
 800cab4:	3fe45f30 	.word	0x3fe45f30
 800cab8:	2e000000 	.word	0x2e000000
 800cabc:	3ba3198a 	.word	0x3ba3198a
 800cac0:	252049c1 	.word	0x252049c1
 800cac4:	397b839a 	.word	0x397b839a
 800cac8:	3fe921fb 	.word	0x3fe921fb
 800cacc:	4002d97b 	.word	0x4002d97b
 800cad0:	3ff921fb 	.word	0x3ff921fb
 800cad4:	413921fb 	.word	0x413921fb
 800cad8:	3fe00000 	.word	0x3fe00000
 800cadc:	0800d8fc 	.word	0x0800d8fc
 800cae0:	7fefffff 	.word	0x7fefffff
 800cae4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800cae8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800caec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800caf0:	4620      	mov	r0, r4
 800caf2:	460d      	mov	r5, r1
 800caf4:	f7f4 f858 	bl	8000ba8 <__aeabi_d2iz>
 800caf8:	f7f3 fd3c 	bl	8000574 <__aeabi_i2d>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	4620      	mov	r0, r4
 800cb02:	4629      	mov	r1, r5
 800cb04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb08:	f7f3 fbe6 	bl	80002d8 <__aeabi_dsub>
 800cb0c:	4b21      	ldr	r3, [pc, #132]	; (800cb94 <__ieee754_rem_pio2+0x404>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f7f3 fd9a 	bl	8000648 <__aeabi_dmul>
 800cb14:	460d      	mov	r5, r1
 800cb16:	4604      	mov	r4, r0
 800cb18:	f7f4 f846 	bl	8000ba8 <__aeabi_d2iz>
 800cb1c:	f7f3 fd2a 	bl	8000574 <__aeabi_i2d>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4620      	mov	r0, r4
 800cb26:	4629      	mov	r1, r5
 800cb28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb2c:	f7f3 fbd4 	bl	80002d8 <__aeabi_dsub>
 800cb30:	4b18      	ldr	r3, [pc, #96]	; (800cb94 <__ieee754_rem_pio2+0x404>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	f7f3 fd88 	bl	8000648 <__aeabi_dmul>
 800cb38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb3c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cb40:	2703      	movs	r7, #3
 800cb42:	2400      	movs	r4, #0
 800cb44:	2500      	movs	r5, #0
 800cb46:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	462b      	mov	r3, r5
 800cb4e:	46b9      	mov	r9, r7
 800cb50:	3f01      	subs	r7, #1
 800cb52:	f7f3 ffe1 	bl	8000b18 <__aeabi_dcmpeq>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d1f5      	bne.n	800cb46 <__ieee754_rem_pio2+0x3b6>
 800cb5a:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <__ieee754_rem_pio2+0x408>)
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	2302      	movs	r3, #2
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	4632      	mov	r2, r6
 800cb64:	464b      	mov	r3, r9
 800cb66:	4651      	mov	r1, sl
 800cb68:	a804      	add	r0, sp, #16
 800cb6a:	f000 f821 	bl	800cbb0 <__kernel_rem_pio2>
 800cb6e:	9b02      	ldr	r3, [sp, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	4683      	mov	fp, r0
 800cb74:	f6bf ae4c 	bge.w	800c810 <__ieee754_rem_pio2+0x80>
 800cb78:	e9da 2100 	ldrd	r2, r1, [sl]
 800cb7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb80:	e9ca 2300 	strd	r2, r3, [sl]
 800cb84:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cb88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb8c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cb90:	e73f      	b.n	800ca12 <__ieee754_rem_pio2+0x282>
 800cb92:	bf00      	nop
 800cb94:	41700000 	.word	0x41700000
 800cb98:	0800d97c 	.word	0x0800d97c

0800cb9c <fabs>:
 800cb9c:	ec51 0b10 	vmov	r0, r1, d0
 800cba0:	ee10 2a10 	vmov	r2, s0
 800cba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cba8:	ec43 2b10 	vmov	d0, r2, r3
 800cbac:	4770      	bx	lr
	...

0800cbb0 <__kernel_rem_pio2>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	ed2d 8b02 	vpush	{d8}
 800cbb8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cbbc:	f112 0f14 	cmn.w	r2, #20
 800cbc0:	9306      	str	r3, [sp, #24]
 800cbc2:	9104      	str	r1, [sp, #16]
 800cbc4:	4bc2      	ldr	r3, [pc, #776]	; (800ced0 <__kernel_rem_pio2+0x320>)
 800cbc6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cbc8:	9009      	str	r0, [sp, #36]	; 0x24
 800cbca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	9b06      	ldr	r3, [sp, #24]
 800cbd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbd6:	bfa8      	it	ge
 800cbd8:	1ed4      	subge	r4, r2, #3
 800cbda:	9305      	str	r3, [sp, #20]
 800cbdc:	bfb2      	itee	lt
 800cbde:	2400      	movlt	r4, #0
 800cbe0:	2318      	movge	r3, #24
 800cbe2:	fb94 f4f3 	sdivge	r4, r4, r3
 800cbe6:	f06f 0317 	mvn.w	r3, #23
 800cbea:	fb04 3303 	mla	r3, r4, r3, r3
 800cbee:	eb03 0a02 	add.w	sl, r3, r2
 800cbf2:	9b00      	ldr	r3, [sp, #0]
 800cbf4:	9a05      	ldr	r2, [sp, #20]
 800cbf6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800cec0 <__kernel_rem_pio2+0x310>
 800cbfa:	eb03 0802 	add.w	r8, r3, r2
 800cbfe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cc00:	1aa7      	subs	r7, r4, r2
 800cc02:	ae20      	add	r6, sp, #128	; 0x80
 800cc04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cc08:	2500      	movs	r5, #0
 800cc0a:	4545      	cmp	r5, r8
 800cc0c:	dd13      	ble.n	800cc36 <__kernel_rem_pio2+0x86>
 800cc0e:	9b06      	ldr	r3, [sp, #24]
 800cc10:	aa20      	add	r2, sp, #128	; 0x80
 800cc12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cc16:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cc1a:	f04f 0800 	mov.w	r8, #0
 800cc1e:	9b00      	ldr	r3, [sp, #0]
 800cc20:	4598      	cmp	r8, r3
 800cc22:	dc31      	bgt.n	800cc88 <__kernel_rem_pio2+0xd8>
 800cc24:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800cec0 <__kernel_rem_pio2+0x310>
 800cc28:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cc2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc30:	462f      	mov	r7, r5
 800cc32:	2600      	movs	r6, #0
 800cc34:	e01b      	b.n	800cc6e <__kernel_rem_pio2+0xbe>
 800cc36:	42ef      	cmn	r7, r5
 800cc38:	d407      	bmi.n	800cc4a <__kernel_rem_pio2+0x9a>
 800cc3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cc3e:	f7f3 fc99 	bl	8000574 <__aeabi_i2d>
 800cc42:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cc46:	3501      	adds	r5, #1
 800cc48:	e7df      	b.n	800cc0a <__kernel_rem_pio2+0x5a>
 800cc4a:	ec51 0b18 	vmov	r0, r1, d8
 800cc4e:	e7f8      	b.n	800cc42 <__kernel_rem_pio2+0x92>
 800cc50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cc58:	f7f3 fcf6 	bl	8000648 <__aeabi_dmul>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc64:	f7f3 fb3a 	bl	80002dc <__adddf3>
 800cc68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc6c:	3601      	adds	r6, #1
 800cc6e:	9b05      	ldr	r3, [sp, #20]
 800cc70:	429e      	cmp	r6, r3
 800cc72:	f1a7 0708 	sub.w	r7, r7, #8
 800cc76:	ddeb      	ble.n	800cc50 <__kernel_rem_pio2+0xa0>
 800cc78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc7c:	f108 0801 	add.w	r8, r8, #1
 800cc80:	ecab 7b02 	vstmia	fp!, {d7}
 800cc84:	3508      	adds	r5, #8
 800cc86:	e7ca      	b.n	800cc1e <__kernel_rem_pio2+0x6e>
 800cc88:	9b00      	ldr	r3, [sp, #0]
 800cc8a:	aa0c      	add	r2, sp, #48	; 0x30
 800cc8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc90:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc92:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cc94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cc98:	9c00      	ldr	r4, [sp, #0]
 800cc9a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc9c:	00e3      	lsls	r3, r4, #3
 800cc9e:	9308      	str	r3, [sp, #32]
 800cca0:	ab98      	add	r3, sp, #608	; 0x260
 800cca2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cca6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ccaa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ccae:	ab70      	add	r3, sp, #448	; 0x1c0
 800ccb0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ccb4:	46c3      	mov	fp, r8
 800ccb6:	46a1      	mov	r9, r4
 800ccb8:	f1b9 0f00 	cmp.w	r9, #0
 800ccbc:	f1a5 0508 	sub.w	r5, r5, #8
 800ccc0:	dc77      	bgt.n	800cdb2 <__kernel_rem_pio2+0x202>
 800ccc2:	ec47 6b10 	vmov	d0, r6, r7
 800ccc6:	4650      	mov	r0, sl
 800ccc8:	f000 fac2 	bl	800d250 <scalbn>
 800cccc:	ec57 6b10 	vmov	r6, r7, d0
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ccd6:	ee10 0a10 	vmov	r0, s0
 800ccda:	4639      	mov	r1, r7
 800ccdc:	f7f3 fcb4 	bl	8000648 <__aeabi_dmul>
 800cce0:	ec41 0b10 	vmov	d0, r0, r1
 800cce4:	f000 fb34 	bl	800d350 <floor>
 800cce8:	4b7a      	ldr	r3, [pc, #488]	; (800ced4 <__kernel_rem_pio2+0x324>)
 800ccea:	ec51 0b10 	vmov	r0, r1, d0
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f7f3 fcaa 	bl	8000648 <__aeabi_dmul>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	f7f3 faec 	bl	80002d8 <__aeabi_dsub>
 800cd00:	460f      	mov	r7, r1
 800cd02:	4606      	mov	r6, r0
 800cd04:	f7f3 ff50 	bl	8000ba8 <__aeabi_d2iz>
 800cd08:	9002      	str	r0, [sp, #8]
 800cd0a:	f7f3 fc33 	bl	8000574 <__aeabi_i2d>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	4630      	mov	r0, r6
 800cd14:	4639      	mov	r1, r7
 800cd16:	f7f3 fadf 	bl	80002d8 <__aeabi_dsub>
 800cd1a:	f1ba 0f00 	cmp.w	sl, #0
 800cd1e:	4606      	mov	r6, r0
 800cd20:	460f      	mov	r7, r1
 800cd22:	dd6d      	ble.n	800ce00 <__kernel_rem_pio2+0x250>
 800cd24:	1e61      	subs	r1, r4, #1
 800cd26:	ab0c      	add	r3, sp, #48	; 0x30
 800cd28:	9d02      	ldr	r5, [sp, #8]
 800cd2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd2e:	f1ca 0018 	rsb	r0, sl, #24
 800cd32:	fa43 f200 	asr.w	r2, r3, r0
 800cd36:	4415      	add	r5, r2
 800cd38:	4082      	lsls	r2, r0
 800cd3a:	1a9b      	subs	r3, r3, r2
 800cd3c:	aa0c      	add	r2, sp, #48	; 0x30
 800cd3e:	9502      	str	r5, [sp, #8]
 800cd40:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cd44:	f1ca 0217 	rsb	r2, sl, #23
 800cd48:	fa43 fb02 	asr.w	fp, r3, r2
 800cd4c:	f1bb 0f00 	cmp.w	fp, #0
 800cd50:	dd65      	ble.n	800ce1e <__kernel_rem_pio2+0x26e>
 800cd52:	9b02      	ldr	r3, [sp, #8]
 800cd54:	2200      	movs	r2, #0
 800cd56:	3301      	adds	r3, #1
 800cd58:	9302      	str	r3, [sp, #8]
 800cd5a:	4615      	mov	r5, r2
 800cd5c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cd60:	4294      	cmp	r4, r2
 800cd62:	f300 809f 	bgt.w	800cea4 <__kernel_rem_pio2+0x2f4>
 800cd66:	f1ba 0f00 	cmp.w	sl, #0
 800cd6a:	dd07      	ble.n	800cd7c <__kernel_rem_pio2+0x1cc>
 800cd6c:	f1ba 0f01 	cmp.w	sl, #1
 800cd70:	f000 80c1 	beq.w	800cef6 <__kernel_rem_pio2+0x346>
 800cd74:	f1ba 0f02 	cmp.w	sl, #2
 800cd78:	f000 80c7 	beq.w	800cf0a <__kernel_rem_pio2+0x35a>
 800cd7c:	f1bb 0f02 	cmp.w	fp, #2
 800cd80:	d14d      	bne.n	800ce1e <__kernel_rem_pio2+0x26e>
 800cd82:	4632      	mov	r2, r6
 800cd84:	463b      	mov	r3, r7
 800cd86:	4954      	ldr	r1, [pc, #336]	; (800ced8 <__kernel_rem_pio2+0x328>)
 800cd88:	2000      	movs	r0, #0
 800cd8a:	f7f3 faa5 	bl	80002d8 <__aeabi_dsub>
 800cd8e:	4606      	mov	r6, r0
 800cd90:	460f      	mov	r7, r1
 800cd92:	2d00      	cmp	r5, #0
 800cd94:	d043      	beq.n	800ce1e <__kernel_rem_pio2+0x26e>
 800cd96:	4650      	mov	r0, sl
 800cd98:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800cec8 <__kernel_rem_pio2+0x318>
 800cd9c:	f000 fa58 	bl	800d250 <scalbn>
 800cda0:	4630      	mov	r0, r6
 800cda2:	4639      	mov	r1, r7
 800cda4:	ec53 2b10 	vmov	r2, r3, d0
 800cda8:	f7f3 fa96 	bl	80002d8 <__aeabi_dsub>
 800cdac:	4606      	mov	r6, r0
 800cdae:	460f      	mov	r7, r1
 800cdb0:	e035      	b.n	800ce1e <__kernel_rem_pio2+0x26e>
 800cdb2:	4b4a      	ldr	r3, [pc, #296]	; (800cedc <__kernel_rem_pio2+0x32c>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4639      	mov	r1, r7
 800cdba:	f7f3 fc45 	bl	8000648 <__aeabi_dmul>
 800cdbe:	f7f3 fef3 	bl	8000ba8 <__aeabi_d2iz>
 800cdc2:	f7f3 fbd7 	bl	8000574 <__aeabi_i2d>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	ec43 2b18 	vmov	d8, r2, r3
 800cdce:	4b44      	ldr	r3, [pc, #272]	; (800cee0 <__kernel_rem_pio2+0x330>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f7f3 fc39 	bl	8000648 <__aeabi_dmul>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4630      	mov	r0, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	f7f3 fa7b 	bl	80002d8 <__aeabi_dsub>
 800cde2:	f7f3 fee1 	bl	8000ba8 <__aeabi_d2iz>
 800cde6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdea:	f84b 0b04 	str.w	r0, [fp], #4
 800cdee:	ec51 0b18 	vmov	r0, r1, d8
 800cdf2:	f7f3 fa73 	bl	80002dc <__adddf3>
 800cdf6:	f109 39ff 	add.w	r9, r9, #4294967295
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	e75b      	b.n	800ccb8 <__kernel_rem_pio2+0x108>
 800ce00:	d106      	bne.n	800ce10 <__kernel_rem_pio2+0x260>
 800ce02:	1e63      	subs	r3, r4, #1
 800ce04:	aa0c      	add	r2, sp, #48	; 0x30
 800ce06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce0a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ce0e:	e79d      	b.n	800cd4c <__kernel_rem_pio2+0x19c>
 800ce10:	4b34      	ldr	r3, [pc, #208]	; (800cee4 <__kernel_rem_pio2+0x334>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	f7f3 fe9e 	bl	8000b54 <__aeabi_dcmpge>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d140      	bne.n	800ce9e <__kernel_rem_pio2+0x2ee>
 800ce1c:	4683      	mov	fp, r0
 800ce1e:	2200      	movs	r2, #0
 800ce20:	2300      	movs	r3, #0
 800ce22:	4630      	mov	r0, r6
 800ce24:	4639      	mov	r1, r7
 800ce26:	f7f3 fe77 	bl	8000b18 <__aeabi_dcmpeq>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f000 80c1 	beq.w	800cfb2 <__kernel_rem_pio2+0x402>
 800ce30:	1e65      	subs	r5, r4, #1
 800ce32:	462b      	mov	r3, r5
 800ce34:	2200      	movs	r2, #0
 800ce36:	9900      	ldr	r1, [sp, #0]
 800ce38:	428b      	cmp	r3, r1
 800ce3a:	da6d      	bge.n	800cf18 <__kernel_rem_pio2+0x368>
 800ce3c:	2a00      	cmp	r2, #0
 800ce3e:	f000 808a 	beq.w	800cf56 <__kernel_rem_pio2+0x3a6>
 800ce42:	ab0c      	add	r3, sp, #48	; 0x30
 800ce44:	f1aa 0a18 	sub.w	sl, sl, #24
 800ce48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 80ae 	beq.w	800cfae <__kernel_rem_pio2+0x3fe>
 800ce52:	4650      	mov	r0, sl
 800ce54:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800cec8 <__kernel_rem_pio2+0x318>
 800ce58:	f000 f9fa 	bl	800d250 <scalbn>
 800ce5c:	1c6b      	adds	r3, r5, #1
 800ce5e:	00da      	lsls	r2, r3, #3
 800ce60:	9205      	str	r2, [sp, #20]
 800ce62:	ec57 6b10 	vmov	r6, r7, d0
 800ce66:	aa70      	add	r2, sp, #448	; 0x1c0
 800ce68:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800cedc <__kernel_rem_pio2+0x32c>
 800ce6c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ce70:	462c      	mov	r4, r5
 800ce72:	f04f 0800 	mov.w	r8, #0
 800ce76:	2c00      	cmp	r4, #0
 800ce78:	f280 80d4 	bge.w	800d024 <__kernel_rem_pio2+0x474>
 800ce7c:	462c      	mov	r4, r5
 800ce7e:	2c00      	cmp	r4, #0
 800ce80:	f2c0 8102 	blt.w	800d088 <__kernel_rem_pio2+0x4d8>
 800ce84:	4b18      	ldr	r3, [pc, #96]	; (800cee8 <__kernel_rem_pio2+0x338>)
 800ce86:	461e      	mov	r6, r3
 800ce88:	ab70      	add	r3, sp, #448	; 0x1c0
 800ce8a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ce8e:	1b2b      	subs	r3, r5, r4
 800ce90:	f04f 0900 	mov.w	r9, #0
 800ce94:	f04f 0a00 	mov.w	sl, #0
 800ce98:	2700      	movs	r7, #0
 800ce9a:	9306      	str	r3, [sp, #24]
 800ce9c:	e0e6      	b.n	800d06c <__kernel_rem_pio2+0x4bc>
 800ce9e:	f04f 0b02 	mov.w	fp, #2
 800cea2:	e756      	b.n	800cd52 <__kernel_rem_pio2+0x1a2>
 800cea4:	f8d8 3000 	ldr.w	r3, [r8]
 800cea8:	bb05      	cbnz	r5, 800ceec <__kernel_rem_pio2+0x33c>
 800ceaa:	b123      	cbz	r3, 800ceb6 <__kernel_rem_pio2+0x306>
 800ceac:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ceb0:	f8c8 3000 	str.w	r3, [r8]
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	3201      	adds	r2, #1
 800ceb8:	f108 0804 	add.w	r8, r8, #4
 800cebc:	461d      	mov	r5, r3
 800cebe:	e74f      	b.n	800cd60 <__kernel_rem_pio2+0x1b0>
	...
 800cecc:	3ff00000 	.word	0x3ff00000
 800ced0:	0800dac8 	.word	0x0800dac8
 800ced4:	40200000 	.word	0x40200000
 800ced8:	3ff00000 	.word	0x3ff00000
 800cedc:	3e700000 	.word	0x3e700000
 800cee0:	41700000 	.word	0x41700000
 800cee4:	3fe00000 	.word	0x3fe00000
 800cee8:	0800da88 	.word	0x0800da88
 800ceec:	1acb      	subs	r3, r1, r3
 800ceee:	f8c8 3000 	str.w	r3, [r8]
 800cef2:	462b      	mov	r3, r5
 800cef4:	e7df      	b.n	800ceb6 <__kernel_rem_pio2+0x306>
 800cef6:	1e62      	subs	r2, r4, #1
 800cef8:	ab0c      	add	r3, sp, #48	; 0x30
 800cefa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cefe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cf02:	a90c      	add	r1, sp, #48	; 0x30
 800cf04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cf08:	e738      	b.n	800cd7c <__kernel_rem_pio2+0x1cc>
 800cf0a:	1e62      	subs	r2, r4, #1
 800cf0c:	ab0c      	add	r3, sp, #48	; 0x30
 800cf0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf12:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf16:	e7f4      	b.n	800cf02 <__kernel_rem_pio2+0x352>
 800cf18:	a90c      	add	r1, sp, #48	; 0x30
 800cf1a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	430a      	orrs	r2, r1
 800cf22:	e788      	b.n	800ce36 <__kernel_rem_pio2+0x286>
 800cf24:	3301      	adds	r3, #1
 800cf26:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cf2a:	2900      	cmp	r1, #0
 800cf2c:	d0fa      	beq.n	800cf24 <__kernel_rem_pio2+0x374>
 800cf2e:	9a08      	ldr	r2, [sp, #32]
 800cf30:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800cf34:	446a      	add	r2, sp
 800cf36:	3a98      	subs	r2, #152	; 0x98
 800cf38:	9208      	str	r2, [sp, #32]
 800cf3a:	9a06      	ldr	r2, [sp, #24]
 800cf3c:	a920      	add	r1, sp, #128	; 0x80
 800cf3e:	18a2      	adds	r2, r4, r2
 800cf40:	18e3      	adds	r3, r4, r3
 800cf42:	f104 0801 	add.w	r8, r4, #1
 800cf46:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800cf4a:	9302      	str	r3, [sp, #8]
 800cf4c:	9b02      	ldr	r3, [sp, #8]
 800cf4e:	4543      	cmp	r3, r8
 800cf50:	da04      	bge.n	800cf5c <__kernel_rem_pio2+0x3ac>
 800cf52:	461c      	mov	r4, r3
 800cf54:	e6a2      	b.n	800cc9c <__kernel_rem_pio2+0xec>
 800cf56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e7e4      	b.n	800cf26 <__kernel_rem_pio2+0x376>
 800cf5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf5e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cf62:	f7f3 fb07 	bl	8000574 <__aeabi_i2d>
 800cf66:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6c:	46ab      	mov	fp, r5
 800cf6e:	461c      	mov	r4, r3
 800cf70:	f04f 0900 	mov.w	r9, #0
 800cf74:	2600      	movs	r6, #0
 800cf76:	2700      	movs	r7, #0
 800cf78:	9b05      	ldr	r3, [sp, #20]
 800cf7a:	4599      	cmp	r9, r3
 800cf7c:	dd06      	ble.n	800cf8c <__kernel_rem_pio2+0x3dc>
 800cf7e:	9b08      	ldr	r3, [sp, #32]
 800cf80:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cf84:	f108 0801 	add.w	r8, r8, #1
 800cf88:	9308      	str	r3, [sp, #32]
 800cf8a:	e7df      	b.n	800cf4c <__kernel_rem_pio2+0x39c>
 800cf8c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cf90:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cf94:	f7f3 fb58 	bl	8000648 <__aeabi_dmul>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	4639      	mov	r1, r7
 800cfa0:	f7f3 f99c 	bl	80002dc <__adddf3>
 800cfa4:	f109 0901 	add.w	r9, r9, #1
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	460f      	mov	r7, r1
 800cfac:	e7e4      	b.n	800cf78 <__kernel_rem_pio2+0x3c8>
 800cfae:	3d01      	subs	r5, #1
 800cfb0:	e747      	b.n	800ce42 <__kernel_rem_pio2+0x292>
 800cfb2:	ec47 6b10 	vmov	d0, r6, r7
 800cfb6:	f1ca 0000 	rsb	r0, sl, #0
 800cfba:	f000 f949 	bl	800d250 <scalbn>
 800cfbe:	ec57 6b10 	vmov	r6, r7, d0
 800cfc2:	4ba0      	ldr	r3, [pc, #640]	; (800d244 <__kernel_rem_pio2+0x694>)
 800cfc4:	ee10 0a10 	vmov	r0, s0
 800cfc8:	2200      	movs	r2, #0
 800cfca:	4639      	mov	r1, r7
 800cfcc:	f7f3 fdc2 	bl	8000b54 <__aeabi_dcmpge>
 800cfd0:	b1f8      	cbz	r0, 800d012 <__kernel_rem_pio2+0x462>
 800cfd2:	4b9d      	ldr	r3, [pc, #628]	; (800d248 <__kernel_rem_pio2+0x698>)
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	4639      	mov	r1, r7
 800cfda:	f7f3 fb35 	bl	8000648 <__aeabi_dmul>
 800cfde:	f7f3 fde3 	bl	8000ba8 <__aeabi_d2iz>
 800cfe2:	4680      	mov	r8, r0
 800cfe4:	f7f3 fac6 	bl	8000574 <__aeabi_i2d>
 800cfe8:	4b96      	ldr	r3, [pc, #600]	; (800d244 <__kernel_rem_pio2+0x694>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	f7f3 fb2c 	bl	8000648 <__aeabi_dmul>
 800cff0:	460b      	mov	r3, r1
 800cff2:	4602      	mov	r2, r0
 800cff4:	4639      	mov	r1, r7
 800cff6:	4630      	mov	r0, r6
 800cff8:	f7f3 f96e 	bl	80002d8 <__aeabi_dsub>
 800cffc:	f7f3 fdd4 	bl	8000ba8 <__aeabi_d2iz>
 800d000:	1c65      	adds	r5, r4, #1
 800d002:	ab0c      	add	r3, sp, #48	; 0x30
 800d004:	f10a 0a18 	add.w	sl, sl, #24
 800d008:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d00c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d010:	e71f      	b.n	800ce52 <__kernel_rem_pio2+0x2a2>
 800d012:	4630      	mov	r0, r6
 800d014:	4639      	mov	r1, r7
 800d016:	f7f3 fdc7 	bl	8000ba8 <__aeabi_d2iz>
 800d01a:	ab0c      	add	r3, sp, #48	; 0x30
 800d01c:	4625      	mov	r5, r4
 800d01e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d022:	e716      	b.n	800ce52 <__kernel_rem_pio2+0x2a2>
 800d024:	ab0c      	add	r3, sp, #48	; 0x30
 800d026:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d02a:	f7f3 faa3 	bl	8000574 <__aeabi_i2d>
 800d02e:	4632      	mov	r2, r6
 800d030:	463b      	mov	r3, r7
 800d032:	f7f3 fb09 	bl	8000648 <__aeabi_dmul>
 800d036:	4642      	mov	r2, r8
 800d038:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d03c:	464b      	mov	r3, r9
 800d03e:	4630      	mov	r0, r6
 800d040:	4639      	mov	r1, r7
 800d042:	f7f3 fb01 	bl	8000648 <__aeabi_dmul>
 800d046:	3c01      	subs	r4, #1
 800d048:	4606      	mov	r6, r0
 800d04a:	460f      	mov	r7, r1
 800d04c:	e713      	b.n	800ce76 <__kernel_rem_pio2+0x2c6>
 800d04e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d052:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d056:	f7f3 faf7 	bl	8000648 <__aeabi_dmul>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	4648      	mov	r0, r9
 800d060:	4651      	mov	r1, sl
 800d062:	f7f3 f93b 	bl	80002dc <__adddf3>
 800d066:	3701      	adds	r7, #1
 800d068:	4681      	mov	r9, r0
 800d06a:	468a      	mov	sl, r1
 800d06c:	9b00      	ldr	r3, [sp, #0]
 800d06e:	429f      	cmp	r7, r3
 800d070:	dc02      	bgt.n	800d078 <__kernel_rem_pio2+0x4c8>
 800d072:	9b06      	ldr	r3, [sp, #24]
 800d074:	429f      	cmp	r7, r3
 800d076:	ddea      	ble.n	800d04e <__kernel_rem_pio2+0x49e>
 800d078:	9a06      	ldr	r2, [sp, #24]
 800d07a:	ab48      	add	r3, sp, #288	; 0x120
 800d07c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d080:	e9c6 9a00 	strd	r9, sl, [r6]
 800d084:	3c01      	subs	r4, #1
 800d086:	e6fa      	b.n	800ce7e <__kernel_rem_pio2+0x2ce>
 800d088:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	dc0b      	bgt.n	800d0a6 <__kernel_rem_pio2+0x4f6>
 800d08e:	2b00      	cmp	r3, #0
 800d090:	dc39      	bgt.n	800d106 <__kernel_rem_pio2+0x556>
 800d092:	d05d      	beq.n	800d150 <__kernel_rem_pio2+0x5a0>
 800d094:	9b02      	ldr	r3, [sp, #8]
 800d096:	f003 0007 	and.w	r0, r3, #7
 800d09a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d09e:	ecbd 8b02 	vpop	{d8}
 800d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d0a8:	2b03      	cmp	r3, #3
 800d0aa:	d1f3      	bne.n	800d094 <__kernel_rem_pio2+0x4e4>
 800d0ac:	9b05      	ldr	r3, [sp, #20]
 800d0ae:	9500      	str	r5, [sp, #0]
 800d0b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d0b4:	eb0d 0403 	add.w	r4, sp, r3
 800d0b8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d0bc:	46a2      	mov	sl, r4
 800d0be:	9b00      	ldr	r3, [sp, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f1aa 0a08 	sub.w	sl, sl, #8
 800d0c6:	dc69      	bgt.n	800d19c <__kernel_rem_pio2+0x5ec>
 800d0c8:	46aa      	mov	sl, r5
 800d0ca:	f1ba 0f01 	cmp.w	sl, #1
 800d0ce:	f1a4 0408 	sub.w	r4, r4, #8
 800d0d2:	f300 8083 	bgt.w	800d1dc <__kernel_rem_pio2+0x62c>
 800d0d6:	9c05      	ldr	r4, [sp, #20]
 800d0d8:	ab48      	add	r3, sp, #288	; 0x120
 800d0da:	441c      	add	r4, r3
 800d0dc:	2000      	movs	r0, #0
 800d0de:	2100      	movs	r1, #0
 800d0e0:	2d01      	cmp	r5, #1
 800d0e2:	f300 809a 	bgt.w	800d21a <__kernel_rem_pio2+0x66a>
 800d0e6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d0ea:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d0ee:	f1bb 0f00 	cmp.w	fp, #0
 800d0f2:	f040 8098 	bne.w	800d226 <__kernel_rem_pio2+0x676>
 800d0f6:	9b04      	ldr	r3, [sp, #16]
 800d0f8:	e9c3 7800 	strd	r7, r8, [r3]
 800d0fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d100:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d104:	e7c6      	b.n	800d094 <__kernel_rem_pio2+0x4e4>
 800d106:	9e05      	ldr	r6, [sp, #20]
 800d108:	ab48      	add	r3, sp, #288	; 0x120
 800d10a:	441e      	add	r6, r3
 800d10c:	462c      	mov	r4, r5
 800d10e:	2000      	movs	r0, #0
 800d110:	2100      	movs	r1, #0
 800d112:	2c00      	cmp	r4, #0
 800d114:	da33      	bge.n	800d17e <__kernel_rem_pio2+0x5ce>
 800d116:	f1bb 0f00 	cmp.w	fp, #0
 800d11a:	d036      	beq.n	800d18a <__kernel_rem_pio2+0x5da>
 800d11c:	4602      	mov	r2, r0
 800d11e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d122:	9c04      	ldr	r4, [sp, #16]
 800d124:	e9c4 2300 	strd	r2, r3, [r4]
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d130:	f7f3 f8d2 	bl	80002d8 <__aeabi_dsub>
 800d134:	ae4a      	add	r6, sp, #296	; 0x128
 800d136:	2401      	movs	r4, #1
 800d138:	42a5      	cmp	r5, r4
 800d13a:	da29      	bge.n	800d190 <__kernel_rem_pio2+0x5e0>
 800d13c:	f1bb 0f00 	cmp.w	fp, #0
 800d140:	d002      	beq.n	800d148 <__kernel_rem_pio2+0x598>
 800d142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d146:	4619      	mov	r1, r3
 800d148:	9b04      	ldr	r3, [sp, #16]
 800d14a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d14e:	e7a1      	b.n	800d094 <__kernel_rem_pio2+0x4e4>
 800d150:	9c05      	ldr	r4, [sp, #20]
 800d152:	ab48      	add	r3, sp, #288	; 0x120
 800d154:	441c      	add	r4, r3
 800d156:	2000      	movs	r0, #0
 800d158:	2100      	movs	r1, #0
 800d15a:	2d00      	cmp	r5, #0
 800d15c:	da09      	bge.n	800d172 <__kernel_rem_pio2+0x5c2>
 800d15e:	f1bb 0f00 	cmp.w	fp, #0
 800d162:	d002      	beq.n	800d16a <__kernel_rem_pio2+0x5ba>
 800d164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d168:	4619      	mov	r1, r3
 800d16a:	9b04      	ldr	r3, [sp, #16]
 800d16c:	e9c3 0100 	strd	r0, r1, [r3]
 800d170:	e790      	b.n	800d094 <__kernel_rem_pio2+0x4e4>
 800d172:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d176:	f7f3 f8b1 	bl	80002dc <__adddf3>
 800d17a:	3d01      	subs	r5, #1
 800d17c:	e7ed      	b.n	800d15a <__kernel_rem_pio2+0x5aa>
 800d17e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d182:	f7f3 f8ab 	bl	80002dc <__adddf3>
 800d186:	3c01      	subs	r4, #1
 800d188:	e7c3      	b.n	800d112 <__kernel_rem_pio2+0x562>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	e7c8      	b.n	800d122 <__kernel_rem_pio2+0x572>
 800d190:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d194:	f7f3 f8a2 	bl	80002dc <__adddf3>
 800d198:	3401      	adds	r4, #1
 800d19a:	e7cd      	b.n	800d138 <__kernel_rem_pio2+0x588>
 800d19c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d1a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d1a4:	9b00      	ldr	r3, [sp, #0]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	4632      	mov	r2, r6
 800d1ac:	463b      	mov	r3, r7
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f3 f893 	bl	80002dc <__adddf3>
 800d1b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	460b      	mov	r3, r1
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	f7f3 f889 	bl	80002d8 <__aeabi_dsub>
 800d1c6:	4632      	mov	r2, r6
 800d1c8:	463b      	mov	r3, r7
 800d1ca:	f7f3 f887 	bl	80002dc <__adddf3>
 800d1ce:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d1d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1d6:	ed8a 7b00 	vstr	d7, [sl]
 800d1da:	e770      	b.n	800d0be <__kernel_rem_pio2+0x50e>
 800d1dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d1e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	4632      	mov	r2, r6
 800d1e8:	463b      	mov	r3, r7
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	f7f3 f876 	bl	80002dc <__adddf3>
 800d1f0:	e9cd 0100 	strd	r0, r1, [sp]
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	f7f3 f86c 	bl	80002d8 <__aeabi_dsub>
 800d200:	4632      	mov	r2, r6
 800d202:	463b      	mov	r3, r7
 800d204:	f7f3 f86a 	bl	80002dc <__adddf3>
 800d208:	ed9d 7b00 	vldr	d7, [sp]
 800d20c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d210:	ed84 7b00 	vstr	d7, [r4]
 800d214:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d218:	e757      	b.n	800d0ca <__kernel_rem_pio2+0x51a>
 800d21a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d21e:	f7f3 f85d 	bl	80002dc <__adddf3>
 800d222:	3d01      	subs	r5, #1
 800d224:	e75c      	b.n	800d0e0 <__kernel_rem_pio2+0x530>
 800d226:	9b04      	ldr	r3, [sp, #16]
 800d228:	9a04      	ldr	r2, [sp, #16]
 800d22a:	601f      	str	r7, [r3, #0]
 800d22c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d230:	605c      	str	r4, [r3, #4]
 800d232:	609d      	str	r5, [r3, #8]
 800d234:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d238:	60d3      	str	r3, [r2, #12]
 800d23a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d23e:	6110      	str	r0, [r2, #16]
 800d240:	6153      	str	r3, [r2, #20]
 800d242:	e727      	b.n	800d094 <__kernel_rem_pio2+0x4e4>
 800d244:	41700000 	.word	0x41700000
 800d248:	3e700000 	.word	0x3e700000
 800d24c:	00000000 	.word	0x00000000

0800d250 <scalbn>:
 800d250:	b570      	push	{r4, r5, r6, lr}
 800d252:	ec55 4b10 	vmov	r4, r5, d0
 800d256:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d25a:	4606      	mov	r6, r0
 800d25c:	462b      	mov	r3, r5
 800d25e:	b999      	cbnz	r1, 800d288 <scalbn+0x38>
 800d260:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d264:	4323      	orrs	r3, r4
 800d266:	d03f      	beq.n	800d2e8 <scalbn+0x98>
 800d268:	4b35      	ldr	r3, [pc, #212]	; (800d340 <scalbn+0xf0>)
 800d26a:	4629      	mov	r1, r5
 800d26c:	ee10 0a10 	vmov	r0, s0
 800d270:	2200      	movs	r2, #0
 800d272:	f7f3 f9e9 	bl	8000648 <__aeabi_dmul>
 800d276:	4b33      	ldr	r3, [pc, #204]	; (800d344 <scalbn+0xf4>)
 800d278:	429e      	cmp	r6, r3
 800d27a:	4604      	mov	r4, r0
 800d27c:	460d      	mov	r5, r1
 800d27e:	da10      	bge.n	800d2a2 <scalbn+0x52>
 800d280:	a327      	add	r3, pc, #156	; (adr r3, 800d320 <scalbn+0xd0>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	e01f      	b.n	800d2c8 <scalbn+0x78>
 800d288:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d28c:	4291      	cmp	r1, r2
 800d28e:	d10c      	bne.n	800d2aa <scalbn+0x5a>
 800d290:	ee10 2a10 	vmov	r2, s0
 800d294:	4620      	mov	r0, r4
 800d296:	4629      	mov	r1, r5
 800d298:	f7f3 f820 	bl	80002dc <__adddf3>
 800d29c:	4604      	mov	r4, r0
 800d29e:	460d      	mov	r5, r1
 800d2a0:	e022      	b.n	800d2e8 <scalbn+0x98>
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d2a8:	3936      	subs	r1, #54	; 0x36
 800d2aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d2ae:	4296      	cmp	r6, r2
 800d2b0:	dd0d      	ble.n	800d2ce <scalbn+0x7e>
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	a11c      	add	r1, pc, #112	; (adr r1, 800d328 <scalbn+0xd8>)
 800d2b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ba:	da02      	bge.n	800d2c2 <scalbn+0x72>
 800d2bc:	a11c      	add	r1, pc, #112	; (adr r1, 800d330 <scalbn+0xe0>)
 800d2be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2c2:	a319      	add	r3, pc, #100	; (adr r3, 800d328 <scalbn+0xd8>)
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	f7f3 f9be 	bl	8000648 <__aeabi_dmul>
 800d2cc:	e7e6      	b.n	800d29c <scalbn+0x4c>
 800d2ce:	1872      	adds	r2, r6, r1
 800d2d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d2d4:	428a      	cmp	r2, r1
 800d2d6:	dcec      	bgt.n	800d2b2 <scalbn+0x62>
 800d2d8:	2a00      	cmp	r2, #0
 800d2da:	dd08      	ble.n	800d2ee <scalbn+0x9e>
 800d2dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d2e8:	ec45 4b10 	vmov	d0, r4, r5
 800d2ec:	bd70      	pop	{r4, r5, r6, pc}
 800d2ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d2f2:	da08      	bge.n	800d306 <scalbn+0xb6>
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	a10a      	add	r1, pc, #40	; (adr r1, 800d320 <scalbn+0xd0>)
 800d2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2fc:	dac0      	bge.n	800d280 <scalbn+0x30>
 800d2fe:	a10e      	add	r1, pc, #56	; (adr r1, 800d338 <scalbn+0xe8>)
 800d300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d304:	e7bc      	b.n	800d280 <scalbn+0x30>
 800d306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d30a:	3236      	adds	r2, #54	; 0x36
 800d30c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d310:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d314:	4620      	mov	r0, r4
 800d316:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <scalbn+0xf8>)
 800d318:	2200      	movs	r2, #0
 800d31a:	e7d5      	b.n	800d2c8 <scalbn+0x78>
 800d31c:	f3af 8000 	nop.w
 800d320:	c2f8f359 	.word	0xc2f8f359
 800d324:	01a56e1f 	.word	0x01a56e1f
 800d328:	8800759c 	.word	0x8800759c
 800d32c:	7e37e43c 	.word	0x7e37e43c
 800d330:	8800759c 	.word	0x8800759c
 800d334:	fe37e43c 	.word	0xfe37e43c
 800d338:	c2f8f359 	.word	0xc2f8f359
 800d33c:	81a56e1f 	.word	0x81a56e1f
 800d340:	43500000 	.word	0x43500000
 800d344:	ffff3cb0 	.word	0xffff3cb0
 800d348:	3c900000 	.word	0x3c900000
 800d34c:	00000000 	.word	0x00000000

0800d350 <floor>:
 800d350:	ec51 0b10 	vmov	r0, r1, d0
 800d354:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d360:	2e13      	cmp	r6, #19
 800d362:	ee10 5a10 	vmov	r5, s0
 800d366:	ee10 8a10 	vmov	r8, s0
 800d36a:	460c      	mov	r4, r1
 800d36c:	dc31      	bgt.n	800d3d2 <floor+0x82>
 800d36e:	2e00      	cmp	r6, #0
 800d370:	da14      	bge.n	800d39c <floor+0x4c>
 800d372:	a333      	add	r3, pc, #204	; (adr r3, 800d440 <floor+0xf0>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	f7f2 ffb0 	bl	80002dc <__adddf3>
 800d37c:	2200      	movs	r2, #0
 800d37e:	2300      	movs	r3, #0
 800d380:	f7f3 fbf2 	bl	8000b68 <__aeabi_dcmpgt>
 800d384:	b138      	cbz	r0, 800d396 <floor+0x46>
 800d386:	2c00      	cmp	r4, #0
 800d388:	da53      	bge.n	800d432 <floor+0xe2>
 800d38a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d38e:	4325      	orrs	r5, r4
 800d390:	d052      	beq.n	800d438 <floor+0xe8>
 800d392:	4c2d      	ldr	r4, [pc, #180]	; (800d448 <floor+0xf8>)
 800d394:	2500      	movs	r5, #0
 800d396:	4621      	mov	r1, r4
 800d398:	4628      	mov	r0, r5
 800d39a:	e024      	b.n	800d3e6 <floor+0x96>
 800d39c:	4f2b      	ldr	r7, [pc, #172]	; (800d44c <floor+0xfc>)
 800d39e:	4137      	asrs	r7, r6
 800d3a0:	ea01 0307 	and.w	r3, r1, r7
 800d3a4:	4303      	orrs	r3, r0
 800d3a6:	d01e      	beq.n	800d3e6 <floor+0x96>
 800d3a8:	a325      	add	r3, pc, #148	; (adr r3, 800d440 <floor+0xf0>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	f7f2 ff95 	bl	80002dc <__adddf3>
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f7f3 fbd7 	bl	8000b68 <__aeabi_dcmpgt>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d0eb      	beq.n	800d396 <floor+0x46>
 800d3be:	2c00      	cmp	r4, #0
 800d3c0:	bfbe      	ittt	lt
 800d3c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d3c6:	4133      	asrlt	r3, r6
 800d3c8:	18e4      	addlt	r4, r4, r3
 800d3ca:	ea24 0407 	bic.w	r4, r4, r7
 800d3ce:	2500      	movs	r5, #0
 800d3d0:	e7e1      	b.n	800d396 <floor+0x46>
 800d3d2:	2e33      	cmp	r6, #51	; 0x33
 800d3d4:	dd0b      	ble.n	800d3ee <floor+0x9e>
 800d3d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d3da:	d104      	bne.n	800d3e6 <floor+0x96>
 800d3dc:	ee10 2a10 	vmov	r2, s0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	f7f2 ff7b 	bl	80002dc <__adddf3>
 800d3e6:	ec41 0b10 	vmov	d0, r0, r1
 800d3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d3f2:	f04f 37ff 	mov.w	r7, #4294967295
 800d3f6:	40df      	lsrs	r7, r3
 800d3f8:	4238      	tst	r0, r7
 800d3fa:	d0f4      	beq.n	800d3e6 <floor+0x96>
 800d3fc:	a310      	add	r3, pc, #64	; (adr r3, 800d440 <floor+0xf0>)
 800d3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d402:	f7f2 ff6b 	bl	80002dc <__adddf3>
 800d406:	2200      	movs	r2, #0
 800d408:	2300      	movs	r3, #0
 800d40a:	f7f3 fbad 	bl	8000b68 <__aeabi_dcmpgt>
 800d40e:	2800      	cmp	r0, #0
 800d410:	d0c1      	beq.n	800d396 <floor+0x46>
 800d412:	2c00      	cmp	r4, #0
 800d414:	da0a      	bge.n	800d42c <floor+0xdc>
 800d416:	2e14      	cmp	r6, #20
 800d418:	d101      	bne.n	800d41e <floor+0xce>
 800d41a:	3401      	adds	r4, #1
 800d41c:	e006      	b.n	800d42c <floor+0xdc>
 800d41e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d422:	2301      	movs	r3, #1
 800d424:	40b3      	lsls	r3, r6
 800d426:	441d      	add	r5, r3
 800d428:	45a8      	cmp	r8, r5
 800d42a:	d8f6      	bhi.n	800d41a <floor+0xca>
 800d42c:	ea25 0507 	bic.w	r5, r5, r7
 800d430:	e7b1      	b.n	800d396 <floor+0x46>
 800d432:	2500      	movs	r5, #0
 800d434:	462c      	mov	r4, r5
 800d436:	e7ae      	b.n	800d396 <floor+0x46>
 800d438:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d43c:	e7ab      	b.n	800d396 <floor+0x46>
 800d43e:	bf00      	nop
 800d440:	8800759c 	.word	0x8800759c
 800d444:	7e37e43c 	.word	0x7e37e43c
 800d448:	bff00000 	.word	0xbff00000
 800d44c:	000fffff 	.word	0x000fffff

0800d450 <_sbrk>:
 800d450:	4a04      	ldr	r2, [pc, #16]	; (800d464 <_sbrk+0x14>)
 800d452:	6811      	ldr	r1, [r2, #0]
 800d454:	4603      	mov	r3, r0
 800d456:	b909      	cbnz	r1, 800d45c <_sbrk+0xc>
 800d458:	4903      	ldr	r1, [pc, #12]	; (800d468 <_sbrk+0x18>)
 800d45a:	6011      	str	r1, [r2, #0]
 800d45c:	6810      	ldr	r0, [r2, #0]
 800d45e:	4403      	add	r3, r0
 800d460:	6013      	str	r3, [r2, #0]
 800d462:	4770      	bx	lr
 800d464:	200017d8 	.word	0x200017d8
 800d468:	200017e0 	.word	0x200017e0

0800d46c <_init>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr

0800d478 <_fini>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	bf00      	nop
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr
