
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb2c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800ed10  0800ed10  0001ed10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f720  0800f720  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f720  0800f720  0001f720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f728  0800f728  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f728  0800f728  0001f728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f72c  0800f72c  0001f72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f730  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016dc  200001f0  0800f920  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018cc  0800f920  000218cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039db9  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064d6  00000000  00000000  0005a01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00016b58  00000000  00000000  000604f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018b8  00000000  00000000  00077050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d68  00000000  00000000  00078908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dc11  00000000  00000000  0007b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000381b6  00000000  00000000  000a9281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011eaa4  00000000  00000000  000e1437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006748  00000000  00000000  001ffedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00206624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ecf4 	.word	0x0800ecf4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800ecf4 	.word	0x0800ecf4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
  }
  float_to_uchar4(senddata_motor, duty);
  can2_send(motor_id, senddata_motor);
}

void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fd4:	b500      	push	{lr}
  if (duty < -limit) {
 8000fd6:	eef1 7a60 	vneg.f32	s15, s1
 8000fda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fe2:	b083      	sub	sp, #12
  if (duty < -limit) {
 8000fe4:	d408      	bmi.n	8000ff8 <actuator_motor1+0x24>
  } else if (duty > limit) {
 8000fe6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	bf8c      	ite	hi
 8000ff0:	eef0 7a60 	vmovhi.f32	s15, s1
 8000ff4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8000ff8:	4668      	mov	r0, sp
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f004 fd73 	bl	8005ae8 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001002:	4669      	mov	r1, sp
 8001004:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001008:	f000 fb50 	bl	80016ac <can1_send>
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 800100c:	b003      	add	sp, #12
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001012:	bf00      	nop

08001014 <actuator_motor2>:
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001014:	b500      	push	{lr}
  if (duty < -limit) {
 8001016:	eef1 7a60 	vneg.f32	s15, s1
 800101a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001022:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001024:	d408      	bmi.n	8001038 <actuator_motor2+0x24>
  } else if (duty > limit) {
 8001026:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	bf8c      	ite	hi
 8001030:	eef0 7a60 	vmovhi.f32	s15, s1
 8001034:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001038:	4668      	mov	r0, sp
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	f004 fd53 	bl	8005ae8 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001042:	4669      	mov	r1, sp
 8001044:	f240 1001 	movw	r0, #257	; 0x101
 8001048:	f000 fb30 	bl	80016ac <can1_send>
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 800104c:	b003      	add	sp, #12
 800104e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001052:	bf00      	nop

08001054 <actuator_motor3>:
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001054:	b500      	push	{lr}
  if (duty < -limit) {
 8001056:	eef1 7a60 	vneg.f32	s15, s1
 800105a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001062:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001064:	d408      	bmi.n	8001078 <actuator_motor3+0x24>
  } else if (duty > limit) {
 8001066:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	bf8c      	ite	hi
 8001070:	eef0 7a60 	vmovhi.f32	s15, s1
 8001074:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001078:	4668      	mov	r0, sp
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	f004 fd33 	bl	8005ae8 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 8001082:	4669      	mov	r1, sp
 8001084:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001088:	f000 fb60 	bl	800174c <can2_send>
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 800108c:	b003      	add	sp, #12
 800108e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001092:	bf00      	nop

08001094 <actuator_motor4>:
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 8001094:	b500      	push	{lr}
  if (duty < -limit) {
 8001096:	eef1 7a60 	vneg.f32	s15, s1
 800109a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010a2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010a4:	d408      	bmi.n	80010b8 <actuator_motor4+0x24>
  } else if (duty > limit) {
 80010a6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	bf8c      	ite	hi
 80010b0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010b4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010b8:	4668      	mov	r0, sp
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f004 fd13 	bl	8005ae8 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 80010c2:	4669      	mov	r1, sp
 80010c4:	f240 1003 	movw	r0, #259	; 0x103
 80010c8:	f000 fb40 	bl	800174c <can2_send>
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010cc:	b003      	add	sp, #12
 80010ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d2:	bf00      	nop

080010d4 <actuator_motor5>:
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010d4:	b500      	push	{lr}
  if (duty < -limit) {
 80010d6:	eef1 7a60 	vneg.f32	s15, s1
 80010da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010e2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010e4:	d408      	bmi.n	80010f8 <actuator_motor5+0x24>
  } else if (duty > limit) {
 80010e6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	bf8c      	ite	hi
 80010f0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010f4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010f8:	4668      	mov	r0, sp
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f004 fcf3 	bl	8005ae8 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001102:	4669      	mov	r1, sp
 8001104:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001108:	f000 fad0 	bl	80016ac <can1_send>
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 800110c:	b003      	add	sp, #12
 800110e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001112:	bf00      	nop

08001114 <actuator_dribbler_up>:

void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 8001114:	b500      	push	{lr}
 8001116:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001118:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001134 <actuator_dribbler_up+0x20>
 800111c:	4668      	mov	r0, sp
 800111e:	f004 fce3 	bl	8005ae8 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001122:	4669      	mov	r1, sp
 8001124:	f240 1005 	movw	r0, #261	; 0x105
 8001128:	f000 fac0 	bl	80016ac <can1_send>
void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 800112c:	b003      	add	sp, #12
 800112e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001132:	bf00      	nop
 8001134:	3f4ccccd 	.word	0x3f4ccccd

08001138 <actuator_dribbler_down>:
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001138:	b500      	push	{lr}
 800113a:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 800113c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001158 <actuator_dribbler_down+0x20>
 8001140:	4668      	mov	r0, sp
 8001142:	f004 fcd1 	bl	8005ae8 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001146:	4669      	mov	r1, sp
 8001148:	f240 1005 	movw	r0, #261	; 0x105
 800114c:	f000 faae 	bl	80016ac <can1_send>
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001150:	b003      	add	sp, #12
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
 8001156:	bf00      	nop
 8001158:	00000000 	.word	0x00000000

0800115c <actuator_kicker_voltage>:

void actuator_kicker_voltage(float voltage)
{
 800115c:	b500      	push	{lr}
 800115e:	b083      	sub	sp, #12
  uint8_t senddata_kick[8];
  float_to_uchar4(&senddata_kick[4], voltage);
 8001160:	a801      	add	r0, sp, #4
 8001162:	f004 fcc1 	bl	8005ae8 <float_to_uchar4>

  senddata_kick[0] = 0;
 8001166:	2300      	movs	r3, #0
  can1_send(0x110, senddata_kick);
 8001168:	4669      	mov	r1, sp
 800116a:	f44f 7088 	mov.w	r0, #272	; 0x110
  senddata_kick[0] = 0;
 800116e:	f88d 3000 	strb.w	r3, [sp]
  can1_send(0x110, senddata_kick);
 8001172:	f000 fa9b 	bl	80016ac <can1_send>
}
 8001176:	b003      	add	sp, #12
 8001178:	f85d fb04 	ldr.w	pc, [sp], #4

0800117c <actuator_kicker>:

void actuator_kicker(uint8_t id, uint8_t param)
{
 800117c:	b500      	push	{lr}
 800117e:	b083      	sub	sp, #12
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
  uint8_t senddata_kick[8];
  senddata_kick[0] = id;
  senddata_kick[1] = param;
  can1_send(0x110, senddata_kick);
 8001184:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001188:	4669      	mov	r1, sp
  senddata_kick[0] = id;
 800118a:	f88d 2000 	strb.w	r2, [sp]
  senddata_kick[1] = param;
 800118e:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x110, senddata_kick);
 8001192:	f000 fa8b 	bl	80016ac <can1_send>
  can2_send(0x110, senddata_kick);
 8001196:	4669      	mov	r1, sp
 8001198:	f44f 7088 	mov.w	r0, #272	; 0x110
 800119c:	f000 fad6 	bl	800174c <can2_send>
}
 80011a0:	b003      	add	sp, #12
 80011a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a6:	bf00      	nop

080011a8 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on)
{
 80011a8:	b500      	push	{lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	4603      	mov	r3, r0
  /*id 0=>off
	 *   1=>on
	 * */
  uint8_t senddata_power[8];
  senddata_power[0] = 0;
 80011ae:	2200      	movs	r2, #0
  senddata_power[1] = power_on;
  can1_send(0x010, senddata_power);
 80011b0:	4669      	mov	r1, sp
 80011b2:	2010      	movs	r0, #16
  senddata_power[0] = 0;
 80011b4:	f88d 2000 	strb.w	r2, [sp]
  senddata_power[1] = power_on;
 80011b8:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x010, senddata_power);
 80011bc:	f000 fa76 	bl	80016ac <can1_send>
  can2_send(0x010, senddata_power);
 80011c0:	4669      	mov	r1, sp
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 fac2 	bl	800174c <can2_send>
}
 80011c8:	b003      	add	sp, #12
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ce:	bf00      	nop

080011d0 <actuator_power_param>:

void actuator_power_param(uint8_t id, float param)
{
 80011d0:	b500      	push	{lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	4603      	mov	r3, r0
 * */

  uint8_t senddata_power_param[8];

  senddata_power_param[0] = id;
  float_to_uchar4(&senddata_power_param[1], param);
 80011d6:	f10d 0001 	add.w	r0, sp, #1
  senddata_power_param[0] = id;
 80011da:	f88d 3000 	strb.w	r3, [sp]
  float_to_uchar4(&senddata_power_param[1], param);
 80011de:	f004 fc83 	bl	8005ae8 <float_to_uchar4>

  can1_send(0x010, senddata_power_param);
 80011e2:	4669      	mov	r1, sp
 80011e4:	2010      	movs	r0, #16
 80011e6:	f000 fa61 	bl	80016ac <can1_send>
}
 80011ea:	b003      	add	sp, #12
 80011ec:	f85d fb04 	ldr.w	pc, [sp], #4

080011f0 <actuator_buzzer>:
  send_data_param[0] = param5;
  can1_send(0x304, send_data_param);
}

void actuator_buzzer(uint16_t ontime, uint16_t offtime)
{
 80011f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011f2:	4d07      	ldr	r5, [pc, #28]	; (8001210 <actuator_buzzer+0x20>)
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	22fa      	movs	r2, #250	; 0xfa
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
{
 80011fa:	460c      	mov	r4, r1
  HAL_Delay(ontime);
 80011fc:	f004 fe1c 	bl	8005e38 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(offtime);
 8001206:	4620      	mov	r0, r4
}
 8001208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(offtime);
 800120c:	f004 be14 	b.w	8005e38 <HAL_Delay>
 8001210:	200013b0 	.word	0x200013b0

08001214 <actuator_buzzer_on>:

void actuator_buzzer_on()
{
  __HAL_TIM_SET_PRESCALER(&htim5, 170);
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <actuator_buzzer_on+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	21aa      	movs	r1, #170	; 0xaa
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 800121a:	22fa      	movs	r2, #250	; 0xfa
  __HAL_TIM_SET_PRESCALER(&htim5, 170);
 800121c:	6299      	str	r1, [r3, #40]	; 0x28
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200013b0 	.word	0x200013b0

08001228 <actuator_buzzer_frq>:

void actuator_buzzer_off() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); }

void actuator_buzzer_frq_on(float frq)
{
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001228:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001250 <actuator_buzzer_frq+0x28>
 800122c:	eec7 7a00 	vdiv.f32	s15, s14, s0
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
}
void actuator_buzzer_frq(float frq, uint16_t time)
{
 8001230:	b510      	push	{r4, lr}
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001232:	4c08      	ldr	r4, [pc, #32]	; (8001254 <actuator_buzzer_frq+0x2c>)
 8001234:	6823      	ldr	r3, [r4, #0]
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001236:	22fa      	movs	r2, #250	; 0xfa
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
  actuator_buzzer_frq_on(frq);
  HAL_Delay(time);
 8001242:	f004 fdf9 	bl	8005e38 <HAL_Delay>
void actuator_buzzer_off() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); }
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	2200      	movs	r2, #0
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
  actuator_buzzer_off();
}
 800124c:	bd10      	pop	{r4, pc}
 800124e:	bf00      	nop
 8001250:	48a60400 	.word	0x48a60400
 8001254:	200013b0 	.word	0x200013b0

08001258 <actuator_motor_calib>:

  HAL_Delay(80);
}

void actuator_motor_calib(int board)
{
 8001258:	b500      	push	{lr}
  uint8_t dummy[8] = {0};
 800125a:	2300      	movs	r3, #0
{
 800125c:	b083      	sub	sp, #12
  uint8_t dummy[8] = {0};
 800125e:	e9cd 3300 	strd	r3, r3, [sp]
  if (board == 0) {
 8001262:	b120      	cbz	r0, 800126e <actuator_motor_calib+0x16>
    can1_send(0x310, dummy);
  } else if (board == 1) {
 8001264:	2801      	cmp	r0, #1
 8001266:	d00a      	beq.n	800127e <actuator_motor_calib+0x26>
    can2_send(0x310, dummy);
  }
}
 8001268:	b003      	add	sp, #12
 800126a:	f85d fb04 	ldr.w	pc, [sp], #4
    can1_send(0x310, dummy);
 800126e:	4669      	mov	r1, sp
 8001270:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001274:	f000 fa1a 	bl	80016ac <can1_send>
}
 8001278:	b003      	add	sp, #12
 800127a:	f85d fb04 	ldr.w	pc, [sp], #4
    can2_send(0x310, dummy);
 800127e:	4669      	mov	r1, sp
 8001280:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001284:	f000 fa62 	bl	800174c <can2_send>
}
 8001288:	b003      	add	sp, #12
 800128a:	f85d fb04 	ldr.w	pc, [sp], #4
 800128e:	bf00      	nop

08001290 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001290:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001292:	2400      	movs	r4, #0
{
 8001294:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	2220      	movs	r2, #32
 8001298:	4621      	mov	r1, r4
 800129a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800129c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80012a0:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012a2:	f00a fbcd 	bl	800ba40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_ADC1_Init+0xa4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b0:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b2:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b6:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ba:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012bc:	8383      	strh	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012be:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 80012c0:	2301      	movs	r3, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012c2:	2240      	movs	r2, #64	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012cc:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 80012d0:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012da:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012dc:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.OversamplingMode = ENABLE;
 80012de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012e2:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012e4:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e6:	f004 fdb9 	bl	8005e5c <HAL_ADC_Init>
 80012ea:	b9c8      	cbnz	r0, 8001320 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012ec:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012f0:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012f2:	a901      	add	r1, sp, #4
 80012f4:	f005 fa7a 	bl	80067ec <HAL_ADCEx_MultiModeConfigChannel>
 80012f8:	b9c8      	cbnz	r0, 800132e <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001304:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001306:	237f      	movs	r3, #127	; 0x7f
 8001308:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130c:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800130e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001312:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001316:	f004 ff17 	bl	8006148 <HAL_ADC_ConfigChannel>
 800131a:	b920      	cbnz	r0, 8001326 <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131c:	b00c      	add	sp, #48	; 0x30
 800131e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001320:	f002 fdd8 	bl	8003ed4 <Error_Handler>
 8001324:	e7e2      	b.n	80012ec <MX_ADC1_Init+0x5c>
    Error_Handler();
 8001326:	f002 fdd5 	bl	8003ed4 <Error_Handler>
}
 800132a:	b00c      	add	sp, #48	; 0x30
 800132c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800132e:	f002 fdd1 	bl	8003ed4 <Error_Handler>
 8001332:	e7e2      	b.n	80012fa <MX_ADC1_Init+0x6a>
 8001334:	20000210 	.word	0x20000210
 8001338:	3ef08000 	.word	0x3ef08000

0800133c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800133c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800133e:	2400      	movs	r4, #0
{
 8001340:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	2220      	movs	r2, #32
 8001344:	4621      	mov	r1, r4
 8001346:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001348:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800134c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	f00a fb77 	bl	800ba40 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001352:	4823      	ldr	r0, [pc, #140]	; (80013e0 <MX_ADC3_Init+0xa4>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001354:	4923      	ldr	r1, [pc, #140]	; (80013e4 <MX_ADC3_Init+0xa8>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001356:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800135a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135e:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001360:	e9c0 1300 	strd	r1, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001364:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001368:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800136a:	8383      	strh	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 800136c:	6442      	str	r2, [r0, #68]	; 0x44
  hadc3.Init.NbrOfConversion = 1;
 800136e:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001370:	2240      	movs	r2, #64	; 0x40
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001372:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001376:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800137a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 800137e:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001380:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001384:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001386:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc3.Init.OversamplingMode = ENABLE;
 8001388:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800138c:	6482      	str	r2, [r0, #72]	; 0x48
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800138e:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001390:	f004 fd64 	bl	8005e5c <HAL_ADC_Init>
 8001394:	b9c8      	cbnz	r0, 80013ca <MX_ADC3_Init+0x8e>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001396:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_ADC3_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800139a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800139c:	a901      	add	r1, sp, #4
 800139e:	f005 fa25 	bl	80067ec <HAL_ADCEx_MultiModeConfigChannel>
 80013a2:	b9c8      	cbnz	r0, 80013d8 <MX_ADC3_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013a4:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <MX_ADC3_Init+0xac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013a6:	480e      	ldr	r0, [pc, #56]	; (80013e0 <MX_ADC3_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a8:	2306      	movs	r3, #6
 80013aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013ae:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013b0:	237f      	movs	r3, #127	; 0x7f
 80013b2:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013b6:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80013b8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013ba:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80013bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013c0:	f004 fec2 	bl	8006148 <HAL_ADC_ConfigChannel>
 80013c4:	b920      	cbnz	r0, 80013d0 <MX_ADC3_Init+0x94>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013c6:	b00c      	add	sp, #48	; 0x30
 80013c8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013ca:	f002 fd83 	bl	8003ed4 <Error_Handler>
 80013ce:	e7e2      	b.n	8001396 <MX_ADC3_Init+0x5a>
    Error_Handler();
 80013d0:	f002 fd80 	bl	8003ed4 <Error_Handler>
}
 80013d4:	b00c      	add	sp, #48	; 0x30
 80013d6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013d8:	f002 fd7c 	bl	8003ed4 <Error_Handler>
 80013dc:	e7e2      	b.n	80013a4 <MX_ADC3_Init+0x68>
 80013de:	bf00      	nop
 80013e0:	2000027c 	.word	0x2000027c
 80013e4:	50000400 	.word	0x50000400
 80013e8:	04300002 	.word	0x04300002

080013ec <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80013ec:	b510      	push	{r4, lr}
 80013ee:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f0:	2220      	movs	r2, #32
 80013f2:	2100      	movs	r1, #0
 80013f4:	4668      	mov	r0, sp
 80013f6:	f00a fb23 	bl	800ba40 <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fa:	4c1e      	ldr	r4, [pc, #120]	; (8001474 <MX_ADC5_Init+0x88>)
  hadc5.Instance = ADC5;
 80013fc:	481e      	ldr	r0, [pc, #120]	; (8001478 <MX_ADC5_Init+0x8c>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001402:	2300      	movs	r3, #0
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001404:	e9c0 4200 	strd	r4, r2, [r0]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001408:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140c:	2104      	movs	r1, #4
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001412:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001416:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800141a:	8382      	strh	r2, [r0, #28]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800141c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.NbrOfConversion = 1;
 8001420:	2201      	movs	r2, #1
  hadc5.Init.DMAContinuousRequests = ENABLE;
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001422:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001424:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001426:	2340      	movs	r3, #64	; 0x40
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001428:	6181      	str	r1, [r0, #24]
  hadc5.Init.NbrOfConversion = 1;
 800142a:	6202      	str	r2, [r0, #32]
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800142c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.OversamplingMode = ENABLE;
 8001430:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001434:	6441      	str	r1, [r0, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001436:	6483      	str	r3, [r0, #72]	; 0x48
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001438:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800143a:	f004 fd0f 	bl	8005e5c <HAL_ADC_Init>
 800143e:	b990      	cbnz	r0, 8001466 <MX_ADC5_Init+0x7a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <MX_ADC5_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC5_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001444:	2306      	movs	r3, #6
 8001446:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800144a:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800144c:	237f      	movs	r3, #127	; 0x7f
 800144e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001452:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001454:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001456:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 8001458:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800145c:	f004 fe74 	bl	8006148 <HAL_ADC_ConfigChannel>
 8001460:	b920      	cbnz	r0, 800146c <MX_ADC5_Init+0x80>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001462:	b008      	add	sp, #32
 8001464:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001466:	f002 fd35 	bl	8003ed4 <Error_Handler>
 800146a:	e7e9      	b.n	8001440 <MX_ADC5_Init+0x54>
    Error_Handler();
 800146c:	f002 fd32 	bl	8003ed4 <Error_Handler>
}
 8001470:	b008      	add	sp, #32
 8001472:	bd10      	pop	{r4, pc}
 8001474:	50000600 	.word	0x50000600
 8001478:	200002e8 	.word	0x200002e8
 800147c:	08600004 	.word	0x08600004

08001480 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	4604      	mov	r4, r0
 8001484:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	2254      	movs	r2, #84	; 0x54
 800148a:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001490:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001494:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001496:	f00a fad3 	bl	800ba40 <memset>
  if(adcHandle->Instance==ADC1)
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80014a2:	4a5f      	ldr	r2, [pc, #380]	; (8001620 <HAL_ADC_MspInit+0x1a0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d04a      	beq.n	800153e <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 80014a8:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_ADC_MspInit+0x1a4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d07a      	beq.n	80015a4 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80014ae:	b020      	add	sp, #128	; 0x80
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014bc:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014be:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f006 fdb0 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	f040 80a2 	bne.w	800160e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014ca:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014cc:	4857      	ldr	r0, [pc, #348]	; (800162c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 80014d0:	4d57      	ldr	r5, [pc, #348]	; (8001630 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80014d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014de:	9200      	str	r2, [sp, #0]
 80014e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014e4:	f042 0202 	orr.w	r2, r2, #2
 80014e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 80014f2:	2201      	movs	r2, #1
 80014f4:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014f6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 80014fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001502:	f006 f855 	bl	80075b0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 8001506:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001508:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800150a:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001514:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151c:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001522:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001526:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001528:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800152a:	f005 fa87 	bl	8006a3c <HAL_DMA_Init>
 800152e:	b918      	cbnz	r0, 8001538 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001530:	6565      	str	r5, [r4, #84]	; 0x54
 8001532:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001534:	b020      	add	sp, #128	; 0x80
 8001536:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001538:	f002 fccc 	bl	8003ed4 <Error_Handler>
 800153c:	e7f8      	b.n	8001530 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800153e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001542:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001548:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800154a:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154c:	f006 fd6a 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	2800      	cmp	r0, #0
 8001552:	d15f      	bne.n	8001614 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001554:	4a38      	ldr	r2, [pc, #224]	; (8001638 <HAL_ADC_MspInit+0x1b8>)
 8001556:	6813      	ldr	r3, [r2, #0]
 8001558:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800155a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 800155c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800155e:	d109      	bne.n	8001574 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_ADC_MspInit+0x1a8>)
 8001562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001568:	64da      	str	r2, [r3, #76]	; 0x4c
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001576:	482d      	ldr	r0, [pc, #180]	; (800162c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800157a:	4d30      	ldr	r5, [pc, #192]	; (800163c <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	f042 0202 	orr.w	r2, r2, #2
 8001580:	64da      	str	r2, [r3, #76]	; 0x4c
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 800158a:	2202      	movs	r2, #2
 800158c:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800158e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 8001592:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800159a:	f006 f809 	bl	80075b0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800159e:	4a28      	ldr	r2, [pc, #160]	; (8001640 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80015a0:	2325      	movs	r3, #37	; 0x25
 80015a2:	e7b2      	b.n	800150a <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015ae:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015b0:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b2:	f006 fd37 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d12f      	bne.n	800161a <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015ba:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <HAL_ADC_MspInit+0x1b8>)
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015c0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015c4:	d109      	bne.n	80015da <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_ADC_MspInit+0x1a8>)
 80015c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	9304      	str	r3, [sp, #16]
 80015d8:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 80015dc:	4d19      	ldr	r5, [pc, #100]	; (8001644 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f005 ffd4 	bl	80075b0 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800160a:	2327      	movs	r3, #39	; 0x27
 800160c:	e77d      	b.n	800150a <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 800160e:	f002 fc61 	bl	8003ed4 <Error_Handler>
 8001612:	e75a      	b.n	80014ca <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8001614:	f002 fc5e 	bl	8003ed4 <Error_Handler>
 8001618:	e79c      	b.n	8001554 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 800161a:	f002 fc5b 	bl	8003ed4 <Error_Handler>
 800161e:	e7cc      	b.n	80015ba <HAL_ADC_MspInit+0x13a>
 8001620:	50000400 	.word	0x50000400
 8001624:	50000600 	.word	0x50000600
 8001628:	40021000 	.word	0x40021000
 800162c:	48000400 	.word	0x48000400
 8001630:	20000354 	.word	0x20000354
 8001634:	40020058 	.word	0x40020058
 8001638:	2000020c 	.word	0x2000020c
 800163c:	200003b4 	.word	0x200003b4
 8001640:	40020030 	.word	0x40020030
 8001644:	20000414 	.word	0x20000414
 8001648:	40020044 	.word	0x40020044
 800164c:	00000000 	.word	0x00000000

08001650 <can1_init_ibis>:
FDCAN_TxHeaderTypeDef TxHeader;
FDCAN_FilterTypeDef sFilterConfig;

// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef * handler)
{
 8001650:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 8001652:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80016a0 <can1_init_ibis+0x50>
{
 8001656:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001658:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800165a:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800165c:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800165e:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <can1_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001662:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001664:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 8001666:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 800166a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 800166e:	f005 fd19 	bl	80070a4 <HAL_FDCAN_ConfigFilter>
 8001672:	b930      	cbnz	r0, 8001682 <can1_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <can1_init_ibis+0x58>)
 8001676:	f005 fd47 	bl	8007108 <HAL_FDCAN_Start>
 800167a:	b948      	cbnz	r0, 8001690 <can1_init_ibis+0x40>
    Error_Handler();
  }
}
 800167c:	b007      	add	sp, #28
 800167e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001682:	f002 fc27 	bl	8003ed4 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <can1_init_ibis+0x58>)
 8001688:	f005 fd3e 	bl	8007108 <HAL_FDCAN_Start>
 800168c:	2800      	cmp	r0, #0
 800168e:	d0f5      	beq.n	800167c <can1_init_ibis+0x2c>
    Error_Handler();
 8001690:	f002 fc20 	bl	8003ed4 <Error_Handler>
}
 8001694:	b007      	add	sp, #28
 8001696:	f85d fb04 	ldr.w	pc, [sp], #4
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w
	...
 80016a8:	20000cc4 	.word	0x20000cc4

080016ac <can1_send>:

void can1_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <can1_send+0x38>)
{
 80016ae:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80016b4:	2500      	movs	r5, #0
 80016b6:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016ba:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80016be:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016c2:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 80016c6:	4c08      	ldr	r4, [pc, #32]	; (80016e8 <can1_send+0x3c>)
  TxHeader.MessageMarker = 0;
 80016c8:	621d      	str	r5, [r3, #32]
{
 80016ca:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 80016cc:	4620      	mov	r0, r4
 80016ce:	f005 fe1d 	bl	800730c <HAL_FDCAN_GetTxFifoFreeLevel>
 80016d2:	2803      	cmp	r0, #3
 80016d4:	d1fa      	bne.n	80016cc <can1_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 80016d6:	4632      	mov	r2, r6
 80016d8:	4902      	ldr	r1, [pc, #8]	; (80016e4 <can1_send+0x38>)
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <can1_send+0x3c>)
}
 80016dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 80016e0:	f005 bd2a 	b.w	8007138 <HAL_FDCAN_AddMessageToTxFifoQ>
 80016e4:	20000474 	.word	0x20000474
 80016e8:	20000cc4 	.word	0x20000cc4
 80016ec:	00000000 	.word	0x00000000

080016f0 <can2_init_ibis>:

void can2_init_ibis(FDCAN_HandleTypeDef * handler)
{
 80016f0:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 80016f2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001740 <can2_init_ibis+0x50>
{
 80016f6:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80016f8:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80016fa:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80016fc:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80016fe:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <can2_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001702:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001704:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 8001706:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 800170a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 800170e:	f005 fcc9 	bl	80070a4 <HAL_FDCAN_ConfigFilter>
 8001712:	b930      	cbnz	r0, 8001722 <can2_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <can2_init_ibis+0x58>)
 8001716:	f005 fcf7 	bl	8007108 <HAL_FDCAN_Start>
 800171a:	b948      	cbnz	r0, 8001730 <can2_init_ibis+0x40>
    Error_Handler();
  }
}
 800171c:	b007      	add	sp, #28
 800171e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001722:	f002 fbd7 	bl	8003ed4 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <can2_init_ibis+0x58>)
 8001728:	f005 fcee 	bl	8007108 <HAL_FDCAN_Start>
 800172c:	2800      	cmp	r0, #0
 800172e:	d0f5      	beq.n	800171c <can2_init_ibis+0x2c>
    Error_Handler();
 8001730:	f002 fbd0 	bl	8003ed4 <Error_Handler>
}
 8001734:	b007      	add	sp, #28
 8001736:	f85d fb04 	ldr.w	pc, [sp], #4
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
	...
 8001748:	20000d28 	.word	0x20000d28

0800174c <can2_send>:

void can2_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <can2_send+0x38>)
{
 800174e:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001750:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001754:	2500      	movs	r5, #0
 8001756:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800175a:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800175e:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001762:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 8001766:	4c08      	ldr	r4, [pc, #32]	; (8001788 <can2_send+0x3c>)
  TxHeader.MessageMarker = 0;
 8001768:	621d      	str	r5, [r3, #32]
{
 800176a:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 800176c:	4620      	mov	r0, r4
 800176e:	f005 fdcd 	bl	800730c <HAL_FDCAN_GetTxFifoFreeLevel>
 8001772:	2803      	cmp	r0, #3
 8001774:	d1fa      	bne.n	800176c <can2_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001776:	4632      	mov	r2, r6
 8001778:	4902      	ldr	r1, [pc, #8]	; (8001784 <can2_send+0x38>)
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <can2_send+0x3c>)
}
 800177c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001780:	f005 bcda 	b.w	8007138 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001784:	20000474 	.word	0x20000474
 8001788:	20000d28 	.word	0x20000d28
 800178c:	00000000 	.word	0x00000000

08001790 <HAL_FDCAN_RxFifo0Callback>:
{
  uint8_t RxData[CAN_RX_DATA_SIZE];
  FDCAN_RxHeaderTypeDef RxHeader;
  uint16_t rx_can_id;

  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001790:	07cb      	lsls	r3, r1, #31
 8001792:	d400      	bmi.n	8001796 <HAL_FDCAN_RxFifo0Callback+0x6>
 8001794:	4770      	bx	lr
{
 8001796:	b530      	push	{r4, r5, lr}
 8001798:	b08d      	sub	sp, #52	; 0x34
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800179a:	466b      	mov	r3, sp
 800179c:	aa02      	add	r2, sp, #8
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	f005 fd30 	bl	8007204 <HAL_FDCAN_GetRxMessage>
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d134      	bne.n	8001812 <HAL_FDCAN_RxFifo0Callback+0x82>
      Error_Handler();
    }
    rx_can_id = RxHeader.Identifier;
 80017a8:	9b02      	ldr	r3, [sp, #8]
    switch (rx_can_id) {
 80017aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017ae:	4213      	tst	r3, r2
 80017b0:	b29d      	uxth	r5, r3
 80017b2:	f000 80a2 	beq.w	80018fa <HAL_FDCAN_RxFifo0Callback+0x16a>
 80017b6:	f5a5 7400 	sub.w	r4, r5, #512	; 0x200
 80017ba:	2c41      	cmp	r4, #65	; 0x41
 80017bc:	d827      	bhi.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
 80017be:	2c41      	cmp	r4, #65	; 0x41
 80017c0:	d825      	bhi.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
 80017c2:	e8df f004 	tbb	[pc, r4]
 80017c6:	4a4a      	.short	0x4a4a
 80017c8:	246c4a4a 	.word	0x246c4a4a
 80017cc:	24242424 	.word	0x24242424
 80017d0:	24242424 	.word	0x24242424
 80017d4:	29292424 	.word	0x29292424
 80017d8:	29292929 	.word	0x29292929
 80017dc:	24242429 	.word	0x24242429
 80017e0:	24242424 	.word	0x24242424
 80017e4:	3f3f2424 	.word	0x3f3f2424
 80017e8:	24803f3f 	.word	0x24803f3f
 80017ec:	24242424 	.word	0x24242424
 80017f0:	24242424 	.word	0x24242424
 80017f4:	34342424 	.word	0x34342424
 80017f8:	24343434 	.word	0x24343434
 80017fc:	24242424 	.word	0x24242424
 8001800:	24242424 	.word	0x24242424
 8001804:	73212424 	.word	0x73212424
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
        break;

      // can_raw.ball_detection
      case 0x240:
        can_raw.ball_detection[0] = RxData[0];
 8001808:	4b45      	ldr	r3, [pc, #276]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
 800180a:	9a00      	ldr	r2, [sp, #0]
 800180c:	67da      	str	r2, [r3, #124]	; 0x7c
      case 0x502:
      case 0x503:
        break;
    }
  }
}
 800180e:	b00d      	add	sp, #52	; 0x34
 8001810:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001812:	f002 fb5f 	bl	8003ed4 <Error_Handler>
 8001816:	e7c7      	b.n	80017a8 <HAL_FDCAN_RxFifo0Callback+0x18>
        can_raw.power_voltage[rx_can_id - 0x210] = uchar4_to_float(RxData);
 8001818:	4668      	mov	r0, sp
 800181a:	f004 f961 	bl	8005ae0 <uchar4_to_float>
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8001820:	f5a5 7501 	sub.w	r5, r5, #516	; 0x204
 8001824:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001828:	ed83 0a00 	vstr	s0, [r3]
        break;
 800182c:	e7ef      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
 800182e:	4668      	mov	r0, sp
 8001830:	f004 f956 	bl	8005ae0 <uchar4_to_float>
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8001836:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 800183a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800183e:	ed83 0a00 	vstr	s0, [r3]
        break;
 8001842:	e7e4      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[rx_can_id - 0x220] = uchar4_to_float(RxData);
 8001844:	4668      	mov	r0, sp
 8001846:	f004 f94b 	bl	8005ae0 <uchar4_to_float>
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
 800184c:	f2a5 250e 	subw	r5, r5, #526	; 0x20e
 8001850:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001854:	ed83 0a01 	vstr	s0, [r3, #4]
        break;
 8001858:	e7d9      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 800185a:	a801      	add	r0, sp, #4
 800185c:	f004 f940 	bl	8005ae0 <uchar4_to_float>
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8001862:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8001866:	4668      	mov	r0, sp
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8001868:	ed83 0a00 	vstr	s0, [r3]
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 800186c:	f004 f938 	bl	8005ae0 <uchar4_to_float>
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8001872:	f5a5 72ff 	sub.w	r2, r5, #510	; 0x1fe
 8001876:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800187a:	ed82 0a00 	vstr	s0, [r2]
        can_raw.motor_feedback_velocity[rx_can_id - 0x200] = can_raw.motor_feedback[3] * OMNI_DIAMETER * M_PI;
 800187e:	6958      	ldr	r0, [r3, #20]
 8001880:	f5a5 75fd 	sub.w	r5, r5, #506	; 0x1fa
 8001884:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001888:	f7fe fe86 	bl	8000598 <__aeabi_f2d>
 800188c:	a322      	add	r3, pc, #136	; (adr r3, 8001918 <HAL_FDCAN_RxFifo0Callback+0x188>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fed9 	bl	8000648 <__aeabi_dmul>
 8001896:	f7ff f9cf 	bl	8000c38 <__aeabi_d2f>
 800189a:	6068      	str	r0, [r5, #4]
        break;
 800189c:	e7b7      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.motor_feedback_velocity[4] = uchar4_to_float(RxData);
 800189e:	4668      	mov	r0, sp
 80018a0:	f004 f91e 	bl	8005ae0 <uchar4_to_float>
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
 80018a6:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
        break;
 80018aa:	e7b0      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 80018ac:	4c1e      	ldr	r4, [pc, #120]	; (8001928 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80018ae:	9a00      	ldr	r2, [sp, #0]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 80018b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 80018b4:	6222      	str	r2, [r4, #32]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 80018b6:	85a3      	strh	r3, [r4, #44]	; 0x2c
        mouseOdometory();
 80018b8:	f003 f8ea 	bl	8004a90 <mouseOdometory>
        mouse.loop_cnt_debug = mouse.integral_loop_cnt;
 80018bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
        mouse.integral_loop_cnt = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
}
 80018c4:	e7a3      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[4] = RxData[0];  // fet
 80018c6:	f89d 3000 	ldrb.w	r3, [sp]
 80018ca:	ee06 3a90 	vmov	s13, r3
        can_raw.temperature[5] = RxData[1];  // coil 1
 80018ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80018d2:	ee07 3a10 	vmov	s14, r3
        can_raw.temperature[6] = RxData[2];  // coil 2
 80018d6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80018da:	ee07 3a90 	vmov	s15, r3
        can_raw.temperature[4] = RxData[0];  // fet
 80018de:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
        can_raw.temperature[5] = RxData[1];  // coil 1
 80018e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        can_raw.temperature[6] = RxData[2];  // coil 2
 80018e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
        can_raw.temperature[4] = RxData[0];  // fet
 80018ec:	edc3 6a17 	vstr	s13, [r3, #92]	; 0x5c
        can_raw.temperature[5] = RxData[1];  // coil 1
 80018f0:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
        can_raw.temperature[6] = RxData[2];  // coil 2
 80018f4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
        break;
 80018f8:	e789      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.error_no[0] = RxData[0];
 80018fa:	9b00      	ldr	r3, [sp, #0]
 80018fc:	4908      	ldr	r1, [pc, #32]	; (8001920 <HAL_FDCAN_RxFifo0Callback+0x190>)
        sys.error_id = (uint16_t)((RxData[1] << 8) | RxData[0]);
 80018fe:	4c0b      	ldr	r4, [pc, #44]	; (800192c <HAL_FDCAN_RxFifo0Callback+0x19c>)
        can_raw.error_no[0] = RxData[0];
 8001900:	600b      	str	r3, [r1, #0]
        sys.error_info = (uint16_t)((RxData[3] << 8) | RxData[2]);
 8001902:	0c1a      	lsrs	r2, r3, #16
        sys.error_value = uchar4_to_float(&RxData[4]);
 8001904:	a801      	add	r0, sp, #4
        sys.error_id = (uint16_t)((RxData[1] << 8) | RxData[0]);
 8001906:	8063      	strh	r3, [r4, #2]
        sys.error_info = (uint16_t)((RxData[3] << 8) | RxData[2]);
 8001908:	80a2      	strh	r2, [r4, #4]
        sys.error_value = uchar4_to_float(&RxData[4]);
 800190a:	f004 f8e9 	bl	8005ae0 <uchar4_to_float>
        sys.error_flag = true;
 800190e:	2301      	movs	r3, #1
        sys.error_value = uchar4_to_float(&RxData[4]);
 8001910:	ed84 0a02 	vstr	s0, [r4, #8]
        sys.error_flag = true;
 8001914:	7023      	strb	r3, [r4, #0]
        break;
 8001916:	e77a      	b.n	800180e <HAL_FDCAN_RxFifo0Callback+0x7e>
 8001918:	ffba038a 	.word	0xffba038a
 800191c:	3fc684d8 	.word	0x3fc684d8
 8001920:	20000ea8 	.word	0x20000ea8
 8001924:	20001018 	.word	0x20001018
 8001928:	20001050 	.word	0x20001050
 800192c:	200012f8 	.word	0x200012f8

08001930 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <MX_DMA_Init+0xa0>)
{
 8001932:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001934:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001936:	f040 0004 	orr.w	r0, r0, #4
 800193a:	6498      	str	r0, [r3, #72]	; 0x48
 800193c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 800193e:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001940:	f004 0404 	and.w	r4, r4, #4
 8001944:	9400      	str	r4, [sp, #0]
 8001946:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001948:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800194a:	f044 0401 	orr.w	r4, r4, #1
 800194e:	649c      	str	r4, [r3, #72]	; 0x48
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800195a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800195c:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800195e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001960:	f005 f806 	bl	8006970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001964:	200c      	movs	r0, #12
 8001966:	f005 f841 	bl	80069ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2109      	movs	r1, #9
 800196e:	200d      	movs	r0, #13
 8001970:	f004 fffe 	bl	8006970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001974:	200d      	movs	r0, #13
 8001976:	f005 f839 	bl	80069ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	210a      	movs	r1, #10
 800197e:	200e      	movs	r0, #14
 8001980:	f004 fff6 	bl	8006970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001984:	200e      	movs	r0, #14
 8001986:	f005 f831 	bl	80069ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	210b      	movs	r1, #11
 800198e:	200f      	movs	r0, #15
 8001990:	f004 ffee 	bl	8006970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001994:	200f      	movs	r0, #15
 8001996:	f005 f829 	bl	80069ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	210e      	movs	r1, #14
 800199e:	2010      	movs	r0, #16
 80019a0:	f004 ffe6 	bl	8006970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019a4:	2010      	movs	r0, #16
 80019a6:	f005 f821 	bl	80069ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	210f      	movs	r1, #15
 80019ae:	2011      	movs	r0, #17
 80019b0:	f004 ffde 	bl	8006970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80019b4:	2011      	movs	r0, #17
 80019b6:	f005 f819 	bl	80069ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2060      	movs	r0, #96	; 0x60
 80019be:	4611      	mov	r1, r2
 80019c0:	f004 ffd6 	bl	8006970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80019c4:	2060      	movs	r0, #96	; 0x60

}
 80019c6:	b002      	add	sp, #8
 80019c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80019cc:	f005 b80e 	b.w	80069ec <HAL_NVIC_EnableIRQ>
 80019d0:	40021000 	.word	0x40021000

080019d4 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 80019d4:	b510      	push	{r4, lr}
    dmi.huart = printf_huart;
 80019d6:	4c06      	ldr	r4, [pc, #24]	; (80019f0 <dma_printf_init+0x1c>)
void dma_printf_init(UART_HandleTypeDef *printf_huart){
 80019d8:	4601      	mov	r1, r0
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80019da:	4620      	mov	r0, r4
    dmi.huart = printf_huart;
 80019dc:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80019e0:	f000 f830 	bl	8001a44 <dma_ring_init>
    dmi.sending = false;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 80019ea:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
}
 80019ee:	bd10      	pop	{r4, pc}
 80019f0:	20000498 	.word	0x20000498

080019f4 <dma_printf_send_it>:
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }
}

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 80019f4:	b570      	push	{r4, r5, r6, lr}
    if(dmi.huart != printf_huart) return;
 80019f6:	4c12      	ldr	r4, [pc, #72]	; (8001a40 <dma_printf_send_it+0x4c>)
 80019f8:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 80019fc:	4283      	cmp	r3, r0
 80019fe:	d000      	beq.n	8001a02 <dma_printf_send_it+0xe>
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }else{
        dmi.sending = false;
    }
}
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 8001a02:	f8d4 1414 	ldr.w	r1, [r4, #1044]	; 0x414
 8001a06:	4620      	mov	r0, r4
 8001a08:	f000 f834 	bl	8001a74 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f000 f823 	bl	8001a58 <dma_ring_available_linear>
 8001a12:	b285      	uxth	r5, r0
    if (len > 0 ) {
 8001a14:	b915      	cbnz	r5, 8001a1c <dma_printf_send_it+0x28>
        dmi.sending = false;
 8001a16:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
}
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
        dmi.sending = true;
 8001a1c:	2301      	movs	r3, #1
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        dmi.previous_send_len = len;
 8001a24:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
        dmi.sending = true;
 8001a28:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001a2c:	f000 f81e 	bl	8001a6c <dma_ring_get_r_ptr>
 8001a30:	462a      	mov	r2, r5
 8001a32:	1821      	adds	r1, r4, r0
 8001a34:	4630      	mov	r0, r6
}
 8001a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001a3a:	f007 be31 	b.w	80096a0 <HAL_UART_Transmit_DMA>
 8001a3e:	bf00      	nop
 8001a40:	20000498 	.word	0x20000498

08001a44 <dma_ring_init>:
static void update_w_ptr(struct dma_ring_buf *ring){
	ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx))&0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart){
  ring->buf_size = RING_BUF_SIZE;
 8001a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 8001a4e:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  ring->w_ptr = 0;
  ring->r_ptr = 0;
  ring->overwrite_cnt = 0;
  ring->huart = huart;
 8001a52:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
}
 8001a56:	4770      	bx	lr

08001a58 <dma_ring_available_linear>:
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
  if(ring->w_ptr >= ring->r_ptr){
 8001a58:	f8b0 2402 	ldrh.w	r2, [r0, #1026]	; 0x402
 8001a5c:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8001a60:	429a      	cmp	r2, r3
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size - ring->r_ptr;
 8001a62:	bf38      	it	cc
 8001a64:	f8b0 2400 	ldrhcc.w	r2, [r0, #1024]	; 0x400
 8001a68:	1ad0      	subs	r0, r2, r3
  }
}
 8001a6a:	4770      	bx	lr

08001a6c <dma_ring_get_r_ptr>:
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
  return ring->r_ptr;
}
 8001a6c:	f8b0 0404 	ldrh.w	r0, [r0, #1028]	; 0x404
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
  while(len > 0){
 8001a74:	2900      	cmp	r1, #0
 8001a76:	dd0c      	ble.n	8001a92 <dma_ring_forward_r_ptr+0x1e>
 8001a78:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
    if(ring->r_ptr+1 >= ring->buf_size){
 8001a7c:	f8b0 2400 	ldrh.w	r2, [r0, #1024]	; 0x400
 8001a80:	3301      	adds	r3, #1
 8001a82:	429a      	cmp	r2, r3
      ring->r_ptr = 0;
    }else{
      ring->r_ptr += 1;
 8001a84:	bfcc      	ite	gt
 8001a86:	b29b      	uxthgt	r3, r3
      ring->r_ptr = 0;
 8001a88:	2300      	movle	r3, #0
  while(len > 0){
 8001a8a:	3901      	subs	r1, #1
 8001a8c:	d1f8      	bne.n	8001a80 <dma_ring_forward_r_ptr+0xc>
 8001a8e:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    }
    len--;
  }
}
 8001a92:	4770      	bx	lr

08001a94 <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001a94:	b510      	push	{r4, lr}
    dsi.huart = scanf_huart;
 8001a96:	4c08      	ldr	r4, [pc, #32]	; (8001ab8 <dma_scanf_init+0x24>)
void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001a98:	4601      	mov	r1, r0
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 8001a9a:	4620      	mov	r0, r4
    dsi.huart = scanf_huart;
 8001a9c:	f8c4 140c 	str.w	r1, [r4, #1036]	; 0x40c
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 8001aa0:	f7ff ffd0 	bl	8001a44 <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8001aa4:	f8b4 2400 	ldrh.w	r2, [r4, #1024]	; 0x400
 8001aa8:	f8d4 040c 	ldr.w	r0, [r4, #1036]	; 0x40c
 8001aac:	4621      	mov	r1, r4
}
 8001aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8001ab2:	f008 bf0b 	b.w	800a8cc <HAL_UART_Receive_DMA>
 8001ab6:	bf00      	nop
 8001ab8:	200008b0 	.word	0x200008b0

08001abc <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001abc:	4810      	ldr	r0, [pc, #64]	; (8001b00 <MX_FDCAN1_Init+0x44>)
{
 8001abe:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 8001ac0:	4c10      	ldr	r4, [pc, #64]	; (8001b04 <MX_FDCAN1_Init+0x48>)
 8001ac2:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ac4:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 8001ac6:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001ac8:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001aca:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001acc:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001ad0:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 8001ad2:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ad4:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ad6:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ad8:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ada:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ade:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001ae2:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ae6:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ae8:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001aea:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001aec:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001aee:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001af0:	f005 f95a 	bl	8006da8 <HAL_FDCAN_Init>
 8001af4:	b900      	cbnz	r0, 8001af8 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001af6:	bd10      	pop	{r4, pc}
 8001af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001afc:	f002 b9ea 	b.w	8003ed4 <Error_Handler>
 8001b00:	20000cc4 	.word	0x20000cc4
 8001b04:	40006400 	.word	0x40006400

08001b08 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <MX_FDCAN2_Init+0x44>)
{
 8001b0a:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001b0c:	4c10      	ldr	r4, [pc, #64]	; (8001b50 <MX_FDCAN2_Init+0x48>)
 8001b0e:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001b10:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 8001b12:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001b14:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b16:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001b18:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001b1c:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 8001b1e:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b20:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001b22:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001b24:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b26:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001b2a:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001b2e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001b32:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001b34:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b36:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001b38:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b3a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b3c:	f005 f934 	bl	8006da8 <HAL_FDCAN_Init>
 8001b40:	b900      	cbnz	r0, 8001b44 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001b42:	bd10      	pop	{r4, pc}
 8001b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001b48:	f002 b9c4 	b.w	8003ed4 <Error_Handler>
 8001b4c:	20000d28 	.word	0x20000d28
 8001b50:	40006800 	.word	0x40006800
 8001b54:	00000000 	.word	0x00000000

08001b58 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b60:	2254      	movs	r2, #84	; 0x54
 8001b62:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001b68:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001b6c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6e:	f009 ff67 	bl	800ba40 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_FDCAN_MspInit+0x168>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8001b7a:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_FDCAN_MspInit+0x16c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d047      	beq.n	8001c10 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001b80:	b01e      	add	sp, #120	; 0x78
 8001b82:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b8c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b8e:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b90:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b92:	f006 fa47 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d17f      	bne.n	8001c9a <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b9a:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_FDCAN_MspInit+0x170>)
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ba0:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ba2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ba4:	d109      	bne.n	8001bba <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <HAL_FDCAN_MspInit+0x174>)
 8001ba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001baa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001bae:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <HAL_FDCAN_MspInit+0x174>)
 8001bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bbe:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8001ca8 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bca:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001bce:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8001cb0 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001bda:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001be0:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001be4:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f005 fce2 	bl	80075b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2103      	movs	r1, #3
 8001bf0:	2015      	movs	r0, #21
 8001bf2:	f004 febd 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001bf6:	2015      	movs	r0, #21
 8001bf8:	f004 fef8 	bl	80069ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2104      	movs	r1, #4
 8001c00:	2016      	movs	r0, #22
 8001c02:	f004 feb5 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001c06:	2016      	movs	r0, #22
 8001c08:	f004 fef0 	bl	80069ec <HAL_NVIC_EnableIRQ>
}
 8001c0c:	b01e      	add	sp, #120	; 0x78
 8001c0e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c18:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c1a:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c1c:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1e:	f006 fa01 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d13c      	bne.n	8001ca0 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c26:	4a28      	ldr	r2, [pc, #160]	; (8001cc8 <HAL_FDCAN_MspInit+0x170>)
 8001c28:	6813      	ldr	r3, [r2, #0]
 8001c2a:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c2c:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c30:	d109      	bne.n	8001c46 <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_FDCAN_MspInit+0x174>)
 8001c34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c36:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	4821      	ldr	r0, [pc, #132]	; (8001cd0 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c4c:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001cb8 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	f042 0202 	orr.w	r2, r2, #2
 8001c54:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001c5c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001cb0 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001c68:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c6a:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001c6e:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f005 fc9d 	bl	80075b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2106      	movs	r1, #6
 8001c7a:	2056      	movs	r0, #86	; 0x56
 8001c7c:	f004 fe78 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001c80:	2056      	movs	r0, #86	; 0x56
 8001c82:	f004 feb3 	bl	80069ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2107      	movs	r1, #7
 8001c8a:	2057      	movs	r0, #87	; 0x57
 8001c8c:	f004 fe70 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001c90:	2057      	movs	r0, #87	; 0x57
 8001c92:	f004 feab 	bl	80069ec <HAL_NVIC_EnableIRQ>
}
 8001c96:	b01e      	add	sp, #120	; 0x78
 8001c98:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001c9a:	f002 f91b 	bl	8003ed4 <Error_Handler>
 8001c9e:	e77c      	b.n	8001b9a <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 8001ca0:	f002 f918 	bl	8003ed4 <Error_Handler>
 8001ca4:	e7bf      	b.n	8001c26 <HAL_FDCAN_MspInit+0xce>
 8001ca6:	bf00      	nop
 8001ca8:	00001800 	.word	0x00001800
 8001cac:	00000002 	.word	0x00000002
	...
 8001cb8:	00003000 	.word	0x00003000
 8001cbc:	00000002 	.word	0x00000002
 8001cc0:	40006400 	.word	0x40006400
 8001cc4:	40006800 	.word	0x40006800
 8001cc8:	20000cc0 	.word	0x20000cc0
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	2400      	movs	r4, #0
{
 8001cd8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001cde:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ce8:	4f45      	ldr	r7, [pc, #276]	; (8001e00 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cea:	4d46      	ldr	r5, [pc, #280]	; (8001e04 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	f042 0204 	orr.w	r2, r2, #4
 8001cf0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cf4:	f002 0204 	and.w	r2, r2, #4
 8001cf8:	9201      	str	r2, [sp, #4]
 8001cfa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d06:	f002 0220 	and.w	r2, r2, #32
 8001d0a:	9202      	str	r2, [sp, #8]
 8001d0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d18:	f002 0201 	and.w	r2, r2, #1
 8001d1c:	9203      	str	r2, [sp, #12]
 8001d1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d22:	f042 0202 	orr.w	r2, r2, #2
 8001d26:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d2a:	f002 0202 	and.w	r2, r2, #2
 8001d2e:	9204      	str	r2, [sp, #16]
 8001d30:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d34:	f042 0208 	orr.w	r2, r2, #8
 8001d38:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001d42:	4638      	mov	r0, r7
 8001d44:	4622      	mov	r2, r4
 8001d46:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001d4c:	f005 fd30 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d50:	4622      	mov	r2, r4
 8001d52:	f248 0110 	movw	r1, #32784	; 0x8010
 8001d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5a:	f005 fd29 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d5e:	4622      	mov	r2, r4
 8001d60:	4628      	mov	r0, r5
 8001d62:	f244 4184 	movw	r1, #17540	; 0x4484
 8001d66:	f005 fd23 	bl	80077b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2601      	movs	r6, #1
 8001d6c:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	a906      	add	r1, sp, #24
 8001d72:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d74:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f005 fc18 	bl	80075b0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001d82:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001d8a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f005 fc0d 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d96:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	4638      	mov	r0, r7
 8001d9a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f005 fc04 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001da8:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	a906      	add	r1, sp, #24
 8001dae:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001db0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f005 fbfa 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc0:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	a906      	add	r1, sp, #24
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f005 fbef 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd6:	a906      	add	r1, sp, #24
 8001dd8:	480b      	ldr	r0, [pc, #44]	; (8001e08 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ddc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de0:	f005 fbe6 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001de4:	2260      	movs	r2, #96	; 0x60
 8001de6:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	a906      	add	r1, sp, #24
 8001dea:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001dec:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f005 fbdd 	bl	80075b0 <HAL_GPIO_Init>

}
 8001df6:	b00d      	add	sp, #52	; 0x34
 8001df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000800 	.word	0x48000800
 8001e04:	48000400 	.word	0x48000400
 8001e08:	48000c00 	.word	0x48000c00

08001e0c <ICM20602_init>:
{
  return ICM20602_readByte(ICM20602_WHO_AM_I);  // Should return 0x68
}

void ICM20602_init()
{
 8001e0c:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001e0e:	4870      	ldr	r0, [pc, #448]	; (8001fd0 <ICM20602_init+0x1c4>)
{
 8001e10:	b085      	sub	sp, #20
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001e12:	2201      	movs	r2, #1
 8001e14:	2120      	movs	r1, #32
 8001e16:	f005 fccb 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f005 fcc5 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e26:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8001e2a:	216b      	movs	r1, #107	; 0x6b
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	aa03      	add	r2, sp, #12
  send_data[0] = reg & 0x7F;
 8001e30:	f88d 1008 	strb.w	r1, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	a902      	add	r1, sp, #8
 8001e38:	4866      	ldr	r0, [pc, #408]	; (8001fd4 <ICM20602_init+0x1c8>)
 8001e3a:	f006 fc0d 	bl	8008658 <HAL_SPI_TransmitReceive>
  send_data[0] = data;
 8001e3e:	2500      	movs	r5, #0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e40:	2301      	movs	r3, #1
 8001e42:	9400      	str	r4, [sp, #0]
 8001e44:	aa03      	add	r2, sp, #12
 8001e46:	a902      	add	r1, sp, #8
 8001e48:	4862      	ldr	r0, [pc, #392]	; (8001fd4 <ICM20602_init+0x1c8>)
  send_data[0] = data;
 8001e4a:	f88d 5008 	strb.w	r5, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e4e:	f006 fc03 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001e52:	2201      	movs	r2, #1
 8001e54:	2110      	movs	r1, #16
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f005 fca9 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001e5e:	462a      	mov	r2, r5
 8001e60:	2110      	movs	r1, #16
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f005 fca3 	bl	80077b0 <HAL_GPIO_WritePin>
  send_data[0] = reg & 0x7F;
 8001e6a:	2319      	movs	r3, #25
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e6c:	9400      	str	r4, [sp, #0]
  send_data[0] = reg & 0x7F;
 8001e6e:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e72:	aa03      	add	r2, sp, #12
 8001e74:	2301      	movs	r3, #1
 8001e76:	a902      	add	r1, sp, #8
 8001e78:	4856      	ldr	r0, [pc, #344]	; (8001fd4 <ICM20602_init+0x1c8>)
 8001e7a:	f006 fbed 	bl	8008658 <HAL_SPI_TransmitReceive>
  send_data[0] = data;
 8001e7e:	2307      	movs	r3, #7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e80:	9400      	str	r4, [sp, #0]
  send_data[0] = data;
 8001e82:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001e86:	aa03      	add	r2, sp, #12
 8001e88:	2301      	movs	r3, #1
 8001e8a:	a902      	add	r1, sp, #8
 8001e8c:	4851      	ldr	r0, [pc, #324]	; (8001fd4 <ICM20602_init+0x1c8>)
 8001e8e:	f006 fbe3 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001e92:	2201      	movs	r2, #1
 8001e94:	2110      	movs	r1, #16
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f005 fc89 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001e9e:	462a      	mov	r2, r5
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea6:	f005 fc83 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001eaa:	2301      	movs	r3, #1
  send_data[0] = reg & 0x7F;
 8001eac:	211a      	movs	r1, #26
  send_data[0] = data;
 8001eae:	461d      	mov	r5, r3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001eb0:	aa03      	add	r2, sp, #12
  send_data[0] = reg & 0x7F;
 8001eb2:	f88d 1008 	strb.w	r1, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001eb6:	9400      	str	r4, [sp, #0]
 8001eb8:	a902      	add	r1, sp, #8
 8001eba:	4846      	ldr	r0, [pc, #280]	; (8001fd4 <ICM20602_init+0x1c8>)
 8001ebc:	f006 fbcc 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	9400      	str	r4, [sp, #0]
 8001ec4:	a902      	add	r1, sp, #8
 8001ec6:	aa03      	add	r2, sp, #12
 8001ec8:	4842      	ldr	r0, [pc, #264]	; (8001fd4 <ICM20602_init+0x1c8>)
  send_data[0] = data;
 8001eca:	f88d 5008 	strb.w	r5, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001ece:	f006 fbc3 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001ed2:	462a      	mov	r2, r5
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f005 fc69 	bl	80077b0 <HAL_GPIO_WritePin>
  ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);  // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
  ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
  ICM20602_writeByte(ICM20602_CONFIG, 0x01);      //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

  ICM20602_setAccRange(Ascale);
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <ICM20602_init+0x1cc>)
 8001ee0:	681c      	ldr	r4, [r3, #0]
}

// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
  switch (Ascale) {
 8001ee2:	2c03      	cmp	r4, #3
 8001ee4:	d807      	bhi.n	8001ef6 <ICM20602_init+0xea>
 8001ee6:	e8df f004 	tbb	[pc, r4]
 8001eea:	686d      	.short	0x686d
 8001eec:	6302      	.short	0x6302
      break;
    case AFS_4G:
      aRes = 4.0 / 32768.0;
      break;
    case AFS_8G:
      aRes = 8.0 / 32768.0;
 8001eee:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <ICM20602_init+0x1d0>)
 8001ef0:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001ef4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2110      	movs	r1, #16
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f005 fc57 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f02:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8001f06:	221c      	movs	r2, #28
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f08:	2301      	movs	r3, #1
  send_data[0] = reg & 0x7F;
 8001f0a:	f88d 2008 	strb.w	r2, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f0e:	a902      	add	r1, sp, #8
 8001f10:	aa03      	add	r2, sp, #12
 8001f12:	4830      	ldr	r0, [pc, #192]	; (8001fd4 <ICM20602_init+0x1c8>)
 8001f14:	9500      	str	r5, [sp, #0]
 8001f16:	f006 fb9f 	bl	8008658 <HAL_SPI_TransmitReceive>
    case AFS_16G:
      aRes = 16.0 / 32768.0;
      break;
  }

  ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale << 3);  // bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001f1a:	00e4      	lsls	r4, r4, #3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	aa03      	add	r2, sp, #12
 8001f20:	a902      	add	r1, sp, #8
 8001f22:	482c      	ldr	r0, [pc, #176]	; (8001fd4 <ICM20602_init+0x1c8>)
 8001f24:	9500      	str	r5, [sp, #0]
  send_data[0] = data;
 8001f26:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f2a:	f006 fb95 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2110      	movs	r1, #16
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f36:	f005 fc3b 	bl	80077b0 <HAL_GPIO_WritePin>
  ICM20602_setGyroRange(Gscale);
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <ICM20602_init+0x1d4>)
 8001f3c:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
  switch (Gscale) {
 8001f3e:	2c03      	cmp	r4, #3
 8001f40:	d806      	bhi.n	8001f50 <ICM20602_init+0x144>
 8001f42:	e8df f004 	tbb	[pc, r4]
 8001f46:	2d31      	.short	0x2d31
 8001f48:	2902      	.short	0x2902
      break;
    case GFS_500DPS:
      gRes = 500.0 / 32768.0;
      break;
    case GFS_1000DPS:
      gRes = 1000.0 / 32768.0;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <ICM20602_init+0x1d8>)
 8001f4c:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <ICM20602_init+0x1dc>)
 8001f4e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2110      	movs	r1, #16
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f005 fc2a 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f5c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8001f60:	221b      	movs	r2, #27
 8001f62:	f88d 2008 	strb.w	r2, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f66:	a902      	add	r1, sp, #8
 8001f68:	aa03      	add	r2, sp, #12
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	9500      	str	r5, [sp, #0]
 8001f6e:	4819      	ldr	r0, [pc, #100]	; (8001fd4 <ICM20602_init+0x1c8>)
 8001f70:	f006 fb72 	bl	8008658 <HAL_SPI_TransmitReceive>
    case GFS_2000DPS:
      gRes = 2000.0 / 32768.0;
      break;
  }

  ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale << 3);  // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001f74:	00e4      	lsls	r4, r4, #3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f76:	aa03      	add	r2, sp, #12
 8001f78:	a902      	add	r1, sp, #8
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	9500      	str	r5, [sp, #0]
 8001f7e:	4815      	ldr	r0, [pc, #84]	; (8001fd4 <ICM20602_init+0x1c8>)
  send_data[0] = data;
 8001f80:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8001f84:	f006 fb68 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2110      	movs	r1, #16
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f90:	f005 fc0e 	bl	80077b0 <HAL_GPIO_WritePin>
}
 8001f94:	b005      	add	sp, #20
 8001f96:	bd30      	pop	{r4, r5, pc}
      gRes = 2000.0 / 32768.0;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <ICM20602_init+0x1d8>)
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <ICM20602_init+0x1e0>)
 8001f9c:	601a      	str	r2, [r3, #0]
      break;
 8001f9e:	e7d7      	b.n	8001f50 <ICM20602_init+0x144>
      gRes = 500.0 / 32768.0;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <ICM20602_init+0x1d8>)
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <ICM20602_init+0x1e4>)
 8001fa4:	601a      	str	r2, [r3, #0]
      break;
 8001fa6:	e7d3      	b.n	8001f50 <ICM20602_init+0x144>
      gRes = 250.0 / 32768.0;
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <ICM20602_init+0x1d8>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <ICM20602_init+0x1e8>)
 8001fac:	601a      	str	r2, [r3, #0]
      break;
 8001fae:	e7cf      	b.n	8001f50 <ICM20602_init+0x144>
      aRes = 16.0 / 32768.0;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <ICM20602_init+0x1d0>)
 8001fb2:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001fb6:	601a      	str	r2, [r3, #0]
      break;
 8001fb8:	e79d      	b.n	8001ef6 <ICM20602_init+0xea>
      aRes = 4.0 / 32768.0;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <ICM20602_init+0x1d0>)
 8001fbc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001fc0:	601a      	str	r2, [r3, #0]
      break;
 8001fc2:	e798      	b.n	8001ef6 <ICM20602_init+0xea>
      aRes = 2.0 / 32768.0;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <ICM20602_init+0x1d0>)
 8001fc6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001fca:	601a      	str	r2, [r3, #0]
      break;
 8001fcc:	e793      	b.n	8001ef6 <ICM20602_init+0xea>
 8001fce:	bf00      	nop
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	2000134c 	.word	0x2000134c
 8001fd8:	20000d8c 	.word	0x20000d8c
 8001fdc:	20000d90 	.word	0x20000d90
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000ddc 	.word	0x20000ddc
 8001fe8:	3cfa0000 	.word	0x3cfa0000
 8001fec:	3d7a0000 	.word	0x3d7a0000
 8001ff0:	3c7a0000 	.word	0x3c7a0000
 8001ff4:	3bfa0000 	.word	0x3bfa0000

08001ff8 <ICM20602_clearAngle>:
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
  pitch_angle = 0.0f;
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <ICM20602_clearAngle+0x10>)
  roll_angle = 0.0f;
 8001ffa:	4904      	ldr	r1, [pc, #16]	; (800200c <ICM20602_clearAngle+0x14>)
  yaw_angle = 0.0f;
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <ICM20602_clearAngle+0x18>)
  pitch_angle = 0.0f;
 8001ffe:	2300      	movs	r3, #0
 8002000:	6003      	str	r3, [r0, #0]
  roll_angle = 0.0f;
 8002002:	600b      	str	r3, [r1, #0]
  yaw_angle = 0.0f;
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	4770      	bx	lr
 8002008:	20000e38 	.word	0x20000e38
 800200c:	20000e3c 	.word	0x20000e3c
 8002010:	20000e40 	.word	0x20000e40

08002014 <ICM20602_medianFilter>:

  float tmp;
  int8_t i, j, a, b;

  for (i = 0; i < 3; i++) {
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002014:	4a79      	ldr	r2, [pc, #484]	; (80021fc <ICM20602_medianFilter+0x1e8>)
    gyro_mdat[i][1] = gyro_mdat[i][0];
    gyro_mdat[i][0] = gyro[i];
 8002016:	487a      	ldr	r0, [pc, #488]	; (8002200 <ICM20602_medianFilter+0x1ec>)

    acc_mdat[i][2] = acc_mdat[i][1];
 8002018:	4b7a      	ldr	r3, [pc, #488]	; (8002204 <ICM20602_medianFilter+0x1f0>)
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800201a:	ed92 6a01 	vldr	s12, [r2, #4]
    gyro_mdat[i][0] = gyro[i];
 800201e:	edd0 5a00 	vldr	s11, [r0]
    acc_mdat[i][1] = acc_mdat[i][0];
    acc_mdat[i][0] = acc[i];
 8002022:	4979      	ldr	r1, [pc, #484]	; (8002208 <ICM20602_medianFilter+0x1f4>)
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8002024:	ed92 7a00 	vldr	s14, [r2]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002028:	ed93 5a01 	vldr	s10, [r3, #4]
    acc_mdat[i][1] = acc_mdat[i][0];
 800202c:	edd3 7a00 	vldr	s15, [r3]
    acc_mdat[i][0] = acc[i];
 8002030:	edd1 6a00 	vldr	s13, [r1]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002034:	ed82 6a02 	vstr	s12, [r2, #8]

    a = 0;
    b = 2;

    for (j = 2; j >= 0; j--) {
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002038:	eef4 5ac6 	vcmpe.f32	s11, s12
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8002040:	ed82 7a01 	vstr	s14, [r2, #4]
    gyro_mdat[i][0] = gyro[i];
 8002044:	edc2 5a00 	vstr	s11, [r2]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002048:	ed83 5a02 	vstr	s10, [r3, #8]
    acc_mdat[i][1] = acc_mdat[i][0];
 800204c:	edc3 7a01 	vstr	s15, [r3, #4]
    acc_mdat[i][0] = acc[i];
 8002050:	edc3 6a00 	vstr	s13, [r3]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002054:	dc05      	bgt.n	8002062 <ICM20602_medianFilter+0x4e>
 8002056:	eef0 4a46 	vmov.f32	s9, s12
    gyro_mdat[i][0] = gyro[i];
 800205a:	eeb0 6a65 	vmov.f32	s12, s11
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800205e:	eef0 5a64 	vmov.f32	s11, s9
        tmp = gyro_tmp[a];
        gyro_tmp[a] = gyro_tmp[b];
        gyro_tmp[b] = tmp;
      }
      if (acc_tmp[a] > acc_tmp[b]) {
 8002062:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d405      	bmi.n	8002078 <ICM20602_medianFilter+0x64>
 800206c:	eef0 4a45 	vmov.f32	s9, s10
    acc_mdat[i][0] = acc[i];
 8002070:	eeb0 5a66 	vmov.f32	s10, s13
    acc_mdat[i][2] = acc_mdat[i][1];
 8002074:	eef0 6a64 	vmov.f32	s13, s9
        acc_tmp[b] = tmp;
      }
      a = j - 1;
      b = j;
    }
    gyro[i] = gyro_tmp[1];
 8002078:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002080:	bf88      	it	hi
 8002082:	eeb0 7a65 	vmovhi.f32	s14, s11
 8002086:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 800208e:	eef4 7ae6 	vcmpe.f32	s15, s13
    gyro[i] = gyro_tmp[1];
 8002092:	bfa8      	it	ge
 8002094:	eeb0 6a47 	vmovge.f32	s12, s14
    acc[i] = acc_tmp[1];
 8002098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209c:	bf98      	it	ls
 800209e:	eef0 6a67 	vmovls.f32	s13, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80020a2:	edd2 5a04 	vldr	s11, [r2, #16]
    gyro_mdat[i][0] = gyro[i];
 80020a6:	ed90 7a01 	vldr	s14, [r0, #4]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 80020aa:	edd2 3a03 	vldr	s7, [r2, #12]
    acc_mdat[i][2] = acc_mdat[i][1];
 80020ae:	ed93 4a04 	vldr	s8, [r3, #16]
    acc_mdat[i][1] = acc_mdat[i][0];
 80020b2:	edd3 4a03 	vldr	s9, [r3, #12]
    acc_mdat[i][0] = acc[i];
 80020b6:	edd1 7a01 	vldr	s15, [r1, #4]
    gyro[i] = gyro_tmp[1];
 80020ba:	ed80 6a00 	vstr	s12, [r0]
    acc[i] = acc_tmp[1];
 80020be:	eef4 6ac5 	vcmpe.f32	s13, s10
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (gyro_tmp[a] > gyro_tmp[b]) {
 80020c6:	eef4 5ac7 	vcmpe.f32	s11, s14
    acc[i] = acc_tmp[1];
 80020ca:	bfb8      	it	lt
 80020cc:	eef0 6a45 	vmovlt.f32	s13, s10
      if (gyro_tmp[a] > gyro_tmp[b]) {
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 80020d4:	edc1 6a00 	vstr	s13, [r1]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80020d8:	edc2 5a05 	vstr	s11, [r2, #20]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 80020dc:	edc2 3a04 	vstr	s7, [r2, #16]
    gyro_mdat[i][0] = gyro[i];
 80020e0:	ed82 7a03 	vstr	s14, [r2, #12]
    acc_mdat[i][2] = acc_mdat[i][1];
 80020e4:	ed83 4a05 	vstr	s8, [r3, #20]
    acc_mdat[i][1] = acc_mdat[i][0];
 80020e8:	edc3 4a04 	vstr	s9, [r3, #16]
    acc_mdat[i][0] = acc[i];
 80020ec:	edc3 7a03 	vstr	s15, [r3, #12]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 80020f0:	d405      	bmi.n	80020fe <ICM20602_medianFilter+0xea>
 80020f2:	eef0 6a65 	vmov.f32	s13, s11
    gyro_mdat[i][0] = gyro[i];
 80020f6:	eef0 5a47 	vmov.f32	s11, s14
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80020fa:	eeb0 7a66 	vmov.f32	s14, s13
      if (acc_tmp[a] > acc_tmp[b]) {
 80020fe:	eef4 7ac4 	vcmpe.f32	s15, s8
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	dc05      	bgt.n	8002114 <ICM20602_medianFilter+0x100>
 8002108:	eef0 6a44 	vmov.f32	s13, s8
    acc_mdat[i][0] = acc[i];
 800210c:	eeb0 4a67 	vmov.f32	s8, s15
    acc_mdat[i][2] = acc_mdat[i][1];
 8002110:	eef0 7a66 	vmov.f32	s15, s13
    gyro[i] = gyro_tmp[1];
 8002114:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	bf88      	it	hi
 800211e:	eeb0 7a63 	vmovhi.f32	s14, s7
 8002122:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 800212a:	eef4 7ae4 	vcmpe.f32	s15, s9
    gyro[i] = gyro_tmp[1];
 800212e:	bfb4      	ite	lt
 8002130:	eef0 6a65 	vmovlt.f32	s13, s11
 8002134:	eef0 6a47 	vmovge.f32	s13, s14
    acc[i] = acc_tmp[1];
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	bf8c      	ite	hi
 800213e:	eeb0 7a64 	vmovhi.f32	s14, s9
 8002142:	eeb0 7a67 	vmovls.f32	s14, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002146:	edd2 4a07 	vldr	s9, [r2, #28]
    gyro_mdat[i][0] = gyro[i];
 800214a:	edd0 7a02 	vldr	s15, [r0, #8]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 800214e:	edd2 3a06 	vldr	s7, [r2, #24]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002152:	edd3 5a07 	vldr	s11, [r3, #28]
    acc_mdat[i][1] = acc_mdat[i][0];
 8002156:	ed93 6a06 	vldr	s12, [r3, #24]
    acc_mdat[i][0] = acc[i];
 800215a:	ed91 5a02 	vldr	s10, [r1, #8]
    gyro[i] = gyro_tmp[1];
 800215e:	edc0 6a01 	vstr	s13, [r0, #4]
    acc[i] = acc_tmp[1];
 8002162:	eeb4 7ac4 	vcmpe.f32	s14, s8
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (gyro_tmp[a] > gyro_tmp[b]) {
 800216a:	eef4 7ae4 	vcmpe.f32	s15, s9
    acc[i] = acc_tmp[1];
 800216e:	bfb8      	it	lt
 8002170:	eeb0 7a44 	vmovlt.f32	s14, s8
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 8002178:	ed81 7a01 	vstr	s14, [r1, #4]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800217c:	edc2 4a08 	vstr	s9, [r2, #32]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8002180:	edc2 3a07 	vstr	s7, [r2, #28]
    gyro_mdat[i][0] = gyro[i];
 8002184:	edc2 7a06 	vstr	s15, [r2, #24]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002188:	edc3 5a08 	vstr	s11, [r3, #32]
    acc_mdat[i][1] = acc_mdat[i][0];
 800218c:	ed83 6a07 	vstr	s12, [r3, #28]
    acc_mdat[i][0] = acc[i];
 8002190:	ed83 5a06 	vstr	s10, [r3, #24]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002194:	dc05      	bgt.n	80021a2 <ICM20602_medianFilter+0x18e>
 8002196:	eeb0 7a64 	vmov.f32	s14, s9
    gyro_mdat[i][0] = gyro[i];
 800219a:	eef0 4a67 	vmov.f32	s9, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800219e:	eef0 7a47 	vmov.f32	s15, s14
      if (acc_tmp[a] > acc_tmp[b]) {
 80021a2:	eef4 5ac5 	vcmpe.f32	s11, s10
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	d405      	bmi.n	80021b8 <ICM20602_medianFilter+0x1a4>
 80021ac:	eeb0 7a65 	vmov.f32	s14, s11
    acc_mdat[i][0] = acc[i];
 80021b0:	eef0 5a45 	vmov.f32	s11, s10
    acc_mdat[i][2] = acc_mdat[i][1];
 80021b4:	eeb0 5a47 	vmov.f32	s10, s14
    gyro[i] = gyro_tmp[1];
 80021b8:	eef4 7ae3 	vcmpe.f32	s15, s7
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	bf88      	it	hi
 80021c2:	eef0 7a63 	vmovhi.f32	s15, s7
 80021c6:	eef4 7ae4 	vcmpe.f32	s15, s9
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 80021ce:	eeb4 6ac5 	vcmpe.f32	s12, s10
    gyro[i] = gyro_tmp[1];
 80021d2:	bfb8      	it	lt
 80021d4:	eef0 7a64 	vmovlt.f32	s15, s9
    acc[i] = acc_tmp[1];
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	bf88      	it	hi
 80021de:	eeb0 6a45 	vmovhi.f32	s12, s10
 80021e2:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	bfb8      	it	lt
 80021ec:	eeb0 6a65 	vmovlt.f32	s12, s11
    gyro[i] = gyro_tmp[1];
 80021f0:	edc0 7a02 	vstr	s15, [r0, #8]
    acc[i] = acc_tmp[1];
 80021f4:	ed81 6a02 	vstr	s12, [r1, #8]
  }
}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000df8 	.word	0x20000df8
 8002200:	20000de0 	.word	0x20000de0
 8002204:	20000dac 	.word	0x20000dac
 8002208:	20000d94 	.word	0x20000d94

0800220c <ICM20602_read_IMU_data>:
{
 800220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002210:	ed2d 8b02 	vpush	{d8}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002214:	2200      	movs	r2, #0
{
 8002216:	b084      	sub	sp, #16
 8002218:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800221a:	2110      	movs	r1, #16
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8002220:	eeb0 8a40 	vmov.f32	s16, s0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002224:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002228:	f005 fac2 	bl	80077b0 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 800222c:	23c8      	movs	r3, #200	; 0xc8
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800222e:	9500      	str	r5, [sp, #0]
  send_data[0] = reg | 0x80;
 8002230:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002234:	aa03      	add	r2, sp, #12
 8002236:	2301      	movs	r3, #1
 8002238:	a902      	add	r1, sp, #8
 800223a:	4889      	ldr	r0, [pc, #548]	; (8002460 <ICM20602_read_IMU_data+0x254>)
 800223c:	f006 fa0c 	bl	8008658 <HAL_SPI_TransmitReceive>
  send_data[0] = 0x00;
 8002240:	2700      	movs	r7, #0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002242:	2301      	movs	r3, #1
 8002244:	9500      	str	r5, [sp, #0]
 8002246:	aa03      	add	r2, sp, #12
 8002248:	a902      	add	r1, sp, #8
 800224a:	4885      	ldr	r0, [pc, #532]	; (8002460 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 800224c:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002250:	f006 fa02 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002254:	2110      	movs	r1, #16
 8002256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225a:	2201      	movs	r2, #1
  val = RxBuffer[0];
 800225c:	f89d 400c 	ldrb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002260:	f005 faa6 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002264:	463a      	mov	r2, r7
 8002266:	2110      	movs	r1, #16
 8002268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226c:	f005 faa0 	bl	80077b0 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 8002270:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002274:	9500      	str	r5, [sp, #0]
 8002276:	2301      	movs	r3, #1
 8002278:	aa03      	add	r2, sp, #12
 800227a:	a902      	add	r1, sp, #8
 800227c:	4878      	ldr	r0, [pc, #480]	; (8002460 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 800227e:	f88d c008 	strb.w	ip, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002282:	f006 f9e9 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002286:	2301      	movs	r3, #1
 8002288:	9500      	str	r5, [sp, #0]
 800228a:	aa03      	add	r2, sp, #12
 800228c:	a902      	add	r1, sp, #8
 800228e:	4874      	ldr	r0, [pc, #464]	; (8002460 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 8002290:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002294:	f006 f9e0 	bl	8008658 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 8002298:	f89d 800c 	ldrb.w	r8, [sp, #12]
  return ((HiByte << 8) | LoByte);
 800229c:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022a0:	2110      	movs	r1, #16
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	2201      	movs	r2, #1
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80022a8:	b224      	sxth	r4, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022aa:	f005 fa81 	bl	80077b0 <HAL_GPIO_WritePin>
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80022ae:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <ICM20602_read_IMU_data+0x258>)
 80022b0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 800249c <ICM20602_read_IMU_data+0x290>
 80022b4:	ed93 7a00 	vldr	s14, [r3]
 80022b8:	ee07 4a90 	vmov	s15, r4
 80022bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  send_data[0] = reg | 0x80;
 80022c0:	24c2      	movs	r4, #194	; 0xc2
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80022c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c6:	edc8 7a02 	vstr	s15, [r8, #8]
  ICM20602_medianFilter();
 80022ca:	f7ff fea3 	bl	8002014 <ICM20602_medianFilter>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022ce:	463a      	mov	r2, r7
 80022d0:	2110      	movs	r1, #16
 80022d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d6:	f005 fa6b 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022da:	9500      	str	r5, [sp, #0]
 80022dc:	2301      	movs	r3, #1
 80022de:	aa03      	add	r2, sp, #12
 80022e0:	a902      	add	r1, sp, #8
 80022e2:	485f      	ldr	r0, [pc, #380]	; (8002460 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 80022e4:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022e8:	f006 f9b6 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022ec:	2301      	movs	r3, #1
 80022ee:	9500      	str	r5, [sp, #0]
 80022f0:	aa03      	add	r2, sp, #12
 80022f2:	a902      	add	r1, sp, #8
 80022f4:	485a      	ldr	r0, [pc, #360]	; (8002460 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 80022f6:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022fa:	f006 f9ad 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022fe:	2110      	movs	r1, #16
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	2201      	movs	r2, #1
  val = RxBuffer[0];
 8002306:	f89d 400c 	ldrb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800230a:	f005 fa51 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800230e:	463a      	mov	r2, r7
 8002310:	2110      	movs	r1, #16
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f005 fa4b 	bl	80077b0 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 800231a:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800231e:	9500      	str	r5, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	aa03      	add	r2, sp, #12
 8002324:	a902      	add	r1, sp, #8
 8002326:	484e      	ldr	r0, [pc, #312]	; (8002460 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 8002328:	f88d c008 	strb.w	ip, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800232c:	f006 f994 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002330:	2301      	movs	r3, #1
 8002332:	9500      	str	r5, [sp, #0]
 8002334:	aa03      	add	r2, sp, #12
 8002336:	a902      	add	r1, sp, #8
 8002338:	4849      	ldr	r0, [pc, #292]	; (8002460 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 800233a:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800233e:	f006 f98b 	bl	8008658 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 8002342:	f89d 500c 	ldrb.w	r5, [sp, #12]
  return ((HiByte << 8) | LoByte);
 8002346:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800234a:	2201      	movs	r2, #1
 800234c:	2110      	movs	r1, #16
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002352:	b224      	sxth	r4, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002354:	f005 fa2c 	bl	80077b0 <HAL_GPIO_WritePin>
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002358:	ee07 4a90 	vmov	s15, r4

void ICM20602_IMU_compensate(void)
{
  int k;
  for (k = 0; k < 3; k++) {
    acc_comp[k] = acc[k] - acc_off[k];
 800235c:	4942      	ldr	r1, [pc, #264]	; (8002468 <ICM20602_read_IMU_data+0x25c>)
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <ICM20602_read_IMU_data+0x260>)
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002360:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002470 <ICM20602_read_IMU_data+0x264>
    acc_comp[k] = acc[k] - acc_off[k];
 8002364:	edd1 4a00 	vldr	s9, [r1]
 8002368:	edd1 5a02 	vldr	s11, [r1, #8]
 800236c:	ed91 5a01 	vldr	s10, [r1, #4]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 8002370:	4940      	ldr	r1, [pc, #256]	; (8002474 <ICM20602_read_IMU_data+0x268>)
    acc_comp[k] = acc[k] - acc_off[k];
 8002372:	ed93 2a01 	vldr	s4, [r3, #4]
 8002376:	ed93 3a02 	vldr	s6, [r3, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 800237a:	edd8 6a02 	vldr	s13, [r8, #8]
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800237e:	4a3e      	ldr	r2, [pc, #248]	; (8002478 <ICM20602_read_IMU_data+0x26c>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 8002380:	edd1 1a00 	vldr	s3, [r1]
 8002384:	edd1 2a01 	vldr	s5, [r1, #4]
 8002388:	edd8 3a00 	vldr	s7, [r8]
 800238c:	ed98 4a01 	vldr	s8, [r8, #4]
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8002398:	eea7 6a87 	vfma.f32	s12, s15, s14
    acc_comp[k] = acc[k] - acc_off[k];
 800239c:	edd3 7a00 	vldr	s15, [r3]
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
 80023a0:	ed92 7a02 	vldr	s14, [r2, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80023a4:	4b35      	ldr	r3, [pc, #212]	; (800247c <ICM20602_read_IMU_data+0x270>)
    acc_comp[k] = acc[k] - acc_off[k];
 80023a6:	ee74 4ae7 	vsub.f32	s9, s9, s15
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80023aa:	edd1 7a02 	vldr	s15, [r1, #8]
    acc_comp[k] = acc[k] - acc_off[k];
 80023ae:	4934      	ldr	r1, [pc, #208]	; (8002480 <ICM20602_read_IMU_data+0x274>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80023b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
    acc_comp[k] = acc[k] - acc_off[k];
 80023b4:	ee35 5a42 	vsub.f32	s10, s10, s4
 80023b8:	ee75 6ac3 	vsub.f32	s13, s11, s6
 80023bc:	edc1 4a00 	vstr	s9, [r1]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80023c0:	ee34 4a62 	vsub.f32	s8, s8, s5
    acc_comp[k] = acc[k] - acc_off[k];
 80023c4:	ed81 5a01 	vstr	s10, [r1, #4]
 80023c8:	edc1 6a02 	vstr	s13, [r1, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80023cc:	ee73 3ae1 	vsub.f32	s7, s7, s3
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023d0:	492c      	ldr	r1, [pc, #176]	; (8002484 <ICM20602_read_IMU_data+0x278>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80023d2:	ed83 4a01 	vstr	s8, [r3, #4]
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
 80023d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80023da:	edc3 3a00 	vstr	s7, [r3]
 80023de:	edc3 7a02 	vstr	s15, [r3, #8]
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023e2:	ed81 6a00 	vstr	s12, [r1]
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 80023e6:	ee27 7a08 	vmul.f32	s14, s14, s16
 80023ea:	edd6 7a00 	vldr	s15, [r6]
  while (deg < -180.0f) deg += 360.0f;
 80023ee:	eddf 5a26 	vldr	s11, [pc, #152]	; 8002488 <ICM20602_read_IMU_data+0x27c>
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 80023f2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80023f6:	eee7 7a04 	vfma.f32	s15, s14, s8
  while (deg < -180.0f) deg += 360.0f;
 80023fa:	eef4 7ae5 	vcmpe.f32	s15, s11
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d50c      	bpl.n	800241e <ICM20602_read_IMU_data+0x212>
 8002404:	ed9f 6a21 	vldr	s12, [pc, #132]	; 800248c <ICM20602_read_IMU_data+0x280>
 8002408:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002490 <ICM20602_read_IMU_data+0x284>
 800240c:	eeb0 7a67 	vmov.f32	s14, s15
 8002410:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	ee77 7a86 	vadd.f32	s15, s15, s12
 800241c:	d4f6      	bmi.n	800240c <ICM20602_read_IMU_data+0x200>
  while (deg >= 180.0f) deg -= 360.0f;
 800241e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002494 <ICM20602_read_IMU_data+0x288>
 8002422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	db0c      	blt.n	8002446 <ICM20602_read_IMU_data+0x23a>
 800242c:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800248c <ICM20602_read_IMU_data+0x280>
 8002430:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002498 <ICM20602_read_IMU_data+0x28c>
 8002434:	eeb0 7a67 	vmov.f32	s14, s15
 8002438:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002444:	daf6      	bge.n	8002434 <ICM20602_read_IMU_data+0x228>
  *yaw_input = ICM20602_normAngle(*yaw_input);
 8002446:	edc6 7a00 	vstr	s15, [r6]
  gyro_prv[0] = gyro_comp[0];
 800244a:	6818      	ldr	r0, [r3, #0]
  gyro_prv[1] = gyro_comp[1];
 800244c:	6859      	ldr	r1, [r3, #4]
  gyro_prv[2] = gyro_comp[2];
 800244e:	689b      	ldr	r3, [r3, #8]
  gyro_prv[0] = gyro_comp[0];
 8002450:	6010      	str	r0, [r2, #0]
  gyro_prv[1] = gyro_comp[1];
 8002452:	6051      	str	r1, [r2, #4]
  gyro_prv[2] = gyro_comp[2];
 8002454:	6093      	str	r3, [r2, #8]
}
 8002456:	b004      	add	sp, #16
 8002458:	ecbd 8b02 	vpop	{d8}
 800245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002460:	2000134c 	.word	0x2000134c
 8002464:	20000ddc 	.word	0x20000ddc
 8002468:	20000d94 	.word	0x20000d94
 800246c:	20000dd0 	.word	0x20000dd0
 8002470:	3b4889df 	.word	0x3b4889df
 8002474:	20000e1c 	.word	0x20000e1c
 8002478:	20000e28 	.word	0x20000e28
 800247c:	20000dec 	.word	0x20000dec
 8002480:	20000da0 	.word	0x20000da0
 8002484:	20000e34 	.word	0x20000e34
 8002488:	c3340000 	.word	0xc3340000
 800248c:	43b40000 	.word	0x43b40000
 8002490:	c4070000 	.word	0xc4070000
 8002494:	43340000 	.word	0x43340000
 8002498:	44070000 	.word	0x44070000
 800249c:	20000de0 	.word	0x20000de0

080024a0 <ICM20602_IMU_calibration2>:
{
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a4:	ed2d 8b02 	vpush	{d8}
 80024a8:	b0d3      	sub	sp, #332	; 0x14c
  double acc_sum[3] = {0};
 80024aa:	2100      	movs	r1, #0
  double gyro_ave[3][10] = {{0.0}};
 80024ac:	22f0      	movs	r2, #240	; 0xf0
 80024ae:	a816      	add	r0, sp, #88	; 0x58
  double acc_sum[3] = {0};
 80024b0:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 80024b4:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 80024b8:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
  double gyro_sum[3] = {0};
 80024bc:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
 80024c0:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
 80024c4:	e9cd 1114 	strd	r1, r1, [sp, #80]	; 0x50
  int cal_len = 0;
 80024c8:	9105      	str	r1, [sp, #20]
  double gyro_ave[3][10] = {{0.0}};
 80024ca:	f009 fab9 	bl	800ba40 <memset>
  printf("put the IMU still!\n");
 80024ce:	48aa      	ldr	r0, [pc, #680]	; (8002778 <ICM20602_IMU_calibration2+0x2d8>)
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80024d0:	4faa      	ldr	r7, [pc, #680]	; (800277c <ICM20602_IMU_calibration2+0x2dc>)
  printf("put the IMU still!\n");
 80024d2:	f009 f8fd 	bl	800b6d0 <puts>
  HAL_Delay(200);
 80024d6:	20c8      	movs	r0, #200	; 0xc8
 80024d8:	f003 fcae 	bl	8005e38 <HAL_Delay>
      acc_ave[j][0] = acc_sum[j] / cal_len;
 80024dc:	9805      	ldr	r0, [sp, #20]
 80024de:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 80027a0 <ICM20602_IMU_calibration2+0x300>
 80024e2:	f7fe f847 	bl	8000574 <__aeabi_i2d>
 80024e6:	460b      	mov	r3, r1
 80024e8:	4602      	mov	r2, r0
 80024ea:	49a5      	ldr	r1, [pc, #660]	; (8002780 <ICM20602_IMU_calibration2+0x2e0>)
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe f9d5 	bl	800089c <__aeabi_ddiv>
 80024f2:	4ba4      	ldr	r3, [pc, #656]	; (8002784 <ICM20602_IMU_calibration2+0x2e4>)
 80024f4:	9304      	str	r3, [sp, #16]
 80024f6:	ec41 0b18 	vmov	d8, r0, r1
 80024fa:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80024fe:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8002502:	ac16      	add	r4, sp, #88	; 0x58
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002504:	f04f 0a00 	mov.w	sl, #0
 8002508:	2200      	movs	r2, #0
 800250a:	2110      	movs	r1, #16
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f005 f94e 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002514:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
  send_data[0] = reg | 0x80;
 8002518:	f06f 0337 	mvn.w	r3, #55	; 0x37
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800251c:	9600      	str	r6, [sp, #0]
  send_data[0] = reg | 0x80;
 800251e:	f88d 3020 	strb.w	r3, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002522:	aa09      	add	r2, sp, #36	; 0x24
 8002524:	2301      	movs	r3, #1
 8002526:	a908      	add	r1, sp, #32
 8002528:	4638      	mov	r0, r7
 800252a:	f006 f895 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800252e:	2301      	movs	r3, #1
 8002530:	9600      	str	r6, [sp, #0]
 8002532:	aa09      	add	r2, sp, #36	; 0x24
 8002534:	a908      	add	r1, sp, #32
 8002536:	4638      	mov	r0, r7
  send_data[0] = 0x00;
 8002538:	f88d a020 	strb.w	sl, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800253c:	f006 f88c 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002540:	2201      	movs	r2, #1
 8002542:	2110      	movs	r1, #16
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  val = RxBuffer[0];
 8002548:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800254c:	f005 f930 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2110      	movs	r1, #16
 8002554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002558:	f005 f92a 	bl	80077b0 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 800255c:	20c7      	movs	r0, #199	; 0xc7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800255e:	9600      	str	r6, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	aa09      	add	r2, sp, #36	; 0x24
 8002564:	a908      	add	r1, sp, #32
  send_data[0] = reg | 0x80;
 8002566:	f88d 0020 	strb.w	r0, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800256a:	4638      	mov	r0, r7
 800256c:	f006 f874 	bl	8008658 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002570:	2301      	movs	r3, #1
 8002572:	9600      	str	r6, [sp, #0]
 8002574:	aa09      	add	r2, sp, #36	; 0x24
 8002576:	a908      	add	r1, sp, #32
 8002578:	4638      	mov	r0, r7
  send_data[0] = 0x00;
 800257a:	f88d a020 	strb.w	sl, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800257e:	f006 f86b 	bl	8008658 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 8002582:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
  return ((HiByte << 8) | LoByte);
 8002586:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800258a:	2201      	movs	r2, #1
 800258c:	2110      	movs	r1, #16
 800258e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002592:	b22d      	sxth	r5, r5
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002594:	f005 f90c 	bl	80077b0 <HAL_GPIO_WritePin>
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002598:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <ICM20602_IMU_calibration2+0x2e8>)
      acc_sum[j] += acc[j];
 800259a:	f85b 0b04 	ldr.w	r0, [fp], #4
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800259e:	ed93 7a00 	vldr	s14, [r3]
 80025a2:	4b78      	ldr	r3, [pc, #480]	; (8002784 <ICM20602_IMU_calibration2+0x2e4>)
 80025a4:	ee07 5a90 	vmov	s15, r5
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (j = 0; j < 3; j++) {
 80025ac:	3450      	adds	r4, #80	; 0x50
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80025ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b2:	edc3 7a02 	vstr	s15, [r3, #8]
      acc_sum[j] += acc[j];
 80025b6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80025ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025be:	f7fd ffeb 	bl	8000598 <__aeabi_f2d>
 80025c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80025c6:	f7fd fe89 	bl	80002dc <__adddf3>
      gyro_sum[j] += gyro[j];
 80025ca:	9b04      	ldr	r3, [sp, #16]
      acc_sum[j] += acc[j];
 80025cc:	e8e8 0102 	strd	r0, r1, [r8], #8
      gyro_sum[j] += gyro[j];
 80025d0:	f853 0b04 	ldr.w	r0, [r3], #4
 80025d4:	9304      	str	r3, [sp, #16]
 80025d6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80025da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025de:	f7fd ffdb 	bl	8000598 <__aeabi_f2d>
 80025e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80025e6:	f7fd fe79 	bl	80002dc <__adddf3>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	e8e9 2302 	strd	r2, r3, [r9], #8
      gyro_ave[j][0] = gyro_sum[j] / cal_len;
 80025f2:	ec53 2b18 	vmov	r2, r3, d8
 80025f6:	f7fe f827 	bl	8000648 <__aeabi_dmul>
        gyro_ave[j][i] = gyro_ave[j][i - 1];
 80025fa:	e954 2304 	ldrd	r2, r3, [r4, #-16]
 80025fe:	e944 2302 	strd	r2, r3, [r4, #-8]
 8002602:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 8002606:	e944 2304 	strd	r2, r3, [r4, #-16]
 800260a:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 800260e:	e944 2306 	strd	r2, r3, [r4, #-24]
 8002612:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8002616:	e944 2308 	strd	r2, r3, [r4, #-32]
 800261a:	e954 230c 	ldrd	r2, r3, [r4, #-48]	; 0x30
 800261e:	e944 230a 	strd	r2, r3, [r4, #-40]	; 0x28
 8002622:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 8002626:	e944 230c 	strd	r2, r3, [r4, #-48]	; 0x30
 800262a:	e954 2310 	ldrd	r2, r3, [r4, #-64]	; 0x40
 800262e:	e944 230e 	strd	r2, r3, [r4, #-56]	; 0x38
 8002632:	e954 2312 	ldrd	r2, r3, [r4, #-72]	; 0x48
 8002636:	e944 2310 	strd	r2, r3, [r4, #-64]	; 0x40
    for (j = 0; j < 3; j++) {
 800263a:	ab10      	add	r3, sp, #64	; 0x40
 800263c:	4598      	cmp	r8, r3
      gyro_ave[j][0] = gyro_sum[j] / cal_len;
 800263e:	e944 0114 	strd	r0, r1, [r4, #-80]	; 0x50
        gyro_ave[j][i] = gyro_ave[j][i - 1];
 8002642:	e944 0112 	strd	r0, r1, [r4, #-72]	; 0x48
    for (j = 0; j < 3; j++) {
 8002646:	f47f af5f 	bne.w	8002508 <ICM20602_IMU_calibration2+0x68>
    cal_len++;
 800264a:	9c05      	ldr	r4, [sp, #20]
    if ((fabs(gyro_ave[2][9] - gyro_ave[2][0]) < SHRINK_ERROR) && cal_len > 1000) {
 800264c:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8002650:	e9dd 0150 	ldrd	r0, r1, [sp, #320]	; 0x140
    cal_len++;
 8002654:	3401      	adds	r4, #1
 8002656:	9405      	str	r4, [sp, #20]
    if ((fabs(gyro_ave[2][9] - gyro_ave[2][0]) < SHRINK_ERROR) && cal_len > 1000) {
 8002658:	f7fd fe3e 	bl	80002d8 <__aeabi_dsub>
 800265c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002660:	9307      	str	r3, [sp, #28]
 8002662:	9006      	str	r0, [sp, #24]
 8002664:	a342      	add	r3, pc, #264	; (adr r3, 8002770 <ICM20602_IMU_calibration2+0x2d0>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800266e:	f7fe fa5d 	bl	8000b2c <__aeabi_dcmplt>
 8002672:	2800      	cmp	r0, #0
 8002674:	d05f      	beq.n	8002736 <ICM20602_IMU_calibration2+0x296>
 8002676:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800267a:	f77f af2f 	ble.w	80024dc <ICM20602_IMU_calibration2+0x3c>
  printf("length = %d\n", cal_len);
 800267e:	4621      	mov	r1, r4
 8002680:	4842      	ldr	r0, [pc, #264]	; (800278c <ICM20602_IMU_calibration2+0x2ec>)
 8002682:	f008 ffbf 	bl	800b604 <iprintf>
  printf("Gyro Yaw %+8.6f ", fabs(gyro_ave[2][9] - gyro_ave[2][0]));
 8002686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800268a:	4841      	ldr	r0, [pc, #260]	; (8002790 <ICM20602_IMU_calibration2+0x2f0>)
 800268c:	f008 ffba 	bl	800b604 <iprintf>
  if (cal_len == 5000 || cal_len == 1001) {
 8002690:	f241 3388 	movw	r3, #5000	; 0x1388
 8002694:	429c      	cmp	r4, r3
 8002696:	4646      	mov	r6, r8
 8002698:	d05b      	beq.n	8002752 <ICM20602_IMU_calibration2+0x2b2>
 800269a:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800269e:	429c      	cmp	r4, r3
 80026a0:	d057      	beq.n	8002752 <ICM20602_IMU_calibration2+0x2b2>
    acc_off[j] = acc_sum[j] / cal_len;
 80026a2:	9805      	ldr	r0, [sp, #20]
 80026a4:	4f3b      	ldr	r7, [pc, #236]	; (8002794 <ICM20602_IMU_calibration2+0x2f4>)
    gyro_off[j] = gyro_sum[j] / cal_len;
 80026a6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80027a4 <ICM20602_IMU_calibration2+0x304>
    acc_off[j] = acc_sum[j] / cal_len;
 80026aa:	f7fd ff63 	bl	8000574 <__aeabi_i2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	2000      	movs	r0, #0
 80026b4:	4932      	ldr	r1, [pc, #200]	; (8002780 <ICM20602_IMU_calibration2+0x2e0>)
 80026b6:	f7fe f8f1 	bl	800089c <__aeabi_ddiv>
 80026ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80026be:	4604      	mov	r4, r0
 80026c0:	460d      	mov	r5, r1
 80026c2:	f7fd ffc1 	bl	8000648 <__aeabi_dmul>
 80026c6:	f7fe fab7 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 80026ca:	e9d6 2300 	ldrd	r2, r3, [r6]
    acc_off[j] = acc_sum[j] / cal_len;
 80026ce:	6038      	str	r0, [r7, #0]
    gyro_off[j] = gyro_sum[j] / cal_len;
 80026d0:	4629      	mov	r1, r5
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7fd ffb8 	bl	8000648 <__aeabi_dmul>
 80026d8:	f7fe faae 	bl	8000c38 <__aeabi_d2f>
    acc_off[j] = acc_sum[j] / cal_len;
 80026dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    gyro_off[j] = gyro_sum[j] / cal_len;
 80026e0:	f8c8 0000 	str.w	r0, [r8]
    acc_off[j] = acc_sum[j] / cal_len;
 80026e4:	4629      	mov	r1, r5
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7fd ffae 	bl	8000648 <__aeabi_dmul>
 80026ec:	f7fe faa4 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 80026f0:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
    acc_off[j] = acc_sum[j] / cal_len;
 80026f4:	6078      	str	r0, [r7, #4]
    gyro_off[j] = gyro_sum[j] / cal_len;
 80026f6:	4629      	mov	r1, r5
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7fd ffa5 	bl	8000648 <__aeabi_dmul>
 80026fe:	f7fe fa9b 	bl	8000c38 <__aeabi_d2f>
    acc_off[j] = acc_sum[j] / cal_len;
 8002702:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002706:	f8c8 0004 	str.w	r0, [r8, #4]
    acc_off[j] = acc_sum[j] / cal_len;
 800270a:	4629      	mov	r1, r5
 800270c:	4620      	mov	r0, r4
 800270e:	f7fd ff9b 	bl	8000648 <__aeabi_dmul>
 8002712:	f7fe fa91 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002716:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
    acc_off[j] = acc_sum[j] / cal_len;
 800271a:	60b8      	str	r0, [r7, #8]
    gyro_off[j] = gyro_sum[j] / cal_len;
 800271c:	4629      	mov	r1, r5
 800271e:	4620      	mov	r0, r4
 8002720:	f7fd ff92 	bl	8000648 <__aeabi_dmul>
 8002724:	f7fe fa88 	bl	8000c38 <__aeabi_d2f>
 8002728:	f8c8 0008 	str.w	r0, [r8, #8]
}
 800272c:	b053      	add	sp, #332	; 0x14c
 800272e:	ecbd 8b02 	vpop	{d8}
 8002732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (cal_len < 5000.0) {
 8002736:	f241 3388 	movw	r3, #5000	; 0x1388
 800273a:	429c      	cmp	r4, r3
 800273c:	f47f aece 	bne.w	80024dc <ICM20602_IMU_calibration2+0x3c>
  printf("length = %d\n", cal_len);
 8002740:	9905      	ldr	r1, [sp, #20]
 8002742:	4812      	ldr	r0, [pc, #72]	; (800278c <ICM20602_IMU_calibration2+0x2ec>)
 8002744:	f008 ff5e 	bl	800b604 <iprintf>
  printf("Gyro Yaw %+8.6f ", fabs(gyro_ave[2][9] - gyro_ave[2][0]));
 8002748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800274c:	4810      	ldr	r0, [pc, #64]	; (8002790 <ICM20602_IMU_calibration2+0x2f0>)
 800274e:	f008 ff59 	bl	800b604 <iprintf>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002752:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002756:	4910      	ldr	r1, [pc, #64]	; (8002798 <ICM20602_IMU_calibration2+0x2f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <ICM20602_IMU_calibration2+0x2fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800275a:	68ca      	ldr	r2, [r1, #12]
 800275c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002760:	4313      	orrs	r3, r2
 8002762:	60cb      	str	r3, [r1, #12]
 8002764:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002768:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800276a:	e7fd      	b.n	8002768 <ICM20602_IMU_calibration2+0x2c8>
 800276c:	f3af 8000 	nop.w
 8002770:	eb1c432d 	.word	0xeb1c432d
 8002774:	3f1a36e2 	.word	0x3f1a36e2
 8002778:	0800ed10 	.word	0x0800ed10
 800277c:	2000134c 	.word	0x2000134c
 8002780:	3ff00000 	.word	0x3ff00000
 8002784:	20000de0 	.word	0x20000de0
 8002788:	20000ddc 	.word	0x20000ddc
 800278c:	0800ed24 	.word	0x0800ed24
 8002790:	0800ed34 	.word	0x0800ed34
 8002794:	20000dd0 	.word	0x20000dd0
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	05fa0004 	.word	0x05fa0004
 80027a0:	20000d94 	.word	0x20000d94
 80027a4:	20000e1c 	.word	0x20000e1c

080027a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE * f)
#endif /* __GNUC__ */

void __io_putchar(uint8_t ch) { HAL_UART_Transmit(&hlpuart1, &ch, 1, 1); }
 80027a8:	b500      	push	{lr}
 80027aa:	2301      	movs	r3, #1
 80027ac:	b083      	sub	sp, #12
 80027ae:	4684      	mov	ip, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	f10d 0107 	add.w	r1, sp, #7
 80027b6:	4804      	ldr	r0, [pc, #16]	; (80027c8 <__io_putchar+0x20>)
 80027b8:	f88d c007 	strb.w	ip, [sp, #7]
 80027bc:	f007 ff00 	bl	800a5c0 <HAL_UART_Transmit>
 80027c0:	b003      	add	sp, #12
 80027c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80027c6:	bf00      	nop
 80027c8:	200015c8 	.word	0x200015c8

080027cc <HAL_GetTick>:
void omniOdometory();
void mouseOdometory();
void yawFilter();
void resetLocalSpeedControl();
void resetAiCmdData();
uint32_t HAL_GetTick(void) { return uwTick; }
 80027cc:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <HAL_GetTick+0x8>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20001778 	.word	0x20001778

080027d8 <p>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void p(const char * format, ...)
{
 80027d8:	b40f      	push	{r0, r1, r2, r3}
 80027da:	b530      	push	{r4, r5, lr}
 80027dc:	b085      	sub	sp, #20
 80027de:	ac08      	add	r4, sp, #32
  va_list args;
  va_start(args, format);
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 80027e0:	4d08      	ldr	r5, [pc, #32]	; (8002804 <p+0x2c>)
{
 80027e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80027e6:	9101      	str	r1, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 80027e8:	4628      	mov	r0, r5
  va_start(args, format);
 80027ea:	9403      	str	r4, [sp, #12]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 80027ec:	f7fd fd68 	bl	80002c0 <strlen>
 80027f0:	9901      	ldr	r1, [sp, #4]
 80027f2:	4622      	mov	r2, r4
 80027f4:	4428      	add	r0, r5
 80027f6:	f009 f883 	bl	800b900 <vsiprintf>
  va_end(args);
}
 80027fa:	b005      	add	sp, #20
 80027fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002800:	b004      	add	sp, #16
 8002802:	4770      	bx	lr
 8002804:	20001100 	.word	0x20001100

08002808 <motor_test>:
{
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
}

void motor_test()
{
 8002808:	b510      	push	{r4, lr}
  if (decode_SW(adc_sw_data) & 0b00000001) {
 800280a:	4c34      	ldr	r4, [pc, #208]	; (80028dc <motor_test+0xd4>)
 800280c:	8820      	ldrh	r0, [r4, #0]
 800280e:	f003 fa47 	bl	8005ca0 <decode_SW>
 8002812:	07c0      	lsls	r0, r0, #31
 8002814:	d517      	bpl.n	8002846 <motor_test+0x3e>
    omni_move(4.0, 0.0, 0.0, 4.0);  // fwd
 8002816:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80028e0 <motor_test+0xd8>
 800281a:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800281e:	eef0 0a41 	vmov.f32	s1, s2
 8002822:	eeb0 0a61 	vmov.f32	s0, s3
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
    omni_move(-4.0, 0.0, 0.0, 4.0);  // back
 8002826:	f002 fc57 	bl	80050d8 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800282a:	482e      	ldr	r0, [pc, #184]	; (80028e4 <motor_test+0xdc>)
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002832:	f004 ffbd 	bl	80077b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else {
    omni_move(0.0, 0.0, 0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
  }
  actuator_motor5(0.0, 0.0);
 8002836:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80028e0 <motor_test+0xd8>
}
 800283a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor5(0.0, 0.0);
 800283e:	eeb0 0a60 	vmov.f32	s0, s1
 8002842:	f7fe bc47 	b.w	80010d4 <actuator_motor5>
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
 8002846:	8820      	ldrh	r0, [r4, #0]
 8002848:	f003 fa2a 	bl	8005ca0 <decode_SW>
 800284c:	0781      	lsls	r1, r0, #30
 800284e:	d508      	bpl.n	8002862 <motor_test+0x5a>
    omni_move(-4.0, 0.0, 0.0, 4.0);  // back
 8002850:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80028e0 <motor_test+0xd8>
 8002854:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8002858:	eef0 0a41 	vmov.f32	s1, s2
 800285c:	eeb9 0a00 	vmov.f32	s0, #144	; 0xc0800000 -4.0
 8002860:	e7e1      	b.n	8002826 <motor_test+0x1e>
  } else if (decode_SW(adc_sw_data) & 0b00000100) {
 8002862:	8820      	ldrh	r0, [r4, #0]
 8002864:	f003 fa1c 	bl	8005ca0 <decode_SW>
 8002868:	0742      	lsls	r2, r0, #29
 800286a:	d40d      	bmi.n	8002888 <motor_test+0x80>
  } else if (decode_SW(adc_sw_data) & 0b00001000) {
 800286c:	8820      	ldrh	r0, [r4, #0]
 800286e:	f003 fa17 	bl	8005ca0 <decode_SW>
 8002872:	0703      	lsls	r3, r0, #28
 8002874:	d511      	bpl.n	800289a <motor_test+0x92>
    omni_move(0.0, 4.0, 0.0, 4.0);  // right
 8002876:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80028e0 <motor_test+0xd8>
 800287a:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800287e:	eef0 0a61 	vmov.f32	s1, s3
 8002882:	eeb0 0a41 	vmov.f32	s0, s2
 8002886:	e7ce      	b.n	8002826 <motor_test+0x1e>
    omni_move(0.0, -4.0, 0.0, 4.0);  // left
 8002888:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80028e0 <motor_test+0xd8>
 800288c:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8002890:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8002894:	eeb0 0a41 	vmov.f32	s0, s2
 8002898:	e7c5      	b.n	8002826 <motor_test+0x1e>
  } else if (decode_SW(adc_sw_data) & 0b00010000) {
 800289a:	8820      	ldrh	r0, [r4, #0]
 800289c:	f003 fa00 	bl	8005ca0 <decode_SW>
 80028a0:	f010 0410 	ands.w	r4, r0, #16
 80028a4:	d008      	beq.n	80028b8 <motor_test+0xb0>
    omni_move(0.0, 0.0, 20.0, 4.0);  // spin
 80028a6:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80028e0 <motor_test+0xd8>
 80028aa:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80028ae:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80028b2:	eeb0 0a60 	vmov.f32	s0, s1
 80028b6:	e7b6      	b.n	8002826 <motor_test+0x1e>
    omni_move(0.0, 0.0, 0.0, 0.0);
 80028b8:	eddf 1a09 	vldr	s3, [pc, #36]	; 80028e0 <motor_test+0xd8>
 80028bc:	eeb0 1a61 	vmov.f32	s2, s3
 80028c0:	eef0 0a61 	vmov.f32	s1, s3
 80028c4:	eeb0 0a61 	vmov.f32	s0, s3
 80028c8:	f002 fc06 	bl	80050d8 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <motor_test+0xdc>)
 80028ce:	4622      	mov	r2, r4
 80028d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028d4:	f004 ff6c 	bl	80077b0 <HAL_GPIO_WritePin>
 80028d8:	e7ad      	b.n	8002836 <motor_test+0x2e>
 80028da:	bf00      	nop
 80028dc:	20000e44 	.word	0x20000e44
 80028e0:	00000000 	.word	0x00000000
 80028e4:	48000800 	.word	0x48000800

080028e8 <kicker_test>:
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
}

void kicker_test(bool manual_mode)
{
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static bool dribbler_up = false;

  if (kick_state != 0) {
 80028ea:	4c59      	ldr	r4, [pc, #356]	; (8002a50 <kicker_test+0x168>)
 80028ec:	8823      	ldrh	r3, [r4, #0]
 80028ee:	b29b      	uxth	r3, r3
{
 80028f0:	4605      	mov	r5, r0
  if (kick_state != 0) {
 80028f2:	b13b      	cbz	r3, 8002904 <kicker_test+0x1c>
    if (kick_state > MAIN_LOOP_CYCLE / 2) {
 80028f4:	8823      	ldrh	r3, [r4, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2bfa      	cmp	r3, #250	; 0xfa
 80028fa:	d829      	bhi.n	8002950 <kicker_test+0x68>
      if (can_raw.ball_detection[0] == 0) {
        kick_state = 0;
      }
    } else {
      kick_state++;
 80028fc:	8823      	ldrh	r3, [r4, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	b29b      	uxth	r3, r3
 8002902:	8023      	strh	r3, [r4, #0]
    }
  }

  if (dribbler_up == false && decode_SW(adc_sw_data) & 0b00000100) {
 8002904:	4f53      	ldr	r7, [pc, #332]	; (8002a54 <kicker_test+0x16c>)
 8002906:	4e54      	ldr	r6, [pc, #336]	; (8002a58 <kicker_test+0x170>)
 8002908:	783b      	ldrb	r3, [r7, #0]
 800290a:	b35b      	cbz	r3, 8002964 <kicker_test+0x7c>
    dribbler_up = true;
    actuator_dribbler_down();
  } else if (dribbler_up == true && decode_SW(adc_sw_data) & 0b00001000) {
 800290c:	8830      	ldrh	r0, [r6, #0]
 800290e:	f003 f9c7 	bl	8005ca0 <decode_SW>
 8002912:	0701      	lsls	r1, r0, #28
 8002914:	d461      	bmi.n	80029da <kicker_test+0xf2>
    dribbler_up = false;
    actuator_dribbler_up();
  }

  if (decode_SW(adc_sw_data) & 0b00010000) {
 8002916:	8830      	ldrh	r0, [r6, #0]
 8002918:	f003 f9c2 	bl	8005ca0 <decode_SW>
 800291c:	06c3      	lsls	r3, r0, #27
 800291e:	d52e      	bpl.n	800297e <kicker_test+0x96>
    if (!manual_mode) {
 8002920:	2d00      	cmp	r5, #0
 8002922:	d048      	beq.n	80029b6 <kicker_test+0xce>
      actuator_motor5(0.5, 1.0);
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002924:	484d      	ldr	r0, [pc, #308]	; (8002a5c <kicker_test+0x174>)
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800292c:	f004 ff40 	bl	80077b0 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
      if (kick_state == 0) {
 8002930:	8821      	ldrh	r1, [r4, #0]
 8002932:	b289      	uxth	r1, r1
 8002934:	2900      	cmp	r1, #0
 8002936:	d067      	beq.n	8002a08 <kicker_test+0x120>
    actuator_motor5(0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
    actuator_kicker(1, 1);  // charge enable
    actuator_kicker_voltage(400.0);
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
 8002938:	eddf 1a49 	vldr	s3, [pc, #292]	; 8002a60 <kicker_test+0x178>
}
 800293c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 8002940:	eeb0 1a61 	vmov.f32	s2, s3
 8002944:	eef0 0a61 	vmov.f32	s1, s3
 8002948:	eeb0 0a61 	vmov.f32	s0, s3
 800294c:	f002 bbc4 	b.w	80050d8 <omni_move>
      if (can_raw.ball_detection[0] == 0) {
 8002950:	4b44      	ldr	r3, [pc, #272]	; (8002a64 <kicker_test+0x17c>)
 8002952:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0d3      	beq.n	8002902 <kicker_test+0x1a>
  if (dribbler_up == false && decode_SW(adc_sw_data) & 0b00000100) {
 800295a:	4f3e      	ldr	r7, [pc, #248]	; (8002a54 <kicker_test+0x16c>)
 800295c:	4e3e      	ldr	r6, [pc, #248]	; (8002a58 <kicker_test+0x170>)
 800295e:	783b      	ldrb	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1d3      	bne.n	800290c <kicker_test+0x24>
 8002964:	8830      	ldrh	r0, [r6, #0]
 8002966:	f003 f99b 	bl	8005ca0 <decode_SW>
 800296a:	0742      	lsls	r2, r0, #29
 800296c:	d46b      	bmi.n	8002a46 <kicker_test+0x15e>
  } else if (dribbler_up == true && decode_SW(adc_sw_data) & 0b00001000) {
 800296e:	783b      	ldrb	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1cb      	bne.n	800290c <kicker_test+0x24>
  if (decode_SW(adc_sw_data) & 0b00010000) {
 8002974:	8830      	ldrh	r0, [r6, #0]
 8002976:	f003 f993 	bl	8005ca0 <decode_SW>
 800297a:	06c3      	lsls	r3, r0, #27
 800297c:	d4d0      	bmi.n	8002920 <kicker_test+0x38>
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
 800297e:	8830      	ldrh	r0, [r6, #0]
 8002980:	f003 f98e 	bl	8005ca0 <decode_SW>
 8002984:	f010 0602 	ands.w	r6, r0, #2
 8002988:	d048      	beq.n	8002a1c <kicker_test+0x134>
    if (!manual_mode) {
 800298a:	b35d      	cbz	r5, 80029e4 <kicker_test+0xfc>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800298c:	4833      	ldr	r0, [pc, #204]	; (8002a5c <kicker_test+0x174>)
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002994:	f004 ff0c 	bl	80077b0 <HAL_GPIO_WritePin>
      if (kick_state == 0) {
 8002998:	8823      	ldrh	r3, [r4, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1cb      	bne.n	8002938 <kicker_test+0x50>
        actuator_kicker(2, 1);  // chip
 80029a0:	2101      	movs	r1, #1
 80029a2:	2002      	movs	r0, #2
 80029a4:	f7fe fbea 	bl	800117c <actuator_kicker>
        actuator_kicker(3, 100);
 80029a8:	2164      	movs	r1, #100	; 0x64
 80029aa:	2003      	movs	r0, #3
 80029ac:	f7fe fbe6 	bl	800117c <actuator_kicker>
        kick_state = 1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	8023      	strh	r3, [r4, #0]
 80029b4:	e7c0      	b.n	8002938 <kicker_test+0x50>
      actuator_motor5(0.5, 1.0);
 80029b6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80029ba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80029be:	f7fe fb89 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80029c2:	4826      	ldr	r0, [pc, #152]	; (8002a5c <kicker_test+0x174>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ca:	f004 fef1 	bl	80077b0 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
 80029ce:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <kicker_test+0x17c>)
 80029d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d1af      	bne.n	8002938 <kicker_test+0x50>
 80029d8:	e7aa      	b.n	8002930 <kicker_test+0x48>
    dribbler_up = false;
 80029da:	2300      	movs	r3, #0
 80029dc:	703b      	strb	r3, [r7, #0]
    actuator_dribbler_up();
 80029de:	f7fe fb99 	bl	8001114 <actuator_dribbler_up>
 80029e2:	e798      	b.n	8002916 <kicker_test+0x2e>
      actuator_motor5(0.5, 1.0);
 80029e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80029e8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80029ec:	f7fe fb72 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80029f0:	481a      	ldr	r0, [pc, #104]	; (8002a5c <kicker_test+0x174>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029f8:	f004 feda 	bl	80077b0 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <kicker_test+0x17c>)
 80029fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d198      	bne.n	8002938 <kicker_test+0x50>
 8002a06:	e7c7      	b.n	8002998 <kicker_test+0xb0>
        actuator_kicker(2, 0);  // straight
 8002a08:	2002      	movs	r0, #2
 8002a0a:	f7fe fbb7 	bl	800117c <actuator_kicker>
        actuator_kicker(3, 50);
 8002a0e:	2132      	movs	r1, #50	; 0x32
 8002a10:	2003      	movs	r0, #3
 8002a12:	f7fe fbb3 	bl	800117c <actuator_kicker>
        kick_state = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	8023      	strh	r3, [r4, #0]
 8002a1a:	e78d      	b.n	8002938 <kicker_test+0x50>
    actuator_motor5(0.0, 0.0);
 8002a1c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002a60 <kicker_test+0x178>
 8002a20:	eeb0 0a60 	vmov.f32	s0, s1
 8002a24:	f7fe fb56 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8002a28:	4632      	mov	r2, r6
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <kicker_test+0x174>)
 8002a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a30:	f004 febe 	bl	80077b0 <HAL_GPIO_WritePin>
    actuator_kicker(1, 1);  // charge enable
 8002a34:	2101      	movs	r1, #1
 8002a36:	4608      	mov	r0, r1
 8002a38:	f7fe fba0 	bl	800117c <actuator_kicker>
    actuator_kicker_voltage(400.0);
 8002a3c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002a68 <kicker_test+0x180>
 8002a40:	f7fe fb8c 	bl	800115c <actuator_kicker_voltage>
 8002a44:	e778      	b.n	8002938 <kicker_test+0x50>
    dribbler_up = true;
 8002a46:	2301      	movs	r3, #1
 8002a48:	703b      	strb	r3, [r7, #0]
    actuator_dribbler_down();
 8002a4a:	f7fe fb75 	bl	8001138 <actuator_dribbler_down>
 8002a4e:	e762      	b.n	8002916 <kicker_test+0x2e>
 8002a50:	20001014 	.word	0x20001014
 8002a54:	20000fbc 	.word	0x20000fbc
 8002a58:	20000e44 	.word	0x20000e44
 8002a5c:	48000800 	.word	0x48000800
 8002a60:	00000000 	.word	0x00000000
 8002a64:	20000ea8 	.word	0x20000ea8
 8002a68:	43c80000 	.word	0x43c80000
 8002a6c:	00000000 	.word	0x00000000

08002a70 <yawFilter>:
    calib_start_cnt = 0;
  }
}

void yawFilter()
{
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
  static uint32_t yaw_angle_update_cnt = 0;
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002a72:	4c59      	ldr	r4, [pc, #356]	; (8002bd8 <yawFilter+0x168>)
  yaw_angle_update_cnt++;
 8002a74:	4a59      	ldr	r2, [pc, #356]	; (8002bdc <yawFilter+0x16c>)
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002a76:	ed94 7a00 	vldr	s14, [r4]
 8002a7a:	edd4 7a01 	vldr	s15, [r4, #4]
 8002a7e:	edd4 6a04 	vldr	s13, [r4, #16]
  yaw_angle_update_cnt++;
 8002a82:	6813      	ldr	r3, [r2, #0]
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
 8002a88:	ed2d 8b02 	vpush	{d8}
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002a8c:	eef0 7ae7 	vabs.f32	s15, s15
 8002a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
  yaw_angle_update_cnt++;
 8002a94:	3301      	adds	r3, #1
  if (yaw_angle_update_cnt > MAIN_LOOP_CYCLE / 2) {  // 2Hz
 8002a96:	2bfa      	cmp	r3, #250	; 0xfa
{
 8002a98:	b083      	sub	sp, #12
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002a9a:	edc4 7a04 	vstr	s15, [r4, #16]
  if (yaw_angle_update_cnt > MAIN_LOOP_CYCLE / 2) {  // 2Hz
 8002a9e:	d820      	bhi.n	8002ae2 <yawFilter+0x72>
 8002aa0:	4d4f      	ldr	r5, [pc, #316]	; (8002be0 <yawFilter+0x170>)
  yaw_angle_update_cnt++;
 8002aa2:	6013      	str	r3, [r2, #0]
      debug.theta_override_flag = false;
    }
    imu.yaw_angle_diff_integral = 0;
  }

  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8002aa4:	68a3      	ldr	r3, [r4, #8]
  imu.pre_yaw_angle = imu.yaw_angle;

  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 8002aa6:	484c      	ldr	r0, [pc, #304]	; (8002bd8 <yawFilter+0x168>)
 8002aa8:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002be4 <yawFilter+0x174>
  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8002aac:	60e3      	str	r3, [r4, #12]
  imu.pre_yaw_angle = imu.yaw_angle;
 8002aae:	ed84 7a01 	vstr	s14, [r4, #4]
  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 8002ab2:	f7ff fbab 	bl	800220c <ICM20602_read_IMU_data>
  if (sys.main_mode == 2) {
 8002ab6:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <yawFilter+0x178>)
 8002ab8:	7b1b      	ldrb	r3, [r3, #12]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d077      	beq.n	8002bae <yawFilter+0x13e>
    // デバッグ用、targetへ補正する
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain

  } else if (ai_cmd.vision_lost_flag) {
 8002abe:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002ac2:	b1f3      	cbz	r3, 8002b02 <yawFilter+0x92>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002ac4:	6820      	ldr	r0, [r4, #0]

  } else {
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
  }

  imu.yaw_angle_rad = imu.yaw_angle * M_PI / 180;
 8002ac6:	f7fd fd67 	bl	8000598 <__aeabi_f2d>
 8002aca:	a33d      	add	r3, pc, #244	; (adr r3, 8002bc0 <yawFilter+0x150>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fdba 	bl	8000648 <__aeabi_dmul>
 8002ad4:	f7fe f8b0 	bl	8000c38 <__aeabi_d2f>
 8002ad8:	60a0      	str	r0, [r4, #8]
}
 8002ada:	b003      	add	sp, #12
 8002adc:	ecbd 8b02 	vpop	{d8}
 8002ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (imu.yaw_angle_diff_integral < 1) {
 8002ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ae6:	eef4 7ae6 	vcmpe.f32	s15, s13
    yaw_angle_update_cnt = 0;
 8002aea:	2300      	movs	r3, #0
    if (imu.yaw_angle_diff_integral < 1) {
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    yaw_angle_update_cnt = 0;
 8002af0:	6013      	str	r3, [r2, #0]
    if (imu.yaw_angle_diff_integral < 1) {
 8002af2:	d43b      	bmi.n	8002b6c <yawFilter+0xfc>
      debug.theta_override_flag = false;
 8002af4:	4a3d      	ldr	r2, [pc, #244]	; (8002bec <yawFilter+0x17c>)
 8002af6:	4d3a      	ldr	r5, [pc, #232]	; (8002be0 <yawFilter+0x170>)
 8002af8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    imu.yaw_angle_diff_integral = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	6123      	str	r3, [r4, #16]
 8002b00:	e7d0      	b.n	8002aa4 <yawFilter+0x34>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002b02:	ed94 8a00 	vldr	s16, [r4]
 8002b06:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8002bf0 <yawFilter+0x180>
 8002b0a:	edd5 0a01 	vldr	s1, [r5, #4]
 8002b0e:	edcd 0a01 	vstr	s1, [sp, #4]
 8002b12:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b16:	ee17 0a90 	vmov	r0, s15
 8002b1a:	f7fd fd3d 	bl	8000598 <__aeabi_f2d>
 8002b1e:	a32a      	add	r3, pc, #168	; (adr r3, 8002bc8 <yawFilter+0x158>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fd90 	bl	8000648 <__aeabi_dmul>
 8002b28:	f7fe f886 	bl	8000c38 <__aeabi_d2f>
 8002b2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002b30:	ee00 0a10 	vmov	s0, r0
 8002b34:	f002 ffdc 	bl	8005af0 <getAngleDiff>
 8002b38:	ee18 0a10 	vmov	r0, s16
 8002b3c:	ee10 5a10 	vmov	r5, s0
 8002b40:	f7fd fd2a 	bl	8000598 <__aeabi_f2d>
 8002b44:	4606      	mov	r6, r0
 8002b46:	4628      	mov	r0, r5
 8002b48:	460f      	mov	r7, r1
 8002b4a:	f7fd fd25 	bl	8000598 <__aeabi_f2d>
 8002b4e:	a320      	add	r3, pc, #128	; (adr r3, 8002bd0 <yawFilter+0x160>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fd78 	bl	8000648 <__aeabi_dmul>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	4639      	mov	r1, r7
 8002b60:	f7fd fbba 	bl	80002d8 <__aeabi_dsub>
 8002b64:	f7fe f868 	bl	8000c38 <__aeabi_d2f>
 8002b68:	6020      	str	r0, [r4, #0]
 8002b6a:	e7ac      	b.n	8002ac6 <yawFilter+0x56>
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <yawFilter+0x184>)
      debug.theta_override_flag = true;
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <yawFilter+0x17c>)
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4d1b      	ldr	r5, [pc, #108]	; (8002be0 <yawFilter+0x170>)
      debug.theta_override_flag = true;
 8002b74:	2101      	movs	r1, #1
 8002b76:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0be      	beq.n	8002afc <yawFilter+0x8c>
 8002b7e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ba      	bne.n	8002afc <yawFilter+0x8c>
 8002b86:	eeb0 0a47 	vmov.f32	s0, s14
 8002b8a:	edd5 0a01 	vldr	s1, [r5, #4]
 8002b8e:	f002 ffaf 	bl	8005af0 <getAngleDiff>
 8002b92:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002b96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        imu.yaw_angle = ai_cmd.global_vision_theta;
 8002b9e:	bfca      	itet	gt
 8002ba0:	ed95 7a01 	vldrgt	s14, [r5, #4]
  imu.pre_yaw_angle = imu.yaw_angle;
 8002ba4:	ed94 7a00 	vldrle	s14, [r4]
        imu.yaw_angle = ai_cmd.global_vision_theta;
 8002ba8:	ed84 7a00 	vstrgt	s14, [r4]
 8002bac:	e7a6      	b.n	8002afc <yawFilter+0x8c>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002bae:	ed94 8a00 	vldr	s16, [r4]
 8002bb2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002bf0 <yawFilter+0x180>
 8002bb6:	edd5 0a00 	vldr	s1, [r5]
 8002bba:	e7a8      	b.n	8002b0e <yawFilter+0x9e>
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	a2529d39 	.word	0xa2529d39
 8002bc4:	3f91df46 	.word	0x3f91df46
 8002bc8:	16c16c17 	.word	0x16c16c17
 8002bcc:	3f76c16c 	.word	0x3f76c16c
 8002bd0:	48b81fe5 	.word	0x48b81fe5
 8002bd4:	3fad55df 	.word	0x3fad55df
 8002bd8:	20000fc0 	.word	0x20000fc0
 8002bdc:	20001348 	.word	0x20001348
 8002be0:	20000e48 	.word	0x20000e48
 8002be4:	3b03126f 	.word	0x3b03126f
 8002be8:	200012f8 	.word	0x200012f8
 8002bec:	20000f84 	.word	0x20000f84
 8002bf0:	40490fdb 	.word	0x40490fdb
 8002bf4:	20000f2c 	.word	0x20000f2c

08002bf8 <speed_control>:
  }
  //output.omega = 0;
}

void speed_control()
{
 8002bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  target.local_velocity[0] = target.velocity[0];
 8002bfc:	4ce5      	ldr	r4, [pc, #916]	; (8002f94 <speed_control+0x39c>)
  target.local_velocity[1] = target.velocity[1];

  // 500Hz, m/s -> m / cycle
  for (int i = 0; i < 2; i++) {
    // 加速度制限
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002bfe:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8002fbc <speed_control+0x3c4>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002c02:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002c06:	4be4      	ldr	r3, [pc, #912]	; (8002f98 <speed_control+0x3a0>)
 8002c08:	f8ca 3014 	str.w	r3, [sl, #20]
{
 8002c0c:	ed2d 8b0a 	vpush	{d8-d12}
  target.local_velocity[0] = target.velocity[0];
 8002c10:	ed94 8a04 	vldr	s16, [r4, #16]
  target.local_velocity[1] = target.velocity[1];
 8002c14:	edd4 8a05 	vldr	s17, [r4, #20]
  target.local_velocity[0] = target.velocity[0];
 8002c18:	ed84 8a06 	vstr	s16, [r4, #24]
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002c1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      output.accel_limit[i] = ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE;
    }

    // 減速方向は摩擦を使えるので制動力上げる
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002c24:	eeb0 7ac8 	vabs.f32	s14, s16
 8002c28:	eef0 6ae7 	vabs.f32	s13, s15
      output.accel_limit[i] = ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE;
 8002c2c:	bf44      	itt	mi
 8002c2e:	4bdb      	ldrmi	r3, [pc, #876]	; (8002f9c <speed_control+0x3a4>)
 8002c30:	f8ca 3014 	strmi.w	r3, [sl, #20]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002c34:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  target.local_velocity[1] = target.velocity[1];
 8002c3c:	edc4 8a07 	vstr	s17, [r4, #28]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002c40:	d505      	bpl.n	8002c4e <speed_control+0x56>
      output.accel_limit[i] *= 2;
 8002c42:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002c46:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002c4a:	ed8a 7a05 	vstr	s14, [sl, #20]
    }

    // 目標移動位置を追い越してしまっている場合。速度ではないのはノイズが多いから
    // ノイズ対策であまりodom情報でアップデートはできないが、最大加速度側を増やして追従する
    // local_velocityに対して追従するlocal_velocity_currentの追従を早める
    if (diff_local[i] > 0 && target.local_velocity[i] > 0) {
 8002c4e:	4bd4      	ldr	r3, [pc, #848]	; (8002fa0 <speed_control+0x3a8>)
 8002c50:	ed93 7a00 	vldr	s14, [r3]
 8002c54:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	dd0c      	ble.n	8002c78 <speed_control+0x80>
 8002c5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	dd07      	ble.n	8002c78 <speed_control+0x80>
      output.accel_limit[i] *= 5;
 8002c68:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002c6c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002c70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c74:	ed8a 7a05 	vstr	s14, [sl, #20]
    }
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8002c78:	ed93 7a00 	vldr	s14, [r3]
 8002c7c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	f100 81af 	bmi.w	8002fe6 <speed_control+0x3ee>
      output.accel_limit[i] = 0;
      //output.local_velocity_current[i] = 0;
    }*/

    // 加速度→速度変換
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002c88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002c90:	ed9a 7a05 	vldr	s14, [sl, #20]
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002c94:	f280 816f 	bge.w	8002f76 <speed_control+0x37e>
        target.local_velocity_current[i] = target.local_velocity[i];
      } else {
        target.local_velocity_current[i] += output.accel_limit[i];
      }
    } else {
      if (target.local_velocity_current[i] - output.accel_limit[i] < target.local_velocity[i]) {
 8002c98:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002c9c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	f340 814e 	ble.w	8002f44 <speed_control+0x34c>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002ca8:	ee18 0a10 	vmov	r0, s16
 8002cac:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002cb0:	4ab9      	ldr	r2, [pc, #740]	; (8002f98 <speed_control+0x3a0>)
        target.local_velocity_current[i] += output.accel_limit[i];
 8002cb2:	62a0      	str	r0, [r4, #40]	; 0x28
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002cb4:	eeb0 7ae8 	vabs.f32	s14, s17
 8002cb8:	eef0 6ae7 	vabs.f32	s13, s15
 8002cbc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002cc4:	f8ca 2018 	str.w	r2, [sl, #24]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8002cc8:	d505      	bpl.n	8002cd6 <speed_control+0xde>
      output.accel_limit[i] *= 2;
 8002cca:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002cce:	ee37 7a07 	vadd.f32	s14, s14, s14
 8002cd2:	ed8a 7a06 	vstr	s14, [sl, #24]
    if (diff_local[i] > 0 && target.local_velocity[i] > 0) {
 8002cd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cda:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	dd0c      	ble.n	8002cfe <speed_control+0x106>
 8002ce4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	dd07      	ble.n	8002cfe <speed_control+0x106>
      output.accel_limit[i] *= 5;
 8002cee:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002cf2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002cf6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002cfa:	ed8a 7a06 	vstr	s14, [sl, #24]
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8002cfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d02:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0a:	f100 817b 	bmi.w	8003004 <speed_control+0x40c>
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002d0e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002d16:	ed9a 7a06 	vldr	s14, [sl, #24]
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8002d1a:	f2c0 8153 	blt.w	8002fc4 <speed_control+0x3cc>
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d22:	eef4 8ac7 	vcmpe.f32	s17, s14
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	f100 8159 	bmi.w	8002fe0 <speed_control+0x3e8>
        target.local_velocity_current[i] += output.accel_limit[i];
 8002d2e:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002d32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d36:	ee17 6a90 	vmov	r6, s15
 8002d3a:	62e6      	str	r6, [r4, #44]	; 0x2c
      }
    }
  }

  // ローカル→グローバル座標系
  output.local_velocity_current[0] = target.local_velocity_current[0] * cos(imu.yaw_angle_rad) - target.local_velocity_current[1] * sin(imu.yaw_angle_rad);
 8002d3c:	f7fd fc2c 	bl	8000598 <__aeabi_f2d>
 8002d40:	4b98      	ldr	r3, [pc, #608]	; (8002fa4 <speed_control+0x3ac>)
  // ここから位置制御
  for (int i = 0; i < 2; i++) {
    // targetとodomの差分に上限をつける(吹っ飛び対策)
    // 出力が上限に張り付いたら、出力制限でそれ以上の加速度は出しようがないのでそれに合わせる
    float odom_diff_max = (float)OUTPUT_XY_LIMIT / OMNI_OUTPUT_GAIN_KP;
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002d42:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8002fc0 <speed_control+0x3c8>
  output.local_velocity_current[0] = target.local_velocity_current[0] * cos(imu.yaw_angle_rad) - target.local_velocity_current[1] * sin(imu.yaw_angle_rad);
 8002d46:	689d      	ldr	r5, [r3, #8]
 8002d48:	4680      	mov	r8, r0
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	4689      	mov	r9, r1
 8002d4e:	f7fd fc23 	bl	8000598 <__aeabi_f2d>
 8002d52:	ec41 0b10 	vmov	d0, r0, r1
 8002d56:	ec41 0b19 	vmov	d9, r0, r1
 8002d5a:	f00a fe4d 	bl	800d9f8 <cos>
 8002d5e:	4630      	mov	r0, r6
 8002d60:	eeb0 aa40 	vmov.f32	s20, s0
 8002d64:	eef0 aa60 	vmov.f32	s21, s1
 8002d68:	f7fd fc16 	bl	8000598 <__aeabi_f2d>
 8002d6c:	eeb0 0a49 	vmov.f32	s0, s18
 8002d70:	eef0 0a69 	vmov.f32	s1, s19
 8002d74:	4606      	mov	r6, r0
 8002d76:	460f      	mov	r7, r1
 8002d78:	f00a fe92 	bl	800daa0 <sin>
 8002d7c:	ec53 2b1a 	vmov	r2, r3, d10
 8002d80:	eeb0 9a40 	vmov.f32	s18, s0
 8002d84:	eef0 9a60 	vmov.f32	s19, s1
 8002d88:	4640      	mov	r0, r8
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	eeb0 ca40 	vmov.f32	s24, s0
 8002d90:	eef0 ca60 	vmov.f32	s25, s1
 8002d94:	f7fd fc58 	bl	8000648 <__aeabi_dmul>
 8002d98:	ec53 2b19 	vmov	r2, r3, d9
 8002d9c:	ec41 0b1b 	vmov	d11, r0, r1
 8002da0:	4630      	mov	r0, r6
 8002da2:	4639      	mov	r1, r7
 8002da4:	f7fd fc50 	bl	8000648 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	ec51 0b1b 	vmov	r0, r1, d11
 8002db0:	f7fd fa92 	bl	80002d8 <__aeabi_dsub>
 8002db4:	f7fd ff40 	bl	8000c38 <__aeabi_d2f>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f8ca 3008 	str.w	r3, [sl, #8]
  output.local_velocity_current[1] = target.local_velocity_current[0] * sin(imu.yaw_angle_rad) + target.local_velocity_current[1] * cos(imu.yaw_angle_rad);
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	ec53 2b19 	vmov	r2, r3, d9
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	f7fd fc3f 	bl	8000648 <__aeabi_dmul>
 8002dca:	4632      	mov	r2, r6
 8002dcc:	463b      	mov	r3, r7
 8002dce:	4606      	mov	r6, r0
 8002dd0:	460f      	mov	r7, r1
 8002dd2:	ec51 0b1a 	vmov	r0, r1, d10
 8002dd6:	f7fd fc37 	bl	8000648 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4630      	mov	r0, r6
 8002de0:	4639      	mov	r1, r7
 8002de2:	f7fd fa7b 	bl	80002dc <__adddf3>
 8002de6:	f7fd ff27 	bl	8000c38 <__aeabi_d2f>
 8002dea:	f8ca 000c 	str.w	r0, [sl, #12]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 8002dee:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8002fa8 <speed_control+0x3b0>
 8002df2:	ed9a 7a02 	vldr	s14, [sl, #8]
 8002df6:	edd4 6a00 	vldr	s13, [r4]
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002dfa:	edda 5a03 	vldr	s11, [sl, #12]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002dfe:	ed9b 6a06 	vldr	s12, [fp, #24]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 8002e02:	eee7 6a27 	vfma.f32	s13, s14, s15
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002e06:	ed94 7a01 	vldr	s14, [r4, #4]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 8002e0a:	edc4 6a00 	vstr	s13, [r4]
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002e0e:	eea5 7aa7 	vfma.f32	s14, s11, s15
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002e12:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8002e16:	eddf 7a65 	vldr	s15, [pc, #404]	; 8002fac <speed_control+0x3b4>
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8002e1a:	ed84 7a01 	vstr	s14, [r4, #4]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002e1e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	f300 80a0 	bgt.w	8002f6a <speed_control+0x372>
      target.position[i] = omni.odom[i] + odom_diff_max;
    } else if (target.position[i] - omni.odom[i] < -odom_diff_max) {
 8002e2a:	ed9f 5a61 	vldr	s10, [pc, #388]	; 8002fb0 <speed_control+0x3b8>
 8002e2e:	eef4 5ac5 	vcmpe.f32	s11, s10
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      target.position[i] = omni.odom[i] - odom_diff_max;
    }

    // odom基準の絶対座標系
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002e36:	bf54      	ite	pl
 8002e38:	ee76 7a66 	vsubpl.f32	s15, s12, s13
      target.position[i] = omni.odom[i] - odom_diff_max;
 8002e3c:	ee36 6a67 	vsubmi.f32	s12, s12, s15
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002e40:	ee17 0a90 	vmov	r0, s15
      target.position[i] = omni.odom[i] - odom_diff_max;
 8002e44:	bf48      	it	mi
 8002e46:	ed84 6a00 	vstrmi	s12, [r4]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002e4a:	eddb 7a07 	vldr	s15, [fp, #28]
 8002e4e:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002fac <speed_control+0x3b4>
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002e52:	f8cb 0008 	str.w	r0, [fp, #8]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8002e56:	ee37 6a67 	vsub.f32	s12, s14, s15
 8002e5a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	dd76      	ble.n	8002f52 <speed_control+0x35a>
      target.position[i] = omni.odom[i] + odom_diff_max;
 8002e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e68:	edc4 7a01 	vstr	s15, [r4, #4]
 8002e6c:	4c51      	ldr	r4, [pc, #324]	; (8002fb4 <speed_control+0x3bc>)
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002e6e:	f8cb 400c 	str.w	r4, [fp, #12]
  }

  // グローバル→ローカル座標系
  omni.robot_pos_diff[0] = omni.odom_floor_diff[0] * cos(-imu.yaw_angle_rad) - omni.odom_floor_diff[1] * sin(-imu.yaw_angle_rad);
 8002e72:	f7fd fb91 	bl	8000598 <__aeabi_f2d>
 8002e76:	4606      	mov	r6, r0
 8002e78:	f085 4000 	eor.w	r0, r5, #2147483648	; 0x80000000
 8002e7c:	460f      	mov	r7, r1
 8002e7e:	f7fd fb8b 	bl	8000598 <__aeabi_f2d>
 8002e82:	ec41 0b10 	vmov	d0, r0, r1
 8002e86:	ec41 0b19 	vmov	d9, r0, r1
 8002e8a:	f00a fdb5 	bl	800d9f8 <cos>
 8002e8e:	4620      	mov	r0, r4
 8002e90:	eeb0 aa40 	vmov.f32	s20, s0
 8002e94:	eef0 aa60 	vmov.f32	s21, s1
 8002e98:	f7fd fb7e 	bl	8000598 <__aeabi_f2d>
 8002e9c:	ec53 2b1a 	vmov	r2, r3, d10
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	4639      	mov	r1, r7
 8002ea8:	f7fd fbce 	bl	8000648 <__aeabi_dmul>
 8002eac:	4622      	mov	r2, r4
 8002eae:	462b      	mov	r3, r5
 8002eb0:	4680      	mov	r8, r0
 8002eb2:	4689      	mov	r9, r1
 8002eb4:	ec51 0b1c 	vmov	r0, r1, d12
 8002eb8:	f7fd fbc6 	bl	8000648 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	f7fd fa0a 	bl	80002dc <__adddf3>
 8002ec8:	f7fd feb6 	bl	8000c38 <__aeabi_d2f>
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 8002ecc:	eeb0 0a49 	vmov.f32	s0, s18
 8002ed0:	eef0 0a69 	vmov.f32	s1, s19
  omni.robot_pos_diff[0] = omni.odom_floor_diff[0] * cos(-imu.yaw_angle_rad) - omni.odom_floor_diff[1] * sin(-imu.yaw_angle_rad);
 8002ed4:	f8cb 0010 	str.w	r0, [fp, #16]
 8002ed8:	ee09 0a10 	vmov	s18, r0
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 8002edc:	f00a fde0 	bl	800daa0 <sin>
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	ec53 2b10 	vmov	r2, r3, d0
 8002ee6:	4639      	mov	r1, r7
 8002ee8:	f7fd fbae 	bl	8000648 <__aeabi_dmul>
 8002eec:	4622      	mov	r2, r4
 8002eee:	462b      	mov	r3, r5
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	460d      	mov	r5, r1
 8002ef4:	ec51 0b1a 	vmov	r0, r1, d10
 8002ef8:	f7fd fba6 	bl	8000648 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4620      	mov	r0, r4
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7fd f9ea 	bl	80002dc <__adddf3>
 8002f08:	f7fd fe96 	bl	8000c38 <__aeabi_d2f>
 8002f0c:	ed9b 7a0f 	vldr	s14, [fp, #60]	; 0x3c
 8002f10:	eddb 6a0e 	vldr	s13, [fp, #56]	; 0x38
 8002f14:	f8cb 0014 	str.w	r0, [fp, #20]

  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 8002f18:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002f1c:	eee7 8a67 	vfms.f32	s17, s14, s15
 8002f20:	eea6 8ae7 	vfms.f32	s16, s13, s15
 8002f24:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002fb8 <speed_control+0x3c0>
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 8002f28:	ee07 0a90 	vmov	s15, r0
  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 8002f2c:	eea9 8a07 	vfma.f32	s16, s18, s14
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[1] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[1] * OMNI_OUTPUT_GAIN_FF;
 8002f30:	eee7 8a87 	vfma.f32	s17, s15, s14
  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 8002f34:	ed8a 8a00 	vstr	s16, [sl]
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[1] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[1] * OMNI_OUTPUT_GAIN_FF;
 8002f38:	edca 8a01 	vstr	s17, [sl, #4]
}
 8002f3c:	ecbd 8b0a 	vpop	{d8-d12}
 8002f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        target.local_velocity_current[i] -= output.accel_limit[i];
 8002f44:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f4c:	ee17 0a90 	vmov	r0, s15
 8002f50:	e6ac      	b.n	8002cac <speed_control+0xb4>
    } else if (target.position[i] - omni.odom[i] < -odom_diff_max) {
 8002f52:	eddf 5a17 	vldr	s11, [pc, #92]	; 8002fb0 <speed_control+0x3b8>
 8002f56:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5e:	d460      	bmi.n	8003022 <speed_control+0x42a>
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8002f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f64:	ee17 4a90 	vmov	r4, s15
 8002f68:	e781      	b.n	8002e6e <speed_control+0x276>
      target.position[i] = omni.odom[i] + odom_diff_max;
 8002f6a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002f6e:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <speed_control+0x3bc>)
 8002f70:	ed84 6a00 	vstr	s12, [r4]
 8002f74:	e769      	b.n	8002e4a <speed_control+0x252>
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8002f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f7a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	f53f ae91 	bmi.w	8002ca8 <speed_control+0xb0>
        target.local_velocity_current[i] += output.accel_limit[i];
 8002f86:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002f8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f8e:	ee17 0a90 	vmov	r0, s15
 8002f92:	e68b      	b.n	8002cac <speed_control+0xb4>
 8002f94:	20001310 	.word	0x20001310
 8002f98:	3c449ba6 	.word	0x3c449ba6
 8002f9c:	3bc49ba6 	.word	0x3bc49ba6
 8002fa0:	20000fb4 	.word	0x20000fb4
 8002fa4:	20000fc0 	.word	0x20000fc0
 8002fa8:	3b03126f 	.word	0x3b03126f
 8002fac:	3d888889 	.word	0x3d888889
 8002fb0:	bd888889 	.word	0xbd888889
 8002fb4:	bd888889 	.word	0xbd888889
 8002fb8:	c3160000 	.word	0xc3160000
 8002fbc:	200010d0 	.word	0x200010d0
 8002fc0:	20001090 	.word	0x20001090
      if (target.local_velocity_current[i] - output.accel_limit[i] < target.local_velocity[i]) {
 8002fc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002fc8:	eef4 8ac7 	vcmpe.f32	s17, s14
 8002fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd0:	dc06      	bgt.n	8002fe0 <speed_control+0x3e8>
        target.local_velocity_current[i] -= output.accel_limit[i];
 8002fd2:	ed9a 7a06 	vldr	s14, [sl, #24]
 8002fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fda:	ee17 6a90 	vmov	r6, s15
 8002fde:	e6ac      	b.n	8002d3a <speed_control+0x142>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8002fe0:	ee18 6a90 	vmov	r6, s17
 8002fe4:	e6a9      	b.n	8002d3a <speed_control+0x142>
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8002fe6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	f57f ae4b 	bpl.w	8002c88 <speed_control+0x90>
      output.accel_limit[i] *= 5;
 8002ff2:	ed9a 7a05 	vldr	s14, [sl, #20]
 8002ff6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002ffa:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ffe:	ed8a 7a05 	vstr	s14, [sl, #20]
 8003002:	e641      	b.n	8002c88 <speed_control+0x90>
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8003004:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	f57f ae7f 	bpl.w	8002d0e <speed_control+0x116>
      output.accel_limit[i] *= 5;
 8003010:	ed9a 7a06 	vldr	s14, [sl, #24]
 8003014:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003018:	ee27 7a26 	vmul.f32	s14, s14, s13
 800301c:	ed8a 7a06 	vstr	s14, [sl, #24]
 8003020:	e675      	b.n	8002d0e <speed_control+0x116>
      target.position[i] = omni.odom[i] - odom_diff_max;
 8003022:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003026:	edc4 7a01 	vstr	s15, [r4, #4]
 800302a:	ee16 4a90 	vmov	r4, s13
 800302e:	e71e      	b.n	8002e6e <speed_control+0x276>

08003030 <output_limit>:

void output_limit()
{
  if (debug.acc_step_down_flag) {
 8003030:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <output_limit+0xf4>)
 8003032:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
 8003036:	b38b      	cbz	r3, 800309c <output_limit+0x6c>
    debug.limited_output = 0;  //スリップしてたら移動出力を0にする(仮)
 8003038:	2300      	movs	r3, #0
 800303a:	6293      	str	r3, [r2, #40]	; 0x28
  } else {
    debug.limited_output = OUTPUT_XY_LIMIT;
  }

  float limit_gain = 0;
  if (output.velocity[0] > debug.limited_output) {
 800303c:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <output_limit+0xf8>)
 800303e:	ed93 7a00 	vldr	s14, [r3]
 8003042:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8003046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	dd48      	ble.n	80030e2 <output_limit+0xb2>
    limit_gain = output.velocity[0] / debug.limited_output;
 8003050:	edd3 6a00 	vldr	s13, [r3]
 8003054:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
    output.velocity[0] = debug.limited_output;
 8003058:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800305a:	6019      	str	r1, [r3, #0]
    output.velocity[1] /= limit_gain;
 800305c:	ed93 6a01 	vldr	s12, [r3, #4]
 8003060:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003068:	edc3 7a01 	vstr	s15, [r3, #4]
    limit_gain = -output.velocity[0] / debug.limited_output;
    output.velocity[0] = -debug.limited_output;
    output.velocity[1] /= limit_gain;
  }

  if (output.velocity[1] > debug.limited_output) {
 800306c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003070:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8003074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	dd11      	ble.n	80030a2 <output_limit+0x72>
    limit_gain = output.velocity[1] / debug.limited_output;
 800307e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003082:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
    output.velocity[1] = debug.limited_output;
 8003086:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003088:	605a      	str	r2, [r3, #4]
    output.velocity[0] /= limit_gain;
 800308a:	ed93 6a00 	vldr	s12, [r3]
 800308e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003096:	edc3 7a00 	vstr	s15, [r3]
 800309a:	4770      	bx	lr
    debug.limited_output = OUTPUT_XY_LIMIT;
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <output_limit+0xfc>)
 800309e:	6293      	str	r3, [r2, #40]	; 0x28
 80030a0:	e7cc      	b.n	800303c <output_limit+0xc>
  } else if (output.velocity[1] < -debug.limited_output) {
 80030a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030a6:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80030aa:	eef1 7a67 	vneg.f32	s15, s15
 80030ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	d513      	bpl.n	80030e0 <output_limit+0xb0>
    limit_gain = -output.velocity[1] / debug.limited_output;
 80030b8:	ed93 6a01 	vldr	s12, [r3, #4]
 80030bc:	edd2 6a0a 	vldr	s13, [r2, #40]	; 0x28
    output.velocity[1] = -debug.limited_output;
 80030c0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80030c4:	eef1 7a67 	vneg.f32	s15, s15
 80030c8:	edc3 7a01 	vstr	s15, [r3, #4]
    output.velocity[0] /= limit_gain;
 80030cc:	ed93 7a00 	vldr	s14, [r3]
 80030d0:	eeb1 7a47 	vneg.f32	s14, s14
 80030d4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80030d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030dc:	edc3 7a00 	vstr	s15, [r3]
  }
}
 80030e0:	4770      	bx	lr
  } else if (output.velocity[0] < -debug.limited_output) {
 80030e2:	ed93 7a00 	vldr	s14, [r3]
 80030e6:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80030ea:	eef1 7a67 	vneg.f32	s15, s15
 80030ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	d5b9      	bpl.n	800306c <output_limit+0x3c>
    limit_gain = -output.velocity[0] / debug.limited_output;
 80030f8:	ed93 6a00 	vldr	s12, [r3]
 80030fc:	edd2 6a0a 	vldr	s13, [r2, #40]	; 0x28
    output.velocity[0] = -debug.limited_output;
 8003100:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8003104:	eef1 7a67 	vneg.f32	s15, s15
 8003108:	edc3 7a00 	vstr	s15, [r3]
    output.velocity[1] /= limit_gain;
 800310c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003110:	eeb1 7a47 	vneg.f32	s14, s14
 8003114:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8003118:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800311c:	edc3 7a01 	vstr	s15, [r3, #4]
 8003120:	e7a4      	b.n	800306c <output_limit+0x3c>
 8003122:	bf00      	nop
 8003124:	20000f84 	.word	0x20000f84
 8003128:	200010d0 	.word	0x200010d0
 800312c:	41200000 	.word	0x41200000

08003130 <send_accutuator_cmd_run>:

  send_accutuator_cmd_run();
}

void send_accutuator_cmd_run()
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ai_cmd.kick_power > 0) {
 8003132:	4c43      	ldr	r4, [pc, #268]	; (8003240 <send_accutuator_cmd_run+0x110>)
 8003134:	edd4 7a03 	vldr	s15, [r4, #12]
 8003138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8003140:	b083      	sub	sp, #12
  if (ai_cmd.kick_power > 0) {
 8003142:	dd08      	ble.n	8003156 <send_accutuator_cmd_run+0x26>
    if (kick_state == 0) {
 8003144:	4d3f      	ldr	r5, [pc, #252]	; (8003244 <send_accutuator_cmd_run+0x114>)
 8003146:	882b      	ldrh	r3, [r5, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	b98b      	cbnz	r3, 8003170 <send_accutuator_cmd_run+0x40>
      if (can_raw.ball_detection[0] == 1) {
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <send_accutuator_cmd_run+0x118>)
 800314e:	f893 707c 	ldrb.w	r7, [r3, #124]	; 0x7c
 8003152:	2f01      	cmp	r7, #1
 8003154:	d046      	beq.n	80031e4 <send_accutuator_cmd_run+0xb4>
    }
  }

  static uint8_t can_sending_index = 0;

  can_sending_index++;
 8003156:	4a3d      	ldr	r2, [pc, #244]	; (800324c <send_accutuator_cmd_run+0x11c>)
 8003158:	7813      	ldrb	r3, [r2, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	b2db      	uxtb	r3, r3
  switch (can_sending_index) {
 800315e:	1e59      	subs	r1, r3, #1
  can_sending_index++;
 8003160:	7013      	strb	r3, [r2, #0]
  switch (can_sending_index) {
 8003162:	2904      	cmp	r1, #4
 8003164:	d862      	bhi.n	800322c <send_accutuator_cmd_run+0xfc>
 8003166:	e8df f001 	tbb	[pc, r1]
 800316a:	1e15      	.short	0x1e15
 800316c:	3029      	.short	0x3029
 800316e:	0c          	.byte	0x0c
 800316f:	00          	.byte	0x00
      if (kick_state > MAIN_LOOP_CYCLE / 2) {
 8003170:	882b      	ldrh	r3, [r5, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	2bfa      	cmp	r3, #250	; 0xfa
 8003176:	d82f      	bhi.n	80031d8 <send_accutuator_cmd_run+0xa8>
        kick_state++;
 8003178:	882b      	ldrh	r3, [r5, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	802b      	strh	r3, [r5, #0]
 8003180:	e7e9      	b.n	8003156 <send_accutuator_cmd_run+0x26>
    case 4:
      actuator_kicker_voltage(400.0);
      break;

    case 5:
      actuator_motor5(ai_cmd.drible_power, 1.0);
 8003182:	ed94 0a02 	vldr	s0, [r4, #8]
 8003186:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0

    default:
      can_sending_index = 0;
      break;
  }
}
 800318a:	b003      	add	sp, #12
 800318c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      actuator_motor5(ai_cmd.drible_power, 1.0);
 8003190:	f7fd bfa0 	b.w	80010d4 <actuator_motor5>
      if (ai_cmd.chip_en == true) {
 8003194:	7c21      	ldrb	r1, [r4, #16]
 8003196:	b101      	cbz	r1, 800319a <send_accutuator_cmd_run+0x6a>
        actuator_kicker(2, 1);
 8003198:	2101      	movs	r1, #1
        actuator_kicker(2, 0);
 800319a:	2002      	movs	r0, #2
}
 800319c:	b003      	add	sp, #12
 800319e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      actuator_kicker(1, 1);
 80031a2:	f7fd bfeb 	b.w	800117c <actuator_kicker>
      if (ai_cmd.chip_en == true || ai_cmd.dribbler_up_flag) {
 80031a6:	7c23      	ldrb	r3, [r4, #16]
 80031a8:	b91b      	cbnz	r3, 80031b2 <send_accutuator_cmd_run+0x82>
 80031aa:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d037      	beq.n	8003222 <send_accutuator_cmd_run+0xf2>
}
 80031b2:	b003      	add	sp, #12
 80031b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        actuator_dribbler_up();
 80031b8:	f7fd bfac 	b.w	8001114 <actuator_dribbler_up>
      actuator_kicker(1, 1);
 80031bc:	2101      	movs	r1, #1
 80031be:	4608      	mov	r0, r1
}
 80031c0:	b003      	add	sp, #12
 80031c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      actuator_kicker(1, 1);
 80031c6:	f7fd bfd9 	b.w	800117c <actuator_kicker>
      actuator_kicker_voltage(400.0);
 80031ca:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003250 <send_accutuator_cmd_run+0x120>
}
 80031ce:	b003      	add	sp, #12
 80031d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      actuator_kicker_voltage(400.0);
 80031d4:	f7fd bfc2 	b.w	800115c <actuator_kicker_voltage>
        if (can_raw.ball_detection[0] == 0) {
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <send_accutuator_cmd_run+0x118>)
 80031da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1b9      	bne.n	8003156 <send_accutuator_cmd_run+0x26>
 80031e2:	e7cc      	b.n	800317e <send_accutuator_cmd_run+0x4e>
        uint8_t kick_power_param = (float)ai_cmd.kick_power * 255.0;
 80031e4:	ee17 0a90 	vmov	r0, s15
 80031e8:	f7fd f9d6 	bl	8000598 <__aeabi_f2d>
 80031ec:	a312      	add	r3, pc, #72	; (adr r3, 8003238 <send_accutuator_cmd_run+0x108>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd fa29 	bl	8000648 <__aeabi_dmul>
 80031f6:	f7fd fcff 	bl	8000bf8 <__aeabi_d2uiz>
 80031fa:	b2c1      	uxtb	r1, r0
        printf(" kick=%d\r\n", kick_power_param);
 80031fc:	4815      	ldr	r0, [pc, #84]	; (8003254 <send_accutuator_cmd_run+0x124>)
 80031fe:	9101      	str	r1, [sp, #4]
 8003200:	f008 fa00 	bl	800b604 <iprintf>
        actuator_kicker(3, (uint8_t)kick_power_param);
 8003204:	9901      	ldr	r1, [sp, #4]
 8003206:	2003      	movs	r0, #3
 8003208:	f7fd ffb8 	bl	800117c <actuator_kicker>
    target.position[i] = omni.odom[i];
 800320c:	4a12      	ldr	r2, [pc, #72]	; (8003258 <send_accutuator_cmd_run+0x128>)
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <send_accutuator_cmd_run+0x12c>)
 8003210:	6991      	ldr	r1, [r2, #24]
 8003212:	69d2      	ldr	r2, [r2, #28]
        kick_state = 1;
 8003214:	802f      	strh	r7, [r5, #0]
 8003216:	2600      	movs	r6, #0
    ai_cmd.local_target_speed[i] = 0;
 8003218:	6166      	str	r6, [r4, #20]
    target.position[i] = omni.odom[i];
 800321a:	6019      	str	r1, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
    ai_cmd.local_target_speed[i] = 0;
 800321e:	61a6      	str	r6, [r4, #24]
        kick_state = 1;
 8003220:	e799      	b.n	8003156 <send_accutuator_cmd_run+0x26>
}
 8003222:	b003      	add	sp, #12
 8003224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        actuator_dribbler_down();
 8003228:	f7fd bf86 	b.w	8001138 <actuator_dribbler_down>
      can_sending_index = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	7013      	strb	r3, [r2, #0]
}
 8003230:	b003      	add	sp, #12
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003234:	f3af 8000 	nop.w
 8003238:	00000000 	.word	0x00000000
 800323c:	406fe000 	.word	0x406fe000
 8003240:	20000e48 	.word	0x20000e48
 8003244:	20001014 	.word	0x20001014
 8003248:	20000ea8 	.word	0x20000ea8
 800324c:	20000f28 	.word	0x20000f28
 8003250:	43c80000 	.word	0x43c80000
 8003254:	0800ed48 	.word	0x0800ed48
 8003258:	20001090 	.word	0x20001090
 800325c:	20001310 	.word	0x20001310

08003260 <maintask_run>:
{
 8003260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (ai_cmd.local_vision_en_flag == false /* && ai_cmd.stop_request_flag == false*/) {
 8003264:	4cd2      	ldr	r4, [pc, #840]	; (80035b0 <maintask_run+0x350>)
{
 8003266:	ed2d 8b08 	vpush	{d8-d11}
  if (ai_cmd.local_vision_en_flag == false /* && ai_cmd.stop_request_flag == false*/) {
 800326a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
{
 800326e:	b085      	sub	sp, #20
  if (ai_cmd.local_vision_en_flag == false /* && ai_cmd.stop_request_flag == false*/) {
 8003270:	2b00      	cmp	r3, #0
 8003272:	d072      	beq.n	800335a <maintask_run+0xfa>
    target.position[i] = omni.odom[i];
 8003274:	4dcf      	ldr	r5, [pc, #828]	; (80035b4 <maintask_run+0x354>)
 8003276:	4ad0      	ldr	r2, [pc, #832]	; (80035b8 <maintask_run+0x358>)
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 8003278:	f8df a360 	ldr.w	sl, [pc, #864]	; 80035dc <maintask_run+0x37c>
    target.position[i] = omni.odom[i];
 800327c:	6991      	ldr	r1, [r2, #24]
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 800327e:	ed9a 8a02 	vldr	s16, [sl, #8]
    target.position[i] = omni.odom[i];
 8003282:	69d2      	ldr	r2, [r2, #28]
 8003284:	6029      	str	r1, [r5, #0]
    ai_cmd.local_target_speed[i] = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	6163      	str	r3, [r4, #20]
 800328a:	61a3      	str	r3, [r4, #24]
    target.velocity[0] = 0;
 800328c:	612b      	str	r3, [r5, #16]
    target.velocity[1] = 0;
 800328e:	616b      	str	r3, [r5, #20]
 8003290:	4bca      	ldr	r3, [pc, #808]	; (80035bc <maintask_run+0x35c>)
    target.position[i] = omni.odom[i];
 8003292:	606a      	str	r2, [r5, #4]
    target.velocity[1] = 0;
 8003294:	9301      	str	r3, [sp, #4]
  speed_control();
 8003296:	f7ff fcaf 	bl	8002bf8 <speed_control>
  output_limit();
 800329a:	f7ff fec9 	bl	8003030 <output_limit>
  output.omega = (getAngleDiff(ai_cmd.target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 800329e:	eef0 0a48 	vmov.f32	s1, s16
 80032a2:	ed94 0a00 	vldr	s0, [r4]
 80032a6:	f002 fc23 	bl	8005af0 <getAngleDiff>
 80032aa:	edda 0a03 	vldr	s1, [sl, #12]
 80032ae:	ee10 6a10 	vmov	r6, s0
 80032b2:	ed9a 0a02 	vldr	s0, [sl, #8]
 80032b6:	f002 fc1b 	bl	8005af0 <getAngleDiff>
 80032ba:	4630      	mov	r0, r6
 80032bc:	ee10 7a10 	vmov	r7, s0
 80032c0:	f7fd f96a 	bl	8000598 <__aeabi_f2d>
 80032c4:	4bbe      	ldr	r3, [pc, #760]	; (80035c0 <maintask_run+0x360>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	f7fd f9be 	bl	8000648 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4638      	mov	r0, r7
 80032d0:	4616      	mov	r6, r2
 80032d2:	460f      	mov	r7, r1
 80032d4:	f7fd f960 	bl	8000598 <__aeabi_f2d>
 80032d8:	4bba      	ldr	r3, [pc, #744]	; (80035c4 <maintask_run+0x364>)
 80032da:	2200      	movs	r2, #0
 80032dc:	f7fd f9b4 	bl	8000648 <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4630      	mov	r0, r6
 80032e6:	4639      	mov	r1, r7
 80032e8:	f7fc fff6 	bl	80002d8 <__aeabi_dsub>
 80032ec:	f7fd fca4 	bl	8000c38 <__aeabi_d2f>
 80032f0:	4bb5      	ldr	r3, [pc, #724]	; (80035c8 <maintask_run+0x368>)
  if (sys.main_mode != 2 && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 80032f2:	9a01      	ldr	r2, [sp, #4]
  output.omega = (getAngleDiff(ai_cmd.target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 80032f4:	6118      	str	r0, [r3, #16]
  if (output.omega > OMEGA_LIMIT) {
 80032f6:	ed93 7a04 	vldr	s14, [r3, #16]
  if (sys.main_mode != 2 && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 80032fa:	7b12      	ldrb	r2, [r2, #12]
  if (output.omega > OMEGA_LIMIT) {
 80032fc:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = OMEGA_LIMIT;
 8003308:	bfc8      	it	gt
 800330a:	edc3 7a04 	vstrgt	s15, [r3, #16]
  if (output.omega < -OMEGA_LIMIT) {
 800330e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003312:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8003316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = -OMEGA_LIMIT;
 800331e:	bf48      	it	mi
 8003320:	edc3 7a04 	vstrmi	s15, [r3, #16]
  if (sys.main_mode != 2 && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 8003324:	2a02      	cmp	r2, #2
 8003326:	d007      	beq.n	8003338 <maintask_run+0xd8>
 8003328:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800332a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800332e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003332:	2a00      	cmp	r2, #0
 8003334:	f040 80f0 	bne.w	8003518 <maintask_run+0x2b8>
    omni_move(output.velocity[0], output.velocity[1], output.omega, OMNI_OUTPUT_LIMIT);
 8003338:	ed93 0a00 	vldr	s0, [r3]
 800333c:	edd3 0a01 	vldr	s1, [r3, #4]
 8003340:	ed93 1a04 	vldr	s2, [r3, #16]
 8003344:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8003348:	f001 fec6 	bl	80050d8 <omni_move>
}
 800334c:	b005      	add	sp, #20
 800334e:	ecbd 8b08 	vpop	{d8-d11}
 8003352:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  send_accutuator_cmd_run();
 8003356:	f7ff beeb 	b.w	8003130 <send_accutuator_cmd_run>
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 800335a:	f8df b284 	ldr.w	fp, [pc, #644]	; 80035e0 <maintask_run+0x380>
 800335e:	f8df a27c 	ldr.w	sl, [pc, #636]	; 80035dc <maintask_run+0x37c>
 8003362:	f8db 0018 	ldr.w	r0, [fp, #24]
 8003366:	f7fd f917 	bl	8000598 <__aeabi_f2d>
 800336a:	ed9a 8a02 	vldr	s16, [sl, #8]
      if (sys.main_mode == 0) {
 800336e:	4b93      	ldr	r3, [pc, #588]	; (80035bc <maintask_run+0x35c>)
 8003370:	9301      	str	r3, [sp, #4]
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 8003372:	eef1 7a48 	vneg.f32	s15, s16
 8003376:	4680      	mov	r8, r0
 8003378:	ee17 0a90 	vmov	r0, s15
 800337c:	4689      	mov	r9, r1
 800337e:	f7fd f90b 	bl	8000598 <__aeabi_f2d>
 8003382:	ec41 0b10 	vmov	d0, r0, r1
 8003386:	ec41 0b19 	vmov	d9, r0, r1
 800338a:	f00a fb35 	bl	800d9f8 <cos>
 800338e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003392:	eeb0 aa40 	vmov.f32	s20, s0
 8003396:	eef0 aa60 	vmov.f32	s21, s1
 800339a:	f7fd f8fd 	bl	8000598 <__aeabi_f2d>
 800339e:	4606      	mov	r6, r0
 80033a0:	ee18 0a10 	vmov	r0, s16
 80033a4:	460f      	mov	r7, r1
 80033a6:	f7fd f8f7 	bl	8000598 <__aeabi_f2d>
 80033aa:	ec41 0b10 	vmov	d0, r0, r1
 80033ae:	f00a fb77 	bl	800daa0 <sin>
 80033b2:	ec53 2b1a 	vmov	r2, r3, d10
 80033b6:	4640      	mov	r0, r8
 80033b8:	4649      	mov	r1, r9
 80033ba:	ed8d 0b02 	vstr	d0, [sp, #8]
 80033be:	f7fd f943 	bl	8000648 <__aeabi_dmul>
 80033c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033c6:	ec41 0b1b 	vmov	d11, r0, r1
 80033ca:	4630      	mov	r0, r6
 80033cc:	4639      	mov	r1, r7
 80033ce:	f7fd f93b 	bl	8000648 <__aeabi_dmul>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	ec51 0b1b 	vmov	r0, r1, d11
 80033da:	f7fc ff7f 	bl	80002dc <__adddf3>
 80033de:	f7fd fc2b 	bl	8000c38 <__aeabi_d2f>
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 80033e2:	eeb0 0a49 	vmov.f32	s0, s18
 80033e6:	eef0 0a69 	vmov.f32	s1, s19
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 80033ea:	4605      	mov	r5, r0
 80033ec:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 80033f0:	f00a fb56 	bl	800daa0 <sin>
 80033f4:	4640      	mov	r0, r8
 80033f6:	ec53 2b10 	vmov	r2, r3, d0
 80033fa:	4649      	mov	r1, r9
 80033fc:	f7fd f924 	bl	8000648 <__aeabi_dmul>
 8003400:	4632      	mov	r2, r6
 8003402:	463b      	mov	r3, r7
 8003404:	4606      	mov	r6, r0
 8003406:	460f      	mov	r7, r1
 8003408:	ec51 0b1a 	vmov	r0, r1, d10
 800340c:	f7fd f91c 	bl	8000648 <__aeabi_dmul>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4630      	mov	r0, r6
 8003416:	4639      	mov	r1, r7
 8003418:	f7fc ff60 	bl	80002dc <__adddf3>
 800341c:	f7fd fc0c 	bl	8000c38 <__aeabi_d2f>
 8003420:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8003424:	4606      	mov	r6, r0
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 8003426:	4628      	mov	r0, r5
 8003428:	f7fd f8b6 	bl	8000598 <__aeabi_f2d>
      if (sys.main_mode == 0) {
 800342c:	4b63      	ldr	r3, [pc, #396]	; (80035bc <maintask_run+0x35c>)
 800342e:	7b1f      	ldrb	r7, [r3, #12]
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 8003430:	a357      	add	r3, pc, #348	; (adr r3, 8003590 <maintask_run+0x330>)
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	4680      	mov	r8, r0
 8003438:	4689      	mov	r9, r1
 800343a:	f7fd fb77 	bl	8000b2c <__aeabi_dcmplt>
 800343e:	2800      	cmp	r0, #0
 8003440:	f040 8084 	bne.w	800354c <maintask_run+0x2ec>
      if (integ.local_target_diff[i] < -0.3) {
 8003444:	a354      	add	r3, pc, #336	; (adr r3, 8003598 <maintask_run+0x338>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	4640      	mov	r0, r8
 800344c:	4649      	mov	r1, r9
 800344e:	f7fd fb6d 	bl	8000b2c <__aeabi_dcmplt>
 8003452:	2800      	cmp	r0, #0
 8003454:	f000 808c 	beq.w	8003570 <maintask_run+0x310>
        integ.local_target_diff[i] = -0.3;
 8003458:	4d5c      	ldr	r5, [pc, #368]	; (80035cc <maintask_run+0x36c>)
 800345a:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 800345e:	6960      	ldr	r0, [r4, #20]
      if (sys.main_mode == 0) {
 8003460:	b9cf      	cbnz	r7, 8003496 <maintask_run+0x236>
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 8003462:	f7fd f899 	bl	8000598 <__aeabi_f2d>
 8003466:	ee07 5a10 	vmov	s14, r5
 800346a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	4680      	mov	r8, r0
 8003474:	ee17 0a90 	vmov	r0, s15
 8003478:	4689      	mov	r9, r1
 800347a:	f7fd f88d 	bl	8000598 <__aeabi_f2d>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4640      	mov	r0, r8
 8003484:	4649      	mov	r1, r9
 8003486:	f7fc ff29 	bl	80002dc <__adddf3>
 800348a:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <maintask_run+0x370>)
 800348c:	2200      	movs	r2, #0
 800348e:	f7fd f8db 	bl	8000648 <__aeabi_dmul>
 8003492:	f7fd fbd1 	bl	8000c38 <__aeabi_d2f>
 8003496:	4d47      	ldr	r5, [pc, #284]	; (80035b4 <maintask_run+0x354>)
 8003498:	6128      	str	r0, [r5, #16]
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 800349a:	4630      	mov	r0, r6
 800349c:	f7fd f87c 	bl	8000598 <__aeabi_f2d>
 80034a0:	a33b      	add	r3, pc, #236	; (adr r3, 8003590 <maintask_run+0x330>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	4680      	mov	r8, r0
 80034a8:	4689      	mov	r9, r1
 80034aa:	f7fd fb3f 	bl	8000b2c <__aeabi_dcmplt>
 80034ae:	b140      	cbz	r0, 80034c2 <maintask_run+0x262>
 80034b0:	a33b      	add	r3, pc, #236	; (adr r3, 80035a0 <maintask_run+0x340>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	4640      	mov	r0, r8
 80034b8:	4649      	mov	r1, r9
 80034ba:	f7fd fb55 	bl	8000b68 <__aeabi_dcmpgt>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d152      	bne.n	8003568 <maintask_run+0x308>
      if (integ.local_target_diff[i] < -0.3) {
 80034c2:	a335      	add	r3, pc, #212	; (adr r3, 8003598 <maintask_run+0x338>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	4640      	mov	r0, r8
 80034ca:	4649      	mov	r1, r9
 80034cc:	f7fd fb2e 	bl	8000b2c <__aeabi_dcmplt>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	f000 8087 	beq.w	80035e4 <maintask_run+0x384>
        integ.local_target_diff[i] = -0.3;
 80034d6:	4e3d      	ldr	r6, [pc, #244]	; (80035cc <maintask_run+0x36c>)
 80034d8:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 80034dc:	69a0      	ldr	r0, [r4, #24]
      if (sys.main_mode == 0) {
 80034de:	b9cf      	cbnz	r7, 8003514 <maintask_run+0x2b4>
        target.velocity[i] = ai_cmd.local_target_speed[i] * 0.5 + (integ.local_target_diff[i] * 10) * 0.5;  //ローカル統合制御あり
 80034e0:	f7fd f85a 	bl	8000598 <__aeabi_f2d>
 80034e4:	ee07 6a10 	vmov	s14, r6
 80034e8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80034ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f0:	4680      	mov	r8, r0
 80034f2:	ee17 0a90 	vmov	r0, s15
 80034f6:	4689      	mov	r9, r1
 80034f8:	f7fd f84e 	bl	8000598 <__aeabi_f2d>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4640      	mov	r0, r8
 8003502:	4649      	mov	r1, r9
 8003504:	f7fc feea 	bl	80002dc <__adddf3>
 8003508:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <maintask_run+0x370>)
 800350a:	2200      	movs	r2, #0
 800350c:	f7fd f89c 	bl	8000648 <__aeabi_dmul>
 8003510:	f7fd fb92 	bl	8000c38 <__aeabi_d2f>
 8003514:	6168      	str	r0, [r5, #20]
    for (int i = 0; i < 2; i++) {
 8003516:	e6be      	b.n	8003296 <maintask_run+0x36>
    target.position[i] = omni.odom[i];
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <maintask_run+0x358>)
    ai_cmd.local_target_speed[i] = 0;
 800351a:	eddf 1a2e 	vldr	s3, [pc, #184]	; 80035d4 <maintask_run+0x374>
    target.position[i] = omni.odom[i];
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	602a      	str	r2, [r5, #0]
    omni_move(0.0, 0.0, 0.0, 0.0);
 8003524:	eeb0 1a61 	vmov.f32	s2, s3
 8003528:	eef0 0a61 	vmov.f32	s1, s3
 800352c:	eeb0 0a61 	vmov.f32	s0, s3
    target.position[i] = omni.odom[i];
 8003530:	606b      	str	r3, [r5, #4]
    ai_cmd.local_target_speed[i] = 0;
 8003532:	edc4 1a05 	vstr	s3, [r4, #20]
 8003536:	edc4 1a06 	vstr	s3, [r4, #24]
    omni_move(0.0, 0.0, 0.0, 0.0);
 800353a:	f001 fdcd 	bl	80050d8 <omni_move>
}
 800353e:	b005      	add	sp, #20
 8003540:	ecbd 8b08 	vpop	{d8-d11}
 8003544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  send_accutuator_cmd_run();
 8003548:	f7ff bdf2 	b.w	8003130 <send_accutuator_cmd_run>
      if (integ.local_target_diff[i] < 0.03 && integ.local_target_diff[i] > -0.03) {
 800354c:	a314      	add	r3, pc, #80	; (adr r3, 80035a0 <maintask_run+0x340>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	4640      	mov	r0, r8
 8003554:	4649      	mov	r1, r9
 8003556:	f7fd fb07 	bl	8000b68 <__aeabi_dcmpgt>
 800355a:	2800      	cmp	r0, #0
 800355c:	f43f af72 	beq.w	8003444 <maintask_run+0x1e4>
        integ.local_target_diff[i] = 0;
 8003560:	2500      	movs	r5, #0
 8003562:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
      if (integ.local_target_diff[i] < -0.3) {
 8003566:	e77a      	b.n	800345e <maintask_run+0x1fe>
        integ.local_target_diff[i] = 0;
 8003568:	2600      	movs	r6, #0
 800356a:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
      if (integ.local_target_diff[i] < -0.3) {
 800356e:	e7b5      	b.n	80034dc <maintask_run+0x27c>
      } else if (integ.local_target_diff[i] > 0.3) {
 8003570:	a30d      	add	r3, pc, #52	; (adr r3, 80035a8 <maintask_run+0x348>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fd faf5 	bl	8000b68 <__aeabi_dcmpgt>
 800357e:	2800      	cmp	r0, #0
 8003580:	f43f af6d 	beq.w	800345e <maintask_run+0x1fe>
        integ.local_target_diff[i] = 0.3;
 8003584:	4d14      	ldr	r5, [pc, #80]	; (80035d8 <maintask_run+0x378>)
 8003586:	f8cb 5038 	str.w	r5, [fp, #56]	; 0x38
 800358a:	e768      	b.n	800345e <maintask_run+0x1fe>
 800358c:	f3af 8000 	nop.w
 8003590:	eb851eb8 	.word	0xeb851eb8
 8003594:	3f9eb851 	.word	0x3f9eb851
 8003598:	33333333 	.word	0x33333333
 800359c:	bfd33333 	.word	0xbfd33333
 80035a0:	eb851eb8 	.word	0xeb851eb8
 80035a4:	bf9eb851 	.word	0xbf9eb851
 80035a8:	33333333 	.word	0x33333333
 80035ac:	3fd33333 	.word	0x3fd33333
 80035b0:	20000e48 	.word	0x20000e48
 80035b4:	20001310 	.word	0x20001310
 80035b8:	20001090 	.word	0x20001090
 80035bc:	200012f8 	.word	0x200012f8
 80035c0:	40640000 	.word	0x40640000
 80035c4:	40af4000 	.word	0x40af4000
 80035c8:	200010d0 	.word	0x200010d0
 80035cc:	be99999a 	.word	0xbe99999a
 80035d0:	3fe00000 	.word	0x3fe00000
 80035d4:	00000000 	.word	0x00000000
 80035d8:	3e99999a 	.word	0x3e99999a
 80035dc:	20000fc0 	.word	0x20000fc0
 80035e0:	20000fd4 	.word	0x20000fd4
      } else if (integ.local_target_diff[i] > 0.3) {
 80035e4:	a307      	add	r3, pc, #28	; (adr r3, 8003604 <maintask_run+0x3a4>)
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	4640      	mov	r0, r8
 80035ec:	4649      	mov	r1, r9
 80035ee:	f7fd fabb 	bl	8000b68 <__aeabi_dcmpgt>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	f43f af72 	beq.w	80034dc <maintask_run+0x27c>
        integ.local_target_diff[i] = 0.3;
 80035f8:	4e01      	ldr	r6, [pc, #4]	; (8003600 <maintask_run+0x3a0>)
 80035fa:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
 80035fe:	e76d      	b.n	80034dc <maintask_run+0x27c>
 8003600:	3e99999a 	.word	0x3e99999a
 8003604:	33333333 	.word	0x33333333
 8003608:	3fd33333 	.word	0x3fd33333

0800360c <HAL_TIM_PeriodElapsedCallback>:
{
 800360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  mouse.integral_loop_cnt++;
 8003610:	49a4      	ldr	r1, [pc, #656]	; (80038a4 <HAL_TIM_PeriodElapsedCallback+0x298>)
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003612:	4da5      	ldr	r5, [pc, #660]	; (80038a8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
  mouse.integral_loop_cnt++;
 8003614:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003616:	692a      	ldr	r2, [r5, #16]
  pre_sw_mode = sw_mode;
 8003618:	4ea4      	ldr	r6, [pc, #656]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800361a:	4fa5      	ldr	r7, [pc, #660]	; (80038b0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800361c:	48a5      	ldr	r0, [pc, #660]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
  mouse.integral_loop_cnt++;
 800361e:	3301      	adds	r3, #1
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003620:	3202      	adds	r2, #2
{
 8003622:	b082      	sub	sp, #8
  mouse.integral_loop_cnt++;
 8003624:	630b      	str	r3, [r1, #48]	; 0x30
  pre_sw_mode = sw_mode;
 8003626:	7833      	ldrb	r3, [r6, #0]
 8003628:	703b      	strb	r3, [r7, #0]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800362a:	2120      	movs	r1, #32
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 800362c:	612a      	str	r2, [r5, #16]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800362e:	f004 f8b9 	bl	80077a4 <HAL_GPIO_ReadPin>
 8003632:	2140      	movs	r1, #64	; 0x40
 8003634:	4604      	mov	r4, r0
 8003636:	489f      	ldr	r0, [pc, #636]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003638:	f004 f8b4 	bl	80077a4 <HAL_GPIO_ReadPin>
 800363c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003640:	4680      	mov	r8, r0
 8003642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003646:	f004 f8ad 	bl	80077a4 <HAL_GPIO_ReadPin>
 800364a:	f1c4 040f 	rsb	r4, r4, #15
 800364e:	eba4 0448 	sub.w	r4, r4, r8, lsl #1
 8003652:	2104      	movs	r1, #4
 8003654:	4680      	mov	r8, r0
 8003656:	4898      	ldr	r0, [pc, #608]	; (80038b8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003658:	f004 f8a4 	bl	80077a4 <HAL_GPIO_ReadPin>
 800365c:	b2e4      	uxtb	r4, r4
 800365e:	eba4 04c8 	sub.w	r4, r4, r8, lsl #3
 8003662:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
  if (sys.error_flag) {
 8003666:	782b      	ldrb	r3, [r5, #0]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003668:	b2c0      	uxtb	r0, r0
  sw_mode = getModeSwitch();
 800366a:	7030      	strb	r0, [r6, #0]
  if (sys.error_flag) {
 800366c:	2b00      	cmp	r3, #0
 800366e:	d05f      	beq.n	8003730 <HAL_TIM_PeriodElapsedCallback+0x124>
    target.position[i] = omni.odom[i];
 8003670:	4892      	ldr	r0, [pc, #584]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003672:	4993      	ldr	r1, [pc, #588]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003674:	6984      	ldr	r4, [r0, #24]
    ai_cmd.local_target_speed[i] = 0;
 8003676:	4b93      	ldr	r3, [pc, #588]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
    target.position[i] = omni.odom[i];
 8003678:	69c0      	ldr	r0, [r0, #28]
 800367a:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 800367c:	2200      	movs	r2, #0
    sys.main_mode = 9;
 800367e:	2409      	movs	r4, #9
 8003680:	732c      	strb	r4, [r5, #12]
    ai_cmd.local_target_speed[i] = 0;
 8003682:	615a      	str	r2, [r3, #20]
    target.position[i] = omni.odom[i];
 8003684:	6048      	str	r0, [r1, #4]
    ai_cmd.local_target_speed[i] = 0;
 8003686:	619a      	str	r2, [r3, #24]
  if (sys.system_time_ms < sys.stop_flag_request_time) {
 8003688:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800368c:	429a      	cmp	r2, r3
 800368e:	d24d      	bcs.n	800372c <HAL_TIM_PeriodElapsedCallback+0x120>
    target.position[i] = omni.odom[i];
 8003690:	488a      	ldr	r0, [pc, #552]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
    ai_cmd.local_target_speed[i] = 0;
 8003692:	4b8c      	ldr	r3, [pc, #560]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
    target.position[i] = omni.odom[i];
 8003694:	498a      	ldr	r1, [pc, #552]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003696:	6984      	ldr	r4, [r0, #24]
 8003698:	69c0      	ldr	r0, [r0, #28]
 800369a:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 800369c:	2200      	movs	r2, #0
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	619a      	str	r2, [r3, #24]
    target.position[i] = omni.odom[i];
 80036a2:	6048      	str	r0, [r1, #4]
    sys.stop_flag = true;
 80036a4:	2301      	movs	r3, #1
 80036a6:	706b      	strb	r3, [r5, #1]
  yawFilter();
 80036a8:	f7ff f9e2 	bl	8002a70 <yawFilter>
  omniOdometory();
 80036ac:	f001 fad0 	bl	8004c50 <omniOdometory>
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80036b0:	4b85      	ldr	r3, [pc, #532]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80036b2:	4c86      	ldr	r4, [pc, #536]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80036b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80036b8:	edd3 6a08 	vldr	s13, [r3, #32]
 80036bc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 80036c0:	4f83      	ldr	r7, [pc, #524]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
  switch (sys.main_mode) {
 80036c2:	7b2a      	ldrb	r2, [r5, #12]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80036c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80036cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036d0:	ed94 7a07 	vldr	s14, [r4, #28]
 80036d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 80036d8:	edd7 6a02 	vldr	s13, [r7, #8]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80036dc:	ee77 7a87 	vadd.f32	s15, s15, s14
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 80036e0:	ed97 7a03 	vldr	s14, [r7, #12]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80036e4:	edc4 7a07 	vstr	s15, [r4, #28]
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 80036e8:	edd4 7a08 	vldr	s15, [r4, #32]
 80036ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80036f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80036fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003704:	edc4 7a08 	vstr	s15, [r4, #32]
  debug.true_cycle_cnt++;
 8003708:	6863      	ldr	r3, [r4, #4]
 800370a:	3301      	adds	r3, #1
 800370c:	6063      	str	r3, [r4, #4]
  switch (sys.main_mode) {
 800370e:	2a09      	cmp	r2, #9
 8003710:	f200 811a 	bhi.w	8003948 <HAL_TIM_PeriodElapsedCallback+0x33c>
 8003714:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003718:	001d001d 	.word	0x001d001d
 800371c:	008e003d 	.word	0x008e003d
 8003720:	00840092 	.word	0x00840092
 8003724:	01180089 	.word	0x01180089
 8003728:	00ee00b2 	.word	0x00ee00b2
    sys.stop_flag = false;
 800372c:	2300      	movs	r3, #0
 800372e:	e7ba      	b.n	80036a6 <HAL_TIM_PeriodElapsedCallback+0x9a>
  } else if (sw_mode != pre_sw_mode) {  // reset
 8003730:	783b      	ldrb	r3, [r7, #0]
 8003732:	4283      	cmp	r3, r0
 8003734:	f000 817f 	beq.w	8003a36 <HAL_TIM_PeriodElapsedCallback+0x42a>
    target.position[i] = omni.odom[i];
 8003738:	4860      	ldr	r0, [pc, #384]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800373a:	4961      	ldr	r1, [pc, #388]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800373c:	6984      	ldr	r4, [r0, #24]
    ai_cmd.local_target_speed[i] = 0;
 800373e:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
    target.position[i] = omni.odom[i];
 8003740:	69c0      	ldr	r0, [r0, #28]
 8003742:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 8003744:	2200      	movs	r2, #0
    sys.main_mode = 7;
 8003746:	2407      	movs	r4, #7
 8003748:	732c      	strb	r4, [r5, #12]
    ai_cmd.local_target_speed[i] = 0;
 800374a:	615a      	str	r2, [r3, #20]
    target.position[i] = omni.odom[i];
 800374c:	6048      	str	r0, [r1, #4]
    ai_cmd.local_target_speed[i] = 0;
 800374e:	619a      	str	r2, [r3, #24]
  for (int i = 0; i < 2; i++) {
 8003750:	e79a      	b.n	8003688 <HAL_TIM_PeriodElapsedCallback+0x7c>
      if (connection.connected_ai == false || sys.stop_flag) {
 8003752:	4e60      	ldr	r6, [pc, #384]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003754:	7833      	ldrb	r3, [r6, #0]
 8003756:	b10b      	cbz	r3, 800375c <HAL_TIM_PeriodElapsedCallback+0x150>
 8003758:	786b      	ldrb	r3, [r5, #1]
 800375a:	b1f3      	cbz	r3, 800379a <HAL_TIM_PeriodElapsedCallback+0x18e>
  }
}

void maintask_stop()
{
  omni_move(0.0, 0.0, 0.0, 0.0);
 800375c:	eddf 1a64 	vldr	s3, [pc, #400]	; 80038f0 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8003760:	eef0 0a61 	vmov.f32	s1, s3
 8003764:	eeb0 0a61 	vmov.f32	s0, s3
 8003768:	eeb0 1a61 	vmov.f32	s2, s3
 800376c:	f001 fcb4 	bl	80050d8 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003770:	eddf 0a5f 	vldr	s1, [pc, #380]	; 80038f0 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8003774:	eeb0 0a60 	vmov.f32	s0, s1
 8003778:	f7fd fcac 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 800377c:	2100      	movs	r1, #0
 800377e:	2001      	movs	r0, #1
 8003780:	f7fd fcfc 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003784:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80038f0 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8003788:	f7fd fce8 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 800378c:	f7fd fcd4 	bl	8001138 <actuator_dribbler_down>
}
 8003790:	e005      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
      if (sys.stop_flag) {
 8003792:	786b      	ldrb	r3, [r5, #1]
 8003794:	4e4f      	ldr	r6, [pc, #316]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e0      	bne.n	800375c <HAL_TIM_PeriodElapsedCallback+0x150>
        maintask_run();
 800379a:	f7ff fd61 	bl	8003260 <maintask_run>
  if (can_raw.power_voltage[5] < 21.0) {
 800379e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80037a2:	eef3 7a05 	vmov.f32	s15, #53	; 0x41a80000  21.0
 80037a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	f140 8128 	bpl.w	8003a02 <HAL_TIM_PeriodElapsedCallback+0x3f6>
    buzzer_cnt++;
 80037b2:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	3301      	adds	r3, #1
    if (buzzer_cnt > 100) {
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	f240 812c 	bls.w	8003a16 <HAL_TIM_PeriodElapsedCallback+0x40a>
      buzzer_cnt = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	6013      	str	r3, [r2, #0]
      if (buzzer_state == false) {
 80037c2:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	2a00      	cmp	r2, #0
 80037c8:	f000 8137 	beq.w	8003a3a <HAL_TIM_PeriodElapsedCallback+0x42e>
        buzzer_state = false;
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
  if (sys.system_time_ms - connection.latest_ai_cmd_update_time < 1000) {  // AI コマンドタイムアウト
 80037d0:	692b      	ldr	r3, [r5, #16]
 80037d2:	6932      	ldr	r2, [r6, #16]
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037da:	f080 80d1 	bcs.w	8003980 <HAL_TIM_PeriodElapsedCallback+0x374>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80037de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    connection.connected_ai = true;
 80037e2:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80037e4:	483e      	ldr	r0, [pc, #248]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
    connection.connected_ai = true;
 80037e6:	7032      	strb	r2, [r6, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80037e8:	f003 ffe2 	bl	80077b0 <HAL_GPIO_WritePin>
    if (connection.vision_update_cycle_cnt < MAIN_LOOP_CYCLE * 2) {
 80037ec:	68b3      	ldr	r3, [r6, #8]
 80037ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      connection.vision_update_cycle_cnt++;
 80037f2:	bf37      	itett	cc
 80037f4:	3301      	addcc	r3, #1
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 80037f6:	6929      	ldrcs	r1, [r5, #16]
 80037f8:	6929      	ldrcc	r1, [r5, #16]
      connection.vision_update_cycle_cnt++;
 80037fa:	60b3      	strcc	r3, [r6, #8]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 80037fc:	6973      	ldr	r3, [r6, #20]
 80037fe:	1ac9      	subs	r1, r1, r3
 8003800:	29c7      	cmp	r1, #199	; 0xc7
 8003802:	f200 80e7 	bhi.w	80039d4 <HAL_TIM_PeriodElapsedCallback+0x3c8>
    connection.connected_cm4 = true;
 8003806:	2301      	movs	r3, #1
  cnt_time_50Hz++;
 8003808:	4a36      	ldr	r2, [pc, #216]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800380a:	7073      	strb	r3, [r6, #1]
 800380c:	8813      	ldrh	r3, [r2, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	b29b      	uxth	r3, r3
  if (cnt_time_50Hz > 10) {
 8003812:	2b0a      	cmp	r3, #10
 8003814:	f200 8101 	bhi.w	8003a1a <HAL_TIM_PeriodElapsedCallback+0x40e>
  cnt_time_50Hz++;
 8003818:	8013      	strh	r3, [r2, #0]
}
 800381a:	b002      	add	sp, #8
 800381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      kicker_test(false);
 8003820:	2000      	movs	r0, #0
 8003822:	f7ff f861 	bl	80028e8 <kicker_test>
      break;
 8003826:	4e2b      	ldr	r6, [pc, #172]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003828:	e7b9      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
      kicker_test(true);
 800382a:	2001      	movs	r0, #1
 800382c:	f7ff f85c 	bl	80028e8 <kicker_test>
      break;
 8003830:	4e28      	ldr	r6, [pc, #160]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003832:	e7b4      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
      motor_test();
 8003834:	f7fe ffe8 	bl	8002808 <motor_test>
      break;
 8003838:	4e26      	ldr	r6, [pc, #152]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800383a:	e7b0      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
  if (decode_SW(adc_sw_data) & 0b00010000) {
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800383e:	8818      	ldrh	r0, [r3, #0]
 8003840:	f002 fa2e 	bl	8005ca0 <decode_SW>
 8003844:	f010 0610 	ands.w	r6, r0, #16
 8003848:	f000 80fc 	beq.w	8003a44 <HAL_TIM_PeriodElapsedCallback+0x438>
    actuator_motor5(0.5, 1.0);
 800384c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003850:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003854:	f7fd fc3e 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003858:	4821      	ldr	r0, [pc, #132]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800385a:	2201      	movs	r2, #1
 800385c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003860:	f003 ffa6 	bl	80077b0 <HAL_GPIO_WritePin>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003864:	eddf 1a22 	vldr	s3, [pc, #136]	; 80038f0 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8003868:	4e1a      	ldr	r6, [pc, #104]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800386a:	eeb0 1a61 	vmov.f32	s2, s3
 800386e:	eef0 0a61 	vmov.f32	s1, s3
 8003872:	eeb0 0a61 	vmov.f32	s0, s3
 8003876:	f001 fc2f 	bl	80050d8 <omni_move>
}
 800387a:	e790      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
  if (decode_SW(adc_sw_data) & 0b00000100) {
 800387c:	4e1a      	ldr	r6, [pc, #104]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800387e:	8830      	ldrh	r0, [r6, #0]
 8003880:	f002 fa0e 	bl	8005ca0 <decode_SW>
 8003884:	0743      	lsls	r3, r0, #29
 8003886:	f140 80ea 	bpl.w	8003a5e <HAL_TIM_PeriodElapsedCallback+0x452>
    calib_start_cnt++;
 800388a:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800388c:	6813      	ldr	r3, [r2, #0]
 800388e:	3301      	adds	r3, #1
    if (calib_start_cnt > 1000) {
 8003890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    calib_start_cnt++;
 8003894:	6013      	str	r3, [r2, #0]
    if (calib_start_cnt > 1000) {
 8003896:	d971      	bls.n	800397c <HAL_TIM_PeriodElapsedCallback+0x370>
      actuator_motor_calib(0);
 8003898:	2000      	movs	r0, #0
 800389a:	f7fd fcdd 	bl	8001258 <actuator_motor_calib>
 800389e:	4e0d      	ldr	r6, [pc, #52]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80038a0:	e77d      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
 80038a2:	bf00      	nop
 80038a4:	20001050 	.word	0x20001050
 80038a8:	200012f8 	.word	0x200012f8
 80038ac:	200012f5 	.word	0x200012f5
 80038b0:	200010fc 	.word	0x200010fc
 80038b4:	48000400 	.word	0x48000400
 80038b8:	48000c00 	.word	0x48000c00
 80038bc:	20001090 	.word	0x20001090
 80038c0:	20001310 	.word	0x20001310
 80038c4:	20000e48 	.word	0x20000e48
 80038c8:	200010d0 	.word	0x200010d0
 80038cc:	20000f84 	.word	0x20000f84
 80038d0:	20000ea8 	.word	0x20000ea8
 80038d4:	20000f2c 	.word	0x20000f2c
 80038d8:	20000e9c 	.word	0x20000e9c
 80038dc:	20000ea0 	.word	0x20000ea0
 80038e0:	48000800 	.word	0x48000800
 80038e4:	20000f2a 	.word	0x20000f2a
 80038e8:	20000e44 	.word	0x20000e44
 80038ec:	20000ea4 	.word	0x20000ea4
 80038f0:	00000000 	.word	0x00000000
  omni_move(0.0, 0.0, 0.0, 0.0);
 80038f4:	ed5f 1a02 	vldr	s3, [pc, #-8]	; 80038f0 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 80038f8:	4e64      	ldr	r6, [pc, #400]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x480>)
 80038fa:	eef0 0a61 	vmov.f32	s1, s3
 80038fe:	eeb0 0a61 	vmov.f32	s0, s3
 8003902:	eeb0 1a61 	vmov.f32	s2, s3
 8003906:	f001 fbe7 	bl	80050d8 <omni_move>
  actuator_motor5(0.0, 0.0);
 800390a:	eddf 0a61 	vldr	s1, [pc, #388]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x484>
 800390e:	eeb0 0a60 	vmov.f32	s0, s1
 8003912:	f7fd fbdf 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003916:	2100      	movs	r1, #0
 8003918:	2001      	movs	r0, #1
 800391a:	f7fd fc2f 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 800391e:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x484>
 8003922:	f7fd fc1b 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003926:	f7fd fc07 	bl	8001138 <actuator_dribbler_down>

void send_can_error()
{
  uint8_t senddata_error[8];
  can1_send(0x000, senddata_error);
 800392a:	4669      	mov	r1, sp
 800392c:	2000      	movs	r0, #0
 800392e:	f7fd febd 	bl	80016ac <can1_send>
  can2_send(0x000, senddata_error);
 8003932:	4669      	mov	r1, sp
 8003934:	2000      	movs	r0, #0
 8003936:	f7fd ff09 	bl	800174c <can2_send>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800393a:	4856      	ldr	r0, [pc, #344]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800393c:	2201      	movs	r2, #1
 800393e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003942:	f003 ff35 	bl	80077b0 <HAL_GPIO_WritePin>
}
 8003946:	e72a      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003948:	eddf 1a51 	vldr	s3, [pc, #324]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x484>
 800394c:	eef0 0a61 	vmov.f32	s1, s3
 8003950:	eeb0 0a61 	vmov.f32	s0, s3
 8003954:	eeb0 1a61 	vmov.f32	s2, s3
 8003958:	f001 fbbe 	bl	80050d8 <omni_move>
  actuator_motor5(0.0, 0.0);
 800395c:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x484>
 8003960:	eeb0 0a60 	vmov.f32	s0, s1
 8003964:	f7fd fbb6 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003968:	2100      	movs	r1, #0
 800396a:	2001      	movs	r0, #1
 800396c:	f7fd fc06 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003970:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x484>
 8003974:	f7fd fbf2 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003978:	f7fd fbde 	bl	8001138 <actuator_dribbler_down>
 800397c:	4e43      	ldr	r6, [pc, #268]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x480>)
}
 800397e:	e70e      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
    connection.connected_ai = false;
 8003980:	f04f 0800 	mov.w	r8, #0
    connection.cmd_rx_frq = 0;
 8003984:	2700      	movs	r7, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003986:	4642      	mov	r2, r8
 8003988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800398c:	4842      	ldr	r0, [pc, #264]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x48c>)
    connection.connected_ai = false;
 800398e:	f886 8000 	strb.w	r8, [r6]
    connection.cmd_rx_frq = 0;
 8003992:	6077      	str	r7, [r6, #4]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003994:	f003 ff0c 	bl	80077b0 <HAL_GPIO_WritePin>
void resetAiCmdData()
{
  ai_cmd.local_target_speed[0] = 0;
 8003998:	4b40      	ldr	r3, [pc, #256]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x490>)
    sys.stop_flag_request_time = sys.system_time_ms + 1000;  // 前回のタイムアウト時から1.0s間は動かさない
 800399a:	6929      	ldr	r1, [r5, #16]
  ai_cmd.local_target_speed[0] = 0;
 800399c:	615f      	str	r7, [r3, #20]
  ai_cmd.ball_local_x = 0;
  ai_cmd.ball_local_y = 0;
  ai_cmd.ball_local_radius = 0;
  ai_cmd.ball_local_FPS = 0;*/

  ai_cmd.vision_lost_flag = true;
 800399e:	2201      	movs	r2, #1
  ai_cmd.local_target_speed[1] = 0;
 80039a0:	619f      	str	r7, [r3, #24]
  ai_cmd.global_vision_theta = 0;
 80039a2:	605f      	str	r7, [r3, #4]
  ai_cmd.target_theta = 0;
 80039a4:	601f      	str	r7, [r3, #0]
  ai_cmd.chip_en = false;
 80039a6:	f883 8010 	strb.w	r8, [r3, #16]
  ai_cmd.allow_local_flags = 0;
 80039aa:	f883 8034 	strb.w	r8, [r3, #52]	; 0x34
  ai_cmd.kick_power = 0;
 80039ae:	60df      	str	r7, [r3, #12]
  ai_cmd.drible_power = 0;
 80039b0:	609f      	str	r7, [r3, #8]
  ai_cmd.global_ball_position[0] = 0;
 80039b2:	62df      	str	r7, [r3, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = 0;
 80039b4:	631f      	str	r7, [r3, #48]	; 0x30
  ai_cmd.global_robot_position[0] = 0;
 80039b6:	61df      	str	r7, [r3, #28]
  ai_cmd.global_robot_position[1] = 0;
 80039b8:	621f      	str	r7, [r3, #32]
  ai_cmd.global_target_position[0] = 0;
 80039ba:	625f      	str	r7, [r3, #36]	; 0x24
  ai_cmd.global_target_position[1] = 0;
 80039bc:	629f      	str	r7, [r3, #40]	; 0x28
  ai_cmd.vision_lost_flag = true;
 80039be:	649a      	str	r2, [r3, #72]	; 0x48
    sys.stop_flag_request_time = sys.system_time_ms + 1000;  // 前回のタイムアウト時から1.0s間は動かさない
 80039c0:	f501 737a 	add.w	r3, r1, #1000	; 0x3e8
 80039c4:	616b      	str	r3, [r5, #20]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 80039c6:	6973      	ldr	r3, [r6, #20]
    connection.vision_update_cycle_cnt = 0;
 80039c8:	f8c6 8008 	str.w	r8, [r6, #8]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < 200) {  // CM4 コマンドタイムアウト
 80039cc:	1ac9      	subs	r1, r1, r3
 80039ce:	29c7      	cmp	r1, #199	; 0xc7
 80039d0:	f67f af19 	bls.w	8003806 <HAL_TIM_PeriodElapsedCallback+0x1fa>
  ai_cmd.local_target_speed[0] = 0;
 80039d4:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x490>)
 80039d6:	2200      	movs	r2, #0
    connection.connected_ai = false;
 80039d8:	2100      	movs	r1, #0
  ai_cmd.local_target_speed[0] = 0;
 80039da:	615a      	str	r2, [r3, #20]
  ai_cmd.local_target_speed[1] = 0;
 80039dc:	619a      	str	r2, [r3, #24]
  ai_cmd.global_vision_theta = 0;
 80039de:	605a      	str	r2, [r3, #4]
  ai_cmd.target_theta = 0;
 80039e0:	601a      	str	r2, [r3, #0]
  ai_cmd.kick_power = 0;
 80039e2:	60da      	str	r2, [r3, #12]
  ai_cmd.drible_power = 0;
 80039e4:	609a      	str	r2, [r3, #8]
  ai_cmd.global_ball_position[0] = 0;
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = 0;
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
  ai_cmd.global_robot_position[0] = 0;
 80039ea:	61da      	str	r2, [r3, #28]
  ai_cmd.global_robot_position[1] = 0;
 80039ec:	621a      	str	r2, [r3, #32]
  ai_cmd.global_target_position[0] = 0;
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24
  ai_cmd.global_target_position[1] = 0;
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
  ai_cmd.vision_lost_flag = true;
 80039f2:	2201      	movs	r2, #1
  ai_cmd.chip_en = false;
 80039f4:	7419      	strb	r1, [r3, #16]
  ai_cmd.allow_local_flags = 0;
 80039f6:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  ai_cmd.vision_lost_flag = true;
 80039fa:	649a      	str	r2, [r3, #72]	; 0x48
    connection.connected_ai = false;
 80039fc:	7031      	strb	r1, [r6, #0]
    connection.connected_cm4 = false;
 80039fe:	460b      	mov	r3, r1
  ai_cmd.local_vision_en_flag = false;
  ai_cmd.keeper_mode_en_flag = false;
  ai_cmd.stop_request_flag = false;  //
}
 8003a00:	e702      	b.n	8003808 <HAL_TIM_PeriodElapsedCallback+0x1fc>
  } else if (sys.error_flag) {
 8003a02:	782b      	ldrb	r3, [r5, #0]
 8003a04:	b90b      	cbnz	r3, 8003a0a <HAL_TIM_PeriodElapsedCallback+0x3fe>
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8003a08:	e6e0      	b.n	80037cc <HAL_TIM_PeriodElapsedCallback+0x1c0>
    buzzer_cnt++;
 8003a0a:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8003a0c:	6813      	ldr	r3, [r2, #0]
 8003a0e:	3301      	adds	r3, #1
    if (buzzer_cnt > 20) {
 8003a10:	2b14      	cmp	r3, #20
 8003a12:	f63f aed4 	bhi.w	80037be <HAL_TIM_PeriodElapsedCallback+0x1b2>
    buzzer_cnt++;
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e6da      	b.n	80037d0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    debug.print_flag = true;
 8003a1a:	2001      	movs	r0, #1
    cnt_time_50Hz = 0;
 8003a1c:	2300      	movs	r3, #0
    debug.print_flag = true;
 8003a1e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    cnt_time_50Hz = 0;
 8003a22:	8013      	strh	r3, [r2, #0]
    actuator_power_ONOFF(1);
 8003a24:	f7fd fbc0 	bl	80011a8 <actuator_power_ONOFF>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003a28:	481a      	ldr	r0, [pc, #104]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8003a2a:	2180      	movs	r1, #128	; 0x80
}
 8003a2c:	b002      	add	sp, #8
 8003a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003a32:	f003 bec3 	b.w	80077bc <HAL_GPIO_TogglePin>
    sys.main_mode = sw_mode;
 8003a36:	732b      	strb	r3, [r5, #12]
 8003a38:	e626      	b.n	8003688 <HAL_TIM_PeriodElapsedCallback+0x7c>
        buzzer_state = true;
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
        actuator_buzzer_on();
 8003a3e:	f7fd fbe9 	bl	8001214 <actuator_buzzer_on>
 8003a42:	e6c5      	b.n	80037d0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
    actuator_motor5(0.0, 0.0);
 8003a44:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003a90 <HAL_TIM_PeriodElapsedCallback+0x484>
 8003a48:	eeb0 0a60 	vmov.f32	s0, s1
 8003a4c:	f7fd fb42 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003a50:	4811      	ldr	r0, [pc, #68]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8003a52:	4632      	mov	r2, r6
 8003a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a58:	f003 feaa 	bl	80077b0 <HAL_GPIO_WritePin>
 8003a5c:	e702      	b.n	8003864 <HAL_TIM_PeriodElapsedCallback+0x258>
  } else if (decode_SW(adc_sw_data) & 0b00001000) {
 8003a5e:	8830      	ldrh	r0, [r6, #0]
 8003a60:	f002 f91e 	bl	8005ca0 <decode_SW>
 8003a64:	f010 0008 	ands.w	r0, r0, #8
 8003a68:	d00b      	beq.n	8003a82 <HAL_TIM_PeriodElapsedCallback+0x476>
    calib_start_cnt++;
 8003a6a:	4a0f      	ldr	r2, [pc, #60]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	3301      	adds	r3, #1
    if (calib_start_cnt > 1000) {
 8003a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    calib_start_cnt++;
 8003a74:	6013      	str	r3, [r2, #0]
    if (calib_start_cnt > 1000) {
 8003a76:	d981      	bls.n	800397c <HAL_TIM_PeriodElapsedCallback+0x370>
      actuator_motor_calib(1);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7fd fbed 	bl	8001258 <actuator_motor_calib>
 8003a7e:	4e03      	ldr	r6, [pc, #12]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x480>)
 8003a80:	e68d      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
    calib_start_cnt = 0;
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8003a84:	4e01      	ldr	r6, [pc, #4]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x480>)
 8003a86:	6018      	str	r0, [r3, #0]
 8003a88:	e689      	b.n	800379e <HAL_TIM_PeriodElapsedCallback+0x192>
 8003a8a:	bf00      	nop
 8003a8c:	20000f2c 	.word	0x20000f2c
 8003a90:	00000000 	.word	0x00000000
 8003a94:	48000400 	.word	0x48000400
 8003a98:	48000800 	.word	0x48000800
 8003a9c:	20000e48 	.word	0x20000e48
 8003aa0:	20000ea0 	.word	0x20000ea0
 8003aa4:	20000e9c 	.word	0x20000e9c
 8003aa8:	20000ea4 	.word	0x20000ea4

08003aac <sendRobotInfo>:
{
 8003aac:	b570      	push	{r4, r5, r6, lr}
  ring_counter++;
 8003aae:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <sendRobotInfo+0xb4>)
        senddata[7] = temp[3];
 8003ab0:	4c2c      	ldr	r4, [pc, #176]	; (8003b64 <sendRobotInfo+0xb8>)
  ring_counter++;
 8003ab2:	7813      	ldrb	r3, [r2, #0]
        senddata[8] = temp[0];
 8003ab4:	482c      	ldr	r0, [pc, #176]	; (8003b68 <sendRobotInfo+0xbc>)
        senddata[3] = ring_counter;
 8003ab6:	7825      	ldrb	r5, [r4, #0]
 8003ab8:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
 8003abc:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
  ring_counter++;
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
  if (ring_counter > 200) {
 8003ac4:	2bc8      	cmp	r3, #200	; 0xc8
    ring_counter = 0;
 8003ac6:	bf88      	it	hi
 8003ac8:	2300      	movhi	r3, #0
 8003aca:	7013      	strb	r3, [r2, #0]
 8003acc:	78e2      	ldrb	r2, [r4, #3]
 8003ace:	f04f 0e00 	mov.w	lr, #0
 8003ad2:	f362 0e07 	bfi	lr, r2, #0, #8
 8003ad6:	f361 2e0f 	bfi	lr, r1, #8, #8
 8003ada:	f04f 0c00 	mov.w	ip, #0
 8003ade:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 8003ae2:	f366 0c07 	bfi	ip, r6, #0, #8
 8003ae6:	f361 2c0f 	bfi	ip, r1, #8, #8
        senddata[3] = ring_counter;
 8003aea:	2100      	movs	r1, #0
 8003aec:	f363 0107 	bfi	r1, r3, #0, #8
 8003af0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003af4:	f363 4e17 	bfi	lr, r3, #16, #8
 8003af8:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
{
 8003afc:	b084      	sub	sp, #16
        senddata[0] = 0xAB;
 8003afe:	f64e 22ab 	movw	r2, #60075	; 0xeaab
 8003b02:	f363 4c17 	bfi	ip, r3, #16, #8
        senddata[3] = ring_counter;
 8003b06:	7863      	ldrb	r3, [r4, #1]
        senddata[0] = 0xAB;
 8003b08:	f8ad 2000 	strh.w	r2, [sp]
        senddata[3] = ring_counter;
 8003b0c:	f365 210f 	bfi	r1, r5, #8, #8
        senddata[15] = kick_state / 10;
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <sendRobotInfo+0xc0>)
        senddata[3] = ring_counter;
 8003b12:	f363 4117 	bfi	r1, r3, #16, #8
 8003b16:	78a3      	ldrb	r3, [r4, #2]
        senddata[15] = kick_state / 10;
 8003b18:	8812      	ldrh	r2, [r2, #0]
        senddata[3] = ring_counter;
 8003b1a:	f363 611f 	bfi	r1, r3, #24, #8
        senddata[15] = kick_state / 10;
 8003b1e:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <sendRobotInfo+0xc4>)
        senddata[3] = ring_counter;
 8003b20:	f8cd 1003 	str.w	r1, [sp, #3]
        senddata[15] = kick_state / 10;
 8003b24:	b292      	uxth	r2, r2
 8003b26:	fba3 3202 	umull	r3, r2, r3, r2
 8003b2a:	08d2      	lsrs	r2, r2, #3
 8003b2c:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
 8003b30:	f88d 200f 	strb.w	r2, [sp, #15]
 8003b34:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    HAL_UART_Transmit(&huart2, senddata, sizeof(senddata), 0xff);
 8003b38:	480e      	ldr	r0, [pc, #56]	; (8003b74 <sendRobotInfo+0xc8>)
 8003b3a:	f361 6e1f 	bfi	lr, r1, #24, #8
 8003b3e:	f362 6c1f 	bfi	ip, r2, #24, #8
 8003b42:	23ff      	movs	r3, #255	; 0xff
 8003b44:	2210      	movs	r2, #16
 8003b46:	4669      	mov	r1, sp
        senddata[2] = i + 10;
 8003b48:	240a      	movs	r4, #10
        senddata[3] = ring_counter;
 8003b4a:	f8cd e007 	str.w	lr, [sp, #7]
 8003b4e:	f8cd c00b 	str.w	ip, [sp, #11]
        senddata[2] = i + 10;
 8003b52:	f88d 4002 	strb.w	r4, [sp, #2]
    HAL_UART_Transmit(&huart2, senddata, sizeof(senddata), 0xff);
 8003b56:	f006 fd33 	bl	800a5c0 <HAL_UART_Transmit>
}
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
 8003b5e:	bf00      	nop
 8003b60:	200012f4 	.word	0x200012f4
 8003b64:	20000fc0 	.word	0x20000fc0
 8003b68:	20000ea8 	.word	0x20000ea8
 8003b6c:	20001014 	.word	0x20001014
 8003b70:	cccccccd 	.word	0xcccccccd
 8003b74:	20001658 	.word	0x20001658

08003b78 <parseRxCmd>:

void parseRxCmd()
{
 8003b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  connection.check_ver = data_from_cm4[1];
 8003b7c:	4da0      	ldr	r5, [pc, #640]	; (8003e00 <parseRxCmd+0x288>)
 8003b7e:	4ea1      	ldr	r6, [pc, #644]	; (8003e04 <parseRxCmd+0x28c>)

  if (connection.check_ver != connection.check_pre) {
 8003b80:	78aa      	ldrb	r2, [r5, #2]
  connection.check_ver = data_from_cm4[1];
 8003b82:	7873      	ldrb	r3, [r6, #1]
 8003b84:	70eb      	strb	r3, [r5, #3]
  if (connection.check_ver != connection.check_pre) {
 8003b86:	429a      	cmp	r2, r3
{
 8003b88:	ed2d 8b02 	vpush	{d8}
  if (connection.check_ver != connection.check_pre) {
 8003b8c:	f000 812f 	beq.w	8003dee <parseRxCmd+0x276>
    connection.latest_ai_cmd_update_time = sys.system_time_ms;
 8003b90:	4a9d      	ldr	r2, [pc, #628]	; (8003e08 <parseRxCmd+0x290>)

    connection.pre_vision_update_cycle_cnt = connection.vision_update_cycle_cnt;
 8003b92:	68a9      	ldr	r1, [r5, #8]
    connection.latest_ai_cmd_update_time = sys.system_time_ms;
 8003b94:	6912      	ldr	r2, [r2, #16]
    connection.vision_update_cycle_cnt = 0;

    connection.check_pre = connection.check_ver;
 8003b96:	70ab      	strb	r3, [r5, #2]
    connection.pre_vision_update_cycle_cnt = connection.vision_update_cycle_cnt;
 8003b98:	e9c5 1203 	strd	r1, r2, [r5, #12]
    connection.vision_update_cycle_cnt = 0;
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	60a9      	str	r1, [r5, #8]
  }

  float pre_update_time_ms = connection.latest_cm4_cmd_update_time;
  connection.latest_cm4_cmd_update_time = sys.system_time_ms;
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003ba0:	ee07 2a90 	vmov	s15, r2
  float pre_update_time_ms = connection.latest_cm4_cmd_update_time;
 8003ba4:	ed95 7a05 	vldr	s14, [r5, #20]
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003ba8:	eddf 6a98 	vldr	s13, [pc, #608]	; 8003e0c <parseRxCmd+0x294>

  // aiコマンドに関係なくカメラ情報は入れる(デバッグ用)
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003bac:	f8b6 3039 	ldrh.w	r3, [r6, #57]	; 0x39
 8003bb0:	4c97      	ldr	r4, [pc, #604]	; (8003e10 <parseRxCmd+0x298>)
  connection.latest_cm4_cmd_update_time = sys.system_time_ms;
 8003bb2:	616a      	str	r2, [r5, #20]
  float pre_update_time_ms = connection.latest_cm4_cmd_update_time;
 8003bb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003bbc:	ba5b      	rev16	r3, r3
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003bc2:	b29b      	uxth	r3, r3
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  ai_cmd.ball_local_y = data_from_cm4[RX_BUF_SIZE_ETHER - 5] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 4];
 8003bc8:	f8b6 203b 	ldrh.w	r2, [r6, #59]	; 0x3b
  ai_cmd.ball_local_x = data_from_cm4[RX_BUF_SIZE_ETHER - 7] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 6];
 8003bcc:	63a3      	str	r3, [r4, #56]	; 0x38
  ai_cmd.ball_local_radius = data_from_cm4[RX_BUF_SIZE_ETHER - 3] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 2];
 8003bce:	f8b6 303d 	ldrh.w	r3, [r6, #61]	; 0x3d
  ai_cmd.ball_local_FPS = data_from_cm4[RX_BUF_SIZE_ETHER - 1];

  // time out
  if (connection.connected_ai == 0) {
 8003bd2:	f895 8000 	ldrb.w	r8, [r5]
  ai_cmd.ball_local_y = data_from_cm4[RX_BUF_SIZE_ETHER - 5] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 4];
 8003bd6:	ba52      	rev16	r2, r2
  ai_cmd.ball_local_radius = data_from_cm4[RX_BUF_SIZE_ETHER - 3] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 2];
 8003bd8:	ba5b      	rev16	r3, r3
 8003bda:	b29b      	uxth	r3, r3
  ai_cmd.ball_local_y = data_from_cm4[RX_BUF_SIZE_ETHER - 5] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 4];
 8003bdc:	b292      	uxth	r2, r2
  ai_cmd.ball_local_radius = data_from_cm4[RX_BUF_SIZE_ETHER - 3] << 8 | data_from_cm4[RX_BUF_SIZE_ETHER - 2];
 8003bde:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ai_cmd.ball_local_FPS = data_from_cm4[RX_BUF_SIZE_ETHER - 1];
 8003be2:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
 8003be6:	6463      	str	r3, [r4, #68]	; 0x44
  connection.cmd_rx_frq = (float)1000 / (connection.latest_cm4_cmd_update_time - pre_update_time_ms);
 8003be8:	ed85 7a01 	vstr	s14, [r5, #4]
  if (connection.connected_ai == 0) {
 8003bec:	f1b8 0f00 	cmp.w	r8, #0
 8003bf0:	f000 80e6 	beq.w	8003dc0 <parseRxCmd+0x248>
    resetAiCmdData();
    return;
  }

  ai_cmd.local_target_speed[0] = two_to_float(&data_from_cm4[2]) * AI_CMD_VEL_MAX_MPS;
 8003bf4:	4887      	ldr	r0, [pc, #540]	; (8003e14 <parseRxCmd+0x29c>)
 8003bf6:	f002 f87b 	bl	8005cf0 <two_to_float>
 8003bfa:	eeb1 8a0c 	vmov.f32	s16, #28	; 0x40e00000  7.0
 8003bfe:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_cm4[4]) * AI_CMD_VEL_MAX_MPS;
 8003c02:	4885      	ldr	r0, [pc, #532]	; (8003e18 <parseRxCmd+0x2a0>)
  ai_cmd.local_target_speed[0] = two_to_float(&data_from_cm4[2]) * AI_CMD_VEL_MAX_MPS;
 8003c04:	ed84 0a05 	vstr	s0, [r4, #20]
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_cm4[4]) * AI_CMD_VEL_MAX_MPS;
 8003c08:	f002 f872 	bl	8005cf0 <two_to_float>
 8003c0c:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_vision_theta = two_to_float(&data_from_cm4[6]) * M_PI;
 8003c10:	4882      	ldr	r0, [pc, #520]	; (8003e1c <parseRxCmd+0x2a4>)
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_cm4[4]) * AI_CMD_VEL_MAX_MPS;
 8003c12:	ed84 0a06 	vstr	s0, [r4, #24]
  ai_cmd.global_vision_theta = two_to_float(&data_from_cm4[6]) * M_PI;
 8003c16:	f002 f86b 	bl	8005cf0 <two_to_float>
 8003c1a:	ee10 0a10 	vmov	r0, s0
 8003c1e:	f7fc fcbb 	bl	8000598 <__aeabi_f2d>
 8003c22:	a375      	add	r3, pc, #468	; (adr r3, 8003df8 <parseRxCmd+0x280>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fd0e 	bl	8000648 <__aeabi_dmul>
 8003c2c:	f7fd f804 	bl	8000c38 <__aeabi_d2f>
 8003c30:	6060      	str	r0, [r4, #4]
  ai_cmd.target_theta = two_to_float(&data_from_cm4[8]) * M_PI;
 8003c32:	487b      	ldr	r0, [pc, #492]	; (8003e20 <parseRxCmd+0x2a8>)
 8003c34:	f002 f85c 	bl	8005cf0 <two_to_float>
 8003c38:	ee10 0a10 	vmov	r0, s0
 8003c3c:	f7fc fcac 	bl	8000598 <__aeabi_f2d>
 8003c40:	a36d      	add	r3, pc, #436	; (adr r3, 8003df8 <parseRxCmd+0x280>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f7fc fcff 	bl	8000648 <__aeabi_dmul>
 8003c4a:	f7fc fff5 	bl	8000c38 <__aeabi_d2f>
  if (data_from_cm4[10] >= 101) {
 8003c4e:	7ab3      	ldrb	r3, [r6, #10]
  ai_cmd.target_theta = two_to_float(&data_from_cm4[8]) * M_PI;
 8003c50:	6020      	str	r0, [r4, #0]
  if (data_from_cm4[10] >= 101) {
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	f200 809c 	bhi.w	8003d90 <parseRxCmd+0x218>
    ai_cmd.chip_en = true;
    ai_cmd.kick_power = (float)(data_from_cm4[10] - 101) / 20;
  } else {
    ai_cmd.kick_power = (float)data_from_cm4[10] / 20;
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003e24 <parseRxCmd+0x2ac>
 8003c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ai_cmd.chip_en = false;
 8003c64:	f04f 0800 	mov.w	r8, #0
    ai_cmd.kick_power = (float)data_from_cm4[10] / 20;
 8003c68:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003c6c:	7af3      	ldrb	r3, [r6, #11]
 8003c6e:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8003e24 <parseRxCmd+0x2ac>

  ai_cmd.allow_local_flags = data_from_cm4[12];

  // integとai_cmdで分けてるだけで同じ情報の now と pre
  integ.pre_global_target_position[0] = ai_cmd.global_target_position[0];
 8003c72:	4f6d      	ldr	r7, [pc, #436]	; (8003e28 <parseRxCmd+0x2b0>)
  ai_cmd.allow_local_flags = data_from_cm4[12];
 8003c74:	7b32      	ldrb	r2, [r6, #12]
  integ.pre_global_target_position[1] = ai_cmd.global_target_position[1];

  // <int>[mm] -> <float>[m]
  ai_cmd.global_ball_position[0] = (float)two_to_int(&data_from_cm4[13]) / 1000;
 8003c76:	486d      	ldr	r0, [pc, #436]	; (8003e2c <parseRxCmd+0x2b4>)
 8003c78:	edc4 7a03 	vstr	s15, [r4, #12]
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003c7c:	ee07 3a10 	vmov	s14, r3
 8003c80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  integ.pre_global_target_position[0] = ai_cmd.global_target_position[0];
 8003c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c86:	623b      	str	r3, [r7, #32]
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003c88:	ee27 7a26 	vmul.f32	s14, s14, s13
  integ.pre_global_target_position[1] = ai_cmd.global_target_position[1];
 8003c8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  ai_cmd.drible_power = (float)data_from_cm4[11] / 20;
 8003c8e:	ed84 7a02 	vstr	s14, [r4, #8]
  ai_cmd.allow_local_flags = data_from_cm4[12];
 8003c92:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  integ.pre_global_target_position[1] = ai_cmd.global_target_position[1];
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
 8003c98:	f884 8010 	strb.w	r8, [r4, #16]
  ai_cmd.global_ball_position[0] = (float)two_to_int(&data_from_cm4[13]) / 1000;
 8003c9c:	f002 f84c 	bl	8005d38 <two_to_int>
 8003ca0:	ed9f 8a63 	vldr	s16, [pc, #396]	; 8003e30 <parseRxCmd+0x2b8>
  ai_cmd.global_ball_position[1] = (float)two_to_int(&data_from_cm4[15]) / 1000;
 8003ca4:	4863      	ldr	r0, [pc, #396]	; (8003e34 <parseRxCmd+0x2bc>)
  ai_cmd.global_ball_position[0] = (float)two_to_int(&data_from_cm4[13]) / 1000;
 8003ca6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003caa:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = (float)two_to_int(&data_from_cm4[15]) / 1000;
 8003cae:	f002 f843 	bl	8005d38 <two_to_int>
 8003cb2:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_robot_position[0] = (float)two_to_int(&data_from_cm4[17]) / 1000;
 8003cb6:	4860      	ldr	r0, [pc, #384]	; (8003e38 <parseRxCmd+0x2c0>)
  ai_cmd.global_ball_position[1] = (float)two_to_int(&data_from_cm4[15]) / 1000;
 8003cb8:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  ai_cmd.global_robot_position[0] = (float)two_to_int(&data_from_cm4[17]) / 1000;
 8003cbc:	f002 f83c 	bl	8005d38 <two_to_int>
 8003cc0:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_robot_position[1] = (float)two_to_int(&data_from_cm4[19]) / 1000;
 8003cc4:	485d      	ldr	r0, [pc, #372]	; (8003e3c <parseRxCmd+0x2c4>)
  ai_cmd.global_robot_position[0] = (float)two_to_int(&data_from_cm4[17]) / 1000;
 8003cc6:	ed84 0a07 	vstr	s0, [r4, #28]
  ai_cmd.global_robot_position[1] = (float)two_to_int(&data_from_cm4[19]) / 1000;
 8003cca:	f002 f835 	bl	8005d38 <two_to_int>
 8003cce:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_target_position[0] = (float)two_to_int(&data_from_cm4[21]) / 1000;
 8003cd2:	485b      	ldr	r0, [pc, #364]	; (8003e40 <parseRxCmd+0x2c8>)
  ai_cmd.global_robot_position[1] = (float)two_to_int(&data_from_cm4[19]) / 1000;
 8003cd4:	ed84 0a08 	vstr	s0, [r4, #32]
  ai_cmd.global_target_position[0] = (float)two_to_int(&data_from_cm4[21]) / 1000;
 8003cd8:	f002 f82e 	bl	8005d38 <two_to_int>
 8003cdc:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003ce0:	4858      	ldr	r0, [pc, #352]	; (8003e44 <parseRxCmd+0x2cc>)
  ai_cmd.global_target_position[0] = (float)two_to_int(&data_from_cm4[21]) / 1000;
 8003ce2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003ce6:	f002 f827 	bl	8005d38 <two_to_int>

  // 値がおかしい時は0にする (+-30を超えることはない)
  for (int i = 0; i < 2; i++) {
    if (ai_cmd.global_target_position[i] > 30.0 || ai_cmd.global_target_position[i] < -30) {
 8003cea:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8003cee:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003cf2:	ee20 8a08 	vmul.f32	s16, s0, s16
    if (ai_cmd.global_target_position[i] > 30.0 || ai_cmd.global_target_position[i] < -30) {
 8003cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  ai_cmd.global_target_position[1] = (float)two_to_int(&data_from_cm4[23]) / 1000;
 8003cfe:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
    if (ai_cmd.global_target_position[i] > 30.0 || ai_cmd.global_target_position[i] < -30) {
 8003d02:	dc56      	bgt.n	8003db2 <parseRxCmd+0x23a>
 8003d04:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d10:	d44f      	bmi.n	8003db2 <parseRxCmd+0x23a>
 8003d12:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003e48 <parseRxCmd+0x2d0>
 8003d16:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	dc41      	bgt.n	8003da4 <parseRxCmd+0x22c>
 8003d20:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003e4c <parseRxCmd+0x2d4>
 8003d24:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	d43a      	bmi.n	8003da4 <parseRxCmd+0x22c>
    ai_cmd.dribbler_up_flag = false;
  }

  // 目標座標の移動量と更新時間から推測される区間速度
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003d2e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003d32:	ed95 7a03 	vldr	s14, [r5, #12]
 8003d36:	ed97 6a08 	vldr	s12, [r7, #32]
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8003d3a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003d3e:	ee38 8a66 	vsub.f32	s16, s16, s13
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003d42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d46:	ee77 7ac6 	vsub.f32	s15, s15, s12
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8003d4a:	43d9      	mvns	r1, r3
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003d4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8003d50:	f001 0101 	and.w	r1, r1, #1
 8003d54:	2200      	movs	r2, #0
 8003d56:	f361 0207 	bfi	r2, r1, #0, #8
  if ((ai_cmd.allow_local_flags & FLAG_ENABLE_LOCAL_VISION) != 0) {
 8003d5a:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8003d5e:	f361 220f 	bfi	r2, r1, #8, #8
  if ((ai_cmd.allow_local_flags & FLAG_ENABLE_KEEPER_MODE) != 0) {
 8003d62:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8003d66:	f361 4217 	bfi	r2, r1, #16, #8
  if ((ai_cmd.allow_local_flags & FLAG_STOP_REQUEST) != 0) {
 8003d6a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8003d6e:	f361 621f 	bfi	r2, r1, #24, #8
  if ((ai_cmd.allow_local_flags & FLAG_DRIBBLER_UP) != 0) {
 8003d72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d76:	64a2      	str	r2, [r4, #72]	; 0x48
 8003d78:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003d7c:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8003d80:	ecbd 8b02 	vpop	{d8}
  integ.guess_target_speed[0] = (float)(ai_cmd.global_target_position[0] - integ.pre_global_target_position[0]) / connection.pre_vision_update_cycle_cnt;
 8003d84:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
  integ.guess_target_speed[1] = (float)(ai_cmd.global_target_position[1] - integ.pre_global_target_position[1]) / connection.pre_vision_update_cycle_cnt;
 8003d88:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
}
 8003d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ai_cmd.kick_power = (float)(data_from_cm4[10] - 101) / 20;
 8003d90:	3b65      	subs	r3, #101	; 0x65
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003e24 <parseRxCmd+0x2ac>
 8003d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da2:	e763      	b.n	8003c6c <parseRxCmd+0xf4>
      ai_cmd.global_target_position[i] = 0;
 8003da4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003e50 <parseRxCmd+0x2d8>
 8003da8:	eeb0 8a47 	vmov.f32	s16, s14
 8003dac:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8003db0:	e7bd      	b.n	8003d2e <parseRxCmd+0x1b6>
 8003db2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003e50 <parseRxCmd+0x2d8>
 8003db6:	eef0 7a47 	vmov.f32	s15, s14
 8003dba:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8003dbe:	e7a8      	b.n	8003d12 <parseRxCmd+0x19a>
}
 8003dc0:	ecbd 8b02 	vpop	{d8}
  ai_cmd.local_target_speed[0] = 0;
 8003dc4:	2300      	movs	r3, #0
  ai_cmd.vision_lost_flag = true;
 8003dc6:	2201      	movs	r2, #1
  ai_cmd.local_target_speed[0] = 0;
 8003dc8:	6163      	str	r3, [r4, #20]
  ai_cmd.local_target_speed[1] = 0;
 8003dca:	61a3      	str	r3, [r4, #24]
  ai_cmd.global_vision_theta = 0;
 8003dcc:	6063      	str	r3, [r4, #4]
  ai_cmd.target_theta = 0;
 8003dce:	6023      	str	r3, [r4, #0]
  ai_cmd.chip_en = false;
 8003dd0:	f884 8010 	strb.w	r8, [r4, #16]
  ai_cmd.kick_power = 0;
 8003dd4:	60e3      	str	r3, [r4, #12]
  ai_cmd.drible_power = 0;
 8003dd6:	60a3      	str	r3, [r4, #8]
  ai_cmd.allow_local_flags = 0;
 8003dd8:	f884 8034 	strb.w	r8, [r4, #52]	; 0x34
  ai_cmd.global_ball_position[0] = 0;
 8003ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = 0;
 8003dde:	6323      	str	r3, [r4, #48]	; 0x30
  ai_cmd.global_robot_position[0] = 0;
 8003de0:	61e3      	str	r3, [r4, #28]
  ai_cmd.global_robot_position[1] = 0;
 8003de2:	6223      	str	r3, [r4, #32]
  ai_cmd.global_target_position[0] = 0;
 8003de4:	6263      	str	r3, [r4, #36]	; 0x24
  ai_cmd.global_target_position[1] = 0;
 8003de6:	62a3      	str	r3, [r4, #40]	; 0x28
  ai_cmd.vision_lost_flag = true;
 8003de8:	64a2      	str	r2, [r4, #72]	; 0x48
}
 8003dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connection.latest_ai_cmd_update_time = sys.system_time_ms;
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <parseRxCmd+0x290>)
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	e6d5      	b.n	8003ba0 <parseRxCmd+0x28>
 8003df4:	f3af 8000 	nop.w
 8003df8:	54442d18 	.word	0x54442d18
 8003dfc:	400921fb 	.word	0x400921fb
 8003e00:	20000f2c 	.word	0x20000f2c
 8003e04:	20000f44 	.word	0x20000f44
 8003e08:	200012f8 	.word	0x200012f8
 8003e0c:	447a0000 	.word	0x447a0000
 8003e10:	20000e48 	.word	0x20000e48
 8003e14:	20000f46 	.word	0x20000f46
 8003e18:	20000f48 	.word	0x20000f48
 8003e1c:	20000f4a 	.word	0x20000f4a
 8003e20:	20000f4c 	.word	0x20000f4c
 8003e24:	3d4ccccd 	.word	0x3d4ccccd
 8003e28:	20000fd4 	.word	0x20000fd4
 8003e2c:	20000f51 	.word	0x20000f51
 8003e30:	3a83126f 	.word	0x3a83126f
 8003e34:	20000f53 	.word	0x20000f53
 8003e38:	20000f55 	.word	0x20000f55
 8003e3c:	20000f57 	.word	0x20000f57
 8003e40:	20000f59 	.word	0x20000f59
 8003e44:	20000f5b 	.word	0x20000f5b
 8003e48:	46ea5fff 	.word	0x46ea5fff
 8003e4c:	c6ea5fff 	.word	0xc6ea5fff
 8003e50:	00000000 	.word	0x00000000

08003e54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
  static int32_t uart_rx_cmd_idx = 0;
  uint8_t rx_data_tmp;

  if (huart->Instance == USART2) {
 8003e54:	4b15      	ldr	r3, [pc, #84]	; (8003eac <HAL_UART_RxCpltCallback+0x58>)
 8003e56:	6802      	ldr	r2, [r0, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d000      	beq.n	8003e5e <HAL_UART_RxCpltCallback+0xa>
 8003e5c:	4770      	bx	lr
{
 8003e5e:	b510      	push	{r4, lr}
    rx_data_tmp = uart2_rx_it_buffer;
 8003e60:	4913      	ldr	r1, [pc, #76]	; (8003eb0 <HAL_UART_RxCpltCallback+0x5c>)
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8003e62:	4814      	ldr	r0, [pc, #80]	; (8003eb4 <HAL_UART_RxCpltCallback+0x60>)
    rx_data_tmp = uart2_rx_it_buffer;
 8003e64:	780c      	ldrb	r4, [r1, #0]
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8003e66:	2201      	movs	r2, #1
 8003e68:	f005 fb4e 	bl	8009508 <HAL_UART_Receive_IT>

    if (uart_rx_cmd_idx >= 0 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 8003e6c:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <HAL_UART_RxCpltCallback+0x64>)
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	2b3f      	cmp	r3, #63	; 0x3f
 8003e72:	d806      	bhi.n	8003e82 <HAL_UART_RxCpltCallback+0x2e>
      data_from_cm4[uart_rx_cmd_idx] = rx_data_tmp;
 8003e74:	4911      	ldr	r1, [pc, #68]	; (8003ebc <HAL_UART_RxCpltCallback+0x68>)
 8003e76:	54cc      	strb	r4, [r1, r3]
      uart_rx_cmd_idx++;
    }

    // data byte
    if (uart_rx_cmd_idx != -1 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
      uart_rx_cmd_idx++;
 8003e78:	3301      	adds	r3, #1
 8003e7a:	6013      	str	r3, [r2, #0]
    }

    // end
    if (uart_rx_cmd_idx == RX_BUF_SIZE_ETHER) {
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d00b      	beq.n	8003e98 <HAL_UART_RxCpltCallback+0x44>
      uart_rx_cmd_idx = -1;
      parseRxCmd();
      sendRobotInfo();
    }
  }
}
 8003e80:	bd10      	pop	{r4, pc}
    if (uart_rx_cmd_idx == -1 && rx_data_tmp == 254) {
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	d104      	bne.n	8003e90 <HAL_UART_RxCpltCallback+0x3c>
 8003e86:	2cfe      	cmp	r4, #254	; 0xfe
 8003e88:	d1fa      	bne.n	8003e80 <HAL_UART_RxCpltCallback+0x2c>
      uart_rx_cmd_idx++;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bd10      	pop	{r4, pc}
    if (uart_rx_cmd_idx != -1 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 8003e90:	2b3f      	cmp	r3, #63	; 0x3f
 8003e92:	dcf3      	bgt.n	8003e7c <HAL_UART_RxCpltCallback+0x28>
      uart_rx_cmd_idx++;
 8003e94:	3301      	adds	r3, #1
 8003e96:	e7f0      	b.n	8003e7a <HAL_UART_RxCpltCallback+0x26>
      uart_rx_cmd_idx = -1;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	6013      	str	r3, [r2, #0]
      parseRxCmd();
 8003e9e:	f7ff fe6b 	bl	8003b78 <parseRxCmd>
}
 8003ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sendRobotInfo();
 8003ea6:	f7ff be01 	b.w	8003aac <sendRobotInfo>
 8003eaa:	bf00      	nop
 8003eac:	40004400 	.word	0x40004400
 8003eb0:	20001340 	.word	0x20001340
 8003eb4:	20001658 	.word	0x20001658
 8003eb8:	20001344 	.word	0x20001344
 8003ebc:	20000f44 	.word	0x20000f44

08003ec0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart)
{
  if (huart->Instance == hlpuart1.Instance) {
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_UART_TxCpltCallback+0x10>)
 8003ec2:	6802      	ldr	r2, [r0, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d000      	beq.n	8003ecc <HAL_UART_TxCpltCallback+0xc>
    dma_printf_send_it(huart);
  }
}
 8003eca:	4770      	bx	lr
    dma_printf_send_it(huart);
 8003ecc:	f7fd bd92 	b.w	80019f4 <dma_printf_send_it>
 8003ed0:	200015c8 	.word	0x200015c8

08003ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed4:	b508      	push	{r3, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003ed6:	ed9f 8a14 	vldr	s16, [pc, #80]	; 8003f28 <Error_Handler+0x54>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1) {
    maintask_stop(255, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003eda:	4c14      	ldr	r4, [pc, #80]	; (8003f2c <Error_Handler+0x58>)
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003edc:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003f28 <Error_Handler+0x54>
 8003ee0:	eef0 1a48 	vmov.f32	s3, s16
 8003ee4:	eeb0 0a41 	vmov.f32	s0, s2
 8003ee8:	eef0 0a41 	vmov.f32	s1, s2
 8003eec:	f001 f8f4 	bl	80050d8 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003ef0:	eef0 0a48 	vmov.f32	s1, s16
 8003ef4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003f28 <Error_Handler+0x54>
 8003ef8:	f7fd f8ec 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003efc:	2100      	movs	r1, #0
 8003efe:	2001      	movs	r0, #1
 8003f00:	f7fd f93c 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003f04:	eeb0 0a48 	vmov.f32	s0, s16
 8003f08:	f7fd f928 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003f0c:	f7fd f914 	bl	8001138 <actuator_dribbler_down>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003f10:	4620      	mov	r0, r4
 8003f12:	2201      	movs	r2, #1
 8003f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f18:	f003 fc4a 	bl	80077b0 <HAL_GPIO_WritePin>
    actuator_buzzer(200, 200);
 8003f1c:	21c8      	movs	r1, #200	; 0xc8
 8003f1e:	4608      	mov	r0, r1
 8003f20:	f7fd f966 	bl	80011f0 <actuator_buzzer>
  while (1) {
 8003f24:	e7da      	b.n	8003edc <Error_Handler+0x8>
 8003f26:	bf00      	nop
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	48000400 	.word	0x48000400

08003f30 <SystemClock_Config>:
{
 8003f30:	b510      	push	{r4, lr}
 8003f32:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f34:	2238      	movs	r2, #56	; 0x38
 8003f36:	2100      	movs	r1, #0
 8003f38:	a806      	add	r0, sp, #24
 8003f3a:	f007 fd81 	bl	800ba40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8003f44:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003f48:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003f4a:	f003 fc41 	bl	80077d0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f54:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f56:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f5a:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003f5c:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003f5e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f60:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003f64:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f68:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f6c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003f6e:	f003 fcad 	bl	80078cc <HAL_RCC_OscConfig>
 8003f72:	b970      	cbnz	r0, 8003f92 <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003f74:	2104      	movs	r1, #4
 8003f76:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f78:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003f7a:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f7e:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f82:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f86:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003f88:	f003 ff24 	bl	8007dd4 <HAL_RCC_ClockConfig>
 8003f8c:	b908      	cbnz	r0, 8003f92 <SystemClock_Config+0x62>
}
 8003f8e:	b014      	add	sp, #80	; 0x50
 8003f90:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003f92:	f7ff ff9f 	bl	8003ed4 <Error_Handler>
 8003f96:	bf00      	nop

08003f98 <main>:
{
 8003f98:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003f9c:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8003f9e:	f001 ff2f 	bl	8005e00 <HAL_Init>
  SystemClock_Config();
 8003fa2:	f7ff ffc5 	bl	8003f30 <SystemClock_Config>
  MX_GPIO_Init();
 8003fa6:	f7fd fe95 	bl	8001cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003faa:	f7fd fcc1 	bl	8001930 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003fae:	f7fd fd85 	bl	8001abc <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8003fb2:	f001 fb69 	bl	8005688 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8003fb6:	f001 fbb5 	bl	8005724 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003fba:	f001 fbfb 	bl	80057b4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003fbe:	f001 f967 	bl	8005290 <MX_SPI1_Init>
  MX_TIM5_Init();
 8003fc2:	f001 fa91 	bl	80054e8 <MX_TIM5_Init>
  MX_TIM7_Init();
 8003fc6:	f001 fafd 	bl	80055c4 <MX_TIM7_Init>
  MX_ADC5_Init();
 8003fca:	f7fd fa0f 	bl	80013ec <MX_ADC5_Init>
  MX_ADC3_Init();
 8003fce:	f7fd f9b5 	bl	800133c <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8003fd2:	f7fd fd99 	bl	8001b08 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8003fd6:	f7fd f95b 	bl	8001290 <MX_ADC1_Init>
  integ.odom_log[0] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fde:	f001 f8f5 	bl	80051cc <initRingBuffer>
 8003fe2:	4ccd      	ldr	r4, [pc, #820]	; (8004318 <main+0x380>)
  ai_cmd.latency_time_ms = 100;
 8003fe4:	f8df b3b0 	ldr.w	fp, [pc, #944]	; 8004398 <main+0x400>
  setbuf(stdin, NULL);
 8003fe8:	4dcc      	ldr	r5, [pc, #816]	; (800431c <main+0x384>)
  integ.odom_log[0] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003fea:	4603      	mov	r3, r0
 8003fec:	6023      	str	r3, [r4, #0]
  integ.odom_log[1] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ff2:	f001 f8eb 	bl	80051cc <initRingBuffer>
  kick_state = 0;
 8003ff6:	4bca      	ldr	r3, [pc, #808]	; (8004320 <main+0x388>)
  integ.odom_log[1] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003ff8:	6060      	str	r0, [r4, #4]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003ffa:	2104      	movs	r1, #4
  kick_state = 0;
 8003ffc:	2400      	movs	r4, #0
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8003ffe:	48c9      	ldr	r0, [pc, #804]	; (8004324 <main+0x38c>)
  kick_state = 0;
 8004000:	801c      	strh	r4, [r3, #0]
  ai_cmd.latency_time_ms = 100;
 8004002:	2664      	movs	r6, #100	; 0x64
 8004004:	f8cb 6050 	str.w	r6, [fp, #80]	; 0x50
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004008:	f004 ff04 	bl	8008e14 <HAL_TIM_PWM_Start>
  actuator_buzzer_frq(1046, 50);  //C5
 800400c:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 8004328 <main+0x390>
 8004010:	2032      	movs	r0, #50	; 0x32
 8004012:	f7fd f909 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 8004016:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 800432c <main+0x394>
 800401a:	2032      	movs	r0, #50	; 0x32
 800401c:	f7fd f904 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1318, 50);  //E5
 8004020:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8004330 <main+0x398>
 8004024:	2032      	movs	r0, #50	; 0x32
 8004026:	f7fd f8ff 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1396, 50);  //F5
 800402a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8004334 <main+0x39c>
 800402e:	2032      	movs	r0, #50	; 0x32
 8004030:	f7fd f8fa 	bl	8001228 <actuator_buzzer_frq>
  setbuf(stdin, NULL);
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	4621      	mov	r1, r4
 8004038:	6858      	ldr	r0, [r3, #4]
 800403a:	f007 fb51 	bl	800b6e0 <setbuf>
  setbuf(stdout, NULL);
 800403e:	682b      	ldr	r3, [r5, #0]
 8004040:	4621      	mov	r1, r4
 8004042:	6898      	ldr	r0, [r3, #8]
 8004044:	f007 fb4c 	bl	800b6e0 <setbuf>
  setbuf(stderr, NULL);
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	4621      	mov	r1, r4
 800404c:	68d8      	ldr	r0, [r3, #12]
 800404e:	f007 fb47 	bl	800b6e0 <setbuf>
  dma_printf_init(&hlpuart1);
 8004052:	48b9      	ldr	r0, [pc, #740]	; (8004338 <main+0x3a0>)
 8004054:	f7fd fcbe 	bl	80019d4 <dma_printf_init>
  dma_scanf_init(&hlpuart1);
 8004058:	48b7      	ldr	r0, [pc, #732]	; (8004338 <main+0x3a0>)
 800405a:	f7fd fd1b 	bl	8001a94 <dma_scanf_init>
  printf("start\r\n");
 800405e:	48b7      	ldr	r0, [pc, #732]	; (800433c <main+0x3a4>)
 8004060:	f007 fb36 	bl	800b6d0 <puts>
  HAL_UART_Init(&hlpuart1);
 8004064:	48b4      	ldr	r0, [pc, #720]	; (8004338 <main+0x3a0>)
 8004066:	f006 fb71 	bl	800a74c <HAL_UART_Init>
  HAL_UART_Init(&huart2);
 800406a:	48b5      	ldr	r0, [pc, #724]	; (8004340 <main+0x3a8>)
 800406c:	f006 fb6e 	bl	800a74c <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8004070:	49b4      	ldr	r1, [pc, #720]	; (8004344 <main+0x3ac>)
 8004072:	48b3      	ldr	r0, [pc, #716]	; (8004340 <main+0x3a8>)
 8004074:	2201      	movs	r2, #1
 8004076:	f005 fa47 	bl	8009508 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc5, &adc_sw_data, 1);
 800407a:	49b3      	ldr	r1, [pc, #716]	; (8004348 <main+0x3b0>)
 800407c:	48b3      	ldr	r0, [pc, #716]	; (800434c <main+0x3b4>)
 800407e:	2201      	movs	r2, #1
 8004080:	f002 fb2a 	bl	80066d8 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8004084:	48b2      	ldr	r0, [pc, #712]	; (8004350 <main+0x3b8>)
 8004086:	2201      	movs	r2, #1
 8004088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800408c:	f003 fb90 	bl	80077b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8004090:	2201      	movs	r2, #1
 8004092:	4611      	mov	r1, r2
 8004094:	48ae      	ldr	r0, [pc, #696]	; (8004350 <main+0x3b8>)
 8004096:	f003 fb8b 	bl	80077b0 <HAL_GPIO_WritePin>
  ICM20602_init();
 800409a:	f7fd feb7 	bl	8001e0c <ICM20602_init>
  ICM20602_init();
 800409e:	f7fd feb5 	bl	8001e0c <ICM20602_init>
  ICM20602_IMU_calibration2();
 80040a2:	f7fe f9fd 	bl	80024a0 <ICM20602_IMU_calibration2>
  ICM20602_clearAngle();
 80040a6:	f7fd ffa7 	bl	8001ff8 <ICM20602_clearAngle>
  printf("\n\rcomplete imu init\r\n");
 80040aa:	48aa      	ldr	r0, [pc, #680]	; (8004354 <main+0x3bc>)
 80040ac:	f007 fb10 	bl	800b6d0 <puts>
  can1_init_ibis(&hfdcan1);
 80040b0:	48a9      	ldr	r0, [pc, #676]	; (8004358 <main+0x3c0>)
 80040b2:	f7fd facd 	bl	8001650 <can1_init_ibis>
  can2_init_ibis(&hfdcan2);
 80040b6:	48a9      	ldr	r0, [pc, #676]	; (800435c <main+0x3c4>)
 80040b8:	f7fd fb1a 	bl	80016f0 <can2_init_ibis>
  printf("\n\rstart can\r\n");
 80040bc:	48a8      	ldr	r0, [pc, #672]	; (8004360 <main+0x3c8>)
 80040be:	f007 fb07 	bl	800b6d0 <puts>
  HAL_FDCAN_Start(&hfdcan1);
 80040c2:	48a5      	ldr	r0, [pc, #660]	; (8004358 <main+0x3c0>)
 80040c4:	f003 f820 	bl	8007108 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80040c8:	48a3      	ldr	r0, [pc, #652]	; (8004358 <main+0x3c0>)
 80040ca:	4622      	mov	r2, r4
 80040cc:	2101      	movs	r1, #1
 80040ce:	f003 f923 	bl	8007318 <HAL_FDCAN_ActivateNotification>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	f040 811a 	bne.w	800430c <main+0x374>
  HAL_FDCAN_Start(&hfdcan2);
 80040d8:	4604      	mov	r4, r0
 80040da:	48a0      	ldr	r0, [pc, #640]	; (800435c <main+0x3c4>)
 80040dc:	f003 f814 	bl	8007108 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80040e0:	4622      	mov	r2, r4
 80040e2:	489e      	ldr	r0, [pc, #632]	; (800435c <main+0x3c4>)
 80040e4:	2101      	movs	r1, #1
 80040e6:	f003 f917 	bl	8007318 <HAL_FDCAN_ActivateNotification>
 80040ea:	4604      	mov	r4, r0
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f040 810d 	bne.w	800430c <main+0x374>
  actuator_power_ONOFF(0);
 80040f2:	f7fd f859 	bl	80011a8 <actuator_power_ONOFF>
  HAL_Delay(20);
 80040f6:	2014      	movs	r0, #20
 80040f8:	f001 fe9e 	bl	8005e38 <HAL_Delay>
  actuator_motor1(0.0, 0.0);
 80040fc:	eddf 0a99 	vldr	s1, [pc, #612]	; 8004364 <main+0x3cc>
  sys.system_time_ms = 0;
 8004100:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800439c <main+0x404>
      if (fabs(debug.true_yaw_speed - debug.true_fb_toral_spin) > 100 && fabs(ai_cmd.target_theta - imu.yaw_angle) > 5) {
 8004104:	ed9f 8a98 	vldr	s16, [pc, #608]	; 8004368 <main+0x3d0>
          p("omni X %+8.3f Y %+8.3f ", omni.odom[0] * 1000, omni.odom[1] * 1000);
 8004108:	eddf 8a98 	vldr	s17, [pc, #608]	; 800436c <main+0x3d4>
 800410c:	f8df a290 	ldr.w	sl, [pc, #656]	; 80043a0 <main+0x408>
 8004110:	4d97      	ldr	r5, [pc, #604]	; (8004370 <main+0x3d8>)
 8004112:	4f98      	ldr	r7, [pc, #608]	; (8004374 <main+0x3dc>)
 8004114:	f8df 828c 	ldr.w	r8, [pc, #652]	; 80043a4 <main+0x40c>
  actuator_motor1(0.0, 0.0);
 8004118:	eeb0 0a60 	vmov.f32	s0, s1
 800411c:	f7fc ff5a 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 8004120:	eddf 0a90 	vldr	s1, [pc, #576]	; 8004364 <main+0x3cc>
 8004124:	eeb0 0a60 	vmov.f32	s0, s1
 8004128:	f7fc ff74 	bl	8001014 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 800412c:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8004364 <main+0x3cc>
 8004130:	eeb0 0a60 	vmov.f32	s0, s1
 8004134:	f7fc ff8e 	bl	8001054 <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 8004138:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8004364 <main+0x3cc>
 800413c:	eeb0 0a60 	vmov.f32	s0, s1
 8004140:	f7fc ffa8 	bl	8001094 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 8004144:	eddf 0a87 	vldr	s1, [pc, #540]	; 8004364 <main+0x3cc>
 8004148:	eeb0 0a60 	vmov.f32	s0, s1
 800414c:	f7fc ffc2 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 1);
 8004150:	2101      	movs	r1, #1
 8004152:	4608      	mov	r0, r1
 8004154:	f7fd f812 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8004158:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8004364 <main+0x3cc>
 800415c:	f7fc fffe 	bl	800115c <actuator_kicker_voltage>
  actuator_power_param(1, 15.0);  // min voltage
 8004160:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8004164:	2001      	movs	r0, #1
 8004166:	f7fd f833 	bl	80011d0 <actuator_power_param>
  actuator_power_param(2, 35.0);  // max voltage
 800416a:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8004378 <main+0x3e0>
 800416e:	2002      	movs	r0, #2
 8004170:	f7fd f82e 	bl	80011d0 <actuator_power_param>
  actuator_power_param(3, 50.0);  // max can_raw.current
 8004174:	ed9f 0a81 	vldr	s0, [pc, #516]	; 800437c <main+0x3e4>
 8004178:	2003      	movs	r0, #3
 800417a:	f7fd f829 	bl	80011d0 <actuator_power_param>
  actuator_power_param(4, 90.0);  // max temp(fet)
 800417e:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8004380 <main+0x3e8>
 8004182:	2004      	movs	r0, #4
 8004184:	f7fd f824 	bl	80011d0 <actuator_power_param>
  actuator_power_param(5, 90.0);  // max temp(solenoid)
 8004188:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004380 <main+0x3e8>
 800418c:	2005      	movs	r0, #5
 800418e:	f7fd f81f 	bl	80011d0 <actuator_power_param>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8004192:	4622      	mov	r2, r4
 8004194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004198:	486d      	ldr	r0, [pc, #436]	; (8004350 <main+0x3b8>)
 800419a:	f003 fb09 	bl	80077b0 <HAL_GPIO_WritePin>
  actuator_power_ONOFF(1);
 800419e:	2001      	movs	r0, #1
 80041a0:	f7fd f802 	bl	80011a8 <actuator_power_ONOFF>
  actuator_buzzer_frq(1046, 50);  //C5
 80041a4:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8004328 <main+0x390>
 80041a8:	2032      	movs	r0, #50	; 0x32
 80041aa:	f7fd f83d 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 80041ae:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800432c <main+0x394>
 80041b2:	2032      	movs	r0, #50	; 0x32
 80041b4:	f7fd f838 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1046, 50);  //C5
 80041b8:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8004328 <main+0x390>
 80041bc:	2032      	movs	r0, #50	; 0x32
 80041be:	f7fd f833 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 80041c2:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 800432c <main+0x394>
 80041c6:	2032      	movs	r0, #50	; 0x32
 80041c8:	f7fd f82e 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1318, 50);  //E5
 80041cc:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8004330 <main+0x398>
 80041d0:	2032      	movs	r0, #50	; 0x32
 80041d2:	f7fd f829 	bl	8001228 <actuator_buzzer_frq>
  actuator_buzzer_frq(1396, 50);  //F5
 80041d6:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8004334 <main+0x39c>
 80041da:	2032      	movs	r0, #50	; 0x32
 80041dc:	f7fd f824 	bl	8001228 <actuator_buzzer_frq>
  sys.stop_flag_request_time = 1000;  // !!注意!! TIM7の割り込みがはじまってから1000ms間停止
 80041e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  HAL_Delay(100);
 80041e4:	4630      	mov	r0, r6
  sys.stop_flag_request_time = 1000;  // !!注意!! TIM7の割り込みがはじまってから1000ms間停止
 80041e6:	e9c9 4304 	strd	r4, r3, [r9, #16]
  HAL_Delay(100);
 80041ea:	f001 fe25 	bl	8005e38 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 80041ee:	4865      	ldr	r0, [pc, #404]	; (8004384 <main+0x3ec>)
 80041f0:	4c65      	ldr	r4, [pc, #404]	; (8004388 <main+0x3f0>)
 80041f2:	4e66      	ldr	r6, [pc, #408]	; (800438c <main+0x3f4>)
 80041f4:	f004 fd32 	bl	8008c5c <HAL_TIM_Base_Start_IT>
  HAL_Delay(500);
 80041f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041fc:	f001 fe1c 	bl	8005e38 <HAL_Delay>
    debug.main_loop_cnt++;
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	6023      	str	r3, [r4, #0]
    if (debug.print_flag) {
 8004206:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f8      	beq.n	8004200 <main+0x268>
      if (can_raw.power_voltage[5] < 22) {
 800420e:	edd5 7a11 	vldr	s15, [r5, #68]	; 0x44
 8004212:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8004216:	eef4 7ac7 	vcmpe.f32	s15, s14
      debug.print_flag = false;
 800421a:	2300      	movs	r3, #0
      if (can_raw.power_voltage[5] < 22) {
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      debug.print_flag = false;
 8004220:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
      printf_buffer[0] = 0;
 8004224:	f88a 3000 	strb.w	r3, [sl]
      if (can_raw.power_voltage[5] < 22) {
 8004228:	f100 8368 	bmi.w	80048fc <main+0x964>
      p("yaw=%+6.1f ", imu.yaw_angle);
 800422c:	6838      	ldr	r0, [r7, #0]
 800422e:	f7fc f9b3 	bl	8000598 <__aeabi_f2d>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4856      	ldr	r0, [pc, #344]	; (8004390 <main+0x3f8>)
 8004238:	f7fe face 	bl	80027d8 <p>
      p("Batt=%3.1f ", can_raw.power_voltage[5]);
 800423c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800423e:	f7fc f9ab 	bl	8000598 <__aeabi_f2d>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4853      	ldr	r0, [pc, #332]	; (8004394 <main+0x3fc>)
 8004248:	f7fe fac6 	bl	80027d8 <p>
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 800424c:	edd6 7a07 	vldr	s15, [r6, #28]
 8004250:	ed96 6a08 	vldr	s12, [r6, #32]
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 8004254:	edd5 6a03 	vldr	s13, [r5, #12]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8004258:	edd6 5a09 	vldr	s11, [r6, #36]	; 0x24
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 800425c:	ed95 7a02 	vldr	s14, [r5, #8]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8004260:	ee77 7a86 	vadd.f32	s15, s15, s12
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 8004264:	ee37 7a26 	vadd.f32	s14, s14, s13
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8004268:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 800426c:	edd5 6a04 	vldr	s13, [r5, #16]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8004270:	ee77 7aa5 	vadd.f32	s15, s15, s11
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 8004274:	ee37 7a26 	vadd.f32	s14, s14, s13
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8004278:	ee77 7a86 	vadd.f32	s15, s15, s12
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 800427c:	edd5 6a05 	vldr	s13, [r5, #20]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8004280:	edc4 7a04 	vstr	s15, [r4, #16]
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 8004284:	ee77 7a26 	vadd.f32	s15, s14, s13
 8004288:	ee17 0a90 	vmov	r0, s15
 800428c:	f7fc f984 	bl	8000598 <__aeabi_f2d>
 8004290:	a31f      	add	r3, pc, #124	; (adr r3, 8004310 <main+0x378>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f7fc f9d7 	bl	8000648 <__aeabi_dmul>
 800429a:	f7fc fccd 	bl	8000c38 <__aeabi_d2f>
 800429e:	6160      	str	r0, [r4, #20]
      debug.true_yaw_speed = imu.yaw_angle - debug.pre_yaw_angle;
 80042a0:	edd4 7a06 	vldr	s15, [r4, #24]
 80042a4:	ed97 7a00 	vldr	s14, [r7]
 80042a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ac:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
      if (fabs(debug.true_yaw_speed - debug.true_fb_toral_spin) > 100 && fabs(ai_cmd.target_theta - imu.yaw_angle) > 5) {
 80042b0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80042b4:	edd4 6a08 	vldr	s13, [r4, #32]
 80042b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80042bc:	eef0 7ae7 	vabs.f32	s15, s15
 80042c0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80042c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c8:	dd0c      	ble.n	80042e4 <main+0x34c>
 80042ca:	eddb 7a00 	vldr	s15, [fp]
 80042ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042d2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80042d6:	eef0 7ae7 	vabs.f32	s15, s15
 80042da:	eef4 7ae6 	vcmpe.f32	s15, s13
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	dc02      	bgt.n	80042ea <main+0x352>
        debug.acc_step_down_flag = false;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      switch (sys.main_mode) {
 80042ea:	f899 300c 	ldrb.w	r3, [r9, #12]
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	f200 8103 	bhi.w	80044fa <main+0x562>
 80042f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042f8:	00580058 	.word	0x00580058
 80042fc:	02920058 	.word	0x02920058
 8004300:	023c0273 	.word	0x023c0273
 8004304:	012b0198 	.word	0x012b0198
 8004308:	011d0101 	.word	0x011d0101
    Error_Handler();
 800430c:	f7ff fde2 	bl	8003ed4 <Error_Handler>
 8004310:	55555555 	.word	0x55555555
 8004314:	3fe55555 	.word	0x3fe55555
 8004318:	20000fd4 	.word	0x20000fd4
 800431c:	2000006c 	.word	0x2000006c
 8004320:	20001014 	.word	0x20001014
 8004324:	200013b0 	.word	0x200013b0
 8004328:	4482c000 	.word	0x4482c000
 800432c:	4492c000 	.word	0x4492c000
 8004330:	44a4c000 	.word	0x44a4c000
 8004334:	44ae8000 	.word	0x44ae8000
 8004338:	200015c8 	.word	0x200015c8
 800433c:	0800ed54 	.word	0x0800ed54
 8004340:	20001658 	.word	0x20001658
 8004344:	20001340 	.word	0x20001340
 8004348:	20000e44 	.word	0x20000e44
 800434c:	200002e8 	.word	0x200002e8
 8004350:	48000800 	.word	0x48000800
 8004354:	0800ed5c 	.word	0x0800ed5c
 8004358:	20000cc4 	.word	0x20000cc4
 800435c:	20000d28 	.word	0x20000d28
 8004360:	0800ed74 	.word	0x0800ed74
 8004364:	00000000 	.word	0x00000000
 8004368:	42c80000 	.word	0x42c80000
 800436c:	447a0000 	.word	0x447a0000
 8004370:	20000ea8 	.word	0x20000ea8
 8004374:	20000fc0 	.word	0x20000fc0
 8004378:	420c0000 	.word	0x420c0000
 800437c:	42480000 	.word	0x42480000
 8004380:	42b40000 	.word	0x42b40000
 8004384:	200013fc 	.word	0x200013fc
 8004388:	20000f84 	.word	0x20000f84
 800438c:	200010d0 	.word	0x200010d0
 8004390:	0800ed9c 	.word	0x0800ed9c
 8004394:	0800eda8 	.word	0x0800eda8
 8004398:	20000e48 	.word	0x20000e48
 800439c:	200012f8 	.word	0x200012f8
 80043a0:	20001100 	.word	0x20001100
 80043a4:	20001050 	.word	0x20001050
          if (connection.connected_ai) {
 80043a8:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <main+0x640>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 82bb 	bne.w	8004928 <main+0x990>
          } else if (connection.connected_cm4) {
 80043b2:	4a89      	ldr	r2, [pc, #548]	; (80045d8 <main+0x640>)
 80043b4:	7853      	ldrb	r3, [r2, #1]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 82aa 	beq.w	8004910 <main+0x978>
            p("\e[33m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 80043bc:	6850      	ldr	r0, [r2, #4]
 80043be:	f7fc f8eb 	bl	8000598 <__aeabi_f2d>
 80043c2:	460b      	mov	r3, r1
 80043c4:	4984      	ldr	r1, [pc, #528]	; (80045d8 <main+0x640>)
 80043c6:	4602      	mov	r2, r0
 80043c8:	78c9      	ldrb	r1, [r1, #3]
 80043ca:	4884      	ldr	r0, [pc, #528]	; (80045dc <main+0x644>)
 80043cc:	f7fe fa04 	bl	80027d8 <p>
          p("AIcmd Vx %+4.1f Vy %+4.1f Tw %+6.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta * 180 / M_PI);
 80043d0:	f8db 0014 	ldr.w	r0, [fp, #20]
 80043d4:	ed9f 9a82 	vldr	s18, [pc, #520]	; 80045e0 <main+0x648>
 80043d8:	f7fc f8de 	bl	8000598 <__aeabi_f2d>
 80043dc:	eddb 7a00 	vldr	s15, [fp]
 80043e0:	ee67 7a89 	vmul.f32	s15, s15, s18
 80043e4:	ec41 0b1a 	vmov	d10, r0, r1
 80043e8:	ee17 0a90 	vmov	r0, s15
 80043ec:	f7fc f8d4 	bl	8000598 <__aeabi_f2d>
 80043f0:	a375      	add	r3, pc, #468	; (adr r3, 80045c8 <main+0x630>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fc f927 	bl	8000648 <__aeabi_dmul>
 80043fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043fe:	f8db 0018 	ldr.w	r0, [fp, #24]
 8004402:	f7fc f8c9 	bl	8000598 <__aeabi_f2d>
 8004406:	ec53 2b1a 	vmov	r2, r3, d10
 800440a:	e9cd 0100 	strd	r0, r1, [sp]
 800440e:	4875      	ldr	r0, [pc, #468]	; (80045e4 <main+0x64c>)
 8004410:	f7fe f9e2 	bl	80027d8 <p>
          if (sys.main_mode != 2) {
 8004414:	f899 300c 	ldrb.w	r3, [r9, #12]
 8004418:	2b02      	cmp	r3, #2
 800441a:	f000 82c5 	beq.w	80049a8 <main+0xa10>
            if (ai_cmd.vision_lost_flag) {  // SSL-Vision (Robot)
 800441e:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 828c 	bne.w	8004940 <main+0x9a8>
            p("Vision X %+6.1f Y %+6.1f W %+4.1f ", ai_cmd.global_robot_position[0] * 1000, ai_cmd.global_robot_position[1] * 1000, ai_cmd.global_vision_theta);
 8004428:	eddb 7a07 	vldr	s15, [fp, #28]
 800442c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004430:	ee17 0a90 	vmov	r0, s15
 8004434:	f7fc f8b0 	bl	8000598 <__aeabi_f2d>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8004440:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004444:	f7fc f8a8 	bl	8000598 <__aeabi_f2d>
 8004448:	eddb 7a08 	vldr	s15, [fp, #32]
 800444c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004454:	ee17 0a90 	vmov	r0, s15
 8004458:	f7fc f89e 	bl	8000598 <__aeabi_f2d>
 800445c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004460:	e9cd 0100 	strd	r0, r1, [sp]
 8004464:	4860      	ldr	r0, [pc, #384]	; (80045e8 <main+0x650>)
 8004466:	f7fe f9b7 	bl	80027d8 <p>
            p("AIcmd X %+6.2f Y %+6.2f ", ai_cmd.global_target_position[0], ai_cmd.global_target_position[1]);
 800446a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 800446e:	f7fc f893 	bl	8000598 <__aeabi_f2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
 800447a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800447e:	f7fc f88b 	bl	8000598 <__aeabi_f2d>
 8004482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004486:	e9cd 0100 	strd	r0, r1, [sp]
 800448a:	4858      	ldr	r0, [pc, #352]	; (80045ec <main+0x654>)
 800448c:	f7fe f9a4 	bl	80027d8 <p>
            p("Wdidd %+5.1f", (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180 / M_PI));
 8004490:	ed97 7a00 	vldr	s14, [r7]
 8004494:	eddf 7a56 	vldr	s15, [pc, #344]	; 80045f0 <main+0x658>
 8004498:	eddb 0a01 	vldr	s1, [fp, #4]
 800449c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a0:	edcd 0a06 	vstr	s1, [sp, #24]
 80044a4:	ee17 0a90 	vmov	r0, s15
 80044a8:	f7fc f876 	bl	8000598 <__aeabi_f2d>
 80044ac:	a348      	add	r3, pc, #288	; (adr r3, 80045d0 <main+0x638>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f8c9 	bl	8000648 <__aeabi_dmul>
 80044b6:	f7fc fbbf 	bl	8000c38 <__aeabi_d2f>
 80044ba:	eddd 0a06 	vldr	s1, [sp, #24]
 80044be:	ee00 0a10 	vmov	s0, r0
 80044c2:	f001 fb15 	bl	8005af0 <getAngleDiff>
 80044c6:	eddf 7a46 	vldr	s15, [pc, #280]	; 80045e0 <main+0x648>
 80044ca:	ee60 7a27 	vmul.f32	s15, s0, s15
 80044ce:	ee17 0a90 	vmov	r0, s15
 80044d2:	f7fc f861 	bl	8000598 <__aeabi_f2d>
 80044d6:	a33c      	add	r3, pc, #240	; (adr r3, 80045c8 <main+0x630>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fc f8b4 	bl	8000648 <__aeabi_dmul>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4843      	ldr	r0, [pc, #268]	; (80045f4 <main+0x65c>)
 80044e6:	f7fe f977 	bl	80027d8 <p>
            p("\e[37m ");  // end color
 80044ea:	4843      	ldr	r0, [pc, #268]	; (80045f8 <main+0x660>)
 80044ec:	f7fe f974 	bl	80027d8 <p>
            p("update %d ", debug.theta_override_flag);
 80044f0:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80044f4:	4841      	ldr	r0, [pc, #260]	; (80045fc <main+0x664>)
 80044f6:	f7fe f96f 	bl	80027d8 <p>
      if (debug.main_loop_cnt < 100000) {
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	4b40      	ldr	r3, [pc, #256]	; (8004600 <main+0x668>)
 80044fe:	429a      	cmp	r2, r3
 8004500:	d803      	bhi.n	800450a <main+0x572>
        p("loop %6d", debug.main_loop_cnt);
 8004502:	6821      	ldr	r1, [r4, #0]
 8004504:	483f      	ldr	r0, [pc, #252]	; (8004604 <main+0x66c>)
 8004506:	f7fe f967 	bl	80027d8 <p>
      p("\n");
 800450a:	483f      	ldr	r0, [pc, #252]	; (8004608 <main+0x670>)
 800450c:	f7fe f964 	bl	80027d8 <p>
      HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)printf_buffer, strlen(printf_buffer));
 8004510:	4650      	mov	r0, sl
 8004512:	f7fb fed5 	bl	80002c0 <strlen>
 8004516:	4651      	mov	r1, sl
 8004518:	b282      	uxth	r2, r0
 800451a:	483c      	ldr	r0, [pc, #240]	; (800460c <main+0x674>)
 800451c:	f005 f8c0 	bl	80096a0 <HAL_UART_Transmit_DMA>
      debug.true_fb_toral_spin = 0;
 8004520:	2300      	movs	r3, #0
      debug.main_loop_cnt = 0;
 8004522:	2200      	movs	r2, #0
      debug.pre_yaw_angle = imu.yaw_angle;
 8004524:	6839      	ldr	r1, [r7, #0]
      debug.main_loop_cnt = 0;
 8004526:	6022      	str	r2, [r4, #0]
      debug.pre_yaw_angle = imu.yaw_angle;
 8004528:	61a1      	str	r1, [r4, #24]
      debug.true_cycle_cnt = 0;
 800452a:	6062      	str	r2, [r4, #4]
      debug.true_fb_toral_spin = 0;
 800452c:	6223      	str	r3, [r4, #32]
      debug.true_out_total_spi = 0;
 800452e:	61e3      	str	r3, [r4, #28]
 8004530:	e666      	b.n	8004200 <main+0x268>
          p("\e[31m error : ID %5d / Info %5d / Value %+8.3f \e[31m", sys.error_id, sys.error_info, sys.error_value);
 8004532:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8004536:	f7fc f82f 	bl	8000598 <__aeabi_f2d>
 800453a:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800453e:	e9cd 0100 	strd	r0, r1, [sp]
 8004542:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 8004546:	4832      	ldr	r0, [pc, #200]	; (8004610 <main+0x678>)
 8004548:	f7fe f946 	bl	80027d8 <p>
          break;
 800454c:	e7d5      	b.n	80044fa <main+0x562>
          p("ENC %+4.1f %+4.1f %+4.1f %+4.1f ", motor.enc_angle[0], motor.enc_angle[1], motor.enc_angle[2], motor.enc_angle[3]);
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <main+0x67c>)
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f7fc f821 	bl	8000598 <__aeabi_f2d>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <main+0x67c>)
 8004560:	68d8      	ldr	r0, [r3, #12]
 8004562:	f7fc f819 	bl	8000598 <__aeabi_f2d>
 8004566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <main+0x67c>)
 800456c:	6898      	ldr	r0, [r3, #8]
 800456e:	f7fc f813 	bl	8000598 <__aeabi_f2d>
 8004572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <main+0x67c>)
 8004578:	6858      	ldr	r0, [r3, #4]
 800457a:	f7fc f80d 	bl	8000598 <__aeabi_f2d>
 800457e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004582:	e9cd 0100 	strd	r0, r1, [sp]
 8004586:	4824      	ldr	r0, [pc, #144]	; (8004618 <main+0x680>)
 8004588:	f7fe f926 	bl	80027d8 <p>
          p("omni X %+8.3f Y %+8.3f ", omni.odom[0] * 1000, omni.odom[1] * 1000);
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <main+0x684>)
 800458e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004592:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004596:	ee17 0a90 	vmov	r0, s15
 800459a:	f7fb fffd 	bl	8000598 <__aeabi_f2d>
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <main+0x684>)
 80045a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80045a4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	ee17 0a90 	vmov	r0, s15
 80045b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045b4:	f7fb fff0 	bl	8000598 <__aeabi_f2d>
 80045b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045bc:	e9cd 0100 	strd	r0, r1, [sp]
 80045c0:	4817      	ldr	r0, [pc, #92]	; (8004620 <main+0x688>)
 80045c2:	f7fe f909 	bl	80027d8 <p>
          break;
 80045c6:	e798      	b.n	80044fa <main+0x562>
 80045c8:	6dc9c883 	.word	0x6dc9c883
 80045cc:	3fd45f30 	.word	0x3fd45f30
 80045d0:	16c16c17 	.word	0x16c16c17
 80045d4:	3f76c16c 	.word	0x3f76c16c
 80045d8:	20000f2c 	.word	0x20000f2c
 80045dc:	0800edcc 	.word	0x0800edcc
 80045e0:	43340000 	.word	0x43340000
 80045e4:	0800edfc 	.word	0x0800edfc
 80045e8:	0800ee2c 	.word	0x0800ee2c
 80045ec:	0800ee50 	.word	0x0800ee50
 80045f0:	40490fdb 	.word	0x40490fdb
 80045f4:	0800ee6c 	.word	0x0800ee6c
 80045f8:	0800ee7c 	.word	0x0800ee7c
 80045fc:	0800ee84 	.word	0x0800ee84
 8004600:	0001869f 	.word	0x0001869f
 8004604:	0800f160 	.word	0x0800f160
 8004608:	0800f16c 	.word	0x0800f16c
 800460c:	200015c8 	.word	0x200015c8
 8004610:	0800f128 	.word	0x0800f128
 8004614:	20001018 	.word	0x20001018
 8004618:	0800f104 	.word	0x0800f104
 800461c:	20001090 	.word	0x20001090
 8004620:	0800ee90 	.word	0x0800ee90
 8004624:	c47a0000 	.word	0xc47a0000
          p("raw_odom X %+8.3f Y %+8.3f ", -mouse.raw_odom[0] * 1000, -mouse.raw_odom[1] * 1000);
 8004628:	ed1f 9a02 	vldr	s18, [pc, #-8]	; 8004624 <main+0x68c>
 800462c:	edd8 7a02 	vldr	s15, [r8, #8]
 8004630:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004634:	ee17 0a90 	vmov	r0, s15
 8004638:	f7fb ffae 	bl	8000598 <__aeabi_f2d>
 800463c:	edd8 7a03 	vldr	s15, [r8, #12]
 8004640:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	ee17 0a90 	vmov	r0, s15
 800464c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004650:	f7fb ffa2 	bl	8000598 <__aeabi_f2d>
 8004654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004658:	e9cd 0100 	strd	r0, r1, [sp]
 800465c:	48ba      	ldr	r0, [pc, #744]	; (8004948 <main+0x9b0>)
 800465e:	f7fe f8bb 	bl	80027d8 <p>
          p("mouse floor X %+8.3f Y %+8.3f ", -mouse.floor_odom[0] * 1000, -mouse.floor_odom[1] * 1000);
 8004662:	edd8 7a04 	vldr	s15, [r8, #16]
 8004666:	ee67 7a89 	vmul.f32	s15, s15, s18
 800466a:	ee17 0a90 	vmov	r0, s15
 800466e:	f7fb ff93 	bl	8000598 <__aeabi_f2d>
 8004672:	edd8 7a05 	vldr	s15, [r8, #20]
 8004676:	ee67 7a89 	vmul.f32	s15, s15, s18
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	ee17 0a90 	vmov	r0, s15
 8004682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004686:	f7fb ff87 	bl	8000598 <__aeabi_f2d>
 800468a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800468e:	e9cd 0100 	strd	r0, r1, [sp]
 8004692:	48ae      	ldr	r0, [pc, #696]	; (800494c <main+0x9b4>)
 8004694:	f7fe f8a0 	bl	80027d8 <p>
          p("mouse X %+8.3f Y %+8.3f ", -mouse.odom[0] * 1000, -mouse.odom[1] * 1000);
 8004698:	edd8 7a06 	vldr	s15, [r8, #24]
 800469c:	ee67 7a89 	vmul.f32	s15, s15, s18
 80046a0:	ee17 0a90 	vmov	r0, s15
 80046a4:	f7fb ff78 	bl	8000598 <__aeabi_f2d>
 80046a8:	edd8 7a07 	vldr	s15, [r8, #28]
 80046ac:	ee67 7a89 	vmul.f32	s15, s15, s18
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	ee17 0a90 	vmov	r0, s15
 80046b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046bc:	f7fb ff6c 	bl	8000598 <__aeabi_f2d>
 80046c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046c4:	e9cd 0100 	strd	r0, r1, [sp]
 80046c8:	48a1      	ldr	r0, [pc, #644]	; (8004950 <main+0x9b8>)
 80046ca:	f7fe f885 	bl	80027d8 <p>
          p("Error X %+8.3f Y %+8.3f ", (omni.odom[0] + mouse.odom[0]) * 1000, (omni.odom[1] + mouse.odom[1]) * 1000);
 80046ce:	4ba1      	ldr	r3, [pc, #644]	; (8004954 <main+0x9bc>)
 80046d0:	ed98 7a06 	vldr	s14, [r8, #24]
 80046d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80046d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046dc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80046e0:	ee17 0a90 	vmov	r0, s15
 80046e4:	f7fb ff58 	bl	8000598 <__aeabi_f2d>
 80046e8:	4b9a      	ldr	r3, [pc, #616]	; (8004954 <main+0x9bc>)
 80046ea:	ed98 7a07 	vldr	s14, [r8, #28]
 80046ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80046f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046f6:	4602      	mov	r2, r0
 80046f8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80046fc:	460b      	mov	r3, r1
 80046fe:	ee17 0a90 	vmov	r0, s15
 8004702:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004706:	f7fb ff47 	bl	8000598 <__aeabi_f2d>
 800470a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800470e:	e9cd 0100 	strd	r0, r1, [sp]
 8004712:	4891      	ldr	r0, [pc, #580]	; (8004958 <main+0x9c0>)
 8004714:	f7fe f860 	bl	80027d8 <p>
          p("diff X %+8.3f Y %+8.3f ", mouse.raw_diff[0] * 1000, mouse.raw_diff[1] * 1000);
 8004718:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 800471c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004720:	ee17 0a90 	vmov	r0, s15
 8004724:	f7fb ff38 	bl	8000598 <__aeabi_f2d>
 8004728:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 800472c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	ee17 0a90 	vmov	r0, s15
 8004738:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800473c:	f7fb ff2c 	bl	8000598 <__aeabi_f2d>
 8004740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004744:	e9cd 0100 	strd	r0, r1, [sp]
 8004748:	4884      	ldr	r0, [pc, #528]	; (800495c <main+0x9c4>)
 800474a:	f7fe f845 	bl	80027d8 <p>
          p("mouseRaw X %+8.1f %+8.1f ", mouse.raw[0], mouse.raw[1]);
 800474e:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 8004752:	f9b8 1020 	ldrsh.w	r1, [r8, #32]
 8004756:	4882      	ldr	r0, [pc, #520]	; (8004960 <main+0x9c8>)
 8004758:	f7fe f83e 	bl	80027d8 <p>
          p("raw X %+4d %+4d %6d", mouse.raw[0], mouse.raw[1], mouse.quality);
 800475c:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8004760:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 8004764:	f9b8 1020 	ldrsh.w	r1, [r8, #32]
 8004768:	487e      	ldr	r0, [pc, #504]	; (8004964 <main+0x9cc>)
 800476a:	f7fe f835 	bl	80027d8 <p>
          break;
 800476e:	e6c4      	b.n	80044fa <main+0x562>
          p("Batt(Pw) %3.1f Cap=%3.0f BattC %+6.1f Batt(Sub) %3.1f ", can_raw.power_voltage[5], can_raw.power_voltage[6], can_raw.current[4], can_raw.power_voltage[4]);
 8004770:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8004772:	f7fb ff11 	bl	8000598 <__aeabi_f2d>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800477c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004780:	f7fb ff0a 	bl	8000598 <__aeabi_f2d>
 8004784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004788:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 800478a:	f7fb ff05 	bl	8000598 <__aeabi_f2d>
 800478e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004792:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8004794:	f7fb ff00 	bl	8000598 <__aeabi_f2d>
 8004798:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800479c:	e9cd 0100 	strd	r0, r1, [sp]
 80047a0:	4871      	ldr	r0, [pc, #452]	; (8004968 <main+0x9d0>)
 80047a2:	f7fe f819 	bl	80027d8 <p>
          p("BLDC v0=%+6.3f v1=%+6.3f v2=%+6.3f v3=%+6.3f ", can_raw.power_voltage[0], can_raw.power_voltage[1], can_raw.power_voltage[2], can_raw.power_voltage[3]);
 80047a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80047a8:	f7fb fef6 	bl	8000598 <__aeabi_f2d>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80047b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047b6:	f7fb feef 	bl	8000598 <__aeabi_f2d>
 80047ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047be:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80047c0:	f7fb feea 	bl	8000598 <__aeabi_f2d>
 80047c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047c8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80047ca:	f7fb fee5 	bl	8000598 <__aeabi_f2d>
 80047ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047d2:	e9cd 0100 	strd	r0, r1, [sp]
 80047d6:	4865      	ldr	r0, [pc, #404]	; (800496c <main+0x9d4>)
 80047d8:	f7fd fffe 	bl	80027d8 <p>
          break;
 80047dc:	e68d      	b.n	80044fa <main+0x562>
          p("Batt(Sub) %3.1f ", can_raw.power_voltage[4]);
 80047de:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80047e0:	f7fb feda 	bl	8000598 <__aeabi_f2d>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4861      	ldr	r0, [pc, #388]	; (8004970 <main+0x9d8>)
 80047ea:	f7fd fff5 	bl	80027d8 <p>
          p("ball_sensor %d %d / ESC Spd %+5.0f ", can_raw.ball_detection[0], can_raw.ball_detection[1], can_raw.motor_feedback_velocity[4]);
 80047ee:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80047f0:	f7fb fed2 	bl	8000598 <__aeabi_f2d>
 80047f4:	e9cd 0100 	strd	r0, r1, [sp]
 80047f8:	485e      	ldr	r0, [pc, #376]	; (8004974 <main+0x9dc>)
 80047fa:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 80047fe:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
 8004802:	f7fd ffe9 	bl	80027d8 <p>
          p("local_vision x=%3d y=%3d radius=%3d FPS=%3d ", ai_cmd.ball_local_x, ai_cmd.ball_local_y, ai_cmd.ball_local_radius, ai_cmd.ball_local_FPS);
 8004806:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38
 8004810:	4859      	ldr	r0, [pc, #356]	; (8004978 <main+0x9e0>)
 8004812:	e9db 230f 	ldrd	r2, r3, [fp, #60]	; 0x3c
 8004816:	f7fd ffdf 	bl	80027d8 <p>
          break;
 800481a:	e66e      	b.n	80044fa <main+0x562>
          p("SW %2d ", decode_SW(adc_sw_data));
 800481c:	4b57      	ldr	r3, [pc, #348]	; (800497c <main+0x9e4>)
 800481e:	8818      	ldrh	r0, [r3, #0]
 8004820:	f001 fa3e 	bl	8005ca0 <decode_SW>
 8004824:	4601      	mov	r1, r0
 8004826:	4856      	ldr	r0, [pc, #344]	; (8004980 <main+0x9e8>)
 8004828:	f7fd ffd6 	bl	80027d8 <p>
          p("Speed M0=%+6.1f M1=%+6.1f M2=%+6.1f M3=%+6.1f ", can_raw.motor_feedback[0], can_raw.motor_feedback[1], can_raw.motor_feedback[2], can_raw.motor_feedback[3]);
 800482c:	68a8      	ldr	r0, [r5, #8]
 800482e:	f7fb feb3 	bl	8000598 <__aeabi_f2d>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	6968      	ldr	r0, [r5, #20]
 8004838:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800483c:	f7fb feac 	bl	8000598 <__aeabi_f2d>
 8004840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004844:	6928      	ldr	r0, [r5, #16]
 8004846:	f7fb fea7 	bl	8000598 <__aeabi_f2d>
 800484a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800484e:	68e8      	ldr	r0, [r5, #12]
 8004850:	f7fb fea2 	bl	8000598 <__aeabi_f2d>
 8004854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004858:	e9cd 0100 	strd	r0, r1, [sp]
 800485c:	4849      	ldr	r0, [pc, #292]	; (8004984 <main+0x9ec>)
 800485e:	f7fd ffbb 	bl	80027d8 <p>
          p("Pw v0=%+6.3f v1=%+6.3f v2=%+6.3f v3=%+6.3f ", can_raw.power_voltage[0], can_raw.power_voltage[1], can_raw.power_voltage[2], can_raw.power_voltage[3]);
 8004862:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004864:	f7fb fe98 	bl	8000598 <__aeabi_f2d>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800486e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004872:	f7fb fe91 	bl	8000598 <__aeabi_f2d>
 8004876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800487a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800487c:	f7fb fe8c 	bl	8000598 <__aeabi_f2d>
 8004880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004884:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004886:	f7fb fe87 	bl	8000598 <__aeabi_f2d>
 800488a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800488e:	e9cd 0100 	strd	r0, r1, [sp]
 8004892:	483d      	ldr	r0, [pc, #244]	; (8004988 <main+0x9f0>)
 8004894:	f7fd ffa0 	bl	80027d8 <p>
          p("Im i0=%+5.1f i1=%+5.1f i2=%+5.1f i3=%+5.1f ", can_raw.current[0], can_raw.current[1], can_raw.current[2], can_raw.current[3]);
 8004898:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800489a:	f7fb fe7d 	bl	8000598 <__aeabi_f2d>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	6f68      	ldr	r0, [r5, #116]	; 0x74
 80048a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048a8:	f7fb fe76 	bl	8000598 <__aeabi_f2d>
 80048ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048b0:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80048b2:	f7fb fe71 	bl	8000598 <__aeabi_f2d>
 80048b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048ba:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80048bc:	f7fb fe6c 	bl	8000598 <__aeabi_f2d>
 80048c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048c4:	e9cd 0100 	strd	r0, r1, [sp]
 80048c8:	4830      	ldr	r0, [pc, #192]	; (800498c <main+0x9f4>)
 80048ca:	f7fd ff85 	bl	80027d8 <p>
          p("FET=%4.1f L1=%4.1f L2=%4.1f ", can_raw.temperature[4], can_raw.temperature[5], can_raw.temperature[6]);
 80048ce:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80048d0:	f7fb fe62 	bl	8000598 <__aeabi_f2d>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80048da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048de:	f7fb fe5b 	bl	8000598 <__aeabi_f2d>
 80048e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e6:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80048e8:	f7fb fe56 	bl	8000598 <__aeabi_f2d>
 80048ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048f0:	e9cd 0100 	strd	r0, r1, [sp]
 80048f4:	4826      	ldr	r0, [pc, #152]	; (8004990 <main+0x9f8>)
 80048f6:	f7fd ff6f 	bl	80027d8 <p>
          break;
 80048fa:	e5fe      	b.n	80044fa <main+0x562>
        p("\e[33mBatt=%3.1f\e[37m ", can_raw.power_voltage[5]);
 80048fc:	ee17 0a90 	vmov	r0, s15
 8004900:	f7fb fe4a 	bl	8000598 <__aeabi_f2d>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4822      	ldr	r0, [pc, #136]	; (8004994 <main+0x9fc>)
 800490a:	f7fd ff65 	bl	80027d8 <p>
 800490e:	e48d      	b.n	800422c <main+0x294>
            p("\e[31m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004910:	4b21      	ldr	r3, [pc, #132]	; (8004998 <main+0xa00>)
 8004912:	6858      	ldr	r0, [r3, #4]
 8004914:	f7fb fe40 	bl	8000598 <__aeabi_f2d>
 8004918:	460b      	mov	r3, r1
 800491a:	491f      	ldr	r1, [pc, #124]	; (8004998 <main+0xa00>)
 800491c:	4602      	mov	r2, r0
 800491e:	78c9      	ldrb	r1, [r1, #3]
 8004920:	481e      	ldr	r0, [pc, #120]	; (800499c <main+0xa04>)
 8004922:	f7fd ff59 	bl	80027d8 <p>
 8004926:	e553      	b.n	80043d0 <main+0x438>
            p("\e[32m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <main+0xa00>)
 800492a:	6858      	ldr	r0, [r3, #4]
 800492c:	f7fb fe34 	bl	8000598 <__aeabi_f2d>
 8004930:	460b      	mov	r3, r1
 8004932:	4919      	ldr	r1, [pc, #100]	; (8004998 <main+0xa00>)
 8004934:	4602      	mov	r2, r0
 8004936:	78c9      	ldrb	r1, [r1, #3]
 8004938:	4819      	ldr	r0, [pc, #100]	; (80049a0 <main+0xa08>)
 800493a:	f7fd ff4d 	bl	80027d8 <p>
 800493e:	e547      	b.n	80043d0 <main+0x438>
              p("\e[33m");
 8004940:	4818      	ldr	r0, [pc, #96]	; (80049a4 <main+0xa0c>)
 8004942:	f7fd ff49 	bl	80027d8 <p>
 8004946:	e56f      	b.n	8004428 <main+0x490>
 8004948:	0800f048 	.word	0x0800f048
 800494c:	0800f064 	.word	0x0800f064
 8004950:	0800f084 	.word	0x0800f084
 8004954:	20001090 	.word	0x20001090
 8004958:	0800f0a0 	.word	0x0800f0a0
 800495c:	0800f0bc 	.word	0x0800f0bc
 8004960:	0800f0d4 	.word	0x0800f0d4
 8004964:	0800f0f0 	.word	0x0800f0f0
 8004968:	0800efe0 	.word	0x0800efe0
 800496c:	0800f018 	.word	0x0800f018
 8004970:	0800ef78 	.word	0x0800ef78
 8004974:	0800ef8c 	.word	0x0800ef8c
 8004978:	0800efb0 	.word	0x0800efb0
 800497c:	20000e44 	.word	0x20000e44
 8004980:	0800eec8 	.word	0x0800eec8
 8004984:	0800eed0 	.word	0x0800eed0
 8004988:	0800ef00 	.word	0x0800ef00
 800498c:	0800ef2c 	.word	0x0800ef2c
 8004990:	0800ef58 	.word	0x0800ef58
 8004994:	0800ed84 	.word	0x0800ed84
 8004998:	20000f2c 	.word	0x20000f2c
 800499c:	0800ede4 	.word	0x0800ede4
 80049a0:	0800edb4 	.word	0x0800edb4
 80049a4:	0800ee24 	.word	0x0800ee24
            p("omni X %+8.3f Y %+8.3f ", omni.odom[0] * 1000, omni.odom[1] * 1000);
 80049a8:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <main+0xae0>)
 80049aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80049ae:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80049b2:	ee17 0a90 	vmov	r0, s15
 80049b6:	f7fb fdef 	bl	8000598 <__aeabi_f2d>
 80049ba:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <main+0xae0>)
 80049bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80049c0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	ee17 0a90 	vmov	r0, s15
 80049cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80049d0:	f7fb fde2 	bl	8000598 <__aeabi_f2d>
 80049d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049d8:	e9cd 0100 	strd	r0, r1, [sp]
 80049dc:	4827      	ldr	r0, [pc, #156]	; (8004a7c <main+0xae4>)
 80049de:	f7fd fefb 	bl	80027d8 <p>
            p("Wdidd %+5.1f", (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180 / M_PI));
 80049e2:	ed97 7a00 	vldr	s14, [r7]
 80049e6:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004a80 <main+0xae8>
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	ee17 0a90 	vmov	r0, s15
 80049f2:	f7fb fdd1 	bl	8000598 <__aeabi_f2d>
 80049f6:	a31c      	add	r3, pc, #112	; (adr r3, 8004a68 <main+0xad0>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fe24 	bl	8000648 <__aeabi_dmul>
 8004a00:	f7fc f91a 	bl	8000c38 <__aeabi_d2f>
 8004a04:	eddb 0a01 	vldr	s1, [fp, #4]
 8004a08:	ee00 0a10 	vmov	s0, r0
 8004a0c:	f001 f870 	bl	8005af0 <getAngleDiff>
 8004a10:	ee60 7a09 	vmul.f32	s15, s0, s18
 8004a14:	ee17 0a90 	vmov	r0, s15
 8004a18:	f7fb fdbe 	bl	8000598 <__aeabi_f2d>
 8004a1c:	a314      	add	r3, pc, #80	; (adr r3, 8004a70 <main+0xad8>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fe11 	bl	8000648 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4816      	ldr	r0, [pc, #88]	; (8004a84 <main+0xaec>)
 8004a2c:	f7fd fed4 	bl	80027d8 <p>
            p("Temp %3.0f %3.0f %3.0f %3.0f", can_raw.temperature[0], can_raw.temperature[1], can_raw.temperature[2], can_raw.temperature[3]);
 8004a30:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8004a32:	f7fb fdb1 	bl	8000598 <__aeabi_f2d>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a40:	f7fb fdaa 	bl	8000598 <__aeabi_f2d>
 8004a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a48:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004a4a:	f7fb fda5 	bl	8000598 <__aeabi_f2d>
 8004a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a52:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004a54:	f7fb fda0 	bl	8000598 <__aeabi_f2d>
 8004a58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a5c:	e9cd 0100 	strd	r0, r1, [sp]
 8004a60:	4809      	ldr	r0, [pc, #36]	; (8004a88 <main+0xaf0>)
 8004a62:	f7fd feb9 	bl	80027d8 <p>
 8004a66:	e548      	b.n	80044fa <main+0x562>
 8004a68:	16c16c17 	.word	0x16c16c17
 8004a6c:	3f76c16c 	.word	0x3f76c16c
 8004a70:	6dc9c883 	.word	0x6dc9c883
 8004a74:	3fd45f30 	.word	0x3fd45f30
 8004a78:	20001090 	.word	0x20001090
 8004a7c:	0800ee90 	.word	0x0800ee90
 8004a80:	40490fdb 	.word	0x40490fdb
 8004a84:	0800ee6c 	.word	0x0800ee6c
 8004a88:	0800eea8 	.word	0x0800eea8
 8004a8c:	00000000 	.word	0x00000000

08004a90 <mouseOdometory>:

#include "management.h"
#include "ring_buffer.h"

void mouseOdometory()
{
 8004a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004a94:	4c68      	ldr	r4, [pc, #416]	; (8004c38 <mouseOdometory+0x1a8>)
 8004a96:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004c3c <mouseOdometory+0x1ac>
 8004a9a:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;

  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004a9e:	edd4 6a02 	vldr	s13, [r4, #8]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004aa2:	ee07 3a90 	vmov	s15, r3
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004aa6:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
{
 8004aaa:	ed2d 8b04 	vpush	{d8-d9}
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004aae:	ee08 3a10 	vmov	s16, r3
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004ab6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004aba:	ee67 7a87 	vmul.f32	s15, s15, s14
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004abe:	ee28 8a07 	vmul.f32	s16, s16, s14
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004ac2:	ed94 7a03 	vldr	s14, [r4, #12]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004ac6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004aca:	ee37 7a08 	vadd.f32	s14, s14, s16
  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004ace:	ee76 6aa7 	vadd.f32	s13, s13, s15

  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004ad2:	ee17 0a90 	vmov	r0, s15
  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004ad6:	edc4 6a02 	vstr	s13, [r4, #8]
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004ada:	ed84 7a03 	vstr	s14, [r4, #12]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004ade:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004ae2:	f7fb fd59 	bl	8000598 <__aeabi_f2d>
 8004ae6:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <mouseOdometory+0x1b0>)
 8004ae8:	689d      	ldr	r5, [r3, #8]
 8004aea:	4606      	mov	r6, r0
 8004aec:	4628      	mov	r0, r5
 8004aee:	460f      	mov	r7, r1
 8004af0:	f7fb fd52 	bl	8000598 <__aeabi_f2d>
 8004af4:	ec41 0b10 	vmov	d0, r0, r1
 8004af8:	ec41 0b19 	vmov	d9, r0, r1
 8004afc:	f008 ff7c 	bl	800d9f8 <cos>
 8004b00:	ee18 0a10 	vmov	r0, s16
 8004b04:	ec5b ab10 	vmov	sl, fp, d0
 8004b08:	f7fb fd46 	bl	8000598 <__aeabi_f2d>
 8004b0c:	eeb0 0a49 	vmov.f32	s0, s18
 8004b10:	eef0 0a69 	vmov.f32	s1, s19
 8004b14:	ec41 0b18 	vmov	d8, r0, r1
 8004b18:	f008 ffc2 	bl	800daa0 <sin>
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	465b      	mov	r3, fp
 8004b20:	4630      	mov	r0, r6
 8004b22:	4639      	mov	r1, r7
 8004b24:	eeb0 9a40 	vmov.f32	s18, s0
 8004b28:	eef0 9a60 	vmov.f32	s19, s1
 8004b2c:	f7fb fd8c 	bl	8000648 <__aeabi_dmul>
 8004b30:	ec53 2b19 	vmov	r2, r3, d9
 8004b34:	4680      	mov	r8, r0
 8004b36:	4689      	mov	r9, r1
 8004b38:	ec51 0b18 	vmov	r0, r1, d8
 8004b3c:	f7fb fd84 	bl	8000648 <__aeabi_dmul>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4640      	mov	r0, r8
 8004b46:	4649      	mov	r1, r9
 8004b48:	f7fb fbc6 	bl	80002d8 <__aeabi_dsub>
 8004b4c:	4b3d      	ldr	r3, [pc, #244]	; (8004c44 <mouseOdometory+0x1b4>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f7fb fd7a 	bl	8000648 <__aeabi_dmul>
 8004b54:	4680      	mov	r8, r0
 8004b56:	6920      	ldr	r0, [r4, #16]
 8004b58:	4689      	mov	r9, r1
 8004b5a:	f7fb fd1d 	bl	8000598 <__aeabi_f2d>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4640      	mov	r0, r8
 8004b64:	4649      	mov	r1, r9
 8004b66:	f7fb fbb9 	bl	80002dc <__adddf3>
 8004b6a:	f7fc f865 	bl	8000c38 <__aeabi_d2f>
 8004b6e:	4603      	mov	r3, r0
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004b70:	4639      	mov	r1, r7
 8004b72:	4630      	mov	r0, r6
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	461e      	mov	r6, r3
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004b78:	ec53 2b19 	vmov	r2, r3, d9
 8004b7c:	f7fb fd64 	bl	8000648 <__aeabi_dmul>
 8004b80:	ec53 2b18 	vmov	r2, r3, d8
 8004b84:	4680      	mov	r8, r0
 8004b86:	4689      	mov	r9, r1
 8004b88:	4650      	mov	r0, sl
 8004b8a:	4659      	mov	r1, fp
 8004b8c:	f7fb fd5c 	bl	8000648 <__aeabi_dmul>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fb fba0 	bl	80002dc <__adddf3>
 8004b9c:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <mouseOdometory+0x1b4>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f7fb fd52 	bl	8000648 <__aeabi_dmul>
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	6960      	ldr	r0, [r4, #20]
 8004ba8:	4689      	mov	r9, r1
 8004baa:	f7fb fcf5 	bl	8000598 <__aeabi_f2d>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	f7fb fb91 	bl	80002dc <__adddf3>
 8004bba:	f7fc f83d 	bl	8000c38 <__aeabi_d2f>

  // 旋回ぶん補正 X方向は誤差に埋もれてしまう。パラメーター調整を省略するために無効化
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 8004bbe:	4652      	mov	r2, sl
 8004bc0:	465b      	mov	r3, fp
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004bc2:	4680      	mov	r8, r0
 8004bc4:	6160      	str	r0, [r4, #20]
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 8004bc6:	4920      	ldr	r1, [pc, #128]	; (8004c48 <mouseOdometory+0x1b8>)
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f7fb fb85 	bl	80002d8 <__aeabi_dsub>
 8004bce:	a318      	add	r3, pc, #96	; (adr r3, 8004c30 <mouseOdometory+0x1a0>)
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f7fb fd38 	bl	8000648 <__aeabi_dmul>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4630      	mov	r0, r6
 8004bdc:	460f      	mov	r7, r1
 8004bde:	4616      	mov	r6, r2
 8004be0:	f7fb fcda 	bl	8000598 <__aeabi_f2d>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4630      	mov	r0, r6
 8004bea:	4639      	mov	r1, r7
 8004bec:	f7fb fb76 	bl	80002dc <__adddf3>
 8004bf0:	f7fc f822 	bl	8000c38 <__aeabi_d2f>
 8004bf4:	61a0      	str	r0, [r4, #24]
  //  +(0.009 * sin(imu.yaw_angle_rad));
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7fb fcce 	bl	8000598 <__aeabi_f2d>
 8004bfc:	a30c      	add	r3, pc, #48	; (adr r3, 8004c30 <mouseOdometory+0x1a0>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	4606      	mov	r6, r0
 8004c04:	460f      	mov	r7, r1
 8004c06:	ec51 0b19 	vmov	r0, r1, d9
 8004c0a:	f7fb fd1d 	bl	8000648 <__aeabi_dmul>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4630      	mov	r0, r6
 8004c14:	4639      	mov	r1, r7
 8004c16:	f7fb fb5f 	bl	80002d8 <__aeabi_dsub>
 8004c1a:	f7fc f80d 	bl	8000c38 <__aeabi_d2f>
  //  +(0.009 * cos(imu.yaw_angle_rad) - 0.009);

  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
}
 8004c1e:	ecbd 8b04 	vpop	{d8-d9}
  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8004c22:	63a5      	str	r5, [r4, #56]	; 0x38
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 8004c24:	61e0      	str	r0, [r4, #28]
}
 8004c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w
 8004c30:	4189374c 	.word	0x4189374c
 8004c34:	3fb0e560 	.word	0x3fb0e560
 8004c38:	20001050 	.word	0x20001050
 8004c3c:	3b03126f 	.word	0x3b03126f
 8004c40:	20000fc0 	.word	0x20000fc0
 8004c44:	3fe00000 	.word	0x3fe00000
 8004c48:	3ff00000 	.word	0x3ff00000
 8004c4c:	00000000 	.word	0x00000000

08004c50 <omniOdometory>:

void omniOdometory()
{
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	ed2d 8b0a 	vpush	{d8-d12}
 8004c58:	4ee9      	ldr	r6, [pc, #932]	; (8005000 <omniOdometory+0x3b0>)
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	4634      	mov	r4, r6
 8004c5e:	f106 0510 	add.w	r5, r6, #16

  for (int i = 0; i < 4; i++) {
    if (isnan(motor.enc_angle[i])) {
      motor.enc_angle[i] = 0;
    }
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004c62:	ecb4 0a01 	vldmia	r4!, {s0}
 8004c66:	edd4 0a04 	vldr	s1, [r4, #16]
 8004c6a:	f000 ff41 	bl	8005af0 <getAngleDiff>
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 8004c6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004c72:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  for (int i = 0; i < 4; i++) {
 8004c76:	42ac      	cmp	r4, r5
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 8004c78:	6123      	str	r3, [r4, #16]
  for (int i = 0; i < 4; i++) {
 8004c7a:	d1f2      	bne.n	8004c62 <omniOdometory+0x12>
  }

  // float robot_rotation_adj;
  // robot_rotation_adj = normalizeAngle(imu.yaw_angle_rad - imu.pre_yaw_angle_rad) * OMNI_ROTATION_LENGTH;  // mm

  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004c7c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004c7e:	f8df a3a4 	ldr.w	sl, [pc, #932]	; 8005024 <omniOdometory+0x3d4>
  // vision座標だけ更新されているが、vision_update_cycle_cntが0になっていない場合に、1cycleだけpositionが飛ぶ

  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
  for (int i = 0; i < 2; i++) {
    enqueue(integ.odom_log[i], omni.odom_speed[i]);
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8004c82:	ed9f 9ae0 	vldr	s18, [pc, #896]	; 8005004 <omniOdometory+0x3b4>
 8004c86:	f8df b3a0 	ldr.w	fp, [pc, #928]	; 8005028 <omniOdometory+0x3d8>
  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004c8a:	f7fb fc85 	bl	8000598 <__aeabi_f2d>
 8004c8e:	a3d4      	add	r3, pc, #848	; (adr r3, 8004fe0 <omniOdometory+0x390>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fcd8 	bl	8000648 <__aeabi_dmul>
 8004c98:	f7fb ffce 	bl	8000c38 <__aeabi_d2f>
 8004c9c:	4605      	mov	r5, r0
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004c9e:	6b30      	ldr	r0, [r6, #48]	; 0x30
  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004ca0:	f8ca 5000 	str.w	r5, [sl]
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004ca4:	f7fb fc78 	bl	8000598 <__aeabi_f2d>
 8004ca8:	a3cd      	add	r3, pc, #820	; (adr r3, 8004fe0 <omniOdometory+0x390>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fccb 	bl	8000648 <__aeabi_dmul>
 8004cb2:	f7fb ffc1 	bl	8000c38 <__aeabi_d2f>
 8004cb6:	4604      	mov	r4, r0
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 8004cb8:	4628      	mov	r0, r5
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004cba:	f8ca 4004 	str.w	r4, [sl, #4]
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 8004cbe:	f7fb fc6b 	bl	8000598 <__aeabi_f2d>
 8004cc2:	4bd1      	ldr	r3, [pc, #836]	; (8005008 <omniOdometory+0x3b8>)
 8004cc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cc8:	4680      	mov	r8, r0
 8004cca:	ee17 0a90 	vmov	r0, s15
 8004cce:	edcd 7a00 	vstr	s15, [sp]
 8004cd2:	4689      	mov	r9, r1
 8004cd4:	f7fb fc60 	bl	8000598 <__aeabi_f2d>
 8004cd8:	ec41 0b10 	vmov	d0, r0, r1
 8004cdc:	ec41 0b18 	vmov	d8, r0, r1
 8004ce0:	f008 fe8a 	bl	800d9f8 <cos>
 8004ce4:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8004ce8:	9305      	str	r3, [sp, #20]
 8004cea:	4bc8      	ldr	r3, [pc, #800]	; (800500c <omniOdometory+0x3bc>)
 8004cec:	eeb0 ca40 	vmov.f32	s24, s0
 8004cf0:	eef0 ca60 	vmov.f32	s25, s1
 8004cf4:	f103 021c 	add.w	r2, r3, #28
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	9204      	str	r2, [sp, #16]
 8004cfc:	f7fb fc4c 	bl	8000598 <__aeabi_f2d>
 8004d00:	eeb0 0a48 	vmov.f32	s0, s16
 8004d04:	eef0 0a68 	vmov.f32	s1, s17
 8004d08:	4606      	mov	r6, r0
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	f008 fec8 	bl	800daa0 <sin>
 8004d10:	ec53 2b1c 	vmov	r2, r3, d12
 8004d14:	eeb0 ba40 	vmov.f32	s22, s0
 8004d18:	eef0 ba60 	vmov.f32	s23, s1
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	4649      	mov	r1, r9
 8004d20:	f7fb fc92 	bl	8000648 <__aeabi_dmul>
 8004d24:	ec53 2b1b 	vmov	r2, r3, d11
 8004d28:	4604      	mov	r4, r0
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	4639      	mov	r1, r7
 8004d30:	f7fb fc8a 	bl	8000648 <__aeabi_dmul>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4620      	mov	r0, r4
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	f7fb face 	bl	80002dc <__adddf3>
 8004d40:	4604      	mov	r4, r0
 8004d42:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8004d46:	460d      	mov	r5, r1
 8004d48:	f7fb fc26 	bl	8000598 <__aeabi_f2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	f7fb fac2 	bl	80002dc <__adddf3>
 8004d58:	f7fb ff6e 	bl	8000c38 <__aeabi_d2f>
 8004d5c:	9003      	str	r0, [sp, #12]
 8004d5e:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8004d62:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8004d66:	f7fb fc17 	bl	8000598 <__aeabi_f2d>
 8004d6a:	ec53 2b1b 	vmov	r2, r3, d11
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460d      	mov	r5, r1
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	f7fb fc67 	bl	8000648 <__aeabi_dmul>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4620      	mov	r0, r4
 8004d80:	4629      	mov	r1, r5
 8004d82:	f7fb faab 	bl	80002dc <__adddf3>
 8004d86:	4632      	mov	r2, r6
 8004d88:	463b      	mov	r3, r7
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	460d      	mov	r5, r1
 8004d8e:	ec51 0b1c 	vmov	r0, r1, d12
 8004d92:	f7fb fc59 	bl	8000648 <__aeabi_dmul>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f7fb fa9b 	bl	80002d8 <__aeabi_dsub>
 8004da2:	f7fb ff49 	bl	8000c38 <__aeabi_d2f>
  omni.pre_odom[1] = omni.odom[1];
 8004da6:	edda 8a07 	vldr	s17, [sl, #28]
  omni.pre_odom[0] = omni.odom[0];
 8004daa:	ed9a aa06 	vldr	s20, [sl, #24]
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8004dae:	4604      	mov	r4, r0
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8004db0:	9803      	ldr	r0, [sp, #12]
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8004db2:	f8ca 402c 	str.w	r4, [sl, #44]	; 0x2c
  omni.pre_odom[0] = omni.odom[0];
 8004db6:	ed8a aa08 	vstr	s20, [sl, #32]
  omni.pre_odom[1] = omni.odom[1];
 8004dba:	edca 8a09 	vstr	s17, [sl, #36]	; 0x24
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8004dbe:	f7fb fbeb 	bl	8000598 <__aeabi_f2d>
 8004dc2:	4606      	mov	r6, r0
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	460f      	mov	r7, r1
 8004dc8:	f7fb fbe6 	bl	8000598 <__aeabi_f2d>
 8004dcc:	a386      	add	r3, pc, #536	; (adr r3, 8004fe8 <omniOdometory+0x398>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	4680      	mov	r8, r0
 8004dd4:	4689      	mov	r9, r1
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	4639      	mov	r1, r7
 8004dda:	f7fb fc35 	bl	8000648 <__aeabi_dmul>
 8004dde:	a384      	add	r3, pc, #528	; (adr r3, 8004ff0 <omniOdometory+0x3a0>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	4604      	mov	r4, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	4640      	mov	r0, r8
 8004dea:	4649      	mov	r1, r9
 8004dec:	f7fb fc2c 	bl	8000648 <__aeabi_dmul>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4620      	mov	r0, r4
 8004df6:	4629      	mov	r1, r5
 8004df8:	f7fb fa6e 	bl	80002d8 <__aeabi_dsub>
 8004dfc:	4b84      	ldr	r3, [pc, #528]	; (8005010 <omniOdometory+0x3c0>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f7fb fc22 	bl	8000648 <__aeabi_dmul>
 8004e04:	4b83      	ldr	r3, [pc, #524]	; (8005014 <omniOdometory+0x3c4>)
 8004e06:	4604      	mov	r4, r0
 8004e08:	460d      	mov	r5, r1
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	ec51 0b1c 	vmov	r0, r1, d12
 8004e10:	f7fb fa62 	bl	80002d8 <__aeabi_dsub>
 8004e14:	a378      	add	r3, pc, #480	; (adr r3, 8004ff8 <omniOdometory+0x3a8>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fc15 	bl	8000648 <__aeabi_dmul>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4620      	mov	r0, r4
 8004e24:	4629      	mov	r1, r5
 8004e26:	f7fb fa59 	bl	80002dc <__adddf3>
 8004e2a:	f7fb ff05 	bl	8000c38 <__aeabi_d2f>
 8004e2e:	ee08 0a10 	vmov	s16, r0
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004e32:	a36f      	add	r3, pc, #444	; (adr r3, 8004ff0 <omniOdometory+0x3a0>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8004e3c:	ed8a 8a06 	vstr	s16, [sl, #24]
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004e40:	f7fb fc02 	bl	8000648 <__aeabi_dmul>
 8004e44:	a368      	add	r3, pc, #416	; (adr r3, 8004fe8 <omniOdometory+0x398>)
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	4640      	mov	r0, r8
 8004e50:	4649      	mov	r1, r9
 8004e52:	f7fb fbf9 	bl	8000648 <__aeabi_dmul>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f7fb fa3d 	bl	80002dc <__adddf3>
 8004e62:	4b6b      	ldr	r3, [pc, #428]	; (8005010 <omniOdometory+0x3c0>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	f7fb fbef 	bl	8000648 <__aeabi_dmul>
 8004e6a:	a363      	add	r3, pc, #396	; (adr r3, 8004ff8 <omniOdometory+0x3a8>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	4604      	mov	r4, r0
 8004e72:	460d      	mov	r5, r1
 8004e74:	ec51 0b1b 	vmov	r0, r1, d11
 8004e78:	f7fb fbe6 	bl	8000648 <__aeabi_dmul>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4620      	mov	r0, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	f7fb fa2a 	bl	80002dc <__adddf3>
 8004e88:	f7fb fed6 	bl	8000c38 <__aeabi_d2f>
 8004e8c:	ee07 0a10 	vmov	s14, r0
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004e90:	eddf 6a61 	vldr	s13, [pc, #388]	; 8005018 <omniOdometory+0x3c8>
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004e94:	f8ca 001c 	str.w	r0, [sl, #28]
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004e98:	ee78 7a4a 	vsub.f32	s15, s16, s20
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8004e9c:	ee37 8a68 	vsub.f32	s16, s14, s17
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8004ea4:	ee28 8a26 	vmul.f32	s16, s16, s13
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8004ea8:	ee17 0a90 	vmov	r0, s15
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004eac:	edca 7a0c 	vstr	s15, [sl, #48]	; 0x30
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8004eb0:	ed8a 8a0d 	vstr	s16, [sl, #52]	; 0x34
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8004eb4:	f7fb fb70 	bl	8000598 <__aeabi_f2d>
 8004eb8:	460f      	mov	r7, r1
 8004eba:	9900      	ldr	r1, [sp, #0]
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	f081 4000 	eor.w	r0, r1, #2147483648	; 0x80000000
 8004ec2:	f7fb fb69 	bl	8000598 <__aeabi_f2d>
 8004ec6:	ec41 0b10 	vmov	d0, r0, r1
 8004eca:	ec41 0b1a 	vmov	d10, r0, r1
 8004ece:	f008 fd93 	bl	800d9f8 <cos>
 8004ed2:	ee18 0a10 	vmov	r0, s16
 8004ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8004eda:	eef0 8a60 	vmov.f32	s17, s1
 8004ede:	f7fb fb5b 	bl	8000598 <__aeabi_f2d>
 8004ee2:	ec53 2b18 	vmov	r2, r3, d8
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	460d      	mov	r5, r1
 8004eea:	4630      	mov	r0, r6
 8004eec:	4639      	mov	r1, r7
 8004eee:	f7fb fbab 	bl	8000648 <__aeabi_dmul>
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	4680      	mov	r8, r0
 8004ef8:	4689      	mov	r9, r1
 8004efa:	ec51 0b1b 	vmov	r0, r1, d11
 8004efe:	f7fb fba3 	bl	8000648 <__aeabi_dmul>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4640      	mov	r0, r8
 8004f08:	4649      	mov	r1, r9
 8004f0a:	f7fb f9e7 	bl	80002dc <__adddf3>
 8004f0e:	f7fb fe93 	bl	8000c38 <__aeabi_d2f>
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004f12:	eeb0 0a4a 	vmov.f32	s0, s20
 8004f16:	eef0 0a6a 	vmov.f32	s1, s21
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8004f1a:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004f1e:	f008 fdbf 	bl	800daa0 <sin>
 8004f22:	4630      	mov	r0, r6
 8004f24:	ec53 2b10 	vmov	r2, r3, d0
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fb8d 	bl	8000648 <__aeabi_dmul>
 8004f2e:	4622      	mov	r2, r4
 8004f30:	462b      	mov	r3, r5
 8004f32:	4604      	mov	r4, r0
 8004f34:	460d      	mov	r5, r1
 8004f36:	ec51 0b18 	vmov	r0, r1, d8
 8004f3a:	f7fb fb85 	bl	8000648 <__aeabi_dmul>
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4602      	mov	r2, r0
 8004f42:	4629      	mov	r1, r5
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7fb f9c9 	bl	80002dc <__adddf3>
 8004f4a:	f7fb fe75 	bl	8000c38 <__aeabi_d2f>
  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	; (800500c <omniOdometory+0x3bc>)
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004f50:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004f60:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    enqueue(integ.odom_log[i], omni.odom_speed[i]);
 8004f64:	ecb5 0a01 	vldmia	r5!, {s0}
 8004f68:	f8db 0000 	ldr.w	r0, [fp]
 8004f6c:	f000 f942 	bl	80051f4 <enqueue>
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8004f70:	4b2a      	ldr	r3, [pc, #168]	; (800501c <omniOdometory+0x3cc>)
 8004f72:	f85b 0b04 	ldr.w	r0, [fp], #4
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f82:	ee77 7a88 	vadd.f32	s15, s15, s16
 8004f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f8a:	ee17 1a90 	vmov	r1, s15
 8004f8e:	f000 f95b 	bl	8005248 <sumNewestN>
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 8004f92:	ecf4 7a01 	vldmia	r4!, {s15}
  for (int i = 0; i < 2; i++) {
 8004f96:	4b22      	ldr	r3, [pc, #136]	; (8005020 <omniOdometory+0x3d0>)
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 8004f98:	ed94 7a01 	vldr	s14, [r4, #4]
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8004f9c:	ee20 0a09 	vmul.f32	s0, s0, s18
  for (int i = 0; i < 2; i++) {
 8004fa0:	459b      	cmp	fp, r3
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 8004fa2:	ee70 7a27 	vadd.f32	s15, s0, s15
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8004fa6:	ed8b 0a01 	vstr	s0, [fp, #4]
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 8004faa:	ee37 7a67 	vsub.f32	s14, s14, s15
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 8004fae:	edcb 7a03 	vstr	s15, [fp, #12]
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 8004fb2:	ed8b 7a05 	vstr	s14, [fp, #20]
  for (int i = 0; i < 2; i++) {
 8004fb6:	d1d5      	bne.n	8004f64 <omniOdometory+0x314>
  }

  float target_diff[2], move_diff[2];
  for (int i = 0; i < 2; i++) {
    target_diff[i] = ai_cmd.global_robot_position[i] - ai_cmd.global_target_position[i];  // Visionが更新された時点での現在地とtargetの距離
 8004fb8:	4c14      	ldr	r4, [pc, #80]	; (800500c <omniOdometory+0x3bc>)
 8004fba:	ed94 7a07 	vldr	s14, [r4, #28]
 8004fbe:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    move_diff[i] = ai_cmd.global_robot_position[i] - integ.vision_based_position[i];  // Visionとtargetが更新されてからの移動量
  }

  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));  
 8004fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fc6:	ee17 0a90 	vmov	r0, s15
 8004fca:	f7fb fae5 	bl	8000598 <__aeabi_f2d>
    target_diff[i] = ai_cmd.global_robot_position[i] - ai_cmd.global_target_position[i];  // Visionが更新された時点での現在地とtargetの距離
 8004fce:	ed94 7a08 	vldr	s14, [r4, #32]
 8004fd2:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));  
 8004fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fda:	4602      	mov	r2, r0
 8004fdc:	e026      	b.n	800502c <omniOdometory+0x3dc>
 8004fde:	bf00      	nop
 8004fe0:	3126e979 	.word	0x3126e979
 8004fe4:	3facac08 	.word	0x3facac08
 8004fe8:	667f3bcc 	.word	0x667f3bcc
 8004fec:	bfe6a09e 	.word	0xbfe6a09e
 8004ff0:	667f3bcd 	.word	0x667f3bcd
 8004ff4:	3fe6a09e 	.word	0x3fe6a09e
 8004ff8:	1cac0831 	.word	0x1cac0831
 8004ffc:	3fbb645a 	.word	0x3fbb645a
 8005000:	20001018 	.word	0x20001018
 8005004:	3b03126f 	.word	0x3b03126f
 8005008:	20000fc0 	.word	0x20000fc0
 800500c:	20000e48 	.word	0x20000e48
 8005010:	3fe00000 	.word	0x3fe00000
 8005014:	3ff00000 	.word	0x3ff00000
 8005018:	43fa0000 	.word	0x43fa0000
 800501c:	20000f2c 	.word	0x20000f2c
 8005020:	20000fdc 	.word	0x20000fdc
 8005024:	20001090 	.word	0x20001090
 8005028:	20000fd4 	.word	0x20000fd4
 800502c:	460b      	mov	r3, r1
 800502e:	ee17 0a90 	vmov	r0, s15
 8005032:	e9cd 2300 	strd	r2, r3, [sp]
 8005036:	f7fb faaf 	bl	8000598 <__aeabi_f2d>
 800503a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800503e:	4606      	mov	r6, r0
 8005040:	460f      	mov	r7, r1
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	f7fb faff 	bl	8000648 <__aeabi_dmul>
 800504a:	4632      	mov	r2, r6
 800504c:	4604      	mov	r4, r0
 800504e:	460d      	mov	r5, r1
 8005050:	463b      	mov	r3, r7
 8005052:	4630      	mov	r0, r6
 8005054:	4639      	mov	r1, r7
 8005056:	f7fb faf7 	bl	8000648 <__aeabi_dmul>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f7fb f93b 	bl	80002dc <__adddf3>
 8005066:	ec41 0b10 	vmov	d0, r0, r1
 800506a:	f008 fc99 	bl	800d9a0 <sqrt>
 800506e:	ec51 0b10 	vmov	r0, r1, d0
 8005072:	f7fb fde1 	bl	8000c38 <__aeabi_d2f>
  integ.move_dist = sqrt(pow(integ.position_diff[0], 2) + pow(integ.position_diff[1], 2)); 
 8005076:	4c16      	ldr	r4, [pc, #88]	; (80050d0 <omniOdometory+0x480>)
  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));  
 8005078:	4603      	mov	r3, r0
 800507a:	6363      	str	r3, [r4, #52]	; 0x34
  integ.move_dist = sqrt(pow(integ.position_diff[0], 2) + pow(integ.position_diff[1], 2)); 
 800507c:	69a0      	ldr	r0, [r4, #24]
 800507e:	f7fb fa8b 	bl	8000598 <__aeabi_f2d>
 8005082:	4606      	mov	r6, r0
 8005084:	69e0      	ldr	r0, [r4, #28]
 8005086:	460f      	mov	r7, r1
 8005088:	f7fb fa86 	bl	8000598 <__aeabi_f2d>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	f7fb fada 	bl	8000648 <__aeabi_dmul>
 8005094:	4632      	mov	r2, r6
 8005096:	4604      	mov	r4, r0
 8005098:	460d      	mov	r5, r1
 800509a:	463b      	mov	r3, r7
 800509c:	4630      	mov	r0, r6
 800509e:	4639      	mov	r1, r7
 80050a0:	f7fb fad2 	bl	8000648 <__aeabi_dmul>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4620      	mov	r0, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	f7fb f916 	bl	80002dc <__adddf3>
 80050b0:	ec41 0b10 	vmov	d0, r0, r1
 80050b4:	f008 fc74 	bl	800d9a0 <sqrt>
 80050b8:	ec51 0b10 	vmov	r0, r1, d0
 80050bc:	f7fb fdbc 	bl	8000c38 <__aeabi_d2f>
 80050c0:	4c03      	ldr	r4, [pc, #12]	; (80050d0 <omniOdometory+0x480>)
 80050c2:	6320      	str	r0, [r4, #48]	; 0x30
 80050c4:	b007      	add	sp, #28
 80050c6:	ecbd 8b0a 	vpop	{d8-d12}
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	bf00      	nop
 80050d0:	20000fd4 	.word	0x20000fd4
 80050d4:	00000000 	.word	0x00000000

080050d8 <omni_move>:

const float sinM4 = sin(150 * M_PI / 180);
const float cosM4 = cos(150 * M_PI / 180);

void omni_move(float vel_y_robot, float vel_x_robot, float omega_roboot, float duty_limit)
{
 80050d8:	b510      	push	{r4, lr}
 80050da:	ee11 0a10 	vmov	r0, s2
 80050de:	ed2d 8b04 	vpush	{d8-d9}
 80050e2:	eef0 8a61 	vmov.f32	s17, s3
 80050e6:	eeb0 8a60 	vmov.f32	s16, s1
 80050ea:	eeb0 9a40 	vmov.f32	s18, s0
  float rotation_omega_motor;

  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 80050ee:	f7fb fa53 	bl	8000598 <__aeabi_f2d>
 80050f2:	a334      	add	r3, pc, #208	; (adr r3, 80051c4 <omni_move+0xec>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb faa6 	bl	8000648 <__aeabi_dmul>
 80050fc:	f7fb fd9c 	bl	8000c38 <__aeabi_d2f>

  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005100:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <omni_move+0xd8>)
 8005102:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80051b4 <omni_move+0xdc>
 8005106:	ed93 7a00 	vldr	s14, [r3]
 800510a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80051b8 <omni_move+0xe0>
 800510e:	4c2b      	ldr	r4, [pc, #172]	; (80051bc <omni_move+0xe4>)
 8005110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005114:	eec6 5a87 	vdiv.f32	s11, s13, s14
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005118:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80051c0 <omni_move+0xe8>
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 800511c:	ee69 7a27 	vmul.f32	s15, s18, s15
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005120:	ee29 7a07 	vmul.f32	s14, s18, s14
 8005124:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8005128:	eeb0 6a67 	vmov.f32	s12, s15
 800512c:	eea8 7a24 	vfma.f32	s14, s16, s9
 8005130:	eea8 6a05 	vfma.f32	s12, s16, s10
 8005134:	eed8 7a05 	vfnms.f32	s15, s16, s10
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005138:	ee38 0a09 	vadd.f32	s0, s16, s18
 800513c:	ee05 0a10 	vmov	s10, r0
  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 8005140:	ee06 0a90 	vmov	s13, r0
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005144:	eea0 5a24 	vfma.f32	s10, s0, s9
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005148:	ee36 6a86 	vadd.f32	s12, s13, s12
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 800514c:	ee36 7a87 	vadd.f32	s14, s13, s14
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8005150:	ee77 7aa6 	vadd.f32	s15, s15, s13
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005154:	ee27 7a25 	vmul.f32	s14, s14, s11
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005158:	ee66 6a25 	vmul.f32	s13, s12, s11
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 800515c:	ee67 7aa5 	vmul.f32	s15, s15, s11
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005160:	ee25 6a25 	vmul.f32	s12, s10, s11
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005164:	edc4 6a07 	vstr	s13, [r4, #28]
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005168:	ed84 7a08 	vstr	s14, [r4, #32]
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 800516c:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8005170:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28

  actuator_motor1(output.motor_voltage[0], duty_limit);
 8005174:	ed94 0a07 	vldr	s0, [r4, #28]
 8005178:	eef0 0a68 	vmov.f32	s1, s17
 800517c:	f7fb ff2a 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(output.motor_voltage[1], duty_limit);
 8005180:	ed94 0a08 	vldr	s0, [r4, #32]
 8005184:	eef0 0a68 	vmov.f32	s1, s17
 8005188:	f7fb ff44 	bl	8001014 <actuator_motor2>
  actuator_motor3(output.motor_voltage[2], duty_limit);
 800518c:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005190:	eef0 0a68 	vmov.f32	s1, s17
 8005194:	f7fb ff5e 	bl	8001054 <actuator_motor3>
  actuator_motor4(output.motor_voltage[3], duty_limit);
 8005198:	eef0 0a68 	vmov.f32	s1, s17
}
 800519c:	ecbd 8b04 	vpop	{d8-d9}
  actuator_motor4(output.motor_voltage[3], duty_limit);
 80051a0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
}
 80051a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor4(output.motor_voltage[3], duty_limit);
 80051a8:	f7fb bf74 	b.w	8001094 <actuator_motor4>
 80051ac:	f3af 8000 	nop.w
 80051b0:	20000004 	.word	0x20000004
 80051b4:	3f5db3d7 	.word	0x3f5db3d7
 80051b8:	bf3504f3 	.word	0xbf3504f3
 80051bc:	200010d0 	.word	0x200010d0
 80051c0:	3f3504f3 	.word	0x3f3504f3
 80051c4:	47ae147b 	.word	0x47ae147b
 80051c8:	3fb47ae1 	.word	0x3fb47ae1

080051cc <initRingBuffer>:



// リングバッファの初期化
RingBuffer * initRingBuffer(int size)
{
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4605      	mov	r5, r0
  RingBuffer * rb = (RingBuffer *)malloc(sizeof(RingBuffer));
 80051d0:	2014      	movs	r0, #20
 80051d2:	f005 fc4d 	bl	800aa70 <malloc>
 80051d6:	4604      	mov	r4, r0
  rb->buffer = (float *)malloc(size * sizeof(float));
 80051d8:	00a8      	lsls	r0, r5, #2
 80051da:	f005 fc49 	bl	800aa70 <malloc>
  rb->size = size;
  rb->front = 0;
 80051de:	2300      	movs	r3, #0
  rb->rear = -1;
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
  rb->size = size;
 80051e4:	e9c4 0500 	strd	r0, r5, [r4]
  rb->rear = -1;
 80051e8:	e9c4 3202 	strd	r3, r2, [r4, #8]
  rb->count = 0;
 80051ec:	6123      	str	r3, [r4, #16]
  return rb;
}
 80051ee:	4620      	mov	r0, r4
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop

080051f4 <enqueue>:

// リングバッファに要素を追加
void enqueue(RingBuffer * rb, float data)
{
  if (rb->count < rb->size) {
 80051f4:	6901      	ldr	r1, [r0, #16]
 80051f6:	6843      	ldr	r3, [r0, #4]
 80051f8:	4299      	cmp	r1, r3
 80051fa:	da0e      	bge.n	800521a <enqueue+0x26>
    rb->rear = (rb->rear + 1) % rb->size;
 80051fc:	68c2      	ldr	r2, [r0, #12]
 80051fe:	3201      	adds	r2, #1
 8005200:	fb92 fcf3 	sdiv	ip, r2, r3
 8005204:	fb03 231c 	mls	r3, r3, ip, r2
    rb->buffer[rb->rear] = data;
 8005208:	6802      	ldr	r2, [r0, #0]
    rb->rear = (rb->rear + 1) % rb->size;
 800520a:	60c3      	str	r3, [r0, #12]
    rb->count++;
 800520c:	3101      	adds	r1, #1
    rb->buffer[rb->rear] = data;
 800520e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005212:	ed82 0a00 	vstr	s0, [r2]
    rb->count++;
 8005216:	6101      	str	r1, [r0, #16]
 8005218:	4770      	bx	lr
  } else {
    // バッファがいっぱいの場合は古いデータを上書き
    rb->rear = (rb->rear + 1) % rb->size;
    rb->front = (rb->front + 1) % rb->size;
 800521a:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
{
 800521e:	b410      	push	{r4}
    rb->rear = (rb->rear + 1) % rb->size;
 8005220:	3201      	adds	r2, #1
    rb->buffer[rb->rear] = data;
 8005222:	6804      	ldr	r4, [r0, #0]
    rb->rear = (rb->rear + 1) % rb->size;
 8005224:	fb92 fcf3 	sdiv	ip, r2, r3
    rb->front = (rb->front + 1) % rb->size;
 8005228:	3101      	adds	r1, #1
    rb->rear = (rb->rear + 1) % rb->size;
 800522a:	fb03 221c 	mls	r2, r3, ip, r2
 800522e:	60c2      	str	r2, [r0, #12]
    rb->front = (rb->front + 1) % rb->size;
 8005230:	fb91 fcf3 	sdiv	ip, r1, r3
    rb->buffer[rb->rear] = data;
 8005234:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    rb->front = (rb->front + 1) % rb->size;
 8005238:	fb03 111c 	mls	r1, r3, ip, r1
 800523c:	6081      	str	r1, [r0, #8]
  }
}
 800523e:	f85d 4b04 	ldr.w	r4, [sp], #4
    rb->buffer[rb->rear] = data;
 8005242:	ed82 0a00 	vstr	s0, [r2]
}
 8005246:	4770      	bx	lr

08005248 <sumNewestN>:
}

// リングバッファ上のデータを新しい順にn個加算した結果を取得
float sumNewestN(RingBuffer * rb, int n)
{
  if (n <= 0 || n > rb->count) {
 8005248:	2900      	cmp	r1, #0
 800524a:	dd1b      	ble.n	8005284 <sumNewestN+0x3c>
 800524c:	6903      	ldr	r3, [r0, #16]
 800524e:	428b      	cmp	r3, r1
 8005250:	db18      	blt.n	8005284 <sumNewestN+0x3c>
{
 8005252:	b410      	push	{r4}
    // 無効なnの値の場合はエラーとして0.0を返す
    return 0.0;
  }

  int index = rb->rear;
 8005254:	68c3      	ldr	r3, [r0, #12]
  float sum = 0.0;
 8005256:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800528c <sumNewestN+0x44>
  for (int i = 0; i < n; i++) {
    sum += rb->buffer[index];
    index = (index - 1 + rb->size) % rb->size;
 800525a:	e9d0 4000 	ldrd	r4, r0, [r0]
  for (int i = 0; i < n; i++) {
 800525e:	2200      	movs	r2, #0
    sum += rb->buffer[index];
 8005260:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8005264:	eddc 7a00 	vldr	s15, [ip]
    index = (index - 1 + rb->size) % rb->size;
 8005268:	3b01      	subs	r3, #1
  for (int i = 0; i < n; i++) {
 800526a:	3201      	adds	r2, #1
    index = (index - 1 + rb->size) % rb->size;
 800526c:	4403      	add	r3, r0
  for (int i = 0; i < n; i++) {
 800526e:	4291      	cmp	r1, r2
    index = (index - 1 + rb->size) % rb->size;
 8005270:	fb93 fcf0 	sdiv	ip, r3, r0
    sum += rb->buffer[index];
 8005274:	ee30 0a27 	vadd.f32	s0, s0, s15
    index = (index - 1 + rb->size) % rb->size;
 8005278:	fb00 331c 	mls	r3, r0, ip, r3
  for (int i = 0; i < n; i++) {
 800527c:	d1f0      	bne.n	8005260 <sumNewestN+0x18>
  }
  return sum;
}
 800527e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005282:	4770      	bx	lr
    return 0.0;
 8005284:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800528c <sumNewestN+0x44>
}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	00000000 	.word	0x00000000

08005290 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005290:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005292:	4811      	ldr	r0, [pc, #68]	; (80052d8 <MX_SPI1_Init+0x48>)
 8005294:	4c11      	ldr	r4, [pc, #68]	; (80052dc <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005296:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800529a:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800529c:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052a0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052a4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052a8:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80052ac:	2420      	movs	r4, #32
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052ae:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80052b0:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052b2:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052b8:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052bc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80052c0:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052c4:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052c6:	f003 f949 	bl	800855c <HAL_SPI_Init>
 80052ca:	b900      	cbnz	r0, 80052ce <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80052d2:	f7fe bdff 	b.w	8003ed4 <Error_Handler>
 80052d6:	bf00      	nop
 80052d8:	2000134c 	.word	0x2000134c
 80052dc:	40013000 	.word	0x40013000

080052e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80052e0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <HAL_SPI_MspInit+0x70>)
 80052e4:	6801      	ldr	r1, [r0, #0]
{
 80052e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e8:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 80052ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80052f4:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 80052f6:	d002      	beq.n	80052fe <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80052f8:	b009      	add	sp, #36	; 0x24
 80052fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005302:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005306:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005348 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 800530a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800530c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005310:	661a      	str	r2, [r3, #96]	; 0x60
 8005312:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005314:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005318:	9200      	str	r2, [sp, #0]
 800531a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800531c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	64da      	str	r2, [r3, #76]	; 0x4c
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800532c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800532e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005334:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005338:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800533a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800533c:	f002 f938 	bl	80075b0 <HAL_GPIO_Init>
}
 8005340:	b009      	add	sp, #36	; 0x24
 8005342:	f85d fb04 	ldr.w	pc, [sp], #4
 8005346:	bf00      	nop
 8005348:	000000e0 	.word	0x000000e0
 800534c:	00000002 	.word	0x00000002
 8005350:	40013000 	.word	0x40013000

08005354 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_MspInit+0x30>)
 8005356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	661a      	str	r2, [r3, #96]	; 0x60
 800535e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8005360:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005362:	f002 0201 	and.w	r2, r2, #1
 8005366:	9200      	str	r2, [sp, #0]
 8005368:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800536a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800536c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005370:	659a      	str	r2, [r3, #88]	; 0x58
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800537c:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 800537e:	f002 ba9d 	b.w	80078bc <HAL_PWREx_DisableUCPDDeadBattery>
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000

08005388 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop

0800538c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800538c:	e7fe      	b.n	800538c <HardFault_Handler>
 800538e:	bf00      	nop

08005390 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005390:	e7fe      	b.n	8005390 <MemManage_Handler>
 8005392:	bf00      	nop

08005394 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005394:	e7fe      	b.n	8005394 <BusFault_Handler>
 8005396:	bf00      	nop

08005398 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005398:	e7fe      	b.n	8005398 <UsageFault_Handler>
 800539a:	bf00      	nop

0800539c <SVC_Handler>:
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <DebugMon_Handler>:
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop

080053a4 <PendSV_Handler>:
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop

080053a8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053a8:	f000 bd3a 	b.w	8005e20 <HAL_IncTick>

080053ac <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80053ac:	4801      	ldr	r0, [pc, #4]	; (80053b4 <DMA1_Channel2_IRQHandler+0x8>)
 80053ae:	f001 bcad 	b.w	8006d0c <HAL_DMA_IRQHandler>
 80053b2:	bf00      	nop
 80053b4:	20001568 	.word	0x20001568

080053b8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80053b8:	4801      	ldr	r0, [pc, #4]	; (80053c0 <DMA1_Channel3_IRQHandler+0x8>)
 80053ba:	f001 bca7 	b.w	8006d0c <HAL_DMA_IRQHandler>
 80053be:	bf00      	nop
 80053c0:	200003b4 	.word	0x200003b4

080053c4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80053c4:	4801      	ldr	r0, [pc, #4]	; (80053cc <DMA1_Channel4_IRQHandler+0x8>)
 80053c6:	f001 bca1 	b.w	8006d0c <HAL_DMA_IRQHandler>
 80053ca:	bf00      	nop
 80053cc:	20000414 	.word	0x20000414

080053d0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <DMA1_Channel5_IRQHandler+0x8>)
 80053d2:	f001 bc9b 	b.w	8006d0c <HAL_DMA_IRQHandler>
 80053d6:	bf00      	nop
 80053d8:	20000354 	.word	0x20000354

080053dc <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <DMA1_Channel6_IRQHandler+0x8>)
 80053de:	f001 bc95 	b.w	8006d0c <HAL_DMA_IRQHandler>
 80053e2:	bf00      	nop
 80053e4:	20001448 	.word	0x20001448

080053e8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <DMA1_Channel7_IRQHandler+0x8>)
 80053ea:	f001 bc8f 	b.w	8006d0c <HAL_DMA_IRQHandler>
 80053ee:	bf00      	nop
 80053f0:	200014a8 	.word	0x200014a8

080053f4 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <FDCAN1_IT0_IRQHandler+0x8>)
 80053f6:	f002 b817 	b.w	8007428 <HAL_FDCAN_IRQHandler>
 80053fa:	bf00      	nop
 80053fc:	20000cc4 	.word	0x20000cc4

08005400 <FDCAN1_IT1_IRQHandler>:
 8005400:	4801      	ldr	r0, [pc, #4]	; (8005408 <FDCAN1_IT1_IRQHandler+0x8>)
 8005402:	f002 b811 	b.w	8007428 <HAL_FDCAN_IRQHandler>
 8005406:	bf00      	nop
 8005408:	20000cc4 	.word	0x20000cc4

0800540c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <USART2_IRQHandler+0x8>)
 800540e:	f004 ba43 	b.w	8009898 <HAL_UART_IRQHandler>
 8005412:	bf00      	nop
 8005414:	20001658 	.word	0x20001658

08005418 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <TIM7_DAC_IRQHandler+0x8>)
 800541a:	f003 bdb5 	b.w	8008f88 <HAL_TIM_IRQHandler>
 800541e:	bf00      	nop
 8005420:	200013fc 	.word	0x200013fc

08005424 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005424:	4801      	ldr	r0, [pc, #4]	; (800542c <FDCAN2_IT0_IRQHandler+0x8>)
 8005426:	f001 bfff 	b.w	8007428 <HAL_FDCAN_IRQHandler>
 800542a:	bf00      	nop
 800542c:	20000d28 	.word	0x20000d28

08005430 <FDCAN2_IT1_IRQHandler>:
 8005430:	4801      	ldr	r0, [pc, #4]	; (8005438 <FDCAN2_IT1_IRQHandler+0x8>)
 8005432:	f001 bff9 	b.w	8007428 <HAL_FDCAN_IRQHandler>
 8005436:	bf00      	nop
 8005438:	20000d28 	.word	0x20000d28

0800543c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800543c:	4801      	ldr	r0, [pc, #4]	; (8005444 <LPUART1_IRQHandler+0x8>)
 800543e:	f004 ba2b 	b.w	8009898 <HAL_UART_IRQHandler>
 8005442:	bf00      	nop
 8005444:	200015c8 	.word	0x200015c8

08005448 <DMA1_Channel8_IRQHandler>:
void DMA1_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <DMA1_Channel8_IRQHandler+0x8>)
 800544a:	f001 bc5f 	b.w	8006d0c <HAL_DMA_IRQHandler>
 800544e:	bf00      	nop
 8005450:	20001508 	.word	0x20001508

08005454 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005454:	2001      	movs	r0, #1
 8005456:	4770      	bx	lr

08005458 <_kill>:

int _kill(int pid, int sig)
{
 8005458:	b508      	push	{r3, lr}
	errno = EINVAL;
 800545a:	f006 fb53 	bl	800bb04 <__errno>
 800545e:	2316      	movs	r3, #22
 8005460:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	bd08      	pop	{r3, pc}

08005468 <_exit>:

void _exit (int status)
{
 8005468:	b508      	push	{r3, lr}
	errno = EINVAL;
 800546a:	f006 fb4b 	bl	800bb04 <__errno>
 800546e:	2316      	movs	r3, #22
 8005470:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005472:	e7fe      	b.n	8005472 <_exit+0xa>

08005474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005474:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005476:	1e16      	subs	r6, r2, #0
 8005478:	dd07      	ble.n	800548a <_read+0x16>
 800547a:	460c      	mov	r4, r1
 800547c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800547e:	f3af 8000 	nop.w
 8005482:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005486:	42a5      	cmp	r5, r4
 8005488:	d1f9      	bne.n	800547e <_read+0xa>
	}

return len;
}
 800548a:	4630      	mov	r0, r6
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	bf00      	nop

08005490 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005490:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005492:	1e16      	subs	r6, r2, #0
 8005494:	dd07      	ble.n	80054a6 <_write+0x16>
 8005496:	460c      	mov	r4, r1
 8005498:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800549a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800549e:	f7fd f983 	bl	80027a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054a2:	42ac      	cmp	r4, r5
 80054a4:	d1f9      	bne.n	800549a <_write+0xa>
	}
	return len;
}
 80054a6:	4630      	mov	r0, r6
 80054a8:	bd70      	pop	{r4, r5, r6, pc}
 80054aa:	bf00      	nop

080054ac <_close>:

int _close(int file)
{
	return -1;
}
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop

080054b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80054b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054b8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80054ba:	2000      	movs	r0, #0
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop

080054c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80054c0:	2001      	movs	r0, #1
 80054c2:	4770      	bx	lr

080054c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80054c4:	2000      	movs	r0, #0
 80054c6:	4770      	bx	lr

080054c8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <SystemInit+0x18>)
 80054ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80054d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054da:	6099      	str	r1, [r3, #8]
#endif
}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	e000ed00 	.word	0xe000ed00
 80054e4:	00000000 	.word	0x00000000

080054e8 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80054e8:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80054ea:	4c33      	ldr	r4, [pc, #204]	; (80055b8 <MX_TIM5_Init+0xd0>)
 80054ec:	4a33      	ldr	r2, [pc, #204]	; (80055bc <MX_TIM5_Init+0xd4>)
 80054ee:	6022      	str	r2, [r4, #0]
{
 80054f0:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 80054f2:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054f4:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 80054f6:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80054f8:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 80054fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054fe:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005502:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8005506:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800550a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 800550e:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005512:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005514:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005516:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005518:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800551a:	f003 fbe1 	bl	8008ce0 <HAL_TIM_PWM_Init>
 800551e:	bb00      	cbnz	r0, 8005562 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005520:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005522:	4825      	ldr	r0, [pc, #148]	; (80055b8 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005524:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005526:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005528:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800552a:	f003 ff83 	bl	8009434 <HAL_TIMEx_MasterConfigSynchronization>
 800552e:	b9f0      	cbnz	r0, 800556e <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005530:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80055a8 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005534:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005536:	4820      	ldr	r0, [pc, #128]	; (80055b8 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005538:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800553a:	2204      	movs	r2, #4
 800553c:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800553e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005542:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005544:	f003 fe6c 	bl	8009220 <HAL_TIM_PWM_ConfigChannel>
 8005548:	b970      	cbnz	r0, 8005568 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 800554a:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <MX_TIM5_Init+0xd4>)
 800554c:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800554e:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8005550:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005552:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005556:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800555a:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 800555c:	d00a      	beq.n	8005574 <MX_TIM5_Init+0x8c>
}
 800555e:	b012      	add	sp, #72	; 0x48
 8005560:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005562:	f7fe fcb7 	bl	8003ed4 <Error_Handler>
 8005566:	e7db      	b.n	8005520 <MX_TIM5_Init+0x38>
    Error_Handler();
 8005568:	f7fe fcb4 	bl	8003ed4 <Error_Handler>
 800556c:	e7ed      	b.n	800554a <MX_TIM5_Init+0x62>
    Error_Handler();
 800556e:	f7fe fcb1 	bl	8003ed4 <Error_Handler>
 8005572:	e7dd      	b.n	8005530 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005578:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 800557c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80055b0 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005582:	480f      	ldr	r0, [pc, #60]	; (80055c0 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005584:	f042 0204 	orr.w	r2, r2, #4
 8005588:	64da      	str	r2, [r3, #76]	; 0x4c
 800558a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005592:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005594:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8005596:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800559a:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800559c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800559e:	f002 f807 	bl	80075b0 <HAL_GPIO_Init>
}
 80055a2:	b012      	add	sp, #72	; 0x48
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	bf00      	nop
 80055a8:	00000060 	.word	0x00000060
 80055ac:	00000000 	.word	0x00000000
 80055b0:	00001000 	.word	0x00001000
 80055b4:	00000002 	.word	0x00000002
 80055b8:	200013b0 	.word	0x200013b0
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	48000800 	.word	0x48000800

080055c4 <MX_TIM7_Init>:
{
 80055c4:	b500      	push	{lr}
  htim7.Instance = TIM7;
 80055c6:	4812      	ldr	r0, [pc, #72]	; (8005610 <MX_TIM7_Init+0x4c>)
 80055c8:	4912      	ldr	r1, [pc, #72]	; (8005614 <MX_TIM7_Init+0x50>)
{
 80055ca:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 80055cc:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ce:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 80055d0:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 2000;
 80055d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 2000;
 80055dc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055e0:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80055e4:	f003 faa0 	bl	8008b28 <HAL_TIM_Base_Init>
 80055e8:	b950      	cbnz	r0, 8005600 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ea:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80055ec:	4808      	ldr	r0, [pc, #32]	; (8005610 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ee:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80055f0:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055f2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80055f4:	f003 ff1e 	bl	8009434 <HAL_TIMEx_MasterConfigSynchronization>
 80055f8:	b928      	cbnz	r0, 8005606 <MX_TIM7_Init+0x42>
}
 80055fa:	b005      	add	sp, #20
 80055fc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005600:	f7fe fc68 	bl	8003ed4 <Error_Handler>
 8005604:	e7f1      	b.n	80055ea <MX_TIM7_Init+0x26>
    Error_Handler();
 8005606:	f7fe fc65 	bl	8003ed4 <Error_Handler>
}
 800560a:	b005      	add	sp, #20
 800560c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005610:	200013fc 	.word	0x200013fc
 8005614:	40001400 	.word	0x40001400

08005618 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <HAL_TIM_PWM_MspInit+0x28>)
 800561a:	6802      	ldr	r2, [r0, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d000      	beq.n	8005622 <HAL_TIM_PWM_MspInit+0xa>
 8005620:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005622:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 8005626:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800562a:	f042 0208 	orr.w	r2, r2, #8
 800562e:	659a      	str	r2, [r3, #88]	; 0x58
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	9b01      	ldr	r3, [sp, #4]
}
 800563a:	b002      	add	sp, #8
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40000c00 	.word	0x40000c00

08005644 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_TIM_Base_MspInit+0x3c>)
 8005646:	6802      	ldr	r2, [r0, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d000      	beq.n	800564e <HAL_TIM_Base_MspInit+0xa>
 800564c:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 800564e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 8005652:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005654:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005656:	f041 0120 	orr.w	r1, r1, #32
 800565a:	6599      	str	r1, [r3, #88]	; 0x58
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800565e:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8005666:	2037      	movs	r0, #55	; 0x37
 8005668:	2200      	movs	r2, #0
 800566a:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 800566c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 800566e:	f001 f97f 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005672:	2037      	movs	r0, #55	; 0x37
}
 8005674:	b003      	add	sp, #12
 8005676:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800567a:	f001 b9b7 	b.w	80069ec <HAL_NVIC_EnableIRQ>
 800567e:	bf00      	nop
 8005680:	40001400 	.word	0x40001400
 8005684:	00000000 	.word	0x00000000

08005688 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005688:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005710 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 800568c:	4822      	ldr	r0, [pc, #136]	; (8005718 <MX_LPUART1_UART_Init+0x90>)
 800568e:	4923      	ldr	r1, [pc, #140]	; (800571c <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 8005690:	4a23      	ldr	r2, [pc, #140]	; (8005720 <MX_LPUART1_UART_Init+0x98>)
{
 8005692:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005694:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 8005696:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800569a:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800569c:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800569e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056a2:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80056a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80056aa:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ae:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80056b0:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80056b2:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80056b4:	f005 f84a 	bl	800a74c <HAL_UART_Init>
 80056b8:	b970      	cbnz	r0, 80056d8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056ba:	4817      	ldr	r0, [pc, #92]	; (8005718 <MX_LPUART1_UART_Init+0x90>)
 80056bc:	2100      	movs	r1, #0
 80056be:	f005 f953 	bl	800a968 <HAL_UARTEx_SetTxFifoThreshold>
 80056c2:	b988      	cbnz	r0, 80056e8 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056c4:	4814      	ldr	r0, [pc, #80]	; (8005718 <MX_LPUART1_UART_Init+0x90>)
 80056c6:	2100      	movs	r1, #0
 80056c8:	f005 f990 	bl	800a9ec <HAL_UARTEx_SetRxFifoThreshold>
 80056cc:	b9a0      	cbnz	r0, 80056f8 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80056ce:	4812      	ldr	r0, [pc, #72]	; (8005718 <MX_LPUART1_UART_Init+0x90>)
 80056d0:	f005 f92c 	bl	800a92c <HAL_UARTEx_DisableFifoMode>
 80056d4:	b9b8      	cbnz	r0, 8005706 <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80056d6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80056d8:	f7fe fbfc 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056dc:	480e      	ldr	r0, [pc, #56]	; (8005718 <MX_LPUART1_UART_Init+0x90>)
 80056de:	2100      	movs	r1, #0
 80056e0:	f005 f942 	bl	800a968 <HAL_UARTEx_SetTxFifoThreshold>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d0ed      	beq.n	80056c4 <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 80056e8:	f7fe fbf4 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056ec:	480a      	ldr	r0, [pc, #40]	; (8005718 <MX_LPUART1_UART_Init+0x90>)
 80056ee:	2100      	movs	r1, #0
 80056f0:	f005 f97c 	bl	800a9ec <HAL_UARTEx_SetRxFifoThreshold>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d0ea      	beq.n	80056ce <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 80056f8:	f7fe fbec 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80056fc:	4806      	ldr	r0, [pc, #24]	; (8005718 <MX_LPUART1_UART_Init+0x90>)
 80056fe:	f005 f915 	bl	800a92c <HAL_UARTEx_DisableFifoMode>
 8005702:	2800      	cmp	r0, #0
 8005704:	d0e7      	beq.n	80056d6 <MX_LPUART1_UART_Init+0x4e>
}
 8005706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800570a:	f7fe bbe3 	b.w	8003ed4 <Error_Handler>
 800570e:	bf00      	nop
	...
 8005718:	200015c8 	.word	0x200015c8
 800571c:	40008000 	.word	0x40008000
 8005720:	001e8480 	.word	0x001e8480

08005724 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005724:	4821      	ldr	r0, [pc, #132]	; (80057ac <MX_USART2_UART_Init+0x88>)
 8005726:	4922      	ldr	r1, [pc, #136]	; (80057b0 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 8005728:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 800572c:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800572e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8005730:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005734:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005736:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005738:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 800573c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005740:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005744:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005748:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800574c:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800574e:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005750:	f004 fffc 	bl	800a74c <HAL_UART_Init>
 8005754:	b970      	cbnz	r0, 8005774 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005756:	4815      	ldr	r0, [pc, #84]	; (80057ac <MX_USART2_UART_Init+0x88>)
 8005758:	2100      	movs	r1, #0
 800575a:	f005 f905 	bl	800a968 <HAL_UARTEx_SetTxFifoThreshold>
 800575e:	b988      	cbnz	r0, 8005784 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005760:	4812      	ldr	r0, [pc, #72]	; (80057ac <MX_USART2_UART_Init+0x88>)
 8005762:	2100      	movs	r1, #0
 8005764:	f005 f942 	bl	800a9ec <HAL_UARTEx_SetRxFifoThreshold>
 8005768:	b9a0      	cbnz	r0, 8005794 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800576a:	4810      	ldr	r0, [pc, #64]	; (80057ac <MX_USART2_UART_Init+0x88>)
 800576c:	f005 f8de 	bl	800a92c <HAL_UARTEx_DisableFifoMode>
 8005770:	b9b8      	cbnz	r0, 80057a2 <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005772:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005774:	f7fe fbae 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005778:	480c      	ldr	r0, [pc, #48]	; (80057ac <MX_USART2_UART_Init+0x88>)
 800577a:	2100      	movs	r1, #0
 800577c:	f005 f8f4 	bl	800a968 <HAL_UARTEx_SetTxFifoThreshold>
 8005780:	2800      	cmp	r0, #0
 8005782:	d0ed      	beq.n	8005760 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 8005784:	f7fe fba6 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005788:	4808      	ldr	r0, [pc, #32]	; (80057ac <MX_USART2_UART_Init+0x88>)
 800578a:	2100      	movs	r1, #0
 800578c:	f005 f92e 	bl	800a9ec <HAL_UARTEx_SetRxFifoThreshold>
 8005790:	2800      	cmp	r0, #0
 8005792:	d0ea      	beq.n	800576a <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8005794:	f7fe fb9e 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005798:	4804      	ldr	r0, [pc, #16]	; (80057ac <MX_USART2_UART_Init+0x88>)
 800579a:	f005 f8c7 	bl	800a92c <HAL_UARTEx_DisableFifoMode>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0e7      	beq.n	8005772 <MX_USART2_UART_Init+0x4e>
}
 80057a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80057a6:	f7fe bb95 	b.w	8003ed4 <Error_Handler>
 80057aa:	bf00      	nop
 80057ac:	20001658 	.word	0x20001658
 80057b0:	40004400 	.word	0x40004400

080057b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80057b4:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80057b6:	481f      	ldr	r0, [pc, #124]	; (8005834 <MX_USART3_UART_Init+0x80>)
 80057b8:	4c1f      	ldr	r4, [pc, #124]	; (8005838 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80057ba:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 80057bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80057c0:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 80057c2:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80057c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80057ca:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80057ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80057d2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057d6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80057d8:	f004 ffb8 	bl	800a74c <HAL_UART_Init>
 80057dc:	b970      	cbnz	r0, 80057fc <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057de:	4815      	ldr	r0, [pc, #84]	; (8005834 <MX_USART3_UART_Init+0x80>)
 80057e0:	2100      	movs	r1, #0
 80057e2:	f005 f8c1 	bl	800a968 <HAL_UARTEx_SetTxFifoThreshold>
 80057e6:	b988      	cbnz	r0, 800580c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057e8:	4812      	ldr	r0, [pc, #72]	; (8005834 <MX_USART3_UART_Init+0x80>)
 80057ea:	2100      	movs	r1, #0
 80057ec:	f005 f8fe 	bl	800a9ec <HAL_UARTEx_SetRxFifoThreshold>
 80057f0:	b9a0      	cbnz	r0, 800581c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80057f2:	4810      	ldr	r0, [pc, #64]	; (8005834 <MX_USART3_UART_Init+0x80>)
 80057f4:	f005 f89a 	bl	800a92c <HAL_UARTEx_DisableFifoMode>
 80057f8:	b9b8      	cbnz	r0, 800582a <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80057fa:	bd10      	pop	{r4, pc}
    Error_Handler();
 80057fc:	f7fe fb6a 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005800:	480c      	ldr	r0, [pc, #48]	; (8005834 <MX_USART3_UART_Init+0x80>)
 8005802:	2100      	movs	r1, #0
 8005804:	f005 f8b0 	bl	800a968 <HAL_UARTEx_SetTxFifoThreshold>
 8005808:	2800      	cmp	r0, #0
 800580a:	d0ed      	beq.n	80057e8 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 800580c:	f7fe fb62 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005810:	4808      	ldr	r0, [pc, #32]	; (8005834 <MX_USART3_UART_Init+0x80>)
 8005812:	2100      	movs	r1, #0
 8005814:	f005 f8ea 	bl	800a9ec <HAL_UARTEx_SetRxFifoThreshold>
 8005818:	2800      	cmp	r0, #0
 800581a:	d0ea      	beq.n	80057f2 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 800581c:	f7fe fb5a 	bl	8003ed4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005820:	4804      	ldr	r0, [pc, #16]	; (8005834 <MX_USART3_UART_Init+0x80>)
 8005822:	f005 f883 	bl	800a92c <HAL_UARTEx_DisableFifoMode>
 8005826:	2800      	cmp	r0, #0
 8005828:	d0e7      	beq.n	80057fa <MX_USART3_UART_Init+0x46>
}
 800582a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800582e:	f7fe bb51 	b.w	8003ed4 <Error_Handler>
 8005832:	bf00      	nop
 8005834:	200016e8 	.word	0x200016e8
 8005838:	40004800 	.word	0x40004800

0800583c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4604      	mov	r4, r0
 8005840:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005842:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005844:	2254      	movs	r2, #84	; 0x54
 8005846:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005848:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800584c:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8005850:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005852:	f006 f8f5 	bl	800ba40 <memset>
  if(uartHandle->Instance==LPUART1)
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	4a93      	ldr	r2, [pc, #588]	; (8005aa8 <HAL_UART_MspInit+0x26c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d008      	beq.n	8005870 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800585e:	4a93      	ldr	r2, [pc, #588]	; (8005aac <HAL_UART_MspInit+0x270>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d067      	beq.n	8005934 <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8005864:	4a92      	ldr	r2, [pc, #584]	; (8005ab0 <HAL_UART_MspInit+0x274>)
 8005866:	4293      	cmp	r3, r2
 8005868:	f000 80ba 	beq.w	80059e0 <HAL_UART_MspInit+0x1a4>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800586c:	b020      	add	sp, #128	; 0x80
 800586e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005870:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005872:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005874:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005876:	f002 fbd5 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 800587a:	2800      	cmp	r0, #0
 800587c:	f040 8104 	bne.w	8005a88 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005880:	4b8c      	ldr	r3, [pc, #560]	; (8005ab4 <HAL_UART_MspInit+0x278>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8005882:	4e8d      	ldr	r6, [pc, #564]	; (8005ab8 <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	65da      	str	r2, [r3, #92]	; 0x5c
 800588c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800588e:	f002 0201 	and.w	r2, r2, #1
 8005892:	9200      	str	r2, [sp, #0]
 8005894:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c
 800589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80058a6:	220c      	movs	r2, #12
 80058a8:	2302      	movs	r3, #2
 80058aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80058ae:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80058ba:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80058c0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058c2:	f001 fe75 	bl	80075b0 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80058c6:	497d      	ldr	r1, [pc, #500]	; (8005abc <HAL_UART_MspInit+0x280>)
 80058c8:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058ca:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80058cc:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80058d0:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058d2:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80058d4:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058d6:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058da:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80058de:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058e2:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80058e4:	f001 f8aa 	bl	8006a3c <HAL_DMA_Init>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	f040 80ca 	bne.w	8005a82 <HAL_UART_MspInit+0x246>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 80058ee:	4d74      	ldr	r5, [pc, #464]	; (8005ac0 <HAL_UART_MspInit+0x284>)
 80058f0:	4974      	ldr	r1, [pc, #464]	; (8005ac4 <HAL_UART_MspInit+0x288>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80058f2:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80058f4:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058f6:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80058f8:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80058fc:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058fe:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005900:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005902:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005906:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800590a:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800590e:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005910:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005912:	f001 f893 	bl	8006a3c <HAL_DMA_Init>
 8005916:	2800      	cmp	r0, #0
 8005918:	f040 80b0 	bne.w	8005a7c <HAL_UART_MspInit+0x240>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800591c:	2200      	movs	r2, #0
 800591e:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005920:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005922:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005924:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005926:	f001 f823 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800592a:	205b      	movs	r0, #91	; 0x5b
 800592c:	f001 f85e 	bl	80069ec <HAL_NVIC_EnableIRQ>
}
 8005930:	b020      	add	sp, #128	; 0x80
 8005932:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005934:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005936:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005938:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800593a:	f002 fb73 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 800593e:	2800      	cmp	r0, #0
 8005940:	f040 80a5 	bne.w	8005a8e <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005944:	4b5b      	ldr	r3, [pc, #364]	; (8005ab4 <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005946:	4860      	ldr	r0, [pc, #384]	; (8005ac8 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_tx.Instance = DMA1_Channel8;
 800594a:	4d60      	ldr	r5, [pc, #384]	; (8005acc <HAL_UART_MspInit+0x290>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800594c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005950:	659a      	str	r2, [r3, #88]	; 0x58
 8005952:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005954:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005958:	9202      	str	r2, [sp, #8]
 800595a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800595c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595e:	f042 0202 	orr.w	r2, r2, #2
 8005962:	64da      	str	r2, [r3, #76]	; 0x4c
 8005964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 800596c:	2208      	movs	r2, #8
 800596e:	2302      	movs	r3, #2
 8005970:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005974:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005976:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005978:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800597a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 800597c:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 800597e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005980:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005984:	f001 fe14 	bl	80075b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005988:	2210      	movs	r2, #16
 800598a:	2302      	movs	r3, #2
 800598c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005990:	484d      	ldr	r0, [pc, #308]	; (8005ac8 <HAL_UART_MspInit+0x28c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005992:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005994:	2201      	movs	r2, #1
 8005996:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005998:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 800599a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 800599e:	f001 fe07 	bl	80075b0 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80059a2:	494b      	ldr	r1, [pc, #300]	; (8005ad0 <HAL_UART_MspInit+0x294>)
 80059a4:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059a6:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80059a8:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80059ac:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059ae:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059b0:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059b2:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059b6:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80059ba:	e9c5 3307 	strd	r3, r3, [r5, #28]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059be:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80059c0:	f001 f83c 	bl	8006a3c <HAL_DMA_Init>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d165      	bne.n	8005a94 <HAL_UART_MspInit+0x258>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059c8:	2200      	movs	r2, #0
 80059ca:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80059cc:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059ce:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80059d0:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059d2:	f000 ffcd 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059d6:	2026      	movs	r0, #38	; 0x26
 80059d8:	f001 f808 	bl	80069ec <HAL_NVIC_EnableIRQ>
}
 80059dc:	b020      	add	sp, #128	; 0x80
 80059de:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80059e0:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059e2:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80059e4:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059e6:	f002 fb1d 	bl	8008024 <HAL_RCCEx_PeriphCLKConfig>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d158      	bne.n	8005aa0 <HAL_UART_MspInit+0x264>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059ee:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 80059f0:	4838      	ldr	r0, [pc, #224]	; (8005ad4 <HAL_UART_MspInit+0x298>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80059f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 80059f4:	4d38      	ldr	r5, [pc, #224]	; (8005ad8 <HAL_UART_MspInit+0x29c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80059f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80059fa:	659a      	str	r2, [r3, #88]	; 0x58
 80059fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80059fe:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005a02:	9204      	str	r2, [sp, #16]
 8005a04:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a08:	f042 0204 	orr.w	r2, r2, #4
 8005a0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a20:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005a22:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a24:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a26:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005a28:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005a2a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005a2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005a30:	f001 fdbe 	bl	80075b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8005a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005a3e:	4825      	ldr	r0, [pc, #148]	; (8005ad4 <HAL_UART_MspInit+0x298>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a40:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8005a42:	2201      	movs	r2, #1
 8005a44:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005a46:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8005a48:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005a4c:	f001 fdb0 	bl	80075b0 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005a50:	4922      	ldr	r1, [pc, #136]	; (8005adc <HAL_UART_MspInit+0x2a0>)
 8005a52:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a54:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005a56:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a5a:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a5c:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005a5e:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a60:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a64:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005a68:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a6c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a6e:	f000 ffe5 	bl	8006a3c <HAL_DMA_Init>
 8005a72:	b990      	cbnz	r0, 8005a9a <HAL_UART_MspInit+0x25e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005a74:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005a76:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8005a78:	b020      	add	sp, #128	; 0x80
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005a7c:	f7fe fa2a 	bl	8003ed4 <Error_Handler>
 8005a80:	e74c      	b.n	800591c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005a82:	f7fe fa27 	bl	8003ed4 <Error_Handler>
 8005a86:	e732      	b.n	80058ee <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8005a88:	f7fe fa24 	bl	8003ed4 <Error_Handler>
 8005a8c:	e6f8      	b.n	8005880 <HAL_UART_MspInit+0x44>
      Error_Handler();
 8005a8e:	f7fe fa21 	bl	8003ed4 <Error_Handler>
 8005a92:	e757      	b.n	8005944 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8005a94:	f7fe fa1e 	bl	8003ed4 <Error_Handler>
 8005a98:	e796      	b.n	80059c8 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8005a9a:	f7fe fa1b 	bl	8003ed4 <Error_Handler>
 8005a9e:	e7e9      	b.n	8005a74 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8005aa0:	f7fe fa18 	bl	8003ed4 <Error_Handler>
 8005aa4:	e7a3      	b.n	80059ee <HAL_UART_MspInit+0x1b2>
 8005aa6:	bf00      	nop
 8005aa8:	40008000 	.word	0x40008000
 8005aac:	40004400 	.word	0x40004400
 8005ab0:	40004800 	.word	0x40004800
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	20001448 	.word	0x20001448
 8005abc:	4002006c 	.word	0x4002006c
 8005ac0:	200014a8 	.word	0x200014a8
 8005ac4:	40020080 	.word	0x40020080
 8005ac8:	48000400 	.word	0x48000400
 8005acc:	20001508 	.word	0x20001508
 8005ad0:	40020094 	.word	0x40020094
 8005ad4:	48000800 	.word	0x48000800
 8005ad8:	20001568 	.word	0x20001568
 8005adc:	4002001c 	.word	0x4002001c

08005ae0 <uchar4_to_float>:
  Float_char4 tmp;
  tmp.char4_value[0] = value[0];
  tmp.char4_value[1] = value[1];
  tmp.char4_value[2] = value[2];
  tmp.char4_value[3] = value[3];
  return tmp.float_value;
 8005ae0:	6803      	ldr	r3, [r0, #0]
 8005ae2:	ee00 3a10 	vmov	s0, r3
}
 8005ae6:	4770      	bx	lr

08005ae8 <float_to_uchar4>:

void float_to_uchar4(unsigned char * value, float float_value)
{
  Float_char4 tmp;
  tmp.float_value = float_value;
  value[0] = tmp.char4_value[0];
 8005ae8:	ee10 3a10 	vmov	r3, s0
 8005aec:	6003      	str	r3, [r0, #0]
  value[1] = tmp.char4_value[1];
  value[2] = tmp.char4_value[2];
  value[3] = tmp.char4_value[3];
}
 8005aee:	4770      	bx	lr

08005af0 <getAngleDiff>:
  }
  return angle_rad;
}

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8005af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (angle_rad > M_PI) {
 8005af4:	ee10 0a10 	vmov	r0, s0
{
 8005af8:	ed2d 8b04 	vpush	{d8-d9}
 8005afc:	eeb0 8a40 	vmov.f32	s16, s0
 8005b00:	eef0 8a60 	vmov.f32	s17, s1
  while (angle_rad > M_PI) {
 8005b04:	f7fa fd48 	bl	8000598 <__aeabi_f2d>
 8005b08:	a35f      	add	r3, pc, #380	; (adr r3, 8005c88 <getAngleDiff+0x198>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	4606      	mov	r6, r0
 8005b10:	460f      	mov	r7, r1
 8005b12:	f7fb f829 	bl	8000b68 <__aeabi_dcmpgt>
 8005b16:	b1d0      	cbz	r0, 8005b4e <getAngleDiff+0x5e>
    angle_rad -= 2.0f * M_PI;
 8005b18:	f20f 1974 	addw	r9, pc, #372	; 0x174
 8005b1c:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 8005b20:	a559      	add	r5, pc, #356	; (adr r5, 8005c88 <getAngleDiff+0x198>)
 8005b22:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad -= 2.0f * M_PI;
 8005b26:	4642      	mov	r2, r8
 8005b28:	464b      	mov	r3, r9
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fbd3 	bl	80002d8 <__aeabi_dsub>
 8005b32:	f7fb f881 	bl	8000c38 <__aeabi_d2f>
 8005b36:	ee08 0a10 	vmov	s16, r0
  while (angle_rad > M_PI) {
 8005b3a:	f7fa fd2d 	bl	8000598 <__aeabi_f2d>
 8005b3e:	4622      	mov	r2, r4
 8005b40:	462b      	mov	r3, r5
 8005b42:	4606      	mov	r6, r0
 8005b44:	460f      	mov	r7, r1
 8005b46:	f7fb f80f 	bl	8000b68 <__aeabi_dcmpgt>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d1eb      	bne.n	8005b26 <getAngleDiff+0x36>
  while (angle_rad < -M_PI) {
 8005b4e:	a352      	add	r3, pc, #328	; (adr r3, 8005c98 <getAngleDiff+0x1a8>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	4630      	mov	r0, r6
 8005b56:	4639      	mov	r1, r7
 8005b58:	f7fa ffe8 	bl	8000b2c <__aeabi_dcmplt>
 8005b5c:	b1d0      	cbz	r0, 8005b94 <getAngleDiff+0xa4>
    angle_rad += 2.0f * M_PI;
 8005b5e:	f20f 1930 	addw	r9, pc, #304	; 0x130
 8005b62:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 8005b66:	a54c      	add	r5, pc, #304	; (adr r5, 8005c98 <getAngleDiff+0x1a8>)
 8005b68:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad += 2.0f * M_PI;
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	464b      	mov	r3, r9
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f7fa fbb2 	bl	80002dc <__adddf3>
 8005b78:	f7fb f85e 	bl	8000c38 <__aeabi_d2f>
 8005b7c:	ee08 0a10 	vmov	s16, r0
  while (angle_rad < -M_PI) {
 8005b80:	f7fa fd0a 	bl	8000598 <__aeabi_f2d>
 8005b84:	4622      	mov	r2, r4
 8005b86:	462b      	mov	r3, r5
 8005b88:	4606      	mov	r6, r0
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	f7fa ffce 	bl	8000b2c <__aeabi_dcmplt>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d1eb      	bne.n	8005b6c <getAngleDiff+0x7c>
  while (angle_rad > M_PI) {
 8005b94:	ee18 0a90 	vmov	r0, s17
 8005b98:	f7fa fcfe 	bl	8000598 <__aeabi_f2d>
 8005b9c:	a33a      	add	r3, pc, #232	; (adr r3, 8005c88 <getAngleDiff+0x198>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	f7fa ffdf 	bl	8000b68 <__aeabi_dcmpgt>
 8005baa:	b1d8      	cbz	r0, 8005be4 <getAngleDiff+0xf4>
    angle_rad -= 2.0f * M_PI;
 8005bac:	f20f 09e0 	addw	r9, pc, #224	; 0xe0
 8005bb0:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 8005bb4:	f20f 0bd0 	addw	fp, pc, #208	; 0xd0
 8005bb8:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad -= 2.0f * M_PI;
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	f7fa fb88 	bl	80002d8 <__aeabi_dsub>
 8005bc8:	f7fb f836 	bl	8000c38 <__aeabi_d2f>
 8005bcc:	ee08 0a90 	vmov	s17, r0
  while (angle_rad > M_PI) {
 8005bd0:	f7fa fce2 	bl	8000598 <__aeabi_f2d>
 8005bd4:	4652      	mov	r2, sl
 8005bd6:	465b      	mov	r3, fp
 8005bd8:	4604      	mov	r4, r0
 8005bda:	460d      	mov	r5, r1
 8005bdc:	f7fa ffc4 	bl	8000b68 <__aeabi_dcmpgt>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d1eb      	bne.n	8005bbc <getAngleDiff+0xcc>
  while (angle_rad < -M_PI) {
 8005be4:	a32c      	add	r3, pc, #176	; (adr r3, 8005c98 <getAngleDiff+0x1a8>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	f7fa ff9d 	bl	8000b2c <__aeabi_dcmplt>
 8005bf2:	b1d8      	cbz	r0, 8005c2c <getAngleDiff+0x13c>
    angle_rad += 2.0f * M_PI;
 8005bf4:	f20f 0998 	addw	r9, pc, #152	; 0x98
 8005bf8:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 8005bfc:	f20f 0b98 	addw	fp, pc, #152	; 0x98
 8005c00:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad += 2.0f * M_PI;
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f7fa fb66 	bl	80002dc <__adddf3>
 8005c10:	f7fb f812 	bl	8000c38 <__aeabi_d2f>
 8005c14:	ee08 0a90 	vmov	s17, r0
  while (angle_rad < -M_PI) {
 8005c18:	f7fa fcbe 	bl	8000598 <__aeabi_f2d>
 8005c1c:	4652      	mov	r2, sl
 8005c1e:	465b      	mov	r3, fp
 8005c20:	4604      	mov	r4, r0
 8005c22:	460d      	mov	r5, r1
 8005c24:	f7fa ff82 	bl	8000b2c <__aeabi_dcmplt>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d1eb      	bne.n	8005c04 <getAngleDiff+0x114>
  angle_rad1 = normalizeAngle(angle_rad1);
  angle_rad2 = normalizeAngle(angle_rad2);
  if (fabs(angle_rad1 - angle_rad2) > M_PI) {
 8005c2c:	ee38 9a68 	vsub.f32	s18, s16, s17
 8005c30:	eef0 7ac9 	vabs.f32	s15, s18
 8005c34:	ee17 0a90 	vmov	r0, s15
 8005c38:	f7fa fcae 	bl	8000598 <__aeabi_f2d>
 8005c3c:	a312      	add	r3, pc, #72	; (adr r3, 8005c88 <getAngleDiff+0x198>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa ff91 	bl	8000b68 <__aeabi_dcmpgt>
 8005c46:	b198      	cbz	r0, 8005c70 <getAngleDiff+0x180>
    if (angle_rad1 > angle_rad2) {
 8005c48:	eef4 8ac8 	vcmpe.f32	s17, s16
 8005c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8005c50:	a30f      	add	r3, pc, #60	; (adr r3, 8005c90 <getAngleDiff+0x1a0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	4630      	mov	r0, r6
 8005c58:	4639      	mov	r1, r7
    if (angle_rad1 > angle_rad2) {
 8005c5a:	d40f      	bmi.n	8005c7c <getAngleDiff+0x18c>
    } else {
      return (angle_rad1 + 2 * M_PI) - angle_rad2;
 8005c5c:	f7fa fb3e 	bl	80002dc <__adddf3>
 8005c60:	4622      	mov	r2, r4
 8005c62:	462b      	mov	r3, r5
 8005c64:	f7fa fb38 	bl	80002d8 <__aeabi_dsub>
 8005c68:	f7fa ffe6 	bl	8000c38 <__aeabi_d2f>
 8005c6c:	ee09 0a10 	vmov	s18, r0
    }
  } else {
    return angle_rad1 - angle_rad2;
  }
}
 8005c70:	eeb0 0a49 	vmov.f32	s0, s18
 8005c74:	ecbd 8b04 	vpop	{d8-d9}
 8005c78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8005c7c:	f7fa fb2c 	bl	80002d8 <__aeabi_dsub>
 8005c80:	e7ee      	b.n	8005c60 <getAngleDiff+0x170>
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
 8005c88:	54442d18 	.word	0x54442d18
 8005c8c:	400921fb 	.word	0x400921fb
 8005c90:	54442d18 	.word	0x54442d18
 8005c94:	401921fb 	.word	0x401921fb
 8005c98:	54442d18 	.word	0x54442d18
 8005c9c:	c00921fb 	.word	0xc00921fb

08005ca0 <decode_SW>:

uint8_t decode_SW(uint16_t sw_raw_data)
{
  int data;
  sw_raw_data = sw_raw_data & 0xFFFF;
  if (sw_raw_data < 100) {
 8005ca0:	2863      	cmp	r0, #99	; 0x63
 8005ca2:	d906      	bls.n	8005cb2 <decode_SW+0x12>
    data = 0b00010000;  // C
  } else if (sw_raw_data < 500 && sw_raw_data > 100) {
 8005ca4:	f1a0 0365 	sub.w	r3, r0, #101	; 0x65
 8005ca8:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8005cac:	d803      	bhi.n	8005cb6 <decode_SW+0x16>
 8005cae:	2002      	movs	r0, #2
 8005cb0:	4770      	bx	lr
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	4770      	bx	lr
    data = 0b00000010;  // B
  } else if (sw_raw_data < 2000 && sw_raw_data > 500) {
 8005cb6:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 8005cba:	1883      	adds	r3, r0, r2
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f240 52da 	movw	r2, #1498	; 0x5da
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d910      	bls.n	8005ce8 <decode_SW+0x48>
    data = 0b00000100;  // R
  } else if (sw_raw_data < 3000 && sw_raw_data > 2000) {
 8005cc6:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
 8005cca:	18c3      	adds	r3, r0, r3
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f240 32e6 	movw	r2, #998	; 0x3e6
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d90a      	bls.n	8005cec <decode_SW+0x4c>
    data = 0b00000001;  // F
  } else if (sw_raw_data < 4000 && sw_raw_data > 3000) {
 8005cd6:	f6a0 30b9 	subw	r0, r0, #3001	; 0xbb9
 8005cda:	b280      	uxth	r0, r0
 8005cdc:	4290      	cmp	r0, r2
 8005cde:	bf8c      	ite	hi
 8005ce0:	2000      	movhi	r0, #0
 8005ce2:	2001      	movls	r0, #1
    data = 0b00001000;  // L
  } else {
    data = 0b00000000;
  }
  return data;
 8005ce4:	00c0      	lsls	r0, r0, #3
 8005ce6:	4770      	bx	lr
 8005ce8:	2004      	movs	r0, #4
 8005cea:	4770      	bx	lr
 8005cec:	2001      	movs	r0, #1
}
 8005cee:	4770      	bx	lr

08005cf0 <two_to_float>:

float two_to_float(uint8_t data[2]) { return (float)((data[0] << 8 | data[1]) - 32767.0) / 32767.0; }
 8005cf0:	b508      	push	{r3, lr}
 8005cf2:	8800      	ldrh	r0, [r0, #0]
 8005cf4:	ba40      	rev16	r0, r0
 8005cf6:	b280      	uxth	r0, r0
 8005cf8:	f7fa fc3c 	bl	8000574 <__aeabi_i2d>
 8005cfc:	a30a      	add	r3, pc, #40	; (adr r3, 8005d28 <two_to_float+0x38>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fae9 	bl	80002d8 <__aeabi_dsub>
 8005d06:	f7fa ff97 	bl	8000c38 <__aeabi_d2f>
 8005d0a:	f7fa fc45 	bl	8000598 <__aeabi_f2d>
 8005d0e:	a308      	add	r3, pc, #32	; (adr r3, 8005d30 <two_to_float+0x40>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fc98 	bl	8000648 <__aeabi_dmul>
 8005d18:	f7fa ff8e 	bl	8000c38 <__aeabi_d2f>
 8005d1c:	ee00 0a10 	vmov	s0, r0
 8005d20:	bd08      	pop	{r3, pc}
 8005d22:	bf00      	nop
 8005d24:	f3af 8000 	nop.w
 8005d28:	00000000 	.word	0x00000000
 8005d2c:	40dfffc0 	.word	0x40dfffc0
 8005d30:	00400080 	.word	0x00400080
 8005d34:	3f000020 	.word	0x3f000020

08005d38 <two_to_int>:
float two_to_int(uint8_t data[2]) { return ((data[0] << 8 | data[1]) - 32767.0); }
 8005d38:	b508      	push	{r3, lr}
 8005d3a:	8800      	ldrh	r0, [r0, #0]
 8005d3c:	ba40      	rev16	r0, r0
 8005d3e:	b280      	uxth	r0, r0
 8005d40:	f7fa fc18 	bl	8000574 <__aeabi_i2d>
 8005d44:	a304      	add	r3, pc, #16	; (adr r3, 8005d58 <two_to_int+0x20>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fac5 	bl	80002d8 <__aeabi_dsub>
 8005d4e:	f7fa ff73 	bl	8000c38 <__aeabi_d2f>
 8005d52:	ee00 0a10 	vmov	s0, r0
 8005d56:	bd08      	pop	{r3, pc}
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	40dfffc0 	.word	0x40dfffc0

08005d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005d60:	480d      	ldr	r0, [pc, #52]	; (8005d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005d62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d64:	480d      	ldr	r0, [pc, #52]	; (8005d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8005d66:	490e      	ldr	r1, [pc, #56]	; (8005da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005d68:	4a0e      	ldr	r2, [pc, #56]	; (8005da4 <LoopForever+0xe>)
  movs r3, #0
 8005d6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005d6c:	e002      	b.n	8005d74 <LoopCopyDataInit>

08005d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d72:	3304      	adds	r3, #4

08005d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d78:	d3f9      	bcc.n	8005d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d7a:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005d7c:	4c0b      	ldr	r4, [pc, #44]	; (8005dac <LoopForever+0x16>)
  movs r3, #0
 8005d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d80:	e001      	b.n	8005d86 <LoopFillZerobss>

08005d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d84:	3204      	adds	r2, #4

08005d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d88:	d3fb      	bcc.n	8005d82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005d8a:	f7ff fb9d 	bl	80054c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d8e:	f005 febf 	bl	800bb10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d92:	f7fe f901 	bl	8003f98 <main>

08005d96 <LoopForever>:

LoopForever:
    b LoopForever
 8005d96:	e7fe      	b.n	8005d96 <LoopForever>
  ldr   r0, =_estack
 8005d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005da0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005da4:	0800f730 	.word	0x0800f730
  ldr r2, =_sbss
 8005da8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005dac:	200018cc 	.word	0x200018cc

08005db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005db0:	e7fe      	b.n	8005db0 <ADC1_2_IRQHandler>
	...

08005db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005db4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005db6:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <HAL_InitTick+0x40>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	b90b      	cbnz	r3, 8005dc0 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005dbc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005dc0:	490d      	ldr	r1, [pc, #52]	; (8005df8 <HAL_InitTick+0x44>)
 8005dc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dcc:	6808      	ldr	r0, [r1, #0]
 8005dce:	fbb0 f0f3 	udiv	r0, r0, r3
 8005dd2:	f000 fe19 	bl	8006a08 <HAL_SYSTICK_Config>
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d1ef      	bne.n	8005dbc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ddc:	2d0f      	cmp	r5, #15
 8005dde:	d8ed      	bhi.n	8005dbc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005de0:	4602      	mov	r2, r0
 8005de2:	4629      	mov	r1, r5
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	f000 fdc2 	bl	8006970 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <HAL_InitTick+0x48>)
 8005dee:	4620      	mov	r0, r4
 8005df0:	601d      	str	r5, [r3, #0]
}
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	2000000c 	.word	0x2000000c
 8005df8:	20000008 	.word	0x20000008
 8005dfc:	20000010 	.word	0x20000010

08005e00 <HAL_Init>:
{
 8005e00:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e02:	2003      	movs	r0, #3
 8005e04:	f000 fda2 	bl	800694c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f7ff ffd3 	bl	8005db4 <HAL_InitTick>
 8005e0e:	b110      	cbz	r0, 8005e16 <HAL_Init+0x16>
    status = HAL_ERROR;
 8005e10:	2401      	movs	r4, #1
}
 8005e12:	4620      	mov	r0, r4
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	4604      	mov	r4, r0
    HAL_MspInit();
 8005e18:	f7ff fa9c 	bl	8005354 <HAL_MspInit>
}
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bd10      	pop	{r4, pc}

08005e20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005e20:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <HAL_IncTick+0x10>)
 8005e22:	4904      	ldr	r1, [pc, #16]	; (8005e34 <HAL_IncTick+0x14>)
 8005e24:	6813      	ldr	r3, [r2, #0]
 8005e26:	6809      	ldr	r1, [r1, #0]
 8005e28:	440b      	add	r3, r1
 8005e2a:	6013      	str	r3, [r2, #0]
}
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20001778 	.word	0x20001778
 8005e34:	2000000c 	.word	0x2000000c

08005e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005e3c:	f7fc fcc6 	bl	80027cc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e40:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005e42:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005e44:	d002      	beq.n	8005e4c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_Delay+0x20>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e4c:	f7fc fcbe 	bl	80027cc <HAL_GetTick>
 8005e50:	1b43      	subs	r3, r0, r5
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	d3fa      	bcc.n	8005e4c <HAL_Delay+0x14>
  {
  }
}
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	2000000c 	.word	0x2000000c

08005e5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e5c:	b530      	push	{r4, r5, lr}
 8005e5e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f000 80d4 	beq.w	8006012 <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005e6a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	f000 809d 	beq.w	8005fae <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005e74:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005e76:	6893      	ldr	r3, [r2, #8]
 8005e78:	009d      	lsls	r5, r3, #2
 8005e7a:	d505      	bpl.n	8005e88 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005e7c:	6893      	ldr	r3, [r2, #8]
 8005e7e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005e82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e86:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e88:	6893      	ldr	r3, [r2, #8]
 8005e8a:	00d8      	lsls	r0, r3, #3
 8005e8c:	d419      	bmi.n	8005ec2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e8e:	4b7e      	ldr	r3, [pc, #504]	; (8006088 <HAL_ADC_Init+0x22c>)
 8005e90:	487e      	ldr	r0, [pc, #504]	; (800608c <HAL_ADC_Init+0x230>)
 8005e92:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005e94:	6891      	ldr	r1, [r2, #8]
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	fba0 0303 	umull	r0, r3, r0, r3
 8005e9c:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005eae:	6091      	str	r1, [r2, #8]
 8005eb0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	b12b      	cbz	r3, 8005ec2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005eb6:	9b01      	ldr	r3, [sp, #4]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005ebc:	9b01      	ldr	r3, [sp, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f9      	bne.n	8005eb6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ec2:	6893      	ldr	r3, [r2, #8]
 8005ec4:	00d9      	lsls	r1, r3, #3
 8005ec6:	d464      	bmi.n	8005f92 <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ec8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005eca:	f043 0310 	orr.w	r3, r3, #16
 8005ece:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ed0:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005ed2:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ed4:	4303      	orrs	r3, r0
 8005ed6:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ed8:	6893      	ldr	r3, [r2, #8]
 8005eda:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ede:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ee0:	d15e      	bne.n	8005fa0 <HAL_ADC_Init+0x144>
 8005ee2:	06db      	lsls	r3, r3, #27
 8005ee4:	d45c      	bmi.n	8005fa0 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ee6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ee8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005eec:	f043 0302 	orr.w	r3, r3, #2
 8005ef0:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ef2:	6893      	ldr	r3, [r2, #8]
 8005ef4:	07dd      	lsls	r5, r3, #31
 8005ef6:	d419      	bmi.n	8005f2c <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ef8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005efc:	4b64      	ldr	r3, [pc, #400]	; (8006090 <HAL_ADC_Init+0x234>)
 8005efe:	f000 80a0 	beq.w	8006042 <HAL_ADC_Init+0x1e6>
 8005f02:	429a      	cmp	r2, r3
 8005f04:	f000 80a5 	beq.w	8006052 <HAL_ADC_Init+0x1f6>
 8005f08:	4962      	ldr	r1, [pc, #392]	; (8006094 <HAL_ADC_Init+0x238>)
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0e:	6889      	ldr	r1, [r1, #8]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	430b      	orrs	r3, r1
 8005f14:	4960      	ldr	r1, [pc, #384]	; (8006098 <HAL_ADC_Init+0x23c>)
 8005f16:	6889      	ldr	r1, [r1, #8]
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	07d9      	lsls	r1, r3, #31
 8005f1c:	d406      	bmi.n	8005f2c <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005f1e:	495f      	ldr	r1, [pc, #380]	; (800609c <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f20:	688b      	ldr	r3, [r1, #8]
 8005f22:	6865      	ldr	r5, [r4, #4]
 8005f24:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005f28:	432b      	orrs	r3, r5
 8005f2a:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8005f2c:	68e5      	ldr	r5, [r4, #12]
 8005f2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005f30:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8005f34:	432b      	orrs	r3, r5
 8005f36:	68a5      	ldr	r5, [r4, #8]
 8005f38:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005f3a:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f3c:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8005f3e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f46:	d05f      	beq.n	8006008 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f4a:	b121      	cbz	r1, 8005f56 <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8005f4c:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f4e:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005f52:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f54:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005f56:	68d5      	ldr	r5, [r2, #12]
 8005f58:	4951      	ldr	r1, [pc, #324]	; (80060a0 <HAL_ADC_Init+0x244>)
 8005f5a:	4029      	ands	r1, r5
 8005f5c:	4319      	orrs	r1, r3
 8005f5e:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005f60:	6913      	ldr	r3, [r2, #16]
 8005f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f6c:	6893      	ldr	r3, [r2, #8]
 8005f6e:	075b      	lsls	r3, r3, #29
 8005f70:	d523      	bpl.n	8005fba <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f72:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f74:	6963      	ldr	r3, [r4, #20]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d04e      	beq.n	8006018 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005f7c:	f023 030f 	bic.w	r3, r3, #15
 8005f80:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f84:	f023 0303 	bic.w	r3, r3, #3
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005f8e:	b003      	add	sp, #12
 8005f90:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f92:	6893      	ldr	r3, [r2, #8]
 8005f94:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f98:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f9e:	d0a0      	beq.n	8005ee2 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fa0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005fa2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fa4:	f043 0310 	orr.w	r3, r3, #16
 8005fa8:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8005faa:	b003      	add	sp, #12
 8005fac:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8005fae:	f7fb fa67 	bl	8001480 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005fb2:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005fb4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005fb8:	e75c      	b.n	8005e74 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005fba:	6893      	ldr	r3, [r2, #8]
 8005fbc:	071d      	lsls	r5, r3, #28
 8005fbe:	d4d9      	bmi.n	8005f74 <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005fc0:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005fc2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005fc6:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005fc8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005fcc:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005fce:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005fd2:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005fd6:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8005fd8:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005fda:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005fdc:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005fde:	bb19      	cbnz	r1, 8006028 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005fe6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005fea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005fee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ff2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8005ff6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d032      	beq.n	8006064 <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ffe:	6913      	ldr	r3, [r2, #16]
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	6113      	str	r3, [r2, #16]
 8006006:	e7b5      	b.n	8005f74 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006008:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800600a:	3901      	subs	r1, #1
 800600c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8006010:	e79a      	b.n	8005f48 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 8006012:	2001      	movs	r0, #1
}
 8006014:	b003      	add	sp, #12
 8006016:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006018:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800601a:	6a23      	ldr	r3, [r4, #32]
 800601c:	f021 010f 	bic.w	r1, r1, #15
 8006020:	3b01      	subs	r3, #1
 8006022:	430b      	orrs	r3, r1
 8006024:	6313      	str	r3, [r2, #48]	; 0x30
 8006026:	e7ac      	b.n	8005f82 <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800602e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006032:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006036:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800603a:	430b      	orrs	r3, r1
 800603c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006040:	e7d9      	b.n	8005ff6 <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006042:	6891      	ldr	r1, [r2, #8]
 8006044:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006046:	430b      	orrs	r3, r1
 8006048:	07db      	lsls	r3, r3, #31
 800604a:	f53f af6f 	bmi.w	8005f2c <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800604e:	4915      	ldr	r1, [pc, #84]	; (80060a4 <HAL_ADC_Init+0x248>)
 8006050:	e766      	b.n	8005f20 <HAL_ADC_Init+0xc4>
 8006052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800605a:	430b      	orrs	r3, r1
 800605c:	07d9      	lsls	r1, r3, #31
 800605e:	f53f af65 	bmi.w	8005f2c <HAL_ADC_Init+0xd0>
 8006062:	e7f4      	b.n	800604e <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 8006064:	6911      	ldr	r1, [r2, #16]
 8006066:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006068:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800606a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800606e:	f021 0104 	bic.w	r1, r1, #4
 8006072:	432b      	orrs	r3, r5
 8006074:	430b      	orrs	r3, r1
 8006076:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006078:	430b      	orrs	r3, r1
 800607a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800607c:	430b      	orrs	r3, r1
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	6113      	str	r3, [r2, #16]
 8006084:	e776      	b.n	8005f74 <HAL_ADC_Init+0x118>
 8006086:	bf00      	nop
 8006088:	20000008 	.word	0x20000008
 800608c:	053e2d63 	.word	0x053e2d63
 8006090:	50000100 	.word	0x50000100
 8006094:	50000400 	.word	0x50000400
 8006098:	50000600 	.word	0x50000600
 800609c:	50000700 	.word	0x50000700
 80060a0:	fff04007 	.word	0xfff04007
 80060a4:	50000300 	.word	0x50000300

080060a8 <HAL_ADC_ConvCpltCallback>:
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop

080060ac <HAL_ADC_ConvHalfCpltCallback>:
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop

080060b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80060b0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80060b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80060b4:	f7ff fffa 	bl	80060ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060b8:	bd08      	pop	{r3, pc}
 80060ba:	bf00      	nop

080060bc <HAL_ADC_ErrorCallback>:
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop

080060c0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80060c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060c4:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80060c8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80060cc:	d11d      	bne.n	800610a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80060ce:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d4:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80060d6:	680a      	ldr	r2, [r1, #0]
 80060d8:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060dc:	68ca      	ldr	r2, [r1, #12]
 80060de:	d01b      	beq.n	8006118 <ADC_DMAConvCplt+0x58>
 80060e0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80060e4:	d10d      	bne.n	8006102 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80060e6:	68ca      	ldr	r2, [r1, #12]
 80060e8:	0494      	lsls	r4, r2, #18
 80060ea:	d40a      	bmi.n	8006102 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80060ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060f2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80060f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060f6:	04d1      	lsls	r1, r2, #19
 80060f8:	d403      	bmi.n	8006102 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff ffd0 	bl	80060a8 <HAL_ADC_ConvCpltCallback>
}
 8006108:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800610a:	06d2      	lsls	r2, r2, #27
 800610c:	d40a      	bmi.n	8006124 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006118:	0790      	lsls	r0, r2, #30
 800611a:	d5e7      	bpl.n	80060ec <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff ffc3 	bl	80060a8 <HAL_ADC_ConvCpltCallback>
 8006122:	e7f1      	b.n	8006108 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ffc9 	bl	80060bc <HAL_ADC_ErrorCallback>
}
 800612a:	bd10      	pop	{r4, pc}

0800612c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800612c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800612e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006130:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006136:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006138:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800613a:	f043 0304 	orr.w	r3, r3, #4
 800613e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006140:	f7ff ffbc 	bl	80060bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006144:	bd08      	pop	{r3, pc}
 8006146:	bf00      	nop

08006148 <HAL_ADC_ConfigChannel>:
{
 8006148:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800614a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800614e:	b083      	sub	sp, #12
 8006150:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8006152:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8006154:	f04f 0000 	mov.w	r0, #0
 8006158:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800615a:	f000 8174 	beq.w	8006446 <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800615e:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006160:	2001      	movs	r0, #1
 8006162:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006166:	6894      	ldr	r4, [r2, #8]
 8006168:	0766      	lsls	r6, r4, #29
 800616a:	d45e      	bmi.n	800622a <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800616c:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800616e:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8006172:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006176:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 800617a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800617c:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8006180:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8006184:	f854 500e 	ldr.w	r5, [r4, lr]
 8006188:	261f      	movs	r6, #31
 800618a:	fa00 f00c 	lsl.w	r0, r0, ip
 800618e:	fa06 fc0c 	lsl.w	ip, r6, ip
 8006192:	ea25 0c0c 	bic.w	ip, r5, ip
 8006196:	ea40 000c 	orr.w	r0, r0, ip
 800619a:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800619e:	6890      	ldr	r0, [r2, #8]
 80061a0:	0745      	lsls	r5, r0, #29
 80061a2:	d572      	bpl.n	800628a <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061a4:	6890      	ldr	r0, [r2, #8]
 80061a6:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061a8:	6894      	ldr	r4, [r2, #8]
 80061aa:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80061ae:	4604      	mov	r4, r0
 80061b0:	d10c      	bne.n	80061cc <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80061b2:	4dbd      	ldr	r5, [pc, #756]	; (80064a8 <HAL_ADC_ConfigChannel+0x360>)
 80061b4:	68ce      	ldr	r6, [r1, #12]
 80061b6:	42ae      	cmp	r6, r5
 80061b8:	f000 80eb 	beq.w	8006392 <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 80061bc:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80061c0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80061c4:	ea21 0100 	bic.w	r1, r1, r0
 80061c8:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061cc:	49b7      	ldr	r1, [pc, #732]	; (80064ac <HAL_ADC_ConfigChannel+0x364>)
 80061ce:	420c      	tst	r4, r1
 80061d0:	d059      	beq.n	8006286 <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061d2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80061d6:	f000 8134 	beq.w	8006442 <HAL_ADC_ConfigChannel+0x2fa>
 80061da:	4db5      	ldr	r5, [pc, #724]	; (80064b0 <HAL_ADC_ConfigChannel+0x368>)
 80061dc:	49b5      	ldr	r1, [pc, #724]	; (80064b4 <HAL_ADC_ConfigChannel+0x36c>)
 80061de:	48b6      	ldr	r0, [pc, #728]	; (80064b8 <HAL_ADC_ConfigChannel+0x370>)
 80061e0:	42aa      	cmp	r2, r5
 80061e2:	bf18      	it	ne
 80061e4:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80061e6:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80061e8:	49b4      	ldr	r1, [pc, #720]	; (80064bc <HAL_ADC_ConfigChannel+0x374>)
 80061ea:	428c      	cmp	r4, r1
 80061ec:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 80061f0:	d024      	beq.n	800623c <HAL_ADC_ConfigChannel+0xf4>
 80061f2:	49b3      	ldr	r1, [pc, #716]	; (80064c0 <HAL_ADC_ConfigChannel+0x378>)
 80061f4:	428c      	cmp	r4, r1
 80061f6:	d021      	beq.n	800623c <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80061f8:	49b2      	ldr	r1, [pc, #712]	; (80064c4 <HAL_ADC_ConfigChannel+0x37c>)
 80061fa:	428c      	cmp	r4, r1
 80061fc:	f040 8139 	bne.w	8006472 <HAL_ADC_ConfigChannel+0x32a>
 8006200:	01c4      	lsls	r4, r0, #7
 8006202:	d440      	bmi.n	8006286 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006204:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006208:	f000 8215 	beq.w	8006636 <HAL_ADC_ConfigChannel+0x4ee>
 800620c:	4ca8      	ldr	r4, [pc, #672]	; (80064b0 <HAL_ADC_ConfigChannel+0x368>)
 800620e:	49a9      	ldr	r1, [pc, #676]	; (80064b4 <HAL_ADC_ConfigChannel+0x36c>)
 8006210:	48a9      	ldr	r0, [pc, #676]	; (80064b8 <HAL_ADC_ConfigChannel+0x370>)
 8006212:	42a2      	cmp	r2, r4
 8006214:	bf18      	it	ne
 8006216:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006218:	688a      	ldr	r2, [r1, #8]
 800621a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800621e:	432a      	orrs	r2, r5
 8006220:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006224:	2000      	movs	r0, #0
 8006226:	608a      	str	r2, [r1, #8]
}
 8006228:	e003      	b.n	8006232 <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800622a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800622c:	f042 0220 	orr.w	r2, r2, #32
 8006230:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8006238:	b003      	add	sp, #12
 800623a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800623c:	0201      	lsls	r1, r0, #8
 800623e:	d422      	bmi.n	8006286 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006240:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006244:	f000 8113 	beq.w	800646e <HAL_ADC_ConfigChannel+0x326>
 8006248:	499f      	ldr	r1, [pc, #636]	; (80064c8 <HAL_ADC_ConfigChannel+0x380>)
 800624a:	428a      	cmp	r2, r1
 800624c:	d11b      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800624e:	489a      	ldr	r0, [pc, #616]	; (80064b8 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006250:	4a9e      	ldr	r2, [pc, #632]	; (80064cc <HAL_ADC_ConfigChannel+0x384>)
 8006252:	4c9f      	ldr	r4, [pc, #636]	; (80064d0 <HAL_ADC_ConfigChannel+0x388>)
 8006254:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006256:	6881      	ldr	r1, [r0, #8]
 8006258:	0992      	lsrs	r2, r2, #6
 800625a:	fba4 4202 	umull	r4, r2, r4, r2
 800625e:	0992      	lsrs	r2, r2, #6
 8006260:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006264:	3201      	adds	r2, #1
 8006266:	4329      	orrs	r1, r5
 8006268:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800626c:	0092      	lsls	r2, r2, #2
 800626e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006272:	6081      	str	r1, [r0, #8]
 8006274:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006276:	9a01      	ldr	r2, [sp, #4]
 8006278:	b12a      	cbz	r2, 8006286 <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 800627a:	9a01      	ldr	r2, [sp, #4]
 800627c:	3a01      	subs	r2, #1
 800627e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006280:	9a01      	ldr	r2, [sp, #4]
 8006282:	2a00      	cmp	r2, #0
 8006284:	d1f9      	bne.n	800627a <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006286:	2000      	movs	r0, #0
 8006288:	e7d3      	b.n	8006232 <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800628a:	6890      	ldr	r0, [r2, #8]
 800628c:	0700      	lsls	r0, r0, #28
 800628e:	d47e      	bmi.n	800638e <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006290:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006292:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006294:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8006298:	f000 8120 	beq.w	80064dc <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800629c:	0dee      	lsrs	r6, r5, #23
 800629e:	f102 0c14 	add.w	ip, r2, #20
 80062a2:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80062a6:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80062aa:	f85c 4006 	ldr.w	r4, [ip, r6]
 80062ae:	2707      	movs	r7, #7
 80062b0:	40a8      	lsls	r0, r5
 80062b2:	fa07 f505 	lsl.w	r5, r7, r5
 80062b6:	ea24 0405 	bic.w	r4, r4, r5
 80062ba:	4320      	orrs	r0, r4
 80062bc:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80062c0:	6950      	ldr	r0, [r2, #20]
 80062c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80062c6:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80062c8:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80062cc:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80062ce:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80062d0:	d02d      	beq.n	800632e <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062d2:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80062d6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80062da:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 80062dc:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 80062e0:	4f7c      	ldr	r7, [pc, #496]	; (80064d4 <HAL_ADC_ConfigChannel+0x38c>)
 80062e2:	4086      	lsls	r6, r0
 80062e4:	6808      	ldr	r0, [r1, #0]
 80062e6:	ea0c 0707 	and.w	r7, ip, r7
 80062ea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80062ee:	4338      	orrs	r0, r7
 80062f0:	4330      	orrs	r0, r6
 80062f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80062f6:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062fa:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 80062fc:	698e      	ldr	r6, [r1, #24]
 80062fe:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006302:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8006306:	4330      	orrs	r0, r6
 8006308:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800630c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800630e:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8006310:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8006314:	f1a5 0501 	sub.w	r5, r5, #1
 8006318:	fab5 f585 	clz	r5, r5
 800631c:	096d      	lsrs	r5, r5, #5
 800631e:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8006322:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8006326:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 800632a:	6808      	ldr	r0, [r1, #0]
}
 800632c:	e73c      	b.n	80061a8 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800632e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006330:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8006332:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8006334:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006338:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800633c:	2d00      	cmp	r5, #0
 800633e:	f040 80df 	bne.w	8006500 <HAL_ADC_ConfigChannel+0x3b8>
 8006342:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006346:	42ac      	cmp	r4, r5
 8006348:	f000 813d 	beq.w	80065c6 <HAL_ADC_ConfigChannel+0x47e>
 800634c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800634e:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006350:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006354:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006358:	f102 0764 	add.w	r7, r2, #100	; 0x64
 800635c:	42ae      	cmp	r6, r5
 800635e:	f000 8158 	beq.w	8006612 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006362:	68a6      	ldr	r6, [r4, #8]
 8006364:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006366:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800636a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800636e:	42ae      	cmp	r6, r5
 8006370:	f000 813d 	beq.w	80065ee <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006374:	68e6      	ldr	r6, [r4, #12]
 8006376:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006378:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800637c:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8006380:	42a5      	cmp	r5, r4
 8006382:	f47f af11 	bne.w	80061a8 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8006386:	6838      	ldr	r0, [r7, #0]
 8006388:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800638c:	6038      	str	r0, [r7, #0]
 800638e:	6808      	ldr	r0, [r1, #0]
}
 8006390:	e70a      	b.n	80061a8 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 8006392:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8006396:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800639a:	432c      	orrs	r4, r5
 800639c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	d053      	beq.n	800644c <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a4:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063a8:	2c00      	cmp	r4, #0
 80063aa:	f000 80e8 	beq.w	800657e <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80063ae:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063b2:	3401      	adds	r4, #1
 80063b4:	f004 041f 	and.w	r4, r4, #31
 80063b8:	2c09      	cmp	r4, #9
 80063ba:	f240 80e0 	bls.w	800657e <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063be:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80063c2:	2c00      	cmp	r4, #0
 80063c4:	f000 813d 	beq.w	8006642 <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 80063c8:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063cc:	3401      	adds	r4, #1
 80063ce:	06a4      	lsls	r4, r4, #26
 80063d0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80063d8:	2d00      	cmp	r5, #0
 80063da:	f000 8130 	beq.w	800663e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80063de:	fab5 f585 	clz	r5, r5
 80063e2:	3501      	adds	r5, #1
 80063e4:	f005 051f 	and.w	r5, r5, #31
 80063e8:	2601      	movs	r6, #1
 80063ea:	fa06 f505 	lsl.w	r5, r6, r5
 80063ee:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f000 8120 	beq.w	800663a <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 80063fa:	fab0 f080 	clz	r0, r0
 80063fe:	1c45      	adds	r5, r0, #1
 8006400:	f005 051f 	and.w	r5, r5, #31
 8006404:	2003      	movs	r0, #3
 8006406:	f06f 061d 	mvn.w	r6, #29
 800640a:	fb10 6005 	smlabb	r0, r0, r5, r6
 800640e:	0500      	lsls	r0, r0, #20
 8006410:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006414:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006416:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8006418:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800641a:	f005 0504 	and.w	r5, r5, #4
 800641e:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006422:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8006426:	fa04 fc00 	lsl.w	ip, r4, r0
 800642a:	f04f 0e07 	mov.w	lr, #7
 800642e:	5974      	ldr	r4, [r6, r5]
 8006430:	fa0e f000 	lsl.w	r0, lr, r0
 8006434:	ea24 0000 	bic.w	r0, r4, r0
 8006438:	ea40 000c 	orr.w	r0, r0, ip
 800643c:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800643e:	680c      	ldr	r4, [r1, #0]
}
 8006440:	e6c4      	b.n	80061cc <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006442:	491c      	ldr	r1, [pc, #112]	; (80064b4 <HAL_ADC_ConfigChannel+0x36c>)
 8006444:	e6cf      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8006446:	2002      	movs	r0, #2
}
 8006448:	b003      	add	sp, #12
 800644a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800644c:	0e80      	lsrs	r0, r0, #26
 800644e:	3001      	adds	r0, #1
 8006450:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006454:	2d09      	cmp	r5, #9
 8006456:	f200 8084 	bhi.w	8006562 <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800645a:	0684      	lsls	r4, r0, #26
 800645c:	2001      	movs	r0, #1
 800645e:	40a8      	lsls	r0, r5
 8006460:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8006464:	4304      	orrs	r4, r0
 8006466:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800646a:	0500      	lsls	r0, r0, #20
 800646c:	e7d2      	b.n	8006414 <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800646e:	4811      	ldr	r0, [pc, #68]	; (80064b4 <HAL_ADC_ConfigChannel+0x36c>)
 8006470:	e6ee      	b.n	8006250 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006472:	4919      	ldr	r1, [pc, #100]	; (80064d8 <HAL_ADC_ConfigChannel+0x390>)
 8006474:	428c      	cmp	r4, r1
 8006476:	f47f af06 	bne.w	8006286 <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800647a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800647e:	f47f af02 	bne.w	8006286 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8006482:	490b      	ldr	r1, [pc, #44]	; (80064b0 <HAL_ADC_ConfigChannel+0x368>)
 8006484:	428a      	cmp	r2, r1
 8006486:	f43f aefe 	beq.w	8006286 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800648a:	4c0b      	ldr	r4, [pc, #44]	; (80064b8 <HAL_ADC_ConfigChannel+0x370>)
 800648c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8006490:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006494:	bf18      	it	ne
 8006496:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006498:	688a      	ldr	r2, [r1, #8]
 800649a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800649e:	432a      	orrs	r2, r5
 80064a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80064a4:	608a      	str	r2, [r1, #8]
}
 80064a6:	e6c4      	b.n	8006232 <HAL_ADC_ConfigChannel+0xea>
 80064a8:	407f0000 	.word	0x407f0000
 80064ac:	80080000 	.word	0x80080000
 80064b0:	50000100 	.word	0x50000100
 80064b4:	50000300 	.word	0x50000300
 80064b8:	50000700 	.word	0x50000700
 80064bc:	c3210000 	.word	0xc3210000
 80064c0:	90c00010 	.word	0x90c00010
 80064c4:	c7520000 	.word	0xc7520000
 80064c8:	50000600 	.word	0x50000600
 80064cc:	20000008 	.word	0x20000008
 80064d0:	053e2d63 	.word	0x053e2d63
 80064d4:	03fff000 	.word	0x03fff000
 80064d8:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064dc:	0de8      	lsrs	r0, r5, #23
 80064de:	f000 0004 	and.w	r0, r0, #4
 80064e2:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 80064e6:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80064ea:	2607      	movs	r6, #7
 80064ec:	40ae      	lsls	r6, r5
 80064ee:	5825      	ldr	r5, [r4, r0]
 80064f0:	ea25 0506 	bic.w	r5, r5, r6
 80064f4:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80064f6:	6950      	ldr	r0, [r2, #20]
 80064f8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80064fc:	6150      	str	r0, [r2, #20]
}
 80064fe:	e6e3      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006500:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006504:	b11d      	cbz	r5, 800650e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8006506:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800650a:	42ac      	cmp	r4, r5
 800650c:	d05b      	beq.n	80065c6 <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800650e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8006510:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006512:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006516:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800651a:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006522:	b11d      	cbz	r5, 800652c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8006524:	fab5 f585 	clz	r5, r5
 8006528:	42ae      	cmp	r6, r5
 800652a:	d072      	beq.n	8006612 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800652c:	68a5      	ldr	r5, [r4, #8]
 800652e:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006530:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006534:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006538:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800653c:	b11d      	cbz	r5, 8006546 <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 800653e:	fab5 f585 	clz	r5, r5
 8006542:	42ae      	cmp	r6, r5
 8006544:	d053      	beq.n	80065ee <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006546:	68e5      	ldr	r5, [r4, #12]
 8006548:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800654a:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800654e:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006552:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006556:	2d00      	cmp	r5, #0
 8006558:	f43f ae26 	beq.w	80061a8 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 800655c:	fab5 f585 	clz	r5, r5
 8006560:	e70e      	b.n	8006380 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006562:	0684      	lsls	r4, r0, #26
 8006564:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8006568:	381e      	subs	r0, #30
 800656a:	2601      	movs	r6, #1
 800656c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8006570:	0500      	lsls	r0, r0, #20
 8006572:	fa06 f505 	lsl.w	r5, r6, r5
 8006576:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800657a:	432c      	orrs	r4, r5
 800657c:	e74a      	b.n	8006414 <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006582:	2c00      	cmp	r4, #0
 8006584:	d065      	beq.n	8006652 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8006586:	fab4 f484 	clz	r4, r4
 800658a:	3401      	adds	r4, #1
 800658c:	06a4      	lsls	r4, r4, #26
 800658e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006592:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006596:	2d00      	cmp	r5, #0
 8006598:	d059      	beq.n	800664e <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 800659a:	fab5 f585 	clz	r5, r5
 800659e:	3501      	adds	r5, #1
 80065a0:	f005 051f 	and.w	r5, r5, #31
 80065a4:	2601      	movs	r6, #1
 80065a6:	fa06 f505 	lsl.w	r5, r6, r5
 80065aa:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ac:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d049      	beq.n	8006648 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 80065b4:	fab0 f080 	clz	r0, r0
 80065b8:	3001      	adds	r0, #1
 80065ba:	f000 001f 	and.w	r0, r0, #31
 80065be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80065c2:	0500      	lsls	r0, r0, #20
 80065c4:	e726      	b.n	8006414 <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 80065c6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80065c8:	4614      	mov	r4, r2
 80065ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80065ce:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065d2:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065d4:	6808      	ldr	r0, [r1, #0]
 80065d6:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80065d8:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065dc:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80065e0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065e4:	2d00      	cmp	r5, #0
 80065e6:	d19a      	bne.n	800651e <HAL_ADC_ConfigChannel+0x3d6>
 80065e8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80065ec:	e6b6      	b.n	800635c <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 80065ee:	6838      	ldr	r0, [r7, #0]
 80065f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80065f4:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065f6:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065f8:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065fa:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065fe:	68e4      	ldr	r4, [r4, #12]
 8006600:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006604:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006608:	2d00      	cmp	r5, #0
 800660a:	d1a2      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x40a>
 800660c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8006610:	e6b6      	b.n	8006380 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8006612:	6838      	ldr	r0, [r7, #0]
 8006614:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006618:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800661a:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800661c:	6808      	ldr	r0, [r1, #0]
 800661e:	68a6      	ldr	r6, [r4, #8]
 8006620:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006624:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006628:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800662c:	2d00      	cmp	r5, #0
 800662e:	d183      	bne.n	8006538 <HAL_ADC_ConfigChannel+0x3f0>
 8006630:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8006634:	e69b      	b.n	800636e <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006636:	4908      	ldr	r1, [pc, #32]	; (8006658 <HAL_ADC_ConfigChannel+0x510>)
 8006638:	e5ee      	b.n	8006218 <HAL_ADC_ConfigChannel+0xd0>
 800663a:	4808      	ldr	r0, [pc, #32]	; (800665c <HAL_ADC_ConfigChannel+0x514>)
 800663c:	e6ea      	b.n	8006414 <HAL_ADC_ConfigChannel+0x2cc>
 800663e:	2502      	movs	r5, #2
 8006640:	e6d5      	b.n	80063ee <HAL_ADC_ConfigChannel+0x2a6>
 8006642:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006646:	e6c5      	b.n	80063d4 <HAL_ADC_ConfigChannel+0x28c>
 8006648:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800664c:	e6e2      	b.n	8006414 <HAL_ADC_ConfigChannel+0x2cc>
 800664e:	2502      	movs	r5, #2
 8006650:	e7ab      	b.n	80065aa <HAL_ADC_ConfigChannel+0x462>
 8006652:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006656:	e79c      	b.n	8006592 <HAL_ADC_ConfigChannel+0x44a>
 8006658:	50000300 	.word	0x50000300
 800665c:	fe500000 	.word	0xfe500000

08006660 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006660:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	07d2      	lsls	r2, r2, #31
 8006666:	d501      	bpl.n	800666c <ADC_Enable+0xc>
  return HAL_OK;
 8006668:	2000      	movs	r0, #0
}
 800666a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800666c:	6899      	ldr	r1, [r3, #8]
 800666e:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <ADC_Enable+0x70>)
 8006670:	4211      	tst	r1, r2
{
 8006672:	b570      	push	{r4, r5, r6, lr}
 8006674:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006676:	d008      	beq.n	800668a <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006678:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800667a:	f043 0310 	orr.w	r3, r3, #16
 800667e:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006680:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8006682:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006684:	4303      	orrs	r3, r0
 8006686:	6633      	str	r3, [r6, #96]	; 0x60
}
 8006688:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	4d11      	ldr	r5, [pc, #68]	; (80066d4 <ADC_Enable+0x74>)
 800668e:	402a      	ands	r2, r5
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006696:	f7fc f899 	bl	80027cc <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800669a:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800669c:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	07d0      	lsls	r0, r2, #31
 80066a2:	d413      	bmi.n	80066cc <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	07d1      	lsls	r1, r2, #31
 80066a8:	d404      	bmi.n	80066b4 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	402a      	ands	r2, r5
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80066b4:	f7fc f88a 	bl	80027cc <HAL_GetTick>
 80066b8:	1b03      	subs	r3, r0, r4
 80066ba:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066bc:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80066be:	d9ee      	bls.n	800669e <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	07d2      	lsls	r2, r2, #31
 80066c4:	d5d8      	bpl.n	8006678 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	07d0      	lsls	r0, r2, #31
 80066ca:	d5eb      	bpl.n	80066a4 <ADC_Enable+0x44>
  return HAL_OK;
 80066cc:	2000      	movs	r0, #0
}
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
 80066d0:	8000003f 	.word	0x8000003f
 80066d4:	7fffffc0 	.word	0x7fffffc0

080066d8 <HAL_ADC_Start_DMA>:
{
 80066d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066dc:	6805      	ldr	r5, [r0, #0]
 80066de:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 80066e2:	4604      	mov	r4, r0
 80066e4:	460e      	mov	r6, r1
 80066e6:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066e8:	d022      	beq.n	8006730 <HAL_ADC_Start_DMA+0x58>
 80066ea:	4a39      	ldr	r2, [pc, #228]	; (80067d0 <HAL_ADC_Start_DMA+0xf8>)
 80066ec:	4839      	ldr	r0, [pc, #228]	; (80067d4 <HAL_ADC_Start_DMA+0xfc>)
 80066ee:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <HAL_ADC_Start_DMA+0x100>)
 80066f0:	4295      	cmp	r5, r2
 80066f2:	bf08      	it	eq
 80066f4:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80066f6:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066f8:	68ab      	ldr	r3, [r5, #8]
 80066fa:	075b      	lsls	r3, r3, #29
 80066fc:	d415      	bmi.n	800672a <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 80066fe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8006702:	2b01      	cmp	r3, #1
 8006704:	d011      	beq.n	800672a <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006706:	4b35      	ldr	r3, [pc, #212]	; (80067dc <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8006708:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800670a:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800670c:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8006710:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006714:	d00e      	beq.n	8006734 <HAL_ADC_Start_DMA+0x5c>
 8006716:	f240 2321 	movw	r3, #545	; 0x221
 800671a:	fa23 f308 	lsr.w	r3, r3, r8
 800671e:	4003      	ands	r3, r0
 8006720:	d108      	bne.n	8006734 <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 8006722:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8006726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 800672a:	2002      	movs	r0, #2
}
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006730:	4829      	ldr	r0, [pc, #164]	; (80067d8 <HAL_ADC_Start_DMA+0x100>)
 8006732:	e7e0      	b.n	80066f6 <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 8006734:	4620      	mov	r0, r4
 8006736:	f7ff ff93 	bl	8006660 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800673a:	2800      	cmp	r0, #0
 800673c:	d13f      	bne.n	80067be <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 800673e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006740:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8006742:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006750:	4b1f      	ldr	r3, [pc, #124]	; (80067d0 <HAL_ADC_Start_DMA+0xf8>)
 8006752:	4299      	cmp	r1, r3
 8006754:	d038      	beq.n	80067c8 <HAL_ADC_Start_DMA+0xf0>
 8006756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675a:	4299      	cmp	r1, r3
 800675c:	d034      	beq.n	80067c8 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800675e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006760:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006764:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006766:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006768:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800676a:	4d1d      	ldr	r5, [pc, #116]	; (80067e0 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800676c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006770:	bf1c      	itt	ne
 8006772:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8006774:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8006778:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800677a:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800677c:	4d19      	ldr	r5, [pc, #100]	; (80067e4 <HAL_ADC_Start_DMA+0x10c>)
 800677e:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006780:	4d19      	ldr	r5, [pc, #100]	; (80067e8 <HAL_ADC_Start_DMA+0x110>)
 8006782:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006784:	251c      	movs	r5, #28
 8006786:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8006788:	2500      	movs	r5, #0
 800678a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800678e:	684d      	ldr	r5, [r1, #4]
 8006790:	f045 0510 	orr.w	r5, r5, #16
 8006794:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006796:	68cd      	ldr	r5, [r1, #12]
 8006798:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800679c:	463b      	mov	r3, r7
 800679e:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80067a0:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80067a2:	3140      	adds	r1, #64	; 0x40
 80067a4:	f000 f9e0 	bl	8006b68 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80067a8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80067aa:	6893      	ldr	r3, [r2, #8]
 80067ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067b4:	f043 0304 	orr.w	r3, r3, #4
 80067b8:	6093      	str	r3, [r2, #8]
}
 80067ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80067be:	2300      	movs	r3, #0
 80067c0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 80067c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067c8:	f1b8 0f00 	cmp.w	r8, #0
 80067cc:	d1cb      	bne.n	8006766 <HAL_ADC_Start_DMA+0x8e>
 80067ce:	e7c6      	b.n	800675e <HAL_ADC_Start_DMA+0x86>
 80067d0:	50000100 	.word	0x50000100
 80067d4:	50000700 	.word	0x50000700
 80067d8:	50000300 	.word	0x50000300
 80067dc:	50000600 	.word	0x50000600
 80067e0:	080060c1 	.word	0x080060c1
 80067e4:	080060b1 	.word	0x080060b1
 80067e8:	0800612d 	.word	0x0800612d

080067ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80067ec:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067ee:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067f2:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80067f4:	2a01      	cmp	r2, #1
{
 80067f6:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 80067f8:	d056      	beq.n	80068a8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80067fa:	6802      	ldr	r2, [r0, #0]
 80067fc:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80067fe:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8006800:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006802:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006806:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8006808:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800680c:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800680e:	d00b      	beq.n	8006828 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006810:	4d48      	ldr	r5, [pc, #288]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006812:	42aa      	cmp	r2, r5
 8006814:	d046      	beq.n	80068a4 <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006816:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006818:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800681c:	f042 0220 	orr.w	r2, r2, #32
 8006820:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006822:	b01d      	add	sp, #116	; 0x74
 8006824:	bc70      	pop	{r4, r5, r6}
 8006826:	4770      	bx	lr
 8006828:	4843      	ldr	r0, [pc, #268]	; (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800682a:	6880      	ldr	r0, [r0, #8]
 800682c:	0740      	lsls	r0, r0, #29
 800682e:	d50b      	bpl.n	8006848 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006830:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006834:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006838:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800683a:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8006842:	b01d      	add	sp, #116	; 0x74
 8006844:	bc70      	pop	{r4, r5, r6}
 8006846:	4770      	bx	lr
 8006848:	6890      	ldr	r0, [r2, #8]
 800684a:	0744      	lsls	r4, r0, #29
 800684c:	d4f1      	bmi.n	8006832 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800684e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006852:	d02d      	beq.n	80068b0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8006854:	4838      	ldr	r0, [pc, #224]	; (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006856:	4282      	cmp	r2, r0
 8006858:	d02a      	beq.n	80068b0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800685a:	2e00      	cmp	r6, #0
 800685c:	d058      	beq.n	8006910 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800685e:	4837      	ldr	r0, [pc, #220]	; (800693c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006860:	684c      	ldr	r4, [r1, #4]
 8006862:	6882      	ldr	r2, [r0, #8]
 8006864:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006868:	4322      	orrs	r2, r4
 800686a:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800686e:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8006872:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006874:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006876:	6894      	ldr	r4, [r2, #8]
 8006878:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800687c:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800687e:	4322      	orrs	r2, r4
 8006880:	4c2f      	ldr	r4, [pc, #188]	; (8006940 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006882:	68a4      	ldr	r4, [r4, #8]
 8006884:	4322      	orrs	r2, r4
 8006886:	43d2      	mvns	r2, r2
 8006888:	f002 0201 	and.w	r2, r2, #1
 800688c:	b142      	cbz	r2, 80068a0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 800688e:	6884      	ldr	r4, [r0, #8]
 8006890:	688a      	ldr	r2, [r1, #8]
 8006892:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8006896:	4332      	orrs	r2, r6
 8006898:	f021 010f 	bic.w	r1, r1, #15
 800689c:	430a      	orrs	r2, r1
 800689e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068a0:	2000      	movs	r0, #0
 80068a2:	e7cb      	b.n	800683c <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80068a4:	4827      	ldr	r0, [pc, #156]	; (8006944 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80068a6:	e7c0      	b.n	800682a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80068a8:	2002      	movs	r0, #2
}
 80068aa:	b01d      	add	sp, #116	; 0x74
 80068ac:	bc70      	pop	{r4, r5, r6}
 80068ae:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068b0:	b1ae      	cbz	r6, 80068de <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80068b2:	4825      	ldr	r0, [pc, #148]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80068b4:	684c      	ldr	r4, [r1, #4]
 80068b6:	6882      	ldr	r2, [r0, #8]
 80068b8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80068bc:	4322      	orrs	r2, r4
 80068be:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 80068c2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80068c6:	6082      	str	r2, [r0, #8]
 80068c8:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80068ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068ce:	6880      	ldr	r0, [r0, #8]
 80068d0:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068d2:	4302      	orrs	r2, r0
 80068d4:	43d2      	mvns	r2, r2
 80068d6:	481c      	ldr	r0, [pc, #112]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80068d8:	f002 0201 	and.w	r2, r2, #1
 80068dc:	e7d6      	b.n	800688c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80068de:	491a      	ldr	r1, [pc, #104]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80068e0:	688a      	ldr	r2, [r1, #8]
 80068e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80068e6:	608a      	str	r2, [r1, #8]
 80068e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068ec:	4a12      	ldr	r2, [pc, #72]	; (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80068ee:	6880      	ldr	r0, [r0, #8]
 80068f0:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068f2:	4915      	ldr	r1, [pc, #84]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80068f4:	4302      	orrs	r2, r0
 80068f6:	43d2      	mvns	r2, r2
 80068f8:	f002 0201 	and.w	r2, r2, #1
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	d0cf      	beq.n	80068a0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006900:	688a      	ldr	r2, [r1, #8]
 8006902:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8006906:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800690a:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800690c:	608a      	str	r2, [r1, #8]
 800690e:	e795      	b.n	800683c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006910:	490a      	ldr	r1, [pc, #40]	; (800693c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006912:	4808      	ldr	r0, [pc, #32]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006914:	688a      	ldr	r2, [r1, #8]
 8006916:	4c0b      	ldr	r4, [pc, #44]	; (8006944 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006918:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800691c:	608a      	str	r2, [r1, #8]
 800691e:	6880      	ldr	r0, [r0, #8]
 8006920:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006922:	4302      	orrs	r2, r0
 8006924:	4806      	ldr	r0, [pc, #24]	; (8006940 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006926:	6880      	ldr	r0, [r0, #8]
 8006928:	4302      	orrs	r2, r0
 800692a:	43d2      	mvns	r2, r2
 800692c:	f002 0201 	and.w	r2, r2, #1
 8006930:	e7e4      	b.n	80068fc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8006932:	bf00      	nop
 8006934:	50000400 	.word	0x50000400
 8006938:	50000100 	.word	0x50000100
 800693c:	50000700 	.word	0x50000700
 8006940:	50000600 	.word	0x50000600
 8006944:	50000500 	.word	0x50000500
 8006948:	50000300 	.word	0x50000300

0800694c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800694c:	4907      	ldr	r1, [pc, #28]	; (800696c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800694e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006950:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006952:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800695a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800695c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800695e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006966:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	e000ed00 	.word	0xe000ed00

08006970 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006970:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <HAL_NVIC_SetPriority+0x74>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006978:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800697a:	f1c3 0e07 	rsb	lr, r3, #7
 800697e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006982:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006986:	bf28      	it	cs
 8006988:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800698c:	f1bc 0f06 	cmp.w	ip, #6
 8006990:	d91b      	bls.n	80069ca <HAL_NVIC_SetPriority+0x5a>
 8006992:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006994:	f04f 3cff 	mov.w	ip, #4294967295
 8006998:	fa0c fc03 	lsl.w	ip, ip, r3
 800699c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069a0:	f04f 3cff 	mov.w	ip, #4294967295
 80069a4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80069a8:	ea21 010c 	bic.w	r1, r1, ip
 80069ac:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80069ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069b0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80069b4:	db0c      	blt.n	80069d0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80069ba:	0109      	lsls	r1, r1, #4
 80069bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80069c0:	b2c9      	uxtb	r1, r1
 80069c2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80069c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80069ca:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069cc:	4613      	mov	r3, r2
 80069ce:	e7e7      	b.n	80069a0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <HAL_NVIC_SetPriority+0x78>)
 80069d2:	f000 000f 	and.w	r0, r0, #15
 80069d6:	0109      	lsls	r1, r1, #4
 80069d8:	4403      	add	r3, r0
 80069da:	b2c9      	uxtb	r1, r1
 80069dc:	7619      	strb	r1, [r3, #24]
 80069de:	f85d fb04 	ldr.w	pc, [sp], #4
 80069e2:	bf00      	nop
 80069e4:	e000ed00 	.word	0xe000ed00
 80069e8:	e000ecfc 	.word	0xe000ecfc

080069ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80069ec:	2800      	cmp	r0, #0
 80069ee:	db07      	blt.n	8006a00 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069f0:	4a04      	ldr	r2, [pc, #16]	; (8006a04 <HAL_NVIC_EnableIRQ+0x18>)
 80069f2:	0941      	lsrs	r1, r0, #5
 80069f4:	2301      	movs	r3, #1
 80069f6:	f000 001f 	and.w	r0, r0, #31
 80069fa:	4083      	lsls	r3, r0
 80069fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	e000e100 	.word	0xe000e100

08006a08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a08:	3801      	subs	r0, #1
 8006a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006a0e:	d210      	bcs.n	8006a32 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a10:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a16:	4c08      	ldr	r4, [pc, #32]	; (8006a38 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a18:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a1a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8006a1e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a22:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a24:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a26:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a28:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8006a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a2e:	6119      	str	r1, [r3, #16]
 8006a30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006a32:	2001      	movs	r0, #1
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	e000ed00 	.word	0xe000ed00

08006a3c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d078      	beq.n	8006b32 <HAL_DMA_Init+0xf6>
{
 8006a40:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a42:	4b3d      	ldr	r3, [pc, #244]	; (8006b38 <HAL_DMA_Init+0xfc>)
 8006a44:	6804      	ldr	r4, [r0, #0]
 8006a46:	429c      	cmp	r4, r3
 8006a48:	d95f      	bls.n	8006b0a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006a4a:	4a3c      	ldr	r2, [pc, #240]	; (8006b3c <HAL_DMA_Init+0x100>)
 8006a4c:	4b3c      	ldr	r3, [pc, #240]	; (8006b40 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8006a4e:	493d      	ldr	r1, [pc, #244]	; (8006b44 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006a50:	4422      	add	r2, r4
 8006a52:	fba3 3202 	umull	r3, r2, r3, r2
 8006a56:	0912      	lsrs	r2, r2, #4
 8006a58:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a5a:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a5c:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a5e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8006a62:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006a64:	4e36      	ldr	r6, [pc, #216]	; (8006b40 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a66:	4f34      	ldr	r7, [pc, #208]	; (8006b38 <HAL_DMA_Init+0xfc>)
 8006a68:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a6c:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8006a6e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a70:	430b      	orrs	r3, r1
 8006a72:	6941      	ldr	r1, [r0, #20]
 8006a74:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a76:	6981      	ldr	r1, [r0, #24]
 8006a78:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8006a7a:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a7c:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a80:	69c1      	ldr	r1, [r0, #28]
 8006a82:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006a84:	b2e1      	uxtb	r1, r4
 8006a86:	3908      	subs	r1, #8
 8006a88:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a8c:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a8e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a92:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8006a94:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8006a98:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a9a:	4e2b      	ldr	r6, [pc, #172]	; (8006b48 <HAL_DMA_Init+0x10c>)
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006a9e:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006aa2:	42bc      	cmp	r4, r7
 8006aa4:	bf98      	it	ls
 8006aa6:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006aa8:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006aac:	4c28      	ldr	r4, [pc, #160]	; (8006b50 <HAL_DMA_Init+0x114>)
 8006aae:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ab0:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ab4:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ab6:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006aba:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006abc:	6484      	str	r4, [r0, #72]	; 0x48
 8006abe:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006ac2:	d02b      	beq.n	8006b1c <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006ac4:	6845      	ldr	r5, [r0, #4]
 8006ac6:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ac8:	3d01      	subs	r5, #1
 8006aca:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006acc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ad0:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ad4:	d828      	bhi.n	8006b28 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ad6:	4b1f      	ldr	r3, [pc, #124]	; (8006b54 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ad8:	4d1f      	ldr	r5, [pc, #124]	; (8006b58 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ada:	4a20      	ldr	r2, [pc, #128]	; (8006b5c <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006adc:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006ade:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ae0:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006ae2:	f004 041f 	and.w	r4, r4, #31
 8006ae6:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006aea:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006aec:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006af0:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006af2:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006af4:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006af6:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006af8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006afa:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006afc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006b00:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8006b04:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006b06:	4618      	mov	r0, r3
}
 8006b08:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <HAL_DMA_Init+0x124>)
 8006b0c:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8006b0e:	4915      	ldr	r1, [pc, #84]	; (8006b64 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b10:	4422      	add	r2, r4
 8006b12:	fba3 3202 	umull	r3, r2, r3, r2
 8006b16:	0912      	lsrs	r2, r2, #4
 8006b18:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8006b1a:	e79e      	b.n	8006a5a <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b1c:	2400      	movs	r4, #0
 8006b1e:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b20:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b24:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006b28:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8006b2a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b2e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8006b30:	e7e1      	b.n	8006af6 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8006b32:	2001      	movs	r0, #1
}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40020407 	.word	0x40020407
 8006b3c:	bffdfbf8 	.word	0xbffdfbf8
 8006b40:	cccccccd 	.word	0xcccccccd
 8006b44:	40020400 	.word	0x40020400
 8006b48:	40020800 	.word	0x40020800
 8006b4c:	40020820 	.word	0x40020820
 8006b50:	40020880 	.word	0x40020880
 8006b54:	1000823f 	.word	0x1000823f
 8006b58:	40020940 	.word	0x40020940
 8006b5c:	40020900 	.word	0x40020900
 8006b60:	bffdfff8 	.word	0xbffdfff8
 8006b64:	40020000 	.word	0x40020000

08006b68 <HAL_DMA_Start_IT>:
{
 8006b68:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8006b6a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8006b6e:	2c01      	cmp	r4, #1
 8006b70:	d051      	beq.n	8006c16 <HAL_DMA_Start_IT+0xae>
 8006b72:	2401      	movs	r4, #1
 8006b74:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006b78:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8006b7c:	2c01      	cmp	r4, #1
 8006b7e:	d005      	beq.n	8006b8c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006b80:	2300      	movs	r3, #0
 8006b82:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8006b86:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8006b88:	2002      	movs	r0, #2
}
 8006b8a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b8c:	2402      	movs	r4, #2
 8006b8e:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b92:	2400      	movs	r4, #0
 8006b94:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006b96:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b98:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8006b9a:	6825      	ldr	r5, [r4, #0]
 8006b9c:	f025 0501 	bic.w	r5, r5, #1
 8006ba0:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ba2:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8006ba6:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8006ba8:	b115      	cbz	r5, 8006bb0 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006baa:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8006bae:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bb0:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8006bb2:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8006bb4:	f006 0c1f 	and.w	ip, r6, #31
 8006bb8:	2601      	movs	r6, #1
 8006bba:	fa06 f60c 	lsl.w	r6, r6, ip
 8006bbe:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006bc0:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bc2:	6883      	ldr	r3, [r0, #8]
 8006bc4:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8006bc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8006bc8:	bf0b      	itete	eq
 8006bca:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006bcc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006bce:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006bd0:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8006bd2:	b1bb      	cbz	r3, 8006c04 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	f043 030e 	orr.w	r3, r3, #14
 8006bda:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006bdc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	03d2      	lsls	r2, r2, #15
 8006be2:	d503      	bpl.n	8006bec <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bea:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006bec:	b11d      	cbz	r5, 8006bf6 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006bee:	682b      	ldr	r3, [r5, #0]
 8006bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8006bfc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006bfe:	6023      	str	r3, [r4, #0]
}
 8006c00:	bcf0      	pop	{r4, r5, r6, r7}
 8006c02:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	f023 0304 	bic.w	r3, r3, #4
 8006c0a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	f043 030a 	orr.w	r3, r3, #10
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	e7e2      	b.n	8006bdc <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8006c16:	2002      	movs	r0, #2
}
 8006c18:	bcf0      	pop	{r4, r5, r6, r7}
 8006c1a:	4770      	bx	lr

08006c1c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c1c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006c20:	2a02      	cmp	r2, #2
{
 8006c22:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c24:	d009      	beq.n	8006c3a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c26:	2204      	movs	r2, #4
 8006c28:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8006c2a:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8006c2c:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8006c2e:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8006c30:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006c38:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c3a:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c3c:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8006c3e:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c40:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c42:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c44:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c46:	f020 000e 	bic.w	r0, r0, #14
 8006c4a:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8006c52:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8006c54:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c56:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8006c58:	f020 0001 	bic.w	r0, r0, #1
 8006c5c:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c5e:	f001 011f 	and.w	r1, r1, #31
 8006c62:	2201      	movs	r2, #1
 8006c64:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c66:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c6a:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c6c:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8006c6e:	b138      	cbz	r0, 8006c80 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c70:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c72:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c7a:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c7c:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c7e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006c80:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8006c82:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006c84:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006c8c:	bc30      	pop	{r4, r5}
 8006c8e:	4770      	bx	lr

08006c90 <HAL_DMA_Abort_IT>:
{
 8006c90:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006c92:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d009      	beq.n	8006cae <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8006c9a:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c9c:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8006c9e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ca0:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006ca2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006ca6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 8006caa:	4618      	mov	r0, r3
}
 8006cac:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cae:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cb0:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb2:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cb6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb8:	f021 010e 	bic.w	r1, r1, #14
 8006cbc:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	f021 0101 	bic.w	r1, r1, #1
 8006cc4:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cc6:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cc8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cce:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cd0:	f002 021f 	and.w	r2, r2, #31
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cd8:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cdc:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cde:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006ce0:	b132      	cbz	r2, 8006cf0 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ce2:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ce4:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cec:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cee:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8006cf0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006cf2:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8006cf4:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006cf6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006cfa:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8006cfe:	b113      	cbz	r3, 8006d06 <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8006d00:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	4620      	mov	r0, r4
}
 8006d04:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	4618      	mov	r0, r3
}
 8006d08:	bd38      	pop	{r3, r4, r5, pc}
 8006d0a:	bf00      	nop

08006d0c <HAL_DMA_IRQHandler>:
{
 8006d0c:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d10:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8006d12:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d14:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006d16:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	409a      	lsls	r2, r3
 8006d20:	420a      	tst	r2, r1
 8006d22:	d00e      	beq.n	8006d42 <HAL_DMA_IRQHandler+0x36>
 8006d24:	f014 0f04 	tst.w	r4, #4
 8006d28:	d00b      	beq.n	8006d42 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	069b      	lsls	r3, r3, #26
 8006d2e:	d403      	bmi.n	8006d38 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	f023 0304 	bic.w	r3, r3, #4
 8006d36:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006d38:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d3a:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006d3c:	b1cb      	cbz	r3, 8006d72 <HAL_DMA_IRQHandler+0x66>
}
 8006d3e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006d40:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d42:	2202      	movs	r2, #2
 8006d44:	409a      	lsls	r2, r3
 8006d46:	420a      	tst	r2, r1
 8006d48:	d015      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8006d4a:	f014 0f02 	tst.w	r4, #2
 8006d4e:	d012      	beq.n	8006d76 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	0699      	lsls	r1, r3, #26
 8006d54:	d406      	bmi.n	8006d64 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	f023 030a 	bic.w	r3, r3, #10
 8006d5c:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8006d64:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d66:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006d68:	2100      	movs	r1, #0
 8006d6a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e5      	bne.n	8006d3e <HAL_DMA_IRQHandler+0x32>
}
 8006d72:	bc70      	pop	{r4, r5, r6}
 8006d74:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006d76:	2208      	movs	r2, #8
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	420a      	tst	r2, r1
 8006d7c:	d0f9      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8006d7e:	0722      	lsls	r2, r4, #28
 8006d80:	d5f7      	bpl.n	8006d72 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d82:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006d84:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d86:	f022 020e 	bic.w	r2, r2, #14
 8006d8a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8006d92:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d94:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d96:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006d98:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006d9c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d0e6      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x66>
}
 8006da4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006da6:	4708      	bx	r1

08006da8 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006da8:	2800      	cmp	r0, #0
 8006daa:	f000 814c 	beq.w	8007046 <HAL_FDCAN_Init+0x29e>
{
 8006dae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006db2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006db6:	4604      	mov	r4, r0
 8006db8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d073      	beq.n	8006ea8 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006dc0:	6822      	ldr	r2, [r4, #0]
 8006dc2:	6993      	ldr	r3, [r2, #24]
 8006dc4:	f023 0310 	bic.w	r3, r3, #16
 8006dc8:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dca:	f7fb fcff 	bl	80027cc <HAL_GetTick>
 8006dce:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006dd0:	e004      	b.n	8006ddc <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006dd2:	f7fb fcfb 	bl	80027cc <HAL_GetTick>
 8006dd6:	1b43      	subs	r3, r0, r5
 8006dd8:	2b0a      	cmp	r3, #10
 8006dda:	d85b      	bhi.n	8006e94 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	0711      	lsls	r1, r2, #28
 8006de2:	d4f6      	bmi.n	8006dd2 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dec:	f7fb fcee 	bl	80027cc <HAL_GetTick>
 8006df0:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006df2:	e004      	b.n	8006dfe <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006df4:	f7fb fcea 	bl	80027cc <HAL_GetTick>
 8006df8:	1b40      	subs	r0, r0, r5
 8006dfa:	280a      	cmp	r0, #10
 8006dfc:	d84a      	bhi.n	8006e94 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	07d2      	lsls	r2, r2, #31
 8006e04:	d5f6      	bpl.n	8006df4 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e06:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006e08:	4998      	ldr	r1, [pc, #608]	; (800706c <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e0a:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8006e0e:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e10:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006e12:	f000 8113 	beq.w	800703c <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006e16:	7c22      	ldrb	r2, [r4, #16]
 8006e18:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	bf0c      	ite	eq
 8006e1e:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e22:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8006e26:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006e28:	7c62      	ldrb	r2, [r4, #17]
 8006e2a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	bf0c      	ite	eq
 8006e30:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e34:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8006e38:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006e3a:	7ca2      	ldrb	r2, [r4, #18]
 8006e3c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	bf0c      	ite	eq
 8006e42:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006e46:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006e4a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006e50:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006e52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e56:	4302      	orrs	r2, r0
 8006e58:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006e60:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e62:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006e64:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e66:	f022 0210 	bic.w	r2, r2, #16
 8006e6a:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006e6c:	d021      	beq.n	8006eb2 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006e6e:	b321      	cbz	r1, 8006eba <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006e70:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006e72:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006e74:	f000 80f5 	beq.w	8007062 <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e7c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e7e:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006e80:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e82:	f042 0210 	orr.w	r2, r2, #16
 8006e86:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006e88:	d117      	bne.n	8006eba <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	f042 0220 	orr.w	r2, r2, #32
 8006e90:	619a      	str	r2, [r3, #24]
 8006e92:	e012      	b.n	8006eba <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e94:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e96:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e9e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006ea2:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006ea8:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006eac:	f7fa fe54 	bl	8001b58 <HAL_FDCAN_MspInit>
 8006eb0:	e786      	b.n	8006dc0 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	f042 0204 	orr.w	r2, r2, #4
 8006eb8:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006eba:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006ebe:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ec0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006ec2:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ec4:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ec8:	6a21      	ldr	r1, [r4, #32]
 8006eca:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006ecc:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006ece:	6961      	ldr	r1, [r4, #20]
 8006ed0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ed2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006ed6:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006eda:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006edc:	d10e      	bne.n	8006efc <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006ede:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ee2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006ee4:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006ee6:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006ee8:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006eea:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006eec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006ef0:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006ef2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ef4:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006ef6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006efa:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006efc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006f00:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006f02:	495b      	ldr	r1, [pc, #364]	; (8007070 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006f04:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 8006f06:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006f08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8006f0c:	f000 809d 	beq.w	800704a <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006f10:	4a58      	ldr	r2, [pc, #352]	; (8007074 <HAL_FDCAN_Init+0x2cc>)
 8006f12:	4e59      	ldr	r6, [pc, #356]	; (8007078 <HAL_FDCAN_Init+0x2d0>)
 8006f14:	4f59      	ldr	r7, [pc, #356]	; (800707c <HAL_FDCAN_Init+0x2d4>)
 8006f16:	4d5a      	ldr	r5, [pc, #360]	; (8007080 <HAL_FDCAN_Init+0x2d8>)
 8006f18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	bf18      	it	ne
 8006f20:	4691      	movne	r9, r2
 8006f22:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8006f26:	f1a2 0218 	sub.w	r2, r2, #24
 8006f2a:	f101 0110 	add.w	r1, r1, #16
 8006f2e:	bf18      	it	ne
 8006f30:	4616      	movne	r6, r2
 8006f32:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006f36:	bf14      	ite	ne
 8006f38:	4617      	movne	r7, r2
 8006f3a:	468e      	moveq	lr, r1
 8006f3c:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006f40:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8006f44:	bf14      	ite	ne
 8006f46:	4696      	movne	lr, r2
 8006f48:	4688      	moveq	r8, r1
 8006f4a:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8006f4e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 8006f52:	bf14      	ite	ne
 8006f54:	4690      	movne	r8, r2
 8006f56:	468c      	moveq	ip, r1
 8006f58:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8006f5c:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 8006f60:	bf14      	ite	ne
 8006f62:	4694      	movne	ip, r2
 8006f64:	46a9      	moveq	r9, r5
 8006f66:	f502 7254 	add.w	r2, r2, #848	; 0x350
 8006f6a:	bf18      	it	ne
 8006f6c:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006f6e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006f74:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006f76:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8006f7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006f7e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006f82:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006f86:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006f88:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006f8c:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8006f90:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8006f94:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006f98:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006f9c:	1a89      	subs	r1, r1, r2
 8006f9e:	1c53      	adds	r3, r2, #1
 8006fa0:	4563      	cmp	r3, ip
 8006fa2:	ea4f 0391 	mov.w	r3, r1, lsr #2
 8006fa6:	f103 0301 	add.w	r3, r3, #1
 8006faa:	bf98      	it	ls
 8006fac:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006fae:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006fb2:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006fb6:	bf88      	it	hi
 8006fb8:	2501      	movhi	r5, #1
 8006fba:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8006fbe:	d81a      	bhi.n	8006ff6 <HAL_FDCAN_Init+0x24e>
 8006fc0:	2917      	cmp	r1, #23
 8006fc2:	bf8c      	ite	hi
 8006fc4:	2100      	movhi	r1, #0
 8006fc6:	2101      	movls	r1, #1
 8006fc8:	b9a9      	cbnz	r1, 8006ff6 <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006fca:	4616      	mov	r6, r2
 8006fcc:	b10b      	cbz	r3, 8006fd2 <HAL_FDCAN_Init+0x22a>
 8006fce:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006fd2:	1aed      	subs	r5, r5, r3
 8006fd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fd8:	086a      	lsrs	r2, r5, #1
 8006fda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006fde:	2000      	movs	r0, #0
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d1fb      	bne.n	8006fe2 <HAL_FDCAN_Init+0x23a>
 8006fea:	f025 0301 	bic.w	r3, r5, #1
 8006fee:	429d      	cmp	r5, r3
 8006ff0:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8006ff4:	d01a      	beq.n	800702c <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006ffe:	458c      	cmp	ip, r1
 8007000:	d914      	bls.n	800702c <HAL_FDCAN_Init+0x284>
 8007002:	f102 0108 	add.w	r1, r2, #8
 8007006:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007008:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800700a:	d90f      	bls.n	800702c <HAL_FDCAN_Init+0x284>
 800700c:	f102 010c 	add.w	r1, r2, #12
 8007010:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007012:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007014:	d90a      	bls.n	800702c <HAL_FDCAN_Init+0x284>
 8007016:	f102 0110 	add.w	r1, r2, #16
 800701a:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800701c:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800701e:	d905      	bls.n	800702c <HAL_FDCAN_Init+0x284>
 8007020:	f102 0114 	add.w	r1, r2, #20
 8007024:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007026:	6113      	str	r3, [r2, #16]
 8007028:	bf88      	it	hi
 800702a:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 800702c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800702e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007030:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007032:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8007036:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8007038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800703c:	4a11      	ldr	r2, [pc, #68]	; (8007084 <HAL_FDCAN_Init+0x2dc>)
 800703e:	6861      	ldr	r1, [r4, #4]
 8007040:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 8007044:	e6e7      	b.n	8006e16 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8007046:	2001      	movs	r0, #1
}
 8007048:	4770      	bx	lr
 800704a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8007094 <HAL_FDCAN_Init+0x2ec>
 800704e:	4e0e      	ldr	r6, [pc, #56]	; (8007088 <HAL_FDCAN_Init+0x2e0>)
 8007050:	4f0e      	ldr	r7, [pc, #56]	; (800708c <HAL_FDCAN_Init+0x2e4>)
 8007052:	f8df e044 	ldr.w	lr, [pc, #68]	; 8007098 <HAL_FDCAN_Init+0x2f0>
 8007056:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800709c <HAL_FDCAN_Init+0x2f4>
 800705a:	f8df c044 	ldr.w	ip, [pc, #68]	; 80070a0 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 800705e:	4a0c      	ldr	r2, [pc, #48]	; (8007090 <HAL_FDCAN_Init+0x2e8>)
 8007060:	e785      	b.n	8006f6e <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007062:	f042 0220 	orr.w	r2, r2, #32
 8007066:	619a      	str	r2, [r3, #24]
 8007068:	e727      	b.n	8006eba <HAL_FDCAN_Init+0x112>
 800706a:	bf00      	nop
 800706c:	40006400 	.word	0x40006400
 8007070:	40006800 	.word	0x40006800
 8007074:	4000a678 	.word	0x4000a678
 8007078:	4000ad00 	.word	0x4000ad00
 800707c:	4000ac28 	.word	0x4000ac28
 8007080:	4000ad18 	.word	0x4000ad18
 8007084:	40006000 	.word	0x40006000
 8007088:	4000a9b0 	.word	0x4000a9b0
 800708c:	4000a8d8 	.word	0x4000a8d8
 8007090:	4000a750 	.word	0x4000a750
 8007094:	4000a9c8 	.word	0x4000a9c8
 8007098:	4000a800 	.word	0x4000a800
 800709c:	4000a7c0 	.word	0x4000a7c0
 80070a0:	4000aaa0 	.word	0x4000aaa0

080070a4 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80070a4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80070a8:	3a01      	subs	r2, #1
 80070aa:	2a01      	cmp	r2, #1
{
 80070ac:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80070ae:	d905      	bls.n	80070bc <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80070b0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80070b2:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80070b6:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80070b8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80070ba:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80070bc:	6808      	ldr	r0, [r1, #0]
{
 80070be:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80070c0:	b978      	cbnz	r0, 80070e2 <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 80070c2:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80070c6:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80070c8:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 80070cc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80070ce:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80070d0:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80070d2:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 80070d4:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80070d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 80070da:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 80070de:	bc30      	pop	{r4, r5}
 80070e0:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80070e2:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80070e4:	688a      	ldr	r2, [r1, #8]
 80070e6:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80070e8:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80070ea:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80070ee:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80070f2:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80070f6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 80070fa:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 80070fe:	2000      	movs	r0, #0
}
 8007100:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8007102:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8007106:	4770      	bx	lr

08007108 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007108:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800710c:	2a01      	cmp	r2, #1
{
 800710e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007110:	d005      	beq.n	800711e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007112:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007114:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8007118:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800711a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800711c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800711e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007120:	2202      	movs	r2, #2
 8007122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007126:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007128:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800712a:	f022 0201 	bic.w	r2, r2, #1
 800712e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8007130:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007132:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop

08007138 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8007138:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800713a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800713e:	2b02      	cmp	r3, #2
{
 8007140:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007142:	d10c      	bne.n	800715e <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007144:	6805      	ldr	r5, [r0, #0]
 8007146:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 800714a:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 800714e:	d00d      	beq.n	800716c <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007150:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8007156:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007158:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 800715c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800715e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007160:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8007164:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007166:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 800716a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800716c:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007170:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007172:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007176:	2b00      	cmp	r3, #0
 8007178:	d139      	bne.n	80071ee <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 800717a:	688b      	ldr	r3, [r1, #8]
 800717c:	690f      	ldr	r7, [r1, #16]
 800717e:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8007180:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007182:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007186:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 800718a:	4303      	orrs	r3, r0
 800718c:	6948      	ldr	r0, [r1, #20]
 800718e:	6a0c      	ldr	r4, [r1, #32]
 8007190:	4303      	orrs	r3, r0
 8007192:	68c8      	ldr	r0, [r1, #12]
 8007194:	4303      	orrs	r3, r0
 8007196:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800719a:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 800719e:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80071a2:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80071a6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80071aa:	4c15      	ldr	r4, [pc, #84]	; (8007200 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 80071ac:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80071ae:	89cb      	ldrh	r3, [r1, #14]
 80071b0:	5ce3      	ldrb	r3, [r4, r3]
 80071b2:	b1a3      	cbz	r3, 80071de <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80071b4:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80071b6:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80071b8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80071ba:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 80071be:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80071c0:	433b      	orrs	r3, r7
 80071c2:	7857      	ldrb	r7, [r2, #1]
 80071c4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80071c8:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80071cc:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80071d0:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80071d2:	89cb      	ldrh	r3, [r1, #14]
 80071d4:	5ce3      	ldrb	r3, [r4, r3]
 80071d6:	459c      	cmp	ip, r3
 80071d8:	f102 0204 	add.w	r2, r2, #4
 80071dc:	d3ea      	bcc.n	80071b4 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80071de:	2301      	movs	r3, #1
 80071e0:	40b3      	lsls	r3, r6
 80071e2:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 80071e6:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80071e8:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 80071ee:	690b      	ldr	r3, [r1, #16]
 80071f0:	6808      	ldr	r0, [r1, #0]
 80071f2:	ea43 0700 	orr.w	r7, r3, r0
 80071f6:	688b      	ldr	r3, [r1, #8]
 80071f8:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80071fa:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 80071fe:	e7c2      	b.n	8007186 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8007200:	0800f188 	.word	0x0800f188

08007204 <HAL_FDCAN_GetRxMessage>:
{
 8007204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007206:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007208:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 800720c:	2802      	cmp	r0, #2
 800720e:	d10d      	bne.n	800722c <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007210:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007212:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007216:	d00f      	beq.n	8007238 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007218:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 800721c:	0700      	lsls	r0, r0, #28
 800721e:	d160      	bne.n	80072e2 <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007220:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8007226:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007228:	6623      	str	r3, [r4, #96]	; 0x60
}
 800722a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800722c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800722e:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8007232:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007234:	6623      	str	r3, [r4, #96]	; 0x60
}
 8007236:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007238:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 800723c:	0705      	lsls	r5, r0, #28
 800723e:	d0ef      	beq.n	8007220 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007240:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007244:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007246:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800724a:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 800724e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007252:	6828      	ldr	r0, [r5, #0]
 8007254:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8007258:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800725a:	2800      	cmp	r0, #0
 800725c:	d150      	bne.n	8007300 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800725e:	6828      	ldr	r0, [r5, #0]
 8007260:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8007264:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007266:	6828      	ldr	r0, [r5, #0]
 8007268:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800726c:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800726e:	6828      	ldr	r0, [r5, #0]
 8007270:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007274:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007276:	88a8      	ldrh	r0, [r5, #4]
 8007278:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800727a:	6868      	ldr	r0, [r5, #4]
 800727c:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8007280:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007282:	686e      	ldr	r6, [r5, #4]
 8007284:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8007288:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800728a:	686e      	ldr	r6, [r5, #4]
 800728c:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8007290:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007292:	79ee      	ldrb	r6, [r5, #7]
 8007294:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007298:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800729a:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800729c:	4e1a      	ldr	r6, [pc, #104]	; (8007308 <HAL_FDCAN_GetRxMessage+0x104>)
 800729e:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80072a2:	6868      	ldr	r0, [r5, #4]
 80072a4:	0fc0      	lsrs	r0, r0, #31
 80072a6:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80072a8:	f1be 0f00 	cmp.w	lr, #0
 80072ac:	d011      	beq.n	80072d2 <HAL_FDCAN_GetRxMessage+0xce>
 80072ae:	3b01      	subs	r3, #1
 80072b0:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80072b4:	46f4      	mov	ip, lr
 80072b6:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 80072ba:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80072be:	89d0      	ldrh	r0, [r2, #14]
 80072c0:	f1ac 0c06 	sub.w	ip, ip, #6
 80072c4:	5c30      	ldrb	r0, [r6, r0]
 80072c6:	ebac 0c05 	sub.w	ip, ip, r5
 80072ca:	4560      	cmp	r0, ip
 80072cc:	d8f2      	bhi.n	80072b4 <HAL_FDCAN_GetRxMessage+0xb0>
 80072ce:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80072d2:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 80072d4:	bf0c      	ite	eq
 80072d6:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 80072da:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 80072de:	2000      	movs	r0, #0
}
 80072e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80072e2:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80072e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80072e8:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80072ec:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 80072f0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80072f4:	6828      	ldr	r0, [r5, #0]
 80072f6:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 80072fa:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d0ae      	beq.n	800725e <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007300:	6828      	ldr	r0, [r5, #0]
 8007302:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8007306:	e7ad      	b.n	8007264 <HAL_FDCAN_GetRxMessage+0x60>
 8007308:	0800f188 	.word	0x0800f188

0800730c <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800730c:	6803      	ldr	r3, [r0, #0]
 800730e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 8007312:	f000 0007 	and.w	r0, r0, #7
 8007316:	4770      	bx	lr

08007318 <HAL_FDCAN_ActivateNotification>:
{
 8007318:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800731a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800731e:	3801      	subs	r0, #1
 8007320:	2801      	cmp	r0, #1
 8007322:	d905      	bls.n	8007330 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007324:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007326:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 800732a:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800732c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800732e:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007330:	681b      	ldr	r3, [r3, #0]
{
 8007332:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007334:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007338:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800733a:	d03d      	beq.n	80073b8 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800733c:	07c4      	lsls	r4, r0, #31
 800733e:	d43b      	bmi.n	80073b8 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007340:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8007342:	f044 0401 	orr.w	r4, r4, #1
 8007346:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007348:	b1cd      	cbz	r5, 800737e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800734a:	07c5      	lsls	r5, r0, #31
 800734c:	d517      	bpl.n	800737e <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800734e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007350:	f040 0002 	orr.w	r0, r0, #2
 8007354:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007356:	060c      	lsls	r4, r1, #24
 8007358:	d504      	bpl.n	8007364 <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800735a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 800735e:	4310      	orrs	r0, r2
 8007360:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007364:	05c8      	lsls	r0, r1, #23
 8007366:	d504      	bpl.n	8007372 <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007368:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 800736c:	4302      	orrs	r2, r0
 800736e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007374:	430a      	orrs	r2, r1
    return HAL_OK;
 8007376:	2000      	movs	r0, #0
}
 8007378:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800737a:	655a      	str	r2, [r3, #84]	; 0x54
}
 800737c:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800737e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8007382:	d001      	beq.n	8007388 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007384:	0784      	lsls	r4, r0, #30
 8007386:	d4e2      	bmi.n	800734e <HAL_FDCAN_ActivateNotification+0x36>
 8007388:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 800738c:	d131      	bne.n	80073f2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800738e:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8007392:	d001      	beq.n	8007398 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007394:	0704      	lsls	r4, r0, #28
 8007396:	d4da      	bmi.n	800734e <HAL_FDCAN_ActivateNotification+0x36>
 8007398:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 800739c:	d001      	beq.n	80073a2 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800739e:	06c5      	lsls	r5, r0, #27
 80073a0:	d4d5      	bmi.n	800734e <HAL_FDCAN_ActivateNotification+0x36>
 80073a2:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80073a6:	d001      	beq.n	80073ac <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80073a8:	0684      	lsls	r4, r0, #26
 80073aa:	d4d0      	bmi.n	800734e <HAL_FDCAN_ActivateNotification+0x36>
 80073ac:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80073b0:	d0d1      	beq.n	8007356 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80073b2:	0645      	lsls	r5, r0, #25
 80073b4:	d5cf      	bpl.n	8007356 <HAL_FDCAN_ActivateNotification+0x3e>
 80073b6:	e7ca      	b.n	800734e <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80073b8:	f011 0f38 	tst.w	r1, #56	; 0x38
 80073bc:	d001      	beq.n	80073c2 <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80073be:	0784      	lsls	r4, r0, #30
 80073c0:	d5be      	bpl.n	8007340 <HAL_FDCAN_ActivateNotification+0x28>
 80073c2:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80073c6:	d117      	bne.n	80073f8 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80073c8:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80073cc:	d001      	beq.n	80073d2 <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80073ce:	0704      	lsls	r4, r0, #28
 80073d0:	d5b6      	bpl.n	8007340 <HAL_FDCAN_ActivateNotification+0x28>
 80073d2:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80073d6:	d001      	beq.n	80073dc <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80073d8:	06c4      	lsls	r4, r0, #27
 80073da:	d5b1      	bpl.n	8007340 <HAL_FDCAN_ActivateNotification+0x28>
 80073dc:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80073e0:	d001      	beq.n	80073e6 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80073e2:	0684      	lsls	r4, r0, #26
 80073e4:	d5ac      	bpl.n	8007340 <HAL_FDCAN_ActivateNotification+0x28>
 80073e6:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80073ea:	d0ad      	beq.n	8007348 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80073ec:	0644      	lsls	r4, r0, #25
 80073ee:	d4ab      	bmi.n	8007348 <HAL_FDCAN_ActivateNotification+0x30>
 80073f0:	e7a6      	b.n	8007340 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80073f2:	0745      	lsls	r5, r0, #29
 80073f4:	d4ab      	bmi.n	800734e <HAL_FDCAN_ActivateNotification+0x36>
 80073f6:	e7ca      	b.n	800738e <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80073f8:	0744      	lsls	r4, r0, #29
 80073fa:	d5a1      	bpl.n	8007340 <HAL_FDCAN_ActivateNotification+0x28>
 80073fc:	e7e4      	b.n	80073c8 <HAL_FDCAN_ActivateNotification+0xb0>
 80073fe:	bf00      	nop

08007400 <HAL_FDCAN_TxEventFifoCallback>:
}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop

08007404 <HAL_FDCAN_RxFifo1Callback>:
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop

08007408 <HAL_FDCAN_TxFifoEmptyCallback>:
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop

0800740c <HAL_FDCAN_TxBufferCompleteCallback>:
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop

08007410 <HAL_FDCAN_TxBufferAbortCallback>:
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop

08007414 <HAL_FDCAN_TimestampWraparoundCallback>:
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop

08007418 <HAL_FDCAN_TimeoutOccurredCallback>:
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop

0800741c <HAL_FDCAN_HighPriorityMessageCallback>:
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop

08007420 <HAL_FDCAN_ErrorCallback>:
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <HAL_FDCAN_ErrorStatusCallback>:
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop

08007428 <HAL_FDCAN_IRQHandler>:
{
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800742c:	6803      	ldr	r3, [r0, #0]
 800742e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007432:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007438:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800743a:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 800743c:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007442:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007444:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8007446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007448:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 800744a:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 800744c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744e:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007452:	0652      	lsls	r2, r2, #25
{
 8007454:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007456:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 800745a:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 800745e:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8007462:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007466:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800746a:	d502      	bpl.n	8007472 <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800746c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800746e:	0651      	lsls	r1, r2, #25
 8007470:	d473      	bmi.n	800755a <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007474:	05d2      	lsls	r2, r2, #23
 8007476:	d502      	bpl.n	800747e <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800747a:	05d0      	lsls	r0, r2, #23
 800747c:	d45d      	bmi.n	800753a <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 800747e:	f1b9 0f00 	cmp.w	r9, #0
 8007482:	d14a      	bne.n	800751a <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8007484:	f1b8 0f00 	cmp.w	r8, #0
 8007488:	d137      	bne.n	80074fa <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 800748a:	2f00      	cmp	r7, #0
 800748c:	d13e      	bne.n	800750c <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800748e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007490:	0591      	lsls	r1, r2, #22
 8007492:	d502      	bpl.n	800749a <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007496:	0592      	lsls	r2, r2, #22
 8007498:	d475      	bmi.n	8007586 <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800749a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800749c:	0617      	lsls	r7, r2, #24
 800749e:	d502      	bpl.n	80074a6 <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80074a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074a2:	0610      	lsls	r0, r2, #24
 80074a4:	d477      	bmi.n	8007596 <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80074a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074a8:	0491      	lsls	r1, r2, #18
 80074aa:	d502      	bpl.n	80074b2 <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80074ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ae:	0492      	lsls	r2, r2, #18
 80074b0:	d459      	bmi.n	8007566 <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80074b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074b4:	0417      	lsls	r7, r2, #16
 80074b6:	d502      	bpl.n	80074be <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80074b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ba:	0410      	lsls	r0, r2, #16
 80074bc:	d45b      	bmi.n	8007576 <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80074be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074c0:	0451      	lsls	r1, r2, #17
 80074c2:	d509      	bpl.n	80074d8 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80074c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074c6:	0452      	lsls	r2, r2, #17
 80074c8:	d506      	bpl.n	80074d8 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80074ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074ce:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80074d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80074d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074d6:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 80074d8:	b94e      	cbnz	r6, 80074ee <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 80074da:	b125      	cbz	r5, 80074e6 <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80074e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80074e2:	432b      	orrs	r3, r5
 80074e4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80074e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80074e8:	bb13      	cbnz	r3, 8007530 <HAL_FDCAN_IRQHandler+0x108>
}
 80074ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80074ee:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80074f0:	4631      	mov	r1, r6
 80074f2:	4620      	mov	r0, r4
 80074f4:	f7ff ff96 	bl	8007424 <HAL_FDCAN_ErrorStatusCallback>
 80074f8:	e7ef      	b.n	80074da <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80074fa:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80074fe:	4641      	mov	r1, r8
 8007500:	4620      	mov	r0, r4
 8007502:	f7fa f945 	bl	8001790 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007506:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8007508:	2f00      	cmp	r7, #0
 800750a:	d0c0      	beq.n	800748e <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800750c:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800750e:	4639      	mov	r1, r7
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff ff77 	bl	8007404 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	e7b9      	b.n	800748e <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800751a:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800751e:	4649      	mov	r1, r9
 8007520:	4620      	mov	r0, r4
 8007522:	f7ff ff6d 	bl	8007400 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007526:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8007528:	f1b8 0f00 	cmp.w	r8, #0
 800752c:	d0ad      	beq.n	800748a <HAL_FDCAN_IRQHandler+0x62>
 800752e:	e7e4      	b.n	80074fa <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007530:	4620      	mov	r0, r4
 8007532:	f7ff ff75 	bl	8007420 <HAL_FDCAN_ErrorCallback>
}
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800753a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800753e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007542:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007548:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff ff60 	bl	8007410 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007550:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8007552:	f1b9 0f00 	cmp.w	r9, #0
 8007556:	d095      	beq.n	8007484 <HAL_FDCAN_IRQHandler+0x5c>
 8007558:	e7df      	b.n	800751a <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800755e:	f7ff ff5d 	bl	800741c <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	e785      	b.n	8007472 <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800756a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800756c:	4620      	mov	r0, r4
 800756e:	f7ff ff51 	bl	8007414 <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	e79d      	b.n	80074b2 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007576:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800757a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800757c:	4620      	mov	r0, r4
 800757e:	f7ff ff4b 	bl	8007418 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	e79b      	b.n	80074be <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800758a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800758c:	4620      	mov	r0, r4
 800758e:	f7ff ff3b 	bl	8007408 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	e781      	b.n	800749a <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007596:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800759a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800759e:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80075a0:	2280      	movs	r2, #128	; 0x80
 80075a2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7ff ff31 	bl	800740c <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	e77b      	b.n	80074a6 <HAL_FDCAN_IRQHandler+0x7e>
 80075ae:	bf00      	nop

080075b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80075b4:	680c      	ldr	r4, [r1, #0]
{
 80075b6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80075b8:	2c00      	cmp	r4, #0
 80075ba:	d07d      	beq.n	80076b8 <HAL_GPIO_Init+0x108>
 80075bc:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075c0:	4e71      	ldr	r6, [pc, #452]	; (8007788 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 80075c2:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075c4:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075c8:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075ca:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 80075ce:	ea17 0a04 	ands.w	sl, r7, r4
 80075d2:	d06b      	beq.n	80076ac <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80075d4:	f8de 1004 	ldr.w	r1, [lr, #4]
 80075d8:	f001 0203 	and.w	r2, r1, #3
 80075dc:	1e55      	subs	r5, r2, #1
 80075de:	2d01      	cmp	r5, #1
 80075e0:	d96d      	bls.n	80076be <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075e2:	2a03      	cmp	r2, #3
 80075e4:	f040 80b1 	bne.w	800774a <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075e8:	fa02 f20c 	lsl.w	r2, r2, ip
 80075ec:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 80075ee:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075f0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075f2:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075f4:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 80075f8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075fa:	d057      	beq.n	80076ac <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075fc:	4d63      	ldr	r5, [pc, #396]	; (800778c <HAL_GPIO_Init+0x1dc>)
 80075fe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007600:	f042 0201 	orr.w	r2, r2, #1
 8007604:	662a      	str	r2, [r5, #96]	; 0x60
 8007606:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007608:	f002 0201 	and.w	r2, r2, #1
 800760c:	9203      	str	r2, [sp, #12]
 800760e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007610:	f023 0203 	bic.w	r2, r3, #3
 8007614:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007618:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800761c:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8007620:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007622:	00bf      	lsls	r7, r7, #2
 8007624:	f04f 080f 	mov.w	r8, #15
 8007628:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800762c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007630:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007634:	d01a      	beq.n	800766c <HAL_GPIO_Init+0xbc>
 8007636:	4d56      	ldr	r5, [pc, #344]	; (8007790 <HAL_GPIO_Init+0x1e0>)
 8007638:	42a8      	cmp	r0, r5
 800763a:	f000 8092 	beq.w	8007762 <HAL_GPIO_Init+0x1b2>
 800763e:	4d55      	ldr	r5, [pc, #340]	; (8007794 <HAL_GPIO_Init+0x1e4>)
 8007640:	42a8      	cmp	r0, r5
 8007642:	f000 8093 	beq.w	800776c <HAL_GPIO_Init+0x1bc>
 8007646:	4d54      	ldr	r5, [pc, #336]	; (8007798 <HAL_GPIO_Init+0x1e8>)
 8007648:	42a8      	cmp	r0, r5
 800764a:	f000 8083 	beq.w	8007754 <HAL_GPIO_Init+0x1a4>
 800764e:	4d53      	ldr	r5, [pc, #332]	; (800779c <HAL_GPIO_Init+0x1ec>)
 8007650:	42a8      	cmp	r0, r5
 8007652:	f000 8092 	beq.w	800777a <HAL_GPIO_Init+0x1ca>
 8007656:	4d52      	ldr	r5, [pc, #328]	; (80077a0 <HAL_GPIO_Init+0x1f0>)
 8007658:	42a8      	cmp	r0, r5
 800765a:	bf0c      	ite	eq
 800765c:	f04f 0805 	moveq.w	r8, #5
 8007660:	f04f 0806 	movne.w	r8, #6
 8007664:	fa08 f707 	lsl.w	r7, r8, r7
 8007668:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800766c:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8007670:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8007672:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007676:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8007678:	bf54      	ite	pl
 800767a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800767c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8007680:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8007682:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007684:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8007686:	bf54      	ite	pl
 8007688:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800768a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 800768e:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8007690:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007692:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8007694:	bf54      	ite	pl
 8007696:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007698:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 800769c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800769e:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076a0:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 80076a2:	bf54      	ite	pl
 80076a4:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80076a6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 80076aa:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 80076ac:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80076ae:	fa34 f203 	lsrs.w	r2, r4, r3
 80076b2:	f10c 0c02 	add.w	ip, ip, #2
 80076b6:	d188      	bne.n	80075ca <HAL_GPIO_Init+0x1a>
  }
}
 80076b8:	b005      	add	sp, #20
 80076ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80076be:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076c2:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076c6:	f04f 0803 	mov.w	r8, #3
 80076ca:	fa08 f80c 	lsl.w	r8, r8, ip
 80076ce:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80076d6:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 80076da:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076dc:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 80076e0:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076e4:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076e8:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80076ec:	409f      	lsls	r7, r3
 80076ee:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80076f2:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80076f4:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076f6:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076fa:	f8de 7008 	ldr.w	r7, [lr, #8]
 80076fe:	fa07 f70c 	lsl.w	r7, r7, ip
 8007702:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007706:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8007708:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800770a:	fa02 f20c 	lsl.w	r2, r2, ip
 800770e:	f47f af6e 	bne.w	80075ee <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8007712:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8007716:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800771a:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800771e:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8007722:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007724:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007728:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800772c:	fa07 f708 	lsl.w	r7, r7, r8
 8007730:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007732:	270f      	movs	r7, #15
 8007734:	fa07 f808 	lsl.w	r8, r7, r8
 8007738:	9f00      	ldr	r7, [sp, #0]
 800773a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800773e:	9f01      	ldr	r7, [sp, #4]
 8007740:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8007744:	f8c9 7020 	str.w	r7, [r9, #32]
 8007748:	e751      	b.n	80075ee <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800774a:	2503      	movs	r5, #3
 800774c:	fa05 f50c 	lsl.w	r5, r5, ip
 8007750:	43ed      	mvns	r5, r5
 8007752:	e7cf      	b.n	80076f4 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007754:	f04f 0803 	mov.w	r8, #3
 8007758:	fa08 f707 	lsl.w	r7, r8, r7
 800775c:	ea49 0907 	orr.w	r9, r9, r7
 8007760:	e784      	b.n	800766c <HAL_GPIO_Init+0xbc>
 8007762:	fa0b f707 	lsl.w	r7, fp, r7
 8007766:	ea49 0907 	orr.w	r9, r9, r7
 800776a:	e77f      	b.n	800766c <HAL_GPIO_Init+0xbc>
 800776c:	f04f 0802 	mov.w	r8, #2
 8007770:	fa08 f707 	lsl.w	r7, r8, r7
 8007774:	ea49 0907 	orr.w	r9, r9, r7
 8007778:	e778      	b.n	800766c <HAL_GPIO_Init+0xbc>
 800777a:	f04f 0804 	mov.w	r8, #4
 800777e:	fa08 f707 	lsl.w	r7, r8, r7
 8007782:	ea49 0907 	orr.w	r9, r9, r7
 8007786:	e771      	b.n	800766c <HAL_GPIO_Init+0xbc>
 8007788:	40010400 	.word	0x40010400
 800778c:	40021000 	.word	0x40021000
 8007790:	48000400 	.word	0x48000400
 8007794:	48000800 	.word	0x48000800
 8007798:	48000c00 	.word	0x48000c00
 800779c:	48001000 	.word	0x48001000
 80077a0:	48001400 	.word	0x48001400

080077a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077a4:	6903      	ldr	r3, [r0, #16]
 80077a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80077a8:	bf14      	ite	ne
 80077aa:	2001      	movne	r0, #1
 80077ac:	2000      	moveq	r0, #0
 80077ae:	4770      	bx	lr

080077b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077b0:	b10a      	cbz	r2, 80077b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077b2:	6181      	str	r1, [r0, #24]
 80077b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80077b6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop

080077bc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80077bc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80077be:	ea01 0203 	and.w	r2, r1, r3
 80077c2:	ea21 0103 	bic.w	r1, r1, r3
 80077c6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077ca:	6181      	str	r1, [r0, #24]
}
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077d0:	4a37      	ldr	r2, [pc, #220]	; (80078b0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80077d2:	b960      	cbnz	r0, 80077ee <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077d4:	6813      	ldr	r3, [r2, #0]
 80077d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077e2:	d01d      	beq.n	8007820 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80077ec:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077ee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80077f2:	d007      	beq.n	8007804 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80077fe:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007800:	6013      	str	r3, [r2, #0]
}
 8007802:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007804:	6813      	ldr	r3, [r2, #0]
 8007806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800780a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800780e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007812:	d02b      	beq.n	800786c <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8007818:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800781a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800781e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007828:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800782a:	4822      	ldr	r0, [pc, #136]	; (80078b4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800782c:	4922      	ldr	r1, [pc, #136]	; (80078b8 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800782e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007836:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007838:	6803      	ldr	r3, [r0, #0]
 800783a:	2032      	movs	r0, #50	; 0x32
 800783c:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007840:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007842:	fba1 1303 	umull	r1, r3, r1, r3
 8007846:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007848:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800784a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800784e:	d506      	bpl.n	800785e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007850:	e000      	b.n	8007854 <HAL_PWREx_ControlVoltageScaling+0x84>
 8007852:	b123      	cbz	r3, 800785e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007854:	6951      	ldr	r1, [r2, #20]
 8007856:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007858:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800785c:	d4f9      	bmi.n	8007852 <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800785e:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8007864:	bf54      	ite	pl
 8007866:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8007868:	2003      	movmi	r0, #3
 800786a:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800786c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007874:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007876:	480f      	ldr	r0, [pc, #60]	; (80078b4 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007878:	490f      	ldr	r1, [pc, #60]	; (80078b8 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800787a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800787e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007882:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007884:	6803      	ldr	r3, [r0, #0]
 8007886:	2032      	movs	r0, #50	; 0x32
 8007888:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800788c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800788e:	fba1 1303 	umull	r1, r3, r1, r3
 8007892:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007894:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007896:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800789a:	d5e0      	bpl.n	800785e <HAL_PWREx_ControlVoltageScaling+0x8e>
 800789c:	e001      	b.n	80078a2 <HAL_PWREx_ControlVoltageScaling+0xd2>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0dd      	beq.n	800785e <HAL_PWREx_ControlVoltageScaling+0x8e>
 80078a2:	6951      	ldr	r1, [r2, #20]
 80078a4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80078a6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078aa:	d5d8      	bpl.n	800785e <HAL_PWREx_ControlVoltageScaling+0x8e>
 80078ac:	e7f7      	b.n	800789e <HAL_PWREx_ControlVoltageScaling+0xce>
 80078ae:	bf00      	nop
 80078b0:	40007000 	.word	0x40007000
 80078b4:	20000008 	.word	0x20000008
 80078b8:	431bde83 	.word	0x431bde83

080078bc <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80078bc:	4a02      	ldr	r2, [pc, #8]	; (80078c8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80078be:	6893      	ldr	r3, [r2, #8]
 80078c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078c4:	6093      	str	r3, [r2, #8]
}
 80078c6:	4770      	bx	lr
 80078c8:	40007000 	.word	0x40007000

080078cc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f000 81c3 	beq.w	8007c58 <HAL_RCC_OscConfig+0x38c>
{
 80078d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078d6:	6803      	ldr	r3, [r0, #0]
 80078d8:	07d9      	lsls	r1, r3, #31
{
 80078da:	b082      	sub	sp, #8
 80078dc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078de:	d52d      	bpl.n	800793c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e0:	49a6      	ldr	r1, [pc, #664]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 80078e2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078e4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80078ea:	2a0c      	cmp	r2, #12
 80078ec:	f000 810a 	beq.w	8007b04 <HAL_RCC_OscConfig+0x238>
 80078f0:	2a08      	cmp	r2, #8
 80078f2:	f000 810c 	beq.w	8007b0e <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078fc:	f000 8133 	beq.w	8007b66 <HAL_RCC_OscConfig+0x29a>
 8007900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007904:	f000 819b 	beq.w	8007c3e <HAL_RCC_OscConfig+0x372>
 8007908:	4d9c      	ldr	r5, [pc, #624]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 800790a:	682a      	ldr	r2, [r5, #0]
 800790c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007910:	602a      	str	r2, [r5, #0]
 8007912:	682a      	ldr	r2, [r5, #0]
 8007914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007918:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 8128 	bne.w	8007b70 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fa ff54 	bl	80027cc <HAL_GetTick>
 8007924:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007926:	e005      	b.n	8007934 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007928:	f7fa ff50 	bl	80027cc <HAL_GetTick>
 800792c:	1b80      	subs	r0, r0, r6
 800792e:	2864      	cmp	r0, #100	; 0x64
 8007930:	f200 8142 	bhi.w	8007bb8 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	039f      	lsls	r7, r3, #14
 8007938:	d4f6      	bmi.n	8007928 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	079e      	lsls	r6, r3, #30
 800793e:	d528      	bpl.n	8007992 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007940:	4a8e      	ldr	r2, [pc, #568]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007942:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007944:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007946:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800794a:	2b0c      	cmp	r3, #12
 800794c:	f000 80ec 	beq.w	8007b28 <HAL_RCC_OscConfig+0x25c>
 8007950:	2b04      	cmp	r3, #4
 8007952:	f000 80ee 	beq.w	8007b32 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007956:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007958:	4d88      	ldr	r5, [pc, #544]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 811d 	beq.w	8007b9a <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007966:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007968:	f7fa ff30 	bl	80027cc <HAL_GetTick>
 800796c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800796e:	e005      	b.n	800797c <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007970:	f7fa ff2c 	bl	80027cc <HAL_GetTick>
 8007974:	1b80      	subs	r0, r0, r6
 8007976:	2802      	cmp	r0, #2
 8007978:	f200 811e 	bhi.w	8007bb8 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	0558      	lsls	r0, r3, #21
 8007980:	d5f6      	bpl.n	8007970 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007982:	686b      	ldr	r3, [r5, #4]
 8007984:	6922      	ldr	r2, [r4, #16]
 8007986:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800798a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800798e:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	071a      	lsls	r2, r3, #28
 8007994:	d519      	bpl.n	80079ca <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007996:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007998:	4d78      	ldr	r5, [pc, #480]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 809e 	beq.w	8007adc <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80079a0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ac:	f7fa ff0e 	bl	80027cc <HAL_GetTick>
 80079b0:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079b2:	e005      	b.n	80079c0 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079b4:	f7fa ff0a 	bl	80027cc <HAL_GetTick>
 80079b8:	1b80      	subs	r0, r0, r6
 80079ba:	2802      	cmp	r0, #2
 80079bc:	f200 80fc 	bhi.w	8007bb8 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079c0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80079c4:	079f      	lsls	r7, r3, #30
 80079c6:	d5f5      	bpl.n	80079b4 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	0759      	lsls	r1, r3, #29
 80079cc:	d541      	bpl.n	8007a52 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079ce:	4b6b      	ldr	r3, [pc, #428]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 80079d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079d2:	00d2      	lsls	r2, r2, #3
 80079d4:	f100 80f4 	bmi.w	8007bc0 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079de:	659a      	str	r2, [r3, #88]	; 0x58
 80079e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80079ea:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ec:	4e64      	ldr	r6, [pc, #400]	; (8007b80 <HAL_RCC_OscConfig+0x2b4>)
 80079ee:	6833      	ldr	r3, [r6, #0]
 80079f0:	05df      	lsls	r7, r3, #23
 80079f2:	f140 8113 	bpl.w	8007c1c <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	f000 80e3 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x2f8>
 80079fe:	2b05      	cmp	r3, #5
 8007a00:	f000 8169 	beq.w	8007cd6 <HAL_RCC_OscConfig+0x40a>
 8007a04:	4e5d      	ldr	r6, [pc, #372]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007a06:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8007a12:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007a16:	f022 0204 	bic.w	r2, r2, #4
 8007a1a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 80d7 	bne.w	8007bd2 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a24:	f7fa fed2 	bl	80027cc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a28:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007a2c:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a2e:	e005      	b.n	8007a3c <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a30:	f7fa fecc 	bl	80027cc <HAL_GetTick>
 8007a34:	1bc0      	subs	r0, r0, r7
 8007a36:	4540      	cmp	r0, r8
 8007a38:	f200 80be 	bhi.w	8007bb8 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a3c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8007a40:	079a      	lsls	r2, r3, #30
 8007a42:	d4f5      	bmi.n	8007a30 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a44:	b125      	cbz	r5, 8007a50 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a46:	4a4d      	ldr	r2, [pc, #308]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007a48:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	069b      	lsls	r3, r3, #26
 8007a54:	d518      	bpl.n	8007a88 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a56:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a58:	4d48      	ldr	r5, [pc, #288]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80ca 	beq.w	8007bf4 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8007a60:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007a64:	f043 0301 	orr.w	r3, r3, #1
 8007a68:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6c:	f7fa feae 	bl	80027cc <HAL_GetTick>
 8007a70:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a72:	e005      	b.n	8007a80 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a74:	f7fa feaa 	bl	80027cc <HAL_GetTick>
 8007a78:	1b80      	subs	r0, r0, r6
 8007a7a:	2802      	cmp	r0, #2
 8007a7c:	f200 809c 	bhi.w	8007bb8 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a80:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007a84:	079f      	lsls	r7, r3, #30
 8007a86:	d5f5      	bpl.n	8007a74 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a88:	69e0      	ldr	r0, [r4, #28]
 8007a8a:	b318      	cbz	r0, 8007ad4 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a8c:	4d3b      	ldr	r5, [pc, #236]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007a8e:	68ab      	ldr	r3, [r5, #8]
 8007a90:	f003 030c 	and.w	r3, r3, #12
 8007a94:	2b0c      	cmp	r3, #12
 8007a96:	f000 812c 	beq.w	8007cf2 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a9a:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a9c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aa2:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007aa4:	f000 80da 	beq.w	8007c5c <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007aa8:	68eb      	ldr	r3, [r5, #12]
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ab0:	68eb      	ldr	r3, [r5, #12]
 8007ab2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aba:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007abc:	f7fa fe86 	bl	80027cc <HAL_GetTick>
 8007ac0:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ac2:	e004      	b.n	8007ace <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac4:	f7fa fe82 	bl	80027cc <HAL_GetTick>
 8007ac8:	1b00      	subs	r0, r0, r4
 8007aca:	2802      	cmp	r0, #2
 8007acc:	d874      	bhi.n	8007bb8 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ace:	682b      	ldr	r3, [r5, #0]
 8007ad0:	019b      	lsls	r3, r3, #6
 8007ad2:	d4f7      	bmi.n	8007ac4 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8007ad4:	2000      	movs	r0, #0
}
 8007ad6:	b002      	add	sp, #8
 8007ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007adc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007ae0:	f023 0301 	bic.w	r3, r3, #1
 8007ae4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007ae8:	f7fa fe70 	bl	80027cc <HAL_GetTick>
 8007aec:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007aee:	e004      	b.n	8007afa <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007af0:	f7fa fe6c 	bl	80027cc <HAL_GetTick>
 8007af4:	1b80      	subs	r0, r0, r6
 8007af6:	2802      	cmp	r0, #2
 8007af8:	d85e      	bhi.n	8007bb8 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007afa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007afe:	0798      	lsls	r0, r3, #30
 8007b00:	d4f6      	bmi.n	8007af0 <HAL_RCC_OscConfig+0x224>
 8007b02:	e761      	b.n	80079c8 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b04:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007b08:	2903      	cmp	r1, #3
 8007b0a:	f47f aef4 	bne.w	80078f6 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b0e:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	0392      	lsls	r2, r2, #14
 8007b14:	f57f af12 	bpl.w	800793c <HAL_RCC_OscConfig+0x70>
 8007b18:	6862      	ldr	r2, [r4, #4]
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	f47f af0e 	bne.w	800793c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8007b20:	2001      	movs	r0, #1
}
 8007b22:	b002      	add	sp, #8
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b28:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007b2c:	2a02      	cmp	r2, #2
 8007b2e:	f47f af12 	bne.w	8007956 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b32:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	055d      	lsls	r5, r3, #21
 8007b38:	d502      	bpl.n	8007b40 <HAL_RCC_OscConfig+0x274>
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0ef      	beq.n	8007b20 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b40:	4a0e      	ldr	r2, [pc, #56]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007b42:	6920      	ldr	r0, [r4, #16]
 8007b44:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b46:	490f      	ldr	r1, [pc, #60]	; (8007b84 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b4c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007b50:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b52:	6808      	ldr	r0, [r1, #0]
 8007b54:	f7fe f92e 	bl	8005db4 <HAL_InitTick>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1e1      	bne.n	8007b20 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	071a      	lsls	r2, r3, #28
 8007b60:	f57f af33 	bpl.w	80079ca <HAL_RCC_OscConfig+0xfe>
 8007b64:	e717      	b.n	8007996 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b66:	4a05      	ldr	r2, [pc, #20]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
 8007b68:	6813      	ldr	r3, [r2, #0]
 8007b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b6e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007b70:	f7fa fe2c 	bl	80027cc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b74:	4e01      	ldr	r6, [pc, #4]	; (8007b7c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8007b76:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b78:	e00b      	b.n	8007b92 <HAL_RCC_OscConfig+0x2c6>
 8007b7a:	bf00      	nop
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	40007000 	.word	0x40007000
 8007b84:	20000010 	.word	0x20000010
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b88:	f7fa fe20 	bl	80027cc <HAL_GetTick>
 8007b8c:	1b40      	subs	r0, r0, r5
 8007b8e:	2864      	cmp	r0, #100	; 0x64
 8007b90:	d812      	bhi.n	8007bb8 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b92:	6833      	ldr	r3, [r6, #0]
 8007b94:	039b      	lsls	r3, r3, #14
 8007b96:	d5f7      	bpl.n	8007b88 <HAL_RCC_OscConfig+0x2bc>
 8007b98:	e6cf      	b.n	800793a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8007b9a:	682b      	ldr	r3, [r5, #0]
 8007b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ba0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007ba2:	f7fa fe13 	bl	80027cc <HAL_GetTick>
 8007ba6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	0559      	lsls	r1, r3, #21
 8007bac:	d5d6      	bpl.n	8007b5c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bae:	f7fa fe0d 	bl	80027cc <HAL_GetTick>
 8007bb2:	1b80      	subs	r0, r0, r6
 8007bb4:	2802      	cmp	r0, #2
 8007bb6:	d9f7      	bls.n	8007ba8 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8007bb8:	2003      	movs	r0, #3
}
 8007bba:	b002      	add	sp, #8
 8007bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	e713      	b.n	80079ec <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc4:	4a65      	ldr	r2, [pc, #404]	; (8007d5c <HAL_RCC_OscConfig+0x490>)
 8007bc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8007bd2:	f7fa fdfb 	bl	80027cc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bd6:	4f61      	ldr	r7, [pc, #388]	; (8007d5c <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8007bd8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bda:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bde:	e004      	b.n	8007bea <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007be0:	f7fa fdf4 	bl	80027cc <HAL_GetTick>
 8007be4:	1b80      	subs	r0, r0, r6
 8007be6:	4540      	cmp	r0, r8
 8007be8:	d8e6      	bhi.n	8007bb8 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bee:	0799      	lsls	r1, r3, #30
 8007bf0:	d5f6      	bpl.n	8007be0 <HAL_RCC_OscConfig+0x314>
 8007bf2:	e727      	b.n	8007a44 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8007bf4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007bf8:	f023 0301 	bic.w	r3, r3, #1
 8007bfc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8007c00:	f7fa fde4 	bl	80027cc <HAL_GetTick>
 8007c04:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c06:	e004      	b.n	8007c12 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c08:	f7fa fde0 	bl	80027cc <HAL_GetTick>
 8007c0c:	1b80      	subs	r0, r0, r6
 8007c0e:	2802      	cmp	r0, #2
 8007c10:	d8d2      	bhi.n	8007bb8 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c12:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007c16:	0798      	lsls	r0, r3, #30
 8007c18:	d4f6      	bmi.n	8007c08 <HAL_RCC_OscConfig+0x33c>
 8007c1a:	e735      	b.n	8007a88 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c1c:	6833      	ldr	r3, [r6, #0]
 8007c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c22:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007c24:	f7fa fdd2 	bl	80027cc <HAL_GetTick>
 8007c28:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c2a:	6833      	ldr	r3, [r6, #0]
 8007c2c:	05d8      	lsls	r0, r3, #23
 8007c2e:	f53f aee2 	bmi.w	80079f6 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c32:	f7fa fdcb 	bl	80027cc <HAL_GetTick>
 8007c36:	1bc0      	subs	r0, r0, r7
 8007c38:	2802      	cmp	r0, #2
 8007c3a:	d9f6      	bls.n	8007c2a <HAL_RCC_OscConfig+0x35e>
 8007c3c:	e7bc      	b.n	8007bb8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c42:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c54:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c56:	e78b      	b.n	8007b70 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007c58:	2001      	movs	r0, #1
}
 8007c5a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007c5c:	f7fa fdb6 	bl	80027cc <HAL_GetTick>
 8007c60:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c62:	e004      	b.n	8007c6e <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c64:	f7fa fdb2 	bl	80027cc <HAL_GetTick>
 8007c68:	1b80      	subs	r0, r0, r6
 8007c6a:	2802      	cmp	r0, #2
 8007c6c:	d8a4      	bhi.n	8007bb8 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	0199      	lsls	r1, r3, #6
 8007c72:	d4f7      	bmi.n	8007c64 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c74:	68e9      	ldr	r1, [r5, #12]
 8007c76:	4b3a      	ldr	r3, [pc, #232]	; (8007d60 <HAL_RCC_OscConfig+0x494>)
 8007c78:	6a22      	ldr	r2, [r4, #32]
 8007c7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c7c:	4e37      	ldr	r6, [pc, #220]	; (8007d5c <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c7e:	400b      	ands	r3, r1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8007c86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007c8a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8007c8e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8007c92:	3801      	subs	r0, #1
 8007c94:	0849      	lsrs	r1, r1, #1
 8007c96:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007c9a:	3901      	subs	r1, #1
 8007c9c:	0852      	lsrs	r2, r2, #1
 8007c9e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007ca2:	3a01      	subs	r2, #1
 8007ca4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007ca8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cb0:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cb2:	68eb      	ldr	r3, [r5, #12]
 8007cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cb8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007cba:	f7fa fd87 	bl	80027cc <HAL_GetTick>
 8007cbe:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cc0:	e005      	b.n	8007cce <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cc2:	f7fa fd83 	bl	80027cc <HAL_GetTick>
 8007cc6:	1b00      	subs	r0, r0, r4
 8007cc8:	2802      	cmp	r0, #2
 8007cca:	f63f af75 	bhi.w	8007bb8 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cce:	6833      	ldr	r3, [r6, #0]
 8007cd0:	019a      	lsls	r2, r3, #6
 8007cd2:	d5f6      	bpl.n	8007cc2 <HAL_RCC_OscConfig+0x3f6>
 8007cd4:	e6fe      	b.n	8007ad4 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <HAL_RCC_OscConfig+0x490>)
 8007cd8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007cdc:	f042 0204 	orr.w	r2, r2, #4
 8007ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007ce4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007ce8:	f042 0201 	orr.w	r2, r2, #1
 8007cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cf0:	e76f      	b.n	8007bd2 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cf2:	2801      	cmp	r0, #1
 8007cf4:	f43f aeef 	beq.w	8007ad6 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8007cf8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cfa:	6a22      	ldr	r2, [r4, #32]
 8007cfc:	f003 0103 	and.w	r1, r3, #3
 8007d00:	4291      	cmp	r1, r2
 8007d02:	f47f af0d 	bne.w	8007b20 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d0c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d0e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007d12:	f47f af05 	bne.w	8007b20 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007d18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d1c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007d20:	f47f aefe 	bne.w	8007b20 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007d26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d2a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007d2e:	f47f aef7 	bne.w	8007b20 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007d34:	0852      	lsrs	r2, r2, #1
 8007d36:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007d3a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d3c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007d40:	f47f aeee 	bne.w	8007b20 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d44:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007d46:	0852      	lsrs	r2, r2, #1
 8007d48:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007d4c:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d4e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007d52:	bf14      	ite	ne
 8007d54:	2001      	movne	r0, #1
 8007d56:	2000      	moveq	r0, #0
 8007d58:	e6bd      	b.n	8007ad6 <HAL_RCC_OscConfig+0x20a>
 8007d5a:	bf00      	nop
 8007d5c:	40021000 	.word	0x40021000
 8007d60:	019f800c 	.word	0x019f800c

08007d64 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d64:	4b18      	ldr	r3, [pc, #96]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x64>)
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	f002 020c 	and.w	r2, r2, #12
 8007d6c:	2a04      	cmp	r2, #4
 8007d6e:	d026      	beq.n	8007dbe <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	f002 020c 	and.w	r2, r2, #12
 8007d76:	2a08      	cmp	r2, #8
 8007d78:	d023      	beq.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	f002 020c 	and.w	r2, r2, #12
 8007d80:	2a0c      	cmp	r2, #12
 8007d82:	d001      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007d84:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007d86:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d88:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d8a:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d8c:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d8e:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007d92:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d94:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d98:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d9c:	bf0c      	ite	eq
 8007d9e:	4b0b      	ldreq	r3, [pc, #44]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007da0:	4b0b      	ldrne	r3, [pc, #44]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007da2:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007da8:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x64>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007db4:	3301      	adds	r3, #1
 8007db6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007db8:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007dbc:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007dbe:	4804      	ldr	r0, [pc, #16]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007dc0:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007dc2:	4802      	ldr	r0, [pc, #8]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x68>)
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40021000 	.word	0x40021000
 8007dcc:	007a1200 	.word	0x007a1200
 8007dd0:	00f42400 	.word	0x00f42400

08007dd4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f000 80ee 	beq.w	8007fb6 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007dda:	4a78      	ldr	r2, [pc, #480]	; (8007fbc <HAL_RCC_ClockConfig+0x1e8>)
{
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007de0:	6813      	ldr	r3, [r2, #0]
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	428b      	cmp	r3, r1
 8007de8:	460d      	mov	r5, r1
 8007dea:	4604      	mov	r4, r0
 8007dec:	d20c      	bcs.n	8007e08 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	f023 030f 	bic.w	r3, r3, #15
 8007df4:	430b      	orrs	r3, r1
 8007df6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df8:	6813      	ldr	r3, [r2, #0]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	428b      	cmp	r3, r1
 8007e00:	d002      	beq.n	8007e08 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007e02:	2001      	movs	r0, #1
}
 8007e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	07df      	lsls	r7, r3, #31
 8007e0c:	d569      	bpl.n	8007ee2 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e0e:	6867      	ldr	r7, [r4, #4]
 8007e10:	2f03      	cmp	r7, #3
 8007e12:	f000 80a0 	beq.w	8007f56 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e16:	4b6a      	ldr	r3, [pc, #424]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e18:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e1a:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e1c:	f000 8097 	beq.w	8007f4e <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e20:	055b      	lsls	r3, r3, #21
 8007e22:	d5ee      	bpl.n	8007e02 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007e24:	f7ff ff9e 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007e28:	4b66      	ldr	r3, [pc, #408]	; (8007fc4 <HAL_RCC_ClockConfig+0x1f0>)
 8007e2a:	4298      	cmp	r0, r3
 8007e2c:	f240 80c0 	bls.w	8007fb0 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e30:	4a63      	ldr	r2, [pc, #396]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007e32:	6893      	ldr	r3, [r2, #8]
 8007e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007e3e:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e42:	4e5f      	ldr	r6, [pc, #380]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007e44:	68b3      	ldr	r3, [r6, #8]
 8007e46:	f023 0303 	bic.w	r3, r3, #3
 8007e4a:	433b      	orrs	r3, r7
 8007e4c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007e4e:	f7fa fcbd 	bl	80027cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e52:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007e56:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e58:	e004      	b.n	8007e64 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e5a:	f7fa fcb7 	bl	80027cc <HAL_GetTick>
 8007e5e:	1bc0      	subs	r0, r0, r7
 8007e60:	4540      	cmp	r0, r8
 8007e62:	d871      	bhi.n	8007f48 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e64:	68b3      	ldr	r3, [r6, #8]
 8007e66:	6862      	ldr	r2, [r4, #4]
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007e70:	d1f3      	bne.n	8007e5a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	079f      	lsls	r7, r3, #30
 8007e76:	d436      	bmi.n	8007ee6 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8007e78:	f1b9 0f00 	cmp.w	r9, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007e7e:	68b3      	ldr	r3, [r6, #8]
 8007e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e84:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e86:	4e4d      	ldr	r6, [pc, #308]	; (8007fbc <HAL_RCC_ClockConfig+0x1e8>)
 8007e88:	6833      	ldr	r3, [r6, #0]
 8007e8a:	f003 030f 	and.w	r3, r3, #15
 8007e8e:	42ab      	cmp	r3, r5
 8007e90:	d846      	bhi.n	8007f20 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	075a      	lsls	r2, r3, #29
 8007e96:	d506      	bpl.n	8007ea6 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e98:	4949      	ldr	r1, [pc, #292]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007e9a:	68e0      	ldr	r0, [r4, #12]
 8007e9c:	688a      	ldr	r2, [r1, #8]
 8007e9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ea2:	4302      	orrs	r2, r0
 8007ea4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ea6:	071b      	lsls	r3, r3, #28
 8007ea8:	d507      	bpl.n	8007eba <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eaa:	4a45      	ldr	r2, [pc, #276]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007eac:	6921      	ldr	r1, [r4, #16]
 8007eae:	6893      	ldr	r3, [r2, #8]
 8007eb0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007eb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007eb8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007eba:	f7ff ff53 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
 8007ebe:	4a40      	ldr	r2, [pc, #256]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007ec0:	4c41      	ldr	r4, [pc, #260]	; (8007fc8 <HAL_RCC_ClockConfig+0x1f4>)
 8007ec2:	6892      	ldr	r2, [r2, #8]
 8007ec4:	4941      	ldr	r1, [pc, #260]	; (8007fcc <HAL_RCC_ClockConfig+0x1f8>)
 8007ec6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007eca:	4603      	mov	r3, r0
 8007ecc:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007ece:	4840      	ldr	r0, [pc, #256]	; (8007fd0 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ed0:	f002 021f 	and.w	r2, r2, #31
 8007ed4:	40d3      	lsrs	r3, r2
 8007ed6:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007ed8:	6800      	ldr	r0, [r0, #0]
}
 8007eda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007ede:	f7fd bf69 	b.w	8005db4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ee2:	079e      	lsls	r6, r3, #30
 8007ee4:	d5cf      	bpl.n	8007e86 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee6:	0758      	lsls	r0, r3, #29
 8007ee8:	d504      	bpl.n	8007ef4 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007eea:	4935      	ldr	r1, [pc, #212]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007eec:	688a      	ldr	r2, [r1, #8]
 8007eee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007ef2:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef4:	0719      	lsls	r1, r3, #28
 8007ef6:	d506      	bpl.n	8007f06 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007ef8:	4a31      	ldr	r2, [pc, #196]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007efa:	6893      	ldr	r3, [r2, #8]
 8007efc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f00:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f04:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f06:	4a2e      	ldr	r2, [pc, #184]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007f08:	68a1      	ldr	r1, [r4, #8]
 8007f0a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f0c:	4e2b      	ldr	r6, [pc, #172]	; (8007fbc <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f12:	430b      	orrs	r3, r1
 8007f14:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f16:	6833      	ldr	r3, [r6, #0]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	42ab      	cmp	r3, r5
 8007f1e:	d9b8      	bls.n	8007e92 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	f023 030f 	bic.w	r3, r3, #15
 8007f26:	432b      	orrs	r3, r5
 8007f28:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007f2a:	f7fa fc4f 	bl	80027cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f2e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007f32:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f34:	6833      	ldr	r3, [r6, #0]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	42ab      	cmp	r3, r5
 8007f3c:	d0a9      	beq.n	8007e92 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f3e:	f7fa fc45 	bl	80027cc <HAL_GetTick>
 8007f42:	1bc0      	subs	r0, r0, r7
 8007f44:	4540      	cmp	r0, r8
 8007f46:	d9f5      	bls.n	8007f34 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007f48:	2003      	movs	r0, #3
}
 8007f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f4e:	039a      	lsls	r2, r3, #14
 8007f50:	f53f af68 	bmi.w	8007e24 <HAL_RCC_ClockConfig+0x50>
 8007f54:	e755      	b.n	8007e02 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f56:	4a1a      	ldr	r2, [pc, #104]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
 8007f58:	6811      	ldr	r1, [r2, #0]
 8007f5a:	0188      	lsls	r0, r1, #6
 8007f5c:	f57f af51 	bpl.w	8007e02 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f60:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f62:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f64:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8007f66:	4e17      	ldr	r6, [pc, #92]	; (8007fc4 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f68:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8007f6c:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f6e:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f72:	bf0c      	ite	eq
 8007f74:	4817      	ldreq	r0, [pc, #92]	; (8007fd4 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f76:	4818      	ldrne	r0, [pc, #96]	; (8007fd8 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f78:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f7a:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f7e:	4810      	ldr	r0, [pc, #64]	; (8007fc0 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f80:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007f84:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f88:	68c1      	ldr	r1, [r0, #12]
 8007f8a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007f8e:	3101      	adds	r1, #1
 8007f90:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007f92:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007f96:	42b2      	cmp	r2, r6
 8007f98:	d90a      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f9a:	6882      	ldr	r2, [r0, #8]
 8007f9c:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007fa0:	f43f af46 	beq.w	8007e30 <HAL_RCC_ClockConfig+0x5c>
 8007fa4:	0799      	lsls	r1, r3, #30
 8007fa6:	d503      	bpl.n	8007fb0 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f43f af40 	beq.w	8007e30 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007fb0:	f04f 0900 	mov.w	r9, #0
 8007fb4:	e745      	b.n	8007e42 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8007fb6:	2001      	movs	r0, #1
}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40022000 	.word	0x40022000
 8007fc0:	40021000 	.word	0x40021000
 8007fc4:	04c4b400 	.word	0x04c4b400
 8007fc8:	0800f170 	.word	0x0800f170
 8007fcc:	20000008 	.word	0x20000008
 8007fd0:	20000010 	.word	0x20000010
 8007fd4:	007a1200 	.word	0x007a1200
 8007fd8:	00f42400 	.word	0x00f42400

08007fdc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007fde:	4a06      	ldr	r2, [pc, #24]	; (8007ff8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007fe2:	4906      	ldr	r1, [pc, #24]	; (8007ffc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007fe4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007fe8:	6808      	ldr	r0, [r1, #0]
 8007fea:	5cd3      	ldrb	r3, [r2, r3]
 8007fec:	f003 031f 	and.w	r3, r3, #31
}
 8007ff0:	40d8      	lsrs	r0, r3
 8007ff2:	4770      	bx	lr
 8007ff4:	40021000 	.word	0x40021000
 8007ff8:	0800f180 	.word	0x0800f180
 8007ffc:	20000008 	.word	0x20000008

08008000 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008000:	4b05      	ldr	r3, [pc, #20]	; (8008018 <HAL_RCC_GetPCLK2Freq+0x18>)
 8008002:	4a06      	ldr	r2, [pc, #24]	; (800801c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008004:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8008006:	4906      	ldr	r1, [pc, #24]	; (8008020 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008008:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800800c:	6808      	ldr	r0, [r1, #0]
 800800e:	5cd3      	ldrb	r3, [r2, r3]
 8008010:	f003 031f 	and.w	r3, r3, #31
}
 8008014:	40d8      	lsrs	r0, r3
 8008016:	4770      	bx	lr
 8008018:	40021000 	.word	0x40021000
 800801c:	0800f180 	.word	0x0800f180
 8008020:	20000008 	.word	0x20000008

08008024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008028:	6803      	ldr	r3, [r0, #0]
{
 800802a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800802c:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8008030:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008032:	d056      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008034:	4bac      	ldr	r3, [pc, #688]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008036:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008038:	00d5      	lsls	r5, r2, #3
 800803a:	f140 813e 	bpl.w	80082ba <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 800803e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008040:	4daa      	ldr	r5, [pc, #680]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008048:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800804a:	f7fa fbbf 	bl	80027cc <HAL_GetTick>
 800804e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008050:	e005      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008052:	f7fa fbbb 	bl	80027cc <HAL_GetTick>
 8008056:	1b83      	subs	r3, r0, r6
 8008058:	2b02      	cmp	r3, #2
 800805a:	f200 8139 	bhi.w	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	05d8      	lsls	r0, r3, #23
 8008062:	d5f6      	bpl.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008064:	4da0      	ldr	r5, [pc, #640]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008066:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800806a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800806e:	d027      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8008070:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008072:	429a      	cmp	r2, r3
 8008074:	d025      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008076:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800807a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800807e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008082:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008086:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800808a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800808e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008092:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008096:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8008098:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800809c:	f140 8148 	bpl.w	8008330 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a0:	f7fa fb94 	bl	80027cc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080a4:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80080a8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080aa:	e005      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ac:	f7fa fb8e 	bl	80027cc <HAL_GetTick>
 80080b0:	1b80      	subs	r0, r0, r6
 80080b2:	4540      	cmp	r0, r8
 80080b4:	f200 810c 	bhi.w	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080b8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80080bc:	079b      	lsls	r3, r3, #30
 80080be:	d5f5      	bpl.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080c2:	4989      	ldr	r1, [pc, #548]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80080c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80080c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080d2:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080d4:	b127      	cbz	r7, 80080e0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080d6:	4a84      	ldr	r2, [pc, #528]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80080d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80080da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	07dd      	lsls	r5, r3, #31
 80080e4:	d508      	bpl.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080e6:	4980      	ldr	r1, [pc, #512]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80080e8:	6865      	ldr	r5, [r4, #4]
 80080ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80080ee:	f022 0203 	bic.w	r2, r2, #3
 80080f2:	432a      	orrs	r2, r5
 80080f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080f8:	0799      	lsls	r1, r3, #30
 80080fa:	d508      	bpl.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080fc:	497a      	ldr	r1, [pc, #488]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80080fe:	68a5      	ldr	r5, [r4, #8]
 8008100:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008104:	f022 020c 	bic.w	r2, r2, #12
 8008108:	432a      	orrs	r2, r5
 800810a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800810e:	075a      	lsls	r2, r3, #29
 8008110:	d508      	bpl.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008112:	4975      	ldr	r1, [pc, #468]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008114:	68e5      	ldr	r5, [r4, #12]
 8008116:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800811a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800811e:	432a      	orrs	r2, r5
 8008120:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008124:	071f      	lsls	r7, r3, #28
 8008126:	d508      	bpl.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008128:	496f      	ldr	r1, [pc, #444]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800812a:	6925      	ldr	r5, [r4, #16]
 800812c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008130:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008134:	432a      	orrs	r2, r5
 8008136:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800813a:	06de      	lsls	r6, r3, #27
 800813c:	d508      	bpl.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800813e:	496a      	ldr	r1, [pc, #424]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008140:	6965      	ldr	r5, [r4, #20]
 8008142:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008146:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800814a:	432a      	orrs	r2, r5
 800814c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008150:	069d      	lsls	r5, r3, #26
 8008152:	d508      	bpl.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008154:	4964      	ldr	r1, [pc, #400]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008156:	69a5      	ldr	r5, [r4, #24]
 8008158:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800815c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008160:	432a      	orrs	r2, r5
 8008162:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008166:	0659      	lsls	r1, r3, #25
 8008168:	d508      	bpl.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800816a:	495f      	ldr	r1, [pc, #380]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800816c:	69e5      	ldr	r5, [r4, #28]
 800816e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008172:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008176:	432a      	orrs	r2, r5
 8008178:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800817c:	061a      	lsls	r2, r3, #24
 800817e:	d508      	bpl.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008180:	4959      	ldr	r1, [pc, #356]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008182:	6a25      	ldr	r5, [r4, #32]
 8008184:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008188:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800818c:	432a      	orrs	r2, r5
 800818e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008192:	05df      	lsls	r7, r3, #23
 8008194:	d508      	bpl.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008196:	4954      	ldr	r1, [pc, #336]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008198:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800819a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800819e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80081a2:	432a      	orrs	r2, r5
 80081a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081a8:	039e      	lsls	r6, r3, #14
 80081aa:	d508      	bpl.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081ac:	494e      	ldr	r1, [pc, #312]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80081b0:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80081b4:	f022 0203 	bic.w	r2, r2, #3
 80081b8:	432a      	orrs	r2, r5
 80081ba:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081be:	059d      	lsls	r5, r3, #22
 80081c0:	d508      	bpl.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081c2:	4949      	ldr	r1, [pc, #292]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081c4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80081c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081ca:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80081ce:	432a      	orrs	r2, r5
 80081d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081d4:	0559      	lsls	r1, r3, #21
 80081d6:	d50b      	bpl.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081d8:	4943      	ldr	r1, [pc, #268]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80081dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081e0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80081e4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80081e6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80081ee:	d071      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80081f0:	051a      	lsls	r2, r3, #20
 80081f2:	d50b      	bpl.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081f4:	493c      	ldr	r1, [pc, #240]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80081f6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80081f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80081fc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008200:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008202:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008206:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800820a:	d068      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800820c:	04df      	lsls	r7, r3, #19
 800820e:	d50b      	bpl.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008210:	4935      	ldr	r1, [pc, #212]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008212:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008214:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008218:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800821c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800821e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008222:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008226:	d063      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008228:	049e      	lsls	r6, r3, #18
 800822a:	d50b      	bpl.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800822c:	492e      	ldr	r1, [pc, #184]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800822e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8008230:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008234:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008238:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800823a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800823e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008242:	d05a      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008244:	045d      	lsls	r5, r3, #17
 8008246:	d50b      	bpl.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008248:	4927      	ldr	r1, [pc, #156]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800824a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800824c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008250:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008254:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008256:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800825a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800825e:	d051      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008260:	0419      	lsls	r1, r3, #16
 8008262:	d50b      	bpl.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008264:	4920      	ldr	r1, [pc, #128]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008266:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8008268:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800826c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008270:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008272:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008276:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800827a:	d048      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800827c:	03da      	lsls	r2, r3, #15
 800827e:	d50b      	bpl.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008280:	4919      	ldr	r1, [pc, #100]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008282:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8008284:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008288:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800828c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800828e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008292:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008296:	d03f      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008298:	035b      	lsls	r3, r3, #13
 800829a:	d50b      	bpl.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800829c:	4a12      	ldr	r2, [pc, #72]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800829e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80082a0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80082a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80082a8:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80082aa:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80082b2:	d036      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 80082b4:	b002      	add	sp, #8
 80082b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80082c0:	659a      	str	r2, [r3, #88]	; 0x58
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80082cc:	2701      	movs	r7, #1
 80082ce:	e6b7      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 80082d0:	2003      	movs	r0, #3
 80082d2:	e6ff      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082d4:	68ca      	ldr	r2, [r1, #12]
 80082d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80082da:	60ca      	str	r2, [r1, #12]
 80082dc:	e788      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082de:	68ca      	ldr	r2, [r1, #12]
 80082e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80082e4:	60ca      	str	r2, [r1, #12]
 80082e6:	e791      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80082e8:	40021000 	.word	0x40021000
 80082ec:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082f0:	68ca      	ldr	r2, [r1, #12]
 80082f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80082f6:	60ca      	str	r2, [r1, #12]
 80082f8:	e796      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082fa:	68ca      	ldr	r2, [r1, #12]
 80082fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008300:	60ca      	str	r2, [r1, #12]
 8008302:	e79f      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008304:	68ca      	ldr	r2, [r1, #12]
 8008306:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800830a:	60ca      	str	r2, [r1, #12]
 800830c:	e7a8      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800830e:	68ca      	ldr	r2, [r1, #12]
 8008310:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008314:	60ca      	str	r2, [r1, #12]
 8008316:	e7b1      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008318:	68ca      	ldr	r2, [r1, #12]
 800831a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800831e:	60ca      	str	r2, [r1, #12]
 8008320:	e7ba      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008322:	68d3      	ldr	r3, [r2, #12]
 8008324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008328:	60d3      	str	r3, [r2, #12]
}
 800832a:	b002      	add	sp, #8
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	4613      	mov	r3, r2
 8008332:	e6c6      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>

08008334 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008338:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800833a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800833c:	4617      	mov	r7, r2
 800833e:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8008340:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008344:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008346:	f7fa fa41 	bl	80027cc <HAL_GetTick>
 800834a:	442f      	add	r7, r5
 800834c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800834e:	f7fa fa3d 	bl	80027cc <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008352:	4b31      	ldr	r3, [pc, #196]	; (8008418 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008354:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800835c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008360:	0d1b      	lsrs	r3, r3, #20
 8008362:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8008366:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008368:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800836a:	4622      	mov	r2, r4
 800836c:	1c69      	adds	r1, r5, #1
 800836e:	6893      	ldr	r3, [r2, #8]
 8008370:	d110      	bne.n	8008394 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 8008372:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8008376:	d009      	beq.n	800838c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008378:	7b23      	ldrb	r3, [r4, #12]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008380:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8008384:	6893      	ldr	r3, [r2, #8]
 8008386:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800838a:	d1f5      	bne.n	8008378 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 800838c:	2000      	movs	r0, #0
}
 800838e:	b002      	add	sp, #8
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8008394:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8008398:	d0f8      	beq.n	800838c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 800839a:	7b23      	ldrb	r3, [r4, #12]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80083a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083a6:	f7fa fa11 	bl	80027cc <HAL_GetTick>
 80083aa:	eba0 0008 	sub.w	r0, r0, r8
 80083ae:	42b8      	cmp	r0, r7
 80083b0:	d209      	bcs.n	80083c6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 80083b2:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083b4:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 80083b6:	2b00      	cmp	r3, #0
      count--;
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80083be:	bf08      	it	eq
 80083c0:	2700      	moveq	r7, #0
      count--;
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	e7d2      	b.n	800836c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083c6:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083ca:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083cc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083d4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d6:	d013      	beq.n	8008400 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083d8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80083da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80083de:	d107      	bne.n	80083f0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083ee:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80083f0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80083f2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80083f4:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80083f8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80083fc:	2003      	movs	r0, #3
 80083fe:	e7c6      	b.n	800838e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008400:	68b2      	ldr	r2, [r6, #8]
 8008402:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008406:	d002      	beq.n	800840e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008408:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800840c:	d1e4      	bne.n	80083d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e7df      	b.n	80083d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8008418:	20000008 	.word	0x20000008

0800841c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	f88d 3007 	strb.w	r3, [sp, #7]
 8008428:	eb01 0902 	add.w	r9, r1, r2
{
 800842c:	460e      	mov	r6, r1
 800842e:	4617      	mov	r7, r2
 8008430:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008432:	f7fa f9cb 	bl	80027cc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008436:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008558 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800843a:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 800843e:	f7fa f9c5 	bl	80027cc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008442:	f8d8 3000 	ldr.w	r3, [r8]
 8008446:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800844a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800844e:	0d1b      	lsrs	r3, r3, #20
 8008450:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 8008454:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008456:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8008458:	1c70      	adds	r0, r6, #1
 800845a:	682c      	ldr	r4, [r5, #0]
 800845c:	d120      	bne.n	80084a0 <SPI_EndRxTxTransaction+0x84>
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008464:	d1fb      	bne.n	800845e <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008466:	f7fa f9b1 	bl	80027cc <HAL_GetTick>
 800846a:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 800846e:	f7fa f9ad 	bl	80027cc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008472:	f8d8 3000 	ldr.w	r3, [r8]
 8008476:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800847a:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 800847e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008480:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008482:	1c71      	adds	r1, r6, #1
 8008484:	682c      	ldr	r4, [r5, #0]
 8008486:	d11f      	bne.n	80084c8 <SPI_EndRxTxTransaction+0xac>
 8008488:	68a3      	ldr	r3, [r4, #8]
 800848a:	061a      	lsls	r2, r3, #24
 800848c:	d4fc      	bmi.n	8008488 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800848e:	463a      	mov	r2, r7
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	f7ff ff4e 	bl	8008334 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008498:	bb48      	cbnz	r0, 80084ee <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800849a:	b005      	add	sp, #20
 800849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80084a6:	d0de      	beq.n	8008466 <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084a8:	f7fa f990 	bl	80027cc <HAL_GetTick>
 80084ac:	eba0 000b 	sub.w	r0, r0, fp
 80084b0:	4550      	cmp	r0, sl
 80084b2:	d222      	bcs.n	80084fa <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 80084b4:	9a02      	ldr	r2, [sp, #8]
      count--;
 80084b6:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 80084b8:	2a00      	cmp	r2, #0
      count--;
 80084ba:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80084be:	bf08      	it	eq
 80084c0:	f04f 0a00 	moveq.w	sl, #0
      count--;
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	e7c7      	b.n	8008458 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	061b      	lsls	r3, r3, #24
 80084cc:	d5df      	bpl.n	800848e <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084ce:	f7fa f97d 	bl	80027cc <HAL_GetTick>
 80084d2:	eba0 0008 	sub.w	r0, r0, r8
 80084d6:	4548      	cmp	r0, r9
 80084d8:	d20f      	bcs.n	80084fa <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 80084da:	9a03      	ldr	r2, [sp, #12]
      count--;
 80084dc:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80084de:	2a00      	cmp	r2, #0
      count--;
 80084e0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80084e4:	bf08      	it	eq
 80084e6:	f04f 0900 	moveq.w	r9, #0
      count--;
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	e7c9      	b.n	8008482 <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ee:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80084f0:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80084f4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084f6:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 80084f8:	e7cf      	b.n	800849a <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084fa:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084fe:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008500:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008508:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800850a:	d019      	beq.n	8008540 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800850c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800850e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008512:	d107      	bne.n	8008524 <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008522:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008524:	2301      	movs	r3, #1
 8008526:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800852a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800852c:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800852e:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8008532:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008534:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008538:	662b      	str	r3, [r5, #96]	; 0x60
}
 800853a:	b005      	add	sp, #20
 800853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008540:	68aa      	ldr	r2, [r5, #8]
 8008542:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008546:	d002      	beq.n	800854e <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008548:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800854c:	d1de      	bne.n	800850c <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	e7d9      	b.n	800850c <SPI_EndRxTxTransaction+0xf0>
 8008558:	20000008 	.word	0x20000008

0800855c <HAL_SPI_Init>:
  if (hspi == NULL)
 800855c:	2800      	cmp	r0, #0
 800855e:	d077      	beq.n	8008650 <HAL_SPI_Init+0xf4>
{
 8008560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008564:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008566:	4604      	mov	r4, r0
 8008568:	2e00      	cmp	r6, #0
 800856a:	d058      	beq.n	800861e <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800856c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800856e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008572:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008576:	2200      	movs	r2, #0
 8008578:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800857a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800857e:	2b00      	cmp	r3, #0
 8008580:	d059      	beq.n	8008636 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8008582:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008584:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008586:	2302      	movs	r3, #2
 8008588:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800858c:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800858e:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8008592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008596:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008598:	d947      	bls.n	800862a <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800859a:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 800859e:	d159      	bne.n	8008654 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085a0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80085a2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085a4:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 80085a8:	6862      	ldr	r2, [r4, #4]
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80085b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80085b4:	431a      	orrs	r2, r3
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	4313      	orrs	r3, r2
 80085be:	6962      	ldr	r2, [r4, #20]
 80085c0:	f002 0201 	and.w	r2, r2, #1
 80085c4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085c8:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 80085cc:	f003 0308 	and.w	r3, r3, #8
 80085d0:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085d4:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085d6:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085da:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80085de:	69a6      	ldr	r6, [r4, #24]
 80085e0:	6a23      	ldr	r3, [r4, #32]
 80085e2:	f003 0780 	and.w	r7, r3, #128	; 0x80
 80085e6:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80085ea:	4313      	orrs	r3, r2
 80085ec:	ea43 0308 	orr.w	r3, r3, r8
 80085f0:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085f2:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085f4:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085f6:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085fa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80085fc:	ea4e 0306 	orr.w	r3, lr, r6
 8008600:	ea43 030c 	orr.w	r3, r3, ip
 8008604:	4303      	orrs	r3, r0
 8008606:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008608:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800860a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800860c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8008610:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008612:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008614:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008616:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800861a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800861e:	6843      	ldr	r3, [r0, #4]
 8008620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008624:	d0a5      	beq.n	8008572 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008626:	61c6      	str	r6, [r0, #28]
 8008628:	e7a3      	b.n	8008572 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800862a:	d00b      	beq.n	8008644 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800862c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008630:	2500      	movs	r5, #0
 8008632:	62a5      	str	r5, [r4, #40]	; 0x28
 8008634:	e7b8      	b.n	80085a8 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8008636:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800863a:	4620      	mov	r0, r4
 800863c:	f7fc fe50 	bl	80052e0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008640:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008642:	e79e      	b.n	8008582 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008644:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008646:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800864a:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 800864e:	e7ab      	b.n	80085a8 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8008650:	2001      	movs	r0, #1
}
 8008652:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008654:	2000      	movs	r0, #0
 8008656:	e7eb      	b.n	8008630 <HAL_SPI_Init+0xd4>

08008658 <HAL_SPI_TransmitReceive>:
{
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800865e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8008662:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8008664:	2801      	cmp	r0, #1
 8008666:	f000 8097 	beq.w	8008798 <HAL_SPI_TransmitReceive+0x140>
 800866a:	461f      	mov	r7, r3
 800866c:	2301      	movs	r3, #1
 800866e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008672:	4689      	mov	r9, r1
 8008674:	4690      	mov	r8, r2
 8008676:	f7fa f8a9 	bl	80027cc <HAL_GetTick>
 800867a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800867c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8008680:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008682:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8008684:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008686:	d010      	beq.n	80086aa <HAL_SPI_TransmitReceive+0x52>
 8008688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800868c:	d008      	beq.n	80086a0 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800868e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008690:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8008692:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8008694:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008698:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800869c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086a0:	68a2      	ldr	r2, [r4, #8]
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	d1f3      	bne.n	800868e <HAL_SPI_TransmitReceive+0x36>
 80086a6:	2904      	cmp	r1, #4
 80086a8:	d1f1      	bne.n	800868e <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086aa:	f1b9 0f00 	cmp.w	r9, #0
 80086ae:	d076      	beq.n	800879e <HAL_SPI_TransmitReceive+0x146>
 80086b0:	f1b8 0f00 	cmp.w	r8, #0
 80086b4:	d073      	beq.n	800879e <HAL_SPI_TransmitReceive+0x146>
 80086b6:	2f00      	cmp	r7, #0
 80086b8:	d071      	beq.n	800879e <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086ba:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80086be:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086c0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086c4:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086c6:	bf1c      	itt	ne
 80086c8:	2205      	movne	r2, #5
 80086ca:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086ce:	2200      	movs	r2, #0
 80086d0:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80086d2:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086d6:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 80086d8:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80086dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 80086e0:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086e2:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 80086e4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086e8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80086ec:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80086ee:	d858      	bhi.n	80087a2 <HAL_SPI_TransmitReceive+0x14a>
 80086f0:	2f01      	cmp	r7, #1
 80086f2:	f000 8124 	beq.w	800893e <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086f6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80086fa:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086fc:	6811      	ldr	r1, [r2, #0]
 80086fe:	0649      	lsls	r1, r1, #25
 8008700:	f100 80e3 	bmi.w	80088ca <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 8008704:	6811      	ldr	r1, [r2, #0]
 8008706:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800870a:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80df 	beq.w	80088d0 <HAL_SPI_TransmitReceive+0x278>
 8008712:	2f01      	cmp	r7, #1
 8008714:	f000 80dc 	beq.w	80088d0 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 8008718:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800871a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800871c:	b29b      	uxth	r3, r3
 800871e:	b92b      	cbnz	r3, 800872c <HAL_SPI_TransmitReceive+0xd4>
 8008720:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 8086 	beq.w	8008838 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800872c:	6822      	ldr	r2, [r4, #0]
 800872e:	6893      	ldr	r3, [r2, #8]
 8008730:	0799      	lsls	r1, r3, #30
 8008732:	d505      	bpl.n	8008740 <HAL_SPI_TransmitReceive+0xe8>
 8008734:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008736:	b29b      	uxth	r3, r3
 8008738:	b113      	cbz	r3, 8008740 <HAL_SPI_TransmitReceive+0xe8>
 800873a:	2f00      	cmp	r7, #0
 800873c:	f040 80e4 	bne.w	8008908 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008740:	6893      	ldr	r3, [r2, #8]
 8008742:	f013 0301 	ands.w	r3, r3, #1
 8008746:	d01e      	beq.n	8008786 <HAL_SPI_TransmitReceive+0x12e>
 8008748:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800874c:	b289      	uxth	r1, r1
 800874e:	b1d1      	cbz	r1, 8008786 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8008750:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008754:	b289      	uxth	r1, r1
 8008756:	2901      	cmp	r1, #1
 8008758:	f240 80c8 	bls.w	80088ec <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800875c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800875e:	68d0      	ldr	r0, [r2, #12]
 8008760:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008764:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008766:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800876a:	3902      	subs	r1, #2
 800876c:	b289      	uxth	r1, r1
 800876e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008772:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008776:	b289      	uxth	r1, r1
 8008778:	2901      	cmp	r1, #1
        txallowed = 1U;
 800877a:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 800877c:	d803      	bhi.n	8008786 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800877e:	6853      	ldr	r3, [r2, #4]
 8008780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008784:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008786:	f7fa f821 	bl	80027cc <HAL_GetTick>
 800878a:	1b43      	subs	r3, r0, r5
 800878c:	42b3      	cmp	r3, r6
 800878e:	d3c4      	bcc.n	800871a <HAL_SPI_TransmitReceive+0xc2>
 8008790:	1c73      	adds	r3, r6, #1
 8008792:	d0c2      	beq.n	800871a <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8008794:	2003      	movs	r0, #3
 8008796:	e77b      	b.n	8008690 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8008798:	2002      	movs	r0, #2
}
 800879a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 800879e:	2001      	movs	r0, #1
 80087a0:	e776      	b.n	8008690 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087a2:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80087a6:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087a8:	6811      	ldr	r1, [r2, #0]
 80087aa:	0648      	lsls	r0, r1, #25
 80087ac:	d403      	bmi.n	80087b6 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 80087ae:	6811      	ldr	r1, [r2, #0]
 80087b0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80087b4:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d161      	bne.n	800887e <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ba:	4649      	mov	r1, r9
 80087bc:	f831 3b02 	ldrh.w	r3, [r1], #2
 80087c0:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80087c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087c4:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80087c6:	3b01      	subs	r3, #1
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80087cc:	1c72      	adds	r2, r6, #1
{
 80087ce:	f04f 0701 	mov.w	r7, #1
 80087d2:	d028      	beq.n	8008826 <HAL_SPI_TransmitReceive+0x1ce>
 80087d4:	e04e      	b.n	8008874 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	6893      	ldr	r3, [r2, #8]
 80087da:	079b      	lsls	r3, r3, #30
 80087dc:	d50d      	bpl.n	80087fa <HAL_SPI_TransmitReceive+0x1a2>
 80087de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	b153      	cbz	r3, 80087fa <HAL_SPI_TransmitReceive+0x1a2>
 80087e4:	b14f      	cbz	r7, 80087fa <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087e8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80087ec:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80087ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f0:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80087f6:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80087f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087fa:	6893      	ldr	r3, [r2, #8]
 80087fc:	f013 0301 	ands.w	r3, r3, #1
 8008800:	d00f      	beq.n	8008822 <HAL_SPI_TransmitReceive+0x1ca>
 8008802:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008806:	b289      	uxth	r1, r1
 8008808:	b159      	cbz	r1, 8008822 <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800880a:	68d1      	ldr	r1, [r2, #12]
 800880c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800880e:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8008812:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008814:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008818:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800881a:	3b01      	subs	r3, #1
 800881c:	b29b      	uxth	r3, r3
 800881e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008822:	f7f9 ffd3 	bl	80027cc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008826:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1d3      	bne.n	80087d6 <HAL_SPI_TransmitReceive+0x17e>
 800882e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1ce      	bne.n	80087d6 <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008838:	462a      	mov	r2, r5
 800883a:	4631      	mov	r1, r6
 800883c:	4620      	mov	r0, r4
 800883e:	f7ff fded 	bl	800841c <SPI_EndRxTxTransaction>
 8008842:	2800      	cmp	r0, #0
 8008844:	f43f af24 	beq.w	8008690 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008848:	2320      	movs	r3, #32
 800884a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800884c:	2001      	movs	r0, #1
 800884e:	e71f      	b.n	8008690 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008850:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0ee      	beq.n	8008838 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	6893      	ldr	r3, [r2, #8]
 800885e:	0798      	lsls	r0, r3, #30
 8008860:	d422      	bmi.n	80088a8 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008862:	6893      	ldr	r3, [r2, #8]
 8008864:	f013 0301 	ands.w	r3, r3, #1
 8008868:	d10c      	bne.n	8008884 <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800886a:	f7f9 ffaf 	bl	80027cc <HAL_GetTick>
 800886e:	1b40      	subs	r0, r0, r5
 8008870:	42b0      	cmp	r0, r6
 8008872:	d28f      	bcs.n	8008794 <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008874:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1ee      	bne.n	800885a <HAL_SPI_TransmitReceive+0x202>
 800887c:	e7e8      	b.n	8008850 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800887e:	2f01      	cmp	r7, #1
 8008880:	d1a4      	bne.n	80087cc <HAL_SPI_TransmitReceive+0x174>
 8008882:	e79a      	b.n	80087ba <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008884:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008888:	b289      	uxth	r1, r1
 800888a:	2900      	cmp	r1, #0
 800888c:	d0ed      	beq.n	800886a <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800888e:	68d1      	ldr	r1, [r2, #12]
 8008890:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008892:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8008896:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008898:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800889c:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80088a6:	e7e0      	b.n	800886a <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0d8      	beq.n	8008862 <HAL_SPI_TransmitReceive+0x20a>
 80088b0:	2f00      	cmp	r7, #0
 80088b2:	d0d6      	beq.n	8008862 <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80088b6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80088ba:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088bc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80088be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80088c4:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80088c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80088c8:	e7cb      	b.n	8008862 <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f47f af24 	bne.w	8008718 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 80088d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d93a      	bls.n	800894e <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088d8:	4649      	mov	r1, r9
 80088da:	f831 3b02 	ldrh.w	r3, [r1], #2
 80088de:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 80088e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088e2:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80088e4:	3b02      	subs	r3, #2
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80088ea:	e715      	b.n	8008718 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 80088ec:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f0:	7b12      	ldrb	r2, [r2, #12]
 80088f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80088f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f6:	3301      	adds	r3, #1
 80088f8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80088fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8008906:	e73e      	b.n	8008786 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8008908:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800890a:	b29b      	uxth	r3, r3
 800890c:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800890e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8008910:	d909      	bls.n	8008926 <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008912:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008916:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008918:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800891a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800891c:	3b02      	subs	r3, #2
 800891e:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008920:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 8008922:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008924:	e70c      	b.n	8008740 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800892a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800892c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800892e:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8008930:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8008932:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8008934:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008936:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008938:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 800893a:	2700      	movs	r7, #0
 800893c:	e700      	b.n	8008740 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800893e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008942:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008944:	6811      	ldr	r1, [r2, #0]
 8008946:	0649      	lsls	r1, r1, #25
 8008948:	f57f aedc 	bpl.w	8008704 <HAL_SPI_TransmitReceive+0xac>
 800894c:	e7c0      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800894e:	f899 3000 	ldrb.w	r3, [r9]
 8008952:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8008954:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008956:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008958:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800895a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800895c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800895e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008960:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008962:	e6d9      	b.n	8008718 <HAL_SPI_TransmitReceive+0xc0>

08008964 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008964:	6a03      	ldr	r3, [r0, #32]
 8008966:	f023 0301 	bic.w	r3, r3, #1
 800896a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896c:	6a03      	ldr	r3, [r0, #32]
{
 800896e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008970:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008972:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008974:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008976:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800897a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800897e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008980:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008982:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008986:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008988:	4d15      	ldr	r5, [pc, #84]	; (80089e0 <TIM_OC1_SetConfig+0x7c>)
 800898a:	42a8      	cmp	r0, r5
 800898c:	d013      	beq.n	80089b6 <TIM_OC1_SetConfig+0x52>
 800898e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008992:	42a8      	cmp	r0, r5
 8008994:	d00f      	beq.n	80089b6 <TIM_OC1_SetConfig+0x52>
 8008996:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800899a:	42a8      	cmp	r0, r5
 800899c:	d00b      	beq.n	80089b6 <TIM_OC1_SetConfig+0x52>
 800899e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089a2:	42a8      	cmp	r0, r5
 80089a4:	d007      	beq.n	80089b6 <TIM_OC1_SetConfig+0x52>
 80089a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089aa:	42a8      	cmp	r0, r5
 80089ac:	d003      	beq.n	80089b6 <TIM_OC1_SetConfig+0x52>
 80089ae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80089b2:	42a8      	cmp	r0, r5
 80089b4:	d10d      	bne.n	80089d2 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089b6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80089b8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80089bc:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089be:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089c2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80089c6:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ca:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80089ce:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089d2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80089d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80089d6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80089d8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80089da:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80089dc:	6203      	str	r3, [r0, #32]
}
 80089de:	4770      	bx	lr
 80089e0:	40012c00 	.word	0x40012c00

080089e4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089e4:	6a03      	ldr	r3, [r0, #32]
 80089e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ec:	6a03      	ldr	r3, [r0, #32]
{
 80089ee:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80089fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a00:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008a02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a0a:	4d1c      	ldr	r5, [pc, #112]	; (8008a7c <TIM_OC3_SetConfig+0x98>)
 8008a0c:	42a8      	cmp	r0, r5
 8008a0e:	d017      	beq.n	8008a40 <TIM_OC3_SetConfig+0x5c>
 8008a10:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008a14:	42a8      	cmp	r0, r5
 8008a16:	d013      	beq.n	8008a40 <TIM_OC3_SetConfig+0x5c>
 8008a18:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008a1c:	42a8      	cmp	r0, r5
 8008a1e:	d025      	beq.n	8008a6c <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a20:	4d17      	ldr	r5, [pc, #92]	; (8008a80 <TIM_OC3_SetConfig+0x9c>)
 8008a22:	42a8      	cmp	r0, r5
 8008a24:	d013      	beq.n	8008a4e <TIM_OC3_SetConfig+0x6a>
 8008a26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008a2a:	42a8      	cmp	r0, r5
 8008a2c:	d00f      	beq.n	8008a4e <TIM_OC3_SetConfig+0x6a>
 8008a2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008a32:	42a8      	cmp	r0, r5
 8008a34:	d00b      	beq.n	8008a4e <TIM_OC3_SetConfig+0x6a>
 8008a36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008a3a:	42a8      	cmp	r0, r5
 8008a3c:	d10f      	bne.n	8008a5e <TIM_OC3_SetConfig+0x7a>
 8008a3e:	e006      	b.n	8008a4e <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a40:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a4e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a52:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a56:	ea46 0c05 	orr.w	ip, r6, r5
 8008a5a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a5e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008a60:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008a62:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008a64:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8008a66:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8008a68:	6203      	str	r3, [r0, #32]
}
 8008a6a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a6c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a72:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a7a:	e7d1      	b.n	8008a20 <TIM_OC3_SetConfig+0x3c>
 8008a7c:	40012c00 	.word	0x40012c00
 8008a80:	40014000 	.word	0x40014000

08008a84 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a84:	6a03      	ldr	r3, [r0, #32]
 8008a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a8a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a8c:	6a03      	ldr	r3, [r0, #32]
{
 8008a8e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a92:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008a9a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008aa2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008aa8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008aac:	4d1c      	ldr	r5, [pc, #112]	; (8008b20 <TIM_OC4_SetConfig+0x9c>)
 8008aae:	42a8      	cmp	r0, r5
 8008ab0:	d017      	beq.n	8008ae2 <TIM_OC4_SetConfig+0x5e>
 8008ab2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008ab6:	42a8      	cmp	r0, r5
 8008ab8:	d013      	beq.n	8008ae2 <TIM_OC4_SetConfig+0x5e>
 8008aba:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008abe:	42a8      	cmp	r0, r5
 8008ac0:	d025      	beq.n	8008b0e <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac2:	4d18      	ldr	r5, [pc, #96]	; (8008b24 <TIM_OC4_SetConfig+0xa0>)
 8008ac4:	42a8      	cmp	r0, r5
 8008ac6:	d013      	beq.n	8008af0 <TIM_OC4_SetConfig+0x6c>
 8008ac8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008acc:	42a8      	cmp	r0, r5
 8008ace:	d00f      	beq.n	8008af0 <TIM_OC4_SetConfig+0x6c>
 8008ad0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ad4:	42a8      	cmp	r0, r5
 8008ad6:	d00b      	beq.n	8008af0 <TIM_OC4_SetConfig+0x6c>
 8008ad8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008adc:	42a8      	cmp	r0, r5
 8008ade:	d10f      	bne.n	8008b00 <TIM_OC4_SetConfig+0x7c>
 8008ae0:	e006      	b.n	8008af0 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ae2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ae4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ae8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008af0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008af4:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008af8:	ea46 0c05 	orr.w	ip, r6, r5
 8008afc:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b00:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008b02:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008b04:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008b06:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8008b08:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8008b0a:	6203      	str	r3, [r0, #32]
}
 8008b0c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b0e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b14:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1c:	e7d1      	b.n	8008ac2 <TIM_OC4_SetConfig+0x3e>
 8008b1e:	bf00      	nop
 8008b20:	40012c00 	.word	0x40012c00
 8008b24:	40014000 	.word	0x40014000

08008b28 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f000 808c 	beq.w	8008c46 <HAL_TIM_Base_Init+0x11e>
{
 8008b2e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008b34:	4604      	mov	r4, r0
 8008b36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d078      	beq.n	8008c30 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b3e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b40:	4944      	ldr	r1, [pc, #272]	; (8008c54 <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008b42:	2302      	movs	r3, #2
 8008b44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b48:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008b4a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b4c:	d05c      	beq.n	8008c08 <HAL_TIM_Base_Init+0xe0>
 8008b4e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008b52:	d02c      	beq.n	8008bae <HAL_TIM_Base_Init+0x86>
 8008b54:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	d028      	beq.n	8008bae <HAL_TIM_Base_Init+0x86>
 8008b5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b60:	428a      	cmp	r2, r1
 8008b62:	d024      	beq.n	8008bae <HAL_TIM_Base_Init+0x86>
 8008b64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b68:	428a      	cmp	r2, r1
 8008b6a:	d020      	beq.n	8008bae <HAL_TIM_Base_Init+0x86>
 8008b6c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008b70:	428a      	cmp	r2, r1
 8008b72:	d049      	beq.n	8008c08 <HAL_TIM_Base_Init+0xe0>
 8008b74:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008b78:	428a      	cmp	r2, r1
 8008b7a:	d066      	beq.n	8008c4a <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7c:	4936      	ldr	r1, [pc, #216]	; (8008c58 <HAL_TIM_Base_Init+0x130>)
 8008b7e:	428a      	cmp	r2, r1
 8008b80:	d05b      	beq.n	8008c3a <HAL_TIM_Base_Init+0x112>
 8008b82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b86:	428a      	cmp	r2, r1
 8008b88:	d057      	beq.n	8008c3a <HAL_TIM_Base_Init+0x112>
 8008b8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b8e:	428a      	cmp	r2, r1
 8008b90:	d053      	beq.n	8008c3a <HAL_TIM_Base_Init+0x112>
 8008b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b96:	428a      	cmp	r2, r1
 8008b98:	d04f      	beq.n	8008c3a <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b9a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b9c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008ba4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8008ba6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ba8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008baa:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bac:	e010      	b.n	8008bd0 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008bae:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008bb6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bbc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bbe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bc4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bc6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008bc8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008bca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bcc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008bce:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008bdc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008be0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008be4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bf8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008bfc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008c00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008c04:	2000      	movs	r0, #0
}
 8008c06:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008c08:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c0a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c10:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c16:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c18:	69a1      	ldr	r1, [r4, #24]
 8008c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008c20:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c22:	68e3      	ldr	r3, [r4, #12]
 8008c24:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c26:	6863      	ldr	r3, [r4, #4]
 8008c28:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008c2a:	6963      	ldr	r3, [r4, #20]
 8008c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2e:	e7cf      	b.n	8008bd0 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008c30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008c34:	f7fc fd06 	bl	8005644 <HAL_TIM_Base_MspInit>
 8008c38:	e781      	b.n	8008b3e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c3a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c3c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c42:	4303      	orrs	r3, r0
 8008c44:	e7e9      	b.n	8008c1a <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8008c46:	2001      	movs	r0, #1
}
 8008c48:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008c4a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c50:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c52:	e793      	b.n	8008b7c <HAL_TIM_Base_Init+0x54>
 8008c54:	40012c00 	.word	0x40012c00
 8008c58:	40014000 	.word	0x40014000

08008c5c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008c5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d132      	bne.n	8008cca <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c64:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c66:	491b      	ldr	r1, [pc, #108]	; (8008cd4 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008c68:	2202      	movs	r2, #2
 8008c6a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c6e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c70:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c78:	d019      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x52>
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7e:	d016      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x52>
 8008c80:	4a15      	ldr	r2, [pc, #84]	; (8008cd8 <HAL_TIM_Base_Start_IT+0x7c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d013      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x52>
 8008c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00f      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x52>
 8008c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00b      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x52>
 8008c96:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d007      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x52>
 8008c9e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d003      	beq.n	8008cae <HAL_TIM_Base_Start_IT+0x52>
 8008ca6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d107      	bne.n	8008cbe <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cae:	6899      	ldr	r1, [r3, #8]
 8008cb0:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <HAL_TIM_Base_Start_IT+0x80>)
 8008cb2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb4:	2a06      	cmp	r2, #6
 8008cb6:	d00a      	beq.n	8008cce <HAL_TIM_Base_Start_IT+0x72>
 8008cb8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008cbc:	d007      	beq.n	8008cce <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8008cc4:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	4770      	bx	lr
    return HAL_ERROR;
 8008cca:	2001      	movs	r0, #1
 8008ccc:	4770      	bx	lr
  return HAL_OK;
 8008cce:	2000      	movs	r0, #0
}
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40012c00 	.word	0x40012c00
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	00010007 	.word	0x00010007

08008ce0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f000 808c 	beq.w	8008dfe <HAL_TIM_PWM_Init+0x11e>
{
 8008ce6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008ce8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008cec:	4604      	mov	r4, r0
 8008cee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d078      	beq.n	8008de8 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cf8:	4944      	ldr	r1, [pc, #272]	; (8008e0c <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d00:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008d02:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d04:	d05c      	beq.n	8008dc0 <HAL_TIM_PWM_Init+0xe0>
 8008d06:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008d0a:	d02c      	beq.n	8008d66 <HAL_TIM_PWM_Init+0x86>
 8008d0c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008d10:	428a      	cmp	r2, r1
 8008d12:	d028      	beq.n	8008d66 <HAL_TIM_PWM_Init+0x86>
 8008d14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d18:	428a      	cmp	r2, r1
 8008d1a:	d024      	beq.n	8008d66 <HAL_TIM_PWM_Init+0x86>
 8008d1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d20:	428a      	cmp	r2, r1
 8008d22:	d020      	beq.n	8008d66 <HAL_TIM_PWM_Init+0x86>
 8008d24:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008d28:	428a      	cmp	r2, r1
 8008d2a:	d049      	beq.n	8008dc0 <HAL_TIM_PWM_Init+0xe0>
 8008d2c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008d30:	428a      	cmp	r2, r1
 8008d32:	d066      	beq.n	8008e02 <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d34:	4936      	ldr	r1, [pc, #216]	; (8008e10 <HAL_TIM_PWM_Init+0x130>)
 8008d36:	428a      	cmp	r2, r1
 8008d38:	d05b      	beq.n	8008df2 <HAL_TIM_PWM_Init+0x112>
 8008d3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d3e:	428a      	cmp	r2, r1
 8008d40:	d057      	beq.n	8008df2 <HAL_TIM_PWM_Init+0x112>
 8008d42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d46:	428a      	cmp	r2, r1
 8008d48:	d053      	beq.n	8008df2 <HAL_TIM_PWM_Init+0x112>
 8008d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d4e:	428a      	cmp	r2, r1
 8008d50:	d04f      	beq.n	8008df2 <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d52:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d54:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d5a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008d5c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8008d5e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d60:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008d62:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d64:	e010      	b.n	8008d88 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008d66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d68:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008d6e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d74:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d7c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d7e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008d80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008d82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008d86:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008d94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008d98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008d9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008db0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008db4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008dbc:	2000      	movs	r0, #0
}
 8008dbe:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008dc0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dc2:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008dc8:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dce:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dd0:	69a1      	ldr	r1, [r4, #24]
 8008dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dd6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008dd8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dda:	68e3      	ldr	r3, [r4, #12]
 8008ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008de2:	6963      	ldr	r3, [r4, #20]
 8008de4:	6313      	str	r3, [r2, #48]	; 0x30
 8008de6:	e7cf      	b.n	8008d88 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008de8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008dec:	f7fc fc14 	bl	8005618 <HAL_TIM_PWM_MspInit>
 8008df0:	e781      	b.n	8008cf6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008df2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008df4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dfa:	4303      	orrs	r3, r0
 8008dfc:	e7e9      	b.n	8008dd2 <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 8008dfe:	2001      	movs	r0, #1
}
 8008e00:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008e02:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008e08:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e0a:	e793      	b.n	8008d34 <HAL_TIM_PWM_Init+0x54>
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	40014000 	.word	0x40014000

08008e14 <HAL_TIM_PWM_Start>:
 8008e14:	2910      	cmp	r1, #16
 8008e16:	d80a      	bhi.n	8008e2e <HAL_TIM_PWM_Start+0x1a>
 8008e18:	e8df f001 	tbb	[pc, r1]
 8008e1c:	09090961 	.word	0x09090961
 8008e20:	09090967 	.word	0x09090967
 8008e24:	0909096f 	.word	0x0909096f
 8008e28:	09090974 	.word	0x09090974
 8008e2c:	7d          	.byte	0x7d
 8008e2d:	00          	.byte	0x00
 8008e2e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d157      	bne.n	8008ee6 <HAL_TIM_PWM_Start+0xd2>
 8008e36:	2910      	cmp	r1, #16
 8008e38:	d80a      	bhi.n	8008e50 <HAL_TIM_PWM_Start+0x3c>
 8008e3a:	e8df f001 	tbb	[pc, r1]
 8008e3e:	0993      	.short	0x0993
 8008e40:	095a0909 	.word	0x095a0909
 8008e44:	097c0909 	.word	0x097c0909
 8008e48:	09780909 	.word	0x09780909
 8008e4c:	0909      	.short	0x0909
 8008e4e:	74          	.byte	0x74
 8008e4f:	00          	.byte	0x00
 8008e50:	2302      	movs	r3, #2
 8008e52:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008e56:	6803      	ldr	r3, [r0, #0]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	6a18      	ldr	r0, [r3, #32]
 8008e5c:	f001 011f 	and.w	r1, r1, #31
 8008e60:	fa02 f101 	lsl.w	r1, r2, r1
 8008e64:	ea20 0001 	bic.w	r0, r0, r1
 8008e68:	6218      	str	r0, [r3, #32]
 8008e6a:	6a18      	ldr	r0, [r3, #32]
 8008e6c:	4a3f      	ldr	r2, [pc, #252]	; (8008f6c <HAL_TIM_PWM_Start+0x158>)
 8008e6e:	4301      	orrs	r1, r0
 8008e70:	4293      	cmp	r3, r2
 8008e72:	6219      	str	r1, [r3, #32]
 8008e74:	d063      	beq.n	8008f3e <HAL_TIM_PWM_Start+0x12a>
 8008e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d06d      	beq.n	8008f5a <HAL_TIM_PWM_Start+0x146>
 8008e7e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d069      	beq.n	8008f5a <HAL_TIM_PWM_Start+0x146>
 8008e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d065      	beq.n	8008f5a <HAL_TIM_PWM_Start+0x146>
 8008e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d061      	beq.n	8008f5a <HAL_TIM_PWM_Start+0x146>
 8008e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d05d      	beq.n	8008f5a <HAL_TIM_PWM_Start+0x146>
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea2:	d050      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x132>
 8008ea4:	4a32      	ldr	r2, [pc, #200]	; (8008f70 <HAL_TIM_PWM_Start+0x15c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d04d      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x132>
 8008eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d049      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x132>
 8008eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d045      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x132>
 8008eba:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d041      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x132>
 8008ec2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d03d      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x132>
 8008eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d039      	beq.n	8008f46 <HAL_TIM_PWM_Start+0x132>
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	f042 0201 	orr.w	r2, r2, #1
 8008ed8:	2000      	movs	r0, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	4770      	bx	lr
 8008ede:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d03e      	beq.n	8008f64 <HAL_TIM_PWM_Start+0x150>
 8008ee6:	2001      	movs	r0, #1
 8008ee8:	4770      	bx	lr
 8008eea:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d1f9      	bne.n	8008ee6 <HAL_TIM_PWM_Start+0xd2>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008ef8:	e7ad      	b.n	8008e56 <HAL_TIM_PWM_Start+0x42>
 8008efa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d099      	beq.n	8008e36 <HAL_TIM_PWM_Start+0x22>
 8008f02:	e7f0      	b.n	8008ee6 <HAL_TIM_PWM_Start+0xd2>
 8008f04:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	bf18      	it	ne
 8008f0c:	2301      	movne	r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d091      	beq.n	8008e36 <HAL_TIM_PWM_Start+0x22>
 8008f12:	2001      	movs	r0, #1
 8008f14:	4770      	bx	lr
 8008f16:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	bf18      	it	ne
 8008f1e:	2301      	movne	r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d088      	beq.n	8008e36 <HAL_TIM_PWM_Start+0x22>
 8008f24:	e7f5      	b.n	8008f12 <HAL_TIM_PWM_Start+0xfe>
 8008f26:	2302      	movs	r3, #2
 8008f28:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008f2c:	e793      	b.n	8008e56 <HAL_TIM_PWM_Start+0x42>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008f34:	e78f      	b.n	8008e56 <HAL_TIM_PWM_Start+0x42>
 8008f36:	2302      	movs	r3, #2
 8008f38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008f3c:	e78b      	b.n	8008e56 <HAL_TIM_PWM_Start+0x42>
 8008f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f44:	645a      	str	r2, [r3, #68]	; 0x44
 8008f46:	6899      	ldr	r1, [r3, #8]
 8008f48:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <HAL_TIM_PWM_Start+0x160>)
 8008f4a:	400a      	ands	r2, r1
 8008f4c:	2a06      	cmp	r2, #6
 8008f4e:	d002      	beq.n	8008f56 <HAL_TIM_PWM_Start+0x142>
 8008f50:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008f54:	d1bd      	bne.n	8008ed2 <HAL_TIM_PWM_Start+0xbe>
 8008f56:	2000      	movs	r0, #0
 8008f58:	4770      	bx	lr
 8008f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f60:	645a      	str	r2, [r3, #68]	; 0x44
 8008f62:	e79c      	b.n	8008e9e <HAL_TIM_PWM_Start+0x8a>
 8008f64:	2302      	movs	r3, #2
 8008f66:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8008f6a:	e774      	b.n	8008e56 <HAL_TIM_PWM_Start+0x42>
 8008f6c:	40012c00 	.word	0x40012c00
 8008f70:	40000400 	.word	0x40000400
 8008f74:	00010007 	.word	0x00010007

08008f78 <HAL_TIM_OC_DelayElapsedCallback>:
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop

08008f7c <HAL_TIM_IC_CaptureCallback>:
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop

08008f80 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop

08008f84 <HAL_TIM_TriggerCallback>:
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop

08008f88 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f88:	6803      	ldr	r3, [r0, #0]
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	0791      	lsls	r1, r2, #30
{
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f92:	d503      	bpl.n	8008f9c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	0792      	lsls	r2, r2, #30
 8008f98:	f100 808a 	bmi.w	80090b0 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f9c:	691a      	ldr	r2, [r3, #16]
 8008f9e:	0752      	lsls	r2, r2, #29
 8008fa0:	d502      	bpl.n	8008fa8 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	0750      	lsls	r0, r2, #29
 8008fa6:	d470      	bmi.n	800908a <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	0711      	lsls	r1, r2, #28
 8008fac:	d502      	bpl.n	8008fb4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	0712      	lsls	r2, r2, #28
 8008fb2:	d458      	bmi.n	8009066 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	06d1      	lsls	r1, r2, #27
 8008fb8:	d502      	bpl.n	8008fc0 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	06d2      	lsls	r2, r2, #27
 8008fbe:	d43e      	bmi.n	800903e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fc0:	691a      	ldr	r2, [r3, #16]
 8008fc2:	07d0      	lsls	r0, r2, #31
 8008fc4:	d503      	bpl.n	8008fce <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	07d1      	lsls	r1, r2, #31
 8008fca:	f100 808a 	bmi.w	80090e2 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	0612      	lsls	r2, r2, #24
 8008fd2:	d503      	bpl.n	8008fdc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	0610      	lsls	r0, r2, #24
 8008fd8:	f100 808b 	bmi.w	80090f2 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	05d1      	lsls	r1, r2, #23
 8008fe0:	d503      	bpl.n	8008fea <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	0612      	lsls	r2, r2, #24
 8008fe6:	f100 808c 	bmi.w	8009102 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fea:	691a      	ldr	r2, [r3, #16]
 8008fec:	0650      	lsls	r0, r2, #25
 8008fee:	d503      	bpl.n	8008ff8 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	0651      	lsls	r1, r2, #25
 8008ff4:	f100 808d 	bmi.w	8009112 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	0692      	lsls	r2, r2, #26
 8008ffc:	d503      	bpl.n	8009006 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	0690      	lsls	r0, r2, #26
 8009002:	f100 808e 	bmi.w	8009122 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	02d1      	lsls	r1, r2, #11
 800900a:	d503      	bpl.n	8009014 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	02d2      	lsls	r2, r2, #11
 8009010:	f100 808f 	bmi.w	8009132 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009014:	691a      	ldr	r2, [r3, #16]
 8009016:	0290      	lsls	r0, r2, #10
 8009018:	d503      	bpl.n	8009022 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	0291      	lsls	r1, r2, #10
 800901e:	f100 8090 	bmi.w	8009142 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009022:	691a      	ldr	r2, [r3, #16]
 8009024:	0252      	lsls	r2, r2, #9
 8009026:	d503      	bpl.n	8009030 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	0250      	lsls	r0, r2, #9
 800902c:	f100 8091 	bmi.w	8009152 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	0211      	lsls	r1, r2, #8
 8009034:	d502      	bpl.n	800903c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	0212      	lsls	r2, r2, #8
 800903a:	d44a      	bmi.n	80090d2 <HAL_TIM_IRQHandler+0x14a>
}
 800903c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800903e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009042:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009044:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009046:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800904e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009050:	f040 8090 	bne.w	8009174 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009054:	f7ff ff90 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009058:	4620      	mov	r0, r4
 800905a:	f7ff ff91 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800905e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009060:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009062:	7722      	strb	r2, [r4, #28]
 8009064:	e7ac      	b.n	8008fc0 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009066:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800906a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800906c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800906e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8009074:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009076:	d17a      	bne.n	800916e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009078:	f7ff ff7e 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800907c:	4620      	mov	r0, r4
 800907e:	f7ff ff7f 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009082:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009084:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009086:	7722      	strb	r2, [r4, #28]
 8009088:	e794      	b.n	8008fb4 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800908a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800908e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009090:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009092:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800909a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800909c:	d164      	bne.n	8009168 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800909e:	f7ff ff6b 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7ff ff6c 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090aa:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ac:	7722      	strb	r2, [r4, #28]
 80090ae:	e77b      	b.n	8008fa8 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090b0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090b4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090b6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090b8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	0799      	lsls	r1, r3, #30
 80090be:	d150      	bne.n	8009162 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c0:	f7ff ff5a 	bl	8008f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c4:	4620      	mov	r0, r4
 80090c6:	f7ff ff5b 	bl	8008f80 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090cc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ce:	7722      	strb	r2, [r4, #28]
 80090d0:	e764      	b.n	8008f9c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80090d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80090d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80090d8:	611a      	str	r2, [r3, #16]
}
 80090da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80090de:	f000 ba11 	b.w	8009504 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090e2:	f06f 0201 	mvn.w	r2, #1
 80090e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7fa fa8f 	bl	800360c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	e76d      	b.n	8008fce <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 f9f9 	bl	80094f0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	e76c      	b.n	8008fdc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009102:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009106:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009108:	4620      	mov	r0, r4
 800910a:	f000 f9f3 	bl	80094f4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	e76b      	b.n	8008fea <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009112:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009116:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009118:	4620      	mov	r0, r4
 800911a:	f7ff ff33 	bl	8008f84 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	e76a      	b.n	8008ff8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009122:	f06f 0220 	mvn.w	r2, #32
 8009126:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009128:	4620      	mov	r0, r4
 800912a:	f000 f9df 	bl	80094ec <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	e769      	b.n	8009006 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009132:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009136:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009138:	4620      	mov	r0, r4
 800913a:	f000 f9dd 	bl	80094f8 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	e768      	b.n	8009014 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009142:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009146:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f9d7 	bl	80094fc <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	e767      	b.n	8009022 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009152:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009156:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8009158:	4620      	mov	r0, r4
 800915a:	f000 f9d1 	bl	8009500 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	e766      	b.n	8009030 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8009162:	f7ff ff0b 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 8009166:	e7b0      	b.n	80090ca <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8009168:	f7ff ff08 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 800916c:	e79c      	b.n	80090a8 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 800916e:	f7ff ff05 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 8009172:	e786      	b.n	8009082 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8009174:	f7ff ff02 	bl	8008f7c <HAL_TIM_IC_CaptureCallback>
 8009178:	e771      	b.n	800905e <HAL_TIM_IRQHandler+0xd6>
 800917a:	bf00      	nop

0800917c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800917c:	6a03      	ldr	r3, [r0, #32]
 800917e:	f023 0310 	bic.w	r3, r3, #16
 8009182:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009184:	6a03      	ldr	r3, [r0, #32]
{
 8009186:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8009188:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800918a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800918c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800918e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009192:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009196:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800919a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800919c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091a4:	4d1c      	ldr	r5, [pc, #112]	; (8009218 <TIM_OC2_SetConfig+0x9c>)
 80091a6:	42a8      	cmp	r0, r5
 80091a8:	d017      	beq.n	80091da <TIM_OC2_SetConfig+0x5e>
 80091aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80091ae:	42a8      	cmp	r0, r5
 80091b0:	d013      	beq.n	80091da <TIM_OC2_SetConfig+0x5e>
 80091b2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80091b6:	42a8      	cmp	r0, r5
 80091b8:	d025      	beq.n	8009206 <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ba:	4d18      	ldr	r5, [pc, #96]	; (800921c <TIM_OC2_SetConfig+0xa0>)
 80091bc:	42a8      	cmp	r0, r5
 80091be:	d013      	beq.n	80091e8 <TIM_OC2_SetConfig+0x6c>
 80091c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80091c4:	42a8      	cmp	r0, r5
 80091c6:	d00f      	beq.n	80091e8 <TIM_OC2_SetConfig+0x6c>
 80091c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80091cc:	42a8      	cmp	r0, r5
 80091ce:	d00b      	beq.n	80091e8 <TIM_OC2_SetConfig+0x6c>
 80091d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80091d4:	42a8      	cmp	r0, r5
 80091d6:	d10f      	bne.n	80091f8 <TIM_OC2_SetConfig+0x7c>
 80091d8:	e006      	b.n	80091e8 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80091dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80091e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091e8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091ec:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091f0:	ea46 0c05 	orr.w	ip, r6, r5
 80091f4:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80091f8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80091fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80091fc:	6182      	str	r2, [r0, #24]
}
 80091fe:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8009200:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009202:	6203      	str	r3, [r0, #32]
}
 8009204:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009206:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800920c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009214:	e7d1      	b.n	80091ba <TIM_OC2_SetConfig+0x3e>
 8009216:	bf00      	nop
 8009218:	40012c00 	.word	0x40012c00
 800921c:	40014000 	.word	0x40014000

08009220 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8009220:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009224:	2b01      	cmp	r3, #1
 8009226:	f000 80ff 	beq.w	8009428 <HAL_TIM_PWM_ConfigChannel+0x208>
 800922a:	2301      	movs	r3, #1
{
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	4604      	mov	r4, r0
 8009230:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8009232:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009236:	2a14      	cmp	r2, #20
 8009238:	d80c      	bhi.n	8009254 <HAL_TIM_PWM_ConfigChannel+0x34>
 800923a:	e8df f002 	tbb	[pc, r2]
 800923e:	0b59      	.short	0x0b59
 8009240:	0b6e0b0b 	.word	0x0b6e0b0b
 8009244:	0b840b0b 	.word	0x0b840b0b
 8009248:	0b990b0b 	.word	0x0b990b0b
 800924c:	0baf0b0b 	.word	0x0baf0b0b
 8009250:	0b0b      	.short	0x0b0b
 8009252:	11          	.byte	0x11
 8009253:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8009254:	2300      	movs	r3, #0
  switch (Channel)
 8009256:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8009258:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800925c:	4610      	mov	r0, r2
 800925e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009260:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009262:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800926a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800926c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800926e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009270:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009272:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009276:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800927a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800927e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009280:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009284:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009288:	4e69      	ldr	r6, [pc, #420]	; (8009430 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800928a:	42b3      	cmp	r3, r6
 800928c:	d013      	beq.n	80092b6 <HAL_TIM_PWM_ConfigChannel+0x96>
 800928e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009292:	42b3      	cmp	r3, r6
 8009294:	d00f      	beq.n	80092b6 <HAL_TIM_PWM_ConfigChannel+0x96>
 8009296:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800929a:	42b3      	cmp	r3, r6
 800929c:	d00b      	beq.n	80092b6 <HAL_TIM_PWM_ConfigChannel+0x96>
 800929e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092a2:	42b3      	cmp	r3, r6
 80092a4:	d007      	beq.n	80092b6 <HAL_TIM_PWM_ConfigChannel+0x96>
 80092a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80092aa:	42b3      	cmp	r3, r6
 80092ac:	d003      	beq.n	80092b6 <HAL_TIM_PWM_ConfigChannel+0x96>
 80092ae:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80092b2:	42b3      	cmp	r3, r6
 80092b4:	d104      	bne.n	80092c0 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092b6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092b8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092bc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c0:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092c2:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092c4:	6869      	ldr	r1, [r5, #4]
 80092c6:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092cc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80092d6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80092da:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80092de:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80092e2:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80092e4:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80092e6:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80092e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80092ec:	4610      	mov	r0, r2
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092f0:	6800      	ldr	r0, [r0, #0]
 80092f2:	f7ff fb37 	bl	8008964 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092f6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092f8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092fa:	f043 0308 	orr.w	r3, r3, #8
 80092fe:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009300:	6983      	ldr	r3, [r0, #24]
 8009302:	f023 0304 	bic.w	r3, r3, #4
 8009306:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009308:	6983      	ldr	r3, [r0, #24]
 800930a:	430b      	orrs	r3, r1
 800930c:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 800930e:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009310:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009312:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009316:	4610      	mov	r0, r2
 8009318:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800931a:	6800      	ldr	r0, [r0, #0]
 800931c:	f7ff ff2e 	bl	800917c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009320:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009322:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009328:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800932a:	6983      	ldr	r3, [r0, #24]
 800932c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009330:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009332:	6983      	ldr	r3, [r0, #24]
 8009334:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009338:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 800933a:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800933c:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800933e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009342:	4610      	mov	r0, r2
 8009344:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009346:	6800      	ldr	r0, [r0, #0]
 8009348:	f7ff fb4c 	bl	80089e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800934c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800934e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009350:	f043 0308 	orr.w	r3, r3, #8
 8009354:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009356:	69c3      	ldr	r3, [r0, #28]
 8009358:	f023 0304 	bic.w	r3, r3, #4
 800935c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800935e:	69c3      	ldr	r3, [r0, #28]
 8009360:	430b      	orrs	r3, r1
 8009362:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8009364:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009366:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009368:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800936c:	4610      	mov	r0, r2
 800936e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009370:	6800      	ldr	r0, [r0, #0]
 8009372:	f7ff fb87 	bl	8008a84 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009376:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009378:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800937a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800937e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009380:	69c3      	ldr	r3, [r0, #28]
 8009382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009386:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009388:	69c3      	ldr	r3, [r0, #28]
 800938a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800938e:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8009390:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009392:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009394:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009398:	4610      	mov	r0, r2
 800939a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800939c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800939e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093a0:	6a1a      	ldr	r2, [r3, #32]
 80093a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80093a6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80093a8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80093aa:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80093ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093ae:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80093b2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80093b6:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093b8:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80093ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c2:	4e1b      	ldr	r6, [pc, #108]	; (8009430 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80093c4:	42b3      	cmp	r3, r6
 80093c6:	d013      	beq.n	80093f0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80093c8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80093cc:	42b3      	cmp	r3, r6
 80093ce:	d00f      	beq.n	80093f0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80093d0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80093d4:	42b3      	cmp	r3, r6
 80093d6:	d00b      	beq.n	80093f0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80093d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80093dc:	42b3      	cmp	r3, r6
 80093de:	d007      	beq.n	80093f0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80093e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80093e4:	42b3      	cmp	r3, r6
 80093e6:	d003      	beq.n	80093f0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80093e8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80093ec:	42b3      	cmp	r3, r6
 80093ee:	d104      	bne.n	80093fa <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093f0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093f2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093f6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80093fa:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80093fc:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80093fe:	6869      	ldr	r1, [r5, #4]
 8009400:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8009402:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009406:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009408:	f042 0208 	orr.w	r2, r2, #8
 800940c:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800940e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009410:	f021 0104 	bic.w	r1, r1, #4
 8009414:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009416:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009418:	4301      	orrs	r1, r0
 800941a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800941c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800941e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009420:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009424:	4610      	mov	r0, r2
 8009426:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8009428:	2202      	movs	r2, #2
}
 800942a:	4610      	mov	r0, r2
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	40012c00 	.word	0x40012c00

08009434 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009434:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d051      	beq.n	80094e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 800943c:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800943e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009440:	4d28      	ldr	r5, [pc, #160]	; (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009442:	2302      	movs	r3, #2
 8009444:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009448:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800944a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800944c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800944e:	d03b      	beq.n	80094c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8009450:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009454:	42aa      	cmp	r2, r5
 8009456:	d032      	beq.n	80094be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8009458:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800945c:	42aa      	cmp	r2, r5
 800945e:	d02e      	beq.n	80094be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009460:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009462:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800946a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800946c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8009470:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009472:	d016      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009474:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009476:	429a      	cmp	r2, r3
 8009478:	d013      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800947a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800947e:	429a      	cmp	r2, r3
 8009480:	d00f      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009486:	429a      	cmp	r2, r3
 8009488:	d00b      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800948a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800948e:	429a      	cmp	r2, r3
 8009490:	d007      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009492:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009496:	429a      	cmp	r2, r3
 8009498:	d003      	beq.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800949a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949e:	429a      	cmp	r2, r3
 80094a0:	d104      	bne.n	80094ac <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094a2:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094a4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094a8:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094aa:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80094ac:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80094ae:	2201      	movs	r2, #1
 80094b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80094b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80094b8:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80094ba:	4618      	mov	r0, r3
}
 80094bc:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094be:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094c4:	432b      	orrs	r3, r5
 80094c6:	e7cb      	b.n	8009460 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80094c8:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094ce:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80094d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094d4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80094d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094da:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80094dc:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094de:	e7e0      	b.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 80094e0:	2002      	movs	r0, #2
}
 80094e2:	4770      	bx	lr
 80094e4:	40012c00 	.word	0x40012c00
 80094e8:	40000400 	.word	0x40000400

080094ec <HAL_TIMEx_CommutCallback>:
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <HAL_TIMEx_BreakCallback>:
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop

080094f4 <HAL_TIMEx_Break2Callback>:
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop

080094f8 <HAL_TIMEx_EncoderIndexCallback>:
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop

080094fc <HAL_TIMEx_DirectionChangeCallback>:
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop

08009500 <HAL_TIMEx_IndexErrorCallback>:
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop

08009504 <HAL_TIMEx_TransitionErrorCallback>:
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop

08009508 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009508:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800950c:	2b20      	cmp	r3, #32
 800950e:	d15f      	bne.n	80095d0 <HAL_UART_Receive_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009510:	2900      	cmp	r1, #0
 8009512:	d05b      	beq.n	80095cc <HAL_UART_Receive_IT+0xc4>
 8009514:	2a00      	cmp	r2, #0
 8009516:	d059      	beq.n	80095cc <HAL_UART_Receive_IT+0xc4>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8009518:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800951c:	2b01      	cmp	r3, #1
 800951e:	d057      	beq.n	80095d0 <HAL_UART_Receive_IT+0xc8>
{
 8009520:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009522:	6803      	ldr	r3, [r0, #0]
 8009524:	4c59      	ldr	r4, [pc, #356]	; (800968c <HAL_UART_Receive_IT+0x184>)
    __HAL_LOCK(huart);
 8009526:	2501      	movs	r5, #1
 8009528:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800952c:	42a3      	cmp	r3, r4
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952e:	f04f 0500 	mov.w	r5, #0
 8009532:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009534:	d00a      	beq.n	800954c <HAL_UART_Receive_IT+0x44>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009536:	685c      	ldr	r4, [r3, #4]
 8009538:	0224      	lsls	r4, r4, #8
 800953a:	d507      	bpl.n	800954c <HAL_UART_Receive_IT+0x44>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	e853 4f00 	ldrex	r4, [r3]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009540:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	e843 4500 	strex	r5, r4, [r3]
 8009548:	2d00      	cmp	r5, #0
 800954a:	d1f7      	bne.n	800953c <HAL_UART_Receive_IT+0x34>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800954c:	6885      	ldr	r5, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800954e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 8009550:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 8009552:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8009556:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800955a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800955e:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8009560:	d04f      	beq.n	8009602 <HAL_UART_Receive_IT+0xfa>
 8009562:	2d00      	cmp	r5, #0
 8009564:	d177      	bne.n	8009656 <HAL_UART_Receive_IT+0x14e>
 8009566:	6901      	ldr	r1, [r0, #16]
 8009568:	2900      	cmp	r1, #0
 800956a:	bf14      	ite	ne
 800956c:	247f      	movne	r4, #127	; 0x7f
 800956e:	24ff      	moveq	r4, #255	; 0xff

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009570:	2100      	movs	r1, #0
 8009572:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009576:	2122      	movs	r1, #34	; 0x22
  UART_MASK_COMPUTATION(huart);
 8009578:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800957c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	f103 0108 	add.w	r1, r3, #8
 8009584:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009588:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	f103 0508 	add.w	r5, r3, #8
 8009590:	e845 1400 	strex	r4, r1, [r5]
 8009594:	2c00      	cmp	r4, #0
 8009596:	d1f3      	bne.n	8009580 <HAL_UART_Receive_IT+0x78>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009598:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800959a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800959e:	d037      	beq.n	8009610 <HAL_UART_Receive_IT+0x108>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095a0:	6882      	ldr	r2, [r0, #8]
 80095a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80095a6:	6902      	ldr	r2, [r0, #16]
 80095a8:	d014      	beq.n	80095d4 <HAL_UART_Receive_IT+0xcc>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80095aa:	4c39      	ldr	r4, [pc, #228]	; (8009690 <HAL_UART_Receive_IT+0x188>)
 80095ac:	6704      	str	r4, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80095ae:	2100      	movs	r1, #0
 80095b0:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80095b4:	b1a2      	cbz	r2, 80095e0 <HAL_UART_Receive_IT+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80095ba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	e843 2100 	strex	r1, r2, [r3]
 80095c2:	2900      	cmp	r1, #0
 80095c4:	d1f7      	bne.n	80095b6 <HAL_UART_Receive_IT+0xae>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80095c6:	2000      	movs	r0, #0
}
 80095c8:	bc30      	pop	{r4, r5}
 80095ca:	4770      	bx	lr
      return HAL_ERROR;
 80095cc:	2001      	movs	r0, #1
 80095ce:	4770      	bx	lr
    return HAL_BUSY;
 80095d0:	2002      	movs	r0, #2
}
 80095d2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	d147      	bne.n	8009668 <HAL_UART_Receive_IT+0x160>
 80095d8:	492e      	ldr	r1, [pc, #184]	; (8009694 <HAL_UART_Receive_IT+0x18c>)
 80095da:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80095dc:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095e4:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	e843 2100 	strex	r1, r2, [r3]
 80095ec:	2900      	cmp	r1, #0
 80095ee:	d0ea      	beq.n	80095c6 <HAL_UART_Receive_IT+0xbe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	e853 2f00 	ldrex	r2, [r3]
 80095f4:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	e843 2100 	strex	r1, r2, [r3]
 80095fc:	2900      	cmp	r1, #0
 80095fe:	d1ef      	bne.n	80095e0 <HAL_UART_Receive_IT+0xd8>
 8009600:	e7e1      	b.n	80095c6 <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 8009602:	6901      	ldr	r1, [r0, #16]
 8009604:	2900      	cmp	r1, #0
 8009606:	f240 14ff 	movw	r4, #511	; 0x1ff
 800960a:	bf18      	it	ne
 800960c:	24ff      	movne	r4, #255	; 0xff
 800960e:	e7af      	b.n	8009570 <HAL_UART_Receive_IT+0x68>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009610:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8009614:	4291      	cmp	r1, r2
 8009616:	d8c3      	bhi.n	80095a0 <HAL_UART_Receive_IT+0x98>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009618:	6882      	ldr	r2, [r0, #8]
 800961a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800961e:	6902      	ldr	r2, [r0, #16]
 8009620:	d028      	beq.n	8009674 <HAL_UART_Receive_IT+0x16c>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009622:	491d      	ldr	r1, [pc, #116]	; (8009698 <HAL_UART_Receive_IT+0x190>)
 8009624:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009626:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800962a:	b13a      	cbz	r2, 800963c <HAL_UART_Receive_IT+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	e843 2100 	strex	r1, r2, [r3]
 8009638:	2900      	cmp	r1, #0
 800963a:	d1f7      	bne.n	800962c <HAL_UART_Receive_IT+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	f103 0208 	add.w	r2, r3, #8
 8009640:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009644:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	f103 0008 	add.w	r0, r3, #8
 800964c:	e840 2100 	strex	r1, r2, [r0]
 8009650:	2900      	cmp	r1, #0
 8009652:	d1f3      	bne.n	800963c <HAL_UART_Receive_IT+0x134>
 8009654:	e7b7      	b.n	80095c6 <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 8009656:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 800965a:	d189      	bne.n	8009570 <HAL_UART_Receive_IT+0x68>
 800965c:	6901      	ldr	r1, [r0, #16]
 800965e:	2900      	cmp	r1, #0
 8009660:	bf0c      	ite	eq
 8009662:	247f      	moveq	r4, #127	; 0x7f
 8009664:	243f      	movne	r4, #63	; 0x3f
 8009666:	e783      	b.n	8009570 <HAL_UART_Receive_IT+0x68>
      huart->RxISR = UART_RxISR_8BIT;
 8009668:	4909      	ldr	r1, [pc, #36]	; (8009690 <HAL_UART_Receive_IT+0x188>)
 800966a:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800966c:	2200      	movs	r2, #0
 800966e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009672:	e7a0      	b.n	80095b6 <HAL_UART_Receive_IT+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009674:	b922      	cbnz	r2, 8009680 <HAL_UART_Receive_IT+0x178>
 8009676:	4909      	ldr	r1, [pc, #36]	; (800969c <HAL_UART_Receive_IT+0x194>)
 8009678:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800967a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800967e:	e7dd      	b.n	800963c <HAL_UART_Receive_IT+0x134>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009680:	4a05      	ldr	r2, [pc, #20]	; (8009698 <HAL_UART_Receive_IT+0x190>)
 8009682:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009684:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009688:	e7d0      	b.n	800962c <HAL_UART_Receive_IT+0x124>
 800968a:	bf00      	nop
 800968c:	40008000 	.word	0x40008000
 8009690:	08009cbd 	.word	0x08009cbd
 8009694:	08009c71 	.word	0x08009c71
 8009698:	08009cfd 	.word	0x08009cfd
 800969c:	08009ea9 	.word	0x08009ea9

080096a0 <HAL_UART_Transmit_DMA>:
{
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80096a2:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 80096a6:	2e20      	cmp	r6, #32
 80096a8:	d141      	bne.n	800972e <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80096aa:	2900      	cmp	r1, #0
 80096ac:	d03d      	beq.n	800972a <HAL_UART_Transmit_DMA+0x8a>
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	d03b      	beq.n	800972a <HAL_UART_Transmit_DMA+0x8a>
 80096b2:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 80096b4:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 80096b8:	2801      	cmp	r0, #1
 80096ba:	d038      	beq.n	800972e <HAL_UART_Transmit_DMA+0x8e>
    if (huart->hdmatx != NULL)
 80096bc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 80096be:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c2:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80096c4:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096c6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 80096cc:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 80096ce:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 80096d2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80096da:	b190      	cbz	r0, 8009702 <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80096dc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8009744 <HAL_UART_Transmit_DMA+0xa4>
      huart->hdmatx->XferAbortCallback = NULL;
 80096e0:	6387      	str	r7, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80096e2:	4613      	mov	r3, r2
 80096e4:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80096e6:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80096ea:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8009748 <HAL_UART_Transmit_DMA+0xa8>
 80096ee:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80096f2:	f8df c058 	ldr.w	ip, [pc, #88]	; 800974c <HAL_UART_Transmit_DMA+0xac>
 80096f6:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80096fa:	3228      	adds	r2, #40	; 0x28
 80096fc:	f7fd fa34 	bl	8006b68 <HAL_DMA_Start_IT>
 8009700:	b9b8      	cbnz	r0, 8009732 <HAL_UART_Transmit_DMA+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8009706:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009708:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800970a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	f102 0308 	add.w	r3, r2, #8
 8009712:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	f102 0008 	add.w	r0, r2, #8
 800971e:	e840 3100 	strex	r1, r3, [r0]
 8009722:	2900      	cmp	r1, #0
 8009724:	d1f3      	bne.n	800970e <HAL_UART_Transmit_DMA+0x6e>
    return HAL_OK;
 8009726:	2000      	movs	r0, #0
}
 8009728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800972a:	2001      	movs	r0, #1
}
 800972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800972e:	2002      	movs	r0, #2
}
 8009730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009732:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8009734:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009738:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 800973c:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 800973e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8009742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009744:	08009751 	.word	0x08009751
 8009748:	08009799 	.word	0x08009799
 800974c:	080097ad 	.word	0x080097ad

08009750 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009750:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009752:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009754:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f013 0320 	ands.w	r3, r3, #32
 800975c:	d117      	bne.n	800978e <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800975e:	6802      	ldr	r2, [r0, #0]
 8009760:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	f102 0308 	add.w	r3, r2, #8
 8009768:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800976c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	f102 0008 	add.w	r0, r2, #8
 8009774:	e840 3100 	strex	r1, r3, [r0]
 8009778:	2900      	cmp	r1, #0
 800977a:	d1f3      	bne.n	8009764 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977c:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	e842 3100 	strex	r1, r3, [r2]
 8009788:	2900      	cmp	r1, #0
 800978a:	d1f7      	bne.n	800977c <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800978c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800978e:	f7fa fb97 	bl	8003ec0 <HAL_UART_TxCpltCallback>
}
 8009792:	bd08      	pop	{r3, pc}

08009794 <HAL_UART_TxHalfCpltCallback>:
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop

08009798 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009798:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800979a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800979c:	f7ff fffa 	bl	8009794 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097a0:	bd08      	pop	{r3, pc}
 80097a2:	bf00      	nop

080097a4 <HAL_UART_RxHalfCpltCallback>:
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop

080097a8 <HAL_UART_ErrorCallback>:
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop

080097ac <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097ac:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80097ae:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80097b0:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 80097b4:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80097b6:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	0612      	lsls	r2, r2, #24
 80097be:	d501      	bpl.n	80097c4 <UART_DMAError+0x18>
 80097c0:	2921      	cmp	r1, #33	; 0x21
 80097c2:	d00d      	beq.n	80097e0 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80097c4:	689a      	ldr	r2, [r3, #8]
 80097c6:	0652      	lsls	r2, r2, #25
 80097c8:	d501      	bpl.n	80097ce <UART_DMAError+0x22>
 80097ca:	2c22      	cmp	r4, #34	; 0x22
 80097cc:	d023      	beq.n	8009816 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097ce:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80097d2:	f043 0310 	orr.w	r3, r3, #16
 80097d6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097da:	f7ff ffe5 	bl	80097a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097de:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80097ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	e843 2100 	strex	r1, r2, [r3]
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d1f7      	bne.n	80097e6 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	f103 0208 	add.w	r2, r3, #8
 80097fa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80097fe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	f103 0c08 	add.w	ip, r3, #8
 8009806:	e84c 2100 	strex	r1, r2, [ip]
 800980a:	2900      	cmp	r1, #0
 800980c:	d1f3      	bne.n	80097f6 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 800980e:	2220      	movs	r2, #32
 8009810:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8009814:	e7d6      	b.n	80097c4 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8009816:	2200      	movs	r2, #0
 8009818:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009820:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	e843 2100 	strex	r1, r2, [r3]
 8009828:	2900      	cmp	r1, #0
 800982a:	d1f7      	bne.n	800981c <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800982c:	4c13      	ldr	r4, [pc, #76]	; (800987c <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	f103 0208 	add.w	r2, r3, #8
 8009832:	e852 2f00 	ldrex	r2, [r2]
 8009836:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009838:	f103 0c08 	add.w	ip, r3, #8
 800983c:	e84c 2100 	strex	r1, r2, [ip]
 8009840:	2900      	cmp	r1, #0
 8009842:	d1f4      	bne.n	800982e <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009844:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8009846:	2a01      	cmp	r2, #1
 8009848:	d006      	beq.n	8009858 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800984a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800984c:	2220      	movs	r2, #32
 800984e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8009852:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009854:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8009856:	e7ba      	b.n	80097ce <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800985c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	e843 2100 	strex	r1, r2, [r3]
 8009864:	2900      	cmp	r1, #0
 8009866:	d0f0      	beq.n	800984a <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	e853 2f00 	ldrex	r2, [r3]
 800986c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	e843 2100 	strex	r1, r2, [r3]
 8009874:	2900      	cmp	r1, #0
 8009876:	d1ef      	bne.n	8009858 <UART_DMAError+0xac>
 8009878:	e7e7      	b.n	800984a <UART_DMAError+0x9e>
 800987a:	bf00      	nop
 800987c:	effffffe 	.word	0xeffffffe

08009880 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009880:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009882:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800988a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800988e:	f7ff ff8b 	bl	80097a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009892:	bd08      	pop	{r3, pc}

08009894 <HAL_UARTEx_RxEventCallback>:
}
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop

08009898 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009898:	6803      	ldr	r3, [r0, #0]
 800989a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800989c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800989e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80098a2:	ea12 0f0c 	tst.w	r2, ip
{
 80098a6:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098a8:	689d      	ldr	r5, [r3, #8]
{
 80098aa:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80098ac:	f000 80eb 	beq.w	8009a86 <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098b0:	489a      	ldr	r0, [pc, #616]	; (8009b1c <HAL_UART_IRQHandler+0x284>)
 80098b2:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098b6:	489a      	ldr	r0, [pc, #616]	; (8009b20 <HAL_UART_IRQHandler+0x288>)
 80098b8:	4008      	ands	r0, r1
 80098ba:	ea50 000c 	orrs.w	r0, r0, ip
 80098be:	d155      	bne.n	800996c <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80098c2:	2801      	cmp	r0, #1
 80098c4:	d022      	beq.n	800990c <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098c6:	02d6      	lsls	r6, r2, #11
 80098c8:	d502      	bpl.n	80098d0 <HAL_UART_IRQHandler+0x38>
 80098ca:	0268      	lsls	r0, r5, #9
 80098cc:	f100 8104 	bmi.w	8009ad8 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098d0:	0616      	lsls	r6, r2, #24
 80098d2:	d506      	bpl.n	80098e2 <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098d4:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098d8:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098dc:	4328      	orrs	r0, r5
 80098de:	f040 80f3 	bne.w	8009ac8 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098e2:	0650      	lsls	r0, r2, #25
 80098e4:	d534      	bpl.n	8009950 <HAL_UART_IRQHandler+0xb8>
 80098e6:	064e      	lsls	r6, r1, #25
 80098e8:	d532      	bpl.n	8009950 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	e843 2100 	strex	r1, r2, [r3]
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d1f7      	bne.n	80098ea <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098fa:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098fc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80098fe:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8009902:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009904:	4620      	mov	r0, r4
 8009906:	f7fa fadb 	bl	8003ec0 <HAL_UART_TxCpltCallback>
}
 800990a:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800990c:	06d6      	lsls	r6, r2, #27
 800990e:	d5da      	bpl.n	80098c6 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009910:	06c8      	lsls	r0, r1, #27
 8009912:	d5d8      	bpl.n	80098c6 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009914:	2210      	movs	r2, #16
 8009916:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	0651      	lsls	r1, r2, #25
 800991c:	f140 8106 	bpl.w	8009b2c <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009920:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009922:	6801      	ldr	r1, [r0, #0]
 8009924:	684a      	ldr	r2, [r1, #4]
 8009926:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009928:	2a00      	cmp	r2, #0
 800992a:	d0ee      	beq.n	800990a <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800992c:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009930:	4295      	cmp	r5, r2
 8009932:	d9ea      	bls.n	800990a <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8009934:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009938:	680a      	ldr	r2, [r1, #0]
 800993a:	0692      	lsls	r2, r2, #26
 800993c:	f140 812b 	bpl.w	8009b96 <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009940:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009944:	1ae9      	subs	r1, r5, r3
 8009946:	4620      	mov	r0, r4
 8009948:	b289      	uxth	r1, r1
 800994a:	f7ff ffa3 	bl	8009894 <HAL_UARTEx_RxEventCallback>
}
 800994e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009950:	0215      	lsls	r5, r2, #8
 8009952:	d502      	bpl.n	800995a <HAL_UART_IRQHandler+0xc2>
 8009954:	0048      	lsls	r0, r1, #1
 8009956:	f100 80dc 	bmi.w	8009b12 <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800995a:	01d3      	lsls	r3, r2, #7
 800995c:	d5d5      	bpl.n	800990a <HAL_UART_IRQHandler+0x72>
 800995e:	2900      	cmp	r1, #0
 8009960:	dad3      	bge.n	800990a <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009962:	4620      	mov	r0, r4
}
 8009964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009968:	f000 bfdc 	b.w	800a924 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800996c:	07d0      	lsls	r0, r2, #31
 800996e:	d509      	bpl.n	8009984 <HAL_UART_IRQHandler+0xec>
 8009970:	05ce      	lsls	r6, r1, #23
 8009972:	d507      	bpl.n	8009984 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009974:	2001      	movs	r0, #1
 8009976:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009978:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800997c:	f040 0001 	orr.w	r0, r0, #1
 8009980:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009984:	0790      	lsls	r0, r2, #30
 8009986:	f140 8090 	bpl.w	8009aaa <HAL_UART_IRQHandler+0x212>
 800998a:	07ee      	lsls	r6, r5, #31
 800998c:	d50a      	bpl.n	80099a4 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800998e:	2002      	movs	r0, #2
 8009990:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009992:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009996:	f040 0004 	orr.w	r0, r0, #4
 800999a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800999e:	0750      	lsls	r0, r2, #29
 80099a0:	f100 8089 	bmi.w	8009ab6 <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099a4:	0716      	lsls	r6, r2, #28
 80099a6:	d50c      	bpl.n	80099c2 <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099a8:	f001 0020 	and.w	r0, r1, #32
 80099ac:	ea50 000c 	orrs.w	r0, r0, ip
 80099b0:	d007      	beq.n	80099c2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b2:	2008      	movs	r0, #8
 80099b4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099b6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80099ba:	f040 0008 	orr.w	r0, r0, #8
 80099be:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099c2:	0510      	lsls	r0, r2, #20
 80099c4:	d50a      	bpl.n	80099dc <HAL_UART_IRQHandler+0x144>
 80099c6:	014e      	lsls	r6, r1, #5
 80099c8:	d508      	bpl.n	80099dc <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80099ce:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099d0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80099d4:	f040 0020 	orr.w	r0, r0, #32
 80099d8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099dc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d092      	beq.n	800990a <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099e4:	0690      	lsls	r0, r2, #26
 80099e6:	d50a      	bpl.n	80099fe <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099e8:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099ec:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 80099f0:	4329      	orrs	r1, r5
 80099f2:	d004      	beq.n	80099fe <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 80099f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80099f6:	b112      	cbz	r2, 80099fe <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 80099f8:	4620      	mov	r0, r4
 80099fa:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099fc:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80099fe:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a02:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a04:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a08:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009a0c:	ea52 0501 	orrs.w	r5, r2, r1
 8009a10:	f000 80f2 	beq.w	8009bf8 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	e843 2100 	strex	r1, r2, [r3]
 8009a20:	2900      	cmp	r1, #0
 8009a22:	d1f7      	bne.n	8009a14 <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a24:	483f      	ldr	r0, [pc, #252]	; (8009b24 <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	f103 0208 	add.w	r2, r3, #8
 8009a2a:	e852 2f00 	ldrex	r2, [r2]
 8009a2e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	f103 0508 	add.w	r5, r3, #8
 8009a34:	e845 2100 	strex	r1, r2, [r5]
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	d1f4      	bne.n	8009a26 <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a3c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009a3e:	2a01      	cmp	r2, #1
 8009a40:	d052      	beq.n	8009ae8 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a42:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009a44:	2120      	movs	r1, #32
 8009a46:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4a:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a4c:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8009a4e:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a50:	064a      	lsls	r2, r1, #25
 8009a52:	d55a      	bpl.n	8009b0a <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a54:	f103 0208 	add.w	r2, r3, #8
 8009a58:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	f103 0008 	add.w	r0, r3, #8
 8009a64:	e840 2100 	strex	r1, r2, [r0]
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	d1f3      	bne.n	8009a54 <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 8009a6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d04b      	beq.n	8009b0a <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a72:	4b2d      	ldr	r3, [pc, #180]	; (8009b28 <HAL_UART_IRQHandler+0x290>)
 8009a74:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a76:	f7fd f90b 	bl	8006c90 <HAL_DMA_Abort_IT>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f43f af45 	beq.w	800990a <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a80:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009a82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009a84:	e00e      	b.n	8009aa4 <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a86:	0696      	lsls	r6, r2, #26
 8009a88:	f57f af1a 	bpl.w	80098c0 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a8c:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a90:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 8009a94:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8009a98:	f43f af12 	beq.w	80098c0 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8009a9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f43f af33 	beq.w	800990a <HAL_UART_IRQHandler+0x72>
}
 8009aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aa8:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aaa:	0756      	lsls	r6, r2, #29
 8009aac:	f57f af7a 	bpl.w	80099a4 <HAL_UART_IRQHandler+0x10c>
 8009ab0:	07e8      	lsls	r0, r5, #31
 8009ab2:	f57f af77 	bpl.w	80099a4 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ab6:	2004      	movs	r0, #4
 8009ab8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009aba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009abe:	f040 0002 	orr.w	r0, r0, #2
 8009ac2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8009ac6:	e76d      	b.n	80099a4 <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 8009ac8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f43f af1d 	beq.w	800990a <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8009ad0:	4620      	mov	r0, r4
}
 8009ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8009ad6:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ad8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8009adc:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ade:	621a      	str	r2, [r3, #32]
}
 8009ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8009ae4:	f000 bf1c 	b.w	800a920 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af0:	e843 2100 	strex	r1, r2, [r3]
 8009af4:	2900      	cmp	r1, #0
 8009af6:	d0a4      	beq.n	8009a42 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	e853 2f00 	ldrex	r2, [r3]
 8009afc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	e843 2100 	strex	r1, r2, [r3]
 8009b04:	2900      	cmp	r1, #0
 8009b06:	d1ef      	bne.n	8009ae8 <HAL_UART_IRQHandler+0x250>
 8009b08:	e79b      	b.n	8009a42 <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f7ff fe4c 	bl	80097a8 <HAL_UART_ErrorCallback>
}
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b12:	4620      	mov	r0, r4
}
 8009b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b18:	f000 bf06 	b.w	800a928 <HAL_UARTEx_TxFifoEmptyCallback>
 8009b1c:	10000001 	.word	0x10000001
 8009b20:	04000120 	.word	0x04000120
 8009b24:	effffffe 	.word	0xeffffffe
 8009b28:	08009881 	.word	0x08009881
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b2c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8009b30:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b34:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8009b38:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b3a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	f43f aee4 	beq.w	800990a <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b42:	1a41      	subs	r1, r0, r1
 8009b44:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009b46:	2900      	cmp	r1, #0
 8009b48:	f43f aedf 	beq.w	800990a <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	e843 2000 	strex	r0, r2, [r3]
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d1f7      	bne.n	8009b4c <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b5c:	4d29      	ldr	r5, [pc, #164]	; (8009c04 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	f103 0208 	add.w	r2, r3, #8
 8009b62:	e852 2f00 	ldrex	r2, [r2]
 8009b66:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	f103 0c08 	add.w	ip, r3, #8
 8009b6c:	e84c 2000 	strex	r0, r2, [ip]
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d1f4      	bne.n	8009b5e <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 8009b74:	2220      	movs	r2, #32
 8009b76:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8009b7a:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7c:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b82:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	e843 2000 	strex	r0, r2, [r3]
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d1f7      	bne.n	8009b7e <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f7ff fe80 	bl	8009894 <HAL_UARTEx_RxEventCallback>
}
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	e843 2100 	strex	r1, r2, [r3]
 8009ba2:	2900      	cmp	r1, #0
 8009ba4:	d1f7      	bne.n	8009b96 <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	f103 0208 	add.w	r2, r3, #8
 8009baa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	f103 0508 	add.w	r5, r3, #8
 8009bb6:	e845 2100 	strex	r1, r2, [r5]
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	d1f3      	bne.n	8009ba6 <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	f103 0208 	add.w	r2, r3, #8
 8009bc2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bca:	f103 0508 	add.w	r5, r3, #8
 8009bce:	e845 2100 	strex	r1, r2, [r5]
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	d1f3      	bne.n	8009bbe <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bdc:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	e843 2100 	strex	r1, r2, [r3]
 8009bea:	2900      	cmp	r1, #0
 8009bec:	d1f7      	bne.n	8009bde <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bee:	f7fd f815 	bl	8006c1c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bf2:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009bf6:	e6a3      	b.n	8009940 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fdd5 	bl	80097a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bfe:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	effffffe 	.word	0xeffffffe

08009c08 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8009c08:	b508      	push	{r3, lr}
 8009c0a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	e843 2100 	strex	r1, r2, [r3]
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	d1f7      	bne.n	8009c0c <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	f103 0208 	add.w	r2, r3, #8
 8009c20:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c24:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	f103 0c08 	add.w	ip, r3, #8
 8009c2c:	e84c 2100 	strex	r1, r2, [ip]
 8009c30:	2900      	cmp	r1, #0
 8009c32:	d1f3      	bne.n	8009c1c <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c34:	2220      	movs	r2, #32
 8009c36:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8009c3c:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3e:	2a01      	cmp	r2, #1
 8009c40:	d112      	bne.n	8009c68 <UART_RxISR_16BIT.part.0+0x60>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c42:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c48:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	e843 2100 	strex	r1, r2, [r3]
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d1f7      	bne.n	8009c44 <UART_RxISR_16BIT.part.0+0x3c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c54:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c56:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c5a:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c5c:	bf44      	itt	mi
 8009c5e:	2210      	movmi	r2, #16
 8009c60:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c62:	f7ff fe17 	bl	8009894 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c66:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8009c68:	f7fa f8f4 	bl	8003e54 <HAL_UART_RxCpltCallback>
}
 8009c6c:	bd08      	pop	{r3, pc}
 8009c6e:	bf00      	nop

08009c70 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c70:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 8009c74:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c78:	2922      	cmp	r1, #34	; 0x22
 8009c7a:	d005      	beq.n	8009c88 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c7c:	6802      	ldr	r2, [r0, #0]
 8009c7e:	6993      	ldr	r3, [r2, #24]
 8009c80:	f043 0308 	orr.w	r3, r3, #8
 8009c84:	6193      	str	r3, [r2, #24]
 8009c86:	4770      	bx	lr
{
 8009c88:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c8a:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c8c:	6d81      	ldr	r1, [r0, #88]	; 0x58
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c8e:	6a64      	ldr	r4, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c90:	4022      	ands	r2, r4
 8009c92:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8009c96:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8009c9a:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8009c9c:	3a01      	subs	r2, #1
 8009c9e:	b292      	uxth	r2, r2
 8009ca0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8009ca4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	b91b      	cbnz	r3, 8009cb4 <UART_RxISR_16BIT+0x44>
  }
}
 8009cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb0:	f7ff bfaa 	b.w	8009c08 <UART_RxISR_16BIT.part.0>
 8009cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop

08009cbc <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cbc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 8009cc0:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cc4:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cc6:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cc8:	d004      	beq.n	8009cd4 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cca:	6993      	ldr	r3, [r2, #24]
 8009ccc:	f043 0308 	orr.w	r3, r3, #8
 8009cd0:	6193      	str	r3, [r2, #24]
}
 8009cd2:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009cd6:	400a      	ands	r2, r1
 8009cd8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009cda:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8009cdc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8009ce0:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8009ce2:	3a01      	subs	r2, #1
 8009ce4:	b292      	uxth	r2, r2
 8009ce6:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8009cea:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8009cee:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8009cf0:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8009cf2:	6581      	str	r1, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	d1ec      	bne.n	8009cd2 <UART_RxISR_8BIT+0x16>
 8009cf8:	f7ff bf86 	b.w	8009c08 <UART_RxISR_16BIT.part.0>

08009cfc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d00:	6802      	ldr	r2, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8009d02:	f8b0 b060 	ldrh.w	fp, [r0, #96]	; 0x60
{
 8009d06:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d08:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d0a:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d0c:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d0e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009d12:	2922      	cmp	r1, #34	; 0x22
 8009d14:	d006      	beq.n	8009d24 <UART_RxISR_8BIT_FIFOEN+0x28>
 8009d16:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d18:	6992      	ldr	r2, [r2, #24]
 8009d1a:	f042 0208 	orr.w	r2, r2, #8
 8009d1e:	619a      	str	r2, [r3, #24]
  }
}
 8009d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d24:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 80b5 	beq.w	8009e98 <UART_RxISR_8BIT_FIFOEN+0x19c>
 8009d2e:	0685      	lsls	r5, r0, #26
 8009d30:	d57b      	bpl.n	8009e2a <UART_RxISR_8BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d32:	f8df a170 	ldr.w	sl, [pc, #368]	; 8009ea4 <UART_RxISR_8BIT_FIFOEN+0x1a8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d36:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d3a:	f006 0601 	and.w	r6, r6, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d3e:	fa5f fb8b 	uxtb.w	fp, fp
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d42:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d46:	f04f 0904 	mov.w	r9, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d4e:	ea0b 0202 	and.w	r2, fp, r2
 8009d52:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 8009d54:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d58:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr++;
 8009d5a:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8009d5c:	3901      	subs	r1, #1
 8009d5e:	b289      	uxth	r1, r1
 8009d60:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d64:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 8009d66:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d68:	0768      	lsls	r0, r5, #29
      huart->pRxBuffPtr++;
 8009d6a:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d6c:	d01a      	beq.n	8009da4 <UART_RxISR_8BIT_FIFOEN+0xa8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d6e:	07e9      	lsls	r1, r5, #31
 8009d70:	d508      	bpl.n	8009d84 <UART_RxISR_8BIT_FIFOEN+0x88>
 8009d72:	b13f      	cbz	r7, 8009d84 <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d74:	2201      	movs	r2, #1
 8009d76:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d78:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009d7c:	f042 0201 	orr.w	r2, r2, #1
 8009d80:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d84:	07aa      	lsls	r2, r5, #30
 8009d86:	d515      	bpl.n	8009db4 <UART_RxISR_8BIT_FIFOEN+0xb8>
 8009d88:	b14e      	cbz	r6, 8009d9e <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d8e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d92:	0768      	lsls	r0, r5, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d94:	f042 0204 	orr.w	r2, r2, #4
 8009d98:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d9c:	d40e      	bmi.n	8009dbc <UART_RxISR_8BIT_FIFOEN+0xc0>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d9e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009da2:	b9bb      	cbnz	r3, 8009dd4 <UART_RxISR_8BIT_FIFOEN+0xd8>
      if (huart->RxXferCount == 0U)
 8009da4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	b1eb      	cbz	r3, 8009de8 <UART_RxISR_8BIT_FIFOEN+0xec>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dac:	06ab      	lsls	r3, r5, #26
 8009dae:	d53c      	bpl.n	8009e2a <UART_RxISR_8BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009db0:	6822      	ldr	r2, [r4, #0]
 8009db2:	e7ca      	b.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009db4:	0769      	lsls	r1, r5, #29
 8009db6:	d5f2      	bpl.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0xa2>
 8009db8:	2e00      	cmp	r6, #0
 8009dba:	d0f0      	beq.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dbc:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dc0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009dc4:	f043 0302 	orr.w	r3, r3, #2
 8009dc8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dcc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0e7      	beq.n	8009da4 <UART_RxISR_8BIT_FIFOEN+0xa8>
          HAL_UART_ErrorCallback(huart);
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f7ff fce7 	bl	80097a8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dda:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8009dde:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e1      	bne.n	8009dac <UART_RxISR_8BIT_FIFOEN+0xb0>
 8009de8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dea:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	e843 2100 	strex	r1, r2, [r3]
 8009df6:	2900      	cmp	r1, #0
 8009df8:	d1f7      	bne.n	8009dea <UART_RxISR_8BIT_FIFOEN+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	f103 0208 	add.w	r2, r3, #8
 8009dfe:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e02:	ea02 020a 	and.w	r2, r2, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e06:	f103 0008 	add.w	r0, r3, #8
 8009e0a:	e840 2100 	strex	r1, r2, [r0]
 8009e0e:	2900      	cmp	r1, #0
 8009e10:	d1f3      	bne.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0xfe>
        huart->RxState = HAL_UART_STATE_READY;
 8009e12:	2220      	movs	r2, #32
 8009e14:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e18:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009e1a:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1c:	2a01      	cmp	r2, #1
 8009e1e:	d027      	beq.n	8009e70 <UART_RxISR_8BIT_FIFOEN+0x174>
          HAL_UART_RxCpltCallback(huart);
 8009e20:	4620      	mov	r0, r4
 8009e22:	f7fa f817 	bl	8003e54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e26:	06ab      	lsls	r3, r5, #26
 8009e28:	d4c2      	bmi.n	8009db0 <UART_RxISR_8BIT_FIFOEN+0xb4>
    rxdatacount = huart->RxXferCount;
 8009e2a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009e2e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f43f af75 	beq.w	8009d20 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009e36:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	f67f af70 	bls.w	8009d20 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009e40:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	f103 0208 	add.w	r2, r3, #8
 8009e46:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	f103 0008 	add.w	r0, r3, #8
 8009e52:	e840 2100 	strex	r1, r2, [r0]
 8009e56:	2900      	cmp	r1, #0
 8009e58:	d1f3      	bne.n	8009e42 <UART_RxISR_8BIT_FIFOEN+0x146>
      huart->RxISR = UART_RxISR_8BIT;
 8009e5a:	4a11      	ldr	r2, [pc, #68]	; (8009ea0 <UART_RxISR_8BIT_FIFOEN+0x1a4>)
 8009e5c:	6722      	str	r2, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e62:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	e843 2100 	strex	r1, r2, [r3]
 8009e6a:	2900      	cmp	r1, #0
 8009e6c:	d1f7      	bne.n	8009e5e <UART_RxISR_8BIT_FIFOEN+0x162>
 8009e6e:	e757      	b.n	8009d20 <UART_RxISR_8BIT_FIFOEN+0x24>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e70:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e76:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	e843 2100 	strex	r1, r2, [r3]
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	d1f7      	bne.n	8009e72 <UART_RxISR_8BIT_FIFOEN+0x176>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e82:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e84:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e88:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e8a:	bf44      	itt	mi
 8009e8c:	2210      	movmi	r2, #16
 8009e8e:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7ff fcff 	bl	8009894 <HAL_UARTEx_RxEventCallback>
 8009e96:	e789      	b.n	8009dac <UART_RxISR_8BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 8009e98:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e9c:	e740      	b.n	8009d20 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009e9e:	bf00      	nop
 8009ea0:	08009cbd 	.word	0x08009cbd
 8009ea4:	effffffe 	.word	0xeffffffe

08009ea8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009eac:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8009eae:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009eb2:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009eb4:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009eb6:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eb8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009ebc:	2a22      	cmp	r2, #34	; 0x22
 8009ebe:	d005      	beq.n	8009ecc <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	f042 0208 	orr.w	r2, r2, #8
 8009ec6:	619a      	str	r2, [r3, #24]
  }
}
 8009ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ecc:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8009ed0:	4683      	mov	fp, r0
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	f000 80b9 	beq.w	800a04a <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8009ed8:	068c      	lsls	r4, r1, #26
 8009eda:	d57c      	bpl.n	8009fd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009edc:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a054 <UART_RxISR_16BIT_FIFOEN+0x1ac>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ee0:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ee4:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee8:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009eea:	f04f 0804 	mov.w	r8, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8009ef0:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
 8009ef4:	ea0a 0202 	and.w	r2, sl, r2
 8009ef8:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 8009efc:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8009f00:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
 8009f04:	3a01      	subs	r2, #1
 8009f06:	b292      	uxth	r2, r2
 8009f08:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f0c:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f0e:	0760      	lsls	r0, r4, #29
 8009f10:	d01a      	beq.n	8009f48 <UART_RxISR_16BIT_FIFOEN+0xa0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f12:	07e1      	lsls	r1, r4, #31
 8009f14:	d508      	bpl.n	8009f28 <UART_RxISR_16BIT_FIFOEN+0x80>
 8009f16:	b13e      	cbz	r6, 8009f28 <UART_RxISR_16BIT_FIFOEN+0x80>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f18:	2201      	movs	r2, #1
 8009f1a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f1c:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 8009f20:	f042 0201 	orr.w	r2, r2, #1
 8009f24:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f28:	07a2      	lsls	r2, r4, #30
 8009f2a:	d516      	bpl.n	8009f5a <UART_RxISR_16BIT_FIFOEN+0xb2>
 8009f2c:	b14d      	cbz	r5, 8009f42 <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f2e:	2202      	movs	r2, #2
 8009f30:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f32:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f36:	0760      	lsls	r0, r4, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f38:	f042 0204 	orr.w	r2, r2, #4
 8009f3c:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f40:	d40f      	bmi.n	8009f62 <UART_RxISR_16BIT_FIFOEN+0xba>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f42:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8009f46:	b9c3      	cbnz	r3, 8009f7a <UART_RxISR_16BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8009f48:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	b1f3      	cbz	r3, 8009f8e <UART_RxISR_16BIT_FIFOEN+0xe6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f50:	06a3      	lsls	r3, r4, #26
 8009f52:	d540      	bpl.n	8009fd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f54:	f8db 3000 	ldr.w	r3, [fp]
 8009f58:	e7c9      	b.n	8009eee <UART_RxISR_16BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f5a:	0761      	lsls	r1, r4, #29
 8009f5c:	d5f1      	bpl.n	8009f42 <UART_RxISR_16BIT_FIFOEN+0x9a>
 8009f5e:	2d00      	cmp	r5, #0
 8009f60:	d0ef      	beq.n	8009f42 <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f62:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f66:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8009f6a:	f043 0302 	orr.w	r3, r3, #2
 8009f6e:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f72:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0e6      	beq.n	8009f48 <UART_RxISR_16BIT_FIFOEN+0xa0>
          HAL_UART_ErrorCallback(huart);
 8009f7a:	4658      	mov	r0, fp
 8009f7c:	f7ff fc14 	bl	80097a8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f80:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8009f84:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1e0      	bne.n	8009f50 <UART_RxISR_16BIT_FIFOEN+0xa8>
 8009f8e:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	e843 2100 	strex	r1, r2, [r3]
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	d1f7      	bne.n	8009f92 <UART_RxISR_16BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	f103 0208 	add.w	r2, r3, #8
 8009fa6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009faa:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	f103 0008 	add.w	r0, r3, #8
 8009fb2:	e840 2100 	strex	r1, r2, [r0]
 8009fb6:	2900      	cmp	r1, #0
 8009fb8:	d1f3      	bne.n	8009fa2 <UART_RxISR_16BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f8cb 2088 	str.w	r2, [fp, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc0:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
        huart->RxISR = NULL;
 8009fc4:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc8:	2a01      	cmp	r2, #1
 8009fca:	d029      	beq.n	800a020 <UART_RxISR_16BIT_FIFOEN+0x178>
          HAL_UART_RxCpltCallback(huart);
 8009fcc:	4658      	mov	r0, fp
 8009fce:	f7f9 ff41 	bl	8003e54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fd2:	06a3      	lsls	r3, r4, #26
 8009fd4:	d4be      	bmi.n	8009f54 <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 8009fd6:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8009fda:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f43f af73 	beq.w	8009ec8 <UART_RxISR_16BIT_FIFOEN+0x20>
 8009fe2:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	f67f af6e 	bls.w	8009ec8 <UART_RxISR_16BIT_FIFOEN+0x20>
 8009fec:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff0:	f103 0208 	add.w	r2, r3, #8
 8009ff4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ff8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	f103 0008 	add.w	r0, r3, #8
 800a000:	e840 2100 	strex	r1, r2, [r0]
 800a004:	2900      	cmp	r1, #0
 800a006:	d1f3      	bne.n	8009ff0 <UART_RxISR_16BIT_FIFOEN+0x148>
      huart->RxISR = UART_RxISR_16BIT;
 800a008:	4a11      	ldr	r2, [pc, #68]	; (800a050 <UART_RxISR_16BIT_FIFOEN+0x1a8>)
 800a00a:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a012:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	e843 2100 	strex	r1, r2, [r3]
 800a01a:	2900      	cmp	r1, #0
 800a01c:	d1f7      	bne.n	800a00e <UART_RxISR_16BIT_FIFOEN+0x166>
 800a01e:	e753      	b.n	8009ec8 <UART_RxISR_16BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a020:	f8cb 106c 	str.w	r1, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a028:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	e843 2100 	strex	r1, r2, [r3]
 800a030:	2900      	cmp	r1, #0
 800a032:	d1f7      	bne.n	800a024 <UART_RxISR_16BIT_FIFOEN+0x17c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a034:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a036:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a03a:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a03c:	bf44      	itt	mi
 800a03e:	2210      	movmi	r2, #16
 800a040:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a042:	4658      	mov	r0, fp
 800a044:	f7ff fc26 	bl	8009894 <HAL_UARTEx_RxEventCallback>
 800a048:	e782      	b.n	8009f50 <UART_RxISR_16BIT_FIFOEN+0xa8>
    rxdatacount = huart->RxXferCount;
 800a04a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a04e:	e73b      	b.n	8009ec8 <UART_RxISR_16BIT_FIFOEN+0x20>
 800a050:	08009c71 	.word	0x08009c71
 800a054:	effffffe 	.word	0xeffffffe

0800a058 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a058:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800a05a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a05c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d002      	beq.n	800a068 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800a062:	f7ff fb9f 	bl	80097a4 <HAL_UART_RxHalfCpltCallback>
}
 800a066:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a068:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800a06c:	0849      	lsrs	r1, r1, #1
 800a06e:	f7ff fc11 	bl	8009894 <HAL_UARTEx_RxEventCallback>
}
 800a072:	bd08      	pop	{r3, pc}

0800a074 <UART_DMAReceiveCplt>:
{
 800a074:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a076:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a078:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f012 0220 	ands.w	r2, r2, #32
 800a080:	d128      	bne.n	800a0d4 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 800a082:	6803      	ldr	r3, [r0, #0]
 800a084:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a08c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	e843 2100 	strex	r1, r2, [r3]
 800a094:	2900      	cmp	r1, #0
 800a096:	d1f7      	bne.n	800a088 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	f103 0208 	add.w	r2, r3, #8
 800a09c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	f103 0c08 	add.w	ip, r3, #8
 800a0a8:	e84c 2100 	strex	r1, r2, [ip]
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	d1f3      	bne.n	800a098 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	f103 0208 	add.w	r2, r3, #8
 800a0b4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	f103 0c08 	add.w	ip, r3, #8
 800a0c0:	e84c 2100 	strex	r1, r2, [ip]
 800a0c4:	2900      	cmp	r1, #0
 800a0c6:	d1f3      	bne.n	800a0b0 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ce:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800a0d0:	2a01      	cmp	r2, #1
 800a0d2:	d005      	beq.n	800a0e0 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d013      	beq.n	800a102 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a0da:	f7f9 febb 	bl	8003e54 <HAL_UART_RxCpltCallback>
}
 800a0de:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e8:	e843 2100 	strex	r1, r2, [r3]
 800a0ec:	2900      	cmp	r1, #0
 800a0ee:	d0f1      	beq.n	800a0d4 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	e853 2f00 	ldrex	r2, [r3]
 800a0f4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	e843 2100 	strex	r1, r2, [r3]
 800a0fc:	2900      	cmp	r1, #0
 800a0fe:	d1ef      	bne.n	800a0e0 <UART_DMAReceiveCplt+0x6c>
 800a100:	e7e8      	b.n	800a0d4 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a102:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800a106:	f7ff fbc5 	bl	8009894 <HAL_UARTEx_RxEventCallback>
}
 800a10a:	bd08      	pop	{r3, pc}

0800a10c <UART_SetConfig>:
{
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a110:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a112:	6882      	ldr	r2, [r0, #8]
 800a114:	6900      	ldr	r0, [r0, #16]
 800a116:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a118:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a11a:	4302      	orrs	r2, r0
 800a11c:	430a      	orrs	r2, r1
 800a11e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a120:	49b2      	ldr	r1, [pc, #712]	; (800a3ec <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a122:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a124:	4029      	ands	r1, r5
 800a126:	430a      	orrs	r2, r1
 800a128:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	68e1      	ldr	r1, [r4, #12]
 800a12e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a132:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a134:	49ae      	ldr	r1, [pc, #696]	; (800a3f0 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a136:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a138:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a13a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a13c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a13e:	f000 8081 	beq.w	800a244 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 800a142:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a144:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a148:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800a14c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a14e:	430a      	orrs	r2, r1
 800a150:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a154:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a156:	f022 020f 	bic.w	r2, r2, #15
 800a15a:	430a      	orrs	r2, r1
 800a15c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a15e:	4aa5      	ldr	r2, [pc, #660]	; (800a3f4 <UART_SetConfig+0x2e8>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d027      	beq.n	800a1b4 <UART_SetConfig+0xa8>
 800a164:	4aa4      	ldr	r2, [pc, #656]	; (800a3f8 <UART_SetConfig+0x2ec>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d04b      	beq.n	800a202 <UART_SetConfig+0xf6>
 800a16a:	4aa4      	ldr	r2, [pc, #656]	; (800a3fc <UART_SetConfig+0x2f0>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	f000 8111 	beq.w	800a394 <UART_SetConfig+0x288>
 800a172:	4aa3      	ldr	r2, [pc, #652]	; (800a400 <UART_SetConfig+0x2f4>)
 800a174:	4293      	cmp	r3, r2
 800a176:	f000 80b9 	beq.w	800a2ec <UART_SetConfig+0x1e0>
 800a17a:	4aa2      	ldr	r2, [pc, #648]	; (800a404 <UART_SetConfig+0x2f8>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d111      	bne.n	800a1a4 <UART_SetConfig+0x98>
 800a180:	4ba1      	ldr	r3, [pc, #644]	; (800a408 <UART_SetConfig+0x2fc>)
 800a182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a18e:	f000 8126 	beq.w	800a3de <UART_SetConfig+0x2d2>
 800a192:	f200 80d5 	bhi.w	800a340 <UART_SetConfig+0x234>
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 80d9 	beq.w	800a34e <UART_SetConfig+0x242>
 800a19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a0:	f000 80b0 	beq.w	800a304 <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 800a1a4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800a1a6:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800a1a8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800a1ac:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800a1b0:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1b4:	4b94      	ldr	r3, [pc, #592]	; (800a408 <UART_SetConfig+0x2fc>)
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ba:	f003 0303 	and.w	r3, r3, #3
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	f240 808d 	bls.w	800a2e0 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a1ca:	f000 8103 	beq.w	800a3d4 <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1ce:	f7fd ff17 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f000 80dc 	beq.w	800a390 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a1da:	6862      	ldr	r2, [r4, #4]
 800a1dc:	4b8b      	ldr	r3, [pc, #556]	; (800a40c <UART_SetConfig+0x300>)
 800a1de:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a1e2:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1e6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a1ee:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f2:	f1a3 0210 	sub.w	r2, r3, #16
 800a1f6:	428a      	cmp	r2, r1
 800a1f8:	d8d4      	bhi.n	800a1a4 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	60d3      	str	r3, [r2, #12]
 800a200:	e7d1      	b.n	800a1a6 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a202:	4b81      	ldr	r3, [pc, #516]	; (800a408 <UART_SetConfig+0x2fc>)
 800a204:	4a82      	ldr	r2, [pc, #520]	; (800a410 <UART_SetConfig+0x304>)
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20a:	f003 030c 	and.w	r3, r3, #12
 800a20e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a210:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a214:	d07c      	beq.n	800a310 <UART_SetConfig+0x204>
    switch (clocksource)
 800a216:	2b08      	cmp	r3, #8
 800a218:	d8c4      	bhi.n	800a1a4 <UART_SetConfig+0x98>
 800a21a:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <UART_SetConfig+0x114>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a349 	.word	0x0800a349
 800a224:	0800a1cf 	.word	0x0800a1cf
 800a228:	0800a3cb 	.word	0x0800a3cb
 800a22c:	0800a1a5 	.word	0x0800a1a5
 800a230:	0800a30b 	.word	0x0800a30b
 800a234:	0800a1a5 	.word	0x0800a1a5
 800a238:	0800a1a5 	.word	0x0800a1a5
 800a23c:	0800a1a5 	.word	0x0800a1a5
 800a240:	0800a3bb 	.word	0x0800a3bb
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a244:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a248:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a24c:	4311      	orrs	r1, r2
 800a24e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a254:	486c      	ldr	r0, [pc, #432]	; (800a408 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a256:	f022 020f 	bic.w	r2, r2, #15
 800a25a:	430a      	orrs	r2, r1
 800a25c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a25e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a262:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a26a:	f000 80ac 	beq.w	800a3c6 <UART_SetConfig+0x2ba>
 800a26e:	d80b      	bhi.n	800a288 <UART_SetConfig+0x17c>
 800a270:	2b00      	cmp	r3, #0
 800a272:	d038      	beq.n	800a2e6 <UART_SetConfig+0x1da>
 800a274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a278:	d194      	bne.n	800a1a4 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 800a27a:	f7fd fd73 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800a27e:	2800      	cmp	r0, #0
 800a280:	f000 8086 	beq.w	800a390 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a284:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a286:	e004      	b.n	800a292 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a28c:	d18a      	bne.n	800a1a4 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 800a28e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a292:	4b5e      	ldr	r3, [pc, #376]	; (800a40c <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a294:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a296:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800a29a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a29e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a2a2:	4299      	cmp	r1, r3
 800a2a4:	f63f af7e 	bhi.w	800a1a4 <UART_SetConfig+0x98>
 800a2a8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a2ac:	f63f af7a 	bhi.w	800a1a4 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	f7f6 fd10 	bl	8000cd8 <__aeabi_uldivmod>
 800a2b8:	086a      	lsrs	r2, r5, #1
 800a2ba:	0203      	lsls	r3, r0, #8
 800a2bc:	0209      	lsls	r1, r1, #8
 800a2be:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a2c2:	1898      	adds	r0, r3, r2
 800a2c4:	f141 0100 	adc.w	r1, r1, #0
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f7f6 fd04 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2d0:	4a50      	ldr	r2, [pc, #320]	; (800a414 <UART_SetConfig+0x308>)
 800a2d2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800a2d6:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2da:	f63f af63 	bhi.w	800a1a4 <UART_SetConfig+0x98>
 800a2de:	e78c      	b.n	800a1fa <UART_SetConfig+0xee>
 800a2e0:	4a4d      	ldr	r2, [pc, #308]	; (800a418 <UART_SetConfig+0x30c>)
 800a2e2:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2e4:	e794      	b.n	800a210 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2e6:	f7fd fe79 	bl	8007fdc <HAL_RCC_GetPCLK1Freq>
        break;
 800a2ea:	e7c8      	b.n	800a27e <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ec:	4b46      	ldr	r3, [pc, #280]	; (800a408 <UART_SetConfig+0x2fc>)
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2f6:	2b80      	cmp	r3, #128	; 0x80
 800a2f8:	d071      	beq.n	800a3de <UART_SetConfig+0x2d2>
 800a2fa:	d861      	bhi.n	800a3c0 <UART_SetConfig+0x2b4>
 800a2fc:	b33b      	cbz	r3, 800a34e <UART_SetConfig+0x242>
 800a2fe:	2b40      	cmp	r3, #64	; 0x40
 800a300:	f47f af50 	bne.w	800a1a4 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a304:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a308:	d061      	beq.n	800a3ce <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a30a:	f7fd fd2b 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
        break;
 800a30e:	e760      	b.n	800a1d2 <UART_SetConfig+0xc6>
    switch (clocksource)
 800a310:	2b08      	cmp	r3, #8
 800a312:	f63f af47 	bhi.w	800a1a4 <UART_SetConfig+0x98>
 800a316:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <UART_SetConfig+0x210>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a355 	.word	0x0800a355
 800a320:	0800a3d5 	.word	0x0800a3d5
 800a324:	0800a3db 	.word	0x0800a3db
 800a328:	0800a1a5 	.word	0x0800a1a5
 800a32c:	0800a3cf 	.word	0x0800a3cf
 800a330:	0800a1a5 	.word	0x0800a1a5
 800a334:	0800a1a5 	.word	0x0800a1a5
 800a338:	0800a1a5 	.word	0x0800a1a5
 800a33c:	0800a35d 	.word	0x0800a35d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a344:	d036      	beq.n	800a3b4 <UART_SetConfig+0x2a8>
 800a346:	e72d      	b.n	800a1a4 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a348:	f7fd fe48 	bl	8007fdc <HAL_RCC_GetPCLK1Freq>
        break;
 800a34c:	e741      	b.n	800a1d2 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a34e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a352:	d1f9      	bne.n	800a348 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a354:	f7fd fe42 	bl	8007fdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a358:	b1d0      	cbz	r0, 800a390 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a35c:	6862      	ldr	r2, [r4, #4]
 800a35e:	4b2b      	ldr	r3, [pc, #172]	; (800a40c <UART_SetConfig+0x300>)
 800a360:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800a364:	fbb0 f0f1 	udiv	r0, r0, r1
 800a368:	0853      	lsrs	r3, r2, #1
 800a36a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a36e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a372:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a376:	f1a3 0210 	sub.w	r2, r3, #16
 800a37a:	428a      	cmp	r2, r1
 800a37c:	f63f af12 	bhi.w	800a1a4 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a380:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800a384:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a386:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a388:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a38c:	4313      	orrs	r3, r2
 800a38e:	60cb      	str	r3, [r1, #12]
 800a390:	2000      	movs	r0, #0
 800a392:	e708      	b.n	800a1a6 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a394:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <UART_SetConfig+0x2fc>)
 800a396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d01d      	beq.n	800a3de <UART_SetConfig+0x2d2>
 800a3a2:	d804      	bhi.n	800a3ae <UART_SetConfig+0x2a2>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0d2      	beq.n	800a34e <UART_SetConfig+0x242>
 800a3a8:	2b10      	cmp	r3, #16
 800a3aa:	d0ab      	beq.n	800a304 <UART_SetConfig+0x1f8>
 800a3ac:	e6fa      	b.n	800a1a4 <UART_SetConfig+0x98>
 800a3ae:	2b30      	cmp	r3, #48	; 0x30
 800a3b0:	f47f aef8 	bne.w	800a1a4 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a3b8:	d0d0      	beq.n	800a35c <UART_SetConfig+0x250>
    switch (clocksource)
 800a3ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a3be:	e70c      	b.n	800a1da <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3c0:	2bc0      	cmp	r3, #192	; 0xc0
 800a3c2:	d0f7      	beq.n	800a3b4 <UART_SetConfig+0x2a8>
 800a3c4:	e6ee      	b.n	800a1a4 <UART_SetConfig+0x98>
 800a3c6:	4815      	ldr	r0, [pc, #84]	; (800a41c <UART_SetConfig+0x310>)
 800a3c8:	e763      	b.n	800a292 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 800a3ca:	4814      	ldr	r0, [pc, #80]	; (800a41c <UART_SetConfig+0x310>)
 800a3cc:	e705      	b.n	800a1da <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ce:	f7fd fcc9 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
        break;
 800a3d2:	e7c1      	b.n	800a358 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3d4:	f7fd fe14 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
        break;
 800a3d8:	e7be      	b.n	800a358 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 800a3da:	4810      	ldr	r0, [pc, #64]	; (800a41c <UART_SetConfig+0x310>)
 800a3dc:	e7be      	b.n	800a35c <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800a3e2:	480e      	ldr	r0, [pc, #56]	; (800a41c <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3e4:	f47f aef9 	bne.w	800a1da <UART_SetConfig+0xce>
 800a3e8:	e7b8      	b.n	800a35c <UART_SetConfig+0x250>
 800a3ea:	bf00      	nop
 800a3ec:	cfff69f3 	.word	0xcfff69f3
 800a3f0:	40008000 	.word	0x40008000
 800a3f4:	40013800 	.word	0x40013800
 800a3f8:	40004400 	.word	0x40004400
 800a3fc:	40004800 	.word	0x40004800
 800a400:	40004c00 	.word	0x40004c00
 800a404:	40005000 	.word	0x40005000
 800a408:	40021000 	.word	0x40021000
 800a40c:	0800f1ac 	.word	0x0800f1ac
 800a410:	0800f19c 	.word	0x0800f19c
 800a414:	000ffcff 	.word	0x000ffcff
 800a418:	0800f198 	.word	0x0800f198
 800a41c:	00f42400 	.word	0x00f42400

0800a420 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a420:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a422:	07da      	lsls	r2, r3, #31
{
 800a424:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a426:	d506      	bpl.n	800a436 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a428:	6801      	ldr	r1, [r0, #0]
 800a42a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a42c:	684a      	ldr	r2, [r1, #4]
 800a42e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a432:	4322      	orrs	r2, r4
 800a434:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a436:	079c      	lsls	r4, r3, #30
 800a438:	d506      	bpl.n	800a448 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a43a:	6801      	ldr	r1, [r0, #0]
 800a43c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a43e:	684a      	ldr	r2, [r1, #4]
 800a440:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a444:	4322      	orrs	r2, r4
 800a446:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a448:	0759      	lsls	r1, r3, #29
 800a44a:	d506      	bpl.n	800a45a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a44c:	6801      	ldr	r1, [r0, #0]
 800a44e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a450:	684a      	ldr	r2, [r1, #4]
 800a452:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a456:	4322      	orrs	r2, r4
 800a458:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a45a:	071a      	lsls	r2, r3, #28
 800a45c:	d506      	bpl.n	800a46c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a45e:	6801      	ldr	r1, [r0, #0]
 800a460:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a462:	684a      	ldr	r2, [r1, #4]
 800a464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a468:	4322      	orrs	r2, r4
 800a46a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a46c:	06dc      	lsls	r4, r3, #27
 800a46e:	d506      	bpl.n	800a47e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a470:	6801      	ldr	r1, [r0, #0]
 800a472:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a474:	688a      	ldr	r2, [r1, #8]
 800a476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a47a:	4322      	orrs	r2, r4
 800a47c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a47e:	0699      	lsls	r1, r3, #26
 800a480:	d506      	bpl.n	800a490 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a482:	6801      	ldr	r1, [r0, #0]
 800a484:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a486:	688a      	ldr	r2, [r1, #8]
 800a488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a48c:	4322      	orrs	r2, r4
 800a48e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a490:	065a      	lsls	r2, r3, #25
 800a492:	d509      	bpl.n	800a4a8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a494:	6801      	ldr	r1, [r0, #0]
 800a496:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a498:	684a      	ldr	r2, [r1, #4]
 800a49a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a49e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4a6:	d00b      	beq.n	800a4c0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4a8:	061b      	lsls	r3, r3, #24
 800a4aa:	d506      	bpl.n	800a4ba <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ac:	6802      	ldr	r2, [r0, #0]
 800a4ae:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a4b0:	6853      	ldr	r3, [r2, #4]
 800a4b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a4b6:	430b      	orrs	r3, r1
 800a4b8:	6053      	str	r3, [r2, #4]
}
 800a4ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4be:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4c0:	684a      	ldr	r2, [r1, #4]
 800a4c2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800a4c4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800a4c8:	4322      	orrs	r2, r4
 800a4ca:	604a      	str	r2, [r1, #4]
 800a4cc:	e7ec      	b.n	800a4a8 <UART_AdvFeatureConfig+0x88>
 800a4ce:	bf00      	nop

0800a4d0 <UART_WaitOnFlagUntilTimeout>:
{
 800a4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d8:	6804      	ldr	r4, [r0, #0]
{
 800a4da:	4607      	mov	r7, r0
 800a4dc:	460e      	mov	r6, r1
 800a4de:	4615      	mov	r5, r2
 800a4e0:	4699      	mov	r9, r3
 800a4e2:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a4e6:	d10a      	bne.n	800a4fe <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e8:	69e3      	ldr	r3, [r4, #28]
 800a4ea:	ea36 0303 	bics.w	r3, r6, r3
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2301      	moveq	r3, #1
 800a4f2:	2300      	movne	r3, #0
 800a4f4:	429d      	cmp	r5, r3
 800a4f6:	d0f7      	beq.n	800a4e8 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800a4f8:	2000      	movs	r0, #0
}
 800a4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4fe:	69e2      	ldr	r2, [r4, #28]
 800a500:	ea36 0202 	bics.w	r2, r6, r2
 800a504:	bf0c      	ite	eq
 800a506:	2301      	moveq	r3, #1
 800a508:	2300      	movne	r3, #0
 800a50a:	42ab      	cmp	r3, r5
 800a50c:	d1f4      	bne.n	800a4f8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a50e:	f7f8 f95d 	bl	80027cc <HAL_GetTick>
 800a512:	eba0 0009 	sub.w	r0, r0, r9
 800a516:	4540      	cmp	r0, r8
 800a518:	d833      	bhi.n	800a582 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a51a:	f1b8 0f00 	cmp.w	r8, #0
 800a51e:	d030      	beq.n	800a582 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a520:	683c      	ldr	r4, [r7, #0]
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	0758      	lsls	r0, r3, #29
 800a526:	4622      	mov	r2, r4
 800a528:	d5db      	bpl.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a52a:	69e3      	ldr	r3, [r4, #28]
 800a52c:	0519      	lsls	r1, r3, #20
 800a52e:	d5d8      	bpl.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a534:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a536:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a53a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	e844 3100 	strex	r1, r3, [r4]
 800a542:	b139      	cbz	r1, 800a554 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	e852 3f00 	ldrex	r3, [r2]
 800a548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	e842 3100 	strex	r1, r3, [r2]
 800a550:	2900      	cmp	r1, #0
 800a552:	d1f7      	bne.n	800a544 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a554:	f102 0308 	add.w	r3, r2, #8
 800a558:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	f102 0008 	add.w	r0, r2, #8
 800a564:	e840 3100 	strex	r1, r3, [r0]
 800a568:	2900      	cmp	r1, #0
 800a56a:	d1f3      	bne.n	800a554 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800a56c:	2320      	movs	r3, #32
 800a56e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800a572:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800a57a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a57c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800a580:	e7bb      	b.n	800a4fa <UART_WaitOnFlagUntilTimeout+0x2a>
 800a582:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a584:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	e842 3100 	strex	r1, r3, [r2]
 800a590:	2900      	cmp	r1, #0
 800a592:	d1f7      	bne.n	800a584 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a594:	f102 0308 	add.w	r3, r2, #8
 800a598:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a0:	f102 0008 	add.w	r0, r2, #8
 800a5a4:	e840 3100 	strex	r1, r3, [r0]
 800a5a8:	2900      	cmp	r1, #0
 800a5aa:	d1f3      	bne.n	800a594 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800a5b2:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a5b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800a5ba:	2003      	movs	r0, #3
 800a5bc:	e79d      	b.n	800a4fa <UART_WaitOnFlagUntilTimeout+0x2a>
 800a5be:	bf00      	nop

0800a5c0 <HAL_UART_Transmit>:
{
 800a5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5c4:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a5c6:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800a5ca:	2820      	cmp	r0, #32
{
 800a5cc:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ce:	f040 8090 	bne.w	800a6f2 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 800a5d2:	4689      	mov	r9, r1
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	d048      	beq.n	800a66a <HAL_UART_Transmit+0xaa>
 800a5d8:	4614      	mov	r4, r2
 800a5da:	2a00      	cmp	r2, #0
 800a5dc:	d045      	beq.n	800a66a <HAL_UART_Transmit+0xaa>
 800a5de:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800a5e0:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	f000 8084 	beq.w	800a6f2 <HAL_UART_Transmit+0x132>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f0:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5f4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f6:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5fa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 800a5fe:	f7f8 f8e5 	bl	80027cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a602:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800a604:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800a60c:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 800a610:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a612:	d072      	beq.n	800a6fa <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 800a614:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 800a618:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800a61a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800a61c:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800a620:	b1b3      	cbz	r3, 800a650 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a622:	682c      	ldr	r4, [r5, #0]
 800a624:	1c71      	adds	r1, r6, #1
 800a626:	d124      	bne.n	800a672 <HAL_UART_Transmit+0xb2>
 800a628:	69e2      	ldr	r2, [r4, #28]
 800a62a:	0612      	lsls	r2, r2, #24
 800a62c:	d5fc      	bpl.n	800a628 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 800a62e:	f1b9 0f00 	cmp.w	r9, #0
 800a632:	d059      	beq.n	800a6e8 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a634:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a638:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800a63a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800a63e:	3b01      	subs	r3, #1
 800a640:	b29b      	uxth	r3, r3
 800a642:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a646:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e9      	bne.n	800a624 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a650:	9600      	str	r6, [sp, #0]
 800a652:	463b      	mov	r3, r7
 800a654:	2200      	movs	r2, #0
 800a656:	2140      	movs	r1, #64	; 0x40
 800a658:	4628      	mov	r0, r5
 800a65a:	f7ff ff39 	bl	800a4d0 <UART_WaitOnFlagUntilTimeout>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d171      	bne.n	800a746 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 800a662:	2320      	movs	r3, #32
 800a664:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 800a668:	e000      	b.n	800a66c <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800a66a:	2001      	movs	r0, #1
}
 800a66c:	b003      	add	sp, #12
 800a66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a672:	69e3      	ldr	r3, [r4, #28]
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	d4da      	bmi.n	800a62e <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a678:	f7f8 f8a8 	bl	80027cc <HAL_GetTick>
 800a67c:	1bc0      	subs	r0, r0, r7
 800a67e:	4286      	cmp	r6, r0
 800a680:	d341      	bcc.n	800a706 <HAL_UART_Transmit+0x146>
 800a682:	2e00      	cmp	r6, #0
 800a684:	d03f      	beq.n	800a706 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a686:	682c      	ldr	r4, [r5, #0]
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	0752      	lsls	r2, r2, #29
 800a68c:	4623      	mov	r3, r4
 800a68e:	d5c9      	bpl.n	800a624 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a690:	69e2      	ldr	r2, [r4, #28]
 800a692:	0510      	lsls	r0, r2, #20
 800a694:	d5c6      	bpl.n	800a624 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a69a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a4:	e844 2100 	strex	r1, r2, [r4]
 800a6a8:	b139      	cbz	r1, 800a6ba <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6aa:	e853 2f00 	ldrex	r2, [r3]
 800a6ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	e843 2100 	strex	r1, r2, [r3]
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	d1f7      	bne.n	800a6aa <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	f103 0208 	add.w	r2, r3, #8
 800a6be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c6:	f103 0008 	add.w	r0, r3, #8
 800a6ca:	e840 2100 	strex	r1, r2, [r0]
 800a6ce:	2900      	cmp	r1, #0
 800a6d0:	d1f3      	bne.n	800a6ba <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 800a6d2:	2320      	movs	r3, #32
 800a6d4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800a6d8:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a6dc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 800a6e0:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6e2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 800a6e6:	e7c1      	b.n	800a66c <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6e8:	f838 3b02 	ldrh.w	r3, [r8], #2
 800a6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f0:	e7a2      	b.n	800a638 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 800a6f2:	2002      	movs	r0, #2
}
 800a6f4:	b003      	add	sp, #12
 800a6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6fa:	692b      	ldr	r3, [r5, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d189      	bne.n	800a614 <HAL_UART_Transmit+0x54>
 800a700:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800a702:	4699      	mov	r9, r3
 800a704:	e786      	b.n	800a614 <HAL_UART_Transmit+0x54>
 800a706:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a70c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	e843 2100 	strex	r1, r2, [r3]
 800a714:	2900      	cmp	r1, #0
 800a716:	d1f7      	bne.n	800a708 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	f103 0208 	add.w	r2, r3, #8
 800a71c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a720:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	f103 0008 	add.w	r0, r3, #8
 800a728:	e840 2100 	strex	r1, r2, [r0]
 800a72c:	2900      	cmp	r1, #0
 800a72e:	d1f3      	bne.n	800a718 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 800a730:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800a732:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800a734:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800a738:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a73c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800a740:	b003      	add	sp, #12
 800a742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800a746:	2003      	movs	r0, #3
 800a748:	e790      	b.n	800a66c <HAL_UART_Transmit+0xac>
 800a74a:	bf00      	nop

0800a74c <HAL_UART_Init>:
  if (huart == NULL)
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d066      	beq.n	800a81e <HAL_UART_Init+0xd2>
{
 800a750:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800a752:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800a756:	b082      	sub	sp, #8
 800a758:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d04c      	beq.n	800a7f8 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800a75e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a760:	2324      	movs	r3, #36	; 0x24
 800a762:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a766:	6813      	ldr	r3, [r2, #0]
 800a768:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a76c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800a76e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a770:	f7ff fccc 	bl	800a10c <UART_SetConfig>
 800a774:	2801      	cmp	r0, #1
 800a776:	d03c      	beq.n	800a7f2 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d135      	bne.n	800a7ea <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	6859      	ldr	r1, [r3, #4]
 800a782:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800a786:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a788:	6899      	ldr	r1, [r3, #8]
 800a78a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800a78e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a790:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a792:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800a794:	f041 0101 	orr.w	r1, r1, #1
 800a798:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a79a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a79e:	f7f8 f815 	bl	80027cc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800a7a8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7aa:	d40e      	bmi.n	800a7ca <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	075b      	lsls	r3, r3, #29
 800a7b0:	d427      	bmi.n	800a802 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a7ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a7be:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800a7c2:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800a7c6:	b002      	add	sp, #8
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	462a      	mov	r2, r5
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f7ff fe79 	bl	800a4d0 <UART_WaitOnFlagUntilTimeout>
 800a7de:	b9e0      	cbnz	r0, 800a81a <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	075b      	lsls	r3, r3, #29
 800a7e6:	d40c      	bmi.n	800a802 <HAL_UART_Init+0xb6>
 800a7e8:	e7e3      	b.n	800a7b2 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f7ff fe18 	bl	800a420 <UART_AdvFeatureConfig>
 800a7f0:	e7c5      	b.n	800a77e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800a7f2:	2001      	movs	r0, #1
}
 800a7f4:	b002      	add	sp, #8
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800a7f8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a7fc:	f7fb f81e 	bl	800583c <HAL_UART_MspInit>
 800a800:	e7ad      	b.n	800a75e <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a802:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	2200      	movs	r2, #0
 800a80a:	4633      	mov	r3, r6
 800a80c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a810:	4620      	mov	r0, r4
 800a812:	f7ff fe5d 	bl	800a4d0 <UART_WaitOnFlagUntilTimeout>
 800a816:	2800      	cmp	r0, #0
 800a818:	d0cb      	beq.n	800a7b2 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800a81a:	2003      	movs	r0, #3
 800a81c:	e7d3      	b.n	800a7c6 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800a81e:	2001      	movs	r0, #1
}
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop

0800a824 <UART_Start_Receive_DMA>:
{
 800a824:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a826:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a828:	2500      	movs	r5, #0
 800a82a:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 800a82e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800a830:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800a832:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a836:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 800a83a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800a83c:	b168      	cbz	r0, 800a85a <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a83e:	4e20      	ldr	r6, [pc, #128]	; (800a8c0 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800a840:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a842:	4613      	mov	r3, r2
 800a844:	460a      	mov	r2, r1
 800a846:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a848:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a84a:	4e1e      	ldr	r6, [pc, #120]	; (800a8c4 <UART_Start_Receive_DMA+0xa0>)
 800a84c:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a84e:	4e1e      	ldr	r6, [pc, #120]	; (800a8c8 <UART_Start_Receive_DMA+0xa4>)
 800a850:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a852:	3124      	adds	r1, #36	; 0x24
 800a854:	f7fc f988 	bl	8006b68 <HAL_DMA_Start_IT>
 800a858:	bb40      	cbnz	r0, 800a8ac <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a85a:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 800a85c:	2200      	movs	r2, #0
 800a85e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a862:	b14b      	cbz	r3, 800a878 <UART_Start_Receive_DMA+0x54>
 800a864:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a866:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a86a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	e843 2100 	strex	r1, r2, [r3]
 800a872:	2900      	cmp	r1, #0
 800a874:	d1f7      	bne.n	800a866 <UART_Start_Receive_DMA+0x42>
 800a876:	e000      	b.n	800a87a <UART_Start_Receive_DMA+0x56>
 800a878:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	f103 0208 	add.w	r2, r3, #8
 800a87e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	f103 0008 	add.w	r0, r3, #8
 800a88a:	e840 2100 	strex	r1, r2, [r0]
 800a88e:	2900      	cmp	r1, #0
 800a890:	d1f3      	bne.n	800a87a <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a892:	f103 0208 	add.w	r2, r3, #8
 800a896:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a89a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89e:	f103 0108 	add.w	r1, r3, #8
 800a8a2:	e841 2000 	strex	r0, r2, [r1]
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d1f3      	bne.n	800a892 <UART_Start_Receive_DMA+0x6e>
}
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8ac:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800a8ae:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 800a8b0:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8b4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 800a8b8:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	0800a075 	.word	0x0800a075
 800a8c4:	0800a059 	.word	0x0800a059
 800a8c8:	080097ad 	.word	0x080097ad

0800a8cc <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8cc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a8d0:	2b20      	cmp	r3, #32
 800a8d2:	d120      	bne.n	800a916 <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800a8d4:	b1e9      	cbz	r1, 800a912 <HAL_UART_Receive_DMA+0x46>
 800a8d6:	b1e2      	cbz	r2, 800a912 <HAL_UART_Receive_DMA+0x46>
    __HAL_LOCK(huart);
 800a8d8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d01a      	beq.n	800a916 <HAL_UART_Receive_DMA+0x4a>
{
 800a8e0:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8e2:	4b0e      	ldr	r3, [pc, #56]	; (800a91c <HAL_UART_Receive_DMA+0x50>)
 800a8e4:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800a8e6:	2501      	movs	r5, #1
 800a8e8:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8ec:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ee:	f04f 0500 	mov.w	r5, #0
 800a8f2:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8f4:	d00a      	beq.n	800a90c <HAL_UART_Receive_DMA+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8f6:	6863      	ldr	r3, [r4, #4]
 800a8f8:	021b      	lsls	r3, r3, #8
 800a8fa:	d507      	bpl.n	800a90c <HAL_UART_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a900:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	e844 3500 	strex	r5, r3, [r4]
 800a908:	2d00      	cmp	r5, #0
 800a90a:	d1f7      	bne.n	800a8fc <HAL_UART_Receive_DMA+0x30>
}
 800a90c:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a90e:	f7ff bf89 	b.w	800a824 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 800a912:	2001      	movs	r0, #1
 800a914:	4770      	bx	lr
    return HAL_BUSY;
 800a916:	2002      	movs	r0, #2
}
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	40008000 	.word	0x40008000

0800a920 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop

0800a924 <HAL_UARTEx_RxFifoFullCallback>:
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop

0800a928 <HAL_UARTEx_TxFifoEmptyCallback>:
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop

0800a92c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a92c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a930:	2b01      	cmp	r3, #1
 800a932:	d017      	beq.n	800a964 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a934:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a936:	2324      	movs	r3, #36	; 0x24
{
 800a938:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800a93a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a93e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a940:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a942:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800a944:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a948:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800a94c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a94e:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a950:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a952:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800a956:	2220      	movs	r2, #32
 800a958:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800a95c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800a960:	4618      	mov	r0, r3
}
 800a962:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a964:	2002      	movs	r0, #2
}
 800a966:	4770      	bx	lr

0800a968 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a968:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a96c:	2a01      	cmp	r2, #1
 800a96e:	d037      	beq.n	800a9e0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800a970:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a972:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a974:	2024      	movs	r0, #36	; 0x24
{
 800a976:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a978:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a97c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a97e:	6810      	ldr	r0, [r2, #0]
 800a980:	f020 0001 	bic.w	r0, r0, #1
 800a984:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a986:	6890      	ldr	r0, [r2, #8]
 800a988:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800a98c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a98e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a990:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a992:	b310      	cbz	r0, 800a9da <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a994:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a996:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800a998:	4d12      	ldr	r5, [pc, #72]	; (800a9e4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a99a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a99e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9a2:	4911      	ldr	r1, [pc, #68]	; (800a9e8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800a9a4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9a8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9ac:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9b0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9b4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9b6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9b8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9bc:	fbb1 f1f5 	udiv	r1, r1, r5
 800a9c0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a9ca:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9cc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a9ce:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800a9d2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a9d4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800a9d8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a9da:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a9dc:	4608      	mov	r0, r1
 800a9de:	e7ef      	b.n	800a9c0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a9e0:	2002      	movs	r0, #2
}
 800a9e2:	4770      	bx	lr
 800a9e4:	0800f1c4 	.word	0x0800f1c4
 800a9e8:	0800f1cc 	.word	0x0800f1cc

0800a9ec <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800a9ec:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a9f0:	2a01      	cmp	r2, #1
 800a9f2:	d037      	beq.n	800aa64 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800a9f4:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9f6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a9f8:	2024      	movs	r0, #36	; 0x24
{
 800a9fa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a9fc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa00:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800aa02:	6810      	ldr	r0, [r2, #0]
 800aa04:	f020 0001 	bic.w	r0, r0, #1
 800aa08:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa0a:	6890      	ldr	r0, [r2, #8]
 800aa0c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800aa10:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa12:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa14:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa16:	b310      	cbz	r0, 800aa5e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa18:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa1a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa1c:	4d12      	ldr	r5, [pc, #72]	; (800aa68 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa1e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa22:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa26:	4911      	ldr	r1, [pc, #68]	; (800aa6c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800aa28:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa2c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa30:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa34:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa38:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa3a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa3c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa40:	fbb1 f1f5 	udiv	r1, r1, r5
 800aa44:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800aa48:	2100      	movs	r1, #0
 800aa4a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800aa4e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa50:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800aa52:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800aa56:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800aa58:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800aa5c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800aa5e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800aa60:	4608      	mov	r0, r1
 800aa62:	e7ef      	b.n	800aa44 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800aa64:	2002      	movs	r0, #2
}
 800aa66:	4770      	bx	lr
 800aa68:	0800f1c4 	.word	0x0800f1c4
 800aa6c:	0800f1cc 	.word	0x0800f1cc

0800aa70 <malloc>:
 800aa70:	4b02      	ldr	r3, [pc, #8]	; (800aa7c <malloc+0xc>)
 800aa72:	4601      	mov	r1, r0
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	f000 b823 	b.w	800aac0 <_malloc_r>
 800aa7a:	bf00      	nop
 800aa7c:	2000006c 	.word	0x2000006c

0800aa80 <sbrk_aligned>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4e0e      	ldr	r6, [pc, #56]	; (800aabc <sbrk_aligned+0x3c>)
 800aa84:	460c      	mov	r4, r1
 800aa86:	6831      	ldr	r1, [r6, #0]
 800aa88:	4605      	mov	r5, r0
 800aa8a:	b911      	cbnz	r1, 800aa92 <sbrk_aligned+0x12>
 800aa8c:	f001 f818 	bl	800bac0 <_sbrk_r>
 800aa90:	6030      	str	r0, [r6, #0]
 800aa92:	4621      	mov	r1, r4
 800aa94:	4628      	mov	r0, r5
 800aa96:	f001 f813 	bl	800bac0 <_sbrk_r>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d00a      	beq.n	800aab4 <sbrk_aligned+0x34>
 800aa9e:	1cc4      	adds	r4, r0, #3
 800aaa0:	f024 0403 	bic.w	r4, r4, #3
 800aaa4:	42a0      	cmp	r0, r4
 800aaa6:	d007      	beq.n	800aab8 <sbrk_aligned+0x38>
 800aaa8:	1a21      	subs	r1, r4, r0
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f001 f808 	bl	800bac0 <_sbrk_r>
 800aab0:	3001      	adds	r0, #1
 800aab2:	d101      	bne.n	800aab8 <sbrk_aligned+0x38>
 800aab4:	f04f 34ff 	mov.w	r4, #4294967295
 800aab8:	4620      	mov	r0, r4
 800aaba:	bd70      	pop	{r4, r5, r6, pc}
 800aabc:	20001780 	.word	0x20001780

0800aac0 <_malloc_r>:
 800aac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac4:	1ccd      	adds	r5, r1, #3
 800aac6:	f025 0503 	bic.w	r5, r5, #3
 800aaca:	3508      	adds	r5, #8
 800aacc:	2d0c      	cmp	r5, #12
 800aace:	bf38      	it	cc
 800aad0:	250c      	movcc	r5, #12
 800aad2:	2d00      	cmp	r5, #0
 800aad4:	4607      	mov	r7, r0
 800aad6:	db01      	blt.n	800aadc <_malloc_r+0x1c>
 800aad8:	42a9      	cmp	r1, r5
 800aada:	d905      	bls.n	800aae8 <_malloc_r+0x28>
 800aadc:	230c      	movs	r3, #12
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	2600      	movs	r6, #0
 800aae2:	4630      	mov	r0, r6
 800aae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800abbc <_malloc_r+0xfc>
 800aaec:	f000 f868 	bl	800abc0 <__malloc_lock>
 800aaf0:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf4:	461c      	mov	r4, r3
 800aaf6:	bb5c      	cbnz	r4, 800ab50 <_malloc_r+0x90>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4638      	mov	r0, r7
 800aafc:	f7ff ffc0 	bl	800aa80 <sbrk_aligned>
 800ab00:	1c43      	adds	r3, r0, #1
 800ab02:	4604      	mov	r4, r0
 800ab04:	d155      	bne.n	800abb2 <_malloc_r+0xf2>
 800ab06:	f8d8 4000 	ldr.w	r4, [r8]
 800ab0a:	4626      	mov	r6, r4
 800ab0c:	2e00      	cmp	r6, #0
 800ab0e:	d145      	bne.n	800ab9c <_malloc_r+0xdc>
 800ab10:	2c00      	cmp	r4, #0
 800ab12:	d048      	beq.n	800aba6 <_malloc_r+0xe6>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	4631      	mov	r1, r6
 800ab18:	4638      	mov	r0, r7
 800ab1a:	eb04 0903 	add.w	r9, r4, r3
 800ab1e:	f000 ffcf 	bl	800bac0 <_sbrk_r>
 800ab22:	4581      	cmp	r9, r0
 800ab24:	d13f      	bne.n	800aba6 <_malloc_r+0xe6>
 800ab26:	6821      	ldr	r1, [r4, #0]
 800ab28:	1a6d      	subs	r5, r5, r1
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7ff ffa7 	bl	800aa80 <sbrk_aligned>
 800ab32:	3001      	adds	r0, #1
 800ab34:	d037      	beq.n	800aba6 <_malloc_r+0xe6>
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	442b      	add	r3, r5
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d038      	beq.n	800abb6 <_malloc_r+0xf6>
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	42a2      	cmp	r2, r4
 800ab48:	d12b      	bne.n	800aba2 <_malloc_r+0xe2>
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	e00f      	b.n	800ab70 <_malloc_r+0xb0>
 800ab50:	6822      	ldr	r2, [r4, #0]
 800ab52:	1b52      	subs	r2, r2, r5
 800ab54:	d41f      	bmi.n	800ab96 <_malloc_r+0xd6>
 800ab56:	2a0b      	cmp	r2, #11
 800ab58:	d917      	bls.n	800ab8a <_malloc_r+0xca>
 800ab5a:	1961      	adds	r1, r4, r5
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	6025      	str	r5, [r4, #0]
 800ab60:	bf18      	it	ne
 800ab62:	6059      	strne	r1, [r3, #4]
 800ab64:	6863      	ldr	r3, [r4, #4]
 800ab66:	bf08      	it	eq
 800ab68:	f8c8 1000 	streq.w	r1, [r8]
 800ab6c:	5162      	str	r2, [r4, r5]
 800ab6e:	604b      	str	r3, [r1, #4]
 800ab70:	4638      	mov	r0, r7
 800ab72:	f104 060b 	add.w	r6, r4, #11
 800ab76:	f000 f829 	bl	800abcc <__malloc_unlock>
 800ab7a:	f026 0607 	bic.w	r6, r6, #7
 800ab7e:	1d23      	adds	r3, r4, #4
 800ab80:	1af2      	subs	r2, r6, r3
 800ab82:	d0ae      	beq.n	800aae2 <_malloc_r+0x22>
 800ab84:	1b9b      	subs	r3, r3, r6
 800ab86:	50a3      	str	r3, [r4, r2]
 800ab88:	e7ab      	b.n	800aae2 <_malloc_r+0x22>
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	6862      	ldr	r2, [r4, #4]
 800ab8e:	d1dd      	bne.n	800ab4c <_malloc_r+0x8c>
 800ab90:	f8c8 2000 	str.w	r2, [r8]
 800ab94:	e7ec      	b.n	800ab70 <_malloc_r+0xb0>
 800ab96:	4623      	mov	r3, r4
 800ab98:	6864      	ldr	r4, [r4, #4]
 800ab9a:	e7ac      	b.n	800aaf6 <_malloc_r+0x36>
 800ab9c:	4634      	mov	r4, r6
 800ab9e:	6876      	ldr	r6, [r6, #4]
 800aba0:	e7b4      	b.n	800ab0c <_malloc_r+0x4c>
 800aba2:	4613      	mov	r3, r2
 800aba4:	e7cc      	b.n	800ab40 <_malloc_r+0x80>
 800aba6:	230c      	movs	r3, #12
 800aba8:	603b      	str	r3, [r7, #0]
 800abaa:	4638      	mov	r0, r7
 800abac:	f000 f80e 	bl	800abcc <__malloc_unlock>
 800abb0:	e797      	b.n	800aae2 <_malloc_r+0x22>
 800abb2:	6025      	str	r5, [r4, #0]
 800abb4:	e7dc      	b.n	800ab70 <_malloc_r+0xb0>
 800abb6:	605b      	str	r3, [r3, #4]
 800abb8:	deff      	udf	#255	; 0xff
 800abba:	bf00      	nop
 800abbc:	2000177c 	.word	0x2000177c

0800abc0 <__malloc_lock>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__malloc_lock+0x8>)
 800abc2:	f000 bfc9 	b.w	800bb58 <__retarget_lock_acquire_recursive>
 800abc6:	bf00      	nop
 800abc8:	200018c4 	.word	0x200018c4

0800abcc <__malloc_unlock>:
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <__malloc_unlock+0x8>)
 800abce:	f000 bfc4 	b.w	800bb5a <__retarget_lock_release_recursive>
 800abd2:	bf00      	nop
 800abd4:	200018c4 	.word	0x200018c4

0800abd8 <__cvt>:
 800abd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abdc:	ec55 4b10 	vmov	r4, r5, d0
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	460e      	mov	r6, r1
 800abe4:	4619      	mov	r1, r3
 800abe6:	462b      	mov	r3, r5
 800abe8:	bfbb      	ittet	lt
 800abea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800abee:	461d      	movlt	r5, r3
 800abf0:	2300      	movge	r3, #0
 800abf2:	232d      	movlt	r3, #45	; 0x2d
 800abf4:	700b      	strb	r3, [r1, #0]
 800abf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800abfc:	4691      	mov	r9, r2
 800abfe:	f023 0820 	bic.w	r8, r3, #32
 800ac02:	bfbc      	itt	lt
 800ac04:	4622      	movlt	r2, r4
 800ac06:	4614      	movlt	r4, r2
 800ac08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac0c:	d005      	beq.n	800ac1a <__cvt+0x42>
 800ac0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ac12:	d100      	bne.n	800ac16 <__cvt+0x3e>
 800ac14:	3601      	adds	r6, #1
 800ac16:	2102      	movs	r1, #2
 800ac18:	e000      	b.n	800ac1c <__cvt+0x44>
 800ac1a:	2103      	movs	r1, #3
 800ac1c:	ab03      	add	r3, sp, #12
 800ac1e:	9301      	str	r3, [sp, #4]
 800ac20:	ab02      	add	r3, sp, #8
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	ec45 4b10 	vmov	d0, r4, r5
 800ac28:	4653      	mov	r3, sl
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	f001 f820 	bl	800bc70 <_dtoa_r>
 800ac30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac34:	4607      	mov	r7, r0
 800ac36:	d102      	bne.n	800ac3e <__cvt+0x66>
 800ac38:	f019 0f01 	tst.w	r9, #1
 800ac3c:	d022      	beq.n	800ac84 <__cvt+0xac>
 800ac3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac42:	eb07 0906 	add.w	r9, r7, r6
 800ac46:	d110      	bne.n	800ac6a <__cvt+0x92>
 800ac48:	783b      	ldrb	r3, [r7, #0]
 800ac4a:	2b30      	cmp	r3, #48	; 0x30
 800ac4c:	d10a      	bne.n	800ac64 <__cvt+0x8c>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2300      	movs	r3, #0
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	f7f5 ff5f 	bl	8000b18 <__aeabi_dcmpeq>
 800ac5a:	b918      	cbnz	r0, 800ac64 <__cvt+0x8c>
 800ac5c:	f1c6 0601 	rsb	r6, r6, #1
 800ac60:	f8ca 6000 	str.w	r6, [sl]
 800ac64:	f8da 3000 	ldr.w	r3, [sl]
 800ac68:	4499      	add	r9, r3
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 ff51 	bl	8000b18 <__aeabi_dcmpeq>
 800ac76:	b108      	cbz	r0, 800ac7c <__cvt+0xa4>
 800ac78:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac7c:	2230      	movs	r2, #48	; 0x30
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	454b      	cmp	r3, r9
 800ac82:	d307      	bcc.n	800ac94 <__cvt+0xbc>
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac88:	1bdb      	subs	r3, r3, r7
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	b004      	add	sp, #16
 800ac90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac94:	1c59      	adds	r1, r3, #1
 800ac96:	9103      	str	r1, [sp, #12]
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e7f0      	b.n	800ac7e <__cvt+0xa6>

0800ac9c <__exponent>:
 800ac9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2900      	cmp	r1, #0
 800aca2:	bfb8      	it	lt
 800aca4:	4249      	neglt	r1, r1
 800aca6:	f803 2b02 	strb.w	r2, [r3], #2
 800acaa:	bfb4      	ite	lt
 800acac:	222d      	movlt	r2, #45	; 0x2d
 800acae:	222b      	movge	r2, #43	; 0x2b
 800acb0:	2909      	cmp	r1, #9
 800acb2:	7042      	strb	r2, [r0, #1]
 800acb4:	dd2a      	ble.n	800ad0c <__exponent+0x70>
 800acb6:	f10d 0207 	add.w	r2, sp, #7
 800acba:	4617      	mov	r7, r2
 800acbc:	260a      	movs	r6, #10
 800acbe:	4694      	mov	ip, r2
 800acc0:	fb91 f5f6 	sdiv	r5, r1, r6
 800acc4:	fb06 1415 	mls	r4, r6, r5, r1
 800acc8:	3430      	adds	r4, #48	; 0x30
 800acca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800acce:	460c      	mov	r4, r1
 800acd0:	2c63      	cmp	r4, #99	; 0x63
 800acd2:	f102 32ff 	add.w	r2, r2, #4294967295
 800acd6:	4629      	mov	r1, r5
 800acd8:	dcf1      	bgt.n	800acbe <__exponent+0x22>
 800acda:	3130      	adds	r1, #48	; 0x30
 800acdc:	f1ac 0402 	sub.w	r4, ip, #2
 800ace0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ace4:	1c41      	adds	r1, r0, #1
 800ace6:	4622      	mov	r2, r4
 800ace8:	42ba      	cmp	r2, r7
 800acea:	d30a      	bcc.n	800ad02 <__exponent+0x66>
 800acec:	f10d 0209 	add.w	r2, sp, #9
 800acf0:	eba2 020c 	sub.w	r2, r2, ip
 800acf4:	42bc      	cmp	r4, r7
 800acf6:	bf88      	it	hi
 800acf8:	2200      	movhi	r2, #0
 800acfa:	4413      	add	r3, r2
 800acfc:	1a18      	subs	r0, r3, r0
 800acfe:	b003      	add	sp, #12
 800ad00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad02:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ad06:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ad0a:	e7ed      	b.n	800ace8 <__exponent+0x4c>
 800ad0c:	2330      	movs	r3, #48	; 0x30
 800ad0e:	3130      	adds	r1, #48	; 0x30
 800ad10:	7083      	strb	r3, [r0, #2]
 800ad12:	70c1      	strb	r1, [r0, #3]
 800ad14:	1d03      	adds	r3, r0, #4
 800ad16:	e7f1      	b.n	800acfc <__exponent+0x60>

0800ad18 <_printf_float>:
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	ed2d 8b02 	vpush	{d8}
 800ad20:	b08d      	sub	sp, #52	; 0x34
 800ad22:	460c      	mov	r4, r1
 800ad24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ad28:	4616      	mov	r6, r2
 800ad2a:	461f      	mov	r7, r3
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	f000 fe8f 	bl	800ba50 <_localeconv_r>
 800ad32:	f8d0 a000 	ldr.w	sl, [r0]
 800ad36:	4650      	mov	r0, sl
 800ad38:	f7f5 fac2 	bl	80002c0 <strlen>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	9305      	str	r3, [sp, #20]
 800ad44:	f8d8 3000 	ldr.w	r3, [r8]
 800ad48:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ad4c:	3307      	adds	r3, #7
 800ad4e:	f023 0307 	bic.w	r3, r3, #7
 800ad52:	f103 0208 	add.w	r2, r3, #8
 800ad56:	f8c8 2000 	str.w	r2, [r8]
 800ad5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad62:	9307      	str	r3, [sp, #28]
 800ad64:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad68:	ee08 0a10 	vmov	s16, r0
 800ad6c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ad70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad74:	4b9e      	ldr	r3, [pc, #632]	; (800aff0 <_printf_float+0x2d8>)
 800ad76:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7a:	f7f5 feff 	bl	8000b7c <__aeabi_dcmpun>
 800ad7e:	bb88      	cbnz	r0, 800ade4 <_printf_float+0xcc>
 800ad80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad84:	4b9a      	ldr	r3, [pc, #616]	; (800aff0 <_printf_float+0x2d8>)
 800ad86:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8a:	f7f5 fed9 	bl	8000b40 <__aeabi_dcmple>
 800ad8e:	bb48      	cbnz	r0, 800ade4 <_printf_float+0xcc>
 800ad90:	2200      	movs	r2, #0
 800ad92:	2300      	movs	r3, #0
 800ad94:	4640      	mov	r0, r8
 800ad96:	4649      	mov	r1, r9
 800ad98:	f7f5 fec8 	bl	8000b2c <__aeabi_dcmplt>
 800ad9c:	b110      	cbz	r0, 800ada4 <_printf_float+0x8c>
 800ad9e:	232d      	movs	r3, #45	; 0x2d
 800ada0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ada4:	4a93      	ldr	r2, [pc, #588]	; (800aff4 <_printf_float+0x2dc>)
 800ada6:	4b94      	ldr	r3, [pc, #592]	; (800aff8 <_printf_float+0x2e0>)
 800ada8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800adac:	bf94      	ite	ls
 800adae:	4690      	movls	r8, r2
 800adb0:	4698      	movhi	r8, r3
 800adb2:	2303      	movs	r3, #3
 800adb4:	6123      	str	r3, [r4, #16]
 800adb6:	9b05      	ldr	r3, [sp, #20]
 800adb8:	f023 0304 	bic.w	r3, r3, #4
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	f04f 0900 	mov.w	r9, #0
 800adc2:	9700      	str	r7, [sp, #0]
 800adc4:	4633      	mov	r3, r6
 800adc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800adc8:	4621      	mov	r1, r4
 800adca:	4628      	mov	r0, r5
 800adcc:	f000 f9da 	bl	800b184 <_printf_common>
 800add0:	3001      	adds	r0, #1
 800add2:	f040 8090 	bne.w	800aef6 <_printf_float+0x1de>
 800add6:	f04f 30ff 	mov.w	r0, #4294967295
 800adda:	b00d      	add	sp, #52	; 0x34
 800addc:	ecbd 8b02 	vpop	{d8}
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	4642      	mov	r2, r8
 800ade6:	464b      	mov	r3, r9
 800ade8:	4640      	mov	r0, r8
 800adea:	4649      	mov	r1, r9
 800adec:	f7f5 fec6 	bl	8000b7c <__aeabi_dcmpun>
 800adf0:	b140      	cbz	r0, 800ae04 <_printf_float+0xec>
 800adf2:	464b      	mov	r3, r9
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bfbc      	itt	lt
 800adf8:	232d      	movlt	r3, #45	; 0x2d
 800adfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800adfe:	4a7f      	ldr	r2, [pc, #508]	; (800affc <_printf_float+0x2e4>)
 800ae00:	4b7f      	ldr	r3, [pc, #508]	; (800b000 <_printf_float+0x2e8>)
 800ae02:	e7d1      	b.n	800ada8 <_printf_float+0x90>
 800ae04:	6863      	ldr	r3, [r4, #4]
 800ae06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ae0a:	9206      	str	r2, [sp, #24]
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	d13f      	bne.n	800ae90 <_printf_float+0x178>
 800ae10:	2306      	movs	r3, #6
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	6861      	ldr	r1, [r4, #4]
 800ae18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9303      	str	r3, [sp, #12]
 800ae20:	ab0a      	add	r3, sp, #40	; 0x28
 800ae22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ae26:	ab09      	add	r3, sp, #36	; 0x24
 800ae28:	ec49 8b10 	vmov	d0, r8, r9
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	6022      	str	r2, [r4, #0]
 800ae30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae34:	4628      	mov	r0, r5
 800ae36:	f7ff fecf 	bl	800abd8 <__cvt>
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae3e:	2b47      	cmp	r3, #71	; 0x47
 800ae40:	4680      	mov	r8, r0
 800ae42:	d108      	bne.n	800ae56 <_printf_float+0x13e>
 800ae44:	1cc8      	adds	r0, r1, #3
 800ae46:	db02      	blt.n	800ae4e <_printf_float+0x136>
 800ae48:	6863      	ldr	r3, [r4, #4]
 800ae4a:	4299      	cmp	r1, r3
 800ae4c:	dd41      	ble.n	800aed2 <_printf_float+0x1ba>
 800ae4e:	f1ab 0302 	sub.w	r3, fp, #2
 800ae52:	fa5f fb83 	uxtb.w	fp, r3
 800ae56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae5a:	d820      	bhi.n	800ae9e <_printf_float+0x186>
 800ae5c:	3901      	subs	r1, #1
 800ae5e:	465a      	mov	r2, fp
 800ae60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae64:	9109      	str	r1, [sp, #36]	; 0x24
 800ae66:	f7ff ff19 	bl	800ac9c <__exponent>
 800ae6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae6c:	1813      	adds	r3, r2, r0
 800ae6e:	2a01      	cmp	r2, #1
 800ae70:	4681      	mov	r9, r0
 800ae72:	6123      	str	r3, [r4, #16]
 800ae74:	dc02      	bgt.n	800ae7c <_printf_float+0x164>
 800ae76:	6822      	ldr	r2, [r4, #0]
 800ae78:	07d2      	lsls	r2, r2, #31
 800ae7a:	d501      	bpl.n	800ae80 <_printf_float+0x168>
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	6123      	str	r3, [r4, #16]
 800ae80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d09c      	beq.n	800adc2 <_printf_float+0xaa>
 800ae88:	232d      	movs	r3, #45	; 0x2d
 800ae8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae8e:	e798      	b.n	800adc2 <_printf_float+0xaa>
 800ae90:	9a06      	ldr	r2, [sp, #24]
 800ae92:	2a47      	cmp	r2, #71	; 0x47
 800ae94:	d1be      	bne.n	800ae14 <_printf_float+0xfc>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1bc      	bne.n	800ae14 <_printf_float+0xfc>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e7b9      	b.n	800ae12 <_printf_float+0xfa>
 800ae9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aea2:	d118      	bne.n	800aed6 <_printf_float+0x1be>
 800aea4:	2900      	cmp	r1, #0
 800aea6:	6863      	ldr	r3, [r4, #4]
 800aea8:	dd0b      	ble.n	800aec2 <_printf_float+0x1aa>
 800aeaa:	6121      	str	r1, [r4, #16]
 800aeac:	b913      	cbnz	r3, 800aeb4 <_printf_float+0x19c>
 800aeae:	6822      	ldr	r2, [r4, #0]
 800aeb0:	07d0      	lsls	r0, r2, #31
 800aeb2:	d502      	bpl.n	800aeba <_printf_float+0x1a2>
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	440b      	add	r3, r1
 800aeb8:	6123      	str	r3, [r4, #16]
 800aeba:	65a1      	str	r1, [r4, #88]	; 0x58
 800aebc:	f04f 0900 	mov.w	r9, #0
 800aec0:	e7de      	b.n	800ae80 <_printf_float+0x168>
 800aec2:	b913      	cbnz	r3, 800aeca <_printf_float+0x1b2>
 800aec4:	6822      	ldr	r2, [r4, #0]
 800aec6:	07d2      	lsls	r2, r2, #31
 800aec8:	d501      	bpl.n	800aece <_printf_float+0x1b6>
 800aeca:	3302      	adds	r3, #2
 800aecc:	e7f4      	b.n	800aeb8 <_printf_float+0x1a0>
 800aece:	2301      	movs	r3, #1
 800aed0:	e7f2      	b.n	800aeb8 <_printf_float+0x1a0>
 800aed2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed8:	4299      	cmp	r1, r3
 800aeda:	db05      	blt.n	800aee8 <_printf_float+0x1d0>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	6121      	str	r1, [r4, #16]
 800aee0:	07d8      	lsls	r0, r3, #31
 800aee2:	d5ea      	bpl.n	800aeba <_printf_float+0x1a2>
 800aee4:	1c4b      	adds	r3, r1, #1
 800aee6:	e7e7      	b.n	800aeb8 <_printf_float+0x1a0>
 800aee8:	2900      	cmp	r1, #0
 800aeea:	bfd4      	ite	le
 800aeec:	f1c1 0202 	rsble	r2, r1, #2
 800aef0:	2201      	movgt	r2, #1
 800aef2:	4413      	add	r3, r2
 800aef4:	e7e0      	b.n	800aeb8 <_printf_float+0x1a0>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	055a      	lsls	r2, r3, #21
 800aefa:	d407      	bmi.n	800af0c <_printf_float+0x1f4>
 800aefc:	6923      	ldr	r3, [r4, #16]
 800aefe:	4642      	mov	r2, r8
 800af00:	4631      	mov	r1, r6
 800af02:	4628      	mov	r0, r5
 800af04:	47b8      	blx	r7
 800af06:	3001      	adds	r0, #1
 800af08:	d12c      	bne.n	800af64 <_printf_float+0x24c>
 800af0a:	e764      	b.n	800add6 <_printf_float+0xbe>
 800af0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af10:	f240 80e0 	bls.w	800b0d4 <_printf_float+0x3bc>
 800af14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af18:	2200      	movs	r2, #0
 800af1a:	2300      	movs	r3, #0
 800af1c:	f7f5 fdfc 	bl	8000b18 <__aeabi_dcmpeq>
 800af20:	2800      	cmp	r0, #0
 800af22:	d034      	beq.n	800af8e <_printf_float+0x276>
 800af24:	4a37      	ldr	r2, [pc, #220]	; (800b004 <_printf_float+0x2ec>)
 800af26:	2301      	movs	r3, #1
 800af28:	4631      	mov	r1, r6
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b8      	blx	r7
 800af2e:	3001      	adds	r0, #1
 800af30:	f43f af51 	beq.w	800add6 <_printf_float+0xbe>
 800af34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af38:	429a      	cmp	r2, r3
 800af3a:	db02      	blt.n	800af42 <_printf_float+0x22a>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	07d8      	lsls	r0, r3, #31
 800af40:	d510      	bpl.n	800af64 <_printf_float+0x24c>
 800af42:	ee18 3a10 	vmov	r3, s16
 800af46:	4652      	mov	r2, sl
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f af41 	beq.w	800add6 <_printf_float+0xbe>
 800af54:	f04f 0800 	mov.w	r8, #0
 800af58:	f104 091a 	add.w	r9, r4, #26
 800af5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5e:	3b01      	subs	r3, #1
 800af60:	4543      	cmp	r3, r8
 800af62:	dc09      	bgt.n	800af78 <_printf_float+0x260>
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	079b      	lsls	r3, r3, #30
 800af68:	f100 8107 	bmi.w	800b17a <_printf_float+0x462>
 800af6c:	68e0      	ldr	r0, [r4, #12]
 800af6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af70:	4298      	cmp	r0, r3
 800af72:	bfb8      	it	lt
 800af74:	4618      	movlt	r0, r3
 800af76:	e730      	b.n	800adda <_printf_float+0xc2>
 800af78:	2301      	movs	r3, #1
 800af7a:	464a      	mov	r2, r9
 800af7c:	4631      	mov	r1, r6
 800af7e:	4628      	mov	r0, r5
 800af80:	47b8      	blx	r7
 800af82:	3001      	adds	r0, #1
 800af84:	f43f af27 	beq.w	800add6 <_printf_float+0xbe>
 800af88:	f108 0801 	add.w	r8, r8, #1
 800af8c:	e7e6      	b.n	800af5c <_printf_float+0x244>
 800af8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	dc39      	bgt.n	800b008 <_printf_float+0x2f0>
 800af94:	4a1b      	ldr	r2, [pc, #108]	; (800b004 <_printf_float+0x2ec>)
 800af96:	2301      	movs	r3, #1
 800af98:	4631      	mov	r1, r6
 800af9a:	4628      	mov	r0, r5
 800af9c:	47b8      	blx	r7
 800af9e:	3001      	adds	r0, #1
 800afa0:	f43f af19 	beq.w	800add6 <_printf_float+0xbe>
 800afa4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800afa8:	4313      	orrs	r3, r2
 800afaa:	d102      	bne.n	800afb2 <_printf_float+0x29a>
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	07d9      	lsls	r1, r3, #31
 800afb0:	d5d8      	bpl.n	800af64 <_printf_float+0x24c>
 800afb2:	ee18 3a10 	vmov	r3, s16
 800afb6:	4652      	mov	r2, sl
 800afb8:	4631      	mov	r1, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	47b8      	blx	r7
 800afbe:	3001      	adds	r0, #1
 800afc0:	f43f af09 	beq.w	800add6 <_printf_float+0xbe>
 800afc4:	f04f 0900 	mov.w	r9, #0
 800afc8:	f104 0a1a 	add.w	sl, r4, #26
 800afcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afce:	425b      	negs	r3, r3
 800afd0:	454b      	cmp	r3, r9
 800afd2:	dc01      	bgt.n	800afd8 <_printf_float+0x2c0>
 800afd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd6:	e792      	b.n	800aefe <_printf_float+0x1e6>
 800afd8:	2301      	movs	r3, #1
 800afda:	4652      	mov	r2, sl
 800afdc:	4631      	mov	r1, r6
 800afde:	4628      	mov	r0, r5
 800afe0:	47b8      	blx	r7
 800afe2:	3001      	adds	r0, #1
 800afe4:	f43f aef7 	beq.w	800add6 <_printf_float+0xbe>
 800afe8:	f109 0901 	add.w	r9, r9, #1
 800afec:	e7ee      	b.n	800afcc <_printf_float+0x2b4>
 800afee:	bf00      	nop
 800aff0:	7fefffff 	.word	0x7fefffff
 800aff4:	0800f1d4 	.word	0x0800f1d4
 800aff8:	0800f1d8 	.word	0x0800f1d8
 800affc:	0800f1dc 	.word	0x0800f1dc
 800b000:	0800f1e0 	.word	0x0800f1e0
 800b004:	0800f1e4 	.word	0x0800f1e4
 800b008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b00a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b00c:	429a      	cmp	r2, r3
 800b00e:	bfa8      	it	ge
 800b010:	461a      	movge	r2, r3
 800b012:	2a00      	cmp	r2, #0
 800b014:	4691      	mov	r9, r2
 800b016:	dc37      	bgt.n	800b088 <_printf_float+0x370>
 800b018:	f04f 0b00 	mov.w	fp, #0
 800b01c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b020:	f104 021a 	add.w	r2, r4, #26
 800b024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	eba3 0309 	sub.w	r3, r3, r9
 800b02c:	455b      	cmp	r3, fp
 800b02e:	dc33      	bgt.n	800b098 <_printf_float+0x380>
 800b030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b034:	429a      	cmp	r2, r3
 800b036:	db3b      	blt.n	800b0b0 <_printf_float+0x398>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	07da      	lsls	r2, r3, #31
 800b03c:	d438      	bmi.n	800b0b0 <_printf_float+0x398>
 800b03e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b042:	eba2 0903 	sub.w	r9, r2, r3
 800b046:	9b05      	ldr	r3, [sp, #20]
 800b048:	1ad2      	subs	r2, r2, r3
 800b04a:	4591      	cmp	r9, r2
 800b04c:	bfa8      	it	ge
 800b04e:	4691      	movge	r9, r2
 800b050:	f1b9 0f00 	cmp.w	r9, #0
 800b054:	dc35      	bgt.n	800b0c2 <_printf_float+0x3aa>
 800b056:	f04f 0800 	mov.w	r8, #0
 800b05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b05e:	f104 0a1a 	add.w	sl, r4, #26
 800b062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	eba3 0309 	sub.w	r3, r3, r9
 800b06c:	4543      	cmp	r3, r8
 800b06e:	f77f af79 	ble.w	800af64 <_printf_float+0x24c>
 800b072:	2301      	movs	r3, #1
 800b074:	4652      	mov	r2, sl
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	f43f aeaa 	beq.w	800add6 <_printf_float+0xbe>
 800b082:	f108 0801 	add.w	r8, r8, #1
 800b086:	e7ec      	b.n	800b062 <_printf_float+0x34a>
 800b088:	4613      	mov	r3, r2
 800b08a:	4631      	mov	r1, r6
 800b08c:	4642      	mov	r2, r8
 800b08e:	4628      	mov	r0, r5
 800b090:	47b8      	blx	r7
 800b092:	3001      	adds	r0, #1
 800b094:	d1c0      	bne.n	800b018 <_printf_float+0x300>
 800b096:	e69e      	b.n	800add6 <_printf_float+0xbe>
 800b098:	2301      	movs	r3, #1
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	9205      	str	r2, [sp, #20]
 800b0a0:	47b8      	blx	r7
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f43f ae97 	beq.w	800add6 <_printf_float+0xbe>
 800b0a8:	9a05      	ldr	r2, [sp, #20]
 800b0aa:	f10b 0b01 	add.w	fp, fp, #1
 800b0ae:	e7b9      	b.n	800b024 <_printf_float+0x30c>
 800b0b0:	ee18 3a10 	vmov	r3, s16
 800b0b4:	4652      	mov	r2, sl
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	47b8      	blx	r7
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d1be      	bne.n	800b03e <_printf_float+0x326>
 800b0c0:	e689      	b.n	800add6 <_printf_float+0xbe>
 800b0c2:	9a05      	ldr	r2, [sp, #20]
 800b0c4:	464b      	mov	r3, r9
 800b0c6:	4442      	add	r2, r8
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	47b8      	blx	r7
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d1c1      	bne.n	800b056 <_printf_float+0x33e>
 800b0d2:	e680      	b.n	800add6 <_printf_float+0xbe>
 800b0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d6:	2a01      	cmp	r2, #1
 800b0d8:	dc01      	bgt.n	800b0de <_printf_float+0x3c6>
 800b0da:	07db      	lsls	r3, r3, #31
 800b0dc:	d53a      	bpl.n	800b154 <_printf_float+0x43c>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	47b8      	blx	r7
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	f43f ae74 	beq.w	800add6 <_printf_float+0xbe>
 800b0ee:	ee18 3a10 	vmov	r3, s16
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	f43f ae6b 	beq.w	800add6 <_printf_float+0xbe>
 800b100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b104:	2200      	movs	r2, #0
 800b106:	2300      	movs	r3, #0
 800b108:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b10c:	f7f5 fd04 	bl	8000b18 <__aeabi_dcmpeq>
 800b110:	b9d8      	cbnz	r0, 800b14a <_printf_float+0x432>
 800b112:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b116:	f108 0201 	add.w	r2, r8, #1
 800b11a:	4631      	mov	r1, r6
 800b11c:	4628      	mov	r0, r5
 800b11e:	47b8      	blx	r7
 800b120:	3001      	adds	r0, #1
 800b122:	d10e      	bne.n	800b142 <_printf_float+0x42a>
 800b124:	e657      	b.n	800add6 <_printf_float+0xbe>
 800b126:	2301      	movs	r3, #1
 800b128:	4652      	mov	r2, sl
 800b12a:	4631      	mov	r1, r6
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b8      	blx	r7
 800b130:	3001      	adds	r0, #1
 800b132:	f43f ae50 	beq.w	800add6 <_printf_float+0xbe>
 800b136:	f108 0801 	add.w	r8, r8, #1
 800b13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b13c:	3b01      	subs	r3, #1
 800b13e:	4543      	cmp	r3, r8
 800b140:	dcf1      	bgt.n	800b126 <_printf_float+0x40e>
 800b142:	464b      	mov	r3, r9
 800b144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b148:	e6da      	b.n	800af00 <_printf_float+0x1e8>
 800b14a:	f04f 0800 	mov.w	r8, #0
 800b14e:	f104 0a1a 	add.w	sl, r4, #26
 800b152:	e7f2      	b.n	800b13a <_printf_float+0x422>
 800b154:	2301      	movs	r3, #1
 800b156:	4642      	mov	r2, r8
 800b158:	e7df      	b.n	800b11a <_printf_float+0x402>
 800b15a:	2301      	movs	r3, #1
 800b15c:	464a      	mov	r2, r9
 800b15e:	4631      	mov	r1, r6
 800b160:	4628      	mov	r0, r5
 800b162:	47b8      	blx	r7
 800b164:	3001      	adds	r0, #1
 800b166:	f43f ae36 	beq.w	800add6 <_printf_float+0xbe>
 800b16a:	f108 0801 	add.w	r8, r8, #1
 800b16e:	68e3      	ldr	r3, [r4, #12]
 800b170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b172:	1a5b      	subs	r3, r3, r1
 800b174:	4543      	cmp	r3, r8
 800b176:	dcf0      	bgt.n	800b15a <_printf_float+0x442>
 800b178:	e6f8      	b.n	800af6c <_printf_float+0x254>
 800b17a:	f04f 0800 	mov.w	r8, #0
 800b17e:	f104 0919 	add.w	r9, r4, #25
 800b182:	e7f4      	b.n	800b16e <_printf_float+0x456>

0800b184 <_printf_common>:
 800b184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b188:	4616      	mov	r6, r2
 800b18a:	4699      	mov	r9, r3
 800b18c:	688a      	ldr	r2, [r1, #8]
 800b18e:	690b      	ldr	r3, [r1, #16]
 800b190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b194:	4293      	cmp	r3, r2
 800b196:	bfb8      	it	lt
 800b198:	4613      	movlt	r3, r2
 800b19a:	6033      	str	r3, [r6, #0]
 800b19c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	b10a      	cbz	r2, 800b1aa <_printf_common+0x26>
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	6033      	str	r3, [r6, #0]
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	0699      	lsls	r1, r3, #26
 800b1ae:	bf42      	ittt	mi
 800b1b0:	6833      	ldrmi	r3, [r6, #0]
 800b1b2:	3302      	addmi	r3, #2
 800b1b4:	6033      	strmi	r3, [r6, #0]
 800b1b6:	6825      	ldr	r5, [r4, #0]
 800b1b8:	f015 0506 	ands.w	r5, r5, #6
 800b1bc:	d106      	bne.n	800b1cc <_printf_common+0x48>
 800b1be:	f104 0a19 	add.w	sl, r4, #25
 800b1c2:	68e3      	ldr	r3, [r4, #12]
 800b1c4:	6832      	ldr	r2, [r6, #0]
 800b1c6:	1a9b      	subs	r3, r3, r2
 800b1c8:	42ab      	cmp	r3, r5
 800b1ca:	dc26      	bgt.n	800b21a <_printf_common+0x96>
 800b1cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1d0:	1e13      	subs	r3, r2, #0
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	bf18      	it	ne
 800b1d6:	2301      	movne	r3, #1
 800b1d8:	0692      	lsls	r2, r2, #26
 800b1da:	d42b      	bmi.n	800b234 <_printf_common+0xb0>
 800b1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	47c0      	blx	r8
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	d01e      	beq.n	800b228 <_printf_common+0xa4>
 800b1ea:	6823      	ldr	r3, [r4, #0]
 800b1ec:	6922      	ldr	r2, [r4, #16]
 800b1ee:	f003 0306 	and.w	r3, r3, #6
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	bf02      	ittt	eq
 800b1f6:	68e5      	ldreq	r5, [r4, #12]
 800b1f8:	6833      	ldreq	r3, [r6, #0]
 800b1fa:	1aed      	subeq	r5, r5, r3
 800b1fc:	68a3      	ldr	r3, [r4, #8]
 800b1fe:	bf0c      	ite	eq
 800b200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b204:	2500      	movne	r5, #0
 800b206:	4293      	cmp	r3, r2
 800b208:	bfc4      	itt	gt
 800b20a:	1a9b      	subgt	r3, r3, r2
 800b20c:	18ed      	addgt	r5, r5, r3
 800b20e:	2600      	movs	r6, #0
 800b210:	341a      	adds	r4, #26
 800b212:	42b5      	cmp	r5, r6
 800b214:	d11a      	bne.n	800b24c <_printf_common+0xc8>
 800b216:	2000      	movs	r0, #0
 800b218:	e008      	b.n	800b22c <_printf_common+0xa8>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4652      	mov	r2, sl
 800b21e:	4649      	mov	r1, r9
 800b220:	4638      	mov	r0, r7
 800b222:	47c0      	blx	r8
 800b224:	3001      	adds	r0, #1
 800b226:	d103      	bne.n	800b230 <_printf_common+0xac>
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b230:	3501      	adds	r5, #1
 800b232:	e7c6      	b.n	800b1c2 <_printf_common+0x3e>
 800b234:	18e1      	adds	r1, r4, r3
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	2030      	movs	r0, #48	; 0x30
 800b23a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b23e:	4422      	add	r2, r4
 800b240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b248:	3302      	adds	r3, #2
 800b24a:	e7c7      	b.n	800b1dc <_printf_common+0x58>
 800b24c:	2301      	movs	r3, #1
 800b24e:	4622      	mov	r2, r4
 800b250:	4649      	mov	r1, r9
 800b252:	4638      	mov	r0, r7
 800b254:	47c0      	blx	r8
 800b256:	3001      	adds	r0, #1
 800b258:	d0e6      	beq.n	800b228 <_printf_common+0xa4>
 800b25a:	3601      	adds	r6, #1
 800b25c:	e7d9      	b.n	800b212 <_printf_common+0x8e>
	...

0800b260 <_printf_i>:
 800b260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b264:	7e0f      	ldrb	r7, [r1, #24]
 800b266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b268:	2f78      	cmp	r7, #120	; 0x78
 800b26a:	4691      	mov	r9, r2
 800b26c:	4680      	mov	r8, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	469a      	mov	sl, r3
 800b272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b276:	d807      	bhi.n	800b288 <_printf_i+0x28>
 800b278:	2f62      	cmp	r7, #98	; 0x62
 800b27a:	d80a      	bhi.n	800b292 <_printf_i+0x32>
 800b27c:	2f00      	cmp	r7, #0
 800b27e:	f000 80d4 	beq.w	800b42a <_printf_i+0x1ca>
 800b282:	2f58      	cmp	r7, #88	; 0x58
 800b284:	f000 80c0 	beq.w	800b408 <_printf_i+0x1a8>
 800b288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b290:	e03a      	b.n	800b308 <_printf_i+0xa8>
 800b292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b296:	2b15      	cmp	r3, #21
 800b298:	d8f6      	bhi.n	800b288 <_printf_i+0x28>
 800b29a:	a101      	add	r1, pc, #4	; (adr r1, 800b2a0 <_printf_i+0x40>)
 800b29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2a0:	0800b2f9 	.word	0x0800b2f9
 800b2a4:	0800b30d 	.word	0x0800b30d
 800b2a8:	0800b289 	.word	0x0800b289
 800b2ac:	0800b289 	.word	0x0800b289
 800b2b0:	0800b289 	.word	0x0800b289
 800b2b4:	0800b289 	.word	0x0800b289
 800b2b8:	0800b30d 	.word	0x0800b30d
 800b2bc:	0800b289 	.word	0x0800b289
 800b2c0:	0800b289 	.word	0x0800b289
 800b2c4:	0800b289 	.word	0x0800b289
 800b2c8:	0800b289 	.word	0x0800b289
 800b2cc:	0800b411 	.word	0x0800b411
 800b2d0:	0800b339 	.word	0x0800b339
 800b2d4:	0800b3cb 	.word	0x0800b3cb
 800b2d8:	0800b289 	.word	0x0800b289
 800b2dc:	0800b289 	.word	0x0800b289
 800b2e0:	0800b433 	.word	0x0800b433
 800b2e4:	0800b289 	.word	0x0800b289
 800b2e8:	0800b339 	.word	0x0800b339
 800b2ec:	0800b289 	.word	0x0800b289
 800b2f0:	0800b289 	.word	0x0800b289
 800b2f4:	0800b3d3 	.word	0x0800b3d3
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	1d1a      	adds	r2, r3, #4
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	602a      	str	r2, [r5, #0]
 800b300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b308:	2301      	movs	r3, #1
 800b30a:	e09f      	b.n	800b44c <_printf_i+0x1ec>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	682b      	ldr	r3, [r5, #0]
 800b310:	0607      	lsls	r7, r0, #24
 800b312:	f103 0104 	add.w	r1, r3, #4
 800b316:	6029      	str	r1, [r5, #0]
 800b318:	d501      	bpl.n	800b31e <_printf_i+0xbe>
 800b31a:	681e      	ldr	r6, [r3, #0]
 800b31c:	e003      	b.n	800b326 <_printf_i+0xc6>
 800b31e:	0646      	lsls	r6, r0, #25
 800b320:	d5fb      	bpl.n	800b31a <_printf_i+0xba>
 800b322:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b326:	2e00      	cmp	r6, #0
 800b328:	da03      	bge.n	800b332 <_printf_i+0xd2>
 800b32a:	232d      	movs	r3, #45	; 0x2d
 800b32c:	4276      	negs	r6, r6
 800b32e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b332:	485a      	ldr	r0, [pc, #360]	; (800b49c <_printf_i+0x23c>)
 800b334:	230a      	movs	r3, #10
 800b336:	e012      	b.n	800b35e <_printf_i+0xfe>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	6820      	ldr	r0, [r4, #0]
 800b33c:	1d19      	adds	r1, r3, #4
 800b33e:	6029      	str	r1, [r5, #0]
 800b340:	0605      	lsls	r5, r0, #24
 800b342:	d501      	bpl.n	800b348 <_printf_i+0xe8>
 800b344:	681e      	ldr	r6, [r3, #0]
 800b346:	e002      	b.n	800b34e <_printf_i+0xee>
 800b348:	0641      	lsls	r1, r0, #25
 800b34a:	d5fb      	bpl.n	800b344 <_printf_i+0xe4>
 800b34c:	881e      	ldrh	r6, [r3, #0]
 800b34e:	4853      	ldr	r0, [pc, #332]	; (800b49c <_printf_i+0x23c>)
 800b350:	2f6f      	cmp	r7, #111	; 0x6f
 800b352:	bf0c      	ite	eq
 800b354:	2308      	moveq	r3, #8
 800b356:	230a      	movne	r3, #10
 800b358:	2100      	movs	r1, #0
 800b35a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b35e:	6865      	ldr	r5, [r4, #4]
 800b360:	60a5      	str	r5, [r4, #8]
 800b362:	2d00      	cmp	r5, #0
 800b364:	bfa2      	ittt	ge
 800b366:	6821      	ldrge	r1, [r4, #0]
 800b368:	f021 0104 	bicge.w	r1, r1, #4
 800b36c:	6021      	strge	r1, [r4, #0]
 800b36e:	b90e      	cbnz	r6, 800b374 <_printf_i+0x114>
 800b370:	2d00      	cmp	r5, #0
 800b372:	d04b      	beq.n	800b40c <_printf_i+0x1ac>
 800b374:	4615      	mov	r5, r2
 800b376:	fbb6 f1f3 	udiv	r1, r6, r3
 800b37a:	fb03 6711 	mls	r7, r3, r1, r6
 800b37e:	5dc7      	ldrb	r7, [r0, r7]
 800b380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b384:	4637      	mov	r7, r6
 800b386:	42bb      	cmp	r3, r7
 800b388:	460e      	mov	r6, r1
 800b38a:	d9f4      	bls.n	800b376 <_printf_i+0x116>
 800b38c:	2b08      	cmp	r3, #8
 800b38e:	d10b      	bne.n	800b3a8 <_printf_i+0x148>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	07de      	lsls	r6, r3, #31
 800b394:	d508      	bpl.n	800b3a8 <_printf_i+0x148>
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	6861      	ldr	r1, [r4, #4]
 800b39a:	4299      	cmp	r1, r3
 800b39c:	bfde      	ittt	le
 800b39e:	2330      	movle	r3, #48	; 0x30
 800b3a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3a8:	1b52      	subs	r2, r2, r5
 800b3aa:	6122      	str	r2, [r4, #16]
 800b3ac:	f8cd a000 	str.w	sl, [sp]
 800b3b0:	464b      	mov	r3, r9
 800b3b2:	aa03      	add	r2, sp, #12
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	f7ff fee4 	bl	800b184 <_printf_common>
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d14a      	bne.n	800b456 <_printf_i+0x1f6>
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	b004      	add	sp, #16
 800b3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	f043 0320 	orr.w	r3, r3, #32
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	4833      	ldr	r0, [pc, #204]	; (800b4a0 <_printf_i+0x240>)
 800b3d4:	2778      	movs	r7, #120	; 0x78
 800b3d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	6829      	ldr	r1, [r5, #0]
 800b3de:	061f      	lsls	r7, r3, #24
 800b3e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3e4:	d402      	bmi.n	800b3ec <_printf_i+0x18c>
 800b3e6:	065f      	lsls	r7, r3, #25
 800b3e8:	bf48      	it	mi
 800b3ea:	b2b6      	uxthmi	r6, r6
 800b3ec:	07df      	lsls	r7, r3, #31
 800b3ee:	bf48      	it	mi
 800b3f0:	f043 0320 	orrmi.w	r3, r3, #32
 800b3f4:	6029      	str	r1, [r5, #0]
 800b3f6:	bf48      	it	mi
 800b3f8:	6023      	strmi	r3, [r4, #0]
 800b3fa:	b91e      	cbnz	r6, 800b404 <_printf_i+0x1a4>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	f023 0320 	bic.w	r3, r3, #32
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	2310      	movs	r3, #16
 800b406:	e7a7      	b.n	800b358 <_printf_i+0xf8>
 800b408:	4824      	ldr	r0, [pc, #144]	; (800b49c <_printf_i+0x23c>)
 800b40a:	e7e4      	b.n	800b3d6 <_printf_i+0x176>
 800b40c:	4615      	mov	r5, r2
 800b40e:	e7bd      	b.n	800b38c <_printf_i+0x12c>
 800b410:	682b      	ldr	r3, [r5, #0]
 800b412:	6826      	ldr	r6, [r4, #0]
 800b414:	6961      	ldr	r1, [r4, #20]
 800b416:	1d18      	adds	r0, r3, #4
 800b418:	6028      	str	r0, [r5, #0]
 800b41a:	0635      	lsls	r5, r6, #24
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	d501      	bpl.n	800b424 <_printf_i+0x1c4>
 800b420:	6019      	str	r1, [r3, #0]
 800b422:	e002      	b.n	800b42a <_printf_i+0x1ca>
 800b424:	0670      	lsls	r0, r6, #25
 800b426:	d5fb      	bpl.n	800b420 <_printf_i+0x1c0>
 800b428:	8019      	strh	r1, [r3, #0]
 800b42a:	2300      	movs	r3, #0
 800b42c:	6123      	str	r3, [r4, #16]
 800b42e:	4615      	mov	r5, r2
 800b430:	e7bc      	b.n	800b3ac <_printf_i+0x14c>
 800b432:	682b      	ldr	r3, [r5, #0]
 800b434:	1d1a      	adds	r2, r3, #4
 800b436:	602a      	str	r2, [r5, #0]
 800b438:	681d      	ldr	r5, [r3, #0]
 800b43a:	6862      	ldr	r2, [r4, #4]
 800b43c:	2100      	movs	r1, #0
 800b43e:	4628      	mov	r0, r5
 800b440:	f7f4 feee 	bl	8000220 <memchr>
 800b444:	b108      	cbz	r0, 800b44a <_printf_i+0x1ea>
 800b446:	1b40      	subs	r0, r0, r5
 800b448:	6060      	str	r0, [r4, #4]
 800b44a:	6863      	ldr	r3, [r4, #4]
 800b44c:	6123      	str	r3, [r4, #16]
 800b44e:	2300      	movs	r3, #0
 800b450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b454:	e7aa      	b.n	800b3ac <_printf_i+0x14c>
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	462a      	mov	r2, r5
 800b45a:	4649      	mov	r1, r9
 800b45c:	4640      	mov	r0, r8
 800b45e:	47d0      	blx	sl
 800b460:	3001      	adds	r0, #1
 800b462:	d0ad      	beq.n	800b3c0 <_printf_i+0x160>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	079b      	lsls	r3, r3, #30
 800b468:	d413      	bmi.n	800b492 <_printf_i+0x232>
 800b46a:	68e0      	ldr	r0, [r4, #12]
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	4298      	cmp	r0, r3
 800b470:	bfb8      	it	lt
 800b472:	4618      	movlt	r0, r3
 800b474:	e7a6      	b.n	800b3c4 <_printf_i+0x164>
 800b476:	2301      	movs	r3, #1
 800b478:	4632      	mov	r2, r6
 800b47a:	4649      	mov	r1, r9
 800b47c:	4640      	mov	r0, r8
 800b47e:	47d0      	blx	sl
 800b480:	3001      	adds	r0, #1
 800b482:	d09d      	beq.n	800b3c0 <_printf_i+0x160>
 800b484:	3501      	adds	r5, #1
 800b486:	68e3      	ldr	r3, [r4, #12]
 800b488:	9903      	ldr	r1, [sp, #12]
 800b48a:	1a5b      	subs	r3, r3, r1
 800b48c:	42ab      	cmp	r3, r5
 800b48e:	dcf2      	bgt.n	800b476 <_printf_i+0x216>
 800b490:	e7eb      	b.n	800b46a <_printf_i+0x20a>
 800b492:	2500      	movs	r5, #0
 800b494:	f104 0619 	add.w	r6, r4, #25
 800b498:	e7f5      	b.n	800b486 <_printf_i+0x226>
 800b49a:	bf00      	nop
 800b49c:	0800f1e6 	.word	0x0800f1e6
 800b4a0:	0800f1f7 	.word	0x0800f1f7

0800b4a4 <std>:
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	b510      	push	{r4, lr}
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b4ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4b2:	6083      	str	r3, [r0, #8]
 800b4b4:	8181      	strh	r1, [r0, #12]
 800b4b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b4b8:	81c2      	strh	r2, [r0, #14]
 800b4ba:	6183      	str	r3, [r0, #24]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	2208      	movs	r2, #8
 800b4c0:	305c      	adds	r0, #92	; 0x5c
 800b4c2:	f000 fabd 	bl	800ba40 <memset>
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <std+0x38>)
 800b4c8:	6263      	str	r3, [r4, #36]	; 0x24
 800b4ca:	4b05      	ldr	r3, [pc, #20]	; (800b4e0 <std+0x3c>)
 800b4cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <std+0x40>)
 800b4d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4d2:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <std+0x44>)
 800b4d4:	6224      	str	r4, [r4, #32]
 800b4d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b4d8:	bd10      	pop	{r4, pc}
 800b4da:	bf00      	nop
 800b4dc:	0800b84d 	.word	0x0800b84d
 800b4e0:	0800b86f 	.word	0x0800b86f
 800b4e4:	0800b8a7 	.word	0x0800b8a7
 800b4e8:	0800b8cb 	.word	0x0800b8cb

0800b4ec <stdio_exit_handler>:
 800b4ec:	4a02      	ldr	r2, [pc, #8]	; (800b4f8 <stdio_exit_handler+0xc>)
 800b4ee:	4903      	ldr	r1, [pc, #12]	; (800b4fc <stdio_exit_handler+0x10>)
 800b4f0:	4803      	ldr	r0, [pc, #12]	; (800b500 <stdio_exit_handler+0x14>)
 800b4f2:	f000 b869 	b.w	800b5c8 <_fwalk_sglue>
 800b4f6:	bf00      	nop
 800b4f8:	20000014 	.word	0x20000014
 800b4fc:	0800d629 	.word	0x0800d629
 800b500:	20000020 	.word	0x20000020

0800b504 <cleanup_stdio>:
 800b504:	6841      	ldr	r1, [r0, #4]
 800b506:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <cleanup_stdio+0x34>)
 800b508:	4299      	cmp	r1, r3
 800b50a:	b510      	push	{r4, lr}
 800b50c:	4604      	mov	r4, r0
 800b50e:	d001      	beq.n	800b514 <cleanup_stdio+0x10>
 800b510:	f002 f88a 	bl	800d628 <_fflush_r>
 800b514:	68a1      	ldr	r1, [r4, #8]
 800b516:	4b09      	ldr	r3, [pc, #36]	; (800b53c <cleanup_stdio+0x38>)
 800b518:	4299      	cmp	r1, r3
 800b51a:	d002      	beq.n	800b522 <cleanup_stdio+0x1e>
 800b51c:	4620      	mov	r0, r4
 800b51e:	f002 f883 	bl	800d628 <_fflush_r>
 800b522:	68e1      	ldr	r1, [r4, #12]
 800b524:	4b06      	ldr	r3, [pc, #24]	; (800b540 <cleanup_stdio+0x3c>)
 800b526:	4299      	cmp	r1, r3
 800b528:	d004      	beq.n	800b534 <cleanup_stdio+0x30>
 800b52a:	4620      	mov	r0, r4
 800b52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b530:	f002 b87a 	b.w	800d628 <_fflush_r>
 800b534:	bd10      	pop	{r4, pc}
 800b536:	bf00      	nop
 800b538:	20001784 	.word	0x20001784
 800b53c:	200017ec 	.word	0x200017ec
 800b540:	20001854 	.word	0x20001854

0800b544 <global_stdio_init.part.0>:
 800b544:	b510      	push	{r4, lr}
 800b546:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <global_stdio_init.part.0+0x30>)
 800b548:	4c0b      	ldr	r4, [pc, #44]	; (800b578 <global_stdio_init.part.0+0x34>)
 800b54a:	4a0c      	ldr	r2, [pc, #48]	; (800b57c <global_stdio_init.part.0+0x38>)
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	4620      	mov	r0, r4
 800b550:	2200      	movs	r2, #0
 800b552:	2104      	movs	r1, #4
 800b554:	f7ff ffa6 	bl	800b4a4 <std>
 800b558:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b55c:	2201      	movs	r2, #1
 800b55e:	2109      	movs	r1, #9
 800b560:	f7ff ffa0 	bl	800b4a4 <std>
 800b564:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b568:	2202      	movs	r2, #2
 800b56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b56e:	2112      	movs	r1, #18
 800b570:	f7ff bf98 	b.w	800b4a4 <std>
 800b574:	200018bc 	.word	0x200018bc
 800b578:	20001784 	.word	0x20001784
 800b57c:	0800b4ed 	.word	0x0800b4ed

0800b580 <__sfp_lock_acquire>:
 800b580:	4801      	ldr	r0, [pc, #4]	; (800b588 <__sfp_lock_acquire+0x8>)
 800b582:	f000 bae9 	b.w	800bb58 <__retarget_lock_acquire_recursive>
 800b586:	bf00      	nop
 800b588:	200018c5 	.word	0x200018c5

0800b58c <__sfp_lock_release>:
 800b58c:	4801      	ldr	r0, [pc, #4]	; (800b594 <__sfp_lock_release+0x8>)
 800b58e:	f000 bae4 	b.w	800bb5a <__retarget_lock_release_recursive>
 800b592:	bf00      	nop
 800b594:	200018c5 	.word	0x200018c5

0800b598 <__sinit>:
 800b598:	b510      	push	{r4, lr}
 800b59a:	4604      	mov	r4, r0
 800b59c:	f7ff fff0 	bl	800b580 <__sfp_lock_acquire>
 800b5a0:	6a23      	ldr	r3, [r4, #32]
 800b5a2:	b11b      	cbz	r3, 800b5ac <__sinit+0x14>
 800b5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a8:	f7ff bff0 	b.w	800b58c <__sfp_lock_release>
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <__sinit+0x28>)
 800b5ae:	6223      	str	r3, [r4, #32]
 800b5b0:	4b04      	ldr	r3, [pc, #16]	; (800b5c4 <__sinit+0x2c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1f5      	bne.n	800b5a4 <__sinit+0xc>
 800b5b8:	f7ff ffc4 	bl	800b544 <global_stdio_init.part.0>
 800b5bc:	e7f2      	b.n	800b5a4 <__sinit+0xc>
 800b5be:	bf00      	nop
 800b5c0:	0800b505 	.word	0x0800b505
 800b5c4:	200018bc 	.word	0x200018bc

0800b5c8 <_fwalk_sglue>:
 800b5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5cc:	4607      	mov	r7, r0
 800b5ce:	4688      	mov	r8, r1
 800b5d0:	4614      	mov	r4, r2
 800b5d2:	2600      	movs	r6, #0
 800b5d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5d8:	f1b9 0901 	subs.w	r9, r9, #1
 800b5dc:	d505      	bpl.n	800b5ea <_fwalk_sglue+0x22>
 800b5de:	6824      	ldr	r4, [r4, #0]
 800b5e0:	2c00      	cmp	r4, #0
 800b5e2:	d1f7      	bne.n	800b5d4 <_fwalk_sglue+0xc>
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d907      	bls.n	800b600 <_fwalk_sglue+0x38>
 800b5f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	d003      	beq.n	800b600 <_fwalk_sglue+0x38>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	47c0      	blx	r8
 800b5fe:	4306      	orrs	r6, r0
 800b600:	3568      	adds	r5, #104	; 0x68
 800b602:	e7e9      	b.n	800b5d8 <_fwalk_sglue+0x10>

0800b604 <iprintf>:
 800b604:	b40f      	push	{r0, r1, r2, r3}
 800b606:	b507      	push	{r0, r1, r2, lr}
 800b608:	4906      	ldr	r1, [pc, #24]	; (800b624 <iprintf+0x20>)
 800b60a:	ab04      	add	r3, sp, #16
 800b60c:	6808      	ldr	r0, [r1, #0]
 800b60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b612:	6881      	ldr	r1, [r0, #8]
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	f001 fe67 	bl	800d2e8 <_vfiprintf_r>
 800b61a:	b003      	add	sp, #12
 800b61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b620:	b004      	add	sp, #16
 800b622:	4770      	bx	lr
 800b624:	2000006c 	.word	0x2000006c

0800b628 <_puts_r>:
 800b628:	6a03      	ldr	r3, [r0, #32]
 800b62a:	b570      	push	{r4, r5, r6, lr}
 800b62c:	6884      	ldr	r4, [r0, #8]
 800b62e:	4605      	mov	r5, r0
 800b630:	460e      	mov	r6, r1
 800b632:	b90b      	cbnz	r3, 800b638 <_puts_r+0x10>
 800b634:	f7ff ffb0 	bl	800b598 <__sinit>
 800b638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b63a:	07db      	lsls	r3, r3, #31
 800b63c:	d405      	bmi.n	800b64a <_puts_r+0x22>
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	0598      	lsls	r0, r3, #22
 800b642:	d402      	bmi.n	800b64a <_puts_r+0x22>
 800b644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b646:	f000 fa87 	bl	800bb58 <__retarget_lock_acquire_recursive>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	0719      	lsls	r1, r3, #28
 800b64e:	d513      	bpl.n	800b678 <_puts_r+0x50>
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	b18b      	cbz	r3, 800b678 <_puts_r+0x50>
 800b654:	3e01      	subs	r6, #1
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b65c:	3b01      	subs	r3, #1
 800b65e:	60a3      	str	r3, [r4, #8]
 800b660:	b9e9      	cbnz	r1, 800b69e <_puts_r+0x76>
 800b662:	2b00      	cmp	r3, #0
 800b664:	da2e      	bge.n	800b6c4 <_puts_r+0x9c>
 800b666:	4622      	mov	r2, r4
 800b668:	210a      	movs	r1, #10
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f952 	bl	800b914 <__swbuf_r>
 800b670:	3001      	adds	r0, #1
 800b672:	d007      	beq.n	800b684 <_puts_r+0x5c>
 800b674:	250a      	movs	r5, #10
 800b676:	e007      	b.n	800b688 <_puts_r+0x60>
 800b678:	4621      	mov	r1, r4
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 f988 	bl	800b990 <__swsetup_r>
 800b680:	2800      	cmp	r0, #0
 800b682:	d0e7      	beq.n	800b654 <_puts_r+0x2c>
 800b684:	f04f 35ff 	mov.w	r5, #4294967295
 800b688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b68a:	07da      	lsls	r2, r3, #31
 800b68c:	d405      	bmi.n	800b69a <_puts_r+0x72>
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	059b      	lsls	r3, r3, #22
 800b692:	d402      	bmi.n	800b69a <_puts_r+0x72>
 800b694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b696:	f000 fa60 	bl	800bb5a <__retarget_lock_release_recursive>
 800b69a:	4628      	mov	r0, r5
 800b69c:	bd70      	pop	{r4, r5, r6, pc}
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	da04      	bge.n	800b6ac <_puts_r+0x84>
 800b6a2:	69a2      	ldr	r2, [r4, #24]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	dc06      	bgt.n	800b6b6 <_puts_r+0x8e>
 800b6a8:	290a      	cmp	r1, #10
 800b6aa:	d004      	beq.n	800b6b6 <_puts_r+0x8e>
 800b6ac:	6823      	ldr	r3, [r4, #0]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	6022      	str	r2, [r4, #0]
 800b6b2:	7019      	strb	r1, [r3, #0]
 800b6b4:	e7cf      	b.n	800b656 <_puts_r+0x2e>
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 f92b 	bl	800b914 <__swbuf_r>
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d1c9      	bne.n	800b656 <_puts_r+0x2e>
 800b6c2:	e7df      	b.n	800b684 <_puts_r+0x5c>
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	250a      	movs	r5, #10
 800b6c8:	1c5a      	adds	r2, r3, #1
 800b6ca:	6022      	str	r2, [r4, #0]
 800b6cc:	701d      	strb	r5, [r3, #0]
 800b6ce:	e7db      	b.n	800b688 <_puts_r+0x60>

0800b6d0 <puts>:
 800b6d0:	4b02      	ldr	r3, [pc, #8]	; (800b6dc <puts+0xc>)
 800b6d2:	4601      	mov	r1, r0
 800b6d4:	6818      	ldr	r0, [r3, #0]
 800b6d6:	f7ff bfa7 	b.w	800b628 <_puts_r>
 800b6da:	bf00      	nop
 800b6dc:	2000006c 	.word	0x2000006c

0800b6e0 <setbuf>:
 800b6e0:	fab1 f281 	clz	r2, r1
 800b6e4:	0952      	lsrs	r2, r2, #5
 800b6e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ea:	0052      	lsls	r2, r2, #1
 800b6ec:	f000 b800 	b.w	800b6f0 <setvbuf>

0800b6f0 <setvbuf>:
 800b6f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6f4:	461d      	mov	r5, r3
 800b6f6:	4b54      	ldr	r3, [pc, #336]	; (800b848 <setvbuf+0x158>)
 800b6f8:	681f      	ldr	r7, [r3, #0]
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	460e      	mov	r6, r1
 800b6fe:	4690      	mov	r8, r2
 800b700:	b127      	cbz	r7, 800b70c <setvbuf+0x1c>
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	b913      	cbnz	r3, 800b70c <setvbuf+0x1c>
 800b706:	4638      	mov	r0, r7
 800b708:	f7ff ff46 	bl	800b598 <__sinit>
 800b70c:	f1b8 0f02 	cmp.w	r8, #2
 800b710:	d006      	beq.n	800b720 <setvbuf+0x30>
 800b712:	f1b8 0f01 	cmp.w	r8, #1
 800b716:	f200 8094 	bhi.w	800b842 <setvbuf+0x152>
 800b71a:	2d00      	cmp	r5, #0
 800b71c:	f2c0 8091 	blt.w	800b842 <setvbuf+0x152>
 800b720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b722:	07da      	lsls	r2, r3, #31
 800b724:	d405      	bmi.n	800b732 <setvbuf+0x42>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	059b      	lsls	r3, r3, #22
 800b72a:	d402      	bmi.n	800b732 <setvbuf+0x42>
 800b72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72e:	f000 fa13 	bl	800bb58 <__retarget_lock_acquire_recursive>
 800b732:	4621      	mov	r1, r4
 800b734:	4638      	mov	r0, r7
 800b736:	f001 ff77 	bl	800d628 <_fflush_r>
 800b73a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b73c:	b141      	cbz	r1, 800b750 <setvbuf+0x60>
 800b73e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b742:	4299      	cmp	r1, r3
 800b744:	d002      	beq.n	800b74c <setvbuf+0x5c>
 800b746:	4638      	mov	r0, r7
 800b748:	f001 f884 	bl	800c854 <_free_r>
 800b74c:	2300      	movs	r3, #0
 800b74e:	6363      	str	r3, [r4, #52]	; 0x34
 800b750:	2300      	movs	r3, #0
 800b752:	61a3      	str	r3, [r4, #24]
 800b754:	6063      	str	r3, [r4, #4]
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	0618      	lsls	r0, r3, #24
 800b75a:	d503      	bpl.n	800b764 <setvbuf+0x74>
 800b75c:	6921      	ldr	r1, [r4, #16]
 800b75e:	4638      	mov	r0, r7
 800b760:	f001 f878 	bl	800c854 <_free_r>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b76a:	f023 0303 	bic.w	r3, r3, #3
 800b76e:	f1b8 0f02 	cmp.w	r8, #2
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	d05f      	beq.n	800b836 <setvbuf+0x146>
 800b776:	ab01      	add	r3, sp, #4
 800b778:	466a      	mov	r2, sp
 800b77a:	4621      	mov	r1, r4
 800b77c:	4638      	mov	r0, r7
 800b77e:	f001 ff7b 	bl	800d678 <__swhatbuf_r>
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	4318      	orrs	r0, r3
 800b786:	81a0      	strh	r0, [r4, #12]
 800b788:	bb2d      	cbnz	r5, 800b7d6 <setvbuf+0xe6>
 800b78a:	9d00      	ldr	r5, [sp, #0]
 800b78c:	4628      	mov	r0, r5
 800b78e:	f7ff f96f 	bl	800aa70 <malloc>
 800b792:	4606      	mov	r6, r0
 800b794:	2800      	cmp	r0, #0
 800b796:	d150      	bne.n	800b83a <setvbuf+0x14a>
 800b798:	f8dd 9000 	ldr.w	r9, [sp]
 800b79c:	45a9      	cmp	r9, r5
 800b79e:	d13e      	bne.n	800b81e <setvbuf+0x12e>
 800b7a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	60a2      	str	r2, [r4, #8]
 800b7a8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b7ac:	6022      	str	r2, [r4, #0]
 800b7ae:	6122      	str	r2, [r4, #16]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b6:	6162      	str	r2, [r4, #20]
 800b7b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7ba:	f043 0302 	orr.w	r3, r3, #2
 800b7be:	07d1      	lsls	r1, r2, #31
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	d404      	bmi.n	800b7ce <setvbuf+0xde>
 800b7c4:	059b      	lsls	r3, r3, #22
 800b7c6:	d402      	bmi.n	800b7ce <setvbuf+0xde>
 800b7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ca:	f000 f9c6 	bl	800bb5a <__retarget_lock_release_recursive>
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	b003      	add	sp, #12
 800b7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	d0d8      	beq.n	800b78c <setvbuf+0x9c>
 800b7da:	6a3b      	ldr	r3, [r7, #32]
 800b7dc:	b913      	cbnz	r3, 800b7e4 <setvbuf+0xf4>
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f7ff feda 	bl	800b598 <__sinit>
 800b7e4:	f1b8 0f01 	cmp.w	r8, #1
 800b7e8:	bf08      	it	eq
 800b7ea:	89a3      	ldrheq	r3, [r4, #12]
 800b7ec:	6026      	str	r6, [r4, #0]
 800b7ee:	bf04      	itt	eq
 800b7f0:	f043 0301 	orreq.w	r3, r3, #1
 800b7f4:	81a3      	strheq	r3, [r4, #12]
 800b7f6:	89a3      	ldrh	r3, [r4, #12]
 800b7f8:	f013 0208 	ands.w	r2, r3, #8
 800b7fc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b800:	d01d      	beq.n	800b83e <setvbuf+0x14e>
 800b802:	07da      	lsls	r2, r3, #31
 800b804:	bf41      	itttt	mi
 800b806:	2200      	movmi	r2, #0
 800b808:	426d      	negmi	r5, r5
 800b80a:	60a2      	strmi	r2, [r4, #8]
 800b80c:	61a5      	strmi	r5, [r4, #24]
 800b80e:	bf58      	it	pl
 800b810:	60a5      	strpl	r5, [r4, #8]
 800b812:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b814:	f015 0501 	ands.w	r5, r5, #1
 800b818:	d0d4      	beq.n	800b7c4 <setvbuf+0xd4>
 800b81a:	2500      	movs	r5, #0
 800b81c:	e7d7      	b.n	800b7ce <setvbuf+0xde>
 800b81e:	4648      	mov	r0, r9
 800b820:	f7ff f926 	bl	800aa70 <malloc>
 800b824:	4606      	mov	r6, r0
 800b826:	2800      	cmp	r0, #0
 800b828:	d0ba      	beq.n	800b7a0 <setvbuf+0xb0>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	464d      	mov	r5, r9
 800b834:	e7d1      	b.n	800b7da <setvbuf+0xea>
 800b836:	2500      	movs	r5, #0
 800b838:	e7b4      	b.n	800b7a4 <setvbuf+0xb4>
 800b83a:	46a9      	mov	r9, r5
 800b83c:	e7f5      	b.n	800b82a <setvbuf+0x13a>
 800b83e:	60a2      	str	r2, [r4, #8]
 800b840:	e7e7      	b.n	800b812 <setvbuf+0x122>
 800b842:	f04f 35ff 	mov.w	r5, #4294967295
 800b846:	e7c2      	b.n	800b7ce <setvbuf+0xde>
 800b848:	2000006c 	.word	0x2000006c

0800b84c <__sread>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	460c      	mov	r4, r1
 800b850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b854:	f000 f922 	bl	800ba9c <_read_r>
 800b858:	2800      	cmp	r0, #0
 800b85a:	bfab      	itete	ge
 800b85c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b85e:	89a3      	ldrhlt	r3, [r4, #12]
 800b860:	181b      	addge	r3, r3, r0
 800b862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b866:	bfac      	ite	ge
 800b868:	6563      	strge	r3, [r4, #84]	; 0x54
 800b86a:	81a3      	strhlt	r3, [r4, #12]
 800b86c:	bd10      	pop	{r4, pc}

0800b86e <__swrite>:
 800b86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b872:	461f      	mov	r7, r3
 800b874:	898b      	ldrh	r3, [r1, #12]
 800b876:	05db      	lsls	r3, r3, #23
 800b878:	4605      	mov	r5, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	4616      	mov	r6, r2
 800b87e:	d505      	bpl.n	800b88c <__swrite+0x1e>
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	2302      	movs	r3, #2
 800b886:	2200      	movs	r2, #0
 800b888:	f000 f8f6 	bl	800ba78 <_lseek_r>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	4632      	mov	r2, r6
 800b89a:	463b      	mov	r3, r7
 800b89c:	4628      	mov	r0, r5
 800b89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a2:	f000 b91d 	b.w	800bae0 <_write_r>

0800b8a6 <__sseek>:
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ae:	f000 f8e3 	bl	800ba78 <_lseek_r>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	bf15      	itete	ne
 800b8b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8c2:	81a3      	strheq	r3, [r4, #12]
 800b8c4:	bf18      	it	ne
 800b8c6:	81a3      	strhne	r3, [r4, #12]
 800b8c8:	bd10      	pop	{r4, pc}

0800b8ca <__sclose>:
 800b8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ce:	f000 b8c3 	b.w	800ba58 <_close_r>
	...

0800b8d4 <_vsiprintf_r>:
 800b8d4:	b500      	push	{lr}
 800b8d6:	b09b      	sub	sp, #108	; 0x6c
 800b8d8:	9100      	str	r1, [sp, #0]
 800b8da:	9104      	str	r1, [sp, #16]
 800b8dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8e0:	9105      	str	r1, [sp, #20]
 800b8e2:	9102      	str	r1, [sp, #8]
 800b8e4:	4905      	ldr	r1, [pc, #20]	; (800b8fc <_vsiprintf_r+0x28>)
 800b8e6:	9103      	str	r1, [sp, #12]
 800b8e8:	4669      	mov	r1, sp
 800b8ea:	f001 fbd5 	bl	800d098 <_svfiprintf_r>
 800b8ee:	9b00      	ldr	r3, [sp, #0]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	b01b      	add	sp, #108	; 0x6c
 800b8f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8fa:	bf00      	nop
 800b8fc:	ffff0208 	.word	0xffff0208

0800b900 <vsiprintf>:
 800b900:	4613      	mov	r3, r2
 800b902:	460a      	mov	r2, r1
 800b904:	4601      	mov	r1, r0
 800b906:	4802      	ldr	r0, [pc, #8]	; (800b910 <vsiprintf+0x10>)
 800b908:	6800      	ldr	r0, [r0, #0]
 800b90a:	f7ff bfe3 	b.w	800b8d4 <_vsiprintf_r>
 800b90e:	bf00      	nop
 800b910:	2000006c 	.word	0x2000006c

0800b914 <__swbuf_r>:
 800b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b916:	460e      	mov	r6, r1
 800b918:	4614      	mov	r4, r2
 800b91a:	4605      	mov	r5, r0
 800b91c:	b118      	cbz	r0, 800b926 <__swbuf_r+0x12>
 800b91e:	6a03      	ldr	r3, [r0, #32]
 800b920:	b90b      	cbnz	r3, 800b926 <__swbuf_r+0x12>
 800b922:	f7ff fe39 	bl	800b598 <__sinit>
 800b926:	69a3      	ldr	r3, [r4, #24]
 800b928:	60a3      	str	r3, [r4, #8]
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	071a      	lsls	r2, r3, #28
 800b92e:	d525      	bpl.n	800b97c <__swbuf_r+0x68>
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	b31b      	cbz	r3, 800b97c <__swbuf_r+0x68>
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	6922      	ldr	r2, [r4, #16]
 800b938:	1a98      	subs	r0, r3, r2
 800b93a:	6963      	ldr	r3, [r4, #20]
 800b93c:	b2f6      	uxtb	r6, r6
 800b93e:	4283      	cmp	r3, r0
 800b940:	4637      	mov	r7, r6
 800b942:	dc04      	bgt.n	800b94e <__swbuf_r+0x3a>
 800b944:	4621      	mov	r1, r4
 800b946:	4628      	mov	r0, r5
 800b948:	f001 fe6e 	bl	800d628 <_fflush_r>
 800b94c:	b9e0      	cbnz	r0, 800b988 <__swbuf_r+0x74>
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	3b01      	subs	r3, #1
 800b952:	60a3      	str	r3, [r4, #8]
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	6022      	str	r2, [r4, #0]
 800b95a:	701e      	strb	r6, [r3, #0]
 800b95c:	6962      	ldr	r2, [r4, #20]
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	429a      	cmp	r2, r3
 800b962:	d004      	beq.n	800b96e <__swbuf_r+0x5a>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	07db      	lsls	r3, r3, #31
 800b968:	d506      	bpl.n	800b978 <__swbuf_r+0x64>
 800b96a:	2e0a      	cmp	r6, #10
 800b96c:	d104      	bne.n	800b978 <__swbuf_r+0x64>
 800b96e:	4621      	mov	r1, r4
 800b970:	4628      	mov	r0, r5
 800b972:	f001 fe59 	bl	800d628 <_fflush_r>
 800b976:	b938      	cbnz	r0, 800b988 <__swbuf_r+0x74>
 800b978:	4638      	mov	r0, r7
 800b97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b97c:	4621      	mov	r1, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 f806 	bl	800b990 <__swsetup_r>
 800b984:	2800      	cmp	r0, #0
 800b986:	d0d5      	beq.n	800b934 <__swbuf_r+0x20>
 800b988:	f04f 37ff 	mov.w	r7, #4294967295
 800b98c:	e7f4      	b.n	800b978 <__swbuf_r+0x64>
	...

0800b990 <__swsetup_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4b2a      	ldr	r3, [pc, #168]	; (800ba3c <__swsetup_r+0xac>)
 800b994:	4605      	mov	r5, r0
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	460c      	mov	r4, r1
 800b99a:	b118      	cbz	r0, 800b9a4 <__swsetup_r+0x14>
 800b99c:	6a03      	ldr	r3, [r0, #32]
 800b99e:	b90b      	cbnz	r3, 800b9a4 <__swsetup_r+0x14>
 800b9a0:	f7ff fdfa 	bl	800b598 <__sinit>
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9aa:	0718      	lsls	r0, r3, #28
 800b9ac:	d422      	bmi.n	800b9f4 <__swsetup_r+0x64>
 800b9ae:	06d9      	lsls	r1, r3, #27
 800b9b0:	d407      	bmi.n	800b9c2 <__swsetup_r+0x32>
 800b9b2:	2309      	movs	r3, #9
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	e034      	b.n	800ba2c <__swsetup_r+0x9c>
 800b9c2:	0758      	lsls	r0, r3, #29
 800b9c4:	d512      	bpl.n	800b9ec <__swsetup_r+0x5c>
 800b9c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9c8:	b141      	cbz	r1, 800b9dc <__swsetup_r+0x4c>
 800b9ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ce:	4299      	cmp	r1, r3
 800b9d0:	d002      	beq.n	800b9d8 <__swsetup_r+0x48>
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f000 ff3e 	bl	800c854 <_free_r>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	6363      	str	r3, [r4, #52]	; 0x34
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	6063      	str	r3, [r4, #4]
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	6023      	str	r3, [r4, #0]
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	f043 0308 	orr.w	r3, r3, #8
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	b94b      	cbnz	r3, 800ba0c <__swsetup_r+0x7c>
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba02:	d003      	beq.n	800ba0c <__swsetup_r+0x7c>
 800ba04:	4621      	mov	r1, r4
 800ba06:	4628      	mov	r0, r5
 800ba08:	f001 fe5c 	bl	800d6c4 <__smakebuf_r>
 800ba0c:	89a0      	ldrh	r0, [r4, #12]
 800ba0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba12:	f010 0301 	ands.w	r3, r0, #1
 800ba16:	d00a      	beq.n	800ba2e <__swsetup_r+0x9e>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	60a3      	str	r3, [r4, #8]
 800ba1c:	6963      	ldr	r3, [r4, #20]
 800ba1e:	425b      	negs	r3, r3
 800ba20:	61a3      	str	r3, [r4, #24]
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	b943      	cbnz	r3, 800ba38 <__swsetup_r+0xa8>
 800ba26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba2a:	d1c4      	bne.n	800b9b6 <__swsetup_r+0x26>
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	0781      	lsls	r1, r0, #30
 800ba30:	bf58      	it	pl
 800ba32:	6963      	ldrpl	r3, [r4, #20]
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	e7f4      	b.n	800ba22 <__swsetup_r+0x92>
 800ba38:	2000      	movs	r0, #0
 800ba3a:	e7f7      	b.n	800ba2c <__swsetup_r+0x9c>
 800ba3c:	2000006c 	.word	0x2000006c

0800ba40 <memset>:
 800ba40:	4402      	add	r2, r0
 800ba42:	4603      	mov	r3, r0
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d100      	bne.n	800ba4a <memset+0xa>
 800ba48:	4770      	bx	lr
 800ba4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba4e:	e7f9      	b.n	800ba44 <memset+0x4>

0800ba50 <_localeconv_r>:
 800ba50:	4800      	ldr	r0, [pc, #0]	; (800ba54 <_localeconv_r+0x4>)
 800ba52:	4770      	bx	lr
 800ba54:	20000160 	.word	0x20000160

0800ba58 <_close_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d06      	ldr	r5, [pc, #24]	; (800ba74 <_close_r+0x1c>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	602b      	str	r3, [r5, #0]
 800ba64:	f7f9 fd22 	bl	80054ac <_close>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_close_r+0x1a>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_close_r+0x1a>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	200018c0 	.word	0x200018c0

0800ba78 <_lseek_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	; (800ba98 <_lseek_r+0x20>)
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	4608      	mov	r0, r1
 800ba80:	4611      	mov	r1, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	602a      	str	r2, [r5, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	f7f9 fd1c 	bl	80054c4 <_lseek>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_lseek_r+0x1e>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_lseek_r+0x1e>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	200018c0 	.word	0x200018c0

0800ba9c <_read_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	; (800babc <_read_r+0x20>)
 800baa0:	4604      	mov	r4, r0
 800baa2:	4608      	mov	r0, r1
 800baa4:	4611      	mov	r1, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f9 fce2 	bl	8005474 <_read>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_read_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_read_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	200018c0 	.word	0x200018c0

0800bac0 <_sbrk_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d06      	ldr	r5, [pc, #24]	; (800badc <_sbrk_r+0x1c>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	602b      	str	r3, [r5, #0]
 800bacc:	f003 f904 	bl	800ecd8 <_sbrk>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_sbrk_r+0x1a>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_sbrk_r+0x1a>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	200018c0 	.word	0x200018c0

0800bae0 <_write_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d07      	ldr	r5, [pc, #28]	; (800bb00 <_write_r+0x20>)
 800bae4:	4604      	mov	r4, r0
 800bae6:	4608      	mov	r0, r1
 800bae8:	4611      	mov	r1, r2
 800baea:	2200      	movs	r2, #0
 800baec:	602a      	str	r2, [r5, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	f7f9 fcce 	bl	8005490 <_write>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_write_r+0x1e>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_write_r+0x1e>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	200018c0 	.word	0x200018c0

0800bb04 <__errno>:
 800bb04:	4b01      	ldr	r3, [pc, #4]	; (800bb0c <__errno+0x8>)
 800bb06:	6818      	ldr	r0, [r3, #0]
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	2000006c 	.word	0x2000006c

0800bb10 <__libc_init_array>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	4d0d      	ldr	r5, [pc, #52]	; (800bb48 <__libc_init_array+0x38>)
 800bb14:	4c0d      	ldr	r4, [pc, #52]	; (800bb4c <__libc_init_array+0x3c>)
 800bb16:	1b64      	subs	r4, r4, r5
 800bb18:	10a4      	asrs	r4, r4, #2
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	42a6      	cmp	r6, r4
 800bb1e:	d109      	bne.n	800bb34 <__libc_init_array+0x24>
 800bb20:	4d0b      	ldr	r5, [pc, #44]	; (800bb50 <__libc_init_array+0x40>)
 800bb22:	4c0c      	ldr	r4, [pc, #48]	; (800bb54 <__libc_init_array+0x44>)
 800bb24:	f003 f8e6 	bl	800ecf4 <_init>
 800bb28:	1b64      	subs	r4, r4, r5
 800bb2a:	10a4      	asrs	r4, r4, #2
 800bb2c:	2600      	movs	r6, #0
 800bb2e:	42a6      	cmp	r6, r4
 800bb30:	d105      	bne.n	800bb3e <__libc_init_array+0x2e>
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb38:	4798      	blx	r3
 800bb3a:	3601      	adds	r6, #1
 800bb3c:	e7ee      	b.n	800bb1c <__libc_init_array+0xc>
 800bb3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb42:	4798      	blx	r3
 800bb44:	3601      	adds	r6, #1
 800bb46:	e7f2      	b.n	800bb2e <__libc_init_array+0x1e>
 800bb48:	0800f728 	.word	0x0800f728
 800bb4c:	0800f728 	.word	0x0800f728
 800bb50:	0800f728 	.word	0x0800f728
 800bb54:	0800f72c 	.word	0x0800f72c

0800bb58 <__retarget_lock_acquire_recursive>:
 800bb58:	4770      	bx	lr

0800bb5a <__retarget_lock_release_recursive>:
 800bb5a:	4770      	bx	lr

0800bb5c <quorem>:
 800bb5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb60:	6903      	ldr	r3, [r0, #16]
 800bb62:	690c      	ldr	r4, [r1, #16]
 800bb64:	42a3      	cmp	r3, r4
 800bb66:	4607      	mov	r7, r0
 800bb68:	db7e      	blt.n	800bc68 <quorem+0x10c>
 800bb6a:	3c01      	subs	r4, #1
 800bb6c:	f101 0814 	add.w	r8, r1, #20
 800bb70:	f100 0514 	add.w	r5, r0, #20
 800bb74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb82:	3301      	adds	r3, #1
 800bb84:	429a      	cmp	r2, r3
 800bb86:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb8e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb92:	d331      	bcc.n	800bbf8 <quorem+0x9c>
 800bb94:	f04f 0e00 	mov.w	lr, #0
 800bb98:	4640      	mov	r0, r8
 800bb9a:	46ac      	mov	ip, r5
 800bb9c:	46f2      	mov	sl, lr
 800bb9e:	f850 2b04 	ldr.w	r2, [r0], #4
 800bba2:	b293      	uxth	r3, r2
 800bba4:	fb06 e303 	mla	r3, r6, r3, lr
 800bba8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbac:	0c1a      	lsrs	r2, r3, #16
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	ebaa 0303 	sub.w	r3, sl, r3
 800bbb4:	f8dc a000 	ldr.w	sl, [ip]
 800bbb8:	fa13 f38a 	uxtah	r3, r3, sl
 800bbbc:	fb06 220e 	mla	r2, r6, lr, r2
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	9b00      	ldr	r3, [sp, #0]
 800bbc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbc8:	b292      	uxth	r2, r2
 800bbca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbd2:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbd6:	4581      	cmp	r9, r0
 800bbd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbdc:	f84c 3b04 	str.w	r3, [ip], #4
 800bbe0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbe4:	d2db      	bcs.n	800bb9e <quorem+0x42>
 800bbe6:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbea:	b92b      	cbnz	r3, 800bbf8 <quorem+0x9c>
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	3b04      	subs	r3, #4
 800bbf0:	429d      	cmp	r5, r3
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	d32c      	bcc.n	800bc50 <quorem+0xf4>
 800bbf6:	613c      	str	r4, [r7, #16]
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f001 f8f3 	bl	800cde4 <__mcmp>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	db22      	blt.n	800bc48 <quorem+0xec>
 800bc02:	3601      	adds	r6, #1
 800bc04:	4629      	mov	r1, r5
 800bc06:	2000      	movs	r0, #0
 800bc08:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc0c:	f8d1 c000 	ldr.w	ip, [r1]
 800bc10:	b293      	uxth	r3, r2
 800bc12:	1ac3      	subs	r3, r0, r3
 800bc14:	0c12      	lsrs	r2, r2, #16
 800bc16:	fa13 f38c 	uxtah	r3, r3, ip
 800bc1a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc28:	45c1      	cmp	r9, r8
 800bc2a:	f841 3b04 	str.w	r3, [r1], #4
 800bc2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc32:	d2e9      	bcs.n	800bc08 <quorem+0xac>
 800bc34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc3c:	b922      	cbnz	r2, 800bc48 <quorem+0xec>
 800bc3e:	3b04      	subs	r3, #4
 800bc40:	429d      	cmp	r5, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	d30a      	bcc.n	800bc5c <quorem+0x100>
 800bc46:	613c      	str	r4, [r7, #16]
 800bc48:	4630      	mov	r0, r6
 800bc4a:	b003      	add	sp, #12
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	3b04      	subs	r3, #4
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	d1ce      	bne.n	800bbf6 <quorem+0x9a>
 800bc58:	3c01      	subs	r4, #1
 800bc5a:	e7c9      	b.n	800bbf0 <quorem+0x94>
 800bc5c:	6812      	ldr	r2, [r2, #0]
 800bc5e:	3b04      	subs	r3, #4
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	d1f0      	bne.n	800bc46 <quorem+0xea>
 800bc64:	3c01      	subs	r4, #1
 800bc66:	e7eb      	b.n	800bc40 <quorem+0xe4>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e7ee      	b.n	800bc4a <quorem+0xee>
 800bc6c:	0000      	movs	r0, r0
	...

0800bc70 <_dtoa_r>:
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	ed2d 8b04 	vpush	{d8-d9}
 800bc78:	69c5      	ldr	r5, [r0, #28]
 800bc7a:	b093      	sub	sp, #76	; 0x4c
 800bc7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc80:	ec57 6b10 	vmov	r6, r7, d0
 800bc84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc88:	9107      	str	r1, [sp, #28]
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	920a      	str	r2, [sp, #40]	; 0x28
 800bc8e:	930d      	str	r3, [sp, #52]	; 0x34
 800bc90:	b975      	cbnz	r5, 800bcb0 <_dtoa_r+0x40>
 800bc92:	2010      	movs	r0, #16
 800bc94:	f7fe feec 	bl	800aa70 <malloc>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	61e0      	str	r0, [r4, #28]
 800bc9c:	b920      	cbnz	r0, 800bca8 <_dtoa_r+0x38>
 800bc9e:	4bae      	ldr	r3, [pc, #696]	; (800bf58 <_dtoa_r+0x2e8>)
 800bca0:	21ef      	movs	r1, #239	; 0xef
 800bca2:	48ae      	ldr	r0, [pc, #696]	; (800bf5c <_dtoa_r+0x2ec>)
 800bca4:	f001 fd94 	bl	800d7d0 <__assert_func>
 800bca8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcac:	6005      	str	r5, [r0, #0]
 800bcae:	60c5      	str	r5, [r0, #12]
 800bcb0:	69e3      	ldr	r3, [r4, #28]
 800bcb2:	6819      	ldr	r1, [r3, #0]
 800bcb4:	b151      	cbz	r1, 800bccc <_dtoa_r+0x5c>
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	604a      	str	r2, [r1, #4]
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4093      	lsls	r3, r2
 800bcbe:	608b      	str	r3, [r1, #8]
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 fe53 	bl	800c96c <_Bfree>
 800bcc6:	69e3      	ldr	r3, [r4, #28]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
 800bccc:	1e3b      	subs	r3, r7, #0
 800bcce:	bfbb      	ittet	lt
 800bcd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcd4:	9303      	strlt	r3, [sp, #12]
 800bcd6:	2300      	movge	r3, #0
 800bcd8:	2201      	movlt	r2, #1
 800bcda:	bfac      	ite	ge
 800bcdc:	f8c8 3000 	strge.w	r3, [r8]
 800bce0:	f8c8 2000 	strlt.w	r2, [r8]
 800bce4:	4b9e      	ldr	r3, [pc, #632]	; (800bf60 <_dtoa_r+0x2f0>)
 800bce6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bcea:	ea33 0308 	bics.w	r3, r3, r8
 800bcee:	d11b      	bne.n	800bd28 <_dtoa_r+0xb8>
 800bcf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bcfc:	4333      	orrs	r3, r6
 800bcfe:	f000 8593 	beq.w	800c828 <_dtoa_r+0xbb8>
 800bd02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd04:	b963      	cbnz	r3, 800bd20 <_dtoa_r+0xb0>
 800bd06:	4b97      	ldr	r3, [pc, #604]	; (800bf64 <_dtoa_r+0x2f4>)
 800bd08:	e027      	b.n	800bd5a <_dtoa_r+0xea>
 800bd0a:	4b97      	ldr	r3, [pc, #604]	; (800bf68 <_dtoa_r+0x2f8>)
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	3308      	adds	r3, #8
 800bd10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	9800      	ldr	r0, [sp, #0]
 800bd16:	b013      	add	sp, #76	; 0x4c
 800bd18:	ecbd 8b04 	vpop	{d8-d9}
 800bd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd20:	4b90      	ldr	r3, [pc, #576]	; (800bf64 <_dtoa_r+0x2f4>)
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	3303      	adds	r3, #3
 800bd26:	e7f3      	b.n	800bd10 <_dtoa_r+0xa0>
 800bd28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	ec51 0b17 	vmov	r0, r1, d7
 800bd32:	eeb0 8a47 	vmov.f32	s16, s14
 800bd36:	eef0 8a67 	vmov.f32	s17, s15
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f7f4 feec 	bl	8000b18 <__aeabi_dcmpeq>
 800bd40:	4681      	mov	r9, r0
 800bd42:	b160      	cbz	r0, 800bd5e <_dtoa_r+0xee>
 800bd44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd46:	2301      	movs	r3, #1
 800bd48:	6013      	str	r3, [r2, #0]
 800bd4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 8568 	beq.w	800c822 <_dtoa_r+0xbb2>
 800bd52:	4b86      	ldr	r3, [pc, #536]	; (800bf6c <_dtoa_r+0x2fc>)
 800bd54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	e7da      	b.n	800bd14 <_dtoa_r+0xa4>
 800bd5e:	aa10      	add	r2, sp, #64	; 0x40
 800bd60:	a911      	add	r1, sp, #68	; 0x44
 800bd62:	4620      	mov	r0, r4
 800bd64:	eeb0 0a48 	vmov.f32	s0, s16
 800bd68:	eef0 0a68 	vmov.f32	s1, s17
 800bd6c:	f001 f8e0 	bl	800cf30 <__d2b>
 800bd70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd74:	4682      	mov	sl, r0
 800bd76:	2d00      	cmp	r5, #0
 800bd78:	d07f      	beq.n	800be7a <_dtoa_r+0x20a>
 800bd7a:	ee18 3a90 	vmov	r3, s17
 800bd7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd86:	ec51 0b18 	vmov	r0, r1, d8
 800bd8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bd96:	4619      	mov	r1, r3
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4b75      	ldr	r3, [pc, #468]	; (800bf70 <_dtoa_r+0x300>)
 800bd9c:	f7f4 fa9c 	bl	80002d8 <__aeabi_dsub>
 800bda0:	a367      	add	r3, pc, #412	; (adr r3, 800bf40 <_dtoa_r+0x2d0>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fc4f 	bl	8000648 <__aeabi_dmul>
 800bdaa:	a367      	add	r3, pc, #412	; (adr r3, 800bf48 <_dtoa_r+0x2d8>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fa94 	bl	80002dc <__adddf3>
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	460f      	mov	r7, r1
 800bdba:	f7f4 fbdb 	bl	8000574 <__aeabi_i2d>
 800bdbe:	a364      	add	r3, pc, #400	; (adr r3, 800bf50 <_dtoa_r+0x2e0>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f7f4 fc40 	bl	8000648 <__aeabi_dmul>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4630      	mov	r0, r6
 800bdce:	4639      	mov	r1, r7
 800bdd0:	f7f4 fa84 	bl	80002dc <__adddf3>
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	460f      	mov	r7, r1
 800bdd8:	f7f4 fee6 	bl	8000ba8 <__aeabi_d2iz>
 800bddc:	2200      	movs	r2, #0
 800bdde:	4683      	mov	fp, r0
 800bde0:	2300      	movs	r3, #0
 800bde2:	4630      	mov	r0, r6
 800bde4:	4639      	mov	r1, r7
 800bde6:	f7f4 fea1 	bl	8000b2c <__aeabi_dcmplt>
 800bdea:	b148      	cbz	r0, 800be00 <_dtoa_r+0x190>
 800bdec:	4658      	mov	r0, fp
 800bdee:	f7f4 fbc1 	bl	8000574 <__aeabi_i2d>
 800bdf2:	4632      	mov	r2, r6
 800bdf4:	463b      	mov	r3, r7
 800bdf6:	f7f4 fe8f 	bl	8000b18 <__aeabi_dcmpeq>
 800bdfa:	b908      	cbnz	r0, 800be00 <_dtoa_r+0x190>
 800bdfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be00:	f1bb 0f16 	cmp.w	fp, #22
 800be04:	d857      	bhi.n	800beb6 <_dtoa_r+0x246>
 800be06:	4b5b      	ldr	r3, [pc, #364]	; (800bf74 <_dtoa_r+0x304>)
 800be08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	ec51 0b18 	vmov	r0, r1, d8
 800be14:	f7f4 fe8a 	bl	8000b2c <__aeabi_dcmplt>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d04e      	beq.n	800beba <_dtoa_r+0x24a>
 800be1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be20:	2300      	movs	r3, #0
 800be22:	930c      	str	r3, [sp, #48]	; 0x30
 800be24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be26:	1b5b      	subs	r3, r3, r5
 800be28:	1e5a      	subs	r2, r3, #1
 800be2a:	bf45      	ittet	mi
 800be2c:	f1c3 0301 	rsbmi	r3, r3, #1
 800be30:	9305      	strmi	r3, [sp, #20]
 800be32:	2300      	movpl	r3, #0
 800be34:	2300      	movmi	r3, #0
 800be36:	9206      	str	r2, [sp, #24]
 800be38:	bf54      	ite	pl
 800be3a:	9305      	strpl	r3, [sp, #20]
 800be3c:	9306      	strmi	r3, [sp, #24]
 800be3e:	f1bb 0f00 	cmp.w	fp, #0
 800be42:	db3c      	blt.n	800bebe <_dtoa_r+0x24e>
 800be44:	9b06      	ldr	r3, [sp, #24]
 800be46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be4a:	445b      	add	r3, fp
 800be4c:	9306      	str	r3, [sp, #24]
 800be4e:	2300      	movs	r3, #0
 800be50:	9308      	str	r3, [sp, #32]
 800be52:	9b07      	ldr	r3, [sp, #28]
 800be54:	2b09      	cmp	r3, #9
 800be56:	d868      	bhi.n	800bf2a <_dtoa_r+0x2ba>
 800be58:	2b05      	cmp	r3, #5
 800be5a:	bfc4      	itt	gt
 800be5c:	3b04      	subgt	r3, #4
 800be5e:	9307      	strgt	r3, [sp, #28]
 800be60:	9b07      	ldr	r3, [sp, #28]
 800be62:	f1a3 0302 	sub.w	r3, r3, #2
 800be66:	bfcc      	ite	gt
 800be68:	2500      	movgt	r5, #0
 800be6a:	2501      	movle	r5, #1
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	f200 8085 	bhi.w	800bf7c <_dtoa_r+0x30c>
 800be72:	e8df f003 	tbb	[pc, r3]
 800be76:	3b2e      	.short	0x3b2e
 800be78:	5839      	.short	0x5839
 800be7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be7e:	441d      	add	r5, r3
 800be80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be84:	2b20      	cmp	r3, #32
 800be86:	bfc1      	itttt	gt
 800be88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be8c:	fa08 f803 	lslgt.w	r8, r8, r3
 800be90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800be94:	fa26 f303 	lsrgt.w	r3, r6, r3
 800be98:	bfd6      	itet	le
 800be9a:	f1c3 0320 	rsble	r3, r3, #32
 800be9e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bea2:	fa06 f003 	lslle.w	r0, r6, r3
 800bea6:	f7f4 fb55 	bl	8000554 <__aeabi_ui2d>
 800beaa:	2201      	movs	r2, #1
 800beac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800beb0:	3d01      	subs	r5, #1
 800beb2:	920e      	str	r2, [sp, #56]	; 0x38
 800beb4:	e76f      	b.n	800bd96 <_dtoa_r+0x126>
 800beb6:	2301      	movs	r3, #1
 800beb8:	e7b3      	b.n	800be22 <_dtoa_r+0x1b2>
 800beba:	900c      	str	r0, [sp, #48]	; 0x30
 800bebc:	e7b2      	b.n	800be24 <_dtoa_r+0x1b4>
 800bebe:	9b05      	ldr	r3, [sp, #20]
 800bec0:	eba3 030b 	sub.w	r3, r3, fp
 800bec4:	9305      	str	r3, [sp, #20]
 800bec6:	f1cb 0300 	rsb	r3, fp, #0
 800beca:	9308      	str	r3, [sp, #32]
 800becc:	2300      	movs	r3, #0
 800bece:	930b      	str	r3, [sp, #44]	; 0x2c
 800bed0:	e7bf      	b.n	800be52 <_dtoa_r+0x1e2>
 800bed2:	2300      	movs	r3, #0
 800bed4:	9309      	str	r3, [sp, #36]	; 0x24
 800bed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed8:	2b00      	cmp	r3, #0
 800beda:	dc52      	bgt.n	800bf82 <_dtoa_r+0x312>
 800bedc:	2301      	movs	r3, #1
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	9304      	str	r3, [sp, #16]
 800bee2:	461a      	mov	r2, r3
 800bee4:	920a      	str	r2, [sp, #40]	; 0x28
 800bee6:	e00b      	b.n	800bf00 <_dtoa_r+0x290>
 800bee8:	2301      	movs	r3, #1
 800beea:	e7f3      	b.n	800bed4 <_dtoa_r+0x264>
 800beec:	2300      	movs	r3, #0
 800beee:	9309      	str	r3, [sp, #36]	; 0x24
 800bef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef2:	445b      	add	r3, fp
 800bef4:	9301      	str	r3, [sp, #4]
 800bef6:	3301      	adds	r3, #1
 800bef8:	2b01      	cmp	r3, #1
 800befa:	9304      	str	r3, [sp, #16]
 800befc:	bfb8      	it	lt
 800befe:	2301      	movlt	r3, #1
 800bf00:	69e0      	ldr	r0, [r4, #28]
 800bf02:	2100      	movs	r1, #0
 800bf04:	2204      	movs	r2, #4
 800bf06:	f102 0614 	add.w	r6, r2, #20
 800bf0a:	429e      	cmp	r6, r3
 800bf0c:	d93d      	bls.n	800bf8a <_dtoa_r+0x31a>
 800bf0e:	6041      	str	r1, [r0, #4]
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 fceb 	bl	800c8ec <_Balloc>
 800bf16:	9000      	str	r0, [sp, #0]
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d139      	bne.n	800bf90 <_dtoa_r+0x320>
 800bf1c:	4b16      	ldr	r3, [pc, #88]	; (800bf78 <_dtoa_r+0x308>)
 800bf1e:	4602      	mov	r2, r0
 800bf20:	f240 11af 	movw	r1, #431	; 0x1af
 800bf24:	e6bd      	b.n	800bca2 <_dtoa_r+0x32>
 800bf26:	2301      	movs	r3, #1
 800bf28:	e7e1      	b.n	800beee <_dtoa_r+0x27e>
 800bf2a:	2501      	movs	r5, #1
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9307      	str	r3, [sp, #28]
 800bf30:	9509      	str	r5, [sp, #36]	; 0x24
 800bf32:	f04f 33ff 	mov.w	r3, #4294967295
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	2312      	movs	r3, #18
 800bf3e:	e7d1      	b.n	800bee4 <_dtoa_r+0x274>
 800bf40:	636f4361 	.word	0x636f4361
 800bf44:	3fd287a7 	.word	0x3fd287a7
 800bf48:	8b60c8b3 	.word	0x8b60c8b3
 800bf4c:	3fc68a28 	.word	0x3fc68a28
 800bf50:	509f79fb 	.word	0x509f79fb
 800bf54:	3fd34413 	.word	0x3fd34413
 800bf58:	0800f215 	.word	0x0800f215
 800bf5c:	0800f22c 	.word	0x0800f22c
 800bf60:	7ff00000 	.word	0x7ff00000
 800bf64:	0800f211 	.word	0x0800f211
 800bf68:	0800f208 	.word	0x0800f208
 800bf6c:	0800f1e5 	.word	0x0800f1e5
 800bf70:	3ff80000 	.word	0x3ff80000
 800bf74:	0800f318 	.word	0x0800f318
 800bf78:	0800f284 	.word	0x0800f284
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf80:	e7d7      	b.n	800bf32 <_dtoa_r+0x2c2>
 800bf82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	9304      	str	r3, [sp, #16]
 800bf88:	e7ba      	b.n	800bf00 <_dtoa_r+0x290>
 800bf8a:	3101      	adds	r1, #1
 800bf8c:	0052      	lsls	r2, r2, #1
 800bf8e:	e7ba      	b.n	800bf06 <_dtoa_r+0x296>
 800bf90:	69e3      	ldr	r3, [r4, #28]
 800bf92:	9a00      	ldr	r2, [sp, #0]
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	9b04      	ldr	r3, [sp, #16]
 800bf98:	2b0e      	cmp	r3, #14
 800bf9a:	f200 80a8 	bhi.w	800c0ee <_dtoa_r+0x47e>
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	f000 80a5 	beq.w	800c0ee <_dtoa_r+0x47e>
 800bfa4:	f1bb 0f00 	cmp.w	fp, #0
 800bfa8:	dd38      	ble.n	800c01c <_dtoa_r+0x3ac>
 800bfaa:	4bc0      	ldr	r3, [pc, #768]	; (800c2ac <_dtoa_r+0x63c>)
 800bfac:	f00b 020f 	and.w	r2, fp, #15
 800bfb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bfbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bfc0:	d019      	beq.n	800bff6 <_dtoa_r+0x386>
 800bfc2:	4bbb      	ldr	r3, [pc, #748]	; (800c2b0 <_dtoa_r+0x640>)
 800bfc4:	ec51 0b18 	vmov	r0, r1, d8
 800bfc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfcc:	f7f4 fc66 	bl	800089c <__aeabi_ddiv>
 800bfd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfd4:	f008 080f 	and.w	r8, r8, #15
 800bfd8:	2503      	movs	r5, #3
 800bfda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2b0 <_dtoa_r+0x640>
 800bfde:	f1b8 0f00 	cmp.w	r8, #0
 800bfe2:	d10a      	bne.n	800bffa <_dtoa_r+0x38a>
 800bfe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfe8:	4632      	mov	r2, r6
 800bfea:	463b      	mov	r3, r7
 800bfec:	f7f4 fc56 	bl	800089c <__aeabi_ddiv>
 800bff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bff4:	e02b      	b.n	800c04e <_dtoa_r+0x3de>
 800bff6:	2502      	movs	r5, #2
 800bff8:	e7ef      	b.n	800bfda <_dtoa_r+0x36a>
 800bffa:	f018 0f01 	tst.w	r8, #1
 800bffe:	d008      	beq.n	800c012 <_dtoa_r+0x3a2>
 800c000:	4630      	mov	r0, r6
 800c002:	4639      	mov	r1, r7
 800c004:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c008:	f7f4 fb1e 	bl	8000648 <__aeabi_dmul>
 800c00c:	3501      	adds	r5, #1
 800c00e:	4606      	mov	r6, r0
 800c010:	460f      	mov	r7, r1
 800c012:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c016:	f109 0908 	add.w	r9, r9, #8
 800c01a:	e7e0      	b.n	800bfde <_dtoa_r+0x36e>
 800c01c:	f000 809f 	beq.w	800c15e <_dtoa_r+0x4ee>
 800c020:	f1cb 0600 	rsb	r6, fp, #0
 800c024:	4ba1      	ldr	r3, [pc, #644]	; (800c2ac <_dtoa_r+0x63c>)
 800c026:	4fa2      	ldr	r7, [pc, #648]	; (800c2b0 <_dtoa_r+0x640>)
 800c028:	f006 020f 	and.w	r2, r6, #15
 800c02c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	ec51 0b18 	vmov	r0, r1, d8
 800c038:	f7f4 fb06 	bl	8000648 <__aeabi_dmul>
 800c03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c040:	1136      	asrs	r6, r6, #4
 800c042:	2300      	movs	r3, #0
 800c044:	2502      	movs	r5, #2
 800c046:	2e00      	cmp	r6, #0
 800c048:	d17e      	bne.n	800c148 <_dtoa_r+0x4d8>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1d0      	bne.n	800bff0 <_dtoa_r+0x380>
 800c04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c050:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 8084 	beq.w	800c162 <_dtoa_r+0x4f2>
 800c05a:	4b96      	ldr	r3, [pc, #600]	; (800c2b4 <_dtoa_r+0x644>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 fd63 	bl	8000b2c <__aeabi_dcmplt>
 800c066:	2800      	cmp	r0, #0
 800c068:	d07b      	beq.n	800c162 <_dtoa_r+0x4f2>
 800c06a:	9b04      	ldr	r3, [sp, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d078      	beq.n	800c162 <_dtoa_r+0x4f2>
 800c070:	9b01      	ldr	r3, [sp, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	dd39      	ble.n	800c0ea <_dtoa_r+0x47a>
 800c076:	4b90      	ldr	r3, [pc, #576]	; (800c2b8 <_dtoa_r+0x648>)
 800c078:	2200      	movs	r2, #0
 800c07a:	4640      	mov	r0, r8
 800c07c:	4649      	mov	r1, r9
 800c07e:	f7f4 fae3 	bl	8000648 <__aeabi_dmul>
 800c082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c086:	9e01      	ldr	r6, [sp, #4]
 800c088:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c08c:	3501      	adds	r5, #1
 800c08e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c092:	4628      	mov	r0, r5
 800c094:	f7f4 fa6e 	bl	8000574 <__aeabi_i2d>
 800c098:	4642      	mov	r2, r8
 800c09a:	464b      	mov	r3, r9
 800c09c:	f7f4 fad4 	bl	8000648 <__aeabi_dmul>
 800c0a0:	4b86      	ldr	r3, [pc, #536]	; (800c2bc <_dtoa_r+0x64c>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f7f4 f91a 	bl	80002dc <__adddf3>
 800c0a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b0:	9303      	str	r3, [sp, #12]
 800c0b2:	2e00      	cmp	r6, #0
 800c0b4:	d158      	bne.n	800c168 <_dtoa_r+0x4f8>
 800c0b6:	4b82      	ldr	r3, [pc, #520]	; (800c2c0 <_dtoa_r+0x650>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 f90b 	bl	80002d8 <__aeabi_dsub>
 800c0c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0c6:	4680      	mov	r8, r0
 800c0c8:	4689      	mov	r9, r1
 800c0ca:	f7f4 fd4d 	bl	8000b68 <__aeabi_dcmpgt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f040 8296 	bne.w	800c600 <_dtoa_r+0x990>
 800c0d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c0d8:	4640      	mov	r0, r8
 800c0da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0de:	4649      	mov	r1, r9
 800c0e0:	f7f4 fd24 	bl	8000b2c <__aeabi_dcmplt>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	f040 8289 	bne.w	800c5fc <_dtoa_r+0x98c>
 800c0ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f2c0 814e 	blt.w	800c392 <_dtoa_r+0x722>
 800c0f6:	f1bb 0f0e 	cmp.w	fp, #14
 800c0fa:	f300 814a 	bgt.w	800c392 <_dtoa_r+0x722>
 800c0fe:	4b6b      	ldr	r3, [pc, #428]	; (800c2ac <_dtoa_r+0x63c>)
 800c100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c104:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f280 80dc 	bge.w	800c2c8 <_dtoa_r+0x658>
 800c110:	9b04      	ldr	r3, [sp, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f300 80d8 	bgt.w	800c2c8 <_dtoa_r+0x658>
 800c118:	f040 826f 	bne.w	800c5fa <_dtoa_r+0x98a>
 800c11c:	4b68      	ldr	r3, [pc, #416]	; (800c2c0 <_dtoa_r+0x650>)
 800c11e:	2200      	movs	r2, #0
 800c120:	4640      	mov	r0, r8
 800c122:	4649      	mov	r1, r9
 800c124:	f7f4 fa90 	bl	8000648 <__aeabi_dmul>
 800c128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c12c:	f7f4 fd12 	bl	8000b54 <__aeabi_dcmpge>
 800c130:	9e04      	ldr	r6, [sp, #16]
 800c132:	4637      	mov	r7, r6
 800c134:	2800      	cmp	r0, #0
 800c136:	f040 8245 	bne.w	800c5c4 <_dtoa_r+0x954>
 800c13a:	9d00      	ldr	r5, [sp, #0]
 800c13c:	2331      	movs	r3, #49	; 0x31
 800c13e:	f805 3b01 	strb.w	r3, [r5], #1
 800c142:	f10b 0b01 	add.w	fp, fp, #1
 800c146:	e241      	b.n	800c5cc <_dtoa_r+0x95c>
 800c148:	07f2      	lsls	r2, r6, #31
 800c14a:	d505      	bpl.n	800c158 <_dtoa_r+0x4e8>
 800c14c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c150:	f7f4 fa7a 	bl	8000648 <__aeabi_dmul>
 800c154:	3501      	adds	r5, #1
 800c156:	2301      	movs	r3, #1
 800c158:	1076      	asrs	r6, r6, #1
 800c15a:	3708      	adds	r7, #8
 800c15c:	e773      	b.n	800c046 <_dtoa_r+0x3d6>
 800c15e:	2502      	movs	r5, #2
 800c160:	e775      	b.n	800c04e <_dtoa_r+0x3de>
 800c162:	9e04      	ldr	r6, [sp, #16]
 800c164:	465f      	mov	r7, fp
 800c166:	e792      	b.n	800c08e <_dtoa_r+0x41e>
 800c168:	9900      	ldr	r1, [sp, #0]
 800c16a:	4b50      	ldr	r3, [pc, #320]	; (800c2ac <_dtoa_r+0x63c>)
 800c16c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c170:	4431      	add	r1, r6
 800c172:	9102      	str	r1, [sp, #8]
 800c174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c176:	eeb0 9a47 	vmov.f32	s18, s14
 800c17a:	eef0 9a67 	vmov.f32	s19, s15
 800c17e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c186:	2900      	cmp	r1, #0
 800c188:	d044      	beq.n	800c214 <_dtoa_r+0x5a4>
 800c18a:	494e      	ldr	r1, [pc, #312]	; (800c2c4 <_dtoa_r+0x654>)
 800c18c:	2000      	movs	r0, #0
 800c18e:	f7f4 fb85 	bl	800089c <__aeabi_ddiv>
 800c192:	ec53 2b19 	vmov	r2, r3, d9
 800c196:	f7f4 f89f 	bl	80002d8 <__aeabi_dsub>
 800c19a:	9d00      	ldr	r5, [sp, #0]
 800c19c:	ec41 0b19 	vmov	d9, r0, r1
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	f7f4 fd00 	bl	8000ba8 <__aeabi_d2iz>
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	f7f4 f9e3 	bl	8000574 <__aeabi_i2d>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	4649      	mov	r1, r9
 800c1b6:	f7f4 f88f 	bl	80002d8 <__aeabi_dsub>
 800c1ba:	3630      	adds	r6, #48	; 0x30
 800c1bc:	f805 6b01 	strb.w	r6, [r5], #1
 800c1c0:	ec53 2b19 	vmov	r2, r3, d9
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	4689      	mov	r9, r1
 800c1c8:	f7f4 fcb0 	bl	8000b2c <__aeabi_dcmplt>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d164      	bne.n	800c29a <_dtoa_r+0x62a>
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	464b      	mov	r3, r9
 800c1d4:	4937      	ldr	r1, [pc, #220]	; (800c2b4 <_dtoa_r+0x644>)
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f7f4 f87e 	bl	80002d8 <__aeabi_dsub>
 800c1dc:	ec53 2b19 	vmov	r2, r3, d9
 800c1e0:	f7f4 fca4 	bl	8000b2c <__aeabi_dcmplt>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	f040 80b6 	bne.w	800c356 <_dtoa_r+0x6e6>
 800c1ea:	9b02      	ldr	r3, [sp, #8]
 800c1ec:	429d      	cmp	r5, r3
 800c1ee:	f43f af7c 	beq.w	800c0ea <_dtoa_r+0x47a>
 800c1f2:	4b31      	ldr	r3, [pc, #196]	; (800c2b8 <_dtoa_r+0x648>)
 800c1f4:	ec51 0b19 	vmov	r0, r1, d9
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f7f4 fa25 	bl	8000648 <__aeabi_dmul>
 800c1fe:	4b2e      	ldr	r3, [pc, #184]	; (800c2b8 <_dtoa_r+0x648>)
 800c200:	ec41 0b19 	vmov	d9, r0, r1
 800c204:	2200      	movs	r2, #0
 800c206:	4640      	mov	r0, r8
 800c208:	4649      	mov	r1, r9
 800c20a:	f7f4 fa1d 	bl	8000648 <__aeabi_dmul>
 800c20e:	4680      	mov	r8, r0
 800c210:	4689      	mov	r9, r1
 800c212:	e7c5      	b.n	800c1a0 <_dtoa_r+0x530>
 800c214:	ec51 0b17 	vmov	r0, r1, d7
 800c218:	f7f4 fa16 	bl	8000648 <__aeabi_dmul>
 800c21c:	9b02      	ldr	r3, [sp, #8]
 800c21e:	9d00      	ldr	r5, [sp, #0]
 800c220:	930f      	str	r3, [sp, #60]	; 0x3c
 800c222:	ec41 0b19 	vmov	d9, r0, r1
 800c226:	4649      	mov	r1, r9
 800c228:	4640      	mov	r0, r8
 800c22a:	f7f4 fcbd 	bl	8000ba8 <__aeabi_d2iz>
 800c22e:	4606      	mov	r6, r0
 800c230:	f7f4 f9a0 	bl	8000574 <__aeabi_i2d>
 800c234:	3630      	adds	r6, #48	; 0x30
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	4640      	mov	r0, r8
 800c23c:	4649      	mov	r1, r9
 800c23e:	f7f4 f84b 	bl	80002d8 <__aeabi_dsub>
 800c242:	f805 6b01 	strb.w	r6, [r5], #1
 800c246:	9b02      	ldr	r3, [sp, #8]
 800c248:	429d      	cmp	r5, r3
 800c24a:	4680      	mov	r8, r0
 800c24c:	4689      	mov	r9, r1
 800c24e:	f04f 0200 	mov.w	r2, #0
 800c252:	d124      	bne.n	800c29e <_dtoa_r+0x62e>
 800c254:	4b1b      	ldr	r3, [pc, #108]	; (800c2c4 <_dtoa_r+0x654>)
 800c256:	ec51 0b19 	vmov	r0, r1, d9
 800c25a:	f7f4 f83f 	bl	80002dc <__adddf3>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 fc7f 	bl	8000b68 <__aeabi_dcmpgt>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d173      	bne.n	800c356 <_dtoa_r+0x6e6>
 800c26e:	ec53 2b19 	vmov	r2, r3, d9
 800c272:	4914      	ldr	r1, [pc, #80]	; (800c2c4 <_dtoa_r+0x654>)
 800c274:	2000      	movs	r0, #0
 800c276:	f7f4 f82f 	bl	80002d8 <__aeabi_dsub>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	4640      	mov	r0, r8
 800c280:	4649      	mov	r1, r9
 800c282:	f7f4 fc53 	bl	8000b2c <__aeabi_dcmplt>
 800c286:	2800      	cmp	r0, #0
 800c288:	f43f af2f 	beq.w	800c0ea <_dtoa_r+0x47a>
 800c28c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c28e:	1e6b      	subs	r3, r5, #1
 800c290:	930f      	str	r3, [sp, #60]	; 0x3c
 800c292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c296:	2b30      	cmp	r3, #48	; 0x30
 800c298:	d0f8      	beq.n	800c28c <_dtoa_r+0x61c>
 800c29a:	46bb      	mov	fp, r7
 800c29c:	e04a      	b.n	800c334 <_dtoa_r+0x6c4>
 800c29e:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <_dtoa_r+0x648>)
 800c2a0:	f7f4 f9d2 	bl	8000648 <__aeabi_dmul>
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	e7bd      	b.n	800c226 <_dtoa_r+0x5b6>
 800c2aa:	bf00      	nop
 800c2ac:	0800f318 	.word	0x0800f318
 800c2b0:	0800f2f0 	.word	0x0800f2f0
 800c2b4:	3ff00000 	.word	0x3ff00000
 800c2b8:	40240000 	.word	0x40240000
 800c2bc:	401c0000 	.word	0x401c0000
 800c2c0:	40140000 	.word	0x40140000
 800c2c4:	3fe00000 	.word	0x3fe00000
 800c2c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2cc:	9d00      	ldr	r5, [sp, #0]
 800c2ce:	4642      	mov	r2, r8
 800c2d0:	464b      	mov	r3, r9
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	f7f4 fae1 	bl	800089c <__aeabi_ddiv>
 800c2da:	f7f4 fc65 	bl	8000ba8 <__aeabi_d2iz>
 800c2de:	9001      	str	r0, [sp, #4]
 800c2e0:	f7f4 f948 	bl	8000574 <__aeabi_i2d>
 800c2e4:	4642      	mov	r2, r8
 800c2e6:	464b      	mov	r3, r9
 800c2e8:	f7f4 f9ae 	bl	8000648 <__aeabi_dmul>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f3 fff0 	bl	80002d8 <__aeabi_dsub>
 800c2f8:	9e01      	ldr	r6, [sp, #4]
 800c2fa:	9f04      	ldr	r7, [sp, #16]
 800c2fc:	3630      	adds	r6, #48	; 0x30
 800c2fe:	f805 6b01 	strb.w	r6, [r5], #1
 800c302:	9e00      	ldr	r6, [sp, #0]
 800c304:	1bae      	subs	r6, r5, r6
 800c306:	42b7      	cmp	r7, r6
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	d134      	bne.n	800c378 <_dtoa_r+0x708>
 800c30e:	f7f3 ffe5 	bl	80002dc <__adddf3>
 800c312:	4642      	mov	r2, r8
 800c314:	464b      	mov	r3, r9
 800c316:	4606      	mov	r6, r0
 800c318:	460f      	mov	r7, r1
 800c31a:	f7f4 fc25 	bl	8000b68 <__aeabi_dcmpgt>
 800c31e:	b9c8      	cbnz	r0, 800c354 <_dtoa_r+0x6e4>
 800c320:	4642      	mov	r2, r8
 800c322:	464b      	mov	r3, r9
 800c324:	4630      	mov	r0, r6
 800c326:	4639      	mov	r1, r7
 800c328:	f7f4 fbf6 	bl	8000b18 <__aeabi_dcmpeq>
 800c32c:	b110      	cbz	r0, 800c334 <_dtoa_r+0x6c4>
 800c32e:	9b01      	ldr	r3, [sp, #4]
 800c330:	07db      	lsls	r3, r3, #31
 800c332:	d40f      	bmi.n	800c354 <_dtoa_r+0x6e4>
 800c334:	4651      	mov	r1, sl
 800c336:	4620      	mov	r0, r4
 800c338:	f000 fb18 	bl	800c96c <_Bfree>
 800c33c:	2300      	movs	r3, #0
 800c33e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c340:	702b      	strb	r3, [r5, #0]
 800c342:	f10b 0301 	add.w	r3, fp, #1
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f43f ace2 	beq.w	800bd14 <_dtoa_r+0xa4>
 800c350:	601d      	str	r5, [r3, #0]
 800c352:	e4df      	b.n	800bd14 <_dtoa_r+0xa4>
 800c354:	465f      	mov	r7, fp
 800c356:	462b      	mov	r3, r5
 800c358:	461d      	mov	r5, r3
 800c35a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c35e:	2a39      	cmp	r2, #57	; 0x39
 800c360:	d106      	bne.n	800c370 <_dtoa_r+0x700>
 800c362:	9a00      	ldr	r2, [sp, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d1f7      	bne.n	800c358 <_dtoa_r+0x6e8>
 800c368:	9900      	ldr	r1, [sp, #0]
 800c36a:	2230      	movs	r2, #48	; 0x30
 800c36c:	3701      	adds	r7, #1
 800c36e:	700a      	strb	r2, [r1, #0]
 800c370:	781a      	ldrb	r2, [r3, #0]
 800c372:	3201      	adds	r2, #1
 800c374:	701a      	strb	r2, [r3, #0]
 800c376:	e790      	b.n	800c29a <_dtoa_r+0x62a>
 800c378:	4ba3      	ldr	r3, [pc, #652]	; (800c608 <_dtoa_r+0x998>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	f7f4 f964 	bl	8000648 <__aeabi_dmul>
 800c380:	2200      	movs	r2, #0
 800c382:	2300      	movs	r3, #0
 800c384:	4606      	mov	r6, r0
 800c386:	460f      	mov	r7, r1
 800c388:	f7f4 fbc6 	bl	8000b18 <__aeabi_dcmpeq>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d09e      	beq.n	800c2ce <_dtoa_r+0x65e>
 800c390:	e7d0      	b.n	800c334 <_dtoa_r+0x6c4>
 800c392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c394:	2a00      	cmp	r2, #0
 800c396:	f000 80ca 	beq.w	800c52e <_dtoa_r+0x8be>
 800c39a:	9a07      	ldr	r2, [sp, #28]
 800c39c:	2a01      	cmp	r2, #1
 800c39e:	f300 80ad 	bgt.w	800c4fc <_dtoa_r+0x88c>
 800c3a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3a4:	2a00      	cmp	r2, #0
 800c3a6:	f000 80a5 	beq.w	800c4f4 <_dtoa_r+0x884>
 800c3aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3ae:	9e08      	ldr	r6, [sp, #32]
 800c3b0:	9d05      	ldr	r5, [sp, #20]
 800c3b2:	9a05      	ldr	r2, [sp, #20]
 800c3b4:	441a      	add	r2, r3
 800c3b6:	9205      	str	r2, [sp, #20]
 800c3b8:	9a06      	ldr	r2, [sp, #24]
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	441a      	add	r2, r3
 800c3be:	4620      	mov	r0, r4
 800c3c0:	9206      	str	r2, [sp, #24]
 800c3c2:	f000 fb89 	bl	800cad8 <__i2b>
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	b165      	cbz	r5, 800c3e4 <_dtoa_r+0x774>
 800c3ca:	9b06      	ldr	r3, [sp, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	dd09      	ble.n	800c3e4 <_dtoa_r+0x774>
 800c3d0:	42ab      	cmp	r3, r5
 800c3d2:	9a05      	ldr	r2, [sp, #20]
 800c3d4:	bfa8      	it	ge
 800c3d6:	462b      	movge	r3, r5
 800c3d8:	1ad2      	subs	r2, r2, r3
 800c3da:	9205      	str	r2, [sp, #20]
 800c3dc:	9a06      	ldr	r2, [sp, #24]
 800c3de:	1aed      	subs	r5, r5, r3
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	9306      	str	r3, [sp, #24]
 800c3e4:	9b08      	ldr	r3, [sp, #32]
 800c3e6:	b1f3      	cbz	r3, 800c426 <_dtoa_r+0x7b6>
 800c3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 80a3 	beq.w	800c536 <_dtoa_r+0x8c6>
 800c3f0:	2e00      	cmp	r6, #0
 800c3f2:	dd10      	ble.n	800c416 <_dtoa_r+0x7a6>
 800c3f4:	4639      	mov	r1, r7
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fc2d 	bl	800cc58 <__pow5mult>
 800c3fe:	4652      	mov	r2, sl
 800c400:	4601      	mov	r1, r0
 800c402:	4607      	mov	r7, r0
 800c404:	4620      	mov	r0, r4
 800c406:	f000 fb7d 	bl	800cb04 <__multiply>
 800c40a:	4651      	mov	r1, sl
 800c40c:	4680      	mov	r8, r0
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 faac 	bl	800c96c <_Bfree>
 800c414:	46c2      	mov	sl, r8
 800c416:	9b08      	ldr	r3, [sp, #32]
 800c418:	1b9a      	subs	r2, r3, r6
 800c41a:	d004      	beq.n	800c426 <_dtoa_r+0x7b6>
 800c41c:	4651      	mov	r1, sl
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 fc1a 	bl	800cc58 <__pow5mult>
 800c424:	4682      	mov	sl, r0
 800c426:	2101      	movs	r1, #1
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fb55 	bl	800cad8 <__i2b>
 800c42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c430:	2b00      	cmp	r3, #0
 800c432:	4606      	mov	r6, r0
 800c434:	f340 8081 	ble.w	800c53a <_dtoa_r+0x8ca>
 800c438:	461a      	mov	r2, r3
 800c43a:	4601      	mov	r1, r0
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 fc0b 	bl	800cc58 <__pow5mult>
 800c442:	9b07      	ldr	r3, [sp, #28]
 800c444:	2b01      	cmp	r3, #1
 800c446:	4606      	mov	r6, r0
 800c448:	dd7a      	ble.n	800c540 <_dtoa_r+0x8d0>
 800c44a:	f04f 0800 	mov.w	r8, #0
 800c44e:	6933      	ldr	r3, [r6, #16]
 800c450:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c454:	6918      	ldr	r0, [r3, #16]
 800c456:	f000 faf1 	bl	800ca3c <__hi0bits>
 800c45a:	f1c0 0020 	rsb	r0, r0, #32
 800c45e:	9b06      	ldr	r3, [sp, #24]
 800c460:	4418      	add	r0, r3
 800c462:	f010 001f 	ands.w	r0, r0, #31
 800c466:	f000 8094 	beq.w	800c592 <_dtoa_r+0x922>
 800c46a:	f1c0 0320 	rsb	r3, r0, #32
 800c46e:	2b04      	cmp	r3, #4
 800c470:	f340 8085 	ble.w	800c57e <_dtoa_r+0x90e>
 800c474:	9b05      	ldr	r3, [sp, #20]
 800c476:	f1c0 001c 	rsb	r0, r0, #28
 800c47a:	4403      	add	r3, r0
 800c47c:	9305      	str	r3, [sp, #20]
 800c47e:	9b06      	ldr	r3, [sp, #24]
 800c480:	4403      	add	r3, r0
 800c482:	4405      	add	r5, r0
 800c484:	9306      	str	r3, [sp, #24]
 800c486:	9b05      	ldr	r3, [sp, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd05      	ble.n	800c498 <_dtoa_r+0x828>
 800c48c:	4651      	mov	r1, sl
 800c48e:	461a      	mov	r2, r3
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fc3b 	bl	800cd0c <__lshift>
 800c496:	4682      	mov	sl, r0
 800c498:	9b06      	ldr	r3, [sp, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dd05      	ble.n	800c4aa <_dtoa_r+0x83a>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 fc32 	bl	800cd0c <__lshift>
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d072      	beq.n	800c596 <_dtoa_r+0x926>
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	4650      	mov	r0, sl
 800c4b4:	f000 fc96 	bl	800cde4 <__mcmp>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	da6c      	bge.n	800c596 <_dtoa_r+0x926>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	4651      	mov	r1, sl
 800c4c0:	220a      	movs	r2, #10
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 fa74 	bl	800c9b0 <__multadd>
 800c4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4ce:	4682      	mov	sl, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 81b0 	beq.w	800c836 <_dtoa_r+0xbc6>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	4639      	mov	r1, r7
 800c4da:	220a      	movs	r2, #10
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f000 fa67 	bl	800c9b0 <__multadd>
 800c4e2:	9b01      	ldr	r3, [sp, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	f300 8096 	bgt.w	800c618 <_dtoa_r+0x9a8>
 800c4ec:	9b07      	ldr	r3, [sp, #28]
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	dc59      	bgt.n	800c5a6 <_dtoa_r+0x936>
 800c4f2:	e091      	b.n	800c618 <_dtoa_r+0x9a8>
 800c4f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4fa:	e758      	b.n	800c3ae <_dtoa_r+0x73e>
 800c4fc:	9b04      	ldr	r3, [sp, #16]
 800c4fe:	1e5e      	subs	r6, r3, #1
 800c500:	9b08      	ldr	r3, [sp, #32]
 800c502:	42b3      	cmp	r3, r6
 800c504:	bfbf      	itttt	lt
 800c506:	9b08      	ldrlt	r3, [sp, #32]
 800c508:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c50a:	9608      	strlt	r6, [sp, #32]
 800c50c:	1af3      	sublt	r3, r6, r3
 800c50e:	bfb4      	ite	lt
 800c510:	18d2      	addlt	r2, r2, r3
 800c512:	1b9e      	subge	r6, r3, r6
 800c514:	9b04      	ldr	r3, [sp, #16]
 800c516:	bfbc      	itt	lt
 800c518:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c51a:	2600      	movlt	r6, #0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfb7      	itett	lt
 800c520:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c524:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c528:	1a9d      	sublt	r5, r3, r2
 800c52a:	2300      	movlt	r3, #0
 800c52c:	e741      	b.n	800c3b2 <_dtoa_r+0x742>
 800c52e:	9e08      	ldr	r6, [sp, #32]
 800c530:	9d05      	ldr	r5, [sp, #20]
 800c532:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c534:	e748      	b.n	800c3c8 <_dtoa_r+0x758>
 800c536:	9a08      	ldr	r2, [sp, #32]
 800c538:	e770      	b.n	800c41c <_dtoa_r+0x7ac>
 800c53a:	9b07      	ldr	r3, [sp, #28]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	dc19      	bgt.n	800c574 <_dtoa_r+0x904>
 800c540:	9b02      	ldr	r3, [sp, #8]
 800c542:	b9bb      	cbnz	r3, 800c574 <_dtoa_r+0x904>
 800c544:	9b03      	ldr	r3, [sp, #12]
 800c546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c54a:	b99b      	cbnz	r3, 800c574 <_dtoa_r+0x904>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c552:	0d1b      	lsrs	r3, r3, #20
 800c554:	051b      	lsls	r3, r3, #20
 800c556:	b183      	cbz	r3, 800c57a <_dtoa_r+0x90a>
 800c558:	9b05      	ldr	r3, [sp, #20]
 800c55a:	3301      	adds	r3, #1
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	9b06      	ldr	r3, [sp, #24]
 800c560:	3301      	adds	r3, #1
 800c562:	9306      	str	r3, [sp, #24]
 800c564:	f04f 0801 	mov.w	r8, #1
 800c568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f47f af6f 	bne.w	800c44e <_dtoa_r+0x7de>
 800c570:	2001      	movs	r0, #1
 800c572:	e774      	b.n	800c45e <_dtoa_r+0x7ee>
 800c574:	f04f 0800 	mov.w	r8, #0
 800c578:	e7f6      	b.n	800c568 <_dtoa_r+0x8f8>
 800c57a:	4698      	mov	r8, r3
 800c57c:	e7f4      	b.n	800c568 <_dtoa_r+0x8f8>
 800c57e:	d082      	beq.n	800c486 <_dtoa_r+0x816>
 800c580:	9a05      	ldr	r2, [sp, #20]
 800c582:	331c      	adds	r3, #28
 800c584:	441a      	add	r2, r3
 800c586:	9205      	str	r2, [sp, #20]
 800c588:	9a06      	ldr	r2, [sp, #24]
 800c58a:	441a      	add	r2, r3
 800c58c:	441d      	add	r5, r3
 800c58e:	9206      	str	r2, [sp, #24]
 800c590:	e779      	b.n	800c486 <_dtoa_r+0x816>
 800c592:	4603      	mov	r3, r0
 800c594:	e7f4      	b.n	800c580 <_dtoa_r+0x910>
 800c596:	9b04      	ldr	r3, [sp, #16]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	dc37      	bgt.n	800c60c <_dtoa_r+0x99c>
 800c59c:	9b07      	ldr	r3, [sp, #28]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	dd34      	ble.n	800c60c <_dtoa_r+0x99c>
 800c5a2:	9b04      	ldr	r3, [sp, #16]
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	9b01      	ldr	r3, [sp, #4]
 800c5a8:	b963      	cbnz	r3, 800c5c4 <_dtoa_r+0x954>
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	2205      	movs	r2, #5
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 f9fe 	bl	800c9b0 <__multadd>
 800c5b4:	4601      	mov	r1, r0
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	f000 fc13 	bl	800cde4 <__mcmp>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f73f adbb 	bgt.w	800c13a <_dtoa_r+0x4ca>
 800c5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c6:	9d00      	ldr	r5, [sp, #0]
 800c5c8:	ea6f 0b03 	mvn.w	fp, r3
 800c5cc:	f04f 0800 	mov.w	r8, #0
 800c5d0:	4631      	mov	r1, r6
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f000 f9ca 	bl	800c96c <_Bfree>
 800c5d8:	2f00      	cmp	r7, #0
 800c5da:	f43f aeab 	beq.w	800c334 <_dtoa_r+0x6c4>
 800c5de:	f1b8 0f00 	cmp.w	r8, #0
 800c5e2:	d005      	beq.n	800c5f0 <_dtoa_r+0x980>
 800c5e4:	45b8      	cmp	r8, r7
 800c5e6:	d003      	beq.n	800c5f0 <_dtoa_r+0x980>
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 f9be 	bl	800c96c <_Bfree>
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 f9ba 	bl	800c96c <_Bfree>
 800c5f8:	e69c      	b.n	800c334 <_dtoa_r+0x6c4>
 800c5fa:	2600      	movs	r6, #0
 800c5fc:	4637      	mov	r7, r6
 800c5fe:	e7e1      	b.n	800c5c4 <_dtoa_r+0x954>
 800c600:	46bb      	mov	fp, r7
 800c602:	4637      	mov	r7, r6
 800c604:	e599      	b.n	800c13a <_dtoa_r+0x4ca>
 800c606:	bf00      	nop
 800c608:	40240000 	.word	0x40240000
 800c60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f000 80c8 	beq.w	800c7a4 <_dtoa_r+0xb34>
 800c614:	9b04      	ldr	r3, [sp, #16]
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	2d00      	cmp	r5, #0
 800c61a:	dd05      	ble.n	800c628 <_dtoa_r+0x9b8>
 800c61c:	4639      	mov	r1, r7
 800c61e:	462a      	mov	r2, r5
 800c620:	4620      	mov	r0, r4
 800c622:	f000 fb73 	bl	800cd0c <__lshift>
 800c626:	4607      	mov	r7, r0
 800c628:	f1b8 0f00 	cmp.w	r8, #0
 800c62c:	d05b      	beq.n	800c6e6 <_dtoa_r+0xa76>
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	4620      	mov	r0, r4
 800c632:	f000 f95b 	bl	800c8ec <_Balloc>
 800c636:	4605      	mov	r5, r0
 800c638:	b928      	cbnz	r0, 800c646 <_dtoa_r+0x9d6>
 800c63a:	4b83      	ldr	r3, [pc, #524]	; (800c848 <_dtoa_r+0xbd8>)
 800c63c:	4602      	mov	r2, r0
 800c63e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c642:	f7ff bb2e 	b.w	800bca2 <_dtoa_r+0x32>
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	3202      	adds	r2, #2
 800c64a:	0092      	lsls	r2, r2, #2
 800c64c:	f107 010c 	add.w	r1, r7, #12
 800c650:	300c      	adds	r0, #12
 800c652:	f001 f8af 	bl	800d7b4 <memcpy>
 800c656:	2201      	movs	r2, #1
 800c658:	4629      	mov	r1, r5
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 fb56 	bl	800cd0c <__lshift>
 800c660:	9b00      	ldr	r3, [sp, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	9304      	str	r3, [sp, #16]
 800c666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c66a:	4413      	add	r3, r2
 800c66c:	9308      	str	r3, [sp, #32]
 800c66e:	9b02      	ldr	r3, [sp, #8]
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	46b8      	mov	r8, r7
 800c676:	9306      	str	r3, [sp, #24]
 800c678:	4607      	mov	r7, r0
 800c67a:	9b04      	ldr	r3, [sp, #16]
 800c67c:	4631      	mov	r1, r6
 800c67e:	3b01      	subs	r3, #1
 800c680:	4650      	mov	r0, sl
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	f7ff fa6a 	bl	800bb5c <quorem>
 800c688:	4641      	mov	r1, r8
 800c68a:	9002      	str	r0, [sp, #8]
 800c68c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c690:	4650      	mov	r0, sl
 800c692:	f000 fba7 	bl	800cde4 <__mcmp>
 800c696:	463a      	mov	r2, r7
 800c698:	9005      	str	r0, [sp, #20]
 800c69a:	4631      	mov	r1, r6
 800c69c:	4620      	mov	r0, r4
 800c69e:	f000 fbbd 	bl	800ce1c <__mdiff>
 800c6a2:	68c2      	ldr	r2, [r0, #12]
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	bb02      	cbnz	r2, 800c6ea <_dtoa_r+0xa7a>
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	f000 fb9a 	bl	800cde4 <__mcmp>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b8:	f000 f958 	bl	800c96c <_Bfree>
 800c6bc:	9b07      	ldr	r3, [sp, #28]
 800c6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6c0:	9d04      	ldr	r5, [sp, #16]
 800c6c2:	ea43 0102 	orr.w	r1, r3, r2
 800c6c6:	9b06      	ldr	r3, [sp, #24]
 800c6c8:	4319      	orrs	r1, r3
 800c6ca:	d110      	bne.n	800c6ee <_dtoa_r+0xa7e>
 800c6cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6d0:	d029      	beq.n	800c726 <_dtoa_r+0xab6>
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dd02      	ble.n	800c6de <_dtoa_r+0xa6e>
 800c6d8:	9b02      	ldr	r3, [sp, #8]
 800c6da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	f883 9000 	strb.w	r9, [r3]
 800c6e4:	e774      	b.n	800c5d0 <_dtoa_r+0x960>
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	e7ba      	b.n	800c660 <_dtoa_r+0x9f0>
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	e7e1      	b.n	800c6b2 <_dtoa_r+0xa42>
 800c6ee:	9b05      	ldr	r3, [sp, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	db04      	blt.n	800c6fe <_dtoa_r+0xa8e>
 800c6f4:	9907      	ldr	r1, [sp, #28]
 800c6f6:	430b      	orrs	r3, r1
 800c6f8:	9906      	ldr	r1, [sp, #24]
 800c6fa:	430b      	orrs	r3, r1
 800c6fc:	d120      	bne.n	800c740 <_dtoa_r+0xad0>
 800c6fe:	2a00      	cmp	r2, #0
 800c700:	dded      	ble.n	800c6de <_dtoa_r+0xa6e>
 800c702:	4651      	mov	r1, sl
 800c704:	2201      	movs	r2, #1
 800c706:	4620      	mov	r0, r4
 800c708:	f000 fb00 	bl	800cd0c <__lshift>
 800c70c:	4631      	mov	r1, r6
 800c70e:	4682      	mov	sl, r0
 800c710:	f000 fb68 	bl	800cde4 <__mcmp>
 800c714:	2800      	cmp	r0, #0
 800c716:	dc03      	bgt.n	800c720 <_dtoa_r+0xab0>
 800c718:	d1e1      	bne.n	800c6de <_dtoa_r+0xa6e>
 800c71a:	f019 0f01 	tst.w	r9, #1
 800c71e:	d0de      	beq.n	800c6de <_dtoa_r+0xa6e>
 800c720:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c724:	d1d8      	bne.n	800c6d8 <_dtoa_r+0xa68>
 800c726:	9a01      	ldr	r2, [sp, #4]
 800c728:	2339      	movs	r3, #57	; 0x39
 800c72a:	7013      	strb	r3, [r2, #0]
 800c72c:	462b      	mov	r3, r5
 800c72e:	461d      	mov	r5, r3
 800c730:	3b01      	subs	r3, #1
 800c732:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c736:	2a39      	cmp	r2, #57	; 0x39
 800c738:	d06c      	beq.n	800c814 <_dtoa_r+0xba4>
 800c73a:	3201      	adds	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e747      	b.n	800c5d0 <_dtoa_r+0x960>
 800c740:	2a00      	cmp	r2, #0
 800c742:	dd07      	ble.n	800c754 <_dtoa_r+0xae4>
 800c744:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c748:	d0ed      	beq.n	800c726 <_dtoa_r+0xab6>
 800c74a:	9a01      	ldr	r2, [sp, #4]
 800c74c:	f109 0301 	add.w	r3, r9, #1
 800c750:	7013      	strb	r3, [r2, #0]
 800c752:	e73d      	b.n	800c5d0 <_dtoa_r+0x960>
 800c754:	9b04      	ldr	r3, [sp, #16]
 800c756:	9a08      	ldr	r2, [sp, #32]
 800c758:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d043      	beq.n	800c7e8 <_dtoa_r+0xb78>
 800c760:	4651      	mov	r1, sl
 800c762:	2300      	movs	r3, #0
 800c764:	220a      	movs	r2, #10
 800c766:	4620      	mov	r0, r4
 800c768:	f000 f922 	bl	800c9b0 <__multadd>
 800c76c:	45b8      	cmp	r8, r7
 800c76e:	4682      	mov	sl, r0
 800c770:	f04f 0300 	mov.w	r3, #0
 800c774:	f04f 020a 	mov.w	r2, #10
 800c778:	4641      	mov	r1, r8
 800c77a:	4620      	mov	r0, r4
 800c77c:	d107      	bne.n	800c78e <_dtoa_r+0xb1e>
 800c77e:	f000 f917 	bl	800c9b0 <__multadd>
 800c782:	4680      	mov	r8, r0
 800c784:	4607      	mov	r7, r0
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	3301      	adds	r3, #1
 800c78a:	9304      	str	r3, [sp, #16]
 800c78c:	e775      	b.n	800c67a <_dtoa_r+0xa0a>
 800c78e:	f000 f90f 	bl	800c9b0 <__multadd>
 800c792:	4639      	mov	r1, r7
 800c794:	4680      	mov	r8, r0
 800c796:	2300      	movs	r3, #0
 800c798:	220a      	movs	r2, #10
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 f908 	bl	800c9b0 <__multadd>
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	e7f0      	b.n	800c786 <_dtoa_r+0xb16>
 800c7a4:	9b04      	ldr	r3, [sp, #16]
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	9d00      	ldr	r5, [sp, #0]
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	f7ff f9d5 	bl	800bb5c <quorem>
 800c7b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7b6:	9b00      	ldr	r3, [sp, #0]
 800c7b8:	f805 9b01 	strb.w	r9, [r5], #1
 800c7bc:	1aea      	subs	r2, r5, r3
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	dd07      	ble.n	800c7d4 <_dtoa_r+0xb64>
 800c7c4:	4651      	mov	r1, sl
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	220a      	movs	r2, #10
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 f8f0 	bl	800c9b0 <__multadd>
 800c7d0:	4682      	mov	sl, r0
 800c7d2:	e7ea      	b.n	800c7aa <_dtoa_r+0xb3a>
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	bfc8      	it	gt
 800c7da:	461d      	movgt	r5, r3
 800c7dc:	9b00      	ldr	r3, [sp, #0]
 800c7de:	bfd8      	it	le
 800c7e0:	2501      	movle	r5, #1
 800c7e2:	441d      	add	r5, r3
 800c7e4:	f04f 0800 	mov.w	r8, #0
 800c7e8:	4651      	mov	r1, sl
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f000 fa8d 	bl	800cd0c <__lshift>
 800c7f2:	4631      	mov	r1, r6
 800c7f4:	4682      	mov	sl, r0
 800c7f6:	f000 faf5 	bl	800cde4 <__mcmp>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	dc96      	bgt.n	800c72c <_dtoa_r+0xabc>
 800c7fe:	d102      	bne.n	800c806 <_dtoa_r+0xb96>
 800c800:	f019 0f01 	tst.w	r9, #1
 800c804:	d192      	bne.n	800c72c <_dtoa_r+0xabc>
 800c806:	462b      	mov	r3, r5
 800c808:	461d      	mov	r5, r3
 800c80a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c80e:	2a30      	cmp	r2, #48	; 0x30
 800c810:	d0fa      	beq.n	800c808 <_dtoa_r+0xb98>
 800c812:	e6dd      	b.n	800c5d0 <_dtoa_r+0x960>
 800c814:	9a00      	ldr	r2, [sp, #0]
 800c816:	429a      	cmp	r2, r3
 800c818:	d189      	bne.n	800c72e <_dtoa_r+0xabe>
 800c81a:	f10b 0b01 	add.w	fp, fp, #1
 800c81e:	2331      	movs	r3, #49	; 0x31
 800c820:	e796      	b.n	800c750 <_dtoa_r+0xae0>
 800c822:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <_dtoa_r+0xbdc>)
 800c824:	f7ff ba99 	b.w	800bd5a <_dtoa_r+0xea>
 800c828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f47f aa6d 	bne.w	800bd0a <_dtoa_r+0x9a>
 800c830:	4b07      	ldr	r3, [pc, #28]	; (800c850 <_dtoa_r+0xbe0>)
 800c832:	f7ff ba92 	b.w	800bd5a <_dtoa_r+0xea>
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dcb5      	bgt.n	800c7a8 <_dtoa_r+0xb38>
 800c83c:	9b07      	ldr	r3, [sp, #28]
 800c83e:	2b02      	cmp	r3, #2
 800c840:	f73f aeb1 	bgt.w	800c5a6 <_dtoa_r+0x936>
 800c844:	e7b0      	b.n	800c7a8 <_dtoa_r+0xb38>
 800c846:	bf00      	nop
 800c848:	0800f284 	.word	0x0800f284
 800c84c:	0800f1e4 	.word	0x0800f1e4
 800c850:	0800f208 	.word	0x0800f208

0800c854 <_free_r>:
 800c854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c856:	2900      	cmp	r1, #0
 800c858:	d044      	beq.n	800c8e4 <_free_r+0x90>
 800c85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c85e:	9001      	str	r0, [sp, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	f1a1 0404 	sub.w	r4, r1, #4
 800c866:	bfb8      	it	lt
 800c868:	18e4      	addlt	r4, r4, r3
 800c86a:	f7fe f9a9 	bl	800abc0 <__malloc_lock>
 800c86e:	4a1e      	ldr	r2, [pc, #120]	; (800c8e8 <_free_r+0x94>)
 800c870:	9801      	ldr	r0, [sp, #4]
 800c872:	6813      	ldr	r3, [r2, #0]
 800c874:	b933      	cbnz	r3, 800c884 <_free_r+0x30>
 800c876:	6063      	str	r3, [r4, #4]
 800c878:	6014      	str	r4, [r2, #0]
 800c87a:	b003      	add	sp, #12
 800c87c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c880:	f7fe b9a4 	b.w	800abcc <__malloc_unlock>
 800c884:	42a3      	cmp	r3, r4
 800c886:	d908      	bls.n	800c89a <_free_r+0x46>
 800c888:	6825      	ldr	r5, [r4, #0]
 800c88a:	1961      	adds	r1, r4, r5
 800c88c:	428b      	cmp	r3, r1
 800c88e:	bf01      	itttt	eq
 800c890:	6819      	ldreq	r1, [r3, #0]
 800c892:	685b      	ldreq	r3, [r3, #4]
 800c894:	1949      	addeq	r1, r1, r5
 800c896:	6021      	streq	r1, [r4, #0]
 800c898:	e7ed      	b.n	800c876 <_free_r+0x22>
 800c89a:	461a      	mov	r2, r3
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	b10b      	cbz	r3, 800c8a4 <_free_r+0x50>
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d9fa      	bls.n	800c89a <_free_r+0x46>
 800c8a4:	6811      	ldr	r1, [r2, #0]
 800c8a6:	1855      	adds	r5, r2, r1
 800c8a8:	42a5      	cmp	r5, r4
 800c8aa:	d10b      	bne.n	800c8c4 <_free_r+0x70>
 800c8ac:	6824      	ldr	r4, [r4, #0]
 800c8ae:	4421      	add	r1, r4
 800c8b0:	1854      	adds	r4, r2, r1
 800c8b2:	42a3      	cmp	r3, r4
 800c8b4:	6011      	str	r1, [r2, #0]
 800c8b6:	d1e0      	bne.n	800c87a <_free_r+0x26>
 800c8b8:	681c      	ldr	r4, [r3, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	6053      	str	r3, [r2, #4]
 800c8be:	440c      	add	r4, r1
 800c8c0:	6014      	str	r4, [r2, #0]
 800c8c2:	e7da      	b.n	800c87a <_free_r+0x26>
 800c8c4:	d902      	bls.n	800c8cc <_free_r+0x78>
 800c8c6:	230c      	movs	r3, #12
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	e7d6      	b.n	800c87a <_free_r+0x26>
 800c8cc:	6825      	ldr	r5, [r4, #0]
 800c8ce:	1961      	adds	r1, r4, r5
 800c8d0:	428b      	cmp	r3, r1
 800c8d2:	bf04      	itt	eq
 800c8d4:	6819      	ldreq	r1, [r3, #0]
 800c8d6:	685b      	ldreq	r3, [r3, #4]
 800c8d8:	6063      	str	r3, [r4, #4]
 800c8da:	bf04      	itt	eq
 800c8dc:	1949      	addeq	r1, r1, r5
 800c8de:	6021      	streq	r1, [r4, #0]
 800c8e0:	6054      	str	r4, [r2, #4]
 800c8e2:	e7ca      	b.n	800c87a <_free_r+0x26>
 800c8e4:	b003      	add	sp, #12
 800c8e6:	bd30      	pop	{r4, r5, pc}
 800c8e8:	2000177c 	.word	0x2000177c

0800c8ec <_Balloc>:
 800c8ec:	b570      	push	{r4, r5, r6, lr}
 800c8ee:	69c6      	ldr	r6, [r0, #28]
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	460d      	mov	r5, r1
 800c8f4:	b976      	cbnz	r6, 800c914 <_Balloc+0x28>
 800c8f6:	2010      	movs	r0, #16
 800c8f8:	f7fe f8ba 	bl	800aa70 <malloc>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	61e0      	str	r0, [r4, #28]
 800c900:	b920      	cbnz	r0, 800c90c <_Balloc+0x20>
 800c902:	4b18      	ldr	r3, [pc, #96]	; (800c964 <_Balloc+0x78>)
 800c904:	4818      	ldr	r0, [pc, #96]	; (800c968 <_Balloc+0x7c>)
 800c906:	216b      	movs	r1, #107	; 0x6b
 800c908:	f000 ff62 	bl	800d7d0 <__assert_func>
 800c90c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c910:	6006      	str	r6, [r0, #0]
 800c912:	60c6      	str	r6, [r0, #12]
 800c914:	69e6      	ldr	r6, [r4, #28]
 800c916:	68f3      	ldr	r3, [r6, #12]
 800c918:	b183      	cbz	r3, 800c93c <_Balloc+0x50>
 800c91a:	69e3      	ldr	r3, [r4, #28]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c922:	b9b8      	cbnz	r0, 800c954 <_Balloc+0x68>
 800c924:	2101      	movs	r1, #1
 800c926:	fa01 f605 	lsl.w	r6, r1, r5
 800c92a:	1d72      	adds	r2, r6, #5
 800c92c:	0092      	lsls	r2, r2, #2
 800c92e:	4620      	mov	r0, r4
 800c930:	f000 ff6c 	bl	800d80c <_calloc_r>
 800c934:	b160      	cbz	r0, 800c950 <_Balloc+0x64>
 800c936:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c93a:	e00e      	b.n	800c95a <_Balloc+0x6e>
 800c93c:	2221      	movs	r2, #33	; 0x21
 800c93e:	2104      	movs	r1, #4
 800c940:	4620      	mov	r0, r4
 800c942:	f000 ff63 	bl	800d80c <_calloc_r>
 800c946:	69e3      	ldr	r3, [r4, #28]
 800c948:	60f0      	str	r0, [r6, #12]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1e4      	bne.n	800c91a <_Balloc+0x2e>
 800c950:	2000      	movs	r0, #0
 800c952:	bd70      	pop	{r4, r5, r6, pc}
 800c954:	6802      	ldr	r2, [r0, #0]
 800c956:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c95a:	2300      	movs	r3, #0
 800c95c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c960:	e7f7      	b.n	800c952 <_Balloc+0x66>
 800c962:	bf00      	nop
 800c964:	0800f215 	.word	0x0800f215
 800c968:	0800f295 	.word	0x0800f295

0800c96c <_Bfree>:
 800c96c:	b570      	push	{r4, r5, r6, lr}
 800c96e:	69c6      	ldr	r6, [r0, #28]
 800c970:	4605      	mov	r5, r0
 800c972:	460c      	mov	r4, r1
 800c974:	b976      	cbnz	r6, 800c994 <_Bfree+0x28>
 800c976:	2010      	movs	r0, #16
 800c978:	f7fe f87a 	bl	800aa70 <malloc>
 800c97c:	4602      	mov	r2, r0
 800c97e:	61e8      	str	r0, [r5, #28]
 800c980:	b920      	cbnz	r0, 800c98c <_Bfree+0x20>
 800c982:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <_Bfree+0x3c>)
 800c984:	4809      	ldr	r0, [pc, #36]	; (800c9ac <_Bfree+0x40>)
 800c986:	218f      	movs	r1, #143	; 0x8f
 800c988:	f000 ff22 	bl	800d7d0 <__assert_func>
 800c98c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c990:	6006      	str	r6, [r0, #0]
 800c992:	60c6      	str	r6, [r0, #12]
 800c994:	b13c      	cbz	r4, 800c9a6 <_Bfree+0x3a>
 800c996:	69eb      	ldr	r3, [r5, #28]
 800c998:	6862      	ldr	r2, [r4, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9a0:	6021      	str	r1, [r4, #0]
 800c9a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	0800f215 	.word	0x0800f215
 800c9ac:	0800f295 	.word	0x0800f295

0800c9b0 <__multadd>:
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	690d      	ldr	r5, [r1, #16]
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	461e      	mov	r6, r3
 800c9bc:	f101 0c14 	add.w	ip, r1, #20
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	f8dc 3000 	ldr.w	r3, [ip]
 800c9c6:	b299      	uxth	r1, r3
 800c9c8:	fb02 6101 	mla	r1, r2, r1, r6
 800c9cc:	0c1e      	lsrs	r6, r3, #16
 800c9ce:	0c0b      	lsrs	r3, r1, #16
 800c9d0:	fb02 3306 	mla	r3, r2, r6, r3
 800c9d4:	b289      	uxth	r1, r1
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9dc:	4285      	cmp	r5, r0
 800c9de:	f84c 1b04 	str.w	r1, [ip], #4
 800c9e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9e6:	dcec      	bgt.n	800c9c2 <__multadd+0x12>
 800c9e8:	b30e      	cbz	r6, 800ca2e <__multadd+0x7e>
 800c9ea:	68a3      	ldr	r3, [r4, #8]
 800c9ec:	42ab      	cmp	r3, r5
 800c9ee:	dc19      	bgt.n	800ca24 <__multadd+0x74>
 800c9f0:	6861      	ldr	r1, [r4, #4]
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	3101      	adds	r1, #1
 800c9f6:	f7ff ff79 	bl	800c8ec <_Balloc>
 800c9fa:	4680      	mov	r8, r0
 800c9fc:	b928      	cbnz	r0, 800ca0a <__multadd+0x5a>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <__multadd+0x84>)
 800ca02:	480d      	ldr	r0, [pc, #52]	; (800ca38 <__multadd+0x88>)
 800ca04:	21ba      	movs	r1, #186	; 0xba
 800ca06:	f000 fee3 	bl	800d7d0 <__assert_func>
 800ca0a:	6922      	ldr	r2, [r4, #16]
 800ca0c:	3202      	adds	r2, #2
 800ca0e:	f104 010c 	add.w	r1, r4, #12
 800ca12:	0092      	lsls	r2, r2, #2
 800ca14:	300c      	adds	r0, #12
 800ca16:	f000 fecd 	bl	800d7b4 <memcpy>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	f7ff ffa5 	bl	800c96c <_Bfree>
 800ca22:	4644      	mov	r4, r8
 800ca24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca28:	3501      	adds	r5, #1
 800ca2a:	615e      	str	r6, [r3, #20]
 800ca2c:	6125      	str	r5, [r4, #16]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca34:	0800f284 	.word	0x0800f284
 800ca38:	0800f295 	.word	0x0800f295

0800ca3c <__hi0bits>:
 800ca3c:	0c03      	lsrs	r3, r0, #16
 800ca3e:	041b      	lsls	r3, r3, #16
 800ca40:	b9d3      	cbnz	r3, 800ca78 <__hi0bits+0x3c>
 800ca42:	0400      	lsls	r0, r0, #16
 800ca44:	2310      	movs	r3, #16
 800ca46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca4a:	bf04      	itt	eq
 800ca4c:	0200      	lsleq	r0, r0, #8
 800ca4e:	3308      	addeq	r3, #8
 800ca50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca54:	bf04      	itt	eq
 800ca56:	0100      	lsleq	r0, r0, #4
 800ca58:	3304      	addeq	r3, #4
 800ca5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca5e:	bf04      	itt	eq
 800ca60:	0080      	lsleq	r0, r0, #2
 800ca62:	3302      	addeq	r3, #2
 800ca64:	2800      	cmp	r0, #0
 800ca66:	db05      	blt.n	800ca74 <__hi0bits+0x38>
 800ca68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca6c:	f103 0301 	add.w	r3, r3, #1
 800ca70:	bf08      	it	eq
 800ca72:	2320      	moveq	r3, #32
 800ca74:	4618      	mov	r0, r3
 800ca76:	4770      	bx	lr
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e7e4      	b.n	800ca46 <__hi0bits+0xa>

0800ca7c <__lo0bits>:
 800ca7c:	6803      	ldr	r3, [r0, #0]
 800ca7e:	f013 0207 	ands.w	r2, r3, #7
 800ca82:	d00c      	beq.n	800ca9e <__lo0bits+0x22>
 800ca84:	07d9      	lsls	r1, r3, #31
 800ca86:	d422      	bmi.n	800cace <__lo0bits+0x52>
 800ca88:	079a      	lsls	r2, r3, #30
 800ca8a:	bf49      	itett	mi
 800ca8c:	085b      	lsrmi	r3, r3, #1
 800ca8e:	089b      	lsrpl	r3, r3, #2
 800ca90:	6003      	strmi	r3, [r0, #0]
 800ca92:	2201      	movmi	r2, #1
 800ca94:	bf5c      	itt	pl
 800ca96:	6003      	strpl	r3, [r0, #0]
 800ca98:	2202      	movpl	r2, #2
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	4770      	bx	lr
 800ca9e:	b299      	uxth	r1, r3
 800caa0:	b909      	cbnz	r1, 800caa6 <__lo0bits+0x2a>
 800caa2:	0c1b      	lsrs	r3, r3, #16
 800caa4:	2210      	movs	r2, #16
 800caa6:	b2d9      	uxtb	r1, r3
 800caa8:	b909      	cbnz	r1, 800caae <__lo0bits+0x32>
 800caaa:	3208      	adds	r2, #8
 800caac:	0a1b      	lsrs	r3, r3, #8
 800caae:	0719      	lsls	r1, r3, #28
 800cab0:	bf04      	itt	eq
 800cab2:	091b      	lsreq	r3, r3, #4
 800cab4:	3204      	addeq	r2, #4
 800cab6:	0799      	lsls	r1, r3, #30
 800cab8:	bf04      	itt	eq
 800caba:	089b      	lsreq	r3, r3, #2
 800cabc:	3202      	addeq	r2, #2
 800cabe:	07d9      	lsls	r1, r3, #31
 800cac0:	d403      	bmi.n	800caca <__lo0bits+0x4e>
 800cac2:	085b      	lsrs	r3, r3, #1
 800cac4:	f102 0201 	add.w	r2, r2, #1
 800cac8:	d003      	beq.n	800cad2 <__lo0bits+0x56>
 800caca:	6003      	str	r3, [r0, #0]
 800cacc:	e7e5      	b.n	800ca9a <__lo0bits+0x1e>
 800cace:	2200      	movs	r2, #0
 800cad0:	e7e3      	b.n	800ca9a <__lo0bits+0x1e>
 800cad2:	2220      	movs	r2, #32
 800cad4:	e7e1      	b.n	800ca9a <__lo0bits+0x1e>
	...

0800cad8 <__i2b>:
 800cad8:	b510      	push	{r4, lr}
 800cada:	460c      	mov	r4, r1
 800cadc:	2101      	movs	r1, #1
 800cade:	f7ff ff05 	bl	800c8ec <_Balloc>
 800cae2:	4602      	mov	r2, r0
 800cae4:	b928      	cbnz	r0, 800caf2 <__i2b+0x1a>
 800cae6:	4b05      	ldr	r3, [pc, #20]	; (800cafc <__i2b+0x24>)
 800cae8:	4805      	ldr	r0, [pc, #20]	; (800cb00 <__i2b+0x28>)
 800caea:	f240 1145 	movw	r1, #325	; 0x145
 800caee:	f000 fe6f 	bl	800d7d0 <__assert_func>
 800caf2:	2301      	movs	r3, #1
 800caf4:	6144      	str	r4, [r0, #20]
 800caf6:	6103      	str	r3, [r0, #16]
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	bf00      	nop
 800cafc:	0800f284 	.word	0x0800f284
 800cb00:	0800f295 	.word	0x0800f295

0800cb04 <__multiply>:
 800cb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	4691      	mov	r9, r2
 800cb0a:	690a      	ldr	r2, [r1, #16]
 800cb0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	bfb8      	it	lt
 800cb14:	460b      	movlt	r3, r1
 800cb16:	460c      	mov	r4, r1
 800cb18:	bfbc      	itt	lt
 800cb1a:	464c      	movlt	r4, r9
 800cb1c:	4699      	movlt	r9, r3
 800cb1e:	6927      	ldr	r7, [r4, #16]
 800cb20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb24:	68a3      	ldr	r3, [r4, #8]
 800cb26:	6861      	ldr	r1, [r4, #4]
 800cb28:	eb07 060a 	add.w	r6, r7, sl
 800cb2c:	42b3      	cmp	r3, r6
 800cb2e:	b085      	sub	sp, #20
 800cb30:	bfb8      	it	lt
 800cb32:	3101      	addlt	r1, #1
 800cb34:	f7ff feda 	bl	800c8ec <_Balloc>
 800cb38:	b930      	cbnz	r0, 800cb48 <__multiply+0x44>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	4b44      	ldr	r3, [pc, #272]	; (800cc50 <__multiply+0x14c>)
 800cb3e:	4845      	ldr	r0, [pc, #276]	; (800cc54 <__multiply+0x150>)
 800cb40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cb44:	f000 fe44 	bl	800d7d0 <__assert_func>
 800cb48:	f100 0514 	add.w	r5, r0, #20
 800cb4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb50:	462b      	mov	r3, r5
 800cb52:	2200      	movs	r2, #0
 800cb54:	4543      	cmp	r3, r8
 800cb56:	d321      	bcc.n	800cb9c <__multiply+0x98>
 800cb58:	f104 0314 	add.w	r3, r4, #20
 800cb5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb60:	f109 0314 	add.w	r3, r9, #20
 800cb64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cb68:	9202      	str	r2, [sp, #8]
 800cb6a:	1b3a      	subs	r2, r7, r4
 800cb6c:	3a15      	subs	r2, #21
 800cb6e:	f022 0203 	bic.w	r2, r2, #3
 800cb72:	3204      	adds	r2, #4
 800cb74:	f104 0115 	add.w	r1, r4, #21
 800cb78:	428f      	cmp	r7, r1
 800cb7a:	bf38      	it	cc
 800cb7c:	2204      	movcc	r2, #4
 800cb7e:	9201      	str	r2, [sp, #4]
 800cb80:	9a02      	ldr	r2, [sp, #8]
 800cb82:	9303      	str	r3, [sp, #12]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d80c      	bhi.n	800cba2 <__multiply+0x9e>
 800cb88:	2e00      	cmp	r6, #0
 800cb8a:	dd03      	ble.n	800cb94 <__multiply+0x90>
 800cb8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d05b      	beq.n	800cc4c <__multiply+0x148>
 800cb94:	6106      	str	r6, [r0, #16]
 800cb96:	b005      	add	sp, #20
 800cb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9c:	f843 2b04 	str.w	r2, [r3], #4
 800cba0:	e7d8      	b.n	800cb54 <__multiply+0x50>
 800cba2:	f8b3 a000 	ldrh.w	sl, [r3]
 800cba6:	f1ba 0f00 	cmp.w	sl, #0
 800cbaa:	d024      	beq.n	800cbf6 <__multiply+0xf2>
 800cbac:	f104 0e14 	add.w	lr, r4, #20
 800cbb0:	46a9      	mov	r9, r5
 800cbb2:	f04f 0c00 	mov.w	ip, #0
 800cbb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cbba:	f8d9 1000 	ldr.w	r1, [r9]
 800cbbe:	fa1f fb82 	uxth.w	fp, r2
 800cbc2:	b289      	uxth	r1, r1
 800cbc4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cbc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cbcc:	f8d9 2000 	ldr.w	r2, [r9]
 800cbd0:	4461      	add	r1, ip
 800cbd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cbd6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cbda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cbde:	b289      	uxth	r1, r1
 800cbe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cbe4:	4577      	cmp	r7, lr
 800cbe6:	f849 1b04 	str.w	r1, [r9], #4
 800cbea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cbee:	d8e2      	bhi.n	800cbb6 <__multiply+0xb2>
 800cbf0:	9a01      	ldr	r2, [sp, #4]
 800cbf2:	f845 c002 	str.w	ip, [r5, r2]
 800cbf6:	9a03      	ldr	r2, [sp, #12]
 800cbf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	f1b9 0f00 	cmp.w	r9, #0
 800cc02:	d021      	beq.n	800cc48 <__multiply+0x144>
 800cc04:	6829      	ldr	r1, [r5, #0]
 800cc06:	f104 0c14 	add.w	ip, r4, #20
 800cc0a:	46ae      	mov	lr, r5
 800cc0c:	f04f 0a00 	mov.w	sl, #0
 800cc10:	f8bc b000 	ldrh.w	fp, [ip]
 800cc14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc18:	fb09 220b 	mla	r2, r9, fp, r2
 800cc1c:	4452      	add	r2, sl
 800cc1e:	b289      	uxth	r1, r1
 800cc20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc24:	f84e 1b04 	str.w	r1, [lr], #4
 800cc28:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cc2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc30:	f8be 1000 	ldrh.w	r1, [lr]
 800cc34:	fb09 110a 	mla	r1, r9, sl, r1
 800cc38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cc3c:	4567      	cmp	r7, ip
 800cc3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc42:	d8e5      	bhi.n	800cc10 <__multiply+0x10c>
 800cc44:	9a01      	ldr	r2, [sp, #4]
 800cc46:	50a9      	str	r1, [r5, r2]
 800cc48:	3504      	adds	r5, #4
 800cc4a:	e799      	b.n	800cb80 <__multiply+0x7c>
 800cc4c:	3e01      	subs	r6, #1
 800cc4e:	e79b      	b.n	800cb88 <__multiply+0x84>
 800cc50:	0800f284 	.word	0x0800f284
 800cc54:	0800f295 	.word	0x0800f295

0800cc58 <__pow5mult>:
 800cc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc5c:	4615      	mov	r5, r2
 800cc5e:	f012 0203 	ands.w	r2, r2, #3
 800cc62:	4606      	mov	r6, r0
 800cc64:	460f      	mov	r7, r1
 800cc66:	d007      	beq.n	800cc78 <__pow5mult+0x20>
 800cc68:	4c25      	ldr	r4, [pc, #148]	; (800cd00 <__pow5mult+0xa8>)
 800cc6a:	3a01      	subs	r2, #1
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc72:	f7ff fe9d 	bl	800c9b0 <__multadd>
 800cc76:	4607      	mov	r7, r0
 800cc78:	10ad      	asrs	r5, r5, #2
 800cc7a:	d03d      	beq.n	800ccf8 <__pow5mult+0xa0>
 800cc7c:	69f4      	ldr	r4, [r6, #28]
 800cc7e:	b97c      	cbnz	r4, 800cca0 <__pow5mult+0x48>
 800cc80:	2010      	movs	r0, #16
 800cc82:	f7fd fef5 	bl	800aa70 <malloc>
 800cc86:	4602      	mov	r2, r0
 800cc88:	61f0      	str	r0, [r6, #28]
 800cc8a:	b928      	cbnz	r0, 800cc98 <__pow5mult+0x40>
 800cc8c:	4b1d      	ldr	r3, [pc, #116]	; (800cd04 <__pow5mult+0xac>)
 800cc8e:	481e      	ldr	r0, [pc, #120]	; (800cd08 <__pow5mult+0xb0>)
 800cc90:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cc94:	f000 fd9c 	bl	800d7d0 <__assert_func>
 800cc98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc9c:	6004      	str	r4, [r0, #0]
 800cc9e:	60c4      	str	r4, [r0, #12]
 800cca0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cca8:	b94c      	cbnz	r4, 800ccbe <__pow5mult+0x66>
 800ccaa:	f240 2171 	movw	r1, #625	; 0x271
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f7ff ff12 	bl	800cad8 <__i2b>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccba:	4604      	mov	r4, r0
 800ccbc:	6003      	str	r3, [r0, #0]
 800ccbe:	f04f 0900 	mov.w	r9, #0
 800ccc2:	07eb      	lsls	r3, r5, #31
 800ccc4:	d50a      	bpl.n	800ccdc <__pow5mult+0x84>
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	4622      	mov	r2, r4
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7ff ff1a 	bl	800cb04 <__multiply>
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	4680      	mov	r8, r0
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7ff fe49 	bl	800c96c <_Bfree>
 800ccda:	4647      	mov	r7, r8
 800ccdc:	106d      	asrs	r5, r5, #1
 800ccde:	d00b      	beq.n	800ccf8 <__pow5mult+0xa0>
 800cce0:	6820      	ldr	r0, [r4, #0]
 800cce2:	b938      	cbnz	r0, 800ccf4 <__pow5mult+0x9c>
 800cce4:	4622      	mov	r2, r4
 800cce6:	4621      	mov	r1, r4
 800cce8:	4630      	mov	r0, r6
 800ccea:	f7ff ff0b 	bl	800cb04 <__multiply>
 800ccee:	6020      	str	r0, [r4, #0]
 800ccf0:	f8c0 9000 	str.w	r9, [r0]
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	e7e4      	b.n	800ccc2 <__pow5mult+0x6a>
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccfe:	bf00      	nop
 800cd00:	0800f3e0 	.word	0x0800f3e0
 800cd04:	0800f215 	.word	0x0800f215
 800cd08:	0800f295 	.word	0x0800f295

0800cd0c <__lshift>:
 800cd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd10:	460c      	mov	r4, r1
 800cd12:	6849      	ldr	r1, [r1, #4]
 800cd14:	6923      	ldr	r3, [r4, #16]
 800cd16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd1a:	68a3      	ldr	r3, [r4, #8]
 800cd1c:	4607      	mov	r7, r0
 800cd1e:	4691      	mov	r9, r2
 800cd20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd24:	f108 0601 	add.w	r6, r8, #1
 800cd28:	42b3      	cmp	r3, r6
 800cd2a:	db0b      	blt.n	800cd44 <__lshift+0x38>
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	f7ff fddd 	bl	800c8ec <_Balloc>
 800cd32:	4605      	mov	r5, r0
 800cd34:	b948      	cbnz	r0, 800cd4a <__lshift+0x3e>
 800cd36:	4602      	mov	r2, r0
 800cd38:	4b28      	ldr	r3, [pc, #160]	; (800cddc <__lshift+0xd0>)
 800cd3a:	4829      	ldr	r0, [pc, #164]	; (800cde0 <__lshift+0xd4>)
 800cd3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cd40:	f000 fd46 	bl	800d7d0 <__assert_func>
 800cd44:	3101      	adds	r1, #1
 800cd46:	005b      	lsls	r3, r3, #1
 800cd48:	e7ee      	b.n	800cd28 <__lshift+0x1c>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f100 0114 	add.w	r1, r0, #20
 800cd50:	f100 0210 	add.w	r2, r0, #16
 800cd54:	4618      	mov	r0, r3
 800cd56:	4553      	cmp	r3, sl
 800cd58:	db33      	blt.n	800cdc2 <__lshift+0xb6>
 800cd5a:	6920      	ldr	r0, [r4, #16]
 800cd5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd60:	f104 0314 	add.w	r3, r4, #20
 800cd64:	f019 091f 	ands.w	r9, r9, #31
 800cd68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd70:	d02b      	beq.n	800cdca <__lshift+0xbe>
 800cd72:	f1c9 0e20 	rsb	lr, r9, #32
 800cd76:	468a      	mov	sl, r1
 800cd78:	2200      	movs	r2, #0
 800cd7a:	6818      	ldr	r0, [r3, #0]
 800cd7c:	fa00 f009 	lsl.w	r0, r0, r9
 800cd80:	4310      	orrs	r0, r2
 800cd82:	f84a 0b04 	str.w	r0, [sl], #4
 800cd86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd8a:	459c      	cmp	ip, r3
 800cd8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd90:	d8f3      	bhi.n	800cd7a <__lshift+0x6e>
 800cd92:	ebac 0304 	sub.w	r3, ip, r4
 800cd96:	3b15      	subs	r3, #21
 800cd98:	f023 0303 	bic.w	r3, r3, #3
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	f104 0015 	add.w	r0, r4, #21
 800cda2:	4584      	cmp	ip, r0
 800cda4:	bf38      	it	cc
 800cda6:	2304      	movcc	r3, #4
 800cda8:	50ca      	str	r2, [r1, r3]
 800cdaa:	b10a      	cbz	r2, 800cdb0 <__lshift+0xa4>
 800cdac:	f108 0602 	add.w	r6, r8, #2
 800cdb0:	3e01      	subs	r6, #1
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	612e      	str	r6, [r5, #16]
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	f7ff fdd8 	bl	800c96c <_Bfree>
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	e7c5      	b.n	800cd56 <__lshift+0x4a>
 800cdca:	3904      	subs	r1, #4
 800cdcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cdd4:	459c      	cmp	ip, r3
 800cdd6:	d8f9      	bhi.n	800cdcc <__lshift+0xc0>
 800cdd8:	e7ea      	b.n	800cdb0 <__lshift+0xa4>
 800cdda:	bf00      	nop
 800cddc:	0800f284 	.word	0x0800f284
 800cde0:	0800f295 	.word	0x0800f295

0800cde4 <__mcmp>:
 800cde4:	b530      	push	{r4, r5, lr}
 800cde6:	6902      	ldr	r2, [r0, #16]
 800cde8:	690c      	ldr	r4, [r1, #16]
 800cdea:	1b12      	subs	r2, r2, r4
 800cdec:	d10e      	bne.n	800ce0c <__mcmp+0x28>
 800cdee:	f100 0314 	add.w	r3, r0, #20
 800cdf2:	3114      	adds	r1, #20
 800cdf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cdf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cdfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce04:	42a5      	cmp	r5, r4
 800ce06:	d003      	beq.n	800ce10 <__mcmp+0x2c>
 800ce08:	d305      	bcc.n	800ce16 <__mcmp+0x32>
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	bd30      	pop	{r4, r5, pc}
 800ce10:	4283      	cmp	r3, r0
 800ce12:	d3f3      	bcc.n	800cdfc <__mcmp+0x18>
 800ce14:	e7fa      	b.n	800ce0c <__mcmp+0x28>
 800ce16:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1a:	e7f7      	b.n	800ce0c <__mcmp+0x28>

0800ce1c <__mdiff>:
 800ce1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	460c      	mov	r4, r1
 800ce22:	4606      	mov	r6, r0
 800ce24:	4611      	mov	r1, r2
 800ce26:	4620      	mov	r0, r4
 800ce28:	4690      	mov	r8, r2
 800ce2a:	f7ff ffdb 	bl	800cde4 <__mcmp>
 800ce2e:	1e05      	subs	r5, r0, #0
 800ce30:	d110      	bne.n	800ce54 <__mdiff+0x38>
 800ce32:	4629      	mov	r1, r5
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7ff fd59 	bl	800c8ec <_Balloc>
 800ce3a:	b930      	cbnz	r0, 800ce4a <__mdiff+0x2e>
 800ce3c:	4b3a      	ldr	r3, [pc, #232]	; (800cf28 <__mdiff+0x10c>)
 800ce3e:	4602      	mov	r2, r0
 800ce40:	f240 2137 	movw	r1, #567	; 0x237
 800ce44:	4839      	ldr	r0, [pc, #228]	; (800cf2c <__mdiff+0x110>)
 800ce46:	f000 fcc3 	bl	800d7d0 <__assert_func>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	bfa4      	itt	ge
 800ce56:	4643      	movge	r3, r8
 800ce58:	46a0      	movge	r8, r4
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ce60:	bfa6      	itte	ge
 800ce62:	461c      	movge	r4, r3
 800ce64:	2500      	movge	r5, #0
 800ce66:	2501      	movlt	r5, #1
 800ce68:	f7ff fd40 	bl	800c8ec <_Balloc>
 800ce6c:	b920      	cbnz	r0, 800ce78 <__mdiff+0x5c>
 800ce6e:	4b2e      	ldr	r3, [pc, #184]	; (800cf28 <__mdiff+0x10c>)
 800ce70:	4602      	mov	r2, r0
 800ce72:	f240 2145 	movw	r1, #581	; 0x245
 800ce76:	e7e5      	b.n	800ce44 <__mdiff+0x28>
 800ce78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ce7c:	6926      	ldr	r6, [r4, #16]
 800ce7e:	60c5      	str	r5, [r0, #12]
 800ce80:	f104 0914 	add.w	r9, r4, #20
 800ce84:	f108 0514 	add.w	r5, r8, #20
 800ce88:	f100 0e14 	add.w	lr, r0, #20
 800ce8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ce90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ce94:	f108 0210 	add.w	r2, r8, #16
 800ce98:	46f2      	mov	sl, lr
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cea0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cea4:	fa11 f88b 	uxtah	r8, r1, fp
 800cea8:	b299      	uxth	r1, r3
 800ceaa:	0c1b      	lsrs	r3, r3, #16
 800ceac:	eba8 0801 	sub.w	r8, r8, r1
 800ceb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ceb4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ceb8:	fa1f f888 	uxth.w	r8, r8
 800cebc:	1419      	asrs	r1, r3, #16
 800cebe:	454e      	cmp	r6, r9
 800cec0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cec4:	f84a 3b04 	str.w	r3, [sl], #4
 800cec8:	d8e8      	bhi.n	800ce9c <__mdiff+0x80>
 800ceca:	1b33      	subs	r3, r6, r4
 800cecc:	3b15      	subs	r3, #21
 800cece:	f023 0303 	bic.w	r3, r3, #3
 800ced2:	3304      	adds	r3, #4
 800ced4:	3415      	adds	r4, #21
 800ced6:	42a6      	cmp	r6, r4
 800ced8:	bf38      	it	cc
 800ceda:	2304      	movcc	r3, #4
 800cedc:	441d      	add	r5, r3
 800cede:	4473      	add	r3, lr
 800cee0:	469e      	mov	lr, r3
 800cee2:	462e      	mov	r6, r5
 800cee4:	4566      	cmp	r6, ip
 800cee6:	d30e      	bcc.n	800cf06 <__mdiff+0xea>
 800cee8:	f10c 0203 	add.w	r2, ip, #3
 800ceec:	1b52      	subs	r2, r2, r5
 800ceee:	f022 0203 	bic.w	r2, r2, #3
 800cef2:	3d03      	subs	r5, #3
 800cef4:	45ac      	cmp	ip, r5
 800cef6:	bf38      	it	cc
 800cef8:	2200      	movcc	r2, #0
 800cefa:	4413      	add	r3, r2
 800cefc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cf00:	b17a      	cbz	r2, 800cf22 <__mdiff+0x106>
 800cf02:	6107      	str	r7, [r0, #16]
 800cf04:	e7a4      	b.n	800ce50 <__mdiff+0x34>
 800cf06:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf0a:	fa11 f288 	uxtah	r2, r1, r8
 800cf0e:	1414      	asrs	r4, r2, #16
 800cf10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cf14:	b292      	uxth	r2, r2
 800cf16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf1a:	f84e 2b04 	str.w	r2, [lr], #4
 800cf1e:	1421      	asrs	r1, r4, #16
 800cf20:	e7e0      	b.n	800cee4 <__mdiff+0xc8>
 800cf22:	3f01      	subs	r7, #1
 800cf24:	e7ea      	b.n	800cefc <__mdiff+0xe0>
 800cf26:	bf00      	nop
 800cf28:	0800f284 	.word	0x0800f284
 800cf2c:	0800f295 	.word	0x0800f295

0800cf30 <__d2b>:
 800cf30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf34:	460f      	mov	r7, r1
 800cf36:	2101      	movs	r1, #1
 800cf38:	ec59 8b10 	vmov	r8, r9, d0
 800cf3c:	4616      	mov	r6, r2
 800cf3e:	f7ff fcd5 	bl	800c8ec <_Balloc>
 800cf42:	4604      	mov	r4, r0
 800cf44:	b930      	cbnz	r0, 800cf54 <__d2b+0x24>
 800cf46:	4602      	mov	r2, r0
 800cf48:	4b24      	ldr	r3, [pc, #144]	; (800cfdc <__d2b+0xac>)
 800cf4a:	4825      	ldr	r0, [pc, #148]	; (800cfe0 <__d2b+0xb0>)
 800cf4c:	f240 310f 	movw	r1, #783	; 0x30f
 800cf50:	f000 fc3e 	bl	800d7d0 <__assert_func>
 800cf54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cf58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf5c:	bb2d      	cbnz	r5, 800cfaa <__d2b+0x7a>
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	f1b8 0300 	subs.w	r3, r8, #0
 800cf64:	d026      	beq.n	800cfb4 <__d2b+0x84>
 800cf66:	4668      	mov	r0, sp
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	f7ff fd87 	bl	800ca7c <__lo0bits>
 800cf6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cf72:	b1e8      	cbz	r0, 800cfb0 <__d2b+0x80>
 800cf74:	f1c0 0320 	rsb	r3, r0, #32
 800cf78:	fa02 f303 	lsl.w	r3, r2, r3
 800cf7c:	430b      	orrs	r3, r1
 800cf7e:	40c2      	lsrs	r2, r0
 800cf80:	6163      	str	r3, [r4, #20]
 800cf82:	9201      	str	r2, [sp, #4]
 800cf84:	9b01      	ldr	r3, [sp, #4]
 800cf86:	61a3      	str	r3, [r4, #24]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	bf14      	ite	ne
 800cf8c:	2202      	movne	r2, #2
 800cf8e:	2201      	moveq	r2, #1
 800cf90:	6122      	str	r2, [r4, #16]
 800cf92:	b1bd      	cbz	r5, 800cfc4 <__d2b+0x94>
 800cf94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf98:	4405      	add	r5, r0
 800cf9a:	603d      	str	r5, [r7, #0]
 800cf9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cfa0:	6030      	str	r0, [r6, #0]
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	b003      	add	sp, #12
 800cfa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfae:	e7d6      	b.n	800cf5e <__d2b+0x2e>
 800cfb0:	6161      	str	r1, [r4, #20]
 800cfb2:	e7e7      	b.n	800cf84 <__d2b+0x54>
 800cfb4:	a801      	add	r0, sp, #4
 800cfb6:	f7ff fd61 	bl	800ca7c <__lo0bits>
 800cfba:	9b01      	ldr	r3, [sp, #4]
 800cfbc:	6163      	str	r3, [r4, #20]
 800cfbe:	3020      	adds	r0, #32
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	e7e5      	b.n	800cf90 <__d2b+0x60>
 800cfc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cfc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cfcc:	6038      	str	r0, [r7, #0]
 800cfce:	6918      	ldr	r0, [r3, #16]
 800cfd0:	f7ff fd34 	bl	800ca3c <__hi0bits>
 800cfd4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cfd8:	e7e2      	b.n	800cfa0 <__d2b+0x70>
 800cfda:	bf00      	nop
 800cfdc:	0800f284 	.word	0x0800f284
 800cfe0:	0800f295 	.word	0x0800f295

0800cfe4 <__ssputs_r>:
 800cfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe8:	688e      	ldr	r6, [r1, #8]
 800cfea:	461f      	mov	r7, r3
 800cfec:	42be      	cmp	r6, r7
 800cfee:	680b      	ldr	r3, [r1, #0]
 800cff0:	4682      	mov	sl, r0
 800cff2:	460c      	mov	r4, r1
 800cff4:	4690      	mov	r8, r2
 800cff6:	d82c      	bhi.n	800d052 <__ssputs_r+0x6e>
 800cff8:	898a      	ldrh	r2, [r1, #12]
 800cffa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cffe:	d026      	beq.n	800d04e <__ssputs_r+0x6a>
 800d000:	6965      	ldr	r5, [r4, #20]
 800d002:	6909      	ldr	r1, [r1, #16]
 800d004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d008:	eba3 0901 	sub.w	r9, r3, r1
 800d00c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d010:	1c7b      	adds	r3, r7, #1
 800d012:	444b      	add	r3, r9
 800d014:	106d      	asrs	r5, r5, #1
 800d016:	429d      	cmp	r5, r3
 800d018:	bf38      	it	cc
 800d01a:	461d      	movcc	r5, r3
 800d01c:	0553      	lsls	r3, r2, #21
 800d01e:	d527      	bpl.n	800d070 <__ssputs_r+0x8c>
 800d020:	4629      	mov	r1, r5
 800d022:	f7fd fd4d 	bl	800aac0 <_malloc_r>
 800d026:	4606      	mov	r6, r0
 800d028:	b360      	cbz	r0, 800d084 <__ssputs_r+0xa0>
 800d02a:	6921      	ldr	r1, [r4, #16]
 800d02c:	464a      	mov	r2, r9
 800d02e:	f000 fbc1 	bl	800d7b4 <memcpy>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d03c:	81a3      	strh	r3, [r4, #12]
 800d03e:	6126      	str	r6, [r4, #16]
 800d040:	6165      	str	r5, [r4, #20]
 800d042:	444e      	add	r6, r9
 800d044:	eba5 0509 	sub.w	r5, r5, r9
 800d048:	6026      	str	r6, [r4, #0]
 800d04a:	60a5      	str	r5, [r4, #8]
 800d04c:	463e      	mov	r6, r7
 800d04e:	42be      	cmp	r6, r7
 800d050:	d900      	bls.n	800d054 <__ssputs_r+0x70>
 800d052:	463e      	mov	r6, r7
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	4632      	mov	r2, r6
 800d058:	4641      	mov	r1, r8
 800d05a:	f000 fb6f 	bl	800d73c <memmove>
 800d05e:	68a3      	ldr	r3, [r4, #8]
 800d060:	1b9b      	subs	r3, r3, r6
 800d062:	60a3      	str	r3, [r4, #8]
 800d064:	6823      	ldr	r3, [r4, #0]
 800d066:	4433      	add	r3, r6
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	2000      	movs	r0, #0
 800d06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d070:	462a      	mov	r2, r5
 800d072:	f000 fbf3 	bl	800d85c <_realloc_r>
 800d076:	4606      	mov	r6, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	d1e0      	bne.n	800d03e <__ssputs_r+0x5a>
 800d07c:	6921      	ldr	r1, [r4, #16]
 800d07e:	4650      	mov	r0, sl
 800d080:	f7ff fbe8 	bl	800c854 <_free_r>
 800d084:	230c      	movs	r3, #12
 800d086:	f8ca 3000 	str.w	r3, [sl]
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d090:	81a3      	strh	r3, [r4, #12]
 800d092:	f04f 30ff 	mov.w	r0, #4294967295
 800d096:	e7e9      	b.n	800d06c <__ssputs_r+0x88>

0800d098 <_svfiprintf_r>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	4698      	mov	r8, r3
 800d09e:	898b      	ldrh	r3, [r1, #12]
 800d0a0:	061b      	lsls	r3, r3, #24
 800d0a2:	b09d      	sub	sp, #116	; 0x74
 800d0a4:	4607      	mov	r7, r0
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	d50e      	bpl.n	800d0ca <_svfiprintf_r+0x32>
 800d0ac:	690b      	ldr	r3, [r1, #16]
 800d0ae:	b963      	cbnz	r3, 800d0ca <_svfiprintf_r+0x32>
 800d0b0:	2140      	movs	r1, #64	; 0x40
 800d0b2:	f7fd fd05 	bl	800aac0 <_malloc_r>
 800d0b6:	6028      	str	r0, [r5, #0]
 800d0b8:	6128      	str	r0, [r5, #16]
 800d0ba:	b920      	cbnz	r0, 800d0c6 <_svfiprintf_r+0x2e>
 800d0bc:	230c      	movs	r3, #12
 800d0be:	603b      	str	r3, [r7, #0]
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	e0d0      	b.n	800d268 <_svfiprintf_r+0x1d0>
 800d0c6:	2340      	movs	r3, #64	; 0x40
 800d0c8:	616b      	str	r3, [r5, #20]
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ce:	2320      	movs	r3, #32
 800d0d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0d8:	2330      	movs	r3, #48	; 0x30
 800d0da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d280 <_svfiprintf_r+0x1e8>
 800d0de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0e2:	f04f 0901 	mov.w	r9, #1
 800d0e6:	4623      	mov	r3, r4
 800d0e8:	469a      	mov	sl, r3
 800d0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0ee:	b10a      	cbz	r2, 800d0f4 <_svfiprintf_r+0x5c>
 800d0f0:	2a25      	cmp	r2, #37	; 0x25
 800d0f2:	d1f9      	bne.n	800d0e8 <_svfiprintf_r+0x50>
 800d0f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d0f8:	d00b      	beq.n	800d112 <_svfiprintf_r+0x7a>
 800d0fa:	465b      	mov	r3, fp
 800d0fc:	4622      	mov	r2, r4
 800d0fe:	4629      	mov	r1, r5
 800d100:	4638      	mov	r0, r7
 800d102:	f7ff ff6f 	bl	800cfe4 <__ssputs_r>
 800d106:	3001      	adds	r0, #1
 800d108:	f000 80a9 	beq.w	800d25e <_svfiprintf_r+0x1c6>
 800d10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d10e:	445a      	add	r2, fp
 800d110:	9209      	str	r2, [sp, #36]	; 0x24
 800d112:	f89a 3000 	ldrb.w	r3, [sl]
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 80a1 	beq.w	800d25e <_svfiprintf_r+0x1c6>
 800d11c:	2300      	movs	r3, #0
 800d11e:	f04f 32ff 	mov.w	r2, #4294967295
 800d122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d126:	f10a 0a01 	add.w	sl, sl, #1
 800d12a:	9304      	str	r3, [sp, #16]
 800d12c:	9307      	str	r3, [sp, #28]
 800d12e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d132:	931a      	str	r3, [sp, #104]	; 0x68
 800d134:	4654      	mov	r4, sl
 800d136:	2205      	movs	r2, #5
 800d138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d13c:	4850      	ldr	r0, [pc, #320]	; (800d280 <_svfiprintf_r+0x1e8>)
 800d13e:	f7f3 f86f 	bl	8000220 <memchr>
 800d142:	9a04      	ldr	r2, [sp, #16]
 800d144:	b9d8      	cbnz	r0, 800d17e <_svfiprintf_r+0xe6>
 800d146:	06d0      	lsls	r0, r2, #27
 800d148:	bf44      	itt	mi
 800d14a:	2320      	movmi	r3, #32
 800d14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d150:	0711      	lsls	r1, r2, #28
 800d152:	bf44      	itt	mi
 800d154:	232b      	movmi	r3, #43	; 0x2b
 800d156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d15a:	f89a 3000 	ldrb.w	r3, [sl]
 800d15e:	2b2a      	cmp	r3, #42	; 0x2a
 800d160:	d015      	beq.n	800d18e <_svfiprintf_r+0xf6>
 800d162:	9a07      	ldr	r2, [sp, #28]
 800d164:	4654      	mov	r4, sl
 800d166:	2000      	movs	r0, #0
 800d168:	f04f 0c0a 	mov.w	ip, #10
 800d16c:	4621      	mov	r1, r4
 800d16e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d172:	3b30      	subs	r3, #48	; 0x30
 800d174:	2b09      	cmp	r3, #9
 800d176:	d94d      	bls.n	800d214 <_svfiprintf_r+0x17c>
 800d178:	b1b0      	cbz	r0, 800d1a8 <_svfiprintf_r+0x110>
 800d17a:	9207      	str	r2, [sp, #28]
 800d17c:	e014      	b.n	800d1a8 <_svfiprintf_r+0x110>
 800d17e:	eba0 0308 	sub.w	r3, r0, r8
 800d182:	fa09 f303 	lsl.w	r3, r9, r3
 800d186:	4313      	orrs	r3, r2
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	46a2      	mov	sl, r4
 800d18c:	e7d2      	b.n	800d134 <_svfiprintf_r+0x9c>
 800d18e:	9b03      	ldr	r3, [sp, #12]
 800d190:	1d19      	adds	r1, r3, #4
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	9103      	str	r1, [sp, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	bfbb      	ittet	lt
 800d19a:	425b      	neglt	r3, r3
 800d19c:	f042 0202 	orrlt.w	r2, r2, #2
 800d1a0:	9307      	strge	r3, [sp, #28]
 800d1a2:	9307      	strlt	r3, [sp, #28]
 800d1a4:	bfb8      	it	lt
 800d1a6:	9204      	strlt	r2, [sp, #16]
 800d1a8:	7823      	ldrb	r3, [r4, #0]
 800d1aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ac:	d10c      	bne.n	800d1c8 <_svfiprintf_r+0x130>
 800d1ae:	7863      	ldrb	r3, [r4, #1]
 800d1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b2:	d134      	bne.n	800d21e <_svfiprintf_r+0x186>
 800d1b4:	9b03      	ldr	r3, [sp, #12]
 800d1b6:	1d1a      	adds	r2, r3, #4
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	9203      	str	r2, [sp, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	bfb8      	it	lt
 800d1c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1c4:	3402      	adds	r4, #2
 800d1c6:	9305      	str	r3, [sp, #20]
 800d1c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d290 <_svfiprintf_r+0x1f8>
 800d1cc:	7821      	ldrb	r1, [r4, #0]
 800d1ce:	2203      	movs	r2, #3
 800d1d0:	4650      	mov	r0, sl
 800d1d2:	f7f3 f825 	bl	8000220 <memchr>
 800d1d6:	b138      	cbz	r0, 800d1e8 <_svfiprintf_r+0x150>
 800d1d8:	9b04      	ldr	r3, [sp, #16]
 800d1da:	eba0 000a 	sub.w	r0, r0, sl
 800d1de:	2240      	movs	r2, #64	; 0x40
 800d1e0:	4082      	lsls	r2, r0
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	3401      	adds	r4, #1
 800d1e6:	9304      	str	r3, [sp, #16]
 800d1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ec:	4825      	ldr	r0, [pc, #148]	; (800d284 <_svfiprintf_r+0x1ec>)
 800d1ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	f7f3 f814 	bl	8000220 <memchr>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	d038      	beq.n	800d26e <_svfiprintf_r+0x1d6>
 800d1fc:	4b22      	ldr	r3, [pc, #136]	; (800d288 <_svfiprintf_r+0x1f0>)
 800d1fe:	bb1b      	cbnz	r3, 800d248 <_svfiprintf_r+0x1b0>
 800d200:	9b03      	ldr	r3, [sp, #12]
 800d202:	3307      	adds	r3, #7
 800d204:	f023 0307 	bic.w	r3, r3, #7
 800d208:	3308      	adds	r3, #8
 800d20a:	9303      	str	r3, [sp, #12]
 800d20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20e:	4433      	add	r3, r6
 800d210:	9309      	str	r3, [sp, #36]	; 0x24
 800d212:	e768      	b.n	800d0e6 <_svfiprintf_r+0x4e>
 800d214:	fb0c 3202 	mla	r2, ip, r2, r3
 800d218:	460c      	mov	r4, r1
 800d21a:	2001      	movs	r0, #1
 800d21c:	e7a6      	b.n	800d16c <_svfiprintf_r+0xd4>
 800d21e:	2300      	movs	r3, #0
 800d220:	3401      	adds	r4, #1
 800d222:	9305      	str	r3, [sp, #20]
 800d224:	4619      	mov	r1, r3
 800d226:	f04f 0c0a 	mov.w	ip, #10
 800d22a:	4620      	mov	r0, r4
 800d22c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d230:	3a30      	subs	r2, #48	; 0x30
 800d232:	2a09      	cmp	r2, #9
 800d234:	d903      	bls.n	800d23e <_svfiprintf_r+0x1a6>
 800d236:	2b00      	cmp	r3, #0
 800d238:	d0c6      	beq.n	800d1c8 <_svfiprintf_r+0x130>
 800d23a:	9105      	str	r1, [sp, #20]
 800d23c:	e7c4      	b.n	800d1c8 <_svfiprintf_r+0x130>
 800d23e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d242:	4604      	mov	r4, r0
 800d244:	2301      	movs	r3, #1
 800d246:	e7f0      	b.n	800d22a <_svfiprintf_r+0x192>
 800d248:	ab03      	add	r3, sp, #12
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	462a      	mov	r2, r5
 800d24e:	4b0f      	ldr	r3, [pc, #60]	; (800d28c <_svfiprintf_r+0x1f4>)
 800d250:	a904      	add	r1, sp, #16
 800d252:	4638      	mov	r0, r7
 800d254:	f7fd fd60 	bl	800ad18 <_printf_float>
 800d258:	1c42      	adds	r2, r0, #1
 800d25a:	4606      	mov	r6, r0
 800d25c:	d1d6      	bne.n	800d20c <_svfiprintf_r+0x174>
 800d25e:	89ab      	ldrh	r3, [r5, #12]
 800d260:	065b      	lsls	r3, r3, #25
 800d262:	f53f af2d 	bmi.w	800d0c0 <_svfiprintf_r+0x28>
 800d266:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d268:	b01d      	add	sp, #116	; 0x74
 800d26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26e:	ab03      	add	r3, sp, #12
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	462a      	mov	r2, r5
 800d274:	4b05      	ldr	r3, [pc, #20]	; (800d28c <_svfiprintf_r+0x1f4>)
 800d276:	a904      	add	r1, sp, #16
 800d278:	4638      	mov	r0, r7
 800d27a:	f7fd fff1 	bl	800b260 <_printf_i>
 800d27e:	e7eb      	b.n	800d258 <_svfiprintf_r+0x1c0>
 800d280:	0800f3ec 	.word	0x0800f3ec
 800d284:	0800f3f6 	.word	0x0800f3f6
 800d288:	0800ad19 	.word	0x0800ad19
 800d28c:	0800cfe5 	.word	0x0800cfe5
 800d290:	0800f3f2 	.word	0x0800f3f2

0800d294 <__sfputc_r>:
 800d294:	6893      	ldr	r3, [r2, #8]
 800d296:	3b01      	subs	r3, #1
 800d298:	2b00      	cmp	r3, #0
 800d29a:	b410      	push	{r4}
 800d29c:	6093      	str	r3, [r2, #8]
 800d29e:	da08      	bge.n	800d2b2 <__sfputc_r+0x1e>
 800d2a0:	6994      	ldr	r4, [r2, #24]
 800d2a2:	42a3      	cmp	r3, r4
 800d2a4:	db01      	blt.n	800d2aa <__sfputc_r+0x16>
 800d2a6:	290a      	cmp	r1, #10
 800d2a8:	d103      	bne.n	800d2b2 <__sfputc_r+0x1e>
 800d2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ae:	f7fe bb31 	b.w	800b914 <__swbuf_r>
 800d2b2:	6813      	ldr	r3, [r2, #0]
 800d2b4:	1c58      	adds	r0, r3, #1
 800d2b6:	6010      	str	r0, [r2, #0]
 800d2b8:	7019      	strb	r1, [r3, #0]
 800d2ba:	4608      	mov	r0, r1
 800d2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <__sfputs_r>:
 800d2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	460f      	mov	r7, r1
 800d2c8:	4614      	mov	r4, r2
 800d2ca:	18d5      	adds	r5, r2, r3
 800d2cc:	42ac      	cmp	r4, r5
 800d2ce:	d101      	bne.n	800d2d4 <__sfputs_r+0x12>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	e007      	b.n	800d2e4 <__sfputs_r+0x22>
 800d2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d8:	463a      	mov	r2, r7
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f7ff ffda 	bl	800d294 <__sfputc_r>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d1f3      	bne.n	800d2cc <__sfputs_r+0xa>
 800d2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2e8 <_vfiprintf_r>:
 800d2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ec:	460d      	mov	r5, r1
 800d2ee:	b09d      	sub	sp, #116	; 0x74
 800d2f0:	4614      	mov	r4, r2
 800d2f2:	4698      	mov	r8, r3
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	b118      	cbz	r0, 800d300 <_vfiprintf_r+0x18>
 800d2f8:	6a03      	ldr	r3, [r0, #32]
 800d2fa:	b90b      	cbnz	r3, 800d300 <_vfiprintf_r+0x18>
 800d2fc:	f7fe f94c 	bl	800b598 <__sinit>
 800d300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d302:	07d9      	lsls	r1, r3, #31
 800d304:	d405      	bmi.n	800d312 <_vfiprintf_r+0x2a>
 800d306:	89ab      	ldrh	r3, [r5, #12]
 800d308:	059a      	lsls	r2, r3, #22
 800d30a:	d402      	bmi.n	800d312 <_vfiprintf_r+0x2a>
 800d30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d30e:	f7fe fc23 	bl	800bb58 <__retarget_lock_acquire_recursive>
 800d312:	89ab      	ldrh	r3, [r5, #12]
 800d314:	071b      	lsls	r3, r3, #28
 800d316:	d501      	bpl.n	800d31c <_vfiprintf_r+0x34>
 800d318:	692b      	ldr	r3, [r5, #16]
 800d31a:	b99b      	cbnz	r3, 800d344 <_vfiprintf_r+0x5c>
 800d31c:	4629      	mov	r1, r5
 800d31e:	4630      	mov	r0, r6
 800d320:	f7fe fb36 	bl	800b990 <__swsetup_r>
 800d324:	b170      	cbz	r0, 800d344 <_vfiprintf_r+0x5c>
 800d326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d328:	07dc      	lsls	r4, r3, #31
 800d32a:	d504      	bpl.n	800d336 <_vfiprintf_r+0x4e>
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295
 800d330:	b01d      	add	sp, #116	; 0x74
 800d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d336:	89ab      	ldrh	r3, [r5, #12]
 800d338:	0598      	lsls	r0, r3, #22
 800d33a:	d4f7      	bmi.n	800d32c <_vfiprintf_r+0x44>
 800d33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d33e:	f7fe fc0c 	bl	800bb5a <__retarget_lock_release_recursive>
 800d342:	e7f3      	b.n	800d32c <_vfiprintf_r+0x44>
 800d344:	2300      	movs	r3, #0
 800d346:	9309      	str	r3, [sp, #36]	; 0x24
 800d348:	2320      	movs	r3, #32
 800d34a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d352:	2330      	movs	r3, #48	; 0x30
 800d354:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d508 <_vfiprintf_r+0x220>
 800d358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d35c:	f04f 0901 	mov.w	r9, #1
 800d360:	4623      	mov	r3, r4
 800d362:	469a      	mov	sl, r3
 800d364:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d368:	b10a      	cbz	r2, 800d36e <_vfiprintf_r+0x86>
 800d36a:	2a25      	cmp	r2, #37	; 0x25
 800d36c:	d1f9      	bne.n	800d362 <_vfiprintf_r+0x7a>
 800d36e:	ebba 0b04 	subs.w	fp, sl, r4
 800d372:	d00b      	beq.n	800d38c <_vfiprintf_r+0xa4>
 800d374:	465b      	mov	r3, fp
 800d376:	4622      	mov	r2, r4
 800d378:	4629      	mov	r1, r5
 800d37a:	4630      	mov	r0, r6
 800d37c:	f7ff ffa1 	bl	800d2c2 <__sfputs_r>
 800d380:	3001      	adds	r0, #1
 800d382:	f000 80a9 	beq.w	800d4d8 <_vfiprintf_r+0x1f0>
 800d386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d388:	445a      	add	r2, fp
 800d38a:	9209      	str	r2, [sp, #36]	; 0x24
 800d38c:	f89a 3000 	ldrb.w	r3, [sl]
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 80a1 	beq.w	800d4d8 <_vfiprintf_r+0x1f0>
 800d396:	2300      	movs	r3, #0
 800d398:	f04f 32ff 	mov.w	r2, #4294967295
 800d39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3a0:	f10a 0a01 	add.w	sl, sl, #1
 800d3a4:	9304      	str	r3, [sp, #16]
 800d3a6:	9307      	str	r3, [sp, #28]
 800d3a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3ac:	931a      	str	r3, [sp, #104]	; 0x68
 800d3ae:	4654      	mov	r4, sl
 800d3b0:	2205      	movs	r2, #5
 800d3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b6:	4854      	ldr	r0, [pc, #336]	; (800d508 <_vfiprintf_r+0x220>)
 800d3b8:	f7f2 ff32 	bl	8000220 <memchr>
 800d3bc:	9a04      	ldr	r2, [sp, #16]
 800d3be:	b9d8      	cbnz	r0, 800d3f8 <_vfiprintf_r+0x110>
 800d3c0:	06d1      	lsls	r1, r2, #27
 800d3c2:	bf44      	itt	mi
 800d3c4:	2320      	movmi	r3, #32
 800d3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3ca:	0713      	lsls	r3, r2, #28
 800d3cc:	bf44      	itt	mi
 800d3ce:	232b      	movmi	r3, #43	; 0x2b
 800d3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3da:	d015      	beq.n	800d408 <_vfiprintf_r+0x120>
 800d3dc:	9a07      	ldr	r2, [sp, #28]
 800d3de:	4654      	mov	r4, sl
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	f04f 0c0a 	mov.w	ip, #10
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ec:	3b30      	subs	r3, #48	; 0x30
 800d3ee:	2b09      	cmp	r3, #9
 800d3f0:	d94d      	bls.n	800d48e <_vfiprintf_r+0x1a6>
 800d3f2:	b1b0      	cbz	r0, 800d422 <_vfiprintf_r+0x13a>
 800d3f4:	9207      	str	r2, [sp, #28]
 800d3f6:	e014      	b.n	800d422 <_vfiprintf_r+0x13a>
 800d3f8:	eba0 0308 	sub.w	r3, r0, r8
 800d3fc:	fa09 f303 	lsl.w	r3, r9, r3
 800d400:	4313      	orrs	r3, r2
 800d402:	9304      	str	r3, [sp, #16]
 800d404:	46a2      	mov	sl, r4
 800d406:	e7d2      	b.n	800d3ae <_vfiprintf_r+0xc6>
 800d408:	9b03      	ldr	r3, [sp, #12]
 800d40a:	1d19      	adds	r1, r3, #4
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	9103      	str	r1, [sp, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	bfbb      	ittet	lt
 800d414:	425b      	neglt	r3, r3
 800d416:	f042 0202 	orrlt.w	r2, r2, #2
 800d41a:	9307      	strge	r3, [sp, #28]
 800d41c:	9307      	strlt	r3, [sp, #28]
 800d41e:	bfb8      	it	lt
 800d420:	9204      	strlt	r2, [sp, #16]
 800d422:	7823      	ldrb	r3, [r4, #0]
 800d424:	2b2e      	cmp	r3, #46	; 0x2e
 800d426:	d10c      	bne.n	800d442 <_vfiprintf_r+0x15a>
 800d428:	7863      	ldrb	r3, [r4, #1]
 800d42a:	2b2a      	cmp	r3, #42	; 0x2a
 800d42c:	d134      	bne.n	800d498 <_vfiprintf_r+0x1b0>
 800d42e:	9b03      	ldr	r3, [sp, #12]
 800d430:	1d1a      	adds	r2, r3, #4
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	9203      	str	r2, [sp, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	bfb8      	it	lt
 800d43a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d43e:	3402      	adds	r4, #2
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d518 <_vfiprintf_r+0x230>
 800d446:	7821      	ldrb	r1, [r4, #0]
 800d448:	2203      	movs	r2, #3
 800d44a:	4650      	mov	r0, sl
 800d44c:	f7f2 fee8 	bl	8000220 <memchr>
 800d450:	b138      	cbz	r0, 800d462 <_vfiprintf_r+0x17a>
 800d452:	9b04      	ldr	r3, [sp, #16]
 800d454:	eba0 000a 	sub.w	r0, r0, sl
 800d458:	2240      	movs	r2, #64	; 0x40
 800d45a:	4082      	lsls	r2, r0
 800d45c:	4313      	orrs	r3, r2
 800d45e:	3401      	adds	r4, #1
 800d460:	9304      	str	r3, [sp, #16]
 800d462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d466:	4829      	ldr	r0, [pc, #164]	; (800d50c <_vfiprintf_r+0x224>)
 800d468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d46c:	2206      	movs	r2, #6
 800d46e:	f7f2 fed7 	bl	8000220 <memchr>
 800d472:	2800      	cmp	r0, #0
 800d474:	d03f      	beq.n	800d4f6 <_vfiprintf_r+0x20e>
 800d476:	4b26      	ldr	r3, [pc, #152]	; (800d510 <_vfiprintf_r+0x228>)
 800d478:	bb1b      	cbnz	r3, 800d4c2 <_vfiprintf_r+0x1da>
 800d47a:	9b03      	ldr	r3, [sp, #12]
 800d47c:	3307      	adds	r3, #7
 800d47e:	f023 0307 	bic.w	r3, r3, #7
 800d482:	3308      	adds	r3, #8
 800d484:	9303      	str	r3, [sp, #12]
 800d486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d488:	443b      	add	r3, r7
 800d48a:	9309      	str	r3, [sp, #36]	; 0x24
 800d48c:	e768      	b.n	800d360 <_vfiprintf_r+0x78>
 800d48e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d492:	460c      	mov	r4, r1
 800d494:	2001      	movs	r0, #1
 800d496:	e7a6      	b.n	800d3e6 <_vfiprintf_r+0xfe>
 800d498:	2300      	movs	r3, #0
 800d49a:	3401      	adds	r4, #1
 800d49c:	9305      	str	r3, [sp, #20]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	f04f 0c0a 	mov.w	ip, #10
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4aa:	3a30      	subs	r2, #48	; 0x30
 800d4ac:	2a09      	cmp	r2, #9
 800d4ae:	d903      	bls.n	800d4b8 <_vfiprintf_r+0x1d0>
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d0c6      	beq.n	800d442 <_vfiprintf_r+0x15a>
 800d4b4:	9105      	str	r1, [sp, #20]
 800d4b6:	e7c4      	b.n	800d442 <_vfiprintf_r+0x15a>
 800d4b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4bc:	4604      	mov	r4, r0
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e7f0      	b.n	800d4a4 <_vfiprintf_r+0x1bc>
 800d4c2:	ab03      	add	r3, sp, #12
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	462a      	mov	r2, r5
 800d4c8:	4b12      	ldr	r3, [pc, #72]	; (800d514 <_vfiprintf_r+0x22c>)
 800d4ca:	a904      	add	r1, sp, #16
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7fd fc23 	bl	800ad18 <_printf_float>
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	1c78      	adds	r0, r7, #1
 800d4d6:	d1d6      	bne.n	800d486 <_vfiprintf_r+0x19e>
 800d4d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4da:	07d9      	lsls	r1, r3, #31
 800d4dc:	d405      	bmi.n	800d4ea <_vfiprintf_r+0x202>
 800d4de:	89ab      	ldrh	r3, [r5, #12]
 800d4e0:	059a      	lsls	r2, r3, #22
 800d4e2:	d402      	bmi.n	800d4ea <_vfiprintf_r+0x202>
 800d4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4e6:	f7fe fb38 	bl	800bb5a <__retarget_lock_release_recursive>
 800d4ea:	89ab      	ldrh	r3, [r5, #12]
 800d4ec:	065b      	lsls	r3, r3, #25
 800d4ee:	f53f af1d 	bmi.w	800d32c <_vfiprintf_r+0x44>
 800d4f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4f4:	e71c      	b.n	800d330 <_vfiprintf_r+0x48>
 800d4f6:	ab03      	add	r3, sp, #12
 800d4f8:	9300      	str	r3, [sp, #0]
 800d4fa:	462a      	mov	r2, r5
 800d4fc:	4b05      	ldr	r3, [pc, #20]	; (800d514 <_vfiprintf_r+0x22c>)
 800d4fe:	a904      	add	r1, sp, #16
 800d500:	4630      	mov	r0, r6
 800d502:	f7fd fead 	bl	800b260 <_printf_i>
 800d506:	e7e4      	b.n	800d4d2 <_vfiprintf_r+0x1ea>
 800d508:	0800f3ec 	.word	0x0800f3ec
 800d50c:	0800f3f6 	.word	0x0800f3f6
 800d510:	0800ad19 	.word	0x0800ad19
 800d514:	0800d2c3 	.word	0x0800d2c3
 800d518:	0800f3f2 	.word	0x0800f3f2

0800d51c <__sflush_r>:
 800d51c:	898a      	ldrh	r2, [r1, #12]
 800d51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d522:	4605      	mov	r5, r0
 800d524:	0710      	lsls	r0, r2, #28
 800d526:	460c      	mov	r4, r1
 800d528:	d458      	bmi.n	800d5dc <__sflush_r+0xc0>
 800d52a:	684b      	ldr	r3, [r1, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dc05      	bgt.n	800d53c <__sflush_r+0x20>
 800d530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d532:	2b00      	cmp	r3, #0
 800d534:	dc02      	bgt.n	800d53c <__sflush_r+0x20>
 800d536:	2000      	movs	r0, #0
 800d538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d53c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d53e:	2e00      	cmp	r6, #0
 800d540:	d0f9      	beq.n	800d536 <__sflush_r+0x1a>
 800d542:	2300      	movs	r3, #0
 800d544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d548:	682f      	ldr	r7, [r5, #0]
 800d54a:	6a21      	ldr	r1, [r4, #32]
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	d032      	beq.n	800d5b6 <__sflush_r+0x9a>
 800d550:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	075a      	lsls	r2, r3, #29
 800d556:	d505      	bpl.n	800d564 <__sflush_r+0x48>
 800d558:	6863      	ldr	r3, [r4, #4]
 800d55a:	1ac0      	subs	r0, r0, r3
 800d55c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d55e:	b10b      	cbz	r3, 800d564 <__sflush_r+0x48>
 800d560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d562:	1ac0      	subs	r0, r0, r3
 800d564:	2300      	movs	r3, #0
 800d566:	4602      	mov	r2, r0
 800d568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d56a:	6a21      	ldr	r1, [r4, #32]
 800d56c:	4628      	mov	r0, r5
 800d56e:	47b0      	blx	r6
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	d106      	bne.n	800d584 <__sflush_r+0x68>
 800d576:	6829      	ldr	r1, [r5, #0]
 800d578:	291d      	cmp	r1, #29
 800d57a:	d82b      	bhi.n	800d5d4 <__sflush_r+0xb8>
 800d57c:	4a29      	ldr	r2, [pc, #164]	; (800d624 <__sflush_r+0x108>)
 800d57e:	410a      	asrs	r2, r1
 800d580:	07d6      	lsls	r6, r2, #31
 800d582:	d427      	bmi.n	800d5d4 <__sflush_r+0xb8>
 800d584:	2200      	movs	r2, #0
 800d586:	6062      	str	r2, [r4, #4]
 800d588:	04d9      	lsls	r1, r3, #19
 800d58a:	6922      	ldr	r2, [r4, #16]
 800d58c:	6022      	str	r2, [r4, #0]
 800d58e:	d504      	bpl.n	800d59a <__sflush_r+0x7e>
 800d590:	1c42      	adds	r2, r0, #1
 800d592:	d101      	bne.n	800d598 <__sflush_r+0x7c>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b903      	cbnz	r3, 800d59a <__sflush_r+0x7e>
 800d598:	6560      	str	r0, [r4, #84]	; 0x54
 800d59a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d59c:	602f      	str	r7, [r5, #0]
 800d59e:	2900      	cmp	r1, #0
 800d5a0:	d0c9      	beq.n	800d536 <__sflush_r+0x1a>
 800d5a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5a6:	4299      	cmp	r1, r3
 800d5a8:	d002      	beq.n	800d5b0 <__sflush_r+0x94>
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f7ff f952 	bl	800c854 <_free_r>
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	6360      	str	r0, [r4, #52]	; 0x34
 800d5b4:	e7c0      	b.n	800d538 <__sflush_r+0x1c>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b0      	blx	r6
 800d5bc:	1c41      	adds	r1, r0, #1
 800d5be:	d1c8      	bne.n	800d552 <__sflush_r+0x36>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d0c5      	beq.n	800d552 <__sflush_r+0x36>
 800d5c6:	2b1d      	cmp	r3, #29
 800d5c8:	d001      	beq.n	800d5ce <__sflush_r+0xb2>
 800d5ca:	2b16      	cmp	r3, #22
 800d5cc:	d101      	bne.n	800d5d2 <__sflush_r+0xb6>
 800d5ce:	602f      	str	r7, [r5, #0]
 800d5d0:	e7b1      	b.n	800d536 <__sflush_r+0x1a>
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	e7ad      	b.n	800d538 <__sflush_r+0x1c>
 800d5dc:	690f      	ldr	r7, [r1, #16]
 800d5de:	2f00      	cmp	r7, #0
 800d5e0:	d0a9      	beq.n	800d536 <__sflush_r+0x1a>
 800d5e2:	0793      	lsls	r3, r2, #30
 800d5e4:	680e      	ldr	r6, [r1, #0]
 800d5e6:	bf08      	it	eq
 800d5e8:	694b      	ldreq	r3, [r1, #20]
 800d5ea:	600f      	str	r7, [r1, #0]
 800d5ec:	bf18      	it	ne
 800d5ee:	2300      	movne	r3, #0
 800d5f0:	eba6 0807 	sub.w	r8, r6, r7
 800d5f4:	608b      	str	r3, [r1, #8]
 800d5f6:	f1b8 0f00 	cmp.w	r8, #0
 800d5fa:	dd9c      	ble.n	800d536 <__sflush_r+0x1a>
 800d5fc:	6a21      	ldr	r1, [r4, #32]
 800d5fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d600:	4643      	mov	r3, r8
 800d602:	463a      	mov	r2, r7
 800d604:	4628      	mov	r0, r5
 800d606:	47b0      	blx	r6
 800d608:	2800      	cmp	r0, #0
 800d60a:	dc06      	bgt.n	800d61a <__sflush_r+0xfe>
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d612:	81a3      	strh	r3, [r4, #12]
 800d614:	f04f 30ff 	mov.w	r0, #4294967295
 800d618:	e78e      	b.n	800d538 <__sflush_r+0x1c>
 800d61a:	4407      	add	r7, r0
 800d61c:	eba8 0800 	sub.w	r8, r8, r0
 800d620:	e7e9      	b.n	800d5f6 <__sflush_r+0xda>
 800d622:	bf00      	nop
 800d624:	dfbffffe 	.word	0xdfbffffe

0800d628 <_fflush_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	690b      	ldr	r3, [r1, #16]
 800d62c:	4605      	mov	r5, r0
 800d62e:	460c      	mov	r4, r1
 800d630:	b913      	cbnz	r3, 800d638 <_fflush_r+0x10>
 800d632:	2500      	movs	r5, #0
 800d634:	4628      	mov	r0, r5
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	b118      	cbz	r0, 800d642 <_fflush_r+0x1a>
 800d63a:	6a03      	ldr	r3, [r0, #32]
 800d63c:	b90b      	cbnz	r3, 800d642 <_fflush_r+0x1a>
 800d63e:	f7fd ffab 	bl	800b598 <__sinit>
 800d642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d0f3      	beq.n	800d632 <_fflush_r+0xa>
 800d64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d64c:	07d0      	lsls	r0, r2, #31
 800d64e:	d404      	bmi.n	800d65a <_fflush_r+0x32>
 800d650:	0599      	lsls	r1, r3, #22
 800d652:	d402      	bmi.n	800d65a <_fflush_r+0x32>
 800d654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d656:	f7fe fa7f 	bl	800bb58 <__retarget_lock_acquire_recursive>
 800d65a:	4628      	mov	r0, r5
 800d65c:	4621      	mov	r1, r4
 800d65e:	f7ff ff5d 	bl	800d51c <__sflush_r>
 800d662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d664:	07da      	lsls	r2, r3, #31
 800d666:	4605      	mov	r5, r0
 800d668:	d4e4      	bmi.n	800d634 <_fflush_r+0xc>
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	059b      	lsls	r3, r3, #22
 800d66e:	d4e1      	bmi.n	800d634 <_fflush_r+0xc>
 800d670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d672:	f7fe fa72 	bl	800bb5a <__retarget_lock_release_recursive>
 800d676:	e7dd      	b.n	800d634 <_fflush_r+0xc>

0800d678 <__swhatbuf_r>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	460c      	mov	r4, r1
 800d67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d680:	2900      	cmp	r1, #0
 800d682:	b096      	sub	sp, #88	; 0x58
 800d684:	4615      	mov	r5, r2
 800d686:	461e      	mov	r6, r3
 800d688:	da0d      	bge.n	800d6a6 <__swhatbuf_r+0x2e>
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d690:	f04f 0100 	mov.w	r1, #0
 800d694:	bf0c      	ite	eq
 800d696:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d69a:	2340      	movne	r3, #64	; 0x40
 800d69c:	2000      	movs	r0, #0
 800d69e:	6031      	str	r1, [r6, #0]
 800d6a0:	602b      	str	r3, [r5, #0]
 800d6a2:	b016      	add	sp, #88	; 0x58
 800d6a4:	bd70      	pop	{r4, r5, r6, pc}
 800d6a6:	466a      	mov	r2, sp
 800d6a8:	f000 f862 	bl	800d770 <_fstat_r>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	dbec      	blt.n	800d68a <__swhatbuf_r+0x12>
 800d6b0:	9901      	ldr	r1, [sp, #4]
 800d6b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d6b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d6ba:	4259      	negs	r1, r3
 800d6bc:	4159      	adcs	r1, r3
 800d6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6c2:	e7eb      	b.n	800d69c <__swhatbuf_r+0x24>

0800d6c4 <__smakebuf_r>:
 800d6c4:	898b      	ldrh	r3, [r1, #12]
 800d6c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6c8:	079d      	lsls	r5, r3, #30
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	d507      	bpl.n	800d6e0 <__smakebuf_r+0x1c>
 800d6d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	2301      	movs	r3, #1
 800d6da:	6163      	str	r3, [r4, #20]
 800d6dc:	b002      	add	sp, #8
 800d6de:	bd70      	pop	{r4, r5, r6, pc}
 800d6e0:	ab01      	add	r3, sp, #4
 800d6e2:	466a      	mov	r2, sp
 800d6e4:	f7ff ffc8 	bl	800d678 <__swhatbuf_r>
 800d6e8:	9900      	ldr	r1, [sp, #0]
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7fd f9e7 	bl	800aac0 <_malloc_r>
 800d6f2:	b948      	cbnz	r0, 800d708 <__smakebuf_r+0x44>
 800d6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f8:	059a      	lsls	r2, r3, #22
 800d6fa:	d4ef      	bmi.n	800d6dc <__smakebuf_r+0x18>
 800d6fc:	f023 0303 	bic.w	r3, r3, #3
 800d700:	f043 0302 	orr.w	r3, r3, #2
 800d704:	81a3      	strh	r3, [r4, #12]
 800d706:	e7e3      	b.n	800d6d0 <__smakebuf_r+0xc>
 800d708:	89a3      	ldrh	r3, [r4, #12]
 800d70a:	6020      	str	r0, [r4, #0]
 800d70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d710:	81a3      	strh	r3, [r4, #12]
 800d712:	9b00      	ldr	r3, [sp, #0]
 800d714:	6163      	str	r3, [r4, #20]
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	6120      	str	r0, [r4, #16]
 800d71a:	b15b      	cbz	r3, 800d734 <__smakebuf_r+0x70>
 800d71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d720:	4630      	mov	r0, r6
 800d722:	f000 f837 	bl	800d794 <_isatty_r>
 800d726:	b128      	cbz	r0, 800d734 <__smakebuf_r+0x70>
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	f023 0303 	bic.w	r3, r3, #3
 800d72e:	f043 0301 	orr.w	r3, r3, #1
 800d732:	81a3      	strh	r3, [r4, #12]
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	431d      	orrs	r5, r3
 800d738:	81a5      	strh	r5, [r4, #12]
 800d73a:	e7cf      	b.n	800d6dc <__smakebuf_r+0x18>

0800d73c <memmove>:
 800d73c:	4288      	cmp	r0, r1
 800d73e:	b510      	push	{r4, lr}
 800d740:	eb01 0402 	add.w	r4, r1, r2
 800d744:	d902      	bls.n	800d74c <memmove+0x10>
 800d746:	4284      	cmp	r4, r0
 800d748:	4623      	mov	r3, r4
 800d74a:	d807      	bhi.n	800d75c <memmove+0x20>
 800d74c:	1e43      	subs	r3, r0, #1
 800d74e:	42a1      	cmp	r1, r4
 800d750:	d008      	beq.n	800d764 <memmove+0x28>
 800d752:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d75a:	e7f8      	b.n	800d74e <memmove+0x12>
 800d75c:	4402      	add	r2, r0
 800d75e:	4601      	mov	r1, r0
 800d760:	428a      	cmp	r2, r1
 800d762:	d100      	bne.n	800d766 <memmove+0x2a>
 800d764:	bd10      	pop	{r4, pc}
 800d766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d76a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d76e:	e7f7      	b.n	800d760 <memmove+0x24>

0800d770 <_fstat_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4d07      	ldr	r5, [pc, #28]	; (800d790 <_fstat_r+0x20>)
 800d774:	2300      	movs	r3, #0
 800d776:	4604      	mov	r4, r0
 800d778:	4608      	mov	r0, r1
 800d77a:	4611      	mov	r1, r2
 800d77c:	602b      	str	r3, [r5, #0]
 800d77e:	f7f7 fe99 	bl	80054b4 <_fstat>
 800d782:	1c43      	adds	r3, r0, #1
 800d784:	d102      	bne.n	800d78c <_fstat_r+0x1c>
 800d786:	682b      	ldr	r3, [r5, #0]
 800d788:	b103      	cbz	r3, 800d78c <_fstat_r+0x1c>
 800d78a:	6023      	str	r3, [r4, #0]
 800d78c:	bd38      	pop	{r3, r4, r5, pc}
 800d78e:	bf00      	nop
 800d790:	200018c0 	.word	0x200018c0

0800d794 <_isatty_r>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4d06      	ldr	r5, [pc, #24]	; (800d7b0 <_isatty_r+0x1c>)
 800d798:	2300      	movs	r3, #0
 800d79a:	4604      	mov	r4, r0
 800d79c:	4608      	mov	r0, r1
 800d79e:	602b      	str	r3, [r5, #0]
 800d7a0:	f7f7 fe8e 	bl	80054c0 <_isatty>
 800d7a4:	1c43      	adds	r3, r0, #1
 800d7a6:	d102      	bne.n	800d7ae <_isatty_r+0x1a>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	b103      	cbz	r3, 800d7ae <_isatty_r+0x1a>
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	200018c0 	.word	0x200018c0

0800d7b4 <memcpy>:
 800d7b4:	440a      	add	r2, r1
 800d7b6:	4291      	cmp	r1, r2
 800d7b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7bc:	d100      	bne.n	800d7c0 <memcpy+0xc>
 800d7be:	4770      	bx	lr
 800d7c0:	b510      	push	{r4, lr}
 800d7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7ca:	4291      	cmp	r1, r2
 800d7cc:	d1f9      	bne.n	800d7c2 <memcpy+0xe>
 800d7ce:	bd10      	pop	{r4, pc}

0800d7d0 <__assert_func>:
 800d7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7d2:	4614      	mov	r4, r2
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	4b09      	ldr	r3, [pc, #36]	; (800d7fc <__assert_func+0x2c>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4605      	mov	r5, r0
 800d7dc:	68d8      	ldr	r0, [r3, #12]
 800d7de:	b14c      	cbz	r4, 800d7f4 <__assert_func+0x24>
 800d7e0:	4b07      	ldr	r3, [pc, #28]	; (800d800 <__assert_func+0x30>)
 800d7e2:	9100      	str	r1, [sp, #0]
 800d7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7e8:	4906      	ldr	r1, [pc, #24]	; (800d804 <__assert_func+0x34>)
 800d7ea:	462b      	mov	r3, r5
 800d7ec:	f000 f872 	bl	800d8d4 <fiprintf>
 800d7f0:	f000 f882 	bl	800d8f8 <abort>
 800d7f4:	4b04      	ldr	r3, [pc, #16]	; (800d808 <__assert_func+0x38>)
 800d7f6:	461c      	mov	r4, r3
 800d7f8:	e7f3      	b.n	800d7e2 <__assert_func+0x12>
 800d7fa:	bf00      	nop
 800d7fc:	2000006c 	.word	0x2000006c
 800d800:	0800f407 	.word	0x0800f407
 800d804:	0800f414 	.word	0x0800f414
 800d808:	0800f442 	.word	0x0800f442

0800d80c <_calloc_r>:
 800d80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d80e:	fba1 2402 	umull	r2, r4, r1, r2
 800d812:	b94c      	cbnz	r4, 800d828 <_calloc_r+0x1c>
 800d814:	4611      	mov	r1, r2
 800d816:	9201      	str	r2, [sp, #4]
 800d818:	f7fd f952 	bl	800aac0 <_malloc_r>
 800d81c:	9a01      	ldr	r2, [sp, #4]
 800d81e:	4605      	mov	r5, r0
 800d820:	b930      	cbnz	r0, 800d830 <_calloc_r+0x24>
 800d822:	4628      	mov	r0, r5
 800d824:	b003      	add	sp, #12
 800d826:	bd30      	pop	{r4, r5, pc}
 800d828:	220c      	movs	r2, #12
 800d82a:	6002      	str	r2, [r0, #0]
 800d82c:	2500      	movs	r5, #0
 800d82e:	e7f8      	b.n	800d822 <_calloc_r+0x16>
 800d830:	4621      	mov	r1, r4
 800d832:	f7fe f905 	bl	800ba40 <memset>
 800d836:	e7f4      	b.n	800d822 <_calloc_r+0x16>

0800d838 <__ascii_mbtowc>:
 800d838:	b082      	sub	sp, #8
 800d83a:	b901      	cbnz	r1, 800d83e <__ascii_mbtowc+0x6>
 800d83c:	a901      	add	r1, sp, #4
 800d83e:	b142      	cbz	r2, 800d852 <__ascii_mbtowc+0x1a>
 800d840:	b14b      	cbz	r3, 800d856 <__ascii_mbtowc+0x1e>
 800d842:	7813      	ldrb	r3, [r2, #0]
 800d844:	600b      	str	r3, [r1, #0]
 800d846:	7812      	ldrb	r2, [r2, #0]
 800d848:	1e10      	subs	r0, r2, #0
 800d84a:	bf18      	it	ne
 800d84c:	2001      	movne	r0, #1
 800d84e:	b002      	add	sp, #8
 800d850:	4770      	bx	lr
 800d852:	4610      	mov	r0, r2
 800d854:	e7fb      	b.n	800d84e <__ascii_mbtowc+0x16>
 800d856:	f06f 0001 	mvn.w	r0, #1
 800d85a:	e7f8      	b.n	800d84e <__ascii_mbtowc+0x16>

0800d85c <_realloc_r>:
 800d85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d860:	4680      	mov	r8, r0
 800d862:	4614      	mov	r4, r2
 800d864:	460e      	mov	r6, r1
 800d866:	b921      	cbnz	r1, 800d872 <_realloc_r+0x16>
 800d868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d86c:	4611      	mov	r1, r2
 800d86e:	f7fd b927 	b.w	800aac0 <_malloc_r>
 800d872:	b92a      	cbnz	r2, 800d880 <_realloc_r+0x24>
 800d874:	f7fe ffee 	bl	800c854 <_free_r>
 800d878:	4625      	mov	r5, r4
 800d87a:	4628      	mov	r0, r5
 800d87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d880:	f000 f841 	bl	800d906 <_malloc_usable_size_r>
 800d884:	4284      	cmp	r4, r0
 800d886:	4607      	mov	r7, r0
 800d888:	d802      	bhi.n	800d890 <_realloc_r+0x34>
 800d88a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d88e:	d812      	bhi.n	800d8b6 <_realloc_r+0x5a>
 800d890:	4621      	mov	r1, r4
 800d892:	4640      	mov	r0, r8
 800d894:	f7fd f914 	bl	800aac0 <_malloc_r>
 800d898:	4605      	mov	r5, r0
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d0ed      	beq.n	800d87a <_realloc_r+0x1e>
 800d89e:	42bc      	cmp	r4, r7
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	bf28      	it	cs
 800d8a6:	463a      	movcs	r2, r7
 800d8a8:	f7ff ff84 	bl	800d7b4 <memcpy>
 800d8ac:	4631      	mov	r1, r6
 800d8ae:	4640      	mov	r0, r8
 800d8b0:	f7fe ffd0 	bl	800c854 <_free_r>
 800d8b4:	e7e1      	b.n	800d87a <_realloc_r+0x1e>
 800d8b6:	4635      	mov	r5, r6
 800d8b8:	e7df      	b.n	800d87a <_realloc_r+0x1e>

0800d8ba <__ascii_wctomb>:
 800d8ba:	b149      	cbz	r1, 800d8d0 <__ascii_wctomb+0x16>
 800d8bc:	2aff      	cmp	r2, #255	; 0xff
 800d8be:	bf85      	ittet	hi
 800d8c0:	238a      	movhi	r3, #138	; 0x8a
 800d8c2:	6003      	strhi	r3, [r0, #0]
 800d8c4:	700a      	strbls	r2, [r1, #0]
 800d8c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8ca:	bf98      	it	ls
 800d8cc:	2001      	movls	r0, #1
 800d8ce:	4770      	bx	lr
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	4770      	bx	lr

0800d8d4 <fiprintf>:
 800d8d4:	b40e      	push	{r1, r2, r3}
 800d8d6:	b503      	push	{r0, r1, lr}
 800d8d8:	4601      	mov	r1, r0
 800d8da:	ab03      	add	r3, sp, #12
 800d8dc:	4805      	ldr	r0, [pc, #20]	; (800d8f4 <fiprintf+0x20>)
 800d8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8e2:	6800      	ldr	r0, [r0, #0]
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	f7ff fcff 	bl	800d2e8 <_vfiprintf_r>
 800d8ea:	b002      	add	sp, #8
 800d8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8f0:	b003      	add	sp, #12
 800d8f2:	4770      	bx	lr
 800d8f4:	2000006c 	.word	0x2000006c

0800d8f8 <abort>:
 800d8f8:	b508      	push	{r3, lr}
 800d8fa:	2006      	movs	r0, #6
 800d8fc:	f000 f834 	bl	800d968 <raise>
 800d900:	2001      	movs	r0, #1
 800d902:	f7f7 fdb1 	bl	8005468 <_exit>

0800d906 <_malloc_usable_size_r>:
 800d906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d90a:	1f18      	subs	r0, r3, #4
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	bfbc      	itt	lt
 800d910:	580b      	ldrlt	r3, [r1, r0]
 800d912:	18c0      	addlt	r0, r0, r3
 800d914:	4770      	bx	lr

0800d916 <_raise_r>:
 800d916:	291f      	cmp	r1, #31
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4604      	mov	r4, r0
 800d91c:	460d      	mov	r5, r1
 800d91e:	d904      	bls.n	800d92a <_raise_r+0x14>
 800d920:	2316      	movs	r3, #22
 800d922:	6003      	str	r3, [r0, #0]
 800d924:	f04f 30ff 	mov.w	r0, #4294967295
 800d928:	bd38      	pop	{r3, r4, r5, pc}
 800d92a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d92c:	b112      	cbz	r2, 800d934 <_raise_r+0x1e>
 800d92e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d932:	b94b      	cbnz	r3, 800d948 <_raise_r+0x32>
 800d934:	4620      	mov	r0, r4
 800d936:	f000 f831 	bl	800d99c <_getpid_r>
 800d93a:	462a      	mov	r2, r5
 800d93c:	4601      	mov	r1, r0
 800d93e:	4620      	mov	r0, r4
 800d940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d944:	f000 b818 	b.w	800d978 <_kill_r>
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d00a      	beq.n	800d962 <_raise_r+0x4c>
 800d94c:	1c59      	adds	r1, r3, #1
 800d94e:	d103      	bne.n	800d958 <_raise_r+0x42>
 800d950:	2316      	movs	r3, #22
 800d952:	6003      	str	r3, [r0, #0]
 800d954:	2001      	movs	r0, #1
 800d956:	e7e7      	b.n	800d928 <_raise_r+0x12>
 800d958:	2400      	movs	r4, #0
 800d95a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d95e:	4628      	mov	r0, r5
 800d960:	4798      	blx	r3
 800d962:	2000      	movs	r0, #0
 800d964:	e7e0      	b.n	800d928 <_raise_r+0x12>
	...

0800d968 <raise>:
 800d968:	4b02      	ldr	r3, [pc, #8]	; (800d974 <raise+0xc>)
 800d96a:	4601      	mov	r1, r0
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	f7ff bfd2 	b.w	800d916 <_raise_r>
 800d972:	bf00      	nop
 800d974:	2000006c 	.word	0x2000006c

0800d978 <_kill_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d07      	ldr	r5, [pc, #28]	; (800d998 <_kill_r+0x20>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	4611      	mov	r1, r2
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	f7f7 fd67 	bl	8005458 <_kill>
 800d98a:	1c43      	adds	r3, r0, #1
 800d98c:	d102      	bne.n	800d994 <_kill_r+0x1c>
 800d98e:	682b      	ldr	r3, [r5, #0]
 800d990:	b103      	cbz	r3, 800d994 <_kill_r+0x1c>
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	bd38      	pop	{r3, r4, r5, pc}
 800d996:	bf00      	nop
 800d998:	200018c0 	.word	0x200018c0

0800d99c <_getpid_r>:
 800d99c:	f7f7 bd5a 	b.w	8005454 <_getpid>

0800d9a0 <sqrt>:
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 800d9a2:	ed2d 8b02 	vpush	{d8}
 800d9a6:	ec55 4b10 	vmov	r4, r5, d0
 800d9aa:	f000 f8d1 	bl	800db50 <__ieee754_sqrt>
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	462b      	mov	r3, r5
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	eeb0 8a40 	vmov.f32	s16, s0
 800d9ba:	eef0 8a60 	vmov.f32	s17, s1
 800d9be:	f7f3 f8dd 	bl	8000b7c <__aeabi_dcmpun>
 800d9c2:	b990      	cbnz	r0, 800d9ea <sqrt+0x4a>
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	f7f3 f8ae 	bl	8000b2c <__aeabi_dcmplt>
 800d9d0:	b158      	cbz	r0, 800d9ea <sqrt+0x4a>
 800d9d2:	f7fe f897 	bl	800bb04 <__errno>
 800d9d6:	2321      	movs	r3, #33	; 0x21
 800d9d8:	6003      	str	r3, [r0, #0]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	2300      	movs	r3, #0
 800d9de:	4610      	mov	r0, r2
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	f7f2 ff5b 	bl	800089c <__aeabi_ddiv>
 800d9e6:	ec41 0b18 	vmov	d8, r0, r1
 800d9ea:	eeb0 0a48 	vmov.f32	s0, s16
 800d9ee:	eef0 0a68 	vmov.f32	s1, s17
 800d9f2:	ecbd 8b02 	vpop	{d8}
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}

0800d9f8 <cos>:
 800d9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9fa:	ec53 2b10 	vmov	r2, r3, d0
 800d9fe:	4826      	ldr	r0, [pc, #152]	; (800da98 <cos+0xa0>)
 800da00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da04:	4281      	cmp	r1, r0
 800da06:	dc06      	bgt.n	800da16 <cos+0x1e>
 800da08:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800da90 <cos+0x98>
 800da0c:	b005      	add	sp, #20
 800da0e:	f85d eb04 	ldr.w	lr, [sp], #4
 800da12:	f000 b979 	b.w	800dd08 <__kernel_cos>
 800da16:	4821      	ldr	r0, [pc, #132]	; (800da9c <cos+0xa4>)
 800da18:	4281      	cmp	r1, r0
 800da1a:	dd09      	ble.n	800da30 <cos+0x38>
 800da1c:	ee10 0a10 	vmov	r0, s0
 800da20:	4619      	mov	r1, r3
 800da22:	f7f2 fc59 	bl	80002d8 <__aeabi_dsub>
 800da26:	ec41 0b10 	vmov	d0, r0, r1
 800da2a:	b005      	add	sp, #20
 800da2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800da30:	4668      	mov	r0, sp
 800da32:	f000 faf1 	bl	800e018 <__ieee754_rem_pio2>
 800da36:	f000 0003 	and.w	r0, r0, #3
 800da3a:	2801      	cmp	r0, #1
 800da3c:	d00b      	beq.n	800da56 <cos+0x5e>
 800da3e:	2802      	cmp	r0, #2
 800da40:	d016      	beq.n	800da70 <cos+0x78>
 800da42:	b9e0      	cbnz	r0, 800da7e <cos+0x86>
 800da44:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da48:	ed9d 0b00 	vldr	d0, [sp]
 800da4c:	f000 f95c 	bl	800dd08 <__kernel_cos>
 800da50:	ec51 0b10 	vmov	r0, r1, d0
 800da54:	e7e7      	b.n	800da26 <cos+0x2e>
 800da56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da5a:	ed9d 0b00 	vldr	d0, [sp]
 800da5e:	f000 fa1b 	bl	800de98 <__kernel_sin>
 800da62:	ec53 2b10 	vmov	r2, r3, d0
 800da66:	ee10 0a10 	vmov	r0, s0
 800da6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da6e:	e7da      	b.n	800da26 <cos+0x2e>
 800da70:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da74:	ed9d 0b00 	vldr	d0, [sp]
 800da78:	f000 f946 	bl	800dd08 <__kernel_cos>
 800da7c:	e7f1      	b.n	800da62 <cos+0x6a>
 800da7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da82:	ed9d 0b00 	vldr	d0, [sp]
 800da86:	2001      	movs	r0, #1
 800da88:	f000 fa06 	bl	800de98 <__kernel_sin>
 800da8c:	e7e0      	b.n	800da50 <cos+0x58>
 800da8e:	bf00      	nop
	...
 800da98:	3fe921fb 	.word	0x3fe921fb
 800da9c:	7fefffff 	.word	0x7fefffff

0800daa0 <sin>:
 800daa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daa2:	ec53 2b10 	vmov	r2, r3, d0
 800daa6:	4828      	ldr	r0, [pc, #160]	; (800db48 <sin+0xa8>)
 800daa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800daac:	4281      	cmp	r1, r0
 800daae:	dc07      	bgt.n	800dac0 <sin+0x20>
 800dab0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800db40 <sin+0xa0>
 800dab4:	2000      	movs	r0, #0
 800dab6:	b005      	add	sp, #20
 800dab8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dabc:	f000 b9ec 	b.w	800de98 <__kernel_sin>
 800dac0:	4822      	ldr	r0, [pc, #136]	; (800db4c <sin+0xac>)
 800dac2:	4281      	cmp	r1, r0
 800dac4:	dd09      	ble.n	800dada <sin+0x3a>
 800dac6:	ee10 0a10 	vmov	r0, s0
 800daca:	4619      	mov	r1, r3
 800dacc:	f7f2 fc04 	bl	80002d8 <__aeabi_dsub>
 800dad0:	ec41 0b10 	vmov	d0, r0, r1
 800dad4:	b005      	add	sp, #20
 800dad6:	f85d fb04 	ldr.w	pc, [sp], #4
 800dada:	4668      	mov	r0, sp
 800dadc:	f000 fa9c 	bl	800e018 <__ieee754_rem_pio2>
 800dae0:	f000 0003 	and.w	r0, r0, #3
 800dae4:	2801      	cmp	r0, #1
 800dae6:	d00c      	beq.n	800db02 <sin+0x62>
 800dae8:	2802      	cmp	r0, #2
 800daea:	d011      	beq.n	800db10 <sin+0x70>
 800daec:	b9f0      	cbnz	r0, 800db2c <sin+0x8c>
 800daee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800daf2:	ed9d 0b00 	vldr	d0, [sp]
 800daf6:	2001      	movs	r0, #1
 800daf8:	f000 f9ce 	bl	800de98 <__kernel_sin>
 800dafc:	ec51 0b10 	vmov	r0, r1, d0
 800db00:	e7e6      	b.n	800dad0 <sin+0x30>
 800db02:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db06:	ed9d 0b00 	vldr	d0, [sp]
 800db0a:	f000 f8fd 	bl	800dd08 <__kernel_cos>
 800db0e:	e7f5      	b.n	800dafc <sin+0x5c>
 800db10:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db14:	ed9d 0b00 	vldr	d0, [sp]
 800db18:	2001      	movs	r0, #1
 800db1a:	f000 f9bd 	bl	800de98 <__kernel_sin>
 800db1e:	ec53 2b10 	vmov	r2, r3, d0
 800db22:	ee10 0a10 	vmov	r0, s0
 800db26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db2a:	e7d1      	b.n	800dad0 <sin+0x30>
 800db2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db30:	ed9d 0b00 	vldr	d0, [sp]
 800db34:	f000 f8e8 	bl	800dd08 <__kernel_cos>
 800db38:	e7f1      	b.n	800db1e <sin+0x7e>
 800db3a:	bf00      	nop
 800db3c:	f3af 8000 	nop.w
	...
 800db48:	3fe921fb 	.word	0x3fe921fb
 800db4c:	7fefffff 	.word	0x7fefffff

0800db50 <__ieee754_sqrt>:
 800db50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	ec55 4b10 	vmov	r4, r5, d0
 800db58:	4e67      	ldr	r6, [pc, #412]	; (800dcf8 <__ieee754_sqrt+0x1a8>)
 800db5a:	43ae      	bics	r6, r5
 800db5c:	ee10 0a10 	vmov	r0, s0
 800db60:	ee10 2a10 	vmov	r2, s0
 800db64:	4629      	mov	r1, r5
 800db66:	462b      	mov	r3, r5
 800db68:	d10d      	bne.n	800db86 <__ieee754_sqrt+0x36>
 800db6a:	f7f2 fd6d 	bl	8000648 <__aeabi_dmul>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4620      	mov	r0, r4
 800db74:	4629      	mov	r1, r5
 800db76:	f7f2 fbb1 	bl	80002dc <__adddf3>
 800db7a:	4604      	mov	r4, r0
 800db7c:	460d      	mov	r5, r1
 800db7e:	ec45 4b10 	vmov	d0, r4, r5
 800db82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db86:	2d00      	cmp	r5, #0
 800db88:	dc0b      	bgt.n	800dba2 <__ieee754_sqrt+0x52>
 800db8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db8e:	4326      	orrs	r6, r4
 800db90:	d0f5      	beq.n	800db7e <__ieee754_sqrt+0x2e>
 800db92:	b135      	cbz	r5, 800dba2 <__ieee754_sqrt+0x52>
 800db94:	f7f2 fba0 	bl	80002d8 <__aeabi_dsub>
 800db98:	4602      	mov	r2, r0
 800db9a:	460b      	mov	r3, r1
 800db9c:	f7f2 fe7e 	bl	800089c <__aeabi_ddiv>
 800dba0:	e7eb      	b.n	800db7a <__ieee754_sqrt+0x2a>
 800dba2:	1509      	asrs	r1, r1, #20
 800dba4:	f000 808d 	beq.w	800dcc2 <__ieee754_sqrt+0x172>
 800dba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbac:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dbb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbb4:	07c9      	lsls	r1, r1, #31
 800dbb6:	bf5c      	itt	pl
 800dbb8:	005b      	lslpl	r3, r3, #1
 800dbba:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dbbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dbc2:	bf58      	it	pl
 800dbc4:	0052      	lslpl	r2, r2, #1
 800dbc6:	2500      	movs	r5, #0
 800dbc8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dbcc:	1076      	asrs	r6, r6, #1
 800dbce:	0052      	lsls	r2, r2, #1
 800dbd0:	f04f 0e16 	mov.w	lr, #22
 800dbd4:	46ac      	mov	ip, r5
 800dbd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbda:	eb0c 0001 	add.w	r0, ip, r1
 800dbde:	4298      	cmp	r0, r3
 800dbe0:	bfde      	ittt	le
 800dbe2:	1a1b      	suble	r3, r3, r0
 800dbe4:	eb00 0c01 	addle.w	ip, r0, r1
 800dbe8:	186d      	addle	r5, r5, r1
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	f1be 0e01 	subs.w	lr, lr, #1
 800dbf0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dbf4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dbf8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dbfc:	d1ed      	bne.n	800dbda <__ieee754_sqrt+0x8a>
 800dbfe:	4674      	mov	r4, lr
 800dc00:	2720      	movs	r7, #32
 800dc02:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dc06:	4563      	cmp	r3, ip
 800dc08:	eb01 000e 	add.w	r0, r1, lr
 800dc0c:	dc02      	bgt.n	800dc14 <__ieee754_sqrt+0xc4>
 800dc0e:	d113      	bne.n	800dc38 <__ieee754_sqrt+0xe8>
 800dc10:	4290      	cmp	r0, r2
 800dc12:	d811      	bhi.n	800dc38 <__ieee754_sqrt+0xe8>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	eb00 0e01 	add.w	lr, r0, r1
 800dc1a:	da57      	bge.n	800dccc <__ieee754_sqrt+0x17c>
 800dc1c:	f1be 0f00 	cmp.w	lr, #0
 800dc20:	db54      	blt.n	800dccc <__ieee754_sqrt+0x17c>
 800dc22:	f10c 0801 	add.w	r8, ip, #1
 800dc26:	eba3 030c 	sub.w	r3, r3, ip
 800dc2a:	4290      	cmp	r0, r2
 800dc2c:	bf88      	it	hi
 800dc2e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dc32:	1a12      	subs	r2, r2, r0
 800dc34:	440c      	add	r4, r1
 800dc36:	46c4      	mov	ip, r8
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	3f01      	subs	r7, #1
 800dc3c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc40:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dc44:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dc48:	d1dd      	bne.n	800dc06 <__ieee754_sqrt+0xb6>
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	d01b      	beq.n	800dc86 <__ieee754_sqrt+0x136>
 800dc4e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800dcfc <__ieee754_sqrt+0x1ac>
 800dc52:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800dd00 <__ieee754_sqrt+0x1b0>
 800dc56:	e9da 0100 	ldrd	r0, r1, [sl]
 800dc5a:	e9db 2300 	ldrd	r2, r3, [fp]
 800dc5e:	f7f2 fb3b 	bl	80002d8 <__aeabi_dsub>
 800dc62:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	4649      	mov	r1, r9
 800dc6e:	f7f2 ff67 	bl	8000b40 <__aeabi_dcmple>
 800dc72:	b140      	cbz	r0, 800dc86 <__ieee754_sqrt+0x136>
 800dc74:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dc78:	e9da 0100 	ldrd	r0, r1, [sl]
 800dc7c:	e9db 2300 	ldrd	r2, r3, [fp]
 800dc80:	d126      	bne.n	800dcd0 <__ieee754_sqrt+0x180>
 800dc82:	3501      	adds	r5, #1
 800dc84:	463c      	mov	r4, r7
 800dc86:	106a      	asrs	r2, r5, #1
 800dc88:	0863      	lsrs	r3, r4, #1
 800dc8a:	07e9      	lsls	r1, r5, #31
 800dc8c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dc90:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dc94:	bf48      	it	mi
 800dc96:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dc9a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dc9e:	461c      	mov	r4, r3
 800dca0:	e76d      	b.n	800db7e <__ieee754_sqrt+0x2e>
 800dca2:	0ad3      	lsrs	r3, r2, #11
 800dca4:	3815      	subs	r0, #21
 800dca6:	0552      	lsls	r2, r2, #21
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d0fa      	beq.n	800dca2 <__ieee754_sqrt+0x152>
 800dcac:	02dc      	lsls	r4, r3, #11
 800dcae:	d50a      	bpl.n	800dcc6 <__ieee754_sqrt+0x176>
 800dcb0:	f1c1 0420 	rsb	r4, r1, #32
 800dcb4:	fa22 f404 	lsr.w	r4, r2, r4
 800dcb8:	1e4d      	subs	r5, r1, #1
 800dcba:	408a      	lsls	r2, r1
 800dcbc:	4323      	orrs	r3, r4
 800dcbe:	1b41      	subs	r1, r0, r5
 800dcc0:	e772      	b.n	800dba8 <__ieee754_sqrt+0x58>
 800dcc2:	4608      	mov	r0, r1
 800dcc4:	e7f0      	b.n	800dca8 <__ieee754_sqrt+0x158>
 800dcc6:	005b      	lsls	r3, r3, #1
 800dcc8:	3101      	adds	r1, #1
 800dcca:	e7ef      	b.n	800dcac <__ieee754_sqrt+0x15c>
 800dccc:	46e0      	mov	r8, ip
 800dcce:	e7aa      	b.n	800dc26 <__ieee754_sqrt+0xd6>
 800dcd0:	f7f2 fb04 	bl	80002dc <__adddf3>
 800dcd4:	e9da 8900 	ldrd	r8, r9, [sl]
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4640      	mov	r0, r8
 800dcde:	4649      	mov	r1, r9
 800dce0:	f7f2 ff24 	bl	8000b2c <__aeabi_dcmplt>
 800dce4:	b120      	cbz	r0, 800dcf0 <__ieee754_sqrt+0x1a0>
 800dce6:	1ca0      	adds	r0, r4, #2
 800dce8:	bf08      	it	eq
 800dcea:	3501      	addeq	r5, #1
 800dcec:	3402      	adds	r4, #2
 800dcee:	e7ca      	b.n	800dc86 <__ieee754_sqrt+0x136>
 800dcf0:	3401      	adds	r4, #1
 800dcf2:	f024 0401 	bic.w	r4, r4, #1
 800dcf6:	e7c6      	b.n	800dc86 <__ieee754_sqrt+0x136>
 800dcf8:	7ff00000 	.word	0x7ff00000
 800dcfc:	200001e0 	.word	0x200001e0
 800dd00:	200001e8 	.word	0x200001e8
 800dd04:	00000000 	.word	0x00000000

0800dd08 <__kernel_cos>:
 800dd08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0c:	ec57 6b10 	vmov	r6, r7, d0
 800dd10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dd14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dd18:	ed8d 1b00 	vstr	d1, [sp]
 800dd1c:	da07      	bge.n	800dd2e <__kernel_cos+0x26>
 800dd1e:	ee10 0a10 	vmov	r0, s0
 800dd22:	4639      	mov	r1, r7
 800dd24:	f7f2 ff40 	bl	8000ba8 <__aeabi_d2iz>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	f000 8088 	beq.w	800de3e <__kernel_cos+0x136>
 800dd2e:	4632      	mov	r2, r6
 800dd30:	463b      	mov	r3, r7
 800dd32:	4630      	mov	r0, r6
 800dd34:	4639      	mov	r1, r7
 800dd36:	f7f2 fc87 	bl	8000648 <__aeabi_dmul>
 800dd3a:	4b51      	ldr	r3, [pc, #324]	; (800de80 <__kernel_cos+0x178>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	4604      	mov	r4, r0
 800dd40:	460d      	mov	r5, r1
 800dd42:	f7f2 fc81 	bl	8000648 <__aeabi_dmul>
 800dd46:	a340      	add	r3, pc, #256	; (adr r3, 800de48 <__kernel_cos+0x140>)
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	4682      	mov	sl, r0
 800dd4e:	468b      	mov	fp, r1
 800dd50:	4620      	mov	r0, r4
 800dd52:	4629      	mov	r1, r5
 800dd54:	f7f2 fc78 	bl	8000648 <__aeabi_dmul>
 800dd58:	a33d      	add	r3, pc, #244	; (adr r3, 800de50 <__kernel_cos+0x148>)
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f7f2 fabd 	bl	80002dc <__adddf3>
 800dd62:	4622      	mov	r2, r4
 800dd64:	462b      	mov	r3, r5
 800dd66:	f7f2 fc6f 	bl	8000648 <__aeabi_dmul>
 800dd6a:	a33b      	add	r3, pc, #236	; (adr r3, 800de58 <__kernel_cos+0x150>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	f7f2 fab2 	bl	80002d8 <__aeabi_dsub>
 800dd74:	4622      	mov	r2, r4
 800dd76:	462b      	mov	r3, r5
 800dd78:	f7f2 fc66 	bl	8000648 <__aeabi_dmul>
 800dd7c:	a338      	add	r3, pc, #224	; (adr r3, 800de60 <__kernel_cos+0x158>)
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	f7f2 faab 	bl	80002dc <__adddf3>
 800dd86:	4622      	mov	r2, r4
 800dd88:	462b      	mov	r3, r5
 800dd8a:	f7f2 fc5d 	bl	8000648 <__aeabi_dmul>
 800dd8e:	a336      	add	r3, pc, #216	; (adr r3, 800de68 <__kernel_cos+0x160>)
 800dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd94:	f7f2 faa0 	bl	80002d8 <__aeabi_dsub>
 800dd98:	4622      	mov	r2, r4
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	f7f2 fc54 	bl	8000648 <__aeabi_dmul>
 800dda0:	a333      	add	r3, pc, #204	; (adr r3, 800de70 <__kernel_cos+0x168>)
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f7f2 fa99 	bl	80002dc <__adddf3>
 800ddaa:	4622      	mov	r2, r4
 800ddac:	462b      	mov	r3, r5
 800ddae:	f7f2 fc4b 	bl	8000648 <__aeabi_dmul>
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	462b      	mov	r3, r5
 800ddb6:	f7f2 fc47 	bl	8000648 <__aeabi_dmul>
 800ddba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	f7f2 fc3f 	bl	8000648 <__aeabi_dmul>
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4602      	mov	r2, r0
 800ddce:	4629      	mov	r1, r5
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f7f2 fa81 	bl	80002d8 <__aeabi_dsub>
 800ddd6:	4b2b      	ldr	r3, [pc, #172]	; (800de84 <__kernel_cos+0x17c>)
 800ddd8:	4598      	cmp	r8, r3
 800ddda:	4606      	mov	r6, r0
 800dddc:	460f      	mov	r7, r1
 800ddde:	dc10      	bgt.n	800de02 <__kernel_cos+0xfa>
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4650      	mov	r0, sl
 800dde6:	4659      	mov	r1, fp
 800dde8:	f7f2 fa76 	bl	80002d8 <__aeabi_dsub>
 800ddec:	460b      	mov	r3, r1
 800ddee:	4926      	ldr	r1, [pc, #152]	; (800de88 <__kernel_cos+0x180>)
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	f7f2 fa70 	bl	80002d8 <__aeabi_dsub>
 800ddf8:	ec41 0b10 	vmov	d0, r0, r1
 800ddfc:	b003      	add	sp, #12
 800ddfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de02:	4b22      	ldr	r3, [pc, #136]	; (800de8c <__kernel_cos+0x184>)
 800de04:	4920      	ldr	r1, [pc, #128]	; (800de88 <__kernel_cos+0x180>)
 800de06:	4598      	cmp	r8, r3
 800de08:	bfcc      	ite	gt
 800de0a:	4d21      	ldrgt	r5, [pc, #132]	; (800de90 <__kernel_cos+0x188>)
 800de0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800de10:	2400      	movs	r4, #0
 800de12:	4622      	mov	r2, r4
 800de14:	462b      	mov	r3, r5
 800de16:	2000      	movs	r0, #0
 800de18:	f7f2 fa5e 	bl	80002d8 <__aeabi_dsub>
 800de1c:	4622      	mov	r2, r4
 800de1e:	4680      	mov	r8, r0
 800de20:	4689      	mov	r9, r1
 800de22:	462b      	mov	r3, r5
 800de24:	4650      	mov	r0, sl
 800de26:	4659      	mov	r1, fp
 800de28:	f7f2 fa56 	bl	80002d8 <__aeabi_dsub>
 800de2c:	4632      	mov	r2, r6
 800de2e:	463b      	mov	r3, r7
 800de30:	f7f2 fa52 	bl	80002d8 <__aeabi_dsub>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4640      	mov	r0, r8
 800de3a:	4649      	mov	r1, r9
 800de3c:	e7da      	b.n	800ddf4 <__kernel_cos+0xec>
 800de3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800de78 <__kernel_cos+0x170>
 800de42:	e7db      	b.n	800ddfc <__kernel_cos+0xf4>
 800de44:	f3af 8000 	nop.w
 800de48:	be8838d4 	.word	0xbe8838d4
 800de4c:	bda8fae9 	.word	0xbda8fae9
 800de50:	bdb4b1c4 	.word	0xbdb4b1c4
 800de54:	3e21ee9e 	.word	0x3e21ee9e
 800de58:	809c52ad 	.word	0x809c52ad
 800de5c:	3e927e4f 	.word	0x3e927e4f
 800de60:	19cb1590 	.word	0x19cb1590
 800de64:	3efa01a0 	.word	0x3efa01a0
 800de68:	16c15177 	.word	0x16c15177
 800de6c:	3f56c16c 	.word	0x3f56c16c
 800de70:	5555554c 	.word	0x5555554c
 800de74:	3fa55555 	.word	0x3fa55555
 800de78:	00000000 	.word	0x00000000
 800de7c:	3ff00000 	.word	0x3ff00000
 800de80:	3fe00000 	.word	0x3fe00000
 800de84:	3fd33332 	.word	0x3fd33332
 800de88:	3ff00000 	.word	0x3ff00000
 800de8c:	3fe90000 	.word	0x3fe90000
 800de90:	3fd20000 	.word	0x3fd20000
 800de94:	00000000 	.word	0x00000000

0800de98 <__kernel_sin>:
 800de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	ed2d 8b04 	vpush	{d8-d9}
 800dea0:	eeb0 8a41 	vmov.f32	s16, s2
 800dea4:	eef0 8a61 	vmov.f32	s17, s3
 800dea8:	ec55 4b10 	vmov	r4, r5, d0
 800deac:	b083      	sub	sp, #12
 800deae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800deb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800deb6:	9001      	str	r0, [sp, #4]
 800deb8:	da06      	bge.n	800dec8 <__kernel_sin+0x30>
 800deba:	ee10 0a10 	vmov	r0, s0
 800debe:	4629      	mov	r1, r5
 800dec0:	f7f2 fe72 	bl	8000ba8 <__aeabi_d2iz>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d051      	beq.n	800df6c <__kernel_sin+0xd4>
 800dec8:	4622      	mov	r2, r4
 800deca:	462b      	mov	r3, r5
 800decc:	4620      	mov	r0, r4
 800dece:	4629      	mov	r1, r5
 800ded0:	f7f2 fbba 	bl	8000648 <__aeabi_dmul>
 800ded4:	4682      	mov	sl, r0
 800ded6:	468b      	mov	fp, r1
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	4620      	mov	r0, r4
 800dede:	4629      	mov	r1, r5
 800dee0:	f7f2 fbb2 	bl	8000648 <__aeabi_dmul>
 800dee4:	a341      	add	r3, pc, #260	; (adr r3, 800dfec <__kernel_sin+0x154>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	4680      	mov	r8, r0
 800deec:	4689      	mov	r9, r1
 800deee:	4650      	mov	r0, sl
 800def0:	4659      	mov	r1, fp
 800def2:	f7f2 fba9 	bl	8000648 <__aeabi_dmul>
 800def6:	a33f      	add	r3, pc, #252	; (adr r3, 800dff4 <__kernel_sin+0x15c>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	f7f2 f9ec 	bl	80002d8 <__aeabi_dsub>
 800df00:	4652      	mov	r2, sl
 800df02:	465b      	mov	r3, fp
 800df04:	f7f2 fba0 	bl	8000648 <__aeabi_dmul>
 800df08:	a33c      	add	r3, pc, #240	; (adr r3, 800dffc <__kernel_sin+0x164>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 f9e5 	bl	80002dc <__adddf3>
 800df12:	4652      	mov	r2, sl
 800df14:	465b      	mov	r3, fp
 800df16:	f7f2 fb97 	bl	8000648 <__aeabi_dmul>
 800df1a:	a33a      	add	r3, pc, #232	; (adr r3, 800e004 <__kernel_sin+0x16c>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	f7f2 f9da 	bl	80002d8 <__aeabi_dsub>
 800df24:	4652      	mov	r2, sl
 800df26:	465b      	mov	r3, fp
 800df28:	f7f2 fb8e 	bl	8000648 <__aeabi_dmul>
 800df2c:	a337      	add	r3, pc, #220	; (adr r3, 800e00c <__kernel_sin+0x174>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f9d3 	bl	80002dc <__adddf3>
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	4606      	mov	r6, r0
 800df3a:	460f      	mov	r7, r1
 800df3c:	b9eb      	cbnz	r3, 800df7a <__kernel_sin+0xe2>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4650      	mov	r0, sl
 800df44:	4659      	mov	r1, fp
 800df46:	f7f2 fb7f 	bl	8000648 <__aeabi_dmul>
 800df4a:	a325      	add	r3, pc, #148	; (adr r3, 800dfe0 <__kernel_sin+0x148>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 f9c2 	bl	80002d8 <__aeabi_dsub>
 800df54:	4642      	mov	r2, r8
 800df56:	464b      	mov	r3, r9
 800df58:	f7f2 fb76 	bl	8000648 <__aeabi_dmul>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4620      	mov	r0, r4
 800df62:	4629      	mov	r1, r5
 800df64:	f7f2 f9ba 	bl	80002dc <__adddf3>
 800df68:	4604      	mov	r4, r0
 800df6a:	460d      	mov	r5, r1
 800df6c:	ec45 4b10 	vmov	d0, r4, r5
 800df70:	b003      	add	sp, #12
 800df72:	ecbd 8b04 	vpop	{d8-d9}
 800df76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7a:	4b1b      	ldr	r3, [pc, #108]	; (800dfe8 <__kernel_sin+0x150>)
 800df7c:	ec51 0b18 	vmov	r0, r1, d8
 800df80:	2200      	movs	r2, #0
 800df82:	f7f2 fb61 	bl	8000648 <__aeabi_dmul>
 800df86:	4632      	mov	r2, r6
 800df88:	ec41 0b19 	vmov	d9, r0, r1
 800df8c:	463b      	mov	r3, r7
 800df8e:	4640      	mov	r0, r8
 800df90:	4649      	mov	r1, r9
 800df92:	f7f2 fb59 	bl	8000648 <__aeabi_dmul>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	ec51 0b19 	vmov	r0, r1, d9
 800df9e:	f7f2 f99b 	bl	80002d8 <__aeabi_dsub>
 800dfa2:	4652      	mov	r2, sl
 800dfa4:	465b      	mov	r3, fp
 800dfa6:	f7f2 fb4f 	bl	8000648 <__aeabi_dmul>
 800dfaa:	ec53 2b18 	vmov	r2, r3, d8
 800dfae:	f7f2 f993 	bl	80002d8 <__aeabi_dsub>
 800dfb2:	a30b      	add	r3, pc, #44	; (adr r3, 800dfe0 <__kernel_sin+0x148>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	4606      	mov	r6, r0
 800dfba:	460f      	mov	r7, r1
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	4649      	mov	r1, r9
 800dfc0:	f7f2 fb42 	bl	8000648 <__aeabi_dmul>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4630      	mov	r0, r6
 800dfca:	4639      	mov	r1, r7
 800dfcc:	f7f2 f986 	bl	80002dc <__adddf3>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	f7f2 f97e 	bl	80002d8 <__aeabi_dsub>
 800dfdc:	e7c4      	b.n	800df68 <__kernel_sin+0xd0>
 800dfde:	bf00      	nop
 800dfe0:	55555549 	.word	0x55555549
 800dfe4:	3fc55555 	.word	0x3fc55555
 800dfe8:	3fe00000 	.word	0x3fe00000
 800dfec:	5acfd57c 	.word	0x5acfd57c
 800dff0:	3de5d93a 	.word	0x3de5d93a
 800dff4:	8a2b9ceb 	.word	0x8a2b9ceb
 800dff8:	3e5ae5e6 	.word	0x3e5ae5e6
 800dffc:	57b1fe7d 	.word	0x57b1fe7d
 800e000:	3ec71de3 	.word	0x3ec71de3
 800e004:	19c161d5 	.word	0x19c161d5
 800e008:	3f2a01a0 	.word	0x3f2a01a0
 800e00c:	1110f8a6 	.word	0x1110f8a6
 800e010:	3f811111 	.word	0x3f811111
 800e014:	00000000 	.word	0x00000000

0800e018 <__ieee754_rem_pio2>:
 800e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01c:	ed2d 8b02 	vpush	{d8}
 800e020:	ec55 4b10 	vmov	r4, r5, d0
 800e024:	4bca      	ldr	r3, [pc, #808]	; (800e350 <__ieee754_rem_pio2+0x338>)
 800e026:	b08b      	sub	sp, #44	; 0x2c
 800e028:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e02c:	4598      	cmp	r8, r3
 800e02e:	4682      	mov	sl, r0
 800e030:	9502      	str	r5, [sp, #8]
 800e032:	dc08      	bgt.n	800e046 <__ieee754_rem_pio2+0x2e>
 800e034:	2200      	movs	r2, #0
 800e036:	2300      	movs	r3, #0
 800e038:	ed80 0b00 	vstr	d0, [r0]
 800e03c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e040:	f04f 0b00 	mov.w	fp, #0
 800e044:	e028      	b.n	800e098 <__ieee754_rem_pio2+0x80>
 800e046:	4bc3      	ldr	r3, [pc, #780]	; (800e354 <__ieee754_rem_pio2+0x33c>)
 800e048:	4598      	cmp	r8, r3
 800e04a:	dc78      	bgt.n	800e13e <__ieee754_rem_pio2+0x126>
 800e04c:	9b02      	ldr	r3, [sp, #8]
 800e04e:	4ec2      	ldr	r6, [pc, #776]	; (800e358 <__ieee754_rem_pio2+0x340>)
 800e050:	2b00      	cmp	r3, #0
 800e052:	ee10 0a10 	vmov	r0, s0
 800e056:	a3b0      	add	r3, pc, #704	; (adr r3, 800e318 <__ieee754_rem_pio2+0x300>)
 800e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05c:	4629      	mov	r1, r5
 800e05e:	dd39      	ble.n	800e0d4 <__ieee754_rem_pio2+0xbc>
 800e060:	f7f2 f93a 	bl	80002d8 <__aeabi_dsub>
 800e064:	45b0      	cmp	r8, r6
 800e066:	4604      	mov	r4, r0
 800e068:	460d      	mov	r5, r1
 800e06a:	d01b      	beq.n	800e0a4 <__ieee754_rem_pio2+0x8c>
 800e06c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e320 <__ieee754_rem_pio2+0x308>)
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	f7f2 f931 	bl	80002d8 <__aeabi_dsub>
 800e076:	4602      	mov	r2, r0
 800e078:	460b      	mov	r3, r1
 800e07a:	e9ca 2300 	strd	r2, r3, [sl]
 800e07e:	4620      	mov	r0, r4
 800e080:	4629      	mov	r1, r5
 800e082:	f7f2 f929 	bl	80002d8 <__aeabi_dsub>
 800e086:	a3a6      	add	r3, pc, #664	; (adr r3, 800e320 <__ieee754_rem_pio2+0x308>)
 800e088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08c:	f7f2 f924 	bl	80002d8 <__aeabi_dsub>
 800e090:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e094:	f04f 0b01 	mov.w	fp, #1
 800e098:	4658      	mov	r0, fp
 800e09a:	b00b      	add	sp, #44	; 0x2c
 800e09c:	ecbd 8b02 	vpop	{d8}
 800e0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a4:	a3a0      	add	r3, pc, #640	; (adr r3, 800e328 <__ieee754_rem_pio2+0x310>)
 800e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0aa:	f7f2 f915 	bl	80002d8 <__aeabi_dsub>
 800e0ae:	a3a0      	add	r3, pc, #640	; (adr r3, 800e330 <__ieee754_rem_pio2+0x318>)
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	f7f2 f90e 	bl	80002d8 <__aeabi_dsub>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	e9ca 2300 	strd	r2, r3, [sl]
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	f7f2 f906 	bl	80002d8 <__aeabi_dsub>
 800e0cc:	a398      	add	r3, pc, #608	; (adr r3, 800e330 <__ieee754_rem_pio2+0x318>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	e7db      	b.n	800e08c <__ieee754_rem_pio2+0x74>
 800e0d4:	f7f2 f902 	bl	80002dc <__adddf3>
 800e0d8:	45b0      	cmp	r8, r6
 800e0da:	4604      	mov	r4, r0
 800e0dc:	460d      	mov	r5, r1
 800e0de:	d016      	beq.n	800e10e <__ieee754_rem_pio2+0xf6>
 800e0e0:	a38f      	add	r3, pc, #572	; (adr r3, 800e320 <__ieee754_rem_pio2+0x308>)
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	f7f2 f8f9 	bl	80002dc <__adddf3>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	e9ca 2300 	strd	r2, r3, [sl]
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f7f2 f8ef 	bl	80002d8 <__aeabi_dsub>
 800e0fa:	a389      	add	r3, pc, #548	; (adr r3, 800e320 <__ieee754_rem_pio2+0x308>)
 800e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e100:	f7f2 f8ec 	bl	80002dc <__adddf3>
 800e104:	f04f 3bff 	mov.w	fp, #4294967295
 800e108:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e10c:	e7c4      	b.n	800e098 <__ieee754_rem_pio2+0x80>
 800e10e:	a386      	add	r3, pc, #536	; (adr r3, 800e328 <__ieee754_rem_pio2+0x310>)
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	f7f2 f8e2 	bl	80002dc <__adddf3>
 800e118:	a385      	add	r3, pc, #532	; (adr r3, 800e330 <__ieee754_rem_pio2+0x318>)
 800e11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11e:	4604      	mov	r4, r0
 800e120:	460d      	mov	r5, r1
 800e122:	f7f2 f8db 	bl	80002dc <__adddf3>
 800e126:	4602      	mov	r2, r0
 800e128:	460b      	mov	r3, r1
 800e12a:	e9ca 2300 	strd	r2, r3, [sl]
 800e12e:	4620      	mov	r0, r4
 800e130:	4629      	mov	r1, r5
 800e132:	f7f2 f8d1 	bl	80002d8 <__aeabi_dsub>
 800e136:	a37e      	add	r3, pc, #504	; (adr r3, 800e330 <__ieee754_rem_pio2+0x318>)
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	e7e0      	b.n	800e100 <__ieee754_rem_pio2+0xe8>
 800e13e:	4b87      	ldr	r3, [pc, #540]	; (800e35c <__ieee754_rem_pio2+0x344>)
 800e140:	4598      	cmp	r8, r3
 800e142:	f300 80d8 	bgt.w	800e2f6 <__ieee754_rem_pio2+0x2de>
 800e146:	f000 f96d 	bl	800e424 <fabs>
 800e14a:	ec55 4b10 	vmov	r4, r5, d0
 800e14e:	ee10 0a10 	vmov	r0, s0
 800e152:	a379      	add	r3, pc, #484	; (adr r3, 800e338 <__ieee754_rem_pio2+0x320>)
 800e154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e158:	4629      	mov	r1, r5
 800e15a:	f7f2 fa75 	bl	8000648 <__aeabi_dmul>
 800e15e:	4b80      	ldr	r3, [pc, #512]	; (800e360 <__ieee754_rem_pio2+0x348>)
 800e160:	2200      	movs	r2, #0
 800e162:	f7f2 f8bb 	bl	80002dc <__adddf3>
 800e166:	f7f2 fd1f 	bl	8000ba8 <__aeabi_d2iz>
 800e16a:	4683      	mov	fp, r0
 800e16c:	f7f2 fa02 	bl	8000574 <__aeabi_i2d>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	ec43 2b18 	vmov	d8, r2, r3
 800e178:	a367      	add	r3, pc, #412	; (adr r3, 800e318 <__ieee754_rem_pio2+0x300>)
 800e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17e:	f7f2 fa63 	bl	8000648 <__aeabi_dmul>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	4620      	mov	r0, r4
 800e188:	4629      	mov	r1, r5
 800e18a:	f7f2 f8a5 	bl	80002d8 <__aeabi_dsub>
 800e18e:	a364      	add	r3, pc, #400	; (adr r3, 800e320 <__ieee754_rem_pio2+0x308>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	4606      	mov	r6, r0
 800e196:	460f      	mov	r7, r1
 800e198:	ec51 0b18 	vmov	r0, r1, d8
 800e19c:	f7f2 fa54 	bl	8000648 <__aeabi_dmul>
 800e1a0:	f1bb 0f1f 	cmp.w	fp, #31
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	460d      	mov	r5, r1
 800e1a8:	dc0d      	bgt.n	800e1c6 <__ieee754_rem_pio2+0x1ae>
 800e1aa:	4b6e      	ldr	r3, [pc, #440]	; (800e364 <__ieee754_rem_pio2+0x34c>)
 800e1ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b4:	4543      	cmp	r3, r8
 800e1b6:	d006      	beq.n	800e1c6 <__ieee754_rem_pio2+0x1ae>
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	462b      	mov	r3, r5
 800e1bc:	4630      	mov	r0, r6
 800e1be:	4639      	mov	r1, r7
 800e1c0:	f7f2 f88a 	bl	80002d8 <__aeabi_dsub>
 800e1c4:	e00e      	b.n	800e1e4 <__ieee754_rem_pio2+0x1cc>
 800e1c6:	462b      	mov	r3, r5
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	f7f2 f883 	bl	80002d8 <__aeabi_dsub>
 800e1d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1d6:	9303      	str	r3, [sp, #12]
 800e1d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e1dc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e1e0:	2b10      	cmp	r3, #16
 800e1e2:	dc02      	bgt.n	800e1ea <__ieee754_rem_pio2+0x1d2>
 800e1e4:	e9ca 0100 	strd	r0, r1, [sl]
 800e1e8:	e039      	b.n	800e25e <__ieee754_rem_pio2+0x246>
 800e1ea:	a34f      	add	r3, pc, #316	; (adr r3, 800e328 <__ieee754_rem_pio2+0x310>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	ec51 0b18 	vmov	r0, r1, d8
 800e1f4:	f7f2 fa28 	bl	8000648 <__aeabi_dmul>
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	460d      	mov	r5, r1
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	460b      	mov	r3, r1
 800e200:	4630      	mov	r0, r6
 800e202:	4639      	mov	r1, r7
 800e204:	f7f2 f868 	bl	80002d8 <__aeabi_dsub>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4680      	mov	r8, r0
 800e20e:	4689      	mov	r9, r1
 800e210:	4630      	mov	r0, r6
 800e212:	4639      	mov	r1, r7
 800e214:	f7f2 f860 	bl	80002d8 <__aeabi_dsub>
 800e218:	4622      	mov	r2, r4
 800e21a:	462b      	mov	r3, r5
 800e21c:	f7f2 f85c 	bl	80002d8 <__aeabi_dsub>
 800e220:	a343      	add	r3, pc, #268	; (adr r3, 800e330 <__ieee754_rem_pio2+0x318>)
 800e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e226:	4604      	mov	r4, r0
 800e228:	460d      	mov	r5, r1
 800e22a:	ec51 0b18 	vmov	r0, r1, d8
 800e22e:	f7f2 fa0b 	bl	8000648 <__aeabi_dmul>
 800e232:	4622      	mov	r2, r4
 800e234:	462b      	mov	r3, r5
 800e236:	f7f2 f84f 	bl	80002d8 <__aeabi_dsub>
 800e23a:	4602      	mov	r2, r0
 800e23c:	460b      	mov	r3, r1
 800e23e:	4604      	mov	r4, r0
 800e240:	460d      	mov	r5, r1
 800e242:	4640      	mov	r0, r8
 800e244:	4649      	mov	r1, r9
 800e246:	f7f2 f847 	bl	80002d8 <__aeabi_dsub>
 800e24a:	9a03      	ldr	r2, [sp, #12]
 800e24c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	2b31      	cmp	r3, #49	; 0x31
 800e254:	dc24      	bgt.n	800e2a0 <__ieee754_rem_pio2+0x288>
 800e256:	e9ca 0100 	strd	r0, r1, [sl]
 800e25a:	4646      	mov	r6, r8
 800e25c:	464f      	mov	r7, r9
 800e25e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e262:	4630      	mov	r0, r6
 800e264:	4642      	mov	r2, r8
 800e266:	464b      	mov	r3, r9
 800e268:	4639      	mov	r1, r7
 800e26a:	f7f2 f835 	bl	80002d8 <__aeabi_dsub>
 800e26e:	462b      	mov	r3, r5
 800e270:	4622      	mov	r2, r4
 800e272:	f7f2 f831 	bl	80002d8 <__aeabi_dsub>
 800e276:	9b02      	ldr	r3, [sp, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e27e:	f6bf af0b 	bge.w	800e098 <__ieee754_rem_pio2+0x80>
 800e282:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e286:	f8ca 3004 	str.w	r3, [sl, #4]
 800e28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e28e:	f8ca 8000 	str.w	r8, [sl]
 800e292:	f8ca 0008 	str.w	r0, [sl, #8]
 800e296:	f8ca 300c 	str.w	r3, [sl, #12]
 800e29a:	f1cb 0b00 	rsb	fp, fp, #0
 800e29e:	e6fb      	b.n	800e098 <__ieee754_rem_pio2+0x80>
 800e2a0:	a327      	add	r3, pc, #156	; (adr r3, 800e340 <__ieee754_rem_pio2+0x328>)
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	ec51 0b18 	vmov	r0, r1, d8
 800e2aa:	f7f2 f9cd 	bl	8000648 <__aeabi_dmul>
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	460d      	mov	r5, r1
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	f7f2 f80d 	bl	80002d8 <__aeabi_dsub>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	f7f2 f805 	bl	80002d8 <__aeabi_dsub>
 800e2ce:	4622      	mov	r2, r4
 800e2d0:	462b      	mov	r3, r5
 800e2d2:	f7f2 f801 	bl	80002d8 <__aeabi_dsub>
 800e2d6:	a31c      	add	r3, pc, #112	; (adr r3, 800e348 <__ieee754_rem_pio2+0x330>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	4604      	mov	r4, r0
 800e2de:	460d      	mov	r5, r1
 800e2e0:	ec51 0b18 	vmov	r0, r1, d8
 800e2e4:	f7f2 f9b0 	bl	8000648 <__aeabi_dmul>
 800e2e8:	4622      	mov	r2, r4
 800e2ea:	462b      	mov	r3, r5
 800e2ec:	f7f1 fff4 	bl	80002d8 <__aeabi_dsub>
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	e760      	b.n	800e1b8 <__ieee754_rem_pio2+0x1a0>
 800e2f6:	4b1c      	ldr	r3, [pc, #112]	; (800e368 <__ieee754_rem_pio2+0x350>)
 800e2f8:	4598      	cmp	r8, r3
 800e2fa:	dd37      	ble.n	800e36c <__ieee754_rem_pio2+0x354>
 800e2fc:	ee10 2a10 	vmov	r2, s0
 800e300:	462b      	mov	r3, r5
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f1 ffe7 	bl	80002d8 <__aeabi_dsub>
 800e30a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e30e:	e9ca 0100 	strd	r0, r1, [sl]
 800e312:	e695      	b.n	800e040 <__ieee754_rem_pio2+0x28>
 800e314:	f3af 8000 	nop.w
 800e318:	54400000 	.word	0x54400000
 800e31c:	3ff921fb 	.word	0x3ff921fb
 800e320:	1a626331 	.word	0x1a626331
 800e324:	3dd0b461 	.word	0x3dd0b461
 800e328:	1a600000 	.word	0x1a600000
 800e32c:	3dd0b461 	.word	0x3dd0b461
 800e330:	2e037073 	.word	0x2e037073
 800e334:	3ba3198a 	.word	0x3ba3198a
 800e338:	6dc9c883 	.word	0x6dc9c883
 800e33c:	3fe45f30 	.word	0x3fe45f30
 800e340:	2e000000 	.word	0x2e000000
 800e344:	3ba3198a 	.word	0x3ba3198a
 800e348:	252049c1 	.word	0x252049c1
 800e34c:	397b839a 	.word	0x397b839a
 800e350:	3fe921fb 	.word	0x3fe921fb
 800e354:	4002d97b 	.word	0x4002d97b
 800e358:	3ff921fb 	.word	0x3ff921fb
 800e35c:	413921fb 	.word	0x413921fb
 800e360:	3fe00000 	.word	0x3fe00000
 800e364:	0800f544 	.word	0x0800f544
 800e368:	7fefffff 	.word	0x7fefffff
 800e36c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e370:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e374:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e378:	4620      	mov	r0, r4
 800e37a:	460d      	mov	r5, r1
 800e37c:	f7f2 fc14 	bl	8000ba8 <__aeabi_d2iz>
 800e380:	f7f2 f8f8 	bl	8000574 <__aeabi_i2d>
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	4620      	mov	r0, r4
 800e38a:	4629      	mov	r1, r5
 800e38c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e390:	f7f1 ffa2 	bl	80002d8 <__aeabi_dsub>
 800e394:	4b21      	ldr	r3, [pc, #132]	; (800e41c <__ieee754_rem_pio2+0x404>)
 800e396:	2200      	movs	r2, #0
 800e398:	f7f2 f956 	bl	8000648 <__aeabi_dmul>
 800e39c:	460d      	mov	r5, r1
 800e39e:	4604      	mov	r4, r0
 800e3a0:	f7f2 fc02 	bl	8000ba8 <__aeabi_d2iz>
 800e3a4:	f7f2 f8e6 	bl	8000574 <__aeabi_i2d>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3b4:	f7f1 ff90 	bl	80002d8 <__aeabi_dsub>
 800e3b8:	4b18      	ldr	r3, [pc, #96]	; (800e41c <__ieee754_rem_pio2+0x404>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f7f2 f944 	bl	8000648 <__aeabi_dmul>
 800e3c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3c4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e3c8:	2703      	movs	r7, #3
 800e3ca:	2400      	movs	r4, #0
 800e3cc:	2500      	movs	r5, #0
 800e3ce:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e3d2:	4622      	mov	r2, r4
 800e3d4:	462b      	mov	r3, r5
 800e3d6:	46b9      	mov	r9, r7
 800e3d8:	3f01      	subs	r7, #1
 800e3da:	f7f2 fb9d 	bl	8000b18 <__aeabi_dcmpeq>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d1f5      	bne.n	800e3ce <__ieee754_rem_pio2+0x3b6>
 800e3e2:	4b0f      	ldr	r3, [pc, #60]	; (800e420 <__ieee754_rem_pio2+0x408>)
 800e3e4:	9301      	str	r3, [sp, #4]
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	4632      	mov	r2, r6
 800e3ec:	464b      	mov	r3, r9
 800e3ee:	4651      	mov	r1, sl
 800e3f0:	a804      	add	r0, sp, #16
 800e3f2:	f000 f821 	bl	800e438 <__kernel_rem_pio2>
 800e3f6:	9b02      	ldr	r3, [sp, #8]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	4683      	mov	fp, r0
 800e3fc:	f6bf ae4c 	bge.w	800e098 <__ieee754_rem_pio2+0x80>
 800e400:	e9da 2100 	ldrd	r2, r1, [sl]
 800e404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e408:	e9ca 2300 	strd	r2, r3, [sl]
 800e40c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e414:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e418:	e73f      	b.n	800e29a <__ieee754_rem_pio2+0x282>
 800e41a:	bf00      	nop
 800e41c:	41700000 	.word	0x41700000
 800e420:	0800f5c4 	.word	0x0800f5c4

0800e424 <fabs>:
 800e424:	ec51 0b10 	vmov	r0, r1, d0
 800e428:	ee10 2a10 	vmov	r2, s0
 800e42c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e430:	ec43 2b10 	vmov	d0, r2, r3
 800e434:	4770      	bx	lr
	...

0800e438 <__kernel_rem_pio2>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	ed2d 8b02 	vpush	{d8}
 800e440:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e444:	f112 0f14 	cmn.w	r2, #20
 800e448:	9306      	str	r3, [sp, #24]
 800e44a:	9104      	str	r1, [sp, #16]
 800e44c:	4bc2      	ldr	r3, [pc, #776]	; (800e758 <__kernel_rem_pio2+0x320>)
 800e44e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e450:	9009      	str	r0, [sp, #36]	; 0x24
 800e452:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	9b06      	ldr	r3, [sp, #24]
 800e45a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e45e:	bfa8      	it	ge
 800e460:	1ed4      	subge	r4, r2, #3
 800e462:	9305      	str	r3, [sp, #20]
 800e464:	bfb2      	itee	lt
 800e466:	2400      	movlt	r4, #0
 800e468:	2318      	movge	r3, #24
 800e46a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e46e:	f06f 0317 	mvn.w	r3, #23
 800e472:	fb04 3303 	mla	r3, r4, r3, r3
 800e476:	eb03 0a02 	add.w	sl, r3, r2
 800e47a:	9b00      	ldr	r3, [sp, #0]
 800e47c:	9a05      	ldr	r2, [sp, #20]
 800e47e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e748 <__kernel_rem_pio2+0x310>
 800e482:	eb03 0802 	add.w	r8, r3, r2
 800e486:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e488:	1aa7      	subs	r7, r4, r2
 800e48a:	ae20      	add	r6, sp, #128	; 0x80
 800e48c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e490:	2500      	movs	r5, #0
 800e492:	4545      	cmp	r5, r8
 800e494:	dd13      	ble.n	800e4be <__kernel_rem_pio2+0x86>
 800e496:	9b06      	ldr	r3, [sp, #24]
 800e498:	aa20      	add	r2, sp, #128	; 0x80
 800e49a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e49e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e4a2:	f04f 0800 	mov.w	r8, #0
 800e4a6:	9b00      	ldr	r3, [sp, #0]
 800e4a8:	4598      	cmp	r8, r3
 800e4aa:	dc31      	bgt.n	800e510 <__kernel_rem_pio2+0xd8>
 800e4ac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e748 <__kernel_rem_pio2+0x310>
 800e4b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e4b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e4b8:	462f      	mov	r7, r5
 800e4ba:	2600      	movs	r6, #0
 800e4bc:	e01b      	b.n	800e4f6 <__kernel_rem_pio2+0xbe>
 800e4be:	42ef      	cmn	r7, r5
 800e4c0:	d407      	bmi.n	800e4d2 <__kernel_rem_pio2+0x9a>
 800e4c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e4c6:	f7f2 f855 	bl	8000574 <__aeabi_i2d>
 800e4ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e4ce:	3501      	adds	r5, #1
 800e4d0:	e7df      	b.n	800e492 <__kernel_rem_pio2+0x5a>
 800e4d2:	ec51 0b18 	vmov	r0, r1, d8
 800e4d6:	e7f8      	b.n	800e4ca <__kernel_rem_pio2+0x92>
 800e4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e4e0:	f7f2 f8b2 	bl	8000648 <__aeabi_dmul>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4ec:	f7f1 fef6 	bl	80002dc <__adddf3>
 800e4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f4:	3601      	adds	r6, #1
 800e4f6:	9b05      	ldr	r3, [sp, #20]
 800e4f8:	429e      	cmp	r6, r3
 800e4fa:	f1a7 0708 	sub.w	r7, r7, #8
 800e4fe:	ddeb      	ble.n	800e4d8 <__kernel_rem_pio2+0xa0>
 800e500:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e504:	f108 0801 	add.w	r8, r8, #1
 800e508:	ecab 7b02 	vstmia	fp!, {d7}
 800e50c:	3508      	adds	r5, #8
 800e50e:	e7ca      	b.n	800e4a6 <__kernel_rem_pio2+0x6e>
 800e510:	9b00      	ldr	r3, [sp, #0]
 800e512:	aa0c      	add	r2, sp, #48	; 0x30
 800e514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e518:	930b      	str	r3, [sp, #44]	; 0x2c
 800e51a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e51c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e520:	9c00      	ldr	r4, [sp, #0]
 800e522:	930a      	str	r3, [sp, #40]	; 0x28
 800e524:	00e3      	lsls	r3, r4, #3
 800e526:	9308      	str	r3, [sp, #32]
 800e528:	ab98      	add	r3, sp, #608	; 0x260
 800e52a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e52e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e532:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e536:	ab70      	add	r3, sp, #448	; 0x1c0
 800e538:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e53c:	46c3      	mov	fp, r8
 800e53e:	46a1      	mov	r9, r4
 800e540:	f1b9 0f00 	cmp.w	r9, #0
 800e544:	f1a5 0508 	sub.w	r5, r5, #8
 800e548:	dc77      	bgt.n	800e63a <__kernel_rem_pio2+0x202>
 800e54a:	ec47 6b10 	vmov	d0, r6, r7
 800e54e:	4650      	mov	r0, sl
 800e550:	f000 fac2 	bl	800ead8 <scalbn>
 800e554:	ec57 6b10 	vmov	r6, r7, d0
 800e558:	2200      	movs	r2, #0
 800e55a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e55e:	ee10 0a10 	vmov	r0, s0
 800e562:	4639      	mov	r1, r7
 800e564:	f7f2 f870 	bl	8000648 <__aeabi_dmul>
 800e568:	ec41 0b10 	vmov	d0, r0, r1
 800e56c:	f000 fb34 	bl	800ebd8 <floor>
 800e570:	4b7a      	ldr	r3, [pc, #488]	; (800e75c <__kernel_rem_pio2+0x324>)
 800e572:	ec51 0b10 	vmov	r0, r1, d0
 800e576:	2200      	movs	r2, #0
 800e578:	f7f2 f866 	bl	8000648 <__aeabi_dmul>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4630      	mov	r0, r6
 800e582:	4639      	mov	r1, r7
 800e584:	f7f1 fea8 	bl	80002d8 <__aeabi_dsub>
 800e588:	460f      	mov	r7, r1
 800e58a:	4606      	mov	r6, r0
 800e58c:	f7f2 fb0c 	bl	8000ba8 <__aeabi_d2iz>
 800e590:	9002      	str	r0, [sp, #8]
 800e592:	f7f1 ffef 	bl	8000574 <__aeabi_i2d>
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4630      	mov	r0, r6
 800e59c:	4639      	mov	r1, r7
 800e59e:	f7f1 fe9b 	bl	80002d8 <__aeabi_dsub>
 800e5a2:	f1ba 0f00 	cmp.w	sl, #0
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	460f      	mov	r7, r1
 800e5aa:	dd6d      	ble.n	800e688 <__kernel_rem_pio2+0x250>
 800e5ac:	1e61      	subs	r1, r4, #1
 800e5ae:	ab0c      	add	r3, sp, #48	; 0x30
 800e5b0:	9d02      	ldr	r5, [sp, #8]
 800e5b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5b6:	f1ca 0018 	rsb	r0, sl, #24
 800e5ba:	fa43 f200 	asr.w	r2, r3, r0
 800e5be:	4415      	add	r5, r2
 800e5c0:	4082      	lsls	r2, r0
 800e5c2:	1a9b      	subs	r3, r3, r2
 800e5c4:	aa0c      	add	r2, sp, #48	; 0x30
 800e5c6:	9502      	str	r5, [sp, #8]
 800e5c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e5cc:	f1ca 0217 	rsb	r2, sl, #23
 800e5d0:	fa43 fb02 	asr.w	fp, r3, r2
 800e5d4:	f1bb 0f00 	cmp.w	fp, #0
 800e5d8:	dd65      	ble.n	800e6a6 <__kernel_rem_pio2+0x26e>
 800e5da:	9b02      	ldr	r3, [sp, #8]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	3301      	adds	r3, #1
 800e5e0:	9302      	str	r3, [sp, #8]
 800e5e2:	4615      	mov	r5, r2
 800e5e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e5e8:	4294      	cmp	r4, r2
 800e5ea:	f300 809f 	bgt.w	800e72c <__kernel_rem_pio2+0x2f4>
 800e5ee:	f1ba 0f00 	cmp.w	sl, #0
 800e5f2:	dd07      	ble.n	800e604 <__kernel_rem_pio2+0x1cc>
 800e5f4:	f1ba 0f01 	cmp.w	sl, #1
 800e5f8:	f000 80c1 	beq.w	800e77e <__kernel_rem_pio2+0x346>
 800e5fc:	f1ba 0f02 	cmp.w	sl, #2
 800e600:	f000 80c7 	beq.w	800e792 <__kernel_rem_pio2+0x35a>
 800e604:	f1bb 0f02 	cmp.w	fp, #2
 800e608:	d14d      	bne.n	800e6a6 <__kernel_rem_pio2+0x26e>
 800e60a:	4632      	mov	r2, r6
 800e60c:	463b      	mov	r3, r7
 800e60e:	4954      	ldr	r1, [pc, #336]	; (800e760 <__kernel_rem_pio2+0x328>)
 800e610:	2000      	movs	r0, #0
 800e612:	f7f1 fe61 	bl	80002d8 <__aeabi_dsub>
 800e616:	4606      	mov	r6, r0
 800e618:	460f      	mov	r7, r1
 800e61a:	2d00      	cmp	r5, #0
 800e61c:	d043      	beq.n	800e6a6 <__kernel_rem_pio2+0x26e>
 800e61e:	4650      	mov	r0, sl
 800e620:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e750 <__kernel_rem_pio2+0x318>
 800e624:	f000 fa58 	bl	800ead8 <scalbn>
 800e628:	4630      	mov	r0, r6
 800e62a:	4639      	mov	r1, r7
 800e62c:	ec53 2b10 	vmov	r2, r3, d0
 800e630:	f7f1 fe52 	bl	80002d8 <__aeabi_dsub>
 800e634:	4606      	mov	r6, r0
 800e636:	460f      	mov	r7, r1
 800e638:	e035      	b.n	800e6a6 <__kernel_rem_pio2+0x26e>
 800e63a:	4b4a      	ldr	r3, [pc, #296]	; (800e764 <__kernel_rem_pio2+0x32c>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	4630      	mov	r0, r6
 800e640:	4639      	mov	r1, r7
 800e642:	f7f2 f801 	bl	8000648 <__aeabi_dmul>
 800e646:	f7f2 faaf 	bl	8000ba8 <__aeabi_d2iz>
 800e64a:	f7f1 ff93 	bl	8000574 <__aeabi_i2d>
 800e64e:	4602      	mov	r2, r0
 800e650:	460b      	mov	r3, r1
 800e652:	ec43 2b18 	vmov	d8, r2, r3
 800e656:	4b44      	ldr	r3, [pc, #272]	; (800e768 <__kernel_rem_pio2+0x330>)
 800e658:	2200      	movs	r2, #0
 800e65a:	f7f1 fff5 	bl	8000648 <__aeabi_dmul>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	4630      	mov	r0, r6
 800e664:	4639      	mov	r1, r7
 800e666:	f7f1 fe37 	bl	80002d8 <__aeabi_dsub>
 800e66a:	f7f2 fa9d 	bl	8000ba8 <__aeabi_d2iz>
 800e66e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e672:	f84b 0b04 	str.w	r0, [fp], #4
 800e676:	ec51 0b18 	vmov	r0, r1, d8
 800e67a:	f7f1 fe2f 	bl	80002dc <__adddf3>
 800e67e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	e75b      	b.n	800e540 <__kernel_rem_pio2+0x108>
 800e688:	d106      	bne.n	800e698 <__kernel_rem_pio2+0x260>
 800e68a:	1e63      	subs	r3, r4, #1
 800e68c:	aa0c      	add	r2, sp, #48	; 0x30
 800e68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e692:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e696:	e79d      	b.n	800e5d4 <__kernel_rem_pio2+0x19c>
 800e698:	4b34      	ldr	r3, [pc, #208]	; (800e76c <__kernel_rem_pio2+0x334>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	f7f2 fa5a 	bl	8000b54 <__aeabi_dcmpge>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d140      	bne.n	800e726 <__kernel_rem_pio2+0x2ee>
 800e6a4:	4683      	mov	fp, r0
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	f7f2 fa33 	bl	8000b18 <__aeabi_dcmpeq>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	f000 80c1 	beq.w	800e83a <__kernel_rem_pio2+0x402>
 800e6b8:	1e65      	subs	r5, r4, #1
 800e6ba:	462b      	mov	r3, r5
 800e6bc:	2200      	movs	r2, #0
 800e6be:	9900      	ldr	r1, [sp, #0]
 800e6c0:	428b      	cmp	r3, r1
 800e6c2:	da6d      	bge.n	800e7a0 <__kernel_rem_pio2+0x368>
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	f000 808a 	beq.w	800e7de <__kernel_rem_pio2+0x3a6>
 800e6ca:	ab0c      	add	r3, sp, #48	; 0x30
 800e6cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800e6d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 80ae 	beq.w	800e836 <__kernel_rem_pio2+0x3fe>
 800e6da:	4650      	mov	r0, sl
 800e6dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e750 <__kernel_rem_pio2+0x318>
 800e6e0:	f000 f9fa 	bl	800ead8 <scalbn>
 800e6e4:	1c6b      	adds	r3, r5, #1
 800e6e6:	00da      	lsls	r2, r3, #3
 800e6e8:	9205      	str	r2, [sp, #20]
 800e6ea:	ec57 6b10 	vmov	r6, r7, d0
 800e6ee:	aa70      	add	r2, sp, #448	; 0x1c0
 800e6f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e764 <__kernel_rem_pio2+0x32c>
 800e6f4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e6f8:	462c      	mov	r4, r5
 800e6fa:	f04f 0800 	mov.w	r8, #0
 800e6fe:	2c00      	cmp	r4, #0
 800e700:	f280 80d4 	bge.w	800e8ac <__kernel_rem_pio2+0x474>
 800e704:	462c      	mov	r4, r5
 800e706:	2c00      	cmp	r4, #0
 800e708:	f2c0 8102 	blt.w	800e910 <__kernel_rem_pio2+0x4d8>
 800e70c:	4b18      	ldr	r3, [pc, #96]	; (800e770 <__kernel_rem_pio2+0x338>)
 800e70e:	461e      	mov	r6, r3
 800e710:	ab70      	add	r3, sp, #448	; 0x1c0
 800e712:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e716:	1b2b      	subs	r3, r5, r4
 800e718:	f04f 0900 	mov.w	r9, #0
 800e71c:	f04f 0a00 	mov.w	sl, #0
 800e720:	2700      	movs	r7, #0
 800e722:	9306      	str	r3, [sp, #24]
 800e724:	e0e6      	b.n	800e8f4 <__kernel_rem_pio2+0x4bc>
 800e726:	f04f 0b02 	mov.w	fp, #2
 800e72a:	e756      	b.n	800e5da <__kernel_rem_pio2+0x1a2>
 800e72c:	f8d8 3000 	ldr.w	r3, [r8]
 800e730:	bb05      	cbnz	r5, 800e774 <__kernel_rem_pio2+0x33c>
 800e732:	b123      	cbz	r3, 800e73e <__kernel_rem_pio2+0x306>
 800e734:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e738:	f8c8 3000 	str.w	r3, [r8]
 800e73c:	2301      	movs	r3, #1
 800e73e:	3201      	adds	r2, #1
 800e740:	f108 0804 	add.w	r8, r8, #4
 800e744:	461d      	mov	r5, r3
 800e746:	e74f      	b.n	800e5e8 <__kernel_rem_pio2+0x1b0>
	...
 800e754:	3ff00000 	.word	0x3ff00000
 800e758:	0800f710 	.word	0x0800f710
 800e75c:	40200000 	.word	0x40200000
 800e760:	3ff00000 	.word	0x3ff00000
 800e764:	3e700000 	.word	0x3e700000
 800e768:	41700000 	.word	0x41700000
 800e76c:	3fe00000 	.word	0x3fe00000
 800e770:	0800f6d0 	.word	0x0800f6d0
 800e774:	1acb      	subs	r3, r1, r3
 800e776:	f8c8 3000 	str.w	r3, [r8]
 800e77a:	462b      	mov	r3, r5
 800e77c:	e7df      	b.n	800e73e <__kernel_rem_pio2+0x306>
 800e77e:	1e62      	subs	r2, r4, #1
 800e780:	ab0c      	add	r3, sp, #48	; 0x30
 800e782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e786:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e78a:	a90c      	add	r1, sp, #48	; 0x30
 800e78c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e790:	e738      	b.n	800e604 <__kernel_rem_pio2+0x1cc>
 800e792:	1e62      	subs	r2, r4, #1
 800e794:	ab0c      	add	r3, sp, #48	; 0x30
 800e796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e79a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e79e:	e7f4      	b.n	800e78a <__kernel_rem_pio2+0x352>
 800e7a0:	a90c      	add	r1, sp, #48	; 0x30
 800e7a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	430a      	orrs	r2, r1
 800e7aa:	e788      	b.n	800e6be <__kernel_rem_pio2+0x286>
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e7b2:	2900      	cmp	r1, #0
 800e7b4:	d0fa      	beq.n	800e7ac <__kernel_rem_pio2+0x374>
 800e7b6:	9a08      	ldr	r2, [sp, #32]
 800e7b8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e7bc:	446a      	add	r2, sp
 800e7be:	3a98      	subs	r2, #152	; 0x98
 800e7c0:	9208      	str	r2, [sp, #32]
 800e7c2:	9a06      	ldr	r2, [sp, #24]
 800e7c4:	a920      	add	r1, sp, #128	; 0x80
 800e7c6:	18a2      	adds	r2, r4, r2
 800e7c8:	18e3      	adds	r3, r4, r3
 800e7ca:	f104 0801 	add.w	r8, r4, #1
 800e7ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e7d2:	9302      	str	r3, [sp, #8]
 800e7d4:	9b02      	ldr	r3, [sp, #8]
 800e7d6:	4543      	cmp	r3, r8
 800e7d8:	da04      	bge.n	800e7e4 <__kernel_rem_pio2+0x3ac>
 800e7da:	461c      	mov	r4, r3
 800e7dc:	e6a2      	b.n	800e524 <__kernel_rem_pio2+0xec>
 800e7de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	e7e4      	b.n	800e7ae <__kernel_rem_pio2+0x376>
 800e7e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e7ea:	f7f1 fec3 	bl	8000574 <__aeabi_i2d>
 800e7ee:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f4:	46ab      	mov	fp, r5
 800e7f6:	461c      	mov	r4, r3
 800e7f8:	f04f 0900 	mov.w	r9, #0
 800e7fc:	2600      	movs	r6, #0
 800e7fe:	2700      	movs	r7, #0
 800e800:	9b05      	ldr	r3, [sp, #20]
 800e802:	4599      	cmp	r9, r3
 800e804:	dd06      	ble.n	800e814 <__kernel_rem_pio2+0x3dc>
 800e806:	9b08      	ldr	r3, [sp, #32]
 800e808:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e80c:	f108 0801 	add.w	r8, r8, #1
 800e810:	9308      	str	r3, [sp, #32]
 800e812:	e7df      	b.n	800e7d4 <__kernel_rem_pio2+0x39c>
 800e814:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e818:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e81c:	f7f1 ff14 	bl	8000648 <__aeabi_dmul>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	4630      	mov	r0, r6
 800e826:	4639      	mov	r1, r7
 800e828:	f7f1 fd58 	bl	80002dc <__adddf3>
 800e82c:	f109 0901 	add.w	r9, r9, #1
 800e830:	4606      	mov	r6, r0
 800e832:	460f      	mov	r7, r1
 800e834:	e7e4      	b.n	800e800 <__kernel_rem_pio2+0x3c8>
 800e836:	3d01      	subs	r5, #1
 800e838:	e747      	b.n	800e6ca <__kernel_rem_pio2+0x292>
 800e83a:	ec47 6b10 	vmov	d0, r6, r7
 800e83e:	f1ca 0000 	rsb	r0, sl, #0
 800e842:	f000 f949 	bl	800ead8 <scalbn>
 800e846:	ec57 6b10 	vmov	r6, r7, d0
 800e84a:	4ba0      	ldr	r3, [pc, #640]	; (800eacc <__kernel_rem_pio2+0x694>)
 800e84c:	ee10 0a10 	vmov	r0, s0
 800e850:	2200      	movs	r2, #0
 800e852:	4639      	mov	r1, r7
 800e854:	f7f2 f97e 	bl	8000b54 <__aeabi_dcmpge>
 800e858:	b1f8      	cbz	r0, 800e89a <__kernel_rem_pio2+0x462>
 800e85a:	4b9d      	ldr	r3, [pc, #628]	; (800ead0 <__kernel_rem_pio2+0x698>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	4630      	mov	r0, r6
 800e860:	4639      	mov	r1, r7
 800e862:	f7f1 fef1 	bl	8000648 <__aeabi_dmul>
 800e866:	f7f2 f99f 	bl	8000ba8 <__aeabi_d2iz>
 800e86a:	4680      	mov	r8, r0
 800e86c:	f7f1 fe82 	bl	8000574 <__aeabi_i2d>
 800e870:	4b96      	ldr	r3, [pc, #600]	; (800eacc <__kernel_rem_pio2+0x694>)
 800e872:	2200      	movs	r2, #0
 800e874:	f7f1 fee8 	bl	8000648 <__aeabi_dmul>
 800e878:	460b      	mov	r3, r1
 800e87a:	4602      	mov	r2, r0
 800e87c:	4639      	mov	r1, r7
 800e87e:	4630      	mov	r0, r6
 800e880:	f7f1 fd2a 	bl	80002d8 <__aeabi_dsub>
 800e884:	f7f2 f990 	bl	8000ba8 <__aeabi_d2iz>
 800e888:	1c65      	adds	r5, r4, #1
 800e88a:	ab0c      	add	r3, sp, #48	; 0x30
 800e88c:	f10a 0a18 	add.w	sl, sl, #24
 800e890:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e894:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e898:	e71f      	b.n	800e6da <__kernel_rem_pio2+0x2a2>
 800e89a:	4630      	mov	r0, r6
 800e89c:	4639      	mov	r1, r7
 800e89e:	f7f2 f983 	bl	8000ba8 <__aeabi_d2iz>
 800e8a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e8a4:	4625      	mov	r5, r4
 800e8a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e8aa:	e716      	b.n	800e6da <__kernel_rem_pio2+0x2a2>
 800e8ac:	ab0c      	add	r3, sp, #48	; 0x30
 800e8ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e8b2:	f7f1 fe5f 	bl	8000574 <__aeabi_i2d>
 800e8b6:	4632      	mov	r2, r6
 800e8b8:	463b      	mov	r3, r7
 800e8ba:	f7f1 fec5 	bl	8000648 <__aeabi_dmul>
 800e8be:	4642      	mov	r2, r8
 800e8c0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e8c4:	464b      	mov	r3, r9
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	4639      	mov	r1, r7
 800e8ca:	f7f1 febd 	bl	8000648 <__aeabi_dmul>
 800e8ce:	3c01      	subs	r4, #1
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	460f      	mov	r7, r1
 800e8d4:	e713      	b.n	800e6fe <__kernel_rem_pio2+0x2c6>
 800e8d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e8da:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e8de:	f7f1 feb3 	bl	8000648 <__aeabi_dmul>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4648      	mov	r0, r9
 800e8e8:	4651      	mov	r1, sl
 800e8ea:	f7f1 fcf7 	bl	80002dc <__adddf3>
 800e8ee:	3701      	adds	r7, #1
 800e8f0:	4681      	mov	r9, r0
 800e8f2:	468a      	mov	sl, r1
 800e8f4:	9b00      	ldr	r3, [sp, #0]
 800e8f6:	429f      	cmp	r7, r3
 800e8f8:	dc02      	bgt.n	800e900 <__kernel_rem_pio2+0x4c8>
 800e8fa:	9b06      	ldr	r3, [sp, #24]
 800e8fc:	429f      	cmp	r7, r3
 800e8fe:	ddea      	ble.n	800e8d6 <__kernel_rem_pio2+0x49e>
 800e900:	9a06      	ldr	r2, [sp, #24]
 800e902:	ab48      	add	r3, sp, #288	; 0x120
 800e904:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e908:	e9c6 9a00 	strd	r9, sl, [r6]
 800e90c:	3c01      	subs	r4, #1
 800e90e:	e6fa      	b.n	800e706 <__kernel_rem_pio2+0x2ce>
 800e910:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e912:	2b02      	cmp	r3, #2
 800e914:	dc0b      	bgt.n	800e92e <__kernel_rem_pio2+0x4f6>
 800e916:	2b00      	cmp	r3, #0
 800e918:	dc39      	bgt.n	800e98e <__kernel_rem_pio2+0x556>
 800e91a:	d05d      	beq.n	800e9d8 <__kernel_rem_pio2+0x5a0>
 800e91c:	9b02      	ldr	r3, [sp, #8]
 800e91e:	f003 0007 	and.w	r0, r3, #7
 800e922:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e926:	ecbd 8b02 	vpop	{d8}
 800e92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e92e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e930:	2b03      	cmp	r3, #3
 800e932:	d1f3      	bne.n	800e91c <__kernel_rem_pio2+0x4e4>
 800e934:	9b05      	ldr	r3, [sp, #20]
 800e936:	9500      	str	r5, [sp, #0]
 800e938:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e93c:	eb0d 0403 	add.w	r4, sp, r3
 800e940:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e944:	46a2      	mov	sl, r4
 800e946:	9b00      	ldr	r3, [sp, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f1aa 0a08 	sub.w	sl, sl, #8
 800e94e:	dc69      	bgt.n	800ea24 <__kernel_rem_pio2+0x5ec>
 800e950:	46aa      	mov	sl, r5
 800e952:	f1ba 0f01 	cmp.w	sl, #1
 800e956:	f1a4 0408 	sub.w	r4, r4, #8
 800e95a:	f300 8083 	bgt.w	800ea64 <__kernel_rem_pio2+0x62c>
 800e95e:	9c05      	ldr	r4, [sp, #20]
 800e960:	ab48      	add	r3, sp, #288	; 0x120
 800e962:	441c      	add	r4, r3
 800e964:	2000      	movs	r0, #0
 800e966:	2100      	movs	r1, #0
 800e968:	2d01      	cmp	r5, #1
 800e96a:	f300 809a 	bgt.w	800eaa2 <__kernel_rem_pio2+0x66a>
 800e96e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e972:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e976:	f1bb 0f00 	cmp.w	fp, #0
 800e97a:	f040 8098 	bne.w	800eaae <__kernel_rem_pio2+0x676>
 800e97e:	9b04      	ldr	r3, [sp, #16]
 800e980:	e9c3 7800 	strd	r7, r8, [r3]
 800e984:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e988:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e98c:	e7c6      	b.n	800e91c <__kernel_rem_pio2+0x4e4>
 800e98e:	9e05      	ldr	r6, [sp, #20]
 800e990:	ab48      	add	r3, sp, #288	; 0x120
 800e992:	441e      	add	r6, r3
 800e994:	462c      	mov	r4, r5
 800e996:	2000      	movs	r0, #0
 800e998:	2100      	movs	r1, #0
 800e99a:	2c00      	cmp	r4, #0
 800e99c:	da33      	bge.n	800ea06 <__kernel_rem_pio2+0x5ce>
 800e99e:	f1bb 0f00 	cmp.w	fp, #0
 800e9a2:	d036      	beq.n	800ea12 <__kernel_rem_pio2+0x5da>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9aa:	9c04      	ldr	r4, [sp, #16]
 800e9ac:	e9c4 2300 	strd	r2, r3, [r4]
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e9b8:	f7f1 fc8e 	bl	80002d8 <__aeabi_dsub>
 800e9bc:	ae4a      	add	r6, sp, #296	; 0x128
 800e9be:	2401      	movs	r4, #1
 800e9c0:	42a5      	cmp	r5, r4
 800e9c2:	da29      	bge.n	800ea18 <__kernel_rem_pio2+0x5e0>
 800e9c4:	f1bb 0f00 	cmp.w	fp, #0
 800e9c8:	d002      	beq.n	800e9d0 <__kernel_rem_pio2+0x598>
 800e9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	9b04      	ldr	r3, [sp, #16]
 800e9d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e9d6:	e7a1      	b.n	800e91c <__kernel_rem_pio2+0x4e4>
 800e9d8:	9c05      	ldr	r4, [sp, #20]
 800e9da:	ab48      	add	r3, sp, #288	; 0x120
 800e9dc:	441c      	add	r4, r3
 800e9de:	2000      	movs	r0, #0
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	2d00      	cmp	r5, #0
 800e9e4:	da09      	bge.n	800e9fa <__kernel_rem_pio2+0x5c2>
 800e9e6:	f1bb 0f00 	cmp.w	fp, #0
 800e9ea:	d002      	beq.n	800e9f2 <__kernel_rem_pio2+0x5ba>
 800e9ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	9b04      	ldr	r3, [sp, #16]
 800e9f4:	e9c3 0100 	strd	r0, r1, [r3]
 800e9f8:	e790      	b.n	800e91c <__kernel_rem_pio2+0x4e4>
 800e9fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e9fe:	f7f1 fc6d 	bl	80002dc <__adddf3>
 800ea02:	3d01      	subs	r5, #1
 800ea04:	e7ed      	b.n	800e9e2 <__kernel_rem_pio2+0x5aa>
 800ea06:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ea0a:	f7f1 fc67 	bl	80002dc <__adddf3>
 800ea0e:	3c01      	subs	r4, #1
 800ea10:	e7c3      	b.n	800e99a <__kernel_rem_pio2+0x562>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	e7c8      	b.n	800e9aa <__kernel_rem_pio2+0x572>
 800ea18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ea1c:	f7f1 fc5e 	bl	80002dc <__adddf3>
 800ea20:	3401      	adds	r4, #1
 800ea22:	e7cd      	b.n	800e9c0 <__kernel_rem_pio2+0x588>
 800ea24:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ea2c:	9b00      	ldr	r3, [sp, #0]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	4632      	mov	r2, r6
 800ea34:	463b      	mov	r3, r7
 800ea36:	4640      	mov	r0, r8
 800ea38:	4649      	mov	r1, r9
 800ea3a:	f7f1 fc4f 	bl	80002dc <__adddf3>
 800ea3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4640      	mov	r0, r8
 800ea48:	4649      	mov	r1, r9
 800ea4a:	f7f1 fc45 	bl	80002d8 <__aeabi_dsub>
 800ea4e:	4632      	mov	r2, r6
 800ea50:	463b      	mov	r3, r7
 800ea52:	f7f1 fc43 	bl	80002dc <__adddf3>
 800ea56:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ea5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea5e:	ed8a 7b00 	vstr	d7, [sl]
 800ea62:	e770      	b.n	800e946 <__kernel_rem_pio2+0x50e>
 800ea64:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ea68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ea6c:	4640      	mov	r0, r8
 800ea6e:	4632      	mov	r2, r6
 800ea70:	463b      	mov	r3, r7
 800ea72:	4649      	mov	r1, r9
 800ea74:	f7f1 fc32 	bl	80002dc <__adddf3>
 800ea78:	e9cd 0100 	strd	r0, r1, [sp]
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4640      	mov	r0, r8
 800ea82:	4649      	mov	r1, r9
 800ea84:	f7f1 fc28 	bl	80002d8 <__aeabi_dsub>
 800ea88:	4632      	mov	r2, r6
 800ea8a:	463b      	mov	r3, r7
 800ea8c:	f7f1 fc26 	bl	80002dc <__adddf3>
 800ea90:	ed9d 7b00 	vldr	d7, [sp]
 800ea94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea98:	ed84 7b00 	vstr	d7, [r4]
 800ea9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eaa0:	e757      	b.n	800e952 <__kernel_rem_pio2+0x51a>
 800eaa2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eaa6:	f7f1 fc19 	bl	80002dc <__adddf3>
 800eaaa:	3d01      	subs	r5, #1
 800eaac:	e75c      	b.n	800e968 <__kernel_rem_pio2+0x530>
 800eaae:	9b04      	ldr	r3, [sp, #16]
 800eab0:	9a04      	ldr	r2, [sp, #16]
 800eab2:	601f      	str	r7, [r3, #0]
 800eab4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800eab8:	605c      	str	r4, [r3, #4]
 800eaba:	609d      	str	r5, [r3, #8]
 800eabc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eac0:	60d3      	str	r3, [r2, #12]
 800eac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eac6:	6110      	str	r0, [r2, #16]
 800eac8:	6153      	str	r3, [r2, #20]
 800eaca:	e727      	b.n	800e91c <__kernel_rem_pio2+0x4e4>
 800eacc:	41700000 	.word	0x41700000
 800ead0:	3e700000 	.word	0x3e700000
 800ead4:	00000000 	.word	0x00000000

0800ead8 <scalbn>:
 800ead8:	b570      	push	{r4, r5, r6, lr}
 800eada:	ec55 4b10 	vmov	r4, r5, d0
 800eade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800eae2:	4606      	mov	r6, r0
 800eae4:	462b      	mov	r3, r5
 800eae6:	b999      	cbnz	r1, 800eb10 <scalbn+0x38>
 800eae8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eaec:	4323      	orrs	r3, r4
 800eaee:	d03f      	beq.n	800eb70 <scalbn+0x98>
 800eaf0:	4b35      	ldr	r3, [pc, #212]	; (800ebc8 <scalbn+0xf0>)
 800eaf2:	4629      	mov	r1, r5
 800eaf4:	ee10 0a10 	vmov	r0, s0
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f7f1 fda5 	bl	8000648 <__aeabi_dmul>
 800eafe:	4b33      	ldr	r3, [pc, #204]	; (800ebcc <scalbn+0xf4>)
 800eb00:	429e      	cmp	r6, r3
 800eb02:	4604      	mov	r4, r0
 800eb04:	460d      	mov	r5, r1
 800eb06:	da10      	bge.n	800eb2a <scalbn+0x52>
 800eb08:	a327      	add	r3, pc, #156	; (adr r3, 800eba8 <scalbn+0xd0>)
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	e01f      	b.n	800eb50 <scalbn+0x78>
 800eb10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800eb14:	4291      	cmp	r1, r2
 800eb16:	d10c      	bne.n	800eb32 <scalbn+0x5a>
 800eb18:	ee10 2a10 	vmov	r2, s0
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	4629      	mov	r1, r5
 800eb20:	f7f1 fbdc 	bl	80002dc <__adddf3>
 800eb24:	4604      	mov	r4, r0
 800eb26:	460d      	mov	r5, r1
 800eb28:	e022      	b.n	800eb70 <scalbn+0x98>
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800eb30:	3936      	subs	r1, #54	; 0x36
 800eb32:	f24c 3250 	movw	r2, #50000	; 0xc350
 800eb36:	4296      	cmp	r6, r2
 800eb38:	dd0d      	ble.n	800eb56 <scalbn+0x7e>
 800eb3a:	2d00      	cmp	r5, #0
 800eb3c:	a11c      	add	r1, pc, #112	; (adr r1, 800ebb0 <scalbn+0xd8>)
 800eb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb42:	da02      	bge.n	800eb4a <scalbn+0x72>
 800eb44:	a11c      	add	r1, pc, #112	; (adr r1, 800ebb8 <scalbn+0xe0>)
 800eb46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb4a:	a319      	add	r3, pc, #100	; (adr r3, 800ebb0 <scalbn+0xd8>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	f7f1 fd7a 	bl	8000648 <__aeabi_dmul>
 800eb54:	e7e6      	b.n	800eb24 <scalbn+0x4c>
 800eb56:	1872      	adds	r2, r6, r1
 800eb58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eb5c:	428a      	cmp	r2, r1
 800eb5e:	dcec      	bgt.n	800eb3a <scalbn+0x62>
 800eb60:	2a00      	cmp	r2, #0
 800eb62:	dd08      	ble.n	800eb76 <scalbn+0x9e>
 800eb64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eb70:	ec45 4b10 	vmov	d0, r4, r5
 800eb74:	bd70      	pop	{r4, r5, r6, pc}
 800eb76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eb7a:	da08      	bge.n	800eb8e <scalbn+0xb6>
 800eb7c:	2d00      	cmp	r5, #0
 800eb7e:	a10a      	add	r1, pc, #40	; (adr r1, 800eba8 <scalbn+0xd0>)
 800eb80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb84:	dac0      	bge.n	800eb08 <scalbn+0x30>
 800eb86:	a10e      	add	r1, pc, #56	; (adr r1, 800ebc0 <scalbn+0xe8>)
 800eb88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb8c:	e7bc      	b.n	800eb08 <scalbn+0x30>
 800eb8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb92:	3236      	adds	r2, #54	; 0x36
 800eb94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	4b0c      	ldr	r3, [pc, #48]	; (800ebd0 <scalbn+0xf8>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	e7d5      	b.n	800eb50 <scalbn+0x78>
 800eba4:	f3af 8000 	nop.w
 800eba8:	c2f8f359 	.word	0xc2f8f359
 800ebac:	01a56e1f 	.word	0x01a56e1f
 800ebb0:	8800759c 	.word	0x8800759c
 800ebb4:	7e37e43c 	.word	0x7e37e43c
 800ebb8:	8800759c 	.word	0x8800759c
 800ebbc:	fe37e43c 	.word	0xfe37e43c
 800ebc0:	c2f8f359 	.word	0xc2f8f359
 800ebc4:	81a56e1f 	.word	0x81a56e1f
 800ebc8:	43500000 	.word	0x43500000
 800ebcc:	ffff3cb0 	.word	0xffff3cb0
 800ebd0:	3c900000 	.word	0x3c900000
 800ebd4:	00000000 	.word	0x00000000

0800ebd8 <floor>:
 800ebd8:	ec51 0b10 	vmov	r0, r1, d0
 800ebdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ebe8:	2e13      	cmp	r6, #19
 800ebea:	ee10 5a10 	vmov	r5, s0
 800ebee:	ee10 8a10 	vmov	r8, s0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	dc31      	bgt.n	800ec5a <floor+0x82>
 800ebf6:	2e00      	cmp	r6, #0
 800ebf8:	da14      	bge.n	800ec24 <floor+0x4c>
 800ebfa:	a333      	add	r3, pc, #204	; (adr r3, 800ecc8 <floor+0xf0>)
 800ebfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec00:	f7f1 fb6c 	bl	80002dc <__adddf3>
 800ec04:	2200      	movs	r2, #0
 800ec06:	2300      	movs	r3, #0
 800ec08:	f7f1 ffae 	bl	8000b68 <__aeabi_dcmpgt>
 800ec0c:	b138      	cbz	r0, 800ec1e <floor+0x46>
 800ec0e:	2c00      	cmp	r4, #0
 800ec10:	da53      	bge.n	800ecba <floor+0xe2>
 800ec12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ec16:	4325      	orrs	r5, r4
 800ec18:	d052      	beq.n	800ecc0 <floor+0xe8>
 800ec1a:	4c2d      	ldr	r4, [pc, #180]	; (800ecd0 <floor+0xf8>)
 800ec1c:	2500      	movs	r5, #0
 800ec1e:	4621      	mov	r1, r4
 800ec20:	4628      	mov	r0, r5
 800ec22:	e024      	b.n	800ec6e <floor+0x96>
 800ec24:	4f2b      	ldr	r7, [pc, #172]	; (800ecd4 <floor+0xfc>)
 800ec26:	4137      	asrs	r7, r6
 800ec28:	ea01 0307 	and.w	r3, r1, r7
 800ec2c:	4303      	orrs	r3, r0
 800ec2e:	d01e      	beq.n	800ec6e <floor+0x96>
 800ec30:	a325      	add	r3, pc, #148	; (adr r3, 800ecc8 <floor+0xf0>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fb51 	bl	80002dc <__adddf3>
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f7f1 ff93 	bl	8000b68 <__aeabi_dcmpgt>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d0eb      	beq.n	800ec1e <floor+0x46>
 800ec46:	2c00      	cmp	r4, #0
 800ec48:	bfbe      	ittt	lt
 800ec4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ec4e:	4133      	asrlt	r3, r6
 800ec50:	18e4      	addlt	r4, r4, r3
 800ec52:	ea24 0407 	bic.w	r4, r4, r7
 800ec56:	2500      	movs	r5, #0
 800ec58:	e7e1      	b.n	800ec1e <floor+0x46>
 800ec5a:	2e33      	cmp	r6, #51	; 0x33
 800ec5c:	dd0b      	ble.n	800ec76 <floor+0x9e>
 800ec5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec62:	d104      	bne.n	800ec6e <floor+0x96>
 800ec64:	ee10 2a10 	vmov	r2, s0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	f7f1 fb37 	bl	80002dc <__adddf3>
 800ec6e:	ec41 0b10 	vmov	d0, r0, r1
 800ec72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec76:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ec7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ec7e:	40df      	lsrs	r7, r3
 800ec80:	4238      	tst	r0, r7
 800ec82:	d0f4      	beq.n	800ec6e <floor+0x96>
 800ec84:	a310      	add	r3, pc, #64	; (adr r3, 800ecc8 <floor+0xf0>)
 800ec86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8a:	f7f1 fb27 	bl	80002dc <__adddf3>
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2300      	movs	r3, #0
 800ec92:	f7f1 ff69 	bl	8000b68 <__aeabi_dcmpgt>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d0c1      	beq.n	800ec1e <floor+0x46>
 800ec9a:	2c00      	cmp	r4, #0
 800ec9c:	da0a      	bge.n	800ecb4 <floor+0xdc>
 800ec9e:	2e14      	cmp	r6, #20
 800eca0:	d101      	bne.n	800eca6 <floor+0xce>
 800eca2:	3401      	adds	r4, #1
 800eca4:	e006      	b.n	800ecb4 <floor+0xdc>
 800eca6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ecaa:	2301      	movs	r3, #1
 800ecac:	40b3      	lsls	r3, r6
 800ecae:	441d      	add	r5, r3
 800ecb0:	45a8      	cmp	r8, r5
 800ecb2:	d8f6      	bhi.n	800eca2 <floor+0xca>
 800ecb4:	ea25 0507 	bic.w	r5, r5, r7
 800ecb8:	e7b1      	b.n	800ec1e <floor+0x46>
 800ecba:	2500      	movs	r5, #0
 800ecbc:	462c      	mov	r4, r5
 800ecbe:	e7ae      	b.n	800ec1e <floor+0x46>
 800ecc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ecc4:	e7ab      	b.n	800ec1e <floor+0x46>
 800ecc6:	bf00      	nop
 800ecc8:	8800759c 	.word	0x8800759c
 800eccc:	7e37e43c 	.word	0x7e37e43c
 800ecd0:	bff00000 	.word	0xbff00000
 800ecd4:	000fffff 	.word	0x000fffff

0800ecd8 <_sbrk>:
 800ecd8:	4a04      	ldr	r2, [pc, #16]	; (800ecec <_sbrk+0x14>)
 800ecda:	6811      	ldr	r1, [r2, #0]
 800ecdc:	4603      	mov	r3, r0
 800ecde:	b909      	cbnz	r1, 800ece4 <_sbrk+0xc>
 800ece0:	4903      	ldr	r1, [pc, #12]	; (800ecf0 <_sbrk+0x18>)
 800ece2:	6011      	str	r1, [r2, #0]
 800ece4:	6810      	ldr	r0, [r2, #0]
 800ece6:	4403      	add	r3, r0
 800ece8:	6013      	str	r3, [r2, #0]
 800ecea:	4770      	bx	lr
 800ecec:	200018c8 	.word	0x200018c8
 800ecf0:	200018d0 	.word	0x200018d0

0800ecf4 <_init>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	bf00      	nop
 800ecf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecfa:	bc08      	pop	{r3}
 800ecfc:	469e      	mov	lr, r3
 800ecfe:	4770      	bx	lr

0800ed00 <_fini>:
 800ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed02:	bf00      	nop
 800ed04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed06:	bc08      	pop	{r3}
 800ed08:	469e      	mov	lr, r3
 800ed0a:	4770      	bx	lr
