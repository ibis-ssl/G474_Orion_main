
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800cc18  0800cc18  0001cc18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d144  0800d144  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d144  0800d144  0001d144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d14c  0800d14c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d14c  0800d14c  0001d14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d150  0800d150  0001d150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  200001e0  0800d330  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000152c  0800d330  0002152c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000389ea  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006143  00000000  00000000  00058c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00016801  00000000  00000000  0005ed7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c0  00000000  00000000  00075580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002dac  00000000  00000000  00076d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d352  00000000  00000000  00079aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00036a24  00000000  00000000  000a6e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e25c  00000000  00000000  000dd862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f2c  00000000  00000000  001fbac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  002019ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cbfc 	.word	0x0800cbfc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800cbfc 	.word	0x0800cbfc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fd4:	b500      	push	{lr}
 8000fd6:	ed2d 8b02 	vpush	{d8}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fe0:	4668      	mov	r0, sp
 8000fe2:	f004 fc8d 	bl	8005900 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8000fea:	a801      	add	r0, sp, #4
 8000fec:	f004 fc88 	bl	8005900 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8000ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x100, senddata_motor);
 8000ff4:	a902      	add	r1, sp, #8
 8000ff6:	f44f 7080 	mov.w	r0, #256	; 0x100
	senddata_motor[4]=senddata_motor_Duty[0];
 8000ffa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x100, senddata_motor);
 8000ffe:	f000 fae5 	bl	80015cc <can1_send>
}
 8001002:	b005      	add	sp, #20
 8001004:	ecbd 8b02 	vpop	{d8}
 8001008:	f85d fb04 	ldr.w	pc, [sp], #4

0800100c <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 800100c:	b500      	push	{lr}
 800100e:	ed2d 8b02 	vpush	{d8}
 8001012:	b085      	sub	sp, #20
 8001014:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 8001018:	4668      	mov	r0, sp
 800101a:	f004 fc71 	bl	8005900 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 800101e:	eeb0 0a48 	vmov.f32	s0, s16
 8001022:	a801      	add	r0, sp, #4
 8001024:	f004 fc6c 	bl	8005900 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001028:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x101, senddata_motor);
 800102c:	a902      	add	r1, sp, #8
 800102e:	f240 1001 	movw	r0, #257	; 0x101
	senddata_motor[4]=senddata_motor_Duty[0];
 8001032:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x101, senddata_motor);
 8001036:	f000 fac9 	bl	80015cc <can1_send>
}
 800103a:	b005      	add	sp, #20
 800103c:	ecbd 8b02 	vpop	{d8}
 8001040:	f85d fb04 	ldr.w	pc, [sp], #4

08001044 <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 8001044:	b500      	push	{lr}
 8001046:	ed2d 8b02 	vpush	{d8}
 800104a:	b085      	sub	sp, #20
 800104c:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 8001050:	4668      	mov	r0, sp
 8001052:	f004 fc55 	bl	8005900 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 8001056:	eeb0 0a48 	vmov.f32	s0, s16
 800105a:	a801      	add	r0, sp, #4
 800105c:	f004 fc50 	bl	8005900 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001060:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can2_send(0x102, senddata_motor);
 8001064:	a902      	add	r1, sp, #8
 8001066:	f44f 7081 	mov.w	r0, #258	; 0x102
	senddata_motor[4]=senddata_motor_Duty[0];
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can2_send(0x102, senddata_motor);
 800106e:	f000 fafd 	bl	800166c <can2_send>
}
 8001072:	b005      	add	sp, #20
 8001074:	ecbd 8b02 	vpop	{d8}
 8001078:	f85d fb04 	ldr.w	pc, [sp], #4

0800107c <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 800107c:	b500      	push	{lr}
 800107e:	ed2d 8b02 	vpush	{d8}
 8001082:	b085      	sub	sp, #20
 8001084:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 8001088:	4668      	mov	r0, sp
 800108a:	f004 fc39 	bl	8005900 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 800108e:	eeb0 0a48 	vmov.f32	s0, s16
 8001092:	a801      	add	r0, sp, #4
 8001094:	f004 fc34 	bl	8005900 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001098:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can2_send(0x103, senddata_motor);
 800109c:	a902      	add	r1, sp, #8
 800109e:	f240 1003 	movw	r0, #259	; 0x103
	senddata_motor[4]=senddata_motor_Duty[0];
 80010a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can2_send(0x103, senddata_motor);
 80010a6:	f000 fae1 	bl	800166c <can2_send>
}
 80010aa:	b005      	add	sp, #20
 80010ac:	ecbd 8b02 	vpop	{d8}
 80010b0:	f85d fb04 	ldr.w	pc, [sp], #4

080010b4 <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 80010b4:	b500      	push	{lr}
 80010b6:	ed2d 8b02 	vpush	{d8}
 80010ba:	b085      	sub	sp, #20
 80010bc:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 80010c0:	4668      	mov	r0, sp
 80010c2:	f004 fc1d 	bl	8005900 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 80010c6:	eeb0 0a48 	vmov.f32	s0, s16
 80010ca:	a801      	add	r0, sp, #4
 80010cc:	f004 fc18 	bl	8005900 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 80010d0:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x104, senddata_motor);
 80010d4:	a902      	add	r1, sp, #8
 80010d6:	f44f 7082 	mov.w	r0, #260	; 0x104
	senddata_motor[4]=senddata_motor_Duty[0];
 80010da:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x104, senddata_motor);
 80010de:	f000 fa75 	bl	80015cc <can1_send>
}
 80010e2:	b005      	add	sp, #20
 80010e4:	ecbd 8b02 	vpop	{d8}
 80010e8:	f85d fb04 	ldr.w	pc, [sp], #4

080010ec <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80010ec:	b500      	push	{lr}
 80010ee:	b085      	sub	sp, #20
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80010f0:	a801      	add	r0, sp, #4
 80010f2:	f004 fc05 	bl	8005900 <float_to_uchar4>

	senddata_kick[0]=0;
	senddata_kick[1]=senddata_voltage[0];
	senddata_kick[2]=senddata_voltage[1];
 80010f6:	f89d 0005 	ldrb.w	r0, [sp, #5]
	senddata_kick[1]=senddata_voltage[0];
 80010fa:	f89d c004 	ldrb.w	ip, [sp, #4]
	senddata_kick[3]=senddata_voltage[2];
 80010fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
	senddata_kick[4]=senddata_voltage[3];
 8001102:	f89d 3007 	ldrb.w	r3, [sp, #7]
	senddata_kick[2]=senddata_voltage[1];
 8001106:	f88d 000a 	strb.w	r0, [sp, #10]
	senddata_kick[0]=0;
 800110a:	2100      	movs	r1, #0
 800110c:	f88d 1008 	strb.w	r1, [sp, #8]
	can1_send(0x110, senddata_kick);
 8001110:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001114:	a902      	add	r1, sp, #8
	senddata_kick[1]=senddata_voltage[0];
 8001116:	f88d c009 	strb.w	ip, [sp, #9]
	senddata_kick[3]=senddata_voltage[2];
 800111a:	f88d 200b 	strb.w	r2, [sp, #11]
	senddata_kick[4]=senddata_voltage[3];
 800111e:	f88d 300c 	strb.w	r3, [sp, #12]
	can1_send(0x110, senddata_kick);
 8001122:	f000 fa53 	bl	80015cc <can1_send>
}
 8001126:	b005      	add	sp, #20
 8001128:	f85d fb04 	ldr.w	pc, [sp], #4

0800112c <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 800112c:	b500      	push	{lr}
 800112e:	b083      	sub	sp, #12
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
	senddata_kick[1]=param;
	can1_send(0x110, senddata_kick);
 8001134:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001138:	4669      	mov	r1, sp
	senddata_kick[0]=id;
 800113a:	f88d 2000 	strb.w	r2, [sp]
	senddata_kick[1]=param;
 800113e:	f88d 3001 	strb.w	r3, [sp, #1]
	can1_send(0x110, senddata_kick);
 8001142:	f000 fa43 	bl	80015cc <can1_send>
}
 8001146:	b003      	add	sp, #12
 8001148:	f85d fb04 	ldr.w	pc, [sp], #4

0800114c <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 800114c:	b500      	push	{lr}
 800114e:	b083      	sub	sp, #12
 8001150:	4603      	mov	r3, r0
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 8001152:	2200      	movs	r2, #0
	senddata_power[1]=power_on;
	can1_send(0x010, senddata_power);
 8001154:	4669      	mov	r1, sp
 8001156:	2010      	movs	r0, #16
	senddata_power[0]=0;
 8001158:	f88d 2000 	strb.w	r2, [sp]
	senddata_power[1]=power_on;
 800115c:	f88d 3001 	strb.w	r3, [sp, #1]
	can1_send(0x010, senddata_power);
 8001160:	f000 fa34 	bl	80015cc <can1_send>
}
 8001164:	b003      	add	sp, #12
 8001166:	f85d fb04 	ldr.w	pc, [sp], #4
 800116a:	bf00      	nop

0800116c <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 800116c:	b510      	push	{r4, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	4604      	mov	r4, r0
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 8001172:	4668      	mov	r0, sp
 8001174:	f004 fbc4 	bl	8005900 <float_to_uchar4>
	senddata_power_param[0]=id;
 8001178:	f89d 0000 	ldrb.w	r0, [sp]
 800117c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001180:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001184:	2300      	movs	r3, #0
 8001186:	f364 0307 	bfi	r3, r4, #0, #8
 800118a:	f360 230f 	bfi	r3, r0, #8, #8
 800118e:	f362 4317 	bfi	r3, r2, #16, #8
 8001192:	f361 631f 	bfi	r3, r1, #24, #8
	senddata_power_param[1]=senddata_power_param_temp[0];
	senddata_power_param[2]=senddata_power_param_temp[1];
	senddata_power_param[3]=senddata_power_param_temp[2];
	senddata_power_param[4]=senddata_power_param_temp[3];
 8001196:	f89d 2003 	ldrb.w	r2, [sp, #3]
	senddata_power_param[0]=id;
 800119a:	9302      	str	r3, [sp, #8]

	can1_send(0x010, senddata_power_param);
 800119c:	a902      	add	r1, sp, #8
 800119e:	2010      	movs	r0, #16
	senddata_power_param[4]=senddata_power_param_temp[3];
 80011a0:	f88d 200c 	strb.w	r2, [sp, #12]
	can1_send(0x010, senddata_power_param);
 80011a4:	f000 fa12 	bl	80015cc <can1_send>
}
 80011a8:	b004      	add	sp, #16
 80011aa:	bd10      	pop	{r4, pc}

080011ac <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 80011ac:	b538      	push	{r3, r4, r5, lr}

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011ae:	4d07      	ldr	r5, [pc, #28]	; (80011cc <actuator_buzzer+0x20>)
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	22fa      	movs	r2, #250	; 0xfa
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 80011b6:	460c      	mov	r4, r1
	HAL_Delay(ontime);
 80011b8:	f004 fc12 	bl	80059e0 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80011c2:	4620      	mov	r0, r4

}
 80011c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(offtime);
 80011c8:	f004 bc0a 	b.w	80059e0 <HAL_Delay>
 80011cc:	20001010 	.word	0x20001010

080011d0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011d0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011d2:	2400      	movs	r4, #0
{
 80011d4:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	2220      	movs	r2, #32
 80011d8:	4621      	mov	r1, r4
 80011da:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80011dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80011e0:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	f009 fe43 	bl	800ae6c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e6:	4821      	ldr	r0, [pc, #132]	; (800126c <MX_ADC1_Init+0x9c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80011f0:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f4:	2204      	movs	r2, #4
 80011f6:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 1;
 80011fc:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fe:	8382      	strh	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001204:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001208:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 800120c:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001212:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001216:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001218:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121c:	f004 fbf2 	bl	8005a04 <HAL_ADC_Init>
 8001220:	b9c8      	cbnz	r0, 8001256 <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001222:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <MX_ADC1_Init+0x9c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001226:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001228:	a901      	add	r1, sp, #4
 800122a:	f005 f8b3 	bl	8006394 <HAL_ADCEx_MultiModeConfigChannel>
 800122e:	b9c8      	cbnz	r0, 8001264 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <MX_ADC1_Init+0xa0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <MX_ADC1_Init+0x9c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001234:	2306      	movs	r3, #6
 8001236:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800123a:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800123c:	237f      	movs	r3, #127	; 0x7f
 800123e:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001242:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001244:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001248:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124c:	f004 fd50 	bl	8005cf0 <HAL_ADC_ConfigChannel>
 8001250:	b920      	cbnz	r0, 800125c <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001252:	b00c      	add	sp, #48	; 0x30
 8001254:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001256:	f003 faab 	bl	80047b0 <Error_Handler>
 800125a:	e7e2      	b.n	8001222 <MX_ADC1_Init+0x52>
    Error_Handler();
 800125c:	f003 faa8 	bl	80047b0 <Error_Handler>
}
 8001260:	b00c      	add	sp, #48	; 0x30
 8001262:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001264:	f003 faa4 	bl	80047b0 <Error_Handler>
 8001268:	e7e2      	b.n	8001230 <MX_ADC1_Init+0x60>
 800126a:	bf00      	nop
 800126c:	20000200 	.word	0x20000200
 8001270:	3ef08000 	.word	0x3ef08000

08001274 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001274:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001276:	2400      	movs	r4, #0
{
 8001278:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	2220      	movs	r2, #32
 800127c:	4621      	mov	r1, r4
 800127e:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001280:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001284:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	f009 fdf1 	bl	800ae6c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800128a:	4820      	ldr	r0, [pc, #128]	; (800130c <MX_ADC3_Init+0x98>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800128c:	4920      	ldr	r1, [pc, #128]	; (8001310 <MX_ADC3_Init+0x9c>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800128e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001292:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001296:	e9c0 1200 	strd	r1, r2, [r0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129a:	2204      	movs	r2, #4
 800129c:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800129e:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc3.Init.NbrOfConversion = 1;
 80012a2:	2301      	movs	r3, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012a4:	8382      	strh	r2, [r0, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ae:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 80012b2:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80012b4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b8:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80012ba:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012be:	f004 fba1 	bl	8005a04 <HAL_ADC_Init>
 80012c2:	b9c8      	cbnz	r0, 80012f8 <MX_ADC3_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012c6:	4811      	ldr	r0, [pc, #68]	; (800130c <MX_ADC3_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012ca:	a901      	add	r1, sp, #4
 80012cc:	f005 f862 	bl	8006394 <HAL_ADCEx_MultiModeConfigChannel>
 80012d0:	b9c8      	cbnz	r0, 8001306 <MX_ADC3_Init+0x92>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <MX_ADC3_Init+0xa0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_ADC3_Init+0x98>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d6:	2306      	movs	r3, #6
 80012d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012dc:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012de:	237f      	movs	r3, #127	; 0x7f
 80012e0:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e4:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80012e6:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012e8:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80012ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012ee:	f004 fcff 	bl	8005cf0 <HAL_ADC_ConfigChannel>
 80012f2:	b920      	cbnz	r0, 80012fe <MX_ADC3_Init+0x8a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012f4:	b00c      	add	sp, #48	; 0x30
 80012f6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012f8:	f003 fa5a 	bl	80047b0 <Error_Handler>
 80012fc:	e7e2      	b.n	80012c4 <MX_ADC3_Init+0x50>
    Error_Handler();
 80012fe:	f003 fa57 	bl	80047b0 <Error_Handler>
}
 8001302:	b00c      	add	sp, #48	; 0x30
 8001304:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001306:	f003 fa53 	bl	80047b0 <Error_Handler>
 800130a:	e7e2      	b.n	80012d2 <MX_ADC3_Init+0x5e>
 800130c:	2000026c 	.word	0x2000026c
 8001310:	50000400 	.word	0x50000400
 8001314:	04300002 	.word	0x04300002

08001318 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001318:	b510      	push	{r4, lr}
 800131a:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	4668      	mov	r0, sp
 8001322:	f009 fda3 	bl	800ae6c <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001326:	4c1c      	ldr	r4, [pc, #112]	; (8001398 <MX_ADC5_Init+0x80>)
  hadc5.Instance = ADC5;
 8001328:	481c      	ldr	r0, [pc, #112]	; (800139c <MX_ADC5_Init+0x84>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800132e:	e9c0 4100 	strd	r4, r1, [r0]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001332:	2104      	movs	r1, #4
 8001334:	6181      	str	r1, [r0, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001336:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800133a:	2300      	movs	r3, #0
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
 800133c:	2201      	movs	r2, #1
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800133e:	8381      	strh	r1, [r0, #28]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001340:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001344:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001348:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.NbrOfConversion = 1;
 800134c:	6202      	str	r2, [r0, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800134e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001352:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001356:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001358:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800135c:	f004 fb52 	bl	8005a04 <HAL_ADC_Init>
 8001360:	b990      	cbnz	r0, 8001388 <MX_ADC5_Init+0x70>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <MX_ADC5_Init+0x88>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_ADC5_Init+0x84>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001366:	2306      	movs	r3, #6
 8001368:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800136c:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800136e:	237f      	movs	r3, #127	; 0x7f
 8001370:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001374:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001376:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001378:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 800137a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800137e:	f004 fcb7 	bl	8005cf0 <HAL_ADC_ConfigChannel>
 8001382:	b920      	cbnz	r0, 800138e <MX_ADC5_Init+0x76>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001384:	b008      	add	sp, #32
 8001386:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001388:	f003 fa12 	bl	80047b0 <Error_Handler>
 800138c:	e7e9      	b.n	8001362 <MX_ADC5_Init+0x4a>
    Error_Handler();
 800138e:	f003 fa0f 	bl	80047b0 <Error_Handler>
}
 8001392:	b008      	add	sp, #32
 8001394:	bd10      	pop	{r4, pc}
 8001396:	bf00      	nop
 8001398:	50000600 	.word	0x50000600
 800139c:	200002d8 	.word	0x200002d8
 80013a0:	08600004 	.word	0x08600004

080013a4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	4604      	mov	r4, r0
 80013a8:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	2254      	movs	r2, #84	; 0x54
 80013ae:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80013b4:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80013b8:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ba:	f009 fd57 	bl	800ae6c <memset>
  if(adcHandle->Instance==ADC1)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c4:	d007      	beq.n	80013d6 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80013c6:	4a5f      	ldr	r2, [pc, #380]	; (8001544 <HAL_ADC_MspInit+0x1a0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d04a      	beq.n	8001462 <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 80013cc:	4a5e      	ldr	r2, [pc, #376]	; (8001548 <HAL_ADC_MspInit+0x1a4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d07a      	beq.n	80014c8 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80013d2:	b020      	add	sp, #128	; 0x80
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013e0:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013e2:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e4:	f006 fbfe 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	f040 80a2 	bne.w	8001532 <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013ee:	4b57      	ldr	r3, [pc, #348]	; (800154c <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013f0:	4857      	ldr	r0, [pc, #348]	; (8001550 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 80013f4:	4d57      	ldr	r5, [pc, #348]	; (8001554 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80013fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001408:	f042 0202 	orr.w	r2, r2, #2
 800140c:	64da      	str	r2, [r3, #76]	; 0x4c
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001416:	2201      	movs	r2, #1
 8001418:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 800141a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800141e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001426:	f005 fe97 	bl	8007158 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 800142a:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800142c:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800142e:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001440:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001442:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001446:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800144a:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 800144c:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800144e:	f005 f8c9 	bl	80065e4 <HAL_DMA_Init>
 8001452:	b918      	cbnz	r0, 800145c <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001454:	6565      	str	r5, [r4, #84]	; 0x54
 8001456:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001458:	b020      	add	sp, #128	; 0x80
 800145a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800145c:	f003 f9a8 	bl	80047b0 <Error_Handler>
 8001460:	e7f8      	b.n	8001454 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001462:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001466:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800146c:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800146e:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	f006 fbb8 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	2800      	cmp	r0, #0
 8001476:	d15f      	bne.n	8001538 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001478:	4a38      	ldr	r2, [pc, #224]	; (800155c <HAL_ADC_MspInit+0x1b8>)
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800147e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001480:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001482:	d109      	bne.n	8001498 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <HAL_ADC_MspInit+0x1a8>)
 8001486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800148c:	64da      	str	r2, [r3, #76]	; 0x4c
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800149a:	482d      	ldr	r0, [pc, #180]	; (8001550 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800149e:	4d30      	ldr	r5, [pc, #192]	; (8001560 <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	f042 0202 	orr.w	r2, r2, #2
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80014ae:	2202      	movs	r2, #2
 80014b0:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014b2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80014b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014be:	f005 fe4b 	bl	8007158 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80014c2:	4a28      	ldr	r2, [pc, #160]	; (8001564 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80014c4:	2325      	movs	r3, #37	; 0x25
 80014c6:	e7b2      	b.n	800142e <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014d2:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014d4:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	f006 fb85 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d12f      	bne.n	800153e <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014de:	4a1f      	ldr	r2, [pc, #124]	; (800155c <HAL_ADC_MspInit+0x1b8>)
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014e4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014e8:	d109      	bne.n	80014fe <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_ADC_MspInit+0x1a8>)
 80014ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	9304      	str	r3, [sp, #16]
 80014fc:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 8001500:	4d19      	ldr	r5, [pc, #100]	; (8001568 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001504:	f042 0201 	orr.w	r2, r2, #1
 8001508:	64da      	str	r2, [r3, #76]	; 0x4c
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001516:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001520:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f005 fe16 	bl	8007158 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800152e:	2327      	movs	r3, #39	; 0x27
 8001530:	e77d      	b.n	800142e <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 8001532:	f003 f93d 	bl	80047b0 <Error_Handler>
 8001536:	e75a      	b.n	80013ee <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8001538:	f003 f93a 	bl	80047b0 <Error_Handler>
 800153c:	e79c      	b.n	8001478 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 800153e:	f003 f937 	bl	80047b0 <Error_Handler>
 8001542:	e7cc      	b.n	80014de <HAL_ADC_MspInit+0x13a>
 8001544:	50000400 	.word	0x50000400
 8001548:	50000600 	.word	0x50000600
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400
 8001554:	20000344 	.word	0x20000344
 8001558:	40020058 	.word	0x40020058
 800155c:	200001fc 	.word	0x200001fc
 8001560:	200003a4 	.word	0x200003a4
 8001564:	40020030 	.word	0x40020030
 8001568:	20000404 	.word	0x20000404
 800156c:	40020044 	.word	0x40020044

08001570 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001570:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 8001572:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80015c0 <can1_init_ibis+0x50>
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001576:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001578:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800157a:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800157c:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800157e:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001580:	4811      	ldr	r0, [pc, #68]	; (80015c8 <can1_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001582:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001584:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 8001586:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 800158a:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800158e:	f005 fb5d 	bl	8006c4c <HAL_FDCAN_ConfigFilter>
 8001592:	b930      	cbnz	r0, 80015a2 <can1_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <can1_init_ibis+0x58>)
 8001596:	f005 fb8b 	bl	8006cb0 <HAL_FDCAN_Start>
 800159a:	b948      	cbnz	r0, 80015b0 <can1_init_ibis+0x40>
}
 800159c:	b007      	add	sp, #28
 800159e:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 80015a2:	f003 f905 	bl	80047b0 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80015a6:	4808      	ldr	r0, [pc, #32]	; (80015c8 <can1_init_ibis+0x58>)
 80015a8:	f005 fb82 	bl	8006cb0 <HAL_FDCAN_Start>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d0f5      	beq.n	800159c <can1_init_ibis+0x2c>
 80015b0:	f003 f8fe 	bl	80047b0 <Error_Handler>
}
 80015b4:	b007      	add	sp, #28
 80015b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
	...
 80015c8:	20000c90 	.word	0x20000c90

080015cc <can1_send>:

void can1_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <can1_send+0x38>)
void can1_send(int id, uint8_t senddata[]){
 80015ce:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80015d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80015d4:	2500      	movs	r5, #0
 80015d6:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80015da:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80015de:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80015e2:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 80015e6:	4c08      	ldr	r4, [pc, #32]	; (8001608 <can1_send+0x3c>)
	TxHeader.MessageMarker = 0;
 80015e8:	621d      	str	r5, [r3, #32]
void can1_send(int id, uint8_t senddata[]){
 80015ea:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 80015ec:	4620      	mov	r0, r4
 80015ee:	f005 fc61 	bl	8006eb4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80015f2:	2803      	cmp	r0, #3
 80015f4:	d1fa      	bne.n	80015ec <can1_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 80015f6:	4632      	mov	r2, r6
 80015f8:	4902      	ldr	r1, [pc, #8]	; (8001604 <can1_send+0x38>)
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <can1_send+0x3c>)

}
 80015fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001600:	f005 bb6e 	b.w	8006ce0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001604:	20000e5c 	.word	0x20000e5c
 8001608:	20000c90 	.word	0x20000c90
 800160c:	00000000 	.word	0x00000000

08001610 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001610:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 8001612:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001660 <can2_init_ibis+0x50>
void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001616:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001618:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800161a:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800161c:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800161e:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <can2_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001622:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001624:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 8001626:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 800162a:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800162e:	f005 fb0d 	bl	8006c4c <HAL_FDCAN_ConfigFilter>
 8001632:	b930      	cbnz	r0, 8001642 <can2_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <can2_init_ibis+0x58>)
 8001636:	f005 fb3b 	bl	8006cb0 <HAL_FDCAN_Start>
 800163a:	b948      	cbnz	r0, 8001650 <can2_init_ibis+0x40>
}
 800163c:	b007      	add	sp, #28
 800163e:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 8001642:	f003 f8b5 	bl	80047b0 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <can2_init_ibis+0x58>)
 8001648:	f005 fb32 	bl	8006cb0 <HAL_FDCAN_Start>
 800164c:	2800      	cmp	r0, #0
 800164e:	d0f5      	beq.n	800163c <can2_init_ibis+0x2c>
 8001650:	f003 f8ae 	bl	80047b0 <Error_Handler>
}
 8001654:	b007      	add	sp, #28
 8001656:	f85d fb04 	ldr.w	pc, [sp], #4
 800165a:	bf00      	nop
 800165c:	f3af 8000 	nop.w
	...
 8001668:	20000cf4 	.word	0x20000cf4

0800166c <can2_send>:

void can2_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <can2_send+0x38>)
void can2_send(int id, uint8_t senddata[]){
 800166e:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001670:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001674:	2500      	movs	r5, #0
 8001676:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800167a:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800167e:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001682:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 8001686:	4c08      	ldr	r4, [pc, #32]	; (80016a8 <can2_send+0x3c>)
	TxHeader.MessageMarker = 0;
 8001688:	621d      	str	r5, [r3, #32]
void can2_send(int id, uint8_t senddata[]){
 800168a:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 800168c:	4620      	mov	r0, r4
 800168e:	f005 fc11 	bl	8006eb4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001692:	2803      	cmp	r0, #3
 8001694:	d1fa      	bne.n	800168c <can2_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001696:	4632      	mov	r2, r6
 8001698:	4902      	ldr	r1, [pc, #8]	; (80016a4 <can2_send+0x38>)
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <can2_send+0x3c>)

}
 800169c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80016a0:	f005 bb1e 	b.w	8006ce0 <HAL_FDCAN_AddMessageToTxFifoQ>
 80016a4:	20000e5c 	.word	0x20000e5c
 80016a8:	20000cf4 	.word	0x20000cf4

080016ac <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <MX_DMA_Init+0xa0>)
{
 80016ae:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80016b2:	f040 0004 	orr.w	r0, r0, #4
 80016b6:	6498      	str	r0, [r3, #72]	; 0x48
 80016b8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 80016ba:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016bc:	f004 0404 	and.w	r4, r4, #4
 80016c0:	9400      	str	r4, [sp, #0]
 80016c2:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80016c6:	f044 0401 	orr.w	r4, r4, #1
 80016ca:	649c      	str	r4, [r3, #72]	; 0x48
 80016cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ce:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016d8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016dc:	f004 ff1c 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e0:	200b      	movs	r0, #11
 80016e2:	f004 ff57 	bl	8006594 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	200c      	movs	r0, #12
 80016ec:	f004 ff14 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016f0:	200c      	movs	r0, #12
 80016f2:	f004 ff4f 	bl	8006594 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2109      	movs	r1, #9
 80016fa:	200d      	movs	r0, #13
 80016fc:	f004 ff0c 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001700:	200d      	movs	r0, #13
 8001702:	f004 ff47 	bl	8006594 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	210a      	movs	r1, #10
 800170a:	200e      	movs	r0, #14
 800170c:	f004 ff04 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001710:	200e      	movs	r0, #14
 8001712:	f004 ff3f 	bl	8006594 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	210b      	movs	r1, #11
 800171a:	200f      	movs	r0, #15
 800171c:	f004 fefc 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001720:	200f      	movs	r0, #15
 8001722:	f004 ff37 	bl	8006594 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210e      	movs	r1, #14
 800172a:	2010      	movs	r0, #16
 800172c:	f004 fef4 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001730:	2010      	movs	r0, #16
 8001732:	f004 ff2f 	bl	8006594 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 8001736:	2011      	movs	r0, #17
 8001738:	2200      	movs	r2, #0
 800173a:	210f      	movs	r1, #15
 800173c:	f004 feec 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001740:	2011      	movs	r0, #17

}
 8001742:	b002      	add	sp, #8
 8001744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001748:	f004 bf24 	b.w	8006594 <HAL_NVIC_EnableIRQ>
 800174c:	40021000 	.word	0x40021000

08001750 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001750:	b510      	push	{r4, lr}
    dmi.huart = printf_huart;
 8001752:	4c06      	ldr	r4, [pc, #24]	; (800176c <dma_printf_init+0x1c>)
void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001754:	4601      	mov	r1, r0
    dma_ring_init(&dmi.tx_ring, printf_huart);
 8001756:	4620      	mov	r0, r4
    dmi.huart = printf_huart;
 8001758:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 800175c:	f000 f830 	bl	80017c0 <dma_ring_init>
    dmi.sending = false;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 8001766:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
}
 800176a:	bd10      	pop	{r4, pc}
 800176c:	20000464 	.word	0x20000464

08001770 <dma_printf_send_it>:
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }
}

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001770:	b570      	push	{r4, r5, r6, lr}
    if(dmi.huart != printf_huart) return;
 8001772:	4c12      	ldr	r4, [pc, #72]	; (80017bc <dma_printf_send_it+0x4c>)
 8001774:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8001778:	4283      	cmp	r3, r0
 800177a:	d000      	beq.n	800177e <dma_printf_send_it+0xe>
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }else{
        dmi.sending = false;
    }
}
 800177c:	bd70      	pop	{r4, r5, r6, pc}
    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 800177e:	f8d4 1414 	ldr.w	r1, [r4, #1044]	; 0x414
 8001782:	4620      	mov	r0, r4
 8001784:	f000 f834 	bl	80017f0 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001788:	4620      	mov	r0, r4
 800178a:	f000 f823 	bl	80017d4 <dma_ring_available_linear>
 800178e:	b285      	uxth	r5, r0
    if (len > 0 ) {
 8001790:	b915      	cbnz	r5, 8001798 <dma_printf_send_it+0x28>
        dmi.sending = false;
 8001792:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
}
 8001796:	bd70      	pop	{r4, r5, r6, pc}
        dmi.sending = true;
 8001798:	2301      	movs	r3, #1
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 800179a:	4620      	mov	r0, r4
 800179c:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        dmi.previous_send_len = len;
 80017a0:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
        dmi.sending = true;
 80017a4:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80017a8:	f000 f81e 	bl	80017e8 <dma_ring_get_r_ptr>
 80017ac:	462a      	mov	r2, r5
 80017ae:	1821      	adds	r1, r4, r0
 80017b0:	4630      	mov	r0, r6
}
 80017b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80017b6:	f007 bc87 	b.w	80090c8 <HAL_UART_Transmit_DMA>
 80017ba:	bf00      	nop
 80017bc:	20000464 	.word	0x20000464

080017c0 <dma_ring_init>:
static void update_w_ptr(struct dma_ring_buf *ring){
	ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx))&0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart){
  ring->buf_size = RING_BUF_SIZE;
 80017c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 80017ca:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  ring->w_ptr = 0;
  ring->r_ptr = 0;
  ring->overwrite_cnt = 0;
  ring->huart = huart;
 80017ce:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
}
 80017d2:	4770      	bx	lr

080017d4 <dma_ring_available_linear>:
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
  if(ring->w_ptr >= ring->r_ptr){
 80017d4:	f8b0 2402 	ldrh.w	r2, [r0, #1026]	; 0x402
 80017d8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 80017dc:	429a      	cmp	r2, r3
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size - ring->r_ptr;
 80017de:	bf38      	it	cc
 80017e0:	f8b0 2400 	ldrhcc.w	r2, [r0, #1024]	; 0x400
 80017e4:	1ad0      	subs	r0, r2, r3
  }
}
 80017e6:	4770      	bx	lr

080017e8 <dma_ring_get_r_ptr>:
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
  return ring->r_ptr;
}
 80017e8:	f8b0 0404 	ldrh.w	r0, [r0, #1028]	; 0x404
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
  while(len > 0){
 80017f0:	2900      	cmp	r1, #0
 80017f2:	dd0c      	ble.n	800180e <dma_ring_forward_r_ptr+0x1e>
 80017f4:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
    if(ring->r_ptr+1 >= ring->buf_size){
 80017f8:	f8b0 2400 	ldrh.w	r2, [r0, #1024]	; 0x400
 80017fc:	3301      	adds	r3, #1
 80017fe:	429a      	cmp	r2, r3
      ring->r_ptr = 0;
    }else{
      ring->r_ptr += 1;
 8001800:	bfcc      	ite	gt
 8001802:	b29b      	uxthgt	r3, r3
      ring->r_ptr = 0;
 8001804:	2300      	movle	r3, #0
  while(len > 0){
 8001806:	3901      	subs	r1, #1
 8001808:	d1f8      	bne.n	80017fc <dma_ring_forward_r_ptr+0xc>
 800180a:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    }
    len--;
  }
}
 800180e:	4770      	bx	lr

08001810 <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001810:	b510      	push	{r4, lr}
    dsi.huart = scanf_huart;
 8001812:	4c08      	ldr	r4, [pc, #32]	; (8001834 <dma_scanf_init+0x24>)
void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001814:	4601      	mov	r1, r0
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 8001816:	4620      	mov	r0, r4
    dsi.huart = scanf_huart;
 8001818:	f8c4 140c 	str.w	r1, [r4, #1036]	; 0x40c
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 800181c:	f7ff ffd0 	bl	80017c0 <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8001820:	f8b4 2400 	ldrh.w	r2, [r4, #1024]	; 0x400
 8001824:	f8d4 040c 	ldr.w	r0, [r4, #1036]	; 0x40c
 8001828:	4621      	mov	r1, r4
}
 800182a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 800182e:	f008 bb39 	b.w	8009ea4 <HAL_UART_Receive_DMA>
 8001832:	bf00      	nop
 8001834:	2000087c 	.word	0x2000087c

08001838 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001838:	4810      	ldr	r0, [pc, #64]	; (800187c <MX_FDCAN1_Init+0x44>)
{
 800183a:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 800183c:	4c10      	ldr	r4, [pc, #64]	; (8001880 <MX_FDCAN1_Init+0x48>)
 800183e:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001840:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 8001842:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001844:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001846:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001848:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800184c:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 800184e:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001850:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001852:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001854:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001856:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 800185a:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 800185e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001862:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001864:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001866:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001868:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800186a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800186c:	f005 f870 	bl	8006950 <HAL_FDCAN_Init>
 8001870:	b900      	cbnz	r0, 8001874 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001872:	bd10      	pop	{r4, pc}
 8001874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001878:	f002 bf9a 	b.w	80047b0 <Error_Handler>
 800187c:	20000c90 	.word	0x20000c90
 8001880:	40006400 	.word	0x40006400

08001884 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001884:	4810      	ldr	r0, [pc, #64]	; (80018c8 <MX_FDCAN2_Init+0x44>)
{
 8001886:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001888:	4c10      	ldr	r4, [pc, #64]	; (80018cc <MX_FDCAN2_Init+0x48>)
 800188a:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800188c:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 800188e:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001890:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001892:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001894:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001898:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 800189a:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800189c:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 800189e:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80018a0:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80018a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 80018a6:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 80018aa:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80018ae:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 80018b0:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80018b2:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 80018b4:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018b6:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018b8:	f005 f84a 	bl	8006950 <HAL_FDCAN_Init>
 80018bc:	b900      	cbnz	r0, 80018c0 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80018be:	bd10      	pop	{r4, pc}
 80018c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80018c4:	f002 bf74 	b.w	80047b0 <Error_Handler>
 80018c8:	20000cf4 	.word	0x20000cf4
 80018cc:	40006800 	.word	0x40006800

080018d0 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80018d0:	b510      	push	{r4, lr}
 80018d2:	4604      	mov	r4, r0
 80018d4:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d8:	2254      	movs	r2, #84	; 0x54
 80018da:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80018e0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80018e4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e6:	f009 fac1 	bl	800ae6c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_FDCAN_MspInit+0x168>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d004      	beq.n	80018fc <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 80018f2:	4a52      	ldr	r2, [pc, #328]	; (8001a3c <HAL_FDCAN_MspInit+0x16c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d047      	beq.n	8001988 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80018f8:	b01e      	add	sp, #120	; 0x78
 80018fa:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80018fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001906:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001908:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190a:	f006 f96b 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	2800      	cmp	r0, #0
 8001910:	d17f      	bne.n	8001a12 <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001912:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_FDCAN_MspInit+0x170>)
 8001914:	6813      	ldr	r3, [r2, #0]
 8001916:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001918:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800191a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800191c:	d109      	bne.n	8001932 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800191e:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <HAL_FDCAN_MspInit+0x174>)
 8001920:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001922:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001926:	659a      	str	r2, [r3, #88]	; 0x58
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_FDCAN_MspInit+0x174>)
 8001934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001936:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8001a20 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001942:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001946:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8001a28 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001952:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001958:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800195c:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f005 fbfa 	bl	8007158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2103      	movs	r1, #3
 8001968:	2015      	movs	r0, #21
 800196a:	f004 fdd5 	bl	8006518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800196e:	2015      	movs	r0, #21
 8001970:	f004 fe10 	bl	8006594 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2104      	movs	r1, #4
 8001978:	2016      	movs	r0, #22
 800197a:	f004 fdcd 	bl	8006518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800197e:	2016      	movs	r0, #22
 8001980:	f004 fe08 	bl	8006594 <HAL_NVIC_EnableIRQ>
}
 8001984:	b01e      	add	sp, #120	; 0x78
 8001986:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800198c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001992:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001994:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001996:	f006 f925 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	2800      	cmp	r0, #0
 800199c:	d13c      	bne.n	8001a18 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800199e:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_FDCAN_MspInit+0x170>)
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80019a4:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80019a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80019a8:	d109      	bne.n	80019be <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_FDCAN_MspInit+0x174>)
 80019ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80019b2:	659a      	str	r2, [r3, #88]	; 0x58
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	4821      	ldr	r0, [pc, #132]	; (8001a48 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019c4:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001a30 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	f042 0202 	orr.w	r2, r2, #2
 80019cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80019ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001a28 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80019e0:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019e2:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80019e6:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f005 fbb5 	bl	8007158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2106      	movs	r1, #6
 80019f2:	2056      	movs	r0, #86	; 0x56
 80019f4:	f004 fd90 	bl	8006518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80019f8:	2056      	movs	r0, #86	; 0x56
 80019fa:	f004 fdcb 	bl	8006594 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2107      	movs	r1, #7
 8001a02:	2057      	movs	r0, #87	; 0x57
 8001a04:	f004 fd88 	bl	8006518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001a08:	2057      	movs	r0, #87	; 0x57
 8001a0a:	f004 fdc3 	bl	8006594 <HAL_NVIC_EnableIRQ>
}
 8001a0e:	b01e      	add	sp, #120	; 0x78
 8001a10:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001a12:	f002 fecd 	bl	80047b0 <Error_Handler>
 8001a16:	e77c      	b.n	8001912 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 8001a18:	f002 feca 	bl	80047b0 <Error_Handler>
 8001a1c:	e7bf      	b.n	800199e <HAL_FDCAN_MspInit+0xce>
 8001a1e:	bf00      	nop
 8001a20:	00001800 	.word	0x00001800
 8001a24:	00000002 	.word	0x00000002
	...
 8001a30:	00003000 	.word	0x00003000
 8001a34:	00000002 	.word	0x00000002
 8001a38:	40006400 	.word	0x40006400
 8001a3c:	40006800 	.word	0x40006800
 8001a40:	20000c8c 	.word	0x20000c8c
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000400 	.word	0x48000400

08001a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	2400      	movs	r4, #0
{
 8001a50:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001a56:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <MX_GPIO_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a60:	4f4e      	ldr	r7, [pc, #312]	; (8001b9c <MX_GPIO_Init+0x150>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a62:	4e4f      	ldr	r6, [pc, #316]	; (8001ba0 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a64:	f042 0204 	orr.w	r2, r2, #4
 8001a68:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a6c:	f002 0204 	and.w	r2, r2, #4
 8001a70:	9201      	str	r2, [sp, #4]
 8001a72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a7e:	f002 0220 	and.w	r2, r2, #32
 8001a82:	9202      	str	r2, [sp, #8]
 8001a84:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a90:	f002 0201 	and.w	r2, r2, #1
 8001a94:	9203      	str	r2, [sp, #12]
 8001a96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9a:	f042 0202 	orr.w	r2, r2, #2
 8001a9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aa2:	f002 0202 	and.w	r2, r2, #2
 8001aa6:	9204      	str	r2, [sp, #16]
 8001aa8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aac:	f042 0208 	orr.w	r2, r2, #8
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001aba:	4638      	mov	r0, r7
 8001abc:	4622      	mov	r2, r4
 8001abe:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac2:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ac4:	f005 fc48 	bl	8007358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f248 0110 	movw	r1, #32784	; 0x8010
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f005 fc41 	bl	8007358 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f244 4184 	movw	r1, #17540	; 0x4484
 8001ade:	f005 fc3b 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2501      	movs	r5, #1
 8001ae4:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae8:	a906      	add	r1, sp, #24
 8001aea:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af4:	f005 fb30 	bl	8007158 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001afa:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001b02:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f005 fb25 	bl	8007158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b0e:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b10:	4638      	mov	r0, r7
 8001b12:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1c:	f005 fb1c 	bl	8007158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001b20:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	a906      	add	r1, sp, #24
 8001b26:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001b28:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f005 fb12 	bl	8007158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b40:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f005 fb07 	bl	8007158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b50:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b54:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b58:	f005 fafe 	bl	8007158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	a906      	add	r1, sp, #24
 8001b5e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b60:	2260      	movs	r2, #96	; 0x60
 8001b62:	2300      	movs	r3, #0
 8001b64:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	f005 faf5 	bl	8007158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001b72:	4630      	mov	r0, r6
 8001b74:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f005 faea 	bl	8007158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b84:	4622      	mov	r2, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	2017      	movs	r0, #23
 8001b8a:	f004 fcc5 	bl	8006518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b8e:	2017      	movs	r0, #23
 8001b90:	f004 fd00 	bl	8006594 <HAL_NVIC_EnableIRQ>

}
 8001b94:	b00d      	add	sp, #52	; 0x34
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	48000400 	.word	0x48000400
 8001ba4:	48000c00 	.word	0x48000c00

08001ba8 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001ba8:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001baa:	4870      	ldr	r0, [pc, #448]	; (8001d6c <ICM20602_init+0x1c4>)
{
 8001bac:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	f005 fbd1 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2110      	movs	r1, #16
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbe:	f005 fbcb 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bc2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001bc6:	216b      	movs	r1, #107	; 0x6b
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bc8:	2301      	movs	r3, #1
 8001bca:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001bcc:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bd0:	9400      	str	r4, [sp, #0]
 8001bd2:	a902      	add	r1, sp, #8
 8001bd4:	4866      	ldr	r0, [pc, #408]	; (8001d70 <ICM20602_init+0x1c8>)
 8001bd6:	f006 fb1f 	bl	8008218 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001bda:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bdc:	2301      	movs	r3, #1
 8001bde:	9400      	str	r4, [sp, #0]
 8001be0:	aa03      	add	r2, sp, #12
 8001be2:	a902      	add	r1, sp, #8
 8001be4:	4862      	ldr	r0, [pc, #392]	; (8001d70 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001be6:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bea:	f006 fb15 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f005 fbaf 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001bfa:	462a      	mov	r2, r5
 8001bfc:	2110      	movs	r1, #16
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c02:	f005 fba9 	bl	8007358 <HAL_GPIO_WritePin>
	send_data[0]=reg & 0x7F;
 8001c06:	2319      	movs	r3, #25
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c08:	9400      	str	r4, [sp, #0]
	send_data[0]=reg & 0x7F;
 8001c0a:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c0e:	aa03      	add	r2, sp, #12
 8001c10:	2301      	movs	r3, #1
 8001c12:	a902      	add	r1, sp, #8
 8001c14:	4856      	ldr	r0, [pc, #344]	; (8001d70 <ICM20602_init+0x1c8>)
 8001c16:	f006 faff 	bl	8008218 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001c1a:	2307      	movs	r3, #7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c1c:	9400      	str	r4, [sp, #0]
	send_data[0]=data;
 8001c1e:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c22:	aa03      	add	r2, sp, #12
 8001c24:	2301      	movs	r3, #1
 8001c26:	a902      	add	r1, sp, #8
 8001c28:	4851      	ldr	r0, [pc, #324]	; (8001d70 <ICM20602_init+0x1c8>)
 8001c2a:	f006 faf5 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2110      	movs	r1, #16
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f005 fb8f 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c3a:	462a      	mov	r2, r5
 8001c3c:	2110      	movs	r1, #16
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c42:	f005 fb89 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c46:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001c48:	211a      	movs	r1, #26
	send_data[0]=data;
 8001c4a:	461d      	mov	r5, r3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c4c:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001c4e:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c52:	9400      	str	r4, [sp, #0]
 8001c54:	a902      	add	r1, sp, #8
 8001c56:	4846      	ldr	r0, [pc, #280]	; (8001d70 <ICM20602_init+0x1c8>)
 8001c58:	f006 fade 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	9400      	str	r4, [sp, #0]
 8001c60:	a902      	add	r1, sp, #8
 8001c62:	aa03      	add	r2, sp, #12
 8001c64:	4842      	ldr	r0, [pc, #264]	; (8001d70 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001c66:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c6a:	f006 fad5 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c6e:	462a      	mov	r2, r5
 8001c70:	2110      	movs	r1, #16
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c76:	f005 fb6f 	bl	8007358 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

	ICM20602_setAccRange(Ascale);
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <ICM20602_init+0x1cc>)
 8001c7c:	681c      	ldr	r4, [r3, #0]


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
    switch(Ascale)
 8001c7e:	2c03      	cmp	r4, #3
 8001c80:	d807      	bhi.n	8001c92 <ICM20602_init+0xea>
 8001c82:	e8df f004 	tbb	[pc, r4]
 8001c86:	686d      	.short	0x686d
 8001c88:	6302      	.short	0x6302
            break;
        case AFS_4G:
            aRes = 4.0/32768.0;
            break;
        case AFS_8G:
            aRes = 8.0/32768.0;
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <ICM20602_init+0x1d0>)
 8001c8c:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001c90:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2110      	movs	r1, #16
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f005 fb5d 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c9e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001ca2:	221c      	movs	r2, #28
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ca4:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001ca6:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001caa:	a902      	add	r1, sp, #8
 8001cac:	aa03      	add	r2, sp, #12
 8001cae:	4830      	ldr	r0, [pc, #192]	; (8001d70 <ICM20602_init+0x1c8>)
 8001cb0:	9500      	str	r5, [sp, #0]
 8001cb2:	f006 fab1 	bl	8008218 <HAL_SPI_TransmitReceive>
        case AFS_16G:
            aRes = 16.0/32768.0;
            break;         
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001cb6:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cb8:	2301      	movs	r3, #1
 8001cba:	aa03      	add	r2, sp, #12
 8001cbc:	a902      	add	r1, sp, #8
 8001cbe:	482c      	ldr	r0, [pc, #176]	; (8001d70 <ICM20602_init+0x1c8>)
 8001cc0:	9500      	str	r5, [sp, #0]
	send_data[0]=data;
 8001cc2:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cc6:	f006 faa7 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2110      	movs	r1, #16
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f005 fb41 	bl	8007358 <HAL_GPIO_WritePin>
	ICM20602_setGyroRange(Gscale);
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <ICM20602_init+0x1d4>)
 8001cd8:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
    switch(Gscale)
 8001cda:	2c03      	cmp	r4, #3
 8001cdc:	d806      	bhi.n	8001cec <ICM20602_init+0x144>
 8001cde:	e8df f004 	tbb	[pc, r4]
 8001ce2:	2d31      	.short	0x2d31
 8001ce4:	2902      	.short	0x2902
            break;
        case GFS_500DPS:
            gRes = 500.0/32768.0;
            break;
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <ICM20602_init+0x1d8>)
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <ICM20602_init+0x1dc>)
 8001cea:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2110      	movs	r1, #16
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf4:	f005 fb30 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cf8:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001cfc:	221b      	movs	r2, #27
 8001cfe:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d02:	a902      	add	r1, sp, #8
 8001d04:	aa03      	add	r2, sp, #12
 8001d06:	2301      	movs	r3, #1
 8001d08:	9500      	str	r5, [sp, #0]
 8001d0a:	4819      	ldr	r0, [pc, #100]	; (8001d70 <ICM20602_init+0x1c8>)
 8001d0c:	f006 fa84 	bl	8008218 <HAL_SPI_TransmitReceive>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
            break;
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001d10:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d12:	aa03      	add	r2, sp, #12
 8001d14:	a902      	add	r1, sp, #8
 8001d16:	2301      	movs	r3, #1
 8001d18:	9500      	str	r5, [sp, #0]
 8001d1a:	4815      	ldr	r0, [pc, #84]	; (8001d70 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001d1c:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d20:	f006 fa7a 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2110      	movs	r1, #16
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f005 fb14 	bl	8007358 <HAL_GPIO_WritePin>
}
 8001d30:	b005      	add	sp, #20
 8001d32:	bd30      	pop	{r4, r5, pc}
            gRes = 2000.0/32768.0;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <ICM20602_init+0x1d8>)
 8001d36:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <ICM20602_init+0x1e0>)
 8001d38:	601a      	str	r2, [r3, #0]
            break;
 8001d3a:	e7d7      	b.n	8001cec <ICM20602_init+0x144>
            gRes = 500.0/32768.0;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <ICM20602_init+0x1d8>)
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <ICM20602_init+0x1e4>)
 8001d40:	601a      	str	r2, [r3, #0]
            break;
 8001d42:	e7d3      	b.n	8001cec <ICM20602_init+0x144>
            gRes = 250.0/32768.0;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <ICM20602_init+0x1d8>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <ICM20602_init+0x1e8>)
 8001d48:	601a      	str	r2, [r3, #0]
            break;
 8001d4a:	e7cf      	b.n	8001cec <ICM20602_init+0x144>
            aRes = 16.0/32768.0;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <ICM20602_init+0x1d0>)
 8001d4e:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001d52:	601a      	str	r2, [r3, #0]
            break;         
 8001d54:	e79d      	b.n	8001c92 <ICM20602_init+0xea>
            aRes = 4.0/32768.0;
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <ICM20602_init+0x1d0>)
 8001d58:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001d5c:	601a      	str	r2, [r3, #0]
            break;
 8001d5e:	e798      	b.n	8001c92 <ICM20602_init+0xea>
            aRes = 2.0/32768.0;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <ICM20602_init+0x1d0>)
 8001d62:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001d66:	601a      	str	r2, [r3, #0]
            break;
 8001d68:	e793      	b.n	8001c92 <ICM20602_init+0xea>
 8001d6a:	bf00      	nop
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	20000fac 	.word	0x20000fac
 8001d74:	20000d58 	.word	0x20000d58
 8001d78:	20000d5c 	.word	0x20000d5c
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000d90 	.word	0x20000d90
 8001d84:	3cfa0000 	.word	0x3cfa0000
 8001d88:	3d7a0000 	.word	0x3d7a0000
 8001d8c:	3c7a0000 	.word	0x3c7a0000
 8001d90:	3bfa0000 	.word	0x3bfa0000

08001d94 <ICM20602_clearAngle>:
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
    pitchAngle = 0.0f;
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <ICM20602_clearAngle+0x10>)
    rollAngle  = 0.0f;
 8001d96:	4904      	ldr	r1, [pc, #16]	; (8001da8 <ICM20602_clearAngle+0x14>)
    yawAngle   = 0.0f;
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <ICM20602_clearAngle+0x18>)
    pitchAngle = 0.0f;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	6003      	str	r3, [r0, #0]
    rollAngle  = 0.0f;
 8001d9e:	600b      	str	r3, [r1, #0]
    yawAngle   = 0.0f;
 8001da0:	6013      	str	r3, [r2, #0]
}
 8001da2:	4770      	bx	lr
 8001da4:	20000f6c 	.word	0x20000f6c
 8001da8:	20000f70 	.word	0x20000f70
 8001dac:	20000fa4 	.word	0x20000fa4

08001db0 <ICM20602_medianFilter>:
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001db0:	4a86      	ldr	r2, [pc, #536]	; (8001fcc <ICM20602_medianFilter+0x21c>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
    	gyro_mdat[i][0] = gyro[i];
 8001db2:	4887      	ldr	r0, [pc, #540]	; (8001fd0 <ICM20602_medianFilter+0x220>)

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001db4:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <ICM20602_medianFilter+0x224>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001db6:	edd2 5a01 	vldr	s11, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001dba:	ed90 6a00 	vldr	s12, [r0]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001dbe:	ed92 7a00 	vldr	s14, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001dc2:	edd3 6a01 	vldr	s13, [r3, #4]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
    	acc_mdat[i][0]  = acc[i];
 8001dca:	4983      	ldr	r1, [pc, #524]	; (8001fd8 <ICM20602_medianFilter+0x228>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001dcc:	edc2 5a02 	vstr	s11, [r2, #8]

    	a = 0;
    	b = 2;

    	for (j = 2; j >= 0; j--) {
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001dd0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001dd8:	ed91 4a00 	vldr	s8, [r1]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001ddc:	ed82 7a01 	vstr	s14, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001de0:	ed82 6a00 	vstr	s12, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001de4:	edc3 6a02 	vstr	s13, [r3, #8]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001de8:	edc3 7a01 	vstr	s15, [r3, #4]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001dec:	dd05      	ble.n	8001dfa <ICM20602_medianFilter+0x4a>
 8001dee:	eeb0 5a46 	vmov.f32	s10, s12
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001df2:	eeb0 6a65 	vmov.f32	s12, s11
    	gyro_mdat[i][0] = gyro[i];
 8001df6:	eef0 5a45 	vmov.f32	s11, s10
    			tmp         = gyro_tmp[a];
    			gyro_tmp[a] = gyro_tmp[b];
    			gyro_tmp[b] = tmp;
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001dfa:	eef4 6ac4 	vcmpe.f32	s13, s8
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001e02:	ed83 4a00 	vstr	s8, [r3]
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e06:	d505      	bpl.n	8001e14 <ICM20602_medianFilter+0x64>
 8001e08:	eeb0 5a44 	vmov.f32	s10, s8
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e0c:	eeb0 4a66 	vmov.f32	s8, s13
    	acc_mdat[i][0]  = acc[i];
 8001e10:	eef0 6a45 	vmov.f32	s13, s10
				acc_tmp[b]  = tmp;
			}
    		a = j-1;
    		b = j;
    	}
    	gyro[i] = gyro_tmp[1];
 8001e14:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	bf88      	it	hi
 8001e1e:	eeb0 7a65 	vmovhi.f32	s14, s11
 8001e22:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001e2a:	eef4 7ae6 	vcmpe.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 8001e2e:	bfa8      	it	ge
 8001e30:	eeb0 6a47 	vmovge.f32	s12, s14
    	acc[i]  = acc_tmp[1];
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	bf98      	it	ls
 8001e3a:	eef0 6a67 	vmovls.f32	s13, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e3e:	edd2 4a04 	vldr	s9, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001e42:	ed90 5a01 	vldr	s10, [r0, #4]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e46:	ed92 7a03 	vldr	s14, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e4a:	edd3 5a04 	vldr	s11, [r3, #16]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e4e:	edd3 7a03 	vldr	s15, [r3, #12]
    	gyro[i] = gyro_tmp[1];
 8001e52:	ed80 6a00 	vstr	s12, [r0]
    	acc[i]  = acc_tmp[1];
 8001e56:	eef4 6ac4 	vcmpe.f32	s13, s8
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e5e:	eeb4 5ae4 	vcmpe.f32	s10, s9
    	acc[i]  = acc_tmp[1];
 8001e62:	bfb8      	it	lt
 8001e64:	eef0 6a44 	vmovlt.f32	s13, s8
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001e6c:	ed91 4a01 	vldr	s8, [r1, #4]
    	acc[i]  = acc_tmp[1];
 8001e70:	edc1 6a00 	vstr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e74:	edc2 4a05 	vstr	s9, [r2, #20]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e78:	ed82 7a04 	vstr	s14, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001e7c:	ed82 5a03 	vstr	s10, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e80:	edc3 5a05 	vstr	s11, [r3, #20]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e84:	edc3 7a04 	vstr	s15, [r3, #16]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e88:	dd05      	ble.n	8001e96 <ICM20602_medianFilter+0xe6>
 8001e8a:	eef0 6a45 	vmov.f32	s13, s10
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e8e:	eeb0 5a64 	vmov.f32	s10, s9
    	gyro_mdat[i][0] = gyro[i];
 8001e92:	eef0 4a66 	vmov.f32	s9, s13
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e96:	eef4 5ac4 	vcmpe.f32	s11, s8
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001e9e:	ed83 4a03 	vstr	s8, [r3, #12]
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001ea2:	d505      	bpl.n	8001eb0 <ICM20602_medianFilter+0x100>
 8001ea4:	eef0 6a44 	vmov.f32	s13, s8
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ea8:	eeb0 4a65 	vmov.f32	s8, s11
    	acc_mdat[i][0]  = acc[i];
 8001eac:	eef0 5a66 	vmov.f32	s11, s13
    	gyro[i] = gyro_tmp[1];
 8001eb0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8001eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb8:	bf88      	it	hi
 8001eba:	eeb0 7a64 	vmovhi.f32	s14, s9
 8001ebe:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001ec6:	eef4 7ae5 	vcmpe.f32	s15, s11
    	gyro[i] = gyro_tmp[1];
 8001eca:	bfb8      	it	lt
 8001ecc:	eeb0 7a45 	vmovlt.f32	s14, s10
    	acc[i]  = acc_tmp[1];
 8001ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed4:	bf88      	it	hi
 8001ed6:	eef0 7a65 	vmovhi.f32	s15, s11
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001eda:	ed92 5a07 	vldr	s10, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001ede:	edd0 5a02 	vldr	s11, [r0, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001ee2:	edd2 6a06 	vldr	s13, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ee6:	edd3 4a07 	vldr	s9, [r3, #28]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001eea:	ed93 6a06 	vldr	s12, [r3, #24]
    	gyro[i] = gyro_tmp[1];
 8001eee:	ed80 7a01 	vstr	s14, [r0, #4]
    	acc[i]  = acc_tmp[1];
 8001ef2:	eef4 7ac4 	vcmpe.f32	s15, s8
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001efa:	eef4 5ac5 	vcmpe.f32	s11, s10
    	acc[i]  = acc_tmp[1];
 8001efe:	bfb8      	it	lt
 8001f00:	eef0 7a44 	vmovlt.f32	s15, s8
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001f08:	edc1 7a01 	vstr	s15, [r1, #4]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f0c:	ed82 5a08 	vstr	s10, [r2, #32]
    	acc_mdat[i][0]  = acc[i];
 8001f10:	edd1 7a02 	vldr	s15, [r1, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f14:	edc2 6a07 	vstr	s13, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001f18:	edc2 5a06 	vstr	s11, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001f1c:	edc3 4a08 	vstr	s9, [r3, #32]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001f20:	ed83 6a07 	vstr	s12, [r3, #28]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f24:	dd05      	ble.n	8001f32 <ICM20602_medianFilter+0x182>
 8001f26:	eeb0 7a65 	vmov.f32	s14, s11
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f2a:	eef0 5a45 	vmov.f32	s11, s10
    	gyro_mdat[i][0] = gyro[i];
 8001f2e:	eeb0 5a47 	vmov.f32	s10, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001f32:	eef4 4ae7 	vcmpe.f32	s9, s15
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001f3a:	edc3 7a06 	vstr	s15, [r3, #24]
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001f3e:	d505      	bpl.n	8001f4c <ICM20602_medianFilter+0x19c>
 8001f40:	eeb0 7a67 	vmov.f32	s14, s15
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001f44:	eef0 7a64 	vmov.f32	s15, s9
    	acc_mdat[i][0]  = acc[i];
 8001f48:	eef0 4a47 	vmov.f32	s9, s14
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f4c:	eef4 6ac5 	vcmpe.f32	s13, s10
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	dd05      	ble.n	8001f62 <ICM20602_medianFilter+0x1b2>
 8001f56:	eeb0 7a66 	vmov.f32	s14, s13
 8001f5a:	eef0 6a45 	vmov.f32	s13, s10
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f5e:	eeb0 5a47 	vmov.f32	s10, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001f62:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	dd05      	ble.n	8001f78 <ICM20602_medianFilter+0x1c8>
 8001f6c:	eeb0 7a46 	vmov.f32	s14, s12
 8001f70:	eeb0 6a64 	vmov.f32	s12, s9
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001f74:	eef0 4a47 	vmov.f32	s9, s14
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001f78:	eef4 5ae6 	vcmpe.f32	s11, s13
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	dd05      	ble.n	8001f8e <ICM20602_medianFilter+0x1de>
 8001f82:	eeb0 7a65 	vmov.f32	s14, s11
 8001f86:	eef0 5a66 	vmov.f32	s11, s13
 8001f8a:	eef0 6a47 	vmov.f32	s13, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001f8e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	dd05      	ble.n	8001fa4 <ICM20602_medianFilter+0x1f4>
 8001f98:	eeb0 7a67 	vmov.f32	s14, s15
 8001f9c:	eef0 7a46 	vmov.f32	s15, s12
 8001fa0:	eeb0 6a47 	vmov.f32	s12, s14
    	gyro[i] = gyro_tmp[1];
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <ICM20602_medianFilter+0x22c>)
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <ICM20602_medianFilter+0x230>)
 8001fa8:	edc0 6a02 	vstr	s13, [r0, #8]
    	acc[i]  = acc_tmp[1];
 8001fac:	ed81 6a02 	vstr	s12, [r1, #8]
    for (i = 0; i < 3; i ++) {
 8001fb0:	edc2 4a02 	vstr	s9, [r2, #8]
 8001fb4:	ed83 5a02 	vstr	s10, [r3, #8]
 8001fb8:	ed82 6a01 	vstr	s12, [r2, #4]
 8001fbc:	edc3 6a01 	vstr	s13, [r3, #4]
 8001fc0:	edc2 7a00 	vstr	s15, [r2]
 8001fc4:	edc3 5a00 	vstr	s11, [r3]
    }
}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000d94 	.word	0x20000d94
 8001fd0:	20000ef0 	.word	0x20000ef0
 8001fd4:	20000d60 	.word	0x20000d60
 8001fd8:	20000e84 	.word	0x20000e84
 8001fdc:	20000d84 	.word	0x20000d84
 8001fe0:	20000dc4 	.word	0x20000dc4

08001fe4 <ICM20602_read_IMU_data>:
void ICM20602_read_IMU_data() {
 8001fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fe8:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001fec:	2200      	movs	r2, #0
void ICM20602_read_IMU_data() {
 8001fee:	b084      	sub	sp, #16
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ff6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001ffa:	f005 f9ad 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001ffe:	21bc      	movs	r1, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002000:	2301      	movs	r3, #1
 8002002:	aa03      	add	r2, sp, #12
    send_data[0]= reg | 0x80;
 8002004:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002008:	9400      	str	r4, [sp, #0]
 800200a:	a902      	add	r1, sp, #8
 800200c:	48d2      	ldr	r0, [pc, #840]	; (8002358 <ICM20602_read_IMU_data+0x374>)
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800200e:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8002364 <ICM20602_read_IMU_data+0x380>
 8002012:	ed9f 8ad2 	vldr	s16, [pc, #840]	; 800235c <ICM20602_read_IMU_data+0x378>
    send_data[0]=0x00;
 8002016:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002018:	f006 f8fe 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800201c:	2301      	movs	r3, #1
 800201e:	9400      	str	r4, [sp, #0]
 8002020:	aa03      	add	r2, sp, #12
 8002022:	a902      	add	r1, sp, #8
 8002024:	48cc      	ldr	r0, [pc, #816]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002026:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800202a:	f006 f8f5 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800202e:	2110      	movs	r1, #16
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002036:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800203a:	f005 f98d 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800203e:	462a      	mov	r2, r5
 8002040:	2110      	movs	r1, #16
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f005 f987 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800204a:	27bb      	movs	r7, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800204c:	9400      	str	r4, [sp, #0]
 800204e:	2301      	movs	r3, #1
 8002050:	aa03      	add	r2, sp, #12
 8002052:	a902      	add	r1, sp, #8
 8002054:	48c0      	ldr	r0, [pc, #768]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002056:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800205a:	f006 f8dd 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800205e:	2301      	movs	r3, #1
 8002060:	9400      	str	r4, [sp, #0]
 8002062:	aa03      	add	r2, sp, #12
 8002064:	a902      	add	r1, sp, #8
 8002066:	48bc      	ldr	r0, [pc, #752]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002068:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800206c:	f006 f8d4 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002070:	f89d 700c 	ldrb.w	r7, [sp, #12]
    return((HiByte<<8) | LoByte);
 8002074:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002078:	2201      	movs	r2, #1
 800207a:	2110      	movs	r1, #16
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002080:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002082:	f005 f969 	bl	8007358 <HAL_GPIO_WritePin>
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002086:	ed98 7a00 	vldr	s14, [r8]
 800208a:	4fb5      	ldr	r7, [pc, #724]	; (8002360 <ICM20602_read_IMU_data+0x37c>)
 800208c:	ee07 6a90 	vmov	s15, r6
 8002090:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002098:	462a      	mov	r2, r5
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800209a:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800209e:	2110      	movs	r1, #16
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80020a0:	edc7 7a00 	vstr	s15, [r7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a8:	f005 f956 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020ac:	26be      	movs	r6, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ae:	9400      	str	r4, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	aa03      	add	r2, sp, #12
 80020b4:	a902      	add	r1, sp, #8
 80020b6:	48a8      	ldr	r0, [pc, #672]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80020b8:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020bc:	f006 f8ac 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020c0:	2301      	movs	r3, #1
 80020c2:	9400      	str	r4, [sp, #0]
 80020c4:	aa03      	add	r2, sp, #12
 80020c6:	a902      	add	r1, sp, #8
 80020c8:	48a3      	ldr	r0, [pc, #652]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80020ca:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ce:	f006 f8a3 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020d2:	2110      	movs	r1, #16
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d8:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80020da:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020de:	f005 f93b 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020e2:	462a      	mov	r2, r5
 80020e4:	2110      	movs	r1, #16
 80020e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ea:	f005 f935 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020ee:	f04f 0cbd 	mov.w	ip, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020f2:	9400      	str	r4, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	aa03      	add	r2, sp, #12
 80020f8:	a902      	add	r1, sp, #8
 80020fa:	4897      	ldr	r0, [pc, #604]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80020fc:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002100:	f006 f88a 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002104:	2301      	movs	r3, #1
 8002106:	9400      	str	r4, [sp, #0]
 8002108:	aa03      	add	r2, sp, #12
 800210a:	a902      	add	r1, sp, #8
 800210c:	4892      	ldr	r0, [pc, #584]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800210e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002112:	f006 f881 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002116:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800211a:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800211e:	2201      	movs	r2, #1
 8002120:	2110      	movs	r1, #16
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002126:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002128:	f005 f916 	bl	8007358 <HAL_GPIO_WritePin>
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800212c:	ed98 7a00 	vldr	s14, [r8]
 8002130:	ee07 6a90 	vmov	s15, r6
 8002134:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800213c:	462a      	mov	r2, r5
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002142:	2110      	movs	r1, #16
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002144:	edc7 7a01 	vstr	s15, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214c:	f005 f904 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002150:	26c0      	movs	r6, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002152:	9400      	str	r4, [sp, #0]
 8002154:	2301      	movs	r3, #1
 8002156:	aa03      	add	r2, sp, #12
 8002158:	a902      	add	r1, sp, #8
 800215a:	487f      	ldr	r0, [pc, #508]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 800215c:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002160:	f006 f85a 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002164:	2301      	movs	r3, #1
 8002166:	9400      	str	r4, [sp, #0]
 8002168:	aa03      	add	r2, sp, #12
 800216a:	a902      	add	r1, sp, #8
 800216c:	487a      	ldr	r0, [pc, #488]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800216e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002172:	f006 f851 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002176:	2110      	movs	r1, #16
 8002178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800217e:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002182:	f005 f8e9 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002186:	462a      	mov	r2, r5
 8002188:	2110      	movs	r1, #16
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f005 f8e3 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002192:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002196:	9400      	str	r4, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	aa03      	add	r2, sp, #12
 800219c:	a902      	add	r1, sp, #8
 800219e:	486e      	ldr	r0, [pc, #440]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80021a0:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021a4:	f006 f838 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021a8:	2301      	movs	r3, #1
 80021aa:	9400      	str	r4, [sp, #0]
 80021ac:	aa03      	add	r2, sp, #12
 80021ae:	a902      	add	r1, sp, #8
 80021b0:	4869      	ldr	r0, [pc, #420]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80021b2:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b6:	f006 f82f 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80021ba:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80021be:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2110      	movs	r1, #16
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021ca:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021cc:	f005 f8c4 	bl	8007358 <HAL_GPIO_WritePin>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021d0:	ed98 7a00 	vldr	s14, [r8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021d4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8002368 <ICM20602_read_IMU_data+0x384>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021d8:	ee07 6a90 	vmov	s15, r6
 80021dc:	ee27 7a08 	vmul.f32	s14, s14, s16
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021e4:	462a      	mov	r2, r5
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021ea:	2110      	movs	r1, #16
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80021ec:	edc7 7a02 	vstr	s15, [r7, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f4:	f005 f8b0 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021f8:	26c4      	movs	r6, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021fa:	9400      	str	r4, [sp, #0]
 80021fc:	2301      	movs	r3, #1
 80021fe:	aa03      	add	r2, sp, #12
 8002200:	a902      	add	r1, sp, #8
 8002202:	4855      	ldr	r0, [pc, #340]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002204:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002208:	f006 f806 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800220c:	2301      	movs	r3, #1
 800220e:	9400      	str	r4, [sp, #0]
 8002210:	aa03      	add	r2, sp, #12
 8002212:	a902      	add	r1, sp, #8
 8002214:	4850      	ldr	r0, [pc, #320]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002216:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800221a:	f005 fffd 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800221e:	2110      	movs	r1, #16
 8002220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002224:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002226:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800222a:	f005 f895 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800222e:	462a      	mov	r2, r5
 8002230:	2110      	movs	r1, #16
 8002232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002236:	f005 f88f 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800223a:	f04f 0cc3 	mov.w	ip, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800223e:	9400      	str	r4, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	aa03      	add	r2, sp, #12
 8002244:	a902      	add	r1, sp, #8
 8002246:	4844      	ldr	r0, [pc, #272]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002248:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800224c:	f005 ffe4 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002250:	2301      	movs	r3, #1
 8002252:	9400      	str	r4, [sp, #0]
 8002254:	aa03      	add	r2, sp, #12
 8002256:	a902      	add	r1, sp, #8
 8002258:	483f      	ldr	r0, [pc, #252]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800225a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800225e:	f005 ffdb 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002262:	f89d 800c 	ldrb.w	r8, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002266:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800226a:	2201      	movs	r2, #1
 800226c:	2110      	movs	r1, #16
 800226e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002272:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002274:	f005 f870 	bl	8007358 <HAL_GPIO_WritePin>
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002278:	ee07 6a90 	vmov	s15, r6
 800227c:	ed99 7a00 	vldr	s14, [r9]
 8002280:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800236c <ICM20602_read_IMU_data+0x388>
 8002284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002288:	462a      	mov	r2, r5
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800228a:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800228e:	2110      	movs	r1, #16
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002290:	edc8 7a00 	vstr	s15, [r8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002298:	f005 f85e 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800229c:	26c6      	movs	r6, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800229e:	9400      	str	r4, [sp, #0]
 80022a0:	2301      	movs	r3, #1
 80022a2:	aa03      	add	r2, sp, #12
 80022a4:	a902      	add	r1, sp, #8
 80022a6:	482c      	ldr	r0, [pc, #176]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80022a8:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022ac:	f005 ffb4 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b0:	2301      	movs	r3, #1
 80022b2:	9400      	str	r4, [sp, #0]
 80022b4:	aa03      	add	r2, sp, #12
 80022b6:	a902      	add	r1, sp, #8
 80022b8:	4827      	ldr	r0, [pc, #156]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80022ba:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022be:	f005 ffab 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022c2:	2110      	movs	r1, #16
 80022c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c8:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80022ca:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022ce:	f005 f843 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022d2:	462a      	mov	r2, r5
 80022d4:	2110      	movs	r1, #16
 80022d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022da:	f005 f83d 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80022de:	f04f 0cc5 	mov.w	ip, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022e2:	9400      	str	r4, [sp, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	aa03      	add	r2, sp, #12
 80022e8:	a902      	add	r1, sp, #8
 80022ea:	481b      	ldr	r0, [pc, #108]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80022ec:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022f0:	f005 ff92 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022f4:	2301      	movs	r3, #1
 80022f6:	9400      	str	r4, [sp, #0]
 80022f8:	aa03      	add	r2, sp, #12
 80022fa:	a902      	add	r1, sp, #8
 80022fc:	4816      	ldr	r0, [pc, #88]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80022fe:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002302:	f005 ff89 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002306:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800230a:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800230e:	2201      	movs	r2, #1
 8002310:	2110      	movs	r1, #16
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002316:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002318:	f005 f81e 	bl	8007358 <HAL_GPIO_WritePin>
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800231c:	ee07 6a90 	vmov	s15, r6
 8002320:	ed99 7a00 	vldr	s14, [r9]
 8002324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002328:	462a      	mov	r2, r5
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800232a:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800232e:	2110      	movs	r1, #16
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002330:	edc8 7a01 	vstr	s15, [r8, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002338:	f005 f80e 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800233c:	26c8      	movs	r6, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800233e:	9400      	str	r4, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	aa03      	add	r2, sp, #12
 8002344:	a902      	add	r1, sp, #8
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002348:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800234c:	f005 ff64 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002350:	2301      	movs	r3, #1
 8002352:	9400      	str	r4, [sp, #0]
 8002354:	e00c      	b.n	8002370 <ICM20602_read_IMU_data+0x38c>
 8002356:	bf00      	nop
 8002358:	20000fac 	.word	0x20000fac
 800235c:	411ce80a 	.word	0x411ce80a
 8002360:	20000e84 	.word	0x20000e84
 8002364:	20000d5c 	.word	0x20000d5c
 8002368:	20000d90 	.word	0x20000d90
 800236c:	20000ef0 	.word	0x20000ef0
 8002370:	aa03      	add	r2, sp, #12
 8002372:	a902      	add	r1, sp, #8
 8002374:	48b8      	ldr	r0, [pc, #736]	; (8002658 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 8002376:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800237a:	f005 ff4d 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800237e:	2110      	movs	r1, #16
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002386:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800238a:	f004 ffe5 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800238e:	462a      	mov	r2, r5
 8002390:	2110      	movs	r1, #16
 8002392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002396:	f004 ffdf 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800239a:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800239e:	9400      	str	r4, [sp, #0]
 80023a0:	2301      	movs	r3, #1
 80023a2:	aa03      	add	r2, sp, #12
 80023a4:	a902      	add	r1, sp, #8
 80023a6:	48ac      	ldr	r0, [pc, #688]	; (8002658 <ICM20602_read_IMU_data+0x674>)
    send_data[0]= reg | 0x80;
 80023a8:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023ac:	f005 ff34 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023b0:	2301      	movs	r3, #1
 80023b2:	9400      	str	r4, [sp, #0]
 80023b4:	aa03      	add	r2, sp, #12
 80023b6:	a902      	add	r1, sp, #8
 80023b8:	48a7      	ldr	r0, [pc, #668]	; (8002658 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 80023ba:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023be:	f005 ff2b 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80023c2:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80023c6:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023ca:	2110      	movs	r1, #16
 80023cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d0:	2201      	movs	r2, #1
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80023d2:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023d4:	f004 ffc0 	bl	8007358 <HAL_GPIO_WritePin>
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80023d8:	ee07 6a90 	vmov	s15, r6
 80023dc:	ed99 7a00 	vldr	s14, [r9]
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    send_data[0]= reg | 0x80;
 80023e4:	26c2      	movs	r6, #194	; 0xc2
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80023e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ea:	edc8 7a02 	vstr	s15, [r8, #8]
    ICM20602_medianFilter();
 80023ee:	f7ff fcdf 	bl	8001db0 <ICM20602_medianFilter>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80023f2:	462a      	mov	r2, r5
 80023f4:	2110      	movs	r1, #16
 80023f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fa:	f004 ffad 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023fe:	9400      	str	r4, [sp, #0]
 8002400:	2301      	movs	r3, #1
 8002402:	aa03      	add	r2, sp, #12
 8002404:	a902      	add	r1, sp, #8
 8002406:	4894      	ldr	r0, [pc, #592]	; (8002658 <ICM20602_read_IMU_data+0x674>)
    send_data[0]= reg | 0x80;
 8002408:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800240c:	f005 ff04 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002410:	2301      	movs	r3, #1
 8002412:	9400      	str	r4, [sp, #0]
 8002414:	aa03      	add	r2, sp, #12
 8002416:	a902      	add	r1, sp, #8
 8002418:	488f      	ldr	r0, [pc, #572]	; (8002658 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 800241a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800241e:	f005 fefb 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002422:	2110      	movs	r1, #16
 8002424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002428:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800242a:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800242e:	f004 ff93 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002432:	462a      	mov	r2, r5
 8002434:	2110      	movs	r1, #16
 8002436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243a:	f004 ff8d 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800243e:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002442:	9400      	str	r4, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	aa03      	add	r2, sp, #12
 8002448:	a902      	add	r1, sp, #8
 800244a:	4883      	ldr	r0, [pc, #524]	; (8002658 <ICM20602_read_IMU_data+0x674>)
    send_data[0]= reg | 0x80;
 800244c:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002450:	f005 fee2 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002454:	2301      	movs	r3, #1
 8002456:	9400      	str	r4, [sp, #0]
 8002458:	aa03      	add	r2, sp, #12
 800245a:	a902      	add	r1, sp, #8
 800245c:	487e      	ldr	r0, [pc, #504]	; (8002658 <ICM20602_read_IMU_data+0x674>)
    send_data[0]=0x00;
 800245e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002462:	f005 fed9 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002466:	2201      	movs	r2, #1
 8002468:	2110      	movs	r1, #16
 800246a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 800246e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002472:	f004 ff71 	bl	8007358 <HAL_GPIO_WritePin>
void ICM20602_IMU_compensate(void)
{
    int k;
    for(k=0;k<3;k++){
        acc_comp[k] = acc[k] - acc_off[k];
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002476:	4979      	ldr	r1, [pc, #484]	; (800265c <ICM20602_read_IMU_data+0x678>)
 8002478:	edd8 3a00 	vldr	s7, [r8]
 800247c:	edd1 7a00 	vldr	s15, [r1]
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 8002480:	4b77      	ldr	r3, [pc, #476]	; (8002660 <ICM20602_read_IMU_data+0x67c>)
 8002482:	4878      	ldr	r0, [pc, #480]	; (8002664 <ICM20602_read_IMU_data+0x680>)
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002484:	eddf 5a78 	vldr	s11, [pc, #480]	; 8002668 <ICM20602_read_IMU_data+0x684>
 8002488:	ed90 6a00 	vldr	s12, [r0]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 800248c:	ed93 7a00 	vldr	s14, [r3]
        acc_comp[k] = acc[k] - acc_off[k];
 8002490:	4a76      	ldr	r2, [pc, #472]	; (800266c <ICM20602_read_IMU_data+0x688>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002492:	ed91 3a01 	vldr	s6, [r1, #4]
 8002496:	ed91 5a02 	vldr	s10, [r1, #8]
 800249a:	ed98 4a01 	vldr	s8, [r8, #4]
 800249e:	edd8 4a02 	vldr	s9, [r8, #8]
        acc_comp[k] = acc[k] - acc_off[k];
 80024a2:	edd2 0a00 	vldr	s1, [r2]
 80024a6:	ed92 1a01 	vldr	s2, [r2, #4]
 80024aa:	edd7 2a00 	vldr	s5, [r7]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024ae:	ed93 2a01 	vldr	s4, [r3, #4]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*1;
 80024b2:	486f      	ldr	r0, [pc, #444]	; (8002670 <ICM20602_read_IMU_data+0x68c>)
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*1;
 80024b4:	496f      	ldr	r1, [pc, #444]	; (8002674 <ICM20602_read_IMU_data+0x690>)
    return ((HiByte<<8) | LoByte);
 80024b6:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024ba:	b236      	sxth	r6, r6
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80024bc:	ee73 3ae7 	vsub.f32	s7, s7, s15
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024c0:	ee07 6a90 	vmov	s15, r6
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 80024c4:	4c6c      	ldr	r4, [pc, #432]	; (8002678 <ICM20602_read_IMU_data+0x694>)
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80024ce:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 80024d2:	ee26 6a26 	vmul.f32	s12, s12, s13
 80024d6:	eee7 1aa5 	vfma.f32	s3, s15, s11
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024da:	ee33 7a87 	vadd.f32	s14, s7, s14
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 80024de:	edd4 6a00 	vldr	s13, [r4]
        acc_comp[k] = acc[k] - acc_off[k];
 80024e2:	edd2 7a02 	vldr	s15, [r2, #8]
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024e6:	4a65      	ldr	r2, [pc, #404]	; (800267c <ICM20602_read_IMU_data+0x698>)
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024e8:	edd3 5a02 	vldr	s11, [r3, #8]
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80024ec:	edc2 1a00 	vstr	s3, [r2]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80024f0:	ee34 4a43 	vsub.f32	s8, s8, s6
 80024f4:	ee74 4ac5 	vsub.f32	s9, s9, s10
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*1;//とりあえず変えておく
 80024f8:	eee7 6a06 	vfma.f32	s13, s14, s12
        acc_comp[k] = acc[k] - acc_off[k];
 80024fc:	4a60      	ldr	r2, [pc, #384]	; (8002680 <ICM20602_read_IMU_data+0x69c>)
 80024fe:	ed97 3a01 	vldr	s6, [r7, #4]
 8002502:	ed97 5a02 	vldr	s10, [r7, #8]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*1;
 8002506:	ed90 7a00 	vldr	s14, [r0]
        acc_comp[k] = acc[k] - acc_off[k];
 800250a:	ee33 3a41 	vsub.f32	s6, s6, s2
 800250e:	ee35 5a67 	vsub.f32	s10, s10, s15
 8002512:	ee72 2ae0 	vsub.f32	s5, s5, s1
    while (deg < -180.0f) deg += 360.0f;
 8002516:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8002684 <ICM20602_read_IMU_data+0x6a0>
        acc_comp[k] = acc[k] - acc_off[k];
 800251a:	edc2 2a00 	vstr	s5, [r2]
 800251e:	ed82 3a01 	vstr	s6, [r2, #4]
 8002522:	ed82 5a02 	vstr	s10, [r2, #8]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002526:	ee34 2a02 	vadd.f32	s4, s8, s4
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800252a:	4a57      	ldr	r2, [pc, #348]	; (8002688 <ICM20602_read_IMU_data+0x6a4>)
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*1;
 800252c:	edd1 7a00 	vldr	s15, [r1]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002530:	edc2 3a00 	vstr	s7, [r2]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002534:	ee74 5aa5 	vadd.f32	s11, s9, s11
    while (deg < -180.0f) deg += 360.0f;
 8002538:	eef4 6ac1 	vcmpe.f32	s13, s2
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*1;
 8002540:	eea2 7a06 	vfma.f32	s14, s4, s12
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*1;
 8002544:	eee5 7a86 	vfma.f32	s15, s11, s12
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002548:	ed82 4a01 	vstr	s8, [r2, #4]
 800254c:	edc2 4a02 	vstr	s9, [r2, #8]
    while (deg < -180.0f) deg += 360.0f;
 8002550:	d50c      	bpl.n	800256c <ICM20602_read_IMU_data+0x588>
 8002552:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 800268c <ICM20602_read_IMU_data+0x6a8>
 8002556:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8002690 <ICM20602_read_IMU_data+0x6ac>
 800255a:	eeb0 6a66 	vmov.f32	s12, s13
 800255e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	ee76 6a85 	vadd.f32	s13, s13, s10
 800256a:	d4f6      	bmi.n	800255a <ICM20602_read_IMU_data+0x576>
    while (deg >= 180.0f) deg -= 360.0f;
 800256c:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8002694 <ICM20602_read_IMU_data+0x6b0>
 8002570:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	db0c      	blt.n	8002594 <ICM20602_read_IMU_data+0x5b0>
 800257a:	ed9f 5a44 	vldr	s10, [pc, #272]	; 800268c <ICM20602_read_IMU_data+0x6a8>
 800257e:	eddf 5a46 	vldr	s11, [pc, #280]	; 8002698 <ICM20602_read_IMU_data+0x6b4>
 8002582:	eeb0 6a66 	vmov.f32	s12, s13
 8002586:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8002592:	daf6      	bge.n	8002582 <ICM20602_read_IMU_data+0x59e>
    while (deg < -180.0f) deg += 360.0f;
 8002594:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8002684 <ICM20602_read_IMU_data+0x6a0>
    pitchAngle = ICM20602_normAngle(pitchAngle);
 8002598:	edc4 6a00 	vstr	s13, [r4]
    while (deg < -180.0f) deg += 360.0f;
 800259c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	d50c      	bpl.n	80025c0 <ICM20602_read_IMU_data+0x5dc>
 80025a6:	eddf 5a39 	vldr	s11, [pc, #228]	; 800268c <ICM20602_read_IMU_data+0x6a8>
 80025aa:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8002690 <ICM20602_read_IMU_data+0x6ac>
 80025ae:	eef0 6a47 	vmov.f32	s13, s14
 80025b2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80025b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ba:	ee37 7a25 	vadd.f32	s14, s14, s11
 80025be:	d4f6      	bmi.n	80025ae <ICM20602_read_IMU_data+0x5ca>
    while (deg >= 180.0f) deg -= 360.0f;
 80025c0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002694 <ICM20602_read_IMU_data+0x6b0>
 80025c4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	db0c      	blt.n	80025e8 <ICM20602_read_IMU_data+0x604>
 80025ce:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800268c <ICM20602_read_IMU_data+0x6a8>
 80025d2:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002698 <ICM20602_read_IMU_data+0x6b4>
 80025d6:	eef0 6a47 	vmov.f32	s13, s14
 80025da:	eef4 6ac6 	vcmpe.f32	s13, s12
 80025de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e2:	ee37 7a65 	vsub.f32	s14, s14, s11
 80025e6:	daf6      	bge.n	80025d6 <ICM20602_read_IMU_data+0x5f2>
    while (deg < -180.0f) deg += 360.0f;
 80025e8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002684 <ICM20602_read_IMU_data+0x6a0>
    rollAngle  = ICM20602_normAngle(rollAngle);
 80025ec:	ed80 7a00 	vstr	s14, [r0]
    while (deg < -180.0f) deg += 360.0f;
 80025f0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	d50c      	bpl.n	8002614 <ICM20602_read_IMU_data+0x630>
 80025fa:	ed9f 6a24 	vldr	s12, [pc, #144]	; 800268c <ICM20602_read_IMU_data+0x6a8>
 80025fe:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002690 <ICM20602_read_IMU_data+0x6ac>
 8002602:	eeb0 7a67 	vmov.f32	s14, s15
 8002606:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002612:	d4f6      	bmi.n	8002602 <ICM20602_read_IMU_data+0x61e>
    while (deg >= 180.0f) deg -= 360.0f;
 8002614:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002694 <ICM20602_read_IMU_data+0x6b0>
 8002618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	db0c      	blt.n	800263c <ICM20602_read_IMU_data+0x658>
 8002622:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800268c <ICM20602_read_IMU_data+0x6a8>
 8002626:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002698 <ICM20602_read_IMU_data+0x6b4>
 800262a:	eeb0 7a67 	vmov.f32	s14, s15
 800262e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800263a:	daf6      	bge.n	800262a <ICM20602_read_IMU_data+0x646>
    yawAngle   = ICM20602_normAngle(yawAngle);
 800263c:	edc1 7a00 	vstr	s15, [r1]
    gyro_prv[0] = gyro_comp[0];
 8002640:	edc3 3a00 	vstr	s7, [r3]
    gyro_prv[1] = gyro_comp[1];
 8002644:	ed83 4a01 	vstr	s8, [r3, #4]
    gyro_prv[2] = gyro_comp[2];
 8002648:	edc3 4a02 	vstr	s9, [r3, #8]
}
 800264c:	b004      	add	sp, #16
 800264e:	ecbd 8b02 	vpop	{d8}
 8002652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002656:	bf00      	nop
 8002658:	20000fac 	.word	0x20000fac
 800265c:	20000f08 	.word	0x20000f08
 8002660:	20000db8 	.word	0x20000db8
 8002664:	20000004 	.word	0x20000004
 8002668:	3b4889df 	.word	0x3b4889df
 800266c:	20000e9c 	.word	0x20000e9c
 8002670:	20000f70 	.word	0x20000f70
 8002674:	20000fa4 	.word	0x20000fa4
 8002678:	20000f6c 	.word	0x20000f6c
 800267c:	20000dd8 	.word	0x20000dd8
 8002680:	20000e90 	.word	0x20000e90
 8002684:	c3340000 	.word	0xc3340000
 8002688:	20000efc 	.word	0x20000efc
 800268c:	43b40000 	.word	0x43b40000
 8002690:	c4070000 	.word	0xc4070000
 8002694:	43340000 	.word	0x43340000
 8002698:	44070000 	.word	0x44070000
 800269c:	00000000 	.word	0x00000000

080026a0 <ICM20602_IMU_calibration2>:
{
 80026a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a4:	ed2d 8b06 	vpush	{d8-d10}
    double acc_sum[3]={0};
 80026a8:	2400      	movs	r4, #0
{
 80026aa:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    double acc_ave[3][10] = {{0.0}};
 80026ae:	22f0      	movs	r2, #240	; 0xf0
 80026b0:	4621      	mov	r1, r4
 80026b2:	a822      	add	r0, sp, #136	; 0x88
    double acc_sum[3]={0};
 80026b4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80026b8:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80026bc:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    double gyro_sum[3]={0};
 80026c0:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 80026c4:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 80026c8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    double acc_ave[3][10] = {{0.0}};
 80026cc:	f008 fbce 	bl	800ae6c <memset>
    double gyro_ave[3][10] = {{0.0}};
 80026d0:	4621      	mov	r1, r4
 80026d2:	22f0      	movs	r2, #240	; 0xf0
 80026d4:	a85e      	add	r0, sp, #376	; 0x178
 80026d6:	f008 fbc9 	bl	800ae6c <memset>
    printf("put the IMU still!\n");
 80026da:	48c9      	ldr	r0, [pc, #804]	; (8002a00 <ICM20602_IMU_calibration2+0x360>)
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80026dc:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8002a04 <ICM20602_IMU_calibration2+0x364>
    printf("put the IMU still!\n");
 80026e0:	f008 fa2e 	bl	800ab40 <puts>
    HAL_Delay(1000);
 80026e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e8:	f003 f97a 	bl	80059e0 <HAL_Delay>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80026ec:	2200      	movs	r2, #0
 80026ee:	2300      	movs	r3, #0
    double cal_len = 0.0f;
 80026f0:	ec43 2b1a 	vmov	d10, r2, r3
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7fd fdee 	bl	80002d8 <__aeabi_dsub>
 80026fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002700:	9309      	str	r3, [sp, #36]	; 0x24
 8002702:	9008      	str	r0, [sp, #32]
		|| cal_len < 500.0
 8002704:	a3bc      	add	r3, pc, #752	; (adr r3, 80029f8 <ICM20602_IMU_calibration2+0x358>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800270e:	f7fe fa2b 	bl	8000b68 <__aeabi_dcmpgt>
 8002712:	2800      	cmp	r0, #0
 8002714:	d15d      	bne.n	80027d2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002716:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 800271a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800271e:	f7fd fddb 	bl	80002d8 <__aeabi_dsub>
 8002722:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002726:	930b      	str	r3, [sp, #44]	; 0x2c
 8002728:	900a      	str	r0, [sp, #40]	; 0x28
 800272a:	a3b3      	add	r3, pc, #716	; (adr r3, 80029f8 <ICM20602_IMU_calibration2+0x358>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002734:	f7fe fa18 	bl	8000b68 <__aeabi_dcmpgt>
 8002738:	2800      	cmp	r0, #0
 800273a:	d14a      	bne.n	80027d2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 800273c:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8002740:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 8002744:	f7fd fdc8 	bl	80002d8 <__aeabi_dsub>
 8002748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800274c:	930d      	str	r3, [sp, #52]	; 0x34
 800274e:	900c      	str	r0, [sp, #48]	; 0x30
 8002750:	a3a9      	add	r3, pc, #676	; (adr r3, 80029f8 <ICM20602_IMU_calibration2+0x358>)
 8002752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800275a:	f7fe fa05 	bl	8000b68 <__aeabi_dcmpgt>
 800275e:	2800      	cmp	r0, #0
 8002760:	d137      	bne.n	80027d2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 8002762:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
 8002766:	e9dd 0170 	ldrd	r0, r1, [sp, #448]	; 0x1c0
 800276a:	f7fd fdb5 	bl	80002d8 <__aeabi_dsub>
 800276e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002772:	930f      	str	r3, [sp, #60]	; 0x3c
 8002774:	900e      	str	r0, [sp, #56]	; 0x38
 8002776:	a3a0      	add	r3, pc, #640	; (adr r3, 80029f8 <ICM20602_IMU_calibration2+0x358>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002780:	f7fe f9f2 	bl	8000b68 <__aeabi_dcmpgt>
 8002784:	bb28      	cbnz	r0, 80027d2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 8002786:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 800278a:	e9dd 0184 	ldrd	r0, r1, [sp, #528]	; 0x210
 800278e:	f7fd fda3 	bl	80002d8 <__aeabi_dsub>
 8002792:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002796:	9311      	str	r3, [sp, #68]	; 0x44
 8002798:	9010      	str	r0, [sp, #64]	; 0x40
 800279a:	a397      	add	r3, pc, #604	; (adr r3, 80029f8 <ICM20602_IMU_calibration2+0x358>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80027a4:	f7fe f9e0 	bl	8000b68 <__aeabi_dcmpgt>
 80027a8:	b998      	cbnz	r0, 80027d2 <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 80027aa:	e9dd 2386 	ldrd	r2, r3, [sp, #536]	; 0x218
 80027ae:	e9dd 0198 	ldrd	r0, r1, [sp, #608]	; 0x260
 80027b2:	f7fd fd91 	bl	80002d8 <__aeabi_dsub>
 80027b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80027ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80027bc:	9012      	str	r0, [sp, #72]	; 0x48
 80027be:	a38e      	add	r3, pc, #568	; (adr r3, 80029f8 <ICM20602_IMU_calibration2+0x358>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80027c8:	f7fe f9ce 	bl	8000b68 <__aeabi_dcmpgt>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	f000 82f3 	beq.w	8002db8 <ICM20602_IMU_calibration2+0x718>
    	printf("cal_len=%f\r\n",cal_len);
 80027d2:	ab16      	add	r3, sp, #88	; 0x58
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	4b8c      	ldr	r3, [pc, #560]	; (8002a08 <ICM20602_IMU_calibration2+0x368>)
 80027d8:	9304      	str	r3, [sp, #16]
 80027da:	ec59 8b1a 	vmov	r8, r9, d10
 80027de:	ab1c      	add	r3, sp, #112	; 0x70
 80027e0:	9303      	str	r3, [sp, #12]
 80027e2:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <ICM20602_IMU_calibration2+0x36c>)
 80027e4:	9305      	str	r3, [sp, #20]
 80027e6:	ee1a 2a10 	vmov	r2, s20
 80027ea:	464b      	mov	r3, r9
 80027ec:	4888      	ldr	r0, [pc, #544]	; (8002a10 <ICM20602_IMU_calibration2+0x370>)
 80027ee:	f8df b230 	ldr.w	fp, [pc, #560]	; 8002a20 <ICM20602_IMU_calibration2+0x380>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027f2:	4c88      	ldr	r4, [pc, #544]	; (8002a14 <ICM20602_IMU_calibration2+0x374>)
    	printf("cal_len=%f\r\n",cal_len);
 80027f4:	f008 f93e 	bl	800aa74 <iprintf>
    	for(j = 0; j < 3; j++){
 80027f8:	ee1a 2a10 	vmov	r2, s20
 80027fc:	4986      	ldr	r1, [pc, #536]	; (8002a18 <ICM20602_IMU_calibration2+0x378>)
 80027fe:	464b      	mov	r3, r9
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe f84b 	bl	800089c <__aeabi_ddiv>
 8002806:	ec41 0b19 	vmov	d9, r0, r1
 800280a:	ae22      	add	r6, sp, #136	; 0x88
 800280c:	ad5e      	add	r5, sp, #376	; 0x178
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800280e:	2700      	movs	r7, #0
 8002810:	2200      	movs	r2, #0
 8002812:	2110      	movs	r1, #16
 8002814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002818:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800281c:	f004 fd9c 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002820:	20bc      	movs	r0, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002822:	f8cd 8000 	str.w	r8, [sp]
 8002826:	2301      	movs	r3, #1
 8002828:	aa15      	add	r2, sp, #84	; 0x54
 800282a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800282c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002830:	4620      	mov	r0, r4
 8002832:	f005 fcf1 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002836:	2301      	movs	r3, #1
 8002838:	f8cd 8000 	str.w	r8, [sp]
 800283c:	aa15      	add	r2, sp, #84	; 0x54
 800283e:	a914      	add	r1, sp, #80	; 0x50
 8002840:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002842:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002846:	f005 fce7 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800284a:	2201      	movs	r2, #1
 800284c:	2110      	movs	r1, #16
 800284e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002852:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002856:	f004 fd7f 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2110      	movs	r1, #16
 800285e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002862:	f004 fd79 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002866:	20bb      	movs	r0, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002868:	f8cd 8000 	str.w	r8, [sp]
 800286c:	2301      	movs	r3, #1
 800286e:	aa15      	add	r2, sp, #84	; 0x54
 8002870:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002872:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002876:	4620      	mov	r0, r4
 8002878:	f005 fcce 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800287c:	2301      	movs	r3, #1
 800287e:	f8cd 8000 	str.w	r8, [sp]
 8002882:	aa15      	add	r2, sp, #84	; 0x54
 8002884:	a914      	add	r1, sp, #80	; 0x50
 8002886:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002888:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800288c:	f005 fcc4 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002890:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002894:	2201      	movs	r2, #1
 8002896:	2110      	movs	r1, #16
 8002898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289c:	f004 fd5c 	bl	8007358 <HAL_GPIO_WritePin>
    return((HiByte<<8) | LoByte);
 80028a0:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028a4:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <ICM20602_IMU_calibration2+0x37c>)
 80028a6:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <ICM20602_IMU_calibration2+0x368>)
 80028a8:	ed93 7a00 	vldr	s14, [r3]
 80028ac:	fa0f f989 	sxth.w	r9, r9
 80028b0:	ee07 9a90 	vmov	s15, r9
 80028b4:	ee27 7a08 	vmul.f32	s14, s14, s16
 80028b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028bc:	2110      	movs	r1, #16
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028c6:	edc2 7a00 	vstr	s15, [r2]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f004 fd44 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028d0:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80028d2:	20be      	movs	r0, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028d4:	460a      	mov	r2, r1
 80028d6:	f8cd 8000 	str.w	r8, [sp]
 80028da:	2301      	movs	r3, #1
 80028dc:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80028de:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028e2:	4620      	mov	r0, r4
 80028e4:	f005 fc98 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028e8:	a915      	add	r1, sp, #84	; 0x54
 80028ea:	2301      	movs	r3, #1
 80028ec:	460a      	mov	r2, r1
 80028ee:	f8cd 8000 	str.w	r8, [sp]
 80028f2:	a914      	add	r1, sp, #80	; 0x50
 80028f4:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80028f6:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028fa:	f005 fc8d 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028fe:	2201      	movs	r2, #1
 8002900:	2110      	movs	r1, #16
 8002902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002906:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800290a:	f004 fd25 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2110      	movs	r1, #16
 8002912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002916:	f004 fd1f 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800291a:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 800291c:	20bd      	movs	r0, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800291e:	460a      	mov	r2, r1
 8002920:	f8cd 8000 	str.w	r8, [sp]
 8002924:	2301      	movs	r3, #1
 8002926:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002928:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800292c:	4620      	mov	r0, r4
 800292e:	f005 fc73 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002932:	a915      	add	r1, sp, #84	; 0x54
 8002934:	2301      	movs	r3, #1
 8002936:	460a      	mov	r2, r1
 8002938:	f8cd 8000 	str.w	r8, [sp]
 800293c:	a914      	add	r1, sp, #80	; 0x50
 800293e:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002940:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002944:	f005 fc68 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002948:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800294c:	2201      	movs	r2, #1
 800294e:	2110      	movs	r1, #16
 8002950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002954:	f004 fd00 	bl	8007358 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 8002958:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <ICM20602_IMU_calibration2+0x37c>)
 800295e:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <ICM20602_IMU_calibration2+0x368>)
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	fa0f f989 	sxth.w	r9, r9
 8002968:	ee07 9a90 	vmov	s15, r9
 800296c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002974:	2110      	movs	r1, #16
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002976:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800297a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800297e:	edc2 7a01 	vstr	s15, [r2, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	f004 fce8 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002988:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 800298a:	20c0      	movs	r0, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800298c:	460a      	mov	r2, r1
 800298e:	f8cd 8000 	str.w	r8, [sp]
 8002992:	2301      	movs	r3, #1
 8002994:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002996:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800299a:	4620      	mov	r0, r4
 800299c:	f005 fc3c 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029a0:	a915      	add	r1, sp, #84	; 0x54
 80029a2:	2301      	movs	r3, #1
 80029a4:	460a      	mov	r2, r1
 80029a6:	f8cd 8000 	str.w	r8, [sp]
 80029aa:	a914      	add	r1, sp, #80	; 0x50
 80029ac:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80029ae:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029b2:	f005 fc31 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029b6:	2201      	movs	r2, #1
 80029b8:	2110      	movs	r1, #16
 80029ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80029be:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029c2:	f004 fcc9 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2110      	movs	r1, #16
 80029ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ce:	f004 fcc3 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029d2:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80029d4:	20bf      	movs	r0, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029d6:	460a      	mov	r2, r1
 80029d8:	f8cd 8000 	str.w	r8, [sp]
 80029dc:	2301      	movs	r3, #1
 80029de:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80029e0:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029e4:	4620      	mov	r0, r4
 80029e6:	f005 fc17 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029ea:	a915      	add	r1, sp, #84	; 0x54
 80029ec:	2301      	movs	r3, #1
 80029ee:	460a      	mov	r2, r1
 80029f0:	f8cd 8000 	str.w	r8, [sp]
 80029f4:	e016      	b.n	8002a24 <ICM20602_IMU_calibration2+0x384>
 80029f6:	bf00      	nop
 80029f8:	eb1c432d 	.word	0xeb1c432d
 80029fc:	3f1a36e2 	.word	0x3f1a36e2
 8002a00:	0800cc18 	.word	0x0800cc18
 8002a04:	411ce80a 	.word	0x411ce80a
 8002a08:	20000e84 	.word	0x20000e84
 8002a0c:	20000ef0 	.word	0x20000ef0
 8002a10:	0800cc2c 	.word	0x0800cc2c
 8002a14:	20000fac 	.word	0x20000fac
 8002a18:	3ff00000 	.word	0x3ff00000
 8002a1c:	20000d5c 	.word	0x20000d5c
 8002a20:	20000d90 	.word	0x20000d90
 8002a24:	a914      	add	r1, sp, #80	; 0x50
 8002a26:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a28:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a2c:	f005 fbf4 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002a30:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a34:	2201      	movs	r2, #1
 8002a36:	2110      	movs	r1, #16
 8002a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3c:	f004 fc8c 	bl	8007358 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 8002a40:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002a44:	4bc4      	ldr	r3, [pc, #784]	; (8002d58 <ICM20602_IMU_calibration2+0x6b8>)
 8002a46:	4ac5      	ldr	r2, [pc, #788]	; (8002d5c <ICM20602_IMU_calibration2+0x6bc>)
 8002a48:	ed93 7a00 	vldr	s14, [r3]
 8002a4c:	fa0f f989 	sxth.w	r9, r9
 8002a50:	ee07 9a90 	vmov	s15, r9
 8002a54:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a5c:	2110      	movs	r1, #16
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002a66:	edc2 7a02 	vstr	s15, [r2, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f004 fc74 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a70:	20c4      	movs	r0, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a72:	f8cd 8000 	str.w	r8, [sp]
 8002a76:	2301      	movs	r3, #1
 8002a78:	aa15      	add	r2, sp, #84	; 0x54
 8002a7a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a7c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a80:	4620      	mov	r0, r4
 8002a82:	f005 fbc9 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a86:	2301      	movs	r3, #1
 8002a88:	f8cd 8000 	str.w	r8, [sp]
 8002a8c:	aa15      	add	r2, sp, #84	; 0x54
 8002a8e:	a914      	add	r1, sp, #80	; 0x50
 8002a90:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a92:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a96:	f005 fbbf 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2110      	movs	r1, #16
 8002a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002aa2:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002aa6:	f004 fc57 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2110      	movs	r1, #16
 8002aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab2:	f004 fc51 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002ab6:	20c3      	movs	r0, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ab8:	f8cd 8000 	str.w	r8, [sp]
 8002abc:	2301      	movs	r3, #1
 8002abe:	aa15      	add	r2, sp, #84	; 0x54
 8002ac0:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002ac2:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f005 fba6 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002acc:	2301      	movs	r3, #1
 8002ace:	f8cd 8000 	str.w	r8, [sp]
 8002ad2:	aa15      	add	r2, sp, #84	; 0x54
 8002ad4:	a914      	add	r1, sp, #80	; 0x50
 8002ad6:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002ad8:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002adc:	f005 fb9c 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002ae0:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002ae4:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2110      	movs	r1, #16
 8002aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002af0:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002af4:	f004 fc30 	bl	8007358 <HAL_GPIO_WritePin>
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002af8:	ee07 9a90 	vmov	s15, r9
 8002afc:	ed9b 7a00 	vldr	s14, [fp]
 8002b00:	4b97      	ldr	r3, [pc, #604]	; (8002d60 <ICM20602_IMU_calibration2+0x6c0>)
 8002b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b06:	2200      	movs	r2, #0
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002b08:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b0c:	2110      	movs	r1, #16
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b16:	f004 fc1f 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b1a:	20c6      	movs	r0, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b1c:	f8cd 8000 	str.w	r8, [sp]
 8002b20:	2301      	movs	r3, #1
 8002b22:	aa15      	add	r2, sp, #84	; 0x54
 8002b24:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b26:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f005 fb74 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b30:	2301      	movs	r3, #1
 8002b32:	f8cd 8000 	str.w	r8, [sp]
 8002b36:	aa15      	add	r2, sp, #84	; 0x54
 8002b38:	a914      	add	r1, sp, #80	; 0x50
 8002b3a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b3c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b40:	f005 fb6a 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b44:	2201      	movs	r2, #1
 8002b46:	2110      	movs	r1, #16
 8002b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002b4c:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b50:	f004 fc02 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2110      	movs	r1, #16
 8002b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5c:	f004 fbfc 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b60:	20c5      	movs	r0, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b62:	f8cd 8000 	str.w	r8, [sp]
 8002b66:	2301      	movs	r3, #1
 8002b68:	aa15      	add	r2, sp, #84	; 0x54
 8002b6a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b6c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b70:	4620      	mov	r0, r4
 8002b72:	f005 fb51 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b76:	2301      	movs	r3, #1
 8002b78:	f8cd 8000 	str.w	r8, [sp]
 8002b7c:	aa15      	add	r2, sp, #84	; 0x54
 8002b7e:	a914      	add	r1, sp, #80	; 0x50
 8002b80:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b82:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b86:	f005 fb47 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002b8a:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002b8e:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b92:	2201      	movs	r2, #1
 8002b94:	2110      	movs	r1, #16
 8002b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002b9a:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b9e:	f004 fbdb 	bl	8007358 <HAL_GPIO_WritePin>
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002ba2:	ee07 9a90 	vmov	s15, r9
 8002ba6:	ed9b 7a00 	vldr	s14, [fp]
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <ICM20602_IMU_calibration2+0x6c0>)
 8002bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002bb0:	2200      	movs	r2, #0
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002bb6:	2110      	movs	r1, #16
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002bb8:	edc3 7a01 	vstr	s15, [r3, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc0:	f004 fbca 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002bc4:	20c8      	movs	r0, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002bc6:	f8cd 8000 	str.w	r8, [sp]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	aa15      	add	r2, sp, #84	; 0x54
 8002bce:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002bd0:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f005 fb1f 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f8cd 8000 	str.w	r8, [sp]
 8002be0:	aa15      	add	r2, sp, #84	; 0x54
 8002be2:	a914      	add	r1, sp, #80	; 0x50
 8002be4:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002be6:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002bea:	f005 fb15 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002bf6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002bfa:	f004 fbad 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2110      	movs	r1, #16
 8002c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c06:	f004 fba7 	bl	8007358 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002c0a:	20c7      	movs	r0, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c0c:	f8cd 8000 	str.w	r8, [sp]
 8002c10:	2301      	movs	r3, #1
 8002c12:	aa15      	add	r2, sp, #84	; 0x54
 8002c14:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002c16:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f005 fafc 	bl	8008218 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c20:	2301      	movs	r3, #1
 8002c22:	f8cd 8000 	str.w	r8, [sp]
 8002c26:	aa15      	add	r2, sp, #84	; 0x54
 8002c28:	a914      	add	r1, sp, #80	; 0x50
 8002c2a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002c2c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002c30:	f005 faf2 	bl	8008218 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002c34:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002c38:	ea49 2908 	orr.w	r9, r9, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2110      	movs	r1, #16
 8002c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c44:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002c48:	f004 fb86 	bl	8007358 <HAL_GPIO_WritePin>
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c4c:	ee07 9a90 	vmov	s15, r9
 8002c50:	ed9b 7a00 	vldr	s14, [fp]
 8002c54:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <ICM20602_IMU_calibration2+0x6c0>)
 8002c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    	for(j = 0; j < 3; j++){
 8002c5a:	3650      	adds	r6, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
    	for(j = 0; j < 3; j++){
 8002c60:	3550      	adds	r5, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002c62:	edc3 7a02 	vstr	s15, [r3, #8]
    		acc_sum[j]  += acc[j];
 8002c66:	9b04      	ldr	r3, [sp, #16]
 8002c68:	f853 0b04 	ldr.w	r0, [r3], #4
 8002c6c:	9304      	str	r3, [sp, #16]
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c78:	f7fd fc8e 	bl	8000598 <__aeabi_f2d>
 8002c7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002c80:	f7fd fb2c 	bl	80002dc <__adddf3>
 8002c84:	9b02      	ldr	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002c86:	9a05      	ldr	r2, [sp, #20]
    		acc_sum[j]  += acc[j];
 8002c88:	4680      	mov	r8, r0
 8002c8a:	4689      	mov	r9, r1
 8002c8c:	e8e3 8902 	strd	r8, r9, [r3], #8
    		gyro_sum[j] += gyro[j];
 8002c90:	f852 0b04 	ldr.w	r0, [r2], #4
 8002c94:	9205      	str	r2, [sp, #20]
 8002c96:	9a03      	ldr	r2, [sp, #12]
    		acc_sum[j]  += acc[j];
 8002c98:	9302      	str	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002c9a:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002c9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ca2:	f7fd fc79 	bl	8000598 <__aeabi_f2d>
 8002ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002caa:	f7fd fb17 	bl	80002dc <__adddf3>
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cae:	464b      	mov	r3, r9
    		gyro_sum[j] += gyro[j];
 8002cb0:	4689      	mov	r9, r1
 8002cb2:	9903      	ldr	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cb4:	4642      	mov	r2, r8
    		gyro_sum[j] += gyro[j];
 8002cb6:	4680      	mov	r8, r0
 8002cb8:	e8e1 8902 	strd	r8, r9, [r1], #8
 8002cbc:	9103      	str	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cbe:	ec51 0b19 	vmov	r0, r1, d9
 8002cc2:	f7fd fcc1 	bl	8000648 <__aeabi_dmul>
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002cc6:	4642      	mov	r2, r8
 8002cc8:	464b      	mov	r3, r9
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002cca:	4680      	mov	r8, r0
 8002ccc:	4689      	mov	r9, r1
 8002cce:	e946 8914 	strd	r8, r9, [r6, #-80]	; 0x50
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002cd2:	ec51 0b19 	vmov	r0, r1, d9
 8002cd6:	f7fd fcb7 	bl	8000648 <__aeabi_dmul>
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cda:	e956 2304 	ldrd	r2, r3, [r6, #-16]
 8002cde:	e946 2302 	strd	r2, r3, [r6, #-8]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002ce2:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8002ce6:	e945 2302 	strd	r2, r3, [r5, #-8]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cea:	e956 2306 	ldrd	r2, r3, [r6, #-24]
 8002cee:	e946 2304 	strd	r2, r3, [r6, #-16]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002cf2:	e955 2306 	ldrd	r2, r3, [r5, #-24]
 8002cf6:	e945 2304 	strd	r2, r3, [r5, #-16]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cfa:	e956 2308 	ldrd	r2, r3, [r6, #-32]
 8002cfe:	e946 2306 	strd	r2, r3, [r6, #-24]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d02:	e955 2308 	ldrd	r2, r3, [r5, #-32]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002d06:	e945 0114 	strd	r0, r1, [r5, #-80]	; 0x50
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d0a:	e945 2306 	strd	r2, r3, [r5, #-24]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d0e:	e956 230a 	ldrd	r2, r3, [r6, #-40]	; 0x28
 8002d12:	e946 2308 	strd	r2, r3, [r6, #-32]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d16:	e955 230a 	ldrd	r2, r3, [r5, #-40]	; 0x28
 8002d1a:	e945 2308 	strd	r2, r3, [r5, #-32]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d1e:	e956 230c 	ldrd	r2, r3, [r6, #-48]	; 0x30
 8002d22:	e946 230a 	strd	r2, r3, [r6, #-40]	; 0x28
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d26:	e955 230c 	ldrd	r2, r3, [r5, #-48]	; 0x30
 8002d2a:	e945 230a 	strd	r2, r3, [r5, #-40]	; 0x28
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d2e:	e956 230e 	ldrd	r2, r3, [r6, #-56]	; 0x38
 8002d32:	e946 230c 	strd	r2, r3, [r6, #-48]	; 0x30
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d36:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 8002d3a:	e945 230c 	strd	r2, r3, [r5, #-48]	; 0x30
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d3e:	e956 2310 	ldrd	r2, r3, [r6, #-64]	; 0x40
 8002d42:	e946 230e 	strd	r2, r3, [r6, #-56]	; 0x38
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d46:	e955 2310 	ldrd	r2, r3, [r5, #-64]	; 0x40
 8002d4a:	e945 230e 	strd	r2, r3, [r5, #-56]	; 0x38
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d4e:	e956 2312 	ldrd	r2, r3, [r6, #-72]	; 0x48
 8002d52:	e946 2310 	strd	r2, r3, [r6, #-64]	; 0x40
 8002d56:	e005      	b.n	8002d64 <ICM20602_IMU_calibration2+0x6c4>
 8002d58:	20000d5c 	.word	0x20000d5c
 8002d5c:	20000e84 	.word	0x20000e84
 8002d60:	20000ef0 	.word	0x20000ef0
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d64:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 8002d68:	e945 2310 	strd	r2, r3, [r5, #-64]	; 0x40
    	for(j = 0; j < 3; j++){
 8002d6c:	9b02      	ldr	r3, [sp, #8]
 8002d6e:	aa1c      	add	r2, sp, #112	; 0x70
 8002d70:	4293      	cmp	r3, r2
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002d72:	e946 8912 	strd	r8, r9, [r6, #-72]	; 0x48
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002d76:	e945 0112 	strd	r0, r1, [r5, #-72]	; 0x48
    	for(j = 0; j < 3; j++){
 8002d7a:	f47f ad49 	bne.w	8002810 <ICM20602_IMU_calibration2+0x170>
    	cal_len ++;
 8002d7e:	ec55 4b1a 	vmov	r4, r5, d10
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <ICM20602_IMU_calibration2+0x7e8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	4629      	mov	r1, r5
 8002d88:	ee1a 0a10 	vmov	r0, s20
 8002d8c:	f7fd faa6 	bl	80002dc <__adddf3>
    	if(cal_len>5000){break;}
 8002d90:	a33b      	add	r3, pc, #236	; (adr r3, 8002e80 <ICM20602_IMU_calibration2+0x7e0>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
    	cal_len ++;
 8002d96:	4606      	mov	r6, r0
 8002d98:	460f      	mov	r7, r1
    	if(cal_len>5000){break;}
 8002d9a:	ee1a 0a10 	vmov	r0, s20
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fee2 	bl	8000b68 <__aeabi_dcmpgt>
    	cal_len ++;
 8002da4:	4634      	mov	r4, r6
 8002da6:	463d      	mov	r5, r7
    	if(cal_len>5000){break;}
 8002da8:	b988      	cbnz	r0, 8002dce <ICM20602_IMU_calibration2+0x72e>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002daa:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8002dae:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
    	cal_len ++;
 8002db2:	ec47 6b1a 	vmov	d10, r6, r7
 8002db6:	e49f      	b.n	80026f8 <ICM20602_IMU_calibration2+0x58>
		|| cal_len < 500.0
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <ICM20602_IMU_calibration2+0x7ec>)
 8002dba:	ec51 0b1a 	vmov	r0, r1, d10
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f7fd feb4 	bl	8000b2c <__aeabi_dcmplt>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f47f ad04 	bne.w	80027d2 <ICM20602_IMU_calibration2+0x132>
 8002dca:	ec55 4b1a 	vmov	r4, r5, d10
    if(cal_len==500){NVIC_SystemReset();}
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <ICM20602_IMU_calibration2+0x7ec>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	f7fd fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d143      	bne.n	8002e66 <ICM20602_IMU_calibration2+0x7c6>
 8002dde:	4622      	mov	r2, r4
 8002de0:	462b      	mov	r3, r5
 8002de2:	4929      	ldr	r1, [pc, #164]	; (8002e88 <ICM20602_IMU_calibration2+0x7e8>)
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002de4:	4f2a      	ldr	r7, [pc, #168]	; (8002e90 <ICM20602_IMU_calibration2+0x7f0>)
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002de6:	4e2b      	ldr	r6, [pc, #172]	; (8002e94 <ICM20602_IMU_calibration2+0x7f4>)
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd fd57 	bl	800089c <__aeabi_ddiv>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002dee:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002df2:	4604      	mov	r4, r0
 8002df4:	460d      	mov	r5, r1
 8002df6:	f7fd fc27 	bl	8000648 <__aeabi_dmul>
 8002dfa:	f7fd ff1d 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002dfe:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e02:	6038      	str	r0, [r7, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e04:	4629      	mov	r1, r5
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7fd fc1e 	bl	8000648 <__aeabi_dmul>
 8002e0c:	f7fd ff14 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e10:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e14:	6030      	str	r0, [r6, #0]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e16:	4629      	mov	r1, r5
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7fd fc15 	bl	8000648 <__aeabi_dmul>
 8002e1e:	f7fd ff0b 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e22:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e26:	6078      	str	r0, [r7, #4]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f7fd fc0c 	bl	8000648 <__aeabi_dmul>
 8002e30:	f7fd ff02 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e34:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e38:	6070      	str	r0, [r6, #4]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7fd fc03 	bl	8000648 <__aeabi_dmul>
 8002e42:	f7fd fef9 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e46:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002e4a:	60b8      	str	r0, [r7, #8]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7fd fbfa 	bl	8000648 <__aeabi_dmul>
 8002e54:	f7fd fef0 	bl	8000c38 <__aeabi_d2f>
 8002e58:	60b0      	str	r0, [r6, #8]
}
 8002e5a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002e5e:	ecbd 8b06 	vpop	{d8-d10}
 8002e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e66:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e6a:	490b      	ldr	r1, [pc, #44]	; (8002e98 <ICM20602_IMU_calibration2+0x7f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <ICM20602_IMU_calibration2+0x7fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e6e:	68ca      	ldr	r2, [r1, #12]
 8002e70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
 8002e78:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e7c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002e7e:	e7fd      	b.n	8002e7c <ICM20602_IMU_calibration2+0x7dc>
 8002e80:	00000000 	.word	0x00000000
 8002e84:	40b38700 	.word	0x40b38700
 8002e88:	3ff00000 	.word	0x3ff00000
 8002e8c:	407f4000 	.word	0x407f4000
 8002e90:	20000e9c 	.word	0x20000e9c
 8002e94:	20000f08 	.word	0x20000f08
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	05fa0004 	.word	0x05fa0004

08002ea0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void __io_putchar(uint8_t ch) {
 8002ea0:	b500      	push	{lr}
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002ea2:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	4684      	mov	ip, r0
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f10d 0107 	add.w	r1, sp, #7
 8002eae:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <__io_putchar+0x20>)
void __io_putchar(uint8_t ch) {
 8002eb0:	f88d c007 	strb.w	ip, [sp, #7]
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002eb4:	f006 fe70 	bl	8009b98 <HAL_UART_Transmit>
}
 8002eb8:	b003      	add	sp, #12
 8002eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ebe:	bf00      	nop
 8002ec0:	20001228 	.word	0x20001228

08002ec4 <HAL_GetTick>:
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2) ;
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
 {
   return uwTick;
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <HAL_GetTick+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 }
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	200013d8 	.word	0x200013d8

08002ed0 <maintask_run>:


}


void maintask_run(){
 8002ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	ed2d 8b04 	vpush	{d8-d9}
	//theta_target=0.0;
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002ed8:	4ad5      	ldr	r2, [pc, #852]	; (8003230 <maintask_run+0x360>)
 8002eda:	4bd6      	ldr	r3, [pc, #856]	; (8003234 <maintask_run+0x364>)
 8002edc:	6810      	ldr	r0, [r2, #0]
 8002ede:	edd3 8a00 	vldr	s17, [r3]
void maintask_run(){
 8002ee2:	b083      	sub	sp, #12
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002ee4:	f7fd fb58 	bl	8000598 <__aeabi_f2d>
 8002ee8:	a3c9      	add	r3, pc, #804	; (adr r3, 8003210 <maintask_run+0x340>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f7fd fbab 	bl	8000648 <__aeabi_dmul>
 8002ef2:	f7fd fea1 	bl	8000c38 <__aeabi_d2f>
 8002ef6:	4603      	mov	r3, r0
long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

float normalizeAngle(float angle_rad) {
    while (angle_rad > M_PI) {
 8002ef8:	ee18 0a90 	vmov	r0, s17
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002efc:	ee08 3a10 	vmov	s16, r3
    while (angle_rad > M_PI) {
 8002f00:	f7fd fb4a 	bl	8000598 <__aeabi_f2d>
 8002f04:	a3c4      	add	r3, pc, #784	; (adr r3, 8003218 <maintask_run+0x348>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	4680      	mov	r8, r0
 8002f0c:	4689      	mov	r9, r1
 8002f0e:	f7fd fe2b 	bl	8000b68 <__aeabi_dcmpgt>
 8002f12:	b1c8      	cbz	r0, 8002f48 <maintask_run+0x78>
        angle_rad -= 2.0f * M_PI;
 8002f14:	a7c2      	add	r7, pc, #776	; (adr r7, 8003220 <maintask_run+0x350>)
 8002f16:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8002f1a:	a5bf      	add	r5, pc, #764	; (adr r5, 8003218 <maintask_run+0x348>)
 8002f1c:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8002f20:	4632      	mov	r2, r6
 8002f22:	463b      	mov	r3, r7
 8002f24:	4640      	mov	r0, r8
 8002f26:	4649      	mov	r1, r9
 8002f28:	f7fd f9d6 	bl	80002d8 <__aeabi_dsub>
 8002f2c:	f7fd fe84 	bl	8000c38 <__aeabi_d2f>
 8002f30:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8002f34:	f7fd fb30 	bl	8000598 <__aeabi_f2d>
 8002f38:	4622      	mov	r2, r4
 8002f3a:	462b      	mov	r3, r5
 8002f3c:	4680      	mov	r8, r0
 8002f3e:	4689      	mov	r9, r1
 8002f40:	f7fd fe12 	bl	8000b68 <__aeabi_dcmpgt>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d1eb      	bne.n	8002f20 <maintask_run+0x50>
    }
    while (angle_rad < -M_PI) {
 8002f48:	a3b7      	add	r3, pc, #732	; (adr r3, 8003228 <maintask_run+0x358>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	4640      	mov	r0, r8
 8002f50:	4649      	mov	r1, r9
 8002f52:	f7fd fdeb 	bl	8000b2c <__aeabi_dcmplt>
 8002f56:	b1c8      	cbz	r0, 8002f8c <maintask_run+0xbc>
        angle_rad += 2.0f * M_PI;
 8002f58:	a7b1      	add	r7, pc, #708	; (adr r7, 8003220 <maintask_run+0x350>)
 8002f5a:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8002f5e:	a5b2      	add	r5, pc, #712	; (adr r5, 8003228 <maintask_run+0x358>)
 8002f60:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8002f64:	4632      	mov	r2, r6
 8002f66:	463b      	mov	r3, r7
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd f9b6 	bl	80002dc <__adddf3>
 8002f70:	f7fd fe62 	bl	8000c38 <__aeabi_d2f>
 8002f74:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8002f78:	f7fd fb0e 	bl	8000598 <__aeabi_f2d>
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	462b      	mov	r3, r5
 8002f80:	4680      	mov	r8, r0
 8002f82:	4689      	mov	r9, r1
 8002f84:	f7fd fdd2 	bl	8000b2c <__aeabi_dcmplt>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d1eb      	bne.n	8002f64 <maintask_run+0x94>
    while (angle_rad > M_PI) {
 8002f8c:	ee18 0a10 	vmov	r0, s16
 8002f90:	f7fd fb02 	bl	8000598 <__aeabi_f2d>
 8002f94:	a3a0      	add	r3, pc, #640	; (adr r3, 8003218 <maintask_run+0x348>)
 8002f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9a:	4682      	mov	sl, r0
 8002f9c:	468b      	mov	fp, r1
 8002f9e:	f7fd fde3 	bl	8000b68 <__aeabi_dcmpgt>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	f000 81fe 	beq.w	80033a4 <maintask_run+0x4d4>
        angle_rad -= 2.0f * M_PI;
 8002fa8:	a79d      	add	r7, pc, #628	; (adr r7, 8003220 <maintask_run+0x350>)
 8002faa:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8002fae:	4654      	mov	r4, sl
 8002fb0:	465d      	mov	r5, fp
        angle_rad -= 2.0f * M_PI;
 8002fb2:	4632      	mov	r2, r6
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4629      	mov	r1, r5
 8002fba:	f7fd f98d 	bl	80002d8 <__aeabi_dsub>
 8002fbe:	f7fd fe3b 	bl	8000c38 <__aeabi_d2f>
 8002fc2:	ee09 0a10 	vmov	s18, r0
    while (angle_rad > M_PI) {
 8002fc6:	f7fd fae7 	bl	8000598 <__aeabi_f2d>
 8002fca:	a393      	add	r3, pc, #588	; (adr r3, 8003218 <maintask_run+0x348>)
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460d      	mov	r5, r1
 8002fd4:	f7fd fdc8 	bl	8000b68 <__aeabi_dcmpgt>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d1ea      	bne.n	8002fb2 <maintask_run+0xe2>
    while (angle_rad < -M_PI) {
 8002fdc:	a392      	add	r3, pc, #584	; (adr r3, 8003228 <maintask_run+0x358>)
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f7fd fda1 	bl	8000b2c <__aeabi_dcmplt>
 8002fea:	b1b8      	cbz	r0, 800301c <maintask_run+0x14c>
        angle_rad += 2.0f * M_PI;
 8002fec:	a78c      	add	r7, pc, #560	; (adr r7, 8003220 <maintask_run+0x350>)
 8002fee:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002ff2:	4632      	mov	r2, r6
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	f7fd f96f 	bl	80002dc <__adddf3>
 8002ffe:	f7fd fe1b 	bl	8000c38 <__aeabi_d2f>
 8003002:	ee09 0a10 	vmov	s18, r0
    while (angle_rad < -M_PI) {
 8003006:	f7fd fac7 	bl	8000598 <__aeabi_f2d>
 800300a:	a387      	add	r3, pc, #540	; (adr r3, 8003228 <maintask_run+0x358>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	4604      	mov	r4, r0
 8003012:	460d      	mov	r5, r1
 8003014:	f7fd fd8a 	bl	8000b2c <__aeabi_dcmplt>
 8003018:	2800      	cmp	r0, #0
 800301a:	d1ea      	bne.n	8002ff2 <maintask_run+0x122>
}

float getAngleDiff(float angle_rad1, float angle_rad2){
    angle_rad1 = normalizeAngle(angle_rad1);
    angle_rad2 = normalizeAngle(angle_rad2);
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 800301c:	ee78 7ac9 	vsub.f32	s15, s17, s18
 8003020:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003024:	ee17 3a10 	vmov	r3, s14
 8003028:	2b00      	cmp	r3, #0
 800302a:	bfb8      	it	lt
 800302c:	425b      	neglt	r3, r3
 800302e:	2b03      	cmp	r3, #3
 8003030:	dd14      	ble.n	800305c <maintask_run+0x18c>
    	if(angle_rad1 > angle_rad2){
 8003032:	eef4 8ac9 	vcmpe.f32	s17, s18
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 800303a:	a379      	add	r3, pc, #484	; (adr r3, 8003220 <maintask_run+0x350>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	4640      	mov	r0, r8
 8003042:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 8003044:	f300 8175 	bgt.w	8003332 <maintask_run+0x462>
    	}else{
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8003048:	f7fd f948 	bl	80002dc <__adddf3>
 800304c:	4622      	mov	r2, r4
 800304e:	462b      	mov	r3, r5
 8003050:	f7fd f942 	bl	80002d8 <__aeabi_dsub>
 8003054:	f7fd fdf0 	bl	8000c38 <__aeabi_d2f>
 8003058:	ee07 0a90 	vmov	s15, r0
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 800305c:	ee17 0a90 	vmov	r0, s15
 8003060:	f7fd fa9a 	bl	8000598 <__aeabi_f2d>
 8003064:	2200      	movs	r2, #0
 8003066:	4b74      	ldr	r3, [pc, #464]	; (8003238 <maintask_run+0x368>)
 8003068:	f7fd faee 	bl	8000648 <__aeabi_dmul>
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 800306c:	4b73      	ldr	r3, [pc, #460]	; (800323c <maintask_run+0x36c>)
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 800306e:	ec41 0b19 	vmov	d9, r0, r1
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	f7fd fa90 	bl	8000598 <__aeabi_f2d>
 8003078:	a365      	add	r3, pc, #404	; (adr r3, 8003210 <maintask_run+0x340>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fae3 	bl	8000648 <__aeabi_dmul>
 8003082:	f7fd fdd9 	bl	8000c38 <__aeabi_d2f>
    while (angle_rad > M_PI) {
 8003086:	a364      	add	r3, pc, #400	; (adr r3, 8003218 <maintask_run+0x348>)
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 800308c:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8003090:	4659      	mov	r1, fp
 8003092:	4650      	mov	r0, sl
 8003094:	f7fd fd68 	bl	8000b68 <__aeabi_dcmpgt>
 8003098:	b1c8      	cbz	r0, 80030ce <maintask_run+0x1fe>
        angle_rad -= 2.0f * M_PI;
 800309a:	a761      	add	r7, pc, #388	; (adr r7, 8003220 <maintask_run+0x350>)
 800309c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 80030a0:	a55d      	add	r5, pc, #372	; (adr r5, 8003218 <maintask_run+0x348>)
 80030a2:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 80030a6:	4632      	mov	r2, r6
 80030a8:	463b      	mov	r3, r7
 80030aa:	4650      	mov	r0, sl
 80030ac:	4659      	mov	r1, fp
 80030ae:	f7fd f913 	bl	80002d8 <__aeabi_dsub>
 80030b2:	f7fd fdc1 	bl	8000c38 <__aeabi_d2f>
 80030b6:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 80030ba:	f7fd fa6d 	bl	8000598 <__aeabi_f2d>
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	4682      	mov	sl, r0
 80030c4:	468b      	mov	fp, r1
 80030c6:	f7fd fd4f 	bl	8000b68 <__aeabi_dcmpgt>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d1eb      	bne.n	80030a6 <maintask_run+0x1d6>
    while (angle_rad < -M_PI) {
 80030ce:	a356      	add	r3, pc, #344	; (adr r3, 8003228 <maintask_run+0x358>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	4650      	mov	r0, sl
 80030d6:	4659      	mov	r1, fp
 80030d8:	f7fd fd28 	bl	8000b2c <__aeabi_dcmplt>
 80030dc:	b1c8      	cbz	r0, 8003112 <maintask_run+0x242>
        angle_rad += 2.0f * M_PI;
 80030de:	a750      	add	r7, pc, #320	; (adr r7, 8003220 <maintask_run+0x350>)
 80030e0:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80030e4:	a550      	add	r5, pc, #320	; (adr r5, 8003228 <maintask_run+0x358>)
 80030e6:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 80030ea:	4632      	mov	r2, r6
 80030ec:	463b      	mov	r3, r7
 80030ee:	4650      	mov	r0, sl
 80030f0:	4659      	mov	r1, fp
 80030f2:	f7fd f8f3 	bl	80002dc <__adddf3>
 80030f6:	f7fd fd9f 	bl	8000c38 <__aeabi_d2f>
 80030fa:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 80030fe:	f7fd fa4b 	bl	8000598 <__aeabi_f2d>
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	4682      	mov	sl, r0
 8003108:	468b      	mov	fp, r1
 800310a:	f7fd fd0f 	bl	8000b2c <__aeabi_dcmplt>
 800310e:	2800      	cmp	r0, #0
 8003110:	d1eb      	bne.n	80030ea <maintask_run+0x21a>
    while (angle_rad > M_PI) {
 8003112:	ee18 0a90 	vmov	r0, s17
 8003116:	f7fd fa3f 	bl	8000598 <__aeabi_f2d>
 800311a:	a33f      	add	r3, pc, #252	; (adr r3, 8003218 <maintask_run+0x348>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	4606      	mov	r6, r0
 8003122:	460f      	mov	r7, r1
 8003124:	f7fd fd20 	bl	8000b68 <__aeabi_dcmpgt>
 8003128:	b1d0      	cbz	r0, 8003160 <maintask_run+0x290>
        angle_rad -= 2.0f * M_PI;
 800312a:	a53d      	add	r5, pc, #244	; (adr r5, 8003220 <maintask_run+0x350>)
 800312c:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 8003130:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 8003134:	e9d9 8900 	ldrd	r8, r9, [r9]
        angle_rad -= 2.0f * M_PI;
 8003138:	4622      	mov	r2, r4
 800313a:	462b      	mov	r3, r5
 800313c:	4630      	mov	r0, r6
 800313e:	4639      	mov	r1, r7
 8003140:	f7fd f8ca 	bl	80002d8 <__aeabi_dsub>
 8003144:	f7fd fd78 	bl	8000c38 <__aeabi_d2f>
 8003148:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 800314c:	f7fd fa24 	bl	8000598 <__aeabi_f2d>
 8003150:	4642      	mov	r2, r8
 8003152:	464b      	mov	r3, r9
 8003154:	4606      	mov	r6, r0
 8003156:	460f      	mov	r7, r1
 8003158:	f7fd fd06 	bl	8000b68 <__aeabi_dcmpgt>
 800315c:	2800      	cmp	r0, #0
 800315e:	d1eb      	bne.n	8003138 <maintask_run+0x268>
    while (angle_rad < -M_PI) {
 8003160:	a331      	add	r3, pc, #196	; (adr r3, 8003228 <maintask_run+0x358>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	4630      	mov	r0, r6
 8003168:	4639      	mov	r1, r7
 800316a:	f7fd fcdf 	bl	8000b2c <__aeabi_dcmplt>
 800316e:	b1d0      	cbz	r0, 80031a6 <maintask_run+0x2d6>
        angle_rad += 2.0f * M_PI;
 8003170:	a52b      	add	r5, pc, #172	; (adr r5, 8003220 <maintask_run+0x350>)
 8003172:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 8003176:	f20f 09b0 	addw	r9, pc, #176	; 0xb0
 800317a:	e9d9 8900 	ldrd	r8, r9, [r9]
        angle_rad += 2.0f * M_PI;
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	4630      	mov	r0, r6
 8003184:	4639      	mov	r1, r7
 8003186:	f7fd f8a9 	bl	80002dc <__adddf3>
 800318a:	f7fd fd55 	bl	8000c38 <__aeabi_d2f>
 800318e:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8003192:	f7fd fa01 	bl	8000598 <__aeabi_f2d>
 8003196:	4642      	mov	r2, r8
 8003198:	464b      	mov	r3, r9
 800319a:	4606      	mov	r6, r0
 800319c:	460f      	mov	r7, r1
 800319e:	f7fd fcc5 	bl	8000b2c <__aeabi_dcmplt>
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1eb      	bne.n	800317e <maintask_run+0x2ae>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 80031a6:	ee78 7a68 	vsub.f32	s15, s16, s17
 80031aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80031ae:	ee17 3a10 	vmov	r3, s14
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bfb8      	it	lt
 80031b6:	425b      	neglt	r3, r3
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	dd14      	ble.n	80031e6 <maintask_run+0x316>
    	if(angle_rad1 > angle_rad2){
 80031bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80031c4:	a316      	add	r3, pc, #88	; (adr r3, 8003220 <maintask_run+0x350>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	4650      	mov	r0, sl
 80031cc:	4659      	mov	r1, fp
    	if(angle_rad1 > angle_rad2){
 80031ce:	f300 80ad 	bgt.w	800332c <maintask_run+0x45c>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 80031d2:	f7fd f883 	bl	80002dc <__adddf3>
 80031d6:	4632      	mov	r2, r6
 80031d8:	463b      	mov	r3, r7
 80031da:	f7fd f87d 	bl	80002d8 <__aeabi_dsub>
 80031de:	f7fd fd2b 	bl	8000c38 <__aeabi_d2f>
 80031e2:	ee07 0a90 	vmov	s15, r0
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 80031e6:	ee17 0a90 	vmov	r0, s15
 80031ea:	f7fd f9d5 	bl	8000598 <__aeabi_f2d>
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <maintask_run+0x370>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f7fd fa29 	bl	8000648 <__aeabi_dmul>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	ec51 0b19 	vmov	r0, r1, d9
 80031fe:	f7fd f86b 	bl	80002d8 <__aeabi_dsub>
 8003202:	f7fd fd19 	bl	8000c38 <__aeabi_d2f>
 8003206:	ee08 0a10 	vmov	s16, r0
 800320a:	e01b      	b.n	8003244 <maintask_run+0x374>
 800320c:	f3af 8000 	nop.w
 8003210:	a2529d39 	.word	0xa2529d39
 8003214:	3f91df46 	.word	0x3f91df46
 8003218:	54442d18 	.word	0x54442d18
 800321c:	400921fb 	.word	0x400921fb
 8003220:	54442d18 	.word	0x54442d18
 8003224:	401921fb 	.word	0x401921fb
 8003228:	54442d18 	.word	0x54442d18
 800322c:	c00921fb 	.word	0xc00921fb
 8003230:	20000fa4 	.word	0x20000fa4
 8003234:	20000f90 	.word	0x20000f90
 8003238:	401c0000 	.word	0x401c0000
 800323c:	20000fa8 	.word	0x20000fa8
 8003240:	403e0000 	.word	0x403e0000
	if(omega>6*M_PI){omega=6*M_PI;}
 8003244:	f7fd f9a8 	bl	8000598 <__aeabi_f2d>
 8003248:	a371      	add	r3, pc, #452	; (adr r3, 8003410 <maintask_run+0x540>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	4604      	mov	r4, r0
 8003250:	460d      	mov	r5, r1
 8003252:	f7fd fc89 	bl	8000b68 <__aeabi_dcmpgt>
 8003256:	2800      	cmp	r0, #0
 8003258:	f000 8092 	beq.w	8003380 <maintask_run+0x4b0>
 800325c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80033c8 <maintask_run+0x4f8>
 8003260:	4b5a      	ldr	r3, [pc, #360]	; (80033cc <maintask_run+0x4fc>)
 8003262:	eeb0 8a67 	vmov.f32	s16, s15
 8003266:	edc3 7a00 	vstr	s15, [r3]
	omni_move(vel_surge, vel_sway, omega,1.0);
 800326a:	4b59      	ldr	r3, [pc, #356]	; (80033d0 <maintask_run+0x500>)
 800326c:	4a59      	ldr	r2, [pc, #356]	; (80033d4 <maintask_run+0x504>)
 800326e:	ed93 0a00 	vldr	s0, [r3]
 8003272:	edd2 0a00 	vldr	s1, [r2]
			if(ball[0]==1){
 8003276:	4c58      	ldr	r4, [pc, #352]	; (80033d8 <maintask_run+0x508>)
	omni_move(vel_surge, vel_sway, omega,1.0);
 8003278:	eeb0 1a48 	vmov.f32	s2, s16
 800327c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003280:	f001 feaa 	bl	8004fd8 <omni_move>
	  if(kick_power>0){
 8003284:	4b55      	ldr	r3, [pc, #340]	; (80033dc <maintask_run+0x50c>)
 8003286:	edd3 7a00 	vldr	s15, [r3]
 800328a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	f340 8085 	ble.w	80033a0 <maintask_run+0x4d0>
			if(ball[0]==1){
 8003296:	7825      	ldrb	r5, [r4, #0]
				if(kick_state==0){
 8003298:	4e51      	ldr	r6, [pc, #324]	; (80033e0 <maintask_run+0x510>)
			if(ball[0]==1){
 800329a:	2d01      	cmp	r5, #1
 800329c:	d057      	beq.n	800334e <maintask_run+0x47e>
			if(kick_state==1){
 800329e:	6833      	ldr	r3, [r6, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d049      	beq.n	8003338 <maintask_run+0x468>
	  if(chipEN==1){
 80032a4:	4d4f      	ldr	r5, [pc, #316]	; (80033e4 <maintask_run+0x514>)
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80032a6:	4f50      	ldr	r7, [pc, #320]	; (80033e8 <maintask_run+0x518>)
	  if(chipEN==1){
 80032a8:	7829      	ldrb	r1, [r5, #0]
 80032aa:	2901      	cmp	r1, #1
		  actuator_kicker(2, 0);
 80032ac:	bf18      	it	ne
 80032ae:	2100      	movne	r1, #0
 80032b0:	2002      	movs	r0, #2
 80032b2:	f7fd ff3b 	bl	800112c <actuator_kicker>
	  actuator_kicker(1, 1);
 80032b6:	2101      	movs	r1, #1
 80032b8:	4608      	mov	r0, r1
 80032ba:	f7fd ff37 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(250.0);
 80032be:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80033ec <maintask_run+0x51c>
 80032c2:	f7fd ff13 	bl	80010ec <actuator_kicker_voltage>
	  actuator_motor5(drible_power,1.0);
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <maintask_run+0x520>)
 80032c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80032cc:	ed93 0a00 	vldr	s0, [r3]
 80032d0:	f7fd fef0 	bl	80010b4 <actuator_motor5>
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80032d4:	edd7 7a00 	vldr	s15, [r7]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <maintask_run+0x524>)
	  TX_data_UART[0]=254;
 80032da:	4947      	ldr	r1, [pc, #284]	; (80033f8 <maintask_run+0x528>)
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80032dc:	ed93 7a04 	vldr	s14, [r3, #16]
	  TX_data_UART[6]=kick_state;
 80032e0:	6832      	ldr	r2, [r6, #0]
 80032e2:	718a      	strb	r2, [r1, #6]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80032e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  TX_data_UART[5]=chipEN;
 80032e8:	7828      	ldrb	r0, [r5, #0]
 80032ea:	7148      	strb	r0, [r1, #5]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80032ec:	ee17 3a90 	vmov	r3, s15
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80032f0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80032f4:	4841      	ldr	r0, [pc, #260]	; (80033fc <maintask_run+0x52c>)
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80032f6:	ee17 2a90 	vmov	r2, s15
 80032fa:	71ca      	strb	r2, [r1, #7]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80032fc:	f503 72b4 	add.w	r2, r3, #360	; 0x168
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003300:	3368      	adds	r3, #104	; 0x68
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 8003302:	704b      	strb	r3, [r1, #1]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 8003304:	1213      	asrs	r3, r2, #8
	  TX_data_UART[4]=ball[1];
 8003306:	7862      	ldrb	r2, [r4, #1]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 8003308:	708b      	strb	r3, [r1, #2]
	  TX_data_UART[4]=ball[1];
 800330a:	710a      	strb	r2, [r1, #4]
	  TX_data_UART[3]=ball[0];
 800330c:	7823      	ldrb	r3, [r4, #0]
 800330e:	70cb      	strb	r3, [r1, #3]
	  TX_data_UART[0]=254;
 8003310:	22fe      	movs	r2, #254	; 0xfe
 8003312:	700a      	strb	r2, [r1, #0]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8003314:	23ff      	movs	r3, #255	; 0xff
 8003316:	2208      	movs	r2, #8
 8003318:	f006 fc3e 	bl	8009b98 <HAL_UART_Transmit>
	  yawAngle_temp=yawAngle;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4a38      	ldr	r2, [pc, #224]	; (8003400 <maintask_run+0x530>)
 8003320:	6013      	str	r3, [r2, #0]
}
 8003322:	b003      	add	sp, #12
 8003324:	ecbd 8b04 	vpop	{d8-d9}
 8003328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 800332c:	f7fc ffd4 	bl	80002d8 <__aeabi_dsub>
 8003330:	e751      	b.n	80031d6 <maintask_run+0x306>
 8003332:	f7fc ffd1 	bl	80002d8 <__aeabi_dsub>
 8003336:	e689      	b.n	800304c <maintask_run+0x17c>
				kick_time++;
 8003338:	4b32      	ldr	r3, [pc, #200]	; (8003404 <maintask_run+0x534>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	3201      	adds	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
				if(kick_time>100){
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	2a64      	cmp	r2, #100	; 0x64
 8003344:	ddae      	ble.n	80032a4 <maintask_run+0x3d4>
					kick_state=0;
 8003346:	2200      	movs	r2, #0
 8003348:	6032      	str	r2, [r6, #0]
					kick_time=0;
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e7aa      	b.n	80032a4 <maintask_run+0x3d4>
				if(kick_state==0){
 800334e:	6833      	ldr	r3, [r6, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1a4      	bne.n	800329e <maintask_run+0x3ce>
				  uint8_t kick_power_param=(float)kick_power*255.0;
 8003354:	ee17 0a90 	vmov	r0, s15
 8003358:	f7fd f91e 	bl	8000598 <__aeabi_f2d>
 800335c:	a316      	add	r3, pc, #88	; (adr r3, 80033b8 <maintask_run+0x4e8>)
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f7fd f971 	bl	8000648 <__aeabi_dmul>
 8003366:	f7fd fc47 	bl	8000bf8 <__aeabi_d2uiz>
 800336a:	b2c1      	uxtb	r1, r0
				  printf(" kick=%d\r\n",kick_power_param);
 800336c:	4826      	ldr	r0, [pc, #152]	; (8003408 <maintask_run+0x538>)
 800336e:	9101      	str	r1, [sp, #4]
 8003370:	f007 fb80 	bl	800aa74 <iprintf>
				  actuator_kicker(3, (uint8_t)kick_power_param);
 8003374:	9901      	ldr	r1, [sp, #4]
 8003376:	2003      	movs	r0, #3
 8003378:	f7fd fed8 	bl	800112c <actuator_kicker>
				kick_state=1;
 800337c:	6035      	str	r5, [r6, #0]
 800337e:	e78e      	b.n	800329e <maintask_run+0x3ce>
	if(omega<-6*M_PI){omega=-6*M_PI;}
 8003380:	a30f      	add	r3, pc, #60	; (adr r3, 80033c0 <maintask_run+0x4f0>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	4620      	mov	r0, r4
 8003388:	4629      	mov	r1, r5
 800338a:	f7fd fbcf 	bl	8000b2c <__aeabi_dcmplt>
 800338e:	b170      	cbz	r0, 80033ae <maintask_run+0x4de>
 8003390:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800340c <maintask_run+0x53c>
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <maintask_run+0x4fc>)
 8003396:	eeb0 8a67 	vmov.f32	s16, s15
 800339a:	edc3 7a00 	vstr	s15, [r3]
 800339e:	e764      	b.n	800326a <maintask_run+0x39a>
 80033a0:	4e0f      	ldr	r6, [pc, #60]	; (80033e0 <maintask_run+0x510>)
 80033a2:	e77f      	b.n	80032a4 <maintask_run+0x3d4>
    while (angle_rad > M_PI) {
 80033a4:	eeb0 9a48 	vmov.f32	s18, s16
 80033a8:	4654      	mov	r4, sl
 80033aa:	465d      	mov	r5, fp
 80033ac:	e616      	b.n	8002fdc <maintask_run+0x10c>
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <maintask_run+0x4fc>)
 80033b0:	ed83 8a00 	vstr	s16, [r3]
 80033b4:	e759      	b.n	800326a <maintask_run+0x39a>
 80033b6:	bf00      	nop
 80033b8:	00000000 	.word	0x00000000
 80033bc:	406fe000 	.word	0x406fe000
 80033c0:	7f3321d2 	.word	0x7f3321d2
 80033c4:	c032d97c 	.word	0xc032d97c
 80033c8:	4196cbe4 	.word	0x4196cbe4
 80033cc:	20000f68 	.word	0x20000f68
 80033d0:	20000f9c 	.word	0x20000f9c
 80033d4:	20000fa0 	.word	0x20000fa0
 80033d8:	20000ebc 	.word	0x20000ebc
 80033dc:	20000f18 	.word	0x20000f18
 80033e0:	20000f1c 	.word	0x20000f1c
 80033e4:	20000ece 	.word	0x20000ece
 80033e8:	20000fa4 	.word	0x20000fa4
 80033ec:	437a0000 	.word	0x437a0000
 80033f0:	20000ee8 	.word	0x20000ee8
 80033f4:	20000ddc 	.word	0x20000ddc
 80033f8:	20000e50 	.word	0x20000e50
 80033fc:	200012b8 	.word	0x200012b8
 8003400:	20000fa8 	.word	0x20000fa8
 8003404:	20000f20 	.word	0x20000f20
 8003408:	0800cc3c 	.word	0x0800cc3c
 800340c:	c196cbe4 	.word	0xc196cbe4
 8003410:	7f3321d2 	.word	0x7f3321d2
 8003414:	4032d97c 	.word	0x4032d97c

08003418 <maintask_emargency>:
void maintask_emargency(){
 8003418:	b500      	push	{lr}
	  actuator_motor1(0.0,0.0);
 800341a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80034d4 <maintask_emargency+0xbc>
void maintask_emargency(){
 800341e:	b085      	sub	sp, #20
	  actuator_motor1(0.0,0.0);
 8003420:	eef0 0a40 	vmov.f32	s1, s0
 8003424:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003428:	f7fd fdd4 	bl	8000fd4 <actuator_motor1>
	  actuator_motor2(0.0,0.0);
 800342c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003430:	eef0 0a40 	vmov.f32	s1, s0
 8003434:	f7fd fdea 	bl	800100c <actuator_motor2>
	  actuator_motor3(0.0,0.0);
 8003438:	ed9d 0a01 	vldr	s0, [sp, #4]
 800343c:	eef0 0a40 	vmov.f32	s1, s0
 8003440:	f7fd fe00 	bl	8001044 <actuator_motor3>
	  actuator_motor4(0.0,0.0);
 8003444:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003448:	eef0 0a40 	vmov.f32	s1, s0
 800344c:	f7fd fe16 	bl	800107c <actuator_motor4>
	  actuator_motor5(0.0,0.0);
 8003450:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003454:	eef0 0a40 	vmov.f32	s1, s0
 8003458:	f7fd fe2c 	bl	80010b4 <actuator_motor5>
	  TX_data_UART[1]=error_No[0];
 800345c:	481e      	ldr	r0, [pc, #120]	; (80034d8 <maintask_emargency+0xc0>)
	  TX_data_UART[0]=254;
 800345e:	491f      	ldr	r1, [pc, #124]	; (80034dc <maintask_emargency+0xc4>)
	  TX_data_UART[1]=error_No[0];
 8003460:	f890 c000 	ldrb.w	ip, [r0]
 8003464:	f881 c001 	strb.w	ip, [r1, #1]
	  TX_data_UART[0]=254;
 8003468:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
 800346c:	f881 c000 	strb.w	ip, [r1]
	  TX_data_UART[2]=error_No[1];
 8003470:	f890 c001 	ldrb.w	ip, [r0, #1]
 8003474:	f881 c002 	strb.w	ip, [r1, #2]
	  TX_data_UART[3]=error_No[2];
 8003478:	f890 c002 	ldrb.w	ip, [r0, #2]
	  TX_data_UART[4]=error_No[3];
 800347c:	78c0      	ldrb	r0, [r0, #3]
 800347e:	7108      	strb	r0, [r1, #4]
	  TX_data_UART[5]=252;
 8003480:	20fc      	movs	r0, #252	; 0xfc
 8003482:	7148      	strb	r0, [r1, #5]
	  TX_data_UART[6]=122;
 8003484:	f64c 007a 	movw	r0, #51322	; 0xc87a
	  TX_data_UART[3]=error_No[2];
 8003488:	f881 c003 	strb.w	ip, [r1, #3]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 800348c:	23ff      	movs	r3, #255	; 0xff
 800348e:	2208      	movs	r2, #8
	  TX_data_UART[6]=122;
 8003490:	80c8      	strh	r0, [r1, #6]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8003492:	4813      	ldr	r0, [pc, #76]	; (80034e0 <maintask_emargency+0xc8>)
 8003494:	f006 fb80 	bl	8009b98 <HAL_UART_Transmit>
	  actuator_buzzer(150, 150);
 8003498:	2196      	movs	r1, #150	; 0x96
 800349a:	4608      	mov	r0, r1
 800349c:	f7fd fe86 	bl	80011ac <actuator_buzzer>
	  can1_send(0x000, senddata_error);
 80034a0:	a902      	add	r1, sp, #8
 80034a2:	2000      	movs	r0, #0
 80034a4:	f7fe f892 	bl	80015cc <can1_send>
	  can2_send(0x000, senddata_error);
 80034a8:	a902      	add	r1, sp, #8
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fe f8de 	bl	800166c <can2_send>
	  actuator_kicker(1, 0);
 80034b0:	2100      	movs	r1, #0
 80034b2:	2001      	movs	r0, #1
 80034b4:	f7fd fe3a 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80034b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80034bc:	f7fd fe16 	bl	80010ec <actuator_kicker_voltage>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80034c0:	4808      	ldr	r0, [pc, #32]	; (80034e4 <maintask_emargency+0xcc>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034c8:	f003 ff46 	bl	8007358 <HAL_GPIO_WritePin>
}
 80034cc:	b005      	add	sp, #20
 80034ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80034d2:	bf00      	nop
 80034d4:	00000000 	.word	0x00000000
 80034d8:	20000eec 	.word	0x20000eec
 80034dc:	20000e50 	.word	0x20000e50
 80034e0:	200012b8 	.word	0x200012b8
 80034e4:	48000400 	.word	0x48000400

080034e8 <HAL_GPIO_EXTI_Callback>:
   return uwTick;
 80034e8:	4b1c      	ldr	r3, [pc, #112]	; (800355c <HAL_GPIO_EXTI_Callback+0x74>)
 80034ea:	681b      	ldr	r3, [r3, #0]
	if(HAL_GetTick()>2000){
 80034ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034f0:	d915      	bls.n	800351e <HAL_GPIO_EXTI_Callback+0x36>
{
 80034f2:	b570      	push	{r4, r5, r6, lr}
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 80034f4:	4e1a      	ldr	r6, [pc, #104]	; (8003560 <HAL_GPIO_EXTI_Callback+0x78>)
 80034f6:	2464      	movs	r4, #100	; 0x64
 80034f8:	e005      	b.n	8003506 <HAL_GPIO_EXTI_Callback+0x1e>
				delayUs(1);
 80034fa:	f001 fd2b 	bl	8004f54 <delayUs>
		while(cnt<100){
 80034fe:	1e63      	subs	r3, r4, #1
 8003500:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8003504:	d00c      	beq.n	8003520 <HAL_GPIO_EXTI_Callback+0x38>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 8003506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800350a:	4630      	mov	r0, r6
 800350c:	f003 ff1e 	bl	800734c <HAL_GPIO_ReadPin>
 8003510:	2801      	cmp	r0, #1
 8003512:	4605      	mov	r5, r0
 8003514:	d0f1      	beq.n	80034fa <HAL_GPIO_EXTI_Callback+0x12>
			Emargency=0;
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
}
 800351c:	bd70      	pop	{r4, r5, r6, pc}
 800351e:	4770      	bx	lr
			Emargency=1;
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_GPIO_EXTI_Callback+0x7c>)
			printf("Emargency Stop !!!!!!!!!!!!!");
 8003522:	4811      	ldr	r0, [pc, #68]	; (8003568 <HAL_GPIO_EXTI_Callback+0x80>)
			Emargency=1;
 8003524:	701d      	strb	r5, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 8003526:	2432      	movs	r4, #50	; 0x32
 8003528:	f007 faa4 	bl	800aa74 <iprintf>
				maintask_emargency();
 800352c:	f7ff ff74 	bl	8003418 <maintask_emargency>
			for(int i=0;i<50;i++){
 8003530:	3c01      	subs	r4, #1
 8003532:	d1fb      	bne.n	800352c <HAL_GPIO_EXTI_Callback+0x44>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8003534:	480a      	ldr	r0, [pc, #40]	; (8003560 <HAL_GPIO_EXTI_Callback+0x78>)
 8003536:	4622      	mov	r2, r4
 8003538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800353c:	f003 ff0c 	bl	8007358 <HAL_GPIO_WritePin>
 8003540:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003544:	4909      	ldr	r1, [pc, #36]	; (800356c <HAL_GPIO_EXTI_Callback+0x84>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_GPIO_EXTI_Callback+0x88>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003548:	68ca      	ldr	r2, [r1, #12]
 800354a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800354e:	4313      	orrs	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]
 8003552:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003556:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003558:	e7fd      	b.n	8003556 <HAL_GPIO_EXTI_Callback+0x6e>
 800355a:	bf00      	nop
 800355c:	200013d8 	.word	0x200013d8
 8003560:	48000400 	.word	0x48000400
 8003564:	20000dd2 	.word	0x20000dd2
 8003568:	0800cc48 	.word	0x0800cc48
 800356c:	e000ed00 	.word	0xe000ed00
 8003570:	05fa0004 	.word	0x05fa0004

08003574 <maintask_state_stop>:
void maintask_state_stop(){
 8003574:	b510      	push	{r4, lr}
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003576:	4b21      	ldr	r3, [pc, #132]	; (80035fc <maintask_state_stop+0x88>)
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003578:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003600 <maintask_state_stop+0x8c>
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
void maintask_state_stop(){
 8003584:	b082      	sub	sp, #8
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003586:	eef0 1a40 	vmov.f32	s3, s0
 800358a:	eeb0 1a40 	vmov.f32	s2, s0
 800358e:	eef0 0a40 	vmov.f32	s1, s0
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003592:	ee17 4a90 	vmov	r4, s15
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003596:	ed8d 0a01 	vstr	s0, [sp, #4]
 800359a:	f001 fd1d 	bl	8004fd8 <omni_move>
	  actuator_motor5(0.0,0.0);
 800359e:	ed9d 0a01 	vldr	s0, [sp, #4]
 80035a2:	eef0 0a40 	vmov.f32	s1, s0
 80035a6:	f7fd fd85 	bl	80010b4 <actuator_motor5>
	  TX_data_UART[0]=254;
 80035aa:	4916      	ldr	r1, [pc, #88]	; (8003604 <maintask_state_stop+0x90>)
	  TX_data_UART[3]=error_No[0];
 80035ac:	4a16      	ldr	r2, [pc, #88]	; (8003608 <maintask_state_stop+0x94>)
    uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80035ae:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 80035b2:	121b      	asrs	r3, r3, #8
 80035b4:	708b      	strb	r3, [r1, #2]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <maintask_state_stop+0x98>)
 80035b8:	edd3 7a04 	vldr	s15, [r3, #16]
	  TX_data_UART[3]=error_No[0];
 80035bc:	7813      	ldrb	r3, [r2, #0]
 80035be:	70cb      	strb	r3, [r1, #3]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80035c4:	3468      	adds	r4, #104	; 0x68
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035c6:	ee17 3a90 	vmov	r3, s15
	  TX_data_UART[4]=error_No[1];
 80035ca:	7852      	ldrb	r2, [r2, #1]
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 80035cc:	704c      	strb	r4, [r1, #1]
	  TX_data_UART[0]=254;
 80035ce:	20fe      	movs	r0, #254	; 0xfe
	  TX_data_UART[5]=1;
 80035d0:	2401      	movs	r4, #1
	  TX_data_UART[0]=254;
 80035d2:	7008      	strb	r0, [r1, #0]
	  TX_data_UART[4]=error_No[1];
 80035d4:	710a      	strb	r2, [r1, #4]
	  TX_data_UART[5]=1;
 80035d6:	714c      	strb	r4, [r1, #5]
	  TX_data_UART[6]=1;
 80035d8:	718c      	strb	r4, [r1, #6]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80035da:	71cb      	strb	r3, [r1, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80035dc:	2208      	movs	r2, #8
 80035de:	23ff      	movs	r3, #255	; 0xff
 80035e0:	480b      	ldr	r0, [pc, #44]	; (8003610 <maintask_state_stop+0x9c>)
 80035e2:	f006 fad9 	bl	8009b98 <HAL_UART_Transmit>
	  actuator_kicker(1, 0);
 80035e6:	2100      	movs	r1, #0
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7fd fd9f 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80035ee:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 80035f2:	b002      	add	sp, #8
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  actuator_kicker_voltage(0.0);
 80035f8:	f7fd bd78 	b.w	80010ec <actuator_kicker_voltage>
 80035fc:	20000fa4 	.word	0x20000fa4
 8003600:	00000000 	.word	0x00000000
 8003604:	20000e50 	.word	0x20000e50
 8003608:	20000eec 	.word	0x20000eec
 800360c:	20000ddc 	.word	0x20000ddc
 8003610:	200012b8 	.word	0x200012b8

08003614 <maintask_stop>:
void maintask_stop(){
 8003614:	b510      	push	{r4, lr}
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003616:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80036bc <maintask_stop+0xa8>
void maintask_stop(){
 800361a:	b082      	sub	sp, #8
	  omni_move(0.0, 0.0, 0.0,0.0);
 800361c:	eef0 1a40 	vmov.f32	s3, s0
 8003620:	eeb0 1a40 	vmov.f32	s2, s0
 8003624:	eef0 0a40 	vmov.f32	s1, s0
 8003628:	ed8d 0a01 	vstr	s0, [sp, #4]
 800362c:	f001 fcd4 	bl	8004fd8 <omni_move>
	  actuator_motor5(0.0,0.0);
 8003630:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003634:	eef0 0a40 	vmov.f32	s1, s0
 8003638:	f7fd fd3c 	bl	80010b4 <actuator_motor5>
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <maintask_stop+0xac>)
		  omni_move(0.0, 0.0, 0.0,0.0);
 800363e:	ed9d 0a01 	vldr	s0, [sp, #4]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		  omni_move(0.0, 0.0, 0.0,0.0);
 800364a:	eef0 1a40 	vmov.f32	s3, s0
 800364e:	eeb0 1a40 	vmov.f32	s2, s0
 8003652:	eef0 0a40 	vmov.f32	s1, s0
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003656:	ee17 4a90 	vmov	r4, s15
		  omni_move(0.0, 0.0, 0.0,0.0);
 800365a:	f001 fcbd 	bl	8004fd8 <omni_move>
		  actuator_motor5(0.0,0.0);
 800365e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003662:	eef0 0a40 	vmov.f32	s1, s0
 8003666:	f7fd fd25 	bl	80010b4 <actuator_motor5>
		  TX_data_UART[0]=254;
 800366a:	4916      	ldr	r1, [pc, #88]	; (80036c4 <maintask_stop+0xb0>)
		  TX_data_UART[3]=error_No[0];
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <maintask_stop+0xb4>)
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 800366e:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8003672:	121b      	asrs	r3, r3, #8
 8003674:	708b      	strb	r3, [r1, #2]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <maintask_stop+0xb8>)
 8003678:	edd3 7a04 	vldr	s15, [r3, #16]
		  TX_data_UART[3]=error_No[0];
 800367c:	7813      	ldrb	r3, [r2, #0]
 800367e:	70cb      	strb	r3, [r1, #3]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003684:	3468      	adds	r4, #104	; 0x68
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003686:	ee17 3a90 	vmov	r3, s15
		  TX_data_UART[4]=error_No[1];
 800368a:	7852      	ldrb	r2, [r2, #1]
		  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 800368c:	704c      	strb	r4, [r1, #1]
		  TX_data_UART[0]=254;
 800368e:	20fe      	movs	r0, #254	; 0xfe
		  TX_data_UART[5]=0;
 8003690:	2400      	movs	r4, #0
		  TX_data_UART[0]=254;
 8003692:	7008      	strb	r0, [r1, #0]
		  TX_data_UART[4]=error_No[1];
 8003694:	710a      	strb	r2, [r1, #4]
		  TX_data_UART[5]=0;
 8003696:	714c      	strb	r4, [r1, #5]
		  TX_data_UART[6]=0;
 8003698:	718c      	strb	r4, [r1, #6]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 800369a:	71cb      	strb	r3, [r1, #7]
		  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 800369c:	2208      	movs	r2, #8
 800369e:	23ff      	movs	r3, #255	; 0xff
 80036a0:	480b      	ldr	r0, [pc, #44]	; (80036d0 <maintask_stop+0xbc>)
 80036a2:	f006 fa79 	bl	8009b98 <HAL_UART_Transmit>
	  actuator_kicker(1, 0);
 80036a6:	4621      	mov	r1, r4
 80036a8:	2001      	movs	r0, #1
 80036aa:	f7fd fd3f 	bl	800112c <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80036ae:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 80036b2:	b002      	add	sp, #8
 80036b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  actuator_kicker_voltage(0.0);
 80036b8:	f7fd bd18 	b.w	80010ec <actuator_kicker_voltage>
 80036bc:	00000000 	.word	0x00000000
 80036c0:	20000fa4 	.word	0x20000fa4
 80036c4:	20000e50 	.word	0x20000e50
 80036c8:	20000eec 	.word	0x20000eec
 80036cc:	20000ddc 	.word	0x20000ddc
 80036d0:	200012b8 	.word	0x200012b8
 80036d4:	00000000 	.word	0x00000000

080036d8 <HAL_TIM_PeriodElapsedCallback>:
{
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	ed2d 8b04 	vpush	{d8-d9}
 80036e0:	b089      	sub	sp, #36	; 0x24
	 ICM20602_read_IMU_data();
 80036e2:	f7fe fc7f 	bl	8001fe4 <ICM20602_read_IMU_data>
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 80036e6:	2120      	movs	r1, #32
 80036e8:	48c5      	ldr	r0, [pc, #788]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80036ea:	f003 fe2f 	bl	800734c <HAL_GPIO_ReadPin>
 80036ee:	2140      	movs	r1, #64	; 0x40
 80036f0:	4604      	mov	r4, r0
 80036f2:	48c3      	ldr	r0, [pc, #780]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80036f4:	f003 fe2a 	bl	800734c <HAL_GPIO_ReadPin>
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 80036f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 80036fc:	4605      	mov	r5, r0
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 80036fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003702:	f003 fe23 	bl	800734c <HAL_GPIO_ReadPin>
 8003706:	f1c4 040f 	rsb	r4, r4, #15
 800370a:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
 800370e:	2104      	movs	r1, #4
 8003710:	4605      	mov	r5, r0
 8003712:	48bc      	ldr	r0, [pc, #752]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003714:	f003 fe1a 	bl	800734c <HAL_GPIO_ReadPin>
 8003718:	b2e4      	uxtb	r4, r4
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 800371a:	eba4 04c5 	sub.w	r4, r4, r5, lsl #3
 800371e:	4bba      	ldr	r3, [pc, #744]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003720:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
 8003724:	b2c0      	uxtb	r0, r0
 8003726:	7018      	strb	r0, [r3, #0]
	 switch (sw_mode){
 8003728:	2806      	cmp	r0, #6
 800372a:	f200 85f6 	bhi.w	800431a <HAL_TIM_PeriodElapsedCallback+0xc42>
 800372e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003732:	0067      	.short	0x0067
 8003734:	023d0187 	.word	0x023d0187
 8003738:	02530265 	.word	0x02530265
 800373c:	00070281 	.word	0x00070281
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003740:	4bb2      	ldr	r3, [pc, #712]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0x334>)
    }
}

uint8_t decode_SW(uint16_t SW_data){
	int data;
	if(SW_data<100){
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	2b63      	cmp	r3, #99	; 0x63
 8003746:	f240 8326 	bls.w	8003d96 <HAL_TIM_PeriodElapsedCallback+0x6be>
	 			 actuator_motor5(0.0,0.0);
 800374a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 8003a10 <HAL_TIM_PeriodElapsedCallback+0x338>
 800374e:	eeb0 0a60 	vmov.f32	s0, s1
 8003752:	f7fd fcaf 	bl	80010b4 <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	48ae      	ldr	r0, [pc, #696]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800375a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800375e:	f003 fdfb 	bl	8007358 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003762:	2101      	movs	r1, #1
 8003764:	4608      	mov	r0, r1
 8003766:	f7fd fce1 	bl	800112c <actuator_kicker>
	 			 actuator_kicker(2, 1);
 800376a:	2101      	movs	r1, #1
 800376c:	2002      	movs	r0, #2
 800376e:	f7fd fcdd 	bl	800112c <actuator_kicker>
	 			 actuator_kicker_voltage(0.0);
 8003772:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8003a10 <HAL_TIM_PeriodElapsedCallback+0x338>
 8003776:	f7fd fcb9 	bl	80010ec <actuator_kicker_voltage>
					kick_state=0;
 800377a:	49a7      	ldr	r1, [pc, #668]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0x340>)
					kick_time=0;
 800377c:	4aa7      	ldr	r2, [pc, #668]	; (8003a1c <HAL_TIM_PeriodElapsedCallback+0x344>)
					kick_state=0;
 800377e:	2300      	movs	r3, #0
 8003780:	600b      	str	r3, [r1, #0]
					kick_time=0;
 8003782:	6013      	str	r3, [r2, #0]
				omni_move(0.0, 0.0, 0.0,0.0);
 8003784:	eddf 1aa2 	vldr	s3, [pc, #648]	; 8003a10 <HAL_TIM_PeriodElapsedCallback+0x338>
 8003788:	eeb0 1a61 	vmov.f32	s2, s3
 800378c:	eef0 0a61 	vmov.f32	s1, s3
 8003790:	eeb0 0a61 	vmov.f32	s0, s3
 8003794:	f001 fc20 	bl	8004fd8 <omni_move>
	 if(cnt_time_tim>50){
 8003798:	4ca1      	ldr	r4, [pc, #644]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800379a:	8823      	ldrh	r3, [r4, #0]
 800379c:	2b32      	cmp	r3, #50	; 0x32
 800379e:	d912      	bls.n	80037c6 <HAL_TIM_PeriodElapsedCallback+0xee>
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 80037a0:	4ea0      	ldr	r6, [pc, #640]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80037a2:	4da1      	ldr	r5, [pc, #644]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80037a4:	7bf2      	ldrb	r2, [r6, #15]
 80037a6:	782b      	ldrb	r3, [r5, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80037a8:	489a      	ldr	r0, [pc, #616]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x33c>)
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 80037aa:	429a      	cmp	r2, r3
		 Ether_connect=1;
 80037ac:	4b9f      	ldr	r3, [pc, #636]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80037ae:	bf14      	ite	ne
 80037b0:	2201      	movne	r2, #1
		 Ether_connect=0;
 80037b2:	2200      	moveq	r2, #0
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80037b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		 Ether_connect=0;
 80037b8:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80037ba:	f003 fdcd 	bl	8007358 <HAL_GPIO_WritePin>
	 Ether_connect_check=data_from_ether[Rxbufsize_from_Ether-3];
 80037be:	7bf2      	ldrb	r2, [r6, #15]
 80037c0:	702a      	strb	r2, [r5, #0]
	 cnt_time_tim=0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	8023      	strh	r3, [r4, #0]
	 if(cnt_time_50Hz>50){
 80037c6:	4d9a      	ldr	r5, [pc, #616]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80037c8:	882a      	ldrh	r2, [r5, #0]
 80037ca:	2a32      	cmp	r2, #50	; 0x32
 80037cc:	d90f      	bls.n	80037ee <HAL_TIM_PeriodElapsedCallback+0x116>
       if(sw_mode>0){
 80037ce:	4b8e      	ldr	r3, [pc, #568]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 826c 	bne.w	8003cb0 <HAL_TIM_PeriodElapsedCallback+0x5d8>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80037d8:	4889      	ldr	r0, [pc, #548]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	f003 fdc2 	bl	8007364 <HAL_GPIO_TogglePin>
		  cnt_time_50Hz=0;
 80037e0:	2300      	movs	r3, #0
		  actuator_power_ONOFF(1);
 80037e2:	2001      	movs	r0, #1
		  cnt_time_50Hz=0;
 80037e4:	802b      	strh	r3, [r5, #0]
		  actuator_power_ONOFF(1);
 80037e6:	f7fd fcb1 	bl	800114c <actuator_power_ONOFF>
	 cnt_time_50Hz++;
 80037ea:	882a      	ldrh	r2, [r5, #0]
	 cnt_time_tim++;
 80037ec:	8823      	ldrh	r3, [r4, #0]
	 cnt_time_50Hz++;
 80037ee:	3201      	adds	r2, #1
	 cnt_time_tim++;
 80037f0:	3301      	adds	r3, #1
	 cnt_time_50Hz++;
 80037f2:	802a      	strh	r2, [r5, #0]
	 cnt_time_tim++;
 80037f4:	8023      	strh	r3, [r4, #0]
}
 80037f6:	b009      	add	sp, #36	; 0x24
 80037f8:	ecbd 8b04 	vpop	{d8-d9}
 80037fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 		if(Ether_connect==1){
 8003800:	4b8a      	ldr	r3, [pc, #552]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003806:	4b8b      	ldr	r3, [pc, #556]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003808:	9304      	str	r3, [sp, #16]
 800380a:	ed93 8a00 	vldr	s16, [r3]
 800380e:	ee18 0a10 	vmov	r0, s16
	 		if(Ether_connect==1){
 8003812:	f000 83a7 	beq.w	8003f64 <HAL_TIM_PeriodElapsedCallback+0x88c>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003816:	f7fc febf 	bl	8000598 <__aeabi_f2d>
 800381a:	eddf 7a87 	vldr	s15, [pc, #540]	; 8003a38 <HAL_TIM_PeriodElapsedCallback+0x360>
 800381e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003822:	ec41 0b19 	vmov	d9, r0, r1
 8003826:	ee17 0a90 	vmov	r0, s15
 800382a:	f7fc feb5 	bl	8000598 <__aeabi_f2d>
 800382e:	a36a      	add	r3, pc, #424	; (adr r3, 80039d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fc ff08 	bl	8000648 <__aeabi_dmul>
 8003838:	f7fd f9fe 	bl	8000c38 <__aeabi_d2f>
 800383c:	4b7f      	ldr	r3, [pc, #508]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0x364>)
 800383e:	ee08 0a10 	vmov	s16, r0
 8003842:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003846:	f7fc fea7 	bl	8000598 <__aeabi_f2d>
 800384a:	a365      	add	r3, pc, #404	; (adr r3, 80039e0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	4680      	mov	r8, r0
 8003852:	4689      	mov	r9, r1
 8003854:	f7fd f988 	bl	8000b68 <__aeabi_dcmpgt>
 8003858:	b1c8      	cbz	r0, 800388e <HAL_TIM_PeriodElapsedCallback+0x1b6>
        angle_rad -= 2.0f * M_PI;
 800385a:	a763      	add	r7, pc, #396	; (adr r7, 80039e8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800385c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003860:	a55f      	add	r5, pc, #380	; (adr r5, 80039e0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003862:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8003866:	4632      	mov	r2, r6
 8003868:	463b      	mov	r3, r7
 800386a:	4640      	mov	r0, r8
 800386c:	4649      	mov	r1, r9
 800386e:	f7fc fd33 	bl	80002d8 <__aeabi_dsub>
 8003872:	f7fd f9e1 	bl	8000c38 <__aeabi_d2f>
 8003876:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 800387a:	f7fc fe8d 	bl	8000598 <__aeabi_f2d>
 800387e:	4622      	mov	r2, r4
 8003880:	462b      	mov	r3, r5
 8003882:	4680      	mov	r8, r0
 8003884:	4689      	mov	r9, r1
 8003886:	f7fd f96f 	bl	8000b68 <__aeabi_dcmpgt>
 800388a:	2800      	cmp	r0, #0
 800388c:	d1eb      	bne.n	8003866 <HAL_TIM_PeriodElapsedCallback+0x18e>
    while (angle_rad < -M_PI) {
 800388e:	a358      	add	r3, pc, #352	; (adr r3, 80039f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fd f948 	bl	8000b2c <__aeabi_dcmplt>
 800389c:	b1c8      	cbz	r0, 80038d2 <HAL_TIM_PeriodElapsedCallback+0x1fa>
        angle_rad += 2.0f * M_PI;
 800389e:	a752      	add	r7, pc, #328	; (adr r7, 80039e8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80038a0:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80038a4:	a552      	add	r5, pc, #328	; (adr r5, 80039f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80038a6:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 80038aa:	4632      	mov	r2, r6
 80038ac:	463b      	mov	r3, r7
 80038ae:	4640      	mov	r0, r8
 80038b0:	4649      	mov	r1, r9
 80038b2:	f7fc fd13 	bl	80002dc <__adddf3>
 80038b6:	f7fd f9bf 	bl	8000c38 <__aeabi_d2f>
 80038ba:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 80038be:	f7fc fe6b 	bl	8000598 <__aeabi_f2d>
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	4680      	mov	r8, r0
 80038c8:	4689      	mov	r9, r1
 80038ca:	f7fd f92f 	bl	8000b2c <__aeabi_dcmplt>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1eb      	bne.n	80038aa <HAL_TIM_PeriodElapsedCallback+0x1d2>
    while (angle_rad > M_PI) {
 80038d2:	ee18 0a90 	vmov	r0, s17
 80038d6:	f7fc fe5f 	bl	8000598 <__aeabi_f2d>
 80038da:	a341      	add	r3, pc, #260	; (adr r3, 80039e0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	4606      	mov	r6, r0
 80038e2:	460f      	mov	r7, r1
 80038e4:	f7fd f940 	bl	8000b68 <__aeabi_dcmpgt>
 80038e8:	b1d0      	cbz	r0, 8003920 <HAL_TIM_PeriodElapsedCallback+0x248>
        angle_rad -= 2.0f * M_PI;
 80038ea:	a53f      	add	r5, pc, #252	; (adr r5, 80039e8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80038ec:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 80038f0:	f20f 0bec 	addw	fp, pc, #236	; 0xec
 80038f4:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	4630      	mov	r0, r6
 80038fe:	4639      	mov	r1, r7
 8003900:	f7fc fcea 	bl	80002d8 <__aeabi_dsub>
 8003904:	f7fd f998 	bl	8000c38 <__aeabi_d2f>
 8003908:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 800390c:	f7fc fe44 	bl	8000598 <__aeabi_f2d>
 8003910:	4652      	mov	r2, sl
 8003912:	465b      	mov	r3, fp
 8003914:	4606      	mov	r6, r0
 8003916:	460f      	mov	r7, r1
 8003918:	f7fd f926 	bl	8000b68 <__aeabi_dcmpgt>
 800391c:	2800      	cmp	r0, #0
 800391e:	d1eb      	bne.n	80038f8 <HAL_TIM_PeriodElapsedCallback+0x220>
    while (angle_rad < -M_PI) {
 8003920:	a333      	add	r3, pc, #204	; (adr r3, 80039f0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	4630      	mov	r0, r6
 8003928:	4639      	mov	r1, r7
 800392a:	f7fd f8ff 	bl	8000b2c <__aeabi_dcmplt>
 800392e:	b1d0      	cbz	r0, 8003966 <HAL_TIM_PeriodElapsedCallback+0x28e>
        angle_rad += 2.0f * M_PI;
 8003930:	a52d      	add	r5, pc, #180	; (adr r5, 80039e8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003932:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 8003936:	f20f 0bb8 	addw	fp, pc, #184	; 0xb8
 800393a:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	4630      	mov	r0, r6
 8003944:	4639      	mov	r1, r7
 8003946:	f7fc fcc9 	bl	80002dc <__adddf3>
 800394a:	f7fd f975 	bl	8000c38 <__aeabi_d2f>
 800394e:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8003952:	f7fc fe21 	bl	8000598 <__aeabi_f2d>
 8003956:	4652      	mov	r2, sl
 8003958:	465b      	mov	r3, fp
 800395a:	4606      	mov	r6, r0
 800395c:	460f      	mov	r7, r1
 800395e:	f7fd f8e5 	bl	8000b2c <__aeabi_dcmplt>
 8003962:	2800      	cmp	r0, #0
 8003964:	d1eb      	bne.n	800393e <HAL_TIM_PeriodElapsedCallback+0x266>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 8003966:	ee78 7a68 	vsub.f32	s15, s16, s17
 800396a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800396e:	ee17 3a10 	vmov	r3, s14
 8003972:	2b00      	cmp	r3, #0
 8003974:	bfb8      	it	lt
 8003976:	425b      	neglt	r3, r3
 8003978:	2b03      	cmp	r3, #3
 800397a:	dd14      	ble.n	80039a6 <HAL_TIM_PeriodElapsedCallback+0x2ce>
    	if(angle_rad1 > angle_rad2){
 800397c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8003980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8003984:	a318      	add	r3, pc, #96	; (adr r3, 80039e8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	4640      	mov	r0, r8
 800398c:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 800398e:	f140 8296 	bpl.w	8003ebe <HAL_TIM_PeriodElapsedCallback+0x7e6>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8003992:	f7fc fca1 	bl	80002d8 <__aeabi_dsub>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8003996:	4632      	mov	r2, r6
 8003998:	463b      	mov	r3, r7
 800399a:	f7fc fc9d 	bl	80002d8 <__aeabi_dsub>
 800399e:	f7fd f94b 	bl	8000c38 <__aeabi_d2f>
 80039a2:	ee07 0a90 	vmov	s15, r0
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 80039a6:	ee17 0a90 	vmov	r0, s15
 80039aa:	f7fc fdf5 	bl	8000598 <__aeabi_f2d>
 80039ae:	a312      	add	r3, pc, #72	; (adr r3, 80039f8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fc fe48 	bl	8000648 <__aeabi_dmul>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	ec51 0b19 	vmov	r0, r1, d9
 80039c0:	f7fc fc8a 	bl	80002d8 <__aeabi_dsub>
 80039c4:	f7fd f938 	bl	8000c38 <__aeabi_d2f>
 80039c8:	9b04      	ldr	r3, [sp, #16]
 80039ca:	6018      	str	r0, [r3, #0]
	 			maintask_state_stop();
 80039cc:	f7ff fdd2 	bl	8003574 <maintask_state_stop>
 80039d0:	e6e2      	b.n	8003798 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80039d2:	bf00      	nop
 80039d4:	f3af 8000 	nop.w
 80039d8:	16c16c17 	.word	0x16c16c17
 80039dc:	3f76c16c 	.word	0x3f76c16c
 80039e0:	54442d18 	.word	0x54442d18
 80039e4:	400921fb 	.word	0x400921fb
 80039e8:	54442d18 	.word	0x54442d18
 80039ec:	401921fb 	.word	0x401921fb
 80039f0:	54442d18 	.word	0x54442d18
 80039f4:	c00921fb 	.word	0xc00921fb
 80039f8:	48b81fe5 	.word	0x48b81fe5
 80039fc:	3fad55df 	.word	0x3fad55df
 8003a00:	48000400 	.word	0x48000400
 8003a04:	48000c00 	.word	0x48000c00
 8003a08:	20000f74 	.word	0x20000f74
 8003a0c:	20000e4c 	.word	0x20000e4c
 8003a10:	00000000 	.word	0x00000000
 8003a14:	48000800 	.word	0x48000800
 8003a18:	20000f1c 	.word	0x20000f1c
 8003a1c:	20000f20 	.word	0x20000f20
 8003a20:	20000ed2 	.word	0x20000ed2
 8003a24:	20000ed4 	.word	0x20000ed4
 8003a28:	20000dd4 	.word	0x20000dd4
 8003a2c:	20000dd3 	.word	0x20000dd3
 8003a30:	20000ed0 	.word	0x20000ed0
 8003a34:	20000fa4 	.word	0x20000fa4
 8003a38:	40490fdb 	.word	0x40490fdb
 8003a3c:	20000f94 	.word	0x20000f94
	 		if(Ether_connect==1){
 8003a40:	4b93      	ldr	r3, [pc, #588]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003a46:	4b93      	ldr	r3, [pc, #588]	; (8003c94 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	ed93 8a00 	vldr	s16, [r3]
 8003a4e:	ee18 0a10 	vmov	r0, s16
	 		if(Ether_connect==1){
 8003a52:	f000 8370 	beq.w	8004136 <HAL_TIM_PeriodElapsedCallback+0xa5e>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003a56:	f7fc fd9f 	bl	8000598 <__aeabi_f2d>
 8003a5a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8003c98 <HAL_TIM_PeriodElapsedCallback+0x5c0>
 8003a5e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003a62:	ec41 0b19 	vmov	d9, r0, r1
 8003a66:	ee17 0a90 	vmov	r0, s15
 8003a6a:	f7fc fd95 	bl	8000598 <__aeabi_f2d>
 8003a6e:	a380      	add	r3, pc, #512	; (adr r3, 8003c70 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fde8 	bl	8000648 <__aeabi_dmul>
 8003a78:	f7fd f8de 	bl	8000c38 <__aeabi_d2f>
 8003a7c:	4b87      	ldr	r3, [pc, #540]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003a7e:	ee08 0a10 	vmov	s16, r0
 8003a82:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003a86:	f7fc fd87 	bl	8000598 <__aeabi_f2d>
 8003a8a:	a37b      	add	r3, pc, #492	; (adr r3, 8003c78 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	4680      	mov	r8, r0
 8003a92:	4689      	mov	r9, r1
 8003a94:	f7fd f868 	bl	8000b68 <__aeabi_dcmpgt>
 8003a98:	b1c8      	cbz	r0, 8003ace <HAL_TIM_PeriodElapsedCallback+0x3f6>
        angle_rad -= 2.0f * M_PI;
 8003a9a:	a779      	add	r7, pc, #484	; (adr r7, 8003c80 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003a9c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003aa0:	a575      	add	r5, pc, #468	; (adr r5, 8003c78 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003aa2:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	4640      	mov	r0, r8
 8003aac:	4649      	mov	r1, r9
 8003aae:	f7fc fc13 	bl	80002d8 <__aeabi_dsub>
 8003ab2:	f7fd f8c1 	bl	8000c38 <__aeabi_d2f>
 8003ab6:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8003aba:	f7fc fd6d 	bl	8000598 <__aeabi_f2d>
 8003abe:	4622      	mov	r2, r4
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	4680      	mov	r8, r0
 8003ac4:	4689      	mov	r9, r1
 8003ac6:	f7fd f84f 	bl	8000b68 <__aeabi_dcmpgt>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d1eb      	bne.n	8003aa6 <HAL_TIM_PeriodElapsedCallback+0x3ce>
    while (angle_rad < -M_PI) {
 8003ace:	a36e      	add	r3, pc, #440	; (adr r3, 8003c88 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	f7fd f828 	bl	8000b2c <__aeabi_dcmplt>
 8003adc:	b1c8      	cbz	r0, 8003b12 <HAL_TIM_PeriodElapsedCallback+0x43a>
        angle_rad += 2.0f * M_PI;
 8003ade:	a768      	add	r7, pc, #416	; (adr r7, 8003c80 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003ae0:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8003ae4:	a568      	add	r5, pc, #416	; (adr r5, 8003c88 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003ae6:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8003aea:	4632      	mov	r2, r6
 8003aec:	463b      	mov	r3, r7
 8003aee:	4640      	mov	r0, r8
 8003af0:	4649      	mov	r1, r9
 8003af2:	f7fc fbf3 	bl	80002dc <__adddf3>
 8003af6:	f7fd f89f 	bl	8000c38 <__aeabi_d2f>
 8003afa:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8003afe:	f7fc fd4b 	bl	8000598 <__aeabi_f2d>
 8003b02:	4622      	mov	r2, r4
 8003b04:	462b      	mov	r3, r5
 8003b06:	4680      	mov	r8, r0
 8003b08:	4689      	mov	r9, r1
 8003b0a:	f7fd f80f 	bl	8000b2c <__aeabi_dcmplt>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d1eb      	bne.n	8003aea <HAL_TIM_PeriodElapsedCallback+0x412>
    while (angle_rad > M_PI) {
 8003b12:	ee18 0a90 	vmov	r0, s17
 8003b16:	f7fc fd3f 	bl	8000598 <__aeabi_f2d>
 8003b1a:	a357      	add	r3, pc, #348	; (adr r3, 8003c78 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	4606      	mov	r6, r0
 8003b22:	460f      	mov	r7, r1
 8003b24:	f7fd f820 	bl	8000b68 <__aeabi_dcmpgt>
 8003b28:	b1d0      	cbz	r0, 8003b60 <HAL_TIM_PeriodElapsedCallback+0x488>
        angle_rad -= 2.0f * M_PI;
 8003b2a:	a555      	add	r5, pc, #340	; (adr r5, 8003c80 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003b2c:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 8003b30:	f20f 1b44 	addw	fp, pc, #324	; 0x144
 8003b34:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	4639      	mov	r1, r7
 8003b40:	f7fc fbca 	bl	80002d8 <__aeabi_dsub>
 8003b44:	f7fd f878 	bl	8000c38 <__aeabi_d2f>
 8003b48:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8003b4c:	f7fc fd24 	bl	8000598 <__aeabi_f2d>
 8003b50:	4652      	mov	r2, sl
 8003b52:	465b      	mov	r3, fp
 8003b54:	4606      	mov	r6, r0
 8003b56:	460f      	mov	r7, r1
 8003b58:	f7fd f806 	bl	8000b68 <__aeabi_dcmpgt>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_TIM_PeriodElapsedCallback+0x460>
    while (angle_rad < -M_PI) {
 8003b60:	a349      	add	r3, pc, #292	; (adr r3, 8003c88 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	4630      	mov	r0, r6
 8003b68:	4639      	mov	r1, r7
 8003b6a:	f7fc ffdf 	bl	8000b2c <__aeabi_dcmplt>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	f43f aef9 	beq.w	8003966 <HAL_TIM_PeriodElapsedCallback+0x28e>
        angle_rad += 2.0f * M_PI;
 8003b74:	a542      	add	r5, pc, #264	; (adr r5, 8003c80 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003b76:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 8003b7a:	f20f 1b0c 	addw	fp, pc, #268	; 0x10c
 8003b7e:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 8003b82:	4622      	mov	r2, r4
 8003b84:	462b      	mov	r3, r5
 8003b86:	4630      	mov	r0, r6
 8003b88:	4639      	mov	r1, r7
 8003b8a:	f7fc fba7 	bl	80002dc <__adddf3>
 8003b8e:	f7fd f853 	bl	8000c38 <__aeabi_d2f>
 8003b92:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8003b96:	f7fc fcff 	bl	8000598 <__aeabi_f2d>
 8003b9a:	4652      	mov	r2, sl
 8003b9c:	465b      	mov	r3, fp
 8003b9e:	4606      	mov	r6, r0
 8003ba0:	460f      	mov	r7, r1
 8003ba2:	f7fc ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d1eb      	bne.n	8003b82 <HAL_TIM_PeriodElapsedCallback+0x4aa>
 8003baa:	e6dc      	b.n	8003966 <HAL_TIM_PeriodElapsedCallback+0x28e>
			if(decode_SW(SWdata[0])&0b00010000){
 8003bac:	4b3c      	ldr	r3, [pc, #240]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
	if(SW_data<100){
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2b63      	cmp	r3, #99	; 0x63
 8003bb2:	f200 816d 	bhi.w	8003e90 <HAL_TIM_PeriodElapsedCallback+0x7b8>
				 can1_send(0x310,senddata_calib);//calibration
 8003bb6:	a906      	add	r1, sp, #24
 8003bb8:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003bbc:	f7fd fd06 	bl	80015cc <can1_send>
				 can2_send(0x310,senddata_calib);//calibration
 8003bc0:	a906      	add	r1, sp, #24
 8003bc2:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003bc6:	f7fd fd51 	bl	800166c <can2_send>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003bca:	4836      	ldr	r0, [pc, #216]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bd2:	f003 fbc1 	bl	8007358 <HAL_GPIO_WritePin>
 8003bd6:	e5df      	b.n	8003798 <HAL_TIM_PeriodElapsedCallback+0xc0>
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003bd8:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
	if(SW_data<100){
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	2b63      	cmp	r3, #99	; 0x63
 8003bde:	f200 812a 	bhi.w	8003e36 <HAL_TIM_PeriodElapsedCallback+0x75e>
	 			actuator_motor5(0.5,1.0);
 8003be2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003be6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003bea:	f7fd fa63 	bl	80010b4 <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003bee:	482d      	ldr	r0, [pc, #180]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf6:	f003 fbaf 	bl	8007358 <HAL_GPIO_WritePin>
 8003bfa:	e5c3      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0xac>
			if(decode_SW(SWdata[0])&0b00000001){
 8003bfc:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8003bfe:	881b      	ldrh	r3, [r3, #0]
	if(SW_data<100){
 8003c00:	2b63      	cmp	r3, #99	; 0x63
 8003c02:	f200 8125 	bhi.w	8003e50 <HAL_TIM_PeriodElapsedCallback+0x778>
				 omni_move(0.0, 0.0, 7.0,1.0);//spin
 8003c06:	eddf 0a28 	vldr	s1, [pc, #160]	; 8003ca8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8003c0a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003c0e:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003c12:	eeb0 0a60 	vmov.f32	s0, s1
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8003c16:	f001 f9df 	bl	8004fd8 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003c1a:	4822      	ldr	r0, [pc, #136]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c22:	f003 fb99 	bl	8007358 <HAL_GPIO_WritePin>
			actuator_motor5(0.0,0.0);
 8003c26:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003ca8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8003c2a:	eeb0 0a60 	vmov.f32	s0, s1
 8003c2e:	f7fd fa41 	bl	80010b4 <actuator_motor5>
			break;
 8003c32:	e5b1      	b.n	8003798 <HAL_TIM_PeriodElapsedCallback+0xc0>
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
	if(SW_data<100){
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	2b63      	cmp	r3, #99	; 0x63
 8003c3a:	f240 80ac 	bls.w	8003d96 <HAL_TIM_PeriodElapsedCallback+0x6be>
				 actuator_motor5(0.0,0.0);
 8003c3e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8003ca8 <HAL_TIM_PeriodElapsedCallback+0x5d0>
 8003c42:	eeb0 0a60 	vmov.f32	s0, s1
 8003c46:	f7fd fa35 	bl	80010b4 <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	4815      	ldr	r0, [pc, #84]	; (8003ca4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8003c4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c52:	f003 fb81 	bl	8007358 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003c56:	2101      	movs	r1, #1
 8003c58:	4608      	mov	r0, r1
 8003c5a:	f7fd fa67 	bl	800112c <actuator_kicker>
	 			 actuator_kicker(2, 0);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2002      	movs	r0, #2
 8003c62:	f7fd fa63 	bl	800112c <actuator_kicker>
	 			 actuator_kicker_voltage(250.0);
 8003c66:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003cac <HAL_TIM_PeriodElapsedCallback+0x5d4>
 8003c6a:	e584      	b.n	8003776 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8003c6c:	f3af 8000 	nop.w
 8003c70:	16c16c17 	.word	0x16c16c17
 8003c74:	3f76c16c 	.word	0x3f76c16c
 8003c78:	54442d18 	.word	0x54442d18
 8003c7c:	400921fb 	.word	0x400921fb
 8003c80:	54442d18 	.word	0x54442d18
 8003c84:	401921fb 	.word	0x401921fb
 8003c88:	54442d18 	.word	0x54442d18
 8003c8c:	c00921fb 	.word	0xc00921fb
 8003c90:	20000dd3 	.word	0x20000dd3
 8003c94:	20000fa4 	.word	0x20000fa4
 8003c98:	40490fdb 	.word	0x40490fdb
 8003c9c:	20000f94 	.word	0x20000f94
 8003ca0:	20000e4c 	.word	0x20000e4c
 8003ca4:	48000800 	.word	0x48000800
 8003ca8:	00000000 	.word	0x00000000
 8003cac:	437a0000 	.word	0x437a0000
      	 printf(" yaw=%+6.1f",yawAngle);
 8003cb0:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	f7fc fc70 	bl	8000598 <__aeabi_f2d>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	488b      	ldr	r0, [pc, #556]	; (8003eec <HAL_TIM_PeriodElapsedCallback+0x814>)
 8003cbe:	f006 fed9 	bl	800aa74 <iprintf>
    	 printf(" connect=%d v_surge=%+6.4f v_sway=%+6.4f ",Ether_connect,vel_surge,vel_sway);
 8003cc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	f7fc fc67 	bl	8000598 <__aeabi_f2d>
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4989      	ldr	r1, [pc, #548]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6808      	ldr	r0, [r1, #0]
 8003cd2:	4989      	ldr	r1, [pc, #548]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8003cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003cd8:	780e      	ldrb	r6, [r1, #0]
 8003cda:	f7fc fc5d 	bl	8000598 <__aeabi_f2d>
 8003cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4884      	ldr	r0, [pc, #528]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003cea:	f006 fec3 	bl	800aa74 <iprintf>
		 printf(" theta_vision=%+6.4f theta_AI=%+6.4f drible_power=%+6.4f",(theta_vision*180.0/PI),(theta_target*180.0/PI),drible_power);
 8003cee:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	f7fc fc51 	bl	8000598 <__aeabi_f2d>
 8003cf6:	a37a      	add	r3, pc, #488	; (adr r3, 8003ee0 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f7fc fca4 	bl	8000648 <__aeabi_dmul>
 8003d00:	4b80      	ldr	r3, [pc, #512]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8003d02:	4606      	mov	r6, r0
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	460f      	mov	r7, r1
 8003d08:	f7fc fc46 	bl	8000598 <__aeabi_f2d>
 8003d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d10:	4b7d      	ldr	r3, [pc, #500]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	f7fc fc40 	bl	8000598 <__aeabi_f2d>
 8003d18:	a371      	add	r3, pc, #452	; (adr r3, 8003ee0 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fc93 	bl	8000648 <__aeabi_dmul>
 8003d22:	4632      	mov	r2, r6
 8003d24:	e9cd 0100 	strd	r0, r1, [sp]
 8003d28:	463b      	mov	r3, r7
 8003d2a:	4878      	ldr	r0, [pc, #480]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0x834>)
 8003d2c:	f006 fea2 	bl	800aa74 <iprintf>
 		 printf(" kick_power=%3.2f chip=%d",kick_power,chipEN);
 8003d30:	4b77      	ldr	r3, [pc, #476]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	f7fc fc30 	bl	8000598 <__aeabi_f2d>
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4976      	ldr	r1, [pc, #472]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8003d3c:	7809      	ldrb	r1, [r1, #0]
 8003d3e:	9100      	str	r1, [sp, #0]
 8003d40:	4602      	mov	r2, r0
 8003d42:	4875      	ldr	r0, [pc, #468]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003d44:	f006 fe96 	bl	800aa74 <iprintf>
		  printf(" sw=%d sw=%d",sw_mode,decode_SW(SWdata[0]));
 8003d48:	4b74      	ldr	r3, [pc, #464]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003d4a:	4a75      	ldr	r2, [pc, #468]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	7811      	ldrb	r1, [r2, #0]
	if(SW_data<100){
 8003d50:	2b63      	cmp	r3, #99	; 0x63
 8003d52:	d942      	bls.n	8003dda <HAL_TIM_PeriodElapsedCallback+0x702>
		data=0b00010000;//C
	}
	else if(SW_data<500 && SW_data>100){
 8003d54:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
 8003d58:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 8003d5c:	f240 80b2 	bls.w	8003ec4 <HAL_TIM_PeriodElapsedCallback+0x7ec>
		data=0b00000010;//B
	}
	else if(SW_data<2000 && SW_data>500){
 8003d60:	f46f 70fa 	mvn.w	r0, #500	; 0x1f4
 8003d64:	181a      	adds	r2, r3, r0
 8003d66:	b292      	uxth	r2, r2
 8003d68:	f240 50da 	movw	r0, #1498	; 0x5da
 8003d6c:	4282      	cmp	r2, r0
 8003d6e:	f240 8299 	bls.w	80042a4 <HAL_TIM_PeriodElapsedCallback+0xbcc>
		data=0b00000100;//R
	}
	else if(SW_data<3000 && SW_data>2000){
 8003d72:	f46f 62fa 	mvn.w	r2, #2000	; 0x7d0
 8003d76:	189a      	adds	r2, r3, r2
 8003d78:	b292      	uxth	r2, r2
 8003d7a:	f240 30e6 	movw	r0, #998	; 0x3e6
 8003d7e:	4282      	cmp	r2, r0
 8003d80:	f240 82c9 	bls.w	8004316 <HAL_TIM_PeriodElapsedCallback+0xc3e>
		data=0b00000001;//F
	}
	else if(SW_data<4000 && SW_data>3000){
 8003d84:	f6a3 32b9 	subw	r2, r3, #3001	; 0xbb9
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	4282      	cmp	r2, r0
 8003d8c:	bf8c      	ite	hi
 8003d8e:	2200      	movhi	r2, #0
 8003d90:	2201      	movls	r2, #1
 8003d92:	00d2      	lsls	r2, r2, #3
 8003d94:	e022      	b.n	8003ddc <HAL_TIM_PeriodElapsedCallback+0x704>
	 			actuator_motor5(0.5,1.0);
 8003d96:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d9a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003d9e:	f7fd f989 	bl	80010b4 <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003da2:	4860      	ldr	r0, [pc, #384]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x84c>)
					if(kick_state==0){
 8003da4:	4c60      	ldr	r4, [pc, #384]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x850>)
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003da6:	2201      	movs	r2, #1
 8003da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dac:	f003 fad4 	bl	8007358 <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 8003db0:	4b5e      	ldr	r3, [pc, #376]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003db2:	781d      	ldrb	r5, [r3, #0]
 8003db4:	2d01      	cmp	r5, #1
 8003db6:	f000 81b4 	beq.w	8004122 <HAL_TIM_PeriodElapsedCallback+0xa4a>
				if(kick_state==1){
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	f47f ace1 	bne.w	8003784 <HAL_TIM_PeriodElapsedCallback+0xac>
					kick_time++;
 8003dc2:	4b5b      	ldr	r3, [pc, #364]	; (8003f30 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	3201      	adds	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
					if(kick_time>100){
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2a64      	cmp	r2, #100	; 0x64
 8003dce:	f77f acd9 	ble.w	8003784 <HAL_TIM_PeriodElapsedCallback+0xac>
						kick_state=0;
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	6022      	str	r2, [r4, #0]
						kick_time=0;
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e4d4      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0xac>
		data=0b00010000;//C
 8003dda:	2210      	movs	r2, #16
		  printf(" sw=%d sw=%d",sw_mode,decode_SW(SWdata[0]));
 8003ddc:	4855      	ldr	r0, [pc, #340]	; (8003f34 <HAL_TIM_PeriodElapsedCallback+0x85c>)
		 printf(" ball_x=%+6.2f ball_y=%+6.4f ",ball_x,ball_y);
 8003dde:	4e56      	ldr	r6, [pc, #344]	; (8003f38 <HAL_TIM_PeriodElapsedCallback+0x860>)
		  printf(" sw=%d sw=%d",sw_mode,decode_SW(SWdata[0]));
 8003de0:	f006 fe48 	bl	800aa74 <iprintf>
		 printf(" ball_x=%+6.2f ball_y=%+6.4f ",ball_x,ball_y);
 8003de4:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	f7fc fbd6 	bl	8000598 <__aeabi_f2d>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	6830      	ldr	r0, [r6, #0]
 8003df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003df6:	f7fc fbcf 	bl	8000598 <__aeabi_f2d>
 8003dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dfe:	e9cd 0100 	strd	r0, r1, [sp]
 8003e02:	484f      	ldr	r0, [pc, #316]	; (8003f40 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8003e04:	f006 fe36 	bl	800aa74 <iprintf>
		 printf(" ball:0=%d",ball[0]);
 8003e08:	4b48      	ldr	r3, [pc, #288]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003e0a:	484e      	ldr	r0, [pc, #312]	; (8003f44 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8003e0c:	7819      	ldrb	r1, [r3, #0]
 8003e0e:	f006 fe31 	bl	800aa74 <iprintf>
		 printf(" mouse:x=%+3d, y=%+3d",mouse[0],mouse[1]);
 8003e12:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8003e14:	484d      	ldr	r0, [pc, #308]	; (8003f4c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8003e16:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003e1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003e1e:	f006 fe29 	bl	800aa74 <iprintf>
		 printf(" mouse:x=%+6d, y=%+6d",(int)mouse_odom[0],(int)mouse_odom[1]);
 8003e22:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8003e24:	484b      	ldr	r0, [pc, #300]	; (8003f54 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8003e26:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003e2a:	f006 fe23 	bl	800aa74 <iprintf>
		 printf("\r\n");
 8003e2e:	484a      	ldr	r0, [pc, #296]	; (8003f58 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8003e30:	f006 fe86 	bl	800ab40 <puts>
 8003e34:	e4d0      	b.n	80037d8 <HAL_TIM_PeriodElapsedCallback+0x100>
				actuator_motor5(0.0,0.0);
 8003e36:	eddf 0a49 	vldr	s1, [pc, #292]	; 8003f5c <HAL_TIM_PeriodElapsedCallback+0x884>
 8003e3a:	eeb0 0a60 	vmov.f32	s0, s1
 8003e3e:	f7fd f939 	bl	80010b4 <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003e42:	4838      	ldr	r0, [pc, #224]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e4a:	f003 fa85 	bl	8007358 <HAL_GPIO_WritePin>
 8003e4e:	e499      	b.n	8003784 <HAL_TIM_PeriodElapsedCallback+0xac>
	else if(SW_data<500 && SW_data>100){
 8003e50:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
 8003e54:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 8003e58:	d936      	bls.n	8003ec8 <HAL_TIM_PeriodElapsedCallback+0x7f0>
	else if(SW_data<2000 && SW_data>500){
 8003e5a:	f46f 64fa 	mvn.w	r4, #2000	; 0x7d0
 8003e5e:	191a      	adds	r2, r3, r4
 8003e60:	f46f 75fa 	mvn.w	r5, #500	; 0x1f4
 8003e64:	b292      	uxth	r2, r2
 8003e66:	f240 30e6 	movw	r0, #998	; 0x3e6
 8003e6a:	1959      	adds	r1, r3, r5
 8003e6c:	4282      	cmp	r2, r0
 8003e6e:	b289      	uxth	r1, r1
 8003e70:	f240 820c 	bls.w	800428c <HAL_TIM_PeriodElapsedCallback+0xbb4>
 8003e74:	f240 52da 	movw	r2, #1498	; 0x5da
 8003e78:	4291      	cmp	r1, r2
 8003e7a:	f200 822f 	bhi.w	80042dc <HAL_TIM_PeriodElapsedCallback+0xc04>
				 omni_move(0.0, -1.0, 0.0,1.0);//left
 8003e7e:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8003f5c <HAL_TIM_PeriodElapsedCallback+0x884>
 8003e82:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003e86:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8003e8a:	eeb0 0a41 	vmov.f32	s0, s2
 8003e8e:	e6c2      	b.n	8003c16 <HAL_TIM_PeriodElapsedCallback+0x53e>
				omni_move(0.0, 0.0, 0.0,0.0);
 8003e90:	eddf 1a32 	vldr	s3, [pc, #200]	; 8003f5c <HAL_TIM_PeriodElapsedCallback+0x884>
 8003e94:	eef0 0a61 	vmov.f32	s1, s3
 8003e98:	eeb0 0a61 	vmov.f32	s0, s3
 8003e9c:	eeb0 1a61 	vmov.f32	s2, s3
 8003ea0:	f001 f89a 	bl	8004fd8 <omni_move>
				actuator_motor5(0.0,0.0);
 8003ea4:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8003f5c <HAL_TIM_PeriodElapsedCallback+0x884>
 8003ea8:	eeb0 0a60 	vmov.f32	s0, s1
 8003eac:	f7fd f902 	bl	80010b4 <actuator_motor5>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003eb0:	481c      	ldr	r0, [pc, #112]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eb8:	f003 fa4e 	bl	8007358 <HAL_GPIO_WritePin>
 8003ebc:	e46c      	b.n	8003798 <HAL_TIM_PeriodElapsedCallback+0xc0>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8003ebe:	f7fc fa0d 	bl	80002dc <__adddf3>
 8003ec2:	e568      	b.n	8003996 <HAL_TIM_PeriodElapsedCallback+0x2be>
		data=0b00000010;//B
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	e789      	b.n	8003ddc <HAL_TIM_PeriodElapsedCallback+0x704>
				 omni_move(-1.0, 0.0, 0.0,1.0);//back
 8003ec8:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8003f5c <HAL_TIM_PeriodElapsedCallback+0x884>
 8003ecc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003ed0:	eef0 0a41 	vmov.f32	s1, s2
 8003ed4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003ed8:	e69d      	b.n	8003c16 <HAL_TIM_PeriodElapsedCallback+0x53e>
 8003eda:	bf00      	nop
 8003edc:	f3af 8000 	nop.w
 8003ee0:	0d03cf25 	.word	0x0d03cf25
 8003ee4:	404ca5dc 	.word	0x404ca5dc
 8003ee8:	20000fa4 	.word	0x20000fa4
 8003eec:	0800cc68 	.word	0x0800cc68
 8003ef0:	20000f9c 	.word	0x20000f9c
 8003ef4:	20000fa0 	.word	0x20000fa0
 8003ef8:	20000dd3 	.word	0x20000dd3
 8003efc:	0800cc74 	.word	0x0800cc74
 8003f00:	20000f94 	.word	0x20000f94
 8003f04:	20000ee8 	.word	0x20000ee8
 8003f08:	20000f90 	.word	0x20000f90
 8003f0c:	0800cca0 	.word	0x0800cca0
 8003f10:	20000f18 	.word	0x20000f18
 8003f14:	20000ece 	.word	0x20000ece
 8003f18:	0800ccdc 	.word	0x0800ccdc
 8003f1c:	20000e4c 	.word	0x20000e4c
 8003f20:	20000f74 	.word	0x20000f74
 8003f24:	48000800 	.word	0x48000800
 8003f28:	20000f1c 	.word	0x20000f1c
 8003f2c:	20000ebc 	.word	0x20000ebc
 8003f30:	20000f20 	.word	0x20000f20
 8003f34:	0800ccf8 	.word	0x0800ccf8
 8003f38:	20000ec4 	.word	0x20000ec4
 8003f3c:	20000ec0 	.word	0x20000ec0
 8003f40:	0800cd08 	.word	0x0800cd08
 8003f44:	0800cd28 	.word	0x0800cd28
 8003f48:	20000f5c 	.word	0x20000f5c
 8003f4c:	0800cd34 	.word	0x0800cd34
 8003f50:	20000f60 	.word	0x20000f60
 8003f54:	0800cd4c 	.word	0x0800cd4c
 8003f58:	0800cd64 	.word	0x0800cd64
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	40490fdb 	.word	0x40490fdb
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003f64:	f7fc fb18 	bl	8000598 <__aeabi_f2d>
 8003f68:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8003f60 <HAL_TIM_PeriodElapsedCallback+0x888>
 8003f6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003f70:	ec41 0b19 	vmov	d9, r0, r1
 8003f74:	ee17 0a90 	vmov	r0, s15
 8003f78:	f7fc fb0e 	bl	8000598 <__aeabi_f2d>
 8003f7c:	a3d2      	add	r3, pc, #840	; (adr r3, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc fb61 	bl	8000648 <__aeabi_dmul>
 8003f86:	f7fc fe57 	bl	8000c38 <__aeabi_d2f>
 8003f8a:	4bd1      	ldr	r3, [pc, #836]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 8003f8c:	ee08 0a10 	vmov	s16, r0
 8003f90:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003f94:	f7fc fb00 	bl	8000598 <__aeabi_f2d>
 8003f98:	a3c3      	add	r3, pc, #780	; (adr r3, 80042a8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	f7fc fde1 	bl	8000b68 <__aeabi_dcmpgt>
 8003fa6:	b1c8      	cbz	r0, 8003fdc <HAL_TIM_PeriodElapsedCallback+0x904>
        angle_rad -= 2.0f * M_PI;
 8003fa8:	a7c1      	add	r7, pc, #772	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8003faa:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003fae:	a5be      	add	r5, pc, #760	; (adr r5, 80042a8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8003fb0:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8003fb4:	4632      	mov	r2, r6
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	4640      	mov	r0, r8
 8003fba:	4649      	mov	r1, r9
 8003fbc:	f7fc f98c 	bl	80002d8 <__aeabi_dsub>
 8003fc0:	f7fc fe3a 	bl	8000c38 <__aeabi_d2f>
 8003fc4:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8003fc8:	f7fc fae6 	bl	8000598 <__aeabi_f2d>
 8003fcc:	4622      	mov	r2, r4
 8003fce:	462b      	mov	r3, r5
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	4689      	mov	r9, r1
 8003fd4:	f7fc fdc8 	bl	8000b68 <__aeabi_dcmpgt>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_TIM_PeriodElapsedCallback+0x8dc>
    while (angle_rad < -M_PI) {
 8003fdc:	a3b6      	add	r3, pc, #728	; (adr r3, 80042b8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	f7fc fda1 	bl	8000b2c <__aeabi_dcmplt>
 8003fea:	b1c8      	cbz	r0, 8004020 <HAL_TIM_PeriodElapsedCallback+0x948>
        angle_rad += 2.0f * M_PI;
 8003fec:	a7b0      	add	r7, pc, #704	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8003fee:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8003ff2:	a5b1      	add	r5, pc, #708	; (adr r5, 80042b8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8003ff4:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	463b      	mov	r3, r7
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	4649      	mov	r1, r9
 8004000:	f7fc f96c 	bl	80002dc <__adddf3>
 8004004:	f7fc fe18 	bl	8000c38 <__aeabi_d2f>
 8004008:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 800400c:	f7fc fac4 	bl	8000598 <__aeabi_f2d>
 8004010:	4622      	mov	r2, r4
 8004012:	462b      	mov	r3, r5
 8004014:	4680      	mov	r8, r0
 8004016:	4689      	mov	r9, r1
 8004018:	f7fc fd88 	bl	8000b2c <__aeabi_dcmplt>
 800401c:	2800      	cmp	r0, #0
 800401e:	d1eb      	bne.n	8003ff8 <HAL_TIM_PeriodElapsedCallback+0x920>
    while (angle_rad > M_PI) {
 8004020:	ee18 0a90 	vmov	r0, s17
 8004024:	f7fc fab8 	bl	8000598 <__aeabi_f2d>
 8004028:	a39f      	add	r3, pc, #636	; (adr r3, 80042a8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	4604      	mov	r4, r0
 8004030:	460d      	mov	r5, r1
 8004032:	f7fc fd99 	bl	8000b68 <__aeabi_dcmpgt>
 8004036:	b1d0      	cbz	r0, 800406e <HAL_TIM_PeriodElapsedCallback+0x996>
        angle_rad -= 2.0f * M_PI;
 8004038:	a79d      	add	r7, pc, #628	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800403a:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 800403e:	f20f 2b68 	addw	fp, pc, #616	; 0x268
 8004042:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8004046:	4632      	mov	r2, r6
 8004048:	463b      	mov	r3, r7
 800404a:	4620      	mov	r0, r4
 800404c:	4629      	mov	r1, r5
 800404e:	f7fc f943 	bl	80002d8 <__aeabi_dsub>
 8004052:	f7fc fdf1 	bl	8000c38 <__aeabi_d2f>
 8004056:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 800405a:	f7fc fa9d 	bl	8000598 <__aeabi_f2d>
 800405e:	4652      	mov	r2, sl
 8004060:	465b      	mov	r3, fp
 8004062:	4604      	mov	r4, r0
 8004064:	460d      	mov	r5, r1
 8004066:	f7fc fd7f 	bl	8000b68 <__aeabi_dcmpgt>
 800406a:	2800      	cmp	r0, #0
 800406c:	d1eb      	bne.n	8004046 <HAL_TIM_PeriodElapsedCallback+0x96e>
    while (angle_rad < -M_PI) {
 800406e:	a392      	add	r3, pc, #584	; (adr r3, 80042b8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	4620      	mov	r0, r4
 8004076:	4629      	mov	r1, r5
 8004078:	f7fc fd58 	bl	8000b2c <__aeabi_dcmplt>
 800407c:	b1d0      	cbz	r0, 80040b4 <HAL_TIM_PeriodElapsedCallback+0x9dc>
        angle_rad += 2.0f * M_PI;
 800407e:	a78c      	add	r7, pc, #560	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8004080:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8004084:	f20f 2b30 	addw	fp, pc, #560	; 0x230
 8004088:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 800408c:	4632      	mov	r2, r6
 800408e:	463b      	mov	r3, r7
 8004090:	4620      	mov	r0, r4
 8004092:	4629      	mov	r1, r5
 8004094:	f7fc f922 	bl	80002dc <__adddf3>
 8004098:	f7fc fdce 	bl	8000c38 <__aeabi_d2f>
 800409c:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 80040a0:	f7fc fa7a 	bl	8000598 <__aeabi_f2d>
 80040a4:	4652      	mov	r2, sl
 80040a6:	465b      	mov	r3, fp
 80040a8:	4604      	mov	r4, r0
 80040aa:	460d      	mov	r5, r1
 80040ac:	f7fc fd3e 	bl	8000b2c <__aeabi_dcmplt>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d1eb      	bne.n	800408c <HAL_TIM_PeriodElapsedCallback+0x9b4>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 80040b4:	ee78 7a68 	vsub.f32	s15, s16, s17
 80040b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80040bc:	ee17 3a10 	vmov	r3, s14
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bfb8      	it	lt
 80040c4:	425b      	neglt	r3, r3
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	dd14      	ble.n	80040f4 <HAL_TIM_PeriodElapsedCallback+0xa1c>
    	if(angle_rad1 > angle_rad2){
 80040ca:	eef4 8ac8 	vcmpe.f32	s17, s16
 80040ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80040d2:	a377      	add	r3, pc, #476	; (adr r3, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 80040dc:	f140 80df 	bpl.w	800429e <HAL_TIM_PeriodElapsedCallback+0xbc6>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80040e0:	f7fc f8fa 	bl	80002d8 <__aeabi_dsub>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 80040e4:	4622      	mov	r2, r4
 80040e6:	462b      	mov	r3, r5
 80040e8:	f7fc f8f6 	bl	80002d8 <__aeabi_dsub>
 80040ec:	f7fc fda4 	bl	8000c38 <__aeabi_d2f>
 80040f0:	ee07 0a90 	vmov	s15, r0
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 80040f4:	ee17 0a90 	vmov	r0, s15
 80040f8:	f7fc fa4e 	bl	8000598 <__aeabi_f2d>
 80040fc:	a370      	add	r3, pc, #448	; (adr r3, 80042c0 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f7fc faa1 	bl	8000648 <__aeabi_dmul>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	ec51 0b19 	vmov	r0, r1, d9
 800410e:	f7fc f8e3 	bl	80002d8 <__aeabi_dsub>
 8004112:	f7fc fd91 	bl	8000c38 <__aeabi_d2f>
 8004116:	9b04      	ldr	r3, [sp, #16]
 8004118:	6018      	str	r0, [r3, #0]
	 			maintask_run();
 800411a:	f7fe fed9 	bl	8002ed0 <maintask_run>
 800411e:	f7ff bb3b 	b.w	8003798 <HAL_TIM_PeriodElapsedCallback+0xc0>
					if(kick_state==0){
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f ae48 	bne.w	8003dba <HAL_TIM_PeriodElapsedCallback+0x6e2>
						actuator_kicker(3, 100);
 800412a:	2164      	movs	r1, #100	; 0x64
 800412c:	2003      	movs	r0, #3
 800412e:	f7fc fffd 	bl	800112c <actuator_kicker>
						kick_state=1;
 8004132:	6025      	str	r5, [r4, #0]
 8004134:	e641      	b.n	8003dba <HAL_TIM_PeriodElapsedCallback+0x6e2>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8004136:	f7fc fa2f 	bl	8000598 <__aeabi_f2d>
 800413a:	eddf 7a66 	vldr	s15, [pc, #408]	; 80042d4 <HAL_TIM_PeriodElapsedCallback+0xbfc>
 800413e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004142:	ec41 0b19 	vmov	d9, r0, r1
 8004146:	ee17 0a90 	vmov	r0, s15
 800414a:	f7fc fa25 	bl	8000598 <__aeabi_f2d>
 800414e:	a35e      	add	r3, pc, #376	; (adr r3, 80042c8 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f7fc fa78 	bl	8000648 <__aeabi_dmul>
 8004158:	f7fc fd6e 	bl	8000c38 <__aeabi_d2f>
 800415c:	4b5c      	ldr	r3, [pc, #368]	; (80042d0 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800415e:	ee08 0a10 	vmov	s16, r0
 8004162:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8004166:	f7fc fa17 	bl	8000598 <__aeabi_f2d>
 800416a:	a34f      	add	r3, pc, #316	; (adr r3, 80042a8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	4680      	mov	r8, r0
 8004172:	4689      	mov	r9, r1
 8004174:	f7fc fcf8 	bl	8000b68 <__aeabi_dcmpgt>
 8004178:	b1c8      	cbz	r0, 80041ae <HAL_TIM_PeriodElapsedCallback+0xad6>
        angle_rad -= 2.0f * M_PI;
 800417a:	a74d      	add	r7, pc, #308	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800417c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8004180:	a549      	add	r5, pc, #292	; (adr r5, 80042a8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8004182:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8004186:	4632      	mov	r2, r6
 8004188:	463b      	mov	r3, r7
 800418a:	4640      	mov	r0, r8
 800418c:	4649      	mov	r1, r9
 800418e:	f7fc f8a3 	bl	80002d8 <__aeabi_dsub>
 8004192:	f7fc fd51 	bl	8000c38 <__aeabi_d2f>
 8004196:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 800419a:	f7fc f9fd 	bl	8000598 <__aeabi_f2d>
 800419e:	4622      	mov	r2, r4
 80041a0:	462b      	mov	r3, r5
 80041a2:	4680      	mov	r8, r0
 80041a4:	4689      	mov	r9, r1
 80041a6:	f7fc fcdf 	bl	8000b68 <__aeabi_dcmpgt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d1eb      	bne.n	8004186 <HAL_TIM_PeriodElapsedCallback+0xaae>
    while (angle_rad < -M_PI) {
 80041ae:	a342      	add	r3, pc, #264	; (adr r3, 80042b8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	4640      	mov	r0, r8
 80041b6:	4649      	mov	r1, r9
 80041b8:	f7fc fcb8 	bl	8000b2c <__aeabi_dcmplt>
 80041bc:	b1c8      	cbz	r0, 80041f2 <HAL_TIM_PeriodElapsedCallback+0xb1a>
        angle_rad += 2.0f * M_PI;
 80041be:	a73c      	add	r7, pc, #240	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 80041c0:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80041c4:	a53c      	add	r5, pc, #240	; (adr r5, 80042b8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 80041c6:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 80041ca:	4632      	mov	r2, r6
 80041cc:	463b      	mov	r3, r7
 80041ce:	4640      	mov	r0, r8
 80041d0:	4649      	mov	r1, r9
 80041d2:	f7fc f883 	bl	80002dc <__adddf3>
 80041d6:	f7fc fd2f 	bl	8000c38 <__aeabi_d2f>
 80041da:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 80041de:	f7fc f9db 	bl	8000598 <__aeabi_f2d>
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	4680      	mov	r8, r0
 80041e8:	4689      	mov	r9, r1
 80041ea:	f7fc fc9f 	bl	8000b2c <__aeabi_dcmplt>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d1eb      	bne.n	80041ca <HAL_TIM_PeriodElapsedCallback+0xaf2>
    while (angle_rad > M_PI) {
 80041f2:	ee18 0a90 	vmov	r0, s17
 80041f6:	f7fc f9cf 	bl	8000598 <__aeabi_f2d>
 80041fa:	a32b      	add	r3, pc, #172	; (adr r3, 80042a8 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	4604      	mov	r4, r0
 8004202:	460d      	mov	r5, r1
 8004204:	f7fc fcb0 	bl	8000b68 <__aeabi_dcmpgt>
 8004208:	b1d0      	cbz	r0, 8004240 <HAL_TIM_PeriodElapsedCallback+0xb68>
        angle_rad -= 2.0f * M_PI;
 800420a:	a729      	add	r7, pc, #164	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800420c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8004210:	f20f 0b94 	addw	fp, pc, #148	; 0x94
 8004214:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8004218:	4632      	mov	r2, r6
 800421a:	463b      	mov	r3, r7
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fc f85a 	bl	80002d8 <__aeabi_dsub>
 8004224:	f7fc fd08 	bl	8000c38 <__aeabi_d2f>
 8004228:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 800422c:	f7fc f9b4 	bl	8000598 <__aeabi_f2d>
 8004230:	4652      	mov	r2, sl
 8004232:	465b      	mov	r3, fp
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
 8004238:	f7fc fc96 	bl	8000b68 <__aeabi_dcmpgt>
 800423c:	2800      	cmp	r0, #0
 800423e:	d1eb      	bne.n	8004218 <HAL_TIM_PeriodElapsedCallback+0xb40>
    while (angle_rad < -M_PI) {
 8004240:	a31d      	add	r3, pc, #116	; (adr r3, 80042b8 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	4620      	mov	r0, r4
 8004248:	4629      	mov	r1, r5
 800424a:	f7fc fc6f 	bl	8000b2c <__aeabi_dcmplt>
 800424e:	2800      	cmp	r0, #0
 8004250:	f43f af30 	beq.w	80040b4 <HAL_TIM_PeriodElapsedCallback+0x9dc>
        angle_rad += 2.0f * M_PI;
 8004254:	a716      	add	r7, pc, #88	; (adr r7, 80042b0 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8004256:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 800425a:	f20f 0b5c 	addw	fp, pc, #92	; 0x5c
 800425e:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 8004262:	4632      	mov	r2, r6
 8004264:	463b      	mov	r3, r7
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	f7fc f837 	bl	80002dc <__adddf3>
 800426e:	f7fc fce3 	bl	8000c38 <__aeabi_d2f>
 8004272:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8004276:	f7fc f98f 	bl	8000598 <__aeabi_f2d>
 800427a:	4652      	mov	r2, sl
 800427c:	465b      	mov	r3, fp
 800427e:	4604      	mov	r4, r0
 8004280:	460d      	mov	r5, r1
 8004282:	f7fc fc53 	bl	8000b2c <__aeabi_dcmplt>
 8004286:	2800      	cmp	r0, #0
 8004288:	d1eb      	bne.n	8004262 <HAL_TIM_PeriodElapsedCallback+0xb8a>
 800428a:	e713      	b.n	80040b4 <HAL_TIM_PeriodElapsedCallback+0x9dc>
				 omni_move(1.0, 0.0, 0.0,1.0);//fwd
 800428c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80042d8 <HAL_TIM_PeriodElapsedCallback+0xc00>
 8004290:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004294:	eef0 0a41 	vmov.f32	s1, s2
 8004298:	eeb0 0a61 	vmov.f32	s0, s3
 800429c:	e4bb      	b.n	8003c16 <HAL_TIM_PeriodElapsedCallback+0x53e>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 800429e:	f7fc f81d 	bl	80002dc <__adddf3>
 80042a2:	e71f      	b.n	80040e4 <HAL_TIM_PeriodElapsedCallback+0xa0c>
		data=0b00000100;//R
 80042a4:	2204      	movs	r2, #4
 80042a6:	e599      	b.n	8003ddc <HAL_TIM_PeriodElapsedCallback+0x704>
 80042a8:	54442d18 	.word	0x54442d18
 80042ac:	400921fb 	.word	0x400921fb
 80042b0:	54442d18 	.word	0x54442d18
 80042b4:	401921fb 	.word	0x401921fb
 80042b8:	54442d18 	.word	0x54442d18
 80042bc:	c00921fb 	.word	0xc00921fb
 80042c0:	48b81fe5 	.word	0x48b81fe5
 80042c4:	3fad55df 	.word	0x3fad55df
 80042c8:	16c16c17 	.word	0x16c16c17
 80042cc:	3f76c16c 	.word	0x3f76c16c
 80042d0:	20000f94 	.word	0x20000f94
 80042d4:	40490fdb 	.word	0x40490fdb
 80042d8:	00000000 	.word	0x00000000
	else if(SW_data<3000 && SW_data>2000){
 80042dc:	f6a3 33b9 	subw	r3, r3, #3001	; 0xbb9
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4283      	cmp	r3, r0
 80042e4:	d806      	bhi.n	80042f4 <HAL_TIM_PeriodElapsedCallback+0xc1c>
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 80042e6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80042ea:	ed1f 1a05 	vldr	s2, [pc, #-20]	; 80042d8 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80042ee:	eef0 0a61 	vmov.f32	s1, s3
 80042f2:	e5ca      	b.n	8003e8a <HAL_TIM_PeriodElapsedCallback+0x7b2>
				omni_move(0.0, 0.0, 0.0,0.0);
 80042f4:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 80042d8 <HAL_TIM_PeriodElapsedCallback+0xc00>
 80042f8:	eeb0 1a61 	vmov.f32	s2, s3
 80042fc:	eef0 0a61 	vmov.f32	s1, s3
 8004300:	eeb0 0a61 	vmov.f32	s0, s3
 8004304:	f000 fe68 	bl	8004fd8 <omni_move>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8004308:	4806      	ldr	r0, [pc, #24]	; (8004324 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800430a:	2200      	movs	r2, #0
 800430c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004310:	f003 f822 	bl	8007358 <HAL_GPIO_WritePin>
 8004314:	e487      	b.n	8003c26 <HAL_TIM_PeriodElapsedCallback+0x54e>
		data=0b00000001;//F
 8004316:	2201      	movs	r2, #1
 8004318:	e560      	b.n	8003ddc <HAL_TIM_PeriodElapsedCallback+0x704>
	 		maintask_stop();
 800431a:	f7ff f97b 	bl	8003614 <maintask_stop>
	 		 break;
 800431e:	f7ff ba3b 	b.w	8003798 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8004322:	bf00      	nop
 8004324:	48000800 	.word	0x48000800

08004328 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	uint8_t j = 0;

	if (huart->Instance == huart2.Instance) {
 8004328:	4b02      	ldr	r3, [pc, #8]	; (8004334 <HAL_UART_RxCpltCallback+0xc>)
 800432a:	6802      	ldr	r2, [r0, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d002      	beq.n	8004338 <HAL_UART_RxCpltCallback+0x10>
 8004332:	4770      	bx	lr
 8004334:	200012b8 	.word	0x200012b8
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	ed2d 8b02 	vpush	{d8}
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800433e:	4ab0      	ldr	r2, [pc, #704]	; (8004600 <HAL_UART_RxCpltCallback+0x2d8>)
 8004340:	7811      	ldrb	r1, [r2, #0]
 8004342:	29fe      	cmp	r1, #254	; 0xfe
 8004344:	f000 81de 	beq.w	8004704 <HAL_UART_RxCpltCallback+0x3dc>
 8004348:	7853      	ldrb	r3, [r2, #1]
 800434a:	2bfe      	cmp	r3, #254	; 0xfe
 800434c:	f000 81dd 	beq.w	800470a <HAL_UART_RxCpltCallback+0x3e2>
 8004350:	7893      	ldrb	r3, [r2, #2]
 8004352:	2bfe      	cmp	r3, #254	; 0xfe
 8004354:	f000 81dc 	beq.w	8004710 <HAL_UART_RxCpltCallback+0x3e8>
 8004358:	78d3      	ldrb	r3, [r2, #3]
 800435a:	2bfe      	cmp	r3, #254	; 0xfe
 800435c:	f000 81b6 	beq.w	80046cc <HAL_UART_RxCpltCallback+0x3a4>
 8004360:	7913      	ldrb	r3, [r2, #4]
 8004362:	2bfe      	cmp	r3, #254	; 0xfe
 8004364:	f000 81d7 	beq.w	8004716 <HAL_UART_RxCpltCallback+0x3ee>
 8004368:	7953      	ldrb	r3, [r2, #5]
 800436a:	2bfe      	cmp	r3, #254	; 0xfe
 800436c:	f000 81d6 	beq.w	800471c <HAL_UART_RxCpltCallback+0x3f4>
 8004370:	7993      	ldrb	r3, [r2, #6]
 8004372:	2bfe      	cmp	r3, #254	; 0xfe
 8004374:	f000 81d5 	beq.w	8004722 <HAL_UART_RxCpltCallback+0x3fa>
 8004378:	79d3      	ldrb	r3, [r2, #7]
 800437a:	2bfe      	cmp	r3, #254	; 0xfe
 800437c:	f000 81d4 	beq.w	8004728 <HAL_UART_RxCpltCallback+0x400>
 8004380:	7a13      	ldrb	r3, [r2, #8]
 8004382:	2bfe      	cmp	r3, #254	; 0xfe
 8004384:	f000 81d3 	beq.w	800472e <HAL_UART_RxCpltCallback+0x406>
 8004388:	7a53      	ldrb	r3, [r2, #9]
 800438a:	2bfe      	cmp	r3, #254	; 0xfe
 800438c:	f000 81d2 	beq.w	8004734 <HAL_UART_RxCpltCallback+0x40c>
 8004390:	7a93      	ldrb	r3, [r2, #10]
 8004392:	2bfe      	cmp	r3, #254	; 0xfe
 8004394:	f000 81d1 	beq.w	800473a <HAL_UART_RxCpltCallback+0x412>
 8004398:	7ad3      	ldrb	r3, [r2, #11]
 800439a:	2bfe      	cmp	r3, #254	; 0xfe
 800439c:	f000 81d0 	beq.w	8004740 <HAL_UART_RxCpltCallback+0x418>
 80043a0:	7b13      	ldrb	r3, [r2, #12]
 80043a2:	2bfe      	cmp	r3, #254	; 0xfe
 80043a4:	f000 81cf 	beq.w	8004746 <HAL_UART_RxCpltCallback+0x41e>
 80043a8:	7b53      	ldrb	r3, [r2, #13]
 80043aa:	2bfe      	cmp	r3, #254	; 0xfe
 80043ac:	f000 81ce 	beq.w	800474c <HAL_UART_RxCpltCallback+0x424>
 80043b0:	7b93      	ldrb	r3, [r2, #14]
 80043b2:	2bfe      	cmp	r3, #254	; 0xfe
 80043b4:	f000 81cd 	beq.w	8004752 <HAL_UART_RxCpltCallback+0x42a>
 80043b8:	7bd3      	ldrb	r3, [r2, #15]
 80043ba:	2bfe      	cmp	r3, #254	; 0xfe
 80043bc:	f000 818e 	beq.w	80046dc <HAL_UART_RxCpltCallback+0x3b4>
 80043c0:	7c13      	ldrb	r3, [r2, #16]
 80043c2:	4c90      	ldr	r4, [pc, #576]	; (8004604 <HAL_UART_RxCpltCallback+0x2dc>)
 80043c4:	2bfe      	cmp	r3, #254	; 0xfe
 80043c6:	f000 81c7 	beq.w	8004758 <HAL_UART_RxCpltCallback+0x430>
 80043ca:	2311      	movs	r3, #17
 80043cc:	7021      	strb	r1, [r4, #0]
			j++;
 80043ce:	4619      	mov	r1, r3
			}
		}
		else{
			for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
				if ((j + k) >= sizeof(data_from_ether)) {
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80043d0:	1850      	adds	r0, r2, r1
 80043d2:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80043d6:	7060      	strb	r0, [r4, #1]
				if ((j + k) >= sizeof(data_from_ether)) {
 80043d8:	1c98      	adds	r0, r3, #2
 80043da:	2810      	cmp	r0, #16
				}
				else {
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80043dc:	bfd5      	itete	le
 80043de:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80043e0:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80043e2:	78c0      	ldrble	r0, [r0, #3]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80043e4:	f810 0c0f 	ldrbgt.w	r0, [r0, #-15]
 80043e8:	70a0      	strb	r0, [r4, #2]
				if ((j + k) >= sizeof(data_from_ether)) {
 80043ea:	1cd8      	adds	r0, r3, #3
 80043ec:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80043ee:	bfd5      	itete	le
 80043f0:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80043f2:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80043f4:	7900      	ldrble	r0, [r0, #4]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80043f6:	f810 0c0e 	ldrbgt.w	r0, [r0, #-14]
 80043fa:	70e0      	strb	r0, [r4, #3]
				if ((j + k) >= sizeof(data_from_ether)) {
 80043fc:	1d18      	adds	r0, r3, #4
 80043fe:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004400:	bfd5      	itete	le
 8004402:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004404:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004406:	7940      	ldrble	r0, [r0, #5]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004408:	f810 0c0d 	ldrbgt.w	r0, [r0, #-13]
 800440c:	7120      	strb	r0, [r4, #4]
				if ((j + k) >= sizeof(data_from_ether)) {
 800440e:	1d58      	adds	r0, r3, #5
 8004410:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004412:	bfd5      	itete	le
 8004414:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004416:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004418:	7980      	ldrble	r0, [r0, #6]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800441a:	f810 0c0c 	ldrbgt.w	r0, [r0, #-12]
 800441e:	7160      	strb	r0, [r4, #5]
				if ((j + k) >= sizeof(data_from_ether)) {
 8004420:	1d98      	adds	r0, r3, #6
 8004422:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004424:	bfd5      	itete	le
 8004426:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004428:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800442a:	79c0      	ldrble	r0, [r0, #7]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800442c:	f810 0c0b 	ldrbgt.w	r0, [r0, #-11]
 8004430:	71a0      	strb	r0, [r4, #6]
				if ((j + k) >= sizeof(data_from_ether)) {
 8004432:	1dd8      	adds	r0, r3, #7
 8004434:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004436:	bfd5      	itete	le
 8004438:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800443a:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800443c:	7a00      	ldrble	r0, [r0, #8]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800443e:	f810 0c0a 	ldrbgt.w	r0, [r0, #-10]
 8004442:	71e0      	strb	r0, [r4, #7]
				if ((j + k) >= sizeof(data_from_ether)) {
 8004444:	f103 0008 	add.w	r0, r3, #8
 8004448:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800444a:	bfd5      	itete	le
 800444c:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800444e:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004450:	7a40      	ldrble	r0, [r0, #9]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004452:	f810 0c09 	ldrbgt.w	r0, [r0, #-9]
 8004456:	7220      	strb	r0, [r4, #8]
				if ((j + k) >= sizeof(data_from_ether)) {
 8004458:	f103 0009 	add.w	r0, r3, #9
 800445c:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800445e:	bfd5      	itete	le
 8004460:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004462:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004464:	7a80      	ldrble	r0, [r0, #10]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004466:	f810 0c08 	ldrbgt.w	r0, [r0, #-8]
 800446a:	7260      	strb	r0, [r4, #9]
				if ((j + k) >= sizeof(data_from_ether)) {
 800446c:	f103 000a 	add.w	r0, r3, #10
 8004470:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004472:	bfd5      	itete	le
 8004474:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004476:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004478:	7ac0      	ldrble	r0, [r0, #11]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800447a:	f810 0c07 	ldrbgt.w	r0, [r0, #-7]
 800447e:	72a0      	strb	r0, [r4, #10]
				if ((j + k) >= sizeof(data_from_ether)) {
 8004480:	f103 000b 	add.w	r0, r3, #11
 8004484:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004486:	bfd5      	itete	le
 8004488:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800448a:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800448c:	7b00      	ldrble	r0, [r0, #12]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800448e:	f810 0c06 	ldrbgt.w	r0, [r0, #-6]
 8004492:	72e0      	strb	r0, [r4, #11]
				if ((j + k) >= sizeof(data_from_ether)) {
 8004494:	f103 000c 	add.w	r0, r3, #12
 8004498:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800449a:	bfd5      	itete	le
 800449c:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800449e:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80044a0:	7b40      	ldrble	r0, [r0, #13]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044a2:	f810 0c05 	ldrbgt.w	r0, [r0, #-5]
 80044a6:	7320      	strb	r0, [r4, #12]
				if ((j + k) >= sizeof(data_from_ether)) {
 80044a8:	f103 000d 	add.w	r0, r3, #13
 80044ac:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80044ae:	bfd5      	itete	le
 80044b0:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044b2:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80044b4:	7b80      	ldrble	r0, [r0, #14]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044b6:	f810 0c04 	ldrbgt.w	r0, [r0, #-4]
 80044ba:	7360      	strb	r0, [r4, #13]
				if ((j + k) >= sizeof(data_from_ether)) {
 80044bc:	f103 000e 	add.w	r0, r3, #14
 80044c0:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80044c2:	bfd5      	itete	le
 80044c4:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044c6:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80044c8:	7bc0      	ldrble	r0, [r0, #15]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044ca:	f810 0c03 	ldrbgt.w	r0, [r0, #-3]
 80044ce:	73a0      	strb	r0, [r4, #14]
				if ((j + k) >= sizeof(data_from_ether)) {
 80044d0:	f103 000f 	add.w	r0, r3, #15
 80044d4:	2810      	cmp	r0, #16
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80044d6:	bfd5      	itete	le
 80044d8:	18d0      	addle	r0, r2, r3
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044da:	1850      	addgt	r0, r2, r1
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80044dc:	7c00      	ldrble	r0, [r0, #16]
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044de:	f810 0c02 	ldrbgt.w	r0, [r0, #-2]
 80044e2:	73e0      	strb	r0, [r4, #15]
				if ((j + k) >= sizeof(data_from_ether)) {
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8101 	beq.w	80046ec <HAL_UART_RxCpltCallback+0x3c4>
					data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80044ea:	4411      	add	r1, r2
 80044ec:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80044f0:	7423      	strb	r3, [r4, #16]
				}
			}
		}
		if(data_from_ether[sizeof(data_from_ether)-1]==253){
 80044f2:	2bfd      	cmp	r3, #253	; 0xfd
 80044f4:	f000 80ff 	beq.w	80046f6 <HAL_UART_RxCpltCallback+0x3ce>
				Rxbuf_from_Ether_temp[k]=data_from_ether[k];
			}
		}
		else{
			for(uint8_t k=0;k<sizeof(data_from_ether);k++){
				data_from_ether[k]=Rxbuf_from_Ether_temp[k];
 80044f8:	4e43      	ldr	r6, [pc, #268]	; (8004608 <HAL_UART_RxCpltCallback+0x2e0>)
 80044fa:	4d42      	ldr	r5, [pc, #264]	; (8004604 <HAL_UART_RxCpltCallback+0x2dc>)
 80044fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80044fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004500:	6833      	ldr	r3, [r6, #0]
 8004502:	702b      	strb	r3, [r5, #0]
			}
		}

		vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 8004504:	8820      	ldrh	r0, [r4, #0]
 8004506:	4d41      	ldr	r5, [pc, #260]	; (800460c <HAL_UART_RxCpltCallback+0x2e4>)
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004508:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8004610 <HAL_UART_RxCpltCallback+0x2e8>
		vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 800450c:	ba40      	rev16	r0, r0
 800450e:	b280      	uxth	r0, r0
 8004510:	ee07 0a90 	vmov	s15, r0
 8004514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004518:	ee17 0a90 	vmov	r0, s15
 800451c:	f7fc f83c 	bl	8000598 <__aeabi_f2d>
 8004520:	a331      	add	r3, pc, #196	; (adr r3, 80045e8 <HAL_UART_RxCpltCallback+0x2c0>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f7fb fed7 	bl	80002d8 <__aeabi_dsub>
 800452a:	a331      	add	r3, pc, #196	; (adr r3, 80045f0 <HAL_UART_RxCpltCallback+0x2c8>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fc f88a 	bl	8000648 <__aeabi_dmul>
 8004534:	f7fc fb80 	bl	8000c38 <__aeabi_d2f>
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 8004538:	8863      	ldrh	r3, [r4, #2]
		vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 800453a:	6028      	str	r0, [r5, #0]
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 800453c:	ba5b      	rev16	r3, r3
 800453e:	b298      	uxth	r0, r3
 8004540:	ee07 0a90 	vmov	s15, r0
 8004544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004548:	4d32      	ldr	r5, [pc, #200]	; (8004614 <HAL_UART_RxCpltCallback+0x2ec>)
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 800454a:	ee17 0a90 	vmov	r0, s15
 800454e:	f7fc f823 	bl	8000598 <__aeabi_f2d>
 8004552:	a325      	add	r3, pc, #148	; (adr r3, 80045e8 <HAL_UART_RxCpltCallback+0x2c0>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fb febe 	bl	80002d8 <__aeabi_dsub>
 800455c:	a324      	add	r3, pc, #144	; (adr r3, 80045f0 <HAL_UART_RxCpltCallback+0x2c8>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f7fc f871 	bl	8000648 <__aeabi_dmul>
 8004566:	f7fc fb67 	bl	8000c38 <__aeabi_d2f>
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 800456a:	88a3      	ldrh	r3, [r4, #4]
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 800456c:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <HAL_UART_RxCpltCallback+0x2f0>)
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 800456e:	ba5b      	rev16	r3, r3
 8004570:	b29b      	uxth	r3, r3
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 800457a:	6010      	str	r0, [r2, #0]
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 800457c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8004580:	ee17 0a90 	vmov	r0, s15
 8004584:	f7fc f808 	bl	8000598 <__aeabi_f2d>
 8004588:	a31b      	add	r3, pc, #108	; (adr r3, 80045f8 <HAL_UART_RxCpltCallback+0x2d0>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f7fc f85b 	bl	8000648 <__aeabi_dmul>
 8004592:	f7fc fb51 	bl	8000c38 <__aeabi_d2f>
		theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 8004596:	88e3      	ldrh	r3, [r4, #6]
		theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004598:	6028      	str	r0, [r5, #0]
		theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 800459a:	ba5b      	rev16	r3, r3
 800459c:	b29b      	uxth	r3, r3
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a6:	4d1d      	ldr	r5, [pc, #116]	; (800461c <HAL_UART_RxCpltCallback+0x2f4>)
 80045a8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80045ac:	ee17 0a90 	vmov	r0, s15
 80045b0:	f7fb fff2 	bl	8000598 <__aeabi_f2d>
 80045b4:	a310      	add	r3, pc, #64	; (adr r3, 80045f8 <HAL_UART_RxCpltCallback+0x2d0>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fc f845 	bl	8000648 <__aeabi_dmul>
 80045be:	f7fc fb3b 	bl	8000c38 <__aeabi_d2f>

		if(data_from_ether[8]>100){
 80045c2:	7a23      	ldrb	r3, [r4, #8]
		theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 80045c4:	6028      	str	r0, [r5, #0]
		if(data_from_ether[8]>100){
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	f200 808b 	bhi.w	80046e2 <HAL_UART_RxCpltCallback+0x3ba>
			chipEN=1;
			data_from_ether[8]=data_from_ether[8]-100;
		}
		else{
			chipEN=0;
 80045cc:	2100      	movs	r1, #0
		}
		kick_power=(float32_t)data_from_ether[8]/20.0;
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	4a13      	ldr	r2, [pc, #76]	; (8004620 <HAL_UART_RxCpltCallback+0x2f8>)
 80045d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d8:	7011      	strb	r1, [r2, #0]
 80045da:	ee17 0a90 	vmov	r0, s15
 80045de:	f7fb ffdb 	bl	8000598 <__aeabi_f2d>
 80045e2:	e01f      	b.n	8004624 <HAL_UART_RxCpltCallback+0x2fc>
 80045e4:	f3af 8000 	nop.w
 80045e8:	00000000 	.word	0x00000000
 80045ec:	40dfffc0 	.word	0x40dfffc0
 80045f0:	007000e0 	.word	0x007000e0
 80045f4:	3f2c0038 	.word	0x3f2c0038
 80045f8:	989f5e57 	.word	0x989f5e57
 80045fc:	3f19222d 	.word	0x3f19222d
 8004600:	20000e24 	.word	0x20000e24
 8004604:	20000ed4 	.word	0x20000ed4
 8004608:	20000e38 	.word	0x20000e38
 800460c:	20000f9c 	.word	0x20000f9c
 8004610:	46fffe00 	.word	0x46fffe00
 8004614:	20000f94 	.word	0x20000f94
 8004618:	20000fa0 	.word	0x20000fa0
 800461c:	20000f90 	.word	0x20000f90
 8004620:	20000ece 	.word	0x20000ece
 8004624:	a350      	add	r3, pc, #320	; (adr r3, 8004768 <HAL_UART_RxCpltCallback+0x440>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fc f80d 	bl	8000648 <__aeabi_dmul>
 800462e:	f7fc fb03 	bl	8000c38 <__aeabi_d2f>
		drible_power=(float32_t)data_from_ether[9]/20.0;
 8004632:	7a63      	ldrb	r3, [r4, #9]
		kick_power=(float32_t)data_from_ether[8]/20.0;
 8004634:	4a52      	ldr	r2, [pc, #328]	; (8004780 <HAL_UART_RxCpltCallback+0x458>)
		drible_power=(float32_t)data_from_ether[9]/20.0;
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
		kick_power=(float32_t)data_from_ether[8]/20.0;
 800463e:	6010      	str	r0, [r2, #0]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 8004640:	ee17 0a90 	vmov	r0, s15
 8004644:	f7fb ffa8 	bl	8000598 <__aeabi_f2d>
 8004648:	a347      	add	r3, pc, #284	; (adr r3, 8004768 <HAL_UART_RxCpltCallback+0x440>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb fffb 	bl	8000648 <__aeabi_dmul>
 8004652:	f7fc faf1 	bl	8000c38 <__aeabi_d2f>

		keeper_EN=data_from_ether[10];

		ball_x = ((float32_t)(data_from_ether[12]<<8 | data_from_ether[13])-32767.0)/32767.0;
 8004656:	89a3      	ldrh	r3, [r4, #12]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 8004658:	4a4a      	ldr	r2, [pc, #296]	; (8004784 <HAL_UART_RxCpltCallback+0x45c>)
		keeper_EN=data_from_ether[10];
 800465a:	7aa1      	ldrb	r1, [r4, #10]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 800465c:	6010      	str	r0, [r2, #0]
		ball_x = ((float32_t)(data_from_ether[12]<<8 | data_from_ether[13])-32767.0)/32767.0;
 800465e:	ba5b      	rev16	r3, r3
 8004660:	b298      	uxth	r0, r3
 8004662:	ee07 0a90 	vmov	s15, r0
		keeper_EN=data_from_ether[10];
 8004666:	4a48      	ldr	r2, [pc, #288]	; (8004788 <HAL_UART_RxCpltCallback+0x460>)
		ball_x = ((float32_t)(data_from_ether[12]<<8 | data_from_ether[13])-32767.0)/32767.0;
 8004668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		keeper_EN=data_from_ether[10];
 800466c:	7011      	strb	r1, [r2, #0]
		ball_x = ((float32_t)(data_from_ether[12]<<8 | data_from_ether[13])-32767.0)/32767.0;
 800466e:	ee17 0a90 	vmov	r0, s15
 8004672:	f7fb ff91 	bl	8000598 <__aeabi_f2d>
 8004676:	a33e      	add	r3, pc, #248	; (adr r3, 8004770 <HAL_UART_RxCpltCallback+0x448>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fb fe2c 	bl	80002d8 <__aeabi_dsub>
 8004680:	a33d      	add	r3, pc, #244	; (adr r3, 8004778 <HAL_UART_RxCpltCallback+0x450>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f7fb ffdf 	bl	8000648 <__aeabi_dmul>
 800468a:	f7fc fad5 	bl	8000c38 <__aeabi_d2f>
 800468e:	4602      	mov	r2, r0
		ball_y = ((float32_t)(data_from_ether[14]<<8 | data_from_ether[15])-32767.0)/32767.0;
 8004690:	89e0      	ldrh	r0, [r4, #14]
		ball_x = ((float32_t)(data_from_ether[12]<<8 | data_from_ether[13])-32767.0)/32767.0;
 8004692:	4b3e      	ldr	r3, [pc, #248]	; (800478c <HAL_UART_RxCpltCallback+0x464>)
		ball_y = ((float32_t)(data_from_ether[14]<<8 | data_from_ether[15])-32767.0)/32767.0;
 8004694:	ba40      	rev16	r0, r0
 8004696:	b280      	uxth	r0, r0
 8004698:	ee07 0a90 	vmov	s15, r0
 800469c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ball_x = ((float32_t)(data_from_ether[12]<<8 | data_from_ether[13])-32767.0)/32767.0;
 80046a0:	601a      	str	r2, [r3, #0]
		ball_y = ((float32_t)(data_from_ether[14]<<8 | data_from_ether[15])-32767.0)/32767.0;
 80046a2:	ee17 0a90 	vmov	r0, s15
 80046a6:	f7fb ff77 	bl	8000598 <__aeabi_f2d>
 80046aa:	a331      	add	r3, pc, #196	; (adr r3, 8004770 <HAL_UART_RxCpltCallback+0x448>)
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f7fb fe12 	bl	80002d8 <__aeabi_dsub>
 80046b4:	a330      	add	r3, pc, #192	; (adr r3, 8004778 <HAL_UART_RxCpltCallback+0x450>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f7fb ffc5 	bl	8000648 <__aeabi_dmul>
 80046be:	f7fc fabb 	bl	8000c38 <__aeabi_d2f>
	}
}
 80046c2:	ecbd 8b02 	vpop	{d8}
		ball_y = ((float32_t)(data_from_ether[14]<<8 | data_from_ether[15])-32767.0)/32767.0;
 80046c6:	4b32      	ldr	r3, [pc, #200]	; (8004790 <HAL_UART_RxCpltCallback+0x468>)
 80046c8:	6018      	str	r0, [r3, #0]
}
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80046cc:	2303      	movs	r3, #3
			j++;
 80046ce:	4619      	mov	r1, r3
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80046d0:	18d0      	adds	r0, r2, r3
 80046d2:	4c30      	ldr	r4, [pc, #192]	; (8004794 <HAL_UART_RxCpltCallback+0x46c>)
 80046d4:	7845      	ldrb	r5, [r0, #1]
 80046d6:	7025      	strb	r5, [r4, #0]
 80046d8:	7880      	ldrb	r0, [r0, #2]
 80046da:	e67c      	b.n	80043d6 <HAL_UART_RxCpltCallback+0xae>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80046dc:	230f      	movs	r3, #15
			j++;
 80046de:	4619      	mov	r1, r3
 80046e0:	e7f6      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
			data_from_ether[8]=data_from_ether[8]-100;
 80046e2:	3b64      	subs	r3, #100	; 0x64
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	7223      	strb	r3, [r4, #8]
			chipEN=1;
 80046e8:	2101      	movs	r1, #1
 80046ea:	e770      	b.n	80045ce <HAL_UART_RxCpltCallback+0x2a6>
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80046ec:	7c53      	ldrb	r3, [r2, #17]
 80046ee:	7423      	strb	r3, [r4, #16]
		if(data_from_ether[sizeof(data_from_ether)-1]==253){
 80046f0:	2bfd      	cmp	r3, #253	; 0xfd
 80046f2:	f47f af01 	bne.w	80044f8 <HAL_UART_RxCpltCallback+0x1d0>
				Rxbuf_from_Ether_temp[k]=data_from_ether[k];
 80046f6:	4e27      	ldr	r6, [pc, #156]	; (8004794 <HAL_UART_RxCpltCallback+0x46c>)
 80046f8:	4d27      	ldr	r5, [pc, #156]	; (8004798 <HAL_UART_RxCpltCallback+0x470>)
 80046fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80046fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046fe:	6833      	ldr	r3, [r6, #0]
 8004700:	702b      	strb	r3, [r5, #0]
 8004702:	e6ff      	b.n	8004504 <HAL_UART_RxCpltCallback+0x1dc>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004704:	2300      	movs	r3, #0
	uint8_t j = 0;
 8004706:	4619      	mov	r1, r3
 8004708:	e7e2      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800470a:	2301      	movs	r3, #1
			j++;
 800470c:	4619      	mov	r1, r3
 800470e:	e7df      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004710:	2302      	movs	r3, #2
			j++;
 8004712:	4619      	mov	r1, r3
 8004714:	e7dc      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004716:	2304      	movs	r3, #4
			j++;
 8004718:	4619      	mov	r1, r3
 800471a:	e7d9      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800471c:	2305      	movs	r3, #5
			j++;
 800471e:	4619      	mov	r1, r3
 8004720:	e7d6      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004722:	2306      	movs	r3, #6
			j++;
 8004724:	4619      	mov	r1, r3
 8004726:	e7d3      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004728:	2307      	movs	r3, #7
			j++;
 800472a:	4619      	mov	r1, r3
 800472c:	e7d0      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800472e:	2308      	movs	r3, #8
			j++;
 8004730:	4619      	mov	r1, r3
 8004732:	e7cd      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004734:	2309      	movs	r3, #9
			j++;
 8004736:	4619      	mov	r1, r3
 8004738:	e7ca      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800473a:	230a      	movs	r3, #10
			j++;
 800473c:	4619      	mov	r1, r3
 800473e:	e7c7      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004740:	230b      	movs	r3, #11
			j++;
 8004742:	4619      	mov	r1, r3
 8004744:	e7c4      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004746:	230c      	movs	r3, #12
			j++;
 8004748:	4619      	mov	r1, r3
 800474a:	e7c1      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800474c:	230d      	movs	r3, #13
			j++;
 800474e:	4619      	mov	r1, r3
 8004750:	e7be      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004752:	230e      	movs	r3, #14
			j++;
 8004754:	4619      	mov	r1, r3
 8004756:	e7bb      	b.n	80046d0 <HAL_UART_RxCpltCallback+0x3a8>
					data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004758:	7c51      	ldrb	r1, [r2, #17]
 800475a:	7021      	strb	r1, [r4, #0]
		while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800475c:	2310      	movs	r3, #16
			j++;
 800475e:	4619      	mov	r1, r3
 8004760:	e636      	b.n	80043d0 <HAL_UART_RxCpltCallback+0xa8>
 8004762:	bf00      	nop
 8004764:	f3af 8000 	nop.w
 8004768:	9999999a 	.word	0x9999999a
 800476c:	3fa99999 	.word	0x3fa99999
 8004770:	00000000 	.word	0x00000000
 8004774:	40dfffc0 	.word	0x40dfffc0
 8004778:	00400080 	.word	0x00400080
 800477c:	3f000020 	.word	0x3f000020
 8004780:	20000f18 	.word	0x20000f18
 8004784:	20000ee8 	.word	0x20000ee8
 8004788:	20000f14 	.word	0x20000f14
 800478c:	20000ec0 	.word	0x20000ec0
 8004790:	20000ec4 	.word	0x20000ec4
 8004794:	20000ed4 	.word	0x20000ed4
 8004798:	20000e38 	.word	0x20000e38

0800479c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	if (huart->Instance == hlpuart1.Instance) {
 800479c:	4b03      	ldr	r3, [pc, #12]	; (80047ac <HAL_UART_TxCpltCallback+0x10>)
 800479e:	6802      	ldr	r2, [r0, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d000      	beq.n	80047a8 <HAL_UART_TxCpltCallback+0xc>
		dma_printf_send_it(huart);
	}
}
 80047a6:	4770      	bx	lr
		dma_printf_send_it(huart);
 80047a8:	f7fc bfe2 	b.w	8001770 <dma_printf_send_it>
 80047ac:	20001228 	.word	0x20001228

080047b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		maintask_emargency();
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80047b2:	4c07      	ldr	r4, [pc, #28]	; (80047d0 <Error_Handler+0x20>)
		maintask_emargency();
 80047b4:	f7fe fe30 	bl	8003418 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80047b8:	4620      	mov	r0, r4
 80047ba:	2201      	movs	r2, #1
 80047bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047c0:	f002 fdca 	bl	8007358 <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 80047c4:	21c8      	movs	r1, #200	; 0xc8
 80047c6:	4608      	mov	r0, r1
 80047c8:	f7fc fcf0 	bl	80011ac <actuator_buzzer>
	while(1){
 80047cc:	e7f2      	b.n	80047b4 <Error_Handler+0x4>
 80047ce:	bf00      	nop
 80047d0:	48000400 	.word	0x48000400

080047d4 <SystemClock_Config>:
{
 80047d4:	b510      	push	{r4, lr}
 80047d6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047d8:	2238      	movs	r2, #56	; 0x38
 80047da:	2100      	movs	r1, #0
 80047dc:	a806      	add	r0, sp, #24
 80047de:	f006 fb45 	bl	800ae6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047e2:	2000      	movs	r0, #0
 80047e4:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80047e8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80047ec:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80047ee:	f002 fdcf 	bl	8007390 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047f2:	2001      	movs	r0, #1
 80047f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047f8:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047fe:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004800:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004802:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004804:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004808:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800480c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004810:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004812:	f002 fe3b 	bl	800748c <HAL_RCC_OscConfig>
 8004816:	b970      	cbnz	r0, 8004836 <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004818:	2104      	movs	r1, #4
 800481a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800481c:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800481e:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004822:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004826:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800482a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800482c:	f003 f8b2 	bl	8007994 <HAL_RCC_ClockConfig>
 8004830:	b908      	cbnz	r0, 8004836 <SystemClock_Config+0x62>
}
 8004832:	b014      	add	sp, #80	; 0x50
 8004834:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004836:	f7ff ffbb 	bl	80047b0 <Error_Handler>
 800483a:	bf00      	nop

0800483c <main>:
{
 800483c:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800483e:	f001 f8b3 	bl	80059a8 <HAL_Init>
  SystemClock_Config();
 8004842:	f7ff ffc7 	bl	80047d4 <SystemClock_Config>
  MX_GPIO_Init();
 8004846:	f7fd f901 	bl	8001a4c <MX_GPIO_Init>
  MX_DMA_Init();
 800484a:	f7fc ff2f 	bl	80016ac <MX_DMA_Init>
  MX_FDCAN1_Init();
 800484e:	f7fc fff3 	bl	8001838 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8004852:	f000 fe41 	bl	80054d8 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8004856:	f000 fe8d 	bl	8005574 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800485a:	f000 fed3 	bl	8005604 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800485e:	f000 fc39 	bl	80050d4 <MX_SPI1_Init>
  MX_TIM5_Init();
 8004862:	f000 fd69 	bl	8005338 <MX_TIM5_Init>
  MX_TIM7_Init();
 8004866:	f000 fdd5 	bl	8005414 <MX_TIM7_Init>
  MX_ADC5_Init();
 800486a:	f7fc fd55 	bl	8001318 <MX_ADC5_Init>
  MX_ADC3_Init();
 800486e:	f7fc fd01 	bl	8001274 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8004872:	f7fd f807 	bl	8001884 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8004876:	f7fc fcab 	bl	80011d0 <MX_ADC1_Init>
  check_motor2=0;
 800487a:	4a73      	ldr	r2, [pc, #460]	; (8004a48 <main+0x20c>)
  check_motor4=0;
 800487c:	4b73      	ldr	r3, [pc, #460]	; (8004a4c <main+0x210>)
  check_motor3=0;
 800487e:	4974      	ldr	r1, [pc, #464]	; (8004a50 <main+0x214>)
  check_power=0;
 8004880:	4874      	ldr	r0, [pc, #464]	; (8004a54 <main+0x218>)
  check_motor1=0;
 8004882:	4d75      	ldr	r5, [pc, #468]	; (8004a58 <main+0x21c>)
 8004884:	2400      	movs	r4, #0
  check_motor2=0;
 8004886:	7014      	strb	r4, [r2, #0]
  check_motor4=0;
 8004888:	701c      	strb	r4, [r3, #0]
  check_FC=0;
 800488a:	4a74      	ldr	r2, [pc, #464]	; (8004a5c <main+0x220>)
  kick_state=0;
 800488c:	4b74      	ldr	r3, [pc, #464]	; (8004a60 <main+0x224>)
  check_motor3=0;
 800488e:	700c      	strb	r4, [r1, #0]
  check_power=0;
 8004890:	7004      	strb	r4, [r0, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004892:	2104      	movs	r1, #4
 8004894:	4873      	ldr	r0, [pc, #460]	; (8004a64 <main+0x228>)
  check_FC=0;
 8004896:	7014      	strb	r4, [r2, #0]
  kick_state=0;
 8004898:	601c      	str	r4, [r3, #0]
  check_motor1=0;
 800489a:	702c      	strb	r4, [r5, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800489c:	f004 f89a 	bl	80089d4 <HAL_TIM_PWM_Start>
      actuator_buzzer(20, 20);
 80048a0:	2114      	movs	r1, #20
 80048a2:	4608      	mov	r0, r1
 80048a4:	f7fc fc82 	bl	80011ac <actuator_buzzer>
 80048a8:	2114      	movs	r1, #20
 80048aa:	4608      	mov	r0, r1
 80048ac:	f7fc fc7e 	bl	80011ac <actuator_buzzer>
 80048b0:	2114      	movs	r1, #20
 80048b2:	4608      	mov	r0, r1
    setbuf(stdin, NULL);
 80048b4:	4d6c      	ldr	r5, [pc, #432]	; (8004a68 <main+0x22c>)
      actuator_buzzer(20, 20);
 80048b6:	f7fc fc79 	bl	80011ac <actuator_buzzer>
    HAL_UART_Init(&hlpuart1);
 80048ba:	486c      	ldr	r0, [pc, #432]	; (8004a6c <main+0x230>)
 80048bc:	f005 fa32 	bl	8009d24 <HAL_UART_Init>
    setbuf(stdin, NULL);
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	4621      	mov	r1, r4
 80048c4:	6858      	ldr	r0, [r3, #4]
 80048c6:	f006 f943 	bl	800ab50 <setbuf>
    setbuf(stdout, NULL);
 80048ca:	682b      	ldr	r3, [r5, #0]
 80048cc:	4621      	mov	r1, r4
 80048ce:	6898      	ldr	r0, [r3, #8]
 80048d0:	f006 f93e 	bl	800ab50 <setbuf>
    setbuf(stderr, NULL);
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	4621      	mov	r1, r4
 80048d8:	68d8      	ldr	r0, [r3, #12]
 80048da:	f006 f939 	bl	800ab50 <setbuf>
    dma_printf_init(&hlpuart1);
 80048de:	4863      	ldr	r0, [pc, #396]	; (8004a6c <main+0x230>)
 80048e0:	f7fc ff36 	bl	8001750 <dma_printf_init>
    dma_scanf_init(&hlpuart1);
 80048e4:	4861      	ldr	r0, [pc, #388]	; (8004a6c <main+0x230>)
 80048e6:	f7fc ff93 	bl	8001810 <dma_scanf_init>
    printf("start\r\n");
 80048ea:	4861      	ldr	r0, [pc, #388]	; (8004a70 <main+0x234>)
 80048ec:	f006 f928 	bl	800ab40 <puts>
    can1_init_ibis(&hfdcan1);
 80048f0:	4860      	ldr	r0, [pc, #384]	; (8004a74 <main+0x238>)
 80048f2:	f7fc fe3d 	bl	8001570 <can1_init_ibis>
    can2_init_ibis(&hfdcan2);
 80048f6:	4860      	ldr	r0, [pc, #384]	; (8004a78 <main+0x23c>)
 80048f8:	f7fc fe8a 	bl	8001610 <can2_init_ibis>
    HAL_FDCAN_Start(&hfdcan1);
 80048fc:	485d      	ldr	r0, [pc, #372]	; (8004a74 <main+0x238>)
 80048fe:	f002 f9d7 	bl	8006cb0 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004902:	485c      	ldr	r0, [pc, #368]	; (8004a74 <main+0x238>)
 8004904:	4622      	mov	r2, r4
 8004906:	2101      	movs	r1, #1
 8004908:	f002 fada 	bl	8006ec0 <HAL_FDCAN_ActivateNotification>
 800490c:	b950      	cbnz	r0, 8004924 <main+0xe8>
    HAL_FDCAN_Start(&hfdcan2);
 800490e:	4604      	mov	r4, r0
 8004910:	4859      	ldr	r0, [pc, #356]	; (8004a78 <main+0x23c>)
 8004912:	f002 f9cd 	bl	8006cb0 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004916:	4622      	mov	r2, r4
 8004918:	4857      	ldr	r0, [pc, #348]	; (8004a78 <main+0x23c>)
 800491a:	2101      	movs	r1, #1
 800491c:	f002 fad0 	bl	8006ec0 <HAL_FDCAN_ActivateNotification>
 8004920:	4604      	mov	r4, r0
 8004922:	b108      	cbz	r0, 8004928 <main+0xec>
      Error_Handler();
 8004924:	f7ff ff44 	bl	80047b0 <Error_Handler>
    HAL_UART_Init(&huart2);
 8004928:	4854      	ldr	r0, [pc, #336]	; (8004a7c <main+0x240>)
 800492a:	f005 f9fb 	bl	8009d24 <HAL_UART_Init>
    HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_Ether,Rxbufsize_from_Ether);
 800492e:	4954      	ldr	r1, [pc, #336]	; (8004a80 <main+0x244>)
 8004930:	4852      	ldr	r0, [pc, #328]	; (8004a7c <main+0x240>)
 8004932:	2212      	movs	r2, #18
 8004934:	f005 fab6 	bl	8009ea4 <HAL_UART_Receive_DMA>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense,1);
 8004938:	4952      	ldr	r1, [pc, #328]	; (8004a84 <main+0x248>)
 800493a:	4853      	ldr	r0, [pc, #332]	; (8004a88 <main+0x24c>)
 800493c:	2201      	movs	r2, #1
 800493e:	f001 fc9f 	bl	8006280 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense,1);
 8004942:	4952      	ldr	r1, [pc, #328]	; (8004a8c <main+0x250>)
 8004944:	4852      	ldr	r0, [pc, #328]	; (8004a90 <main+0x254>)
 8004946:	2201      	movs	r2, #1
 8004948:	f001 fc9a 	bl	8006280 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata,1);
 800494c:	2201      	movs	r2, #1
 800494e:	4951      	ldr	r1, [pc, #324]	; (8004a94 <main+0x258>)
 8004950:	4851      	ldr	r0, [pc, #324]	; (8004a98 <main+0x25c>)
 8004952:	f001 fc95 	bl	8006280 <HAL_ADC_Start_DMA>
    actuator_power_ONOFF(0);
 8004956:	4620      	mov	r0, r4
 8004958:	f7fc fbf8 	bl	800114c <actuator_power_ONOFF>
    HAL_Delay(20);
 800495c:	2014      	movs	r0, #20
 800495e:	f001 f83f 	bl	80059e0 <HAL_Delay>
    actuator_motor1(0.0,0.0);
 8004962:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8004a9c <main+0x260>
 8004966:	eeb0 0a60 	vmov.f32	s0, s1
 800496a:	f7fc fb33 	bl	8000fd4 <actuator_motor1>
    actuator_motor2(0.0,0.0);
 800496e:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8004a9c <main+0x260>
 8004972:	eeb0 0a60 	vmov.f32	s0, s1
 8004976:	f7fc fb49 	bl	800100c <actuator_motor2>
    actuator_motor3(0.0,0.0);
 800497a:	eddf 0a48 	vldr	s1, [pc, #288]	; 8004a9c <main+0x260>
 800497e:	eeb0 0a60 	vmov.f32	s0, s1
 8004982:	f7fc fb5f 	bl	8001044 <actuator_motor3>
    actuator_motor4(0.0,0.0);
 8004986:	eddf 0a45 	vldr	s1, [pc, #276]	; 8004a9c <main+0x260>
 800498a:	eeb0 0a60 	vmov.f32	s0, s1
 800498e:	f7fc fb75 	bl	800107c <actuator_motor4>
    actuator_motor5(0.0,0.0);
 8004992:	eddf 0a42 	vldr	s1, [pc, #264]	; 8004a9c <main+0x260>
 8004996:	eeb0 0a60 	vmov.f32	s0, s1
 800499a:	f7fc fb8b 	bl	80010b4 <actuator_motor5>
    actuator_kicker(1, 1);
 800499e:	2101      	movs	r1, #1
 80049a0:	4608      	mov	r0, r1
 80049a2:	f7fc fbc3 	bl	800112c <actuator_kicker>
    actuator_kicker_voltage(250.0);
 80049a6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004aa0 <main+0x264>
 80049aa:	f7fc fb9f 	bl	80010ec <actuator_kicker_voltage>
    actuator_power_param(1,15.0);//min voltage
 80049ae:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80049b2:	2001      	movs	r0, #1
 80049b4:	f7fc fbda 	bl	800116c <actuator_power_param>
    actuator_power_param(2,35.0);//max voltage
 80049b8:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8004aa4 <main+0x268>
 80049bc:	2002      	movs	r0, #2
 80049be:	f7fc fbd5 	bl	800116c <actuator_power_param>
    actuator_power_param(3,50.0);//max current
 80049c2:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8004aa8 <main+0x26c>
 80049c6:	2003      	movs	r0, #3
 80049c8:	f7fc fbd0 	bl	800116c <actuator_power_param>
    actuator_power_param(4,90.0);//max temp(fet)
 80049cc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004aac <main+0x270>
 80049d0:	2004      	movs	r0, #4
 80049d2:	f7fc fbcb 	bl	800116c <actuator_power_param>
    actuator_power_param(5,90.0);//max temp(solenoid)
 80049d6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004aac <main+0x270>
 80049da:	2005      	movs	r0, #5
 80049dc:	f7fc fbc6 	bl	800116c <actuator_power_param>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80049e0:	4833      	ldr	r0, [pc, #204]	; (8004ab0 <main+0x274>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049e8:	f002 fcb6 	bl	8007358 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80049ec:	2201      	movs	r2, #1
 80049ee:	4611      	mov	r1, r2
 80049f0:	482f      	ldr	r0, [pc, #188]	; (8004ab0 <main+0x274>)
 80049f2:	f002 fcb1 	bl	8007358 <HAL_GPIO_WritePin>
    ICM20602_init();
 80049f6:	f7fd f8d7 	bl	8001ba8 <ICM20602_init>
    ICM20602_IMU_calibration2();
 80049fa:	f7fd fe51 	bl	80026a0 <ICM20602_IMU_calibration2>
    ICM20602_clearAngle();
 80049fe:	f7fd f9c9 	bl	8001d94 <ICM20602_clearAngle>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8004a02:	4622      	mov	r2, r4
 8004a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a08:	4829      	ldr	r0, [pc, #164]	; (8004ab0 <main+0x274>)
 8004a0a:	f002 fca5 	bl	8007358 <HAL_GPIO_WritePin>
    actuator_power_ONOFF(1);
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f7fc fb9c 	bl	800114c <actuator_power_ONOFF>
    	actuator_buzzer(40, 40);
 8004a14:	2128      	movs	r1, #40	; 0x28
 8004a16:	4608      	mov	r0, r1
 8004a18:	f7fc fbc8 	bl	80011ac <actuator_buzzer>
 8004a1c:	2128      	movs	r1, #40	; 0x28
 8004a1e:	4608      	mov	r0, r1
 8004a20:	f7fc fbc4 	bl	80011ac <actuator_buzzer>
 8004a24:	2128      	movs	r1, #40	; 0x28
 8004a26:	4608      	mov	r0, r1
 8004a28:	f7fc fbc0 	bl	80011ac <actuator_buzzer>
    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <main+0x278>)
    HAL_Delay(500);
 8004a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 8004a32:	73dc      	strb	r4, [r3, #15]
    HAL_Delay(500);
 8004a34:	f000 ffd4 	bl	80059e0 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim7);
 8004a38:	481f      	ldr	r0, [pc, #124]	; (8004ab8 <main+0x27c>)
 8004a3a:	f003 feef 	bl	800881c <HAL_TIM_Base_Start_IT>
	mouse_odom[0] = 0;
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <main+0x280>)
	mouse_odom[1] = 0;
 8004a40:	e9c3 4400 	strd	r4, r4, [r3]
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <main+0x208>
 8004a46:	bf00      	nop
 8004a48:	20000eca 	.word	0x20000eca
 8004a4c:	20000ecc 	.word	0x20000ecc
 8004a50:	20000ecb 	.word	0x20000ecb
 8004a54:	20000ecd 	.word	0x20000ecd
 8004a58:	20000ec9 	.word	0x20000ec9
 8004a5c:	20000ec8 	.word	0x20000ec8
 8004a60:	20000f1c 	.word	0x20000f1c
 8004a64:	20001010 	.word	0x20001010
 8004a68:	2000006c 	.word	0x2000006c
 8004a6c:	20001228 	.word	0x20001228
 8004a70:	0800cd68 	.word	0x0800cd68
 8004a74:	20000c90 	.word	0x20000c90
 8004a78:	20000cf4 	.word	0x20000cf4
 8004a7c:	200012b8 	.word	0x200012b8
 8004a80:	20000e24 	.word	0x20000e24
 8004a84:	20000e80 	.word	0x20000e80
 8004a88:	20000200 	.word	0x20000200
 8004a8c:	20000dd0 	.word	0x20000dd0
 8004a90:	2000026c 	.word	0x2000026c
 8004a94:	20000e4c 	.word	0x20000e4c
 8004a98:	200002d8 	.word	0x200002d8
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	437a0000 	.word	0x437a0000
 8004aa4:	420c0000 	.word	0x420c0000
 8004aa8:	42480000 	.word	0x42480000
 8004aac:	42b40000 	.word	0x42b40000
 8004ab0:	48000800 	.word	0x48000800
 8004ab4:	20000ed4 	.word	0x20000ed4
 8004ab8:	2000105c 	.word	0x2000105c
 8004abc:	20000f60 	.word	0x20000f60

08004ac0 <HAL_FDCAN_RxFifo0Callback>:
{
 8004ac0:	b538      	push	{r3, r4, r5, lr}
	if (hfdcan->Instance == hfdcan1.Instance) {
 8004ac2:	4bd9      	ldr	r3, [pc, #868]	; (8004e28 <HAL_FDCAN_RxFifo0Callback+0x368>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	6803      	ldr	r3, [r0, #0]
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	f000 80a3 	beq.w	8004c14 <HAL_FDCAN_RxFifo0Callback+0x154>
	else if (hfdcan->Instance == hfdcan2.Instance) {
 8004ace:	4ad7      	ldr	r2, [pc, #860]	; (8004e2c <HAL_FDCAN_RxFifo0Callback+0x36c>)
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d000      	beq.n	8004ad8 <HAL_FDCAN_RxFifo0Callback+0x18>
}
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
		   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8004ad8:	07cb      	lsls	r3, r1, #31
 8004ada:	d5fc      	bpl.n	8004ad6 <HAL_FDCAN_RxFifo0Callback+0x16>
		   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8004adc:	4cd4      	ldr	r4, [pc, #848]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004ade:	4dd5      	ldr	r5, [pc, #852]	; (8004e34 <HAL_FDCAN_RxFifo0Callback+0x374>)
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	f002 f961 	bl	8006dac <HAL_FDCAN_GetRxMessage>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	f040 8218 	bne.w	8004f20 <HAL_FDCAN_RxFifo0Callback+0x460>
			switch (RxHeader.Identifier){
 8004af0:	682a      	ldr	r2, [r5, #0]
 8004af2:	f240 2341 	movw	r3, #577	; 0x241
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d8ed      	bhi.n	8004ad6 <HAL_FDCAN_RxFifo0Callback+0x16>
 8004afa:	f240 2301 	movw	r3, #513	; 0x201
 8004afe:	429a      	cmp	r2, r3
 8004b00:	f240 8128 	bls.w	8004d54 <HAL_FDCAN_RxFifo0Callback+0x294>
 8004b04:	f2a2 2202 	subw	r2, r2, #514	; 0x202
 8004b08:	2a3f      	cmp	r2, #63	; 0x3f
 8004b0a:	d8e4      	bhi.n	8004ad6 <HAL_FDCAN_RxFifo0Callback+0x16>
 8004b0c:	a301      	add	r3, pc, #4	; (adr r3, 8004b14 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8004b0e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004e65 	.word	0x08004e65
 8004b18:	08004e8f 	.word	0x08004e8f
 8004b1c:	08004ad7 	.word	0x08004ad7
 8004b20:	08004ad7 	.word	0x08004ad7
 8004b24:	08004ad7 	.word	0x08004ad7
 8004b28:	08004ad7 	.word	0x08004ad7
 8004b2c:	08004ad7 	.word	0x08004ad7
 8004b30:	08004ad7 	.word	0x08004ad7
 8004b34:	08004ad7 	.word	0x08004ad7
 8004b38:	08004ad7 	.word	0x08004ad7
 8004b3c:	08004ad7 	.word	0x08004ad7
 8004b40:	08004ad7 	.word	0x08004ad7
 8004b44:	08004ad7 	.word	0x08004ad7
 8004b48:	08004ad7 	.word	0x08004ad7
 8004b4c:	08004ad7 	.word	0x08004ad7
 8004b50:	08004ad7 	.word	0x08004ad7
 8004b54:	08004ad7 	.word	0x08004ad7
 8004b58:	08004ad7 	.word	0x08004ad7
 8004b5c:	08004ad7 	.word	0x08004ad7
 8004b60:	08004e81 	.word	0x08004e81
 8004b64:	08004f0d 	.word	0x08004f0d
 8004b68:	08004ad7 	.word	0x08004ad7
 8004b6c:	08004ad7 	.word	0x08004ad7
 8004b70:	08004ad7 	.word	0x08004ad7
 8004b74:	08004ad7 	.word	0x08004ad7
 8004b78:	08004ad7 	.word	0x08004ad7
 8004b7c:	08004ad7 	.word	0x08004ad7
 8004b80:	08004ad7 	.word	0x08004ad7
 8004b84:	08004ad7 	.word	0x08004ad7
 8004b88:	08004ad7 	.word	0x08004ad7
 8004b8c:	08004ad7 	.word	0x08004ad7
 8004b90:	08004ad7 	.word	0x08004ad7
 8004b94:	08004eff 	.word	0x08004eff
 8004b98:	08004ef1 	.word	0x08004ef1
 8004b9c:	08004d83 	.word	0x08004d83
 8004ba0:	08004ad7 	.word	0x08004ad7
 8004ba4:	08004ad7 	.word	0x08004ad7
 8004ba8:	08004ad7 	.word	0x08004ad7
 8004bac:	08004ad7 	.word	0x08004ad7
 8004bb0:	08004ad7 	.word	0x08004ad7
 8004bb4:	08004ad7 	.word	0x08004ad7
 8004bb8:	08004ad7 	.word	0x08004ad7
 8004bbc:	08004ad7 	.word	0x08004ad7
 8004bc0:	08004ad7 	.word	0x08004ad7
 8004bc4:	08004ad7 	.word	0x08004ad7
 8004bc8:	08004ad7 	.word	0x08004ad7
 8004bcc:	08004ad7 	.word	0x08004ad7
 8004bd0:	08004ad7 	.word	0x08004ad7
 8004bd4:	08004edd 	.word	0x08004edd
 8004bd8:	08004ec9 	.word	0x08004ec9
 8004bdc:	08004d6f 	.word	0x08004d6f
 8004be0:	08004ad7 	.word	0x08004ad7
 8004be4:	08004ad7 	.word	0x08004ad7
 8004be8:	08004ad7 	.word	0x08004ad7
 8004bec:	08004ad7 	.word	0x08004ad7
 8004bf0:	08004ad7 	.word	0x08004ad7
 8004bf4:	08004ad7 	.word	0x08004ad7
 8004bf8:	08004ad7 	.word	0x08004ad7
 8004bfc:	08004ad7 	.word	0x08004ad7
 8004c00:	08004ad7 	.word	0x08004ad7
 8004c04:	08004ad7 	.word	0x08004ad7
 8004c08:	08004ad7 	.word	0x08004ad7
 8004c0c:	08004ad7 	.word	0x08004ad7
 8004c10:	08004eab 	.word	0x08004eab
	   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8004c14:	07ca      	lsls	r2, r1, #31
 8004c16:	f57f af5e 	bpl.w	8004ad6 <HAL_FDCAN_RxFifo0Callback+0x16>
	   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8004c1a:	4c85      	ldr	r4, [pc, #532]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004c1c:	4d85      	ldr	r5, [pc, #532]	; (8004e34 <HAL_FDCAN_RxFifo0Callback+0x374>)
 8004c1e:	4623      	mov	r3, r4
 8004c20:	462a      	mov	r2, r5
 8004c22:	2140      	movs	r1, #64	; 0x40
 8004c24:	f002 f8c2 	bl	8006dac <HAL_FDCAN_GetRxMessage>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f040 8179 	bne.w	8004f20 <HAL_FDCAN_RxFifo0Callback+0x460>
		switch (RxHeader.Identifier){
 8004c2e:	682a      	ldr	r2, [r5, #0]
 8004c30:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
 8004c34:	f63f af4f 	bhi.w	8004ad6 <HAL_FDCAN_RxFifo0Callback+0x16>
 8004c38:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004c3c:	f0c0 808a 	bcc.w	8004d54 <HAL_FDCAN_RxFifo0Callback+0x294>
 8004c40:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8004c44:	2a40      	cmp	r2, #64	; 0x40
 8004c46:	f63f af46 	bhi.w	8004ad6 <HAL_FDCAN_RxFifo0Callback+0x16>
 8004c4a:	a301      	add	r3, pc, #4	; (adr r3, 8004c50 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8004c4c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8004c50:	08004dff 	.word	0x08004dff
 8004c54:	08004de3 	.word	0x08004de3
 8004c58:	08004ad7 	.word	0x08004ad7
 8004c5c:	08004ad7 	.word	0x08004ad7
 8004c60:	08004ad7 	.word	0x08004ad7
 8004c64:	08004ad7 	.word	0x08004ad7
 8004c68:	08004ad7 	.word	0x08004ad7
 8004c6c:	08004ad7 	.word	0x08004ad7
 8004c70:	08004ad7 	.word	0x08004ad7
 8004c74:	08004ad7 	.word	0x08004ad7
 8004c78:	08004ad7 	.word	0x08004ad7
 8004c7c:	08004ad7 	.word	0x08004ad7
 8004c80:	08004ad7 	.word	0x08004ad7
 8004c84:	08004ad7 	.word	0x08004ad7
 8004c88:	08004ad7 	.word	0x08004ad7
 8004c8c:	08004ad7 	.word	0x08004ad7
 8004c90:	08004ad7 	.word	0x08004ad7
 8004c94:	08004ad7 	.word	0x08004ad7
 8004c98:	08004ad7 	.word	0x08004ad7
 8004c9c:	08004ad7 	.word	0x08004ad7
 8004ca0:	08004ad7 	.word	0x08004ad7
 8004ca4:	08004ad7 	.word	0x08004ad7
 8004ca8:	08004ad7 	.word	0x08004ad7
 8004cac:	08004ad7 	.word	0x08004ad7
 8004cb0:	08004ad7 	.word	0x08004ad7
 8004cb4:	08004ad7 	.word	0x08004ad7
 8004cb8:	08004ad7 	.word	0x08004ad7
 8004cbc:	08004ad7 	.word	0x08004ad7
 8004cc0:	08004ad7 	.word	0x08004ad7
 8004cc4:	08004ad7 	.word	0x08004ad7
 8004cc8:	08004ad7 	.word	0x08004ad7
 8004ccc:	08004ad7 	.word	0x08004ad7
 8004cd0:	08004dd5 	.word	0x08004dd5
 8004cd4:	08004dc7 	.word	0x08004dc7
 8004cd8:	08004ad7 	.word	0x08004ad7
 8004cdc:	08004ad7 	.word	0x08004ad7
 8004ce0:	08004d83 	.word	0x08004d83
 8004ce4:	08004d91 	.word	0x08004d91
 8004ce8:	08004ad7 	.word	0x08004ad7
 8004cec:	08004ad7 	.word	0x08004ad7
 8004cf0:	08004ad7 	.word	0x08004ad7
 8004cf4:	08004ad7 	.word	0x08004ad7
 8004cf8:	08004ad7 	.word	0x08004ad7
 8004cfc:	08004ad7 	.word	0x08004ad7
 8004d00:	08004ad7 	.word	0x08004ad7
 8004d04:	08004ad7 	.word	0x08004ad7
 8004d08:	08004ad7 	.word	0x08004ad7
 8004d0c:	08004ad7 	.word	0x08004ad7
 8004d10:	08004db3 	.word	0x08004db3
 8004d14:	08004d9f 	.word	0x08004d9f
 8004d18:	08004ad7 	.word	0x08004ad7
 8004d1c:	08004ad7 	.word	0x08004ad7
 8004d20:	08004d6f 	.word	0x08004d6f
 8004d24:	08004ad7 	.word	0x08004ad7
 8004d28:	08004ad7 	.word	0x08004ad7
 8004d2c:	08004ad7 	.word	0x08004ad7
 8004d30:	08004ad7 	.word	0x08004ad7
 8004d34:	08004ad7 	.word	0x08004ad7
 8004d38:	08004ad7 	.word	0x08004ad7
 8004d3c:	08004ad7 	.word	0x08004ad7
 8004d40:	08004ad7 	.word	0x08004ad7
 8004d44:	08004ad7 	.word	0x08004ad7
 8004d48:	08004ad7 	.word	0x08004ad7
 8004d4c:	08004ad7 	.word	0x08004ad7
 8004d50:	08004e1b 	.word	0x08004e1b
			switch (RxHeader.Identifier){
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	f000 80e0 	beq.w	8004f1a <HAL_FDCAN_RxFifo0Callback+0x45a>
 8004d5a:	2a01      	cmp	r2, #1
 8004d5c:	f47f aebb 	bne.w	8004ad6 <HAL_FDCAN_RxFifo0Callback+0x16>
				error_No[0]=RxData[0];
 8004d60:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <HAL_FDCAN_RxFifo0Callback+0x378>)
 8004d62:	8822      	ldrh	r2, [r4, #0]
 8004d64:	801a      	strh	r2, [r3, #0]
}
 8004d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				maintask_stop();
 8004d6a:	f7fe bc53 	b.w	8003614 <maintask_stop>
				amplitude[4]=uchar4_to_float(RxData);
 8004d6e:	4830      	ldr	r0, [pc, #192]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004d70:	f000 fdc2 	bl	80058f8 <uchar4_to_float>
 8004d74:	4931      	ldr	r1, [pc, #196]	; (8004e3c <HAL_FDCAN_RxFifo0Callback+0x37c>)
				check_power=1;
 8004d76:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <HAL_FDCAN_RxFifo0Callback+0x380>)
				amplitude[4]=uchar4_to_float(RxData);
 8004d78:	ed81 0a04 	vstr	s0, [r1, #16]
				check_power=1;
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
}
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
				tempercher[4]=uchar4_to_float(RxData);
 8004d82:	482b      	ldr	r0, [pc, #172]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004d84:	f000 fdb8 	bl	80058f8 <uchar4_to_float>
 8004d88:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004d8a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
			tempercher[5]=uchar4_to_float(RxData);
 8004d90:	4827      	ldr	r0, [pc, #156]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004d92:	f000 fdb1 	bl	80058f8 <uchar4_to_float>
 8004d96:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004d98:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8004d9c:	bd38      	pop	{r3, r4, r5, pc}
			  amplitude[1]=uchar4_to_float(RxData);
 8004d9e:	4824      	ldr	r0, [pc, #144]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004da0:	f000 fdaa 	bl	80058f8 <uchar4_to_float>
 8004da4:	4925      	ldr	r1, [pc, #148]	; (8004e3c <HAL_FDCAN_RxFifo0Callback+0x37c>)
			  check_motor2=1;
 8004da6:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <HAL_FDCAN_RxFifo0Callback+0x388>)
			  amplitude[1]=uchar4_to_float(RxData);
 8004da8:	ed81 0a01 	vstr	s0, [r1, #4]
			  check_motor2=1;
 8004dac:	2201      	movs	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]
}
 8004db0:	bd38      	pop	{r3, r4, r5, pc}
			  amplitude[0]=uchar4_to_float(RxData);
 8004db2:	481f      	ldr	r0, [pc, #124]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004db4:	f000 fda0 	bl	80058f8 <uchar4_to_float>
 8004db8:	4920      	ldr	r1, [pc, #128]	; (8004e3c <HAL_FDCAN_RxFifo0Callback+0x37c>)
			  check_motor1=1;
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_FDCAN_RxFifo0Callback+0x38c>)
			  amplitude[0]=uchar4_to_float(RxData);
 8004dbc:	ed81 0a00 	vstr	s0, [r1]
			  check_motor1=1;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
}
 8004dc4:	bd38      	pop	{r3, r4, r5, pc}
			  tempercher[1]=uchar4_to_float(RxData);
 8004dc6:	481a      	ldr	r0, [pc, #104]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004dc8:	f000 fd96 	bl	80058f8 <uchar4_to_float>
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004dce:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
			  tempercher[0]=uchar4_to_float(RxData);
 8004dd4:	4816      	ldr	r0, [pc, #88]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004dd6:	f000 fd8f 	bl	80058f8 <uchar4_to_float>
 8004dda:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004ddc:	ed83 0a00 	vstr	s0, [r3]
}
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004de2:	4813      	ldr	r0, [pc, #76]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004de4:	f000 fd88 	bl	80058f8 <uchar4_to_float>
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004de8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004e50 <HAL_FDCAN_RxFifo0Callback+0x390>
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004dec:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <HAL_FDCAN_RxFifo0Callback+0x394>)
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004dee:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <HAL_FDCAN_RxFifo0Callback+0x398>)
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004df0:	ed82 0a01 	vstr	s0, [r2, #4]
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004df4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004df8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004dfe:	480c      	ldr	r0, [pc, #48]	; (8004e30 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004e00:	f000 fd7a 	bl	80058f8 <uchar4_to_float>
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004e04:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004e50 <HAL_FDCAN_RxFifo0Callback+0x390>
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004e08:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <HAL_FDCAN_RxFifo0Callback+0x394>)
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <HAL_FDCAN_RxFifo0Callback+0x398>)
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004e0c:	ed82 0a00 	vstr	s0, [r2]
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004e10:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004e14:	edc3 7a00 	vstr	s15, [r3]
}
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
			ball[0]=RxData[0];
 8004e1a:	4910      	ldr	r1, [pc, #64]	; (8004e5c <HAL_FDCAN_RxFifo0Callback+0x39c>)
			check_FC=1;
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <HAL_FDCAN_RxFifo0Callback+0x3a0>)
			ball[0]=RxData[0];
 8004e1e:	6820      	ldr	r0, [r4, #0]
 8004e20:	6008      	str	r0, [r1, #0]
			check_FC=1;
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
}
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000c90 	.word	0x20000c90
 8004e2c:	20000cf4 	.word	0x20000cf4
 8004e30:	20000df4 	.word	0x20000df4
 8004e34:	20000dfc 	.word	0x20000dfc
 8004e38:	20000eec 	.word	0x20000eec
 8004e3c:	20000ea8 	.word	0x20000ea8
 8004e40:	20000ecd 	.word	0x20000ecd
 8004e44:	20000f78 	.word	0x20000f78
 8004e48:	20000eca 	.word	0x20000eca
 8004e4c:	20000ec9 	.word	0x20000ec9
 8004e50:	3e3426c8 	.word	0x3e3426c8
 8004e54:	20000f34 	.word	0x20000f34
 8004e58:	20000f48 	.word	0x20000f48
 8004e5c:	20000ebc 	.word	0x20000ebc
 8004e60:	20000ec8 	.word	0x20000ec8
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004e64:	482f      	ldr	r0, [pc, #188]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004e66:	f000 fd47 	bl	80058f8 <uchar4_to_float>
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004e6a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8004f28 <HAL_FDCAN_RxFifo0Callback+0x468>
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004e6e:	4a2f      	ldr	r2, [pc, #188]	; (8004f2c <HAL_FDCAN_RxFifo0Callback+0x46c>)
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004e70:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <HAL_FDCAN_RxFifo0Callback+0x470>)
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004e72:	ed82 0a02 	vstr	s0, [r2, #8]
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004e76:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004e7a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
				Power_voltage[4]=uchar4_to_float(RxData);
 8004e80:	4828      	ldr	r0, [pc, #160]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004e82:	f000 fd39 	bl	80058f8 <uchar4_to_float>
 8004e86:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8004e88:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8004e8c:	bd38      	pop	{r3, r4, r5, pc}
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004e8e:	4825      	ldr	r0, [pc, #148]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004e90:	f000 fd32 	bl	80058f8 <uchar4_to_float>
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004e94:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004f28 <HAL_FDCAN_RxFifo0Callback+0x468>
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004e98:	4a24      	ldr	r2, [pc, #144]	; (8004f2c <HAL_FDCAN_RxFifo0Callback+0x46c>)
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004e9a:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_FDCAN_RxFifo0Callback+0x470>)
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004e9c:	ed82 0a03 	vstr	s0, [r2, #12]
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004ea0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ea4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
				mouse[0] = (int16_t)(((uint16_t)RxData[1] << 8) | RxData[0]);
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <HAL_FDCAN_RxFifo0Callback+0x478>)
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	601a      	str	r2, [r3, #0]
				mouse_odom[0] += mouse[0];
 8004eb0:	4b22      	ldr	r3, [pc, #136]	; (8004f3c <HAL_FDCAN_RxFifo0Callback+0x47c>)
				mouse[0] = (int16_t)(((uint16_t)RxData[1] << 8) | RxData[0]);
 8004eb2:	f9b4 5000 	ldrsh.w	r5, [r4]
				mouse[1] = (int16_t)(((uint16_t)RxData[3] << 8) | RxData[2]);
 8004eb6:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
				mouse_odom[1] += mouse[1];
 8004eba:	e9d3 1200 	ldrd	r1, r2, [r3]
				mouse_odom[0] += mouse[0];
 8004ebe:	4429      	add	r1, r5
				mouse_odom[1] += mouse[1];
 8004ec0:	4402      	add	r2, r0
 8004ec2:	e9c3 1200 	strd	r1, r2, [r3]
}
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
					  amplitude[3]=uchar4_to_float(RxData);
 8004ec8:	4816      	ldr	r0, [pc, #88]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004eca:	f000 fd15 	bl	80058f8 <uchar4_to_float>
 8004ece:	491c      	ldr	r1, [pc, #112]	; (8004f40 <HAL_FDCAN_RxFifo0Callback+0x480>)
					  check_motor4=1;
 8004ed0:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_FDCAN_RxFifo0Callback+0x484>)
					  amplitude[3]=uchar4_to_float(RxData);
 8004ed2:	ed81 0a03 	vstr	s0, [r1, #12]
					  check_motor4=1;
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
}
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
					  amplitude[2]=uchar4_to_float(RxData);
 8004edc:	4811      	ldr	r0, [pc, #68]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004ede:	f000 fd0b 	bl	80058f8 <uchar4_to_float>
 8004ee2:	4917      	ldr	r1, [pc, #92]	; (8004f40 <HAL_FDCAN_RxFifo0Callback+0x480>)
					  check_motor3=1;
 8004ee4:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <HAL_FDCAN_RxFifo0Callback+0x488>)
					  amplitude[2]=uchar4_to_float(RxData);
 8004ee6:	ed81 0a02 	vstr	s0, [r1, #8]
					  check_motor3=1;
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
}
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
					  tempercher[3]=uchar4_to_float(RxData);
 8004ef0:	480c      	ldr	r0, [pc, #48]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004ef2:	f000 fd01 	bl	80058f8 <uchar4_to_float>
 8004ef6:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8004ef8:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
					  tempercher[2]=uchar4_to_float(RxData);
 8004efe:	4809      	ldr	r0, [pc, #36]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004f00:	f000 fcfa 	bl	80058f8 <uchar4_to_float>
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8004f06:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
				Power_voltage[5]=uchar4_to_float(RxData);
 8004f0c:	4805      	ldr	r0, [pc, #20]	; (8004f24 <HAL_FDCAN_RxFifo0Callback+0x464>)
 8004f0e:	f000 fcf3 	bl	80058f8 <uchar4_to_float>
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8004f14:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
				error_No[0]=RxData[0];
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <HAL_FDCAN_RxFifo0Callback+0x490>)
 8004f1c:	8822      	ldrh	r2, [r4, #0]
 8004f1e:	801a      	strh	r2, [r3, #0]
				Error_Handler();
 8004f20:	f7ff fc46 	bl	80047b0 <Error_Handler>
 8004f24:	20000df4 	.word	0x20000df4
 8004f28:	3e3426c8 	.word	0x3e3426c8
 8004f2c:	20000f34 	.word	0x20000f34
 8004f30:	20000f48 	.word	0x20000f48
 8004f34:	20000ddc 	.word	0x20000ddc
 8004f38:	20000f5c 	.word	0x20000f5c
 8004f3c:	20000f60 	.word	0x20000f60
 8004f40:	20000ea8 	.word	0x20000ea8
 8004f44:	20000ecc 	.word	0x20000ecc
 8004f48:	20000ecb 	.word	0x20000ecb
 8004f4c:	20000f78 	.word	0x20000f78
 8004f50:	20000eec 	.word	0x20000eec

08004f54 <delayUs>:
cycle_cnt = SysTick->VAL;
} while (ms != HAL_GetTick());
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
}

void delayUs(uint16_t micros) {
 8004f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f58:	4682      	mov	sl, r0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004f5a:	f002 fce3 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <delayUs+0x7c>)
 8004f60:	fba3 3700 	umull	r3, r7, r3, r0
 8004f64:	0cbf      	lsrs	r7, r7, #18
cycle_cnt = SysTick->VAL;
 8004f66:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
ms = HAL_GetTick();
 8004f6a:	f7fd ffab 	bl	8002ec4 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8004f6e:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 8004f70:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 8004f72:	f7fd ffa7 	bl	8002ec4 <HAL_GetTick>
 8004f76:	4284      	cmp	r4, r0
 8004f78:	d1f7      	bne.n	8004f6a <delayUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004f7a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8004f7e:	fb08 f907 	mul.w	r9, r8, r7
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004f82:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8004fd0 <delayUs+0x7c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004f86:	eba9 0905 	sub.w	r9, r9, r5
cycle_cnt = SysTick->VAL;
 8004f8a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004f8e:	fbb9 f9f7 	udiv	r9, r9, r7
 8004f92:	fb08 9904 	mla	r9, r8, r4, r9
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004f96:	f002 fcc5 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 8004f9a:	fbab 3700 	umull	r3, r7, fp, r0
 8004f9e:	0cbf      	lsrs	r7, r7, #18
ms = HAL_GetTick();
 8004fa0:	f7fd ff90 	bl	8002ec4 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8004fa4:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 8004fa6:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 8004fa8:	f7fd ff8c 	bl	8002ec4 <HAL_GetTick>
 8004fac:	4284      	cmp	r4, r0
 8004fae:	d1f7      	bne.n	8004fa0 <delayUs+0x4c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004fb0:	fb08 f307 	mul.w	r3, r8, r7
 8004fb4:	1b5b      	subs	r3, r3, r5
 8004fb6:	fbb3 f3f7 	udiv	r3, r3, r7
uint32_t start = getUs();
while (getUs()-start < (uint32_t) micros) {
 8004fba:	eba3 0309 	sub.w	r3, r3, r9
 8004fbe:	fb08 3304 	mla	r3, r8, r4, r3
 8004fc2:	4553      	cmp	r3, sl
 8004fc4:	d201      	bcs.n	8004fca <delayUs+0x76>
	asm("nop");
 8004fc6:	bf00      	nop
 8004fc8:	e7e5      	b.n	8004f96 <delayUs+0x42>
}
}
 8004fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fce:	bf00      	nop
 8004fd0:	431bde83 	.word	0x431bde83
 8004fd4:	00000000 	.word	0x00000000

08004fd8 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	ee11 0a10 	vmov	r0, s2
 8004fde:	ed2d 8b04 	vpush	{d8-d9}
 8004fe2:	eef0 8a61 	vmov.f32	s17, s3
 8004fe6:	eeb0 8a60 	vmov.f32	s16, s1
 8004fea:	eeb0 9a40 	vmov.f32	s18, s0
	v_round=robot_radius*omega_omni;
 8004fee:	f7fb fad3 	bl	8000598 <__aeabi_f2d>
 8004ff2:	a336      	add	r3, pc, #216	; (adr r3, 80050cc <omni_move+0xf4>)
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	f7fb fb26 	bl	8000648 <__aeabi_dmul>
 8004ffc:	f7fb fe1c 	bl	8000c38 <__aeabi_d2f>

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8005000:	eddf 7a29 	vldr	s15, [pc, #164]	; 80050a8 <omni_move+0xd0>
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8005004:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80050ac <omni_move+0xd4>
 8005008:	eddf 4a29 	vldr	s9, [pc, #164]	; 80050b0 <omni_move+0xd8>
	v_round=robot_radius*omega_omni;
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <omni_move+0xdc>)
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 800500e:	4e2a      	ldr	r6, [pc, #168]	; (80050b8 <omni_move+0xe0>)
	v_round=robot_radius*omega_omni;
 8005010:	6018      	str	r0, [r3, #0]
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8005012:	ee69 7a27 	vmul.f32	s15, s18, s15
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8005016:	ee29 7a07 	vmul.f32	s14, s18, s14
 800501a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800501e:	eeb0 6a67 	vmov.f32	s12, s15
 8005022:	eea8 7a24 	vfma.f32	s14, s16, s9
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8005026:	4b25      	ldr	r3, [pc, #148]	; (80050bc <omni_move+0xe4>)
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8005028:	4d25      	ldr	r5, [pc, #148]	; (80050c0 <omni_move+0xe8>)
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 800502a:	4c26      	ldr	r4, [pc, #152]	; (80050c4 <omni_move+0xec>)
 800502c:	eea8 6a25 	vfma.f32	s12, s16, s11
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8005030:	ee05 0a10 	vmov	s10, r0
 8005034:	eed8 7a25 	vfnms.f32	s15, s16, s11
 8005038:	ee38 0a09 	vadd.f32	s0, s16, s18
	v_round=robot_radius*omega_omni;
 800503c:	ee06 0a90 	vmov	s13, r0
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8005040:	eea0 5a24 	vfma.f32	s10, s0, s9
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8005044:	eddf 5a20 	vldr	s11, [pc, #128]	; 80050c8 <omni_move+0xf0>
 8005048:	ee36 0a86 	vadd.f32	s0, s13, s12
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 800504c:	ee36 7a87 	vadd.f32	s14, s13, s14
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8005050:	ee76 7aa7 	vadd.f32	s15, s13, s15
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8005054:	ee20 0a25 	vmul.f32	s0, s0, s11
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8005058:	ee27 7a25 	vmul.f32	s14, s14, s11
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 800505c:	ee25 6a25 	vmul.f32	s12, s10, s11
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8005060:	ee67 7aa5 	vmul.f32	s15, s15, s11

	actuator_motor1(m1,duty_Limit);
 8005064:	eef0 0a68 	vmov.f32	s1, s17
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8005068:	ed86 7a00 	vstr	s14, [r6]
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 800506c:	ed83 0a00 	vstr	s0, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8005070:	ed85 6a00 	vstr	s12, [r5]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8005074:	edc4 7a00 	vstr	s15, [r4]
	actuator_motor1(m1,duty_Limit);
 8005078:	f7fb ffac 	bl	8000fd4 <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 800507c:	ed96 0a00 	vldr	s0, [r6]
 8005080:	eef0 0a68 	vmov.f32	s1, s17
 8005084:	f7fb ffc2 	bl	800100c <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 8005088:	ed95 0a00 	vldr	s0, [r5]
 800508c:	eef0 0a68 	vmov.f32	s1, s17
 8005090:	f7fb ffd8 	bl	8001044 <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 8005094:	eef0 0a68 	vmov.f32	s1, s17

		cnt_motor=0;
		stall=0;
	}*/

}
 8005098:	ecbd 8b04 	vpop	{d8-d9}
	actuator_motor4(m4,duty_Limit);
 800509c:	ed94 0a00 	vldr	s0, [r4]
}
 80050a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	actuator_motor4(m4,duty_Limit);
 80050a4:	f7fb bfea 	b.w	800107c <actuator_motor4>
 80050a8:	3f5db3d7 	.word	0x3f5db3d7
 80050ac:	3f3504f3 	.word	0x3f3504f3
 80050b0:	bf3504f3 	.word	0xbf3504f3
 80050b4:	20000f98 	.word	0x20000f98
 80050b8:	20000f28 	.word	0x20000f28
 80050bc:	20000f24 	.word	0x20000f24
 80050c0:	20000f2c 	.word	0x20000f2c
 80050c4:	20000f30 	.word	0x20000f30
 80050c8:	40b5e430 	.word	0x40b5e430
 80050cc:	47ae147b 	.word	0x47ae147b
 80050d0:	3fb47ae1 	.word	0x3fb47ae1

080050d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80050d4:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80050d6:	4811      	ldr	r0, [pc, #68]	; (800511c <MX_SPI1_Init+0x48>)
 80050d8:	4c11      	ldr	r4, [pc, #68]	; (8005120 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050da:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050de:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050e0:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80050e8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050ec:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80050f0:	2430      	movs	r4, #48	; 0x30
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80050f2:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80050f4:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050f6:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050fc:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005100:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005104:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005108:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800510a:	f003 f807 	bl	800811c <HAL_SPI_Init>
 800510e:	b900      	cbnz	r0, 8005112 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005110:	bd10      	pop	{r4, pc}
 8005112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005116:	f7ff bb4b 	b.w	80047b0 <Error_Handler>
 800511a:	bf00      	nop
 800511c:	20000fac 	.word	0x20000fac
 8005120:	40013000 	.word	0x40013000
 8005124:	00000000 	.word	0x00000000

08005128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005128:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800512a:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <HAL_SPI_MspInit+0x70>)
 800512c:	6801      	ldr	r1, [r0, #0]
{
 800512e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8005132:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005134:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005138:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800513c:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 800513e:	d002      	beq.n	8005146 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005140:	b009      	add	sp, #36	; 0x24
 8005142:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800514a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800514e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005190 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005152:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005158:	661a      	str	r2, [r3, #96]	; 0x60
 800515a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800515c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005160:	9200      	str	r2, [sp, #0]
 8005162:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	64da      	str	r2, [r3, #76]	; 0x4c
 800516c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005174:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005176:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800517c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005180:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005182:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005184:	f001 ffe8 	bl	8007158 <HAL_GPIO_Init>
}
 8005188:	b009      	add	sp, #36	; 0x24
 800518a:	f85d fb04 	ldr.w	pc, [sp], #4
 800518e:	bf00      	nop
 8005190:	000000e0 	.word	0x000000e0
 8005194:	00000002 	.word	0x00000002
 8005198:	40013000 	.word	0x40013000

0800519c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_MspInit+0x30>)
 800519e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	661a      	str	r2, [r3, #96]	; 0x60
 80051a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80051a8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051aa:	f002 0201 	and.w	r2, r2, #1
 80051ae:	9200      	str	r2, [sp, #0]
 80051b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051b8:	659a      	str	r2, [r3, #88]	; 0x58
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051c4:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80051c6:	f002 b959 	b.w	800747c <HAL_PWREx_DisableUCPDDeadBattery>
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000

080051d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop

080051d4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051d4:	e7fe      	b.n	80051d4 <HardFault_Handler>
 80051d6:	bf00      	nop

080051d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051d8:	e7fe      	b.n	80051d8 <MemManage_Handler>
 80051da:	bf00      	nop

080051dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051dc:	e7fe      	b.n	80051dc <BusFault_Handler>
 80051de:	bf00      	nop

080051e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051e0:	e7fe      	b.n	80051e0 <UsageFault_Handler>
 80051e2:	bf00      	nop

080051e4 <SVC_Handler>:
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <DebugMon_Handler>:
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop

080051ec <PendSV_Handler>:
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop

080051f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051f0:	f000 bbea 	b.w	80059c8 <HAL_IncTick>

080051f4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <DMA1_Channel1_IRQHandler+0x8>)
 80051f6:	f001 bb5d 	b.w	80068b4 <HAL_DMA_IRQHandler>
 80051fa:	bf00      	nop
 80051fc:	20001168 	.word	0x20001168

08005200 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <DMA1_Channel2_IRQHandler+0x8>)
 8005202:	f001 bb57 	b.w	80068b4 <HAL_DMA_IRQHandler>
 8005206:	bf00      	nop
 8005208:	200011c8 	.word	0x200011c8

0800520c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <DMA1_Channel3_IRQHandler+0x8>)
 800520e:	f001 bb51 	b.w	80068b4 <HAL_DMA_IRQHandler>
 8005212:	bf00      	nop
 8005214:	200003a4 	.word	0x200003a4

08005218 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <DMA1_Channel4_IRQHandler+0x8>)
 800521a:	f001 bb4b 	b.w	80068b4 <HAL_DMA_IRQHandler>
 800521e:	bf00      	nop
 8005220:	20000404 	.word	0x20000404

08005224 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <DMA1_Channel5_IRQHandler+0x8>)
 8005226:	f001 bb45 	b.w	80068b4 <HAL_DMA_IRQHandler>
 800522a:	bf00      	nop
 800522c:	20000344 	.word	0x20000344

08005230 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <DMA1_Channel6_IRQHandler+0x8>)
 8005232:	f001 bb3f 	b.w	80068b4 <HAL_DMA_IRQHandler>
 8005236:	bf00      	nop
 8005238:	200010a8 	.word	0x200010a8

0800523c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800523c:	4801      	ldr	r0, [pc, #4]	; (8005244 <DMA1_Channel7_IRQHandler+0x8>)
 800523e:	f001 bb39 	b.w	80068b4 <HAL_DMA_IRQHandler>
 8005242:	bf00      	nop
 8005244:	20001108 	.word	0x20001108

08005248 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <FDCAN1_IT0_IRQHandler+0x8>)
 800524a:	f001 bec1 	b.w	8006fd0 <HAL_FDCAN_IRQHandler>
 800524e:	bf00      	nop
 8005250:	20000c90 	.word	0x20000c90

08005254 <FDCAN1_IT1_IRQHandler>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <FDCAN1_IT1_IRQHandler+0x8>)
 8005256:	f001 bebb 	b.w	8006fd0 <HAL_FDCAN_IRQHandler>
 800525a:	bf00      	nop
 800525c:	20000c90 	.word	0x20000c90

08005260 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8005260:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005264:	f002 b888 	b.w	8007378 <HAL_GPIO_EXTI_IRQHandler>

08005268 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005268:	4801      	ldr	r0, [pc, #4]	; (8005270 <USART2_IRQHandler+0x8>)
 800526a:	f004 b829 	b.w	80092c0 <HAL_UART_IRQHandler>
 800526e:	bf00      	nop
 8005270:	200012b8 	.word	0x200012b8

08005274 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005274:	4801      	ldr	r0, [pc, #4]	; (800527c <TIM7_DAC_IRQHandler+0x8>)
 8005276:	f003 bc67 	b.w	8008b48 <HAL_TIM_IRQHandler>
 800527a:	bf00      	nop
 800527c:	2000105c 	.word	0x2000105c

08005280 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <FDCAN2_IT0_IRQHandler+0x8>)
 8005282:	f001 bea5 	b.w	8006fd0 <HAL_FDCAN_IRQHandler>
 8005286:	bf00      	nop
 8005288:	20000cf4 	.word	0x20000cf4

0800528c <FDCAN2_IT1_IRQHandler>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <FDCAN2_IT1_IRQHandler+0x8>)
 800528e:	f001 be9f 	b.w	8006fd0 <HAL_FDCAN_IRQHandler>
 8005292:	bf00      	nop
 8005294:	20000cf4 	.word	0x20000cf4

08005298 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <LPUART1_IRQHandler+0x8>)
 800529a:	f004 b811 	b.w	80092c0 <HAL_UART_IRQHandler>
 800529e:	bf00      	nop
 80052a0:	20001228 	.word	0x20001228

080052a4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80052a4:	2001      	movs	r0, #1
 80052a6:	4770      	bx	lr

080052a8 <_kill>:

int _kill(int pid, int sig)
{
 80052a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80052aa:	f005 fe31 	bl	800af10 <__errno>
 80052ae:	2316      	movs	r3, #22
 80052b0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
 80052b6:	bd08      	pop	{r3, pc}

080052b8 <_exit>:

void _exit (int status)
{
 80052b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80052ba:	f005 fe29 	bl	800af10 <__errno>
 80052be:	2316      	movs	r3, #22
 80052c0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80052c2:	e7fe      	b.n	80052c2 <_exit+0xa>

080052c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052c4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052c6:	1e16      	subs	r6, r2, #0
 80052c8:	dd07      	ble.n	80052da <_read+0x16>
 80052ca:	460c      	mov	r4, r1
 80052cc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80052ce:	f3af 8000 	nop.w
 80052d2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052d6:	42a5      	cmp	r5, r4
 80052d8:	d1f9      	bne.n	80052ce <_read+0xa>
	}

return len;
}
 80052da:	4630      	mov	r0, r6
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	bf00      	nop

080052e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052e0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052e2:	1e16      	subs	r6, r2, #0
 80052e4:	dd07      	ble.n	80052f6 <_write+0x16>
 80052e6:	460c      	mov	r4, r1
 80052e8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80052ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 80052ee:	f7fd fdd7 	bl	8002ea0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f2:	42ac      	cmp	r4, r5
 80052f4:	d1f9      	bne.n	80052ea <_write+0xa>
	}
	return len;
}
 80052f6:	4630      	mov	r0, r6
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	bf00      	nop

080052fc <_close>:

int _close(int file)
{
	return -1;
}
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop

08005304 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005308:	604b      	str	r3, [r1, #4]
	return 0;
}
 800530a:	2000      	movs	r0, #0
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop

08005310 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005310:	2001      	movs	r0, #1
 8005312:	4770      	bx	lr

08005314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005314:	2000      	movs	r0, #0
 8005316:	4770      	bx	lr

08005318 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <SystemInit+0x18>)
 800531a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800531e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005322:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800532a:	6099      	str	r1, [r3, #8]
#endif
}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000ed00 	.word	0xe000ed00
 8005334:	00000000 	.word	0x00000000

08005338 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005338:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800533a:	4c33      	ldr	r4, [pc, #204]	; (8005408 <MX_TIM5_Init+0xd0>)
 800533c:	4a33      	ldr	r2, [pc, #204]	; (800540c <MX_TIM5_Init+0xd4>)
 800533e:	6022      	str	r2, [r4, #0]
{
 8005340:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 8005342:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005344:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 8005346:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005348:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 800534a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800534e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005352:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8005356:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800535a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 800535e:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005362:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005364:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005366:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005368:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800536a:	f003 fa99 	bl	80088a0 <HAL_TIM_PWM_Init>
 800536e:	bb00      	cbnz	r0, 80053b2 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005370:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005372:	4825      	ldr	r0, [pc, #148]	; (8005408 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005374:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005376:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005378:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800537a:	f003 fe3b 	bl	8008ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800537e:	b9f0      	cbnz	r0, 80053be <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005380:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80053f8 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005384:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005386:	4820      	ldr	r0, [pc, #128]	; (8005408 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005388:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800538a:	2204      	movs	r2, #4
 800538c:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800538e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005392:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005394:	f003 fd24 	bl	8008de0 <HAL_TIM_PWM_ConfigChannel>
 8005398:	b970      	cbnz	r0, 80053b8 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 800539a:	4a1c      	ldr	r2, [pc, #112]	; (800540c <MX_TIM5_Init+0xd4>)
 800539c:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539e:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 80053a0:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80053a6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80053aa:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 80053ac:	d00a      	beq.n	80053c4 <MX_TIM5_Init+0x8c>
}
 80053ae:	b012      	add	sp, #72	; 0x48
 80053b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80053b2:	f7ff f9fd 	bl	80047b0 <Error_Handler>
 80053b6:	e7db      	b.n	8005370 <MX_TIM5_Init+0x38>
    Error_Handler();
 80053b8:	f7ff f9fa 	bl	80047b0 <Error_Handler>
 80053bc:	e7ed      	b.n	800539a <MX_TIM5_Init+0x62>
    Error_Handler();
 80053be:	f7ff f9f7 	bl	80047b0 <Error_Handler>
 80053c2:	e7dd      	b.n	8005380 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80053cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8005400 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80053d2:	480f      	ldr	r0, [pc, #60]	; (8005410 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053d4:	f042 0204 	orr.w	r2, r2, #4
 80053d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80053da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80053e2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80053e4:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80053e6:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ea:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80053ec:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80053ee:	f001 feb3 	bl	8007158 <HAL_GPIO_Init>
}
 80053f2:	b012      	add	sp, #72	; 0x48
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	bf00      	nop
 80053f8:	00000060 	.word	0x00000060
 80053fc:	00000000 	.word	0x00000000
 8005400:	00001000 	.word	0x00001000
 8005404:	00000002 	.word	0x00000002
 8005408:	20001010 	.word	0x20001010
 800540c:	40000c00 	.word	0x40000c00
 8005410:	48000800 	.word	0x48000800

08005414 <MX_TIM7_Init>:
{
 8005414:	b500      	push	{lr}
  htim7.Instance = TIM7;
 8005416:	4812      	ldr	r0, [pc, #72]	; (8005460 <MX_TIM7_Init+0x4c>)
 8005418:	4912      	ldr	r1, [pc, #72]	; (8005464 <MX_TIM7_Init+0x50>)
{
 800541a:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 800541c:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800541e:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8005420:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 1000;
 8005424:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005428:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 1000;
 800542c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005430:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005432:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005434:	f003 f958 	bl	80086e8 <HAL_TIM_Base_Init>
 8005438:	b950      	cbnz	r0, 8005450 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800543a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800543c:	4808      	ldr	r0, [pc, #32]	; (8005460 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800543e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005440:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005442:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005444:	f003 fdd6 	bl	8008ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8005448:	b928      	cbnz	r0, 8005456 <MX_TIM7_Init+0x42>
}
 800544a:	b005      	add	sp, #20
 800544c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005450:	f7ff f9ae 	bl	80047b0 <Error_Handler>
 8005454:	e7f1      	b.n	800543a <MX_TIM7_Init+0x26>
    Error_Handler();
 8005456:	f7ff f9ab 	bl	80047b0 <Error_Handler>
}
 800545a:	b005      	add	sp, #20
 800545c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005460:	2000105c 	.word	0x2000105c
 8005464:	40001400 	.word	0x40001400

08005468 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_TIM_PWM_MspInit+0x28>)
 800546a:	6802      	ldr	r2, [r0, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d000      	beq.n	8005472 <HAL_TIM_PWM_MspInit+0xa>
 8005470:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005472:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 8005476:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800547a:	f042 0208 	orr.w	r2, r2, #8
 800547e:	659a      	str	r2, [r3, #88]	; 0x58
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	9b01      	ldr	r3, [sp, #4]
}
 800548a:	b002      	add	sp, #8
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40000c00 	.word	0x40000c00

08005494 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <HAL_TIM_Base_MspInit+0x3c>)
 8005496:	6802      	ldr	r2, [r0, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d000      	beq.n	800549e <HAL_TIM_Base_MspInit+0xa>
 800549c:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 800549e:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 80054a2:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 80054a4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80054a6:	f041 0120 	orr.w	r1, r1, #32
 80054aa:	6599      	str	r1, [r3, #88]	; 0x58
 80054ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80054ae:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80054b6:	2037      	movs	r0, #55	; 0x37
 80054b8:	2200      	movs	r2, #0
 80054ba:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 80054bc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80054be:	f001 f82b 	bl	8006518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80054c2:	2037      	movs	r0, #55	; 0x37
}
 80054c4:	b003      	add	sp, #12
 80054c6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80054ca:	f001 b863 	b.w	8006594 <HAL_NVIC_EnableIRQ>
 80054ce:	bf00      	nop
 80054d0:	40001400 	.word	0x40001400
 80054d4:	00000000 	.word	0x00000000

080054d8 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054d8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005560 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 80054dc:	4822      	ldr	r0, [pc, #136]	; (8005568 <MX_LPUART1_UART_Init+0x90>)
 80054de:	4923      	ldr	r1, [pc, #140]	; (800556c <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 80054e0:	4a23      	ldr	r2, [pc, #140]	; (8005570 <MX_LPUART1_UART_Init+0x98>)
{
 80054e2:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054e4:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 80054e6:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80054ea:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80054ec:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80054ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054f2:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80054f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80054fa:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054fe:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005500:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005502:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005504:	f004 fc0e 	bl	8009d24 <HAL_UART_Init>
 8005508:	b970      	cbnz	r0, 8005528 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800550a:	4817      	ldr	r0, [pc, #92]	; (8005568 <MX_LPUART1_UART_Init+0x90>)
 800550c:	2100      	movs	r1, #0
 800550e:	f004 fd17 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 8005512:	b988      	cbnz	r0, 8005538 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005514:	4814      	ldr	r0, [pc, #80]	; (8005568 <MX_LPUART1_UART_Init+0x90>)
 8005516:	2100      	movs	r1, #0
 8005518:	f004 fd54 	bl	8009fc4 <HAL_UARTEx_SetRxFifoThreshold>
 800551c:	b9a0      	cbnz	r0, 8005548 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800551e:	4812      	ldr	r0, [pc, #72]	; (8005568 <MX_LPUART1_UART_Init+0x90>)
 8005520:	f004 fcf0 	bl	8009f04 <HAL_UARTEx_DisableFifoMode>
 8005524:	b9b8      	cbnz	r0, 8005556 <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005526:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005528:	f7ff f942 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800552c:	480e      	ldr	r0, [pc, #56]	; (8005568 <MX_LPUART1_UART_Init+0x90>)
 800552e:	2100      	movs	r1, #0
 8005530:	f004 fd06 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 8005534:	2800      	cmp	r0, #0
 8005536:	d0ed      	beq.n	8005514 <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 8005538:	f7ff f93a 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800553c:	480a      	ldr	r0, [pc, #40]	; (8005568 <MX_LPUART1_UART_Init+0x90>)
 800553e:	2100      	movs	r1, #0
 8005540:	f004 fd40 	bl	8009fc4 <HAL_UARTEx_SetRxFifoThreshold>
 8005544:	2800      	cmp	r0, #0
 8005546:	d0ea      	beq.n	800551e <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 8005548:	f7ff f932 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800554c:	4806      	ldr	r0, [pc, #24]	; (8005568 <MX_LPUART1_UART_Init+0x90>)
 800554e:	f004 fcd9 	bl	8009f04 <HAL_UARTEx_DisableFifoMode>
 8005552:	2800      	cmp	r0, #0
 8005554:	d0e7      	beq.n	8005526 <MX_LPUART1_UART_Init+0x4e>
}
 8005556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800555a:	f7ff b929 	b.w	80047b0 <Error_Handler>
 800555e:	bf00      	nop
	...
 8005568:	20001228 	.word	0x20001228
 800556c:	40008000 	.word	0x40008000
 8005570:	001e8480 	.word	0x001e8480

08005574 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005574:	4821      	ldr	r0, [pc, #132]	; (80055fc <MX_USART2_UART_Init+0x88>)
 8005576:	4922      	ldr	r1, [pc, #136]	; (8005600 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 8005578:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 800557c:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800557e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8005580:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005584:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005586:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 800558c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005590:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005594:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005598:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800559c:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800559e:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055a0:	f004 fbc0 	bl	8009d24 <HAL_UART_Init>
 80055a4:	b970      	cbnz	r0, 80055c4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055a6:	4815      	ldr	r0, [pc, #84]	; (80055fc <MX_USART2_UART_Init+0x88>)
 80055a8:	2100      	movs	r1, #0
 80055aa:	f004 fcc9 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 80055ae:	b988      	cbnz	r0, 80055d4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055b0:	4812      	ldr	r0, [pc, #72]	; (80055fc <MX_USART2_UART_Init+0x88>)
 80055b2:	2100      	movs	r1, #0
 80055b4:	f004 fd06 	bl	8009fc4 <HAL_UARTEx_SetRxFifoThreshold>
 80055b8:	b9a0      	cbnz	r0, 80055e4 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80055ba:	4810      	ldr	r0, [pc, #64]	; (80055fc <MX_USART2_UART_Init+0x88>)
 80055bc:	f004 fca2 	bl	8009f04 <HAL_UARTEx_DisableFifoMode>
 80055c0:	b9b8      	cbnz	r0, 80055f2 <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80055c2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80055c4:	f7ff f8f4 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055c8:	480c      	ldr	r0, [pc, #48]	; (80055fc <MX_USART2_UART_Init+0x88>)
 80055ca:	2100      	movs	r1, #0
 80055cc:	f004 fcb8 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d0ed      	beq.n	80055b0 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 80055d4:	f7ff f8ec 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055d8:	4808      	ldr	r0, [pc, #32]	; (80055fc <MX_USART2_UART_Init+0x88>)
 80055da:	2100      	movs	r1, #0
 80055dc:	f004 fcf2 	bl	8009fc4 <HAL_UARTEx_SetRxFifoThreshold>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d0ea      	beq.n	80055ba <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80055e4:	f7ff f8e4 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80055e8:	4804      	ldr	r0, [pc, #16]	; (80055fc <MX_USART2_UART_Init+0x88>)
 80055ea:	f004 fc8b 	bl	8009f04 <HAL_UARTEx_DisableFifoMode>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d0e7      	beq.n	80055c2 <MX_USART2_UART_Init+0x4e>
}
 80055f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80055f6:	f7ff b8db 	b.w	80047b0 <Error_Handler>
 80055fa:	bf00      	nop
 80055fc:	200012b8 	.word	0x200012b8
 8005600:	40004400 	.word	0x40004400

08005604 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005604:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005606:	481f      	ldr	r0, [pc, #124]	; (8005684 <MX_USART3_UART_Init+0x80>)
 8005608:	4c1f      	ldr	r4, [pc, #124]	; (8005688 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800560a:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 800560c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005610:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8005612:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005616:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800561a:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800561e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005622:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005626:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005628:	f004 fb7c 	bl	8009d24 <HAL_UART_Init>
 800562c:	b970      	cbnz	r0, 800564c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800562e:	4815      	ldr	r0, [pc, #84]	; (8005684 <MX_USART3_UART_Init+0x80>)
 8005630:	2100      	movs	r1, #0
 8005632:	f004 fc85 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 8005636:	b988      	cbnz	r0, 800565c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005638:	4812      	ldr	r0, [pc, #72]	; (8005684 <MX_USART3_UART_Init+0x80>)
 800563a:	2100      	movs	r1, #0
 800563c:	f004 fcc2 	bl	8009fc4 <HAL_UARTEx_SetRxFifoThreshold>
 8005640:	b9a0      	cbnz	r0, 800566c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005642:	4810      	ldr	r0, [pc, #64]	; (8005684 <MX_USART3_UART_Init+0x80>)
 8005644:	f004 fc5e 	bl	8009f04 <HAL_UARTEx_DisableFifoMode>
 8005648:	b9b8      	cbnz	r0, 800567a <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800564a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800564c:	f7ff f8b0 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005650:	480c      	ldr	r0, [pc, #48]	; (8005684 <MX_USART3_UART_Init+0x80>)
 8005652:	2100      	movs	r1, #0
 8005654:	f004 fc74 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 8005658:	2800      	cmp	r0, #0
 800565a:	d0ed      	beq.n	8005638 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 800565c:	f7ff f8a8 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005660:	4808      	ldr	r0, [pc, #32]	; (8005684 <MX_USART3_UART_Init+0x80>)
 8005662:	2100      	movs	r1, #0
 8005664:	f004 fcae 	bl	8009fc4 <HAL_UARTEx_SetRxFifoThreshold>
 8005668:	2800      	cmp	r0, #0
 800566a:	d0ea      	beq.n	8005642 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 800566c:	f7ff f8a0 	bl	80047b0 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005670:	4804      	ldr	r0, [pc, #16]	; (8005684 <MX_USART3_UART_Init+0x80>)
 8005672:	f004 fc47 	bl	8009f04 <HAL_UARTEx_DisableFifoMode>
 8005676:	2800      	cmp	r0, #0
 8005678:	d0e7      	beq.n	800564a <MX_USART3_UART_Init+0x46>
}
 800567a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800567e:	f7ff b897 	b.w	80047b0 <Error_Handler>
 8005682:	bf00      	nop
 8005684:	20001348 	.word	0x20001348
 8005688:	40004800 	.word	0x40004800

0800568c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005692:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005694:	2254      	movs	r2, #84	; 0x54
 8005696:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005698:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800569c:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80056a0:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056a2:	f005 fbe3 	bl	800ae6c <memset>
  if(uartHandle->Instance==LPUART1)
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	4a85      	ldr	r2, [pc, #532]	; (80058c0 <HAL_UART_MspInit+0x234>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d008      	beq.n	80056c0 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80056ae:	4a85      	ldr	r2, [pc, #532]	; (80058c4 <HAL_UART_MspInit+0x238>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d067      	beq.n	8005784 <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80056b4:	4a84      	ldr	r2, [pc, #528]	; (80058c8 <HAL_UART_MspInit+0x23c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	f000 80ad 	beq.w	8005816 <HAL_UART_MspInit+0x18a>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80056bc:	b020      	add	sp, #128	; 0x80
 80056be:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80056c0:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056c2:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80056c4:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056c6:	f002 fa8d 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f040 80e9 	bne.w	80058a2 <HAL_UART_MspInit+0x216>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80056d0:	4b7e      	ldr	r3, [pc, #504]	; (80058cc <HAL_UART_MspInit+0x240>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 80056d2:	4e7f      	ldr	r6, [pc, #508]	; (80058d0 <HAL_UART_MspInit+0x244>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80056d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	65da      	str	r2, [r3, #92]	; 0x5c
 80056dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056de:	f002 0201 	and.w	r2, r2, #1
 80056e2:	9200      	str	r2, [sp, #0]
 80056e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056f6:	220c      	movs	r2, #12
 80056f8:	2302      	movs	r3, #2
 80056fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056fe:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005700:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005702:	2300      	movs	r3, #0
 8005704:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005708:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800570a:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800570c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005710:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005712:	f001 fd21 	bl	8007158 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005716:	496f      	ldr	r1, [pc, #444]	; (80058d4 <HAL_UART_MspInit+0x248>)
 8005718:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800571a:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800571c:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005720:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005722:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005724:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005726:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800572a:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800572e:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005732:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005734:	f000 ff56 	bl	80065e4 <HAL_DMA_Init>
 8005738:	2800      	cmp	r0, #0
 800573a:	f040 80af 	bne.w	800589c <HAL_UART_MspInit+0x210>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 800573e:	4d66      	ldr	r5, [pc, #408]	; (80058d8 <HAL_UART_MspInit+0x24c>)
 8005740:	4966      	ldr	r1, [pc, #408]	; (80058dc <HAL_UART_MspInit+0x250>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005742:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005744:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005746:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005748:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800574c:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800574e:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005750:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005752:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005756:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800575a:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800575e:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005760:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005762:	f000 ff3f 	bl	80065e4 <HAL_DMA_Init>
 8005766:	2800      	cmp	r0, #0
 8005768:	f040 8095 	bne.w	8005896 <HAL_UART_MspInit+0x20a>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800576c:	2200      	movs	r2, #0
 800576e:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005770:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005772:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005774:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005776:	f000 fecf 	bl	8006518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800577a:	205b      	movs	r0, #91	; 0x5b
 800577c:	f000 ff0a 	bl	8006594 <HAL_NVIC_EnableIRQ>
}
 8005780:	b020      	add	sp, #128	; 0x80
 8005782:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005784:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005786:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005788:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800578a:	f002 fa2b 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 800578e:	2800      	cmp	r0, #0
 8005790:	f040 808a 	bne.w	80058a8 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005794:	4b4d      	ldr	r3, [pc, #308]	; (80058cc <HAL_UART_MspInit+0x240>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005796:	4852      	ldr	r0, [pc, #328]	; (80058e0 <HAL_UART_MspInit+0x254>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800579a:	4d52      	ldr	r5, [pc, #328]	; (80058e4 <HAL_UART_MspInit+0x258>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800579c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80057a0:	659a      	str	r2, [r3, #88]	; 0x58
 80057a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057a4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80057a8:	9202      	str	r2, [sp, #8]
 80057aa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057ae:	f042 0202 	orr.w	r2, r2, #2
 80057b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80057bc:	2218      	movs	r2, #24
 80057be:	2302      	movs	r3, #2
 80057c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057c4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057c6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ce:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057d0:	2307      	movs	r3, #7
 80057d2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d4:	f001 fcc0 	bl	8007158 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80057d8:	4943      	ldr	r1, [pc, #268]	; (80058e8 <HAL_UART_MspInit+0x25c>)
 80057da:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057dc:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80057de:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80057e2:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057e4:	2180      	movs	r1, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80057e6:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057e8:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057ec:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80057f0:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80057f4:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80057f6:	f000 fef5 	bl	80065e4 <HAL_DMA_Init>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d157      	bne.n	80058ae <HAL_UART_MspInit+0x222>
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 80057fe:	2200      	movs	r2, #0
 8005800:	210c      	movs	r1, #12
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005802:	67e5      	str	r5, [r4, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005804:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005806:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005808:	f000 fe86 	bl	8006518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800580c:	2026      	movs	r0, #38	; 0x26
 800580e:	f000 fec1 	bl	8006594 <HAL_NVIC_EnableIRQ>
}
 8005812:	b020      	add	sp, #128	; 0x80
 8005814:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005816:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005818:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800581a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800581c:	f002 f9e2 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 8005820:	2800      	cmp	r0, #0
 8005822:	d14a      	bne.n	80058ba <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005824:	4b29      	ldr	r3, [pc, #164]	; (80058cc <HAL_UART_MspInit+0x240>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005826:	4831      	ldr	r0, [pc, #196]	; (80058ec <HAL_UART_MspInit+0x260>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005828:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800582a:	4d31      	ldr	r5, [pc, #196]	; (80058f0 <HAL_UART_MspInit+0x264>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800582c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005830:	659a      	str	r2, [r3, #88]	; 0x58
 8005832:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005834:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005838:	9204      	str	r2, [sp, #16]
 800583a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800583c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800583e:	f042 0204 	orr.w	r2, r2, #4
 8005842:	64da      	str	r2, [r3, #76]	; 0x4c
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 800584c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005850:	2302      	movs	r3, #2
 8005852:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005856:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005858:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 800585a:	2300      	movs	r3, #0
 800585c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005860:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005862:	2307      	movs	r3, #7
 8005864:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005866:	f001 fc77 	bl	8007158 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800586a:	4922      	ldr	r1, [pc, #136]	; (80058f4 <HAL_UART_MspInit+0x268>)
 800586c:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800586e:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005870:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005874:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005876:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005878:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800587a:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800587e:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005882:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005886:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005888:	f000 feac 	bl	80065e4 <HAL_DMA_Init>
 800588c:	b990      	cbnz	r0, 80058b4 <HAL_UART_MspInit+0x228>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800588e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005890:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8005892:	b020      	add	sp, #128	; 0x80
 8005894:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005896:	f7fe ff8b 	bl	80047b0 <Error_Handler>
 800589a:	e767      	b.n	800576c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800589c:	f7fe ff88 	bl	80047b0 <Error_Handler>
 80058a0:	e74d      	b.n	800573e <HAL_UART_MspInit+0xb2>
      Error_Handler();
 80058a2:	f7fe ff85 	bl	80047b0 <Error_Handler>
 80058a6:	e713      	b.n	80056d0 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80058a8:	f7fe ff82 	bl	80047b0 <Error_Handler>
 80058ac:	e772      	b.n	8005794 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80058ae:	f7fe ff7f 	bl	80047b0 <Error_Handler>
 80058b2:	e7a4      	b.n	80057fe <HAL_UART_MspInit+0x172>
      Error_Handler();
 80058b4:	f7fe ff7c 	bl	80047b0 <Error_Handler>
 80058b8:	e7e9      	b.n	800588e <HAL_UART_MspInit+0x202>
      Error_Handler();
 80058ba:	f7fe ff79 	bl	80047b0 <Error_Handler>
 80058be:	e7b1      	b.n	8005824 <HAL_UART_MspInit+0x198>
 80058c0:	40008000 	.word	0x40008000
 80058c4:	40004400 	.word	0x40004400
 80058c8:	40004800 	.word	0x40004800
 80058cc:	40021000 	.word	0x40021000
 80058d0:	200010a8 	.word	0x200010a8
 80058d4:	4002006c 	.word	0x4002006c
 80058d8:	20001108 	.word	0x20001108
 80058dc:	40020080 	.word	0x40020080
 80058e0:	48000400 	.word	0x48000400
 80058e4:	20001168 	.word	0x20001168
 80058e8:	40020008 	.word	0x40020008
 80058ec:	48000800 	.word	0x48000800
 80058f0:	200011c8 	.word	0x200011c8
 80058f4:	4002001c 	.word	0x4002001c

080058f8 <uchar4_to_float>:
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
    tmp.char4_value[1]=value[1];
    tmp.char4_value[2]=value[2];
    tmp.char4_value[3]=value[3];
    return tmp.float_value;
 80058f8:	6803      	ldr	r3, [r0, #0]
 80058fa:	ee00 3a10 	vmov	s0, r3
}
 80058fe:	4770      	bx	lr

08005900 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
    Float_char4 tmp;
    tmp.float_value=float_value;
    value[0]=tmp.char4_value[0];
 8005900:	ee10 3a10 	vmov	r3, s0
 8005904:	6003      	str	r3, [r0, #0]
    value[1]=tmp.char4_value[1];
    value[2]=tmp.char4_value[2];
    value[3]=tmp.char4_value[3];
}
 8005906:	4770      	bx	lr

08005908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005908:	480d      	ldr	r0, [pc, #52]	; (8005940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800590a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800590c:	480d      	ldr	r0, [pc, #52]	; (8005944 <LoopForever+0x6>)
  ldr r1, =_edata
 800590e:	490e      	ldr	r1, [pc, #56]	; (8005948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005910:	4a0e      	ldr	r2, [pc, #56]	; (800594c <LoopForever+0xe>)
  movs r3, #0
 8005912:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005914:	e002      	b.n	800591c <LoopCopyDataInit>

08005916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800591a:	3304      	adds	r3, #4

0800591c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800591c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800591e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005920:	d3f9      	bcc.n	8005916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005922:	4a0b      	ldr	r2, [pc, #44]	; (8005950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005924:	4c0b      	ldr	r4, [pc, #44]	; (8005954 <LoopForever+0x16>)
  movs r3, #0
 8005926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005928:	e001      	b.n	800592e <LoopFillZerobss>

0800592a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800592a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800592c:	3204      	adds	r2, #4

0800592e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800592e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005930:	d3fb      	bcc.n	800592a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005932:	f7ff fcf1 	bl	8005318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005936:	f005 faf1 	bl	800af1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800593a:	f7fe ff7f 	bl	800483c <main>

0800593e <LoopForever>:

LoopForever:
    b LoopForever
 800593e:	e7fe      	b.n	800593e <LoopForever>
  ldr   r0, =_estack
 8005940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005948:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800594c:	0800d154 	.word	0x0800d154
  ldr r2, =_sbss
 8005950:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005954:	2000152c 	.word	0x2000152c

08005958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005958:	e7fe      	b.n	8005958 <ADC1_2_IRQHandler>
	...

0800595c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800595c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <HAL_InitTick+0x40>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	b90b      	cbnz	r3, 8005968 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005964:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005966:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005968:	490d      	ldr	r1, [pc, #52]	; (80059a0 <HAL_InitTick+0x44>)
 800596a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800596e:	4605      	mov	r5, r0
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	6808      	ldr	r0, [r1, #0]
 8005976:	fbb0 f0f3 	udiv	r0, r0, r3
 800597a:	f000 fe19 	bl	80065b0 <HAL_SYSTICK_Config>
 800597e:	4604      	mov	r4, r0
 8005980:	2800      	cmp	r0, #0
 8005982:	d1ef      	bne.n	8005964 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005984:	2d0f      	cmp	r5, #15
 8005986:	d8ed      	bhi.n	8005964 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005988:	4602      	mov	r2, r0
 800598a:	4629      	mov	r1, r5
 800598c:	f04f 30ff 	mov.w	r0, #4294967295
 8005990:	f000 fdc2 	bl	8006518 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <HAL_InitTick+0x48>)
 8005996:	4620      	mov	r0, r4
 8005998:	601d      	str	r5, [r3, #0]
}
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	20000008 	.word	0x20000008
 80059a4:	20000010 	.word	0x20000010

080059a8 <HAL_Init>:
{
 80059a8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059aa:	2003      	movs	r0, #3
 80059ac:	f000 fda2 	bl	80064f4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059b0:	2000      	movs	r0, #0
 80059b2:	f7ff ffd3 	bl	800595c <HAL_InitTick>
 80059b6:	b110      	cbz	r0, 80059be <HAL_Init+0x16>
    status = HAL_ERROR;
 80059b8:	2401      	movs	r4, #1
}
 80059ba:	4620      	mov	r0, r4
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	4604      	mov	r4, r0
    HAL_MspInit();
 80059c0:	f7ff fbec 	bl	800519c <HAL_MspInit>
}
 80059c4:	4620      	mov	r0, r4
 80059c6:	bd10      	pop	{r4, pc}

080059c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80059c8:	4a03      	ldr	r2, [pc, #12]	; (80059d8 <HAL_IncTick+0x10>)
 80059ca:	4904      	ldr	r1, [pc, #16]	; (80059dc <HAL_IncTick+0x14>)
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	6809      	ldr	r1, [r1, #0]
 80059d0:	440b      	add	r3, r1
 80059d2:	6013      	str	r3, [r2, #0]
}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	200013d8 	.word	0x200013d8
 80059dc:	2000000c 	.word	0x2000000c

080059e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059e4:	f7fd fa6e 	bl	8002ec4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059e8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80059ea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80059ec:	d002      	beq.n	80059f4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <HAL_Delay+0x20>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059f4:	f7fd fa66 	bl	8002ec4 <HAL_GetTick>
 80059f8:	1b43      	subs	r3, r0, r5
 80059fa:	42a3      	cmp	r3, r4
 80059fc:	d3fa      	bcc.n	80059f4 <HAL_Delay+0x14>
  {
  }
}
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a04:	b530      	push	{r4, r5, lr}
 8005a06:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f000 80d4 	beq.w	8005bba <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a12:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8005a14:	4604      	mov	r4, r0
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f000 809d 	beq.w	8005b56 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a1c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a1e:	6893      	ldr	r3, [r2, #8]
 8005a20:	009d      	lsls	r5, r3, #2
 8005a22:	d505      	bpl.n	8005a30 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a24:	6893      	ldr	r3, [r2, #8]
 8005a26:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005a2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a2e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a30:	6893      	ldr	r3, [r2, #8]
 8005a32:	00d8      	lsls	r0, r3, #3
 8005a34:	d419      	bmi.n	8005a6a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a36:	4b7e      	ldr	r3, [pc, #504]	; (8005c30 <HAL_ADC_Init+0x22c>)
 8005a38:	487e      	ldr	r0, [pc, #504]	; (8005c34 <HAL_ADC_Init+0x230>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005a3c:	6891      	ldr	r1, [r2, #8]
 8005a3e:	099b      	lsrs	r3, r3, #6
 8005a40:	fba0 0303 	umull	r0, r3, r0, r3
 8005a44:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8005a48:	099b      	lsrs	r3, r3, #6
 8005a4a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005a4e:	3301      	adds	r3, #1
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005a56:	6091      	str	r1, [r2, #8]
 8005a58:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005a5a:	9b01      	ldr	r3, [sp, #4]
 8005a5c:	b12b      	cbz	r3, 8005a6a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005a5e:	9b01      	ldr	r3, [sp, #4]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005a64:	9b01      	ldr	r3, [sp, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f9      	bne.n	8005a5e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a6a:	6893      	ldr	r3, [r2, #8]
 8005a6c:	00d9      	lsls	r1, r3, #3
 8005a6e:	d464      	bmi.n	8005b3a <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a72:	f043 0310 	orr.w	r3, r3, #16
 8005a76:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a78:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a7c:	4303      	orrs	r3, r0
 8005a7e:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a80:	6893      	ldr	r3, [r2, #8]
 8005a82:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a88:	d15e      	bne.n	8005b48 <HAL_ADC_Init+0x144>
 8005a8a:	06db      	lsls	r3, r3, #27
 8005a8c:	d45c      	bmi.n	8005b48 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a9a:	6893      	ldr	r3, [r2, #8]
 8005a9c:	07dd      	lsls	r5, r3, #31
 8005a9e:	d419      	bmi.n	8005ad4 <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005aa0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005aa4:	4b64      	ldr	r3, [pc, #400]	; (8005c38 <HAL_ADC_Init+0x234>)
 8005aa6:	f000 80a0 	beq.w	8005bea <HAL_ADC_Init+0x1e6>
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	f000 80a5 	beq.w	8005bfa <HAL_ADC_Init+0x1f6>
 8005ab0:	4962      	ldr	r1, [pc, #392]	; (8005c3c <HAL_ADC_Init+0x238>)
 8005ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ab6:	6889      	ldr	r1, [r1, #8]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	430b      	orrs	r3, r1
 8005abc:	4960      	ldr	r1, [pc, #384]	; (8005c40 <HAL_ADC_Init+0x23c>)
 8005abe:	6889      	ldr	r1, [r1, #8]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	07d9      	lsls	r1, r3, #31
 8005ac4:	d406      	bmi.n	8005ad4 <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ac6:	495f      	ldr	r1, [pc, #380]	; (8005c44 <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005ac8:	688b      	ldr	r3, [r1, #8]
 8005aca:	6865      	ldr	r5, [r4, #4]
 8005acc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005ad0:	432b      	orrs	r3, r5
 8005ad2:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8005ad4:	68e5      	ldr	r5, [r4, #12]
 8005ad6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ad8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8005adc:	432b      	orrs	r3, r5
 8005ade:	68a5      	ldr	r5, [r4, #8]
 8005ae0:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ae2:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ae4:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8005ae6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005aee:	d05f      	beq.n	8005bb0 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005af0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005af2:	b121      	cbz	r1, 8005afe <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8005af4:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005af6:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005afa:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005afc:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005afe:	68d5      	ldr	r5, [r2, #12]
 8005b00:	4951      	ldr	r1, [pc, #324]	; (8005c48 <HAL_ADC_Init+0x244>)
 8005b02:	4029      	ands	r1, r5
 8005b04:	4319      	orrs	r1, r3
 8005b06:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005b08:	6913      	ldr	r3, [r2, #16]
 8005b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b14:	6893      	ldr	r3, [r2, #8]
 8005b16:	075b      	lsls	r3, r3, #29
 8005b18:	d523      	bpl.n	8005b62 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b1a:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b1c:	6963      	ldr	r3, [r4, #20]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d04e      	beq.n	8005bc0 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005b24:	f023 030f 	bic.w	r3, r3, #15
 8005b28:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005b36:	b003      	add	sp, #12
 8005b38:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b3a:	6893      	ldr	r3, [r2, #8]
 8005b3c:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b40:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b46:	d0a0      	beq.n	8005a8a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005b4a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b4c:	f043 0310 	orr.w	r3, r3, #16
 8005b50:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8005b52:	b003      	add	sp, #12
 8005b54:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8005b56:	f7fb fc25 	bl	80013a4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005b5a:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005b5c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005b60:	e75c      	b.n	8005a1c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b62:	6893      	ldr	r3, [r2, #8]
 8005b64:	071d      	lsls	r5, r3, #28
 8005b66:	d4d9      	bmi.n	8005b1c <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b68:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005b6e:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b70:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b74:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b76:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b7a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b7e:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8005b80:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b82:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b84:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005b86:	bb19      	cbnz	r1, 8005bd0 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005b8e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005b92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8005b9e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d032      	beq.n	8005c0c <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ba6:	6913      	ldr	r3, [r2, #16]
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	6113      	str	r3, [r2, #16]
 8005bae:	e7b5      	b.n	8005b1c <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005bb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005bb2:	3901      	subs	r1, #1
 8005bb4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005bb8:	e79a      	b.n	8005af0 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 8005bba:	2001      	movs	r0, #1
}
 8005bbc:	b003      	add	sp, #12
 8005bbe:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005bc0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005bc2:	6a23      	ldr	r3, [r4, #32]
 8005bc4:	f021 010f 	bic.w	r1, r1, #15
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bce:	e7ac      	b.n	8005b2a <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005bd6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005bda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005bde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005be2:	430b      	orrs	r3, r1
 8005be4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005be8:	e7d9      	b.n	8005b9e <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bea:	6891      	ldr	r1, [r2, #8]
 8005bec:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	07db      	lsls	r3, r3, #31
 8005bf2:	f53f af6f 	bmi.w	8005ad4 <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005bf6:	4915      	ldr	r1, [pc, #84]	; (8005c4c <HAL_ADC_Init+0x248>)
 8005bf8:	e766      	b.n	8005ac8 <HAL_ADC_Init+0xc4>
 8005bfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c02:	430b      	orrs	r3, r1
 8005c04:	07d9      	lsls	r1, r3, #31
 8005c06:	f53f af65 	bmi.w	8005ad4 <HAL_ADC_Init+0xd0>
 8005c0a:	e7f4      	b.n	8005bf6 <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005c0c:	6911      	ldr	r1, [r2, #16]
 8005c0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c10:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005c12:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8005c16:	f021 0104 	bic.w	r1, r1, #4
 8005c1a:	432b      	orrs	r3, r5
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005c24:	430b      	orrs	r3, r1
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6113      	str	r3, [r2, #16]
 8005c2c:	e776      	b.n	8005b1c <HAL_ADC_Init+0x118>
 8005c2e:	bf00      	nop
 8005c30:	20000008 	.word	0x20000008
 8005c34:	053e2d63 	.word	0x053e2d63
 8005c38:	50000100 	.word	0x50000100
 8005c3c:	50000400 	.word	0x50000400
 8005c40:	50000600 	.word	0x50000600
 8005c44:	50000700 	.word	0x50000700
 8005c48:	fff04007 	.word	0xfff04007
 8005c4c:	50000300 	.word	0x50000300

08005c50 <HAL_ADC_ConvCpltCallback>:
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop

08005c54 <HAL_ADC_ConvHalfCpltCallback>:
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop

08005c58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c58:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005c5c:	f7ff fffa 	bl	8005c54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c60:	bd08      	pop	{r3, pc}
 8005c62:	bf00      	nop

08005c64 <HAL_ADC_ErrorCallback>:
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop

08005c68 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c68:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c6c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8005c70:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c74:	d11d      	bne.n	8005cb2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c76:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7c:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c7e:	680a      	ldr	r2, [r1, #0]
 8005c80:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c84:	68ca      	ldr	r2, [r1, #12]
 8005c86:	d01b      	beq.n	8005cc0 <ADC_DMAConvCplt+0x58>
 8005c88:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005c8c:	d10d      	bne.n	8005caa <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c8e:	68ca      	ldr	r2, [r1, #12]
 8005c90:	0494      	lsls	r4, r2, #18
 8005c92:	d40a      	bmi.n	8005caa <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c9a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c9e:	04d1      	lsls	r1, r2, #19
 8005ca0:	d403      	bmi.n	8005caa <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff ffd0 	bl	8005c50 <HAL_ADC_ConvCpltCallback>
}
 8005cb0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005cb2:	06d2      	lsls	r2, r2, #27
 8005cb4:	d40a      	bmi.n	8005ccc <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005cc0:	0790      	lsls	r0, r2, #30
 8005cc2:	d5e7      	bpl.n	8005c94 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ffc3 	bl	8005c50 <HAL_ADC_ConvCpltCallback>
 8005cca:	e7f1      	b.n	8005cb0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff ffc9 	bl	8005c64 <HAL_ADC_ErrorCallback>
}
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8005cd6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cd8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cde:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ce0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005ce2:	f043 0304 	orr.w	r3, r3, #4
 8005ce6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ce8:	f7ff ffbc 	bl	8005c64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cec:	bd08      	pop	{r3, pc}
 8005cee:	bf00      	nop

08005cf0 <HAL_ADC_ConfigChannel>:
{
 8005cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005cf2:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005cfa:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005cfc:	f04f 0000 	mov.w	r0, #0
 8005d00:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005d02:	f000 8174 	beq.w	8005fee <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d06:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005d08:	2001      	movs	r0, #1
 8005d0a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d0e:	6894      	ldr	r4, [r2, #8]
 8005d10:	0766      	lsls	r6, r4, #29
 8005d12:	d45e      	bmi.n	8005dd2 <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d14:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005d16:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005d1a:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005d1e:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005d22:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005d24:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005d28:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005d2c:	f854 500e 	ldr.w	r5, [r4, lr]
 8005d30:	261f      	movs	r6, #31
 8005d32:	fa00 f00c 	lsl.w	r0, r0, ip
 8005d36:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005d3a:	ea25 0c0c 	bic.w	ip, r5, ip
 8005d3e:	ea40 000c 	orr.w	r0, r0, ip
 8005d42:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d46:	6890      	ldr	r0, [r2, #8]
 8005d48:	0745      	lsls	r5, r0, #29
 8005d4a:	d572      	bpl.n	8005e32 <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d4c:	6890      	ldr	r0, [r2, #8]
 8005d4e:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d50:	6894      	ldr	r4, [r2, #8]
 8005d52:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d56:	4604      	mov	r4, r0
 8005d58:	d10c      	bne.n	8005d74 <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005d5a:	4dbd      	ldr	r5, [pc, #756]	; (8006050 <HAL_ADC_ConfigChannel+0x360>)
 8005d5c:	68ce      	ldr	r6, [r1, #12]
 8005d5e:	42ae      	cmp	r6, r5
 8005d60:	f000 80eb 	beq.w	8005f3a <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 8005d64:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8005d68:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005d6c:	ea21 0100 	bic.w	r1, r1, r0
 8005d70:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d74:	49b7      	ldr	r1, [pc, #732]	; (8006054 <HAL_ADC_ConfigChannel+0x364>)
 8005d76:	420c      	tst	r4, r1
 8005d78:	d059      	beq.n	8005e2e <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d7a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005d7e:	f000 8134 	beq.w	8005fea <HAL_ADC_ConfigChannel+0x2fa>
 8005d82:	4db5      	ldr	r5, [pc, #724]	; (8006058 <HAL_ADC_ConfigChannel+0x368>)
 8005d84:	49b5      	ldr	r1, [pc, #724]	; (800605c <HAL_ADC_ConfigChannel+0x36c>)
 8005d86:	48b6      	ldr	r0, [pc, #728]	; (8006060 <HAL_ADC_ConfigChannel+0x370>)
 8005d88:	42aa      	cmp	r2, r5
 8005d8a:	bf18      	it	ne
 8005d8c:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d8e:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005d90:	49b4      	ldr	r1, [pc, #720]	; (8006064 <HAL_ADC_ConfigChannel+0x374>)
 8005d92:	428c      	cmp	r4, r1
 8005d94:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8005d98:	d024      	beq.n	8005de4 <HAL_ADC_ConfigChannel+0xf4>
 8005d9a:	49b3      	ldr	r1, [pc, #716]	; (8006068 <HAL_ADC_ConfigChannel+0x378>)
 8005d9c:	428c      	cmp	r4, r1
 8005d9e:	d021      	beq.n	8005de4 <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005da0:	49b2      	ldr	r1, [pc, #712]	; (800606c <HAL_ADC_ConfigChannel+0x37c>)
 8005da2:	428c      	cmp	r4, r1
 8005da4:	f040 8139 	bne.w	800601a <HAL_ADC_ConfigChannel+0x32a>
 8005da8:	01c4      	lsls	r4, r0, #7
 8005daa:	d440      	bmi.n	8005e2e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dac:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005db0:	f000 8215 	beq.w	80061de <HAL_ADC_ConfigChannel+0x4ee>
 8005db4:	4ca8      	ldr	r4, [pc, #672]	; (8006058 <HAL_ADC_ConfigChannel+0x368>)
 8005db6:	49a9      	ldr	r1, [pc, #676]	; (800605c <HAL_ADC_ConfigChannel+0x36c>)
 8005db8:	48a9      	ldr	r0, [pc, #676]	; (8006060 <HAL_ADC_ConfigChannel+0x370>)
 8005dba:	42a2      	cmp	r2, r4
 8005dbc:	bf18      	it	ne
 8005dbe:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005dc0:	688a      	ldr	r2, [r1, #8]
 8005dc2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005dc6:	432a      	orrs	r2, r5
 8005dc8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dcc:	2000      	movs	r0, #0
 8005dce:	608a      	str	r2, [r1, #8]
}
 8005dd0:	e003      	b.n	8005dda <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dd4:	f042 0220 	orr.w	r2, r2, #32
 8005dd8:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005de0:	b003      	add	sp, #12
 8005de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005de4:	0201      	lsls	r1, r0, #8
 8005de6:	d422      	bmi.n	8005e2e <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005de8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005dec:	f000 8113 	beq.w	8006016 <HAL_ADC_ConfigChannel+0x326>
 8005df0:	499f      	ldr	r1, [pc, #636]	; (8006070 <HAL_ADC_ConfigChannel+0x380>)
 8005df2:	428a      	cmp	r2, r1
 8005df4:	d11b      	bne.n	8005e2e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005df6:	489a      	ldr	r0, [pc, #616]	; (8006060 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005df8:	4a9e      	ldr	r2, [pc, #632]	; (8006074 <HAL_ADC_ConfigChannel+0x384>)
 8005dfa:	4c9f      	ldr	r4, [pc, #636]	; (8006078 <HAL_ADC_ConfigChannel+0x388>)
 8005dfc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005dfe:	6881      	ldr	r1, [r0, #8]
 8005e00:	0992      	lsrs	r2, r2, #6
 8005e02:	fba4 4202 	umull	r4, r2, r4, r2
 8005e06:	0992      	lsrs	r2, r2, #6
 8005e08:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005e0c:	3201      	adds	r2, #1
 8005e0e:	4329      	orrs	r1, r5
 8005e10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005e14:	0092      	lsls	r2, r2, #2
 8005e16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005e1a:	6081      	str	r1, [r0, #8]
 8005e1c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005e1e:	9a01      	ldr	r2, [sp, #4]
 8005e20:	b12a      	cbz	r2, 8005e2e <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 8005e22:	9a01      	ldr	r2, [sp, #4]
 8005e24:	3a01      	subs	r2, #1
 8005e26:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005e28:	9a01      	ldr	r2, [sp, #4]
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d1f9      	bne.n	8005e22 <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e7d3      	b.n	8005dda <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e32:	6890      	ldr	r0, [r2, #8]
 8005e34:	0700      	lsls	r0, r0, #28
 8005e36:	d47e      	bmi.n	8005f36 <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005e38:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005e3a:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005e3c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8005e40:	f000 8120 	beq.w	8006084 <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e44:	0dee      	lsrs	r6, r5, #23
 8005e46:	f102 0c14 	add.w	ip, r2, #20
 8005e4a:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8005e4e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005e52:	f85c 4006 	ldr.w	r4, [ip, r6]
 8005e56:	2707      	movs	r7, #7
 8005e58:	40a8      	lsls	r0, r5
 8005e5a:	fa07 f505 	lsl.w	r5, r7, r5
 8005e5e:	ea24 0405 	bic.w	r4, r4, r5
 8005e62:	4320      	orrs	r0, r4
 8005e64:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005e68:	6950      	ldr	r0, [r2, #20]
 8005e6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005e6e:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e70:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e74:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e76:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e78:	d02d      	beq.n	8005ed6 <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e7a:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e7e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005e82:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8005e84:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8005e88:	4f7c      	ldr	r7, [pc, #496]	; (800607c <HAL_ADC_ConfigChannel+0x38c>)
 8005e8a:	4086      	lsls	r6, r0
 8005e8c:	6808      	ldr	r0, [r1, #0]
 8005e8e:	ea0c 0707 	and.w	r7, ip, r7
 8005e92:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005e96:	4338      	orrs	r0, r7
 8005e98:	4330      	orrs	r0, r6
 8005e9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005e9e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ea2:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8005ea4:	698e      	ldr	r6, [r1, #24]
 8005ea6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005eaa:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8005eae:	4330      	orrs	r0, r6
 8005eb0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eb4:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005eb6:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8005eb8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005ebc:	f1a5 0501 	sub.w	r5, r5, #1
 8005ec0:	fab5 f585 	clz	r5, r5
 8005ec4:	096d      	lsrs	r5, r5, #5
 8005ec6:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8005eca:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8005ece:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8005ed2:	6808      	ldr	r0, [r1, #0]
}
 8005ed4:	e73c      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ed6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ed8:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005eda:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005edc:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ee0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	f040 80df 	bne.w	80060a8 <HAL_ADC_ConfigChannel+0x3b8>
 8005eea:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005eee:	42ac      	cmp	r4, r5
 8005ef0:	f000 813d 	beq.w	800616e <HAL_ADC_ConfigChannel+0x47e>
 8005ef4:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005ef6:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ef8:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005efc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005f00:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8005f04:	42ae      	cmp	r6, r5
 8005f06:	f000 8158 	beq.w	80061ba <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f0a:	68a6      	ldr	r6, [r4, #8]
 8005f0c:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f0e:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f12:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005f16:	42ae      	cmp	r6, r5
 8005f18:	f000 813d 	beq.w	8006196 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f1c:	68e6      	ldr	r6, [r4, #12]
 8005f1e:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f20:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f24:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8005f28:	42a5      	cmp	r5, r4
 8005f2a:	f47f af11 	bne.w	8005d50 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8005f2e:	6838      	ldr	r0, [r7, #0]
 8005f30:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f34:	6038      	str	r0, [r7, #0]
 8005f36:	6808      	ldr	r0, [r1, #0]
}
 8005f38:	e70a      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 8005f3a:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005f3e:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8005f42:	432c      	orrs	r4, r5
 8005f44:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	d053      	beq.n	8005ff4 <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4c:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f50:	2c00      	cmp	r4, #0
 8005f52:	f000 80e8 	beq.w	8006126 <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005f56:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f5a:	3401      	adds	r4, #1
 8005f5c:	f004 041f 	and.w	r4, r4, #31
 8005f60:	2c09      	cmp	r4, #9
 8005f62:	f240 80e0 	bls.w	8006126 <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f66:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005f6a:	2c00      	cmp	r4, #0
 8005f6c:	f000 813d 	beq.w	80061ea <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8005f70:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f74:	3401      	adds	r4, #1
 8005f76:	06a4      	lsls	r4, r4, #26
 8005f78:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	f000 8130 	beq.w	80061e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005f86:	fab5 f585 	clz	r5, r5
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	f005 051f 	and.w	r5, r5, #31
 8005f90:	2601      	movs	r6, #1
 8005f92:	fa06 f505 	lsl.w	r5, r6, r5
 8005f96:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f98:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f000 8120 	beq.w	80061e2 <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 8005fa2:	fab0 f080 	clz	r0, r0
 8005fa6:	1c45      	adds	r5, r0, #1
 8005fa8:	f005 051f 	and.w	r5, r5, #31
 8005fac:	2003      	movs	r0, #3
 8005fae:	f06f 061d 	mvn.w	r6, #29
 8005fb2:	fb10 6005 	smlabb	r0, r0, r5, r6
 8005fb6:	0500      	lsls	r0, r0, #20
 8005fb8:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fbc:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005fbe:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005fc0:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005fc2:	f005 0504 	and.w	r5, r5, #4
 8005fc6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005fca:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005fce:	fa04 fc00 	lsl.w	ip, r4, r0
 8005fd2:	f04f 0e07 	mov.w	lr, #7
 8005fd6:	5974      	ldr	r4, [r6, r5]
 8005fd8:	fa0e f000 	lsl.w	r0, lr, r0
 8005fdc:	ea24 0000 	bic.w	r0, r4, r0
 8005fe0:	ea40 000c 	orr.w	r0, r0, ip
 8005fe4:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005fe6:	680c      	ldr	r4, [r1, #0]
}
 8005fe8:	e6c4      	b.n	8005d74 <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fea:	491c      	ldr	r1, [pc, #112]	; (800605c <HAL_ADC_ConfigChannel+0x36c>)
 8005fec:	e6cf      	b.n	8005d8e <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8005fee:	2002      	movs	r0, #2
}
 8005ff0:	b003      	add	sp, #12
 8005ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ff4:	0e80      	lsrs	r0, r0, #26
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ffc:	2d09      	cmp	r5, #9
 8005ffe:	f200 8084 	bhi.w	800610a <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006002:	0684      	lsls	r4, r0, #26
 8006004:	2001      	movs	r0, #1
 8006006:	40a8      	lsls	r0, r5
 8006008:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800600c:	4304      	orrs	r4, r0
 800600e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8006012:	0500      	lsls	r0, r0, #20
 8006014:	e7d2      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006016:	4811      	ldr	r0, [pc, #68]	; (800605c <HAL_ADC_ConfigChannel+0x36c>)
 8006018:	e6ee      	b.n	8005df8 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800601a:	4919      	ldr	r1, [pc, #100]	; (8006080 <HAL_ADC_ConfigChannel+0x390>)
 800601c:	428c      	cmp	r4, r1
 800601e:	f47f af06 	bne.w	8005e2e <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006022:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8006026:	f47f af02 	bne.w	8005e2e <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 800602a:	490b      	ldr	r1, [pc, #44]	; (8006058 <HAL_ADC_ConfigChannel+0x368>)
 800602c:	428a      	cmp	r2, r1
 800602e:	f43f aefe 	beq.w	8005e2e <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006032:	4c0b      	ldr	r4, [pc, #44]	; (8006060 <HAL_ADC_ConfigChannel+0x370>)
 8006034:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8006038:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800603c:	bf18      	it	ne
 800603e:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006040:	688a      	ldr	r2, [r1, #8]
 8006042:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006046:	432a      	orrs	r2, r5
 8006048:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800604c:	608a      	str	r2, [r1, #8]
}
 800604e:	e6c4      	b.n	8005dda <HAL_ADC_ConfigChannel+0xea>
 8006050:	407f0000 	.word	0x407f0000
 8006054:	80080000 	.word	0x80080000
 8006058:	50000100 	.word	0x50000100
 800605c:	50000300 	.word	0x50000300
 8006060:	50000700 	.word	0x50000700
 8006064:	c3210000 	.word	0xc3210000
 8006068:	90c00010 	.word	0x90c00010
 800606c:	c7520000 	.word	0xc7520000
 8006070:	50000600 	.word	0x50000600
 8006074:	20000008 	.word	0x20000008
 8006078:	053e2d63 	.word	0x053e2d63
 800607c:	03fff000 	.word	0x03fff000
 8006080:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006084:	0de8      	lsrs	r0, r5, #23
 8006086:	f000 0004 	and.w	r0, r0, #4
 800608a:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 800608e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8006092:	2607      	movs	r6, #7
 8006094:	40ae      	lsls	r6, r5
 8006096:	5825      	ldr	r5, [r4, r0]
 8006098:	ea25 0506 	bic.w	r5, r5, r6
 800609c:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800609e:	6950      	ldr	r0, [r2, #20]
 80060a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80060a4:	6150      	str	r0, [r2, #20]
}
 80060a6:	e6e3      	b.n	8005e70 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80060ac:	b11d      	cbz	r5, 80060b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80060ae:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80060b2:	42ac      	cmp	r4, r5
 80060b4:	d05b      	beq.n	800616e <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060b6:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80060b8:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060ba:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060be:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80060c2:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80060ca:	b11d      	cbz	r5, 80060d4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80060cc:	fab5 f585 	clz	r5, r5
 80060d0:	42ae      	cmp	r6, r5
 80060d2:	d072      	beq.n	80061ba <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060d4:	68a5      	ldr	r5, [r4, #8]
 80060d6:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060d8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060dc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80060e4:	b11d      	cbz	r5, 80060ee <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 80060e6:	fab5 f585 	clz	r5, r5
 80060ea:	42ae      	cmp	r6, r5
 80060ec:	d053      	beq.n	8006196 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060ee:	68e5      	ldr	r5, [r4, #12]
 80060f0:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060f2:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060f6:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fa:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80060fe:	2d00      	cmp	r5, #0
 8006100:	f43f ae26 	beq.w	8005d50 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 8006104:	fab5 f585 	clz	r5, r5
 8006108:	e70e      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800610a:	0684      	lsls	r4, r0, #26
 800610c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8006110:	381e      	subs	r0, #30
 8006112:	2601      	movs	r6, #1
 8006114:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8006118:	0500      	lsls	r0, r0, #20
 800611a:	fa06 f505 	lsl.w	r5, r6, r5
 800611e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006122:	432c      	orrs	r4, r5
 8006124:	e74a      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800612a:	2c00      	cmp	r4, #0
 800612c:	d065      	beq.n	80061fa <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 800612e:	fab4 f484 	clz	r4, r4
 8006132:	3401      	adds	r4, #1
 8006134:	06a4      	lsls	r4, r4, #26
 8006136:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800613e:	2d00      	cmp	r5, #0
 8006140:	d059      	beq.n	80061f6 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8006142:	fab5 f585 	clz	r5, r5
 8006146:	3501      	adds	r5, #1
 8006148:	f005 051f 	and.w	r5, r5, #31
 800614c:	2601      	movs	r6, #1
 800614e:	fa06 f505 	lsl.w	r5, r6, r5
 8006152:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006154:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006158:	2800      	cmp	r0, #0
 800615a:	d049      	beq.n	80061f0 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 800615c:	fab0 f080 	clz	r0, r0
 8006160:	3001      	adds	r0, #1
 8006162:	f000 001f 	and.w	r0, r0, #31
 8006166:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800616a:	0500      	lsls	r0, r0, #20
 800616c:	e726      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 800616e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006170:	4614      	mov	r4, r2
 8006172:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006176:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800617a:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800617c:	6808      	ldr	r0, [r1, #0]
 800617e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8006180:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006184:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006188:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800618c:	2d00      	cmp	r5, #0
 800618e:	d19a      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x3d6>
 8006190:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8006194:	e6b6      	b.n	8005f04 <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 8006196:	6838      	ldr	r0, [r7, #0]
 8006198:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800619c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800619e:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061a0:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061a2:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061a6:	68e4      	ldr	r4, [r4, #12]
 80061a8:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061ac:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061b0:	2d00      	cmp	r5, #0
 80061b2:	d1a2      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x40a>
 80061b4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80061b8:	e6b6      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 80061ba:	6838      	ldr	r0, [r7, #0]
 80061bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061c0:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80061c2:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	68a6      	ldr	r6, [r4, #8]
 80061c8:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061cc:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061d0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	d183      	bne.n	80060e0 <HAL_ADC_ConfigChannel+0x3f0>
 80061d8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80061dc:	e69b      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <HAL_ADC_ConfigChannel+0x510>)
 80061e0:	e5ee      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0xd0>
 80061e2:	4808      	ldr	r0, [pc, #32]	; (8006204 <HAL_ADC_ConfigChannel+0x514>)
 80061e4:	e6ea      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x2cc>
 80061e6:	2502      	movs	r5, #2
 80061e8:	e6d5      	b.n	8005f96 <HAL_ADC_ConfigChannel+0x2a6>
 80061ea:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80061ee:	e6c5      	b.n	8005f7c <HAL_ADC_ConfigChannel+0x28c>
 80061f0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80061f4:	e6e2      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x2cc>
 80061f6:	2502      	movs	r5, #2
 80061f8:	e7ab      	b.n	8006152 <HAL_ADC_ConfigChannel+0x462>
 80061fa:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80061fe:	e79c      	b.n	800613a <HAL_ADC_ConfigChannel+0x44a>
 8006200:	50000300 	.word	0x50000300
 8006204:	fe500000 	.word	0xfe500000

08006208 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006208:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	07d2      	lsls	r2, r2, #31
 800620e:	d501      	bpl.n	8006214 <ADC_Enable+0xc>
  return HAL_OK;
 8006210:	2000      	movs	r0, #0
}
 8006212:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006214:	6899      	ldr	r1, [r3, #8]
 8006216:	4a18      	ldr	r2, [pc, #96]	; (8006278 <ADC_Enable+0x70>)
 8006218:	4211      	tst	r1, r2
{
 800621a:	b570      	push	{r4, r5, r6, lr}
 800621c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800621e:	d008      	beq.n	8006232 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006220:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006222:	f043 0310 	orr.w	r3, r3, #16
 8006226:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006228:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800622a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800622c:	4303      	orrs	r3, r0
 800622e:	6633      	str	r3, [r6, #96]	; 0x60
}
 8006230:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	4d11      	ldr	r5, [pc, #68]	; (800627c <ADC_Enable+0x74>)
 8006236:	402a      	ands	r2, r5
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800623e:	f7fc fe41 	bl	8002ec4 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006242:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006244:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	07d0      	lsls	r0, r2, #31
 800624a:	d413      	bmi.n	8006274 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	07d1      	lsls	r1, r2, #31
 8006250:	d404      	bmi.n	800625c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	402a      	ands	r2, r5
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800625c:	f7fc fe32 	bl	8002ec4 <HAL_GetTick>
 8006260:	1b03      	subs	r3, r0, r4
 8006262:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006264:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006266:	d9ee      	bls.n	8006246 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	07d2      	lsls	r2, r2, #31
 800626c:	d5d8      	bpl.n	8006220 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	07d0      	lsls	r0, r2, #31
 8006272:	d5eb      	bpl.n	800624c <ADC_Enable+0x44>
  return HAL_OK;
 8006274:	2000      	movs	r0, #0
}
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	8000003f 	.word	0x8000003f
 800627c:	7fffffc0 	.word	0x7fffffc0

08006280 <HAL_ADC_Start_DMA>:
{
 8006280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006284:	6805      	ldr	r5, [r0, #0]
 8006286:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 800628a:	4604      	mov	r4, r0
 800628c:	460e      	mov	r6, r1
 800628e:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006290:	d022      	beq.n	80062d8 <HAL_ADC_Start_DMA+0x58>
 8006292:	4a39      	ldr	r2, [pc, #228]	; (8006378 <HAL_ADC_Start_DMA+0xf8>)
 8006294:	4839      	ldr	r0, [pc, #228]	; (800637c <HAL_ADC_Start_DMA+0xfc>)
 8006296:	4b3a      	ldr	r3, [pc, #232]	; (8006380 <HAL_ADC_Start_DMA+0x100>)
 8006298:	4295      	cmp	r5, r2
 800629a:	bf08      	it	eq
 800629c:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800629e:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062a0:	68ab      	ldr	r3, [r5, #8]
 80062a2:	075b      	lsls	r3, r3, #29
 80062a4:	d415      	bmi.n	80062d2 <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 80062a6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d011      	beq.n	80062d2 <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80062ae:	4b35      	ldr	r3, [pc, #212]	; (8006384 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 80062b0:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80062b2:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80062b4:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 80062b8:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80062bc:	d00e      	beq.n	80062dc <HAL_ADC_Start_DMA+0x5c>
 80062be:	f240 2321 	movw	r3, #545	; 0x221
 80062c2:	fa23 f308 	lsr.w	r3, r3, r8
 80062c6:	4003      	ands	r3, r0
 80062c8:	d108      	bne.n	80062dc <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 80062ca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 80062ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80062d2:	2002      	movs	r0, #2
}
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062d8:	4829      	ldr	r0, [pc, #164]	; (8006380 <HAL_ADC_Start_DMA+0x100>)
 80062da:	e7e0      	b.n	800629e <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 80062dc:	4620      	mov	r0, r4
 80062de:	f7ff ff93 	bl	8006208 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d13f      	bne.n	8006366 <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 80062e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062e8:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80062ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062f8:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <HAL_ADC_Start_DMA+0xf8>)
 80062fa:	4299      	cmp	r1, r3
 80062fc:	d038      	beq.n	8006370 <HAL_ADC_Start_DMA+0xf0>
 80062fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006302:	4299      	cmp	r1, r3
 8006304:	d034      	beq.n	8006370 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006306:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006308:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800630c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800630e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006310:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006312:	4d1d      	ldr	r5, [pc, #116]	; (8006388 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006314:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006318:	bf1c      	itt	ne
 800631a:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 800631c:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8006320:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006322:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006324:	4d19      	ldr	r5, [pc, #100]	; (800638c <HAL_ADC_Start_DMA+0x10c>)
 8006326:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006328:	4d19      	ldr	r5, [pc, #100]	; (8006390 <HAL_ADC_Start_DMA+0x110>)
 800632a:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800632c:	251c      	movs	r5, #28
 800632e:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8006330:	2500      	movs	r5, #0
 8006332:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006336:	684d      	ldr	r5, [r1, #4]
 8006338:	f045 0510 	orr.w	r5, r5, #16
 800633c:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800633e:	68cd      	ldr	r5, [r1, #12]
 8006340:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006344:	463b      	mov	r3, r7
 8006346:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006348:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800634a:	3140      	adds	r1, #64	; 0x40
 800634c:	f000 f9e0 	bl	8006710 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006350:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006352:	6893      	ldr	r3, [r2, #8]
 8006354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	6093      	str	r3, [r2, #8]
}
 8006362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8006366:	2300      	movs	r3, #0
 8006368:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006370:	f1b8 0f00 	cmp.w	r8, #0
 8006374:	d1cb      	bne.n	800630e <HAL_ADC_Start_DMA+0x8e>
 8006376:	e7c6      	b.n	8006306 <HAL_ADC_Start_DMA+0x86>
 8006378:	50000100 	.word	0x50000100
 800637c:	50000700 	.word	0x50000700
 8006380:	50000300 	.word	0x50000300
 8006384:	50000600 	.word	0x50000600
 8006388:	08005c69 	.word	0x08005c69
 800638c:	08005c59 	.word	0x08005c59
 8006390:	08005cd5 	.word	0x08005cd5

08006394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006394:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006396:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800639a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800639c:	2a01      	cmp	r2, #1
{
 800639e:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 80063a0:	d056      	beq.n	8006450 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063a2:	6802      	ldr	r2, [r0, #0]
 80063a4:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80063a6:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80063a8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063aa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80063ae:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80063b0:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80063b4:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80063b6:	d00b      	beq.n	80063d0 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 80063b8:	4d48      	ldr	r5, [pc, #288]	; (80064dc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80063ba:	42aa      	cmp	r2, r5
 80063bc:	d046      	beq.n	800644c <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063be:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063c0:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063c4:	f042 0220 	orr.w	r2, r2, #32
 80063c8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80063ca:	b01d      	add	sp, #116	; 0x74
 80063cc:	bc70      	pop	{r4, r5, r6}
 80063ce:	4770      	bx	lr
 80063d0:	4843      	ldr	r0, [pc, #268]	; (80064e0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063d2:	6880      	ldr	r0, [r0, #8]
 80063d4:	0740      	lsls	r0, r0, #29
 80063d6:	d50b      	bpl.n	80063f0 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 80063d8:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063dc:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80063e0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063e2:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80063ea:	b01d      	add	sp, #116	; 0x74
 80063ec:	bc70      	pop	{r4, r5, r6}
 80063ee:	4770      	bx	lr
 80063f0:	6890      	ldr	r0, [r2, #8]
 80063f2:	0744      	lsls	r4, r0, #29
 80063f4:	d4f1      	bmi.n	80063da <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80063f6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80063fa:	d02d      	beq.n	8006458 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80063fc:	4838      	ldr	r0, [pc, #224]	; (80064e0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80063fe:	4282      	cmp	r2, r0
 8006400:	d02a      	beq.n	8006458 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006402:	2e00      	cmp	r6, #0
 8006404:	d058      	beq.n	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006406:	4837      	ldr	r0, [pc, #220]	; (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006408:	684c      	ldr	r4, [r1, #4]
 800640a:	6882      	ldr	r2, [r0, #8]
 800640c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006410:	4322      	orrs	r2, r4
 8006412:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8006416:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800641a:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800641c:	4a2f      	ldr	r2, [pc, #188]	; (80064dc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800641e:	6894      	ldr	r4, [r2, #8]
 8006420:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006424:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006426:	4322      	orrs	r2, r4
 8006428:	4c2f      	ldr	r4, [pc, #188]	; (80064e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800642a:	68a4      	ldr	r4, [r4, #8]
 800642c:	4322      	orrs	r2, r4
 800642e:	43d2      	mvns	r2, r2
 8006430:	f002 0201 	and.w	r2, r2, #1
 8006434:	b142      	cbz	r2, 8006448 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 8006436:	6884      	ldr	r4, [r0, #8]
 8006438:	688a      	ldr	r2, [r1, #8]
 800643a:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 800643e:	4332      	orrs	r2, r6
 8006440:	f021 010f 	bic.w	r1, r1, #15
 8006444:	430a      	orrs	r2, r1
 8006446:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006448:	2000      	movs	r0, #0
 800644a:	e7cb      	b.n	80063e4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 800644c:	4827      	ldr	r0, [pc, #156]	; (80064ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800644e:	e7c0      	b.n	80063d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8006450:	2002      	movs	r0, #2
}
 8006452:	b01d      	add	sp, #116	; 0x74
 8006454:	bc70      	pop	{r4, r5, r6}
 8006456:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006458:	b1ae      	cbz	r6, 8006486 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800645a:	4825      	ldr	r0, [pc, #148]	; (80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800645c:	684c      	ldr	r4, [r1, #4]
 800645e:	6882      	ldr	r2, [r0, #8]
 8006460:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006464:	4322      	orrs	r2, r4
 8006466:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800646a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800646e:	6082      	str	r2, [r0, #8]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006472:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006476:	6880      	ldr	r0, [r0, #8]
 8006478:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800647a:	4302      	orrs	r2, r0
 800647c:	43d2      	mvns	r2, r2
 800647e:	481c      	ldr	r0, [pc, #112]	; (80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006480:	f002 0201 	and.w	r2, r2, #1
 8006484:	e7d6      	b.n	8006434 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006486:	491a      	ldr	r1, [pc, #104]	; (80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006488:	688a      	ldr	r2, [r1, #8]
 800648a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800648e:	608a      	str	r2, [r1, #8]
 8006490:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006494:	4a12      	ldr	r2, [pc, #72]	; (80064e0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006496:	6880      	ldr	r0, [r0, #8]
 8006498:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800649a:	4915      	ldr	r1, [pc, #84]	; (80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800649c:	4302      	orrs	r2, r0
 800649e:	43d2      	mvns	r2, r2
 80064a0:	f002 0201 	and.w	r2, r2, #1
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	d0cf      	beq.n	8006448 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80064a8:	688a      	ldr	r2, [r1, #8]
 80064aa:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80064ae:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064b2:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80064b4:	608a      	str	r2, [r1, #8]
 80064b6:	e795      	b.n	80063e4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80064b8:	490a      	ldr	r1, [pc, #40]	; (80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80064ba:	4808      	ldr	r0, [pc, #32]	; (80064dc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80064bc:	688a      	ldr	r2, [r1, #8]
 80064be:	4c0b      	ldr	r4, [pc, #44]	; (80064ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80064c0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80064c4:	608a      	str	r2, [r1, #8]
 80064c6:	6880      	ldr	r0, [r0, #8]
 80064c8:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064ca:	4302      	orrs	r2, r0
 80064cc:	4806      	ldr	r0, [pc, #24]	; (80064e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80064ce:	6880      	ldr	r0, [r0, #8]
 80064d0:	4302      	orrs	r2, r0
 80064d2:	43d2      	mvns	r2, r2
 80064d4:	f002 0201 	and.w	r2, r2, #1
 80064d8:	e7e4      	b.n	80064a4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80064da:	bf00      	nop
 80064dc:	50000400 	.word	0x50000400
 80064e0:	50000100 	.word	0x50000100
 80064e4:	50000700 	.word	0x50000700
 80064e8:	50000600 	.word	0x50000600
 80064ec:	50000500 	.word	0x50000500
 80064f0:	50000300 	.word	0x50000300

080064f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064f4:	4907      	ldr	r1, [pc, #28]	; (8006514 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80064f6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064f8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064fa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006502:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006504:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006506:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800650a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800650e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	e000ed00 	.word	0xe000ed00

08006518 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006518:	4b1c      	ldr	r3, [pc, #112]	; (800658c <HAL_NVIC_SetPriority+0x74>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006520:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006522:	f1c3 0e07 	rsb	lr, r3, #7
 8006526:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800652a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800652e:	bf28      	it	cs
 8006530:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006534:	f1bc 0f06 	cmp.w	ip, #6
 8006538:	d91b      	bls.n	8006572 <HAL_NVIC_SetPriority+0x5a>
 800653a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800653c:	f04f 3cff 	mov.w	ip, #4294967295
 8006540:	fa0c fc03 	lsl.w	ip, ip, r3
 8006544:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006548:	f04f 3cff 	mov.w	ip, #4294967295
 800654c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006550:	ea21 010c 	bic.w	r1, r1, ip
 8006554:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006556:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006558:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800655c:	db0c      	blt.n	8006578 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800655e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006562:	0109      	lsls	r1, r1, #4
 8006564:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006568:	b2c9      	uxtb	r1, r1
 800656a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800656e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006572:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006574:	4613      	mov	r3, r2
 8006576:	e7e7      	b.n	8006548 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_NVIC_SetPriority+0x78>)
 800657a:	f000 000f 	and.w	r0, r0, #15
 800657e:	0109      	lsls	r1, r1, #4
 8006580:	4403      	add	r3, r0
 8006582:	b2c9      	uxtb	r1, r1
 8006584:	7619      	strb	r1, [r3, #24]
 8006586:	f85d fb04 	ldr.w	pc, [sp], #4
 800658a:	bf00      	nop
 800658c:	e000ed00 	.word	0xe000ed00
 8006590:	e000ecfc 	.word	0xe000ecfc

08006594 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006594:	2800      	cmp	r0, #0
 8006596:	db07      	blt.n	80065a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006598:	4a04      	ldr	r2, [pc, #16]	; (80065ac <HAL_NVIC_EnableIRQ+0x18>)
 800659a:	0941      	lsrs	r1, r0, #5
 800659c:	2301      	movs	r3, #1
 800659e:	f000 001f 	and.w	r0, r0, #31
 80065a2:	4083      	lsls	r3, r0
 80065a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e000e100 	.word	0xe000e100

080065b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065b0:	3801      	subs	r0, #1
 80065b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80065b6:	d210      	bcs.n	80065da <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065b8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065be:	4c08      	ldr	r4, [pc, #32]	; (80065e0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80065c6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065ca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065cc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065ce:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065d0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80065d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065d6:	6119      	str	r1, [r3, #16]
 80065d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80065da:	2001      	movs	r0, #1
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000ed00 	.word	0xe000ed00

080065e4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d078      	beq.n	80066da <HAL_DMA_Init+0xf6>
{
 80065e8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065ea:	4b3d      	ldr	r3, [pc, #244]	; (80066e0 <HAL_DMA_Init+0xfc>)
 80065ec:	6804      	ldr	r4, [r0, #0]
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d95f      	bls.n	80066b2 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065f2:	4a3c      	ldr	r2, [pc, #240]	; (80066e4 <HAL_DMA_Init+0x100>)
 80065f4:	4b3c      	ldr	r3, [pc, #240]	; (80066e8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 80065f6:	493d      	ldr	r1, [pc, #244]	; (80066ec <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065f8:	4422      	add	r2, r4
 80065fa:	fba3 3202 	umull	r3, r2, r3, r2
 80065fe:	0912      	lsrs	r2, r2, #4
 8006600:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006602:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006604:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006606:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800660a:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800660c:	4e36      	ldr	r6, [pc, #216]	; (80066e8 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800660e:	4f34      	ldr	r7, [pc, #208]	; (80066e0 <HAL_DMA_Init+0xfc>)
 8006610:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006614:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8006616:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006618:	430b      	orrs	r3, r1
 800661a:	6941      	ldr	r1, [r0, #20]
 800661c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800661e:	6981      	ldr	r1, [r0, #24]
 8006620:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8006622:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006624:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006628:	69c1      	ldr	r1, [r0, #28]
 800662a:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800662c:	b2e1      	uxtb	r1, r4
 800662e:	3908      	subs	r1, #8
 8006630:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8006634:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006636:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800663a:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 800663c:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8006640:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006642:	4e2b      	ldr	r6, [pc, #172]	; (80066f0 <HAL_DMA_Init+0x10c>)
 8006644:	4b2b      	ldr	r3, [pc, #172]	; (80066f4 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006646:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800664a:	42bc      	cmp	r4, r7
 800664c:	bf98      	it	ls
 800664e:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006650:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006654:	4c28      	ldr	r4, [pc, #160]	; (80066f8 <HAL_DMA_Init+0x114>)
 8006656:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006658:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800665c:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800665e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006662:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006664:	6484      	str	r4, [r0, #72]	; 0x48
 8006666:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800666a:	d02b      	beq.n	80066c4 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800666c:	6845      	ldr	r5, [r0, #4]
 800666e:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006670:	3d01      	subs	r5, #1
 8006672:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006674:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006678:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800667c:	d828      	bhi.n	80066d0 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800667e:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006680:	4d1f      	ldr	r5, [pc, #124]	; (8006700 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006682:	4a20      	ldr	r2, [pc, #128]	; (8006704 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006684:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006686:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006688:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800668a:	f004 041f 	and.w	r4, r4, #31
 800668e:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006692:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006694:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006698:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800669a:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800669c:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800669e:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80066a0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066a2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80066a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80066a8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80066ac:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80066ae:	4618      	mov	r0, r3
}
 80066b0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80066b2:	4a15      	ldr	r2, [pc, #84]	; (8006708 <HAL_DMA_Init+0x124>)
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 80066b6:	4915      	ldr	r1, [pc, #84]	; (800670c <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80066b8:	4422      	add	r2, r4
 80066ba:	fba3 3202 	umull	r3, r2, r3, r2
 80066be:	0912      	lsrs	r2, r2, #4
 80066c0:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80066c2:	e79e      	b.n	8006602 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80066c4:	2400      	movs	r4, #0
 80066c6:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80066c8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066cc:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 80066d0:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80066d2:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066d6:	65c3      	str	r3, [r0, #92]	; 0x5c
 80066d8:	e7e1      	b.n	800669e <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 80066da:	2001      	movs	r0, #1
}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40020407 	.word	0x40020407
 80066e4:	bffdfbf8 	.word	0xbffdfbf8
 80066e8:	cccccccd 	.word	0xcccccccd
 80066ec:	40020400 	.word	0x40020400
 80066f0:	40020800 	.word	0x40020800
 80066f4:	40020820 	.word	0x40020820
 80066f8:	40020880 	.word	0x40020880
 80066fc:	1000823f 	.word	0x1000823f
 8006700:	40020940 	.word	0x40020940
 8006704:	40020900 	.word	0x40020900
 8006708:	bffdfff8 	.word	0xbffdfff8
 800670c:	40020000 	.word	0x40020000

08006710 <HAL_DMA_Start_IT>:
{
 8006710:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8006712:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8006716:	2c01      	cmp	r4, #1
 8006718:	d051      	beq.n	80067be <HAL_DMA_Start_IT+0xae>
 800671a:	2401      	movs	r4, #1
 800671c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006720:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8006724:	2c01      	cmp	r4, #1
 8006726:	d005      	beq.n	8006734 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006728:	2300      	movs	r3, #0
 800672a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800672e:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8006730:	2002      	movs	r0, #2
}
 8006732:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8006734:	2402      	movs	r4, #2
 8006736:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800673a:	2400      	movs	r4, #0
 800673c:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800673e:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006740:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f025 0501 	bic.w	r5, r5, #1
 8006748:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800674a:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 800674e:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8006750:	b115      	cbz	r5, 8006758 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006752:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8006756:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006758:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800675a:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800675c:	f006 0c1f 	and.w	ip, r6, #31
 8006760:	2601      	movs	r6, #1
 8006762:	fa06 f60c 	lsl.w	r6, r6, ip
 8006766:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006768:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800676a:	6883      	ldr	r3, [r0, #8]
 800676c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 800676e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8006770:	bf0b      	itete	eq
 8006772:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006774:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006776:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006778:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800677a:	b1bb      	cbz	r3, 80067ac <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	f043 030e 	orr.w	r3, r3, #14
 8006782:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006784:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	03d2      	lsls	r2, r2, #15
 800678a:	d503      	bpl.n	8006794 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006792:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006794:	b11d      	cbz	r5, 800679e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006796:	682b      	ldr	r3, [r5, #0]
 8006798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80067a4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80067a6:	6023      	str	r3, [r4, #0]
}
 80067a8:	bcf0      	pop	{r4, r5, r6, r7}
 80067aa:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	f023 0304 	bic.w	r3, r3, #4
 80067b2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	f043 030a 	orr.w	r3, r3, #10
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	e7e2      	b.n	8006784 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 80067be:	2002      	movs	r0, #2
}
 80067c0:	bcf0      	pop	{r4, r5, r6, r7}
 80067c2:	4770      	bx	lr

080067c4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067c4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80067c8:	2a02      	cmp	r2, #2
{
 80067ca:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067cc:	d009      	beq.n	80067e2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067ce:	2204      	movs	r2, #4
 80067d0:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80067d2:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 80067d4:	2200      	movs	r2, #0
    status = HAL_ERROR;
 80067d6:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80067d8:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80067dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80067e0:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067e2:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 80067e6:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067e8:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ea:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067ec:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ee:	f020 000e 	bic.w	r0, r0, #14
 80067f2:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80067fa:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 80067fc:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8006800:	f020 0001 	bic.w	r0, r0, #1
 8006804:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006806:	f001 011f 	and.w	r1, r1, #31
 800680a:	2201      	movs	r2, #1
 800680c:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800680e:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006812:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006814:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8006816:	b138      	cbz	r0, 8006828 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006818:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800681a:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800681e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006822:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006824:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006826:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006828:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 800682a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 800682c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006834:	bc30      	pop	{r4, r5}
 8006836:	4770      	bx	lr

08006838 <HAL_DMA_Abort_IT>:
{
 8006838:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800683a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800683e:	2b02      	cmp	r3, #2
 8006840:	d009      	beq.n	8006856 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 8006842:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006844:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8006846:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006848:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800684a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800684e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 8006852:	4618      	mov	r0, r3
}
 8006854:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006856:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006858:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800685a:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800685c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800685e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006860:	f021 010e 	bic.w	r1, r1, #14
 8006864:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006866:	6819      	ldr	r1, [r3, #0]
 8006868:	f021 0101 	bic.w	r1, r1, #1
 800686c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800686e:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006870:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006876:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006878:	f002 021f 	and.w	r2, r2, #31
 800687c:	2301      	movs	r3, #1
 800687e:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006880:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006884:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006886:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006888:	b132      	cbz	r2, 8006898 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800688a:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800688c:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006894:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006896:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8006898:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800689a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800689c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800689e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80068a2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80068a6:	b113      	cbz	r3, 80068ae <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 80068a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80068aa:	4620      	mov	r0, r4
}
 80068ac:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	4618      	mov	r0, r3
}
 80068b0:	bd38      	pop	{r3, r4, r5, pc}
 80068b2:	bf00      	nop

080068b4 <HAL_DMA_IRQHandler>:
{
 80068b4:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80068b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068b8:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80068ba:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068bc:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80068be:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2204      	movs	r2, #4
 80068c6:	409a      	lsls	r2, r3
 80068c8:	420a      	tst	r2, r1
 80068ca:	d00e      	beq.n	80068ea <HAL_DMA_IRQHandler+0x36>
 80068cc:	f014 0f04 	tst.w	r4, #4
 80068d0:	d00b      	beq.n	80068ea <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068d2:	682b      	ldr	r3, [r5, #0]
 80068d4:	069b      	lsls	r3, r3, #26
 80068d6:	d403      	bmi.n	80068e0 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	f023 0304 	bic.w	r3, r3, #4
 80068de:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80068e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80068e2:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80068e4:	b1cb      	cbz	r3, 800691a <HAL_DMA_IRQHandler+0x66>
}
 80068e6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80068e8:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80068ea:	2202      	movs	r2, #2
 80068ec:	409a      	lsls	r2, r3
 80068ee:	420a      	tst	r2, r1
 80068f0:	d015      	beq.n	800691e <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 80068f2:	f014 0f02 	tst.w	r4, #2
 80068f6:	d012      	beq.n	800691e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	0699      	lsls	r1, r3, #26
 80068fc:	d406      	bmi.n	800690c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068fe:	682b      	ldr	r3, [r5, #0]
 8006900:	f023 030a 	bic.w	r3, r3, #10
 8006904:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006906:	2301      	movs	r3, #1
 8006908:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 800690c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800690e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006910:	2100      	movs	r1, #0
 8006912:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e5      	bne.n	80068e6 <HAL_DMA_IRQHandler+0x32>
}
 800691a:	bc70      	pop	{r4, r5, r6}
 800691c:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800691e:	2208      	movs	r2, #8
 8006920:	409a      	lsls	r2, r3
 8006922:	420a      	tst	r2, r1
 8006924:	d0f9      	beq.n	800691a <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8006926:	0722      	lsls	r2, r4, #28
 8006928:	d5f7      	bpl.n	800691a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800692a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800692c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800692e:	f022 020e 	bic.w	r2, r2, #14
 8006932:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006934:	2201      	movs	r2, #1
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800693a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800693c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800693e:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006940:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006944:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8006948:	2900      	cmp	r1, #0
 800694a:	d0e6      	beq.n	800691a <HAL_DMA_IRQHandler+0x66>
}
 800694c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800694e:	4708      	bx	r1

08006950 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006950:	2800      	cmp	r0, #0
 8006952:	f000 814c 	beq.w	8006bee <HAL_FDCAN_Init+0x29e>
{
 8006956:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800695a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800695e:	4604      	mov	r4, r0
 8006960:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006964:	2b00      	cmp	r3, #0
 8006966:	d073      	beq.n	8006a50 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	6993      	ldr	r3, [r2, #24]
 800696c:	f023 0310 	bic.w	r3, r3, #16
 8006970:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006972:	f7fc faa7 	bl	8002ec4 <HAL_GetTick>
 8006976:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006978:	e004      	b.n	8006984 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800697a:	f7fc faa3 	bl	8002ec4 <HAL_GetTick>
 800697e:	1b43      	subs	r3, r0, r5
 8006980:	2b0a      	cmp	r3, #10
 8006982:	d85b      	bhi.n	8006a3c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	0711      	lsls	r1, r2, #28
 800698a:	d4f6      	bmi.n	800697a <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006994:	f7fc fa96 	bl	8002ec4 <HAL_GetTick>
 8006998:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800699a:	e004      	b.n	80069a6 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800699c:	f7fc fa92 	bl	8002ec4 <HAL_GetTick>
 80069a0:	1b40      	subs	r0, r0, r5
 80069a2:	280a      	cmp	r0, #10
 80069a4:	d84a      	bhi.n	8006a3c <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	07d2      	lsls	r2, r2, #31
 80069ac:	d5f6      	bpl.n	800699c <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80069ae:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80069b0:	4998      	ldr	r1, [pc, #608]	; (8006c14 <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80069b2:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 80069b6:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80069b8:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80069ba:	f000 8113 	beq.w	8006be4 <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80069be:	7c22      	ldrb	r2, [r4, #16]
 80069c0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	bf0c      	ite	eq
 80069c6:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80069ca:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 80069ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80069d0:	7c62      	ldrb	r2, [r4, #17]
 80069d2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	bf0c      	ite	eq
 80069d8:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80069dc:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 80069e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80069e2:	7ca2      	ldrb	r2, [r4, #18]
 80069e4:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	bf0c      	ite	eq
 80069ea:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80069ee:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 80069f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80069f8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80069fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80069fe:	4302      	orrs	r2, r0
 8006a00:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006a08:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a0a:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006a0c:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a0e:	f022 0210 	bic.w	r2, r2, #16
 8006a12:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006a14:	d021      	beq.n	8006a5a <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006a16:	b321      	cbz	r1, 8006a62 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006a18:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006a1a:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006a1c:	f000 80f5 	beq.w	8006c0a <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006a20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a24:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a26:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006a28:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a2a:	f042 0210 	orr.w	r2, r2, #16
 8006a2e:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006a30:	d117      	bne.n	8006a62 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	f042 0220 	orr.w	r2, r2, #32
 8006a38:	619a      	str	r2, [r3, #24]
 8006a3a:	e012      	b.n	8006a62 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a3e:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a46:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006a4a:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006a50:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006a54:	f7fa ff3c 	bl	80018d0 <HAL_FDCAN_MspInit>
 8006a58:	e786      	b.n	8006968 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	f042 0204 	orr.w	r2, r2, #4
 8006a60:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a62:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a66:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a68:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a6a:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a6c:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a70:	6a21      	ldr	r1, [r4, #32]
 8006a72:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a74:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006a76:	6961      	ldr	r1, [r4, #20]
 8006a78:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006a7e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a82:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006a84:	d10e      	bne.n	8006aa4 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a86:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a8c:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a8e:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a90:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a92:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a94:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006a98:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006a9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a9c:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006aa2:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006aa4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006aa8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006aaa:	495b      	ldr	r1, [pc, #364]	; (8006c18 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006aac:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 8006aae:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006ab0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8006ab4:	f000 809d 	beq.w	8006bf2 <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006ab8:	4a58      	ldr	r2, [pc, #352]	; (8006c1c <HAL_FDCAN_Init+0x2cc>)
 8006aba:	4e59      	ldr	r6, [pc, #356]	; (8006c20 <HAL_FDCAN_Init+0x2d0>)
 8006abc:	4f59      	ldr	r7, [pc, #356]	; (8006c24 <HAL_FDCAN_Init+0x2d4>)
 8006abe:	4d5a      	ldr	r5, [pc, #360]	; (8006c28 <HAL_FDCAN_Init+0x2d8>)
 8006ac0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ac4:	428b      	cmp	r3, r1
 8006ac6:	bf18      	it	ne
 8006ac8:	4691      	movne	r9, r2
 8006aca:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8006ace:	f1a2 0218 	sub.w	r2, r2, #24
 8006ad2:	f101 0110 	add.w	r1, r1, #16
 8006ad6:	bf18      	it	ne
 8006ad8:	4616      	movne	r6, r2
 8006ada:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006ade:	bf14      	ite	ne
 8006ae0:	4617      	movne	r7, r2
 8006ae2:	468e      	moveq	lr, r1
 8006ae4:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006ae8:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8006aec:	bf14      	ite	ne
 8006aee:	4696      	movne	lr, r2
 8006af0:	4688      	moveq	r8, r1
 8006af2:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8006af6:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 8006afa:	bf14      	ite	ne
 8006afc:	4690      	movne	r8, r2
 8006afe:	468c      	moveq	ip, r1
 8006b00:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8006b04:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 8006b08:	bf14      	ite	ne
 8006b0a:	4694      	movne	ip, r2
 8006b0c:	46a9      	moveq	r9, r5
 8006b0e:	f502 7254 	add.w	r2, r2, #848	; 0x350
 8006b12:	bf18      	it	ne
 8006b14:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006b16:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006b1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006b1c:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006b1e:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8006b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006b26:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006b2a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006b2e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006b30:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006b34:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8006b38:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8006b3c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006b40:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006b44:	1a89      	subs	r1, r1, r2
 8006b46:	1c53      	adds	r3, r2, #1
 8006b48:	4563      	cmp	r3, ip
 8006b4a:	ea4f 0391 	mov.w	r3, r1, lsr #2
 8006b4e:	f103 0301 	add.w	r3, r3, #1
 8006b52:	bf98      	it	ls
 8006b54:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006b56:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006b5a:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006b5e:	bf88      	it	hi
 8006b60:	2501      	movhi	r5, #1
 8006b62:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8006b66:	d81a      	bhi.n	8006b9e <HAL_FDCAN_Init+0x24e>
 8006b68:	2917      	cmp	r1, #23
 8006b6a:	bf8c      	ite	hi
 8006b6c:	2100      	movhi	r1, #0
 8006b6e:	2101      	movls	r1, #1
 8006b70:	b9a9      	cbnz	r1, 8006b9e <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006b72:	4616      	mov	r6, r2
 8006b74:	b10b      	cbz	r3, 8006b7a <HAL_FDCAN_Init+0x22a>
 8006b76:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006b7a:	1aed      	subs	r5, r5, r3
 8006b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b80:	086a      	lsrs	r2, r5, #1
 8006b82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006b86:	2000      	movs	r0, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d1fb      	bne.n	8006b8a <HAL_FDCAN_Init+0x23a>
 8006b92:	f025 0301 	bic.w	r3, r5, #1
 8006b96:	429d      	cmp	r5, r3
 8006b98:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8006b9c:	d01a      	beq.n	8006bd4 <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006ba6:	458c      	cmp	ip, r1
 8006ba8:	d914      	bls.n	8006bd4 <HAL_FDCAN_Init+0x284>
 8006baa:	f102 0108 	add.w	r1, r2, #8
 8006bae:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006bb0:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006bb2:	d90f      	bls.n	8006bd4 <HAL_FDCAN_Init+0x284>
 8006bb4:	f102 010c 	add.w	r1, r2, #12
 8006bb8:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006bba:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006bbc:	d90a      	bls.n	8006bd4 <HAL_FDCAN_Init+0x284>
 8006bbe:	f102 0110 	add.w	r1, r2, #16
 8006bc2:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006bc4:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006bc6:	d905      	bls.n	8006bd4 <HAL_FDCAN_Init+0x284>
 8006bc8:	f102 0114 	add.w	r1, r2, #20
 8006bcc:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006bce:	6113      	str	r3, [r2, #16]
 8006bd0:	bf88      	it	hi
 8006bd2:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8006bd4:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006bd6:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006bd8:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006bda:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8006bde:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8006be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006be4:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <HAL_FDCAN_Init+0x2dc>)
 8006be6:	6861      	ldr	r1, [r4, #4]
 8006be8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 8006bec:	e6e7      	b.n	80069be <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8006bee:	2001      	movs	r0, #1
}
 8006bf0:	4770      	bx	lr
 8006bf2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8006c3c <HAL_FDCAN_Init+0x2ec>
 8006bf6:	4e0e      	ldr	r6, [pc, #56]	; (8006c30 <HAL_FDCAN_Init+0x2e0>)
 8006bf8:	4f0e      	ldr	r7, [pc, #56]	; (8006c34 <HAL_FDCAN_Init+0x2e4>)
 8006bfa:	f8df e044 	ldr.w	lr, [pc, #68]	; 8006c40 <HAL_FDCAN_Init+0x2f0>
 8006bfe:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8006c44 <HAL_FDCAN_Init+0x2f4>
 8006c02:	f8df c044 	ldr.w	ip, [pc, #68]	; 8006c48 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <HAL_FDCAN_Init+0x2e8>)
 8006c08:	e785      	b.n	8006b16 <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c0a:	f042 0220 	orr.w	r2, r2, #32
 8006c0e:	619a      	str	r2, [r3, #24]
 8006c10:	e727      	b.n	8006a62 <HAL_FDCAN_Init+0x112>
 8006c12:	bf00      	nop
 8006c14:	40006400 	.word	0x40006400
 8006c18:	40006800 	.word	0x40006800
 8006c1c:	4000a678 	.word	0x4000a678
 8006c20:	4000ad00 	.word	0x4000ad00
 8006c24:	4000ac28 	.word	0x4000ac28
 8006c28:	4000ad18 	.word	0x4000ad18
 8006c2c:	40006000 	.word	0x40006000
 8006c30:	4000a9b0 	.word	0x4000a9b0
 8006c34:	4000a8d8 	.word	0x4000a8d8
 8006c38:	4000a750 	.word	0x4000a750
 8006c3c:	4000a9c8 	.word	0x4000a9c8
 8006c40:	4000a800 	.word	0x4000a800
 8006c44:	4000a7c0 	.word	0x4000a7c0
 8006c48:	4000aaa0 	.word	0x4000aaa0

08006c4c <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006c4c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006c50:	3a01      	subs	r2, #1
 8006c52:	2a01      	cmp	r2, #1
{
 8006c54:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006c56:	d905      	bls.n	8006c64 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c58:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006c5a:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006c5e:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c60:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c62:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006c64:	6808      	ldr	r0, [r1, #0]
{
 8006c66:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006c68:	b978      	cbnz	r0, 8006c8a <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 8006c6a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006c6e:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006c70:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 8006c74:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006c76:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006c78:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006c7a:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 8006c7c:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 8006c82:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 8006c86:	bc30      	pop	{r4, r5}
 8006c88:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006c8a:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006c8c:	688a      	ldr	r2, [r1, #8]
 8006c8e:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006c90:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006c92:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006c96:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006c9a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006c9e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8006ca2:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8006ca6:	2000      	movs	r0, #0
}
 8006ca8:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8006caa:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006cb0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8006cb4:	2a01      	cmp	r2, #1
{
 8006cb6:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006cb8:	d005      	beq.n	8006cc6 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006cba:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006cbc:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8006cc0:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006cc2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006cc4:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006cc6:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006cce:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006cd0:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006cd2:	f022 0201 	bic.w	r2, r2, #1
 8006cd6:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006cd8:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006cda:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop

08006ce0 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006ce2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006ce6:	2b02      	cmp	r3, #2
{
 8006ce8:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006cea:	d10c      	bne.n	8006d06 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006cec:	6805      	ldr	r5, [r0, #0]
 8006cee:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8006cf2:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8006cf6:	d00d      	beq.n	8006d14 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006cf8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8006cfe:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006d00:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006d06:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006d08:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006d0c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006d0e:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006d14:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006d18:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006d1a:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d139      	bne.n	8006d96 <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006d22:	688b      	ldr	r3, [r1, #8]
 8006d24:	690f      	ldr	r7, [r1, #16]
 8006d26:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006d28:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d2a:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006d2e:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8006d32:	4303      	orrs	r3, r0
 8006d34:	6948      	ldr	r0, [r1, #20]
 8006d36:	6a0c      	ldr	r4, [r1, #32]
 8006d38:	4303      	orrs	r3, r0
 8006d3a:	68c8      	ldr	r0, [r1, #12]
 8006d3c:	4303      	orrs	r3, r0
 8006d3e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006d42:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 8006d46:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006d4a:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006d4e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d52:	4c15      	ldr	r4, [pc, #84]	; (8006da8 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8006d54:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d56:	89cb      	ldrh	r3, [r1, #14]
 8006d58:	5ce3      	ldrb	r3, [r4, r3]
 8006d5a:	b1a3      	cbz	r3, 8006d86 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006d5c:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d5e:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006d60:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d62:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006d66:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006d68:	433b      	orrs	r3, r7
 8006d6a:	7857      	ldrb	r7, [r2, #1]
 8006d6c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d70:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d74:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d78:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d7a:	89cb      	ldrh	r3, [r1, #14]
 8006d7c:	5ce3      	ldrb	r3, [r4, r3]
 8006d7e:	459c      	cmp	ip, r3
 8006d80:	f102 0204 	add.w	r2, r2, #4
 8006d84:	d3ea      	bcc.n	8006d5c <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006d86:	2301      	movs	r3, #1
 8006d88:	40b3      	lsls	r3, r6
 8006d8a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 8006d8e:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006d90:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 8006d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8006d96:	690b      	ldr	r3, [r1, #16]
 8006d98:	6808      	ldr	r0, [r1, #0]
 8006d9a:	ea43 0700 	orr.w	r7, r3, r0
 8006d9e:	688b      	ldr	r3, [r1, #8]
 8006da0:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006da2:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8006da6:	e7c2      	b.n	8006d2e <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006da8:	0800cd88 	.word	0x0800cd88

08006dac <HAL_FDCAN_GetRxMessage>:
{
 8006dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dae:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006db0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006db4:	2802      	cmp	r0, #2
 8006db6:	d10d      	bne.n	8006dd4 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006db8:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006dba:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006dbe:	d00f      	beq.n	8006de0 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006dc0:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8006dc4:	0700      	lsls	r0, r0, #28
 8006dc6:	d160      	bne.n	8006e8a <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006dc8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8006dce:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006dd0:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006dd4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006dd6:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006dda:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006ddc:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006de0:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8006de4:	0705      	lsls	r5, r0, #28
 8006de6:	d0ef      	beq.n	8006dc8 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006de8:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006dec:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006dee:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006df2:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006df6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006dfa:	6828      	ldr	r0, [r5, #0]
 8006dfc:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006e00:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d150      	bne.n	8006ea8 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006e06:	6828      	ldr	r0, [r5, #0]
 8006e08:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8006e0c:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006e0e:	6828      	ldr	r0, [r5, #0]
 8006e10:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8006e14:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006e16:	6828      	ldr	r0, [r5, #0]
 8006e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006e1c:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006e1e:	88a8      	ldrh	r0, [r5, #4]
 8006e20:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006e22:	6868      	ldr	r0, [r5, #4]
 8006e24:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8006e28:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006e2a:	686e      	ldr	r6, [r5, #4]
 8006e2c:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8006e30:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006e32:	686e      	ldr	r6, [r5, #4]
 8006e34:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8006e38:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006e3a:	79ee      	ldrb	r6, [r5, #7]
 8006e3c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e40:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006e42:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e44:	4e1a      	ldr	r6, [pc, #104]	; (8006eb0 <HAL_FDCAN_GetRxMessage+0x104>)
 8006e46:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006e4a:	6868      	ldr	r0, [r5, #4]
 8006e4c:	0fc0      	lsrs	r0, r0, #31
 8006e4e:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e50:	f1be 0f00 	cmp.w	lr, #0
 8006e54:	d011      	beq.n	8006e7a <HAL_FDCAN_GetRxMessage+0xce>
 8006e56:	3b01      	subs	r3, #1
 8006e58:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006e5c:	46f4      	mov	ip, lr
 8006e5e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8006e62:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e66:	89d0      	ldrh	r0, [r2, #14]
 8006e68:	f1ac 0c06 	sub.w	ip, ip, #6
 8006e6c:	5c30      	ldrb	r0, [r6, r0]
 8006e6e:	ebac 0c05 	sub.w	ip, ip, r5
 8006e72:	4560      	cmp	r0, ip
 8006e74:	d8f2      	bhi.n	8006e5c <HAL_FDCAN_GetRxMessage+0xb0>
 8006e76:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006e7a:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006e7c:	bf0c      	ite	eq
 8006e7e:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006e82:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8006e86:	2000      	movs	r0, #0
}
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006e8a:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006e8e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006e90:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006e94:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006e98:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006e9c:	6828      	ldr	r0, [r5, #0]
 8006e9e:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006ea2:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d0ae      	beq.n	8006e06 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006ea8:	6828      	ldr	r0, [r5, #0]
 8006eaa:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006eae:	e7ad      	b.n	8006e0c <HAL_FDCAN_GetRxMessage+0x60>
 8006eb0:	0800cd88 	.word	0x0800cd88

08006eb4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006eb4:	6803      	ldr	r3, [r0, #0]
 8006eb6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 8006eba:	f000 0007 	and.w	r0, r0, #7
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_FDCAN_ActivateNotification>:
{
 8006ec0:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ec2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006ec6:	3801      	subs	r0, #1
 8006ec8:	2801      	cmp	r0, #1
 8006eca:	d905      	bls.n	8006ed8 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ece:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006ed2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006ed4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ed6:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006ed8:	681b      	ldr	r3, [r3, #0]
{
 8006eda:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006edc:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006ee0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006ee2:	d03d      	beq.n	8006f60 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006ee4:	07c4      	lsls	r4, r0, #31
 8006ee6:	d43b      	bmi.n	8006f60 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006ee8:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006eea:	f044 0401 	orr.w	r4, r4, #1
 8006eee:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006ef0:	b1cd      	cbz	r5, 8006f26 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006ef2:	07c5      	lsls	r5, r0, #31
 8006ef4:	d517      	bpl.n	8006f26 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006ef6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006ef8:	f040 0002 	orr.w	r0, r0, #2
 8006efc:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006efe:	060c      	lsls	r4, r1, #24
 8006f00:	d504      	bpl.n	8006f0c <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006f02:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006f06:	4310      	orrs	r0, r2
 8006f08:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006f0c:	05c8      	lsls	r0, r1, #23
 8006f0e:	d504      	bpl.n	8006f1a <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006f10:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006f14:	4302      	orrs	r2, r0
 8006f16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006f1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f1c:	430a      	orrs	r2, r1
    return HAL_OK;
 8006f1e:	2000      	movs	r0, #0
}
 8006f20:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
}
 8006f24:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006f26:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006f2a:	d001      	beq.n	8006f30 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006f2c:	0784      	lsls	r4, r0, #30
 8006f2e:	d4e2      	bmi.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x36>
 8006f30:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006f34:	d131      	bne.n	8006f9a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006f36:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006f3a:	d001      	beq.n	8006f40 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006f3c:	0704      	lsls	r4, r0, #28
 8006f3e:	d4da      	bmi.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x36>
 8006f40:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006f44:	d001      	beq.n	8006f4a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006f46:	06c5      	lsls	r5, r0, #27
 8006f48:	d4d5      	bmi.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x36>
 8006f4a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006f4e:	d001      	beq.n	8006f54 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006f50:	0684      	lsls	r4, r0, #26
 8006f52:	d4d0      	bmi.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x36>
 8006f54:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006f58:	d0d1      	beq.n	8006efe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006f5a:	0645      	lsls	r5, r0, #25
 8006f5c:	d5cf      	bpl.n	8006efe <HAL_FDCAN_ActivateNotification+0x3e>
 8006f5e:	e7ca      	b.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006f60:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006f64:	d001      	beq.n	8006f6a <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006f66:	0784      	lsls	r4, r0, #30
 8006f68:	d5be      	bpl.n	8006ee8 <HAL_FDCAN_ActivateNotification+0x28>
 8006f6a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006f6e:	d117      	bne.n	8006fa0 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006f70:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006f74:	d001      	beq.n	8006f7a <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006f76:	0704      	lsls	r4, r0, #28
 8006f78:	d5b6      	bpl.n	8006ee8 <HAL_FDCAN_ActivateNotification+0x28>
 8006f7a:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006f7e:	d001      	beq.n	8006f84 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006f80:	06c4      	lsls	r4, r0, #27
 8006f82:	d5b1      	bpl.n	8006ee8 <HAL_FDCAN_ActivateNotification+0x28>
 8006f84:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006f88:	d001      	beq.n	8006f8e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006f8a:	0684      	lsls	r4, r0, #26
 8006f8c:	d5ac      	bpl.n	8006ee8 <HAL_FDCAN_ActivateNotification+0x28>
 8006f8e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006f92:	d0ad      	beq.n	8006ef0 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006f94:	0644      	lsls	r4, r0, #25
 8006f96:	d4ab      	bmi.n	8006ef0 <HAL_FDCAN_ActivateNotification+0x30>
 8006f98:	e7a6      	b.n	8006ee8 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006f9a:	0745      	lsls	r5, r0, #29
 8006f9c:	d4ab      	bmi.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x36>
 8006f9e:	e7ca      	b.n	8006f36 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006fa0:	0744      	lsls	r4, r0, #29
 8006fa2:	d5a1      	bpl.n	8006ee8 <HAL_FDCAN_ActivateNotification+0x28>
 8006fa4:	e7e4      	b.n	8006f70 <HAL_FDCAN_ActivateNotification+0xb0>
 8006fa6:	bf00      	nop

08006fa8 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop

08006fac <HAL_FDCAN_RxFifo1Callback>:
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop

08006fb0 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop

08006fb4 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop

08006fb8 <HAL_FDCAN_TxBufferAbortCallback>:
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop

08006fbc <HAL_FDCAN_TimestampWraparoundCallback>:
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop

08006fc0 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop

08006fc4 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop

08006fc8 <HAL_FDCAN_ErrorCallback>:
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop

08006fcc <HAL_FDCAN_ErrorStatusCallback>:
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop

08006fd0 <HAL_FDCAN_IRQHandler>:
{
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006fd4:	6803      	ldr	r3, [r0, #0]
 8006fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006fd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fda:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006fde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006fe2:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006fe4:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006fea:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006fec:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8006fee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006ff0:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006ff2:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff6:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ffa:	0652      	lsls	r2, r2, #25
{
 8006ffc:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006ffe:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007002:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007006:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 800700a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800700e:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007012:	d502      	bpl.n	800701a <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007016:	0651      	lsls	r1, r2, #25
 8007018:	d473      	bmi.n	8007102 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800701a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800701c:	05d2      	lsls	r2, r2, #23
 800701e:	d502      	bpl.n	8007026 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007022:	05d0      	lsls	r0, r2, #23
 8007024:	d45d      	bmi.n	80070e2 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8007026:	f1b9 0f00 	cmp.w	r9, #0
 800702a:	d14a      	bne.n	80070c2 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 800702c:	f1b8 0f00 	cmp.w	r8, #0
 8007030:	d137      	bne.n	80070a2 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8007032:	2f00      	cmp	r7, #0
 8007034:	d13e      	bne.n	80070b4 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007038:	0591      	lsls	r1, r2, #22
 800703a:	d502      	bpl.n	8007042 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800703c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800703e:	0592      	lsls	r2, r2, #22
 8007040:	d475      	bmi.n	800712e <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007042:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007044:	0617      	lsls	r7, r2, #24
 8007046:	d502      	bpl.n	800704e <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800704a:	0610      	lsls	r0, r2, #24
 800704c:	d477      	bmi.n	800713e <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800704e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007050:	0491      	lsls	r1, r2, #18
 8007052:	d502      	bpl.n	800705a <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007056:	0492      	lsls	r2, r2, #18
 8007058:	d459      	bmi.n	800710e <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800705a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800705c:	0417      	lsls	r7, r2, #16
 800705e:	d502      	bpl.n	8007066 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007062:	0410      	lsls	r0, r2, #16
 8007064:	d45b      	bmi.n	800711e <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007068:	0451      	lsls	r1, r2, #17
 800706a:	d509      	bpl.n	8007080 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800706c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800706e:	0452      	lsls	r2, r2, #17
 8007070:	d506      	bpl.n	8007080 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007076:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007078:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800707a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800707e:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8007080:	b94e      	cbnz	r6, 8007096 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8007082:	b125      	cbz	r5, 800708e <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8007088:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800708a:	432b      	orrs	r3, r5
 800708c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800708e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007090:	bb13      	cbnz	r3, 80070d8 <HAL_FDCAN_IRQHandler+0x108>
}
 8007092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007096:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007098:	4631      	mov	r1, r6
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff ff96 	bl	8006fcc <HAL_FDCAN_ErrorStatusCallback>
 80070a0:	e7ef      	b.n	8007082 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80070a2:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80070a6:	4641      	mov	r1, r8
 80070a8:	4620      	mov	r0, r4
 80070aa:	f7fd fd09 	bl	8004ac0 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80070ae:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 80070b0:	2f00      	cmp	r7, #0
 80070b2:	d0c0      	beq.n	8007036 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80070b4:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80070b6:	4639      	mov	r1, r7
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7ff ff77 	bl	8006fac <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	e7b9      	b.n	8007036 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80070c2:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80070c6:	4649      	mov	r1, r9
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff ff6d 	bl	8006fa8 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80070ce:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 80070d0:	f1b8 0f00 	cmp.w	r8, #0
 80070d4:	d0ad      	beq.n	8007032 <HAL_FDCAN_IRQHandler+0x62>
 80070d6:	e7e4      	b.n	80070a2 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80070d8:	4620      	mov	r0, r4
 80070da:	f7ff ff75 	bl	8006fc8 <HAL_FDCAN_ErrorCallback>
}
 80070de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80070e2:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80070e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80070ea:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80070ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80070f2:	4620      	mov	r0, r4
 80070f4:	f7ff ff60 	bl	8006fb8 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80070f8:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80070fa:	f1b9 0f00 	cmp.w	r9, #0
 80070fe:	d095      	beq.n	800702c <HAL_FDCAN_IRQHandler+0x5c>
 8007100:	e7df      	b.n	80070c2 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007102:	2240      	movs	r2, #64	; 0x40
 8007104:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007106:	f7ff ff5d 	bl	8006fc4 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	e785      	b.n	800701a <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800710e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007112:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007114:	4620      	mov	r0, r4
 8007116:	f7ff ff51 	bl	8006fbc <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	e79d      	b.n	800705a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800711e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007122:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007124:	4620      	mov	r0, r4
 8007126:	f7ff ff4b 	bl	8006fc0 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	e79b      	b.n	8007066 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800712e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007132:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007134:	4620      	mov	r0, r4
 8007136:	f7ff ff3b 	bl	8006fb0 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	e781      	b.n	8007042 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800713e:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007142:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007146:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800714c:	4620      	mov	r0, r4
 800714e:	f7ff ff31 	bl	8006fb4 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	e77b      	b.n	800704e <HAL_FDCAN_IRQHandler+0x7e>
 8007156:	bf00      	nop

08007158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800715c:	680c      	ldr	r4, [r1, #0]
{
 800715e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007160:	2c00      	cmp	r4, #0
 8007162:	d07d      	beq.n	8007260 <HAL_GPIO_Init+0x108>
 8007164:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007168:	4e71      	ldr	r6, [pc, #452]	; (8007330 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 800716a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800716c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007170:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007172:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8007176:	ea17 0a04 	ands.w	sl, r7, r4
 800717a:	d06b      	beq.n	8007254 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800717c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8007180:	f001 0203 	and.w	r2, r1, #3
 8007184:	1e55      	subs	r5, r2, #1
 8007186:	2d01      	cmp	r5, #1
 8007188:	d96d      	bls.n	8007266 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800718a:	2a03      	cmp	r2, #3
 800718c:	f040 80b1 	bne.w	80072f2 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007190:	fa02 f20c 	lsl.w	r2, r2, ip
 8007194:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8007196:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007198:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800719a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800719c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 80071a0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071a2:	d057      	beq.n	8007254 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071a4:	4d63      	ldr	r5, [pc, #396]	; (8007334 <HAL_GPIO_Init+0x1dc>)
 80071a6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80071a8:	f042 0201 	orr.w	r2, r2, #1
 80071ac:	662a      	str	r2, [r5, #96]	; 0x60
 80071ae:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80071b0:	f002 0201 	and.w	r2, r2, #1
 80071b4:	9203      	str	r2, [sp, #12]
 80071b6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80071b8:	f023 0203 	bic.w	r2, r3, #3
 80071bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80071c0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071c4:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80071c8:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071ca:	00bf      	lsls	r7, r7, #2
 80071cc:	f04f 080f 	mov.w	r8, #15
 80071d0:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071d4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071d8:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071dc:	d01a      	beq.n	8007214 <HAL_GPIO_Init+0xbc>
 80071de:	4d56      	ldr	r5, [pc, #344]	; (8007338 <HAL_GPIO_Init+0x1e0>)
 80071e0:	42a8      	cmp	r0, r5
 80071e2:	f000 8092 	beq.w	800730a <HAL_GPIO_Init+0x1b2>
 80071e6:	4d55      	ldr	r5, [pc, #340]	; (800733c <HAL_GPIO_Init+0x1e4>)
 80071e8:	42a8      	cmp	r0, r5
 80071ea:	f000 8093 	beq.w	8007314 <HAL_GPIO_Init+0x1bc>
 80071ee:	4d54      	ldr	r5, [pc, #336]	; (8007340 <HAL_GPIO_Init+0x1e8>)
 80071f0:	42a8      	cmp	r0, r5
 80071f2:	f000 8083 	beq.w	80072fc <HAL_GPIO_Init+0x1a4>
 80071f6:	4d53      	ldr	r5, [pc, #332]	; (8007344 <HAL_GPIO_Init+0x1ec>)
 80071f8:	42a8      	cmp	r0, r5
 80071fa:	f000 8092 	beq.w	8007322 <HAL_GPIO_Init+0x1ca>
 80071fe:	4d52      	ldr	r5, [pc, #328]	; (8007348 <HAL_GPIO_Init+0x1f0>)
 8007200:	42a8      	cmp	r0, r5
 8007202:	bf0c      	ite	eq
 8007204:	f04f 0805 	moveq.w	r8, #5
 8007208:	f04f 0806 	movne.w	r8, #6
 800720c:	fa08 f707 	lsl.w	r7, r8, r7
 8007210:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007214:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8007218:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 800721a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800721e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8007220:	bf54      	ite	pl
 8007222:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007224:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8007228:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800722a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800722c:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 800722e:	bf54      	ite	pl
 8007230:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007232:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8007236:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8007238:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800723a:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 800723c:	bf54      	ite	pl
 800723e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007240:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8007244:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007246:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007248:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 800724a:	bf54      	ite	pl
 800724c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800724e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8007252:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8007254:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007256:	fa34 f203 	lsrs.w	r2, r4, r3
 800725a:	f10c 0c02 	add.w	ip, ip, #2
 800725e:	d188      	bne.n	8007172 <HAL_GPIO_Init+0x1a>
  }
}
 8007260:	b005      	add	sp, #20
 8007262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007266:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800726a:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800726e:	f04f 0803 	mov.w	r8, #3
 8007272:	fa08 f80c 	lsl.w	r8, r8, ip
 8007276:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800727a:	fa05 f50c 	lsl.w	r5, r5, ip
 800727e:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8007282:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007284:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8007288:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800728c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007290:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8007294:	409f      	lsls	r7, r3
 8007296:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800729a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800729c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800729e:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072a2:	f8de 7008 	ldr.w	r7, [lr, #8]
 80072a6:	fa07 f70c 	lsl.w	r7, r7, ip
 80072aa:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072ae:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80072b0:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072b2:	fa02 f20c 	lsl.w	r2, r2, ip
 80072b6:	f47f af6e 	bne.w	8007196 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 80072ba:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80072be:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072c2:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80072c6:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80072ca:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072cc:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072d0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072d4:	fa07 f708 	lsl.w	r7, r7, r8
 80072d8:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072da:	270f      	movs	r7, #15
 80072dc:	fa07 f808 	lsl.w	r8, r7, r8
 80072e0:	9f00      	ldr	r7, [sp, #0]
 80072e2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072e6:	9f01      	ldr	r7, [sp, #4]
 80072e8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80072ec:	f8c9 7020 	str.w	r7, [r9, #32]
 80072f0:	e751      	b.n	8007196 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072f2:	2503      	movs	r5, #3
 80072f4:	fa05 f50c 	lsl.w	r5, r5, ip
 80072f8:	43ed      	mvns	r5, r5
 80072fa:	e7cf      	b.n	800729c <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80072fc:	f04f 0803 	mov.w	r8, #3
 8007300:	fa08 f707 	lsl.w	r7, r8, r7
 8007304:	ea49 0907 	orr.w	r9, r9, r7
 8007308:	e784      	b.n	8007214 <HAL_GPIO_Init+0xbc>
 800730a:	fa0b f707 	lsl.w	r7, fp, r7
 800730e:	ea49 0907 	orr.w	r9, r9, r7
 8007312:	e77f      	b.n	8007214 <HAL_GPIO_Init+0xbc>
 8007314:	f04f 0802 	mov.w	r8, #2
 8007318:	fa08 f707 	lsl.w	r7, r8, r7
 800731c:	ea49 0907 	orr.w	r9, r9, r7
 8007320:	e778      	b.n	8007214 <HAL_GPIO_Init+0xbc>
 8007322:	f04f 0804 	mov.w	r8, #4
 8007326:	fa08 f707 	lsl.w	r7, r8, r7
 800732a:	ea49 0907 	orr.w	r9, r9, r7
 800732e:	e771      	b.n	8007214 <HAL_GPIO_Init+0xbc>
 8007330:	40010400 	.word	0x40010400
 8007334:	40021000 	.word	0x40021000
 8007338:	48000400 	.word	0x48000400
 800733c:	48000800 	.word	0x48000800
 8007340:	48000c00 	.word	0x48000c00
 8007344:	48001000 	.word	0x48001000
 8007348:	48001400 	.word	0x48001400

0800734c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800734c:	6903      	ldr	r3, [r0, #16]
 800734e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007350:	bf14      	ite	ne
 8007352:	2001      	movne	r0, #1
 8007354:	2000      	moveq	r0, #0
 8007356:	4770      	bx	lr

08007358 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007358:	b10a      	cbz	r2, 800735e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800735a:	6181      	str	r1, [r0, #24]
 800735c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800735e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop

08007364 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007364:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007366:	ea01 0203 	and.w	r2, r1, r3
 800736a:	ea21 0103 	bic.w	r1, r1, r3
 800736e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007372:	6181      	str	r1, [r0, #24]
}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop

08007378 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007378:	4a04      	ldr	r2, [pc, #16]	; (800738c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800737a:	6951      	ldr	r1, [r2, #20]
 800737c:	4201      	tst	r1, r0
 800737e:	d100      	bne.n	8007382 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007380:	4770      	bx	lr
{
 8007382:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007384:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007386:	f7fc f8af 	bl	80034e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800738a:	bd08      	pop	{r3, pc}
 800738c:	40010400 	.word	0x40010400

08007390 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007390:	4a37      	ldr	r2, [pc, #220]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007392:	b960      	cbnz	r0, 80073ae <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007394:	6813      	ldr	r3, [r2, #0]
 8007396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800739a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800739e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073a2:	d01d      	beq.n	80073e0 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80073ac:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80073b2:	d007      	beq.n	80073c4 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80073b4:	6813      	ldr	r3, [r2, #0]
 80073b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80073be:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80073c0:	6013      	str	r3, [r2, #0]
}
 80073c2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073c4:	6813      	ldr	r3, [r2, #0]
 80073c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073ce:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073d2:	d02b      	beq.n	800742c <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80073d8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80073de:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073e8:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073ea:	4822      	ldr	r0, [pc, #136]	; (8007474 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80073ec:	4922      	ldr	r1, [pc, #136]	; (8007478 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073f6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073f8:	6803      	ldr	r3, [r0, #0]
 80073fa:	2032      	movs	r0, #50	; 0x32
 80073fc:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007400:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007402:	fba1 1303 	umull	r1, r3, r1, r3
 8007406:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007408:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800740a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800740e:	d506      	bpl.n	800741e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007410:	e000      	b.n	8007414 <HAL_PWREx_ControlVoltageScaling+0x84>
 8007412:	b123      	cbz	r3, 800741e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007414:	6951      	ldr	r1, [r2, #20]
 8007416:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007418:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800741c:	d4f9      	bmi.n	8007412 <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8007424:	bf54      	ite	pl
 8007426:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8007428:	2003      	movmi	r0, #3
 800742a:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800742c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007434:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007436:	480f      	ldr	r0, [pc, #60]	; (8007474 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007438:	490f      	ldr	r1, [pc, #60]	; (8007478 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800743a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800743e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007442:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007444:	6803      	ldr	r3, [r0, #0]
 8007446:	2032      	movs	r0, #50	; 0x32
 8007448:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800744c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800744e:	fba1 1303 	umull	r1, r3, r1, r3
 8007452:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007454:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007456:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800745a:	d5e0      	bpl.n	800741e <HAL_PWREx_ControlVoltageScaling+0x8e>
 800745c:	e001      	b.n	8007462 <HAL_PWREx_ControlVoltageScaling+0xd2>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0dd      	beq.n	800741e <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007462:	6951      	ldr	r1, [r2, #20]
 8007464:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007466:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800746a:	d5d8      	bpl.n	800741e <HAL_PWREx_ControlVoltageScaling+0x8e>
 800746c:	e7f7      	b.n	800745e <HAL_PWREx_ControlVoltageScaling+0xce>
 800746e:	bf00      	nop
 8007470:	40007000 	.word	0x40007000
 8007474:	20000008 	.word	0x20000008
 8007478:	431bde83 	.word	0x431bde83

0800747c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800747c:	4a02      	ldr	r2, [pc, #8]	; (8007488 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800747e:	6893      	ldr	r3, [r2, #8]
 8007480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007484:	6093      	str	r3, [r2, #8]
}
 8007486:	4770      	bx	lr
 8007488:	40007000 	.word	0x40007000

0800748c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800748c:	2800      	cmp	r0, #0
 800748e:	f000 81c3 	beq.w	8007818 <HAL_RCC_OscConfig+0x38c>
{
 8007492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007496:	6803      	ldr	r3, [r0, #0]
 8007498:	07d9      	lsls	r1, r3, #31
{
 800749a:	b082      	sub	sp, #8
 800749c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800749e:	d52d      	bpl.n	80074fc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074a0:	49a6      	ldr	r1, [pc, #664]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 80074a2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074a4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074a6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80074aa:	2a0c      	cmp	r2, #12
 80074ac:	f000 810a 	beq.w	80076c4 <HAL_RCC_OscConfig+0x238>
 80074b0:	2a08      	cmp	r2, #8
 80074b2:	f000 810c 	beq.w	80076ce <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	f000 8133 	beq.w	8007726 <HAL_RCC_OscConfig+0x29a>
 80074c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074c4:	f000 819b 	beq.w	80077fe <HAL_RCC_OscConfig+0x372>
 80074c8:	4d9c      	ldr	r5, [pc, #624]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 80074ca:	682a      	ldr	r2, [r5, #0]
 80074cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80074d0:	602a      	str	r2, [r5, #0]
 80074d2:	682a      	ldr	r2, [r5, #0]
 80074d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074d8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 8128 	bne.w	8007730 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e0:	f7fb fcf0 	bl	8002ec4 <HAL_GetTick>
 80074e4:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074e6:	e005      	b.n	80074f4 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074e8:	f7fb fcec 	bl	8002ec4 <HAL_GetTick>
 80074ec:	1b80      	subs	r0, r0, r6
 80074ee:	2864      	cmp	r0, #100	; 0x64
 80074f0:	f200 8142 	bhi.w	8007778 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	039f      	lsls	r7, r3, #14
 80074f8:	d4f6      	bmi.n	80074e8 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	079e      	lsls	r6, r3, #30
 80074fe:	d528      	bpl.n	8007552 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007500:	4a8e      	ldr	r2, [pc, #568]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 8007502:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007504:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007506:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800750a:	2b0c      	cmp	r3, #12
 800750c:	f000 80ec 	beq.w	80076e8 <HAL_RCC_OscConfig+0x25c>
 8007510:	2b04      	cmp	r3, #4
 8007512:	f000 80ee 	beq.w	80076f2 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007516:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007518:	4d88      	ldr	r5, [pc, #544]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 811d 	beq.w	800775a <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007526:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fb fccc 	bl	8002ec4 <HAL_GetTick>
 800752c:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800752e:	e005      	b.n	800753c <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007530:	f7fb fcc8 	bl	8002ec4 <HAL_GetTick>
 8007534:	1b80      	subs	r0, r0, r6
 8007536:	2802      	cmp	r0, #2
 8007538:	f200 811e 	bhi.w	8007778 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	0558      	lsls	r0, r3, #21
 8007540:	d5f6      	bpl.n	8007530 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007542:	686b      	ldr	r3, [r5, #4]
 8007544:	6922      	ldr	r2, [r4, #16]
 8007546:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800754a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800754e:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	071a      	lsls	r2, r3, #28
 8007554:	d519      	bpl.n	800758a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007556:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007558:	4d78      	ldr	r5, [pc, #480]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 809e 	beq.w	800769c <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8007560:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756c:	f7fb fcaa 	bl	8002ec4 <HAL_GetTick>
 8007570:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007572:	e005      	b.n	8007580 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007574:	f7fb fca6 	bl	8002ec4 <HAL_GetTick>
 8007578:	1b80      	subs	r0, r0, r6
 800757a:	2802      	cmp	r0, #2
 800757c:	f200 80fc 	bhi.w	8007778 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007580:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007584:	079f      	lsls	r7, r3, #30
 8007586:	d5f5      	bpl.n	8007574 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	0759      	lsls	r1, r3, #29
 800758c:	d541      	bpl.n	8007612 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800758e:	4b6b      	ldr	r3, [pc, #428]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 8007590:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	f100 80f4 	bmi.w	8007780 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800759a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800759e:	659a      	str	r2, [r3, #88]	; 0x58
 80075a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80075aa:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075ac:	4e64      	ldr	r6, [pc, #400]	; (8007740 <HAL_RCC_OscConfig+0x2b4>)
 80075ae:	6833      	ldr	r3, [r6, #0]
 80075b0:	05df      	lsls	r7, r3, #23
 80075b2:	f140 8113 	bpl.w	80077dc <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	f000 80e3 	beq.w	8007784 <HAL_RCC_OscConfig+0x2f8>
 80075be:	2b05      	cmp	r3, #5
 80075c0:	f000 8169 	beq.w	8007896 <HAL_RCC_OscConfig+0x40a>
 80075c4:	4e5d      	ldr	r6, [pc, #372]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 80075c6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 80075d2:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80075d6:	f022 0204 	bic.w	r2, r2, #4
 80075da:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 80d7 	bne.w	8007792 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e4:	f7fb fc6e 	bl	8002ec4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80075ec:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075ee:	e005      	b.n	80075fc <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f0:	f7fb fc68 	bl	8002ec4 <HAL_GetTick>
 80075f4:	1bc0      	subs	r0, r0, r7
 80075f6:	4540      	cmp	r0, r8
 80075f8:	f200 80be 	bhi.w	8007778 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075fc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8007600:	079a      	lsls	r2, r3, #30
 8007602:	d4f5      	bmi.n	80075f0 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007604:	b125      	cbz	r5, 8007610 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007606:	4a4d      	ldr	r2, [pc, #308]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 8007608:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800760a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800760e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	069b      	lsls	r3, r3, #26
 8007614:	d518      	bpl.n	8007648 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007616:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007618:	4d48      	ldr	r5, [pc, #288]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80ca 	beq.w	80077b4 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8007620:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762c:	f7fb fc4a 	bl	8002ec4 <HAL_GetTick>
 8007630:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007632:	e005      	b.n	8007640 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007634:	f7fb fc46 	bl	8002ec4 <HAL_GetTick>
 8007638:	1b80      	subs	r0, r0, r6
 800763a:	2802      	cmp	r0, #2
 800763c:	f200 809c 	bhi.w	8007778 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007640:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007644:	079f      	lsls	r7, r3, #30
 8007646:	d5f5      	bpl.n	8007634 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007648:	69e0      	ldr	r0, [r4, #28]
 800764a:	b318      	cbz	r0, 8007694 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800764c:	4d3b      	ldr	r5, [pc, #236]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 800764e:	68ab      	ldr	r3, [r5, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b0c      	cmp	r3, #12
 8007656:	f000 812c 	beq.w	80078b2 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800765a:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800765c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800765e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007662:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007664:	f000 80da 	beq.w	800781c <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007668:	68eb      	ldr	r3, [r5, #12]
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007670:	68eb      	ldr	r3, [r5, #12]
 8007672:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800767a:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fb fc22 	bl	8002ec4 <HAL_GetTick>
 8007680:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007682:	e004      	b.n	800768e <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007684:	f7fb fc1e 	bl	8002ec4 <HAL_GetTick>
 8007688:	1b00      	subs	r0, r0, r4
 800768a:	2802      	cmp	r0, #2
 800768c:	d874      	bhi.n	8007778 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	019b      	lsls	r3, r3, #6
 8007692:	d4f7      	bmi.n	8007684 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8007694:	2000      	movs	r0, #0
}
 8007696:	b002      	add	sp, #8
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800769c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80076a8:	f7fb fc0c 	bl	8002ec4 <HAL_GetTick>
 80076ac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076ae:	e004      	b.n	80076ba <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076b0:	f7fb fc08 	bl	8002ec4 <HAL_GetTick>
 80076b4:	1b80      	subs	r0, r0, r6
 80076b6:	2802      	cmp	r0, #2
 80076b8:	d85e      	bhi.n	8007778 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076ba:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80076be:	0798      	lsls	r0, r3, #30
 80076c0:	d4f6      	bmi.n	80076b0 <HAL_RCC_OscConfig+0x224>
 80076c2:	e761      	b.n	8007588 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076c4:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80076c8:	2903      	cmp	r1, #3
 80076ca:	f47f aef4 	bne.w	80074b6 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ce:	4a1b      	ldr	r2, [pc, #108]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 80076d0:	6812      	ldr	r2, [r2, #0]
 80076d2:	0392      	lsls	r2, r2, #14
 80076d4:	f57f af12 	bpl.w	80074fc <HAL_RCC_OscConfig+0x70>
 80076d8:	6862      	ldr	r2, [r4, #4]
 80076da:	2a00      	cmp	r2, #0
 80076dc:	f47f af0e 	bne.w	80074fc <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80076e0:	2001      	movs	r0, #1
}
 80076e2:	b002      	add	sp, #8
 80076e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076e8:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80076ec:	2a02      	cmp	r2, #2
 80076ee:	f47f af12 	bne.w	8007516 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	055d      	lsls	r5, r3, #21
 80076f8:	d502      	bpl.n	8007700 <HAL_RCC_OscConfig+0x274>
 80076fa:	68e3      	ldr	r3, [r4, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0ef      	beq.n	80076e0 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007700:	4a0e      	ldr	r2, [pc, #56]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 8007702:	6920      	ldr	r0, [r4, #16]
 8007704:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007706:	490f      	ldr	r1, [pc, #60]	; (8007744 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007708:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800770c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007710:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007712:	6808      	ldr	r0, [r1, #0]
 8007714:	f7fe f922 	bl	800595c <HAL_InitTick>
 8007718:	2800      	cmp	r0, #0
 800771a:	d1e1      	bne.n	80076e0 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	071a      	lsls	r2, r3, #28
 8007720:	f57f af33 	bpl.w	800758a <HAL_RCC_OscConfig+0xfe>
 8007724:	e717      	b.n	8007556 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007726:	4a05      	ldr	r2, [pc, #20]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
 8007728:	6813      	ldr	r3, [r2, #0]
 800772a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007730:	f7fb fbc8 	bl	8002ec4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007734:	4e01      	ldr	r6, [pc, #4]	; (800773c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8007736:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007738:	e00b      	b.n	8007752 <HAL_RCC_OscConfig+0x2c6>
 800773a:	bf00      	nop
 800773c:	40021000 	.word	0x40021000
 8007740:	40007000 	.word	0x40007000
 8007744:	20000010 	.word	0x20000010
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007748:	f7fb fbbc 	bl	8002ec4 <HAL_GetTick>
 800774c:	1b40      	subs	r0, r0, r5
 800774e:	2864      	cmp	r0, #100	; 0x64
 8007750:	d812      	bhi.n	8007778 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007752:	6833      	ldr	r3, [r6, #0]
 8007754:	039b      	lsls	r3, r3, #14
 8007756:	d5f7      	bpl.n	8007748 <HAL_RCC_OscConfig+0x2bc>
 8007758:	e6cf      	b.n	80074fa <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800775a:	682b      	ldr	r3, [r5, #0]
 800775c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007760:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007762:	f7fb fbaf 	bl	8002ec4 <HAL_GetTick>
 8007766:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	0559      	lsls	r1, r3, #21
 800776c:	d5d6      	bpl.n	800771c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800776e:	f7fb fba9 	bl	8002ec4 <HAL_GetTick>
 8007772:	1b80      	subs	r0, r0, r6
 8007774:	2802      	cmp	r0, #2
 8007776:	d9f7      	bls.n	8007768 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8007778:	2003      	movs	r0, #3
}
 800777a:	b002      	add	sp, #8
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007780:	2500      	movs	r5, #0
 8007782:	e713      	b.n	80075ac <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007784:	4a65      	ldr	r2, [pc, #404]	; (800791c <HAL_RCC_OscConfig+0x490>)
 8007786:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8007792:	f7fb fb97 	bl	8002ec4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007796:	4f61      	ldr	r7, [pc, #388]	; (800791c <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8007798:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800779a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800779e:	e004      	b.n	80077aa <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077a0:	f7fb fb90 	bl	8002ec4 <HAL_GetTick>
 80077a4:	1b80      	subs	r0, r0, r6
 80077a6:	4540      	cmp	r0, r8
 80077a8:	d8e6      	bhi.n	8007778 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077ae:	0799      	lsls	r1, r3, #30
 80077b0:	d5f6      	bpl.n	80077a0 <HAL_RCC_OscConfig+0x314>
 80077b2:	e727      	b.n	8007604 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 80077b4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 80077c0:	f7fb fb80 	bl	8002ec4 <HAL_GetTick>
 80077c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077c6:	e004      	b.n	80077d2 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077c8:	f7fb fb7c 	bl	8002ec4 <HAL_GetTick>
 80077cc:	1b80      	subs	r0, r0, r6
 80077ce:	2802      	cmp	r0, #2
 80077d0:	d8d2      	bhi.n	8007778 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077d2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80077d6:	0798      	lsls	r0, r3, #30
 80077d8:	d4f6      	bmi.n	80077c8 <HAL_RCC_OscConfig+0x33c>
 80077da:	e735      	b.n	8007648 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077dc:	6833      	ldr	r3, [r6, #0]
 80077de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80077e4:	f7fb fb6e 	bl	8002ec4 <HAL_GetTick>
 80077e8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077ea:	6833      	ldr	r3, [r6, #0]
 80077ec:	05d8      	lsls	r0, r3, #23
 80077ee:	f53f aee2 	bmi.w	80075b6 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f2:	f7fb fb67 	bl	8002ec4 <HAL_GetTick>
 80077f6:	1bc0      	subs	r0, r0, r7
 80077f8:	2802      	cmp	r0, #2
 80077fa:	d9f6      	bls.n	80077ea <HAL_RCC_OscConfig+0x35e>
 80077fc:	e7bc      	b.n	8007778 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007802:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007814:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007816:	e78b      	b.n	8007730 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007818:	2001      	movs	r0, #1
}
 800781a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800781c:	f7fb fb52 	bl	8002ec4 <HAL_GetTick>
 8007820:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007822:	e004      	b.n	800782e <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007824:	f7fb fb4e 	bl	8002ec4 <HAL_GetTick>
 8007828:	1b80      	subs	r0, r0, r6
 800782a:	2802      	cmp	r0, #2
 800782c:	d8a4      	bhi.n	8007778 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800782e:	682b      	ldr	r3, [r5, #0]
 8007830:	0199      	lsls	r1, r3, #6
 8007832:	d4f7      	bmi.n	8007824 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007834:	68e9      	ldr	r1, [r5, #12]
 8007836:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <HAL_RCC_OscConfig+0x494>)
 8007838:	6a22      	ldr	r2, [r4, #32]
 800783a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800783c:	4e37      	ldr	r6, [pc, #220]	; (800791c <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800783e:	400b      	ands	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8007846:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800784a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800784e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8007852:	3801      	subs	r0, #1
 8007854:	0849      	lsrs	r1, r1, #1
 8007856:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800785a:	3901      	subs	r1, #1
 800785c:	0852      	lsrs	r2, r2, #1
 800785e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007862:	3a01      	subs	r2, #1
 8007864:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007868:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800786a:	682b      	ldr	r3, [r5, #0]
 800786c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007870:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007872:	68eb      	ldr	r3, [r5, #12]
 8007874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007878:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800787a:	f7fb fb23 	bl	8002ec4 <HAL_GetTick>
 800787e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007880:	e005      	b.n	800788e <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007882:	f7fb fb1f 	bl	8002ec4 <HAL_GetTick>
 8007886:	1b00      	subs	r0, r0, r4
 8007888:	2802      	cmp	r0, #2
 800788a:	f63f af75 	bhi.w	8007778 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800788e:	6833      	ldr	r3, [r6, #0]
 8007890:	019a      	lsls	r2, r3, #6
 8007892:	d5f6      	bpl.n	8007882 <HAL_RCC_OscConfig+0x3f6>
 8007894:	e6fe      	b.n	8007694 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007896:	4b21      	ldr	r3, [pc, #132]	; (800791c <HAL_RCC_OscConfig+0x490>)
 8007898:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800789c:	f042 0204 	orr.w	r2, r2, #4
 80078a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80078a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078b0:	e76f      	b.n	8007792 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078b2:	2801      	cmp	r0, #1
 80078b4:	f43f aeef 	beq.w	8007696 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80078b8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ba:	6a22      	ldr	r2, [r4, #32]
 80078bc:	f003 0103 	and.w	r1, r3, #3
 80078c0:	4291      	cmp	r1, r2
 80078c2:	f47f af0d 	bne.w	80076e0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80078c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80078c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078cc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ce:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80078d2:	f47f af05 	bne.w	80076e0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80078d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80078d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80078dc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80078e0:	f47f aefe 	bne.w	80076e0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80078e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80078e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80078ea:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80078ee:	f47f aef7 	bne.w	80076e0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80078f4:	0852      	lsrs	r2, r2, #1
 80078f6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80078fa:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80078fc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007900:	f47f aeee 	bne.w	80076e0 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007904:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007906:	0852      	lsrs	r2, r2, #1
 8007908:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800790c:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800790e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007912:	bf14      	ite	ne
 8007914:	2001      	movne	r0, #1
 8007916:	2000      	moveq	r0, #0
 8007918:	e6bd      	b.n	8007696 <HAL_RCC_OscConfig+0x20a>
 800791a:	bf00      	nop
 800791c:	40021000 	.word	0x40021000
 8007920:	019f800c 	.word	0x019f800c

08007924 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007924:	4b18      	ldr	r3, [pc, #96]	; (8007988 <HAL_RCC_GetSysClockFreq+0x64>)
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	f002 020c 	and.w	r2, r2, #12
 800792c:	2a04      	cmp	r2, #4
 800792e:	d026      	beq.n	800797e <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	f002 020c 	and.w	r2, r2, #12
 8007936:	2a08      	cmp	r2, #8
 8007938:	d023      	beq.n	8007982 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	f002 020c 	and.w	r2, r2, #12
 8007940:	2a0c      	cmp	r2, #12
 8007942:	d001      	beq.n	8007948 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007944:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007946:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007948:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800794a:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800794c:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800794e:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007952:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007954:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007958:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800795c:	bf0c      	ite	eq
 800795e:	4b0b      	ldreq	r3, [pc, #44]	; (800798c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007960:	4b0b      	ldrne	r3, [pc, #44]	; (8007990 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007962:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007964:	fbb3 f3f2 	udiv	r3, r3, r2
 8007968:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800796c:	4b06      	ldr	r3, [pc, #24]	; (8007988 <HAL_RCC_GetSysClockFreq+0x64>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007974:	3301      	adds	r3, #1
 8007976:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007978:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800797c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800797e:	4804      	ldr	r0, [pc, #16]	; (8007990 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007980:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007982:	4802      	ldr	r0, [pc, #8]	; (800798c <HAL_RCC_GetSysClockFreq+0x68>)
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40021000 	.word	0x40021000
 800798c:	007a1200 	.word	0x007a1200
 8007990:	00f42400 	.word	0x00f42400

08007994 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007994:	2800      	cmp	r0, #0
 8007996:	f000 80ee 	beq.w	8007b76 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800799a:	4a78      	ldr	r2, [pc, #480]	; (8007b7c <HAL_RCC_ClockConfig+0x1e8>)
{
 800799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079a0:	6813      	ldr	r3, [r2, #0]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	428b      	cmp	r3, r1
 80079a8:	460d      	mov	r5, r1
 80079aa:	4604      	mov	r4, r0
 80079ac:	d20c      	bcs.n	80079c8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ae:	6813      	ldr	r3, [r2, #0]
 80079b0:	f023 030f 	bic.w	r3, r3, #15
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b8:	6813      	ldr	r3, [r2, #0]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	428b      	cmp	r3, r1
 80079c0:	d002      	beq.n	80079c8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80079c2:	2001      	movs	r0, #1
}
 80079c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	07df      	lsls	r7, r3, #31
 80079cc:	d569      	bpl.n	8007aa2 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ce:	6867      	ldr	r7, [r4, #4]
 80079d0:	2f03      	cmp	r7, #3
 80079d2:	f000 80a0 	beq.w	8007b16 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079d6:	4b6a      	ldr	r3, [pc, #424]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079d8:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079da:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079dc:	f000 8097 	beq.w	8007b0e <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079e0:	055b      	lsls	r3, r3, #21
 80079e2:	d5ee      	bpl.n	80079c2 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80079e4:	f7ff ff9e 	bl	8007924 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80079e8:	4b66      	ldr	r3, [pc, #408]	; (8007b84 <HAL_RCC_ClockConfig+0x1f0>)
 80079ea:	4298      	cmp	r0, r3
 80079ec:	f240 80c0 	bls.w	8007b70 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80079f0:	4a63      	ldr	r2, [pc, #396]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 80079f2:	6893      	ldr	r3, [r2, #8]
 80079f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80079fe:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a02:	4e5f      	ldr	r6, [pc, #380]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007a04:	68b3      	ldr	r3, [r6, #8]
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	433b      	orrs	r3, r7
 8007a0c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007a0e:	f7fb fa59 	bl	8002ec4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a12:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007a16:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a18:	e004      	b.n	8007a24 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a1a:	f7fb fa53 	bl	8002ec4 <HAL_GetTick>
 8007a1e:	1bc0      	subs	r0, r0, r7
 8007a20:	4540      	cmp	r0, r8
 8007a22:	d871      	bhi.n	8007b08 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a24:	68b3      	ldr	r3, [r6, #8]
 8007a26:	6862      	ldr	r2, [r4, #4]
 8007a28:	f003 030c 	and.w	r3, r3, #12
 8007a2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007a30:	d1f3      	bne.n	8007a1a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	079f      	lsls	r7, r3, #30
 8007a36:	d436      	bmi.n	8007aa6 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007a3e:	68b3      	ldr	r3, [r6, #8]
 8007a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a44:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a46:	4e4d      	ldr	r6, [pc, #308]	; (8007b7c <HAL_RCC_ClockConfig+0x1e8>)
 8007a48:	6833      	ldr	r3, [r6, #0]
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	42ab      	cmp	r3, r5
 8007a50:	d846      	bhi.n	8007ae0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	075a      	lsls	r2, r3, #29
 8007a56:	d506      	bpl.n	8007a66 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a58:	4949      	ldr	r1, [pc, #292]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007a5a:	68e0      	ldr	r0, [r4, #12]
 8007a5c:	688a      	ldr	r2, [r1, #8]
 8007a5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a62:	4302      	orrs	r2, r0
 8007a64:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a66:	071b      	lsls	r3, r3, #28
 8007a68:	d507      	bpl.n	8007a7a <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a6a:	4a45      	ldr	r2, [pc, #276]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007a6c:	6921      	ldr	r1, [r4, #16]
 8007a6e:	6893      	ldr	r3, [r2, #8]
 8007a70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007a74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007a78:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a7a:	f7ff ff53 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 8007a7e:	4a40      	ldr	r2, [pc, #256]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007a80:	4c41      	ldr	r4, [pc, #260]	; (8007b88 <HAL_RCC_ClockConfig+0x1f4>)
 8007a82:	6892      	ldr	r2, [r2, #8]
 8007a84:	4941      	ldr	r1, [pc, #260]	; (8007b8c <HAL_RCC_ClockConfig+0x1f8>)
 8007a86:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007a8e:	4840      	ldr	r0, [pc, #256]	; (8007b90 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a90:	f002 021f 	and.w	r2, r2, #31
 8007a94:	40d3      	lsrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007a98:	6800      	ldr	r0, [r0, #0]
}
 8007a9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007a9e:	f7fd bf5d 	b.w	800595c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa2:	079e      	lsls	r6, r3, #30
 8007aa4:	d5cf      	bpl.n	8007a46 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa6:	0758      	lsls	r0, r3, #29
 8007aa8:	d504      	bpl.n	8007ab4 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007aaa:	4935      	ldr	r1, [pc, #212]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007aac:	688a      	ldr	r2, [r1, #8]
 8007aae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007ab2:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab4:	0719      	lsls	r1, r3, #28
 8007ab6:	d506      	bpl.n	8007ac6 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007ab8:	4a31      	ldr	r2, [pc, #196]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007aba:	6893      	ldr	r3, [r2, #8]
 8007abc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ac0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007ac4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ac6:	4a2e      	ldr	r2, [pc, #184]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007ac8:	68a1      	ldr	r1, [r4, #8]
 8007aca:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007acc:	4e2b      	ldr	r6, [pc, #172]	; (8007b7c <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ad6:	6833      	ldr	r3, [r6, #0]
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	d9b8      	bls.n	8007a52 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ae0:	6833      	ldr	r3, [r6, #0]
 8007ae2:	f023 030f 	bic.w	r3, r3, #15
 8007ae6:	432b      	orrs	r3, r5
 8007ae8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007aea:	f7fb f9eb 	bl	8002ec4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007af2:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007af4:	6833      	ldr	r3, [r6, #0]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	42ab      	cmp	r3, r5
 8007afc:	d0a9      	beq.n	8007a52 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007afe:	f7fb f9e1 	bl	8002ec4 <HAL_GetTick>
 8007b02:	1bc0      	subs	r0, r0, r7
 8007b04:	4540      	cmp	r0, r8
 8007b06:	d9f5      	bls.n	8007af4 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007b08:	2003      	movs	r0, #3
}
 8007b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b0e:	039a      	lsls	r2, r3, #14
 8007b10:	f53f af68 	bmi.w	80079e4 <HAL_RCC_ClockConfig+0x50>
 8007b14:	e755      	b.n	80079c2 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b16:	4a1a      	ldr	r2, [pc, #104]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
 8007b18:	6811      	ldr	r1, [r2, #0]
 8007b1a:	0188      	lsls	r0, r1, #6
 8007b1c:	f57f af51 	bpl.w	80079c2 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b20:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b22:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b24:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8007b26:	4e17      	ldr	r6, [pc, #92]	; (8007b84 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b28:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8007b2c:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b2e:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b32:	bf0c      	ite	eq
 8007b34:	4817      	ldreq	r0, [pc, #92]	; (8007b94 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b36:	4818      	ldrne	r0, [pc, #96]	; (8007b98 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b38:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b3a:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b3e:	4810      	ldr	r0, [pc, #64]	; (8007b80 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b40:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007b44:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b48:	68c1      	ldr	r1, [r0, #12]
 8007b4a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007b4e:	3101      	adds	r1, #1
 8007b50:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007b52:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007b56:	42b2      	cmp	r2, r6
 8007b58:	d90a      	bls.n	8007b70 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b5a:	6882      	ldr	r2, [r0, #8]
 8007b5c:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007b60:	f43f af46 	beq.w	80079f0 <HAL_RCC_ClockConfig+0x5c>
 8007b64:	0799      	lsls	r1, r3, #30
 8007b66:	d503      	bpl.n	8007b70 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b68:	68a3      	ldr	r3, [r4, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f43f af40 	beq.w	80079f0 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b70:	f04f 0900 	mov.w	r9, #0
 8007b74:	e745      	b.n	8007a02 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8007b76:	2001      	movs	r0, #1
}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40022000 	.word	0x40022000
 8007b80:	40021000 	.word	0x40021000
 8007b84:	04c4b400 	.word	0x04c4b400
 8007b88:	0800cd70 	.word	0x0800cd70
 8007b8c:	20000008 	.word	0x20000008
 8007b90:	20000010 	.word	0x20000010
 8007b94:	007a1200 	.word	0x007a1200
 8007b98:	00f42400 	.word	0x00f42400

08007b9c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007b9e:	4a06      	ldr	r2, [pc, #24]	; (8007bb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007ba2:	4906      	ldr	r1, [pc, #24]	; (8007bbc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ba4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007ba8:	6808      	ldr	r0, [r1, #0]
 8007baa:	5cd3      	ldrb	r3, [r2, r3]
 8007bac:	f003 031f 	and.w	r3, r3, #31
}
 8007bb0:	40d8      	lsrs	r0, r3
 8007bb2:	4770      	bx	lr
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	0800cd80 	.word	0x0800cd80
 8007bbc:	20000008 	.word	0x20000008

08007bc0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007bc2:	4a06      	ldr	r2, [pc, #24]	; (8007bdc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007bc6:	4906      	ldr	r1, [pc, #24]	; (8007be0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007bc8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007bcc:	6808      	ldr	r0, [r1, #0]
 8007bce:	5cd3      	ldrb	r3, [r2, r3]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
}
 8007bd4:	40d8      	lsrs	r0, r3
 8007bd6:	4770      	bx	lr
 8007bd8:	40021000 	.word	0x40021000
 8007bdc:	0800cd80 	.word	0x0800cd80
 8007be0:	20000008 	.word	0x20000008

08007be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007be8:	6803      	ldr	r3, [r0, #0]
{
 8007bea:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bec:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007bf0:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bf2:	d056      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bf4:	4bac      	ldr	r3, [pc, #688]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bf8:	00d5      	lsls	r5, r2, #3
 8007bfa:	f140 813e 	bpl.w	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8007bfe:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c00:	4daa      	ldr	r5, [pc, #680]	; (8007eac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c08:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c0a:	f7fb f95b 	bl	8002ec4 <HAL_GetTick>
 8007c0e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c10:	e005      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c12:	f7fb f957 	bl	8002ec4 <HAL_GetTick>
 8007c16:	1b83      	subs	r3, r0, r6
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	f200 8139 	bhi.w	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	05d8      	lsls	r0, r3, #23
 8007c22:	d5f6      	bpl.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c24:	4da0      	ldr	r5, [pc, #640]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c26:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c2a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007c2e:	d027      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007c30:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d025      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c36:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c3a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c42:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c46:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c4e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c52:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c56:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8007c58:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c5c:	f140 8148 	bpl.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c60:	f7fb f930 	bl	8002ec4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c64:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007c68:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c6a:	e005      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c6c:	f7fb f92a 	bl	8002ec4 <HAL_GetTick>
 8007c70:	1b80      	subs	r0, r0, r6
 8007c72:	4540      	cmp	r0, r8
 8007c74:	f200 810c 	bhi.w	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c78:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007c7c:	079b      	lsls	r3, r3, #30
 8007c7e:	d5f5      	bpl.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c80:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c82:	4989      	ldr	r1, [pc, #548]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c84:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007c88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c92:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c94:	b127      	cbz	r7, 8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c96:	4a84      	ldr	r2, [pc, #528]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c98:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	07dd      	lsls	r5, r3, #31
 8007ca4:	d508      	bpl.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ca6:	4980      	ldr	r1, [pc, #512]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ca8:	6865      	ldr	r5, [r4, #4]
 8007caa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007cae:	f022 0203 	bic.w	r2, r2, #3
 8007cb2:	432a      	orrs	r2, r5
 8007cb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cb8:	0799      	lsls	r1, r3, #30
 8007cba:	d508      	bpl.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cbc:	497a      	ldr	r1, [pc, #488]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cbe:	68a5      	ldr	r5, [r4, #8]
 8007cc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007cc4:	f022 020c 	bic.w	r2, r2, #12
 8007cc8:	432a      	orrs	r2, r5
 8007cca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cce:	075a      	lsls	r2, r3, #29
 8007cd0:	d508      	bpl.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cd2:	4975      	ldr	r1, [pc, #468]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cd4:	68e5      	ldr	r5, [r4, #12]
 8007cd6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007cda:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007cde:	432a      	orrs	r2, r5
 8007ce0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ce4:	071f      	lsls	r7, r3, #28
 8007ce6:	d508      	bpl.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ce8:	496f      	ldr	r1, [pc, #444]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cea:	6925      	ldr	r5, [r4, #16]
 8007cec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007cf0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007cf4:	432a      	orrs	r2, r5
 8007cf6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cfa:	06de      	lsls	r6, r3, #27
 8007cfc:	d508      	bpl.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cfe:	496a      	ldr	r1, [pc, #424]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d00:	6965      	ldr	r5, [r4, #20]
 8007d02:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007d0a:	432a      	orrs	r2, r5
 8007d0c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d10:	069d      	lsls	r5, r3, #26
 8007d12:	d508      	bpl.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d14:	4964      	ldr	r1, [pc, #400]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d16:	69a5      	ldr	r5, [r4, #24]
 8007d18:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d20:	432a      	orrs	r2, r5
 8007d22:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d26:	0659      	lsls	r1, r3, #25
 8007d28:	d508      	bpl.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d2a:	495f      	ldr	r1, [pc, #380]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d2c:	69e5      	ldr	r5, [r4, #28]
 8007d2e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d32:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007d36:	432a      	orrs	r2, r5
 8007d38:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d3c:	061a      	lsls	r2, r3, #24
 8007d3e:	d508      	bpl.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d40:	4959      	ldr	r1, [pc, #356]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d42:	6a25      	ldr	r5, [r4, #32]
 8007d44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d48:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007d4c:	432a      	orrs	r2, r5
 8007d4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d52:	05df      	lsls	r7, r3, #23
 8007d54:	d508      	bpl.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d56:	4954      	ldr	r1, [pc, #336]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007d5a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d5e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007d62:	432a      	orrs	r2, r5
 8007d64:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d68:	039e      	lsls	r6, r3, #14
 8007d6a:	d508      	bpl.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d6c:	494e      	ldr	r1, [pc, #312]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d6e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007d70:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8007d74:	f022 0203 	bic.w	r2, r2, #3
 8007d78:	432a      	orrs	r2, r5
 8007d7a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d7e:	059d      	lsls	r5, r3, #22
 8007d80:	d508      	bpl.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d82:	4949      	ldr	r1, [pc, #292]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d84:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007d86:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d8a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007d8e:	432a      	orrs	r2, r5
 8007d90:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d94:	0559      	lsls	r1, r3, #21
 8007d96:	d50b      	bpl.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d98:	4943      	ldr	r1, [pc, #268]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007d9c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007da0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007da4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007da6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007daa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007dae:	d071      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007db0:	051a      	lsls	r2, r3, #20
 8007db2:	d50b      	bpl.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007db4:	493c      	ldr	r1, [pc, #240]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007db6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007db8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007dbc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007dc0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007dc2:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007dc6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007dca:	d068      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007dcc:	04df      	lsls	r7, r3, #19
 8007dce:	d50b      	bpl.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007dd0:	4935      	ldr	r1, [pc, #212]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007dd2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007dd4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007dd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007ddc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007dde:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007de2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007de6:	d063      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007de8:	049e      	lsls	r6, r3, #18
 8007dea:	d50b      	bpl.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dec:	492e      	ldr	r1, [pc, #184]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007dee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007df0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007df4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007df8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dfa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dfe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e02:	d05a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e04:	045d      	lsls	r5, r3, #17
 8007e06:	d50b      	bpl.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e08:	4927      	ldr	r1, [pc, #156]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007e0a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007e0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e10:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007e14:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e16:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e1e:	d051      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e20:	0419      	lsls	r1, r3, #16
 8007e22:	d50b      	bpl.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e24:	4920      	ldr	r1, [pc, #128]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007e26:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007e28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e30:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e32:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e36:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e3a:	d048      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e3c:	03da      	lsls	r2, r3, #15
 8007e3e:	d50b      	bpl.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e40:	4919      	ldr	r1, [pc, #100]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007e42:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8007e44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007e48:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007e4c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e4e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e56:	d03f      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e58:	035b      	lsls	r3, r3, #13
 8007e5a:	d50b      	bpl.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e5c:	4a12      	ldr	r2, [pc, #72]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007e5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007e60:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007e64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e68:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e6a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007e72:	d036      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8007e74:	b002      	add	sp, #8
 8007e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e80:	659a      	str	r2, [r3, #88]	; 0x58
 8007e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007e8c:	2701      	movs	r7, #1
 8007e8e:	e6b7      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8007e90:	2003      	movs	r0, #3
 8007e92:	e6ff      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e94:	68ca      	ldr	r2, [r1, #12]
 8007e96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007e9a:	60ca      	str	r2, [r1, #12]
 8007e9c:	e788      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e9e:	68ca      	ldr	r2, [r1, #12]
 8007ea0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ea4:	60ca      	str	r2, [r1, #12]
 8007ea6:	e791      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007eb0:	68ca      	ldr	r2, [r1, #12]
 8007eb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007eb6:	60ca      	str	r2, [r1, #12]
 8007eb8:	e796      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007eba:	68ca      	ldr	r2, [r1, #12]
 8007ebc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ec0:	60ca      	str	r2, [r1, #12]
 8007ec2:	e79f      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ec4:	68ca      	ldr	r2, [r1, #12]
 8007ec6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007eca:	60ca      	str	r2, [r1, #12]
 8007ecc:	e7a8      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ece:	68ca      	ldr	r2, [r1, #12]
 8007ed0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ed4:	60ca      	str	r2, [r1, #12]
 8007ed6:	e7b1      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ed8:	68ca      	ldr	r2, [r1, #12]
 8007eda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ede:	60ca      	str	r2, [r1, #12]
 8007ee0:	e7ba      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ee2:	68d3      	ldr	r3, [r2, #12]
 8007ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ee8:	60d3      	str	r3, [r2, #12]
}
 8007eea:	b002      	add	sp, #8
 8007eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	e6c6      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x9e>

08007ef4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef8:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007efa:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007efc:	4617      	mov	r7, r2
 8007efe:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8007f00:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007f04:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f06:	f7fa ffdd 	bl	8002ec4 <HAL_GetTick>
 8007f0a:	442f      	add	r7, r5
 8007f0c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8007f0e:	f7fa ffd9 	bl	8002ec4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f12:	4b31      	ldr	r3, [pc, #196]	; (8007fd8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f14:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f20:	0d1b      	lsrs	r3, r3, #20
 8007f22:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8007f26:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f28:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	1c69      	adds	r1, r5, #1
 8007f2e:	6893      	ldr	r3, [r2, #8]
 8007f30:	d110      	bne.n	8007f54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 8007f32:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007f36:	d009      	beq.n	8007f4c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f38:	7b23      	ldrb	r3, [r4, #12]
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007f40:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f44:	6893      	ldr	r3, [r2, #8]
 8007f46:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007f4a:	d1f5      	bne.n	8007f38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8007f4c:	2000      	movs	r0, #0
}
 8007f4e:	b002      	add	sp, #8
 8007f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007f54:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007f58:	d0f8      	beq.n	8007f4c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8007f5a:	7b23      	ldrb	r3, [r4, #12]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8007f62:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f66:	f7fa ffad 	bl	8002ec4 <HAL_GetTick>
 8007f6a:	eba0 0008 	sub.w	r0, r0, r8
 8007f6e:	42b8      	cmp	r0, r7
 8007f70:	d209      	bcs.n	8007f86 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 8007f72:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f74:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8007f76:	2b00      	cmp	r3, #0
      count--;
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007f7e:	bf08      	it	eq
 8007f80:	2700      	moveq	r7, #0
      count--;
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	e7d2      	b.n	8007f2c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f86:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f8a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f8c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f94:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f96:	d013      	beq.n	8007fc0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f98:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007f9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007f9e:	d107      	bne.n	8007fb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fae:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007fb0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007fb2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007fb4:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007fb8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007fbc:	2003      	movs	r0, #3
 8007fbe:	e7c6      	b.n	8007f4e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fc0:	68b2      	ldr	r2, [r6, #8]
 8007fc2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007fc6:	d002      	beq.n	8007fce <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fc8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007fcc:	d1e4      	bne.n	8007f98 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	e7df      	b.n	8007f98 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8007fd8:	20000008 	.word	0x20000008

08007fdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f88d 3007 	strb.w	r3, [sp, #7]
 8007fe8:	eb01 0902 	add.w	r9, r1, r2
{
 8007fec:	460e      	mov	r6, r1
 8007fee:	4617      	mov	r7, r2
 8007ff0:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ff2:	f7fa ff67 	bl	8002ec4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ff6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008118 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ffa:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007ffe:	f7fa ff61 	bl	8002ec4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008002:	f8d8 3000 	ldr.w	r3, [r8]
 8008006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800800a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800800e:	0d1b      	lsrs	r3, r3, #20
 8008010:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 8008014:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008016:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8008018:	1c70      	adds	r0, r6, #1
 800801a:	682c      	ldr	r4, [r5, #0]
 800801c:	d120      	bne.n	8008060 <SPI_EndRxTxTransaction+0x84>
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008024:	d1fb      	bne.n	800801e <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008026:	f7fa ff4d 	bl	8002ec4 <HAL_GetTick>
 800802a:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 800802e:	f7fa ff49 	bl	8002ec4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008032:	f8d8 3000 	ldr.w	r3, [r8]
 8008036:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800803a:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 800803e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008040:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008042:	1c71      	adds	r1, r6, #1
 8008044:	682c      	ldr	r4, [r5, #0]
 8008046:	d11f      	bne.n	8008088 <SPI_EndRxTxTransaction+0xac>
 8008048:	68a3      	ldr	r3, [r4, #8]
 800804a:	061a      	lsls	r2, r3, #24
 800804c:	d4fc      	bmi.n	8008048 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800804e:	463a      	mov	r2, r7
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	f7ff ff4e 	bl	8007ef4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008058:	bb48      	cbnz	r0, 80080ae <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800805a:	b005      	add	sp, #20
 800805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8008060:	68a3      	ldr	r3, [r4, #8]
 8008062:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008066:	d0de      	beq.n	8008026 <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008068:	f7fa ff2c 	bl	8002ec4 <HAL_GetTick>
 800806c:	eba0 000b 	sub.w	r0, r0, fp
 8008070:	4550      	cmp	r0, sl
 8008072:	d222      	bcs.n	80080ba <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8008074:	9a02      	ldr	r2, [sp, #8]
      count--;
 8008076:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8008078:	2a00      	cmp	r2, #0
      count--;
 800807a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800807e:	bf08      	it	eq
 8008080:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8008084:	9302      	str	r3, [sp, #8]
 8008086:	e7c7      	b.n	8008018 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	061b      	lsls	r3, r3, #24
 800808c:	d5df      	bpl.n	800804e <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800808e:	f7fa ff19 	bl	8002ec4 <HAL_GetTick>
 8008092:	eba0 0008 	sub.w	r0, r0, r8
 8008096:	4548      	cmp	r0, r9
 8008098:	d20f      	bcs.n	80080ba <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 800809a:	9a03      	ldr	r2, [sp, #12]
      count--;
 800809c:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800809e:	2a00      	cmp	r2, #0
      count--;
 80080a0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80080a4:	bf08      	it	eq
 80080a6:	f04f 0900 	moveq.w	r9, #0
      count--;
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	e7c9      	b.n	8008042 <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ae:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80080b0:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80080b4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b6:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 80080b8:	e7cf      	b.n	800805a <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ba:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080be:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080c8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ca:	d019      	beq.n	8008100 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80080ce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80080d2:	d107      	bne.n	80080e4 <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080e2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80080e4:	2301      	movs	r3, #1
 80080e6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ea:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80080ec:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ee:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80080f2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80080f4:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f8:	662b      	str	r3, [r5, #96]	; 0x60
}
 80080fa:	b005      	add	sp, #20
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008100:	68aa      	ldr	r2, [r5, #8]
 8008102:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008106:	d002      	beq.n	800810e <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008108:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800810c:	d1de      	bne.n	80080cc <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e7d9      	b.n	80080cc <SPI_EndRxTxTransaction+0xf0>
 8008118:	20000008 	.word	0x20000008

0800811c <HAL_SPI_Init>:
  if (hspi == NULL)
 800811c:	2800      	cmp	r0, #0
 800811e:	d077      	beq.n	8008210 <HAL_SPI_Init+0xf4>
{
 8008120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008124:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008126:	4604      	mov	r4, r0
 8008128:	2e00      	cmp	r6, #0
 800812a:	d058      	beq.n	80081de <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800812c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800812e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008132:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008136:	2200      	movs	r2, #0
 8008138:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800813a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800813e:	2b00      	cmp	r3, #0
 8008140:	d059      	beq.n	80081f6 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8008142:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008144:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008146:	2302      	movs	r3, #2
 8008148:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800814c:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800814e:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8008152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008156:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008158:	d947      	bls.n	80081ea <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800815a:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 800815e:	d159      	bne.n	8008214 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008160:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008162:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008164:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8008168:	6862      	ldr	r2, [r4, #4]
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8008170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008174:	431a      	orrs	r2, r3
 8008176:	6923      	ldr	r3, [r4, #16]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	4313      	orrs	r3, r2
 800817e:	6962      	ldr	r2, [r4, #20]
 8008180:	f002 0201 	and.w	r2, r2, #1
 8008184:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008188:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008194:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008196:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800819a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 800819e:	69a6      	ldr	r6, [r4, #24]
 80081a0:	6a23      	ldr	r3, [r4, #32]
 80081a2:	f003 0780 	and.w	r7, r3, #128	; 0x80
 80081a6:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80081aa:	4313      	orrs	r3, r2
 80081ac:	ea43 0308 	orr.w	r3, r3, r8
 80081b0:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081b2:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081b4:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081b6:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081ba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081bc:	ea4e 0306 	orr.w	r3, lr, r6
 80081c0:	ea43 030c 	orr.w	r3, r3, ip
 80081c4:	4303      	orrs	r3, r0
 80081c6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081c8:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ca:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80081d0:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081d2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081d4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081d6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 80081da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081de:	6843      	ldr	r3, [r0, #4]
 80081e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081e4:	d0a5      	beq.n	8008132 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081e6:	61c6      	str	r6, [r0, #28]
 80081e8:	e7a3      	b.n	8008132 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081ea:	d00b      	beq.n	8008204 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80081ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081f0:	2500      	movs	r5, #0
 80081f2:	62a5      	str	r5, [r4, #40]	; 0x28
 80081f4:	e7b8      	b.n	8008168 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 80081f6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7fc ff94 	bl	8005128 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008200:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008202:	e79e      	b.n	8008142 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008204:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008206:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800820a:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 800820e:	e7ab      	b.n	8008168 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8008210:	2001      	movs	r0, #1
}
 8008212:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008214:	2000      	movs	r0, #0
 8008216:	e7eb      	b.n	80081f0 <HAL_SPI_Init+0xd4>

08008218 <HAL_SPI_TransmitReceive>:
{
 8008218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800821c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800821e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8008222:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8008224:	2801      	cmp	r0, #1
 8008226:	f000 8097 	beq.w	8008358 <HAL_SPI_TransmitReceive+0x140>
 800822a:	461f      	mov	r7, r3
 800822c:	2301      	movs	r3, #1
 800822e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008232:	4689      	mov	r9, r1
 8008234:	4690      	mov	r8, r2
 8008236:	f7fa fe45 	bl	8002ec4 <HAL_GetTick>
 800823a:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 800823c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8008240:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008242:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8008244:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008246:	d010      	beq.n	800826a <HAL_SPI_TransmitReceive+0x52>
 8008248:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800824c:	d008      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800824e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008250:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8008252:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8008254:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008258:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800825c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008260:	68a2      	ldr	r2, [r4, #8]
 8008262:	2a00      	cmp	r2, #0
 8008264:	d1f3      	bne.n	800824e <HAL_SPI_TransmitReceive+0x36>
 8008266:	2904      	cmp	r1, #4
 8008268:	d1f1      	bne.n	800824e <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800826a:	f1b9 0f00 	cmp.w	r9, #0
 800826e:	d076      	beq.n	800835e <HAL_SPI_TransmitReceive+0x146>
 8008270:	f1b8 0f00 	cmp.w	r8, #0
 8008274:	d073      	beq.n	800835e <HAL_SPI_TransmitReceive+0x146>
 8008276:	2f00      	cmp	r7, #0
 8008278:	d071      	beq.n	800835e <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800827a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800827e:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008280:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008284:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008286:	bf1c      	itt	ne
 8008288:	2205      	movne	r2, #5
 800828a:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800828e:	2200      	movs	r2, #0
 8008290:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8008292:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008296:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8008298:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800829c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 80082a0:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082a2:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 80082a4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082a8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80082ac:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80082ae:	d858      	bhi.n	8008362 <HAL_SPI_TransmitReceive+0x14a>
 80082b0:	2f01      	cmp	r7, #1
 80082b2:	f000 8124 	beq.w	80084fe <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082b6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80082ba:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082bc:	6811      	ldr	r1, [r2, #0]
 80082be:	0649      	lsls	r1, r1, #25
 80082c0:	f100 80e3 	bmi.w	800848a <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 80082c4:	6811      	ldr	r1, [r2, #0]
 80082c6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80082ca:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80df 	beq.w	8008490 <HAL_SPI_TransmitReceive+0x278>
 80082d2:	2f01      	cmp	r7, #1
 80082d4:	f000 80dc 	beq.w	8008490 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 80082d8:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082dc:	b29b      	uxth	r3, r3
 80082de:	b92b      	cbnz	r3, 80082ec <HAL_SPI_TransmitReceive+0xd4>
 80082e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 8086 	beq.w	80083f8 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	6893      	ldr	r3, [r2, #8]
 80082f0:	0799      	lsls	r1, r3, #30
 80082f2:	d505      	bpl.n	8008300 <HAL_SPI_TransmitReceive+0xe8>
 80082f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	b113      	cbz	r3, 8008300 <HAL_SPI_TransmitReceive+0xe8>
 80082fa:	2f00      	cmp	r7, #0
 80082fc:	f040 80e4 	bne.w	80084c8 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008300:	6893      	ldr	r3, [r2, #8]
 8008302:	f013 0301 	ands.w	r3, r3, #1
 8008306:	d01e      	beq.n	8008346 <HAL_SPI_TransmitReceive+0x12e>
 8008308:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800830c:	b289      	uxth	r1, r1
 800830e:	b1d1      	cbz	r1, 8008346 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8008310:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008314:	b289      	uxth	r1, r1
 8008316:	2901      	cmp	r1, #1
 8008318:	f240 80c8 	bls.w	80084ac <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800831c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800831e:	68d0      	ldr	r0, [r2, #12]
 8008320:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008324:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008326:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800832a:	3902      	subs	r1, #2
 800832c:	b289      	uxth	r1, r1
 800832e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008332:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008336:	b289      	uxth	r1, r1
 8008338:	2901      	cmp	r1, #1
        txallowed = 1U;
 800833a:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 800833c:	d803      	bhi.n	8008346 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800833e:	6853      	ldr	r3, [r2, #4]
 8008340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008344:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008346:	f7fa fdbd 	bl	8002ec4 <HAL_GetTick>
 800834a:	1b43      	subs	r3, r0, r5
 800834c:	42b3      	cmp	r3, r6
 800834e:	d3c4      	bcc.n	80082da <HAL_SPI_TransmitReceive+0xc2>
 8008350:	1c73      	adds	r3, r6, #1
 8008352:	d0c2      	beq.n	80082da <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8008354:	2003      	movs	r0, #3
 8008356:	e77b      	b.n	8008250 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8008358:	2002      	movs	r0, #2
}
 800835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 800835e:	2001      	movs	r0, #1
 8008360:	e776      	b.n	8008250 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008362:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008366:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008368:	6811      	ldr	r1, [r2, #0]
 800836a:	0648      	lsls	r0, r1, #25
 800836c:	d403      	bmi.n	8008376 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 800836e:	6811      	ldr	r1, [r2, #0]
 8008370:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008374:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008376:	2b00      	cmp	r3, #0
 8008378:	d161      	bne.n	800843e <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800837a:	4649      	mov	r1, r9
 800837c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008380:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8008382:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008384:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008386:	3b01      	subs	r3, #1
 8008388:	b29b      	uxth	r3, r3
 800838a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800838c:	1c72      	adds	r2, r6, #1
{
 800838e:	f04f 0701 	mov.w	r7, #1
 8008392:	d028      	beq.n	80083e6 <HAL_SPI_TransmitReceive+0x1ce>
 8008394:	e04e      	b.n	8008434 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	6893      	ldr	r3, [r2, #8]
 800839a:	079b      	lsls	r3, r3, #30
 800839c:	d50d      	bpl.n	80083ba <HAL_SPI_TransmitReceive+0x1a2>
 800839e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	b153      	cbz	r3, 80083ba <HAL_SPI_TransmitReceive+0x1a2>
 80083a4:	b14f      	cbz	r7, 80083ba <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083a8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80083ac:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80083ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b0:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80083b6:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80083b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083ba:	6893      	ldr	r3, [r2, #8]
 80083bc:	f013 0301 	ands.w	r3, r3, #1
 80083c0:	d00f      	beq.n	80083e2 <HAL_SPI_TransmitReceive+0x1ca>
 80083c2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80083c6:	b289      	uxth	r1, r1
 80083c8:	b159      	cbz	r1, 80083e2 <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083ca:	68d1      	ldr	r1, [r2, #12]
 80083cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80083ce:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80083d2:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80083d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083d8:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083e2:	f7fa fd6f 	bl	8002ec4 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1d3      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x17e>
 80083ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1ce      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083f8:	462a      	mov	r2, r5
 80083fa:	4631      	mov	r1, r6
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7ff fded 	bl	8007fdc <SPI_EndRxTxTransaction>
 8008402:	2800      	cmp	r0, #0
 8008404:	f43f af24 	beq.w	8008250 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008408:	2320      	movs	r3, #32
 800840a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800840c:	2001      	movs	r0, #1
 800840e:	e71f      	b.n	8008250 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008410:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0ee      	beq.n	80083f8 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	6893      	ldr	r3, [r2, #8]
 800841e:	0798      	lsls	r0, r3, #30
 8008420:	d422      	bmi.n	8008468 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008422:	6893      	ldr	r3, [r2, #8]
 8008424:	f013 0301 	ands.w	r3, r3, #1
 8008428:	d10c      	bne.n	8008444 <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800842a:	f7fa fd4b 	bl	8002ec4 <HAL_GetTick>
 800842e:	1b40      	subs	r0, r0, r5
 8008430:	42b0      	cmp	r0, r6
 8008432:	d28f      	bcs.n	8008354 <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008434:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1ee      	bne.n	800841a <HAL_SPI_TransmitReceive+0x202>
 800843c:	e7e8      	b.n	8008410 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800843e:	2f01      	cmp	r7, #1
 8008440:	d1a4      	bne.n	800838c <HAL_SPI_TransmitReceive+0x174>
 8008442:	e79a      	b.n	800837a <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008444:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008448:	b289      	uxth	r1, r1
 800844a:	2900      	cmp	r1, #0
 800844c:	d0ed      	beq.n	800842a <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800844e:	68d1      	ldr	r1, [r2, #12]
 8008450:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008452:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8008456:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008458:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800845c:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800845e:	3b01      	subs	r3, #1
 8008460:	b29b      	uxth	r3, r3
 8008462:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8008466:	e7e0      	b.n	800842a <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008468:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0d8      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x20a>
 8008470:	2f00      	cmp	r7, #0
 8008472:	d0d6      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008474:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008476:	f833 1b02 	ldrh.w	r1, [r3], #2
 800847a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800847c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800847e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008480:	3b01      	subs	r3, #1
 8008482:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008484:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008486:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008488:	e7cb      	b.n	8008422 <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800848a:	2b00      	cmp	r3, #0
 800848c:	f47f af24 	bne.w	80082d8 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8008490:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008492:	b29b      	uxth	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	d93a      	bls.n	800850e <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008498:	4649      	mov	r1, r9
 800849a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800849e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 80084a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a2:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80084a4:	3b02      	subs	r3, #2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80084aa:	e715      	b.n	80082d8 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 80084ac:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084b0:	7b12      	ldrb	r2, [r2, #12]
 80084b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80084b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084b6:	3301      	adds	r3, #1
 80084b8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80084ba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80084be:	3b01      	subs	r3, #1
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80084c6:	e73e      	b.n	8008346 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 80084c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80084d0:	d909      	bls.n	80084e6 <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084d2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80084d6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084d8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80084da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80084dc:	3b02      	subs	r3, #2
 80084de:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80084e0:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 80084e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80084e4:	e70c      	b.n	8008300 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80084ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80084ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80084ee:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80084f0:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80084f2:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80084f4:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80084f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084f8:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80084fa:	2700      	movs	r7, #0
 80084fc:	e700      	b.n	8008300 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084fe:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008502:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008504:	6811      	ldr	r1, [r2, #0]
 8008506:	0649      	lsls	r1, r1, #25
 8008508:	f57f aedc 	bpl.w	80082c4 <HAL_SPI_TransmitReceive+0xac>
 800850c:	e7c0      	b.n	8008490 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800850e:	f899 3000 	ldrb.w	r3, [r9]
 8008512:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8008514:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008516:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008518:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800851a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800851c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800851e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008520:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008522:	e6d9      	b.n	80082d8 <HAL_SPI_TransmitReceive+0xc0>

08008524 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008524:	6a03      	ldr	r3, [r0, #32]
 8008526:	f023 0301 	bic.w	r3, r3, #1
 800852a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852c:	6a03      	ldr	r3, [r0, #32]
{
 800852e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008532:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008534:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008536:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800853a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800853e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008540:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008542:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008546:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008548:	4d15      	ldr	r5, [pc, #84]	; (80085a0 <TIM_OC1_SetConfig+0x7c>)
 800854a:	42a8      	cmp	r0, r5
 800854c:	d013      	beq.n	8008576 <TIM_OC1_SetConfig+0x52>
 800854e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008552:	42a8      	cmp	r0, r5
 8008554:	d00f      	beq.n	8008576 <TIM_OC1_SetConfig+0x52>
 8008556:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800855a:	42a8      	cmp	r0, r5
 800855c:	d00b      	beq.n	8008576 <TIM_OC1_SetConfig+0x52>
 800855e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008562:	42a8      	cmp	r0, r5
 8008564:	d007      	beq.n	8008576 <TIM_OC1_SetConfig+0x52>
 8008566:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800856a:	42a8      	cmp	r0, r5
 800856c:	d003      	beq.n	8008576 <TIM_OC1_SetConfig+0x52>
 800856e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008572:	42a8      	cmp	r0, r5
 8008574:	d10d      	bne.n	8008592 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008576:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008578:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800857c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800857e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008582:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008586:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800858a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800858e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008592:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008594:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008596:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008598:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800859a:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800859c:	6203      	str	r3, [r0, #32]
}
 800859e:	4770      	bx	lr
 80085a0:	40012c00 	.word	0x40012c00

080085a4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085a4:	6a03      	ldr	r3, [r0, #32]
 80085a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ac:	6a03      	ldr	r3, [r0, #32]
{
 80085ae:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085b2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80085ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80085be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80085c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ca:	4d1c      	ldr	r5, [pc, #112]	; (800863c <TIM_OC3_SetConfig+0x98>)
 80085cc:	42a8      	cmp	r0, r5
 80085ce:	d017      	beq.n	8008600 <TIM_OC3_SetConfig+0x5c>
 80085d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085d4:	42a8      	cmp	r0, r5
 80085d6:	d013      	beq.n	8008600 <TIM_OC3_SetConfig+0x5c>
 80085d8:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80085dc:	42a8      	cmp	r0, r5
 80085de:	d025      	beq.n	800862c <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e0:	4d17      	ldr	r5, [pc, #92]	; (8008640 <TIM_OC3_SetConfig+0x9c>)
 80085e2:	42a8      	cmp	r0, r5
 80085e4:	d013      	beq.n	800860e <TIM_OC3_SetConfig+0x6a>
 80085e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085ea:	42a8      	cmp	r0, r5
 80085ec:	d00f      	beq.n	800860e <TIM_OC3_SetConfig+0x6a>
 80085ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085f2:	42a8      	cmp	r0, r5
 80085f4:	d00b      	beq.n	800860e <TIM_OC3_SetConfig+0x6a>
 80085f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085fa:	42a8      	cmp	r0, r5
 80085fc:	d10f      	bne.n	800861e <TIM_OC3_SetConfig+0x7a>
 80085fe:	e006      	b.n	800860e <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008600:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008606:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800860a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800860e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008612:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008616:	ea46 0c05 	orr.w	ip, r6, r5
 800861a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800861e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008620:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008622:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008624:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8008626:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8008628:	6203      	str	r3, [r0, #32]
}
 800862a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800862c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800862e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008632:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863a:	e7d1      	b.n	80085e0 <TIM_OC3_SetConfig+0x3c>
 800863c:	40012c00 	.word	0x40012c00
 8008640:	40014000 	.word	0x40014000

08008644 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008644:	6a03      	ldr	r3, [r0, #32]
 8008646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800864a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864c:	6a03      	ldr	r3, [r0, #32]
{
 800864e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008650:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008652:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008654:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008656:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800865a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800865e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008662:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008668:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800866c:	4d1c      	ldr	r5, [pc, #112]	; (80086e0 <TIM_OC4_SetConfig+0x9c>)
 800866e:	42a8      	cmp	r0, r5
 8008670:	d017      	beq.n	80086a2 <TIM_OC4_SetConfig+0x5e>
 8008672:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008676:	42a8      	cmp	r0, r5
 8008678:	d013      	beq.n	80086a2 <TIM_OC4_SetConfig+0x5e>
 800867a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800867e:	42a8      	cmp	r0, r5
 8008680:	d025      	beq.n	80086ce <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008682:	4d18      	ldr	r5, [pc, #96]	; (80086e4 <TIM_OC4_SetConfig+0xa0>)
 8008684:	42a8      	cmp	r0, r5
 8008686:	d013      	beq.n	80086b0 <TIM_OC4_SetConfig+0x6c>
 8008688:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800868c:	42a8      	cmp	r0, r5
 800868e:	d00f      	beq.n	80086b0 <TIM_OC4_SetConfig+0x6c>
 8008690:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008694:	42a8      	cmp	r0, r5
 8008696:	d00b      	beq.n	80086b0 <TIM_OC4_SetConfig+0x6c>
 8008698:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800869c:	42a8      	cmp	r0, r5
 800869e:	d10f      	bne.n	80086c0 <TIM_OC4_SetConfig+0x7c>
 80086a0:	e006      	b.n	80086b0 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80086a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80086ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086b0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80086b4:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086b8:	ea46 0c05 	orr.w	ip, r6, r5
 80086bc:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086c0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80086c2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80086c4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80086c6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80086c8:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80086ca:	6203      	str	r3, [r0, #32]
}
 80086cc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80086d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80086d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80086d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086dc:	e7d1      	b.n	8008682 <TIM_OC4_SetConfig+0x3e>
 80086de:	bf00      	nop
 80086e0:	40012c00 	.word	0x40012c00
 80086e4:	40014000 	.word	0x40014000

080086e8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f000 808c 	beq.w	8008806 <HAL_TIM_Base_Init+0x11e>
{
 80086ee:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80086f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80086f4:	4604      	mov	r4, r0
 80086f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d078      	beq.n	80087f0 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086fe:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008700:	4944      	ldr	r1, [pc, #272]	; (8008814 <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008702:	2302      	movs	r3, #2
 8008704:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008708:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800870a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800870c:	d05c      	beq.n	80087c8 <HAL_TIM_Base_Init+0xe0>
 800870e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008712:	d02c      	beq.n	800876e <HAL_TIM_Base_Init+0x86>
 8008714:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008718:	428a      	cmp	r2, r1
 800871a:	d028      	beq.n	800876e <HAL_TIM_Base_Init+0x86>
 800871c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008720:	428a      	cmp	r2, r1
 8008722:	d024      	beq.n	800876e <HAL_TIM_Base_Init+0x86>
 8008724:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008728:	428a      	cmp	r2, r1
 800872a:	d020      	beq.n	800876e <HAL_TIM_Base_Init+0x86>
 800872c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008730:	428a      	cmp	r2, r1
 8008732:	d049      	beq.n	80087c8 <HAL_TIM_Base_Init+0xe0>
 8008734:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008738:	428a      	cmp	r2, r1
 800873a:	d066      	beq.n	800880a <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800873c:	4936      	ldr	r1, [pc, #216]	; (8008818 <HAL_TIM_Base_Init+0x130>)
 800873e:	428a      	cmp	r2, r1
 8008740:	d05b      	beq.n	80087fa <HAL_TIM_Base_Init+0x112>
 8008742:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008746:	428a      	cmp	r2, r1
 8008748:	d057      	beq.n	80087fa <HAL_TIM_Base_Init+0x112>
 800874a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800874e:	428a      	cmp	r2, r1
 8008750:	d053      	beq.n	80087fa <HAL_TIM_Base_Init+0x112>
 8008752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008756:	428a      	cmp	r2, r1
 8008758:	d04f      	beq.n	80087fa <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800875a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800875c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800875e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008762:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008764:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8008766:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008768:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800876a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800876c:	e010      	b.n	8008790 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800876e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008770:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008776:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800877c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008784:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008786:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008788:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800878a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800878c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800878e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008790:	2301      	movs	r3, #1
 8008792:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008794:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008798:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800879c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80087a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80087a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80087a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80087b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087b8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80087bc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80087c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80087c4:	2000      	movs	r0, #0
}
 80087c6:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80087c8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ca:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80087d0:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80087d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087d6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087d8:	69a1      	ldr	r1, [r4, #24]
 80087da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087de:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80087e0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087e2:	68e3      	ldr	r3, [r4, #12]
 80087e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80087e6:	6863      	ldr	r3, [r4, #4]
 80087e8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80087ea:	6963      	ldr	r3, [r4, #20]
 80087ec:	6313      	str	r3, [r2, #48]	; 0x30
 80087ee:	e7cf      	b.n	8008790 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80087f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80087f4:	f7fc fe4e 	bl	8005494 <HAL_TIM_Base_MspInit>
 80087f8:	e781      	b.n	80086fe <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087fa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087fc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80087fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008802:	4303      	orrs	r3, r0
 8008804:	e7e9      	b.n	80087da <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8008806:	2001      	movs	r0, #1
}
 8008808:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800880a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800880c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008810:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008812:	e793      	b.n	800873c <HAL_TIM_Base_Init+0x54>
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40014000 	.word	0x40014000

0800881c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800881c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008820:	2b01      	cmp	r3, #1
 8008822:	d132      	bne.n	800888a <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008824:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008826:	491b      	ldr	r1, [pc, #108]	; (8008894 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008828:	2202      	movs	r2, #2
 800882a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800882e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008830:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008838:	d019      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x52>
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d016      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x52>
 8008840:	4a15      	ldr	r2, [pc, #84]	; (8008898 <HAL_TIM_Base_Start_IT+0x7c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x52>
 8008846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800884a:	4293      	cmp	r3, r2
 800884c:	d00f      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x52>
 800884e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008852:	4293      	cmp	r3, r2
 8008854:	d00b      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x52>
 8008856:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800885a:	4293      	cmp	r3, r2
 800885c:	d007      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x52>
 800885e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008862:	4293      	cmp	r3, r2
 8008864:	d003      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x52>
 8008866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800886a:	4293      	cmp	r3, r2
 800886c:	d107      	bne.n	800887e <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800886e:	6899      	ldr	r1, [r3, #8]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <HAL_TIM_Base_Start_IT+0x80>)
 8008872:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008874:	2a06      	cmp	r2, #6
 8008876:	d00a      	beq.n	800888e <HAL_TIM_Base_Start_IT+0x72>
 8008878:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800887c:	d007      	beq.n	800888e <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8008884:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	4770      	bx	lr
    return HAL_ERROR;
 800888a:	2001      	movs	r0, #1
 800888c:	4770      	bx	lr
  return HAL_OK;
 800888e:	2000      	movs	r0, #0
}
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40012c00 	.word	0x40012c00
 8008898:	40000400 	.word	0x40000400
 800889c:	00010007 	.word	0x00010007

080088a0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80088a0:	2800      	cmp	r0, #0
 80088a2:	f000 808c 	beq.w	80089be <HAL_TIM_PWM_Init+0x11e>
{
 80088a6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80088a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80088ac:	4604      	mov	r4, r0
 80088ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d078      	beq.n	80089a8 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088b8:	4944      	ldr	r1, [pc, #272]	; (80089cc <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80088ba:	2302      	movs	r3, #2
 80088bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80088c2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c4:	d05c      	beq.n	8008980 <HAL_TIM_PWM_Init+0xe0>
 80088c6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80088ca:	d02c      	beq.n	8008926 <HAL_TIM_PWM_Init+0x86>
 80088cc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80088d0:	428a      	cmp	r2, r1
 80088d2:	d028      	beq.n	8008926 <HAL_TIM_PWM_Init+0x86>
 80088d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088d8:	428a      	cmp	r2, r1
 80088da:	d024      	beq.n	8008926 <HAL_TIM_PWM_Init+0x86>
 80088dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088e0:	428a      	cmp	r2, r1
 80088e2:	d020      	beq.n	8008926 <HAL_TIM_PWM_Init+0x86>
 80088e4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80088e8:	428a      	cmp	r2, r1
 80088ea:	d049      	beq.n	8008980 <HAL_TIM_PWM_Init+0xe0>
 80088ec:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80088f0:	428a      	cmp	r2, r1
 80088f2:	d066      	beq.n	80089c2 <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088f4:	4936      	ldr	r1, [pc, #216]	; (80089d0 <HAL_TIM_PWM_Init+0x130>)
 80088f6:	428a      	cmp	r2, r1
 80088f8:	d05b      	beq.n	80089b2 <HAL_TIM_PWM_Init+0x112>
 80088fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088fe:	428a      	cmp	r2, r1
 8008900:	d057      	beq.n	80089b2 <HAL_TIM_PWM_Init+0x112>
 8008902:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008906:	428a      	cmp	r2, r1
 8008908:	d053      	beq.n	80089b2 <HAL_TIM_PWM_Init+0x112>
 800890a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800890e:	428a      	cmp	r2, r1
 8008910:	d04f      	beq.n	80089b2 <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008912:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008914:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800891c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800891e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008920:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008922:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008924:	e010      	b.n	8008948 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008926:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008928:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800892a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800892e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008934:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008936:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800893c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800893e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008940:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008942:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008944:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008946:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008948:	2301      	movs	r3, #1
 800894a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800894c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008950:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008954:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008958:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800895c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008968:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800896c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008970:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008974:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008978:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800897c:	2000      	movs	r0, #0
}
 800897e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008980:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008982:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008988:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800898a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800898e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008990:	69a1      	ldr	r1, [r4, #24]
 8008992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008996:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008998:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800899a:	68e3      	ldr	r3, [r4, #12]
 800899c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800899e:	6863      	ldr	r3, [r4, #4]
 80089a0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80089a2:	6963      	ldr	r3, [r4, #20]
 80089a4:	6313      	str	r3, [r2, #48]	; 0x30
 80089a6:	e7cf      	b.n	8008948 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80089a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80089ac:	f7fc fd5c 	bl	8005468 <HAL_TIM_PWM_MspInit>
 80089b0:	e781      	b.n	80088b6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089b2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80089b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ba:	4303      	orrs	r3, r0
 80089bc:	e7e9      	b.n	8008992 <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 80089be:	2001      	movs	r0, #1
}
 80089c0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80089c2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80089c8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ca:	e793      	b.n	80088f4 <HAL_TIM_PWM_Init+0x54>
 80089cc:	40012c00 	.word	0x40012c00
 80089d0:	40014000 	.word	0x40014000

080089d4 <HAL_TIM_PWM_Start>:
 80089d4:	2910      	cmp	r1, #16
 80089d6:	d80a      	bhi.n	80089ee <HAL_TIM_PWM_Start+0x1a>
 80089d8:	e8df f001 	tbb	[pc, r1]
 80089dc:	09090961 	.word	0x09090961
 80089e0:	09090967 	.word	0x09090967
 80089e4:	0909096f 	.word	0x0909096f
 80089e8:	09090974 	.word	0x09090974
 80089ec:	7d          	.byte	0x7d
 80089ed:	00          	.byte	0x00
 80089ee:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d157      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0xd2>
 80089f6:	2910      	cmp	r1, #16
 80089f8:	d80a      	bhi.n	8008a10 <HAL_TIM_PWM_Start+0x3c>
 80089fa:	e8df f001 	tbb	[pc, r1]
 80089fe:	0993      	.short	0x0993
 8008a00:	095a0909 	.word	0x095a0909
 8008a04:	097c0909 	.word	0x097c0909
 8008a08:	09780909 	.word	0x09780909
 8008a0c:	0909      	.short	0x0909
 8008a0e:	74          	.byte	0x74
 8008a0f:	00          	.byte	0x00
 8008a10:	2302      	movs	r3, #2
 8008a12:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008a16:	6803      	ldr	r3, [r0, #0]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	6a18      	ldr	r0, [r3, #32]
 8008a1c:	f001 011f 	and.w	r1, r1, #31
 8008a20:	fa02 f101 	lsl.w	r1, r2, r1
 8008a24:	ea20 0001 	bic.w	r0, r0, r1
 8008a28:	6218      	str	r0, [r3, #32]
 8008a2a:	6a18      	ldr	r0, [r3, #32]
 8008a2c:	4a3f      	ldr	r2, [pc, #252]	; (8008b2c <HAL_TIM_PWM_Start+0x158>)
 8008a2e:	4301      	orrs	r1, r0
 8008a30:	4293      	cmp	r3, r2
 8008a32:	6219      	str	r1, [r3, #32]
 8008a34:	d063      	beq.n	8008afe <HAL_TIM_PWM_Start+0x12a>
 8008a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d06d      	beq.n	8008b1a <HAL_TIM_PWM_Start+0x146>
 8008a3e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d069      	beq.n	8008b1a <HAL_TIM_PWM_Start+0x146>
 8008a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d065      	beq.n	8008b1a <HAL_TIM_PWM_Start+0x146>
 8008a4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d061      	beq.n	8008b1a <HAL_TIM_PWM_Start+0x146>
 8008a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d05d      	beq.n	8008b1a <HAL_TIM_PWM_Start+0x146>
 8008a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a62:	d050      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x132>
 8008a64:	4a32      	ldr	r2, [pc, #200]	; (8008b30 <HAL_TIM_PWM_Start+0x15c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d04d      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x132>
 8008a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d049      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x132>
 8008a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d045      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x132>
 8008a7a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d041      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x132>
 8008a82:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d03d      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x132>
 8008a8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d039      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x132>
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	f042 0201 	orr.w	r2, r2, #1
 8008a98:	2000      	movs	r0, #0
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	4770      	bx	lr
 8008a9e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d03e      	beq.n	8008b24 <HAL_TIM_PWM_Start+0x150>
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	4770      	bx	lr
 8008aaa:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d1f9      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0xd2>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008ab8:	e7ad      	b.n	8008a16 <HAL_TIM_PWM_Start+0x42>
 8008aba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d099      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x22>
 8008ac2:	e7f0      	b.n	8008aa6 <HAL_TIM_PWM_Start+0xd2>
 8008ac4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	bf18      	it	ne
 8008acc:	2301      	movne	r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d091      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x22>
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	4770      	bx	lr
 8008ad6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008ada:	3b01      	subs	r3, #1
 8008adc:	bf18      	it	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d088      	beq.n	80089f6 <HAL_TIM_PWM_Start+0x22>
 8008ae4:	e7f5      	b.n	8008ad2 <HAL_TIM_PWM_Start+0xfe>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008aec:	e793      	b.n	8008a16 <HAL_TIM_PWM_Start+0x42>
 8008aee:	2302      	movs	r3, #2
 8008af0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008af4:	e78f      	b.n	8008a16 <HAL_TIM_PWM_Start+0x42>
 8008af6:	2302      	movs	r3, #2
 8008af8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008afc:	e78b      	b.n	8008a16 <HAL_TIM_PWM_Start+0x42>
 8008afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b04:	645a      	str	r2, [r3, #68]	; 0x44
 8008b06:	6899      	ldr	r1, [r3, #8]
 8008b08:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <HAL_TIM_PWM_Start+0x160>)
 8008b0a:	400a      	ands	r2, r1
 8008b0c:	2a06      	cmp	r2, #6
 8008b0e:	d002      	beq.n	8008b16 <HAL_TIM_PWM_Start+0x142>
 8008b10:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008b14:	d1bd      	bne.n	8008a92 <HAL_TIM_PWM_Start+0xbe>
 8008b16:	2000      	movs	r0, #0
 8008b18:	4770      	bx	lr
 8008b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b20:	645a      	str	r2, [r3, #68]	; 0x44
 8008b22:	e79c      	b.n	8008a5e <HAL_TIM_PWM_Start+0x8a>
 8008b24:	2302      	movs	r3, #2
 8008b26:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8008b2a:	e774      	b.n	8008a16 <HAL_TIM_PWM_Start+0x42>
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40000400 	.word	0x40000400
 8008b34:	00010007 	.word	0x00010007

08008b38 <HAL_TIM_OC_DelayElapsedCallback>:
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop

08008b3c <HAL_TIM_IC_CaptureCallback>:
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop

08008b40 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop

08008b44 <HAL_TIM_TriggerCallback>:
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop

08008b48 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b48:	6803      	ldr	r3, [r0, #0]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	0791      	lsls	r1, r2, #30
{
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b52:	d503      	bpl.n	8008b5c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	0792      	lsls	r2, r2, #30
 8008b58:	f100 808a 	bmi.w	8008c70 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	0752      	lsls	r2, r2, #29
 8008b60:	d502      	bpl.n	8008b68 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	0750      	lsls	r0, r2, #29
 8008b66:	d470      	bmi.n	8008c4a <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	0711      	lsls	r1, r2, #28
 8008b6c:	d502      	bpl.n	8008b74 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	0712      	lsls	r2, r2, #28
 8008b72:	d458      	bmi.n	8008c26 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	06d1      	lsls	r1, r2, #27
 8008b78:	d502      	bpl.n	8008b80 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	06d2      	lsls	r2, r2, #27
 8008b7e:	d43e      	bmi.n	8008bfe <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	07d0      	lsls	r0, r2, #31
 8008b84:	d503      	bpl.n	8008b8e <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	07d1      	lsls	r1, r2, #31
 8008b8a:	f100 808a 	bmi.w	8008ca2 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	0612      	lsls	r2, r2, #24
 8008b92:	d503      	bpl.n	8008b9c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	0610      	lsls	r0, r2, #24
 8008b98:	f100 808b 	bmi.w	8008cb2 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b9c:	691a      	ldr	r2, [r3, #16]
 8008b9e:	05d1      	lsls	r1, r2, #23
 8008ba0:	d503      	bpl.n	8008baa <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	0612      	lsls	r2, r2, #24
 8008ba6:	f100 808c 	bmi.w	8008cc2 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	0650      	lsls	r0, r2, #25
 8008bae:	d503      	bpl.n	8008bb8 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	0651      	lsls	r1, r2, #25
 8008bb4:	f100 808d 	bmi.w	8008cd2 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bb8:	691a      	ldr	r2, [r3, #16]
 8008bba:	0692      	lsls	r2, r2, #26
 8008bbc:	d503      	bpl.n	8008bc6 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	0690      	lsls	r0, r2, #26
 8008bc2:	f100 808e 	bmi.w	8008ce2 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	02d1      	lsls	r1, r2, #11
 8008bca:	d503      	bpl.n	8008bd4 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	02d2      	lsls	r2, r2, #11
 8008bd0:	f100 808f 	bmi.w	8008cf2 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	0290      	lsls	r0, r2, #10
 8008bd8:	d503      	bpl.n	8008be2 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	0291      	lsls	r1, r2, #10
 8008bde:	f100 8090 	bmi.w	8008d02 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	0252      	lsls	r2, r2, #9
 8008be6:	d503      	bpl.n	8008bf0 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	0250      	lsls	r0, r2, #9
 8008bec:	f100 8091 	bmi.w	8008d12 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008bf0:	691a      	ldr	r2, [r3, #16]
 8008bf2:	0211      	lsls	r1, r2, #8
 8008bf4:	d502      	bpl.n	8008bfc <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	0212      	lsls	r2, r2, #8
 8008bfa:	d44a      	bmi.n	8008c92 <HAL_TIM_IRQHandler+0x14a>
}
 8008bfc:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bfe:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c02:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c04:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c06:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008c0e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c10:	f040 8090 	bne.w	8008d34 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c14:	f7ff ff90 	bl	8008b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f7ff ff91 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c20:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c22:	7722      	strb	r2, [r4, #28]
 8008c24:	e7ac      	b.n	8008b80 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c26:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c2a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c2c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8008c34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c36:	d17a      	bne.n	8008d2e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c38:	f7ff ff7e 	bl	8008b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f7ff ff7f 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c42:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c44:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c46:	7722      	strb	r2, [r4, #28]
 8008c48:	e794      	b.n	8008b74 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c4a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c4e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c50:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008c5a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c5c:	d164      	bne.n	8008d28 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5e:	f7ff ff6b 	bl	8008b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7ff ff6c 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c68:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c6a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6c:	7722      	strb	r2, [r4, #28]
 8008c6e:	e77b      	b.n	8008b68 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c70:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c74:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c76:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c78:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	0799      	lsls	r1, r3, #30
 8008c7e:	d150      	bne.n	8008d22 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c80:	f7ff ff5a 	bl	8008b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c84:	4620      	mov	r0, r4
 8008c86:	f7ff ff5b 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c8c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	7722      	strb	r2, [r4, #28]
 8008c90:	e764      	b.n	8008b5c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008c92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008c96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008c98:	611a      	str	r2, [r3, #16]
}
 8008c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008c9e:	f000 ba11 	b.w	80090c4 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ca2:	f06f 0201 	mvn.w	r2, #1
 8008ca6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f7fa fd15 	bl	80036d8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	e76d      	b.n	8008b8e <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 f9f9 	bl	80090b0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	e76c      	b.n	8008b9c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 f9f3 	bl	80090b4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	e76b      	b.n	8008baa <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7ff ff33 	bl	8008b44 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	e76a      	b.n	8008bb8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ce2:	f06f 0220 	mvn.w	r2, #32
 8008ce6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 f9df 	bl	80090ac <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	e769      	b.n	8008bc6 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008cf2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008cf6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 f9dd 	bl	80090b8 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	e768      	b.n	8008bd4 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008d02:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008d06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 f9d7 	bl	80090bc <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	e767      	b.n	8008be2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008d12:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008d16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 f9d1 	bl	80090c0 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	e766      	b.n	8008bf0 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8008d22:	f7ff ff0b 	bl	8008b3c <HAL_TIM_IC_CaptureCallback>
 8008d26:	e7b0      	b.n	8008c8a <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d28:	f7ff ff08 	bl	8008b3c <HAL_TIM_IC_CaptureCallback>
 8008d2c:	e79c      	b.n	8008c68 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	f7ff ff05 	bl	8008b3c <HAL_TIM_IC_CaptureCallback>
 8008d32:	e786      	b.n	8008c42 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8008d34:	f7ff ff02 	bl	8008b3c <HAL_TIM_IC_CaptureCallback>
 8008d38:	e771      	b.n	8008c1e <HAL_TIM_IRQHandler+0xd6>
 8008d3a:	bf00      	nop

08008d3c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d3c:	6a03      	ldr	r3, [r0, #32]
 8008d3e:	f023 0310 	bic.w	r3, r3, #16
 8008d42:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008d44:	6a03      	ldr	r3, [r0, #32]
{
 8008d46:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008d48:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008d4a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d4e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008d52:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d5a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008d5c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d64:	4d1c      	ldr	r5, [pc, #112]	; (8008dd8 <TIM_OC2_SetConfig+0x9c>)
 8008d66:	42a8      	cmp	r0, r5
 8008d68:	d017      	beq.n	8008d9a <TIM_OC2_SetConfig+0x5e>
 8008d6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d6e:	42a8      	cmp	r0, r5
 8008d70:	d013      	beq.n	8008d9a <TIM_OC2_SetConfig+0x5e>
 8008d72:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008d76:	42a8      	cmp	r0, r5
 8008d78:	d025      	beq.n	8008dc6 <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d7a:	4d18      	ldr	r5, [pc, #96]	; (8008ddc <TIM_OC2_SetConfig+0xa0>)
 8008d7c:	42a8      	cmp	r0, r5
 8008d7e:	d013      	beq.n	8008da8 <TIM_OC2_SetConfig+0x6c>
 8008d80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008d84:	42a8      	cmp	r0, r5
 8008d86:	d00f      	beq.n	8008da8 <TIM_OC2_SetConfig+0x6c>
 8008d88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008d8c:	42a8      	cmp	r0, r5
 8008d8e:	d00b      	beq.n	8008da8 <TIM_OC2_SetConfig+0x6c>
 8008d90:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d94:	42a8      	cmp	r0, r5
 8008d96:	d10f      	bne.n	8008db8 <TIM_OC2_SetConfig+0x7c>
 8008d98:	e006      	b.n	8008da8 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d9a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008da0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008da8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dac:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008db0:	ea46 0c05 	orr.w	ip, r6, r5
 8008db4:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008db8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008dba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008dbc:	6182      	str	r2, [r0, #24]
}
 8008dbe:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008dc0:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008dc2:	6203      	str	r3, [r0, #32]
}
 8008dc4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dc6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd4:	e7d1      	b.n	8008d7a <TIM_OC2_SetConfig+0x3e>
 8008dd6:	bf00      	nop
 8008dd8:	40012c00 	.word	0x40012c00
 8008ddc:	40014000 	.word	0x40014000

08008de0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008de0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	f000 80ff 	beq.w	8008fe8 <HAL_TIM_PWM_ConfigChannel+0x208>
 8008dea:	2301      	movs	r3, #1
{
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	4604      	mov	r4, r0
 8008df0:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008df2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008df6:	2a14      	cmp	r2, #20
 8008df8:	d80c      	bhi.n	8008e14 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008dfa:	e8df f002 	tbb	[pc, r2]
 8008dfe:	0b59      	.short	0x0b59
 8008e00:	0b6e0b0b 	.word	0x0b6e0b0b
 8008e04:	0b840b0b 	.word	0x0b840b0b
 8008e08:	0b990b0b 	.word	0x0b990b0b
 8008e0c:	0baf0b0b 	.word	0x0baf0b0b
 8008e10:	0b0b      	.short	0x0b0b
 8008e12:	11          	.byte	0x11
 8008e13:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008e14:	2300      	movs	r3, #0
  switch (Channel)
 8008e16:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8008e18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e20:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e22:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e24:	6a1a      	ldr	r2, [r3, #32]
 8008e26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008e2a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008e2c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008e2e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008e30:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e32:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008e36:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e3a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e3e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e40:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e44:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e48:	4e69      	ldr	r6, [pc, #420]	; (8008ff0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008e4a:	42b3      	cmp	r3, r6
 8008e4c:	d013      	beq.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008e4e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008e52:	42b3      	cmp	r3, r6
 8008e54:	d00f      	beq.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008e56:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008e5a:	42b3      	cmp	r3, r6
 8008e5c:	d00b      	beq.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008e5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008e62:	42b3      	cmp	r3, r6
 8008e64:	d007      	beq.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008e66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008e6a:	42b3      	cmp	r3, r6
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_PWM_ConfigChannel+0x96>
 8008e6e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008e72:	42b3      	cmp	r3, r6
 8008e74:	d104      	bne.n	8008e80 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e76:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e78:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e7c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e80:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e82:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e84:	6869      	ldr	r1, [r5, #4]
 8008e86:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e88:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e8c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e92:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008e96:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008e9a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008e9e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008ea2:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008ea4:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008ea6:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008ea8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008eac:	4610      	mov	r0, r2
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008eb0:	6800      	ldr	r0, [r0, #0]
 8008eb2:	f7ff fb37 	bl	8008524 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eb6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008eb8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eba:	f043 0308 	orr.w	r3, r3, #8
 8008ebe:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ec0:	6983      	ldr	r3, [r0, #24]
 8008ec2:	f023 0304 	bic.w	r3, r3, #4
 8008ec6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ec8:	6983      	ldr	r3, [r0, #24]
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008ece:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008ed0:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008ed2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	f7ff ff2e 	bl	8008d3c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ee0:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ee2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ee8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008eea:	6983      	ldr	r3, [r0, #24]
 8008eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ef0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ef2:	6983      	ldr	r3, [r0, #24]
 8008ef4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008ef8:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008efa:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008efc:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008efe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008f02:	4610      	mov	r0, r2
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f06:	6800      	ldr	r0, [r0, #0]
 8008f08:	f7ff fb4c 	bl	80085a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f0c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f0e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f10:	f043 0308 	orr.w	r3, r3, #8
 8008f14:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f16:	69c3      	ldr	r3, [r0, #28]
 8008f18:	f023 0304 	bic.w	r3, r3, #4
 8008f1c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f1e:	69c3      	ldr	r3, [r0, #28]
 8008f20:	430b      	orrs	r3, r1
 8008f22:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008f24:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008f28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f30:	6800      	ldr	r0, [r0, #0]
 8008f32:	f7ff fb87 	bl	8008644 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f36:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f38:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f3e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f40:	69c3      	ldr	r3, [r0, #28]
 8008f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f46:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f48:	69c3      	ldr	r3, [r0, #28]
 8008f4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008f4e:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008f50:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008f52:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008f54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008f58:	4610      	mov	r0, r2
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f5c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008f5e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f60:	6a1a      	ldr	r2, [r3, #32]
 8008f62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f66:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008f68:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008f6a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008f6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f6e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008f72:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008f76:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f78:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008f7a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f7e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f82:	4e1b      	ldr	r6, [pc, #108]	; (8008ff0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008f84:	42b3      	cmp	r3, r6
 8008f86:	d013      	beq.n	8008fb0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008f88:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008f8c:	42b3      	cmp	r3, r6
 8008f8e:	d00f      	beq.n	8008fb0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008f90:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008f94:	42b3      	cmp	r3, r6
 8008f96:	d00b      	beq.n	8008fb0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008f98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008f9c:	42b3      	cmp	r3, r6
 8008f9e:	d007      	beq.n	8008fb0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008fa0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008fa4:	42b3      	cmp	r3, r6
 8008fa6:	d003      	beq.n	8008fb0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008fa8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008fac:	42b3      	cmp	r3, r6
 8008fae:	d104      	bne.n	8008fba <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fb0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008fb2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fb6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008fba:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008fbc:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008fbe:	6869      	ldr	r1, [r5, #4]
 8008fc0:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8008fc2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fc6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fc8:	f042 0208 	orr.w	r2, r2, #8
 8008fcc:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fd0:	f021 0104 	bic.w	r1, r1, #4
 8008fd4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fd6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fd8:	4301      	orrs	r1, r0
 8008fda:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008fdc:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008fde:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008fe0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8008fe8:	2202      	movs	r2, #2
}
 8008fea:	4610      	mov	r0, r2
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40012c00 	.word	0x40012c00

08008ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ff4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d051      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8008ffc:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ffe:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009000:	4d28      	ldr	r5, [pc, #160]	; (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009002:	2302      	movs	r3, #2
 8009004:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009008:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800900a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800900c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800900e:	d03b      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8009010:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009014:	42aa      	cmp	r2, r5
 8009016:	d032      	beq.n	800907e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8009018:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800901c:	42aa      	cmp	r2, r5
 800901e:	d02e      	beq.n	800907e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009020:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009022:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800902a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800902c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8009030:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009032:	d016      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009034:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009036:	429a      	cmp	r2, r3
 8009038:	d013      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800903a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800903e:	429a      	cmp	r2, r3
 8009040:	d00f      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009046:	429a      	cmp	r2, r3
 8009048:	d00b      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800904a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800904e:	429a      	cmp	r2, r3
 8009050:	d007      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009052:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009056:	429a      	cmp	r2, r3
 8009058:	d003      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800905a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905e:	429a      	cmp	r2, r3
 8009060:	d104      	bne.n	800906c <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009062:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009064:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009068:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800906a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800906c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800906e:	2201      	movs	r2, #1
 8009070:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009074:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8009078:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800907a:	4618      	mov	r0, r3
}
 800907c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800907e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009080:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009084:	432b      	orrs	r3, r5
 8009086:	e7cb      	b.n	8009020 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8009088:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800908a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800908e:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8009090:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009094:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800909a:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800909c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800909e:	e7e0      	b.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 80090a0:	2002      	movs	r0, #2
}
 80090a2:	4770      	bx	lr
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40000400 	.word	0x40000400

080090ac <HAL_TIMEx_CommutCallback>:
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop

080090b0 <HAL_TIMEx_BreakCallback>:
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop

080090b4 <HAL_TIMEx_Break2Callback>:
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop

080090b8 <HAL_TIMEx_EncoderIndexCallback>:
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop

080090bc <HAL_TIMEx_DirectionChangeCallback>:
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <HAL_TIMEx_IndexErrorCallback>:
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop

080090c4 <HAL_TIMEx_TransitionErrorCallback>:
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop

080090c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ca:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 80090ce:	2e20      	cmp	r6, #32
 80090d0:	d141      	bne.n	8009156 <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 80090d2:	2900      	cmp	r1, #0
 80090d4:	d03d      	beq.n	8009152 <HAL_UART_Transmit_DMA+0x8a>
 80090d6:	2a00      	cmp	r2, #0
 80090d8:	d03b      	beq.n	8009152 <HAL_UART_Transmit_DMA+0x8a>
 80090da:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80090dc:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 80090e0:	2801      	cmp	r0, #1
 80090e2:	d038      	beq.n	8009156 <HAL_UART_Transmit_DMA+0x8e>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 80090e4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 80090e6:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ea:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80090ec:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090ee:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f0:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 80090f4:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 80090f6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 80090fa:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009102:	b190      	cbz	r0, 800912a <HAL_UART_Transmit_DMA+0x62>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009104:	f8df c064 	ldr.w	ip, [pc, #100]	; 800916c <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009108:	6387      	str	r7, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800910a:	4613      	mov	r3, r2
 800910c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800910e:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009112:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8009170 <HAL_UART_Transmit_DMA+0xa8>
 8009116:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800911a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8009174 <HAL_UART_Transmit_DMA+0xac>
 800911e:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009122:	3228      	adds	r2, #40	; 0x28
 8009124:	f7fd faf4 	bl	8006710 <HAL_DMA_Start_IT>
 8009128:	b9b8      	cbnz	r0, 800915a <HAL_UART_Transmit_DMA+0x92>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 800912e:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009130:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8009132:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	f102 0308 	add.w	r3, r2, #8
 800913a:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800913e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	f102 0008 	add.w	r0, r2, #8
 8009146:	e840 3100 	strex	r1, r3, [r0]
 800914a:	2900      	cmp	r1, #0
 800914c:	d1f3      	bne.n	8009136 <HAL_UART_Transmit_DMA+0x6e>

    return HAL_OK;
 800914e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8009152:	2001      	movs	r0, #1
}
 8009154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009156:	2002      	movs	r0, #2
}
 8009158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800915a:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800915c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009160:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 8009164:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8009166:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800916c:	08009179 	.word	0x08009179
 8009170:	080091c1 	.word	0x080091c1
 8009174:	080091d5 	.word	0x080091d5

08009178 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009178:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800917a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800917c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f013 0320 	ands.w	r3, r3, #32
 8009184:	d117      	bne.n	80091b6 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8009186:	6802      	ldr	r2, [r0, #0]
 8009188:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	f102 0308 	add.w	r3, r2, #8
 8009190:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	f102 0008 	add.w	r0, r2, #8
 800919c:	e840 3100 	strex	r1, r3, [r0]
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d1f3      	bne.n	800918c <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	e842 3100 	strex	r1, r3, [r2]
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d1f7      	bne.n	80091a4 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091b4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80091b6:	f7fb faf1 	bl	800479c <HAL_UART_TxCpltCallback>
}
 80091ba:	bd08      	pop	{r3, pc}

080091bc <HAL_UART_TxHalfCpltCallback>:
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop

080091c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091c0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80091c4:	f7ff fffa 	bl	80091bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091c8:	bd08      	pop	{r3, pc}
 80091ca:	bf00      	nop

080091cc <HAL_UART_RxHalfCpltCallback>:
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop

080091d0 <HAL_UART_ErrorCallback>:
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop

080091d4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091d4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091d6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091d8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 80091dc:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091de:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	0612      	lsls	r2, r2, #24
 80091e6:	d501      	bpl.n	80091ec <UART_DMAError+0x18>
 80091e8:	2921      	cmp	r1, #33	; 0x21
 80091ea:	d00d      	beq.n	8009208 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091ec:	689a      	ldr	r2, [r3, #8]
 80091ee:	0652      	lsls	r2, r2, #25
 80091f0:	d501      	bpl.n	80091f6 <UART_DMAError+0x22>
 80091f2:	2c22      	cmp	r4, #34	; 0x22
 80091f4:	d023      	beq.n	800923e <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091f6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80091fa:	f043 0310 	orr.w	r3, r3, #16
 80091fe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009202:	f7ff ffe5 	bl	80091d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009206:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8009208:	2200      	movs	r2, #0
 800920a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009212:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	e843 2100 	strex	r1, r2, [r3]
 800921a:	2900      	cmp	r1, #0
 800921c:	d1f7      	bne.n	800920e <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	f103 0208 	add.w	r2, r3, #8
 8009222:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009226:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	f103 0c08 	add.w	ip, r3, #8
 800922e:	e84c 2100 	strex	r1, r2, [ip]
 8009232:	2900      	cmp	r1, #0
 8009234:	d1f3      	bne.n	800921e <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8009236:	2220      	movs	r2, #32
 8009238:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 800923c:	e7d6      	b.n	80091ec <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800923e:	2200      	movs	r2, #0
 8009240:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009248:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	e843 2100 	strex	r1, r2, [r3]
 8009250:	2900      	cmp	r1, #0
 8009252:	d1f7      	bne.n	8009244 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009254:	4c13      	ldr	r4, [pc, #76]	; (80092a4 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	f103 0208 	add.w	r2, r3, #8
 800925a:	e852 2f00 	ldrex	r2, [r2]
 800925e:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	f103 0c08 	add.w	ip, r3, #8
 8009264:	e84c 2100 	strex	r1, r2, [ip]
 8009268:	2900      	cmp	r1, #0
 800926a:	d1f4      	bne.n	8009256 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800926e:	2a01      	cmp	r2, #1
 8009270:	d006      	beq.n	8009280 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009272:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009274:	2220      	movs	r2, #32
 8009276:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 800927a:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800927e:	e7ba      	b.n	80091f6 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009284:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	e843 2100 	strex	r1, r2, [r3]
 800928c:	2900      	cmp	r1, #0
 800928e:	d0f0      	beq.n	8009272 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	e853 2f00 	ldrex	r2, [r3]
 8009294:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	e843 2100 	strex	r1, r2, [r3]
 800929c:	2900      	cmp	r1, #0
 800929e:	d1ef      	bne.n	8009280 <UART_DMAError+0xac>
 80092a0:	e7e7      	b.n	8009272 <UART_DMAError+0x9e>
 80092a2:	bf00      	nop
 80092a4:	effffffe 	.word	0xeffffffe

080092a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80092b2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092b6:	f7ff ff8b 	bl	80091d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ba:	bd08      	pop	{r3, pc}

080092bc <HAL_UARTEx_RxEventCallback>:
}
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop

080092c0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092c0:	6803      	ldr	r3, [r0, #0]
 80092c2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092c4:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092c6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80092ca:	ea12 0f0c 	tst.w	r2, ip
{
 80092ce:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092d0:	689d      	ldr	r5, [r3, #8]
{
 80092d2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80092d4:	f000 80eb 	beq.w	80094ae <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80092d8:	489a      	ldr	r0, [pc, #616]	; (8009544 <HAL_UART_IRQHandler+0x284>)
 80092da:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092de:	489a      	ldr	r0, [pc, #616]	; (8009548 <HAL_UART_IRQHandler+0x288>)
 80092e0:	4008      	ands	r0, r1
 80092e2:	ea50 000c 	orrs.w	r0, r0, ip
 80092e6:	d155      	bne.n	8009394 <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80092ea:	2801      	cmp	r0, #1
 80092ec:	d022      	beq.n	8009334 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092ee:	02d6      	lsls	r6, r2, #11
 80092f0:	d502      	bpl.n	80092f8 <HAL_UART_IRQHandler+0x38>
 80092f2:	0268      	lsls	r0, r5, #9
 80092f4:	f100 8104 	bmi.w	8009500 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80092f8:	0616      	lsls	r6, r2, #24
 80092fa:	d506      	bpl.n	800930a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092fc:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009300:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009304:	4328      	orrs	r0, r5
 8009306:	f040 80f3 	bne.w	80094f0 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800930a:	0650      	lsls	r0, r2, #25
 800930c:	d534      	bpl.n	8009378 <HAL_UART_IRQHandler+0xb8>
 800930e:	064e      	lsls	r6, r1, #25
 8009310:	d532      	bpl.n	8009378 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	e843 2100 	strex	r1, r2, [r3]
 800931e:	2900      	cmp	r1, #0
 8009320:	d1f7      	bne.n	8009312 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009322:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009324:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009326:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800932a:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800932c:	4620      	mov	r0, r4
 800932e:	f7fb fa35 	bl	800479c <HAL_UART_TxCpltCallback>
}
 8009332:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009334:	06d6      	lsls	r6, r2, #27
 8009336:	d5da      	bpl.n	80092ee <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009338:	06c8      	lsls	r0, r1, #27
 800933a:	d5d8      	bpl.n	80092ee <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800933c:	2210      	movs	r2, #16
 800933e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	0651      	lsls	r1, r2, #25
 8009344:	f140 8106 	bpl.w	8009554 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009348:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800934a:	6801      	ldr	r1, [r0, #0]
 800934c:	684a      	ldr	r2, [r1, #4]
 800934e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009350:	2a00      	cmp	r2, #0
 8009352:	d0ee      	beq.n	8009332 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009354:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009358:	4295      	cmp	r5, r2
 800935a:	d9ea      	bls.n	8009332 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800935c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009360:	680a      	ldr	r2, [r1, #0]
 8009362:	0692      	lsls	r2, r2, #26
 8009364:	f140 812b 	bpl.w	80095be <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009368:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800936c:	1ae9      	subs	r1, r5, r3
 800936e:	4620      	mov	r0, r4
 8009370:	b289      	uxth	r1, r1
 8009372:	f7ff ffa3 	bl	80092bc <HAL_UARTEx_RxEventCallback>
}
 8009376:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009378:	0215      	lsls	r5, r2, #8
 800937a:	d502      	bpl.n	8009382 <HAL_UART_IRQHandler+0xc2>
 800937c:	0048      	lsls	r0, r1, #1
 800937e:	f100 80dc 	bmi.w	800953a <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009382:	01d3      	lsls	r3, r2, #7
 8009384:	d5d5      	bpl.n	8009332 <HAL_UART_IRQHandler+0x72>
 8009386:	2900      	cmp	r1, #0
 8009388:	dad3      	bge.n	8009332 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800938a:	4620      	mov	r0, r4
}
 800938c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009390:	f000 bdb4 	b.w	8009efc <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009394:	07d0      	lsls	r0, r2, #31
 8009396:	d509      	bpl.n	80093ac <HAL_UART_IRQHandler+0xec>
 8009398:	05ce      	lsls	r6, r1, #23
 800939a:	d507      	bpl.n	80093ac <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800939c:	2001      	movs	r0, #1
 800939e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093a0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80093a4:	f040 0001 	orr.w	r0, r0, #1
 80093a8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ac:	0790      	lsls	r0, r2, #30
 80093ae:	f140 8090 	bpl.w	80094d2 <HAL_UART_IRQHandler+0x212>
 80093b2:	07ee      	lsls	r6, r5, #31
 80093b4:	d50a      	bpl.n	80093cc <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b6:	2002      	movs	r0, #2
 80093b8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80093be:	f040 0004 	orr.w	r0, r0, #4
 80093c2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093c6:	0750      	lsls	r0, r2, #29
 80093c8:	f100 8089 	bmi.w	80094de <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093cc:	0716      	lsls	r6, r2, #28
 80093ce:	d50c      	bpl.n	80093ea <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093d0:	f001 0020 	and.w	r0, r1, #32
 80093d4:	ea50 000c 	orrs.w	r0, r0, ip
 80093d8:	d007      	beq.n	80093ea <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093da:	2008      	movs	r0, #8
 80093dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80093e2:	f040 0008 	orr.w	r0, r0, #8
 80093e6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093ea:	0510      	lsls	r0, r2, #20
 80093ec:	d50a      	bpl.n	8009404 <HAL_UART_IRQHandler+0x144>
 80093ee:	014e      	lsls	r6, r1, #5
 80093f0:	d508      	bpl.n	8009404 <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80093f6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093f8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80093fc:	f040 0020 	orr.w	r0, r0, #32
 8009400:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009404:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009408:	2800      	cmp	r0, #0
 800940a:	d092      	beq.n	8009332 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800940c:	0690      	lsls	r0, r2, #26
 800940e:	d50a      	bpl.n	8009426 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009410:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009414:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8009418:	4329      	orrs	r1, r5
 800941a:	d004      	beq.n	8009426 <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 800941c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800941e:	b112      	cbz	r2, 8009426 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8009420:	4620      	mov	r0, r4
 8009422:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009424:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8009426:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800942a:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800942c:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009430:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009434:	ea52 0501 	orrs.w	r5, r2, r1
 8009438:	f000 80f2 	beq.w	8009620 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009440:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	e843 2100 	strex	r1, r2, [r3]
 8009448:	2900      	cmp	r1, #0
 800944a:	d1f7      	bne.n	800943c <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800944c:	483f      	ldr	r0, [pc, #252]	; (800954c <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	f103 0208 	add.w	r2, r3, #8
 8009452:	e852 2f00 	ldrex	r2, [r2]
 8009456:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	f103 0508 	add.w	r5, r3, #8
 800945c:	e845 2100 	strex	r1, r2, [r5]
 8009460:	2900      	cmp	r1, #0
 8009462:	d1f4      	bne.n	800944e <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009464:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009466:	2a01      	cmp	r2, #1
 8009468:	d052      	beq.n	8009510 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800946c:	2120      	movs	r1, #32
 800946e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009472:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009474:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8009476:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009478:	064a      	lsls	r2, r1, #25
 800947a:	d55a      	bpl.n	8009532 <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	f103 0208 	add.w	r2, r3, #8
 8009480:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009488:	f103 0008 	add.w	r0, r3, #8
 800948c:	e840 2100 	strex	r1, r2, [r0]
 8009490:	2900      	cmp	r1, #0
 8009492:	d1f3      	bne.n	800947c <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 8009494:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009496:	2800      	cmp	r0, #0
 8009498:	d04b      	beq.n	8009532 <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800949a:	4b2d      	ldr	r3, [pc, #180]	; (8009550 <HAL_UART_IRQHandler+0x290>)
 800949c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800949e:	f7fd f9cb 	bl	8006838 <HAL_DMA_Abort_IT>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f43f af45 	beq.w	8009332 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80094aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80094ac:	e00e      	b.n	80094cc <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094ae:	0696      	lsls	r6, r2, #26
 80094b0:	f57f af1a 	bpl.w	80092e8 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094b4:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094b8:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 80094bc:	ea5c 0c0e 	orrs.w	ip, ip, lr
 80094c0:	f43f af12 	beq.w	80092e8 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 80094c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f43f af33 	beq.w	8009332 <HAL_UART_IRQHandler+0x72>
}
 80094cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094d0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d2:	0756      	lsls	r6, r2, #29
 80094d4:	f57f af7a 	bpl.w	80093cc <HAL_UART_IRQHandler+0x10c>
 80094d8:	07e8      	lsls	r0, r5, #31
 80094da:	f57f af77 	bpl.w	80093cc <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094de:	2004      	movs	r0, #4
 80094e0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094e2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80094e6:	f040 0002 	orr.w	r0, r0, #2
 80094ea:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 80094ee:	e76d      	b.n	80093cc <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 80094f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f43f af1d 	beq.w	8009332 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 80094f8:	4620      	mov	r0, r4
}
 80094fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80094fe:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009500:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8009504:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009506:	621a      	str	r2, [r3, #32]
}
 8009508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800950c:	f000 bcf4 	b.w	8009ef8 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009510:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009514:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	e843 2100 	strex	r1, r2, [r3]
 800951c:	2900      	cmp	r1, #0
 800951e:	d0a4      	beq.n	800946a <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	e853 2f00 	ldrex	r2, [r3]
 8009524:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	e843 2100 	strex	r1, r2, [r3]
 800952c:	2900      	cmp	r1, #0
 800952e:	d1ef      	bne.n	8009510 <HAL_UART_IRQHandler+0x250>
 8009530:	e79b      	b.n	800946a <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff fe4c 	bl	80091d0 <HAL_UART_ErrorCallback>
}
 8009538:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800953a:	4620      	mov	r0, r4
}
 800953c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009540:	f000 bcde 	b.w	8009f00 <HAL_UARTEx_TxFifoEmptyCallback>
 8009544:	10000001 	.word	0x10000001
 8009548:	04000120 	.word	0x04000120
 800954c:	effffffe 	.word	0xeffffffe
 8009550:	080092a9 	.word	0x080092a9
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009554:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8009558:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800955c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8009560:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009562:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8009564:	2a00      	cmp	r2, #0
 8009566:	f43f aee4 	beq.w	8009332 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800956a:	1a41      	subs	r1, r0, r1
 800956c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800956e:	2900      	cmp	r1, #0
 8009570:	f43f aedf 	beq.w	8009332 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009578:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	e843 2000 	strex	r0, r2, [r3]
 8009580:	2800      	cmp	r0, #0
 8009582:	d1f7      	bne.n	8009574 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009584:	4d29      	ldr	r5, [pc, #164]	; (800962c <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009586:	f103 0208 	add.w	r2, r3, #8
 800958a:	e852 2f00 	ldrex	r2, [r2]
 800958e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	f103 0c08 	add.w	ip, r3, #8
 8009594:	e84c 2000 	strex	r0, r2, [ip]
 8009598:	2800      	cmp	r0, #0
 800959a:	d1f4      	bne.n	8009586 <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 800959c:	2220      	movs	r2, #32
 800959e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80095a2:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095aa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	e843 2000 	strex	r0, r2, [r3]
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d1f7      	bne.n	80095a6 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7ff fe80 	bl	80092bc <HAL_UARTEx_RxEventCallback>
}
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	e843 2100 	strex	r1, r2, [r3]
 80095ca:	2900      	cmp	r1, #0
 80095cc:	d1f7      	bne.n	80095be <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ce:	f103 0208 	add.w	r2, r3, #8
 80095d2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	f103 0508 	add.w	r5, r3, #8
 80095de:	e845 2100 	strex	r1, r2, [r5]
 80095e2:	2900      	cmp	r1, #0
 80095e4:	d1f3      	bne.n	80095ce <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	f103 0208 	add.w	r2, r3, #8
 80095ea:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	f103 0508 	add.w	r5, r3, #8
 80095f6:	e845 2100 	strex	r1, r2, [r5]
 80095fa:	2900      	cmp	r1, #0
 80095fc:	d1f3      	bne.n	80095e6 <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 80095fe:	2220      	movs	r2, #32
 8009600:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009604:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	e843 2100 	strex	r1, r2, [r3]
 8009612:	2900      	cmp	r1, #0
 8009614:	d1f7      	bne.n	8009606 <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009616:	f7fd f8d5 	bl	80067c4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800961a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800961e:	e6a3      	b.n	8009368 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8009620:	4620      	mov	r0, r4
 8009622:	f7ff fdd5 	bl	80091d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009626:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	effffffe 	.word	0xeffffffe

08009630 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009630:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8009632:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009634:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009636:	2b01      	cmp	r3, #1
 8009638:	d002      	beq.n	8009640 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800963a:	f7ff fdc7 	bl	80091cc <HAL_UART_RxHalfCpltCallback>
}
 800963e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009640:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009644:	0849      	lsrs	r1, r1, #1
 8009646:	f7ff fe39 	bl	80092bc <HAL_UARTEx_RxEventCallback>
}
 800964a:	bd08      	pop	{r3, pc}

0800964c <UART_DMAReceiveCplt>:
{
 800964c:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800964e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009650:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	f012 0220 	ands.w	r2, r2, #32
 8009658:	d128      	bne.n	80096ac <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 800965a:	6803      	ldr	r3, [r0, #0]
 800965c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	e843 2100 	strex	r1, r2, [r3]
 800966c:	2900      	cmp	r1, #0
 800966e:	d1f7      	bne.n	8009660 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	f103 0208 	add.w	r2, r3, #8
 8009674:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009678:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	f103 0c08 	add.w	ip, r3, #8
 8009680:	e84c 2100 	strex	r1, r2, [ip]
 8009684:	2900      	cmp	r1, #0
 8009686:	d1f3      	bne.n	8009670 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	f103 0208 	add.w	r2, r3, #8
 800968c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	f103 0c08 	add.w	ip, r3, #8
 8009698:	e84c 2100 	strex	r1, r2, [ip]
 800969c:	2900      	cmp	r1, #0
 800969e:	d1f3      	bne.n	8009688 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80096a8:	2a01      	cmp	r2, #1
 80096aa:	d005      	beq.n	80096b8 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d013      	beq.n	80096da <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80096b2:	f7fa fe39 	bl	8004328 <HAL_UART_RxCpltCallback>
}
 80096b6:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096bc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	e843 2100 	strex	r1, r2, [r3]
 80096c4:	2900      	cmp	r1, #0
 80096c6:	d0f1      	beq.n	80096ac <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c8:	e853 2f00 	ldrex	r2, [r3]
 80096cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	e843 2100 	strex	r1, r2, [r3]
 80096d4:	2900      	cmp	r1, #0
 80096d6:	d1ef      	bne.n	80096b8 <UART_DMAReceiveCplt+0x6c>
 80096d8:	e7e8      	b.n	80096ac <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096da:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80096de:	f7ff fded 	bl	80092bc <HAL_UARTEx_RxEventCallback>
}
 80096e2:	bd08      	pop	{r3, pc}

080096e4 <UART_SetConfig>:
{
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80096e8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096ea:	6882      	ldr	r2, [r0, #8]
 80096ec:	6900      	ldr	r0, [r0, #16]
 80096ee:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096f0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096f2:	4302      	orrs	r2, r0
 80096f4:	430a      	orrs	r2, r1
 80096f6:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096f8:	49b2      	ldr	r1, [pc, #712]	; (80099c4 <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096fa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096fc:	4029      	ands	r1, r5
 80096fe:	430a      	orrs	r2, r1
 8009700:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	68e1      	ldr	r1, [r4, #12]
 8009706:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800970a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800970c:	49ae      	ldr	r1, [pc, #696]	; (80099c8 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800970e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009710:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009712:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009714:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009716:	f000 8081 	beq.w	800981c <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 800971a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800971c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009720:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8009724:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009726:	430a      	orrs	r2, r1
 8009728:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800972e:	f022 020f 	bic.w	r2, r2, #15
 8009732:	430a      	orrs	r2, r1
 8009734:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009736:	4aa5      	ldr	r2, [pc, #660]	; (80099cc <UART_SetConfig+0x2e8>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d027      	beq.n	800978c <UART_SetConfig+0xa8>
 800973c:	4aa4      	ldr	r2, [pc, #656]	; (80099d0 <UART_SetConfig+0x2ec>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d04b      	beq.n	80097da <UART_SetConfig+0xf6>
 8009742:	4aa4      	ldr	r2, [pc, #656]	; (80099d4 <UART_SetConfig+0x2f0>)
 8009744:	4293      	cmp	r3, r2
 8009746:	f000 8111 	beq.w	800996c <UART_SetConfig+0x288>
 800974a:	4aa3      	ldr	r2, [pc, #652]	; (80099d8 <UART_SetConfig+0x2f4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	f000 80b9 	beq.w	80098c4 <UART_SetConfig+0x1e0>
 8009752:	4aa2      	ldr	r2, [pc, #648]	; (80099dc <UART_SetConfig+0x2f8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d111      	bne.n	800977c <UART_SetConfig+0x98>
 8009758:	4ba1      	ldr	r3, [pc, #644]	; (80099e0 <UART_SetConfig+0x2fc>)
 800975a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009766:	f000 8126 	beq.w	80099b6 <UART_SetConfig+0x2d2>
 800976a:	f200 80d5 	bhi.w	8009918 <UART_SetConfig+0x234>
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 80d9 	beq.w	8009926 <UART_SetConfig+0x242>
 8009774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009778:	f000 80b0 	beq.w	80098dc <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 800977c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800977e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009780:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8009784:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009788:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800978a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800978c:	4b94      	ldr	r3, [pc, #592]	; (80099e0 <UART_SetConfig+0x2fc>)
 800978e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009792:	f003 0303 	and.w	r3, r3, #3
 8009796:	3b01      	subs	r3, #1
 8009798:	2b02      	cmp	r3, #2
 800979a:	f240 808d 	bls.w	80098b8 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800979e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80097a2:	f000 8103 	beq.w	80099ac <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80097a6:	f7fe fa0b 	bl	8007bc0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80097aa:	2800      	cmp	r0, #0
 80097ac:	f000 80dc 	beq.w	8009968 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80097b2:	6862      	ldr	r2, [r4, #4]
 80097b4:	4b8b      	ldr	r3, [pc, #556]	; (80099e4 <UART_SetConfig+0x300>)
 80097b6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80097ba:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097be:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80097c6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097ca:	f1a3 0210 	sub.w	r2, r3, #16
 80097ce:	428a      	cmp	r2, r1
 80097d0:	d8d4      	bhi.n	800977c <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	2000      	movs	r0, #0
 80097d6:	60d3      	str	r3, [r2, #12]
 80097d8:	e7d1      	b.n	800977e <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097da:	4b81      	ldr	r3, [pc, #516]	; (80099e0 <UART_SetConfig+0x2fc>)
 80097dc:	4a82      	ldr	r2, [pc, #520]	; (80099e8 <UART_SetConfig+0x304>)
 80097de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e2:	f003 030c 	and.w	r3, r3, #12
 80097e6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80097ec:	d07c      	beq.n	80098e8 <UART_SetConfig+0x204>
    switch (clocksource)
 80097ee:	2b08      	cmp	r3, #8
 80097f0:	d8c4      	bhi.n	800977c <UART_SetConfig+0x98>
 80097f2:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <UART_SetConfig+0x114>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009921 	.word	0x08009921
 80097fc:	080097a7 	.word	0x080097a7
 8009800:	080099a3 	.word	0x080099a3
 8009804:	0800977d 	.word	0x0800977d
 8009808:	080098e3 	.word	0x080098e3
 800980c:	0800977d 	.word	0x0800977d
 8009810:	0800977d 	.word	0x0800977d
 8009814:	0800977d 	.word	0x0800977d
 8009818:	08009993 	.word	0x08009993
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800981c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009820:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009824:	4311      	orrs	r1, r2
 8009826:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800982c:	486c      	ldr	r0, [pc, #432]	; (80099e0 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800982e:	f022 020f 	bic.w	r2, r2, #15
 8009832:	430a      	orrs	r2, r1
 8009834:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009836:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800983a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800983e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009842:	f000 80ac 	beq.w	800999e <UART_SetConfig+0x2ba>
 8009846:	d80b      	bhi.n	8009860 <UART_SetConfig+0x17c>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d038      	beq.n	80098be <UART_SetConfig+0x1da>
 800984c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009850:	d194      	bne.n	800977c <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8009852:	f7fe f867 	bl	8007924 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009856:	2800      	cmp	r0, #0
 8009858:	f000 8086 	beq.w	8009968 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800985c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800985e:	e004      	b.n	800986a <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009864:	d18a      	bne.n	800977c <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8009866:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800986a:	4b5e      	ldr	r3, [pc, #376]	; (80099e4 <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800986c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800986e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8009872:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009876:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800987a:	4299      	cmp	r1, r3
 800987c:	f63f af7e 	bhi.w	800977c <UART_SetConfig+0x98>
 8009880:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009884:	f63f af7a 	bhi.w	800977c <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009888:	2300      	movs	r3, #0
 800988a:	4619      	mov	r1, r3
 800988c:	f7f7 fa24 	bl	8000cd8 <__aeabi_uldivmod>
 8009890:	086a      	lsrs	r2, r5, #1
 8009892:	0203      	lsls	r3, r0, #8
 8009894:	0209      	lsls	r1, r1, #8
 8009896:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800989a:	1898      	adds	r0, r3, r2
 800989c:	f141 0100 	adc.w	r1, r1, #0
 80098a0:	462a      	mov	r2, r5
 80098a2:	2300      	movs	r3, #0
 80098a4:	f7f7 fa18 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098a8:	4a50      	ldr	r2, [pc, #320]	; (80099ec <UART_SetConfig+0x308>)
 80098aa:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80098ae:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098b0:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098b2:	f63f af63 	bhi.w	800977c <UART_SetConfig+0x98>
 80098b6:	e78c      	b.n	80097d2 <UART_SetConfig+0xee>
 80098b8:	4a4d      	ldr	r2, [pc, #308]	; (80099f0 <UART_SetConfig+0x30c>)
 80098ba:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80098bc:	e794      	b.n	80097e8 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 80098be:	f7fe f96d 	bl	8007b9c <HAL_RCC_GetPCLK1Freq>
        break;
 80098c2:	e7c8      	b.n	8009856 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098c4:	4b46      	ldr	r3, [pc, #280]	; (80099e0 <UART_SetConfig+0x2fc>)
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80098ce:	2b80      	cmp	r3, #128	; 0x80
 80098d0:	d071      	beq.n	80099b6 <UART_SetConfig+0x2d2>
 80098d2:	d861      	bhi.n	8009998 <UART_SetConfig+0x2b4>
 80098d4:	b33b      	cbz	r3, 8009926 <UART_SetConfig+0x242>
 80098d6:	2b40      	cmp	r3, #64	; 0x40
 80098d8:	f47f af50 	bne.w	800977c <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80098e0:	d061      	beq.n	80099a6 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 80098e2:	f7fe f81f 	bl	8007924 <HAL_RCC_GetSysClockFreq>
        break;
 80098e6:	e760      	b.n	80097aa <UART_SetConfig+0xc6>
    switch (clocksource)
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	f63f af47 	bhi.w	800977c <UART_SetConfig+0x98>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <UART_SetConfig+0x210>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	0800992d 	.word	0x0800992d
 80098f8:	080099ad 	.word	0x080099ad
 80098fc:	080099b3 	.word	0x080099b3
 8009900:	0800977d 	.word	0x0800977d
 8009904:	080099a7 	.word	0x080099a7
 8009908:	0800977d 	.word	0x0800977d
 800990c:	0800977d 	.word	0x0800977d
 8009910:	0800977d 	.word	0x0800977d
 8009914:	08009935 	.word	0x08009935
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800991c:	d036      	beq.n	800998c <UART_SetConfig+0x2a8>
 800991e:	e72d      	b.n	800977c <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009920:	f7fe f93c 	bl	8007b9c <HAL_RCC_GetPCLK1Freq>
        break;
 8009924:	e741      	b.n	80097aa <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009926:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800992a:	d1f9      	bne.n	8009920 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800992c:	f7fe f936 	bl	8007b9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009930:	b1d0      	cbz	r0, 8009968 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009932:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009934:	6862      	ldr	r2, [r4, #4]
 8009936:	4b2b      	ldr	r3, [pc, #172]	; (80099e4 <UART_SetConfig+0x300>)
 8009938:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800993c:	fbb0 f0f1 	udiv	r0, r0, r1
 8009940:	0853      	lsrs	r3, r2, #1
 8009942:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009946:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800994a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800994e:	f1a3 0210 	sub.w	r2, r3, #16
 8009952:	428a      	cmp	r2, r1
 8009954:	f63f af12 	bhi.w	800977c <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009958:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800995c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800995e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009960:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009964:	4313      	orrs	r3, r2
 8009966:	60cb      	str	r3, [r1, #12]
 8009968:	2000      	movs	r0, #0
 800996a:	e708      	b.n	800977e <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800996c:	4b1c      	ldr	r3, [pc, #112]	; (80099e0 <UART_SetConfig+0x2fc>)
 800996e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009972:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009976:	2b20      	cmp	r3, #32
 8009978:	d01d      	beq.n	80099b6 <UART_SetConfig+0x2d2>
 800997a:	d804      	bhi.n	8009986 <UART_SetConfig+0x2a2>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0d2      	beq.n	8009926 <UART_SetConfig+0x242>
 8009980:	2b10      	cmp	r3, #16
 8009982:	d0ab      	beq.n	80098dc <UART_SetConfig+0x1f8>
 8009984:	e6fa      	b.n	800977c <UART_SetConfig+0x98>
 8009986:	2b30      	cmp	r3, #48	; 0x30
 8009988:	f47f aef8 	bne.w	800977c <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800998c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009990:	d0d0      	beq.n	8009934 <UART_SetConfig+0x250>
    switch (clocksource)
 8009992:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009996:	e70c      	b.n	80097b2 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009998:	2bc0      	cmp	r3, #192	; 0xc0
 800999a:	d0f7      	beq.n	800998c <UART_SetConfig+0x2a8>
 800999c:	e6ee      	b.n	800977c <UART_SetConfig+0x98>
 800999e:	4815      	ldr	r0, [pc, #84]	; (80099f4 <UART_SetConfig+0x310>)
 80099a0:	e763      	b.n	800986a <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 80099a2:	4814      	ldr	r0, [pc, #80]	; (80099f4 <UART_SetConfig+0x310>)
 80099a4:	e705      	b.n	80097b2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80099a6:	f7fd ffbd 	bl	8007924 <HAL_RCC_GetSysClockFreq>
        break;
 80099aa:	e7c1      	b.n	8009930 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80099ac:	f7fe f908 	bl	8007bc0 <HAL_RCC_GetPCLK2Freq>
        break;
 80099b0:	e7be      	b.n	8009930 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 80099b2:	4810      	ldr	r0, [pc, #64]	; (80099f4 <UART_SetConfig+0x310>)
 80099b4:	e7be      	b.n	8009934 <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80099ba:	480e      	ldr	r0, [pc, #56]	; (80099f4 <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099bc:	f47f aef9 	bne.w	80097b2 <UART_SetConfig+0xce>
 80099c0:	e7b8      	b.n	8009934 <UART_SetConfig+0x250>
 80099c2:	bf00      	nop
 80099c4:	cfff69f3 	.word	0xcfff69f3
 80099c8:	40008000 	.word	0x40008000
 80099cc:	40013800 	.word	0x40013800
 80099d0:	40004400 	.word	0x40004400
 80099d4:	40004800 	.word	0x40004800
 80099d8:	40004c00 	.word	0x40004c00
 80099dc:	40005000 	.word	0x40005000
 80099e0:	40021000 	.word	0x40021000
 80099e4:	0800cdac 	.word	0x0800cdac
 80099e8:	0800cd9c 	.word	0x0800cd9c
 80099ec:	000ffcff 	.word	0x000ffcff
 80099f0:	0800cd98 	.word	0x0800cd98
 80099f4:	00f42400 	.word	0x00f42400

080099f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80099fa:	07da      	lsls	r2, r3, #31
{
 80099fc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099fe:	d506      	bpl.n	8009a0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a00:	6801      	ldr	r1, [r0, #0]
 8009a02:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009a04:	684a      	ldr	r2, [r1, #4]
 8009a06:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009a0a:	4322      	orrs	r2, r4
 8009a0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a0e:	079c      	lsls	r4, r3, #30
 8009a10:	d506      	bpl.n	8009a20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a12:	6801      	ldr	r1, [r0, #0]
 8009a14:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009a16:	684a      	ldr	r2, [r1, #4]
 8009a18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a1c:	4322      	orrs	r2, r4
 8009a1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a20:	0759      	lsls	r1, r3, #29
 8009a22:	d506      	bpl.n	8009a32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a24:	6801      	ldr	r1, [r0, #0]
 8009a26:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009a28:	684a      	ldr	r2, [r1, #4]
 8009a2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a2e:	4322      	orrs	r2, r4
 8009a30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a32:	071a      	lsls	r2, r3, #28
 8009a34:	d506      	bpl.n	8009a44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a36:	6801      	ldr	r1, [r0, #0]
 8009a38:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009a3a:	684a      	ldr	r2, [r1, #4]
 8009a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a40:	4322      	orrs	r2, r4
 8009a42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a44:	06dc      	lsls	r4, r3, #27
 8009a46:	d506      	bpl.n	8009a56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a48:	6801      	ldr	r1, [r0, #0]
 8009a4a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009a4c:	688a      	ldr	r2, [r1, #8]
 8009a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a52:	4322      	orrs	r2, r4
 8009a54:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a56:	0699      	lsls	r1, r3, #26
 8009a58:	d506      	bpl.n	8009a68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a5a:	6801      	ldr	r1, [r0, #0]
 8009a5c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009a5e:	688a      	ldr	r2, [r1, #8]
 8009a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a64:	4322      	orrs	r2, r4
 8009a66:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a68:	065a      	lsls	r2, r3, #25
 8009a6a:	d509      	bpl.n	8009a80 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a6c:	6801      	ldr	r1, [r0, #0]
 8009a6e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009a70:	684a      	ldr	r2, [r1, #4]
 8009a72:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009a76:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a7c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a7e:	d00b      	beq.n	8009a98 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a80:	061b      	lsls	r3, r3, #24
 8009a82:	d506      	bpl.n	8009a92 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a84:	6802      	ldr	r2, [r0, #0]
 8009a86:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009a88:	6853      	ldr	r3, [r2, #4]
 8009a8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	6053      	str	r3, [r2, #4]
}
 8009a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a96:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a98:	684a      	ldr	r2, [r1, #4]
 8009a9a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009a9c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009aa0:	4322      	orrs	r2, r4
 8009aa2:	604a      	str	r2, [r1, #4]
 8009aa4:	e7ec      	b.n	8009a80 <UART_AdvFeatureConfig+0x88>
 8009aa6:	bf00      	nop

08009aa8 <UART_WaitOnFlagUntilTimeout>:
{
 8009aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ab0:	6804      	ldr	r4, [r0, #0]
{
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	460e      	mov	r6, r1
 8009ab6:	4615      	mov	r5, r2
 8009ab8:	4699      	mov	r9, r3
 8009aba:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009abe:	d10a      	bne.n	8009ad6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ac0:	69e3      	ldr	r3, [r4, #28]
 8009ac2:	ea36 0303 	bics.w	r3, r6, r3
 8009ac6:	bf0c      	ite	eq
 8009ac8:	2301      	moveq	r3, #1
 8009aca:	2300      	movne	r3, #0
 8009acc:	429d      	cmp	r5, r3
 8009ace:	d0f7      	beq.n	8009ac0 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8009ad0:	2000      	movs	r0, #0
}
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad6:	69e2      	ldr	r2, [r4, #28]
 8009ad8:	ea36 0202 	bics.w	r2, r6, r2
 8009adc:	bf0c      	ite	eq
 8009ade:	2301      	moveq	r3, #1
 8009ae0:	2300      	movne	r3, #0
 8009ae2:	42ab      	cmp	r3, r5
 8009ae4:	d1f4      	bne.n	8009ad0 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae6:	f7f9 f9ed 	bl	8002ec4 <HAL_GetTick>
 8009aea:	eba0 0009 	sub.w	r0, r0, r9
 8009aee:	4540      	cmp	r0, r8
 8009af0:	d833      	bhi.n	8009b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009af2:	f1b8 0f00 	cmp.w	r8, #0
 8009af6:	d030      	beq.n	8009b5a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009af8:	683c      	ldr	r4, [r7, #0]
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	0758      	lsls	r0, r3, #29
 8009afe:	4622      	mov	r2, r4
 8009b00:	d5db      	bpl.n	8009aba <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b02:	69e3      	ldr	r3, [r4, #28]
 8009b04:	0519      	lsls	r1, r3, #20
 8009b06:	d5d8      	bpl.n	8009aba <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b0c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	e844 3100 	strex	r1, r3, [r4]
 8009b1a:	b139      	cbz	r1, 8009b2c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	e852 3f00 	ldrex	r3, [r2]
 8009b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	e842 3100 	strex	r1, r3, [r2]
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	d1f7      	bne.n	8009b1c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	f102 0308 	add.w	r3, r2, #8
 8009b30:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b34:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	f102 0008 	add.w	r0, r2, #8
 8009b3c:	e840 3100 	strex	r1, r3, [r0]
 8009b40:	2900      	cmp	r1, #0
 8009b42:	d1f3      	bne.n	8009b2c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8009b44:	2320      	movs	r3, #32
 8009b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009b4a:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009b4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8009b52:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009b58:	e7bb      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0x2a>
 8009b5a:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	e842 3100 	strex	r1, r3, [r2]
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	d1f7      	bne.n	8009b5c <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	f102 0308 	add.w	r3, r2, #8
 8009b70:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	f102 0008 	add.w	r0, r2, #8
 8009b7c:	e840 3100 	strex	r1, r3, [r0]
 8009b80:	2900      	cmp	r1, #0
 8009b82:	d1f3      	bne.n	8009b6c <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8009b84:	2320      	movs	r3, #32
 8009b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009b8a:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8009b92:	2003      	movs	r0, #3
 8009b94:	e79d      	b.n	8009ad2 <UART_WaitOnFlagUntilTimeout+0x2a>
 8009b96:	bf00      	nop

08009b98 <HAL_UART_Transmit>:
{
 8009b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8009b9e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8009ba2:	2820      	cmp	r0, #32
{
 8009ba4:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8009ba6:	f040 8090 	bne.w	8009cca <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8009baa:	4689      	mov	r9, r1
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d048      	beq.n	8009c42 <HAL_UART_Transmit+0xaa>
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	d045      	beq.n	8009c42 <HAL_UART_Transmit+0xaa>
 8009bb6:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8009bb8:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	f000 8084 	beq.w	8009cca <HAL_UART_Transmit+0x132>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc8:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bcc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bce:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bd2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8009bd6:	f7f9 f975 	bl	8002ec4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bda:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8009bdc:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8009be4:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 8009be8:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bea:	d072      	beq.n	8009cd2 <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 8009bec:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8009bf0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8009bf2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8009bf4:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009bf8:	b1b3      	cbz	r3, 8009c28 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bfa:	682c      	ldr	r4, [r5, #0]
 8009bfc:	1c71      	adds	r1, r6, #1
 8009bfe:	d124      	bne.n	8009c4a <HAL_UART_Transmit+0xb2>
 8009c00:	69e2      	ldr	r2, [r4, #28]
 8009c02:	0612      	lsls	r2, r2, #24
 8009c04:	d5fc      	bpl.n	8009c00 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 8009c06:	f1b9 0f00 	cmp.w	r9, #0
 8009c0a:	d059      	beq.n	8009cc0 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c0c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009c10:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8009c12:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8009c16:	3b01      	subs	r3, #1
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009c1e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e9      	bne.n	8009bfc <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c28:	9600      	str	r6, [sp, #0]
 8009c2a:	463b      	mov	r3, r7
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2140      	movs	r1, #64	; 0x40
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7ff ff39 	bl	8009aa8 <UART_WaitOnFlagUntilTimeout>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d171      	bne.n	8009d1e <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8009c3a:	2320      	movs	r3, #32
 8009c3c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8009c40:	e000      	b.n	8009c44 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8009c42:	2001      	movs	r0, #1
}
 8009c44:	b003      	add	sp, #12
 8009c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c4a:	69e3      	ldr	r3, [r4, #28]
 8009c4c:	061b      	lsls	r3, r3, #24
 8009c4e:	d4da      	bmi.n	8009c06 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c50:	f7f9 f938 	bl	8002ec4 <HAL_GetTick>
 8009c54:	1bc0      	subs	r0, r0, r7
 8009c56:	4286      	cmp	r6, r0
 8009c58:	d341      	bcc.n	8009cde <HAL_UART_Transmit+0x146>
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	d03f      	beq.n	8009cde <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c5e:	682c      	ldr	r4, [r5, #0]
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	0752      	lsls	r2, r2, #29
 8009c64:	4623      	mov	r3, r4
 8009c66:	d5c9      	bpl.n	8009bfc <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c68:	69e2      	ldr	r2, [r4, #28]
 8009c6a:	0510      	lsls	r0, r2, #20
 8009c6c:	d5c6      	bpl.n	8009bfc <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c72:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	e844 2100 	strex	r1, r2, [r4]
 8009c80:	b139      	cbz	r1, 8009c92 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	e853 2f00 	ldrex	r2, [r3]
 8009c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	e843 2100 	strex	r1, r2, [r3]
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	d1f7      	bne.n	8009c82 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c92:	f103 0208 	add.w	r2, r3, #8
 8009c96:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	f103 0008 	add.w	r0, r3, #8
 8009ca2:	e840 2100 	strex	r1, r2, [r0]
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	d1f3      	bne.n	8009c92 <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8009caa:	2320      	movs	r3, #32
 8009cac:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009cb0:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009cb4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8009cb8:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cba:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009cbe:	e7c1      	b.n	8009c44 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cc0:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc8:	e7a2      	b.n	8009c10 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 8009cca:	2002      	movs	r0, #2
}
 8009ccc:	b003      	add	sp, #12
 8009cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd2:	692b      	ldr	r3, [r5, #16]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d189      	bne.n	8009bec <HAL_UART_Transmit+0x54>
 8009cd8:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8009cda:	4699      	mov	r9, r3
 8009cdc:	e786      	b.n	8009bec <HAL_UART_Transmit+0x54>
 8009cde:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ce4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	e843 2100 	strex	r1, r2, [r3]
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d1f7      	bne.n	8009ce0 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf0:	f103 0208 	add.w	r2, r3, #8
 8009cf4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	f103 0008 	add.w	r0, r3, #8
 8009d00:	e840 2100 	strex	r1, r2, [r0]
 8009d04:	2900      	cmp	r1, #0
 8009d06:	d1f3      	bne.n	8009cf0 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 8009d08:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8009d0a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8009d0c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009d10:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009d14:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8009d18:	b003      	add	sp, #12
 8009d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8009d1e:	2003      	movs	r0, #3
 8009d20:	e790      	b.n	8009c44 <HAL_UART_Transmit+0xac>
 8009d22:	bf00      	nop

08009d24 <HAL_UART_Init>:
  if (huart == NULL)
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d066      	beq.n	8009df6 <HAL_UART_Init+0xd2>
{
 8009d28:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8009d2a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8009d2e:	b082      	sub	sp, #8
 8009d30:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d04c      	beq.n	8009dd0 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8009d36:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009d38:	2324      	movs	r3, #36	; 0x24
 8009d3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8009d3e:	6813      	ldr	r3, [r2, #0]
 8009d40:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d44:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009d46:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d48:	f7ff fccc 	bl	80096e4 <UART_SetConfig>
 8009d4c:	2801      	cmp	r0, #1
 8009d4e:	d03c      	beq.n	8009dca <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d135      	bne.n	8009dc2 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	6859      	ldr	r1, [r3, #4]
 8009d5a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8009d5e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d60:	6899      	ldr	r1, [r3, #8]
 8009d62:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8009d66:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009d68:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8009d6c:	f041 0101 	orr.w	r1, r1, #1
 8009d70:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d72:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009d76:	f7f9 f8a5 	bl	8002ec4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8009d80:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d82:	d40e      	bmi.n	8009da2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	075b      	lsls	r3, r3, #29
 8009d88:	d427      	bmi.n	8009dda <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009d92:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009d96:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8009d9a:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009d9e:	b002      	add	sp, #8
 8009da0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009da2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4603      	mov	r3, r0
 8009dac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009db0:	4620      	mov	r0, r4
 8009db2:	f7ff fe79 	bl	8009aa8 <UART_WaitOnFlagUntilTimeout>
 8009db6:	b9e0      	cbnz	r0, 8009df2 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	075b      	lsls	r3, r3, #29
 8009dbe:	d40c      	bmi.n	8009dda <HAL_UART_Init+0xb6>
 8009dc0:	e7e3      	b.n	8009d8a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7ff fe18 	bl	80099f8 <UART_AdvFeatureConfig>
 8009dc8:	e7c5      	b.n	8009d56 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8009dca:	2001      	movs	r0, #1
}
 8009dcc:	b002      	add	sp, #8
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8009dd0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009dd4:	f7fb fc5a 	bl	800568c <HAL_UART_MspInit>
 8009dd8:	e7ad      	b.n	8009d36 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2200      	movs	r2, #0
 8009de2:	4633      	mov	r3, r6
 8009de4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009de8:	4620      	mov	r0, r4
 8009dea:	f7ff fe5d 	bl	8009aa8 <UART_WaitOnFlagUntilTimeout>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d0cb      	beq.n	8009d8a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8009df2:	2003      	movs	r0, #3
 8009df4:	e7d3      	b.n	8009d9e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8009df6:	2001      	movs	r0, #1
}
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop

08009dfc <UART_Start_Receive_DMA>:
{
 8009dfc:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dfe:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e00:	2500      	movs	r5, #0
 8009e02:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 8009e06:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009e08:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8009e0a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e0e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8009e12:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009e14:	b168      	cbz	r0, 8009e32 <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e16:	4e20      	ldr	r6, [pc, #128]	; (8009e98 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8009e18:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	460a      	mov	r2, r1
 8009e1e:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e20:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e22:	4e1e      	ldr	r6, [pc, #120]	; (8009e9c <UART_Start_Receive_DMA+0xa0>)
 8009e24:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e26:	4e1e      	ldr	r6, [pc, #120]	; (8009ea0 <UART_Start_Receive_DMA+0xa4>)
 8009e28:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009e2a:	3124      	adds	r1, #36	; 0x24
 8009e2c:	f7fc fc70 	bl	8006710 <HAL_DMA_Start_IT>
 8009e30:	bb40      	cbnz	r0, 8009e84 <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e32:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8009e34:	2200      	movs	r2, #0
 8009e36:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e3a:	b14b      	cbz	r3, 8009e50 <UART_Start_Receive_DMA+0x54>
 8009e3c:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	e843 2100 	strex	r1, r2, [r3]
 8009e4a:	2900      	cmp	r1, #0
 8009e4c:	d1f7      	bne.n	8009e3e <UART_Start_Receive_DMA+0x42>
 8009e4e:	e000      	b.n	8009e52 <UART_Start_Receive_DMA+0x56>
 8009e50:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	f103 0208 	add.w	r2, r3, #8
 8009e56:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	f103 0008 	add.w	r0, r3, #8
 8009e62:	e840 2100 	strex	r1, r2, [r0]
 8009e66:	2900      	cmp	r1, #0
 8009e68:	d1f3      	bne.n	8009e52 <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6a:	f103 0208 	add.w	r2, r3, #8
 8009e6e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	f103 0108 	add.w	r1, r3, #8
 8009e7a:	e841 2000 	strex	r0, r2, [r1]
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d1f3      	bne.n	8009e6a <UART_Start_Receive_DMA+0x6e>
}
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e84:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8009e86:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8009e88:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e8c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 8009e90:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8009e92:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8009e96:	bd70      	pop	{r4, r5, r6, pc}
 8009e98:	0800964d 	.word	0x0800964d
 8009e9c:	08009631 	.word	0x08009631
 8009ea0:	080091d5 	.word	0x080091d5

08009ea4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ea4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009ea8:	2b20      	cmp	r3, #32
 8009eaa:	d120      	bne.n	8009eee <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8009eac:	b1e9      	cbz	r1, 8009eea <HAL_UART_Receive_DMA+0x46>
 8009eae:	b1e2      	cbz	r2, 8009eea <HAL_UART_Receive_DMA+0x46>
    __HAL_LOCK(huart);
 8009eb0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d01a      	beq.n	8009eee <HAL_UART_Receive_DMA+0x4a>
{
 8009eb8:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009eba:	4b0e      	ldr	r3, [pc, #56]	; (8009ef4 <HAL_UART_Receive_DMA+0x50>)
 8009ebc:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8009ebe:	2501      	movs	r5, #1
 8009ec0:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ec4:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec6:	f04f 0500 	mov.w	r5, #0
 8009eca:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ecc:	d00a      	beq.n	8009ee4 <HAL_UART_Receive_DMA+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	d507      	bpl.n	8009ee4 <HAL_UART_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed4:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	e844 3500 	strex	r5, r3, [r4]
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	d1f7      	bne.n	8009ed4 <HAL_UART_Receive_DMA+0x30>
}
 8009ee4:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ee6:	f7ff bf89 	b.w	8009dfc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8009eea:	2001      	movs	r0, #1
 8009eec:	4770      	bx	lr
    return HAL_BUSY;
 8009eee:	2002      	movs	r0, #2
}
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40008000 	.word	0x40008000

08009ef8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop

08009efc <HAL_UARTEx_RxFifoFullCallback>:
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop

08009f00 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop

08009f04 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f04:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d017      	beq.n	8009f3c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f0c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009f0e:	2324      	movs	r3, #36	; 0x24
{
 8009f10:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009f12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f16:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f18:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f1a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8009f1c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f20:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009f24:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f26:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f28:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f2a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8009f2e:	2220      	movs	r2, #32
 8009f30:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8009f34:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8009f38:	4618      	mov	r0, r3
}
 8009f3a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009f3c:	2002      	movs	r0, #2
}
 8009f3e:	4770      	bx	lr

08009f40 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f40:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009f44:	2a01      	cmp	r2, #1
 8009f46:	d037      	beq.n	8009fb8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8009f48:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f4a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009f4c:	2024      	movs	r0, #36	; 0x24
{
 8009f4e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009f50:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f54:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f56:	6810      	ldr	r0, [r2, #0]
 8009f58:	f020 0001 	bic.w	r0, r0, #1
 8009f5c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f5e:	6890      	ldr	r0, [r2, #8]
 8009f60:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8009f64:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f66:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f68:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f6a:	b310      	cbz	r0, 8009fb2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f6c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f6e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f70:	4d12      	ldr	r5, [pc, #72]	; (8009fbc <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f72:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f76:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f7a:	4911      	ldr	r1, [pc, #68]	; (8009fc0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009f7c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f80:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f84:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f88:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f8c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f8e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f90:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f94:	fbb1 f1f5 	udiv	r1, r1, r5
 8009f98:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009fa2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fa4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009fa6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009faa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009fac:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009fb0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009fb2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	e7ef      	b.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009fb8:	2002      	movs	r0, #2
}
 8009fba:	4770      	bx	lr
 8009fbc:	0800cdc4 	.word	0x0800cdc4
 8009fc0:	0800cdcc 	.word	0x0800cdcc

08009fc4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009fc4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009fc8:	2a01      	cmp	r2, #1
 8009fca:	d037      	beq.n	800a03c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8009fcc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fce:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009fd0:	2024      	movs	r0, #36	; 0x24
{
 8009fd2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009fd4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fd8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009fda:	6810      	ldr	r0, [r2, #0]
 8009fdc:	f020 0001 	bic.w	r0, r0, #1
 8009fe0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fe2:	6890      	ldr	r0, [r2, #8]
 8009fe4:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8009fe8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fea:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fec:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fee:	b310      	cbz	r0, 800a036 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ff0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ff2:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ff4:	4d12      	ldr	r5, [pc, #72]	; (800a040 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ff6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ffa:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ffe:	4911      	ldr	r1, [pc, #68]	; (800a044 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a000:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a004:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a008:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a00c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a010:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a012:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a014:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a018:	fbb1 f1f5 	udiv	r1, r1, r5
 800a01c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a020:	2100      	movs	r1, #0
 800a022:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a026:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a028:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a02a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800a02e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a030:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800a034:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a036:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a038:	4608      	mov	r0, r1
 800a03a:	e7ef      	b.n	800a01c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a03c:	2002      	movs	r0, #2
}
 800a03e:	4770      	bx	lr
 800a040:	0800cdc4 	.word	0x0800cdc4
 800a044:	0800cdcc 	.word	0x0800cdcc

0800a048 <__cvt>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	ec55 4b10 	vmov	r4, r5, d0
 800a050:	2d00      	cmp	r5, #0
 800a052:	460e      	mov	r6, r1
 800a054:	4619      	mov	r1, r3
 800a056:	462b      	mov	r3, r5
 800a058:	bfbb      	ittet	lt
 800a05a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a05e:	461d      	movlt	r5, r3
 800a060:	2300      	movge	r3, #0
 800a062:	232d      	movlt	r3, #45	; 0x2d
 800a064:	700b      	strb	r3, [r1, #0]
 800a066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a06c:	4691      	mov	r9, r2
 800a06e:	f023 0820 	bic.w	r8, r3, #32
 800a072:	bfbc      	itt	lt
 800a074:	4622      	movlt	r2, r4
 800a076:	4614      	movlt	r4, r2
 800a078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a07c:	d005      	beq.n	800a08a <__cvt+0x42>
 800a07e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a082:	d100      	bne.n	800a086 <__cvt+0x3e>
 800a084:	3601      	adds	r6, #1
 800a086:	2102      	movs	r1, #2
 800a088:	e000      	b.n	800a08c <__cvt+0x44>
 800a08a:	2103      	movs	r1, #3
 800a08c:	ab03      	add	r3, sp, #12
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	ab02      	add	r3, sp, #8
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	ec45 4b10 	vmov	d0, r4, r5
 800a098:	4653      	mov	r3, sl
 800a09a:	4632      	mov	r2, r6
 800a09c:	f000 ffec 	bl	800b078 <_dtoa_r>
 800a0a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	d102      	bne.n	800a0ae <__cvt+0x66>
 800a0a8:	f019 0f01 	tst.w	r9, #1
 800a0ac:	d022      	beq.n	800a0f4 <__cvt+0xac>
 800a0ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0b2:	eb07 0906 	add.w	r9, r7, r6
 800a0b6:	d110      	bne.n	800a0da <__cvt+0x92>
 800a0b8:	783b      	ldrb	r3, [r7, #0]
 800a0ba:	2b30      	cmp	r3, #48	; 0x30
 800a0bc:	d10a      	bne.n	800a0d4 <__cvt+0x8c>
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f7f6 fd27 	bl	8000b18 <__aeabi_dcmpeq>
 800a0ca:	b918      	cbnz	r0, 800a0d4 <__cvt+0x8c>
 800a0cc:	f1c6 0601 	rsb	r6, r6, #1
 800a0d0:	f8ca 6000 	str.w	r6, [sl]
 800a0d4:	f8da 3000 	ldr.w	r3, [sl]
 800a0d8:	4499      	add	r9, r3
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7f6 fd19 	bl	8000b18 <__aeabi_dcmpeq>
 800a0e6:	b108      	cbz	r0, 800a0ec <__cvt+0xa4>
 800a0e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0ec:	2230      	movs	r2, #48	; 0x30
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	454b      	cmp	r3, r9
 800a0f2:	d307      	bcc.n	800a104 <__cvt+0xbc>
 800a0f4:	9b03      	ldr	r3, [sp, #12]
 800a0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0f8:	1bdb      	subs	r3, r3, r7
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	b004      	add	sp, #16
 800a100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a104:	1c59      	adds	r1, r3, #1
 800a106:	9103      	str	r1, [sp, #12]
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e7f0      	b.n	800a0ee <__cvt+0xa6>

0800a10c <__exponent>:
 800a10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a10e:	4603      	mov	r3, r0
 800a110:	2900      	cmp	r1, #0
 800a112:	bfb8      	it	lt
 800a114:	4249      	neglt	r1, r1
 800a116:	f803 2b02 	strb.w	r2, [r3], #2
 800a11a:	bfb4      	ite	lt
 800a11c:	222d      	movlt	r2, #45	; 0x2d
 800a11e:	222b      	movge	r2, #43	; 0x2b
 800a120:	2909      	cmp	r1, #9
 800a122:	7042      	strb	r2, [r0, #1]
 800a124:	dd2a      	ble.n	800a17c <__exponent+0x70>
 800a126:	f10d 0207 	add.w	r2, sp, #7
 800a12a:	4617      	mov	r7, r2
 800a12c:	260a      	movs	r6, #10
 800a12e:	4694      	mov	ip, r2
 800a130:	fb91 f5f6 	sdiv	r5, r1, r6
 800a134:	fb06 1415 	mls	r4, r6, r5, r1
 800a138:	3430      	adds	r4, #48	; 0x30
 800a13a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a13e:	460c      	mov	r4, r1
 800a140:	2c63      	cmp	r4, #99	; 0x63
 800a142:	f102 32ff 	add.w	r2, r2, #4294967295
 800a146:	4629      	mov	r1, r5
 800a148:	dcf1      	bgt.n	800a12e <__exponent+0x22>
 800a14a:	3130      	adds	r1, #48	; 0x30
 800a14c:	f1ac 0402 	sub.w	r4, ip, #2
 800a150:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a154:	1c41      	adds	r1, r0, #1
 800a156:	4622      	mov	r2, r4
 800a158:	42ba      	cmp	r2, r7
 800a15a:	d30a      	bcc.n	800a172 <__exponent+0x66>
 800a15c:	f10d 0209 	add.w	r2, sp, #9
 800a160:	eba2 020c 	sub.w	r2, r2, ip
 800a164:	42bc      	cmp	r4, r7
 800a166:	bf88      	it	hi
 800a168:	2200      	movhi	r2, #0
 800a16a:	4413      	add	r3, r2
 800a16c:	1a18      	subs	r0, r3, r0
 800a16e:	b003      	add	sp, #12
 800a170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a172:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a176:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a17a:	e7ed      	b.n	800a158 <__exponent+0x4c>
 800a17c:	2330      	movs	r3, #48	; 0x30
 800a17e:	3130      	adds	r1, #48	; 0x30
 800a180:	7083      	strb	r3, [r0, #2]
 800a182:	70c1      	strb	r1, [r0, #3]
 800a184:	1d03      	adds	r3, r0, #4
 800a186:	e7f1      	b.n	800a16c <__exponent+0x60>

0800a188 <_printf_float>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	ed2d 8b02 	vpush	{d8}
 800a190:	b08d      	sub	sp, #52	; 0x34
 800a192:	460c      	mov	r4, r1
 800a194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a198:	4616      	mov	r6, r2
 800a19a:	461f      	mov	r7, r3
 800a19c:	4605      	mov	r5, r0
 800a19e:	f000 fe6d 	bl	800ae7c <_localeconv_r>
 800a1a2:	f8d0 a000 	ldr.w	sl, [r0]
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	f7f6 f88a 	bl	80002c0 <strlen>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1bc:	3307      	adds	r3, #7
 800a1be:	f023 0307 	bic.w	r3, r3, #7
 800a1c2:	f103 0208 	add.w	r2, r3, #8
 800a1c6:	f8c8 2000 	str.w	r2, [r8]
 800a1ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1d2:	9307      	str	r3, [sp, #28]
 800a1d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1d8:	ee08 0a10 	vmov	s16, r0
 800a1dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a1e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1e4:	4b9e      	ldr	r3, [pc, #632]	; (800a460 <_printf_float+0x2d8>)
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	f7f6 fcc7 	bl	8000b7c <__aeabi_dcmpun>
 800a1ee:	bb88      	cbnz	r0, 800a254 <_printf_float+0xcc>
 800a1f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1f4:	4b9a      	ldr	r3, [pc, #616]	; (800a460 <_printf_float+0x2d8>)
 800a1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fa:	f7f6 fca1 	bl	8000b40 <__aeabi_dcmple>
 800a1fe:	bb48      	cbnz	r0, 800a254 <_printf_float+0xcc>
 800a200:	2200      	movs	r2, #0
 800a202:	2300      	movs	r3, #0
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f6 fc90 	bl	8000b2c <__aeabi_dcmplt>
 800a20c:	b110      	cbz	r0, 800a214 <_printf_float+0x8c>
 800a20e:	232d      	movs	r3, #45	; 0x2d
 800a210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a214:	4a93      	ldr	r2, [pc, #588]	; (800a464 <_printf_float+0x2dc>)
 800a216:	4b94      	ldr	r3, [pc, #592]	; (800a468 <_printf_float+0x2e0>)
 800a218:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a21c:	bf94      	ite	ls
 800a21e:	4690      	movls	r8, r2
 800a220:	4698      	movhi	r8, r3
 800a222:	2303      	movs	r3, #3
 800a224:	6123      	str	r3, [r4, #16]
 800a226:	9b05      	ldr	r3, [sp, #20]
 800a228:	f023 0304 	bic.w	r3, r3, #4
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	f04f 0900 	mov.w	r9, #0
 800a232:	9700      	str	r7, [sp, #0]
 800a234:	4633      	mov	r3, r6
 800a236:	aa0b      	add	r2, sp, #44	; 0x2c
 800a238:	4621      	mov	r1, r4
 800a23a:	4628      	mov	r0, r5
 800a23c:	f000 f9da 	bl	800a5f4 <_printf_common>
 800a240:	3001      	adds	r0, #1
 800a242:	f040 8090 	bne.w	800a366 <_printf_float+0x1de>
 800a246:	f04f 30ff 	mov.w	r0, #4294967295
 800a24a:	b00d      	add	sp, #52	; 0x34
 800a24c:	ecbd 8b02 	vpop	{d8}
 800a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a254:	4642      	mov	r2, r8
 800a256:	464b      	mov	r3, r9
 800a258:	4640      	mov	r0, r8
 800a25a:	4649      	mov	r1, r9
 800a25c:	f7f6 fc8e 	bl	8000b7c <__aeabi_dcmpun>
 800a260:	b140      	cbz	r0, 800a274 <_printf_float+0xec>
 800a262:	464b      	mov	r3, r9
 800a264:	2b00      	cmp	r3, #0
 800a266:	bfbc      	itt	lt
 800a268:	232d      	movlt	r3, #45	; 0x2d
 800a26a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a26e:	4a7f      	ldr	r2, [pc, #508]	; (800a46c <_printf_float+0x2e4>)
 800a270:	4b7f      	ldr	r3, [pc, #508]	; (800a470 <_printf_float+0x2e8>)
 800a272:	e7d1      	b.n	800a218 <_printf_float+0x90>
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a27a:	9206      	str	r2, [sp, #24]
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	d13f      	bne.n	800a300 <_printf_float+0x178>
 800a280:	2306      	movs	r3, #6
 800a282:	6063      	str	r3, [r4, #4]
 800a284:	9b05      	ldr	r3, [sp, #20]
 800a286:	6861      	ldr	r1, [r4, #4]
 800a288:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a28c:	2300      	movs	r3, #0
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	ab0a      	add	r3, sp, #40	; 0x28
 800a292:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a296:	ab09      	add	r3, sp, #36	; 0x24
 800a298:	ec49 8b10 	vmov	d0, r8, r9
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	6022      	str	r2, [r4, #0]
 800a2a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f7ff fecf 	bl	800a048 <__cvt>
 800a2aa:	9b06      	ldr	r3, [sp, #24]
 800a2ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2ae:	2b47      	cmp	r3, #71	; 0x47
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	d108      	bne.n	800a2c6 <_printf_float+0x13e>
 800a2b4:	1cc8      	adds	r0, r1, #3
 800a2b6:	db02      	blt.n	800a2be <_printf_float+0x136>
 800a2b8:	6863      	ldr	r3, [r4, #4]
 800a2ba:	4299      	cmp	r1, r3
 800a2bc:	dd41      	ble.n	800a342 <_printf_float+0x1ba>
 800a2be:	f1ab 0302 	sub.w	r3, fp, #2
 800a2c2:	fa5f fb83 	uxtb.w	fp, r3
 800a2c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2ca:	d820      	bhi.n	800a30e <_printf_float+0x186>
 800a2cc:	3901      	subs	r1, #1
 800a2ce:	465a      	mov	r2, fp
 800a2d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2d4:	9109      	str	r1, [sp, #36]	; 0x24
 800a2d6:	f7ff ff19 	bl	800a10c <__exponent>
 800a2da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2dc:	1813      	adds	r3, r2, r0
 800a2de:	2a01      	cmp	r2, #1
 800a2e0:	4681      	mov	r9, r0
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	dc02      	bgt.n	800a2ec <_printf_float+0x164>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	07d2      	lsls	r2, r2, #31
 800a2ea:	d501      	bpl.n	800a2f0 <_printf_float+0x168>
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	6123      	str	r3, [r4, #16]
 800a2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d09c      	beq.n	800a232 <_printf_float+0xaa>
 800a2f8:	232d      	movs	r3, #45	; 0x2d
 800a2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2fe:	e798      	b.n	800a232 <_printf_float+0xaa>
 800a300:	9a06      	ldr	r2, [sp, #24]
 800a302:	2a47      	cmp	r2, #71	; 0x47
 800a304:	d1be      	bne.n	800a284 <_printf_float+0xfc>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1bc      	bne.n	800a284 <_printf_float+0xfc>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e7b9      	b.n	800a282 <_printf_float+0xfa>
 800a30e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a312:	d118      	bne.n	800a346 <_printf_float+0x1be>
 800a314:	2900      	cmp	r1, #0
 800a316:	6863      	ldr	r3, [r4, #4]
 800a318:	dd0b      	ble.n	800a332 <_printf_float+0x1aa>
 800a31a:	6121      	str	r1, [r4, #16]
 800a31c:	b913      	cbnz	r3, 800a324 <_printf_float+0x19c>
 800a31e:	6822      	ldr	r2, [r4, #0]
 800a320:	07d0      	lsls	r0, r2, #31
 800a322:	d502      	bpl.n	800a32a <_printf_float+0x1a2>
 800a324:	3301      	adds	r3, #1
 800a326:	440b      	add	r3, r1
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a32c:	f04f 0900 	mov.w	r9, #0
 800a330:	e7de      	b.n	800a2f0 <_printf_float+0x168>
 800a332:	b913      	cbnz	r3, 800a33a <_printf_float+0x1b2>
 800a334:	6822      	ldr	r2, [r4, #0]
 800a336:	07d2      	lsls	r2, r2, #31
 800a338:	d501      	bpl.n	800a33e <_printf_float+0x1b6>
 800a33a:	3302      	adds	r3, #2
 800a33c:	e7f4      	b.n	800a328 <_printf_float+0x1a0>
 800a33e:	2301      	movs	r3, #1
 800a340:	e7f2      	b.n	800a328 <_printf_float+0x1a0>
 800a342:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a348:	4299      	cmp	r1, r3
 800a34a:	db05      	blt.n	800a358 <_printf_float+0x1d0>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	6121      	str	r1, [r4, #16]
 800a350:	07d8      	lsls	r0, r3, #31
 800a352:	d5ea      	bpl.n	800a32a <_printf_float+0x1a2>
 800a354:	1c4b      	adds	r3, r1, #1
 800a356:	e7e7      	b.n	800a328 <_printf_float+0x1a0>
 800a358:	2900      	cmp	r1, #0
 800a35a:	bfd4      	ite	le
 800a35c:	f1c1 0202 	rsble	r2, r1, #2
 800a360:	2201      	movgt	r2, #1
 800a362:	4413      	add	r3, r2
 800a364:	e7e0      	b.n	800a328 <_printf_float+0x1a0>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	055a      	lsls	r2, r3, #21
 800a36a:	d407      	bmi.n	800a37c <_printf_float+0x1f4>
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	4642      	mov	r2, r8
 800a370:	4631      	mov	r1, r6
 800a372:	4628      	mov	r0, r5
 800a374:	47b8      	blx	r7
 800a376:	3001      	adds	r0, #1
 800a378:	d12c      	bne.n	800a3d4 <_printf_float+0x24c>
 800a37a:	e764      	b.n	800a246 <_printf_float+0xbe>
 800a37c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a380:	f240 80e0 	bls.w	800a544 <_printf_float+0x3bc>
 800a384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a388:	2200      	movs	r2, #0
 800a38a:	2300      	movs	r3, #0
 800a38c:	f7f6 fbc4 	bl	8000b18 <__aeabi_dcmpeq>
 800a390:	2800      	cmp	r0, #0
 800a392:	d034      	beq.n	800a3fe <_printf_float+0x276>
 800a394:	4a37      	ldr	r2, [pc, #220]	; (800a474 <_printf_float+0x2ec>)
 800a396:	2301      	movs	r3, #1
 800a398:	4631      	mov	r1, r6
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b8      	blx	r7
 800a39e:	3001      	adds	r0, #1
 800a3a0:	f43f af51 	beq.w	800a246 <_printf_float+0xbe>
 800a3a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	db02      	blt.n	800a3b2 <_printf_float+0x22a>
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	07d8      	lsls	r0, r3, #31
 800a3b0:	d510      	bpl.n	800a3d4 <_printf_float+0x24c>
 800a3b2:	ee18 3a10 	vmov	r3, s16
 800a3b6:	4652      	mov	r2, sl
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b8      	blx	r7
 800a3be:	3001      	adds	r0, #1
 800a3c0:	f43f af41 	beq.w	800a246 <_printf_float+0xbe>
 800a3c4:	f04f 0800 	mov.w	r8, #0
 800a3c8:	f104 091a 	add.w	r9, r4, #26
 800a3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	4543      	cmp	r3, r8
 800a3d2:	dc09      	bgt.n	800a3e8 <_printf_float+0x260>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	079b      	lsls	r3, r3, #30
 800a3d8:	f100 8107 	bmi.w	800a5ea <_printf_float+0x462>
 800a3dc:	68e0      	ldr	r0, [r4, #12]
 800a3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3e0:	4298      	cmp	r0, r3
 800a3e2:	bfb8      	it	lt
 800a3e4:	4618      	movlt	r0, r3
 800a3e6:	e730      	b.n	800a24a <_printf_float+0xc2>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	464a      	mov	r2, r9
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b8      	blx	r7
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	f43f af27 	beq.w	800a246 <_printf_float+0xbe>
 800a3f8:	f108 0801 	add.w	r8, r8, #1
 800a3fc:	e7e6      	b.n	800a3cc <_printf_float+0x244>
 800a3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	dc39      	bgt.n	800a478 <_printf_float+0x2f0>
 800a404:	4a1b      	ldr	r2, [pc, #108]	; (800a474 <_printf_float+0x2ec>)
 800a406:	2301      	movs	r3, #1
 800a408:	4631      	mov	r1, r6
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b8      	blx	r7
 800a40e:	3001      	adds	r0, #1
 800a410:	f43f af19 	beq.w	800a246 <_printf_float+0xbe>
 800a414:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a418:	4313      	orrs	r3, r2
 800a41a:	d102      	bne.n	800a422 <_printf_float+0x29a>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	07d9      	lsls	r1, r3, #31
 800a420:	d5d8      	bpl.n	800a3d4 <_printf_float+0x24c>
 800a422:	ee18 3a10 	vmov	r3, s16
 800a426:	4652      	mov	r2, sl
 800a428:	4631      	mov	r1, r6
 800a42a:	4628      	mov	r0, r5
 800a42c:	47b8      	blx	r7
 800a42e:	3001      	adds	r0, #1
 800a430:	f43f af09 	beq.w	800a246 <_printf_float+0xbe>
 800a434:	f04f 0900 	mov.w	r9, #0
 800a438:	f104 0a1a 	add.w	sl, r4, #26
 800a43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a43e:	425b      	negs	r3, r3
 800a440:	454b      	cmp	r3, r9
 800a442:	dc01      	bgt.n	800a448 <_printf_float+0x2c0>
 800a444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a446:	e792      	b.n	800a36e <_printf_float+0x1e6>
 800a448:	2301      	movs	r3, #1
 800a44a:	4652      	mov	r2, sl
 800a44c:	4631      	mov	r1, r6
 800a44e:	4628      	mov	r0, r5
 800a450:	47b8      	blx	r7
 800a452:	3001      	adds	r0, #1
 800a454:	f43f aef7 	beq.w	800a246 <_printf_float+0xbe>
 800a458:	f109 0901 	add.w	r9, r9, #1
 800a45c:	e7ee      	b.n	800a43c <_printf_float+0x2b4>
 800a45e:	bf00      	nop
 800a460:	7fefffff 	.word	0x7fefffff
 800a464:	0800cdd4 	.word	0x0800cdd4
 800a468:	0800cdd8 	.word	0x0800cdd8
 800a46c:	0800cddc 	.word	0x0800cddc
 800a470:	0800cde0 	.word	0x0800cde0
 800a474:	0800cde4 	.word	0x0800cde4
 800a478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a47a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a47c:	429a      	cmp	r2, r3
 800a47e:	bfa8      	it	ge
 800a480:	461a      	movge	r2, r3
 800a482:	2a00      	cmp	r2, #0
 800a484:	4691      	mov	r9, r2
 800a486:	dc37      	bgt.n	800a4f8 <_printf_float+0x370>
 800a488:	f04f 0b00 	mov.w	fp, #0
 800a48c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a490:	f104 021a 	add.w	r2, r4, #26
 800a494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a496:	9305      	str	r3, [sp, #20]
 800a498:	eba3 0309 	sub.w	r3, r3, r9
 800a49c:	455b      	cmp	r3, fp
 800a49e:	dc33      	bgt.n	800a508 <_printf_float+0x380>
 800a4a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	db3b      	blt.n	800a520 <_printf_float+0x398>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	07da      	lsls	r2, r3, #31
 800a4ac:	d438      	bmi.n	800a520 <_printf_float+0x398>
 800a4ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4b2:	eba2 0903 	sub.w	r9, r2, r3
 800a4b6:	9b05      	ldr	r3, [sp, #20]
 800a4b8:	1ad2      	subs	r2, r2, r3
 800a4ba:	4591      	cmp	r9, r2
 800a4bc:	bfa8      	it	ge
 800a4be:	4691      	movge	r9, r2
 800a4c0:	f1b9 0f00 	cmp.w	r9, #0
 800a4c4:	dc35      	bgt.n	800a532 <_printf_float+0x3aa>
 800a4c6:	f04f 0800 	mov.w	r8, #0
 800a4ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4ce:	f104 0a1a 	add.w	sl, r4, #26
 800a4d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4d6:	1a9b      	subs	r3, r3, r2
 800a4d8:	eba3 0309 	sub.w	r3, r3, r9
 800a4dc:	4543      	cmp	r3, r8
 800a4de:	f77f af79 	ble.w	800a3d4 <_printf_float+0x24c>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4652      	mov	r2, sl
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	47b8      	blx	r7
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	f43f aeaa 	beq.w	800a246 <_printf_float+0xbe>
 800a4f2:	f108 0801 	add.w	r8, r8, #1
 800a4f6:	e7ec      	b.n	800a4d2 <_printf_float+0x34a>
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	4628      	mov	r0, r5
 800a500:	47b8      	blx	r7
 800a502:	3001      	adds	r0, #1
 800a504:	d1c0      	bne.n	800a488 <_printf_float+0x300>
 800a506:	e69e      	b.n	800a246 <_printf_float+0xbe>
 800a508:	2301      	movs	r3, #1
 800a50a:	4631      	mov	r1, r6
 800a50c:	4628      	mov	r0, r5
 800a50e:	9205      	str	r2, [sp, #20]
 800a510:	47b8      	blx	r7
 800a512:	3001      	adds	r0, #1
 800a514:	f43f ae97 	beq.w	800a246 <_printf_float+0xbe>
 800a518:	9a05      	ldr	r2, [sp, #20]
 800a51a:	f10b 0b01 	add.w	fp, fp, #1
 800a51e:	e7b9      	b.n	800a494 <_printf_float+0x30c>
 800a520:	ee18 3a10 	vmov	r3, s16
 800a524:	4652      	mov	r2, sl
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	d1be      	bne.n	800a4ae <_printf_float+0x326>
 800a530:	e689      	b.n	800a246 <_printf_float+0xbe>
 800a532:	9a05      	ldr	r2, [sp, #20]
 800a534:	464b      	mov	r3, r9
 800a536:	4442      	add	r2, r8
 800a538:	4631      	mov	r1, r6
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	d1c1      	bne.n	800a4c6 <_printf_float+0x33e>
 800a542:	e680      	b.n	800a246 <_printf_float+0xbe>
 800a544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a546:	2a01      	cmp	r2, #1
 800a548:	dc01      	bgt.n	800a54e <_printf_float+0x3c6>
 800a54a:	07db      	lsls	r3, r3, #31
 800a54c:	d53a      	bpl.n	800a5c4 <_printf_float+0x43c>
 800a54e:	2301      	movs	r3, #1
 800a550:	4642      	mov	r2, r8
 800a552:	4631      	mov	r1, r6
 800a554:	4628      	mov	r0, r5
 800a556:	47b8      	blx	r7
 800a558:	3001      	adds	r0, #1
 800a55a:	f43f ae74 	beq.w	800a246 <_printf_float+0xbe>
 800a55e:	ee18 3a10 	vmov	r3, s16
 800a562:	4652      	mov	r2, sl
 800a564:	4631      	mov	r1, r6
 800a566:	4628      	mov	r0, r5
 800a568:	47b8      	blx	r7
 800a56a:	3001      	adds	r0, #1
 800a56c:	f43f ae6b 	beq.w	800a246 <_printf_float+0xbe>
 800a570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a574:	2200      	movs	r2, #0
 800a576:	2300      	movs	r3, #0
 800a578:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a57c:	f7f6 facc 	bl	8000b18 <__aeabi_dcmpeq>
 800a580:	b9d8      	cbnz	r0, 800a5ba <_printf_float+0x432>
 800a582:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a586:	f108 0201 	add.w	r2, r8, #1
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	d10e      	bne.n	800a5b2 <_printf_float+0x42a>
 800a594:	e657      	b.n	800a246 <_printf_float+0xbe>
 800a596:	2301      	movs	r3, #1
 800a598:	4652      	mov	r2, sl
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f43f ae50 	beq.w	800a246 <_printf_float+0xbe>
 800a5a6:	f108 0801 	add.w	r8, r8, #1
 800a5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	4543      	cmp	r3, r8
 800a5b0:	dcf1      	bgt.n	800a596 <_printf_float+0x40e>
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5b8:	e6da      	b.n	800a370 <_printf_float+0x1e8>
 800a5ba:	f04f 0800 	mov.w	r8, #0
 800a5be:	f104 0a1a 	add.w	sl, r4, #26
 800a5c2:	e7f2      	b.n	800a5aa <_printf_float+0x422>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	e7df      	b.n	800a58a <_printf_float+0x402>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	464a      	mov	r2, r9
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	47b8      	blx	r7
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	f43f ae36 	beq.w	800a246 <_printf_float+0xbe>
 800a5da:	f108 0801 	add.w	r8, r8, #1
 800a5de:	68e3      	ldr	r3, [r4, #12]
 800a5e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5e2:	1a5b      	subs	r3, r3, r1
 800a5e4:	4543      	cmp	r3, r8
 800a5e6:	dcf0      	bgt.n	800a5ca <_printf_float+0x442>
 800a5e8:	e6f8      	b.n	800a3dc <_printf_float+0x254>
 800a5ea:	f04f 0800 	mov.w	r8, #0
 800a5ee:	f104 0919 	add.w	r9, r4, #25
 800a5f2:	e7f4      	b.n	800a5de <_printf_float+0x456>

0800a5f4 <_printf_common>:
 800a5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	4699      	mov	r9, r3
 800a5fc:	688a      	ldr	r2, [r1, #8]
 800a5fe:	690b      	ldr	r3, [r1, #16]
 800a600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a604:	4293      	cmp	r3, r2
 800a606:	bfb8      	it	lt
 800a608:	4613      	movlt	r3, r2
 800a60a:	6033      	str	r3, [r6, #0]
 800a60c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a610:	4607      	mov	r7, r0
 800a612:	460c      	mov	r4, r1
 800a614:	b10a      	cbz	r2, 800a61a <_printf_common+0x26>
 800a616:	3301      	adds	r3, #1
 800a618:	6033      	str	r3, [r6, #0]
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	0699      	lsls	r1, r3, #26
 800a61e:	bf42      	ittt	mi
 800a620:	6833      	ldrmi	r3, [r6, #0]
 800a622:	3302      	addmi	r3, #2
 800a624:	6033      	strmi	r3, [r6, #0]
 800a626:	6825      	ldr	r5, [r4, #0]
 800a628:	f015 0506 	ands.w	r5, r5, #6
 800a62c:	d106      	bne.n	800a63c <_printf_common+0x48>
 800a62e:	f104 0a19 	add.w	sl, r4, #25
 800a632:	68e3      	ldr	r3, [r4, #12]
 800a634:	6832      	ldr	r2, [r6, #0]
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	42ab      	cmp	r3, r5
 800a63a:	dc26      	bgt.n	800a68a <_printf_common+0x96>
 800a63c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a640:	1e13      	subs	r3, r2, #0
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	bf18      	it	ne
 800a646:	2301      	movne	r3, #1
 800a648:	0692      	lsls	r2, r2, #26
 800a64a:	d42b      	bmi.n	800a6a4 <_printf_common+0xb0>
 800a64c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a650:	4649      	mov	r1, r9
 800a652:	4638      	mov	r0, r7
 800a654:	47c0      	blx	r8
 800a656:	3001      	adds	r0, #1
 800a658:	d01e      	beq.n	800a698 <_printf_common+0xa4>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	6922      	ldr	r2, [r4, #16]
 800a65e:	f003 0306 	and.w	r3, r3, #6
 800a662:	2b04      	cmp	r3, #4
 800a664:	bf02      	ittt	eq
 800a666:	68e5      	ldreq	r5, [r4, #12]
 800a668:	6833      	ldreq	r3, [r6, #0]
 800a66a:	1aed      	subeq	r5, r5, r3
 800a66c:	68a3      	ldr	r3, [r4, #8]
 800a66e:	bf0c      	ite	eq
 800a670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a674:	2500      	movne	r5, #0
 800a676:	4293      	cmp	r3, r2
 800a678:	bfc4      	itt	gt
 800a67a:	1a9b      	subgt	r3, r3, r2
 800a67c:	18ed      	addgt	r5, r5, r3
 800a67e:	2600      	movs	r6, #0
 800a680:	341a      	adds	r4, #26
 800a682:	42b5      	cmp	r5, r6
 800a684:	d11a      	bne.n	800a6bc <_printf_common+0xc8>
 800a686:	2000      	movs	r0, #0
 800a688:	e008      	b.n	800a69c <_printf_common+0xa8>
 800a68a:	2301      	movs	r3, #1
 800a68c:	4652      	mov	r2, sl
 800a68e:	4649      	mov	r1, r9
 800a690:	4638      	mov	r0, r7
 800a692:	47c0      	blx	r8
 800a694:	3001      	adds	r0, #1
 800a696:	d103      	bne.n	800a6a0 <_printf_common+0xac>
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	e7c6      	b.n	800a632 <_printf_common+0x3e>
 800a6a4:	18e1      	adds	r1, r4, r3
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	2030      	movs	r0, #48	; 0x30
 800a6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6ae:	4422      	add	r2, r4
 800a6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	e7c7      	b.n	800a64c <_printf_common+0x58>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	4622      	mov	r2, r4
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	47c0      	blx	r8
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d0e6      	beq.n	800a698 <_printf_common+0xa4>
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	e7d9      	b.n	800a682 <_printf_common+0x8e>
	...

0800a6d0 <_printf_i>:
 800a6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	7e0f      	ldrb	r7, [r1, #24]
 800a6d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6d8:	2f78      	cmp	r7, #120	; 0x78
 800a6da:	4691      	mov	r9, r2
 800a6dc:	4680      	mov	r8, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	469a      	mov	sl, r3
 800a6e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6e6:	d807      	bhi.n	800a6f8 <_printf_i+0x28>
 800a6e8:	2f62      	cmp	r7, #98	; 0x62
 800a6ea:	d80a      	bhi.n	800a702 <_printf_i+0x32>
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	f000 80d4 	beq.w	800a89a <_printf_i+0x1ca>
 800a6f2:	2f58      	cmp	r7, #88	; 0x58
 800a6f4:	f000 80c0 	beq.w	800a878 <_printf_i+0x1a8>
 800a6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a700:	e03a      	b.n	800a778 <_printf_i+0xa8>
 800a702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a706:	2b15      	cmp	r3, #21
 800a708:	d8f6      	bhi.n	800a6f8 <_printf_i+0x28>
 800a70a:	a101      	add	r1, pc, #4	; (adr r1, 800a710 <_printf_i+0x40>)
 800a70c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a710:	0800a769 	.word	0x0800a769
 800a714:	0800a77d 	.word	0x0800a77d
 800a718:	0800a6f9 	.word	0x0800a6f9
 800a71c:	0800a6f9 	.word	0x0800a6f9
 800a720:	0800a6f9 	.word	0x0800a6f9
 800a724:	0800a6f9 	.word	0x0800a6f9
 800a728:	0800a77d 	.word	0x0800a77d
 800a72c:	0800a6f9 	.word	0x0800a6f9
 800a730:	0800a6f9 	.word	0x0800a6f9
 800a734:	0800a6f9 	.word	0x0800a6f9
 800a738:	0800a6f9 	.word	0x0800a6f9
 800a73c:	0800a881 	.word	0x0800a881
 800a740:	0800a7a9 	.word	0x0800a7a9
 800a744:	0800a83b 	.word	0x0800a83b
 800a748:	0800a6f9 	.word	0x0800a6f9
 800a74c:	0800a6f9 	.word	0x0800a6f9
 800a750:	0800a8a3 	.word	0x0800a8a3
 800a754:	0800a6f9 	.word	0x0800a6f9
 800a758:	0800a7a9 	.word	0x0800a7a9
 800a75c:	0800a6f9 	.word	0x0800a6f9
 800a760:	0800a6f9 	.word	0x0800a6f9
 800a764:	0800a843 	.word	0x0800a843
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	602a      	str	r2, [r5, #0]
 800a770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a778:	2301      	movs	r3, #1
 800a77a:	e09f      	b.n	800a8bc <_printf_i+0x1ec>
 800a77c:	6820      	ldr	r0, [r4, #0]
 800a77e:	682b      	ldr	r3, [r5, #0]
 800a780:	0607      	lsls	r7, r0, #24
 800a782:	f103 0104 	add.w	r1, r3, #4
 800a786:	6029      	str	r1, [r5, #0]
 800a788:	d501      	bpl.n	800a78e <_printf_i+0xbe>
 800a78a:	681e      	ldr	r6, [r3, #0]
 800a78c:	e003      	b.n	800a796 <_printf_i+0xc6>
 800a78e:	0646      	lsls	r6, r0, #25
 800a790:	d5fb      	bpl.n	800a78a <_printf_i+0xba>
 800a792:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a796:	2e00      	cmp	r6, #0
 800a798:	da03      	bge.n	800a7a2 <_printf_i+0xd2>
 800a79a:	232d      	movs	r3, #45	; 0x2d
 800a79c:	4276      	negs	r6, r6
 800a79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a2:	485a      	ldr	r0, [pc, #360]	; (800a90c <_printf_i+0x23c>)
 800a7a4:	230a      	movs	r3, #10
 800a7a6:	e012      	b.n	800a7ce <_printf_i+0xfe>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	6820      	ldr	r0, [r4, #0]
 800a7ac:	1d19      	adds	r1, r3, #4
 800a7ae:	6029      	str	r1, [r5, #0]
 800a7b0:	0605      	lsls	r5, r0, #24
 800a7b2:	d501      	bpl.n	800a7b8 <_printf_i+0xe8>
 800a7b4:	681e      	ldr	r6, [r3, #0]
 800a7b6:	e002      	b.n	800a7be <_printf_i+0xee>
 800a7b8:	0641      	lsls	r1, r0, #25
 800a7ba:	d5fb      	bpl.n	800a7b4 <_printf_i+0xe4>
 800a7bc:	881e      	ldrh	r6, [r3, #0]
 800a7be:	4853      	ldr	r0, [pc, #332]	; (800a90c <_printf_i+0x23c>)
 800a7c0:	2f6f      	cmp	r7, #111	; 0x6f
 800a7c2:	bf0c      	ite	eq
 800a7c4:	2308      	moveq	r3, #8
 800a7c6:	230a      	movne	r3, #10
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7ce:	6865      	ldr	r5, [r4, #4]
 800a7d0:	60a5      	str	r5, [r4, #8]
 800a7d2:	2d00      	cmp	r5, #0
 800a7d4:	bfa2      	ittt	ge
 800a7d6:	6821      	ldrge	r1, [r4, #0]
 800a7d8:	f021 0104 	bicge.w	r1, r1, #4
 800a7dc:	6021      	strge	r1, [r4, #0]
 800a7de:	b90e      	cbnz	r6, 800a7e4 <_printf_i+0x114>
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	d04b      	beq.n	800a87c <_printf_i+0x1ac>
 800a7e4:	4615      	mov	r5, r2
 800a7e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7ea:	fb03 6711 	mls	r7, r3, r1, r6
 800a7ee:	5dc7      	ldrb	r7, [r0, r7]
 800a7f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7f4:	4637      	mov	r7, r6
 800a7f6:	42bb      	cmp	r3, r7
 800a7f8:	460e      	mov	r6, r1
 800a7fa:	d9f4      	bls.n	800a7e6 <_printf_i+0x116>
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d10b      	bne.n	800a818 <_printf_i+0x148>
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	07de      	lsls	r6, r3, #31
 800a804:	d508      	bpl.n	800a818 <_printf_i+0x148>
 800a806:	6923      	ldr	r3, [r4, #16]
 800a808:	6861      	ldr	r1, [r4, #4]
 800a80a:	4299      	cmp	r1, r3
 800a80c:	bfde      	ittt	le
 800a80e:	2330      	movle	r3, #48	; 0x30
 800a810:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a814:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a818:	1b52      	subs	r2, r2, r5
 800a81a:	6122      	str	r2, [r4, #16]
 800a81c:	f8cd a000 	str.w	sl, [sp]
 800a820:	464b      	mov	r3, r9
 800a822:	aa03      	add	r2, sp, #12
 800a824:	4621      	mov	r1, r4
 800a826:	4640      	mov	r0, r8
 800a828:	f7ff fee4 	bl	800a5f4 <_printf_common>
 800a82c:	3001      	adds	r0, #1
 800a82e:	d14a      	bne.n	800a8c6 <_printf_i+0x1f6>
 800a830:	f04f 30ff 	mov.w	r0, #4294967295
 800a834:	b004      	add	sp, #16
 800a836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	f043 0320 	orr.w	r3, r3, #32
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	4833      	ldr	r0, [pc, #204]	; (800a910 <_printf_i+0x240>)
 800a844:	2778      	movs	r7, #120	; 0x78
 800a846:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	6829      	ldr	r1, [r5, #0]
 800a84e:	061f      	lsls	r7, r3, #24
 800a850:	f851 6b04 	ldr.w	r6, [r1], #4
 800a854:	d402      	bmi.n	800a85c <_printf_i+0x18c>
 800a856:	065f      	lsls	r7, r3, #25
 800a858:	bf48      	it	mi
 800a85a:	b2b6      	uxthmi	r6, r6
 800a85c:	07df      	lsls	r7, r3, #31
 800a85e:	bf48      	it	mi
 800a860:	f043 0320 	orrmi.w	r3, r3, #32
 800a864:	6029      	str	r1, [r5, #0]
 800a866:	bf48      	it	mi
 800a868:	6023      	strmi	r3, [r4, #0]
 800a86a:	b91e      	cbnz	r6, 800a874 <_printf_i+0x1a4>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	f023 0320 	bic.w	r3, r3, #32
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	2310      	movs	r3, #16
 800a876:	e7a7      	b.n	800a7c8 <_printf_i+0xf8>
 800a878:	4824      	ldr	r0, [pc, #144]	; (800a90c <_printf_i+0x23c>)
 800a87a:	e7e4      	b.n	800a846 <_printf_i+0x176>
 800a87c:	4615      	mov	r5, r2
 800a87e:	e7bd      	b.n	800a7fc <_printf_i+0x12c>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	6826      	ldr	r6, [r4, #0]
 800a884:	6961      	ldr	r1, [r4, #20]
 800a886:	1d18      	adds	r0, r3, #4
 800a888:	6028      	str	r0, [r5, #0]
 800a88a:	0635      	lsls	r5, r6, #24
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	d501      	bpl.n	800a894 <_printf_i+0x1c4>
 800a890:	6019      	str	r1, [r3, #0]
 800a892:	e002      	b.n	800a89a <_printf_i+0x1ca>
 800a894:	0670      	lsls	r0, r6, #25
 800a896:	d5fb      	bpl.n	800a890 <_printf_i+0x1c0>
 800a898:	8019      	strh	r1, [r3, #0]
 800a89a:	2300      	movs	r3, #0
 800a89c:	6123      	str	r3, [r4, #16]
 800a89e:	4615      	mov	r5, r2
 800a8a0:	e7bc      	b.n	800a81c <_printf_i+0x14c>
 800a8a2:	682b      	ldr	r3, [r5, #0]
 800a8a4:	1d1a      	adds	r2, r3, #4
 800a8a6:	602a      	str	r2, [r5, #0]
 800a8a8:	681d      	ldr	r5, [r3, #0]
 800a8aa:	6862      	ldr	r2, [r4, #4]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f7f5 fcb6 	bl	8000220 <memchr>
 800a8b4:	b108      	cbz	r0, 800a8ba <_printf_i+0x1ea>
 800a8b6:	1b40      	subs	r0, r0, r5
 800a8b8:	6060      	str	r0, [r4, #4]
 800a8ba:	6863      	ldr	r3, [r4, #4]
 800a8bc:	6123      	str	r3, [r4, #16]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c4:	e7aa      	b.n	800a81c <_printf_i+0x14c>
 800a8c6:	6923      	ldr	r3, [r4, #16]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	47d0      	blx	sl
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	d0ad      	beq.n	800a830 <_printf_i+0x160>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	079b      	lsls	r3, r3, #30
 800a8d8:	d413      	bmi.n	800a902 <_printf_i+0x232>
 800a8da:	68e0      	ldr	r0, [r4, #12]
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	4298      	cmp	r0, r3
 800a8e0:	bfb8      	it	lt
 800a8e2:	4618      	movlt	r0, r3
 800a8e4:	e7a6      	b.n	800a834 <_printf_i+0x164>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	47d0      	blx	sl
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d09d      	beq.n	800a830 <_printf_i+0x160>
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	68e3      	ldr	r3, [r4, #12]
 800a8f8:	9903      	ldr	r1, [sp, #12]
 800a8fa:	1a5b      	subs	r3, r3, r1
 800a8fc:	42ab      	cmp	r3, r5
 800a8fe:	dcf2      	bgt.n	800a8e6 <_printf_i+0x216>
 800a900:	e7eb      	b.n	800a8da <_printf_i+0x20a>
 800a902:	2500      	movs	r5, #0
 800a904:	f104 0619 	add.w	r6, r4, #25
 800a908:	e7f5      	b.n	800a8f6 <_printf_i+0x226>
 800a90a:	bf00      	nop
 800a90c:	0800cde6 	.word	0x0800cde6
 800a910:	0800cdf7 	.word	0x0800cdf7

0800a914 <std>:
 800a914:	2300      	movs	r3, #0
 800a916:	b510      	push	{r4, lr}
 800a918:	4604      	mov	r4, r0
 800a91a:	e9c0 3300 	strd	r3, r3, [r0]
 800a91e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a922:	6083      	str	r3, [r0, #8]
 800a924:	8181      	strh	r1, [r0, #12]
 800a926:	6643      	str	r3, [r0, #100]	; 0x64
 800a928:	81c2      	strh	r2, [r0, #14]
 800a92a:	6183      	str	r3, [r0, #24]
 800a92c:	4619      	mov	r1, r3
 800a92e:	2208      	movs	r2, #8
 800a930:	305c      	adds	r0, #92	; 0x5c
 800a932:	f000 fa9b 	bl	800ae6c <memset>
 800a936:	4b05      	ldr	r3, [pc, #20]	; (800a94c <std+0x38>)
 800a938:	6263      	str	r3, [r4, #36]	; 0x24
 800a93a:	4b05      	ldr	r3, [pc, #20]	; (800a950 <std+0x3c>)
 800a93c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a93e:	4b05      	ldr	r3, [pc, #20]	; (800a954 <std+0x40>)
 800a940:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <std+0x44>)
 800a944:	6224      	str	r4, [r4, #32]
 800a946:	6323      	str	r3, [r4, #48]	; 0x30
 800a948:	bd10      	pop	{r4, pc}
 800a94a:	bf00      	nop
 800a94c:	0800acbd 	.word	0x0800acbd
 800a950:	0800acdf 	.word	0x0800acdf
 800a954:	0800ad17 	.word	0x0800ad17
 800a958:	0800ad3b 	.word	0x0800ad3b

0800a95c <stdio_exit_handler>:
 800a95c:	4a02      	ldr	r2, [pc, #8]	; (800a968 <stdio_exit_handler+0xc>)
 800a95e:	4903      	ldr	r1, [pc, #12]	; (800a96c <stdio_exit_handler+0x10>)
 800a960:	4803      	ldr	r0, [pc, #12]	; (800a970 <stdio_exit_handler+0x14>)
 800a962:	f000 b869 	b.w	800aa38 <_fwalk_sglue>
 800a966:	bf00      	nop
 800a968:	20000014 	.word	0x20000014
 800a96c:	0800c8e9 	.word	0x0800c8e9
 800a970:	20000020 	.word	0x20000020

0800a974 <cleanup_stdio>:
 800a974:	6841      	ldr	r1, [r0, #4]
 800a976:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <cleanup_stdio+0x34>)
 800a978:	4299      	cmp	r1, r3
 800a97a:	b510      	push	{r4, lr}
 800a97c:	4604      	mov	r4, r0
 800a97e:	d001      	beq.n	800a984 <cleanup_stdio+0x10>
 800a980:	f001 ffb2 	bl	800c8e8 <_fflush_r>
 800a984:	68a1      	ldr	r1, [r4, #8]
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <cleanup_stdio+0x38>)
 800a988:	4299      	cmp	r1, r3
 800a98a:	d002      	beq.n	800a992 <cleanup_stdio+0x1e>
 800a98c:	4620      	mov	r0, r4
 800a98e:	f001 ffab 	bl	800c8e8 <_fflush_r>
 800a992:	68e1      	ldr	r1, [r4, #12]
 800a994:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <cleanup_stdio+0x3c>)
 800a996:	4299      	cmp	r1, r3
 800a998:	d004      	beq.n	800a9a4 <cleanup_stdio+0x30>
 800a99a:	4620      	mov	r0, r4
 800a99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a0:	f001 bfa2 	b.w	800c8e8 <_fflush_r>
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	bf00      	nop
 800a9a8:	200013dc 	.word	0x200013dc
 800a9ac:	20001444 	.word	0x20001444
 800a9b0:	200014ac 	.word	0x200014ac

0800a9b4 <global_stdio_init.part.0>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <global_stdio_init.part.0+0x30>)
 800a9b8:	4c0b      	ldr	r4, [pc, #44]	; (800a9e8 <global_stdio_init.part.0+0x34>)
 800a9ba:	4a0c      	ldr	r2, [pc, #48]	; (800a9ec <global_stdio_init.part.0+0x38>)
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2104      	movs	r1, #4
 800a9c4:	f7ff ffa6 	bl	800a914 <std>
 800a9c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	2109      	movs	r1, #9
 800a9d0:	f7ff ffa0 	bl	800a914 <std>
 800a9d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a9d8:	2202      	movs	r2, #2
 800a9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9de:	2112      	movs	r1, #18
 800a9e0:	f7ff bf98 	b.w	800a914 <std>
 800a9e4:	20001514 	.word	0x20001514
 800a9e8:	200013dc 	.word	0x200013dc
 800a9ec:	0800a95d 	.word	0x0800a95d

0800a9f0 <__sfp_lock_acquire>:
 800a9f0:	4801      	ldr	r0, [pc, #4]	; (800a9f8 <__sfp_lock_acquire+0x8>)
 800a9f2:	f000 bab7 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800a9f6:	bf00      	nop
 800a9f8:	2000151d 	.word	0x2000151d

0800a9fc <__sfp_lock_release>:
 800a9fc:	4801      	ldr	r0, [pc, #4]	; (800aa04 <__sfp_lock_release+0x8>)
 800a9fe:	f000 bab2 	b.w	800af66 <__retarget_lock_release_recursive>
 800aa02:	bf00      	nop
 800aa04:	2000151d 	.word	0x2000151d

0800aa08 <__sinit>:
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	f7ff fff0 	bl	800a9f0 <__sfp_lock_acquire>
 800aa10:	6a23      	ldr	r3, [r4, #32]
 800aa12:	b11b      	cbz	r3, 800aa1c <__sinit+0x14>
 800aa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa18:	f7ff bff0 	b.w	800a9fc <__sfp_lock_release>
 800aa1c:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <__sinit+0x28>)
 800aa1e:	6223      	str	r3, [r4, #32]
 800aa20:	4b04      	ldr	r3, [pc, #16]	; (800aa34 <__sinit+0x2c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1f5      	bne.n	800aa14 <__sinit+0xc>
 800aa28:	f7ff ffc4 	bl	800a9b4 <global_stdio_init.part.0>
 800aa2c:	e7f2      	b.n	800aa14 <__sinit+0xc>
 800aa2e:	bf00      	nop
 800aa30:	0800a975 	.word	0x0800a975
 800aa34:	20001514 	.word	0x20001514

0800aa38 <_fwalk_sglue>:
 800aa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	4688      	mov	r8, r1
 800aa40:	4614      	mov	r4, r2
 800aa42:	2600      	movs	r6, #0
 800aa44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa48:	f1b9 0901 	subs.w	r9, r9, #1
 800aa4c:	d505      	bpl.n	800aa5a <_fwalk_sglue+0x22>
 800aa4e:	6824      	ldr	r4, [r4, #0]
 800aa50:	2c00      	cmp	r4, #0
 800aa52:	d1f7      	bne.n	800aa44 <_fwalk_sglue+0xc>
 800aa54:	4630      	mov	r0, r6
 800aa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa5a:	89ab      	ldrh	r3, [r5, #12]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d907      	bls.n	800aa70 <_fwalk_sglue+0x38>
 800aa60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa64:	3301      	adds	r3, #1
 800aa66:	d003      	beq.n	800aa70 <_fwalk_sglue+0x38>
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	47c0      	blx	r8
 800aa6e:	4306      	orrs	r6, r0
 800aa70:	3568      	adds	r5, #104	; 0x68
 800aa72:	e7e9      	b.n	800aa48 <_fwalk_sglue+0x10>

0800aa74 <iprintf>:
 800aa74:	b40f      	push	{r0, r1, r2, r3}
 800aa76:	b507      	push	{r0, r1, r2, lr}
 800aa78:	4906      	ldr	r1, [pc, #24]	; (800aa94 <iprintf+0x20>)
 800aa7a:	ab04      	add	r3, sp, #16
 800aa7c:	6808      	ldr	r0, [r1, #0]
 800aa7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa82:	6881      	ldr	r1, [r0, #8]
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	f001 fd8f 	bl	800c5a8 <_vfiprintf_r>
 800aa8a:	b003      	add	sp, #12
 800aa8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa90:	b004      	add	sp, #16
 800aa92:	4770      	bx	lr
 800aa94:	2000006c 	.word	0x2000006c

0800aa98 <_puts_r>:
 800aa98:	6a03      	ldr	r3, [r0, #32]
 800aa9a:	b570      	push	{r4, r5, r6, lr}
 800aa9c:	6884      	ldr	r4, [r0, #8]
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	460e      	mov	r6, r1
 800aaa2:	b90b      	cbnz	r3, 800aaa8 <_puts_r+0x10>
 800aaa4:	f7ff ffb0 	bl	800aa08 <__sinit>
 800aaa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaaa:	07db      	lsls	r3, r3, #31
 800aaac:	d405      	bmi.n	800aaba <_puts_r+0x22>
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	0598      	lsls	r0, r3, #22
 800aab2:	d402      	bmi.n	800aaba <_puts_r+0x22>
 800aab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab6:	f000 fa55 	bl	800af64 <__retarget_lock_acquire_recursive>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	0719      	lsls	r1, r3, #28
 800aabe:	d513      	bpl.n	800aae8 <_puts_r+0x50>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	b18b      	cbz	r3, 800aae8 <_puts_r+0x50>
 800aac4:	3e01      	subs	r6, #1
 800aac6:	68a3      	ldr	r3, [r4, #8]
 800aac8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aacc:	3b01      	subs	r3, #1
 800aace:	60a3      	str	r3, [r4, #8]
 800aad0:	b9e9      	cbnz	r1, 800ab0e <_puts_r+0x76>
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	da2e      	bge.n	800ab34 <_puts_r+0x9c>
 800aad6:	4622      	mov	r2, r4
 800aad8:	210a      	movs	r1, #10
 800aada:	4628      	mov	r0, r5
 800aadc:	f000 f931 	bl	800ad42 <__swbuf_r>
 800aae0:	3001      	adds	r0, #1
 800aae2:	d007      	beq.n	800aaf4 <_puts_r+0x5c>
 800aae4:	250a      	movs	r5, #10
 800aae6:	e007      	b.n	800aaf8 <_puts_r+0x60>
 800aae8:	4621      	mov	r1, r4
 800aaea:	4628      	mov	r0, r5
 800aaec:	f000 f966 	bl	800adbc <__swsetup_r>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0e7      	beq.n	800aac4 <_puts_r+0x2c>
 800aaf4:	f04f 35ff 	mov.w	r5, #4294967295
 800aaf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aafa:	07da      	lsls	r2, r3, #31
 800aafc:	d405      	bmi.n	800ab0a <_puts_r+0x72>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	059b      	lsls	r3, r3, #22
 800ab02:	d402      	bmi.n	800ab0a <_puts_r+0x72>
 800ab04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab06:	f000 fa2e 	bl	800af66 <__retarget_lock_release_recursive>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	da04      	bge.n	800ab1c <_puts_r+0x84>
 800ab12:	69a2      	ldr	r2, [r4, #24]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	dc06      	bgt.n	800ab26 <_puts_r+0x8e>
 800ab18:	290a      	cmp	r1, #10
 800ab1a:	d004      	beq.n	800ab26 <_puts_r+0x8e>
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	6022      	str	r2, [r4, #0]
 800ab22:	7019      	strb	r1, [r3, #0]
 800ab24:	e7cf      	b.n	800aac6 <_puts_r+0x2e>
 800ab26:	4622      	mov	r2, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f000 f90a 	bl	800ad42 <__swbuf_r>
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d1c9      	bne.n	800aac6 <_puts_r+0x2e>
 800ab32:	e7df      	b.n	800aaf4 <_puts_r+0x5c>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	250a      	movs	r5, #10
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	6022      	str	r2, [r4, #0]
 800ab3c:	701d      	strb	r5, [r3, #0]
 800ab3e:	e7db      	b.n	800aaf8 <_puts_r+0x60>

0800ab40 <puts>:
 800ab40:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <puts+0xc>)
 800ab42:	4601      	mov	r1, r0
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f7ff bfa7 	b.w	800aa98 <_puts_r>
 800ab4a:	bf00      	nop
 800ab4c:	2000006c 	.word	0x2000006c

0800ab50 <setbuf>:
 800ab50:	fab1 f281 	clz	r2, r1
 800ab54:	0952      	lsrs	r2, r2, #5
 800ab56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab5a:	0052      	lsls	r2, r2, #1
 800ab5c:	f000 b800 	b.w	800ab60 <setvbuf>

0800ab60 <setvbuf>:
 800ab60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	461d      	mov	r5, r3
 800ab66:	4b54      	ldr	r3, [pc, #336]	; (800acb8 <setvbuf+0x158>)
 800ab68:	681f      	ldr	r7, [r3, #0]
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	460e      	mov	r6, r1
 800ab6e:	4690      	mov	r8, r2
 800ab70:	b127      	cbz	r7, 800ab7c <setvbuf+0x1c>
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	b913      	cbnz	r3, 800ab7c <setvbuf+0x1c>
 800ab76:	4638      	mov	r0, r7
 800ab78:	f7ff ff46 	bl	800aa08 <__sinit>
 800ab7c:	f1b8 0f02 	cmp.w	r8, #2
 800ab80:	d006      	beq.n	800ab90 <setvbuf+0x30>
 800ab82:	f1b8 0f01 	cmp.w	r8, #1
 800ab86:	f200 8094 	bhi.w	800acb2 <setvbuf+0x152>
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	f2c0 8091 	blt.w	800acb2 <setvbuf+0x152>
 800ab90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab92:	07da      	lsls	r2, r3, #31
 800ab94:	d405      	bmi.n	800aba2 <setvbuf+0x42>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	059b      	lsls	r3, r3, #22
 800ab9a:	d402      	bmi.n	800aba2 <setvbuf+0x42>
 800ab9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9e:	f000 f9e1 	bl	800af64 <__retarget_lock_acquire_recursive>
 800aba2:	4621      	mov	r1, r4
 800aba4:	4638      	mov	r0, r7
 800aba6:	f001 fe9f 	bl	800c8e8 <_fflush_r>
 800abaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abac:	b141      	cbz	r1, 800abc0 <setvbuf+0x60>
 800abae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d002      	beq.n	800abbc <setvbuf+0x5c>
 800abb6:	4638      	mov	r0, r7
 800abb8:	f001 f850 	bl	800bc5c <_free_r>
 800abbc:	2300      	movs	r3, #0
 800abbe:	6363      	str	r3, [r4, #52]	; 0x34
 800abc0:	2300      	movs	r3, #0
 800abc2:	61a3      	str	r3, [r4, #24]
 800abc4:	6063      	str	r3, [r4, #4]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	0618      	lsls	r0, r3, #24
 800abca:	d503      	bpl.n	800abd4 <setvbuf+0x74>
 800abcc:	6921      	ldr	r1, [r4, #16]
 800abce:	4638      	mov	r0, r7
 800abd0:	f001 f844 	bl	800bc5c <_free_r>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	f1b8 0f02 	cmp.w	r8, #2
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	d05f      	beq.n	800aca6 <setvbuf+0x146>
 800abe6:	ab01      	add	r3, sp, #4
 800abe8:	466a      	mov	r2, sp
 800abea:	4621      	mov	r1, r4
 800abec:	4638      	mov	r0, r7
 800abee:	f001 fea3 	bl	800c938 <__swhatbuf_r>
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	4318      	orrs	r0, r3
 800abf6:	81a0      	strh	r0, [r4, #12]
 800abf8:	bb2d      	cbnz	r5, 800ac46 <setvbuf+0xe6>
 800abfa:	9d00      	ldr	r5, [sp, #0]
 800abfc:	4628      	mov	r0, r5
 800abfe:	f001 f879 	bl	800bcf4 <malloc>
 800ac02:	4606      	mov	r6, r0
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d150      	bne.n	800acaa <setvbuf+0x14a>
 800ac08:	f8dd 9000 	ldr.w	r9, [sp]
 800ac0c:	45a9      	cmp	r9, r5
 800ac0e:	d13e      	bne.n	800ac8e <setvbuf+0x12e>
 800ac10:	f04f 35ff 	mov.w	r5, #4294967295
 800ac14:	2200      	movs	r2, #0
 800ac16:	60a2      	str	r2, [r4, #8]
 800ac18:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ac1c:	6022      	str	r2, [r4, #0]
 800ac1e:	6122      	str	r2, [r4, #16]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac26:	6162      	str	r2, [r4, #20]
 800ac28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac2a:	f043 0302 	orr.w	r3, r3, #2
 800ac2e:	07d1      	lsls	r1, r2, #31
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	d404      	bmi.n	800ac3e <setvbuf+0xde>
 800ac34:	059b      	lsls	r3, r3, #22
 800ac36:	d402      	bmi.n	800ac3e <setvbuf+0xde>
 800ac38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac3a:	f000 f994 	bl	800af66 <__retarget_lock_release_recursive>
 800ac3e:	4628      	mov	r0, r5
 800ac40:	b003      	add	sp, #12
 800ac42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac46:	2e00      	cmp	r6, #0
 800ac48:	d0d8      	beq.n	800abfc <setvbuf+0x9c>
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	b913      	cbnz	r3, 800ac54 <setvbuf+0xf4>
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff feda 	bl	800aa08 <__sinit>
 800ac54:	f1b8 0f01 	cmp.w	r8, #1
 800ac58:	bf08      	it	eq
 800ac5a:	89a3      	ldrheq	r3, [r4, #12]
 800ac5c:	6026      	str	r6, [r4, #0]
 800ac5e:	bf04      	itt	eq
 800ac60:	f043 0301 	orreq.w	r3, r3, #1
 800ac64:	81a3      	strheq	r3, [r4, #12]
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f013 0208 	ands.w	r2, r3, #8
 800ac6c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ac70:	d01d      	beq.n	800acae <setvbuf+0x14e>
 800ac72:	07da      	lsls	r2, r3, #31
 800ac74:	bf41      	itttt	mi
 800ac76:	2200      	movmi	r2, #0
 800ac78:	426d      	negmi	r5, r5
 800ac7a:	60a2      	strmi	r2, [r4, #8]
 800ac7c:	61a5      	strmi	r5, [r4, #24]
 800ac7e:	bf58      	it	pl
 800ac80:	60a5      	strpl	r5, [r4, #8]
 800ac82:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ac84:	f015 0501 	ands.w	r5, r5, #1
 800ac88:	d0d4      	beq.n	800ac34 <setvbuf+0xd4>
 800ac8a:	2500      	movs	r5, #0
 800ac8c:	e7d7      	b.n	800ac3e <setvbuf+0xde>
 800ac8e:	4648      	mov	r0, r9
 800ac90:	f001 f830 	bl	800bcf4 <malloc>
 800ac94:	4606      	mov	r6, r0
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d0ba      	beq.n	800ac10 <setvbuf+0xb0>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	464d      	mov	r5, r9
 800aca4:	e7d1      	b.n	800ac4a <setvbuf+0xea>
 800aca6:	2500      	movs	r5, #0
 800aca8:	e7b4      	b.n	800ac14 <setvbuf+0xb4>
 800acaa:	46a9      	mov	r9, r5
 800acac:	e7f5      	b.n	800ac9a <setvbuf+0x13a>
 800acae:	60a2      	str	r2, [r4, #8]
 800acb0:	e7e7      	b.n	800ac82 <setvbuf+0x122>
 800acb2:	f04f 35ff 	mov.w	r5, #4294967295
 800acb6:	e7c2      	b.n	800ac3e <setvbuf+0xde>
 800acb8:	2000006c 	.word	0x2000006c

0800acbc <__sread>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	460c      	mov	r4, r1
 800acc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc4:	f000 f900 	bl	800aec8 <_read_r>
 800acc8:	2800      	cmp	r0, #0
 800acca:	bfab      	itete	ge
 800accc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acce:	89a3      	ldrhlt	r3, [r4, #12]
 800acd0:	181b      	addge	r3, r3, r0
 800acd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acd6:	bfac      	ite	ge
 800acd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acda:	81a3      	strhlt	r3, [r4, #12]
 800acdc:	bd10      	pop	{r4, pc}

0800acde <__swrite>:
 800acde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace2:	461f      	mov	r7, r3
 800ace4:	898b      	ldrh	r3, [r1, #12]
 800ace6:	05db      	lsls	r3, r3, #23
 800ace8:	4605      	mov	r5, r0
 800acea:	460c      	mov	r4, r1
 800acec:	4616      	mov	r6, r2
 800acee:	d505      	bpl.n	800acfc <__swrite+0x1e>
 800acf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf4:	2302      	movs	r3, #2
 800acf6:	2200      	movs	r2, #0
 800acf8:	f000 f8d4 	bl	800aea4 <_lseek_r>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad06:	81a3      	strh	r3, [r4, #12]
 800ad08:	4632      	mov	r2, r6
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	f000 b8eb 	b.w	800aeec <_write_r>

0800ad16 <__sseek>:
 800ad16:	b510      	push	{r4, lr}
 800ad18:	460c      	mov	r4, r1
 800ad1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1e:	f000 f8c1 	bl	800aea4 <_lseek_r>
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	bf15      	itete	ne
 800ad28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad32:	81a3      	strheq	r3, [r4, #12]
 800ad34:	bf18      	it	ne
 800ad36:	81a3      	strhne	r3, [r4, #12]
 800ad38:	bd10      	pop	{r4, pc}

0800ad3a <__sclose>:
 800ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3e:	f000 b8a1 	b.w	800ae84 <_close_r>

0800ad42 <__swbuf_r>:
 800ad42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad44:	460e      	mov	r6, r1
 800ad46:	4614      	mov	r4, r2
 800ad48:	4605      	mov	r5, r0
 800ad4a:	b118      	cbz	r0, 800ad54 <__swbuf_r+0x12>
 800ad4c:	6a03      	ldr	r3, [r0, #32]
 800ad4e:	b90b      	cbnz	r3, 800ad54 <__swbuf_r+0x12>
 800ad50:	f7ff fe5a 	bl	800aa08 <__sinit>
 800ad54:	69a3      	ldr	r3, [r4, #24]
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	071a      	lsls	r2, r3, #28
 800ad5c:	d525      	bpl.n	800adaa <__swbuf_r+0x68>
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	b31b      	cbz	r3, 800adaa <__swbuf_r+0x68>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	6922      	ldr	r2, [r4, #16]
 800ad66:	1a98      	subs	r0, r3, r2
 800ad68:	6963      	ldr	r3, [r4, #20]
 800ad6a:	b2f6      	uxtb	r6, r6
 800ad6c:	4283      	cmp	r3, r0
 800ad6e:	4637      	mov	r7, r6
 800ad70:	dc04      	bgt.n	800ad7c <__swbuf_r+0x3a>
 800ad72:	4621      	mov	r1, r4
 800ad74:	4628      	mov	r0, r5
 800ad76:	f001 fdb7 	bl	800c8e8 <_fflush_r>
 800ad7a:	b9e0      	cbnz	r0, 800adb6 <__swbuf_r+0x74>
 800ad7c:	68a3      	ldr	r3, [r4, #8]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	60a3      	str	r3, [r4, #8]
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	6022      	str	r2, [r4, #0]
 800ad88:	701e      	strb	r6, [r3, #0]
 800ad8a:	6962      	ldr	r2, [r4, #20]
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d004      	beq.n	800ad9c <__swbuf_r+0x5a>
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	07db      	lsls	r3, r3, #31
 800ad96:	d506      	bpl.n	800ada6 <__swbuf_r+0x64>
 800ad98:	2e0a      	cmp	r6, #10
 800ad9a:	d104      	bne.n	800ada6 <__swbuf_r+0x64>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f001 fda2 	bl	800c8e8 <_fflush_r>
 800ada4:	b938      	cbnz	r0, 800adb6 <__swbuf_r+0x74>
 800ada6:	4638      	mov	r0, r7
 800ada8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adaa:	4621      	mov	r1, r4
 800adac:	4628      	mov	r0, r5
 800adae:	f000 f805 	bl	800adbc <__swsetup_r>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d0d5      	beq.n	800ad62 <__swbuf_r+0x20>
 800adb6:	f04f 37ff 	mov.w	r7, #4294967295
 800adba:	e7f4      	b.n	800ada6 <__swbuf_r+0x64>

0800adbc <__swsetup_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4b2a      	ldr	r3, [pc, #168]	; (800ae68 <__swsetup_r+0xac>)
 800adc0:	4605      	mov	r5, r0
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	460c      	mov	r4, r1
 800adc6:	b118      	cbz	r0, 800add0 <__swsetup_r+0x14>
 800adc8:	6a03      	ldr	r3, [r0, #32]
 800adca:	b90b      	cbnz	r3, 800add0 <__swsetup_r+0x14>
 800adcc:	f7ff fe1c 	bl	800aa08 <__sinit>
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800add6:	0718      	lsls	r0, r3, #28
 800add8:	d422      	bmi.n	800ae20 <__swsetup_r+0x64>
 800adda:	06d9      	lsls	r1, r3, #27
 800addc:	d407      	bmi.n	800adee <__swsetup_r+0x32>
 800adde:	2309      	movs	r3, #9
 800ade0:	602b      	str	r3, [r5, #0]
 800ade2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e034      	b.n	800ae58 <__swsetup_r+0x9c>
 800adee:	0758      	lsls	r0, r3, #29
 800adf0:	d512      	bpl.n	800ae18 <__swsetup_r+0x5c>
 800adf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf4:	b141      	cbz	r1, 800ae08 <__swsetup_r+0x4c>
 800adf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adfa:	4299      	cmp	r1, r3
 800adfc:	d002      	beq.n	800ae04 <__swsetup_r+0x48>
 800adfe:	4628      	mov	r0, r5
 800ae00:	f000 ff2c 	bl	800bc5c <_free_r>
 800ae04:	2300      	movs	r3, #0
 800ae06:	6363      	str	r3, [r4, #52]	; 0x34
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	2300      	movs	r3, #0
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	f043 0308 	orr.w	r3, r3, #8
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	b94b      	cbnz	r3, 800ae38 <__swsetup_r+0x7c>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae2e:	d003      	beq.n	800ae38 <__swsetup_r+0x7c>
 800ae30:	4621      	mov	r1, r4
 800ae32:	4628      	mov	r0, r5
 800ae34:	f001 fda6 	bl	800c984 <__smakebuf_r>
 800ae38:	89a0      	ldrh	r0, [r4, #12]
 800ae3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae3e:	f010 0301 	ands.w	r3, r0, #1
 800ae42:	d00a      	beq.n	800ae5a <__swsetup_r+0x9e>
 800ae44:	2300      	movs	r3, #0
 800ae46:	60a3      	str	r3, [r4, #8]
 800ae48:	6963      	ldr	r3, [r4, #20]
 800ae4a:	425b      	negs	r3, r3
 800ae4c:	61a3      	str	r3, [r4, #24]
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	b943      	cbnz	r3, 800ae64 <__swsetup_r+0xa8>
 800ae52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae56:	d1c4      	bne.n	800ade2 <__swsetup_r+0x26>
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	0781      	lsls	r1, r0, #30
 800ae5c:	bf58      	it	pl
 800ae5e:	6963      	ldrpl	r3, [r4, #20]
 800ae60:	60a3      	str	r3, [r4, #8]
 800ae62:	e7f4      	b.n	800ae4e <__swsetup_r+0x92>
 800ae64:	2000      	movs	r0, #0
 800ae66:	e7f7      	b.n	800ae58 <__swsetup_r+0x9c>
 800ae68:	2000006c 	.word	0x2000006c

0800ae6c <memset>:
 800ae6c:	4402      	add	r2, r0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d100      	bne.n	800ae76 <memset+0xa>
 800ae74:	4770      	bx	lr
 800ae76:	f803 1b01 	strb.w	r1, [r3], #1
 800ae7a:	e7f9      	b.n	800ae70 <memset+0x4>

0800ae7c <_localeconv_r>:
 800ae7c:	4800      	ldr	r0, [pc, #0]	; (800ae80 <_localeconv_r+0x4>)
 800ae7e:	4770      	bx	lr
 800ae80:	20000160 	.word	0x20000160

0800ae84 <_close_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	4d06      	ldr	r5, [pc, #24]	; (800aea0 <_close_r+0x1c>)
 800ae88:	2300      	movs	r3, #0
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	602b      	str	r3, [r5, #0]
 800ae90:	f7fa fa34 	bl	80052fc <_close>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_close_r+0x1a>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_close_r+0x1a>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20001518 	.word	0x20001518

0800aea4 <_lseek_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d07      	ldr	r5, [pc, #28]	; (800aec4 <_lseek_r+0x20>)
 800aea8:	4604      	mov	r4, r0
 800aeaa:	4608      	mov	r0, r1
 800aeac:	4611      	mov	r1, r2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	602a      	str	r2, [r5, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f7fa fa2e 	bl	8005314 <_lseek>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d102      	bne.n	800aec2 <_lseek_r+0x1e>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	b103      	cbz	r3, 800aec2 <_lseek_r+0x1e>
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	20001518 	.word	0x20001518

0800aec8 <_read_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d07      	ldr	r5, [pc, #28]	; (800aee8 <_read_r+0x20>)
 800aecc:	4604      	mov	r4, r0
 800aece:	4608      	mov	r0, r1
 800aed0:	4611      	mov	r1, r2
 800aed2:	2200      	movs	r2, #0
 800aed4:	602a      	str	r2, [r5, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	f7fa f9f4 	bl	80052c4 <_read>
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	d102      	bne.n	800aee6 <_read_r+0x1e>
 800aee0:	682b      	ldr	r3, [r5, #0]
 800aee2:	b103      	cbz	r3, 800aee6 <_read_r+0x1e>
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	20001518 	.word	0x20001518

0800aeec <_write_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d07      	ldr	r5, [pc, #28]	; (800af0c <_write_r+0x20>)
 800aef0:	4604      	mov	r4, r0
 800aef2:	4608      	mov	r0, r1
 800aef4:	4611      	mov	r1, r2
 800aef6:	2200      	movs	r2, #0
 800aef8:	602a      	str	r2, [r5, #0]
 800aefa:	461a      	mov	r2, r3
 800aefc:	f7fa f9f0 	bl	80052e0 <_write>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_write_r+0x1e>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_write_r+0x1e>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	20001518 	.word	0x20001518

0800af10 <__errno>:
 800af10:	4b01      	ldr	r3, [pc, #4]	; (800af18 <__errno+0x8>)
 800af12:	6818      	ldr	r0, [r3, #0]
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	2000006c 	.word	0x2000006c

0800af1c <__libc_init_array>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4d0d      	ldr	r5, [pc, #52]	; (800af54 <__libc_init_array+0x38>)
 800af20:	4c0d      	ldr	r4, [pc, #52]	; (800af58 <__libc_init_array+0x3c>)
 800af22:	1b64      	subs	r4, r4, r5
 800af24:	10a4      	asrs	r4, r4, #2
 800af26:	2600      	movs	r6, #0
 800af28:	42a6      	cmp	r6, r4
 800af2a:	d109      	bne.n	800af40 <__libc_init_array+0x24>
 800af2c:	4d0b      	ldr	r5, [pc, #44]	; (800af5c <__libc_init_array+0x40>)
 800af2e:	4c0c      	ldr	r4, [pc, #48]	; (800af60 <__libc_init_array+0x44>)
 800af30:	f001 fe64 	bl	800cbfc <_init>
 800af34:	1b64      	subs	r4, r4, r5
 800af36:	10a4      	asrs	r4, r4, #2
 800af38:	2600      	movs	r6, #0
 800af3a:	42a6      	cmp	r6, r4
 800af3c:	d105      	bne.n	800af4a <__libc_init_array+0x2e>
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	f855 3b04 	ldr.w	r3, [r5], #4
 800af44:	4798      	blx	r3
 800af46:	3601      	adds	r6, #1
 800af48:	e7ee      	b.n	800af28 <__libc_init_array+0xc>
 800af4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af4e:	4798      	blx	r3
 800af50:	3601      	adds	r6, #1
 800af52:	e7f2      	b.n	800af3a <__libc_init_array+0x1e>
 800af54:	0800d14c 	.word	0x0800d14c
 800af58:	0800d14c 	.word	0x0800d14c
 800af5c:	0800d14c 	.word	0x0800d14c
 800af60:	0800d150 	.word	0x0800d150

0800af64 <__retarget_lock_acquire_recursive>:
 800af64:	4770      	bx	lr

0800af66 <__retarget_lock_release_recursive>:
 800af66:	4770      	bx	lr

0800af68 <quorem>:
 800af68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	6903      	ldr	r3, [r0, #16]
 800af6e:	690c      	ldr	r4, [r1, #16]
 800af70:	42a3      	cmp	r3, r4
 800af72:	4607      	mov	r7, r0
 800af74:	db7e      	blt.n	800b074 <quorem+0x10c>
 800af76:	3c01      	subs	r4, #1
 800af78:	f101 0814 	add.w	r8, r1, #20
 800af7c:	f100 0514 	add.w	r5, r0, #20
 800af80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af8e:	3301      	adds	r3, #1
 800af90:	429a      	cmp	r2, r3
 800af92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800af9e:	d331      	bcc.n	800b004 <quorem+0x9c>
 800afa0:	f04f 0e00 	mov.w	lr, #0
 800afa4:	4640      	mov	r0, r8
 800afa6:	46ac      	mov	ip, r5
 800afa8:	46f2      	mov	sl, lr
 800afaa:	f850 2b04 	ldr.w	r2, [r0], #4
 800afae:	b293      	uxth	r3, r2
 800afb0:	fb06 e303 	mla	r3, r6, r3, lr
 800afb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afb8:	0c1a      	lsrs	r2, r3, #16
 800afba:	b29b      	uxth	r3, r3
 800afbc:	ebaa 0303 	sub.w	r3, sl, r3
 800afc0:	f8dc a000 	ldr.w	sl, [ip]
 800afc4:	fa13 f38a 	uxtah	r3, r3, sl
 800afc8:	fb06 220e 	mla	r2, r6, lr, r2
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afd4:	b292      	uxth	r2, r2
 800afd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afde:	f8bd 3000 	ldrh.w	r3, [sp]
 800afe2:	4581      	cmp	r9, r0
 800afe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afe8:	f84c 3b04 	str.w	r3, [ip], #4
 800afec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aff0:	d2db      	bcs.n	800afaa <quorem+0x42>
 800aff2:	f855 300b 	ldr.w	r3, [r5, fp]
 800aff6:	b92b      	cbnz	r3, 800b004 <quorem+0x9c>
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	3b04      	subs	r3, #4
 800affc:	429d      	cmp	r5, r3
 800affe:	461a      	mov	r2, r3
 800b000:	d32c      	bcc.n	800b05c <quorem+0xf4>
 800b002:	613c      	str	r4, [r7, #16]
 800b004:	4638      	mov	r0, r7
 800b006:	f001 f9a5 	bl	800c354 <__mcmp>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	db22      	blt.n	800b054 <quorem+0xec>
 800b00e:	3601      	adds	r6, #1
 800b010:	4629      	mov	r1, r5
 800b012:	2000      	movs	r0, #0
 800b014:	f858 2b04 	ldr.w	r2, [r8], #4
 800b018:	f8d1 c000 	ldr.w	ip, [r1]
 800b01c:	b293      	uxth	r3, r2
 800b01e:	1ac3      	subs	r3, r0, r3
 800b020:	0c12      	lsrs	r2, r2, #16
 800b022:	fa13 f38c 	uxtah	r3, r3, ip
 800b026:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b02a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b02e:	b29b      	uxth	r3, r3
 800b030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b034:	45c1      	cmp	r9, r8
 800b036:	f841 3b04 	str.w	r3, [r1], #4
 800b03a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b03e:	d2e9      	bcs.n	800b014 <quorem+0xac>
 800b040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b048:	b922      	cbnz	r2, 800b054 <quorem+0xec>
 800b04a:	3b04      	subs	r3, #4
 800b04c:	429d      	cmp	r5, r3
 800b04e:	461a      	mov	r2, r3
 800b050:	d30a      	bcc.n	800b068 <quorem+0x100>
 800b052:	613c      	str	r4, [r7, #16]
 800b054:	4630      	mov	r0, r6
 800b056:	b003      	add	sp, #12
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	6812      	ldr	r2, [r2, #0]
 800b05e:	3b04      	subs	r3, #4
 800b060:	2a00      	cmp	r2, #0
 800b062:	d1ce      	bne.n	800b002 <quorem+0x9a>
 800b064:	3c01      	subs	r4, #1
 800b066:	e7c9      	b.n	800affc <quorem+0x94>
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	3b04      	subs	r3, #4
 800b06c:	2a00      	cmp	r2, #0
 800b06e:	d1f0      	bne.n	800b052 <quorem+0xea>
 800b070:	3c01      	subs	r4, #1
 800b072:	e7eb      	b.n	800b04c <quorem+0xe4>
 800b074:	2000      	movs	r0, #0
 800b076:	e7ee      	b.n	800b056 <quorem+0xee>

0800b078 <_dtoa_r>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	ed2d 8b04 	vpush	{d8-d9}
 800b080:	69c5      	ldr	r5, [r0, #28]
 800b082:	b093      	sub	sp, #76	; 0x4c
 800b084:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b088:	ec57 6b10 	vmov	r6, r7, d0
 800b08c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b090:	9107      	str	r1, [sp, #28]
 800b092:	4604      	mov	r4, r0
 800b094:	920a      	str	r2, [sp, #40]	; 0x28
 800b096:	930d      	str	r3, [sp, #52]	; 0x34
 800b098:	b975      	cbnz	r5, 800b0b8 <_dtoa_r+0x40>
 800b09a:	2010      	movs	r0, #16
 800b09c:	f000 fe2a 	bl	800bcf4 <malloc>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	61e0      	str	r0, [r4, #28]
 800b0a4:	b920      	cbnz	r0, 800b0b0 <_dtoa_r+0x38>
 800b0a6:	4bae      	ldr	r3, [pc, #696]	; (800b360 <_dtoa_r+0x2e8>)
 800b0a8:	21ef      	movs	r1, #239	; 0xef
 800b0aa:	48ae      	ldr	r0, [pc, #696]	; (800b364 <_dtoa_r+0x2ec>)
 800b0ac:	f001 fce6 	bl	800ca7c <__assert_func>
 800b0b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0b4:	6005      	str	r5, [r0, #0]
 800b0b6:	60c5      	str	r5, [r0, #12]
 800b0b8:	69e3      	ldr	r3, [r4, #28]
 800b0ba:	6819      	ldr	r1, [r3, #0]
 800b0bc:	b151      	cbz	r1, 800b0d4 <_dtoa_r+0x5c>
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	604a      	str	r2, [r1, #4]
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4093      	lsls	r3, r2
 800b0c6:	608b      	str	r3, [r1, #8]
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f000 ff07 	bl	800bedc <_Bfree>
 800b0ce:	69e3      	ldr	r3, [r4, #28]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	1e3b      	subs	r3, r7, #0
 800b0d6:	bfbb      	ittet	lt
 800b0d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b0dc:	9303      	strlt	r3, [sp, #12]
 800b0de:	2300      	movge	r3, #0
 800b0e0:	2201      	movlt	r2, #1
 800b0e2:	bfac      	ite	ge
 800b0e4:	f8c8 3000 	strge.w	r3, [r8]
 800b0e8:	f8c8 2000 	strlt.w	r2, [r8]
 800b0ec:	4b9e      	ldr	r3, [pc, #632]	; (800b368 <_dtoa_r+0x2f0>)
 800b0ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b0f2:	ea33 0308 	bics.w	r3, r3, r8
 800b0f6:	d11b      	bne.n	800b130 <_dtoa_r+0xb8>
 800b0f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b104:	4333      	orrs	r3, r6
 800b106:	f000 8593 	beq.w	800bc30 <_dtoa_r+0xbb8>
 800b10a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b10c:	b963      	cbnz	r3, 800b128 <_dtoa_r+0xb0>
 800b10e:	4b97      	ldr	r3, [pc, #604]	; (800b36c <_dtoa_r+0x2f4>)
 800b110:	e027      	b.n	800b162 <_dtoa_r+0xea>
 800b112:	4b97      	ldr	r3, [pc, #604]	; (800b370 <_dtoa_r+0x2f8>)
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	3308      	adds	r3, #8
 800b118:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b11a:	6013      	str	r3, [r2, #0]
 800b11c:	9800      	ldr	r0, [sp, #0]
 800b11e:	b013      	add	sp, #76	; 0x4c
 800b120:	ecbd 8b04 	vpop	{d8-d9}
 800b124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b128:	4b90      	ldr	r3, [pc, #576]	; (800b36c <_dtoa_r+0x2f4>)
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	3303      	adds	r3, #3
 800b12e:	e7f3      	b.n	800b118 <_dtoa_r+0xa0>
 800b130:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b134:	2200      	movs	r2, #0
 800b136:	ec51 0b17 	vmov	r0, r1, d7
 800b13a:	eeb0 8a47 	vmov.f32	s16, s14
 800b13e:	eef0 8a67 	vmov.f32	s17, s15
 800b142:	2300      	movs	r3, #0
 800b144:	f7f5 fce8 	bl	8000b18 <__aeabi_dcmpeq>
 800b148:	4681      	mov	r9, r0
 800b14a:	b160      	cbz	r0, 800b166 <_dtoa_r+0xee>
 800b14c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b14e:	2301      	movs	r3, #1
 800b150:	6013      	str	r3, [r2, #0]
 800b152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 8568 	beq.w	800bc2a <_dtoa_r+0xbb2>
 800b15a:	4b86      	ldr	r3, [pc, #536]	; (800b374 <_dtoa_r+0x2fc>)
 800b15c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	3b01      	subs	r3, #1
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	e7da      	b.n	800b11c <_dtoa_r+0xa4>
 800b166:	aa10      	add	r2, sp, #64	; 0x40
 800b168:	a911      	add	r1, sp, #68	; 0x44
 800b16a:	4620      	mov	r0, r4
 800b16c:	eeb0 0a48 	vmov.f32	s0, s16
 800b170:	eef0 0a68 	vmov.f32	s1, s17
 800b174:	f001 f994 	bl	800c4a0 <__d2b>
 800b178:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b17c:	4682      	mov	sl, r0
 800b17e:	2d00      	cmp	r5, #0
 800b180:	d07f      	beq.n	800b282 <_dtoa_r+0x20a>
 800b182:	ee18 3a90 	vmov	r3, s17
 800b186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b18a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b18e:	ec51 0b18 	vmov	r0, r1, d8
 800b192:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b19a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b19e:	4619      	mov	r1, r3
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4b75      	ldr	r3, [pc, #468]	; (800b378 <_dtoa_r+0x300>)
 800b1a4:	f7f5 f898 	bl	80002d8 <__aeabi_dsub>
 800b1a8:	a367      	add	r3, pc, #412	; (adr r3, 800b348 <_dtoa_r+0x2d0>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 fa4b 	bl	8000648 <__aeabi_dmul>
 800b1b2:	a367      	add	r3, pc, #412	; (adr r3, 800b350 <_dtoa_r+0x2d8>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f890 	bl	80002dc <__adddf3>
 800b1bc:	4606      	mov	r6, r0
 800b1be:	4628      	mov	r0, r5
 800b1c0:	460f      	mov	r7, r1
 800b1c2:	f7f5 f9d7 	bl	8000574 <__aeabi_i2d>
 800b1c6:	a364      	add	r3, pc, #400	; (adr r3, 800b358 <_dtoa_r+0x2e0>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f7f5 fa3c 	bl	8000648 <__aeabi_dmul>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	f7f5 f880 	bl	80002dc <__adddf3>
 800b1dc:	4606      	mov	r6, r0
 800b1de:	460f      	mov	r7, r1
 800b1e0:	f7f5 fce2 	bl	8000ba8 <__aeabi_d2iz>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	4683      	mov	fp, r0
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	f7f5 fc9d 	bl	8000b2c <__aeabi_dcmplt>
 800b1f2:	b148      	cbz	r0, 800b208 <_dtoa_r+0x190>
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	f7f5 f9bd 	bl	8000574 <__aeabi_i2d>
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	463b      	mov	r3, r7
 800b1fe:	f7f5 fc8b 	bl	8000b18 <__aeabi_dcmpeq>
 800b202:	b908      	cbnz	r0, 800b208 <_dtoa_r+0x190>
 800b204:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b208:	f1bb 0f16 	cmp.w	fp, #22
 800b20c:	d857      	bhi.n	800b2be <_dtoa_r+0x246>
 800b20e:	4b5b      	ldr	r3, [pc, #364]	; (800b37c <_dtoa_r+0x304>)
 800b210:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	ec51 0b18 	vmov	r0, r1, d8
 800b21c:	f7f5 fc86 	bl	8000b2c <__aeabi_dcmplt>
 800b220:	2800      	cmp	r0, #0
 800b222:	d04e      	beq.n	800b2c2 <_dtoa_r+0x24a>
 800b224:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b228:	2300      	movs	r3, #0
 800b22a:	930c      	str	r3, [sp, #48]	; 0x30
 800b22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b22e:	1b5b      	subs	r3, r3, r5
 800b230:	1e5a      	subs	r2, r3, #1
 800b232:	bf45      	ittet	mi
 800b234:	f1c3 0301 	rsbmi	r3, r3, #1
 800b238:	9305      	strmi	r3, [sp, #20]
 800b23a:	2300      	movpl	r3, #0
 800b23c:	2300      	movmi	r3, #0
 800b23e:	9206      	str	r2, [sp, #24]
 800b240:	bf54      	ite	pl
 800b242:	9305      	strpl	r3, [sp, #20]
 800b244:	9306      	strmi	r3, [sp, #24]
 800b246:	f1bb 0f00 	cmp.w	fp, #0
 800b24a:	db3c      	blt.n	800b2c6 <_dtoa_r+0x24e>
 800b24c:	9b06      	ldr	r3, [sp, #24]
 800b24e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b252:	445b      	add	r3, fp
 800b254:	9306      	str	r3, [sp, #24]
 800b256:	2300      	movs	r3, #0
 800b258:	9308      	str	r3, [sp, #32]
 800b25a:	9b07      	ldr	r3, [sp, #28]
 800b25c:	2b09      	cmp	r3, #9
 800b25e:	d868      	bhi.n	800b332 <_dtoa_r+0x2ba>
 800b260:	2b05      	cmp	r3, #5
 800b262:	bfc4      	itt	gt
 800b264:	3b04      	subgt	r3, #4
 800b266:	9307      	strgt	r3, [sp, #28]
 800b268:	9b07      	ldr	r3, [sp, #28]
 800b26a:	f1a3 0302 	sub.w	r3, r3, #2
 800b26e:	bfcc      	ite	gt
 800b270:	2500      	movgt	r5, #0
 800b272:	2501      	movle	r5, #1
 800b274:	2b03      	cmp	r3, #3
 800b276:	f200 8085 	bhi.w	800b384 <_dtoa_r+0x30c>
 800b27a:	e8df f003 	tbb	[pc, r3]
 800b27e:	3b2e      	.short	0x3b2e
 800b280:	5839      	.short	0x5839
 800b282:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b286:	441d      	add	r5, r3
 800b288:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b28c:	2b20      	cmp	r3, #32
 800b28e:	bfc1      	itttt	gt
 800b290:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b294:	fa08 f803 	lslgt.w	r8, r8, r3
 800b298:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b29c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b2a0:	bfd6      	itet	le
 800b2a2:	f1c3 0320 	rsble	r3, r3, #32
 800b2a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b2aa:	fa06 f003 	lslle.w	r0, r6, r3
 800b2ae:	f7f5 f951 	bl	8000554 <__aeabi_ui2d>
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b2b8:	3d01      	subs	r5, #1
 800b2ba:	920e      	str	r2, [sp, #56]	; 0x38
 800b2bc:	e76f      	b.n	800b19e <_dtoa_r+0x126>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e7b3      	b.n	800b22a <_dtoa_r+0x1b2>
 800b2c2:	900c      	str	r0, [sp, #48]	; 0x30
 800b2c4:	e7b2      	b.n	800b22c <_dtoa_r+0x1b4>
 800b2c6:	9b05      	ldr	r3, [sp, #20]
 800b2c8:	eba3 030b 	sub.w	r3, r3, fp
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	f1cb 0300 	rsb	r3, fp, #0
 800b2d2:	9308      	str	r3, [sp, #32]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2d8:	e7bf      	b.n	800b25a <_dtoa_r+0x1e2>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dc52      	bgt.n	800b38a <_dtoa_r+0x312>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ee:	e00b      	b.n	800b308 <_dtoa_r+0x290>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e7f3      	b.n	800b2dc <_dtoa_r+0x264>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fa:	445b      	add	r3, fp
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	3301      	adds	r3, #1
 800b300:	2b01      	cmp	r3, #1
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	bfb8      	it	lt
 800b306:	2301      	movlt	r3, #1
 800b308:	69e0      	ldr	r0, [r4, #28]
 800b30a:	2100      	movs	r1, #0
 800b30c:	2204      	movs	r2, #4
 800b30e:	f102 0614 	add.w	r6, r2, #20
 800b312:	429e      	cmp	r6, r3
 800b314:	d93d      	bls.n	800b392 <_dtoa_r+0x31a>
 800b316:	6041      	str	r1, [r0, #4]
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fd9f 	bl	800be5c <_Balloc>
 800b31e:	9000      	str	r0, [sp, #0]
 800b320:	2800      	cmp	r0, #0
 800b322:	d139      	bne.n	800b398 <_dtoa_r+0x320>
 800b324:	4b16      	ldr	r3, [pc, #88]	; (800b380 <_dtoa_r+0x308>)
 800b326:	4602      	mov	r2, r0
 800b328:	f240 11af 	movw	r1, #431	; 0x1af
 800b32c:	e6bd      	b.n	800b0aa <_dtoa_r+0x32>
 800b32e:	2301      	movs	r3, #1
 800b330:	e7e1      	b.n	800b2f6 <_dtoa_r+0x27e>
 800b332:	2501      	movs	r5, #1
 800b334:	2300      	movs	r3, #0
 800b336:	9307      	str	r3, [sp, #28]
 800b338:	9509      	str	r5, [sp, #36]	; 0x24
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	2200      	movs	r2, #0
 800b344:	2312      	movs	r3, #18
 800b346:	e7d1      	b.n	800b2ec <_dtoa_r+0x274>
 800b348:	636f4361 	.word	0x636f4361
 800b34c:	3fd287a7 	.word	0x3fd287a7
 800b350:	8b60c8b3 	.word	0x8b60c8b3
 800b354:	3fc68a28 	.word	0x3fc68a28
 800b358:	509f79fb 	.word	0x509f79fb
 800b35c:	3fd34413 	.word	0x3fd34413
 800b360:	0800ce15 	.word	0x0800ce15
 800b364:	0800ce2c 	.word	0x0800ce2c
 800b368:	7ff00000 	.word	0x7ff00000
 800b36c:	0800ce11 	.word	0x0800ce11
 800b370:	0800ce08 	.word	0x0800ce08
 800b374:	0800cde5 	.word	0x0800cde5
 800b378:	3ff80000 	.word	0x3ff80000
 800b37c:	0800cf18 	.word	0x0800cf18
 800b380:	0800ce84 	.word	0x0800ce84
 800b384:	2301      	movs	r3, #1
 800b386:	9309      	str	r3, [sp, #36]	; 0x24
 800b388:	e7d7      	b.n	800b33a <_dtoa_r+0x2c2>
 800b38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	e7ba      	b.n	800b308 <_dtoa_r+0x290>
 800b392:	3101      	adds	r1, #1
 800b394:	0052      	lsls	r2, r2, #1
 800b396:	e7ba      	b.n	800b30e <_dtoa_r+0x296>
 800b398:	69e3      	ldr	r3, [r4, #28]
 800b39a:	9a00      	ldr	r2, [sp, #0]
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	9b04      	ldr	r3, [sp, #16]
 800b3a0:	2b0e      	cmp	r3, #14
 800b3a2:	f200 80a8 	bhi.w	800b4f6 <_dtoa_r+0x47e>
 800b3a6:	2d00      	cmp	r5, #0
 800b3a8:	f000 80a5 	beq.w	800b4f6 <_dtoa_r+0x47e>
 800b3ac:	f1bb 0f00 	cmp.w	fp, #0
 800b3b0:	dd38      	ble.n	800b424 <_dtoa_r+0x3ac>
 800b3b2:	4bc0      	ldr	r3, [pc, #768]	; (800b6b4 <_dtoa_r+0x63c>)
 800b3b4:	f00b 020f 	and.w	r2, fp, #15
 800b3b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b3c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b3c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b3c8:	d019      	beq.n	800b3fe <_dtoa_r+0x386>
 800b3ca:	4bbb      	ldr	r3, [pc, #748]	; (800b6b8 <_dtoa_r+0x640>)
 800b3cc:	ec51 0b18 	vmov	r0, r1, d8
 800b3d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3d4:	f7f5 fa62 	bl	800089c <__aeabi_ddiv>
 800b3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3dc:	f008 080f 	and.w	r8, r8, #15
 800b3e0:	2503      	movs	r5, #3
 800b3e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b6b8 <_dtoa_r+0x640>
 800b3e6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ea:	d10a      	bne.n	800b402 <_dtoa_r+0x38a>
 800b3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	463b      	mov	r3, r7
 800b3f4:	f7f5 fa52 	bl	800089c <__aeabi_ddiv>
 800b3f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3fc:	e02b      	b.n	800b456 <_dtoa_r+0x3de>
 800b3fe:	2502      	movs	r5, #2
 800b400:	e7ef      	b.n	800b3e2 <_dtoa_r+0x36a>
 800b402:	f018 0f01 	tst.w	r8, #1
 800b406:	d008      	beq.n	800b41a <_dtoa_r+0x3a2>
 800b408:	4630      	mov	r0, r6
 800b40a:	4639      	mov	r1, r7
 800b40c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b410:	f7f5 f91a 	bl	8000648 <__aeabi_dmul>
 800b414:	3501      	adds	r5, #1
 800b416:	4606      	mov	r6, r0
 800b418:	460f      	mov	r7, r1
 800b41a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b41e:	f109 0908 	add.w	r9, r9, #8
 800b422:	e7e0      	b.n	800b3e6 <_dtoa_r+0x36e>
 800b424:	f000 809f 	beq.w	800b566 <_dtoa_r+0x4ee>
 800b428:	f1cb 0600 	rsb	r6, fp, #0
 800b42c:	4ba1      	ldr	r3, [pc, #644]	; (800b6b4 <_dtoa_r+0x63c>)
 800b42e:	4fa2      	ldr	r7, [pc, #648]	; (800b6b8 <_dtoa_r+0x640>)
 800b430:	f006 020f 	and.w	r2, r6, #15
 800b434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	ec51 0b18 	vmov	r0, r1, d8
 800b440:	f7f5 f902 	bl	8000648 <__aeabi_dmul>
 800b444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b448:	1136      	asrs	r6, r6, #4
 800b44a:	2300      	movs	r3, #0
 800b44c:	2502      	movs	r5, #2
 800b44e:	2e00      	cmp	r6, #0
 800b450:	d17e      	bne.n	800b550 <_dtoa_r+0x4d8>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1d0      	bne.n	800b3f8 <_dtoa_r+0x380>
 800b456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b458:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 8084 	beq.w	800b56a <_dtoa_r+0x4f2>
 800b462:	4b96      	ldr	r3, [pc, #600]	; (800b6bc <_dtoa_r+0x644>)
 800b464:	2200      	movs	r2, #0
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f7f5 fb5f 	bl	8000b2c <__aeabi_dcmplt>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d07b      	beq.n	800b56a <_dtoa_r+0x4f2>
 800b472:	9b04      	ldr	r3, [sp, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d078      	beq.n	800b56a <_dtoa_r+0x4f2>
 800b478:	9b01      	ldr	r3, [sp, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	dd39      	ble.n	800b4f2 <_dtoa_r+0x47a>
 800b47e:	4b90      	ldr	r3, [pc, #576]	; (800b6c0 <_dtoa_r+0x648>)
 800b480:	2200      	movs	r2, #0
 800b482:	4640      	mov	r0, r8
 800b484:	4649      	mov	r1, r9
 800b486:	f7f5 f8df 	bl	8000648 <__aeabi_dmul>
 800b48a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b48e:	9e01      	ldr	r6, [sp, #4]
 800b490:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b494:	3501      	adds	r5, #1
 800b496:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b49a:	4628      	mov	r0, r5
 800b49c:	f7f5 f86a 	bl	8000574 <__aeabi_i2d>
 800b4a0:	4642      	mov	r2, r8
 800b4a2:	464b      	mov	r3, r9
 800b4a4:	f7f5 f8d0 	bl	8000648 <__aeabi_dmul>
 800b4a8:	4b86      	ldr	r3, [pc, #536]	; (800b6c4 <_dtoa_r+0x64c>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f7f4 ff16 	bl	80002dc <__adddf3>
 800b4b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4b8:	9303      	str	r3, [sp, #12]
 800b4ba:	2e00      	cmp	r6, #0
 800b4bc:	d158      	bne.n	800b570 <_dtoa_r+0x4f8>
 800b4be:	4b82      	ldr	r3, [pc, #520]	; (800b6c8 <_dtoa_r+0x650>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f4 ff07 	bl	80002d8 <__aeabi_dsub>
 800b4ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	4689      	mov	r9, r1
 800b4d2:	f7f5 fb49 	bl	8000b68 <__aeabi_dcmpgt>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f040 8296 	bne.w	800ba08 <_dtoa_r+0x990>
 800b4dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	f7f5 fb20 	bl	8000b2c <__aeabi_dcmplt>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	f040 8289 	bne.w	800ba04 <_dtoa_r+0x98c>
 800b4f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f2c0 814e 	blt.w	800b79a <_dtoa_r+0x722>
 800b4fe:	f1bb 0f0e 	cmp.w	fp, #14
 800b502:	f300 814a 	bgt.w	800b79a <_dtoa_r+0x722>
 800b506:	4b6b      	ldr	r3, [pc, #428]	; (800b6b4 <_dtoa_r+0x63c>)
 800b508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b50c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b512:	2b00      	cmp	r3, #0
 800b514:	f280 80dc 	bge.w	800b6d0 <_dtoa_r+0x658>
 800b518:	9b04      	ldr	r3, [sp, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f300 80d8 	bgt.w	800b6d0 <_dtoa_r+0x658>
 800b520:	f040 826f 	bne.w	800ba02 <_dtoa_r+0x98a>
 800b524:	4b68      	ldr	r3, [pc, #416]	; (800b6c8 <_dtoa_r+0x650>)
 800b526:	2200      	movs	r2, #0
 800b528:	4640      	mov	r0, r8
 800b52a:	4649      	mov	r1, r9
 800b52c:	f7f5 f88c 	bl	8000648 <__aeabi_dmul>
 800b530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b534:	f7f5 fb0e 	bl	8000b54 <__aeabi_dcmpge>
 800b538:	9e04      	ldr	r6, [sp, #16]
 800b53a:	4637      	mov	r7, r6
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f040 8245 	bne.w	800b9cc <_dtoa_r+0x954>
 800b542:	9d00      	ldr	r5, [sp, #0]
 800b544:	2331      	movs	r3, #49	; 0x31
 800b546:	f805 3b01 	strb.w	r3, [r5], #1
 800b54a:	f10b 0b01 	add.w	fp, fp, #1
 800b54e:	e241      	b.n	800b9d4 <_dtoa_r+0x95c>
 800b550:	07f2      	lsls	r2, r6, #31
 800b552:	d505      	bpl.n	800b560 <_dtoa_r+0x4e8>
 800b554:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b558:	f7f5 f876 	bl	8000648 <__aeabi_dmul>
 800b55c:	3501      	adds	r5, #1
 800b55e:	2301      	movs	r3, #1
 800b560:	1076      	asrs	r6, r6, #1
 800b562:	3708      	adds	r7, #8
 800b564:	e773      	b.n	800b44e <_dtoa_r+0x3d6>
 800b566:	2502      	movs	r5, #2
 800b568:	e775      	b.n	800b456 <_dtoa_r+0x3de>
 800b56a:	9e04      	ldr	r6, [sp, #16]
 800b56c:	465f      	mov	r7, fp
 800b56e:	e792      	b.n	800b496 <_dtoa_r+0x41e>
 800b570:	9900      	ldr	r1, [sp, #0]
 800b572:	4b50      	ldr	r3, [pc, #320]	; (800b6b4 <_dtoa_r+0x63c>)
 800b574:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b578:	4431      	add	r1, r6
 800b57a:	9102      	str	r1, [sp, #8]
 800b57c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b57e:	eeb0 9a47 	vmov.f32	s18, s14
 800b582:	eef0 9a67 	vmov.f32	s19, s15
 800b586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b58a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b58e:	2900      	cmp	r1, #0
 800b590:	d044      	beq.n	800b61c <_dtoa_r+0x5a4>
 800b592:	494e      	ldr	r1, [pc, #312]	; (800b6cc <_dtoa_r+0x654>)
 800b594:	2000      	movs	r0, #0
 800b596:	f7f5 f981 	bl	800089c <__aeabi_ddiv>
 800b59a:	ec53 2b19 	vmov	r2, r3, d9
 800b59e:	f7f4 fe9b 	bl	80002d8 <__aeabi_dsub>
 800b5a2:	9d00      	ldr	r5, [sp, #0]
 800b5a4:	ec41 0b19 	vmov	d9, r0, r1
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	4640      	mov	r0, r8
 800b5ac:	f7f5 fafc 	bl	8000ba8 <__aeabi_d2iz>
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	f7f4 ffdf 	bl	8000574 <__aeabi_i2d>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4649      	mov	r1, r9
 800b5be:	f7f4 fe8b 	bl	80002d8 <__aeabi_dsub>
 800b5c2:	3630      	adds	r6, #48	; 0x30
 800b5c4:	f805 6b01 	strb.w	r6, [r5], #1
 800b5c8:	ec53 2b19 	vmov	r2, r3, d9
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	4689      	mov	r9, r1
 800b5d0:	f7f5 faac 	bl	8000b2c <__aeabi_dcmplt>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d164      	bne.n	800b6a2 <_dtoa_r+0x62a>
 800b5d8:	4642      	mov	r2, r8
 800b5da:	464b      	mov	r3, r9
 800b5dc:	4937      	ldr	r1, [pc, #220]	; (800b6bc <_dtoa_r+0x644>)
 800b5de:	2000      	movs	r0, #0
 800b5e0:	f7f4 fe7a 	bl	80002d8 <__aeabi_dsub>
 800b5e4:	ec53 2b19 	vmov	r2, r3, d9
 800b5e8:	f7f5 faa0 	bl	8000b2c <__aeabi_dcmplt>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f040 80b6 	bne.w	800b75e <_dtoa_r+0x6e6>
 800b5f2:	9b02      	ldr	r3, [sp, #8]
 800b5f4:	429d      	cmp	r5, r3
 800b5f6:	f43f af7c 	beq.w	800b4f2 <_dtoa_r+0x47a>
 800b5fa:	4b31      	ldr	r3, [pc, #196]	; (800b6c0 <_dtoa_r+0x648>)
 800b5fc:	ec51 0b19 	vmov	r0, r1, d9
 800b600:	2200      	movs	r2, #0
 800b602:	f7f5 f821 	bl	8000648 <__aeabi_dmul>
 800b606:	4b2e      	ldr	r3, [pc, #184]	; (800b6c0 <_dtoa_r+0x648>)
 800b608:	ec41 0b19 	vmov	d9, r0, r1
 800b60c:	2200      	movs	r2, #0
 800b60e:	4640      	mov	r0, r8
 800b610:	4649      	mov	r1, r9
 800b612:	f7f5 f819 	bl	8000648 <__aeabi_dmul>
 800b616:	4680      	mov	r8, r0
 800b618:	4689      	mov	r9, r1
 800b61a:	e7c5      	b.n	800b5a8 <_dtoa_r+0x530>
 800b61c:	ec51 0b17 	vmov	r0, r1, d7
 800b620:	f7f5 f812 	bl	8000648 <__aeabi_dmul>
 800b624:	9b02      	ldr	r3, [sp, #8]
 800b626:	9d00      	ldr	r5, [sp, #0]
 800b628:	930f      	str	r3, [sp, #60]	; 0x3c
 800b62a:	ec41 0b19 	vmov	d9, r0, r1
 800b62e:	4649      	mov	r1, r9
 800b630:	4640      	mov	r0, r8
 800b632:	f7f5 fab9 	bl	8000ba8 <__aeabi_d2iz>
 800b636:	4606      	mov	r6, r0
 800b638:	f7f4 ff9c 	bl	8000574 <__aeabi_i2d>
 800b63c:	3630      	adds	r6, #48	; 0x30
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	4640      	mov	r0, r8
 800b644:	4649      	mov	r1, r9
 800b646:	f7f4 fe47 	bl	80002d8 <__aeabi_dsub>
 800b64a:	f805 6b01 	strb.w	r6, [r5], #1
 800b64e:	9b02      	ldr	r3, [sp, #8]
 800b650:	429d      	cmp	r5, r3
 800b652:	4680      	mov	r8, r0
 800b654:	4689      	mov	r9, r1
 800b656:	f04f 0200 	mov.w	r2, #0
 800b65a:	d124      	bne.n	800b6a6 <_dtoa_r+0x62e>
 800b65c:	4b1b      	ldr	r3, [pc, #108]	; (800b6cc <_dtoa_r+0x654>)
 800b65e:	ec51 0b19 	vmov	r0, r1, d9
 800b662:	f7f4 fe3b 	bl	80002dc <__adddf3>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4640      	mov	r0, r8
 800b66c:	4649      	mov	r1, r9
 800b66e:	f7f5 fa7b 	bl	8000b68 <__aeabi_dcmpgt>
 800b672:	2800      	cmp	r0, #0
 800b674:	d173      	bne.n	800b75e <_dtoa_r+0x6e6>
 800b676:	ec53 2b19 	vmov	r2, r3, d9
 800b67a:	4914      	ldr	r1, [pc, #80]	; (800b6cc <_dtoa_r+0x654>)
 800b67c:	2000      	movs	r0, #0
 800b67e:	f7f4 fe2b 	bl	80002d8 <__aeabi_dsub>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4640      	mov	r0, r8
 800b688:	4649      	mov	r1, r9
 800b68a:	f7f5 fa4f 	bl	8000b2c <__aeabi_dcmplt>
 800b68e:	2800      	cmp	r0, #0
 800b690:	f43f af2f 	beq.w	800b4f2 <_dtoa_r+0x47a>
 800b694:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b696:	1e6b      	subs	r3, r5, #1
 800b698:	930f      	str	r3, [sp, #60]	; 0x3c
 800b69a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b69e:	2b30      	cmp	r3, #48	; 0x30
 800b6a0:	d0f8      	beq.n	800b694 <_dtoa_r+0x61c>
 800b6a2:	46bb      	mov	fp, r7
 800b6a4:	e04a      	b.n	800b73c <_dtoa_r+0x6c4>
 800b6a6:	4b06      	ldr	r3, [pc, #24]	; (800b6c0 <_dtoa_r+0x648>)
 800b6a8:	f7f4 ffce 	bl	8000648 <__aeabi_dmul>
 800b6ac:	4680      	mov	r8, r0
 800b6ae:	4689      	mov	r9, r1
 800b6b0:	e7bd      	b.n	800b62e <_dtoa_r+0x5b6>
 800b6b2:	bf00      	nop
 800b6b4:	0800cf18 	.word	0x0800cf18
 800b6b8:	0800cef0 	.word	0x0800cef0
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	40240000 	.word	0x40240000
 800b6c4:	401c0000 	.word	0x401c0000
 800b6c8:	40140000 	.word	0x40140000
 800b6cc:	3fe00000 	.word	0x3fe00000
 800b6d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b6d4:	9d00      	ldr	r5, [sp, #0]
 800b6d6:	4642      	mov	r2, r8
 800b6d8:	464b      	mov	r3, r9
 800b6da:	4630      	mov	r0, r6
 800b6dc:	4639      	mov	r1, r7
 800b6de:	f7f5 f8dd 	bl	800089c <__aeabi_ddiv>
 800b6e2:	f7f5 fa61 	bl	8000ba8 <__aeabi_d2iz>
 800b6e6:	9001      	str	r0, [sp, #4]
 800b6e8:	f7f4 ff44 	bl	8000574 <__aeabi_i2d>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	f7f4 ffaa 	bl	8000648 <__aeabi_dmul>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	f7f4 fdec 	bl	80002d8 <__aeabi_dsub>
 800b700:	9e01      	ldr	r6, [sp, #4]
 800b702:	9f04      	ldr	r7, [sp, #16]
 800b704:	3630      	adds	r6, #48	; 0x30
 800b706:	f805 6b01 	strb.w	r6, [r5], #1
 800b70a:	9e00      	ldr	r6, [sp, #0]
 800b70c:	1bae      	subs	r6, r5, r6
 800b70e:	42b7      	cmp	r7, r6
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	d134      	bne.n	800b780 <_dtoa_r+0x708>
 800b716:	f7f4 fde1 	bl	80002dc <__adddf3>
 800b71a:	4642      	mov	r2, r8
 800b71c:	464b      	mov	r3, r9
 800b71e:	4606      	mov	r6, r0
 800b720:	460f      	mov	r7, r1
 800b722:	f7f5 fa21 	bl	8000b68 <__aeabi_dcmpgt>
 800b726:	b9c8      	cbnz	r0, 800b75c <_dtoa_r+0x6e4>
 800b728:	4642      	mov	r2, r8
 800b72a:	464b      	mov	r3, r9
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f5 f9f2 	bl	8000b18 <__aeabi_dcmpeq>
 800b734:	b110      	cbz	r0, 800b73c <_dtoa_r+0x6c4>
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	07db      	lsls	r3, r3, #31
 800b73a:	d40f      	bmi.n	800b75c <_dtoa_r+0x6e4>
 800b73c:	4651      	mov	r1, sl
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 fbcc 	bl	800bedc <_Bfree>
 800b744:	2300      	movs	r3, #0
 800b746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b748:	702b      	strb	r3, [r5, #0]
 800b74a:	f10b 0301 	add.w	r3, fp, #1
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b752:	2b00      	cmp	r3, #0
 800b754:	f43f ace2 	beq.w	800b11c <_dtoa_r+0xa4>
 800b758:	601d      	str	r5, [r3, #0]
 800b75a:	e4df      	b.n	800b11c <_dtoa_r+0xa4>
 800b75c:	465f      	mov	r7, fp
 800b75e:	462b      	mov	r3, r5
 800b760:	461d      	mov	r5, r3
 800b762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b766:	2a39      	cmp	r2, #57	; 0x39
 800b768:	d106      	bne.n	800b778 <_dtoa_r+0x700>
 800b76a:	9a00      	ldr	r2, [sp, #0]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d1f7      	bne.n	800b760 <_dtoa_r+0x6e8>
 800b770:	9900      	ldr	r1, [sp, #0]
 800b772:	2230      	movs	r2, #48	; 0x30
 800b774:	3701      	adds	r7, #1
 800b776:	700a      	strb	r2, [r1, #0]
 800b778:	781a      	ldrb	r2, [r3, #0]
 800b77a:	3201      	adds	r2, #1
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	e790      	b.n	800b6a2 <_dtoa_r+0x62a>
 800b780:	4ba3      	ldr	r3, [pc, #652]	; (800ba10 <_dtoa_r+0x998>)
 800b782:	2200      	movs	r2, #0
 800b784:	f7f4 ff60 	bl	8000648 <__aeabi_dmul>
 800b788:	2200      	movs	r2, #0
 800b78a:	2300      	movs	r3, #0
 800b78c:	4606      	mov	r6, r0
 800b78e:	460f      	mov	r7, r1
 800b790:	f7f5 f9c2 	bl	8000b18 <__aeabi_dcmpeq>
 800b794:	2800      	cmp	r0, #0
 800b796:	d09e      	beq.n	800b6d6 <_dtoa_r+0x65e>
 800b798:	e7d0      	b.n	800b73c <_dtoa_r+0x6c4>
 800b79a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b79c:	2a00      	cmp	r2, #0
 800b79e:	f000 80ca 	beq.w	800b936 <_dtoa_r+0x8be>
 800b7a2:	9a07      	ldr	r2, [sp, #28]
 800b7a4:	2a01      	cmp	r2, #1
 800b7a6:	f300 80ad 	bgt.w	800b904 <_dtoa_r+0x88c>
 800b7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7ac:	2a00      	cmp	r2, #0
 800b7ae:	f000 80a5 	beq.w	800b8fc <_dtoa_r+0x884>
 800b7b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7b6:	9e08      	ldr	r6, [sp, #32]
 800b7b8:	9d05      	ldr	r5, [sp, #20]
 800b7ba:	9a05      	ldr	r2, [sp, #20]
 800b7bc:	441a      	add	r2, r3
 800b7be:	9205      	str	r2, [sp, #20]
 800b7c0:	9a06      	ldr	r2, [sp, #24]
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	441a      	add	r2, r3
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	9206      	str	r2, [sp, #24]
 800b7ca:	f000 fc3d 	bl	800c048 <__i2b>
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	b165      	cbz	r5, 800b7ec <_dtoa_r+0x774>
 800b7d2:	9b06      	ldr	r3, [sp, #24]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	dd09      	ble.n	800b7ec <_dtoa_r+0x774>
 800b7d8:	42ab      	cmp	r3, r5
 800b7da:	9a05      	ldr	r2, [sp, #20]
 800b7dc:	bfa8      	it	ge
 800b7de:	462b      	movge	r3, r5
 800b7e0:	1ad2      	subs	r2, r2, r3
 800b7e2:	9205      	str	r2, [sp, #20]
 800b7e4:	9a06      	ldr	r2, [sp, #24]
 800b7e6:	1aed      	subs	r5, r5, r3
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	9306      	str	r3, [sp, #24]
 800b7ec:	9b08      	ldr	r3, [sp, #32]
 800b7ee:	b1f3      	cbz	r3, 800b82e <_dtoa_r+0x7b6>
 800b7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 80a3 	beq.w	800b93e <_dtoa_r+0x8c6>
 800b7f8:	2e00      	cmp	r6, #0
 800b7fa:	dd10      	ble.n	800b81e <_dtoa_r+0x7a6>
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	4632      	mov	r2, r6
 800b800:	4620      	mov	r0, r4
 800b802:	f000 fce1 	bl	800c1c8 <__pow5mult>
 800b806:	4652      	mov	r2, sl
 800b808:	4601      	mov	r1, r0
 800b80a:	4607      	mov	r7, r0
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 fc31 	bl	800c074 <__multiply>
 800b812:	4651      	mov	r1, sl
 800b814:	4680      	mov	r8, r0
 800b816:	4620      	mov	r0, r4
 800b818:	f000 fb60 	bl	800bedc <_Bfree>
 800b81c:	46c2      	mov	sl, r8
 800b81e:	9b08      	ldr	r3, [sp, #32]
 800b820:	1b9a      	subs	r2, r3, r6
 800b822:	d004      	beq.n	800b82e <_dtoa_r+0x7b6>
 800b824:	4651      	mov	r1, sl
 800b826:	4620      	mov	r0, r4
 800b828:	f000 fcce 	bl	800c1c8 <__pow5mult>
 800b82c:	4682      	mov	sl, r0
 800b82e:	2101      	movs	r1, #1
 800b830:	4620      	mov	r0, r4
 800b832:	f000 fc09 	bl	800c048 <__i2b>
 800b836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	4606      	mov	r6, r0
 800b83c:	f340 8081 	ble.w	800b942 <_dtoa_r+0x8ca>
 800b840:	461a      	mov	r2, r3
 800b842:	4601      	mov	r1, r0
 800b844:	4620      	mov	r0, r4
 800b846:	f000 fcbf 	bl	800c1c8 <__pow5mult>
 800b84a:	9b07      	ldr	r3, [sp, #28]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	4606      	mov	r6, r0
 800b850:	dd7a      	ble.n	800b948 <_dtoa_r+0x8d0>
 800b852:	f04f 0800 	mov.w	r8, #0
 800b856:	6933      	ldr	r3, [r6, #16]
 800b858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b85c:	6918      	ldr	r0, [r3, #16]
 800b85e:	f000 fba5 	bl	800bfac <__hi0bits>
 800b862:	f1c0 0020 	rsb	r0, r0, #32
 800b866:	9b06      	ldr	r3, [sp, #24]
 800b868:	4418      	add	r0, r3
 800b86a:	f010 001f 	ands.w	r0, r0, #31
 800b86e:	f000 8094 	beq.w	800b99a <_dtoa_r+0x922>
 800b872:	f1c0 0320 	rsb	r3, r0, #32
 800b876:	2b04      	cmp	r3, #4
 800b878:	f340 8085 	ble.w	800b986 <_dtoa_r+0x90e>
 800b87c:	9b05      	ldr	r3, [sp, #20]
 800b87e:	f1c0 001c 	rsb	r0, r0, #28
 800b882:	4403      	add	r3, r0
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	9b06      	ldr	r3, [sp, #24]
 800b888:	4403      	add	r3, r0
 800b88a:	4405      	add	r5, r0
 800b88c:	9306      	str	r3, [sp, #24]
 800b88e:	9b05      	ldr	r3, [sp, #20]
 800b890:	2b00      	cmp	r3, #0
 800b892:	dd05      	ble.n	800b8a0 <_dtoa_r+0x828>
 800b894:	4651      	mov	r1, sl
 800b896:	461a      	mov	r2, r3
 800b898:	4620      	mov	r0, r4
 800b89a:	f000 fcef 	bl	800c27c <__lshift>
 800b89e:	4682      	mov	sl, r0
 800b8a0:	9b06      	ldr	r3, [sp, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dd05      	ble.n	800b8b2 <_dtoa_r+0x83a>
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 fce6 	bl	800c27c <__lshift>
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d072      	beq.n	800b99e <_dtoa_r+0x926>
 800b8b8:	4631      	mov	r1, r6
 800b8ba:	4650      	mov	r0, sl
 800b8bc:	f000 fd4a 	bl	800c354 <__mcmp>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	da6c      	bge.n	800b99e <_dtoa_r+0x926>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4651      	mov	r1, sl
 800b8c8:	220a      	movs	r2, #10
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fb28 	bl	800bf20 <__multadd>
 800b8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8d6:	4682      	mov	sl, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 81b0 	beq.w	800bc3e <_dtoa_r+0xbc6>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	220a      	movs	r2, #10
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f000 fb1b 	bl	800bf20 <__multadd>
 800b8ea:	9b01      	ldr	r3, [sp, #4]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	4607      	mov	r7, r0
 800b8f0:	f300 8096 	bgt.w	800ba20 <_dtoa_r+0x9a8>
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	dc59      	bgt.n	800b9ae <_dtoa_r+0x936>
 800b8fa:	e091      	b.n	800ba20 <_dtoa_r+0x9a8>
 800b8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b902:	e758      	b.n	800b7b6 <_dtoa_r+0x73e>
 800b904:	9b04      	ldr	r3, [sp, #16]
 800b906:	1e5e      	subs	r6, r3, #1
 800b908:	9b08      	ldr	r3, [sp, #32]
 800b90a:	42b3      	cmp	r3, r6
 800b90c:	bfbf      	itttt	lt
 800b90e:	9b08      	ldrlt	r3, [sp, #32]
 800b910:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b912:	9608      	strlt	r6, [sp, #32]
 800b914:	1af3      	sublt	r3, r6, r3
 800b916:	bfb4      	ite	lt
 800b918:	18d2      	addlt	r2, r2, r3
 800b91a:	1b9e      	subge	r6, r3, r6
 800b91c:	9b04      	ldr	r3, [sp, #16]
 800b91e:	bfbc      	itt	lt
 800b920:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b922:	2600      	movlt	r6, #0
 800b924:	2b00      	cmp	r3, #0
 800b926:	bfb7      	itett	lt
 800b928:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b92c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b930:	1a9d      	sublt	r5, r3, r2
 800b932:	2300      	movlt	r3, #0
 800b934:	e741      	b.n	800b7ba <_dtoa_r+0x742>
 800b936:	9e08      	ldr	r6, [sp, #32]
 800b938:	9d05      	ldr	r5, [sp, #20]
 800b93a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b93c:	e748      	b.n	800b7d0 <_dtoa_r+0x758>
 800b93e:	9a08      	ldr	r2, [sp, #32]
 800b940:	e770      	b.n	800b824 <_dtoa_r+0x7ac>
 800b942:	9b07      	ldr	r3, [sp, #28]
 800b944:	2b01      	cmp	r3, #1
 800b946:	dc19      	bgt.n	800b97c <_dtoa_r+0x904>
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	b9bb      	cbnz	r3, 800b97c <_dtoa_r+0x904>
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b952:	b99b      	cbnz	r3, 800b97c <_dtoa_r+0x904>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b95a:	0d1b      	lsrs	r3, r3, #20
 800b95c:	051b      	lsls	r3, r3, #20
 800b95e:	b183      	cbz	r3, 800b982 <_dtoa_r+0x90a>
 800b960:	9b05      	ldr	r3, [sp, #20]
 800b962:	3301      	adds	r3, #1
 800b964:	9305      	str	r3, [sp, #20]
 800b966:	9b06      	ldr	r3, [sp, #24]
 800b968:	3301      	adds	r3, #1
 800b96a:	9306      	str	r3, [sp, #24]
 800b96c:	f04f 0801 	mov.w	r8, #1
 800b970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b972:	2b00      	cmp	r3, #0
 800b974:	f47f af6f 	bne.w	800b856 <_dtoa_r+0x7de>
 800b978:	2001      	movs	r0, #1
 800b97a:	e774      	b.n	800b866 <_dtoa_r+0x7ee>
 800b97c:	f04f 0800 	mov.w	r8, #0
 800b980:	e7f6      	b.n	800b970 <_dtoa_r+0x8f8>
 800b982:	4698      	mov	r8, r3
 800b984:	e7f4      	b.n	800b970 <_dtoa_r+0x8f8>
 800b986:	d082      	beq.n	800b88e <_dtoa_r+0x816>
 800b988:	9a05      	ldr	r2, [sp, #20]
 800b98a:	331c      	adds	r3, #28
 800b98c:	441a      	add	r2, r3
 800b98e:	9205      	str	r2, [sp, #20]
 800b990:	9a06      	ldr	r2, [sp, #24]
 800b992:	441a      	add	r2, r3
 800b994:	441d      	add	r5, r3
 800b996:	9206      	str	r2, [sp, #24]
 800b998:	e779      	b.n	800b88e <_dtoa_r+0x816>
 800b99a:	4603      	mov	r3, r0
 800b99c:	e7f4      	b.n	800b988 <_dtoa_r+0x910>
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	dc37      	bgt.n	800ba14 <_dtoa_r+0x99c>
 800b9a4:	9b07      	ldr	r3, [sp, #28]
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	dd34      	ble.n	800ba14 <_dtoa_r+0x99c>
 800b9aa:	9b04      	ldr	r3, [sp, #16]
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	9b01      	ldr	r3, [sp, #4]
 800b9b0:	b963      	cbnz	r3, 800b9cc <_dtoa_r+0x954>
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	2205      	movs	r2, #5
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 fab2 	bl	800bf20 <__multadd>
 800b9bc:	4601      	mov	r1, r0
 800b9be:	4606      	mov	r6, r0
 800b9c0:	4650      	mov	r0, sl
 800b9c2:	f000 fcc7 	bl	800c354 <__mcmp>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f73f adbb 	bgt.w	800b542 <_dtoa_r+0x4ca>
 800b9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ce:	9d00      	ldr	r5, [sp, #0]
 800b9d0:	ea6f 0b03 	mvn.w	fp, r3
 800b9d4:	f04f 0800 	mov.w	r8, #0
 800b9d8:	4631      	mov	r1, r6
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 fa7e 	bl	800bedc <_Bfree>
 800b9e0:	2f00      	cmp	r7, #0
 800b9e2:	f43f aeab 	beq.w	800b73c <_dtoa_r+0x6c4>
 800b9e6:	f1b8 0f00 	cmp.w	r8, #0
 800b9ea:	d005      	beq.n	800b9f8 <_dtoa_r+0x980>
 800b9ec:	45b8      	cmp	r8, r7
 800b9ee:	d003      	beq.n	800b9f8 <_dtoa_r+0x980>
 800b9f0:	4641      	mov	r1, r8
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 fa72 	bl	800bedc <_Bfree>
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 fa6e 	bl	800bedc <_Bfree>
 800ba00:	e69c      	b.n	800b73c <_dtoa_r+0x6c4>
 800ba02:	2600      	movs	r6, #0
 800ba04:	4637      	mov	r7, r6
 800ba06:	e7e1      	b.n	800b9cc <_dtoa_r+0x954>
 800ba08:	46bb      	mov	fp, r7
 800ba0a:	4637      	mov	r7, r6
 800ba0c:	e599      	b.n	800b542 <_dtoa_r+0x4ca>
 800ba0e:	bf00      	nop
 800ba10:	40240000 	.word	0x40240000
 800ba14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 80c8 	beq.w	800bbac <_dtoa_r+0xb34>
 800ba1c:	9b04      	ldr	r3, [sp, #16]
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	dd05      	ble.n	800ba30 <_dtoa_r+0x9b8>
 800ba24:	4639      	mov	r1, r7
 800ba26:	462a      	mov	r2, r5
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f000 fc27 	bl	800c27c <__lshift>
 800ba2e:	4607      	mov	r7, r0
 800ba30:	f1b8 0f00 	cmp.w	r8, #0
 800ba34:	d05b      	beq.n	800baee <_dtoa_r+0xa76>
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f000 fa0f 	bl	800be5c <_Balloc>
 800ba3e:	4605      	mov	r5, r0
 800ba40:	b928      	cbnz	r0, 800ba4e <_dtoa_r+0x9d6>
 800ba42:	4b83      	ldr	r3, [pc, #524]	; (800bc50 <_dtoa_r+0xbd8>)
 800ba44:	4602      	mov	r2, r0
 800ba46:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ba4a:	f7ff bb2e 	b.w	800b0aa <_dtoa_r+0x32>
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	3202      	adds	r2, #2
 800ba52:	0092      	lsls	r2, r2, #2
 800ba54:	f107 010c 	add.w	r1, r7, #12
 800ba58:	300c      	adds	r0, #12
 800ba5a:	f001 f801 	bl	800ca60 <memcpy>
 800ba5e:	2201      	movs	r2, #1
 800ba60:	4629      	mov	r1, r5
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fc0a 	bl	800c27c <__lshift>
 800ba68:	9b00      	ldr	r3, [sp, #0]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	9304      	str	r3, [sp, #16]
 800ba6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba72:	4413      	add	r3, r2
 800ba74:	9308      	str	r3, [sp, #32]
 800ba76:	9b02      	ldr	r3, [sp, #8]
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	46b8      	mov	r8, r7
 800ba7e:	9306      	str	r3, [sp, #24]
 800ba80:	4607      	mov	r7, r0
 800ba82:	9b04      	ldr	r3, [sp, #16]
 800ba84:	4631      	mov	r1, r6
 800ba86:	3b01      	subs	r3, #1
 800ba88:	4650      	mov	r0, sl
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	f7ff fa6c 	bl	800af68 <quorem>
 800ba90:	4641      	mov	r1, r8
 800ba92:	9002      	str	r0, [sp, #8]
 800ba94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ba98:	4650      	mov	r0, sl
 800ba9a:	f000 fc5b 	bl	800c354 <__mcmp>
 800ba9e:	463a      	mov	r2, r7
 800baa0:	9005      	str	r0, [sp, #20]
 800baa2:	4631      	mov	r1, r6
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 fc71 	bl	800c38c <__mdiff>
 800baaa:	68c2      	ldr	r2, [r0, #12]
 800baac:	4605      	mov	r5, r0
 800baae:	bb02      	cbnz	r2, 800baf2 <_dtoa_r+0xa7a>
 800bab0:	4601      	mov	r1, r0
 800bab2:	4650      	mov	r0, sl
 800bab4:	f000 fc4e 	bl	800c354 <__mcmp>
 800bab8:	4602      	mov	r2, r0
 800baba:	4629      	mov	r1, r5
 800babc:	4620      	mov	r0, r4
 800babe:	9209      	str	r2, [sp, #36]	; 0x24
 800bac0:	f000 fa0c 	bl	800bedc <_Bfree>
 800bac4:	9b07      	ldr	r3, [sp, #28]
 800bac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bac8:	9d04      	ldr	r5, [sp, #16]
 800baca:	ea43 0102 	orr.w	r1, r3, r2
 800bace:	9b06      	ldr	r3, [sp, #24]
 800bad0:	4319      	orrs	r1, r3
 800bad2:	d110      	bne.n	800baf6 <_dtoa_r+0xa7e>
 800bad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bad8:	d029      	beq.n	800bb2e <_dtoa_r+0xab6>
 800bada:	9b05      	ldr	r3, [sp, #20]
 800badc:	2b00      	cmp	r3, #0
 800bade:	dd02      	ble.n	800bae6 <_dtoa_r+0xa6e>
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	f883 9000 	strb.w	r9, [r3]
 800baec:	e774      	b.n	800b9d8 <_dtoa_r+0x960>
 800baee:	4638      	mov	r0, r7
 800baf0:	e7ba      	b.n	800ba68 <_dtoa_r+0x9f0>
 800baf2:	2201      	movs	r2, #1
 800baf4:	e7e1      	b.n	800baba <_dtoa_r+0xa42>
 800baf6:	9b05      	ldr	r3, [sp, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	db04      	blt.n	800bb06 <_dtoa_r+0xa8e>
 800bafc:	9907      	ldr	r1, [sp, #28]
 800bafe:	430b      	orrs	r3, r1
 800bb00:	9906      	ldr	r1, [sp, #24]
 800bb02:	430b      	orrs	r3, r1
 800bb04:	d120      	bne.n	800bb48 <_dtoa_r+0xad0>
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	dded      	ble.n	800bae6 <_dtoa_r+0xa6e>
 800bb0a:	4651      	mov	r1, sl
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 fbb4 	bl	800c27c <__lshift>
 800bb14:	4631      	mov	r1, r6
 800bb16:	4682      	mov	sl, r0
 800bb18:	f000 fc1c 	bl	800c354 <__mcmp>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	dc03      	bgt.n	800bb28 <_dtoa_r+0xab0>
 800bb20:	d1e1      	bne.n	800bae6 <_dtoa_r+0xa6e>
 800bb22:	f019 0f01 	tst.w	r9, #1
 800bb26:	d0de      	beq.n	800bae6 <_dtoa_r+0xa6e>
 800bb28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb2c:	d1d8      	bne.n	800bae0 <_dtoa_r+0xa68>
 800bb2e:	9a01      	ldr	r2, [sp, #4]
 800bb30:	2339      	movs	r3, #57	; 0x39
 800bb32:	7013      	strb	r3, [r2, #0]
 800bb34:	462b      	mov	r3, r5
 800bb36:	461d      	mov	r5, r3
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb3e:	2a39      	cmp	r2, #57	; 0x39
 800bb40:	d06c      	beq.n	800bc1c <_dtoa_r+0xba4>
 800bb42:	3201      	adds	r2, #1
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	e747      	b.n	800b9d8 <_dtoa_r+0x960>
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	dd07      	ble.n	800bb5c <_dtoa_r+0xae4>
 800bb4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb50:	d0ed      	beq.n	800bb2e <_dtoa_r+0xab6>
 800bb52:	9a01      	ldr	r2, [sp, #4]
 800bb54:	f109 0301 	add.w	r3, r9, #1
 800bb58:	7013      	strb	r3, [r2, #0]
 800bb5a:	e73d      	b.n	800b9d8 <_dtoa_r+0x960>
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	9a08      	ldr	r2, [sp, #32]
 800bb60:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d043      	beq.n	800bbf0 <_dtoa_r+0xb78>
 800bb68:	4651      	mov	r1, sl
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	220a      	movs	r2, #10
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 f9d6 	bl	800bf20 <__multadd>
 800bb74:	45b8      	cmp	r8, r7
 800bb76:	4682      	mov	sl, r0
 800bb78:	f04f 0300 	mov.w	r3, #0
 800bb7c:	f04f 020a 	mov.w	r2, #10
 800bb80:	4641      	mov	r1, r8
 800bb82:	4620      	mov	r0, r4
 800bb84:	d107      	bne.n	800bb96 <_dtoa_r+0xb1e>
 800bb86:	f000 f9cb 	bl	800bf20 <__multadd>
 800bb8a:	4680      	mov	r8, r0
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	9b04      	ldr	r3, [sp, #16]
 800bb90:	3301      	adds	r3, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	e775      	b.n	800ba82 <_dtoa_r+0xa0a>
 800bb96:	f000 f9c3 	bl	800bf20 <__multadd>
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	2300      	movs	r3, #0
 800bba0:	220a      	movs	r2, #10
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 f9bc 	bl	800bf20 <__multadd>
 800bba8:	4607      	mov	r7, r0
 800bbaa:	e7f0      	b.n	800bb8e <_dtoa_r+0xb16>
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	9d00      	ldr	r5, [sp, #0]
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	f7ff f9d7 	bl	800af68 <quorem>
 800bbba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bbbe:	9b00      	ldr	r3, [sp, #0]
 800bbc0:	f805 9b01 	strb.w	r9, [r5], #1
 800bbc4:	1aea      	subs	r2, r5, r3
 800bbc6:	9b01      	ldr	r3, [sp, #4]
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	dd07      	ble.n	800bbdc <_dtoa_r+0xb64>
 800bbcc:	4651      	mov	r1, sl
 800bbce:	2300      	movs	r3, #0
 800bbd0:	220a      	movs	r2, #10
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 f9a4 	bl	800bf20 <__multadd>
 800bbd8:	4682      	mov	sl, r0
 800bbda:	e7ea      	b.n	800bbb2 <_dtoa_r+0xb3a>
 800bbdc:	9b01      	ldr	r3, [sp, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	bfc8      	it	gt
 800bbe2:	461d      	movgt	r5, r3
 800bbe4:	9b00      	ldr	r3, [sp, #0]
 800bbe6:	bfd8      	it	le
 800bbe8:	2501      	movle	r5, #1
 800bbea:	441d      	add	r5, r3
 800bbec:	f04f 0800 	mov.w	r8, #0
 800bbf0:	4651      	mov	r1, sl
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f000 fb41 	bl	800c27c <__lshift>
 800bbfa:	4631      	mov	r1, r6
 800bbfc:	4682      	mov	sl, r0
 800bbfe:	f000 fba9 	bl	800c354 <__mcmp>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	dc96      	bgt.n	800bb34 <_dtoa_r+0xabc>
 800bc06:	d102      	bne.n	800bc0e <_dtoa_r+0xb96>
 800bc08:	f019 0f01 	tst.w	r9, #1
 800bc0c:	d192      	bne.n	800bb34 <_dtoa_r+0xabc>
 800bc0e:	462b      	mov	r3, r5
 800bc10:	461d      	mov	r5, r3
 800bc12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc16:	2a30      	cmp	r2, #48	; 0x30
 800bc18:	d0fa      	beq.n	800bc10 <_dtoa_r+0xb98>
 800bc1a:	e6dd      	b.n	800b9d8 <_dtoa_r+0x960>
 800bc1c:	9a00      	ldr	r2, [sp, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d189      	bne.n	800bb36 <_dtoa_r+0xabe>
 800bc22:	f10b 0b01 	add.w	fp, fp, #1
 800bc26:	2331      	movs	r3, #49	; 0x31
 800bc28:	e796      	b.n	800bb58 <_dtoa_r+0xae0>
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <_dtoa_r+0xbdc>)
 800bc2c:	f7ff ba99 	b.w	800b162 <_dtoa_r+0xea>
 800bc30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f47f aa6d 	bne.w	800b112 <_dtoa_r+0x9a>
 800bc38:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <_dtoa_r+0xbe0>)
 800bc3a:	f7ff ba92 	b.w	800b162 <_dtoa_r+0xea>
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dcb5      	bgt.n	800bbb0 <_dtoa_r+0xb38>
 800bc44:	9b07      	ldr	r3, [sp, #28]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	f73f aeb1 	bgt.w	800b9ae <_dtoa_r+0x936>
 800bc4c:	e7b0      	b.n	800bbb0 <_dtoa_r+0xb38>
 800bc4e:	bf00      	nop
 800bc50:	0800ce84 	.word	0x0800ce84
 800bc54:	0800cde4 	.word	0x0800cde4
 800bc58:	0800ce08 	.word	0x0800ce08

0800bc5c <_free_r>:
 800bc5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc5e:	2900      	cmp	r1, #0
 800bc60:	d044      	beq.n	800bcec <_free_r+0x90>
 800bc62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc66:	9001      	str	r0, [sp, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc6e:	bfb8      	it	lt
 800bc70:	18e4      	addlt	r4, r4, r3
 800bc72:	f000 f8e7 	bl	800be44 <__malloc_lock>
 800bc76:	4a1e      	ldr	r2, [pc, #120]	; (800bcf0 <_free_r+0x94>)
 800bc78:	9801      	ldr	r0, [sp, #4]
 800bc7a:	6813      	ldr	r3, [r2, #0]
 800bc7c:	b933      	cbnz	r3, 800bc8c <_free_r+0x30>
 800bc7e:	6063      	str	r3, [r4, #4]
 800bc80:	6014      	str	r4, [r2, #0]
 800bc82:	b003      	add	sp, #12
 800bc84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc88:	f000 b8e2 	b.w	800be50 <__malloc_unlock>
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	d908      	bls.n	800bca2 <_free_r+0x46>
 800bc90:	6825      	ldr	r5, [r4, #0]
 800bc92:	1961      	adds	r1, r4, r5
 800bc94:	428b      	cmp	r3, r1
 800bc96:	bf01      	itttt	eq
 800bc98:	6819      	ldreq	r1, [r3, #0]
 800bc9a:	685b      	ldreq	r3, [r3, #4]
 800bc9c:	1949      	addeq	r1, r1, r5
 800bc9e:	6021      	streq	r1, [r4, #0]
 800bca0:	e7ed      	b.n	800bc7e <_free_r+0x22>
 800bca2:	461a      	mov	r2, r3
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	b10b      	cbz	r3, 800bcac <_free_r+0x50>
 800bca8:	42a3      	cmp	r3, r4
 800bcaa:	d9fa      	bls.n	800bca2 <_free_r+0x46>
 800bcac:	6811      	ldr	r1, [r2, #0]
 800bcae:	1855      	adds	r5, r2, r1
 800bcb0:	42a5      	cmp	r5, r4
 800bcb2:	d10b      	bne.n	800bccc <_free_r+0x70>
 800bcb4:	6824      	ldr	r4, [r4, #0]
 800bcb6:	4421      	add	r1, r4
 800bcb8:	1854      	adds	r4, r2, r1
 800bcba:	42a3      	cmp	r3, r4
 800bcbc:	6011      	str	r1, [r2, #0]
 800bcbe:	d1e0      	bne.n	800bc82 <_free_r+0x26>
 800bcc0:	681c      	ldr	r4, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	6053      	str	r3, [r2, #4]
 800bcc6:	440c      	add	r4, r1
 800bcc8:	6014      	str	r4, [r2, #0]
 800bcca:	e7da      	b.n	800bc82 <_free_r+0x26>
 800bccc:	d902      	bls.n	800bcd4 <_free_r+0x78>
 800bcce:	230c      	movs	r3, #12
 800bcd0:	6003      	str	r3, [r0, #0]
 800bcd2:	e7d6      	b.n	800bc82 <_free_r+0x26>
 800bcd4:	6825      	ldr	r5, [r4, #0]
 800bcd6:	1961      	adds	r1, r4, r5
 800bcd8:	428b      	cmp	r3, r1
 800bcda:	bf04      	itt	eq
 800bcdc:	6819      	ldreq	r1, [r3, #0]
 800bcde:	685b      	ldreq	r3, [r3, #4]
 800bce0:	6063      	str	r3, [r4, #4]
 800bce2:	bf04      	itt	eq
 800bce4:	1949      	addeq	r1, r1, r5
 800bce6:	6021      	streq	r1, [r4, #0]
 800bce8:	6054      	str	r4, [r2, #4]
 800bcea:	e7ca      	b.n	800bc82 <_free_r+0x26>
 800bcec:	b003      	add	sp, #12
 800bcee:	bd30      	pop	{r4, r5, pc}
 800bcf0:	20001520 	.word	0x20001520

0800bcf4 <malloc>:
 800bcf4:	4b02      	ldr	r3, [pc, #8]	; (800bd00 <malloc+0xc>)
 800bcf6:	4601      	mov	r1, r0
 800bcf8:	6818      	ldr	r0, [r3, #0]
 800bcfa:	f000 b823 	b.w	800bd44 <_malloc_r>
 800bcfe:	bf00      	nop
 800bd00:	2000006c 	.word	0x2000006c

0800bd04 <sbrk_aligned>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	4e0e      	ldr	r6, [pc, #56]	; (800bd40 <sbrk_aligned+0x3c>)
 800bd08:	460c      	mov	r4, r1
 800bd0a:	6831      	ldr	r1, [r6, #0]
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	b911      	cbnz	r1, 800bd16 <sbrk_aligned+0x12>
 800bd10:	f000 fe96 	bl	800ca40 <_sbrk_r>
 800bd14:	6030      	str	r0, [r6, #0]
 800bd16:	4621      	mov	r1, r4
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f000 fe91 	bl	800ca40 <_sbrk_r>
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	d00a      	beq.n	800bd38 <sbrk_aligned+0x34>
 800bd22:	1cc4      	adds	r4, r0, #3
 800bd24:	f024 0403 	bic.w	r4, r4, #3
 800bd28:	42a0      	cmp	r0, r4
 800bd2a:	d007      	beq.n	800bd3c <sbrk_aligned+0x38>
 800bd2c:	1a21      	subs	r1, r4, r0
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f000 fe86 	bl	800ca40 <_sbrk_r>
 800bd34:	3001      	adds	r0, #1
 800bd36:	d101      	bne.n	800bd3c <sbrk_aligned+0x38>
 800bd38:	f04f 34ff 	mov.w	r4, #4294967295
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	bd70      	pop	{r4, r5, r6, pc}
 800bd40:	20001524 	.word	0x20001524

0800bd44 <_malloc_r>:
 800bd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd48:	1ccd      	adds	r5, r1, #3
 800bd4a:	f025 0503 	bic.w	r5, r5, #3
 800bd4e:	3508      	adds	r5, #8
 800bd50:	2d0c      	cmp	r5, #12
 800bd52:	bf38      	it	cc
 800bd54:	250c      	movcc	r5, #12
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	4607      	mov	r7, r0
 800bd5a:	db01      	blt.n	800bd60 <_malloc_r+0x1c>
 800bd5c:	42a9      	cmp	r1, r5
 800bd5e:	d905      	bls.n	800bd6c <_malloc_r+0x28>
 800bd60:	230c      	movs	r3, #12
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	2600      	movs	r6, #0
 800bd66:	4630      	mov	r0, r6
 800bd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be40 <_malloc_r+0xfc>
 800bd70:	f000 f868 	bl	800be44 <__malloc_lock>
 800bd74:	f8d8 3000 	ldr.w	r3, [r8]
 800bd78:	461c      	mov	r4, r3
 800bd7a:	bb5c      	cbnz	r4, 800bdd4 <_malloc_r+0x90>
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4638      	mov	r0, r7
 800bd80:	f7ff ffc0 	bl	800bd04 <sbrk_aligned>
 800bd84:	1c43      	adds	r3, r0, #1
 800bd86:	4604      	mov	r4, r0
 800bd88:	d155      	bne.n	800be36 <_malloc_r+0xf2>
 800bd8a:	f8d8 4000 	ldr.w	r4, [r8]
 800bd8e:	4626      	mov	r6, r4
 800bd90:	2e00      	cmp	r6, #0
 800bd92:	d145      	bne.n	800be20 <_malloc_r+0xdc>
 800bd94:	2c00      	cmp	r4, #0
 800bd96:	d048      	beq.n	800be2a <_malloc_r+0xe6>
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	eb04 0903 	add.w	r9, r4, r3
 800bda2:	f000 fe4d 	bl	800ca40 <_sbrk_r>
 800bda6:	4581      	cmp	r9, r0
 800bda8:	d13f      	bne.n	800be2a <_malloc_r+0xe6>
 800bdaa:	6821      	ldr	r1, [r4, #0]
 800bdac:	1a6d      	subs	r5, r5, r1
 800bdae:	4629      	mov	r1, r5
 800bdb0:	4638      	mov	r0, r7
 800bdb2:	f7ff ffa7 	bl	800bd04 <sbrk_aligned>
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d037      	beq.n	800be2a <_malloc_r+0xe6>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	442b      	add	r3, r5
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	f8d8 3000 	ldr.w	r3, [r8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d038      	beq.n	800be3a <_malloc_r+0xf6>
 800bdc8:	685a      	ldr	r2, [r3, #4]
 800bdca:	42a2      	cmp	r2, r4
 800bdcc:	d12b      	bne.n	800be26 <_malloc_r+0xe2>
 800bdce:	2200      	movs	r2, #0
 800bdd0:	605a      	str	r2, [r3, #4]
 800bdd2:	e00f      	b.n	800bdf4 <_malloc_r+0xb0>
 800bdd4:	6822      	ldr	r2, [r4, #0]
 800bdd6:	1b52      	subs	r2, r2, r5
 800bdd8:	d41f      	bmi.n	800be1a <_malloc_r+0xd6>
 800bdda:	2a0b      	cmp	r2, #11
 800bddc:	d917      	bls.n	800be0e <_malloc_r+0xca>
 800bdde:	1961      	adds	r1, r4, r5
 800bde0:	42a3      	cmp	r3, r4
 800bde2:	6025      	str	r5, [r4, #0]
 800bde4:	bf18      	it	ne
 800bde6:	6059      	strne	r1, [r3, #4]
 800bde8:	6863      	ldr	r3, [r4, #4]
 800bdea:	bf08      	it	eq
 800bdec:	f8c8 1000 	streq.w	r1, [r8]
 800bdf0:	5162      	str	r2, [r4, r5]
 800bdf2:	604b      	str	r3, [r1, #4]
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f104 060b 	add.w	r6, r4, #11
 800bdfa:	f000 f829 	bl	800be50 <__malloc_unlock>
 800bdfe:	f026 0607 	bic.w	r6, r6, #7
 800be02:	1d23      	adds	r3, r4, #4
 800be04:	1af2      	subs	r2, r6, r3
 800be06:	d0ae      	beq.n	800bd66 <_malloc_r+0x22>
 800be08:	1b9b      	subs	r3, r3, r6
 800be0a:	50a3      	str	r3, [r4, r2]
 800be0c:	e7ab      	b.n	800bd66 <_malloc_r+0x22>
 800be0e:	42a3      	cmp	r3, r4
 800be10:	6862      	ldr	r2, [r4, #4]
 800be12:	d1dd      	bne.n	800bdd0 <_malloc_r+0x8c>
 800be14:	f8c8 2000 	str.w	r2, [r8]
 800be18:	e7ec      	b.n	800bdf4 <_malloc_r+0xb0>
 800be1a:	4623      	mov	r3, r4
 800be1c:	6864      	ldr	r4, [r4, #4]
 800be1e:	e7ac      	b.n	800bd7a <_malloc_r+0x36>
 800be20:	4634      	mov	r4, r6
 800be22:	6876      	ldr	r6, [r6, #4]
 800be24:	e7b4      	b.n	800bd90 <_malloc_r+0x4c>
 800be26:	4613      	mov	r3, r2
 800be28:	e7cc      	b.n	800bdc4 <_malloc_r+0x80>
 800be2a:	230c      	movs	r3, #12
 800be2c:	603b      	str	r3, [r7, #0]
 800be2e:	4638      	mov	r0, r7
 800be30:	f000 f80e 	bl	800be50 <__malloc_unlock>
 800be34:	e797      	b.n	800bd66 <_malloc_r+0x22>
 800be36:	6025      	str	r5, [r4, #0]
 800be38:	e7dc      	b.n	800bdf4 <_malloc_r+0xb0>
 800be3a:	605b      	str	r3, [r3, #4]
 800be3c:	deff      	udf	#255	; 0xff
 800be3e:	bf00      	nop
 800be40:	20001520 	.word	0x20001520

0800be44 <__malloc_lock>:
 800be44:	4801      	ldr	r0, [pc, #4]	; (800be4c <__malloc_lock+0x8>)
 800be46:	f7ff b88d 	b.w	800af64 <__retarget_lock_acquire_recursive>
 800be4a:	bf00      	nop
 800be4c:	2000151c 	.word	0x2000151c

0800be50 <__malloc_unlock>:
 800be50:	4801      	ldr	r0, [pc, #4]	; (800be58 <__malloc_unlock+0x8>)
 800be52:	f7ff b888 	b.w	800af66 <__retarget_lock_release_recursive>
 800be56:	bf00      	nop
 800be58:	2000151c 	.word	0x2000151c

0800be5c <_Balloc>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	69c6      	ldr	r6, [r0, #28]
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	b976      	cbnz	r6, 800be84 <_Balloc+0x28>
 800be66:	2010      	movs	r0, #16
 800be68:	f7ff ff44 	bl	800bcf4 <malloc>
 800be6c:	4602      	mov	r2, r0
 800be6e:	61e0      	str	r0, [r4, #28]
 800be70:	b920      	cbnz	r0, 800be7c <_Balloc+0x20>
 800be72:	4b18      	ldr	r3, [pc, #96]	; (800bed4 <_Balloc+0x78>)
 800be74:	4818      	ldr	r0, [pc, #96]	; (800bed8 <_Balloc+0x7c>)
 800be76:	216b      	movs	r1, #107	; 0x6b
 800be78:	f000 fe00 	bl	800ca7c <__assert_func>
 800be7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be80:	6006      	str	r6, [r0, #0]
 800be82:	60c6      	str	r6, [r0, #12]
 800be84:	69e6      	ldr	r6, [r4, #28]
 800be86:	68f3      	ldr	r3, [r6, #12]
 800be88:	b183      	cbz	r3, 800beac <_Balloc+0x50>
 800be8a:	69e3      	ldr	r3, [r4, #28]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be92:	b9b8      	cbnz	r0, 800bec4 <_Balloc+0x68>
 800be94:	2101      	movs	r1, #1
 800be96:	fa01 f605 	lsl.w	r6, r1, r5
 800be9a:	1d72      	adds	r2, r6, #5
 800be9c:	0092      	lsls	r2, r2, #2
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 fe0a 	bl	800cab8 <_calloc_r>
 800bea4:	b160      	cbz	r0, 800bec0 <_Balloc+0x64>
 800bea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800beaa:	e00e      	b.n	800beca <_Balloc+0x6e>
 800beac:	2221      	movs	r2, #33	; 0x21
 800beae:	2104      	movs	r1, #4
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fe01 	bl	800cab8 <_calloc_r>
 800beb6:	69e3      	ldr	r3, [r4, #28]
 800beb8:	60f0      	str	r0, [r6, #12]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1e4      	bne.n	800be8a <_Balloc+0x2e>
 800bec0:	2000      	movs	r0, #0
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	6802      	ldr	r2, [r0, #0]
 800bec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beca:	2300      	movs	r3, #0
 800becc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bed0:	e7f7      	b.n	800bec2 <_Balloc+0x66>
 800bed2:	bf00      	nop
 800bed4:	0800ce15 	.word	0x0800ce15
 800bed8:	0800ce95 	.word	0x0800ce95

0800bedc <_Bfree>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	69c6      	ldr	r6, [r0, #28]
 800bee0:	4605      	mov	r5, r0
 800bee2:	460c      	mov	r4, r1
 800bee4:	b976      	cbnz	r6, 800bf04 <_Bfree+0x28>
 800bee6:	2010      	movs	r0, #16
 800bee8:	f7ff ff04 	bl	800bcf4 <malloc>
 800beec:	4602      	mov	r2, r0
 800beee:	61e8      	str	r0, [r5, #28]
 800bef0:	b920      	cbnz	r0, 800befc <_Bfree+0x20>
 800bef2:	4b09      	ldr	r3, [pc, #36]	; (800bf18 <_Bfree+0x3c>)
 800bef4:	4809      	ldr	r0, [pc, #36]	; (800bf1c <_Bfree+0x40>)
 800bef6:	218f      	movs	r1, #143	; 0x8f
 800bef8:	f000 fdc0 	bl	800ca7c <__assert_func>
 800befc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf00:	6006      	str	r6, [r0, #0]
 800bf02:	60c6      	str	r6, [r0, #12]
 800bf04:	b13c      	cbz	r4, 800bf16 <_Bfree+0x3a>
 800bf06:	69eb      	ldr	r3, [r5, #28]
 800bf08:	6862      	ldr	r2, [r4, #4]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf10:	6021      	str	r1, [r4, #0]
 800bf12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	0800ce15 	.word	0x0800ce15
 800bf1c:	0800ce95 	.word	0x0800ce95

0800bf20 <__multadd>:
 800bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf24:	690d      	ldr	r5, [r1, #16]
 800bf26:	4607      	mov	r7, r0
 800bf28:	460c      	mov	r4, r1
 800bf2a:	461e      	mov	r6, r3
 800bf2c:	f101 0c14 	add.w	ip, r1, #20
 800bf30:	2000      	movs	r0, #0
 800bf32:	f8dc 3000 	ldr.w	r3, [ip]
 800bf36:	b299      	uxth	r1, r3
 800bf38:	fb02 6101 	mla	r1, r2, r1, r6
 800bf3c:	0c1e      	lsrs	r6, r3, #16
 800bf3e:	0c0b      	lsrs	r3, r1, #16
 800bf40:	fb02 3306 	mla	r3, r2, r6, r3
 800bf44:	b289      	uxth	r1, r1
 800bf46:	3001      	adds	r0, #1
 800bf48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf4c:	4285      	cmp	r5, r0
 800bf4e:	f84c 1b04 	str.w	r1, [ip], #4
 800bf52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf56:	dcec      	bgt.n	800bf32 <__multadd+0x12>
 800bf58:	b30e      	cbz	r6, 800bf9e <__multadd+0x7e>
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	42ab      	cmp	r3, r5
 800bf5e:	dc19      	bgt.n	800bf94 <__multadd+0x74>
 800bf60:	6861      	ldr	r1, [r4, #4]
 800bf62:	4638      	mov	r0, r7
 800bf64:	3101      	adds	r1, #1
 800bf66:	f7ff ff79 	bl	800be5c <_Balloc>
 800bf6a:	4680      	mov	r8, r0
 800bf6c:	b928      	cbnz	r0, 800bf7a <__multadd+0x5a>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	4b0c      	ldr	r3, [pc, #48]	; (800bfa4 <__multadd+0x84>)
 800bf72:	480d      	ldr	r0, [pc, #52]	; (800bfa8 <__multadd+0x88>)
 800bf74:	21ba      	movs	r1, #186	; 0xba
 800bf76:	f000 fd81 	bl	800ca7c <__assert_func>
 800bf7a:	6922      	ldr	r2, [r4, #16]
 800bf7c:	3202      	adds	r2, #2
 800bf7e:	f104 010c 	add.w	r1, r4, #12
 800bf82:	0092      	lsls	r2, r2, #2
 800bf84:	300c      	adds	r0, #12
 800bf86:	f000 fd6b 	bl	800ca60 <memcpy>
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4638      	mov	r0, r7
 800bf8e:	f7ff ffa5 	bl	800bedc <_Bfree>
 800bf92:	4644      	mov	r4, r8
 800bf94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf98:	3501      	adds	r5, #1
 800bf9a:	615e      	str	r6, [r3, #20]
 800bf9c:	6125      	str	r5, [r4, #16]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa4:	0800ce84 	.word	0x0800ce84
 800bfa8:	0800ce95 	.word	0x0800ce95

0800bfac <__hi0bits>:
 800bfac:	0c03      	lsrs	r3, r0, #16
 800bfae:	041b      	lsls	r3, r3, #16
 800bfb0:	b9d3      	cbnz	r3, 800bfe8 <__hi0bits+0x3c>
 800bfb2:	0400      	lsls	r0, r0, #16
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfba:	bf04      	itt	eq
 800bfbc:	0200      	lsleq	r0, r0, #8
 800bfbe:	3308      	addeq	r3, #8
 800bfc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfc4:	bf04      	itt	eq
 800bfc6:	0100      	lsleq	r0, r0, #4
 800bfc8:	3304      	addeq	r3, #4
 800bfca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfce:	bf04      	itt	eq
 800bfd0:	0080      	lsleq	r0, r0, #2
 800bfd2:	3302      	addeq	r3, #2
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	db05      	blt.n	800bfe4 <__hi0bits+0x38>
 800bfd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfdc:	f103 0301 	add.w	r3, r3, #1
 800bfe0:	bf08      	it	eq
 800bfe2:	2320      	moveq	r3, #32
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	4770      	bx	lr
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e7e4      	b.n	800bfb6 <__hi0bits+0xa>

0800bfec <__lo0bits>:
 800bfec:	6803      	ldr	r3, [r0, #0]
 800bfee:	f013 0207 	ands.w	r2, r3, #7
 800bff2:	d00c      	beq.n	800c00e <__lo0bits+0x22>
 800bff4:	07d9      	lsls	r1, r3, #31
 800bff6:	d422      	bmi.n	800c03e <__lo0bits+0x52>
 800bff8:	079a      	lsls	r2, r3, #30
 800bffa:	bf49      	itett	mi
 800bffc:	085b      	lsrmi	r3, r3, #1
 800bffe:	089b      	lsrpl	r3, r3, #2
 800c000:	6003      	strmi	r3, [r0, #0]
 800c002:	2201      	movmi	r2, #1
 800c004:	bf5c      	itt	pl
 800c006:	6003      	strpl	r3, [r0, #0]
 800c008:	2202      	movpl	r2, #2
 800c00a:	4610      	mov	r0, r2
 800c00c:	4770      	bx	lr
 800c00e:	b299      	uxth	r1, r3
 800c010:	b909      	cbnz	r1, 800c016 <__lo0bits+0x2a>
 800c012:	0c1b      	lsrs	r3, r3, #16
 800c014:	2210      	movs	r2, #16
 800c016:	b2d9      	uxtb	r1, r3
 800c018:	b909      	cbnz	r1, 800c01e <__lo0bits+0x32>
 800c01a:	3208      	adds	r2, #8
 800c01c:	0a1b      	lsrs	r3, r3, #8
 800c01e:	0719      	lsls	r1, r3, #28
 800c020:	bf04      	itt	eq
 800c022:	091b      	lsreq	r3, r3, #4
 800c024:	3204      	addeq	r2, #4
 800c026:	0799      	lsls	r1, r3, #30
 800c028:	bf04      	itt	eq
 800c02a:	089b      	lsreq	r3, r3, #2
 800c02c:	3202      	addeq	r2, #2
 800c02e:	07d9      	lsls	r1, r3, #31
 800c030:	d403      	bmi.n	800c03a <__lo0bits+0x4e>
 800c032:	085b      	lsrs	r3, r3, #1
 800c034:	f102 0201 	add.w	r2, r2, #1
 800c038:	d003      	beq.n	800c042 <__lo0bits+0x56>
 800c03a:	6003      	str	r3, [r0, #0]
 800c03c:	e7e5      	b.n	800c00a <__lo0bits+0x1e>
 800c03e:	2200      	movs	r2, #0
 800c040:	e7e3      	b.n	800c00a <__lo0bits+0x1e>
 800c042:	2220      	movs	r2, #32
 800c044:	e7e1      	b.n	800c00a <__lo0bits+0x1e>
	...

0800c048 <__i2b>:
 800c048:	b510      	push	{r4, lr}
 800c04a:	460c      	mov	r4, r1
 800c04c:	2101      	movs	r1, #1
 800c04e:	f7ff ff05 	bl	800be5c <_Balloc>
 800c052:	4602      	mov	r2, r0
 800c054:	b928      	cbnz	r0, 800c062 <__i2b+0x1a>
 800c056:	4b05      	ldr	r3, [pc, #20]	; (800c06c <__i2b+0x24>)
 800c058:	4805      	ldr	r0, [pc, #20]	; (800c070 <__i2b+0x28>)
 800c05a:	f240 1145 	movw	r1, #325	; 0x145
 800c05e:	f000 fd0d 	bl	800ca7c <__assert_func>
 800c062:	2301      	movs	r3, #1
 800c064:	6144      	str	r4, [r0, #20]
 800c066:	6103      	str	r3, [r0, #16]
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	bf00      	nop
 800c06c:	0800ce84 	.word	0x0800ce84
 800c070:	0800ce95 	.word	0x0800ce95

0800c074 <__multiply>:
 800c074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c078:	4691      	mov	r9, r2
 800c07a:	690a      	ldr	r2, [r1, #16]
 800c07c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c080:	429a      	cmp	r2, r3
 800c082:	bfb8      	it	lt
 800c084:	460b      	movlt	r3, r1
 800c086:	460c      	mov	r4, r1
 800c088:	bfbc      	itt	lt
 800c08a:	464c      	movlt	r4, r9
 800c08c:	4699      	movlt	r9, r3
 800c08e:	6927      	ldr	r7, [r4, #16]
 800c090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	6861      	ldr	r1, [r4, #4]
 800c098:	eb07 060a 	add.w	r6, r7, sl
 800c09c:	42b3      	cmp	r3, r6
 800c09e:	b085      	sub	sp, #20
 800c0a0:	bfb8      	it	lt
 800c0a2:	3101      	addlt	r1, #1
 800c0a4:	f7ff feda 	bl	800be5c <_Balloc>
 800c0a8:	b930      	cbnz	r0, 800c0b8 <__multiply+0x44>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4b44      	ldr	r3, [pc, #272]	; (800c1c0 <__multiply+0x14c>)
 800c0ae:	4845      	ldr	r0, [pc, #276]	; (800c1c4 <__multiply+0x150>)
 800c0b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c0b4:	f000 fce2 	bl	800ca7c <__assert_func>
 800c0b8:	f100 0514 	add.w	r5, r0, #20
 800c0bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0c0:	462b      	mov	r3, r5
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4543      	cmp	r3, r8
 800c0c6:	d321      	bcc.n	800c10c <__multiply+0x98>
 800c0c8:	f104 0314 	add.w	r3, r4, #20
 800c0cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0d0:	f109 0314 	add.w	r3, r9, #20
 800c0d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0d8:	9202      	str	r2, [sp, #8]
 800c0da:	1b3a      	subs	r2, r7, r4
 800c0dc:	3a15      	subs	r2, #21
 800c0de:	f022 0203 	bic.w	r2, r2, #3
 800c0e2:	3204      	adds	r2, #4
 800c0e4:	f104 0115 	add.w	r1, r4, #21
 800c0e8:	428f      	cmp	r7, r1
 800c0ea:	bf38      	it	cc
 800c0ec:	2204      	movcc	r2, #4
 800c0ee:	9201      	str	r2, [sp, #4]
 800c0f0:	9a02      	ldr	r2, [sp, #8]
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d80c      	bhi.n	800c112 <__multiply+0x9e>
 800c0f8:	2e00      	cmp	r6, #0
 800c0fa:	dd03      	ble.n	800c104 <__multiply+0x90>
 800c0fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c100:	2b00      	cmp	r3, #0
 800c102:	d05b      	beq.n	800c1bc <__multiply+0x148>
 800c104:	6106      	str	r6, [r0, #16]
 800c106:	b005      	add	sp, #20
 800c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10c:	f843 2b04 	str.w	r2, [r3], #4
 800c110:	e7d8      	b.n	800c0c4 <__multiply+0x50>
 800c112:	f8b3 a000 	ldrh.w	sl, [r3]
 800c116:	f1ba 0f00 	cmp.w	sl, #0
 800c11a:	d024      	beq.n	800c166 <__multiply+0xf2>
 800c11c:	f104 0e14 	add.w	lr, r4, #20
 800c120:	46a9      	mov	r9, r5
 800c122:	f04f 0c00 	mov.w	ip, #0
 800c126:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c12a:	f8d9 1000 	ldr.w	r1, [r9]
 800c12e:	fa1f fb82 	uxth.w	fp, r2
 800c132:	b289      	uxth	r1, r1
 800c134:	fb0a 110b 	mla	r1, sl, fp, r1
 800c138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c13c:	f8d9 2000 	ldr.w	r2, [r9]
 800c140:	4461      	add	r1, ip
 800c142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c146:	fb0a c20b 	mla	r2, sl, fp, ip
 800c14a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c14e:	b289      	uxth	r1, r1
 800c150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c154:	4577      	cmp	r7, lr
 800c156:	f849 1b04 	str.w	r1, [r9], #4
 800c15a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c15e:	d8e2      	bhi.n	800c126 <__multiply+0xb2>
 800c160:	9a01      	ldr	r2, [sp, #4]
 800c162:	f845 c002 	str.w	ip, [r5, r2]
 800c166:	9a03      	ldr	r2, [sp, #12]
 800c168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c16c:	3304      	adds	r3, #4
 800c16e:	f1b9 0f00 	cmp.w	r9, #0
 800c172:	d021      	beq.n	800c1b8 <__multiply+0x144>
 800c174:	6829      	ldr	r1, [r5, #0]
 800c176:	f104 0c14 	add.w	ip, r4, #20
 800c17a:	46ae      	mov	lr, r5
 800c17c:	f04f 0a00 	mov.w	sl, #0
 800c180:	f8bc b000 	ldrh.w	fp, [ip]
 800c184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c188:	fb09 220b 	mla	r2, r9, fp, r2
 800c18c:	4452      	add	r2, sl
 800c18e:	b289      	uxth	r1, r1
 800c190:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c194:	f84e 1b04 	str.w	r1, [lr], #4
 800c198:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c19c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1a0:	f8be 1000 	ldrh.w	r1, [lr]
 800c1a4:	fb09 110a 	mla	r1, r9, sl, r1
 800c1a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c1ac:	4567      	cmp	r7, ip
 800c1ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1b2:	d8e5      	bhi.n	800c180 <__multiply+0x10c>
 800c1b4:	9a01      	ldr	r2, [sp, #4]
 800c1b6:	50a9      	str	r1, [r5, r2]
 800c1b8:	3504      	adds	r5, #4
 800c1ba:	e799      	b.n	800c0f0 <__multiply+0x7c>
 800c1bc:	3e01      	subs	r6, #1
 800c1be:	e79b      	b.n	800c0f8 <__multiply+0x84>
 800c1c0:	0800ce84 	.word	0x0800ce84
 800c1c4:	0800ce95 	.word	0x0800ce95

0800c1c8 <__pow5mult>:
 800c1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	f012 0203 	ands.w	r2, r2, #3
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	460f      	mov	r7, r1
 800c1d6:	d007      	beq.n	800c1e8 <__pow5mult+0x20>
 800c1d8:	4c25      	ldr	r4, [pc, #148]	; (800c270 <__pow5mult+0xa8>)
 800c1da:	3a01      	subs	r2, #1
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1e2:	f7ff fe9d 	bl	800bf20 <__multadd>
 800c1e6:	4607      	mov	r7, r0
 800c1e8:	10ad      	asrs	r5, r5, #2
 800c1ea:	d03d      	beq.n	800c268 <__pow5mult+0xa0>
 800c1ec:	69f4      	ldr	r4, [r6, #28]
 800c1ee:	b97c      	cbnz	r4, 800c210 <__pow5mult+0x48>
 800c1f0:	2010      	movs	r0, #16
 800c1f2:	f7ff fd7f 	bl	800bcf4 <malloc>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	61f0      	str	r0, [r6, #28]
 800c1fa:	b928      	cbnz	r0, 800c208 <__pow5mult+0x40>
 800c1fc:	4b1d      	ldr	r3, [pc, #116]	; (800c274 <__pow5mult+0xac>)
 800c1fe:	481e      	ldr	r0, [pc, #120]	; (800c278 <__pow5mult+0xb0>)
 800c200:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c204:	f000 fc3a 	bl	800ca7c <__assert_func>
 800c208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c20c:	6004      	str	r4, [r0, #0]
 800c20e:	60c4      	str	r4, [r0, #12]
 800c210:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c218:	b94c      	cbnz	r4, 800c22e <__pow5mult+0x66>
 800c21a:	f240 2171 	movw	r1, #625	; 0x271
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff ff12 	bl	800c048 <__i2b>
 800c224:	2300      	movs	r3, #0
 800c226:	f8c8 0008 	str.w	r0, [r8, #8]
 800c22a:	4604      	mov	r4, r0
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	f04f 0900 	mov.w	r9, #0
 800c232:	07eb      	lsls	r3, r5, #31
 800c234:	d50a      	bpl.n	800c24c <__pow5mult+0x84>
 800c236:	4639      	mov	r1, r7
 800c238:	4622      	mov	r2, r4
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ff1a 	bl	800c074 <__multiply>
 800c240:	4639      	mov	r1, r7
 800c242:	4680      	mov	r8, r0
 800c244:	4630      	mov	r0, r6
 800c246:	f7ff fe49 	bl	800bedc <_Bfree>
 800c24a:	4647      	mov	r7, r8
 800c24c:	106d      	asrs	r5, r5, #1
 800c24e:	d00b      	beq.n	800c268 <__pow5mult+0xa0>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	b938      	cbnz	r0, 800c264 <__pow5mult+0x9c>
 800c254:	4622      	mov	r2, r4
 800c256:	4621      	mov	r1, r4
 800c258:	4630      	mov	r0, r6
 800c25a:	f7ff ff0b 	bl	800c074 <__multiply>
 800c25e:	6020      	str	r0, [r4, #0]
 800c260:	f8c0 9000 	str.w	r9, [r0]
 800c264:	4604      	mov	r4, r0
 800c266:	e7e4      	b.n	800c232 <__pow5mult+0x6a>
 800c268:	4638      	mov	r0, r7
 800c26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c26e:	bf00      	nop
 800c270:	0800cfe0 	.word	0x0800cfe0
 800c274:	0800ce15 	.word	0x0800ce15
 800c278:	0800ce95 	.word	0x0800ce95

0800c27c <__lshift>:
 800c27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c280:	460c      	mov	r4, r1
 800c282:	6849      	ldr	r1, [r1, #4]
 800c284:	6923      	ldr	r3, [r4, #16]
 800c286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c28a:	68a3      	ldr	r3, [r4, #8]
 800c28c:	4607      	mov	r7, r0
 800c28e:	4691      	mov	r9, r2
 800c290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c294:	f108 0601 	add.w	r6, r8, #1
 800c298:	42b3      	cmp	r3, r6
 800c29a:	db0b      	blt.n	800c2b4 <__lshift+0x38>
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff fddd 	bl	800be5c <_Balloc>
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	b948      	cbnz	r0, 800c2ba <__lshift+0x3e>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4b28      	ldr	r3, [pc, #160]	; (800c34c <__lshift+0xd0>)
 800c2aa:	4829      	ldr	r0, [pc, #164]	; (800c350 <__lshift+0xd4>)
 800c2ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c2b0:	f000 fbe4 	bl	800ca7c <__assert_func>
 800c2b4:	3101      	adds	r1, #1
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	e7ee      	b.n	800c298 <__lshift+0x1c>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f100 0114 	add.w	r1, r0, #20
 800c2c0:	f100 0210 	add.w	r2, r0, #16
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	4553      	cmp	r3, sl
 800c2c8:	db33      	blt.n	800c332 <__lshift+0xb6>
 800c2ca:	6920      	ldr	r0, [r4, #16]
 800c2cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2d0:	f104 0314 	add.w	r3, r4, #20
 800c2d4:	f019 091f 	ands.w	r9, r9, #31
 800c2d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2e0:	d02b      	beq.n	800c33a <__lshift+0xbe>
 800c2e2:	f1c9 0e20 	rsb	lr, r9, #32
 800c2e6:	468a      	mov	sl, r1
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	6818      	ldr	r0, [r3, #0]
 800c2ec:	fa00 f009 	lsl.w	r0, r0, r9
 800c2f0:	4310      	orrs	r0, r2
 800c2f2:	f84a 0b04 	str.w	r0, [sl], #4
 800c2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2fa:	459c      	cmp	ip, r3
 800c2fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c300:	d8f3      	bhi.n	800c2ea <__lshift+0x6e>
 800c302:	ebac 0304 	sub.w	r3, ip, r4
 800c306:	3b15      	subs	r3, #21
 800c308:	f023 0303 	bic.w	r3, r3, #3
 800c30c:	3304      	adds	r3, #4
 800c30e:	f104 0015 	add.w	r0, r4, #21
 800c312:	4584      	cmp	ip, r0
 800c314:	bf38      	it	cc
 800c316:	2304      	movcc	r3, #4
 800c318:	50ca      	str	r2, [r1, r3]
 800c31a:	b10a      	cbz	r2, 800c320 <__lshift+0xa4>
 800c31c:	f108 0602 	add.w	r6, r8, #2
 800c320:	3e01      	subs	r6, #1
 800c322:	4638      	mov	r0, r7
 800c324:	612e      	str	r6, [r5, #16]
 800c326:	4621      	mov	r1, r4
 800c328:	f7ff fdd8 	bl	800bedc <_Bfree>
 800c32c:	4628      	mov	r0, r5
 800c32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c332:	f842 0f04 	str.w	r0, [r2, #4]!
 800c336:	3301      	adds	r3, #1
 800c338:	e7c5      	b.n	800c2c6 <__lshift+0x4a>
 800c33a:	3904      	subs	r1, #4
 800c33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c340:	f841 2f04 	str.w	r2, [r1, #4]!
 800c344:	459c      	cmp	ip, r3
 800c346:	d8f9      	bhi.n	800c33c <__lshift+0xc0>
 800c348:	e7ea      	b.n	800c320 <__lshift+0xa4>
 800c34a:	bf00      	nop
 800c34c:	0800ce84 	.word	0x0800ce84
 800c350:	0800ce95 	.word	0x0800ce95

0800c354 <__mcmp>:
 800c354:	b530      	push	{r4, r5, lr}
 800c356:	6902      	ldr	r2, [r0, #16]
 800c358:	690c      	ldr	r4, [r1, #16]
 800c35a:	1b12      	subs	r2, r2, r4
 800c35c:	d10e      	bne.n	800c37c <__mcmp+0x28>
 800c35e:	f100 0314 	add.w	r3, r0, #20
 800c362:	3114      	adds	r1, #20
 800c364:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c368:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c36c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c370:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c374:	42a5      	cmp	r5, r4
 800c376:	d003      	beq.n	800c380 <__mcmp+0x2c>
 800c378:	d305      	bcc.n	800c386 <__mcmp+0x32>
 800c37a:	2201      	movs	r2, #1
 800c37c:	4610      	mov	r0, r2
 800c37e:	bd30      	pop	{r4, r5, pc}
 800c380:	4283      	cmp	r3, r0
 800c382:	d3f3      	bcc.n	800c36c <__mcmp+0x18>
 800c384:	e7fa      	b.n	800c37c <__mcmp+0x28>
 800c386:	f04f 32ff 	mov.w	r2, #4294967295
 800c38a:	e7f7      	b.n	800c37c <__mcmp+0x28>

0800c38c <__mdiff>:
 800c38c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	460c      	mov	r4, r1
 800c392:	4606      	mov	r6, r0
 800c394:	4611      	mov	r1, r2
 800c396:	4620      	mov	r0, r4
 800c398:	4690      	mov	r8, r2
 800c39a:	f7ff ffdb 	bl	800c354 <__mcmp>
 800c39e:	1e05      	subs	r5, r0, #0
 800c3a0:	d110      	bne.n	800c3c4 <__mdiff+0x38>
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff fd59 	bl	800be5c <_Balloc>
 800c3aa:	b930      	cbnz	r0, 800c3ba <__mdiff+0x2e>
 800c3ac:	4b3a      	ldr	r3, [pc, #232]	; (800c498 <__mdiff+0x10c>)
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	f240 2137 	movw	r1, #567	; 0x237
 800c3b4:	4839      	ldr	r0, [pc, #228]	; (800c49c <__mdiff+0x110>)
 800c3b6:	f000 fb61 	bl	800ca7c <__assert_func>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c4:	bfa4      	itt	ge
 800c3c6:	4643      	movge	r3, r8
 800c3c8:	46a0      	movge	r8, r4
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3d0:	bfa6      	itte	ge
 800c3d2:	461c      	movge	r4, r3
 800c3d4:	2500      	movge	r5, #0
 800c3d6:	2501      	movlt	r5, #1
 800c3d8:	f7ff fd40 	bl	800be5c <_Balloc>
 800c3dc:	b920      	cbnz	r0, 800c3e8 <__mdiff+0x5c>
 800c3de:	4b2e      	ldr	r3, [pc, #184]	; (800c498 <__mdiff+0x10c>)
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	f240 2145 	movw	r1, #581	; 0x245
 800c3e6:	e7e5      	b.n	800c3b4 <__mdiff+0x28>
 800c3e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3ec:	6926      	ldr	r6, [r4, #16]
 800c3ee:	60c5      	str	r5, [r0, #12]
 800c3f0:	f104 0914 	add.w	r9, r4, #20
 800c3f4:	f108 0514 	add.w	r5, r8, #20
 800c3f8:	f100 0e14 	add.w	lr, r0, #20
 800c3fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c404:	f108 0210 	add.w	r2, r8, #16
 800c408:	46f2      	mov	sl, lr
 800c40a:	2100      	movs	r1, #0
 800c40c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c410:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c414:	fa11 f88b 	uxtah	r8, r1, fp
 800c418:	b299      	uxth	r1, r3
 800c41a:	0c1b      	lsrs	r3, r3, #16
 800c41c:	eba8 0801 	sub.w	r8, r8, r1
 800c420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c424:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c428:	fa1f f888 	uxth.w	r8, r8
 800c42c:	1419      	asrs	r1, r3, #16
 800c42e:	454e      	cmp	r6, r9
 800c430:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c434:	f84a 3b04 	str.w	r3, [sl], #4
 800c438:	d8e8      	bhi.n	800c40c <__mdiff+0x80>
 800c43a:	1b33      	subs	r3, r6, r4
 800c43c:	3b15      	subs	r3, #21
 800c43e:	f023 0303 	bic.w	r3, r3, #3
 800c442:	3304      	adds	r3, #4
 800c444:	3415      	adds	r4, #21
 800c446:	42a6      	cmp	r6, r4
 800c448:	bf38      	it	cc
 800c44a:	2304      	movcc	r3, #4
 800c44c:	441d      	add	r5, r3
 800c44e:	4473      	add	r3, lr
 800c450:	469e      	mov	lr, r3
 800c452:	462e      	mov	r6, r5
 800c454:	4566      	cmp	r6, ip
 800c456:	d30e      	bcc.n	800c476 <__mdiff+0xea>
 800c458:	f10c 0203 	add.w	r2, ip, #3
 800c45c:	1b52      	subs	r2, r2, r5
 800c45e:	f022 0203 	bic.w	r2, r2, #3
 800c462:	3d03      	subs	r5, #3
 800c464:	45ac      	cmp	ip, r5
 800c466:	bf38      	it	cc
 800c468:	2200      	movcc	r2, #0
 800c46a:	4413      	add	r3, r2
 800c46c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c470:	b17a      	cbz	r2, 800c492 <__mdiff+0x106>
 800c472:	6107      	str	r7, [r0, #16]
 800c474:	e7a4      	b.n	800c3c0 <__mdiff+0x34>
 800c476:	f856 8b04 	ldr.w	r8, [r6], #4
 800c47a:	fa11 f288 	uxtah	r2, r1, r8
 800c47e:	1414      	asrs	r4, r2, #16
 800c480:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c484:	b292      	uxth	r2, r2
 800c486:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c48a:	f84e 2b04 	str.w	r2, [lr], #4
 800c48e:	1421      	asrs	r1, r4, #16
 800c490:	e7e0      	b.n	800c454 <__mdiff+0xc8>
 800c492:	3f01      	subs	r7, #1
 800c494:	e7ea      	b.n	800c46c <__mdiff+0xe0>
 800c496:	bf00      	nop
 800c498:	0800ce84 	.word	0x0800ce84
 800c49c:	0800ce95 	.word	0x0800ce95

0800c4a0 <__d2b>:
 800c4a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	ec59 8b10 	vmov	r8, r9, d0
 800c4ac:	4616      	mov	r6, r2
 800c4ae:	f7ff fcd5 	bl	800be5c <_Balloc>
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	b930      	cbnz	r0, 800c4c4 <__d2b+0x24>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	4b24      	ldr	r3, [pc, #144]	; (800c54c <__d2b+0xac>)
 800c4ba:	4825      	ldr	r0, [pc, #148]	; (800c550 <__d2b+0xb0>)
 800c4bc:	f240 310f 	movw	r1, #783	; 0x30f
 800c4c0:	f000 fadc 	bl	800ca7c <__assert_func>
 800c4c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4cc:	bb2d      	cbnz	r5, 800c51a <__d2b+0x7a>
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	f1b8 0300 	subs.w	r3, r8, #0
 800c4d4:	d026      	beq.n	800c524 <__d2b+0x84>
 800c4d6:	4668      	mov	r0, sp
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	f7ff fd87 	bl	800bfec <__lo0bits>
 800c4de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4e2:	b1e8      	cbz	r0, 800c520 <__d2b+0x80>
 800c4e4:	f1c0 0320 	rsb	r3, r0, #32
 800c4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ec:	430b      	orrs	r3, r1
 800c4ee:	40c2      	lsrs	r2, r0
 800c4f0:	6163      	str	r3, [r4, #20]
 800c4f2:	9201      	str	r2, [sp, #4]
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	61a3      	str	r3, [r4, #24]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	bf14      	ite	ne
 800c4fc:	2202      	movne	r2, #2
 800c4fe:	2201      	moveq	r2, #1
 800c500:	6122      	str	r2, [r4, #16]
 800c502:	b1bd      	cbz	r5, 800c534 <__d2b+0x94>
 800c504:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c508:	4405      	add	r5, r0
 800c50a:	603d      	str	r5, [r7, #0]
 800c50c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c510:	6030      	str	r0, [r6, #0]
 800c512:	4620      	mov	r0, r4
 800c514:	b003      	add	sp, #12
 800c516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c51a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c51e:	e7d6      	b.n	800c4ce <__d2b+0x2e>
 800c520:	6161      	str	r1, [r4, #20]
 800c522:	e7e7      	b.n	800c4f4 <__d2b+0x54>
 800c524:	a801      	add	r0, sp, #4
 800c526:	f7ff fd61 	bl	800bfec <__lo0bits>
 800c52a:	9b01      	ldr	r3, [sp, #4]
 800c52c:	6163      	str	r3, [r4, #20]
 800c52e:	3020      	adds	r0, #32
 800c530:	2201      	movs	r2, #1
 800c532:	e7e5      	b.n	800c500 <__d2b+0x60>
 800c534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c53c:	6038      	str	r0, [r7, #0]
 800c53e:	6918      	ldr	r0, [r3, #16]
 800c540:	f7ff fd34 	bl	800bfac <__hi0bits>
 800c544:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c548:	e7e2      	b.n	800c510 <__d2b+0x70>
 800c54a:	bf00      	nop
 800c54c:	0800ce84 	.word	0x0800ce84
 800c550:	0800ce95 	.word	0x0800ce95

0800c554 <__sfputc_r>:
 800c554:	6893      	ldr	r3, [r2, #8]
 800c556:	3b01      	subs	r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	b410      	push	{r4}
 800c55c:	6093      	str	r3, [r2, #8]
 800c55e:	da08      	bge.n	800c572 <__sfputc_r+0x1e>
 800c560:	6994      	ldr	r4, [r2, #24]
 800c562:	42a3      	cmp	r3, r4
 800c564:	db01      	blt.n	800c56a <__sfputc_r+0x16>
 800c566:	290a      	cmp	r1, #10
 800c568:	d103      	bne.n	800c572 <__sfputc_r+0x1e>
 800c56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56e:	f7fe bbe8 	b.w	800ad42 <__swbuf_r>
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	1c58      	adds	r0, r3, #1
 800c576:	6010      	str	r0, [r2, #0]
 800c578:	7019      	strb	r1, [r3, #0]
 800c57a:	4608      	mov	r0, r1
 800c57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <__sfputs_r>:
 800c582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c584:	4606      	mov	r6, r0
 800c586:	460f      	mov	r7, r1
 800c588:	4614      	mov	r4, r2
 800c58a:	18d5      	adds	r5, r2, r3
 800c58c:	42ac      	cmp	r4, r5
 800c58e:	d101      	bne.n	800c594 <__sfputs_r+0x12>
 800c590:	2000      	movs	r0, #0
 800c592:	e007      	b.n	800c5a4 <__sfputs_r+0x22>
 800c594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c598:	463a      	mov	r2, r7
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ffda 	bl	800c554 <__sfputc_r>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d1f3      	bne.n	800c58c <__sfputs_r+0xa>
 800c5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5a8 <_vfiprintf_r>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	460d      	mov	r5, r1
 800c5ae:	b09d      	sub	sp, #116	; 0x74
 800c5b0:	4614      	mov	r4, r2
 800c5b2:	4698      	mov	r8, r3
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	b118      	cbz	r0, 800c5c0 <_vfiprintf_r+0x18>
 800c5b8:	6a03      	ldr	r3, [r0, #32]
 800c5ba:	b90b      	cbnz	r3, 800c5c0 <_vfiprintf_r+0x18>
 800c5bc:	f7fe fa24 	bl	800aa08 <__sinit>
 800c5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5c2:	07d9      	lsls	r1, r3, #31
 800c5c4:	d405      	bmi.n	800c5d2 <_vfiprintf_r+0x2a>
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	059a      	lsls	r2, r3, #22
 800c5ca:	d402      	bmi.n	800c5d2 <_vfiprintf_r+0x2a>
 800c5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ce:	f7fe fcc9 	bl	800af64 <__retarget_lock_acquire_recursive>
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	071b      	lsls	r3, r3, #28
 800c5d6:	d501      	bpl.n	800c5dc <_vfiprintf_r+0x34>
 800c5d8:	692b      	ldr	r3, [r5, #16]
 800c5da:	b99b      	cbnz	r3, 800c604 <_vfiprintf_r+0x5c>
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7fe fbec 	bl	800adbc <__swsetup_r>
 800c5e4:	b170      	cbz	r0, 800c604 <_vfiprintf_r+0x5c>
 800c5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5e8:	07dc      	lsls	r4, r3, #31
 800c5ea:	d504      	bpl.n	800c5f6 <_vfiprintf_r+0x4e>
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	b01d      	add	sp, #116	; 0x74
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	0598      	lsls	r0, r3, #22
 800c5fa:	d4f7      	bmi.n	800c5ec <_vfiprintf_r+0x44>
 800c5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5fe:	f7fe fcb2 	bl	800af66 <__retarget_lock_release_recursive>
 800c602:	e7f3      	b.n	800c5ec <_vfiprintf_r+0x44>
 800c604:	2300      	movs	r3, #0
 800c606:	9309      	str	r3, [sp, #36]	; 0x24
 800c608:	2320      	movs	r3, #32
 800c60a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c60e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c612:	2330      	movs	r3, #48	; 0x30
 800c614:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7c8 <_vfiprintf_r+0x220>
 800c618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c61c:	f04f 0901 	mov.w	r9, #1
 800c620:	4623      	mov	r3, r4
 800c622:	469a      	mov	sl, r3
 800c624:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c628:	b10a      	cbz	r2, 800c62e <_vfiprintf_r+0x86>
 800c62a:	2a25      	cmp	r2, #37	; 0x25
 800c62c:	d1f9      	bne.n	800c622 <_vfiprintf_r+0x7a>
 800c62e:	ebba 0b04 	subs.w	fp, sl, r4
 800c632:	d00b      	beq.n	800c64c <_vfiprintf_r+0xa4>
 800c634:	465b      	mov	r3, fp
 800c636:	4622      	mov	r2, r4
 800c638:	4629      	mov	r1, r5
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7ff ffa1 	bl	800c582 <__sfputs_r>
 800c640:	3001      	adds	r0, #1
 800c642:	f000 80a9 	beq.w	800c798 <_vfiprintf_r+0x1f0>
 800c646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c648:	445a      	add	r2, fp
 800c64a:	9209      	str	r2, [sp, #36]	; 0x24
 800c64c:	f89a 3000 	ldrb.w	r3, [sl]
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 80a1 	beq.w	800c798 <_vfiprintf_r+0x1f0>
 800c656:	2300      	movs	r3, #0
 800c658:	f04f 32ff 	mov.w	r2, #4294967295
 800c65c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c660:	f10a 0a01 	add.w	sl, sl, #1
 800c664:	9304      	str	r3, [sp, #16]
 800c666:	9307      	str	r3, [sp, #28]
 800c668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c66c:	931a      	str	r3, [sp, #104]	; 0x68
 800c66e:	4654      	mov	r4, sl
 800c670:	2205      	movs	r2, #5
 800c672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c676:	4854      	ldr	r0, [pc, #336]	; (800c7c8 <_vfiprintf_r+0x220>)
 800c678:	f7f3 fdd2 	bl	8000220 <memchr>
 800c67c:	9a04      	ldr	r2, [sp, #16]
 800c67e:	b9d8      	cbnz	r0, 800c6b8 <_vfiprintf_r+0x110>
 800c680:	06d1      	lsls	r1, r2, #27
 800c682:	bf44      	itt	mi
 800c684:	2320      	movmi	r3, #32
 800c686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c68a:	0713      	lsls	r3, r2, #28
 800c68c:	bf44      	itt	mi
 800c68e:	232b      	movmi	r3, #43	; 0x2b
 800c690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c694:	f89a 3000 	ldrb.w	r3, [sl]
 800c698:	2b2a      	cmp	r3, #42	; 0x2a
 800c69a:	d015      	beq.n	800c6c8 <_vfiprintf_r+0x120>
 800c69c:	9a07      	ldr	r2, [sp, #28]
 800c69e:	4654      	mov	r4, sl
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	f04f 0c0a 	mov.w	ip, #10
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ac:	3b30      	subs	r3, #48	; 0x30
 800c6ae:	2b09      	cmp	r3, #9
 800c6b0:	d94d      	bls.n	800c74e <_vfiprintf_r+0x1a6>
 800c6b2:	b1b0      	cbz	r0, 800c6e2 <_vfiprintf_r+0x13a>
 800c6b4:	9207      	str	r2, [sp, #28]
 800c6b6:	e014      	b.n	800c6e2 <_vfiprintf_r+0x13a>
 800c6b8:	eba0 0308 	sub.w	r3, r0, r8
 800c6bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	46a2      	mov	sl, r4
 800c6c6:	e7d2      	b.n	800c66e <_vfiprintf_r+0xc6>
 800c6c8:	9b03      	ldr	r3, [sp, #12]
 800c6ca:	1d19      	adds	r1, r3, #4
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	9103      	str	r1, [sp, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	bfbb      	ittet	lt
 800c6d4:	425b      	neglt	r3, r3
 800c6d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6da:	9307      	strge	r3, [sp, #28]
 800c6dc:	9307      	strlt	r3, [sp, #28]
 800c6de:	bfb8      	it	lt
 800c6e0:	9204      	strlt	r2, [sp, #16]
 800c6e2:	7823      	ldrb	r3, [r4, #0]
 800c6e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c6e6:	d10c      	bne.n	800c702 <_vfiprintf_r+0x15a>
 800c6e8:	7863      	ldrb	r3, [r4, #1]
 800c6ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ec:	d134      	bne.n	800c758 <_vfiprintf_r+0x1b0>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	1d1a      	adds	r2, r3, #4
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	9203      	str	r2, [sp, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	bfb8      	it	lt
 800c6fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6fe:	3402      	adds	r4, #2
 800c700:	9305      	str	r3, [sp, #20]
 800c702:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7d8 <_vfiprintf_r+0x230>
 800c706:	7821      	ldrb	r1, [r4, #0]
 800c708:	2203      	movs	r2, #3
 800c70a:	4650      	mov	r0, sl
 800c70c:	f7f3 fd88 	bl	8000220 <memchr>
 800c710:	b138      	cbz	r0, 800c722 <_vfiprintf_r+0x17a>
 800c712:	9b04      	ldr	r3, [sp, #16]
 800c714:	eba0 000a 	sub.w	r0, r0, sl
 800c718:	2240      	movs	r2, #64	; 0x40
 800c71a:	4082      	lsls	r2, r0
 800c71c:	4313      	orrs	r3, r2
 800c71e:	3401      	adds	r4, #1
 800c720:	9304      	str	r3, [sp, #16]
 800c722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c726:	4829      	ldr	r0, [pc, #164]	; (800c7cc <_vfiprintf_r+0x224>)
 800c728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c72c:	2206      	movs	r2, #6
 800c72e:	f7f3 fd77 	bl	8000220 <memchr>
 800c732:	2800      	cmp	r0, #0
 800c734:	d03f      	beq.n	800c7b6 <_vfiprintf_r+0x20e>
 800c736:	4b26      	ldr	r3, [pc, #152]	; (800c7d0 <_vfiprintf_r+0x228>)
 800c738:	bb1b      	cbnz	r3, 800c782 <_vfiprintf_r+0x1da>
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	3307      	adds	r3, #7
 800c73e:	f023 0307 	bic.w	r3, r3, #7
 800c742:	3308      	adds	r3, #8
 800c744:	9303      	str	r3, [sp, #12]
 800c746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c748:	443b      	add	r3, r7
 800c74a:	9309      	str	r3, [sp, #36]	; 0x24
 800c74c:	e768      	b.n	800c620 <_vfiprintf_r+0x78>
 800c74e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c752:	460c      	mov	r4, r1
 800c754:	2001      	movs	r0, #1
 800c756:	e7a6      	b.n	800c6a6 <_vfiprintf_r+0xfe>
 800c758:	2300      	movs	r3, #0
 800c75a:	3401      	adds	r4, #1
 800c75c:	9305      	str	r3, [sp, #20]
 800c75e:	4619      	mov	r1, r3
 800c760:	f04f 0c0a 	mov.w	ip, #10
 800c764:	4620      	mov	r0, r4
 800c766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c76a:	3a30      	subs	r2, #48	; 0x30
 800c76c:	2a09      	cmp	r2, #9
 800c76e:	d903      	bls.n	800c778 <_vfiprintf_r+0x1d0>
 800c770:	2b00      	cmp	r3, #0
 800c772:	d0c6      	beq.n	800c702 <_vfiprintf_r+0x15a>
 800c774:	9105      	str	r1, [sp, #20]
 800c776:	e7c4      	b.n	800c702 <_vfiprintf_r+0x15a>
 800c778:	fb0c 2101 	mla	r1, ip, r1, r2
 800c77c:	4604      	mov	r4, r0
 800c77e:	2301      	movs	r3, #1
 800c780:	e7f0      	b.n	800c764 <_vfiprintf_r+0x1bc>
 800c782:	ab03      	add	r3, sp, #12
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	462a      	mov	r2, r5
 800c788:	4b12      	ldr	r3, [pc, #72]	; (800c7d4 <_vfiprintf_r+0x22c>)
 800c78a:	a904      	add	r1, sp, #16
 800c78c:	4630      	mov	r0, r6
 800c78e:	f7fd fcfb 	bl	800a188 <_printf_float>
 800c792:	4607      	mov	r7, r0
 800c794:	1c78      	adds	r0, r7, #1
 800c796:	d1d6      	bne.n	800c746 <_vfiprintf_r+0x19e>
 800c798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c79a:	07d9      	lsls	r1, r3, #31
 800c79c:	d405      	bmi.n	800c7aa <_vfiprintf_r+0x202>
 800c79e:	89ab      	ldrh	r3, [r5, #12]
 800c7a0:	059a      	lsls	r2, r3, #22
 800c7a2:	d402      	bmi.n	800c7aa <_vfiprintf_r+0x202>
 800c7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7a6:	f7fe fbde 	bl	800af66 <__retarget_lock_release_recursive>
 800c7aa:	89ab      	ldrh	r3, [r5, #12]
 800c7ac:	065b      	lsls	r3, r3, #25
 800c7ae:	f53f af1d 	bmi.w	800c5ec <_vfiprintf_r+0x44>
 800c7b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7b4:	e71c      	b.n	800c5f0 <_vfiprintf_r+0x48>
 800c7b6:	ab03      	add	r3, sp, #12
 800c7b8:	9300      	str	r3, [sp, #0]
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <_vfiprintf_r+0x22c>)
 800c7be:	a904      	add	r1, sp, #16
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f7fd ff85 	bl	800a6d0 <_printf_i>
 800c7c6:	e7e4      	b.n	800c792 <_vfiprintf_r+0x1ea>
 800c7c8:	0800cfec 	.word	0x0800cfec
 800c7cc:	0800cff6 	.word	0x0800cff6
 800c7d0:	0800a189 	.word	0x0800a189
 800c7d4:	0800c583 	.word	0x0800c583
 800c7d8:	0800cff2 	.word	0x0800cff2

0800c7dc <__sflush_r>:
 800c7dc:	898a      	ldrh	r2, [r1, #12]
 800c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	0710      	lsls	r0, r2, #28
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	d458      	bmi.n	800c89c <__sflush_r+0xc0>
 800c7ea:	684b      	ldr	r3, [r1, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dc05      	bgt.n	800c7fc <__sflush_r+0x20>
 800c7f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	dc02      	bgt.n	800c7fc <__sflush_r+0x20>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7fe:	2e00      	cmp	r6, #0
 800c800:	d0f9      	beq.n	800c7f6 <__sflush_r+0x1a>
 800c802:	2300      	movs	r3, #0
 800c804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c808:	682f      	ldr	r7, [r5, #0]
 800c80a:	6a21      	ldr	r1, [r4, #32]
 800c80c:	602b      	str	r3, [r5, #0]
 800c80e:	d032      	beq.n	800c876 <__sflush_r+0x9a>
 800c810:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	075a      	lsls	r2, r3, #29
 800c816:	d505      	bpl.n	800c824 <__sflush_r+0x48>
 800c818:	6863      	ldr	r3, [r4, #4]
 800c81a:	1ac0      	subs	r0, r0, r3
 800c81c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c81e:	b10b      	cbz	r3, 800c824 <__sflush_r+0x48>
 800c820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c822:	1ac0      	subs	r0, r0, r3
 800c824:	2300      	movs	r3, #0
 800c826:	4602      	mov	r2, r0
 800c828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c82a:	6a21      	ldr	r1, [r4, #32]
 800c82c:	4628      	mov	r0, r5
 800c82e:	47b0      	blx	r6
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	d106      	bne.n	800c844 <__sflush_r+0x68>
 800c836:	6829      	ldr	r1, [r5, #0]
 800c838:	291d      	cmp	r1, #29
 800c83a:	d82b      	bhi.n	800c894 <__sflush_r+0xb8>
 800c83c:	4a29      	ldr	r2, [pc, #164]	; (800c8e4 <__sflush_r+0x108>)
 800c83e:	410a      	asrs	r2, r1
 800c840:	07d6      	lsls	r6, r2, #31
 800c842:	d427      	bmi.n	800c894 <__sflush_r+0xb8>
 800c844:	2200      	movs	r2, #0
 800c846:	6062      	str	r2, [r4, #4]
 800c848:	04d9      	lsls	r1, r3, #19
 800c84a:	6922      	ldr	r2, [r4, #16]
 800c84c:	6022      	str	r2, [r4, #0]
 800c84e:	d504      	bpl.n	800c85a <__sflush_r+0x7e>
 800c850:	1c42      	adds	r2, r0, #1
 800c852:	d101      	bne.n	800c858 <__sflush_r+0x7c>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b903      	cbnz	r3, 800c85a <__sflush_r+0x7e>
 800c858:	6560      	str	r0, [r4, #84]	; 0x54
 800c85a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c85c:	602f      	str	r7, [r5, #0]
 800c85e:	2900      	cmp	r1, #0
 800c860:	d0c9      	beq.n	800c7f6 <__sflush_r+0x1a>
 800c862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c866:	4299      	cmp	r1, r3
 800c868:	d002      	beq.n	800c870 <__sflush_r+0x94>
 800c86a:	4628      	mov	r0, r5
 800c86c:	f7ff f9f6 	bl	800bc5c <_free_r>
 800c870:	2000      	movs	r0, #0
 800c872:	6360      	str	r0, [r4, #52]	; 0x34
 800c874:	e7c0      	b.n	800c7f8 <__sflush_r+0x1c>
 800c876:	2301      	movs	r3, #1
 800c878:	4628      	mov	r0, r5
 800c87a:	47b0      	blx	r6
 800c87c:	1c41      	adds	r1, r0, #1
 800c87e:	d1c8      	bne.n	800c812 <__sflush_r+0x36>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d0c5      	beq.n	800c812 <__sflush_r+0x36>
 800c886:	2b1d      	cmp	r3, #29
 800c888:	d001      	beq.n	800c88e <__sflush_r+0xb2>
 800c88a:	2b16      	cmp	r3, #22
 800c88c:	d101      	bne.n	800c892 <__sflush_r+0xb6>
 800c88e:	602f      	str	r7, [r5, #0]
 800c890:	e7b1      	b.n	800c7f6 <__sflush_r+0x1a>
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c898:	81a3      	strh	r3, [r4, #12]
 800c89a:	e7ad      	b.n	800c7f8 <__sflush_r+0x1c>
 800c89c:	690f      	ldr	r7, [r1, #16]
 800c89e:	2f00      	cmp	r7, #0
 800c8a0:	d0a9      	beq.n	800c7f6 <__sflush_r+0x1a>
 800c8a2:	0793      	lsls	r3, r2, #30
 800c8a4:	680e      	ldr	r6, [r1, #0]
 800c8a6:	bf08      	it	eq
 800c8a8:	694b      	ldreq	r3, [r1, #20]
 800c8aa:	600f      	str	r7, [r1, #0]
 800c8ac:	bf18      	it	ne
 800c8ae:	2300      	movne	r3, #0
 800c8b0:	eba6 0807 	sub.w	r8, r6, r7
 800c8b4:	608b      	str	r3, [r1, #8]
 800c8b6:	f1b8 0f00 	cmp.w	r8, #0
 800c8ba:	dd9c      	ble.n	800c7f6 <__sflush_r+0x1a>
 800c8bc:	6a21      	ldr	r1, [r4, #32]
 800c8be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8c0:	4643      	mov	r3, r8
 800c8c2:	463a      	mov	r2, r7
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	47b0      	blx	r6
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	dc06      	bgt.n	800c8da <__sflush_r+0xfe>
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d2:	81a3      	strh	r3, [r4, #12]
 800c8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d8:	e78e      	b.n	800c7f8 <__sflush_r+0x1c>
 800c8da:	4407      	add	r7, r0
 800c8dc:	eba8 0800 	sub.w	r8, r8, r0
 800c8e0:	e7e9      	b.n	800c8b6 <__sflush_r+0xda>
 800c8e2:	bf00      	nop
 800c8e4:	dfbffffe 	.word	0xdfbffffe

0800c8e8 <_fflush_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	690b      	ldr	r3, [r1, #16]
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	b913      	cbnz	r3, 800c8f8 <_fflush_r+0x10>
 800c8f2:	2500      	movs	r5, #0
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	b118      	cbz	r0, 800c902 <_fflush_r+0x1a>
 800c8fa:	6a03      	ldr	r3, [r0, #32]
 800c8fc:	b90b      	cbnz	r3, 800c902 <_fflush_r+0x1a>
 800c8fe:	f7fe f883 	bl	800aa08 <__sinit>
 800c902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d0f3      	beq.n	800c8f2 <_fflush_r+0xa>
 800c90a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c90c:	07d0      	lsls	r0, r2, #31
 800c90e:	d404      	bmi.n	800c91a <_fflush_r+0x32>
 800c910:	0599      	lsls	r1, r3, #22
 800c912:	d402      	bmi.n	800c91a <_fflush_r+0x32>
 800c914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c916:	f7fe fb25 	bl	800af64 <__retarget_lock_acquire_recursive>
 800c91a:	4628      	mov	r0, r5
 800c91c:	4621      	mov	r1, r4
 800c91e:	f7ff ff5d 	bl	800c7dc <__sflush_r>
 800c922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c924:	07da      	lsls	r2, r3, #31
 800c926:	4605      	mov	r5, r0
 800c928:	d4e4      	bmi.n	800c8f4 <_fflush_r+0xc>
 800c92a:	89a3      	ldrh	r3, [r4, #12]
 800c92c:	059b      	lsls	r3, r3, #22
 800c92e:	d4e1      	bmi.n	800c8f4 <_fflush_r+0xc>
 800c930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c932:	f7fe fb18 	bl	800af66 <__retarget_lock_release_recursive>
 800c936:	e7dd      	b.n	800c8f4 <_fflush_r+0xc>

0800c938 <__swhatbuf_r>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	460c      	mov	r4, r1
 800c93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c940:	2900      	cmp	r1, #0
 800c942:	b096      	sub	sp, #88	; 0x58
 800c944:	4615      	mov	r5, r2
 800c946:	461e      	mov	r6, r3
 800c948:	da0d      	bge.n	800c966 <__swhatbuf_r+0x2e>
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c950:	f04f 0100 	mov.w	r1, #0
 800c954:	bf0c      	ite	eq
 800c956:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c95a:	2340      	movne	r3, #64	; 0x40
 800c95c:	2000      	movs	r0, #0
 800c95e:	6031      	str	r1, [r6, #0]
 800c960:	602b      	str	r3, [r5, #0]
 800c962:	b016      	add	sp, #88	; 0x58
 800c964:	bd70      	pop	{r4, r5, r6, pc}
 800c966:	466a      	mov	r2, sp
 800c968:	f000 f848 	bl	800c9fc <_fstat_r>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	dbec      	blt.n	800c94a <__swhatbuf_r+0x12>
 800c970:	9901      	ldr	r1, [sp, #4]
 800c972:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c976:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c97a:	4259      	negs	r1, r3
 800c97c:	4159      	adcs	r1, r3
 800c97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c982:	e7eb      	b.n	800c95c <__swhatbuf_r+0x24>

0800c984 <__smakebuf_r>:
 800c984:	898b      	ldrh	r3, [r1, #12]
 800c986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c988:	079d      	lsls	r5, r3, #30
 800c98a:	4606      	mov	r6, r0
 800c98c:	460c      	mov	r4, r1
 800c98e:	d507      	bpl.n	800c9a0 <__smakebuf_r+0x1c>
 800c990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	6123      	str	r3, [r4, #16]
 800c998:	2301      	movs	r3, #1
 800c99a:	6163      	str	r3, [r4, #20]
 800c99c:	b002      	add	sp, #8
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	ab01      	add	r3, sp, #4
 800c9a2:	466a      	mov	r2, sp
 800c9a4:	f7ff ffc8 	bl	800c938 <__swhatbuf_r>
 800c9a8:	9900      	ldr	r1, [sp, #0]
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff f9c9 	bl	800bd44 <_malloc_r>
 800c9b2:	b948      	cbnz	r0, 800c9c8 <__smakebuf_r+0x44>
 800c9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b8:	059a      	lsls	r2, r3, #22
 800c9ba:	d4ef      	bmi.n	800c99c <__smakebuf_r+0x18>
 800c9bc:	f023 0303 	bic.w	r3, r3, #3
 800c9c0:	f043 0302 	orr.w	r3, r3, #2
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	e7e3      	b.n	800c990 <__smakebuf_r+0xc>
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	6020      	str	r0, [r4, #0]
 800c9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9d0:	81a3      	strh	r3, [r4, #12]
 800c9d2:	9b00      	ldr	r3, [sp, #0]
 800c9d4:	6163      	str	r3, [r4, #20]
 800c9d6:	9b01      	ldr	r3, [sp, #4]
 800c9d8:	6120      	str	r0, [r4, #16]
 800c9da:	b15b      	cbz	r3, 800c9f4 <__smakebuf_r+0x70>
 800c9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	f000 f81d 	bl	800ca20 <_isatty_r>
 800c9e6:	b128      	cbz	r0, 800c9f4 <__smakebuf_r+0x70>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	f023 0303 	bic.w	r3, r3, #3
 800c9ee:	f043 0301 	orr.w	r3, r3, #1
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	431d      	orrs	r5, r3
 800c9f8:	81a5      	strh	r5, [r4, #12]
 800c9fa:	e7cf      	b.n	800c99c <__smakebuf_r+0x18>

0800c9fc <_fstat_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d07      	ldr	r5, [pc, #28]	; (800ca1c <_fstat_r+0x20>)
 800ca00:	2300      	movs	r3, #0
 800ca02:	4604      	mov	r4, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	4611      	mov	r1, r2
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	f7f8 fc7b 	bl	8005304 <_fstat>
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	d102      	bne.n	800ca18 <_fstat_r+0x1c>
 800ca12:	682b      	ldr	r3, [r5, #0]
 800ca14:	b103      	cbz	r3, 800ca18 <_fstat_r+0x1c>
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	bd38      	pop	{r3, r4, r5, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20001518 	.word	0x20001518

0800ca20 <_isatty_r>:
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	4d06      	ldr	r5, [pc, #24]	; (800ca3c <_isatty_r+0x1c>)
 800ca24:	2300      	movs	r3, #0
 800ca26:	4604      	mov	r4, r0
 800ca28:	4608      	mov	r0, r1
 800ca2a:	602b      	str	r3, [r5, #0]
 800ca2c:	f7f8 fc70 	bl	8005310 <_isatty>
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	d102      	bne.n	800ca3a <_isatty_r+0x1a>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	b103      	cbz	r3, 800ca3a <_isatty_r+0x1a>
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	20001518 	.word	0x20001518

0800ca40 <_sbrk_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d06      	ldr	r5, [pc, #24]	; (800ca5c <_sbrk_r+0x1c>)
 800ca44:	2300      	movs	r3, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	4608      	mov	r0, r1
 800ca4a:	602b      	str	r3, [r5, #0]
 800ca4c:	f000 f8c8 	bl	800cbe0 <_sbrk>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_sbrk_r+0x1a>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_sbrk_r+0x1a>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20001518 	.word	0x20001518

0800ca60 <memcpy>:
 800ca60:	440a      	add	r2, r1
 800ca62:	4291      	cmp	r1, r2
 800ca64:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca68:	d100      	bne.n	800ca6c <memcpy+0xc>
 800ca6a:	4770      	bx	lr
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca76:	4291      	cmp	r1, r2
 800ca78:	d1f9      	bne.n	800ca6e <memcpy+0xe>
 800ca7a:	bd10      	pop	{r4, pc}

0800ca7c <__assert_func>:
 800ca7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca7e:	4614      	mov	r4, r2
 800ca80:	461a      	mov	r2, r3
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <__assert_func+0x2c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4605      	mov	r5, r0
 800ca88:	68d8      	ldr	r0, [r3, #12]
 800ca8a:	b14c      	cbz	r4, 800caa0 <__assert_func+0x24>
 800ca8c:	4b07      	ldr	r3, [pc, #28]	; (800caac <__assert_func+0x30>)
 800ca8e:	9100      	str	r1, [sp, #0]
 800ca90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca94:	4906      	ldr	r1, [pc, #24]	; (800cab0 <__assert_func+0x34>)
 800ca96:	462b      	mov	r3, r5
 800ca98:	f000 f844 	bl	800cb24 <fiprintf>
 800ca9c:	f000 f854 	bl	800cb48 <abort>
 800caa0:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <__assert_func+0x38>)
 800caa2:	461c      	mov	r4, r3
 800caa4:	e7f3      	b.n	800ca8e <__assert_func+0x12>
 800caa6:	bf00      	nop
 800caa8:	2000006c 	.word	0x2000006c
 800caac:	0800d007 	.word	0x0800d007
 800cab0:	0800d014 	.word	0x0800d014
 800cab4:	0800d042 	.word	0x0800d042

0800cab8 <_calloc_r>:
 800cab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caba:	fba1 2402 	umull	r2, r4, r1, r2
 800cabe:	b94c      	cbnz	r4, 800cad4 <_calloc_r+0x1c>
 800cac0:	4611      	mov	r1, r2
 800cac2:	9201      	str	r2, [sp, #4]
 800cac4:	f7ff f93e 	bl	800bd44 <_malloc_r>
 800cac8:	9a01      	ldr	r2, [sp, #4]
 800caca:	4605      	mov	r5, r0
 800cacc:	b930      	cbnz	r0, 800cadc <_calloc_r+0x24>
 800cace:	4628      	mov	r0, r5
 800cad0:	b003      	add	sp, #12
 800cad2:	bd30      	pop	{r4, r5, pc}
 800cad4:	220c      	movs	r2, #12
 800cad6:	6002      	str	r2, [r0, #0]
 800cad8:	2500      	movs	r5, #0
 800cada:	e7f8      	b.n	800cace <_calloc_r+0x16>
 800cadc:	4621      	mov	r1, r4
 800cade:	f7fe f9c5 	bl	800ae6c <memset>
 800cae2:	e7f4      	b.n	800cace <_calloc_r+0x16>

0800cae4 <__ascii_mbtowc>:
 800cae4:	b082      	sub	sp, #8
 800cae6:	b901      	cbnz	r1, 800caea <__ascii_mbtowc+0x6>
 800cae8:	a901      	add	r1, sp, #4
 800caea:	b142      	cbz	r2, 800cafe <__ascii_mbtowc+0x1a>
 800caec:	b14b      	cbz	r3, 800cb02 <__ascii_mbtowc+0x1e>
 800caee:	7813      	ldrb	r3, [r2, #0]
 800caf0:	600b      	str	r3, [r1, #0]
 800caf2:	7812      	ldrb	r2, [r2, #0]
 800caf4:	1e10      	subs	r0, r2, #0
 800caf6:	bf18      	it	ne
 800caf8:	2001      	movne	r0, #1
 800cafa:	b002      	add	sp, #8
 800cafc:	4770      	bx	lr
 800cafe:	4610      	mov	r0, r2
 800cb00:	e7fb      	b.n	800cafa <__ascii_mbtowc+0x16>
 800cb02:	f06f 0001 	mvn.w	r0, #1
 800cb06:	e7f8      	b.n	800cafa <__ascii_mbtowc+0x16>

0800cb08 <__ascii_wctomb>:
 800cb08:	b149      	cbz	r1, 800cb1e <__ascii_wctomb+0x16>
 800cb0a:	2aff      	cmp	r2, #255	; 0xff
 800cb0c:	bf85      	ittet	hi
 800cb0e:	238a      	movhi	r3, #138	; 0x8a
 800cb10:	6003      	strhi	r3, [r0, #0]
 800cb12:	700a      	strbls	r2, [r1, #0]
 800cb14:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb18:	bf98      	it	ls
 800cb1a:	2001      	movls	r0, #1
 800cb1c:	4770      	bx	lr
 800cb1e:	4608      	mov	r0, r1
 800cb20:	4770      	bx	lr
	...

0800cb24 <fiprintf>:
 800cb24:	b40e      	push	{r1, r2, r3}
 800cb26:	b503      	push	{r0, r1, lr}
 800cb28:	4601      	mov	r1, r0
 800cb2a:	ab03      	add	r3, sp, #12
 800cb2c:	4805      	ldr	r0, [pc, #20]	; (800cb44 <fiprintf+0x20>)
 800cb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb32:	6800      	ldr	r0, [r0, #0]
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	f7ff fd37 	bl	800c5a8 <_vfiprintf_r>
 800cb3a:	b002      	add	sp, #8
 800cb3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb40:	b003      	add	sp, #12
 800cb42:	4770      	bx	lr
 800cb44:	2000006c 	.word	0x2000006c

0800cb48 <abort>:
 800cb48:	b508      	push	{r3, lr}
 800cb4a:	2006      	movs	r0, #6
 800cb4c:	f000 f82c 	bl	800cba8 <raise>
 800cb50:	2001      	movs	r0, #1
 800cb52:	f7f8 fbb1 	bl	80052b8 <_exit>

0800cb56 <_raise_r>:
 800cb56:	291f      	cmp	r1, #31
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	460d      	mov	r5, r1
 800cb5e:	d904      	bls.n	800cb6a <_raise_r+0x14>
 800cb60:	2316      	movs	r3, #22
 800cb62:	6003      	str	r3, [r0, #0]
 800cb64:	f04f 30ff 	mov.w	r0, #4294967295
 800cb68:	bd38      	pop	{r3, r4, r5, pc}
 800cb6a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cb6c:	b112      	cbz	r2, 800cb74 <_raise_r+0x1e>
 800cb6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb72:	b94b      	cbnz	r3, 800cb88 <_raise_r+0x32>
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 f831 	bl	800cbdc <_getpid_r>
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	4601      	mov	r1, r0
 800cb7e:	4620      	mov	r0, r4
 800cb80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb84:	f000 b818 	b.w	800cbb8 <_kill_r>
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d00a      	beq.n	800cba2 <_raise_r+0x4c>
 800cb8c:	1c59      	adds	r1, r3, #1
 800cb8e:	d103      	bne.n	800cb98 <_raise_r+0x42>
 800cb90:	2316      	movs	r3, #22
 800cb92:	6003      	str	r3, [r0, #0]
 800cb94:	2001      	movs	r0, #1
 800cb96:	e7e7      	b.n	800cb68 <_raise_r+0x12>
 800cb98:	2400      	movs	r4, #0
 800cb9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb9e:	4628      	mov	r0, r5
 800cba0:	4798      	blx	r3
 800cba2:	2000      	movs	r0, #0
 800cba4:	e7e0      	b.n	800cb68 <_raise_r+0x12>
	...

0800cba8 <raise>:
 800cba8:	4b02      	ldr	r3, [pc, #8]	; (800cbb4 <raise+0xc>)
 800cbaa:	4601      	mov	r1, r0
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	f7ff bfd2 	b.w	800cb56 <_raise_r>
 800cbb2:	bf00      	nop
 800cbb4:	2000006c 	.word	0x2000006c

0800cbb8 <_kill_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d07      	ldr	r5, [pc, #28]	; (800cbd8 <_kill_r+0x20>)
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4608      	mov	r0, r1
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	602b      	str	r3, [r5, #0]
 800cbc6:	f7f8 fb6f 	bl	80052a8 <_kill>
 800cbca:	1c43      	adds	r3, r0, #1
 800cbcc:	d102      	bne.n	800cbd4 <_kill_r+0x1c>
 800cbce:	682b      	ldr	r3, [r5, #0]
 800cbd0:	b103      	cbz	r3, 800cbd4 <_kill_r+0x1c>
 800cbd2:	6023      	str	r3, [r4, #0]
 800cbd4:	bd38      	pop	{r3, r4, r5, pc}
 800cbd6:	bf00      	nop
 800cbd8:	20001518 	.word	0x20001518

0800cbdc <_getpid_r>:
 800cbdc:	f7f8 bb62 	b.w	80052a4 <_getpid>

0800cbe0 <_sbrk>:
 800cbe0:	4a04      	ldr	r2, [pc, #16]	; (800cbf4 <_sbrk+0x14>)
 800cbe2:	6811      	ldr	r1, [r2, #0]
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	b909      	cbnz	r1, 800cbec <_sbrk+0xc>
 800cbe8:	4903      	ldr	r1, [pc, #12]	; (800cbf8 <_sbrk+0x18>)
 800cbea:	6011      	str	r1, [r2, #0]
 800cbec:	6810      	ldr	r0, [r2, #0]
 800cbee:	4403      	add	r3, r0
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	4770      	bx	lr
 800cbf4:	20001528 	.word	0x20001528
 800cbf8:	20001530 	.word	0x20001530

0800cbfc <_init>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr

0800cc08 <_fini>:
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0a:	bf00      	nop
 800cc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0e:	bc08      	pop	{r3}
 800cc10:	469e      	mov	lr, r3
 800cc12:	4770      	bx	lr
