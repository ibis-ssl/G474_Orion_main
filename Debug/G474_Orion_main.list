
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6d4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800d8b8  0800d8b8  0001d8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df30  0800df30  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800df30  0800df30  0001df30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df38  0800df38  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df38  0800df38  0001df38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800df40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001994  200001d8  0800e118  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  0800e118  00021b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000379bf  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006079  00000000  00000000  00057c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00016717  00000000  00000000  0005dc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f8  00000000  00000000  000743a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d16  00000000  00000000  00075b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d3db  00000000  00000000  000788ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003652d  00000000  00000000  000a5c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e418  00000000  00000000  000dc1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063b0  00000000  00000000  001fa5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00200980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d89c 	.word	0x0800d89c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800d89c 	.word	0x0800d89c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
  uint8_t senddata_motor[8];
  float_to_uchar4(senddata_motor, duty);
  can2_send(motor_id, senddata_motor);
}

void actuator_motor1(float duty, float duty_Limit1) { motor_cmd_can1(0x100, duty); }
 8000fd4:	b500      	push	{lr}
 8000fd6:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8000fd8:	4668      	mov	r0, sp
 8000fda:	f003 fee3 	bl	8004da4 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8000fde:	4669      	mov	r1, sp
 8000fe0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fe4:	f000 faba 	bl	800155c <can1_send>
void actuator_motor1(float duty, float duty_Limit1) { motor_cmd_can1(0x100, duty); }
 8000fe8:	b003      	add	sp, #12
 8000fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fee:	bf00      	nop

08000ff0 <actuator_motor2>:
void actuator_motor2(float duty, float duty_Limit2) { motor_cmd_can1(0x101, duty); }
 8000ff0:	b500      	push	{lr}
 8000ff2:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8000ff4:	4668      	mov	r0, sp
 8000ff6:	f003 fed5 	bl	8004da4 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8000ffa:	4669      	mov	r1, sp
 8000ffc:	f240 1001 	movw	r0, #257	; 0x101
 8001000:	f000 faac 	bl	800155c <can1_send>
void actuator_motor2(float duty, float duty_Limit2) { motor_cmd_can1(0x101, duty); }
 8001004:	b003      	add	sp, #12
 8001006:	f85d fb04 	ldr.w	pc, [sp], #4
 800100a:	bf00      	nop

0800100c <actuator_motor3>:
void actuator_motor3(float duty, float duty_Limit3) { motor_cmd_can2(0x102, duty); }
 800100c:	b500      	push	{lr}
 800100e:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001010:	4668      	mov	r0, sp
 8001012:	f003 fec7 	bl	8004da4 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 8001016:	4669      	mov	r1, sp
 8001018:	f44f 7081 	mov.w	r0, #258	; 0x102
 800101c:	f000 faee 	bl	80015fc <can2_send>
void actuator_motor3(float duty, float duty_Limit3) { motor_cmd_can2(0x102, duty); }
 8001020:	b003      	add	sp, #12
 8001022:	f85d fb04 	ldr.w	pc, [sp], #4
 8001026:	bf00      	nop

08001028 <actuator_motor4>:
void actuator_motor4(float duty, float duty_Limit4) { motor_cmd_can2(0x103, duty); }
 8001028:	b500      	push	{lr}
 800102a:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 800102c:	4668      	mov	r0, sp
 800102e:	f003 feb9 	bl	8004da4 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 8001032:	4669      	mov	r1, sp
 8001034:	f240 1003 	movw	r0, #259	; 0x103
 8001038:	f000 fae0 	bl	80015fc <can2_send>
void actuator_motor4(float duty, float duty_Limit4) { motor_cmd_can2(0x103, duty); }
 800103c:	b003      	add	sp, #12
 800103e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001042:	bf00      	nop

08001044 <actuator_motor5>:
void actuator_motor5(float duty, float duty_Limit5) { motor_cmd_can1(0x104, duty); }
 8001044:	b500      	push	{lr}
 8001046:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001048:	4668      	mov	r0, sp
 800104a:	f003 feab 	bl	8004da4 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 800104e:	4669      	mov	r1, sp
 8001050:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001054:	f000 fa82 	bl	800155c <can1_send>
void actuator_motor5(float duty, float duty_Limit5) { motor_cmd_can1(0x104, duty); }
 8001058:	b003      	add	sp, #12
 800105a:	f85d fb04 	ldr.w	pc, [sp], #4
 800105e:	bf00      	nop

08001060 <actuator_kicker_voltage>:

void actuator_kicker_voltage(float voltage)
{
 8001060:	b500      	push	{lr}
 8001062:	b085      	sub	sp, #20
  uint8_t senddata_kick[8];
  uint8_t senddata_voltage[4];
  float_to_uchar4(senddata_voltage, voltage);
 8001064:	a801      	add	r0, sp, #4
 8001066:	f003 fe9d 	bl	8004da4 <float_to_uchar4>

  senddata_kick[0] = 0;
  senddata_kick[1] = senddata_voltage[0];
  senddata_kick[2] = senddata_voltage[1];
 800106a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  senddata_kick[1] = senddata_voltage[0];
 800106e:	f89d c004 	ldrb.w	ip, [sp, #4]
  senddata_kick[3] = senddata_voltage[2];
 8001072:	f89d 2006 	ldrb.w	r2, [sp, #6]
  senddata_kick[4] = senddata_voltage[3];
 8001076:	f89d 3007 	ldrb.w	r3, [sp, #7]
  senddata_kick[2] = senddata_voltage[1];
 800107a:	f88d 000a 	strb.w	r0, [sp, #10]
  senddata_kick[0] = 0;
 800107e:	2100      	movs	r1, #0
 8001080:	f88d 1008 	strb.w	r1, [sp, #8]
  can1_send(0x110, senddata_kick);
 8001084:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001088:	a902      	add	r1, sp, #8
  senddata_kick[1] = senddata_voltage[0];
 800108a:	f88d c009 	strb.w	ip, [sp, #9]
  senddata_kick[3] = senddata_voltage[2];
 800108e:	f88d 200b 	strb.w	r2, [sp, #11]
  senddata_kick[4] = senddata_voltage[3];
 8001092:	f88d 300c 	strb.w	r3, [sp, #12]
  can1_send(0x110, senddata_kick);
 8001096:	f000 fa61 	bl	800155c <can1_send>
}
 800109a:	b005      	add	sp, #20
 800109c:	f85d fb04 	ldr.w	pc, [sp], #4

080010a0 <actuator_kicker>:

void actuator_kicker(uint8_t id, uint8_t param)
{
 80010a0:	b500      	push	{lr}
 80010a2:	b083      	sub	sp, #12
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
  uint8_t senddata_kick[8];
  senddata_kick[0] = id;
  senddata_kick[1] = param;
  can1_send(0x110, senddata_kick);
 80010a8:	f44f 7088 	mov.w	r0, #272	; 0x110
 80010ac:	4669      	mov	r1, sp
  senddata_kick[0] = id;
 80010ae:	f88d 2000 	strb.w	r2, [sp]
  senddata_kick[1] = param;
 80010b2:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x110, senddata_kick);
 80010b6:	f000 fa51 	bl	800155c <can1_send>
}
 80010ba:	b003      	add	sp, #12
 80010bc:	f85d fb04 	ldr.w	pc, [sp], #4

080010c0 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on)
{
 80010c0:	b500      	push	{lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	4603      	mov	r3, r0
  /*id 0=>off
	 *   1=>on
	 * */
  uint8_t senddata_power[8];
  senddata_power[0] = 0;
 80010c6:	2200      	movs	r2, #0
  senddata_power[1] = power_on;
  can1_send(0x010, senddata_power);
 80010c8:	4669      	mov	r1, sp
 80010ca:	2010      	movs	r0, #16
  senddata_power[0] = 0;
 80010cc:	f88d 2000 	strb.w	r2, [sp]
  senddata_power[1] = power_on;
 80010d0:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x010, senddata_power);
 80010d4:	f000 fa42 	bl	800155c <can1_send>
}
 80010d8:	b003      	add	sp, #12
 80010da:	f85d fb04 	ldr.w	pc, [sp], #4
 80010de:	bf00      	nop

080010e0 <actuator_power_param>:
  senddata_shutdown[3] = 0xFF;
  can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id, float param)
{
 80010e0:	b510      	push	{r4, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	4604      	mov	r4, r0
 * */

  uint8_t senddata_power_param_temp[8];
  uint8_t senddata_power_param[8];

  float_to_uchar4(senddata_power_param_temp, param);
 80010e6:	4668      	mov	r0, sp
 80010e8:	f003 fe5c 	bl	8004da4 <float_to_uchar4>
  senddata_power_param[0] = id;
 80010ec:	f89d 0000 	ldrb.w	r0, [sp]
 80010f0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80010f4:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80010f8:	2300      	movs	r3, #0
 80010fa:	f364 0307 	bfi	r3, r4, #0, #8
 80010fe:	f360 230f 	bfi	r3, r0, #8, #8
 8001102:	f362 4317 	bfi	r3, r2, #16, #8
 8001106:	f361 631f 	bfi	r3, r1, #24, #8
  senddata_power_param[1] = senddata_power_param_temp[0];
  senddata_power_param[2] = senddata_power_param_temp[1];
  senddata_power_param[3] = senddata_power_param_temp[2];
  senddata_power_param[4] = senddata_power_param_temp[3];
 800110a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  senddata_power_param[0] = id;
 800110e:	9302      	str	r3, [sp, #8]

  can1_send(0x010, senddata_power_param);
 8001110:	a902      	add	r1, sp, #8
 8001112:	2010      	movs	r0, #16
  senddata_power_param[4] = senddata_power_param_temp[3];
 8001114:	f88d 200c 	strb.w	r2, [sp, #12]
  can1_send(0x010, senddata_power_param);
 8001118:	f000 fa20 	bl	800155c <can1_send>
}
 800111c:	b004      	add	sp, #16
 800111e:	bd10      	pop	{r4, pc}

08001120 <actuator_buzzer>:
  senddata_param[0] = param5;
  can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime, uint16_t offtime)
{
 8001120:	b538      	push	{r3, r4, r5, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001122:	4d07      	ldr	r5, [pc, #28]	; (8001140 <actuator_buzzer+0x20>)
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	22fa      	movs	r2, #250	; 0xfa
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
{
 800112a:	460c      	mov	r4, r1
  HAL_Delay(ontime);
 800112c:	f004 f84c 	bl	80051c8 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(offtime);
 8001136:	4620      	mov	r0, r4
}
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(offtime);
 800113c:	f004 b844 	b.w	80051c8 <HAL_Delay>
 8001140:	200015ec 	.word	0x200015ec

08001144 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001144:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001146:	2400      	movs	r4, #0
{
 8001148:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	2220      	movs	r2, #32
 800114c:	4621      	mov	r1, r4
 800114e:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001150:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001154:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	f009 fa9d 	bl	800a694 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <MX_ADC1_Init+0xa4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001160:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001166:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116e:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001170:	8383      	strh	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001172:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 8001174:	2301      	movs	r3, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001176:	2240      	movs	r2, #64	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001178:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117c:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001180:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8001184:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001186:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800118a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800118e:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001190:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.OversamplingMode = ENABLE;
 8001192:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001196:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001198:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119a:	f004 f827 	bl	80051ec <HAL_ADC_Init>
 800119e:	b9c8      	cbnz	r0, 80011d4 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a6:	a901      	add	r1, sp, #4
 80011a8:	f004 fce8 	bl	8005b7c <HAL_ADCEx_MultiModeConfigChannel>
 80011ac:	b9c8      	cbnz	r0, 80011e2 <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011b8:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	237f      	movs	r3, #127	; 0x7f
 80011bc:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c0:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80011c2:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80011c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	f004 f985 	bl	80054d8 <HAL_ADC_ConfigChannel>
 80011ce:	b920      	cbnz	r0, 80011da <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	b00c      	add	sp, #48	; 0x30
 80011d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011d4:	f002 fede 	bl	8003f94 <Error_Handler>
 80011d8:	e7e2      	b.n	80011a0 <MX_ADC1_Init+0x5c>
    Error_Handler();
 80011da:	f002 fedb 	bl	8003f94 <Error_Handler>
}
 80011de:	b00c      	add	sp, #48	; 0x30
 80011e0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011e2:	f002 fed7 	bl	8003f94 <Error_Handler>
 80011e6:	e7e2      	b.n	80011ae <MX_ADC1_Init+0x6a>
 80011e8:	200001f8 	.word	0x200001f8
 80011ec:	3ef08000 	.word	0x3ef08000

080011f0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011f0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011f2:	2400      	movs	r4, #0
{
 80011f4:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	2220      	movs	r2, #32
 80011f8:	4621      	mov	r1, r4
 80011fa:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80011fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001200:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	f009 fa47 	bl	800a694 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001206:	4823      	ldr	r0, [pc, #140]	; (8001294 <MX_ADC3_Init+0xa4>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001208:	4923      	ldr	r1, [pc, #140]	; (8001298 <MX_ADC3_Init+0xa8>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800120a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800120e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001212:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	e9c0 1300 	strd	r1, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121c:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800121e:	8383      	strh	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001220:	6442      	str	r2, [r0, #68]	; 0x44
  hadc3.Init.NbrOfConversion = 1;
 8001222:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001224:	2240      	movs	r2, #64	; 0x40
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001226:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800122a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800122e:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 8001232:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001234:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001238:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800123a:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc3.Init.OversamplingMode = ENABLE;
 800123c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001240:	6482      	str	r2, [r0, #72]	; 0x48
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001242:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001244:	f003 ffd2 	bl	80051ec <HAL_ADC_Init>
 8001248:	b9c8      	cbnz	r0, 800127e <MX_ADC3_Init+0x8e>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124a:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <MX_ADC3_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001250:	a901      	add	r1, sp, #4
 8001252:	f004 fc93 	bl	8005b7c <HAL_ADCEx_MultiModeConfigChannel>
 8001256:	b9c8      	cbnz	r0, 800128c <MX_ADC3_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001258:	4a10      	ldr	r2, [pc, #64]	; (800129c <MX_ADC3_Init+0xac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <MX_ADC3_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2306      	movs	r3, #6
 800125e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001262:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001264:	237f      	movs	r3, #127	; 0x7f
 8001266:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126a:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800126c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800126e:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001270:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001274:	f004 f930 	bl	80054d8 <HAL_ADC_ConfigChannel>
 8001278:	b920      	cbnz	r0, 8001284 <MX_ADC3_Init+0x94>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800127a:	b00c      	add	sp, #48	; 0x30
 800127c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800127e:	f002 fe89 	bl	8003f94 <Error_Handler>
 8001282:	e7e2      	b.n	800124a <MX_ADC3_Init+0x5a>
    Error_Handler();
 8001284:	f002 fe86 	bl	8003f94 <Error_Handler>
}
 8001288:	b00c      	add	sp, #48	; 0x30
 800128a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800128c:	f002 fe82 	bl	8003f94 <Error_Handler>
 8001290:	e7e2      	b.n	8001258 <MX_ADC3_Init+0x68>
 8001292:	bf00      	nop
 8001294:	20000264 	.word	0x20000264
 8001298:	50000400 	.word	0x50000400
 800129c:	04300002 	.word	0x04300002

080012a0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	4668      	mov	r0, sp
 80012aa:	f009 f9f3 	bl	800a694 <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ae:	4c1e      	ldr	r4, [pc, #120]	; (8001328 <MX_ADC5_Init+0x88>)
  hadc5.Instance = ADC5;
 80012b0:	481e      	ldr	r0, [pc, #120]	; (800132c <MX_ADC5_Init+0x8c>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80012b6:	2300      	movs	r3, #0
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b8:	e9c0 4200 	strd	r4, r2, [r0]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c0:	2104      	movs	r1, #4
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ca:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80012ce:	8382      	strh	r2, [r0, #28]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80012d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.NbrOfConversion = 1;
 80012d4:	2201      	movs	r2, #1
  hadc5.Init.DMAContinuousRequests = ENABLE;
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012d8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012da:	2340      	movs	r3, #64	; 0x40
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012dc:	6181      	str	r1, [r0, #24]
  hadc5.Init.NbrOfConversion = 1;
 80012de:	6202      	str	r2, [r0, #32]
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80012e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.OversamplingMode = ENABLE;
 80012e4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012e8:	6441      	str	r1, [r0, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012ea:	6483      	str	r3, [r0, #72]	; 0x48
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012ec:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80012ee:	f003 ff7d 	bl	80051ec <HAL_ADC_Init>
 80012f2:	b990      	cbnz	r0, 800131a <MX_ADC5_Init+0x7a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <MX_ADC5_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_ADC5_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012f8:	2306      	movs	r3, #6
 80012fa:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012fe:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001300:	237f      	movs	r3, #127	; 0x7f
 8001302:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001306:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001308:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800130a:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 800130c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001310:	f004 f8e2 	bl	80054d8 <HAL_ADC_ConfigChannel>
 8001314:	b920      	cbnz	r0, 8001320 <MX_ADC5_Init+0x80>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001316:	b008      	add	sp, #32
 8001318:	bd10      	pop	{r4, pc}
    Error_Handler();
 800131a:	f002 fe3b 	bl	8003f94 <Error_Handler>
 800131e:	e7e9      	b.n	80012f4 <MX_ADC5_Init+0x54>
    Error_Handler();
 8001320:	f002 fe38 	bl	8003f94 <Error_Handler>
}
 8001324:	b008      	add	sp, #32
 8001326:	bd10      	pop	{r4, pc}
 8001328:	50000600 	.word	0x50000600
 800132c:	200002d0 	.word	0x200002d0
 8001330:	08600004 	.word	0x08600004

08001334 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	4604      	mov	r4, r0
 8001338:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	2254      	movs	r2, #84	; 0x54
 800133e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001344:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001348:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134a:	f009 f9a3 	bl	800a694 <memset>
  if(adcHandle->Instance==ADC1)
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001354:	d007      	beq.n	8001366 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_ADC_MspInit+0x1a0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d04a      	beq.n	80013f2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 800135c:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_ADC_MspInit+0x1a4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d07a      	beq.n	8001458 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001362:	b020      	add	sp, #128	; 0x80
 8001364:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001366:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800136a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001370:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001372:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f006 f82a 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 8001378:	2800      	cmp	r0, #0
 800137a:	f040 80a2 	bne.w	80014c2 <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001380:	4857      	ldr	r0, [pc, #348]	; (80014e0 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 8001384:	4d57      	ldr	r5, [pc, #348]	; (80014e4 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800138a:	64da      	str	r2, [r3, #76]	; 0x4c
 800138c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800138e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001392:	9200      	str	r2, [sp, #0]
 8001394:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001398:	f042 0202 	orr.w	r2, r2, #2
 800139c:	64da      	str	r2, [r3, #76]	; 0x4c
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 80013a6:	2201      	movs	r2, #1
 80013a8:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013aa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 80013ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f005 fac3 	bl	8006940 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 80013ba:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013bc:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80013be:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80013c2:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d2:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013d6:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013da:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013dc:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013de:	f004 fcf5 	bl	8005dcc <HAL_DMA_Init>
 80013e2:	b918      	cbnz	r0, 80013ec <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013e4:	6565      	str	r5, [r4, #84]	; 0x54
 80013e6:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80013e8:	b020      	add	sp, #128	; 0x80
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80013ec:	f002 fdd2 	bl	8003f94 <Error_Handler>
 80013f0:	e7f8      	b.n	80013e4 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fa:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013fc:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013fe:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f005 ffe4 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 8001404:	2800      	cmp	r0, #0
 8001406:	d15f      	bne.n	80014c8 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001408:	4a38      	ldr	r2, [pc, #224]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800140e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001410:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001412:	d109      	bne.n	8001428 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
 8001416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800141c:	64da      	str	r2, [r3, #76]	; 0x4c
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800142a:	482d      	ldr	r0, [pc, #180]	; (80014e0 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800142e:	4d30      	ldr	r5, [pc, #192]	; (80014f0 <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	f042 0202 	orr.w	r2, r2, #2
 8001434:	64da      	str	r2, [r3, #76]	; 0x4c
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 800143e:	2202      	movs	r2, #2
 8001440:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001442:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 8001446:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800144e:	f005 fa77 	bl	8006940 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001452:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001454:	2325      	movs	r3, #37	; 0x25
 8001456:	e7b2      	b.n	80013be <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800145c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001460:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001462:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001464:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	f005 ffb1 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 800146a:	2800      	cmp	r0, #0
 800146c:	d12f      	bne.n	80014ce <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_ADC_MspInit+0x1b8>)
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001474:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001476:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001478:	d109      	bne.n	800148e <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
 800147c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800147e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001482:	64da      	str	r2, [r3, #76]	; 0x4c
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	9304      	str	r3, [sp, #16]
 800148c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 8001490:	4d19      	ldr	r5, [pc, #100]	; (80014f8 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	f042 0201 	orr.w	r2, r2, #1
 8001498:	64da      	str	r2, [r3, #76]	; 0x4c
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f005 fa42 	bl	8006940 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80014be:	2327      	movs	r3, #39	; 0x27
 80014c0:	e77d      	b.n	80013be <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 80014c2:	f002 fd67 	bl	8003f94 <Error_Handler>
 80014c6:	e75a      	b.n	800137e <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 80014c8:	f002 fd64 	bl	8003f94 <Error_Handler>
 80014cc:	e79c      	b.n	8001408 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 80014ce:	f002 fd61 	bl	8003f94 <Error_Handler>
 80014d2:	e7cc      	b.n	800146e <HAL_ADC_MspInit+0x13a>
 80014d4:	50000400 	.word	0x50000400
 80014d8:	50000600 	.word	0x50000600
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000400 	.word	0x48000400
 80014e4:	2000033c 	.word	0x2000033c
 80014e8:	40020058 	.word	0x40020058
 80014ec:	200001f4 	.word	0x200001f4
 80014f0:	2000039c 	.word	0x2000039c
 80014f4:	40020030 	.word	0x40020030
 80014f8:	200003fc 	.word	0x200003fc
 80014fc:	40020044 	.word	0x40020044

08001500 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001500:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 8001502:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001550 <can1_init_ibis+0x50>
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001506:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001508:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800150a:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800150c:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800150e:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <can1_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001512:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001514:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 8001516:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 800151a:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800151e:	f004 ff89 	bl	8006434 <HAL_FDCAN_ConfigFilter>
 8001522:	b930      	cbnz	r0, 8001532 <can1_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <can1_init_ibis+0x58>)
 8001526:	f004 ffb7 	bl	8006498 <HAL_FDCAN_Start>
 800152a:	b948      	cbnz	r0, 8001540 <can1_init_ibis+0x40>
}
 800152c:	b007      	add	sp, #28
 800152e:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 8001532:	f002 fd2f 	bl	8003f94 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <can1_init_ibis+0x58>)
 8001538:	f004 ffae 	bl	8006498 <HAL_FDCAN_Start>
 800153c:	2800      	cmp	r0, #0
 800153e:	d0f5      	beq.n	800152c <can1_init_ibis+0x2c>
 8001540:	f002 fd28 	bl	8003f94 <Error_Handler>
}
 8001544:	b007      	add	sp, #28
 8001546:	f85d fb04 	ldr.w	pc, [sp], #4
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
	...
 8001558:	20000c88 	.word	0x20000c88

0800155c <can1_send>:

void can1_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <can1_send+0x38>)
void can1_send(int id, uint8_t senddata[]){
 800155e:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001560:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001564:	2500      	movs	r5, #0
 8001566:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800156a:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800156e:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001572:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 8001576:	4c08      	ldr	r4, [pc, #32]	; (8001598 <can1_send+0x3c>)
	TxHeader.MessageMarker = 0;
 8001578:	621d      	str	r5, [r3, #32]
void can1_send(int id, uint8_t senddata[]){
 800157a:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 800157c:	4620      	mov	r0, r4
 800157e:	f005 f88d 	bl	800669c <HAL_FDCAN_GetTxFifoFreeLevel>
 8001582:	2803      	cmp	r0, #3
 8001584:	d1fa      	bne.n	800157c <can1_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001586:	4632      	mov	r2, r6
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <can1_send+0x38>)
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <can1_send+0x3c>)

}
 800158c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001590:	f004 bf9a 	b.w	80064c8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001594:	20000dfc 	.word	0x20000dfc
 8001598:	20000c88 	.word	0x20000c88
 800159c:	00000000 	.word	0x00000000

080015a0 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 80015a0:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
 80015a2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80015f0 <can2_init_ibis+0x50>
void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 80015a6:	b087      	sub	sp, #28
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015a8:	2102      	movs	r1, #2
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80015aa:	2300      	movs	r3, #0
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015ac:	2201      	movs	r2, #1
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015ae:	9102      	str	r1, [sp, #8]
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <can2_init_ibis+0x58>)
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015b2:	9203      	str	r2, [sp, #12]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80015b4:	4669      	mov	r1, sp
	  sFilterConfig.FilterIndex = 0;
 80015b6:	e9cd 3300 	strd	r3, r3, [sp]
	  sFilterConfig.FilterID1 = 0x000;
 80015ba:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80015be:	f004 ff39 	bl	8006434 <HAL_FDCAN_ConfigFilter>
 80015c2:	b930      	cbnz	r0, 80015d2 <can2_init_ibis+0x32>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <can2_init_ibis+0x58>)
 80015c6:	f004 ff67 	bl	8006498 <HAL_FDCAN_Start>
 80015ca:	b948      	cbnz	r0, 80015e0 <can2_init_ibis+0x40>
}
 80015cc:	b007      	add	sp, #28
 80015ce:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 80015d2:	f002 fcdf 	bl	8003f94 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 80015d6:	4808      	ldr	r0, [pc, #32]	; (80015f8 <can2_init_ibis+0x58>)
 80015d8:	f004 ff5e 	bl	8006498 <HAL_FDCAN_Start>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d0f5      	beq.n	80015cc <can2_init_ibis+0x2c>
 80015e0:	f002 fcd8 	bl	8003f94 <Error_Handler>
}
 80015e4:	b007      	add	sp, #28
 80015e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
	...
 80015f8:	20000cec 	.word	0x20000cec

080015fc <can2_send>:

void can2_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <can2_send+0x38>)
void can2_send(int id, uint8_t senddata[]){
 80015fe:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001600:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001604:	2500      	movs	r5, #0
 8001606:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800160a:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800160e:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001612:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 8001616:	4c08      	ldr	r4, [pc, #32]	; (8001638 <can2_send+0x3c>)
	TxHeader.MessageMarker = 0;
 8001618:	621d      	str	r5, [r3, #32]
void can2_send(int id, uint8_t senddata[]){
 800161a:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 800161c:	4620      	mov	r0, r4
 800161e:	f005 f83d 	bl	800669c <HAL_FDCAN_GetTxFifoFreeLevel>
 8001622:	2803      	cmp	r0, #3
 8001624:	d1fa      	bne.n	800161c <can2_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001626:	4632      	mov	r2, r6
 8001628:	4902      	ldr	r1, [pc, #8]	; (8001634 <can2_send+0x38>)
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <can2_send+0x3c>)

}
 800162c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001630:	f004 bf4a 	b.w	80064c8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001634:	20000dfc 	.word	0x20000dfc
 8001638:	20000cec 	.word	0x20000cec

0800163c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <MX_DMA_Init+0xb0>)
{
 800163e:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001640:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001642:	f040 0004 	orr.w	r0, r0, #4
 8001646:	6498      	str	r0, [r3, #72]	; 0x48
 8001648:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 800164a:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800164c:	f004 0404 	and.w	r4, r4, #4
 8001650:	9400      	str	r4, [sp, #0]
 8001652:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001654:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001656:	f044 0401 	orr.w	r4, r4, #1
 800165a:	649c      	str	r4, [r3, #72]	; 0x48
 800165c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165e:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001666:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001668:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800166c:	f004 fb48 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001670:	200b      	movs	r0, #11
 8001672:	f004 fb83 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	200c      	movs	r0, #12
 800167c:	f004 fb40 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001680:	200c      	movs	r0, #12
 8001682:	f004 fb7b 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2109      	movs	r1, #9
 800168a:	200d      	movs	r0, #13
 800168c:	f004 fb38 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001690:	200d      	movs	r0, #13
 8001692:	f004 fb73 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	210a      	movs	r1, #10
 800169a:	200e      	movs	r0, #14
 800169c:	f004 fb30 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016a0:	200e      	movs	r0, #14
 80016a2:	f004 fb6b 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	210b      	movs	r1, #11
 80016aa:	200f      	movs	r0, #15
 80016ac:	f004 fb28 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016b0:	200f      	movs	r0, #15
 80016b2:	f004 fb63 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	210e      	movs	r1, #14
 80016ba:	2010      	movs	r0, #16
 80016bc:	f004 fb20 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016c0:	2010      	movs	r0, #16
 80016c2:	f004 fb5b 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	2011      	movs	r0, #17
 80016cc:	f004 fb18 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80016d0:	2011      	movs	r0, #17
 80016d2:	f004 fb53 	bl	8005d7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2060      	movs	r0, #96	; 0x60
 80016da:	4611      	mov	r1, r2
 80016dc:	f004 fb10 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80016e0:	2060      	movs	r0, #96	; 0x60

}
 80016e2:	b002      	add	sp, #8
 80016e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80016e8:	f004 bb48 	b.w	8005d7c <HAL_NVIC_EnableIRQ>
 80016ec:	40021000 	.word	0x40021000

080016f0 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 80016f0:	b510      	push	{r4, lr}
    dmi.huart = printf_huart;
 80016f2:	4c06      	ldr	r4, [pc, #24]	; (800170c <dma_printf_init+0x1c>)
void dma_printf_init(UART_HandleTypeDef *printf_huart){
 80016f4:	4601      	mov	r1, r0
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80016f6:	4620      	mov	r0, r4
    dmi.huart = printf_huart;
 80016f8:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80016fc:	f000 f830 	bl	8001760 <dma_ring_init>
    dmi.sending = false;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 8001706:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
}
 800170a:	bd10      	pop	{r4, pc}
 800170c:	2000045c 	.word	0x2000045c

08001710 <dma_printf_send_it>:
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }
}

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001710:	b570      	push	{r4, r5, r6, lr}
    if(dmi.huart != printf_huart) return;
 8001712:	4c12      	ldr	r4, [pc, #72]	; (800175c <dma_printf_send_it+0x4c>)
 8001714:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8001718:	4283      	cmp	r3, r0
 800171a:	d000      	beq.n	800171e <dma_printf_send_it+0xe>
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }else{
        dmi.sending = false;
    }
}
 800171c:	bd70      	pop	{r4, r5, r6, pc}
    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 800171e:	f8d4 1414 	ldr.w	r1, [r4, #1044]	; 0x414
 8001722:	4620      	mov	r0, r4
 8001724:	f000 f834 	bl	8001790 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001728:	4620      	mov	r0, r4
 800172a:	f000 f823 	bl	8001774 <dma_ring_available_linear>
 800172e:	b285      	uxth	r5, r0
    if (len > 0 ) {
 8001730:	b915      	cbnz	r5, 8001738 <dma_printf_send_it+0x28>
        dmi.sending = false;
 8001732:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
}
 8001736:	bd70      	pop	{r4, r5, r6, pc}
        dmi.sending = true;
 8001738:	2301      	movs	r3, #1
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 800173a:	4620      	mov	r0, r4
 800173c:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        dmi.previous_send_len = len;
 8001740:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
        dmi.sending = true;
 8001744:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001748:	f000 f81e 	bl	8001788 <dma_ring_get_r_ptr>
 800174c:	462a      	mov	r2, r5
 800174e:	1821      	adds	r1, r4, r0
 8001750:	4630      	mov	r0, r6
}
 8001752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001756:	f007 b8ab 	b.w	80088b0 <HAL_UART_Transmit_DMA>
 800175a:	bf00      	nop
 800175c:	2000045c 	.word	0x2000045c

08001760 <dma_ring_init>:
static void update_w_ptr(struct dma_ring_buf *ring){
	ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx))&0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart){
  ring->buf_size = RING_BUF_SIZE;
 8001760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001764:	2300      	movs	r3, #0
 8001766:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 800176a:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  ring->w_ptr = 0;
  ring->r_ptr = 0;
  ring->overwrite_cnt = 0;
  ring->huart = huart;
 800176e:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
}
 8001772:	4770      	bx	lr

08001774 <dma_ring_available_linear>:
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
  if(ring->w_ptr >= ring->r_ptr){
 8001774:	f8b0 2402 	ldrh.w	r2, [r0, #1026]	; 0x402
 8001778:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 800177c:	429a      	cmp	r2, r3
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size - ring->r_ptr;
 800177e:	bf38      	it	cc
 8001780:	f8b0 2400 	ldrhcc.w	r2, [r0, #1024]	; 0x400
 8001784:	1ad0      	subs	r0, r2, r3
  }
}
 8001786:	4770      	bx	lr

08001788 <dma_ring_get_r_ptr>:
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
  return ring->r_ptr;
}
 8001788:	f8b0 0404 	ldrh.w	r0, [r0, #1028]	; 0x404
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
  while(len > 0){
 8001790:	2900      	cmp	r1, #0
 8001792:	dd0c      	ble.n	80017ae <dma_ring_forward_r_ptr+0x1e>
 8001794:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
    if(ring->r_ptr+1 >= ring->buf_size){
 8001798:	f8b0 2400 	ldrh.w	r2, [r0, #1024]	; 0x400
 800179c:	3301      	adds	r3, #1
 800179e:	429a      	cmp	r2, r3
      ring->r_ptr = 0;
    }else{
      ring->r_ptr += 1;
 80017a0:	bfcc      	ite	gt
 80017a2:	b29b      	uxthgt	r3, r3
      ring->r_ptr = 0;
 80017a4:	2300      	movle	r3, #0
  while(len > 0){
 80017a6:	3901      	subs	r1, #1
 80017a8:	d1f8      	bne.n	800179c <dma_ring_forward_r_ptr+0xc>
 80017aa:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    }
    len--;
  }
}
 80017ae:	4770      	bx	lr

080017b0 <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 80017b0:	b510      	push	{r4, lr}
    dsi.huart = scanf_huart;
 80017b2:	4c08      	ldr	r4, [pc, #32]	; (80017d4 <dma_scanf_init+0x24>)
void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 80017b4:	4601      	mov	r1, r0
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 80017b6:	4620      	mov	r0, r4
    dsi.huart = scanf_huart;
 80017b8:	f8c4 140c 	str.w	r1, [r4, #1036]	; 0x40c
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 80017bc:	f7ff ffd0 	bl	8001760 <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 80017c0:	f8b4 2400 	ldrh.w	r2, [r4, #1024]	; 0x400
 80017c4:	f8d4 040c 	ldr.w	r0, [r4, #1036]	; 0x40c
 80017c8:	4621      	mov	r1, r4
}
 80017ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 80017ce:	f007 bf5d 	b.w	800968c <HAL_UART_Receive_DMA>
 80017d2:	bf00      	nop
 80017d4:	20000874 	.word	0x20000874

080017d8 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80017d8:	4810      	ldr	r0, [pc, #64]	; (800181c <MX_FDCAN1_Init+0x44>)
{
 80017da:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 80017dc:	4c10      	ldr	r4, [pc, #64]	; (8001820 <MX_FDCAN1_Init+0x48>)
 80017de:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017e0:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 80017e2:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80017e4:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80017e6:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80017e8:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80017ec:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 80017ee:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80017f0:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 80017f2:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80017f4:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 80017fa:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 80017fe:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001802:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001804:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001806:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001808:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800180a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800180c:	f004 fc94 	bl	8006138 <HAL_FDCAN_Init>
 8001810:	b900      	cbnz	r0, 8001814 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001812:	bd10      	pop	{r4, pc}
 8001814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001818:	f002 bbbc 	b.w	8003f94 <Error_Handler>
 800181c:	20000c88 	.word	0x20000c88
 8001820:	40006400 	.word	0x40006400

08001824 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001824:	4810      	ldr	r0, [pc, #64]	; (8001868 <MX_FDCAN2_Init+0x44>)
{
 8001826:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001828:	4c10      	ldr	r4, [pc, #64]	; (800186c <MX_FDCAN2_Init+0x48>)
 800182a:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800182c:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 800182e:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001830:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001832:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001834:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001838:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 800183a:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800183c:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 800183e:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001840:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001842:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001846:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 800184a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800184e:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001850:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001852:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001854:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001856:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001858:	f004 fc6e 	bl	8006138 <HAL_FDCAN_Init>
 800185c:	b900      	cbnz	r0, 8001860 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800185e:	bd10      	pop	{r4, pc}
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001864:	f002 bb96 	b.w	8003f94 <Error_Handler>
 8001868:	20000cec 	.word	0x20000cec
 800186c:	40006800 	.word	0x40006800

08001870 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	2254      	movs	r2, #84	; 0x54
 800187a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001880:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001884:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001886:	f008 ff05 	bl	800a694 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_FDCAN_MspInit+0x168>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8001892:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_FDCAN_MspInit+0x16c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d047      	beq.n	8001928 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001898:	b01e      	add	sp, #120	; 0x78
 800189a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800189c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80018a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80018a6:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80018a8:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	f005 fd8f 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d17f      	bne.n	80019b2 <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80018b2:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_FDCAN_MspInit+0x170>)
 80018b4:	6813      	ldr	r3, [r2, #0]
 80018b6:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80018b8:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80018ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80018bc:	d109      	bne.n	80018d2 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80018be:	4b49      	ldr	r3, [pc, #292]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
 80018c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018c2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80018c6:	659a      	str	r2, [r3, #88]	; 0x58
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
 80018d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018d6:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 80019c0 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	64da      	str	r2, [r3, #76]	; 0x4c
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018e6:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80019c8 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018f2:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018f8:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80018fc:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f005 f81e 	bl	8006940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2103      	movs	r1, #3
 8001908:	2015      	movs	r0, #21
 800190a:	f004 f9f9 	bl	8005d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800190e:	2015      	movs	r0, #21
 8001910:	f004 fa34 	bl	8005d7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2104      	movs	r1, #4
 8001918:	2016      	movs	r0, #22
 800191a:	f004 f9f1 	bl	8005d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800191e:	2016      	movs	r0, #22
 8001920:	f004 fa2c 	bl	8005d7c <HAL_NVIC_EnableIRQ>
}
 8001924:	b01e      	add	sp, #120	; 0x78
 8001926:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001928:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800192c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001930:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001932:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001934:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001936:	f005 fd49 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 800193a:	2800      	cmp	r0, #0
 800193c:	d13c      	bne.n	80019b8 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800193e:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <HAL_FDCAN_MspInit+0x170>)
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001944:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001946:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001948:	d109      	bne.n	800195e <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
 800194c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800194e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	4821      	ldr	r0, [pc, #132]	; (80019e8 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001964:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 80019d0 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	f042 0202 	orr.w	r2, r2, #2
 800196c:	64da      	str	r2, [r3, #76]	; 0x4c
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001970:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001974:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80019c8 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001980:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001982:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001986:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f004 ffd9 	bl	8006940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2106      	movs	r1, #6
 8001992:	2056      	movs	r0, #86	; 0x56
 8001994:	f004 f9b4 	bl	8005d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001998:	2056      	movs	r0, #86	; 0x56
 800199a:	f004 f9ef 	bl	8005d7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2107      	movs	r1, #7
 80019a2:	2057      	movs	r0, #87	; 0x57
 80019a4:	f004 f9ac 	bl	8005d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80019a8:	2057      	movs	r0, #87	; 0x57
 80019aa:	f004 f9e7 	bl	8005d7c <HAL_NVIC_EnableIRQ>
}
 80019ae:	b01e      	add	sp, #120	; 0x78
 80019b0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80019b2:	f002 faef 	bl	8003f94 <Error_Handler>
 80019b6:	e77c      	b.n	80018b2 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 80019b8:	f002 faec 	bl	8003f94 <Error_Handler>
 80019bc:	e7bf      	b.n	800193e <HAL_FDCAN_MspInit+0xce>
 80019be:	bf00      	nop
 80019c0:	00001800 	.word	0x00001800
 80019c4:	00000002 	.word	0x00000002
	...
 80019d0:	00003000 	.word	0x00003000
 80019d4:	00000002 	.word	0x00000002
 80019d8:	40006400 	.word	0x40006400
 80019dc:	40006800 	.word	0x40006800
 80019e0:	20000c84 	.word	0x20000c84
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	2400      	movs	r4, #0
{
 80019f0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80019f6:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <MX_GPIO_Init+0x14c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a00:	4f4e      	ldr	r7, [pc, #312]	; (8001b3c <MX_GPIO_Init+0x150>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a02:	4e4f      	ldr	r6, [pc, #316]	; (8001b40 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	f042 0204 	orr.w	r2, r2, #4
 8001a08:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0c:	f002 0204 	and.w	r2, r2, #4
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1e:	f002 0220 	and.w	r2, r2, #32
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a30:	f002 0201 	and.w	r2, r2, #1
 8001a34:	9203      	str	r2, [sp, #12]
 8001a36:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3a:	f042 0202 	orr.w	r2, r2, #2
 8001a3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a42:	f002 0202 	and.w	r2, r2, #2
 8001a46:	9204      	str	r2, [sp, #16]
 8001a48:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4c:	f042 0208 	orr.w	r2, r2, #8
 8001a50:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a64:	f005 f86c 	bl	8006b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a68:	4622      	mov	r2, r4
 8001a6a:	f248 0110 	movw	r1, #32784	; 0x8010
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f005 f865 	bl	8006b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a76:	4622      	mov	r2, r4
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f244 4184 	movw	r1, #17540	; 0x4484
 8001a7e:	f005 f85f 	bl	8006b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2501      	movs	r5, #1
 8001a84:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	a906      	add	r1, sp, #24
 8001a8a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f004 ff54 	bl	8006940 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001a9a:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001aa2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f004 ff49 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aae:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	4638      	mov	r0, r7
 8001ab2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f004 ff40 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001ac0:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	a906      	add	r1, sp, #24
 8001ac6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001ac8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f004 ff36 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ada:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f004 ff2b 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aec:	2204      	movs	r2, #4
 8001aee:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f004 ff22 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	a906      	add	r1, sp, #24
 8001afe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b00:	2260      	movs	r2, #96	; 0x60
 8001b02:	2300      	movs	r3, #0
 8001b04:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f004 ff19 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001b12:	4630      	mov	r0, r6
 8001b14:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f004 ff0e 	bl	8006940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b24:	4622      	mov	r2, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	2017      	movs	r0, #23
 8001b2a:	f004 f8e9 	bl	8005d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b2e:	2017      	movs	r0, #23
 8001b30:	f004 f924 	bl	8005d7c <HAL_NVIC_EnableIRQ>

}
 8001b34:	b00d      	add	sp, #52	; 0x34
 8001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000c00 	.word	0x48000c00

08001b48 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001b48:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001b4a:	4870      	ldr	r0, [pc, #448]	; (8001d0c <ICM20602_init+0x1c4>)
{
 8001b4c:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2120      	movs	r1, #32
 8001b52:	f004 fff5 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2110      	movs	r1, #16
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f004 ffef 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b62:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001b66:	216b      	movs	r1, #107	; 0x6b
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b68:	2301      	movs	r3, #1
 8001b6a:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001b6c:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b70:	9400      	str	r4, [sp, #0]
 8001b72:	a902      	add	r1, sp, #8
 8001b74:	4866      	ldr	r0, [pc, #408]	; (8001d10 <ICM20602_init+0x1c8>)
 8001b76:	f005 ff43 	bl	8007a00 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001b7a:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9400      	str	r4, [sp, #0]
 8001b80:	aa03      	add	r2, sp, #12
 8001b82:	a902      	add	r1, sp, #8
 8001b84:	4862      	ldr	r0, [pc, #392]	; (8001d10 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001b86:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b8a:	f005 ff39 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2110      	movs	r1, #16
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f004 ffd3 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba2:	f004 ffcd 	bl	8006b40 <HAL_GPIO_WritePin>
	send_data[0]=reg & 0x7F;
 8001ba6:	2319      	movs	r3, #25
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ba8:	9400      	str	r4, [sp, #0]
	send_data[0]=reg & 0x7F;
 8001baa:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bae:	aa03      	add	r2, sp, #12
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	a902      	add	r1, sp, #8
 8001bb4:	4856      	ldr	r0, [pc, #344]	; (8001d10 <ICM20602_init+0x1c8>)
 8001bb6:	f005 ff23 	bl	8007a00 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001bba:	2307      	movs	r3, #7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bbc:	9400      	str	r4, [sp, #0]
	send_data[0]=data;
 8001bbe:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bc2:	aa03      	add	r2, sp, #12
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	a902      	add	r1, sp, #8
 8001bc8:	4851      	ldr	r0, [pc, #324]	; (8001d10 <ICM20602_init+0x1c8>)
 8001bca:	f005 ff19 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f004 ffb3 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001bda:	462a      	mov	r2, r5
 8001bdc:	2110      	movs	r1, #16
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f004 ffad 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001be6:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001be8:	211a      	movs	r1, #26
	send_data[0]=data;
 8001bea:	461d      	mov	r5, r3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bec:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001bee:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bf2:	9400      	str	r4, [sp, #0]
 8001bf4:	a902      	add	r1, sp, #8
 8001bf6:	4846      	ldr	r0, [pc, #280]	; (8001d10 <ICM20602_init+0x1c8>)
 8001bf8:	f005 ff02 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	9400      	str	r4, [sp, #0]
 8001c00:	a902      	add	r1, sp, #8
 8001c02:	aa03      	add	r2, sp, #12
 8001c04:	4842      	ldr	r0, [pc, #264]	; (8001d10 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001c06:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c0a:	f005 fef9 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c0e:	462a      	mov	r2, r5
 8001c10:	2110      	movs	r1, #16
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c16:	f004 ff93 	bl	8006b40 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

	ICM20602_setAccRange(Ascale);
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <ICM20602_init+0x1cc>)
 8001c1c:	681c      	ldr	r4, [r3, #0]

// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{

    switch(Ascale)
 8001c1e:	2c03      	cmp	r4, #3
 8001c20:	d807      	bhi.n	8001c32 <ICM20602_init+0xea>
 8001c22:	e8df f004 	tbb	[pc, r4]
 8001c26:	686d      	.short	0x686d
 8001c28:	6302      	.short	0x6302
            break;
        case AFS_4G:
            aRes = 4.0/32768.0;
            break;
        case AFS_8G:
            aRes = 8.0/32768.0;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <ICM20602_init+0x1d0>)
 8001c2c:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001c30:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2110      	movs	r1, #16
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f004 ff81 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c3e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001c42:	221c      	movs	r2, #28
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c44:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001c46:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c4a:	a902      	add	r1, sp, #8
 8001c4c:	aa03      	add	r2, sp, #12
 8001c4e:	4830      	ldr	r0, [pc, #192]	; (8001d10 <ICM20602_init+0x1c8>)
 8001c50:	9500      	str	r5, [sp, #0]
 8001c52:	f005 fed5 	bl	8007a00 <HAL_SPI_TransmitReceive>
        case AFS_16G:
            aRes = 16.0/32768.0;
            break;         
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001c56:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c58:	2301      	movs	r3, #1
 8001c5a:	aa03      	add	r2, sp, #12
 8001c5c:	a902      	add	r1, sp, #8
 8001c5e:	482c      	ldr	r0, [pc, #176]	; (8001d10 <ICM20602_init+0x1c8>)
 8001c60:	9500      	str	r5, [sp, #0]
	send_data[0]=data;
 8001c62:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c66:	f005 fecb 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f004 ff65 	bl	8006b40 <HAL_GPIO_WritePin>
	ICM20602_setGyroRange(Gscale);
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <ICM20602_init+0x1d4>)
 8001c78:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
    switch (Gscale) {
 8001c7a:	2c03      	cmp	r4, #3
 8001c7c:	d806      	bhi.n	8001c8c <ICM20602_init+0x144>
 8001c7e:	e8df f004 	tbb	[pc, r4]
 8001c82:	2d31      	.short	0x2d31
 8001c84:	2902      	.short	0x2902
            break;
        case GFS_500DPS:
            gRes = 500.0/32768.0;
            break;
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <ICM20602_init+0x1d8>)
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <ICM20602_init+0x1dc>)
 8001c8a:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2110      	movs	r1, #16
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c94:	f004 ff54 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c98:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001c9c:	221b      	movs	r2, #27
 8001c9e:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ca2:	a902      	add	r1, sp, #8
 8001ca4:	aa03      	add	r2, sp, #12
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	9500      	str	r5, [sp, #0]
 8001caa:	4819      	ldr	r0, [pc, #100]	; (8001d10 <ICM20602_init+0x1c8>)
 8001cac:	f005 fea8 	bl	8007a00 <HAL_SPI_TransmitReceive>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
            break;
    }

    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001cb0:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cb2:	aa03      	add	r2, sp, #12
 8001cb4:	a902      	add	r1, sp, #8
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9500      	str	r5, [sp, #0]
 8001cba:	4815      	ldr	r0, [pc, #84]	; (8001d10 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001cbc:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001cc0:	f005 fe9e 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f004 ff38 	bl	8006b40 <HAL_GPIO_WritePin>
}
 8001cd0:	b005      	add	sp, #20
 8001cd2:	bd30      	pop	{r4, r5, pc}
            gRes = 2000.0/32768.0;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <ICM20602_init+0x1d8>)
 8001cd6:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <ICM20602_init+0x1e0>)
 8001cd8:	601a      	str	r2, [r3, #0]
            break;
 8001cda:	e7d7      	b.n	8001c8c <ICM20602_init+0x144>
            gRes = 500.0/32768.0;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <ICM20602_init+0x1d8>)
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <ICM20602_init+0x1e4>)
 8001ce0:	601a      	str	r2, [r3, #0]
            break;
 8001ce2:	e7d3      	b.n	8001c8c <ICM20602_init+0x144>
            gRes = 250.0/32768.0;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <ICM20602_init+0x1d8>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <ICM20602_init+0x1e8>)
 8001ce8:	601a      	str	r2, [r3, #0]
            break;
 8001cea:	e7cf      	b.n	8001c8c <ICM20602_init+0x144>
            aRes = 16.0/32768.0;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <ICM20602_init+0x1d0>)
 8001cee:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001cf2:	601a      	str	r2, [r3, #0]
            break;         
 8001cf4:	e79d      	b.n	8001c32 <ICM20602_init+0xea>
            aRes = 4.0/32768.0;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <ICM20602_init+0x1d0>)
 8001cf8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001cfc:	601a      	str	r2, [r3, #0]
            break;
 8001cfe:	e798      	b.n	8001c32 <ICM20602_init+0xea>
            aRes = 2.0/32768.0;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <ICM20602_init+0x1d0>)
 8001d02:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001d06:	601a      	str	r2, [r3, #0]
            break;
 8001d08:	e793      	b.n	8001c32 <ICM20602_init+0xea>
 8001d0a:	bf00      	nop
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	20001588 	.word	0x20001588
 8001d14:	20000d50 	.word	0x20000d50
 8001d18:	20000d54 	.word	0x20000d54
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000da0 	.word	0x20000da0
 8001d24:	3cfa0000 	.word	0x3cfa0000
 8001d28:	3d7a0000 	.word	0x3d7a0000
 8001d2c:	3c7a0000 	.word	0x3c7a0000
 8001d30:	3bfa0000 	.word	0x3bfa0000

08001d34 <ICM20602_clearAngle>:
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
    pitch_angle = 0.0f;
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <ICM20602_clearAngle+0x10>)
    roll_angle  = 0.0f;
 8001d36:	4904      	ldr	r1, [pc, #16]	; (8001d48 <ICM20602_clearAngle+0x14>)
    yaw_angle   = 0.0f;
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <ICM20602_clearAngle+0x18>)
    pitch_angle = 0.0f;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	6003      	str	r3, [r0, #0]
    roll_angle  = 0.0f;
 8001d3e:	600b      	str	r3, [r1, #0]
    yaw_angle   = 0.0f;
 8001d40:	6013      	str	r3, [r2, #0]
}
 8001d42:	4770      	bx	lr
 8001d44:	20001484 	.word	0x20001484
 8001d48:	200014d0 	.word	0x200014d0
 8001d4c:	20001580 	.word	0x20001580

08001d50 <ICM20602_medianFilter>:
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d50:	4a79      	ldr	r2, [pc, #484]	; (8001f38 <ICM20602_medianFilter+0x1e8>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
    	gyro_mdat[i][0] = gyro[i];
 8001d52:	487a      	ldr	r0, [pc, #488]	; (8001f3c <ICM20602_medianFilter+0x1ec>)

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d54:	4b7a      	ldr	r3, [pc, #488]	; (8001f40 <ICM20602_medianFilter+0x1f0>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d56:	ed92 6a01 	vldr	s12, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001d5a:	edd0 5a00 	vldr	s11, [r0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
    	acc_mdat[i][0]  = acc[i];
 8001d5e:	4979      	ldr	r1, [pc, #484]	; (8001f44 <ICM20602_medianFilter+0x1f4>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001d60:	ed92 7a00 	vldr	s14, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d64:	ed93 5a01 	vldr	s10, [r3, #4]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001d68:	edd3 7a00 	vldr	s15, [r3]
    	acc_mdat[i][0]  = acc[i];
 8001d6c:	edd1 6a00 	vldr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d70:	ed82 6a02 	vstr	s12, [r2, #8]

    	a = 0;
    	b = 2;

    	for (j = 2; j >= 0; j--) {
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d74:	eef4 5ac6 	vcmpe.f32	s11, s12
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001d7c:	ed82 7a01 	vstr	s14, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001d80:	edc2 5a00 	vstr	s11, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d84:	ed83 5a02 	vstr	s10, [r3, #8]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001d88:	edc3 7a01 	vstr	s15, [r3, #4]
    	acc_mdat[i][0]  = acc[i];
 8001d8c:	edc3 6a00 	vstr	s13, [r3]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d90:	dc05      	bgt.n	8001d9e <ICM20602_medianFilter+0x4e>
 8001d92:	eef0 4a46 	vmov.f32	s9, s12
    	gyro_mdat[i][0] = gyro[i];
 8001d96:	eeb0 6a65 	vmov.f32	s12, s11
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d9a:	eef0 5a64 	vmov.f32	s11, s9
    			tmp         = gyro_tmp[a];
    			gyro_tmp[a] = gyro_tmp[b];
    			gyro_tmp[b] = tmp;
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001d9e:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d405      	bmi.n	8001db4 <ICM20602_medianFilter+0x64>
 8001da8:	eef0 4a45 	vmov.f32	s9, s10
    	acc_mdat[i][0]  = acc[i];
 8001dac:	eeb0 5a66 	vmov.f32	s10, s13
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001db0:	eef0 6a64 	vmov.f32	s13, s9
				acc_tmp[b]  = tmp;
			}
    		a = j-1;
    		b = j;
    	}
    	gyro[i] = gyro_tmp[1];
 8001db4:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	bf88      	it	hi
 8001dbe:	eeb0 7a65 	vmovhi.f32	s14, s11
 8001dc2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001dca:	eef4 7ae6 	vcmpe.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 8001dce:	bfa8      	it	ge
 8001dd0:	eeb0 6a47 	vmovge.f32	s12, s14
    	acc[i]  = acc_tmp[1];
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	bf98      	it	ls
 8001dda:	eef0 6a67 	vmovls.f32	s13, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001dde:	edd2 5a04 	vldr	s11, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001de2:	ed90 7a01 	vldr	s14, [r0, #4]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001de6:	edd2 3a03 	vldr	s7, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001dea:	ed93 4a04 	vldr	s8, [r3, #16]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001dee:	edd3 4a03 	vldr	s9, [r3, #12]
    	acc_mdat[i][0]  = acc[i];
 8001df2:	edd1 7a01 	vldr	s15, [r1, #4]
    	gyro[i] = gyro_tmp[1];
 8001df6:	ed80 6a00 	vstr	s12, [r0]
    	acc[i]  = acc_tmp[1];
 8001dfa:	eef4 6ac5 	vcmpe.f32	s13, s10
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e02:	eef4 5ac7 	vcmpe.f32	s11, s14
    	acc[i]  = acc_tmp[1];
 8001e06:	bfb8      	it	lt
 8001e08:	eef0 6a45 	vmovlt.f32	s13, s10
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001e10:	edc1 6a00 	vstr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e14:	edc2 5a05 	vstr	s11, [r2, #20]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e18:	edc2 3a04 	vstr	s7, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001e1c:	ed82 7a03 	vstr	s14, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e20:	ed83 4a05 	vstr	s8, [r3, #20]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e24:	edc3 4a04 	vstr	s9, [r3, #16]
    	acc_mdat[i][0]  = acc[i];
 8001e28:	edc3 7a03 	vstr	s15, [r3, #12]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e2c:	d405      	bmi.n	8001e3a <ICM20602_medianFilter+0xea>
 8001e2e:	eef0 6a65 	vmov.f32	s13, s11
    	gyro_mdat[i][0] = gyro[i];
 8001e32:	eef0 5a47 	vmov.f32	s11, s14
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e36:	eeb0 7a66 	vmov.f32	s14, s13
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e3a:	eef4 7ac4 	vcmpe.f32	s15, s8
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	dc05      	bgt.n	8001e50 <ICM20602_medianFilter+0x100>
 8001e44:	eef0 6a44 	vmov.f32	s13, s8
    	acc_mdat[i][0]  = acc[i];
 8001e48:	eeb0 4a67 	vmov.f32	s8, s15
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e4c:	eef0 7a66 	vmov.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 8001e50:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	bf88      	it	hi
 8001e5a:	eeb0 7a63 	vmovhi.f32	s14, s7
 8001e5e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001e66:	eef4 7ae4 	vcmpe.f32	s15, s9
    	gyro[i] = gyro_tmp[1];
 8001e6a:	bfb4      	ite	lt
 8001e6c:	eef0 6a65 	vmovlt.f32	s13, s11
 8001e70:	eef0 6a47 	vmovge.f32	s13, s14
    	acc[i]  = acc_tmp[1];
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	bf8c      	ite	hi
 8001e7a:	eeb0 7a64 	vmovhi.f32	s14, s9
 8001e7e:	eeb0 7a67 	vmovls.f32	s14, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e82:	edd2 4a07 	vldr	s9, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001e86:	edd0 7a02 	vldr	s15, [r0, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e8a:	edd2 3a06 	vldr	s7, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e8e:	edd3 5a07 	vldr	s11, [r3, #28]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e92:	ed93 6a06 	vldr	s12, [r3, #24]
    	acc_mdat[i][0]  = acc[i];
 8001e96:	ed91 5a02 	vldr	s10, [r1, #8]
    	gyro[i] = gyro_tmp[1];
 8001e9a:	edc0 6a01 	vstr	s13, [r0, #4]
    	acc[i]  = acc_tmp[1];
 8001e9e:	eeb4 7ac4 	vcmpe.f32	s14, s8
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001ea6:	eef4 7ae4 	vcmpe.f32	s15, s9
    	acc[i]  = acc_tmp[1];
 8001eaa:	bfb8      	it	lt
 8001eac:	eeb0 7a44 	vmovlt.f32	s14, s8
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001eb4:	ed81 7a01 	vstr	s14, [r1, #4]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001eb8:	edc2 4a08 	vstr	s9, [r2, #32]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001ebc:	edc2 3a07 	vstr	s7, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001ec0:	edc2 7a06 	vstr	s15, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ec4:	edc3 5a08 	vstr	s11, [r3, #32]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001ec8:	ed83 6a07 	vstr	s12, [r3, #28]
    	acc_mdat[i][0]  = acc[i];
 8001ecc:	ed83 5a06 	vstr	s10, [r3, #24]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001ed0:	dc05      	bgt.n	8001ede <ICM20602_medianFilter+0x18e>
 8001ed2:	eeb0 7a64 	vmov.f32	s14, s9
    	gyro_mdat[i][0] = gyro[i];
 8001ed6:	eef0 4a67 	vmov.f32	s9, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001eda:	eef0 7a47 	vmov.f32	s15, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001ede:	eef4 5ac5 	vcmpe.f32	s11, s10
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d405      	bmi.n	8001ef4 <ICM20602_medianFilter+0x1a4>
 8001ee8:	eeb0 7a65 	vmov.f32	s14, s11
    	acc_mdat[i][0]  = acc[i];
 8001eec:	eef0 5a45 	vmov.f32	s11, s10
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ef0:	eeb0 5a47 	vmov.f32	s10, s14
    	gyro[i] = gyro_tmp[1];
 8001ef4:	eef4 7ae3 	vcmpe.f32	s15, s7
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	bf88      	it	hi
 8001efe:	eef0 7a63 	vmovhi.f32	s15, s7
 8001f02:	eef4 7ae4 	vcmpe.f32	s15, s9
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001f0a:	eeb4 6ac5 	vcmpe.f32	s12, s10
    	gyro[i] = gyro_tmp[1];
 8001f0e:	bfb8      	it	lt
 8001f10:	eef0 7a64 	vmovlt.f32	s15, s9
    	acc[i]  = acc_tmp[1];
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	bf88      	it	hi
 8001f1a:	eeb0 6a45 	vmovhi.f32	s12, s10
 8001f1e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	bfb8      	it	lt
 8001f28:	eeb0 6a65 	vmovlt.f32	s12, s11
    	gyro[i] = gyro_tmp[1];
 8001f2c:	edc0 7a02 	vstr	s15, [r0, #8]
    	acc[i]  = acc_tmp[1];
 8001f30:	ed81 6a02 	vstr	s12, [r1, #8]
    }
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000dbc 	.word	0x20000dbc
 8001f3c:	20000da4 	.word	0x20000da4
 8001f40:	20000d70 	.word	0x20000d70
 8001f44:	20000d58 	.word	0x20000d58

08001f48 <ICM20602_read_IMU_data>:
{
 8001f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f4c:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f50:	2200      	movs	r2, #0
{
 8001f52:	b084      	sub	sp, #16
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f54:	2110      	movs	r1, #16
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8001f5a:	eeb0 8a40 	vmov.f32	s16, s0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f5e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f62:	f004 fded 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001f66:	21bc      	movs	r1, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f68:	2301      	movs	r3, #1
 8001f6a:	aa03      	add	r2, sp, #12
    send_data[0]= reg | 0x80;
 8001f6c:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f70:	9400      	str	r4, [sp, #0]
 8001f72:	a902      	add	r1, sp, #8
 8001f74:	48d2      	ldr	r0, [pc, #840]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001f76:	f8df 8354 	ldr.w	r8, [pc, #852]	; 80022cc <ICM20602_read_IMU_data+0x384>
 8001f7a:	eddf 8ad2 	vldr	s17, [pc, #840]	; 80022c4 <ICM20602_read_IMU_data+0x37c>
    send_data[0]=0x00;
 8001f7e:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f80:	f005 fd3e 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f84:	2301      	movs	r3, #1
 8001f86:	9400      	str	r4, [sp, #0]
 8001f88:	aa03      	add	r2, sp, #12
 8001f8a:	a902      	add	r1, sp, #8
 8001f8c:	48cc      	ldr	r0, [pc, #816]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8001f8e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f92:	f005 fd35 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f96:	2110      	movs	r1, #16
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8001f9e:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fa2:	f004 fdcd 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001fa6:	462a      	mov	r2, r5
 8001fa8:	2110      	movs	r1, #16
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f004 fdc7 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001fb2:	27bb      	movs	r7, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fb4:	9400      	str	r4, [sp, #0]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	aa03      	add	r2, sp, #12
 8001fba:	a902      	add	r1, sp, #8
 8001fbc:	48c0      	ldr	r0, [pc, #768]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8001fbe:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc2:	f005 fd1d 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	9400      	str	r4, [sp, #0]
 8001fca:	aa03      	add	r2, sp, #12
 8001fcc:	a902      	add	r1, sp, #8
 8001fce:	48bc      	ldr	r0, [pc, #752]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8001fd0:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fd4:	f005 fd14 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001fd8:	f89d 700c 	ldrb.w	r7, [sp, #12]
    return((HiByte<<8) | LoByte);
 8001fdc:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001fe8:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fea:	f004 fda9 	bl	8006b40 <HAL_GPIO_WritePin>
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001fee:	ed98 7a00 	vldr	s14, [r8]
 8001ff2:	4fb5      	ldr	r7, [pc, #724]	; (80022c8 <ICM20602_read_IMU_data+0x380>)
 8001ff4:	ee07 6a90 	vmov	s15, r6
 8001ff8:	ee27 7a28 	vmul.f32	s14, s14, s17
 8001ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002000:	462a      	mov	r2, r5
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002002:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002006:	2110      	movs	r1, #16
    acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002008:	edc7 7a00 	vstr	s15, [r7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800200c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002010:	f004 fd96 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002014:	26be      	movs	r6, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002016:	9400      	str	r4, [sp, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	aa03      	add	r2, sp, #12
 800201c:	a902      	add	r1, sp, #8
 800201e:	48a8      	ldr	r0, [pc, #672]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002020:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002024:	f005 fcec 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002028:	2301      	movs	r3, #1
 800202a:	9400      	str	r4, [sp, #0]
 800202c:	aa03      	add	r2, sp, #12
 800202e:	a902      	add	r1, sp, #8
 8002030:	48a3      	ldr	r0, [pc, #652]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002032:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002036:	f005 fce3 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800203a:	2110      	movs	r1, #16
 800203c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002040:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002042:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002046:	f004 fd7b 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800204a:	462a      	mov	r2, r5
 800204c:	2110      	movs	r1, #16
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f004 fd75 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002056:	f04f 0cbd 	mov.w	ip, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800205a:	9400      	str	r4, [sp, #0]
 800205c:	2301      	movs	r3, #1
 800205e:	aa03      	add	r2, sp, #12
 8002060:	a902      	add	r1, sp, #8
 8002062:	4897      	ldr	r0, [pc, #604]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002064:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002068:	f005 fcca 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800206c:	2301      	movs	r3, #1
 800206e:	9400      	str	r4, [sp, #0]
 8002070:	aa03      	add	r2, sp, #12
 8002072:	a902      	add	r1, sp, #8
 8002074:	4892      	ldr	r0, [pc, #584]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002076:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800207a:	f005 fcc1 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800207e:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002082:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002086:	2201      	movs	r2, #1
 8002088:	2110      	movs	r1, #16
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800208e:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002090:	f004 fd56 	bl	8006b40 <HAL_GPIO_WritePin>
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002094:	ed98 7a00 	vldr	s14, [r8]
 8002098:	ee07 6a90 	vmov	s15, r6
 800209c:	ee27 7a28 	vmul.f32	s14, s14, s17
 80020a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020a4:	462a      	mov	r2, r5
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80020a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020aa:	2110      	movs	r1, #16
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80020ac:	edc7 7a01 	vstr	s15, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f004 fd44 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020b8:	26c0      	movs	r6, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ba:	9400      	str	r4, [sp, #0]
 80020bc:	2301      	movs	r3, #1
 80020be:	aa03      	add	r2, sp, #12
 80020c0:	a902      	add	r1, sp, #8
 80020c2:	487f      	ldr	r0, [pc, #508]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 80020c4:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020c8:	f005 fc9a 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020cc:	2301      	movs	r3, #1
 80020ce:	9400      	str	r4, [sp, #0]
 80020d0:	aa03      	add	r2, sp, #12
 80020d2:	a902      	add	r1, sp, #8
 80020d4:	487a      	ldr	r0, [pc, #488]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 80020d6:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020da:	f005 fc91 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020de:	2110      	movs	r1, #16
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80020e6:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020ea:	f004 fd29 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020ee:	462a      	mov	r2, r5
 80020f0:	2110      	movs	r1, #16
 80020f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f6:	f004 fd23 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020fa:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020fe:	9400      	str	r4, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	aa03      	add	r2, sp, #12
 8002104:	a902      	add	r1, sp, #8
 8002106:	486e      	ldr	r0, [pc, #440]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002108:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800210c:	f005 fc78 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002110:	2301      	movs	r3, #1
 8002112:	9400      	str	r4, [sp, #0]
 8002114:	aa03      	add	r2, sp, #12
 8002116:	a902      	add	r1, sp, #8
 8002118:	4869      	ldr	r0, [pc, #420]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 800211a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800211e:	f005 fc6f 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002122:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002126:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800212a:	2201      	movs	r2, #1
 800212c:	2110      	movs	r1, #16
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002132:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002134:	f004 fd04 	bl	8006b40 <HAL_GPIO_WritePin>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002138:	ed98 7a00 	vldr	s14, [r8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800213c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80022d0 <ICM20602_read_IMU_data+0x388>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002140:	ee07 6a90 	vmov	s15, r6
 8002144:	ee27 7a28 	vmul.f32	s14, s14, s17
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800214c:	462a      	mov	r2, r5
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 800214e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002152:	2110      	movs	r1, #16
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002154:	edc7 7a02 	vstr	s15, [r7, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f004 fcf0 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002160:	26c4      	movs	r6, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002162:	9400      	str	r4, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	aa03      	add	r2, sp, #12
 8002168:	a902      	add	r1, sp, #8
 800216a:	4855      	ldr	r0, [pc, #340]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 800216c:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002170:	f005 fc46 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002174:	2301      	movs	r3, #1
 8002176:	9400      	str	r4, [sp, #0]
 8002178:	aa03      	add	r2, sp, #12
 800217a:	a902      	add	r1, sp, #8
 800217c:	4850      	ldr	r0, [pc, #320]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 800217e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002182:	f005 fc3d 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002186:	2110      	movs	r1, #16
 8002188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800218e:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002192:	f004 fcd5 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002196:	462a      	mov	r2, r5
 8002198:	2110      	movs	r1, #16
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219e:	f004 fccf 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021a2:	f04f 0cc3 	mov.w	ip, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021a6:	9400      	str	r4, [sp, #0]
 80021a8:	2301      	movs	r3, #1
 80021aa:	aa03      	add	r2, sp, #12
 80021ac:	a902      	add	r1, sp, #8
 80021ae:	4844      	ldr	r0, [pc, #272]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 80021b0:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b4:	f005 fc24 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b8:	2301      	movs	r3, #1
 80021ba:	9400      	str	r4, [sp, #0]
 80021bc:	aa03      	add	r2, sp, #12
 80021be:	a902      	add	r1, sp, #8
 80021c0:	483f      	ldr	r0, [pc, #252]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 80021c2:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021c6:	f005 fc1b 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80021ca:	f89d 800c 	ldrb.w	r8, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80021ce:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2110      	movs	r1, #16
 80021d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021da:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021dc:	f004 fcb0 	bl	8006b40 <HAL_GPIO_WritePin>
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021e0:	ee07 6a90 	vmov	s15, r6
 80021e4:	ed99 7a00 	vldr	s14, [r9]
 80021e8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80022d4 <ICM20602_read_IMU_data+0x38c>
 80021ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021f0:	462a      	mov	r2, r5
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021f6:	2110      	movs	r1, #16
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80021f8:	edc8 7a00 	vstr	s15, [r8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002200:	f004 fc9e 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002204:	26c6      	movs	r6, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002206:	9400      	str	r4, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	aa03      	add	r2, sp, #12
 800220c:	a902      	add	r1, sp, #8
 800220e:	482c      	ldr	r0, [pc, #176]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002210:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002214:	f005 fbf4 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002218:	2301      	movs	r3, #1
 800221a:	9400      	str	r4, [sp, #0]
 800221c:	aa03      	add	r2, sp, #12
 800221e:	a902      	add	r1, sp, #8
 8002220:	4827      	ldr	r0, [pc, #156]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002222:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002226:	f005 fbeb 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800222a:	2110      	movs	r1, #16
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002232:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002236:	f004 fc83 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800223a:	462a      	mov	r2, r5
 800223c:	2110      	movs	r1, #16
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f004 fc7d 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002246:	f04f 0cc5 	mov.w	ip, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800224a:	9400      	str	r4, [sp, #0]
 800224c:	2301      	movs	r3, #1
 800224e:	aa03      	add	r2, sp, #12
 8002250:	a902      	add	r1, sp, #8
 8002252:	481b      	ldr	r0, [pc, #108]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 8002254:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002258:	f005 fbd2 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800225c:	2301      	movs	r3, #1
 800225e:	9400      	str	r4, [sp, #0]
 8002260:	aa03      	add	r2, sp, #12
 8002262:	a902      	add	r1, sp, #8
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]=0x00;
 8002266:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800226a:	f005 fbc9 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800226e:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002272:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002276:	2201      	movs	r2, #1
 8002278:	2110      	movs	r1, #16
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800227e:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002280:	f004 fc5e 	bl	8006b40 <HAL_GPIO_WritePin>
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002284:	ee07 6a90 	vmov	s15, r6
 8002288:	ed99 7a00 	vldr	s14, [r9]
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002290:	462a      	mov	r2, r5
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002292:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002296:	2110      	movs	r1, #16
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002298:	edc8 7a01 	vstr	s15, [r8, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800229c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a0:	f004 fc4e 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80022a4:	26c8      	movs	r6, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022a6:	9400      	str	r4, [sp, #0]
 80022a8:	2301      	movs	r3, #1
 80022aa:	aa03      	add	r2, sp, #12
 80022ac:	a902      	add	r1, sp, #8
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <ICM20602_read_IMU_data+0x378>)
    send_data[0]= reg | 0x80;
 80022b0:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b4:	f005 fba4 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b8:	2301      	movs	r3, #1
 80022ba:	9400      	str	r4, [sp, #0]
 80022bc:	e00c      	b.n	80022d8 <ICM20602_read_IMU_data+0x390>
 80022be:	bf00      	nop
 80022c0:	20001588 	.word	0x20001588
 80022c4:	411ce80a 	.word	0x411ce80a
 80022c8:	20000d58 	.word	0x20000d58
 80022cc:	20000d54 	.word	0x20000d54
 80022d0:	20000da0 	.word	0x20000da0
 80022d4:	20000da4 	.word	0x20000da4
 80022d8:	aa03      	add	r2, sp, #12
 80022da:	a902      	add	r1, sp, #8
 80022dc:	48b8      	ldr	r0, [pc, #736]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 80022de:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022e2:	f005 fb8d 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022e6:	2110      	movs	r1, #16
 80022e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ec:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80022ee:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022f2:	f004 fc25 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022f6:	462a      	mov	r2, r5
 80022f8:	2110      	movs	r1, #16
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fe:	f004 fc1f 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002302:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002306:	9400      	str	r4, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	aa03      	add	r2, sp, #12
 800230c:	a902      	add	r1, sp, #8
 800230e:	48ac      	ldr	r0, [pc, #688]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]= reg | 0x80;
 8002310:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002314:	f005 fb74 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002318:	2301      	movs	r3, #1
 800231a:	9400      	str	r4, [sp, #0]
 800231c:	aa03      	add	r2, sp, #12
 800231e:	a902      	add	r1, sp, #8
 8002320:	48a7      	ldr	r0, [pc, #668]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 8002322:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002326:	f005 fb6b 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800232a:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800232e:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002332:	2110      	movs	r1, #16
 8002334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002338:	2201      	movs	r2, #1
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800233a:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800233c:	f004 fc00 	bl	8006b40 <HAL_GPIO_WritePin>
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002340:	ee07 6a90 	vmov	s15, r6
 8002344:	ed99 7a00 	vldr	s14, [r9]
 8002348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    send_data[0]= reg | 0x80;
 800234c:	26c2      	movs	r6, #194	; 0xc2
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	edc8 7a02 	vstr	s15, [r8, #8]
    ICM20602_medianFilter();
 8002356:	f7ff fcfb 	bl	8001d50 <ICM20602_medianFilter>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800235a:	462a      	mov	r2, r5
 800235c:	2110      	movs	r1, #16
 800235e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002362:	f004 fbed 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002366:	9400      	str	r4, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	aa03      	add	r2, sp, #12
 800236c:	a902      	add	r1, sp, #8
 800236e:	4894      	ldr	r0, [pc, #592]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]= reg | 0x80;
 8002370:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002374:	f005 fb44 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002378:	2301      	movs	r3, #1
 800237a:	9400      	str	r4, [sp, #0]
 800237c:	aa03      	add	r2, sp, #12
 800237e:	a902      	add	r1, sp, #8
 8002380:	488f      	ldr	r0, [pc, #572]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 8002382:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002386:	f005 fb3b 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800238a:	2110      	movs	r1, #16
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002392:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002396:	f004 fbd3 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800239a:	462a      	mov	r2, r5
 800239c:	2110      	movs	r1, #16
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f004 fbcd 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80023a6:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023aa:	9400      	str	r4, [sp, #0]
 80023ac:	2301      	movs	r3, #1
 80023ae:	aa03      	add	r2, sp, #12
 80023b0:	a902      	add	r1, sp, #8
 80023b2:	4883      	ldr	r0, [pc, #524]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]= reg | 0x80;
 80023b4:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023b8:	f005 fb22 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023bc:	2301      	movs	r3, #1
 80023be:	9400      	str	r4, [sp, #0]
 80023c0:	aa03      	add	r2, sp, #12
 80023c2:	a902      	add	r1, sp, #8
 80023c4:	487e      	ldr	r0, [pc, #504]	; (80025c0 <ICM20602_read_IMU_data+0x678>)
    send_data[0]=0x00;
 80023c6:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80023ca:	f005 fb19 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2110      	movs	r1, #16
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80023d6:	f89d 500c 	ldrb.w	r5, [sp, #12]
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 80023da:	4c7a      	ldr	r4, [pc, #488]	; (80025c4 <ICM20602_read_IMU_data+0x67c>)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023dc:	f004 fbb0 	bl	8006b40 <HAL_GPIO_WritePin>
void ICM20602_IMU_compensate(void)
{
    int k;
    for(k=0;k<3;k++){
        acc_comp[k] = acc[k] - acc_off[k];
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023e0:	4a79      	ldr	r2, [pc, #484]	; (80025c8 <ICM20602_read_IMU_data+0x680>)
 80023e2:	edd8 3a00 	vldr	s7, [r8]
 80023e6:	edd2 7a00 	vldr	s15, [r2]
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 80023ea:	4b78      	ldr	r3, [pc, #480]	; (80025cc <ICM20602_read_IMU_data+0x684>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023ec:	edd8 4a02 	vldr	s9, [r8, #8]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80023f0:	edd3 5a00 	vldr	s11, [r3]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023f4:	ed9f 3a76 	vldr	s6, [pc, #472]	; 80025d0 <ICM20602_read_IMU_data+0x688>
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023f8:	ed92 7a01 	vldr	s14, [r2, #4]
 80023fc:	ed98 4a01 	vldr	s8, [r8, #4]
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 8002400:	edd4 6a00 	vldr	s13, [r4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002404:	ed93 6a01 	vldr	s12, [r3, #4]
        acc_comp[k] = acc[k] - acc_off[k];
 8002408:	ed97 2a00 	vldr	s4, [r7]
 800240c:	edd7 2a01 	vldr	s5, [r7, #4]
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 8002410:	4870      	ldr	r0, [pc, #448]	; (80025d4 <ICM20602_read_IMU_data+0x68c>)
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 8002412:	4971      	ldr	r1, [pc, #452]	; (80025d8 <ICM20602_read_IMU_data+0x690>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002414:	ee73 3ae7 	vsub.f32	s7, s7, s15
    return ((HiByte<<8) | LoByte);
 8002418:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800241c:	edd2 7a02 	vldr	s15, [r2, #8]
        acc_comp[k] = acc[k] - acc_off[k];
 8002420:	4a6e      	ldr	r2, [pc, #440]	; (80025dc <ICM20602_read_IMU_data+0x694>)
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002422:	b236      	sxth	r6, r6
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002424:	ee74 4ae7 	vsub.f32	s9, s9, s15
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002428:	ee07 6a90 	vmov	s15, r6
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 800242c:	ee73 5aa5 	vadd.f32	s11, s7, s11
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002434:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 8002438:	eee7 1a83 	vfma.f32	s3, s15, s6
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 800243c:	ee65 5a88 	vmul.f32	s11, s11, s16
 8002440:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
        acc_comp[k] = acc[k] - acc_off[k];
 8002444:	ed92 0a00 	vldr	s0, [r2]
 8002448:	edd2 0a01 	vldr	s1, [r2, #4]
 800244c:	ed92 1a02 	vldr	s2, [r2, #8]
 8002450:	ed97 3a02 	vldr	s6, [r7, #8]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002454:	4a62      	ldr	r2, [pc, #392]	; (80025e0 <ICM20602_read_IMU_data+0x698>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002456:	ee34 4a47 	vsub.f32	s8, s8, s14
    pitch_angle = pitch_angle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt_sec) * 1;  //とりあえず変えておく
 800245a:	eee5 6a85 	vfma.f32	s13, s11, s10
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 800245e:	ed93 7a02 	vldr	s14, [r3, #8]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002462:	edc2 1a00 	vstr	s3, [r2]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002466:	ee74 7a87 	vadd.f32	s15, s9, s14
        acc_comp[k] = acc[k] - acc_off[k];
 800246a:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <ICM20602_read_IMU_data+0x69c>)
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 800246c:	ed90 7a00 	vldr	s14, [r0]
        acc_comp[k] = acc[k] - acc_off[k];
 8002470:	ee32 2a40 	vsub.f32	s4, s4, s0
 8002474:	ee73 5a41 	vsub.f32	s11, s6, s2
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002478:	ee34 6a06 	vadd.f32	s12, s8, s12
        acc_comp[k] = acc[k] - acc_off[k];
 800247c:	ee72 2ae0 	vsub.f32	s5, s5, s1
    while (deg < -180.0f) deg += 360.0f;
 8002480:	ed9f 3a59 	vldr	s6, [pc, #356]	; 80025e8 <ICM20602_read_IMU_data+0x6a0>
        acc_comp[k] = acc[k] - acc_off[k];
 8002484:	ed82 2a00 	vstr	s4, [r2]
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 8002488:	ee27 0a88 	vmul.f32	s0, s15, s16
        acc_comp[k] = acc[k] - acc_off[k];
 800248c:	edc2 2a01 	vstr	s5, [r2, #4]
 8002490:	edc2 5a02 	vstr	s11, [r2, #8]
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 8002494:	ee26 6a08 	vmul.f32	s12, s12, s16
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002498:	4a54      	ldr	r2, [pc, #336]	; (80025ec <ICM20602_read_IMU_data+0x6a4>)
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800249a:	edd1 7a00 	vldr	s15, [r1]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800249e:	edc2 3a00 	vstr	s7, [r2]
    while (deg < -180.0f) deg += 360.0f;
 80024a2:	eef4 6ac3 	vcmpe.f32	s13, s6
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    roll_angle = roll_angle + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt_sec) * 1;
 80024aa:	eea6 7a05 	vfma.f32	s14, s12, s10
    yaw_angle = yaw_angle + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 80024ae:	eee0 7a05 	vfma.f32	s15, s0, s10
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80024b2:	ed82 4a01 	vstr	s8, [r2, #4]
 80024b6:	edc2 4a02 	vstr	s9, [r2, #8]
    while (deg < -180.0f) deg += 360.0f;
 80024ba:	d50c      	bpl.n	80024d6 <ICM20602_read_IMU_data+0x58e>
 80024bc:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 80024c0:	eddf 5a4c 	vldr	s11, [pc, #304]	; 80025f4 <ICM20602_read_IMU_data+0x6ac>
 80024c4:	eeb0 6a66 	vmov.f32	s12, s13
 80024c8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80024d4:	d4f6      	bmi.n	80024c4 <ICM20602_read_IMU_data+0x57c>
    while (deg >= 180.0f) deg -= 360.0f;
 80024d6:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80025f8 <ICM20602_read_IMU_data+0x6b0>
 80024da:	eef4 6ac6 	vcmpe.f32	s13, s12
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	db0c      	blt.n	80024fe <ICM20602_read_IMU_data+0x5b6>
 80024e4:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 80024e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80025fc <ICM20602_read_IMU_data+0x6b4>
 80024ec:	eeb0 6a66 	vmov.f32	s12, s13
 80024f0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80024fc:	daf6      	bge.n	80024ec <ICM20602_read_IMU_data+0x5a4>
    while (deg < -180.0f) deg += 360.0f;
 80024fe:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80025e8 <ICM20602_read_IMU_data+0x6a0>
    pitch_angle = ICM20602_normAngle(pitch_angle);
 8002502:	edc4 6a00 	vstr	s13, [r4]
    while (deg < -180.0f) deg += 360.0f;
 8002506:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d50c      	bpl.n	800252a <ICM20602_read_IMU_data+0x5e2>
 8002510:	eddf 5a37 	vldr	s11, [pc, #220]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 8002514:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80025f4 <ICM20602_read_IMU_data+0x6ac>
 8002518:	eef0 6a47 	vmov.f32	s13, s14
 800251c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002524:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002528:	d4f6      	bmi.n	8002518 <ICM20602_read_IMU_data+0x5d0>
    while (deg >= 180.0f) deg -= 360.0f;
 800252a:	eddf 6a33 	vldr	s13, [pc, #204]	; 80025f8 <ICM20602_read_IMU_data+0x6b0>
 800252e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	db0c      	blt.n	8002552 <ICM20602_read_IMU_data+0x60a>
 8002538:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 800253c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80025fc <ICM20602_read_IMU_data+0x6b4>
 8002540:	eef0 6a47 	vmov.f32	s13, s14
 8002544:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002550:	daf6      	bge.n	8002540 <ICM20602_read_IMU_data+0x5f8>
    while (deg < -180.0f) deg += 360.0f;
 8002552:	eddf 6a25 	vldr	s13, [pc, #148]	; 80025e8 <ICM20602_read_IMU_data+0x6a0>
    roll_angle  = ICM20602_normAngle(roll_angle);
 8002556:	ed80 7a00 	vstr	s14, [r0]
    while (deg < -180.0f) deg += 360.0f;
 800255a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d50c      	bpl.n	800257e <ICM20602_read_IMU_data+0x636>
 8002564:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 8002568:	eddf 6a22 	vldr	s13, [pc, #136]	; 80025f4 <ICM20602_read_IMU_data+0x6ac>
 800256c:	eeb0 7a67 	vmov.f32	s14, s15
 8002570:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	ee77 7a86 	vadd.f32	s15, s15, s12
 800257c:	d4f6      	bmi.n	800256c <ICM20602_read_IMU_data+0x624>
    while (deg >= 180.0f) deg -= 360.0f;
 800257e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80025f8 <ICM20602_read_IMU_data+0x6b0>
 8002582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	db0c      	blt.n	80025a6 <ICM20602_read_IMU_data+0x65e>
 800258c:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80025f0 <ICM20602_read_IMU_data+0x6a8>
 8002590:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80025fc <ICM20602_read_IMU_data+0x6b4>
 8002594:	eeb0 7a67 	vmov.f32	s14, s15
 8002598:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80025a4:	daf6      	bge.n	8002594 <ICM20602_read_IMU_data+0x64c>
    yaw_angle   = ICM20602_normAngle(yaw_angle);
 80025a6:	edc1 7a00 	vstr	s15, [r1]
    gyro_prv[0] = gyro_comp[0];
 80025aa:	edc3 3a00 	vstr	s7, [r3]
    gyro_prv[1] = gyro_comp[1];
 80025ae:	ed83 4a01 	vstr	s8, [r3, #4]
    gyro_prv[2] = gyro_comp[2];
 80025b2:	edc3 4a02 	vstr	s9, [r3, #8]
}
 80025b6:	b004      	add	sp, #16
 80025b8:	ecbd 8b02 	vpop	{d8}
 80025bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025c0:	20001588 	.word	0x20001588
 80025c4:	20001484 	.word	0x20001484
 80025c8:	20000de0 	.word	0x20000de0
 80025cc:	20000dec 	.word	0x20000dec
 80025d0:	3b4889df 	.word	0x3b4889df
 80025d4:	200014d0 	.word	0x200014d0
 80025d8:	20001580 	.word	0x20001580
 80025dc:	20000d94 	.word	0x20000d94
 80025e0:	20000df8 	.word	0x20000df8
 80025e4:	20000d64 	.word	0x20000d64
 80025e8:	c3340000 	.word	0xc3340000
 80025ec:	20000db0 	.word	0x20000db0
 80025f0:	43b40000 	.word	0x43b40000
 80025f4:	c4070000 	.word	0xc4070000
 80025f8:	43340000 	.word	0x43340000
 80025fc:	44070000 	.word	0x44070000

08002600 <ICM20602_IMU_calibration2>:
{
 8002600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002604:	ed2d 8b06 	vpush	{d8-d10}
    double acc_sum[3]={0};
 8002608:	2400      	movs	r4, #0
{
 800260a:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    double acc_ave[3][10] = {{0.0}};
 800260e:	22f0      	movs	r2, #240	; 0xf0
 8002610:	4621      	mov	r1, r4
 8002612:	a822      	add	r0, sp, #136	; 0x88
    double acc_sum[3]={0};
 8002614:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8002618:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800261c:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    double gyro_sum[3]={0};
 8002620:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8002624:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8002628:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    double acc_ave[3][10] = {{0.0}};
 800262c:	f008 f832 	bl	800a694 <memset>
    double gyro_ave[3][10] = {{0.0}};
 8002630:	4621      	mov	r1, r4
 8002632:	22f0      	movs	r2, #240	; 0xf0
 8002634:	a85e      	add	r0, sp, #376	; 0x178
 8002636:	f008 f82d 	bl	800a694 <memset>
    printf("put the IMU still!\n");
 800263a:	48c9      	ldr	r0, [pc, #804]	; (8002960 <ICM20602_IMU_calibration2+0x360>)
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800263c:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8002964 <ICM20602_IMU_calibration2+0x364>
    printf("put the IMU still!\n");
 8002640:	f007 fe72 	bl	800a328 <puts>
    HAL_Delay(200);
 8002644:	20c8      	movs	r0, #200	; 0xc8
 8002646:	f002 fdbf 	bl	80051c8 <HAL_Delay>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 800264a:	2200      	movs	r2, #0
 800264c:	2300      	movs	r3, #0
    double cal_len = 0.0f;
 800264e:	ec43 2b1a 	vmov	d10, r2, r3
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fd fe3f 	bl	80002d8 <__aeabi_dsub>
 800265a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
 8002660:	9008      	str	r0, [sp, #32]
		|| cal_len < 500.0
 8002662:	a3bd      	add	r3, pc, #756	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800266c:	f7fe fa7c 	bl	8000b68 <__aeabi_dcmpgt>
 8002670:	2800      	cmp	r0, #0
 8002672:	d15d      	bne.n	8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002674:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8002678:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800267c:	f7fd fe2c 	bl	80002d8 <__aeabi_dsub>
 8002680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002684:	930b      	str	r3, [sp, #44]	; 0x2c
 8002686:	900a      	str	r0, [sp, #40]	; 0x28
 8002688:	a3b3      	add	r3, pc, #716	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002692:	f7fe fa69 	bl	8000b68 <__aeabi_dcmpgt>
 8002696:	2800      	cmp	r0, #0
 8002698:	d14a      	bne.n	8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 800269a:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800269e:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 80026a2:	f7fd fe19 	bl	80002d8 <__aeabi_dsub>
 80026a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026aa:	930d      	str	r3, [sp, #52]	; 0x34
 80026ac:	900c      	str	r0, [sp, #48]	; 0x30
 80026ae:	a3aa      	add	r3, pc, #680	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80026b8:	f7fe fa56 	bl	8000b68 <__aeabi_dcmpgt>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d137      	bne.n	8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 80026c0:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
 80026c4:	e9dd 0170 	ldrd	r0, r1, [sp, #448]	; 0x1c0
 80026c8:	f7fd fe06 	bl	80002d8 <__aeabi_dsub>
 80026cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80026d2:	900e      	str	r0, [sp, #56]	; 0x38
 80026d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80026de:	f7fe fa43 	bl	8000b68 <__aeabi_dcmpgt>
 80026e2:	bb28      	cbnz	r0, 8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 80026e4:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 80026e8:	e9dd 0184 	ldrd	r0, r1, [sp, #528]	; 0x210
 80026ec:	f7fd fdf4 	bl	80002d8 <__aeabi_dsub>
 80026f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026f4:	9311      	str	r3, [sp, #68]	; 0x44
 80026f6:	9010      	str	r0, [sp, #64]	; 0x40
 80026f8:	a397      	add	r3, pc, #604	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002702:	f7fe fa31 	bl	8000b68 <__aeabi_dcmpgt>
 8002706:	b998      	cbnz	r0, 8002730 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002708:	e9dd 2386 	ldrd	r2, r3, [sp, #536]	; 0x218
 800270c:	e9dd 0198 	ldrd	r0, r1, [sp, #608]	; 0x260
 8002710:	f7fd fde2 	bl	80002d8 <__aeabi_dsub>
 8002714:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002718:	9313      	str	r3, [sp, #76]	; 0x4c
 800271a:	9012      	str	r0, [sp, #72]	; 0x48
 800271c:	a38e      	add	r3, pc, #568	; (adr r3, 8002958 <ICM20602_IMU_calibration2+0x358>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002726:	f7fe fa1f 	bl	8000b68 <__aeabi_dcmpgt>
 800272a:	2800      	cmp	r0, #0
 800272c:	f000 82f4 	beq.w	8002d18 <ICM20602_IMU_calibration2+0x718>
    	printf("cal_len=%f\r\n",cal_len);
 8002730:	ab16      	add	r3, sp, #88	; 0x58
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <ICM20602_IMU_calibration2+0x368>)
 8002736:	9304      	str	r3, [sp, #16]
 8002738:	ec59 8b1a 	vmov	r8, r9, d10
 800273c:	ab1c      	add	r3, sp, #112	; 0x70
 800273e:	9303      	str	r3, [sp, #12]
 8002740:	4b8a      	ldr	r3, [pc, #552]	; (800296c <ICM20602_IMU_calibration2+0x36c>)
 8002742:	9305      	str	r3, [sp, #20]
 8002744:	ee1a 2a10 	vmov	r2, s20
 8002748:	464b      	mov	r3, r9
 800274a:	4889      	ldr	r0, [pc, #548]	; (8002970 <ICM20602_IMU_calibration2+0x370>)
 800274c:	f8df b230 	ldr.w	fp, [pc, #560]	; 8002980 <ICM20602_IMU_calibration2+0x380>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002750:	4c88      	ldr	r4, [pc, #544]	; (8002974 <ICM20602_IMU_calibration2+0x374>)
    	printf("cal_len=%f\r\n",cal_len);
 8002752:	f007 fd83 	bl	800a25c <iprintf>
    	for(j = 0; j < 3; j++){
 8002756:	ee1a 2a10 	vmov	r2, s20
 800275a:	4987      	ldr	r1, [pc, #540]	; (8002978 <ICM20602_IMU_calibration2+0x378>)
 800275c:	464b      	mov	r3, r9
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe f89c 	bl	800089c <__aeabi_ddiv>
 8002764:	ec41 0b19 	vmov	d9, r0, r1
 8002768:	ae22      	add	r6, sp, #136	; 0x88
 800276a:	ad5e      	add	r5, sp, #376	; 0x178
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800276c:	2700      	movs	r7, #0
 800276e:	2200      	movs	r2, #0
 8002770:	2110      	movs	r1, #16
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002776:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800277a:	f004 f9e1 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800277e:	20bc      	movs	r0, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002780:	f8cd 8000 	str.w	r8, [sp]
 8002784:	2301      	movs	r3, #1
 8002786:	aa15      	add	r2, sp, #84	; 0x54
 8002788:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800278a:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800278e:	4620      	mov	r0, r4
 8002790:	f005 f936 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002794:	2301      	movs	r3, #1
 8002796:	f8cd 8000 	str.w	r8, [sp]
 800279a:	aa15      	add	r2, sp, #84	; 0x54
 800279c:	a914      	add	r1, sp, #80	; 0x50
 800279e:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80027a0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027a4:	f005 f92c 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027a8:	2201      	movs	r2, #1
 80027aa:	2110      	movs	r1, #16
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80027b0:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027b4:	f004 f9c4 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2110      	movs	r1, #16
 80027bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c0:	f004 f9be 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80027c4:	20bb      	movs	r0, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027c6:	f8cd 8000 	str.w	r8, [sp]
 80027ca:	2301      	movs	r3, #1
 80027cc:	aa15      	add	r2, sp, #84	; 0x54
 80027ce:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80027d0:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027d4:	4620      	mov	r0, r4
 80027d6:	f005 f913 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027da:	2301      	movs	r3, #1
 80027dc:	f8cd 8000 	str.w	r8, [sp]
 80027e0:	aa15      	add	r2, sp, #84	; 0x54
 80027e2:	a914      	add	r1, sp, #80	; 0x50
 80027e4:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80027e6:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027ea:	f005 f909 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80027ee:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027f2:	2201      	movs	r2, #1
 80027f4:	2110      	movs	r1, #16
 80027f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fa:	f004 f9a1 	bl	8006b40 <HAL_GPIO_WritePin>
    return((HiByte<<8) | LoByte);
 80027fe:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002802:	4b5e      	ldr	r3, [pc, #376]	; (800297c <ICM20602_IMU_calibration2+0x37c>)
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <ICM20602_IMU_calibration2+0x368>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	fa0f f989 	sxth.w	r9, r9
 800280e:	ee07 9a90 	vmov	s15, r9
 8002812:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800281a:	2110      	movs	r1, #16
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800281c:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002824:	edc2 7a00 	vstr	s15, [r2]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	f004 f989 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800282e:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002830:	20be      	movs	r0, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002832:	460a      	mov	r2, r1
 8002834:	f8cd 8000 	str.w	r8, [sp]
 8002838:	2301      	movs	r3, #1
 800283a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800283c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002840:	4620      	mov	r0, r4
 8002842:	f005 f8dd 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002846:	a915      	add	r1, sp, #84	; 0x54
 8002848:	2301      	movs	r3, #1
 800284a:	460a      	mov	r2, r1
 800284c:	f8cd 8000 	str.w	r8, [sp]
 8002850:	a914      	add	r1, sp, #80	; 0x50
 8002852:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002854:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002858:	f005 f8d2 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800285c:	2201      	movs	r2, #1
 800285e:	2110      	movs	r1, #16
 8002860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002864:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002868:	f004 f96a 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2110      	movs	r1, #16
 8002870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002874:	f004 f964 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002878:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 800287a:	20bd      	movs	r0, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800287c:	460a      	mov	r2, r1
 800287e:	f8cd 8000 	str.w	r8, [sp]
 8002882:	2301      	movs	r3, #1
 8002884:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002886:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800288a:	4620      	mov	r0, r4
 800288c:	f005 f8b8 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002890:	a915      	add	r1, sp, #84	; 0x54
 8002892:	2301      	movs	r3, #1
 8002894:	460a      	mov	r2, r1
 8002896:	f8cd 8000 	str.w	r8, [sp]
 800289a:	a914      	add	r1, sp, #80	; 0x50
 800289c:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800289e:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028a2:	f005 f8ad 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80028a6:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028aa:	2201      	movs	r2, #1
 80028ac:	2110      	movs	r1, #16
 80028ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b2:	f004 f945 	bl	8006b40 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 80028b6:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <ICM20602_IMU_calibration2+0x37c>)
 80028bc:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <ICM20602_IMU_calibration2+0x368>)
 80028be:	ed93 7a00 	vldr	s14, [r3]
 80028c2:	fa0f f989 	sxth.w	r9, r9
 80028c6:	ee07 9a90 	vmov	s15, r9
 80028ca:	ee27 7a08 	vmul.f32	s14, s14, s16
 80028ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028d2:	2110      	movs	r1, #16
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028dc:	edc2 7a01 	vstr	s15, [r2, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f004 f92d 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028e6:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80028e8:	20c0      	movs	r0, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028ea:	460a      	mov	r2, r1
 80028ec:	f8cd 8000 	str.w	r8, [sp]
 80028f0:	2301      	movs	r3, #1
 80028f2:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80028f4:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028f8:	4620      	mov	r0, r4
 80028fa:	f005 f881 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028fe:	a915      	add	r1, sp, #84	; 0x54
 8002900:	2301      	movs	r3, #1
 8002902:	460a      	mov	r2, r1
 8002904:	f8cd 8000 	str.w	r8, [sp]
 8002908:	a914      	add	r1, sp, #80	; 0x50
 800290a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800290c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002910:	f005 f876 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	2110      	movs	r1, #16
 8002918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 800291c:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002920:	f004 f90e 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2110      	movs	r1, #16
 8002928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292c:	f004 f908 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002930:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002932:	20bf      	movs	r0, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002934:	460a      	mov	r2, r1
 8002936:	f8cd 8000 	str.w	r8, [sp]
 800293a:	2301      	movs	r3, #1
 800293c:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800293e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002942:	4620      	mov	r0, r4
 8002944:	f005 f85c 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002948:	a915      	add	r1, sp, #84	; 0x54
 800294a:	2301      	movs	r3, #1
 800294c:	460a      	mov	r2, r1
 800294e:	f8cd 8000 	str.w	r8, [sp]
 8002952:	a914      	add	r1, sp, #80	; 0x50
 8002954:	e016      	b.n	8002984 <ICM20602_IMU_calibration2+0x384>
 8002956:	bf00      	nop
 8002958:	eb1c432d 	.word	0xeb1c432d
 800295c:	3f2a36e2 	.word	0x3f2a36e2
 8002960:	0800d8b8 	.word	0x0800d8b8
 8002964:	411ce80a 	.word	0x411ce80a
 8002968:	20000d58 	.word	0x20000d58
 800296c:	20000da4 	.word	0x20000da4
 8002970:	0800d8cc 	.word	0x0800d8cc
 8002974:	20001588 	.word	0x20001588
 8002978:	3ff00000 	.word	0x3ff00000
 800297c:	20000d54 	.word	0x20000d54
 8002980:	20000da0 	.word	0x20000da0
 8002984:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002986:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800298a:	f005 f839 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800298e:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002992:	2201      	movs	r2, #1
 8002994:	2110      	movs	r1, #16
 8002996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299a:	f004 f8d1 	bl	8006b40 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 800299e:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80029a2:	4bc5      	ldr	r3, [pc, #788]	; (8002cb8 <ICM20602_IMU_calibration2+0x6b8>)
 80029a4:	4ac5      	ldr	r2, [pc, #788]	; (8002cbc <ICM20602_IMU_calibration2+0x6bc>)
 80029a6:	ed93 7a00 	vldr	s14, [r3]
 80029aa:	fa0f f989 	sxth.w	r9, r9
 80029ae:	ee07 9a90 	vmov	s15, r9
 80029b2:	ee27 7a08 	vmul.f32	s14, s14, s16
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029ba:	2110      	movs	r1, #16
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80029bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80029c4:	edc2 7a02 	vstr	s15, [r2, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f004 f8b9 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80029ce:	20c4      	movs	r0, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029d0:	f8cd 8000 	str.w	r8, [sp]
 80029d4:	2301      	movs	r3, #1
 80029d6:	aa15      	add	r2, sp, #84	; 0x54
 80029d8:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80029da:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029de:	4620      	mov	r0, r4
 80029e0:	f005 f80e 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029e4:	2301      	movs	r3, #1
 80029e6:	f8cd 8000 	str.w	r8, [sp]
 80029ea:	aa15      	add	r2, sp, #84	; 0x54
 80029ec:	a914      	add	r1, sp, #80	; 0x50
 80029ee:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80029f0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029f4:	f005 f804 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029f8:	2201      	movs	r2, #1
 80029fa:	2110      	movs	r1, #16
 80029fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002a00:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a04:	f004 f89c 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2110      	movs	r1, #16
 8002a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a10:	f004 f896 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a14:	20c3      	movs	r0, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a16:	f8cd 8000 	str.w	r8, [sp]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	aa15      	add	r2, sp, #84	; 0x54
 8002a1e:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a20:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a24:	4620      	mov	r0, r4
 8002a26:	f004 ffeb 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f8cd 8000 	str.w	r8, [sp]
 8002a30:	aa15      	add	r2, sp, #84	; 0x54
 8002a32:	a914      	add	r1, sp, #80	; 0x50
 8002a34:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a36:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a3a:	f004 ffe1 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002a3e:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002a42:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a46:	2201      	movs	r2, #1
 8002a48:	2110      	movs	r1, #16
 8002a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a4e:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a52:	f004 f875 	bl	8006b40 <HAL_GPIO_WritePin>
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a56:	ee07 9a90 	vmov	s15, r9
 8002a5a:	ed9b 7a00 	vldr	s14, [fp]
 8002a5e:	4b98      	ldr	r3, [pc, #608]	; (8002cc0 <ICM20602_IMU_calibration2+0x6c0>)
 8002a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a64:	2200      	movs	r2, #0
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a66:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a6a:	2110      	movs	r1, #16
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a6c:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a74:	f004 f864 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a78:	20c6      	movs	r0, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a7a:	f8cd 8000 	str.w	r8, [sp]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	aa15      	add	r2, sp, #84	; 0x54
 8002a82:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a84:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f004 ffb9 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f8cd 8000 	str.w	r8, [sp]
 8002a94:	aa15      	add	r2, sp, #84	; 0x54
 8002a96:	a914      	add	r1, sp, #80	; 0x50
 8002a98:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a9a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a9e:	f004 ffaf 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002aaa:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002aae:	f004 f847 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2110      	movs	r1, #16
 8002ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aba:	f004 f841 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002abe:	20c5      	movs	r0, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ac0:	f8cd 8000 	str.w	r8, [sp]
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	aa15      	add	r2, sp, #84	; 0x54
 8002ac8:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002aca:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f004 ff96 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f8cd 8000 	str.w	r8, [sp]
 8002ada:	aa15      	add	r2, sp, #84	; 0x54
 8002adc:	a914      	add	r1, sp, #80	; 0x50
 8002ade:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002ae0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ae4:	f004 ff8c 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002ae8:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002aec:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002af0:	2201      	movs	r2, #1
 8002af2:	2110      	movs	r1, #16
 8002af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002af8:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002afc:	f004 f820 	bl	8006b40 <HAL_GPIO_WritePin>
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002b00:	ee07 9a90 	vmov	s15, r9
 8002b04:	ed9b 7a00 	vldr	s14, [fp]
 8002b08:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <ICM20602_IMU_calibration2+0x6c0>)
 8002b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b0e:	2200      	movs	r2, #0
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002b10:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b14:	2110      	movs	r1, #16
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002b16:	edc3 7a01 	vstr	s15, [r3, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b1e:	f004 f80f 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b22:	20c8      	movs	r0, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b24:	f8cd 8000 	str.w	r8, [sp]
 8002b28:	2301      	movs	r3, #1
 8002b2a:	aa15      	add	r2, sp, #84	; 0x54
 8002b2c:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b2e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b32:	4620      	mov	r0, r4
 8002b34:	f004 ff64 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f8cd 8000 	str.w	r8, [sp]
 8002b3e:	aa15      	add	r2, sp, #84	; 0x54
 8002b40:	a914      	add	r1, sp, #80	; 0x50
 8002b42:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b44:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b48:	f004 ff5a 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2110      	movs	r1, #16
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002b54:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b58:	f003 fff2 	bl	8006b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2110      	movs	r1, #16
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b64:	f003 ffec 	bl	8006b40 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b68:	20c7      	movs	r0, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b6a:	f8cd 8000 	str.w	r8, [sp]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	aa15      	add	r2, sp, #84	; 0x54
 8002b72:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b74:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f004 ff41 	bl	8007a00 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f8cd 8000 	str.w	r8, [sp]
 8002b84:	aa15      	add	r2, sp, #84	; 0x54
 8002b86:	a914      	add	r1, sp, #80	; 0x50
 8002b88:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b8a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b8e:	f004 ff37 	bl	8007a00 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002b92:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002b96:	ea49 2908 	orr.w	r9, r9, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002ba2:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002ba6:	f003 ffcb 	bl	8006b40 <HAL_GPIO_WritePin>
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002baa:	ee07 9a90 	vmov	s15, r9
 8002bae:	ed9b 7a00 	vldr	s14, [fp]
 8002bb2:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <ICM20602_IMU_calibration2+0x6c0>)
 8002bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    	for(j = 0; j < 3; j++){
 8002bb8:	3650      	adds	r6, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002bba:	ee67 7a87 	vmul.f32	s15, s15, s14
    	for(j = 0; j < 3; j++){
 8002bbe:	3550      	adds	r5, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002bc0:	edc3 7a02 	vstr	s15, [r3, #8]
    		acc_sum[j]  += acc[j];
 8002bc4:	9b04      	ldr	r3, [sp, #16]
 8002bc6:	f853 0b04 	ldr.w	r0, [r3], #4
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	9b02      	ldr	r3, [sp, #8]
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002bd6:	f7fd fcdf 	bl	8000598 <__aeabi_f2d>
 8002bda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002bde:	f7fd fb7d 	bl	80002dc <__adddf3>
 8002be2:	9b02      	ldr	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002be4:	9a05      	ldr	r2, [sp, #20]
    		acc_sum[j]  += acc[j];
 8002be6:	4680      	mov	r8, r0
 8002be8:	4689      	mov	r9, r1
 8002bea:	e8e3 8902 	strd	r8, r9, [r3], #8
    		gyro_sum[j] += gyro[j];
 8002bee:	f852 0b04 	ldr.w	r0, [r2], #4
 8002bf2:	9205      	str	r2, [sp, #20]
 8002bf4:	9a03      	ldr	r2, [sp, #12]
    		acc_sum[j]  += acc[j];
 8002bf6:	9302      	str	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002bf8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002bfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c00:	f7fd fcca 	bl	8000598 <__aeabi_f2d>
 8002c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002c08:	f7fd fb68 	bl	80002dc <__adddf3>
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c0c:	464b      	mov	r3, r9
    		gyro_sum[j] += gyro[j];
 8002c0e:	4689      	mov	r9, r1
 8002c10:	9903      	ldr	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c12:	4642      	mov	r2, r8
    		gyro_sum[j] += gyro[j];
 8002c14:	4680      	mov	r8, r0
 8002c16:	e8e1 8902 	strd	r8, r9, [r1], #8
 8002c1a:	9103      	str	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c1c:	ec51 0b19 	vmov	r0, r1, d9
 8002c20:	f7fd fd12 	bl	8000648 <__aeabi_dmul>
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002c28:	4680      	mov	r8, r0
 8002c2a:	4689      	mov	r9, r1
 8002c2c:	e946 8914 	strd	r8, r9, [r6, #-80]	; 0x50
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002c30:	ec51 0b19 	vmov	r0, r1, d9
 8002c34:	f7fd fd08 	bl	8000648 <__aeabi_dmul>
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c38:	e956 2304 	ldrd	r2, r3, [r6, #-16]
 8002c3c:	e946 2302 	strd	r2, r3, [r6, #-8]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c40:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8002c44:	e945 2302 	strd	r2, r3, [r5, #-8]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c48:	e956 2306 	ldrd	r2, r3, [r6, #-24]
 8002c4c:	e946 2304 	strd	r2, r3, [r6, #-16]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c50:	e955 2306 	ldrd	r2, r3, [r5, #-24]
 8002c54:	e945 2304 	strd	r2, r3, [r5, #-16]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c58:	e956 2308 	ldrd	r2, r3, [r6, #-32]
 8002c5c:	e946 2306 	strd	r2, r3, [r6, #-24]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c60:	e955 2308 	ldrd	r2, r3, [r5, #-32]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002c64:	e945 0114 	strd	r0, r1, [r5, #-80]	; 0x50
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c68:	e945 2306 	strd	r2, r3, [r5, #-24]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c6c:	e956 230a 	ldrd	r2, r3, [r6, #-40]	; 0x28
 8002c70:	e946 2308 	strd	r2, r3, [r6, #-32]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c74:	e955 230a 	ldrd	r2, r3, [r5, #-40]	; 0x28
 8002c78:	e945 2308 	strd	r2, r3, [r5, #-32]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c7c:	e956 230c 	ldrd	r2, r3, [r6, #-48]	; 0x30
 8002c80:	e946 230a 	strd	r2, r3, [r6, #-40]	; 0x28
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c84:	e955 230c 	ldrd	r2, r3, [r5, #-48]	; 0x30
 8002c88:	e945 230a 	strd	r2, r3, [r5, #-40]	; 0x28
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c8c:	e956 230e 	ldrd	r2, r3, [r6, #-56]	; 0x38
 8002c90:	e946 230c 	strd	r2, r3, [r6, #-48]	; 0x30
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c94:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 8002c98:	e945 230c 	strd	r2, r3, [r5, #-48]	; 0x30
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c9c:	e956 2310 	ldrd	r2, r3, [r6, #-64]	; 0x40
 8002ca0:	e946 230e 	strd	r2, r3, [r6, #-56]	; 0x38
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002ca4:	e955 2310 	ldrd	r2, r3, [r5, #-64]	; 0x40
 8002ca8:	e945 230e 	strd	r2, r3, [r5, #-56]	; 0x38
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cac:	e956 2312 	ldrd	r2, r3, [r6, #-72]	; 0x48
 8002cb0:	e946 2310 	strd	r2, r3, [r6, #-64]	; 0x40
 8002cb4:	e006      	b.n	8002cc4 <ICM20602_IMU_calibration2+0x6c4>
 8002cb6:	bf00      	nop
 8002cb8:	20000d54 	.word	0x20000d54
 8002cbc:	20000d58 	.word	0x20000d58
 8002cc0:	20000da4 	.word	0x20000da4
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002cc4:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 8002cc8:	e945 2310 	strd	r2, r3, [r5, #-64]	; 0x40
    	for(j = 0; j < 3; j++){
 8002ccc:	9b02      	ldr	r3, [sp, #8]
 8002cce:	aa1c      	add	r2, sp, #112	; 0x70
 8002cd0:	4293      	cmp	r3, r2
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002cd2:	e946 8912 	strd	r8, r9, [r6, #-72]	; 0x48
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002cd6:	e945 0112 	strd	r0, r1, [r5, #-72]	; 0x48
    	for(j = 0; j < 3; j++){
 8002cda:	f47f ad48 	bne.w	800276e <ICM20602_IMU_calibration2+0x16e>
    	cal_len ++;
 8002cde:	ec55 4b1a 	vmov	r4, r5, d10
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <ICM20602_IMU_calibration2+0x7e8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	ee1a 0a10 	vmov	r0, s20
 8002cec:	f7fd faf6 	bl	80002dc <__adddf3>
    	if(cal_len>5000){break;}
 8002cf0:	a33b      	add	r3, pc, #236	; (adr r3, 8002de0 <ICM20602_IMU_calibration2+0x7e0>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    	cal_len ++;
 8002cf6:	4606      	mov	r6, r0
 8002cf8:	460f      	mov	r7, r1
    	if(cal_len>5000){break;}
 8002cfa:	ee1a 0a10 	vmov	r0, s20
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f7fd ff32 	bl	8000b68 <__aeabi_dcmpgt>
    	cal_len ++;
 8002d04:	4634      	mov	r4, r6
 8002d06:	463d      	mov	r5, r7
    	if(cal_len>5000){break;}
 8002d08:	b988      	cbnz	r0, 8002d2e <ICM20602_IMU_calibration2+0x72e>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002d0a:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8002d0e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
    	cal_len ++;
 8002d12:	ec47 6b1a 	vmov	d10, r6, r7
 8002d16:	e49e      	b.n	8002656 <ICM20602_IMU_calibration2+0x56>
		|| cal_len < 500.0
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <ICM20602_IMU_calibration2+0x7ec>)
 8002d1a:	ec51 0b1a 	vmov	r0, r1, d10
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f7fd ff04 	bl	8000b2c <__aeabi_dcmplt>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f47f ad03 	bne.w	8002730 <ICM20602_IMU_calibration2+0x130>
 8002d2a:	ec55 4b1a 	vmov	r4, r5, d10
    if(cal_len==500){NVIC_SystemReset();}
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <ICM20602_IMU_calibration2+0x7ec>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd feef 	bl	8000b18 <__aeabi_dcmpeq>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d143      	bne.n	8002dc6 <ICM20602_IMU_calibration2+0x7c6>
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	4929      	ldr	r1, [pc, #164]	; (8002de8 <ICM20602_IMU_calibration2+0x7e8>)
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d44:	4f2a      	ldr	r7, [pc, #168]	; (8002df0 <ICM20602_IMU_calibration2+0x7f0>)
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d46:	4e2b      	ldr	r6, [pc, #172]	; (8002df4 <ICM20602_IMU_calibration2+0x7f4>)
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd fda7 	bl	800089c <__aeabi_ddiv>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d4e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	f7fd fc77 	bl	8000648 <__aeabi_dmul>
 8002d5a:	f7fd ff6d 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d5e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d62:	6038      	str	r0, [r7, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d64:	4629      	mov	r1, r5
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7fd fc6e 	bl	8000648 <__aeabi_dmul>
 8002d6c:	f7fd ff64 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d70:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d74:	6030      	str	r0, [r6, #0]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d76:	4629      	mov	r1, r5
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fd fc65 	bl	8000648 <__aeabi_dmul>
 8002d7e:	f7fd ff5b 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d82:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d86:	6078      	str	r0, [r7, #4]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f7fd fc5c 	bl	8000648 <__aeabi_dmul>
 8002d90:	f7fd ff52 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d94:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d98:	6070      	str	r0, [r6, #4]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7fd fc53 	bl	8000648 <__aeabi_dmul>
 8002da2:	f7fd ff49 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002da6:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002daa:	60b8      	str	r0, [r7, #8]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002dac:	4629      	mov	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7fd fc4a 	bl	8000648 <__aeabi_dmul>
 8002db4:	f7fd ff40 	bl	8000c38 <__aeabi_d2f>
 8002db8:	60b0      	str	r0, [r6, #8]
}
 8002dba:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002dbe:	ecbd 8b06 	vpop	{d8-d10}
 8002dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002dca:	490b      	ldr	r1, [pc, #44]	; (8002df8 <ICM20602_IMU_calibration2+0x7f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <ICM20602_IMU_calibration2+0x7fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002dce:	68ca      	ldr	r2, [r1, #12]
 8002dd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
 8002dd8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002ddc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002dde:	e7fd      	b.n	8002ddc <ICM20602_IMU_calibration2+0x7dc>
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40b38700 	.word	0x40b38700
 8002de8:	3ff00000 	.word	0x3ff00000
 8002dec:	407f4000 	.word	0x407f4000
 8002df0:	20000d94 	.word	0x20000d94
 8002df4:	20000de0 	.word	0x20000de0
 8002df8:	e000ed00 	.word	0xe000ed00
 8002dfc:	05fa0004 	.word	0x05fa0004

08002e00 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE * f)
#endif /* __GNUC__ */

void __io_putchar(uint8_t ch) { HAL_UART_Transmit(&hlpuart1, &ch, 1, 1); }
 8002e00:	b500      	push	{lr}
 8002e02:	2301      	movs	r3, #1
 8002e04:	b083      	sub	sp, #12
 8002e06:	4684      	mov	ip, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f10d 0107 	add.w	r1, sp, #7
 8002e0e:	4804      	ldr	r0, [pc, #16]	; (8002e20 <__io_putchar+0x20>)
 8002e10:	f88d c007 	strb.w	ip, [sp, #7]
 8002e14:	f006 fab4 	bl	8009380 <HAL_UART_Transmit>
 8002e18:	b003      	add	sp, #12
 8002e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e1e:	bf00      	nop
 8002e20:	20001868 	.word	0x20001868

08002e24 <HAL_GetTick>:
void maintask_emargency();
void maintask_state_stop();
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2);
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void) { return uwTick; }
 8002e24:	4b01      	ldr	r3, [pc, #4]	; (8002e2c <HAL_GetTick+0x8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20001a18 	.word	0x20001a18

08002e30 <omni_odometory>:
  pre_mouse_odom[0] = mouse_odom[0];
  pre_mouse_odom[1] = mouse_odom[1];
}

void omni_odometory(/*float motor_angle[4],float yaw_rad*/)
{
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	4c8c      	ldr	r4, [pc, #560]	; (8003068 <omni_odometory+0x238>)
 8002e36:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8003090 <omni_odometory+0x260>
 8002e3a:	4d8c      	ldr	r5, [pc, #560]	; (800306c <omni_odometory+0x23c>)
 8002e3c:	ed2d 8b08 	vpush	{d8-d11}
 8002e40:	4646      	mov	r6, r8
 8002e42:	f104 0710 	add.w	r7, r4, #16
  // motor_enc_angle,/yaw_angle_rad

  for (int i = 0; i < 4; i++) {
    omni_angle_diff[i] = getAngleDiff(motor_enc_angle[i], pre_motor_enc_angle[i]);
 8002e46:	edd5 0a00 	vldr	s1, [r5]
 8002e4a:	ed94 0a00 	vldr	s0, [r4]
 8002e4e:	f002 f817 	bl	8004e80 <getAngleDiff>
    pre_motor_enc_angle[i] = motor_enc_angle[i];
 8002e52:	f854 3b04 	ldr.w	r3, [r4], #4
 8002e56:	f845 3b04 	str.w	r3, [r5], #4
  for (int i = 0; i < 4; i++) {
 8002e5a:	42bc      	cmp	r4, r7
    omni_angle_diff[i] = getAngleDiff(motor_enc_angle[i], pre_motor_enc_angle[i]);
 8002e5c:	eca6 0a01 	vstmia	r6!, {s0}
  for (int i = 0; i < 4; i++) {
 8002e60:	d1f1      	bne.n	8002e46 <omni_odometory+0x16>
  }

  float32_t robot_rotation_adj;
  robot_rotation_adj = normalizeAngle(yaw_angle_rad - pre_yaw_angle_rad) * OMNI_ROTATION_LENGTH;  // mm
 8002e62:	4b83      	ldr	r3, [pc, #524]	; (8003070 <omni_odometory+0x240>)
 8002e64:	4d83      	ldr	r5, [pc, #524]	; (8003074 <omni_odometory+0x244>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ed95 0a00 	vldr	s0, [r5]

  omni_travel[0] = omni_angle_diff[1] * OMNI_DIAMETER + robot_rotation_adj * 2;
 8002e6e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003094 <omni_odometory+0x264>
  omni_travel[1] = omni_angle_diff[2] * OMNI_DIAMETER + robot_rotation_adj * 2;
  // spin_adjusted_result += (omni_travel[0] + omni_travel[1]) / 2;

  pre_omni_odom[0] = omni_odom[0];
 8002e72:	f8df a224 	ldr.w	sl, [pc, #548]	; 8003098 <omni_odometory+0x268>
  robot_rotation_adj = normalizeAngle(yaw_angle_rad - pre_yaw_angle_rad) * OMNI_ROTATION_LENGTH;  // mm
 8002e76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002e7a:	f001 ff99 	bl	8004db0 <normalizeAngle>
  omni_travel[0] = omni_angle_diff[1] * OMNI_DIAMETER + robot_rotation_adj * 2;
 8002e7e:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8003078 <omni_odometory+0x248>
 8002e82:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002e86:	ee17 0a90 	vmov	r0, s15
 8002e8a:	f7fd fb85 	bl	8000598 <__aeabi_f2d>
 8002e8e:	4606      	mov	r6, r0
 8002e90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002e94:	460f      	mov	r7, r1
 8002e96:	f7fd fb7f 	bl	8000598 <__aeabi_f2d>
 8002e9a:	a36d      	add	r3, pc, #436	; (adr r3, 8003050 <omni_odometory+0x220>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fbd2 	bl	8000648 <__aeabi_dmul>
 8002ea4:	4632      	mov	r2, r6
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	f7fd fa18 	bl	80002dc <__adddf3>
 8002eac:	f7fd fec4 	bl	8000c38 <__aeabi_d2f>
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	f8c9 4000 	str.w	r4, [r9]
  omni_travel[1] = omni_angle_diff[2] * OMNI_DIAMETER + robot_rotation_adj * 2;
 8002eb6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002eba:	f7fd fb6d 	bl	8000598 <__aeabi_f2d>
 8002ebe:	a364      	add	r3, pc, #400	; (adr r3, 8003050 <omni_odometory+0x220>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fbc0 	bl	8000648 <__aeabi_dmul>
 8002ec8:	4632      	mov	r2, r6
 8002eca:	463b      	mov	r3, r7
 8002ecc:	f7fd fa06 	bl	80002dc <__adddf3>
 8002ed0:	f7fd feb2 	bl	8000c38 <__aeabi_d2f>
  pre_omni_odom[0] = omni_odom[0];
 8002ed4:	ed9a ba00 	vldr	s22, [sl]
 8002ed8:	4b68      	ldr	r3, [pc, #416]	; (800307c <omni_odometory+0x24c>)
  pre_omni_odom[1] = omni_odom[1];
 8002eda:	edda 8a01 	vldr	s17, [sl, #4]
  pre_omni_odom[0] = omni_odom[0];
 8002ede:	ed83 ba00 	vstr	s22, [r3]
  omni_travel[1] = omni_angle_diff[2] * OMNI_DIAMETER + robot_rotation_adj * 2;
 8002ee2:	4606      	mov	r6, r0
  pre_omni_odom[1] = omni_odom[1];
 8002ee4:	edc3 8a01 	vstr	s17, [r3, #4]
  omni_travel[1] = omni_angle_diff[2] * OMNI_DIAMETER + robot_rotation_adj * 2;
 8002ee8:	f8c9 6004 	str.w	r6, [r9, #4]
  // pre_yaw_angle_rad
  omni_odom[0] += (omni_travel[0] * cos(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * cos(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7fd fb53 	bl	8000598 <__aeabi_f2d>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6828      	ldr	r0, [r5, #0]
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	460d      	mov	r5, r1
 8002efa:	f7fd fb4d 	bl	8000598 <__aeabi_f2d>
 8002efe:	a356      	add	r3, pc, #344	; (adr r3, 8003058 <omni_odometory+0x228>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	4680      	mov	r8, r0
 8002f06:	4689      	mov	r9, r1
 8002f08:	f7fd f9e8 	bl	80002dc <__adddf3>
 8002f0c:	ec41 0b10 	vmov	d0, r0, r1
 8002f10:	ec41 0b1a 	vmov	d10, r0, r1
 8002f14:	f009 fc20 	bl	800c758 <cos>
 8002f18:	4630      	mov	r0, r6
 8002f1a:	ec57 6b10 	vmov	r6, r7, d0
 8002f1e:	f7fd fb3b 	bl	8000598 <__aeabi_f2d>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4640      	mov	r0, r8
 8002f28:	4649      	mov	r1, r9
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	a34c      	add	r3, pc, #304	; (adr r3, 8003060 <omni_odometory+0x230>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd f9d2 	bl	80002dc <__adddf3>
 8002f38:	ec41 0b10 	vmov	d0, r0, r1
 8002f3c:	ec41 0b19 	vmov	d9, r0, r1
 8002f40:	f009 fc0a 	bl	800c758 <cos>
 8002f44:	4632      	mov	r2, r6
 8002f46:	463b      	mov	r3, r7
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	ec57 6b10 	vmov	r6, r7, d0
 8002f50:	f7fd fb7a 	bl	8000648 <__aeabi_dmul>
 8002f54:	4632      	mov	r2, r6
 8002f56:	463b      	mov	r3, r7
 8002f58:	4606      	mov	r6, r0
 8002f5a:	460f      	mov	r7, r1
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	4649      	mov	r1, r9
 8002f60:	f7fd fb72 	bl	8000648 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4630      	mov	r0, r6
 8002f6a:	4639      	mov	r1, r7
 8002f6c:	f7fd f9b4 	bl	80002d8 <__aeabi_dsub>
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <omni_odometory+0x250>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	f7fd fb68 	bl	8000648 <__aeabi_dmul>
 8002f78:	4606      	mov	r6, r0
 8002f7a:	ee1b 0a10 	vmov	r0, s22
 8002f7e:	460f      	mov	r7, r1
 8002f80:	f7fd fb0a 	bl	8000598 <__aeabi_f2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4630      	mov	r0, r6
 8002f8a:	4639      	mov	r1, r7
 8002f8c:	f7fd f9a6 	bl	80002dc <__adddf3>
 8002f90:	f7fd fe52 	bl	8000c38 <__aeabi_d2f>
  omni_odom[1] += (omni_travel[0] * sin(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * sin(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 8002f94:	eeb0 0a4a 	vmov.f32	s0, s20
 8002f98:	eef0 0a6a 	vmov.f32	s1, s21
  omni_odom[0] += (omni_travel[0] * cos(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * cos(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 8002f9c:	ee08 0a10 	vmov	s16, r0
 8002fa0:	f8ca 0000 	str.w	r0, [sl]
  omni_odom[1] += (omni_travel[0] * sin(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * sin(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 8002fa4:	f009 fc2c 	bl	800c800 <sin>
 8002fa8:	eeb0 7a40 	vmov.f32	s14, s0
 8002fac:	eef0 7a60 	vmov.f32	s15, s1
 8002fb0:	eeb0 0a49 	vmov.f32	s0, s18
 8002fb4:	eef0 0a69 	vmov.f32	s1, s19
 8002fb8:	ec57 6b17 	vmov	r6, r7, d7
 8002fbc:	f009 fc20 	bl	800c800 <sin>
 8002fc0:	4632      	mov	r2, r6
 8002fc2:	463b      	mov	r3, r7
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	ec57 6b10 	vmov	r6, r7, d0
 8002fcc:	f7fd fb3c 	bl	8000648 <__aeabi_dmul>
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	460d      	mov	r5, r1
 8002fd6:	463b      	mov	r3, r7
 8002fd8:	4640      	mov	r0, r8
 8002fda:	4649      	mov	r1, r9
 8002fdc:	f7fd fb34 	bl	8000648 <__aeabi_dmul>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	f7fd f976 	bl	80002d8 <__aeabi_dsub>
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <omni_odometory+0x250>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f7fd fb2a 	bl	8000648 <__aeabi_dmul>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	ee18 0a90 	vmov	r0, s17
 8002ffa:	460d      	mov	r5, r1
 8002ffc:	f7fd facc 	bl	8000598 <__aeabi_f2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd f968 	bl	80002dc <__adddf3>
 800300c:	f7fd fe14 	bl	8000c38 <__aeabi_d2f>

  omni_odom_speed[0] = (omni_odom[0] - pre_omni_odom[0]);
  omni_odom_speed[1] = (omni_odom[1] - pre_omni_odom[1]);

  static uint32_t odom_speed_index = 0;
  odom_speed_index++;
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <omni_odometory+0x254>)
  omni_odom_speed[0] = (omni_odom[0] - pre_omni_odom[0]);
 8003012:	491d      	ldr	r1, [pc, #116]	; (8003088 <omni_odometory+0x258>)
  odom_speed_index++;
 8003014:	6813      	ldr	r3, [r2, #0]
  omni_odom[1] += (omni_travel[0] * sin(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * sin(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 8003016:	f8ca 0004 	str.w	r0, [sl, #4]
  odom_speed_index++;
 800301a:	3301      	adds	r3, #1
  omni_odom[1] += (omni_travel[0] * sin(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * sin(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 800301c:	ee07 0a90 	vmov	s15, r0
  if (odom_speed_index >= SPEED_LOG_BUF_SIZE) {
 8003020:	2b63      	cmp	r3, #99	; 0x63
    odom_speed_index = 0;
 8003022:	bf88      	it	hi
 8003024:	2300      	movhi	r3, #0
  omni_odom_speed[0] = (omni_odom[0] - pre_omni_odom[0]);
 8003026:	ee38 8a4b 	vsub.f32	s16, s16, s22
  omni_odom_speed[1] = (omni_odom[1] - pre_omni_odom[1]);
 800302a:	ee77 8ae8 	vsub.f32	s17, s15, s17
    odom_speed_index = 0;
 800302e:	6013      	str	r3, [r2, #0]
  }
  omni_odom_speed_log[0][odom_speed_index] = omni_odom_speed[0];
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <omni_odometory+0x25c>)
  omni_odom_speed[0] = (omni_odom[0] - pre_omni_odom[0]);
 8003032:	ed81 8a00 	vstr	s16, [r1]
  omni_odom_speed[1] = (omni_odom[1] - pre_omni_odom[1]);
 8003036:	edc1 8a01 	vstr	s17, [r1, #4]
  omni_odom_speed_log[0][odom_speed_index] = omni_odom_speed[0];
 800303a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800303e:	ed81 8a00 	vstr	s16, [r1]
  omni_odom_speed_log[1][odom_speed_index] = omni_odom_speed[1];
 8003042:	edc1 8a64 	vstr	s17, [r1, #400]	; 0x190
}
 8003046:	ecbd 8b08 	vpop	{d8-d11}
 800304a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304e:	bf00      	nop
 8003050:	3126e979 	.word	0x3126e979
 8003054:	3facac08 	.word	0x3facac08
 8003058:	7f3321d2 	.word	0x7f3321d2
 800305c:	4002d97c 	.word	0x4002d97c
 8003060:	2955385e 	.word	0x2955385e
 8003064:	400f6a7a 	.word	0x400f6a7a
 8003068:	200010e4 	.word	0x200010e4
 800306c:	200014a0 	.word	0x200014a0
 8003070:	200014c4 	.word	0x200014c4
 8003074:	20001584 	.word	0x20001584
 8003078:	3e1b22d1 	.word	0x3e1b22d1
 800307c:	200014b4 	.word	0x200014b4
 8003080:	3fe00000 	.word	0x3fe00000
 8003084:	2000112c 	.word	0x2000112c
 8003088:	2000114c 	.word	0x2000114c
 800308c:	20001154 	.word	0x20001154
 8003090:	20001134 	.word	0x20001134
 8003094:	20001474 	.word	0x20001474
 8003098:	20001144 	.word	0x20001144

0800309c <speed_control>:

float output_vel_surge, output_vel_sway;

void speed_control(/*float global_target_position[2],float global_robot_odom_position[2],float robot_theta*/)
{
 800309c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tar_pos[0] += tar_vel[0] / 500;
 80030a0:	4a6c      	ldr	r2, [pc, #432]	; (8003254 <speed_control+0x1b8>)
 80030a2:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <speed_control+0x1bc>)
 80030a4:	edd2 5a00 	vldr	s11, [r2]
  tar_pos[1] += tar_vel[1] / 500;
 80030a8:	ed92 6a01 	vldr	s12, [r2, #4]
  tar_pos[0] += tar_vel[0] / 500;
 80030ac:	edd3 6a00 	vldr	s13, [r3]
  tar_pos[1] += tar_vel[1] / 500;
 80030b0:	ed93 7a01 	vldr	s14, [r3, #4]
  tar_pos[0] += tar_vel[0] / 500;
 80030b4:	eddf 7a69 	vldr	s15, [pc, #420]	; 800325c <speed_control+0x1c0>

  // 絶対座標系
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 80030b8:	4a69      	ldr	r2, [pc, #420]	; (8003260 <speed_control+0x1c4>)
  tar_pos[1] += tar_vel[1] / 500;
 80030ba:	eea6 7a27 	vfma.f32	s14, s12, s15
  tar_pos[0] += tar_vel[0] / 500;
 80030be:	eee5 6aa7 	vfma.f32	s13, s11, s15
{
 80030c2:	ed2d 8b04 	vpush	{d8-d9}
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 80030c6:	edd2 7a00 	vldr	s15, [r2]
  floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 80030ca:	ed92 9a01 	vldr	s18, [r2, #4]
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 80030ce:	4a65      	ldr	r2, [pc, #404]	; (8003264 <speed_control+0x1c8>)
  tar_pos[0] += tar_vel[0] / 500;
 80030d0:	edc3 6a00 	vstr	s13, [r3]
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 80030d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
  floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 80030d8:	ee39 9a47 	vsub.f32	s18, s18, s14
  tar_pos[1] += tar_vel[1] / 500;
 80030dc:	ed83 7a01 	vstr	s14, [r3, #4]
  floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 80030e0:	edc2 7a00 	vstr	s15, [r2]

  // ロボット座標系
  // X
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 80030e4:	ee17 0a90 	vmov	r0, s15
  floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 80030e8:	ed82 9a01 	vstr	s18, [r2, #4]
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 80030ec:	f7fd fa54 	bl	8000598 <__aeabi_f2d>
 80030f0:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <speed_control+0x1cc>)
 80030f2:	4604      	mov	r4, r0
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	460d      	mov	r5, r1
 80030f8:	f7fd fa4e 	bl	8000598 <__aeabi_f2d>
 80030fc:	ec41 0b10 	vmov	d0, r0, r1
 8003100:	ec41 0b18 	vmov	d8, r0, r1
 8003104:	f009 fb28 	bl	800c758 <cos>
 8003108:	ee19 0a10 	vmov	r0, s18
 800310c:	ec59 8b10 	vmov	r8, r9, d0
 8003110:	f7fd fa42 	bl	8000598 <__aeabi_f2d>
 8003114:	eeb0 0a48 	vmov.f32	s0, s16
 8003118:	eef0 0a68 	vmov.f32	s1, s17
 800311c:	4682      	mov	sl, r0
 800311e:	468b      	mov	fp, r1
 8003120:	f009 fb6e 	bl	800c800 <sin>
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	ec57 6b10 	vmov	r6, r7, d0
 8003130:	f7fd fa8a 	bl	8000648 <__aeabi_dmul>
 8003134:	4632      	mov	r2, r6
 8003136:	ec41 0b18 	vmov	d8, r0, r1
 800313a:	463b      	mov	r3, r7
 800313c:	4650      	mov	r0, sl
 800313e:	4659      	mov	r1, fp
 8003140:	f7fd fa82 	bl	8000648 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	ec51 0b18 	vmov	r0, r1, d8
 800314c:	f7fd f8c6 	bl	80002dc <__adddf3>
 8003150:	f7fd fd72 	bl	8000c38 <__aeabi_d2f>
  // Y
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 8003154:	4632      	mov	r2, r6
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 8003156:	ee08 0a10 	vmov	s16, r0
 800315a:	4e44      	ldr	r6, [pc, #272]	; (800326c <speed_control+0x1d0>)
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 800315c:	463b      	mov	r3, r7
 800315e:	4620      	mov	r0, r4
 8003160:	4629      	mov	r1, r5
  robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 8003162:	ed86 8a00 	vstr	s16, [r6]
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 8003166:	f7fd fa6f 	bl	8000648 <__aeabi_dmul>
 800316a:	4652      	mov	r2, sl
 800316c:	465b      	mov	r3, fp
 800316e:	4604      	mov	r4, r0
 8003170:	460d      	mov	r5, r1
 8003172:	4640      	mov	r0, r8
 8003174:	4649      	mov	r1, r9
 8003176:	f7fd fa67 	bl	8000648 <__aeabi_dmul>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd f8ab 	bl	80002dc <__adddf3>
 8003186:	f7fd fd57 	bl	8000c38 <__aeabi_d2f>
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 800318a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003270 <speed_control+0x1d4>
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
  //+target_move_speed * 2;

  float limit_gain = 0;
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 800318e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8003274 <speed_control+0x1d8>
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 8003192:	4b39      	ldr	r3, [pc, #228]	; (8003278 <speed_control+0x1dc>)
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
 8003194:	4a39      	ldr	r2, [pc, #228]	; (800327c <speed_control+0x1e0>)
  robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 8003196:	6070      	str	r0, [r6, #4]
 8003198:	ee06 0a90 	vmov	s13, r0
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 800319c:	ee28 7a27 	vmul.f32	s14, s16, s15
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 80031a0:	eeb4 8ac6 	vcmpe.f32	s16, s12
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
 80031a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 500;
 80031ac:	ed83 7a00 	vstr	s14, [r3]
  output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 500;
 80031b0:	edc2 7a00 	vstr	s15, [r2]
  if (output_vel_surge > OMNI_OUTPUT_LIMIT) {
 80031b4:	d51e      	bpl.n	80031f4 <speed_control+0x158>
    limit_gain = output_vel_surge / OMNI_OUTPUT_LIMIT;
    output_vel_surge = OMNI_OUTPUT_LIMIT;
 80031b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    output_vel_sway /= limit_gain;
 80031ba:	ee27 6aa6 	vmul.f32	s12, s15, s13
    output_vel_surge = OMNI_OUTPUT_LIMIT;
 80031be:	edc3 6a00 	vstr	s13, [r3]
    output_vel_sway /= limit_gain;
 80031c2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80031c6:	eeb0 7a66 	vmov.f32	s14, s13
 80031ca:	edc2 7a00 	vstr	s15, [r2]
    limit_gain = -output_vel_surge / OMNI_OUTPUT_LIMIT;
    output_vel_surge = -OMNI_OUTPUT_LIMIT;
    output_vel_sway /= limit_gain;
  }

  if (output_vel_sway > OMNI_OUTPUT_LIMIT) {
 80031ce:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80031d2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	dd27      	ble.n	800322c <speed_control+0x190>
    limit_gain = output_vel_sway / OMNI_OUTPUT_LIMIT;
    output_vel_sway = OMNI_OUTPUT_LIMIT;
    output_vel_surge /= limit_gain;
 80031dc:	ee27 7a26 	vmul.f32	s14, s14, s13
    output_vel_sway = OMNI_OUTPUT_LIMIT;
 80031e0:	edc2 6a00 	vstr	s13, [r2]
    output_vel_surge /= limit_gain;
 80031e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031e8:	edc3 6a00 	vstr	s13, [r3]
    output_vel_sway = -OMNI_OUTPUT_LIMIT;
    output_vel_surge /= limit_gain;
  }

  // output vel X/Y
}
 80031ec:	ecbd 8b04 	vpop	{d8-d9}
 80031f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output_vel_surge < -OMNI_OUTPUT_LIMIT) {
 80031f4:	eddf 6a22 	vldr	s13, [pc, #136]	; 8003280 <speed_control+0x1e4>
 80031f8:	eeb4 8ae6 	vcmpe.f32	s16, s13
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dde5      	ble.n	80031ce <speed_control+0x132>
    output_vel_sway /= limit_gain;
 8003202:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003206:	ee66 6ae7 	vnmul.f32	s13, s13, s15
    output_vel_surge = -OMNI_OUTPUT_LIMIT;
 800320a:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
    output_vel_sway /= limit_gain;
 800320e:	eec6 7a87 	vdiv.f32	s15, s13, s14
  if (output_vel_sway > OMNI_OUTPUT_LIMIT) {
 8003212:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003216:	eef4 7ae6 	vcmpe.f32	s15, s13
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_vel_sway /= limit_gain;
 800321e:	eeb0 7a46 	vmov.f32	s14, s12
    output_vel_surge = -OMNI_OUTPUT_LIMIT;
 8003222:	ed83 6a00 	vstr	s12, [r3]
    output_vel_sway /= limit_gain;
 8003226:	edc2 7a00 	vstr	s15, [r2]
  if (output_vel_sway > OMNI_OUTPUT_LIMIT) {
 800322a:	dcd7      	bgt.n	80031dc <speed_control+0x140>
  } else if (output_vel_sway < -OMNI_OUTPUT_LIMIT) {
 800322c:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
 8003230:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	d5d8      	bpl.n	80031ec <speed_control+0x150>
    output_vel_surge /= limit_gain;
 800323a:	ee66 6ac7 	vnmul.f32	s13, s13, s14
}
 800323e:	ecbd 8b04 	vpop	{d8-d9}
    output_vel_surge /= limit_gain;
 8003242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    output_vel_sway = -OMNI_OUTPUT_LIMIT;
 8003246:	ed82 6a00 	vstr	s12, [r2]
    output_vel_surge /= limit_gain;
 800324a:	ed83 7a00 	vstr	s14, [r3]
}
 800324e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003252:	bf00      	nop
 8003254:	20001520 	.word	0x20001520
 8003258:	20001518 	.word	0x20001518
 800325c:	3b03126f 	.word	0x3b03126f
 8003260:	20001144 	.word	0x20001144
 8003264:	200010d4 	.word	0x200010d4
 8003268:	20001584 	.word	0x20001584
 800326c:	200014c8 	.word	0x200014c8
 8003270:	c37a0000 	.word	0xc37a0000
 8003274:	bc83126f 	.word	0xbc83126f
 8003278:	2000147c 	.word	0x2000147c
 800327c:	20001480 	.word	0x20001480
 8003280:	3c83126f 	.word	0x3c83126f

08003284 <maintask_emargency>:
  tx_data_uart[8] = (uint8_t)power_voltage[4];
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
}

void maintask_emargency()
{
 8003284:	b500      	push	{lr}
  actuator_motor1(0.0, 0.0);
 8003286:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8003324 <maintask_emargency+0xa0>
{
 800328a:	b085      	sub	sp, #20
  actuator_motor1(0.0, 0.0);
 800328c:	eef0 0a40 	vmov.f32	s1, s0
 8003290:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003294:	f7fd fe9e 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 8003298:	ed9d 0a01 	vldr	s0, [sp, #4]
 800329c:	eef0 0a40 	vmov.f32	s1, s0
 80032a0:	f7fd fea6 	bl	8000ff0 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 80032a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80032a8:	eef0 0a40 	vmov.f32	s1, s0
 80032ac:	f7fd feae 	bl	800100c <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 80032b0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80032b4:	eef0 0a40 	vmov.f32	s1, s0
 80032b8:	f7fd feb6 	bl	8001028 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 80032bc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80032c0:	eef0 0a40 	vmov.f32	s1, s0
 80032c4:	f7fd febe 	bl	8001044 <actuator_motor5>

  tx_data_uart[0] = 0xFE;
  tx_data_uart[1] = 0xFC;
  tx_data_uart[2] = error_no[0];
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <maintask_emargency+0xa4>)
  tx_data_uart[0] = 0xFE;
 80032ca:	4918      	ldr	r1, [pc, #96]	; (800332c <maintask_emargency+0xa8>)
  tx_data_uart[2] = error_no[0];
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8c1 3002 	str.w	r3, [r1, #2]
  tx_data_uart[3] = error_no[1];
  tx_data_uart[4] = error_no[2];
  tx_data_uart[5] = error_no[3];
  tx_data_uart[6] = 252;
 80032d2:	f647 23fc 	movw	r3, #31484	; 0x7afc
 80032d6:	80cb      	strh	r3, [r1, #6]
  tx_data_uart[0] = 0xFE;
 80032d8:	f64f 40fe 	movw	r0, #64766	; 0xfcfe
  tx_data_uart[7] = 122;
  tx_data_uart[8] = 200;
 80032dc:	23c8      	movs	r3, #200	; 0xc8
 80032de:	720b      	strb	r3, [r1, #8]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 80032e0:	2240      	movs	r2, #64	; 0x40
  tx_data_uart[0] = 0xFE;
 80032e2:	8008      	strh	r0, [r1, #0]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 80032e4:	4812      	ldr	r0, [pc, #72]	; (8003330 <maintask_emargency+0xac>)
 80032e6:	f005 fae3 	bl	80088b0 <HAL_UART_Transmit_DMA>

  actuator_buzzer(150, 150);
 80032ea:	2196      	movs	r1, #150	; 0x96
 80032ec:	4608      	mov	r0, r1
 80032ee:	f7fd ff17 	bl	8001120 <actuator_buzzer>

  uint8_t senddata_error[8];

  can1_send(0x000, senddata_error);
 80032f2:	a902      	add	r1, sp, #8
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fe f931 	bl	800155c <can1_send>
  can2_send(0x000, senddata_error);
 80032fa:	a902      	add	r1, sp, #8
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fe f97d 	bl	80015fc <can2_send>

  actuator_kicker(1, 0);
 8003302:	2100      	movs	r1, #0
 8003304:	2001      	movs	r0, #1
 8003306:	f7fd fecb 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(0.0);
 800330a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800330e:	f7fd fea7 	bl	8001060 <actuator_kicker_voltage>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003312:	4808      	ldr	r0, [pc, #32]	; (8003334 <maintask_emargency+0xb0>)
 8003314:	2201      	movs	r2, #1
 8003316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800331a:	f003 fc11 	bl	8006b40 <HAL_GPIO_WritePin>
}
 800331e:	b005      	add	sp, #20
 8003320:	f85d fb04 	ldr.w	pc, [sp], #4
 8003324:	00000000 	.word	0x00000000
 8003328:	200010cc 	.word	0x200010cc
 800332c:	20001540 	.word	0x20001540
 8003330:	200018f8 	.word	0x200018f8
 8003334:	48000400 	.word	0x48000400

08003338 <HAL_GPIO_EXTI_Callback>:
uint32_t HAL_GetTick(void) { return uwTick; }
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_GPIO_EXTI_Callback+0x74>)
 800333a:	681b      	ldr	r3, [r3, #0]
  if (HAL_GetTick() > 2000) {
 800333c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003340:	d915      	bls.n	800336e <HAL_GPIO_EXTI_Callback+0x36>
{
 8003342:	b570      	push	{r4, r5, r6, lr}
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1) {
 8003344:	4e1a      	ldr	r6, [pc, #104]	; (80033b0 <HAL_GPIO_EXTI_Callback+0x78>)
 8003346:	2464      	movs	r4, #100	; 0x64
 8003348:	e005      	b.n	8003356 <HAL_GPIO_EXTI_Callback+0x1e>
        delayUs(1);
 800334a:	f001 f84f 	bl	80043ec <delayUs>
    while (cnt < 100) {
 800334e:	1e63      	subs	r3, r4, #1
 8003350:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8003354:	d00c      	beq.n	8003370 <HAL_GPIO_EXTI_Callback+0x38>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1) {
 8003356:	f44f 7100 	mov.w	r1, #512	; 0x200
 800335a:	4630      	mov	r0, r6
 800335c:	f003 fbea 	bl	8006b34 <HAL_GPIO_ReadPin>
 8003360:	2801      	cmp	r0, #1
 8003362:	4605      	mov	r5, r0
 8003364:	d0f1      	beq.n	800334a <HAL_GPIO_EXTI_Callback+0x12>
      emergency_flag = 0;
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
}
 800336c:	bd70      	pop	{r4, r5, r6, pc}
 800336e:	4770      	bx	lr
      emergency_flag = 1;
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_GPIO_EXTI_Callback+0x7c>)
      printf("Emergency Stop !!!!!!!!!!!!!");
 8003372:	4811      	ldr	r0, [pc, #68]	; (80033b8 <HAL_GPIO_EXTI_Callback+0x80>)
      emergency_flag = 1;
 8003374:	701d      	strb	r5, [r3, #0]
      printf("Emergency Stop !!!!!!!!!!!!!");
 8003376:	2432      	movs	r4, #50	; 0x32
 8003378:	f006 ff70 	bl	800a25c <iprintf>
        maintask_emargency();
 800337c:	f7ff ff82 	bl	8003284 <maintask_emargency>
      for (int i = 0; i < 50; i++) {
 8003380:	3c01      	subs	r4, #1
 8003382:	d1fb      	bne.n	800337c <HAL_GPIO_EXTI_Callback+0x44>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8003384:	480a      	ldr	r0, [pc, #40]	; (80033b0 <HAL_GPIO_EXTI_Callback+0x78>)
 8003386:	4622      	mov	r2, r4
 8003388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800338c:	f003 fbd8 	bl	8006b40 <HAL_GPIO_WritePin>
 8003390:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003394:	4909      	ldr	r1, [pc, #36]	; (80033bc <HAL_GPIO_EXTI_Callback+0x84>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_GPIO_EXTI_Callback+0x88>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003398:	68ca      	ldr	r2, [r1, #12]
 800339a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800339e:	4313      	orrs	r3, r2
 80033a0:	60cb      	str	r3, [r1, #12]
 80033a2:	f3bf 8f4f 	dsb	sy
    __NOP();
 80033a6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80033a8:	e7fd      	b.n	80033a6 <HAL_GPIO_EXTI_Callback+0x6e>
 80033aa:	bf00      	nop
 80033ac:	20001a18 	.word	0x20001a18
 80033b0:	48000400 	.word	0x48000400
 80033b4:	200010c8 	.word	0x200010c8
 80033b8:	0800d8dc 	.word	0x0800d8dc
 80033bc:	e000ed00 	.word	0xe000ed00
 80033c0:	05fa0004 	.word	0x05fa0004

080033c4 <maintask_state_stop>:

void maintask_state_stop()
{
 80033c4:	b510      	push	{r4, lr}
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80033c6:	4b25      	ldr	r3, [pc, #148]	; (800345c <maintask_state_stop+0x98>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;

  omni_move(0.0, 0.0, 0.0, 0.0);
 80033c8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003460 <maintask_state_stop+0x9c>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
{
 80033d4:	b082      	sub	sp, #8
  omni_move(0.0, 0.0, 0.0, 0.0);
 80033d6:	eef0 1a40 	vmov.f32	s3, s0
 80033da:	eeb0 1a40 	vmov.f32	s2, s0
 80033de:	eef0 0a40 	vmov.f32	s1, s0
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80033e2:	ee17 4a90 	vmov	r4, s15
  omni_move(0.0, 0.0, 0.0, 0.0);
 80033e6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80033ea:	f001 f841 	bl	8004470 <omni_move>
  actuator_motor5(0.0, 0.0);
 80033ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80033f2:	eef0 0a40 	vmov.f32	s1, s0
 80033f6:	f7fd fe25 	bl	8001044 <actuator_motor5>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80033fa:	f104 0168 	add.w	r1, r4, #104	; 0x68

  tx_data_uart[0] = 0xFE;
  tx_data_uart[1] = 0xFC;
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80033fe:	2300      	movs	r3, #0
 8003400:	f361 0307 	bfi	r3, r1, #0, #8
  tx_data_uart[3] = (uint8_t)yaw_angle_send_high;
  tx_data_uart[4] = error_no[0];
  tx_data_uart[5] = error_no[1];
  tx_data_uart[6] = 1;
  tx_data_uart[7] = 1;
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003404:	4917      	ldr	r1, [pc, #92]	; (8003464 <maintask_state_stop+0xa0>)
  tx_data_uart[4] = error_no[0];
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <maintask_state_stop+0xa4>)
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003408:	edd1 7a04 	vldr	s15, [r1, #16]
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800340c:	7810      	ldrb	r0, [r2, #0]
 800340e:	7852      	ldrb	r2, [r2, #1]
  tx_data_uart[0] = 0xFE;
 8003410:	4916      	ldr	r1, [pc, #88]	; (800346c <maintask_state_stop+0xa8>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 8003412:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8003416:	1224      	asrs	r4, r4, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800341c:	f364 230f 	bfi	r3, r4, #8, #8
 8003420:	f360 4317 	bfi	r3, r0, #16, #8
 8003424:	f362 631f 	bfi	r3, r2, #24, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003428:	ee17 0a90 	vmov	r0, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 800342c:	f8c1 3002 	str.w	r3, [r1, #2]
  tx_data_uart[6] = 1;
 8003430:	f240 1201 	movw	r2, #257	; 0x101
  tx_data_uart[0] = 0xFE;
 8003434:	f64f 43fe 	movw	r3, #64766	; 0xfcfe
 8003438:	800b      	strh	r3, [r1, #0]
  tx_data_uart[6] = 1;
 800343a:	80ca      	strh	r2, [r1, #6]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800343c:	7208      	strb	r0, [r1, #8]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	480b      	ldr	r0, [pc, #44]	; (8003470 <maintask_state_stop+0xac>)
 8003442:	f005 fa35 	bl	80088b0 <HAL_UART_Transmit_DMA>

  actuator_kicker(1, 0);
 8003446:	2100      	movs	r1, #0
 8003448:	2001      	movs	r0, #1
 800344a:	f7fd fe29 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(0.0);
 800344e:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 8003452:	b002      	add	sp, #8
 8003454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_kicker_voltage(0.0);
 8003458:	f7fd be02 	b.w	8001060 <actuator_kicker_voltage>
 800345c:	20001580 	.word	0x20001580
 8003460:	00000000 	.word	0x00000000
 8003464:	20001488 	.word	0x20001488
 8003468:	200010cc 	.word	0x200010cc
 800346c:	20001540 	.word	0x20001540
 8003470:	200018f8 	.word	0x200018f8
 8003474:	00000000 	.word	0x00000000

08003478 <maintask_run>:
{
 8003478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800347c:	ed2d 8b02 	vpush	{d8}
  yaw_angle_rad = yaw_angle * M_PI / 180;
 8003480:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8003714 <maintask_run+0x29c>
 8003484:	4d8e      	ldr	r5, [pc, #568]	; (80036c0 <maintask_run+0x248>)
 8003486:	f8d8 0000 	ldr.w	r0, [r8]
  tar_vel[0] = ai_cmd.local_target_speed[0];
 800348a:	4c8e      	ldr	r4, [pc, #568]	; (80036c4 <maintask_run+0x24c>)
  omega = (getAngleDiff(ai_cmd.target_theta, yaw_angle_rad) * 160.0) - (getAngleDiff(yaw_angle_rad, pre_yaw_angle_rad) * 4000.0);
 800348c:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8003718 <maintask_run+0x2a0>
{
 8003490:	b083      	sub	sp, #12
  yaw_angle_rad = yaw_angle * M_PI / 180;
 8003492:	f7fd f881 	bl	8000598 <__aeabi_f2d>
 8003496:	a382      	add	r3, pc, #520	; (adr r3, 80036a0 <maintask_run+0x228>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fd f8d4 	bl	8000648 <__aeabi_dmul>
 80034a0:	f7fd fbca 	bl	8000c38 <__aeabi_d2f>
 80034a4:	6028      	str	r0, [r5, #0]
  omni_odometory();
 80034a6:	f7ff fcc3 	bl	8002e30 <omni_odometory>
  tar_vel[0] = ai_cmd.local_target_speed[0];
 80034aa:	4b87      	ldr	r3, [pc, #540]	; (80036c8 <maintask_run+0x250>)
 80034ac:	6962      	ldr	r2, [r4, #20]
 80034ae:	601a      	str	r2, [r3, #0]
  tar_vel[1] = ai_cmd.local_target_speed[1];
 80034b0:	69a2      	ldr	r2, [r4, #24]
 80034b2:	605a      	str	r2, [r3, #4]
  speed_control();
 80034b4:	f7ff fdf2 	bl	800309c <speed_control>
  omega = (getAngleDiff(ai_cmd.target_theta, yaw_angle_rad) * 160.0) - (getAngleDiff(yaw_angle_rad, pre_yaw_angle_rad) * 4000.0);
 80034b8:	edd5 0a00 	vldr	s1, [r5]
 80034bc:	ed94 0a00 	vldr	s0, [r4]
 80034c0:	f001 fcde 	bl	8004e80 <getAngleDiff>
 80034c4:	edd9 0a00 	vldr	s1, [r9]
 80034c8:	ee10 6a10 	vmov	r6, s0
 80034cc:	ed95 0a00 	vldr	s0, [r5]
 80034d0:	f001 fcd6 	bl	8004e80 <getAngleDiff>
 80034d4:	4630      	mov	r0, r6
 80034d6:	ee10 7a10 	vmov	r7, s0
 80034da:	f7fd f85d 	bl	8000598 <__aeabi_f2d>
 80034de:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <maintask_run+0x254>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	f7fd f8b1 	bl	8000648 <__aeabi_dmul>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4638      	mov	r0, r7
 80034ea:	4616      	mov	r6, r2
 80034ec:	460f      	mov	r7, r1
 80034ee:	f7fd f853 	bl	8000598 <__aeabi_f2d>
 80034f2:	4b77      	ldr	r3, [pc, #476]	; (80036d0 <maintask_run+0x258>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	f7fd f8a7 	bl	8000648 <__aeabi_dmul>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4630      	mov	r0, r6
 8003500:	4639      	mov	r1, r7
 8003502:	f7fc fee9 	bl	80002d8 <__aeabi_dsub>
 8003506:	f7fd fb97 	bl	8000c38 <__aeabi_d2f>
 800350a:	ee08 0a10 	vmov	s16, r0
  if (omega > 6 * M_PI) {
 800350e:	f7fd f843 	bl	8000598 <__aeabi_f2d>
 8003512:	a365      	add	r3, pc, #404	; (adr r3, 80036a8 <maintask_run+0x230>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	4606      	mov	r6, r0
 800351a:	460f      	mov	r7, r1
 800351c:	f7fd fb24 	bl	8000b68 <__aeabi_dcmpgt>
 8003520:	2800      	cmp	r0, #0
 8003522:	d075      	beq.n	8003610 <maintask_run+0x198>
    omega = 6 * M_PI;
 8003524:	eddf 7a6b 	vldr	s15, [pc, #428]	; 80036d4 <maintask_run+0x25c>
 8003528:	4b6b      	ldr	r3, [pc, #428]	; (80036d8 <maintask_run+0x260>)
 800352a:	eeb0 8a67 	vmov.f32	s16, s15
 800352e:	edc3 7a00 	vstr	s15, [r3]
  pre_yaw_angle_rad = yaw_angle_rad;
 8003532:	682a      	ldr	r2, [r5, #0]
  if (!ether_connect && sw_mode == 0) {
 8003534:	4b69      	ldr	r3, [pc, #420]	; (80036dc <maintask_run+0x264>)
  pre_yaw_angle_rad = yaw_angle_rad;
 8003536:	f8c9 2000 	str.w	r2, [r9]
  if (!ether_connect && sw_mode == 0) {
 800353a:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <maintask_run+0x268>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	7812      	ldrb	r2, [r2, #0]
  pre_yaw_angle = yaw_angle;
 8003540:	4968      	ldr	r1, [pc, #416]	; (80036e4 <maintask_run+0x26c>)
 8003542:	f8d8 0000 	ldr.w	r0, [r8]
 8003546:	6008      	str	r0, [r1, #0]
  if (!ether_connect && sw_mode == 0) {
 8003548:	4313      	orrs	r3, r2
 800354a:	f000 8098 	beq.w	800367e <maintask_run+0x206>
  omni_move(output_vel_surge, output_vel_sway, omega, 1.0);
 800354e:	4a66      	ldr	r2, [pc, #408]	; (80036e8 <maintask_run+0x270>)
 8003550:	4b66      	ldr	r3, [pc, #408]	; (80036ec <maintask_run+0x274>)
 8003552:	edd2 0a00 	vldr	s1, [r2]
 8003556:	ed93 0a00 	vldr	s0, [r3]
    if (ball_detection[0] == 1) {
 800355a:	4d65      	ldr	r5, [pc, #404]	; (80036f0 <maintask_run+0x278>)
  omni_move(output_vel_surge, output_vel_sway, omega, 1.0);
 800355c:	eeb0 1a48 	vmov.f32	s2, s16
 8003560:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003564:	f000 ff84 	bl	8004470 <omni_move>
  if (ai_cmd.kick_power > 0) {
 8003568:	edd4 7a03 	vldr	s15, [r4, #12]
 800356c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	dd5d      	ble.n	8003632 <maintask_run+0x1ba>
    if (ball_detection[0] == 1) {
 8003576:	782f      	ldrb	r7, [r5, #0]
      if (kick_state == 0) {
 8003578:	4e5e      	ldr	r6, [pc, #376]	; (80036f4 <maintask_run+0x27c>)
    if (ball_detection[0] == 1) {
 800357a:	2f01      	cmp	r7, #1
 800357c:	d066      	beq.n	800364c <maintask_run+0x1d4>
    if (kick_state == 1) {
 800357e:	6833      	ldr	r3, [r6, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d058      	beq.n	8003636 <maintask_run+0x1be>
  if (ai_cmd.chip_en == 1) {
 8003584:	7c61      	ldrb	r1, [r4, #17]
 8003586:	2901      	cmp	r1, #1
    actuator_kicker(2, 0);
 8003588:	bf18      	it	ne
 800358a:	2100      	movne	r1, #0
 800358c:	2002      	movs	r0, #2
 800358e:	f7fd fd87 	bl	80010a0 <actuator_kicker>
  actuator_kicker(1, 1);
 8003592:	2101      	movs	r1, #1
 8003594:	4608      	mov	r0, r1
 8003596:	f7fd fd83 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(250.0);
 800359a:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80036f8 <maintask_run+0x280>
 800359e:	f7fd fd5f 	bl	8001060 <actuator_kicker_voltage>
  actuator_motor5(ai_cmd.drible_power, 1.0);
 80035a2:	ed94 0a02 	vldr	s0, [r4, #8]
 80035a6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80035aa:	f7fd fd4b 	bl	8001044 <actuator_motor5>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80035ae:	edd8 7a00 	vldr	s15, [r8]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80035b2:	4852      	ldr	r0, [pc, #328]	; (80036fc <maintask_run+0x284>)
  tx_data_uart[0] = 0xFE;
 80035b4:	4952      	ldr	r1, [pc, #328]	; (8003700 <maintask_run+0x288>)
  tx_data_uart[6] = ai_cmd.chip_en;
 80035b6:	7c62      	ldrb	r2, [r4, #17]
 80035b8:	718a      	strb	r2, [r1, #6]
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80035ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80035be:	2400      	movs	r4, #0
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80035c0:	ee17 3a90 	vmov	r3, s15
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80035c4:	edd0 7a04 	vldr	s15, [r0, #16]
  tx_data_uart[7] = kick_state;
 80035c8:	6832      	ldr	r2, [r6, #0]
 80035ca:	71ca      	strb	r2, [r1, #7]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80035cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 80035d0:	2240      	movs	r2, #64	; 0x40
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80035d2:	ee17 0a90 	vmov	r0, s15
 80035d6:	7208      	strb	r0, [r1, #8]
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 80035d8:	f103 0068 	add.w	r0, r3, #104	; 0x68
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 80035dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80035e0:	f360 0407 	bfi	r4, r0, #0, #8
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 80035e4:	121b      	asrs	r3, r3, #8
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80035e6:	7828      	ldrb	r0, [r5, #0]
 80035e8:	f363 240f 	bfi	r4, r3, #8, #8
 80035ec:	786b      	ldrb	r3, [r5, #1]
 80035ee:	f360 4417 	bfi	r4, r0, #16, #8
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 80035f2:	4844      	ldr	r0, [pc, #272]	; (8003704 <maintask_run+0x28c>)
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80035f4:	f363 641f 	bfi	r4, r3, #24, #8
  tx_data_uart[0] = 0xFE;
 80035f8:	f64f 43fe 	movw	r3, #64766	; 0xfcfe
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80035fc:	f8c1 4002 	str.w	r4, [r1, #2]
  tx_data_uart[0] = 0xFE;
 8003600:	800b      	strh	r3, [r1, #0]
}
 8003602:	b003      	add	sp, #12
 8003604:	ecbd 8b02 	vpop	{d8}
 8003608:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, TX_BUF_SIZE_ETHER);
 800360c:	f005 b950 	b.w	80088b0 <HAL_UART_Transmit_DMA>
  if (omega < -6 * M_PI) {
 8003610:	a327      	add	r3, pc, #156	; (adr r3, 80036b0 <maintask_run+0x238>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	4630      	mov	r0, r6
 8003618:	4639      	mov	r1, r7
 800361a:	f7fd fa87 	bl	8000b2c <__aeabi_dcmplt>
 800361e:	2800      	cmp	r0, #0
 8003620:	d037      	beq.n	8003692 <maintask_run+0x21a>
    omega = -6 * M_PI;
 8003622:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003708 <maintask_run+0x290>
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <maintask_run+0x260>)
 8003628:	eeb0 8a67 	vmov.f32	s16, s15
 800362c:	edc3 7a00 	vstr	s15, [r3]
 8003630:	e77f      	b.n	8003532 <maintask_run+0xba>
 8003632:	4e30      	ldr	r6, [pc, #192]	; (80036f4 <maintask_run+0x27c>)
 8003634:	e7a6      	b.n	8003584 <maintask_run+0x10c>
      kick_time++;
 8003636:	4b35      	ldr	r3, [pc, #212]	; (800370c <maintask_run+0x294>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	3201      	adds	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
      if (kick_time > 100) {
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	2a64      	cmp	r2, #100	; 0x64
 8003642:	dd9f      	ble.n	8003584 <maintask_run+0x10c>
        kick_state = 0;
 8003644:	2200      	movs	r2, #0
 8003646:	6032      	str	r2, [r6, #0]
        kick_time = 0;
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e79b      	b.n	8003584 <maintask_run+0x10c>
      if (kick_state == 0) {
 800364c:	6833      	ldr	r3, [r6, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d195      	bne.n	800357e <maintask_run+0x106>
        uint8_t kick_power_param = (float)ai_cmd.kick_power * 255.0;
 8003652:	ee17 0a90 	vmov	r0, s15
 8003656:	f7fc ff9f 	bl	8000598 <__aeabi_f2d>
 800365a:	a317      	add	r3, pc, #92	; (adr r3, 80036b8 <maintask_run+0x240>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc fff2 	bl	8000648 <__aeabi_dmul>
 8003664:	f7fd fac8 	bl	8000bf8 <__aeabi_d2uiz>
 8003668:	b2c1      	uxtb	r1, r0
        printf(" kick=%d\r\n", kick_power_param);
 800366a:	4829      	ldr	r0, [pc, #164]	; (8003710 <maintask_run+0x298>)
 800366c:	9101      	str	r1, [sp, #4]
 800366e:	f006 fdf5 	bl	800a25c <iprintf>
        actuator_kicker(3, (uint8_t)kick_power_param);
 8003672:	9901      	ldr	r1, [sp, #4]
 8003674:	2003      	movs	r0, #3
 8003676:	f7fd fd13 	bl	80010a0 <actuator_kicker>
        kick_state = 1;
 800367a:	6037      	str	r7, [r6, #0]
 800367c:	e77f      	b.n	800357e <maintask_run+0x106>
    ai_cmd.local_target_speed[0] = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	6163      	str	r3, [r4, #20]
    ai_cmd.local_target_speed[1] = 0;
 8003682:	61a3      	str	r3, [r4, #24]
}
 8003684:	b003      	add	sp, #12
 8003686:	ecbd 8b02 	vpop	{d8}
 800368a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    maintask_state_stop();
 800368e:	f7ff be99 	b.w	80033c4 <maintask_state_stop>
  omega = (getAngleDiff(ai_cmd.target_theta, yaw_angle_rad) * 160.0) - (getAngleDiff(yaw_angle_rad, pre_yaw_angle_rad) * 4000.0);
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <maintask_run+0x260>)
 8003694:	ed83 8a00 	vstr	s16, [r3]
 8003698:	e74b      	b.n	8003532 <maintask_run+0xba>
 800369a:	bf00      	nop
 800369c:	f3af 8000 	nop.w
 80036a0:	a2529d39 	.word	0xa2529d39
 80036a4:	3f91df46 	.word	0x3f91df46
 80036a8:	7f3321d2 	.word	0x7f3321d2
 80036ac:	4032d97c 	.word	0x4032d97c
 80036b0:	7f3321d2 	.word	0x7f3321d2
 80036b4:	c032d97c 	.word	0xc032d97c
 80036b8:	00000000 	.word	0x00000000
 80036bc:	406fe000 	.word	0x406fe000
 80036c0:	20001584 	.word	0x20001584
 80036c4:	20001018 	.word	0x20001018
 80036c8:	20001520 	.word	0x20001520
 80036cc:	40640000 	.word	0x40640000
 80036d0:	40af4000 	.word	0x40af4000
 80036d4:	4196cbe4 	.word	0x4196cbe4
 80036d8:	20001130 	.word	0x20001130
 80036dc:	200010d0 	.word	0x200010d0
 80036e0:	20001515 	.word	0x20001515
 80036e4:	200014c0 	.word	0x200014c0
 80036e8:	20001480 	.word	0x20001480
 80036ec:	2000147c 	.word	0x2000147c
 80036f0:	20001064 	.word	0x20001064
 80036f4:	200010dc 	.word	0x200010dc
 80036f8:	437a0000 	.word	0x437a0000
 80036fc:	20001488 	.word	0x20001488
 8003700:	20001540 	.word	0x20001540
 8003704:	200018f8 	.word	0x200018f8
 8003708:	c196cbe4 	.word	0xc196cbe4
 800370c:	200010e0 	.word	0x200010e0
 8003710:	0800d8fc 	.word	0x0800d8fc
 8003714:	20001580 	.word	0x20001580
 8003718:	200014c4 	.word	0x200014c4

0800371c <maintask_stop>:

void maintask_stop()
{
 800371c:	b510      	push	{r4, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 800371e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80037d4 <maintask_stop+0xb8>
{
 8003722:	b082      	sub	sp, #8
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003724:	eef0 1a40 	vmov.f32	s3, s0
 8003728:	eeb0 1a40 	vmov.f32	s2, s0
 800372c:	eef0 0a40 	vmov.f32	s1, s0
 8003730:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003734:	f000 fe9c 	bl	8004470 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003738:	ed9d 0a01 	vldr	s0, [sp, #4]
 800373c:	eef0 0a40 	vmov.f32	s1, s0
 8003740:	f7fd fc80 	bl	8001044 <actuator_motor5>

  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 8003744:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <maintask_stop+0xbc>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;

  omni_move(0.0, 0.0, 0.0, 0.0);
 8003746:	ed9d 0a01 	vldr	s0, [sp, #4]
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003752:	eef0 1a40 	vmov.f32	s3, s0
 8003756:	eeb0 1a40 	vmov.f32	s2, s0
 800375a:	eef0 0a40 	vmov.f32	s1, s0
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 800375e:	ee17 4a90 	vmov	r4, s15
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003762:	f000 fe85 	bl	8004470 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003766:	ed9d 0a01 	vldr	s0, [sp, #4]
 800376a:	eef0 0a40 	vmov.f32	s1, s0
 800376e:	f7fd fc69 	bl	8001044 <actuator_motor5>
  uint8_t yaw_angle_send_low = ((int)yaw_angle + 360) & 0x00FF;
 8003772:	f104 0168 	add.w	r1, r4, #104	; 0x68

  tx_data_uart[0] = 0xFE;
  tx_data_uart[1] = 0xFC;
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003776:	2300      	movs	r3, #0
 8003778:	f361 0307 	bfi	r3, r1, #0, #8
  tx_data_uart[3] = (uint8_t)yaw_angle_send_high;
  tx_data_uart[4] = error_no[0];
  tx_data_uart[5] = error_no[1];
  tx_data_uart[6] = 0;
  tx_data_uart[7] = 0;
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800377c:	4917      	ldr	r1, [pc, #92]	; (80037dc <maintask_stop+0xc0>)
  tx_data_uart[4] = error_no[0];
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <maintask_stop+0xc4>)
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003780:	edd1 7a04 	vldr	s15, [r1, #16]
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003784:	f892 c000 	ldrb.w	ip, [r2]
 8003788:	7850      	ldrb	r0, [r2, #1]
  tx_data_uart[0] = 0xFE;
 800378a:	4916      	ldr	r1, [pc, #88]	; (80037e4 <maintask_stop+0xc8>)
  uint8_t yaw_angle_send_high = (((int)yaw_angle + 360) & 0xFF00) >> 8;
 800378c:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8003790:	1224      	asrs	r4, r4, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 8003792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 8003796:	f364 230f 	bfi	r3, r4, #8, #8
 800379a:	f36c 4317 	bfi	r3, ip, #16, #8
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 800379e:	ee17 2a90 	vmov	r2, s15
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80037a2:	f360 631f 	bfi	r3, r0, #24, #8
  tx_data_uart[6] = 0;
 80037a6:	2400      	movs	r4, #0
  tx_data_uart[2] = (uint8_t)yaw_angle_send_low;
 80037a8:	f8c1 3002 	str.w	r3, [r1, #2]
  tx_data_uart[0] = 0xFE;
 80037ac:	f64f 43fe 	movw	r3, #64766	; 0xfcfe
 80037b0:	800b      	strh	r3, [r1, #0]
  tx_data_uart[8] = (uint8_t)power_voltage[4];
 80037b2:	720a      	strb	r2, [r1, #8]
  tx_data_uart[6] = 0;
 80037b4:	80cc      	strh	r4, [r1, #6]
  HAL_UART_Transmit_DMA(&huart2, tx_data_uart, 32);
 80037b6:	2220      	movs	r2, #32
 80037b8:	480b      	ldr	r0, [pc, #44]	; (80037e8 <maintask_stop+0xcc>)
 80037ba:	f005 f879 	bl	80088b0 <HAL_UART_Transmit_DMA>

  actuator_kicker(1, 0);
 80037be:	4621      	mov	r1, r4
 80037c0:	2001      	movs	r0, #1
 80037c2:	f7fd fc6d 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(0.0);
 80037c6:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 80037ca:	b002      	add	sp, #8
 80037cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_kicker_voltage(0.0);
 80037d0:	f7fd bc46 	b.w	8001060 <actuator_kicker_voltage>
 80037d4:	00000000 	.word	0x00000000
 80037d8:	20001580 	.word	0x20001580
 80037dc:	20001488 	.word	0x20001488
 80037e0:	200010cc 	.word	0x200010cc
 80037e4:	20001540 	.word	0x20001540
 80037e8:	200018f8 	.word	0x200018f8
 80037ec:	00000000 	.word	0x00000000

080037f0 <HAL_TIM_PeriodElapsedCallback>:
{
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	ed2d 8b02 	vpush	{d8}
  pre_sw_mode = sw_mode;
 80037f8:	4dab      	ldr	r5, [pc, #684]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
  ICM20602_read_IMU_data(0.002);
 80037fa:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8003aac <HAL_TIM_PeriodElapsedCallback+0x2bc>
  pre_sw_mode = sw_mode;
 80037fe:	4eac      	ldr	r6, [pc, #688]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
{
 8003800:	b088      	sub	sp, #32
  ICM20602_read_IMU_data(0.002);
 8003802:	f7fe fba1 	bl	8001f48 <ICM20602_read_IMU_data>
  pre_sw_mode = sw_mode;
 8003806:	782b      	ldrb	r3, [r5, #0]
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003808:	48aa      	ldr	r0, [pc, #680]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
  pre_sw_mode = sw_mode;
 800380a:	7033      	strb	r3, [r6, #0]
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800380c:	2120      	movs	r1, #32
 800380e:	f003 f991 	bl	8006b34 <HAL_GPIO_ReadPin>
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	4604      	mov	r4, r0
 8003816:	48a7      	ldr	r0, [pc, #668]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003818:	f003 f98c 	bl	8006b34 <HAL_GPIO_ReadPin>
 800381c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003820:	4607      	mov	r7, r0
 8003822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003826:	f003 f985 	bl	8006b34 <HAL_GPIO_ReadPin>
 800382a:	f1c4 040f 	rsb	r4, r4, #15
 800382e:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
 8003832:	2104      	movs	r1, #4
 8003834:	4607      	mov	r7, r0
 8003836:	48a0      	ldr	r0, [pc, #640]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003838:	f003 f97c 	bl	8006b34 <HAL_GPIO_ReadPin>
 800383c:	b2e4      	uxtb	r4, r4
 800383e:	eba4 04c7 	sub.w	r4, r4, r7, lsl #3
  if (sw_mode != pre_sw_mode) {
 8003842:	7833      	ldrb	r3, [r6, #0]
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003844:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
 8003848:	b2c0      	uxtb	r0, r0
  if (sw_mode != pre_sw_mode) {
 800384a:	4283      	cmp	r3, r0
  sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800384c:	7028      	strb	r0, [r5, #0]
  if (sw_mode != pre_sw_mode) {
 800384e:	d008      	beq.n	8003862 <HAL_TIM_PeriodElapsedCallback+0x72>
    omni_odom[0] = tar_pos[1];
 8003850:	4b9a      	ldr	r3, [pc, #616]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003852:	4a9b      	ldr	r2, [pc, #620]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003854:	6859      	ldr	r1, [r3, #4]
    ai_cmd.local_target_speed[0] = 0;
 8003856:	4b9b      	ldr	r3, [pc, #620]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
    omni_odom[0] = tar_pos[1];
 8003858:	6011      	str	r1, [r2, #0]
    omni_odom[1] = tar_pos[1];
 800385a:	6051      	str	r1, [r2, #4]
    ai_cmd.local_target_speed[0] = 0;
 800385c:	2200      	movs	r2, #0
 800385e:	615a      	str	r2, [r3, #20]
    ai_cmd.local_target_speed[1] = 0;
 8003860:	619a      	str	r2, [r3, #24]
  switch (sw_mode) {
 8003862:	2806      	cmp	r0, #6
 8003864:	f200 8237 	bhi.w	8003cd6 <HAL_TIM_PeriodElapsedCallback+0x4e6>
 8003868:	e8df f010 	tbh	[pc, r0, lsl #1]
 800386c:	00070007 	.word	0x00070007
 8003870:	00d700a9 	.word	0x00d700a9
 8003874:	00f500c2 	.word	0x00f500c2
 8003878:	007a      	.short	0x007a
      yaw_angle = yaw_angle - (getAngleDiff(yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;
 800387a:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8003b00 <HAL_TIM_PeriodElapsedCallback+0x310>
 800387e:	eddf 7a92 	vldr	s15, [pc, #584]	; 8003ac8 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8003882:	ed98 8a00 	vldr	s16, [r8]
 8003886:	4b8f      	ldr	r3, [pc, #572]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003888:	ee68 7a27 	vmul.f32	s15, s16, s15
 800388c:	edd3 0a01 	vldr	s1, [r3, #4]
 8003890:	ee17 0a90 	vmov	r0, s15
 8003894:	edcd 0a04 	vstr	s1, [sp, #16]
 8003898:	f7fc fe7e 	bl	8000598 <__aeabi_f2d>
 800389c:	a37e      	add	r3, pc, #504	; (adr r3, 8003a98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc fed1 	bl	8000648 <__aeabi_dmul>
 80038a6:	f7fd f9c7 	bl	8000c38 <__aeabi_d2f>
 80038aa:	eddd 0a04 	vldr	s1, [sp, #16]
 80038ae:	ee00 0a10 	vmov	s0, r0
 80038b2:	f001 fae5 	bl	8004e80 <getAngleDiff>
 80038b6:	ee18 0a10 	vmov	r0, s16
 80038ba:	ee10 4a10 	vmov	r4, s0
 80038be:	f7fc fe6b 	bl	8000598 <__aeabi_f2d>
 80038c2:	4606      	mov	r6, r0
 80038c4:	4620      	mov	r0, r4
 80038c6:	460f      	mov	r7, r1
 80038c8:	f7fc fe66 	bl	8000598 <__aeabi_f2d>
 80038cc:	a374      	add	r3, pc, #464	; (adr r3, 8003aa0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fc feb9 	bl	8000648 <__aeabi_dmul>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4630      	mov	r0, r6
 80038dc:	4639      	mov	r1, r7
 80038de:	f7fc fcfb 	bl	80002d8 <__aeabi_dsub>
 80038e2:	f7fd f9a9 	bl	8000c38 <__aeabi_d2f>
 80038e6:	f8c8 0000 	str.w	r0, [r8]
      maintask_run();
 80038ea:	f7ff fdc5 	bl	8003478 <maintask_run>
  cnt_time_100Hz++;
 80038ee:	4a77      	ldr	r2, [pc, #476]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80038f0:	8813      	ldrh	r3, [r2, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	b29b      	uxth	r3, r3
  if (cnt_time_100Hz > 10) {
 80038f6:	2b0a      	cmp	r3, #10
 80038f8:	d81e      	bhi.n	8003938 <HAL_TIM_PeriodElapsedCallback+0x148>
  cnt_time_100Hz++;
 80038fa:	8013      	strh	r3, [r2, #0]
  connection_check_cnt++;
 80038fc:	4c74      	ldr	r4, [pc, #464]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	3301      	adds	r3, #1
  if (connection_check_cnt > 200) {
 8003902:	2bc8      	cmp	r3, #200	; 0xc8
  connection_check_cnt++;
 8003904:	6023      	str	r3, [r4, #0]
  if (connection_check_cnt > 200) {
 8003906:	d912      	bls.n	800392e <HAL_TIM_PeriodElapsedCallback+0x13e>
    if (connection_check_ver != connection_check_pre) {
 8003908:	4e72      	ldr	r6, [pc, #456]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800390a:	4d73      	ldr	r5, [pc, #460]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800390c:	6832      	ldr	r2, [r6, #0]
 800390e:	682b      	ldr	r3, [r5, #0]
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003910:	4872      	ldr	r0, [pc, #456]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
    if (connection_check_ver != connection_check_pre) {
 8003912:	429a      	cmp	r2, r3
      ether_connect = 0;
 8003914:	4b72      	ldr	r3, [pc, #456]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
      ether_connect = 1;
 8003916:	bf14      	ite	ne
 8003918:	2201      	movne	r2, #1
      ether_connect = 0;
 800391a:	2200      	moveq	r2, #0
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800391c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      ether_connect = 0;
 8003920:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003922:	f003 f90d 	bl	8006b40 <HAL_GPIO_WritePin>
    connection_check_pre = connection_check_ver;
 8003926:	6833      	ldr	r3, [r6, #0]
 8003928:	602b      	str	r3, [r5, #0]
    connection_check_cnt = 0;
 800392a:	2200      	movs	r2, #0
 800392c:	6022      	str	r2, [r4, #0]
}
 800392e:	b008      	add	sp, #32
 8003930:	ecbd 8b02 	vpop	{d8}
 8003934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sw_mode > 0) {
 8003938:	782b      	ldrb	r3, [r5, #0]
    cnt_time_100Hz = 0;
 800393a:	2100      	movs	r1, #0
 800393c:	8011      	strh	r1, [r2, #0]
    if (sw_mode > 0) {
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 80e0 	bne.w	8003b04 <HAL_TIM_PeriodElapsedCallback+0x314>
    HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)Tx_printf_data, printf_LOG_BUF_SIZE);
 8003944:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003948:	4966      	ldr	r1, [pc, #408]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800394a:	4867      	ldr	r0, [pc, #412]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800394c:	f004 ffb0 	bl	80088b0 <HAL_UART_Transmit_DMA>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003950:	4858      	ldr	r0, [pc, #352]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	f003 f8fa 	bl	8006b4c <HAL_GPIO_TogglePin>
    actuator_power_ONOFF(1);
 8003958:	2001      	movs	r0, #1
 800395a:	f7fd fbb1 	bl	80010c0 <actuator_power_ONOFF>
 800395e:	e7cd      	b.n	80038fc <HAL_TIM_PeriodElapsedCallback+0x10c>
      if (decode_SW(adc_sw_data) & 0b00010000) {
 8003960:	4b62      	ldr	r3, [pc, #392]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003962:	8818      	ldrh	r0, [r3, #0]
 8003964:	f001 fb64 	bl	8005030 <decode_SW>
 8003968:	f010 0410 	ands.w	r4, r0, #16
 800396c:	f040 811b 	bne.w	8003ba6 <HAL_TIM_PeriodElapsedCallback+0x3b6>
        actuator_motor5(0.0, 0.0);
 8003970:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8003af0 <HAL_TIM_PeriodElapsedCallback+0x300>
 8003974:	eeb0 0a60 	vmov.f32	s0, s1
 8003978:	f7fd fb64 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800397c:	4622      	mov	r2, r4
 800397e:	4857      	ldr	r0, [pc, #348]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003980:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003984:	f003 f8dc 	bl	8006b40 <HAL_GPIO_WritePin>
        actuator_kicker(1, 1);
 8003988:	2101      	movs	r1, #1
 800398a:	4608      	mov	r0, r1
 800398c:	f7fd fb88 	bl	80010a0 <actuator_kicker>
        actuator_kicker(2, 1);
 8003990:	2101      	movs	r1, #1
 8003992:	2002      	movs	r0, #2
 8003994:	f7fd fb84 	bl	80010a0 <actuator_kicker>
        actuator_kicker_voltage(0.0);
 8003998:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8003af0 <HAL_TIM_PeriodElapsedCallback+0x300>
 800399c:	f7fd fb60 	bl	8001060 <actuator_kicker_voltage>
        kick_state = 0;
 80039a0:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x304>)
        kick_time = 0;
 80039a2:	4b55      	ldr	r3, [pc, #340]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x308>)
        kick_state = 0;
 80039a4:	6014      	str	r4, [r2, #0]
        kick_time = 0;
 80039a6:	601c      	str	r4, [r3, #0]
      omni_move(0.0, 0.0, 0.0, 0.0);
 80039a8:	eddf 1a51 	vldr	s3, [pc, #324]	; 8003af0 <HAL_TIM_PeriodElapsedCallback+0x300>
 80039ac:	eeb0 1a61 	vmov.f32	s2, s3
 80039b0:	eef0 0a61 	vmov.f32	s1, s3
 80039b4:	eeb0 0a61 	vmov.f32	s0, s3
 80039b8:	f000 fd5a 	bl	8004470 <omni_move>
      break;
 80039bc:	e797      	b.n	80038ee <HAL_TIM_PeriodElapsedCallback+0xfe>
      if (decode_SW(adc_sw_data) & 0b00010000) {
 80039be:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80039c0:	8818      	ldrh	r0, [r3, #0]
 80039c2:	f001 fb35 	bl	8005030 <decode_SW>
 80039c6:	f010 0410 	ands.w	r4, r0, #16
 80039ca:	f000 811a 	beq.w	8003c02 <HAL_TIM_PeriodElapsedCallback+0x412>
        can1_send(0x310, senddata_calib);  // calibration
 80039ce:	a906      	add	r1, sp, #24
 80039d0:	f44f 7044 	mov.w	r0, #784	; 0x310
 80039d4:	f7fd fdc2 	bl	800155c <can1_send>
        can2_send(0x310, senddata_calib);  // calibration
 80039d8:	a906      	add	r1, sp, #24
 80039da:	f44f 7044 	mov.w	r0, #784	; 0x310
 80039de:	f7fd fe0d 	bl	80015fc <can2_send>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80039e2:	483e      	ldr	r0, [pc, #248]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ea:	f003 f8a9 	bl	8006b40 <HAL_GPIO_WritePin>
 80039ee:	e77e      	b.n	80038ee <HAL_TIM_PeriodElapsedCallback+0xfe>
      if (decode_SW(adc_sw_data) & 0b00010000) {
 80039f0:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80039f2:	8818      	ldrh	r0, [r3, #0]
 80039f4:	f001 fb1c 	bl	8005030 <decode_SW>
 80039f8:	f010 0410 	ands.w	r4, r0, #16
 80039fc:	f000 80f4 	beq.w	8003be8 <HAL_TIM_PeriodElapsedCallback+0x3f8>
        actuator_motor5(0.5, 1.0);
 8003a00:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a04:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a08:	f7fd fb1c 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003a0c:	4833      	ldr	r0, [pc, #204]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a14:	f003 f894 	bl	8006b40 <HAL_GPIO_WritePin>
 8003a18:	e7c6      	b.n	80039a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
      if (decode_SW(adc_sw_data) & 0b00000001) {
 8003a1a:	4c34      	ldr	r4, [pc, #208]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003a1c:	8820      	ldrh	r0, [r4, #0]
 8003a1e:	f001 fb07 	bl	8005030 <decode_SW>
 8003a22:	07c0      	lsls	r0, r0, #31
 8003a24:	f140 8104 	bpl.w	8003c30 <HAL_TIM_PeriodElapsedCallback+0x440>
        omni_move(1.0, 0.0, 0.0, 1.0);  // fwd
 8003a28:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8003af0 <HAL_TIM_PeriodElapsedCallback+0x300>
 8003a2c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003a30:	eef0 0a41 	vmov.f32	s1, s2
 8003a34:	eeb0 0a61 	vmov.f32	s0, s3
        omni_move(-1.0, 0.0, 0.0, 1.0);  // back
 8003a38:	f000 fd1a 	bl	8004470 <omni_move>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003a3c:	4827      	ldr	r0, [pc, #156]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a44:	f003 f87c 	bl	8006b40 <HAL_GPIO_WritePin>
      actuator_motor5(0.0, 0.0);
 8003a48:	eddf 0a29 	vldr	s1, [pc, #164]	; 8003af0 <HAL_TIM_PeriodElapsedCallback+0x300>
 8003a4c:	eeb0 0a60 	vmov.f32	s0, s1
 8003a50:	f7fd faf8 	bl	8001044 <actuator_motor5>
      break;
 8003a54:	e74b      	b.n	80038ee <HAL_TIM_PeriodElapsedCallback+0xfe>
      if (decode_SW(adc_sw_data) & 0b00010000) {
 8003a56:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003a58:	8818      	ldrh	r0, [r3, #0]
 8003a5a:	f001 fae9 	bl	8005030 <decode_SW>
 8003a5e:	f010 0410 	ands.w	r4, r0, #16
 8003a62:	f040 80a0 	bne.w	8003ba6 <HAL_TIM_PeriodElapsedCallback+0x3b6>
        actuator_motor5(0.0, 0.0);
 8003a66:	eddf 0a22 	vldr	s1, [pc, #136]	; 8003af0 <HAL_TIM_PeriodElapsedCallback+0x300>
 8003a6a:	eeb0 0a60 	vmov.f32	s0, s1
 8003a6e:	f7fd fae9 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003a72:	4622      	mov	r2, r4
 8003a74:	4819      	ldr	r0, [pc, #100]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a7a:	f003 f861 	bl	8006b40 <HAL_GPIO_WritePin>
        actuator_kicker(1, 1);
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4608      	mov	r0, r1
 8003a82:	f7fd fb0d 	bl	80010a0 <actuator_kicker>
        actuator_kicker(2, 0);
 8003a86:	4621      	mov	r1, r4
 8003a88:	2002      	movs	r0, #2
 8003a8a:	f7fd fb09 	bl	80010a0 <actuator_kicker>
        actuator_kicker_voltage(250.0);
 8003a8e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003afc <HAL_TIM_PeriodElapsedCallback+0x30c>
 8003a92:	e783      	b.n	800399c <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8003a94:	f3af 8000 	nop.w
 8003a98:	16c16c17 	.word	0x16c16c17
 8003a9c:	3f76c16c 	.word	0x3f76c16c
 8003aa0:	48b81fe5 	.word	0x48b81fe5
 8003aa4:	3fad55df 	.word	0x3fad55df
 8003aa8:	20001515 	.word	0x20001515
 8003aac:	3b03126f 	.word	0x3b03126f
 8003ab0:	200014bc 	.word	0x200014bc
 8003ab4:	48000400 	.word	0x48000400
 8003ab8:	48000c00 	.word	0x48000c00
 8003abc:	20001518 	.word	0x20001518
 8003ac0:	20001144 	.word	0x20001144
 8003ac4:	20001018 	.word	0x20001018
 8003ac8:	40490fdb 	.word	0x40490fdb
 8003acc:	20001078 	.word	0x20001078
 8003ad0:	2000107c 	.word	0x2000107c
 8003ad4:	20001084 	.word	0x20001084
 8003ad8:	20001080 	.word	0x20001080
 8003adc:	48000800 	.word	0x48000800
 8003ae0:	200010d0 	.word	0x200010d0
 8003ae4:	20000e20 	.word	0x20000e20
 8003ae8:	20001868 	.word	0x20001868
 8003aec:	20001014 	.word	0x20001014
 8003af0:	00000000 	.word	0x00000000
 8003af4:	200010dc 	.word	0x200010dc
 8003af8:	200010e0 	.word	0x200010e0
 8003afc:	437a0000 	.word	0x437a0000
 8003b00:	20001580 	.word	0x20001580
      sprintf(Tx_printf_data, "yaw=%+6.1f ", yaw_angle);
 8003b04:	4b75      	ldr	r3, [pc, #468]	; (8003cdc <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8003b06:	4c76      	ldr	r4, [pc, #472]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8003b08:	6818      	ldr	r0, [r3, #0]
      sprintf(Tx_printf_data + strlen(Tx_printf_data), " vel X %+4.1f Y %+4.1f tharW %+4.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta);
 8003b0a:	4e76      	ldr	r6, [pc, #472]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
      sprintf(Tx_printf_data, "yaw=%+6.1f ", yaw_angle);
 8003b0c:	f7fc fd44 	bl	8000598 <__aeabi_f2d>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4620      	mov	r0, r4
 8003b16:	4974      	ldr	r1, [pc, #464]	; (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8003b18:	f006 fcc4 	bl	800a4a4 <siprintf>
      sprintf(Tx_printf_data + strlen(Tx_printf_data), " Batt=%3.1f ", power_voltage[0]);
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7fc fbcf 	bl	80002c0 <strlen>
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003b24:	4605      	mov	r5, r0
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	f7fc fd36 	bl	8000598 <__aeabi_f2d>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	1960      	adds	r0, r4, r5
 8003b32:	496f      	ldr	r1, [pc, #444]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8003b34:	f006 fcb6 	bl	800a4a4 <siprintf>
      sprintf(Tx_printf_data + strlen(Tx_printf_data), " vel X %+4.1f Y %+4.1f tharW %+4.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta);
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f7fc fbc1 	bl	80002c0 <strlen>
 8003b3e:	4605      	mov	r5, r0
 8003b40:	6970      	ldr	r0, [r6, #20]
 8003b42:	f7fc fd29 	bl	8000598 <__aeabi_f2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	6830      	ldr	r0, [r6, #0]
 8003b4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b50:	f7fc fd22 	bl	8000598 <__aeabi_f2d>
 8003b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b58:	69b0      	ldr	r0, [r6, #24]
 8003b5a:	f7fc fd1d 	bl	8000598 <__aeabi_f2d>
 8003b5e:	4425      	add	r5, r4
 8003b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b64:	e9cd 0100 	strd	r0, r1, [sp]
 8003b68:	4962      	ldr	r1, [pc, #392]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f006 fc9a 	bl	800a4a4 <siprintf>
      sprintf(Tx_printf_data + strlen(Tx_printf_data), " ball_local x=%d y=%d radius=%d FPS=%d ", ball_local_x, ball_local_y, ball_local_radius, ball_local_FPS);
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7fc fba5 	bl	80002c0 <strlen>
 8003b76:	4960      	ldr	r1, [pc, #384]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8003b78:	4a60      	ldr	r2, [pc, #384]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8003b7a:	6809      	ldr	r1, [r1, #0]
 8003b7c:	9101      	str	r1, [sp, #4]
 8003b7e:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	9200      	str	r2, [sp, #0]
 8003b86:	4a5f      	ldr	r2, [pc, #380]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8003b88:	495f      	ldr	r1, [pc, #380]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4420      	add	r0, r4
 8003b8e:	f006 fc89 	bl	800a4a4 <siprintf>
      sprintf(Tx_printf_data + strlen(Tx_printf_data), "\r\n");
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7fc fb94 	bl	80002c0 <strlen>
 8003b98:	4b5c      	ldr	r3, [pc, #368]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8003b9a:	1822      	adds	r2, r4, r0
 8003b9c:	8819      	ldrh	r1, [r3, #0]
 8003b9e:	789b      	ldrb	r3, [r3, #2]
 8003ba0:	5221      	strh	r1, [r4, r0]
 8003ba2:	7093      	strb	r3, [r2, #2]
 8003ba4:	e6ce      	b.n	8003944 <HAL_TIM_PeriodElapsedCallback+0x154>
        actuator_motor5(0.5, 1.0);
 8003ba6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003baa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003bae:	f7fd fa49 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003bb2:	4857      	ldr	r0, [pc, #348]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x520>)
          if (kick_state == 0) {
 8003bb4:	4c57      	ldr	r4, [pc, #348]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x524>)
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bbc:	f002 ffc0 	bl	8006b40 <HAL_GPIO_WritePin>
        if (ball_detection[0] == 1) {
 8003bc0:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8003bc2:	781e      	ldrb	r6, [r3, #0]
 8003bc4:	2e01      	cmp	r6, #1
 8003bc6:	d04f      	beq.n	8003c68 <HAL_TIM_PeriodElapsedCallback+0x478>
        if (kick_state == 1) {
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	f47f aeec 	bne.w	80039a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
          kick_time++;
 8003bd0:	4b52      	ldr	r3, [pc, #328]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	3201      	adds	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
          if (kick_time > 100) {
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2a64      	cmp	r2, #100	; 0x64
 8003bdc:	f77f aee4 	ble.w	80039a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
            kick_state = 0;
 8003be0:	2200      	movs	r2, #0
 8003be2:	6022      	str	r2, [r4, #0]
            kick_time = 0;
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e6df      	b.n	80039a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
        actuator_motor5(0.0, 0.0);
 8003be8:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003bec:	eeb0 0a60 	vmov.f32	s0, s1
 8003bf0:	f7fd fa28 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003bf4:	4846      	ldr	r0, [pc, #280]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bfc:	f002 ffa0 	bl	8006b40 <HAL_GPIO_WritePin>
 8003c00:	e6d2      	b.n	80039a8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
        omni_move(0.0, 0.0, 0.0, 0.0);
 8003c02:	eddf 1a47 	vldr	s3, [pc, #284]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003c06:	eef0 0a61 	vmov.f32	s1, s3
 8003c0a:	eeb0 0a61 	vmov.f32	s0, s3
 8003c0e:	eeb0 1a61 	vmov.f32	s2, s3
 8003c12:	f000 fc2d 	bl	8004470 <omni_move>
        actuator_motor5(0.0, 0.0);
 8003c16:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003c1a:	eeb0 0a60 	vmov.f32	s0, s1
 8003c1e:	f7fd fa11 	bl	8001044 <actuator_motor5>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003c22:	483b      	ldr	r0, [pc, #236]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8003c24:	4622      	mov	r2, r4
 8003c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c2a:	f002 ff89 	bl	8006b40 <HAL_GPIO_WritePin>
 8003c2e:	e65e      	b.n	80038ee <HAL_TIM_PeriodElapsedCallback+0xfe>
      } else if (decode_SW(adc_sw_data) & 0b00000010) {
 8003c30:	8820      	ldrh	r0, [r4, #0]
 8003c32:	f001 f9fd 	bl	8005030 <decode_SW>
 8003c36:	0781      	lsls	r1, r0, #30
 8003c38:	d40d      	bmi.n	8003c56 <HAL_TIM_PeriodElapsedCallback+0x466>
      } else if (decode_SW(adc_sw_data) & 0b00000100) {
 8003c3a:	8820      	ldrh	r0, [r4, #0]
 8003c3c:	f001 f9f8 	bl	8005030 <decode_SW>
 8003c40:	0742      	lsls	r2, r0, #29
 8003c42:	d51a      	bpl.n	8003c7a <HAL_TIM_PeriodElapsedCallback+0x48a>
        omni_move(0.0, -1.0, 0.0, 1.0);  // left
 8003c44:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003c48:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003c4c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003c50:	eeb0 0a41 	vmov.f32	s0, s2
 8003c54:	e6f0      	b.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x248>
        omni_move(-1.0, 0.0, 0.0, 1.0);  // back
 8003c56:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003c5a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003c5e:	eef0 0a41 	vmov.f32	s1, s2
 8003c62:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003c66:	e6e7      	b.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x248>
          if (kick_state == 0) {
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ac      	bne.n	8003bc8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
            actuator_kicker(3, 100);
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	2003      	movs	r0, #3
 8003c72:	f7fd fa15 	bl	80010a0 <actuator_kicker>
            kick_state = 1;
 8003c76:	6026      	str	r6, [r4, #0]
 8003c78:	e7a6      	b.n	8003bc8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
      } else if (decode_SW(adc_sw_data) & 0b00001000) {
 8003c7a:	8820      	ldrh	r0, [r4, #0]
 8003c7c:	f001 f9d8 	bl	8005030 <decode_SW>
 8003c80:	0703      	lsls	r3, r0, #28
 8003c82:	d508      	bpl.n	8003c96 <HAL_TIM_PeriodElapsedCallback+0x4a6>
        omni_move(0.0, 1.0, 0.0, 1.0);  // right
 8003c84:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003c88:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003c8c:	eef0 0a61 	vmov.f32	s1, s3
 8003c90:	eeb0 0a41 	vmov.f32	s0, s2
 8003c94:	e6d0      	b.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x248>
      } else if (decode_SW(adc_sw_data) & 0b00010000) {
 8003c96:	8820      	ldrh	r0, [r4, #0]
 8003c98:	f001 f9ca 	bl	8005030 <decode_SW>
 8003c9c:	f010 0410 	ands.w	r4, r0, #16
 8003ca0:	d008      	beq.n	8003cb4 <HAL_TIM_PeriodElapsedCallback+0x4c4>
        omni_move(0.0, 0.0, 7.0, 1.0);  // spin
 8003ca2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003ca6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003caa:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003cae:	eeb0 0a60 	vmov.f32	s0, s1
 8003cb2:	e6c1      	b.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x248>
        omni_move(0.0, 0.0, 0.0, 0.0);
 8003cb4:	eddf 1a1a 	vldr	s3, [pc, #104]	; 8003d20 <HAL_TIM_PeriodElapsedCallback+0x530>
 8003cb8:	eeb0 1a61 	vmov.f32	s2, s3
 8003cbc:	eef0 0a61 	vmov.f32	s1, s3
 8003cc0:	eeb0 0a61 	vmov.f32	s0, s3
 8003cc4:	f000 fbd4 	bl	8004470 <omni_move>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003cc8:	4811      	ldr	r0, [pc, #68]	; (8003d10 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8003cca:	4622      	mov	r2, r4
 8003ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cd0:	f002 ff36 	bl	8006b40 <HAL_GPIO_WritePin>
 8003cd4:	e6b8      	b.n	8003a48 <HAL_TIM_PeriodElapsedCallback+0x258>
      maintask_stop();
 8003cd6:	f7ff fd21 	bl	800371c <maintask_stop>
      break;
 8003cda:	e608      	b.n	80038ee <HAL_TIM_PeriodElapsedCallback+0xfe>
 8003cdc:	20001580 	.word	0x20001580
 8003ce0:	20000e20 	.word	0x20000e20
 8003ce4:	20001018 	.word	0x20001018
 8003ce8:	0800d908 	.word	0x0800d908
 8003cec:	20001488 	.word	0x20001488
 8003cf0:	0800d914 	.word	0x0800d914
 8003cf4:	0800d924 	.word	0x0800d924
 8003cf8:	20001068 	.word	0x20001068
 8003cfc:	2000106c 	.word	0x2000106c
 8003d00:	20001074 	.word	0x20001074
 8003d04:	20001070 	.word	0x20001070
 8003d08:	0800d94c 	.word	0x0800d94c
 8003d0c:	0800d904 	.word	0x0800d904
 8003d10:	48000800 	.word	0x48000800
 8003d14:	200010dc 	.word	0x200010dc
 8003d18:	20001064 	.word	0x20001064
 8003d1c:	200010e0 	.word	0x200010e0
	...

08003d28 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8003d28:	b538      	push	{r3, r4, r5, lr}
  start_byte_idx = 0;
 8003d2a:	4d83      	ldr	r5, [pc, #524]	; (8003f38 <HAL_UART_RxCpltCallback+0x210>)

  if (huart->Instance == huart2.Instance) {
 8003d2c:	4b83      	ldr	r3, [pc, #524]	; (8003f3c <HAL_UART_RxCpltCallback+0x214>)
  start_byte_idx = 0;
 8003d2e:	2400      	movs	r4, #0
{
 8003d30:	ed2d 8b02 	vpush	{d8}
  start_byte_idx = 0;
 8003d34:	702c      	strb	r4, [r5, #0]
  if (huart->Instance == huart2.Instance) {
 8003d36:	6802      	ldr	r2, [r0, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d002      	beq.n	8003d44 <HAL_UART_RxCpltCallback+0x1c>
    ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
    ball_local_FPS = data_from_ether[RX_BUF_SIZE_ETHER - 2];

    connection_check_ver = data_from_ether[1];
  }
}
 8003d3e:	ecbd 8b02 	vpop	{d8}
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
    while (rxbuf_from_ether[start_byte_idx] != 254 && start_byte_idx < sizeof(rxbuf_from_ether)) {
 8003d44:	497e      	ldr	r1, [pc, #504]	; (8003f40 <HAL_UART_RxCpltCallback+0x218>)
 8003d46:	780b      	ldrb	r3, [r1, #0]
 8003d48:	2bfe      	cmp	r3, #254	; 0xfe
 8003d4a:	f000 80e9 	beq.w	8003f20 <HAL_UART_RxCpltCallback+0x1f8>
 8003d4e:	460a      	mov	r2, r1
 8003d50:	2301      	movs	r3, #1
 8003d52:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8003d56:	28fe      	cmp	r0, #254	; 0xfe
 8003d58:	461c      	mov	r4, r3
 8003d5a:	fa5f fc83 	uxtb.w	ip, r3
 8003d5e:	f103 0301 	add.w	r3, r3, #1
 8003d62:	d1f6      	bne.n	8003d52 <HAL_UART_RxCpltCallback+0x2a>
 8003d64:	f885 c000 	strb.w	ip, [r5]
    if (start_byte_idx >= sizeof(rxbuf_from_ether)) {
 8003d68:	4a76      	ldr	r2, [pc, #472]	; (8003f44 <HAL_UART_RxCpltCallback+0x21c>)
        if ((start_byte_idx + k) >= RX_BUF_SIZE_ETHER - 1) {
 8003d6a:	f1c1 0e40 	rsb	lr, r1, #64	; 0x40
 8003d6e:	44a6      	add	lr, r4
 8003d70:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
 8003d74:	440b      	add	r3, r1
 8003d76:	ebae 0e0c 	sub.w	lr, lr, ip
          data_from_ether[k] = rxbuf_from_ether[start_byte_idx + k];
 8003d7a:	3440      	adds	r4, #64	; 0x40
 8003d7c:	f102 053f 	add.w	r5, r2, #63	; 0x3f
        if ((start_byte_idx + k) >= RX_BUF_SIZE_ETHER - 1) {
 8003d80:	eb0e 0103 	add.w	r1, lr, r3
 8003d84:	293e      	cmp	r1, #62	; 0x3e
          data_from_ether[k] = rxbuf_from_ether[start_byte_idx + k];
 8003d86:	eba3 000c 	sub.w	r0, r3, ip
        if ((start_byte_idx + k) >= RX_BUF_SIZE_ETHER - 1) {
 8003d8a:	f340 80be 	ble.w	8003f0a <HAL_UART_RxCpltCallback+0x1e2>
 8003d8e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003d92:	f802 1f01 	strb.w	r1, [r2, #1]!
      for (uint8_t k = 0; k < RX_BUF_SIZE_ETHER - 1; k++) {
 8003d96:	42aa      	cmp	r2, r5
 8003d98:	d1f2      	bne.n	8003d80 <HAL_UART_RxCpltCallback+0x58>
    ai_cmd.local_target_speed[0] = two_to_float(&data_from_ether[2]) * 7.0;
 8003d9a:	4d6b      	ldr	r5, [pc, #428]	; (8003f48 <HAL_UART_RxCpltCallback+0x220>)
 8003d9c:	4c6b      	ldr	r4, [pc, #428]	; (8003f4c <HAL_UART_RxCpltCallback+0x224>)
 8003d9e:	1ca8      	adds	r0, r5, #2
 8003da0:	f001 f96e 	bl	8005080 <two_to_float>
 8003da4:	eeb1 8a0c 	vmov.f32	s16, #28	; 0x40e00000  7.0
 8003da8:	ee20 0a08 	vmul.f32	s0, s0, s16
    ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[4]) * 7.0;
 8003dac:	1d28      	adds	r0, r5, #4
    ai_cmd.local_target_speed[0] = two_to_float(&data_from_ether[2]) * 7.0;
 8003dae:	ed84 0a05 	vstr	s0, [r4, #20]
    ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[4]) * 7.0;
 8003db2:	f001 f965 	bl	8005080 <two_to_float>
 8003db6:	ee20 0a08 	vmul.f32	s0, s0, s16
    ai_cmd.global_vision_theta = two_to_float(&data_from_ether[6]) * M_PI;
 8003dba:	1da8      	adds	r0, r5, #6
    ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[4]) * 7.0;
 8003dbc:	ed84 0a06 	vstr	s0, [r4, #24]
    ai_cmd.global_vision_theta = two_to_float(&data_from_ether[6]) * M_PI;
 8003dc0:	f001 f95e 	bl	8005080 <two_to_float>
 8003dc4:	ee10 0a10 	vmov	r0, s0
 8003dc8:	f7fc fbe6 	bl	8000598 <__aeabi_f2d>
 8003dcc:	a356      	add	r3, pc, #344	; (adr r3, 8003f28 <HAL_UART_RxCpltCallback+0x200>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fc39 	bl	8000648 <__aeabi_dmul>
 8003dd6:	f7fc ff2f 	bl	8000c38 <__aeabi_d2f>
 8003dda:	4603      	mov	r3, r0
    ai_cmd.target_theta = two_to_float(&data_from_ether[8]) * M_PI;
 8003ddc:	f105 0008 	add.w	r0, r5, #8
    ai_cmd.global_vision_theta = two_to_float(&data_from_ether[6]) * M_PI;
 8003de0:	6063      	str	r3, [r4, #4]
    ai_cmd.target_theta = two_to_float(&data_from_ether[8]) * M_PI;
 8003de2:	f001 f94d 	bl	8005080 <two_to_float>
 8003de6:	ee10 0a10 	vmov	r0, s0
 8003dea:	f7fc fbd5 	bl	8000598 <__aeabi_f2d>
 8003dee:	a34e      	add	r3, pc, #312	; (adr r3, 8003f28 <HAL_UART_RxCpltCallback+0x200>)
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f7fc fc28 	bl	8000648 <__aeabi_dmul>
 8003df8:	f7fc ff1e 	bl	8000c38 <__aeabi_d2f>
    if (data_from_ether[10] > 100) {
 8003dfc:	7aab      	ldrb	r3, [r5, #10]
    ai_cmd.target_theta = two_to_float(&data_from_ether[8]) * M_PI;
 8003dfe:	6020      	str	r0, [r4, #0]
    if (data_from_ether[10] > 100) {
 8003e00:	2b64      	cmp	r3, #100	; 0x64
 8003e02:	f240 808b 	bls.w	8003f1c <HAL_UART_RxCpltCallback+0x1f4>
      data_from_ether[10] = data_from_ether[10] - 100;
 8003e06:	3b64      	subs	r3, #100	; 0x64
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	72ab      	strb	r3, [r5, #10]
      ai_cmd.chip_en = 1;
 8003e0c:	2201      	movs	r2, #1
    ai_cmd.kick_power = (float32_t)data_from_ether[10] / 20.0;
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	7462      	strb	r2, [r4, #17]
 8003e18:	ee17 0a90 	vmov	r0, s15
 8003e1c:	f7fc fbbc 	bl	8000598 <__aeabi_f2d>
 8003e20:	a343      	add	r3, pc, #268	; (adr r3, 8003f30 <HAL_UART_RxCpltCallback+0x208>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f7fc fc0f 	bl	8000648 <__aeabi_dmul>
 8003e2a:	f7fc ff05 	bl	8000c38 <__aeabi_d2f>
    ai_cmd.drible_power = (float32_t)data_from_ether[11] / 20.0;
 8003e2e:	7aeb      	ldrb	r3, [r5, #11]
    ai_cmd.kick_power = (float32_t)data_from_ether[10] / 20.0;
 8003e30:	60e0      	str	r0, [r4, #12]
    ai_cmd.drible_power = (float32_t)data_from_ether[11] / 20.0;
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	ee17 0a90 	vmov	r0, s15
 8003e3e:	f7fc fbab 	bl	8000598 <__aeabi_f2d>
 8003e42:	a33b      	add	r3, pc, #236	; (adr r3, 8003f30 <HAL_UART_RxCpltCallback+0x208>)
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f7fc fbfe 	bl	8000648 <__aeabi_dmul>
 8003e4c:	f7fc fef4 	bl	8000c38 <__aeabi_d2f>
    ai_cmd.keeper_en = data_from_ether[12];
 8003e50:	7b2b      	ldrb	r3, [r5, #12]
 8003e52:	7423      	strb	r3, [r4, #16]
    ai_cmd.drible_power = (float32_t)data_from_ether[11] / 20.0;
 8003e54:	4602      	mov	r2, r0
    ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[13]);
 8003e56:	483e      	ldr	r0, [pc, #248]	; (8003f50 <HAL_UART_RxCpltCallback+0x228>)
    ai_cmd.drible_power = (float32_t)data_from_ether[11] / 20.0;
 8003e58:	60a2      	str	r2, [r4, #8]
    ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[13]);
 8003e5a:	f001 f935 	bl	80050c8 <two_to_int>
 8003e5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[15]);
 8003e62:	483c      	ldr	r0, [pc, #240]	; (8003f54 <HAL_UART_RxCpltCallback+0x22c>)
    ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[13]);
 8003e64:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[15]);
 8003e68:	f001 f92e 	bl	80050c8 <two_to_int>
 8003e6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[17]);
 8003e70:	4839      	ldr	r0, [pc, #228]	; (8003f58 <HAL_UART_RxCpltCallback+0x230>)
    ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[15]);
 8003e72:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[17]);
 8003e76:	f001 f927 	bl	80050c8 <two_to_int>
 8003e7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[19]);
 8003e7e:	4837      	ldr	r0, [pc, #220]	; (8003f5c <HAL_UART_RxCpltCallback+0x234>)
    ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[17]);
 8003e80:	ed84 0a07 	vstr	s0, [r4, #28]
    ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[19]);
 8003e84:	f001 f920 	bl	80050c8 <two_to_int>
 8003e88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_global_target_position[0] = two_to_int(&data_from_ether[21]);
 8003e8c:	4834      	ldr	r0, [pc, #208]	; (8003f60 <HAL_UART_RxCpltCallback+0x238>)
    ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[19]);
 8003e8e:	ed84 0a08 	vstr	s0, [r4, #32]
    ai_cmd.global_global_target_position[0] = two_to_int(&data_from_ether[21]);
 8003e92:	f001 f919 	bl	80050c8 <two_to_int>
 8003e96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    ai_cmd.global_global_target_position[1] = two_to_int(&data_from_ether[23]);
 8003e9a:	4832      	ldr	r0, [pc, #200]	; (8003f64 <HAL_UART_RxCpltCallback+0x23c>)
    ai_cmd.global_global_target_position[0] = two_to_int(&data_from_ether[21]);
 8003e9c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    ai_cmd.global_global_target_position[1] = two_to_int(&data_from_ether[23]);
 8003ea0:	f001 f912 	bl	80050c8 <two_to_int>
    if (ether_connect == 0) {
 8003ea4:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <HAL_UART_RxCpltCallback+0x240>)
    ai_cmd.allow_local_feedback = data_from_ether[25];
 8003ea6:	7e6a      	ldrb	r2, [r5, #25]
    if (ether_connect == 0) {
 8003ea8:	781b      	ldrb	r3, [r3, #0]
    ai_cmd.allow_local_feedback = data_from_ether[25];
 8003eaa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    ai_cmd.global_global_target_position[1] = two_to_int(&data_from_ether[23]);
 8003eae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003eb2:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (ether_connect == 0) {
 8003eb6:	b97b      	cbnz	r3, 8003ed8 <HAL_UART_RxCpltCallback+0x1b0>
      ai_cmd.global_ball_position[1] = 0;
 8003eb8:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
      ai_cmd.global_robot_position[1] = 0;
 8003ebc:	e9c4 3307 	strd	r3, r3, [r4, #28]
      ai_cmd.global_global_target_position[1] = 0;
 8003ec0:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
      ai_cmd.local_target_speed[0] = 0;
 8003ec4:	2200      	movs	r2, #0
      ai_cmd.keeper_en = 0;
 8003ec6:	8223      	strh	r3, [r4, #16]
      ai_cmd.local_target_speed[0] = 0;
 8003ec8:	6162      	str	r2, [r4, #20]
      ai_cmd.local_target_speed[1] = 0;
 8003eca:	61a2      	str	r2, [r4, #24]
      ai_cmd.global_vision_theta = 0;
 8003ecc:	6062      	str	r2, [r4, #4]
      ai_cmd.target_theta = 0;
 8003ece:	6022      	str	r2, [r4, #0]
      ai_cmd.kick_power = 0;
 8003ed0:	60e2      	str	r2, [r4, #12]
      ai_cmd.drible_power = 0;
 8003ed2:	60a2      	str	r2, [r4, #8]
      ai_cmd.allow_local_feedback = 0;
 8003ed4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    ball_local_x = data_from_ether[RX_BUF_SIZE_ETHER - 8] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 7];
 8003ed8:	8f29      	ldrh	r1, [r5, #56]	; 0x38
 8003eda:	4824      	ldr	r0, [pc, #144]	; (8003f6c <HAL_UART_RxCpltCallback+0x244>)
    ball_local_y = data_from_ether[RX_BUF_SIZE_ETHER - 6] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 5];
 8003edc:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
    ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 8003ede:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
    ball_local_FPS = data_from_ether[RX_BUF_SIZE_ETHER - 2];
 8003ee0:	f895 403e 	ldrb.w	r4, [r5, #62]	; 0x3e
    ball_local_x = data_from_ether[RX_BUF_SIZE_ETHER - 8] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 7];
 8003ee4:	ba49      	rev16	r1, r1
 8003ee6:	b289      	uxth	r1, r1
 8003ee8:	6001      	str	r1, [r0, #0]
    ball_local_y = data_from_ether[RX_BUF_SIZE_ETHER - 6] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 5];
 8003eea:	ba52      	rev16	r2, r2
 8003eec:	4920      	ldr	r1, [pc, #128]	; (8003f70 <HAL_UART_RxCpltCallback+0x248>)
    ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 8003eee:	4821      	ldr	r0, [pc, #132]	; (8003f74 <HAL_UART_RxCpltCallback+0x24c>)
}
 8003ef0:	ecbd 8b02 	vpop	{d8}
    ball_local_y = data_from_ether[RX_BUF_SIZE_ETHER - 6] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 5];
 8003ef4:	b292      	uxth	r2, r2
 8003ef6:	600a      	str	r2, [r1, #0]
    ball_local_FPS = data_from_ether[RX_BUF_SIZE_ETHER - 2];
 8003ef8:	491f      	ldr	r1, [pc, #124]	; (8003f78 <HAL_UART_RxCpltCallback+0x250>)
    connection_check_ver = data_from_ether[1];
 8003efa:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <HAL_UART_RxCpltCallback+0x254>)
    ball_local_FPS = data_from_ether[RX_BUF_SIZE_ETHER - 2];
 8003efc:	600c      	str	r4, [r1, #0]
    ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 8003efe:	ba5b      	rev16	r3, r3
    connection_check_ver = data_from_ether[1];
 8003f00:	7869      	ldrb	r1, [r5, #1]
 8003f02:	6011      	str	r1, [r2, #0]
    ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	6003      	str	r3, [r0, #0]
}
 8003f08:	bd38      	pop	{r3, r4, r5, pc}
 8003f0a:	5d01      	ldrb	r1, [r0, r4]
 8003f0c:	f802 1f01 	strb.w	r1, [r2, #1]!
      for (uint8_t k = 0; k < RX_BUF_SIZE_ETHER - 1; k++) {
 8003f10:	42aa      	cmp	r2, r5
 8003f12:	f103 0301 	add.w	r3, r3, #1
 8003f16:	f47f af33 	bne.w	8003d80 <HAL_UART_RxCpltCallback+0x58>
 8003f1a:	e73e      	b.n	8003d9a <HAL_UART_RxCpltCallback+0x72>
      ai_cmd.chip_en = 0;
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	e776      	b.n	8003e0e <HAL_UART_RxCpltCallback+0xe6>
    while (rxbuf_from_ether[start_byte_idx] != 254 && start_byte_idx < sizeof(rxbuf_from_ether)) {
 8003f20:	46a4      	mov	ip, r4
 8003f22:	e721      	b.n	8003d68 <HAL_UART_RxCpltCallback+0x40>
 8003f24:	f3af 8000 	nop.w
 8003f28:	54442d18 	.word	0x54442d18
 8003f2c:	400921fb 	.word	0x400921fb
 8003f30:	9999999a 	.word	0x9999999a
 8003f34:	3fa99999 	.word	0x3fa99999
 8003f38:	20001514 	.word	0x20001514
 8003f3c:	200018f8 	.word	0x200018f8
 8003f40:	200014d4 	.word	0x200014d4
 8003f44:	20001087 	.word	0x20001087
 8003f48:	20001088 	.word	0x20001088
 8003f4c:	20001018 	.word	0x20001018
 8003f50:	20001095 	.word	0x20001095
 8003f54:	20001097 	.word	0x20001097
 8003f58:	20001099 	.word	0x20001099
 8003f5c:	2000109b 	.word	0x2000109b
 8003f60:	2000109d 	.word	0x2000109d
 8003f64:	2000109f 	.word	0x2000109f
 8003f68:	200010d0 	.word	0x200010d0
 8003f6c:	20001070 	.word	0x20001070
 8003f70:	20001074 	.word	0x20001074
 8003f74:	2000106c 	.word	0x2000106c
 8003f78:	20001068 	.word	0x20001068
 8003f7c:	20001084 	.word	0x20001084

08003f80 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart)
{
  if (huart->Instance == hlpuart1.Instance) {
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <HAL_UART_TxCpltCallback+0x10>)
 8003f82:	6802      	ldr	r2, [r0, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d000      	beq.n	8003f8c <HAL_UART_TxCpltCallback+0xc>
    dma_printf_send_it(huart);
  }
}
 8003f8a:	4770      	bx	lr
    dma_printf_send_it(huart);
 8003f8c:	f7fd bbc0 	b.w	8001710 <dma_printf_send_it>
 8003f90:	20001868 	.word	0x20001868

08003f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1) {
    maintask_emargency();
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003f96:	4c07      	ldr	r4, [pc, #28]	; (8003fb4 <Error_Handler+0x20>)
    maintask_emargency();
 8003f98:	f7ff f974 	bl	8003284 <maintask_emargency>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fa4:	f002 fdcc 	bl	8006b40 <HAL_GPIO_WritePin>
    actuator_buzzer(200, 200);
 8003fa8:	21c8      	movs	r1, #200	; 0xc8
 8003faa:	4608      	mov	r0, r1
 8003fac:	f7fd f8b8 	bl	8001120 <actuator_buzzer>
  while (1) {
 8003fb0:	e7f2      	b.n	8003f98 <Error_Handler+0x4>
 8003fb2:	bf00      	nop
 8003fb4:	48000400 	.word	0x48000400

08003fb8 <SystemClock_Config>:
{
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fbc:	2238      	movs	r2, #56	; 0x38
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	a806      	add	r0, sp, #24
 8003fc2:	f006 fb67 	bl	800a694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8003fcc:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003fd0:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003fd2:	f002 fdd1 	bl	8006b78 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fdc:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fde:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fe2:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003fe4:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003fe6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fe8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003fec:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ff0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ff4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ff6:	f002 fe3d 	bl	8006c74 <HAL_RCC_OscConfig>
 8003ffa:	b970      	cbnz	r0, 800401a <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003ffc:	2104      	movs	r1, #4
 8003ffe:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004000:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004002:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004006:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800400a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800400e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004010:	f003 f8b4 	bl	800717c <HAL_RCC_ClockConfig>
 8004014:	b908      	cbnz	r0, 800401a <SystemClock_Config+0x62>
}
 8004016:	b014      	add	sp, #80	; 0x50
 8004018:	bd10      	pop	{r4, pc}
    Error_Handler();
 800401a:	f7ff ffbb 	bl	8003f94 <Error_Handler>
 800401e:	bf00      	nop

08004020 <main>:
{
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	ed2d 8b02 	vpush	{d8}
  HAL_Init();
 8004026:	f001 f8b3 	bl	8005190 <HAL_Init>
  SystemClock_Config();
 800402a:	f7ff ffc5 	bl	8003fb8 <SystemClock_Config>
  MX_GPIO_Init();
 800402e:	f7fd fcdd 	bl	80019ec <MX_GPIO_Init>
  MX_DMA_Init();
 8004032:	f7fd fb03 	bl	800163c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004036:	f7fd fbcf 	bl	80017d8 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 800403a:	f000 fc81 	bl	8004940 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800403e:	f000 fccd 	bl	80049dc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004042:	f000 fd13 	bl	8004a6c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8004046:	f000 fa77 	bl	8004538 <MX_SPI1_Init>
  MX_TIM5_Init();
 800404a:	f000 fba9 	bl	80047a0 <MX_TIM5_Init>
  MX_TIM7_Init();
 800404e:	f000 fc15 	bl	800487c <MX_TIM7_Init>
  MX_ADC5_Init();
 8004052:	f7fd f925 	bl	80012a0 <MX_ADC5_Init>
  MX_ADC3_Init();
 8004056:	f7fd f8cb 	bl	80011f0 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 800405a:	f7fd fbe3 	bl	8001824 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 800405e:	f7fd f871 	bl	8001144 <MX_ADC1_Init>
  kick_state = 0;
 8004062:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <main+0x1f0>)
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004064:	486b      	ldr	r0, [pc, #428]	; (8004214 <main+0x1f4>)
  setbuf(stdin, NULL);
 8004066:	4d6c      	ldr	r5, [pc, #432]	; (8004218 <main+0x1f8>)
  kick_state = 0;
 8004068:	2400      	movs	r4, #0
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800406a:	2104      	movs	r1, #4
  kick_state = 0;
 800406c:	601c      	str	r4, [r3, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800406e:	f004 f8a5 	bl	80081bc <HAL_TIM_PWM_Start>
    actuator_buzzer(20, 20);
 8004072:	2114      	movs	r1, #20
 8004074:	4608      	mov	r0, r1
 8004076:	f7fd f853 	bl	8001120 <actuator_buzzer>
 800407a:	2114      	movs	r1, #20
 800407c:	4608      	mov	r0, r1
 800407e:	f7fd f84f 	bl	8001120 <actuator_buzzer>
 8004082:	2114      	movs	r1, #20
 8004084:	4608      	mov	r0, r1
 8004086:	f7fd f84b 	bl	8001120 <actuator_buzzer>
  HAL_UART_Init(&hlpuart1);
 800408a:	4864      	ldr	r0, [pc, #400]	; (800421c <main+0x1fc>)
 800408c:	f005 fa3e 	bl	800950c <HAL_UART_Init>
  setbuf(stdin, NULL);
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	4621      	mov	r1, r4
 8004094:	6858      	ldr	r0, [r3, #4]
 8004096:	f006 f94f 	bl	800a338 <setbuf>
  setbuf(stdout, NULL);
 800409a:	682b      	ldr	r3, [r5, #0]
 800409c:	4621      	mov	r1, r4
 800409e:	6898      	ldr	r0, [r3, #8]
 80040a0:	f006 f94a 	bl	800a338 <setbuf>
  setbuf(stderr, NULL);
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	4621      	mov	r1, r4
 80040a8:	68d8      	ldr	r0, [r3, #12]
 80040aa:	f006 f945 	bl	800a338 <setbuf>
  dma_printf_init(&hlpuart1);
 80040ae:	485b      	ldr	r0, [pc, #364]	; (800421c <main+0x1fc>)
 80040b0:	f7fd fb1e 	bl	80016f0 <dma_printf_init>
  dma_scanf_init(&hlpuart1);
 80040b4:	4859      	ldr	r0, [pc, #356]	; (800421c <main+0x1fc>)
 80040b6:	f7fd fb7b 	bl	80017b0 <dma_scanf_init>
  printf("start\r\n");
 80040ba:	4859      	ldr	r0, [pc, #356]	; (8004220 <main+0x200>)
 80040bc:	f006 f934 	bl	800a328 <puts>
  can1_init_ibis(&hfdcan1);
 80040c0:	4858      	ldr	r0, [pc, #352]	; (8004224 <main+0x204>)
 80040c2:	f7fd fa1d 	bl	8001500 <can1_init_ibis>
  can2_init_ibis(&hfdcan2);
 80040c6:	4858      	ldr	r0, [pc, #352]	; (8004228 <main+0x208>)
 80040c8:	f7fd fa6a 	bl	80015a0 <can2_init_ibis>
  HAL_FDCAN_Start(&hfdcan1);
 80040cc:	4855      	ldr	r0, [pc, #340]	; (8004224 <main+0x204>)
 80040ce:	f002 f9e3 	bl	8006498 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80040d2:	4854      	ldr	r0, [pc, #336]	; (8004224 <main+0x204>)
 80040d4:	4622      	mov	r2, r4
 80040d6:	2101      	movs	r1, #1
 80040d8:	f002 fae6 	bl	80066a8 <HAL_FDCAN_ActivateNotification>
 80040dc:	b950      	cbnz	r0, 80040f4 <main+0xd4>
  HAL_FDCAN_Start(&hfdcan2);
 80040de:	4604      	mov	r4, r0
 80040e0:	4851      	ldr	r0, [pc, #324]	; (8004228 <main+0x208>)
 80040e2:	f002 f9d9 	bl	8006498 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80040e6:	4622      	mov	r2, r4
 80040e8:	484f      	ldr	r0, [pc, #316]	; (8004228 <main+0x208>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	f002 fadc 	bl	80066a8 <HAL_FDCAN_ActivateNotification>
 80040f0:	4604      	mov	r4, r0
 80040f2:	b108      	cbz	r0, 80040f8 <main+0xd8>
    Error_Handler();
 80040f4:	f7ff ff4e 	bl	8003f94 <Error_Handler>
  HAL_UART_Init(&huart2);
 80040f8:	484c      	ldr	r0, [pc, #304]	; (800422c <main+0x20c>)
  actuator_motor1(0.0, 0.0);
 80040fa:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 8004230 <main+0x210>
  HAL_UART_Init(&huart2);
 80040fe:	f005 fa05 	bl	800950c <HAL_UART_Init>
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxbuf_from_ether, RX_BUF_SIZE_ETHER);
 8004102:	494c      	ldr	r1, [pc, #304]	; (8004234 <main+0x214>)
 8004104:	4849      	ldr	r0, [pc, #292]	; (800422c <main+0x20c>)
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	f005 fac0 	bl	800968c <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc5, (uint32_t *)adc_sw_data, 1);
 800410c:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <main+0x218>)
 800410e:	484b      	ldr	r0, [pc, #300]	; (800423c <main+0x21c>)
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	2201      	movs	r2, #1
 8004114:	f001 fca8 	bl	8005a68 <HAL_ADC_Start_DMA>
  actuator_power_ONOFF(0);
 8004118:	4620      	mov	r0, r4
 800411a:	f7fc ffd1 	bl	80010c0 <actuator_power_ONOFF>
  HAL_Delay(20);
 800411e:	2014      	movs	r0, #20
 8004120:	f001 f852 	bl	80051c8 <HAL_Delay>
  actuator_motor1(0.0, 0.0);
 8004124:	eef0 0a48 	vmov.f32	s1, s16
 8004128:	eeb0 0a48 	vmov.f32	s0, s16
 800412c:	f7fc ff52 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 8004130:	eef0 0a48 	vmov.f32	s1, s16
 8004134:	eeb0 0a48 	vmov.f32	s0, s16
 8004138:	f7fc ff5a 	bl	8000ff0 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 800413c:	eef0 0a48 	vmov.f32	s1, s16
 8004140:	eeb0 0a48 	vmov.f32	s0, s16
 8004144:	f7fc ff62 	bl	800100c <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 8004148:	eef0 0a48 	vmov.f32	s1, s16
 800414c:	eeb0 0a48 	vmov.f32	s0, s16
 8004150:	f7fc ff6a 	bl	8001028 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 8004154:	eef0 0a48 	vmov.f32	s1, s16
 8004158:	eeb0 0a48 	vmov.f32	s0, s16
 800415c:	f7fc ff72 	bl	8001044 <actuator_motor5>
  actuator_kicker(1, 1);
 8004160:	2101      	movs	r1, #1
 8004162:	4608      	mov	r0, r1
 8004164:	f7fc ff9c 	bl	80010a0 <actuator_kicker>
  actuator_kicker_voltage(250.0);
 8004168:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004240 <main+0x220>
 800416c:	f7fc ff78 	bl	8001060 <actuator_kicker_voltage>
  actuator_power_param(1, 15.0);  // min voltage
 8004170:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8004174:	2001      	movs	r0, #1
 8004176:	f7fc ffb3 	bl	80010e0 <actuator_power_param>
  actuator_power_param(2, 35.0);  // max voltage
 800417a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8004244 <main+0x224>
 800417e:	2002      	movs	r0, #2
 8004180:	f7fc ffae 	bl	80010e0 <actuator_power_param>
  actuator_power_param(3, 50.0);  // max current
 8004184:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8004248 <main+0x228>
 8004188:	2003      	movs	r0, #3
 800418a:	f7fc ffa9 	bl	80010e0 <actuator_power_param>
  actuator_power_param(4, 90.0);  // max temp(fet)
 800418e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800424c <main+0x22c>
 8004192:	2004      	movs	r0, #4
 8004194:	f7fc ffa4 	bl	80010e0 <actuator_power_param>
  actuator_power_param(5, 90.0);  // max temp(solenoid)
 8004198:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800424c <main+0x22c>
 800419c:	2005      	movs	r0, #5
 800419e:	f7fc ff9f 	bl	80010e0 <actuator_power_param>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80041a2:	482b      	ldr	r0, [pc, #172]	; (8004250 <main+0x230>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041aa:	f002 fcc9 	bl	8006b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80041ae:	2201      	movs	r2, #1
 80041b0:	4611      	mov	r1, r2
 80041b2:	4827      	ldr	r0, [pc, #156]	; (8004250 <main+0x230>)
 80041b4:	f002 fcc4 	bl	8006b40 <HAL_GPIO_WritePin>
  ICM20602_init();
 80041b8:	f7fd fcc6 	bl	8001b48 <ICM20602_init>
  ICM20602_IMU_calibration2();
 80041bc:	f7fe fa20 	bl	8002600 <ICM20602_IMU_calibration2>
  ICM20602_clearAngle();
 80041c0:	f7fd fdb8 	bl	8001d34 <ICM20602_clearAngle>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80041c4:	4622      	mov	r2, r4
 80041c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041ca:	4821      	ldr	r0, [pc, #132]	; (8004250 <main+0x230>)
 80041cc:	f002 fcb8 	bl	8006b40 <HAL_GPIO_WritePin>
  actuator_power_ONOFF(1);
 80041d0:	2001      	movs	r0, #1
 80041d2:	f7fc ff75 	bl	80010c0 <actuator_power_ONOFF>
    actuator_buzzer(40, 40);
 80041d6:	2128      	movs	r1, #40	; 0x28
 80041d8:	4608      	mov	r0, r1
 80041da:	f7fc ffa1 	bl	8001120 <actuator_buzzer>
 80041de:	2128      	movs	r1, #40	; 0x28
 80041e0:	4608      	mov	r0, r1
 80041e2:	f7fc ff9d 	bl	8001120 <actuator_buzzer>
 80041e6:	2128      	movs	r1, #40	; 0x28
 80041e8:	4608      	mov	r0, r1
 80041ea:	f7fc ff99 	bl	8001120 <actuator_buzzer>
  HAL_Delay(100);
 80041ee:	2064      	movs	r0, #100	; 0x64
 80041f0:	f000 ffea 	bl	80051c8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 80041f4:	4817      	ldr	r0, [pc, #92]	; (8004254 <main+0x234>)
 80041f6:	f003 ff05 	bl	8008004 <HAL_TIM_Base_Start_IT>
  mouse_odom[0] = 0;
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <main+0x238>)
  omni_odom[0] = 0;
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <main+0x23c>)
  mouse_odom[0] = 0;
 80041fe:	ed82 8a00 	vstr	s16, [r2]
  mouse_odom[1] = 0;
 8004202:	ed82 8a01 	vstr	s16, [r2, #4]
  omni_odom[0] = 0;
 8004206:	ed83 8a00 	vstr	s16, [r3]
  omni_odom[1] = 0;
 800420a:	ed83 8a01 	vstr	s16, [r3, #4]
  while (1) {
 800420e:	e7fe      	b.n	800420e <main+0x1ee>
 8004210:	200010dc 	.word	0x200010dc
 8004214:	200015ec 	.word	0x200015ec
 8004218:	20000068 	.word	0x20000068
 800421c:	20001868 	.word	0x20001868
 8004220:	0800d974 	.word	0x0800d974
 8004224:	20000c88 	.word	0x20000c88
 8004228:	20000cec 	.word	0x20000cec
 800422c:	200018f8 	.word	0x200018f8
 8004230:	00000000 	.word	0x00000000
 8004234:	200014d4 	.word	0x200014d4
 8004238:	20001014 	.word	0x20001014
 800423c:	200002d0 	.word	0x200002d0
 8004240:	437a0000 	.word	0x437a0000
 8004244:	420c0000 	.word	0x420c0000
 8004248:	42480000 	.word	0x42480000
 800424c:	42b40000 	.word	0x42b40000
 8004250:	48000800 	.word	0x48000800
 8004254:	20001638 	.word	0x20001638
 8004258:	20001120 	.word	0x20001120
 800425c:	20001144 	.word	0x20001144

08004260 <HAL_FDCAN_RxFifo0Callback>:
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8004260:	07cb      	lsls	r3, r1, #31
 8004262:	d400      	bmi.n	8004266 <HAL_FDCAN_RxFifo0Callback+0x6>
 8004264:	4770      	bx	lr
{
 8004266:	b530      	push	{r4, r5, lr}
 8004268:	b08d      	sub	sp, #52	; 0x34
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800426a:	466b      	mov	r3, sp
 800426c:	aa02      	add	r2, sp, #8
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	f002 f990 	bl	8006594 <HAL_FDCAN_GetRxMessage>
 8004274:	2800      	cmp	r0, #0
 8004276:	f040 809f 	bne.w	80043b8 <HAL_FDCAN_RxFifo0Callback+0x158>
    rx_can_id = RxHeader.Identifier;
 800427a:	9b02      	ldr	r3, [sp, #8]
    switch (rx_can_id) {
 800427c:	f240 2241 	movw	r2, #577	; 0x241
 8004280:	b29c      	uxth	r4, r3
 8004282:	4294      	cmp	r4, r2
 8004284:	d833      	bhi.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
 8004286:	f413 4f7e 	tst.w	r3, #65024	; 0xfe00
 800428a:	d026      	beq.n	80042da <HAL_FDCAN_RxFifo0Callback+0x7a>
 800428c:	f5a4 7500 	sub.w	r5, r4, #512	; 0x200
 8004290:	2d41      	cmp	r5, #65	; 0x41
 8004292:	d82c      	bhi.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
 8004294:	e8df f005 	tbb	[pc, r5]
 8004298:	4e4e4e4e 	.word	0x4e4e4e4e
 800429c:	2b2b2b2b 	.word	0x2b2b2b2b
 80042a0:	2b2b2b2b 	.word	0x2b2b2b2b
 80042a4:	2b2b2b2b 	.word	0x2b2b2b2b
 80042a8:	2d2d2d2d 	.word	0x2d2d2d2d
 80042ac:	2b2d2d2d 	.word	0x2b2d2d2d
 80042b0:	2b2b2b2b 	.word	0x2b2b2b2b
 80042b4:	2b2b2b2b 	.word	0x2b2b2b2b
 80042b8:	38383838 	.word	0x38383838
 80042bc:	2b2b3838 	.word	0x2b2b3838
 80042c0:	2b2b2b2b 	.word	0x2b2b2b2b
 80042c4:	2b2b2b2b 	.word	0x2b2b2b2b
 80042c8:	43434343 	.word	0x43434343
 80042cc:	2b2b2b43 	.word	0x2b2b2b43
 80042d0:	2b2b2b2b 	.word	0x2b2b2b2b
 80042d4:	2b2b2b2b 	.word	0x2b2b2b2b
 80042d8:	6986      	.short	0x6986
 80042da:	2c00      	cmp	r4, #0
 80042dc:	d066      	beq.n	80043ac <HAL_FDCAN_RxFifo0Callback+0x14c>
 80042de:	2c01      	cmp	r4, #1
 80042e0:	d105      	bne.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
        error_no[0] = RxData[0];
 80042e2:	4b36      	ldr	r3, [pc, #216]	; (80043bc <HAL_FDCAN_RxFifo0Callback+0x15c>)
 80042e4:	f8bd 2000 	ldrh.w	r2, [sp]
 80042e8:	801a      	strh	r2, [r3, #0]
        maintask_stop();
 80042ea:	f7ff fa17 	bl	800371c <maintask_stop>
}
 80042ee:	b00d      	add	sp, #52	; 0x34
 80042f0:	bd30      	pop	{r4, r5, pc}
        power_voltage[rx_can_id - 0x210] = uchar4_to_float(RxData);
 80042f2:	4668      	mov	r0, sp
 80042f4:	f000 fd52 	bl	8004d9c <uchar4_to_float>
 80042f8:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_FDCAN_RxFifo0Callback+0x160>)
 80042fa:	f5a4 7404 	sub.w	r4, r4, #528	; 0x210
 80042fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004302:	ed83 0a00 	vstr	s0, [r3]
        break;
 8004306:	e7f2      	b.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
        temperature[rx_can_id - 0x220] = uchar4_to_float(RxData);
 8004308:	4668      	mov	r0, sp
 800430a:	f000 fd47 	bl	8004d9c <uchar4_to_float>
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_FDCAN_RxFifo0Callback+0x164>)
 8004310:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8004314:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004318:	ed83 0a00 	vstr	s0, [r3]
        break;
 800431c:	e7e7      	b.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
        amplitude[rx_can_id - 0x230] = uchar4_to_float(RxData);
 800431e:	4668      	mov	r0, sp
 8004320:	f000 fd3c 	bl	8004d9c <uchar4_to_float>
 8004324:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8004326:	f5a4 740c 	sub.w	r4, r4, #560	; 0x230
 800432a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800432e:	ed83 0a00 	vstr	s0, [r3]
        break;
 8004332:	e7dc      	b.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
        motor_enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8004334:	a801      	add	r0, sp, #4
 8004336:	f000 fd31 	bl	8004d9c <uchar4_to_float>
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_FDCAN_RxFifo0Callback+0x16c>)
 800433c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004340:	ed83 0a00 	vstr	s0, [r3]
        motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8004344:	4668      	mov	r0, sp
 8004346:	f000 fd29 	bl	8004d9c <uchar4_to_float>
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <HAL_FDCAN_RxFifo0Callback+0x170>)
        motor_feedback_velocity[rx_can_id - 0x200] = motor_feedback[3] * OMNI_DIR_LENGTH;
 800434c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80043d4 <HAL_FDCAN_RxFifo0Callback+0x174>
        motor_enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8004350:	00ad      	lsls	r5, r5, #2
        motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8004352:	195a      	adds	r2, r3, r5
 8004354:	ed82 0a00 	vstr	s0, [r2]
        motor_feedback_velocity[rx_can_id - 0x200] = motor_feedback[3] * OMNI_DIR_LENGTH;
 8004358:	edd3 7a03 	vldr	s15, [r3, #12]
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_FDCAN_RxFifo0Callback+0x178>)
 800435e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004362:	442b      	add	r3, r5
 8004364:	edc3 7a00 	vstr	s15, [r3]
        break;
 8004368:	e7c1      	b.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
        mouse_raw_latest[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 800436a:	9a00      	ldr	r2, [sp, #0]
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_FDCAN_RxFifo0Callback+0x17c>)
 800436e:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80043e0 <HAL_FDCAN_RxFifo0Callback+0x180>
 8004372:	ed93 7a00 	vldr	s14, [r3]
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 8004376:	edd3 7a01 	vldr	s15, [r3, #4]
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 800437a:	b211      	sxth	r1, r2
 800437c:	ee06 1a10 	vmov	s12, r1
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 8004380:	1411      	asrs	r1, r2, #16
 8004382:	ee06 1a90 	vmov	s13, r1
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 8004386:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 800438a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 800438e:	eea6 7a25 	vfma.f32	s14, s12, s11
        mouse_raw_latest[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8004392:	4914      	ldr	r1, [pc, #80]	; (80043e4 <HAL_FDCAN_RxFifo0Callback+0x184>)
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 8004394:	eee6 7aa5 	vfma.f32	s15, s13, s11
        mouse_raw_latest[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8004398:	600a      	str	r2, [r1, #0]
        mouse_odom[0] += (float)mouse_raw_latest[0] / 1000;
 800439a:	ed83 7a00 	vstr	s14, [r3]
        mouse_odom[1] += (float)mouse_raw_latest[1] / 1000;
 800439e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80043a2:	e7a4      	b.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
        ball_detection[0] = RxData[0];
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_FDCAN_RxFifo0Callback+0x188>)
 80043a6:	9a00      	ldr	r2, [sp, #0]
 80043a8:	601a      	str	r2, [r3, #0]
        break;
 80043aa:	e7a0      	b.n	80042ee <HAL_FDCAN_RxFifo0Callback+0x8e>
        error_no[0] = RxData[0];
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <HAL_FDCAN_RxFifo0Callback+0x15c>)
 80043ae:	f8bd 2000 	ldrh.w	r2, [sp]
 80043b2:	801a      	strh	r2, [r3, #0]
        Error_Handler();
 80043b4:	f7ff fdee 	bl	8003f94 <Error_Handler>
      Error_Handler();
 80043b8:	f7ff fdec 	bl	8003f94 <Error_Handler>
 80043bc:	200010cc 	.word	0x200010cc
 80043c0:	20001488 	.word	0x20001488
 80043c4:	20001528 	.word	0x20001528
 80043c8:	20001050 	.word	0x20001050
 80043cc:	200010e4 	.word	0x200010e4
 80043d0:	200010f8 	.word	0x200010f8
 80043d4:	3e3426c8 	.word	0x3e3426c8
 80043d8:	2000110c 	.word	0x2000110c
 80043dc:	20001120 	.word	0x20001120
 80043e0:	3a83126f 	.word	0x3a83126f
 80043e4:	20001128 	.word	0x20001128
 80043e8:	20001064 	.word	0x20001064

080043ec <delayUs>:
cycle_cnt = SysTick->VAL;
} while (ms != HAL_GetTick());
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
}

void delayUs(uint16_t micros) {
 80043ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	4682      	mov	sl, r0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 80043f2:	f002 fe8b 	bl	800710c <HAL_RCC_GetSysClockFreq>
 80043f6:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <delayUs+0x7c>)
 80043f8:	fba3 3700 	umull	r3, r7, r3, r0
 80043fc:	0cbf      	lsrs	r7, r7, #18
cycle_cnt = SysTick->VAL;
 80043fe:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
ms = HAL_GetTick();
 8004402:	f7fe fd0f 	bl	8002e24 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8004406:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 8004408:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 800440a:	f7fe fd0b 	bl	8002e24 <HAL_GetTick>
 800440e:	4284      	cmp	r4, r0
 8004410:	d1f7      	bne.n	8004402 <delayUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004412:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8004416:	fb08 f907 	mul.w	r9, r8, r7
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 800441a:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8004468 <delayUs+0x7c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 800441e:	eba9 0905 	sub.w	r9, r9, r5
cycle_cnt = SysTick->VAL;
 8004422:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004426:	fbb9 f9f7 	udiv	r9, r9, r7
 800442a:	fb08 9904 	mla	r9, r8, r4, r9
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 800442e:	f002 fe6d 	bl	800710c <HAL_RCC_GetSysClockFreq>
 8004432:	fbab 3700 	umull	r3, r7, fp, r0
 8004436:	0cbf      	lsrs	r7, r7, #18
ms = HAL_GetTick();
 8004438:	f7fe fcf4 	bl	8002e24 <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 800443c:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 800443e:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 8004440:	f7fe fcf0 	bl	8002e24 <HAL_GetTick>
 8004444:	4284      	cmp	r4, r0
 8004446:	d1f7      	bne.n	8004438 <delayUs+0x4c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004448:	fb08 f307 	mul.w	r3, r8, r7
 800444c:	1b5b      	subs	r3, r3, r5
 800444e:	fbb3 f3f7 	udiv	r3, r3, r7
uint32_t start = getUs();
while (getUs()-start < (uint32_t) micros) {
 8004452:	eba3 0309 	sub.w	r3, r3, r9
 8004456:	fb08 3304 	mla	r3, r8, r4, r3
 800445a:	4553      	cmp	r3, sl
 800445c:	d201      	bcs.n	8004462 <delayUs+0x76>
	asm("nop");
 800445e:	bf00      	nop
 8004460:	e7e5      	b.n	800442e <delayUs+0x42>
}
}
 8004462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004466:	bf00      	nop
 8004468:	431bde83 	.word	0x431bde83
 800446c:	00000000 	.word	0x00000000

08004470 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004470:	b508      	push	{r3, lr}
 8004472:	ee11 0a10 	vmov	r0, s2
 8004476:	ed2d 8b08 	vpush	{d8-d11}
 800447a:	eeb0 9a61 	vmov.f32	s18, s3
 800447e:	eeb0 aa60 	vmov.f32	s20, s1
 8004482:	eeb0 8a40 	vmov.f32	s16, s0
	float32_t v_round;
	float32_t m1, m2, m3, m4;

	v_round=ROBOT_RADIUS*omega_omni;
 8004486:	f7fc f887 	bl	8000598 <__aeabi_f2d>
 800448a:	a329      	add	r3, pc, #164	; (adr r3, 8004530 <omni_move+0xc0>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fc f8da 	bl	8000648 <__aeabi_dmul>
 8004494:	f7fc fbd0 	bl	8000c38 <__aeabi_d2f>

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni;
 8004498:	eddf 7a21 	vldr	s15, [pc, #132]	; 8004520 <omni_move+0xb0>
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 800449c:	eddf 8a21 	vldr	s17, [pc, #132]	; 8004524 <omni_move+0xb4>
 80044a0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8004528 <omni_move+0xb8>
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni;
 80044a4:	eddf aa21 	vldr	s21, [pc, #132]	; 800452c <omni_move+0xbc>
 80044a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80044ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044b0:	eeb0 0a67 	vmov.f32	s0, s15
 80044b4:	eeaa 0a07 	vfma.f32	s0, s20, s14
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 80044b8:	ee68 8a28 	vmul.f32	s17, s16, s17
	v_round=ROBOT_RADIUS*omega_omni;
 80044bc:	ee09 0a90 	vmov	s19, r0
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 80044c0:	eeea 8a26 	vfma.f32	s17, s20, s13
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni;
 80044c4:	eeda 7a07 	vfnms.f32	s15, s20, s14
 80044c8:	ee0b 0a10 	vmov	s22, r0
 80044cc:	ee3a 8a08 	vadd.f32	s16, s20, s16
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni;
 80044d0:	ee39 0a80 	vadd.f32	s0, s19, s0
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni;
 80044d4:	eea8 ba26 	vfma.f32	s22, s16, s13
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni;

	actuator_motor1(m1,duty_Limit);
 80044d8:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80044dc:	eef0 0a49 	vmov.f32	s1, s18
 80044e0:	eeb0 8a67 	vmov.f32	s16, s15
 80044e4:	f7fc fd76 	bl	8000fd4 <actuator_motor1>
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni;
 80044e8:	ee39 0aa8 	vadd.f32	s0, s19, s17
	actuator_motor2(m2,duty_Limit);
 80044ec:	eef0 0a49 	vmov.f32	s1, s18
 80044f0:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80044f4:	f7fc fd7c 	bl	8000ff0 <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 80044f8:	ee2b 0a2a 	vmul.f32	s0, s22, s21
 80044fc:	eef0 0a49 	vmov.f32	s1, s18
 8004500:	f7fc fd84 	bl	800100c <actuator_motor3>
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni;
 8004504:	ee38 0a29 	vadd.f32	s0, s16, s19
	actuator_motor4(m4,duty_Limit);
 8004508:	eef0 0a49 	vmov.f32	s1, s18
 800450c:	ee20 0a2a 	vmul.f32	s0, s0, s21
}
 8004510:	ecbd 8b08 	vpop	{d8-d11}
 8004514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	actuator_motor4(m4,duty_Limit);
 8004518:	f7fc bd86 	b.w	8001028 <actuator_motor4>
 800451c:	f3af 8000 	nop.w
 8004520:	3f5db3d7 	.word	0x3f5db3d7
 8004524:	3f3504f3 	.word	0x3f3504f3
 8004528:	bf3504f3 	.word	0xbf3504f3
 800452c:	40b5e430 	.word	0x40b5e430
 8004530:	47ae147b 	.word	0x47ae147b
 8004534:	3fb47ae1 	.word	0x3fb47ae1

08004538 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004538:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800453a:	4811      	ldr	r0, [pc, #68]	; (8004580 <MX_SPI1_Init+0x48>)
 800453c:	4c11      	ldr	r4, [pc, #68]	; (8004584 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800453e:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004542:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004544:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004548:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800454c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004550:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004554:	2430      	movs	r4, #48	; 0x30
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004556:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004558:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800455a:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800455c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004560:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004564:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004568:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800456c:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800456e:	f003 f9c9 	bl	8007904 <HAL_SPI_Init>
 8004572:	b900      	cbnz	r0, 8004576 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004574:	bd10      	pop	{r4, pc}
 8004576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800457a:	f7ff bd0b 	b.w	8003f94 <Error_Handler>
 800457e:	bf00      	nop
 8004580:	20001588 	.word	0x20001588
 8004584:	40013000 	.word	0x40013000

08004588 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004588:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800458a:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_SPI_MspInit+0x70>)
 800458c:	6801      	ldr	r1, [r0, #0]
{
 800458e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8004592:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004598:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800459c:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80045a0:	b009      	add	sp, #36	; 0x24
 80045a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045ae:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80045f0 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60
 80045ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045c0:	9200      	str	r2, [sp, #0]
 80045c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045d6:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045dc:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e0:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045e2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e4:	f002 f9ac 	bl	8006940 <HAL_GPIO_Init>
}
 80045e8:	b009      	add	sp, #36	; 0x24
 80045ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80045ee:	bf00      	nop
 80045f0:	000000e0 	.word	0x000000e0
 80045f4:	00000002 	.word	0x00000002
 80045f8:	40013000 	.word	0x40013000

080045fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_MspInit+0x30>)
 80045fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	661a      	str	r2, [r3, #96]	; 0x60
 8004606:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004608:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460a:	f002 0201 	and.w	r2, r2, #1
 800460e:	9200      	str	r2, [sp, #0]
 8004610:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004614:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004618:	659a      	str	r2, [r3, #88]	; 0x58
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004624:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8004626:	f002 bb1d 	b.w	8006c64 <HAL_PWREx_DisableUCPDDeadBattery>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000

08004630 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop

08004634 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004634:	e7fe      	b.n	8004634 <HardFault_Handler>
 8004636:	bf00      	nop

08004638 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004638:	e7fe      	b.n	8004638 <MemManage_Handler>
 800463a:	bf00      	nop

0800463c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800463c:	e7fe      	b.n	800463c <BusFault_Handler>
 800463e:	bf00      	nop

08004640 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004640:	e7fe      	b.n	8004640 <UsageFault_Handler>
 8004642:	bf00      	nop

08004644 <SVC_Handler>:
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop

08004648 <DebugMon_Handler>:
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop

0800464c <PendSV_Handler>:
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop

08004650 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004650:	f000 bdae 	b.w	80051b0 <HAL_IncTick>

08004654 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <DMA1_Channel1_IRQHandler+0x8>)
 8004656:	f001 bd21 	b.w	800609c <HAL_DMA_IRQHandler>
 800465a:	bf00      	nop
 800465c:	20001744 	.word	0x20001744

08004660 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <DMA1_Channel2_IRQHandler+0x8>)
 8004662:	f001 bd1b 	b.w	800609c <HAL_DMA_IRQHandler>
 8004666:	bf00      	nop
 8004668:	20001804 	.word	0x20001804

0800466c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800466c:	4801      	ldr	r0, [pc, #4]	; (8004674 <DMA1_Channel3_IRQHandler+0x8>)
 800466e:	f001 bd15 	b.w	800609c <HAL_DMA_IRQHandler>
 8004672:	bf00      	nop
 8004674:	2000039c 	.word	0x2000039c

08004678 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004678:	4801      	ldr	r0, [pc, #4]	; (8004680 <DMA1_Channel4_IRQHandler+0x8>)
 800467a:	f001 bd0f 	b.w	800609c <HAL_DMA_IRQHandler>
 800467e:	bf00      	nop
 8004680:	200003fc 	.word	0x200003fc

08004684 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004684:	4801      	ldr	r0, [pc, #4]	; (800468c <DMA1_Channel5_IRQHandler+0x8>)
 8004686:	f001 bd09 	b.w	800609c <HAL_DMA_IRQHandler>
 800468a:	bf00      	nop
 800468c:	2000033c 	.word	0x2000033c

08004690 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <DMA1_Channel6_IRQHandler+0x8>)
 8004692:	f001 bd03 	b.w	800609c <HAL_DMA_IRQHandler>
 8004696:	bf00      	nop
 8004698:	20001684 	.word	0x20001684

0800469c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <DMA1_Channel7_IRQHandler+0x8>)
 800469e:	f001 bcfd 	b.w	800609c <HAL_DMA_IRQHandler>
 80046a2:	bf00      	nop
 80046a4:	200016e4 	.word	0x200016e4

080046a8 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <FDCAN1_IT0_IRQHandler+0x8>)
 80046aa:	f002 b885 	b.w	80067b8 <HAL_FDCAN_IRQHandler>
 80046ae:	bf00      	nop
 80046b0:	20000c88 	.word	0x20000c88

080046b4 <FDCAN1_IT1_IRQHandler>:
 80046b4:	4801      	ldr	r0, [pc, #4]	; (80046bc <FDCAN1_IT1_IRQHandler+0x8>)
 80046b6:	f002 b87f 	b.w	80067b8 <HAL_FDCAN_IRQHandler>
 80046ba:	bf00      	nop
 80046bc:	20000c88 	.word	0x20000c88

080046c0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 80046c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046c4:	f002 ba4c 	b.w	8006b60 <HAL_GPIO_EXTI_IRQHandler>

080046c8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <USART2_IRQHandler+0x8>)
 80046ca:	f004 b9ed 	b.w	8008aa8 <HAL_UART_IRQHandler>
 80046ce:	bf00      	nop
 80046d0:	200018f8 	.word	0x200018f8

080046d4 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80046d4:	4801      	ldr	r0, [pc, #4]	; (80046dc <TIM7_DAC_IRQHandler+0x8>)
 80046d6:	f003 be2b 	b.w	8008330 <HAL_TIM_IRQHandler>
 80046da:	bf00      	nop
 80046dc:	20001638 	.word	0x20001638

080046e0 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <FDCAN2_IT0_IRQHandler+0x8>)
 80046e2:	f002 b869 	b.w	80067b8 <HAL_FDCAN_IRQHandler>
 80046e6:	bf00      	nop
 80046e8:	20000cec 	.word	0x20000cec

080046ec <FDCAN2_IT1_IRQHandler>:
 80046ec:	4801      	ldr	r0, [pc, #4]	; (80046f4 <FDCAN2_IT1_IRQHandler+0x8>)
 80046ee:	f002 b863 	b.w	80067b8 <HAL_FDCAN_IRQHandler>
 80046f2:	bf00      	nop
 80046f4:	20000cec 	.word	0x20000cec

080046f8 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80046f8:	4801      	ldr	r0, [pc, #4]	; (8004700 <LPUART1_IRQHandler+0x8>)
 80046fa:	f004 b9d5 	b.w	8008aa8 <HAL_UART_IRQHandler>
 80046fe:	bf00      	nop
 8004700:	20001868 	.word	0x20001868

08004704 <DMA1_Channel8_IRQHandler>:
void DMA1_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004704:	4801      	ldr	r0, [pc, #4]	; (800470c <DMA1_Channel8_IRQHandler+0x8>)
 8004706:	f001 bcc9 	b.w	800609c <HAL_DMA_IRQHandler>
 800470a:	bf00      	nop
 800470c:	200017a4 	.word	0x200017a4

08004710 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004710:	2001      	movs	r0, #1
 8004712:	4770      	bx	lr

08004714 <_kill>:

int _kill(int pid, int sig)
{
 8004714:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004716:	f006 f80f 	bl	800a738 <__errno>
 800471a:	2316      	movs	r3, #22
 800471c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800471e:	f04f 30ff 	mov.w	r0, #4294967295
 8004722:	bd08      	pop	{r3, pc}

08004724 <_exit>:

void _exit (int status)
{
 8004724:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004726:	f006 f807 	bl	800a738 <__errno>
 800472a:	2316      	movs	r3, #22
 800472c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800472e:	e7fe      	b.n	800472e <_exit+0xa>

08004730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004730:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004732:	1e16      	subs	r6, r2, #0
 8004734:	dd07      	ble.n	8004746 <_read+0x16>
 8004736:	460c      	mov	r4, r1
 8004738:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800473a:	f3af 8000 	nop.w
 800473e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004742:	42a5      	cmp	r5, r4
 8004744:	d1f9      	bne.n	800473a <_read+0xa>
	}

return len;
}
 8004746:	4630      	mov	r0, r6
 8004748:	bd70      	pop	{r4, r5, r6, pc}
 800474a:	bf00      	nop

0800474c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800474c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800474e:	1e16      	subs	r6, r2, #0
 8004750:	dd07      	ble.n	8004762 <_write+0x16>
 8004752:	460c      	mov	r4, r1
 8004754:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8004756:	f814 0b01 	ldrb.w	r0, [r4], #1
 800475a:	f7fe fb51 	bl	8002e00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475e:	42ac      	cmp	r4, r5
 8004760:	d1f9      	bne.n	8004756 <_write+0xa>
	}
	return len;
}
 8004762:	4630      	mov	r0, r6
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	bf00      	nop

08004768 <_close>:

int _close(int file)
{
	return -1;
}
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004774:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004776:	2000      	movs	r0, #0
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800477c:	2001      	movs	r0, #1
 800477e:	4770      	bx	lr

08004780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004780:	2000      	movs	r0, #0
 8004782:	4770      	bx	lr

08004784 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <SystemInit+0x18>)
 8004786:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800478a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800478e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004796:	6099      	str	r1, [r3, #8]
#endif
}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80047a0:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80047a2:	4c33      	ldr	r4, [pc, #204]	; (8004870 <MX_TIM5_Init+0xd0>)
 80047a4:	4a33      	ldr	r2, [pc, #204]	; (8004874 <MX_TIM5_Init+0xd4>)
 80047a6:	6022      	str	r2, [r4, #0]
{
 80047a8:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 80047aa:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ac:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 80047ae:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80047b0:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 80047b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047b6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047ba:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80047be:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80047c2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 80047c6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ca:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047cc:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ce:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80047d2:	f003 fc59 	bl	8008088 <HAL_TIM_PWM_Init>
 80047d6:	bb00      	cbnz	r0, 800481a <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80047da:	4825      	ldr	r0, [pc, #148]	; (8004870 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047dc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80047de:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80047e2:	f003 fffb 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 80047e6:	b9f0      	cbnz	r0, 8004826 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047e8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8004860 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047ec:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80047ee:	4820      	ldr	r0, [pc, #128]	; (8004870 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047f0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80047f2:	2204      	movs	r2, #4
 80047f4:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047fa:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80047fc:	f003 fee4 	bl	80085c8 <HAL_TIM_PWM_ConfigChannel>
 8004800:	b970      	cbnz	r0, 8004820 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 8004802:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <MX_TIM5_Init+0xd4>)
 8004804:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004806:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8004808:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800480e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004812:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 8004814:	d00a      	beq.n	800482c <MX_TIM5_Init+0x8c>
}
 8004816:	b012      	add	sp, #72	; 0x48
 8004818:	bd10      	pop	{r4, pc}
    Error_Handler();
 800481a:	f7ff fbbb 	bl	8003f94 <Error_Handler>
 800481e:	e7db      	b.n	80047d8 <MX_TIM5_Init+0x38>
    Error_Handler();
 8004820:	f7ff fbb8 	bl	8003f94 <Error_Handler>
 8004824:	e7ed      	b.n	8004802 <MX_TIM5_Init+0x62>
    Error_Handler();
 8004826:	f7ff fbb5 	bl	8003f94 <Error_Handler>
 800482a:	e7dd      	b.n	80047e8 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800482c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004830:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8004834:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8004868 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800483a:	480f      	ldr	r0, [pc, #60]	; (8004878 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800483c:	f042 0204 	orr.w	r2, r2, #4
 8004840:	64da      	str	r2, [r3, #76]	; 0x4c
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800484a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800484c:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 800484e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004852:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8004854:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004856:	f002 f873 	bl	8006940 <HAL_GPIO_Init>
}
 800485a:	b012      	add	sp, #72	; 0x48
 800485c:	bd10      	pop	{r4, pc}
 800485e:	bf00      	nop
 8004860:	00000060 	.word	0x00000060
 8004864:	00000000 	.word	0x00000000
 8004868:	00001000 	.word	0x00001000
 800486c:	00000002 	.word	0x00000002
 8004870:	200015ec 	.word	0x200015ec
 8004874:	40000c00 	.word	0x40000c00
 8004878:	48000800 	.word	0x48000800

0800487c <MX_TIM7_Init>:
{
 800487c:	b500      	push	{lr}
  htim7.Instance = TIM7;
 800487e:	4812      	ldr	r0, [pc, #72]	; (80048c8 <MX_TIM7_Init+0x4c>)
 8004880:	4912      	ldr	r1, [pc, #72]	; (80048cc <MX_TIM7_Init+0x50>)
{
 8004882:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 8004884:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004886:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8004888:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 2000;
 800488c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004890:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 2000;
 8004894:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004898:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800489a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800489c:	f003 fb18 	bl	8007ed0 <HAL_TIM_Base_Init>
 80048a0:	b950      	cbnz	r0, 80048b8 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80048a4:	4808      	ldr	r0, [pc, #32]	; (80048c8 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80048a8:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80048ac:	f003 ff96 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 80048b0:	b928      	cbnz	r0, 80048be <MX_TIM7_Init+0x42>
}
 80048b2:	b005      	add	sp, #20
 80048b4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80048b8:	f7ff fb6c 	bl	8003f94 <Error_Handler>
 80048bc:	e7f1      	b.n	80048a2 <MX_TIM7_Init+0x26>
    Error_Handler();
 80048be:	f7ff fb69 	bl	8003f94 <Error_Handler>
}
 80048c2:	b005      	add	sp, #20
 80048c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80048c8:	20001638 	.word	0x20001638
 80048cc:	40001400 	.word	0x40001400

080048d0 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_TIM_PWM_MspInit+0x28>)
 80048d2:	6802      	ldr	r2, [r0, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d000      	beq.n	80048da <HAL_TIM_PWM_MspInit+0xa>
 80048d8:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048da:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 80048de:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048e2:	f042 0208 	orr.w	r2, r2, #8
 80048e6:	659a      	str	r2, [r3, #88]	; 0x58
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	9b01      	ldr	r3, [sp, #4]
}
 80048f2:	b002      	add	sp, #8
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40000c00 	.word	0x40000c00

080048fc <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_TIM_Base_MspInit+0x3c>)
 80048fe:	6802      	ldr	r2, [r0, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d000      	beq.n	8004906 <HAL_TIM_Base_MspInit+0xa>
 8004904:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004906:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 800490a:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800490c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800490e:	f041 0120 	orr.w	r1, r1, #32
 8004912:	6599      	str	r1, [r3, #88]	; 0x58
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8004916:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 800491e:	2037      	movs	r0, #55	; 0x37
 8004920:	2200      	movs	r2, #0
 8004922:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004924:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8004926:	f001 f9eb 	bl	8005d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800492a:	2037      	movs	r0, #55	; 0x37
}
 800492c:	b003      	add	sp, #12
 800492e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8004932:	f001 ba23 	b.w	8005d7c <HAL_NVIC_EnableIRQ>
 8004936:	bf00      	nop
 8004938:	40001400 	.word	0x40001400
 800493c:	00000000 	.word	0x00000000

08004940 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004940:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80049c8 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 8004944:	4822      	ldr	r0, [pc, #136]	; (80049d0 <MX_LPUART1_UART_Init+0x90>)
 8004946:	4923      	ldr	r1, [pc, #140]	; (80049d4 <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 8004948:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <MX_LPUART1_UART_Init+0x98>)
{
 800494a:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800494c:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 800494e:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004952:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004954:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800495a:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800495e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004962:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004966:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004968:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800496a:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800496c:	f004 fdce 	bl	800950c <HAL_UART_Init>
 8004970:	b970      	cbnz	r0, 8004990 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004972:	4817      	ldr	r0, [pc, #92]	; (80049d0 <MX_LPUART1_UART_Init+0x90>)
 8004974:	2100      	movs	r1, #0
 8004976:	f004 fed7 	bl	8009728 <HAL_UARTEx_SetTxFifoThreshold>
 800497a:	b988      	cbnz	r0, 80049a0 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800497c:	4814      	ldr	r0, [pc, #80]	; (80049d0 <MX_LPUART1_UART_Init+0x90>)
 800497e:	2100      	movs	r1, #0
 8004980:	f004 ff14 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 8004984:	b9a0      	cbnz	r0, 80049b0 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004986:	4812      	ldr	r0, [pc, #72]	; (80049d0 <MX_LPUART1_UART_Init+0x90>)
 8004988:	f004 feb0 	bl	80096ec <HAL_UARTEx_DisableFifoMode>
 800498c:	b9b8      	cbnz	r0, 80049be <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800498e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004990:	f7ff fb00 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004994:	480e      	ldr	r0, [pc, #56]	; (80049d0 <MX_LPUART1_UART_Init+0x90>)
 8004996:	2100      	movs	r1, #0
 8004998:	f004 fec6 	bl	8009728 <HAL_UARTEx_SetTxFifoThreshold>
 800499c:	2800      	cmp	r0, #0
 800499e:	d0ed      	beq.n	800497c <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 80049a0:	f7ff faf8 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049a4:	480a      	ldr	r0, [pc, #40]	; (80049d0 <MX_LPUART1_UART_Init+0x90>)
 80049a6:	2100      	movs	r1, #0
 80049a8:	f004 ff00 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d0ea      	beq.n	8004986 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 80049b0:	f7ff faf0 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80049b4:	4806      	ldr	r0, [pc, #24]	; (80049d0 <MX_LPUART1_UART_Init+0x90>)
 80049b6:	f004 fe99 	bl	80096ec <HAL_UARTEx_DisableFifoMode>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d0e7      	beq.n	800498e <MX_LPUART1_UART_Init+0x4e>
}
 80049be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80049c2:	f7ff bae7 	b.w	8003f94 <Error_Handler>
 80049c6:	bf00      	nop
	...
 80049d0:	20001868 	.word	0x20001868
 80049d4:	40008000 	.word	0x40008000
 80049d8:	001e8480 	.word	0x001e8480

080049dc <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049dc:	4821      	ldr	r0, [pc, #132]	; (8004a64 <MX_USART2_UART_Init+0x88>)
 80049de:	4922      	ldr	r1, [pc, #136]	; (8004a68 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 80049e0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 80049e4:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049e6:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 80049e8:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049ec:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80049ee:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80049f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049f4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049f8:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a00:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004a04:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004a06:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a08:	f004 fd80 	bl	800950c <HAL_UART_Init>
 8004a0c:	b970      	cbnz	r0, 8004a2c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a0e:	4815      	ldr	r0, [pc, #84]	; (8004a64 <MX_USART2_UART_Init+0x88>)
 8004a10:	2100      	movs	r1, #0
 8004a12:	f004 fe89 	bl	8009728 <HAL_UARTEx_SetTxFifoThreshold>
 8004a16:	b988      	cbnz	r0, 8004a3c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a18:	4812      	ldr	r0, [pc, #72]	; (8004a64 <MX_USART2_UART_Init+0x88>)
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	f004 fec6 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 8004a20:	b9a0      	cbnz	r0, 8004a4c <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004a22:	4810      	ldr	r0, [pc, #64]	; (8004a64 <MX_USART2_UART_Init+0x88>)
 8004a24:	f004 fe62 	bl	80096ec <HAL_UARTEx_DisableFifoMode>
 8004a28:	b9b8      	cbnz	r0, 8004a5a <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a2a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004a2c:	f7ff fab2 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a30:	480c      	ldr	r0, [pc, #48]	; (8004a64 <MX_USART2_UART_Init+0x88>)
 8004a32:	2100      	movs	r1, #0
 8004a34:	f004 fe78 	bl	8009728 <HAL_UARTEx_SetTxFifoThreshold>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d0ed      	beq.n	8004a18 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 8004a3c:	f7ff faaa 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a40:	4808      	ldr	r0, [pc, #32]	; (8004a64 <MX_USART2_UART_Init+0x88>)
 8004a42:	2100      	movs	r1, #0
 8004a44:	f004 feb2 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d0ea      	beq.n	8004a22 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8004a4c:	f7ff faa2 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004a50:	4804      	ldr	r0, [pc, #16]	; (8004a64 <MX_USART2_UART_Init+0x88>)
 8004a52:	f004 fe4b 	bl	80096ec <HAL_UARTEx_DisableFifoMode>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d0e7      	beq.n	8004a2a <MX_USART2_UART_Init+0x4e>
}
 8004a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004a5e:	f7ff ba99 	b.w	8003f94 <Error_Handler>
 8004a62:	bf00      	nop
 8004a64:	200018f8 	.word	0x200018f8
 8004a68:	40004400 	.word	0x40004400

08004a6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004a6c:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a6e:	481f      	ldr	r0, [pc, #124]	; (8004aec <MX_USART3_UART_Init+0x80>)
 8004a70:	4c1f      	ldr	r4, [pc, #124]	; (8004af0 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a72:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8004a74:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a78:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8004a7a:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a7e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a82:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a86:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a8a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a8e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a90:	f004 fd3c 	bl	800950c <HAL_UART_Init>
 8004a94:	b970      	cbnz	r0, 8004ab4 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a96:	4815      	ldr	r0, [pc, #84]	; (8004aec <MX_USART3_UART_Init+0x80>)
 8004a98:	2100      	movs	r1, #0
 8004a9a:	f004 fe45 	bl	8009728 <HAL_UARTEx_SetTxFifoThreshold>
 8004a9e:	b988      	cbnz	r0, 8004ac4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aa0:	4812      	ldr	r0, [pc, #72]	; (8004aec <MX_USART3_UART_Init+0x80>)
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	f004 fe82 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 8004aa8:	b9a0      	cbnz	r0, 8004ad4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004aaa:	4810      	ldr	r0, [pc, #64]	; (8004aec <MX_USART3_UART_Init+0x80>)
 8004aac:	f004 fe1e 	bl	80096ec <HAL_UARTEx_DisableFifoMode>
 8004ab0:	b9b8      	cbnz	r0, 8004ae2 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ab2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004ab4:	f7ff fa6e 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ab8:	480c      	ldr	r0, [pc, #48]	; (8004aec <MX_USART3_UART_Init+0x80>)
 8004aba:	2100      	movs	r1, #0
 8004abc:	f004 fe34 	bl	8009728 <HAL_UARTEx_SetTxFifoThreshold>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d0ed      	beq.n	8004aa0 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8004ac4:	f7ff fa66 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ac8:	4808      	ldr	r0, [pc, #32]	; (8004aec <MX_USART3_UART_Init+0x80>)
 8004aca:	2100      	movs	r1, #0
 8004acc:	f004 fe6e 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d0ea      	beq.n	8004aaa <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8004ad4:	f7ff fa5e 	bl	8003f94 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004ad8:	4804      	ldr	r0, [pc, #16]	; (8004aec <MX_USART3_UART_Init+0x80>)
 8004ada:	f004 fe07 	bl	80096ec <HAL_UARTEx_DisableFifoMode>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d0e7      	beq.n	8004ab2 <MX_USART3_UART_Init+0x46>
}
 8004ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004ae6:	f7ff ba55 	b.w	8003f94 <Error_Handler>
 8004aea:	bf00      	nop
 8004aec:	20001988 	.word	0x20001988
 8004af0:	40004800 	.word	0x40004800

08004af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4604      	mov	r4, r0
 8004af8:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afa:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004afc:	2254      	movs	r2, #84	; 0x54
 8004afe:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004b04:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8004b08:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b0a:	f005 fdc3 	bl	800a694 <memset>
  if(uartHandle->Instance==LPUART1)
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	4a92      	ldr	r2, [pc, #584]	; (8004d5c <HAL_UART_MspInit+0x268>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d008      	beq.n	8004b28 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8004b16:	4a92      	ldr	r2, [pc, #584]	; (8004d60 <HAL_UART_MspInit+0x26c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d067      	beq.n	8004bec <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8004b1c:	4a91      	ldr	r2, [pc, #580]	; (8004d64 <HAL_UART_MspInit+0x270>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f000 80c3 	beq.w	8004caa <HAL_UART_MspInit+0x1b6>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004b24:	b020      	add	sp, #128	; 0x80
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004b28:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b2a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004b2c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b2e:	f002 fc4d 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f040 80ff 	bne.w	8004d36 <HAL_UART_MspInit+0x242>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004b38:	4b8b      	ldr	r3, [pc, #556]	; (8004d68 <HAL_UART_MspInit+0x274>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8004b3a:	4e8c      	ldr	r6, [pc, #560]	; (8004d6c <HAL_UART_MspInit+0x278>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b46:	f002 0201 	and.w	r2, r2, #1
 8004b4a:	9200      	str	r2, [sp, #0]
 8004b4c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b50:	f042 0201 	orr.w	r2, r2, #1
 8004b54:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b5e:	220c      	movs	r2, #12
 8004b60:	2302      	movs	r3, #2
 8004b62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b66:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b68:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b70:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004b72:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8004b78:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7a:	f001 fee1 	bl	8006940 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004b7e:	497c      	ldr	r1, [pc, #496]	; (8004d70 <HAL_UART_MspInit+0x27c>)
 8004b80:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b82:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004b84:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004b88:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b8a:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b8c:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b8e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b92:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b96:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b9a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004b9c:	f001 f916 	bl	8005dcc <HAL_DMA_Init>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	f040 80c5 	bne.w	8004d30 <HAL_UART_MspInit+0x23c>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8004ba6:	4d73      	ldr	r5, [pc, #460]	; (8004d74 <HAL_UART_MspInit+0x280>)
 8004ba8:	4973      	ldr	r1, [pc, #460]	; (8004d78 <HAL_UART_MspInit+0x284>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004baa:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004bac:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bae:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004bb0:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004bb4:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb6:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bb8:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bba:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bbe:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004bc2:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004bc6:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bc8:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004bca:	f001 f8ff 	bl	8005dcc <HAL_DMA_Init>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	f040 80ab 	bne.w	8004d2a <HAL_UART_MspInit+0x236>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004bd8:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8004bda:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004bdc:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8004bde:	f001 f88f 	bl	8005d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004be2:	205b      	movs	r0, #91	; 0x5b
 8004be4:	f001 f8ca 	bl	8005d7c <HAL_NVIC_EnableIRQ>
}
 8004be8:	b020      	add	sp, #128	; 0x80
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004bec:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bee:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004bf0:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bf2:	f002 fbeb 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f040 80a0 	bne.w	8004d3c <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bfc:	4b5a      	ldr	r3, [pc, #360]	; (8004d68 <HAL_UART_MspInit+0x274>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfe:	485f      	ldr	r0, [pc, #380]	; (8004d7c <HAL_UART_MspInit+0x288>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004c02:	4e5f      	ldr	r6, [pc, #380]	; (8004d80 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c08:	659a      	str	r2, [r3, #88]	; 0x58
 8004c0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c0c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004c10:	9202      	str	r2, [sp, #8]
 8004c12:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c16:	f042 0202 	orr.w	r2, r2, #2
 8004c1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 8004c24:	2218      	movs	r2, #24
 8004c26:	2302      	movs	r3, #2
 8004c28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c2c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c2e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c36:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c38:	2307      	movs	r3, #7
 8004c3a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3c:	f001 fe80 	bl	8006940 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004c40:	4950      	ldr	r1, [pc, #320]	; (8004d84 <HAL_UART_MspInit+0x290>)
 8004c42:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c44:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004c46:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004c4a:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c4c:	2180      	movs	r1, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004c4e:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c50:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c54:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004c58:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c5c:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004c5e:	f001 f8b5 	bl	8005dcc <HAL_DMA_Init>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d170      	bne.n	8004d48 <HAL_UART_MspInit+0x254>
    hdma_usart2_tx.Instance = DMA1_Channel8;
 8004c66:	4d48      	ldr	r5, [pc, #288]	; (8004d88 <HAL_UART_MspInit+0x294>)
 8004c68:	4948      	ldr	r1, [pc, #288]	; (8004d8c <HAL_UART_MspInit+0x298>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004c6a:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004c6c:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c6e:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004c70:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c74:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c76:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c78:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c7a:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c7e:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c82:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004c86:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c88:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c8a:	f001 f89f 	bl	8005dcc <HAL_DMA_Init>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d157      	bne.n	8004d42 <HAL_UART_MspInit+0x24e>
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8004c92:	2200      	movs	r2, #0
 8004c94:	210c      	movs	r1, #12
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004c96:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8004c98:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004c9a:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8004c9c:	f001 f830 	bl	8005d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ca0:	2026      	movs	r0, #38	; 0x26
 8004ca2:	f001 f86b 	bl	8005d7c <HAL_NVIC_EnableIRQ>
}
 8004ca6:	b020      	add	sp, #128	; 0x80
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004caa:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cac:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004cae:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cb0:	f002 fb8c 	bl	80073cc <HAL_RCCEx_PeriphCLKConfig>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d14d      	bne.n	8004d54 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <HAL_UART_MspInit+0x274>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cba:	4835      	ldr	r0, [pc, #212]	; (8004d90 <HAL_UART_MspInit+0x29c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8004cbe:	4d35      	ldr	r5, [pc, #212]	; (8004d94 <HAL_UART_MspInit+0x2a0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8004cc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cc8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004ccc:	9204      	str	r2, [sp, #16]
 8004cce:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cd2:	f042 0204 	orr.w	r2, r2, #4
 8004cd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8004ce0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cea:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cec:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cf4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004cf6:	2307      	movs	r3, #7
 8004cf8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cfa:	f001 fe21 	bl	8006940 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004cfe:	4926      	ldr	r1, [pc, #152]	; (8004d98 <HAL_UART_MspInit+0x2a4>)
 8004d00:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d02:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004d04:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004d08:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d0a:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004d0c:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d0e:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d12:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004d16:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d1a:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004d1c:	f001 f856 	bl	8005dcc <HAL_DMA_Init>
 8004d20:	b9a8      	cbnz	r0, 8004d4e <HAL_UART_MspInit+0x25a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004d22:	67e5      	str	r5, [r4, #124]	; 0x7c
 8004d24:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8004d26:	b020      	add	sp, #128	; 0x80
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004d2a:	f7ff f933 	bl	8003f94 <Error_Handler>
 8004d2e:	e751      	b.n	8004bd4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8004d30:	f7ff f930 	bl	8003f94 <Error_Handler>
 8004d34:	e737      	b.n	8004ba6 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8004d36:	f7ff f92d 	bl	8003f94 <Error_Handler>
 8004d3a:	e6fd      	b.n	8004b38 <HAL_UART_MspInit+0x44>
      Error_Handler();
 8004d3c:	f7ff f92a 	bl	8003f94 <Error_Handler>
 8004d40:	e75c      	b.n	8004bfc <HAL_UART_MspInit+0x108>
      Error_Handler();
 8004d42:	f7ff f927 	bl	8003f94 <Error_Handler>
 8004d46:	e7a4      	b.n	8004c92 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8004d48:	f7ff f924 	bl	8003f94 <Error_Handler>
 8004d4c:	e78b      	b.n	8004c66 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8004d4e:	f7ff f921 	bl	8003f94 <Error_Handler>
 8004d52:	e7e6      	b.n	8004d22 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8004d54:	f7ff f91e 	bl	8003f94 <Error_Handler>
 8004d58:	e7ae      	b.n	8004cb8 <HAL_UART_MspInit+0x1c4>
 8004d5a:	bf00      	nop
 8004d5c:	40008000 	.word	0x40008000
 8004d60:	40004400 	.word	0x40004400
 8004d64:	40004800 	.word	0x40004800
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	20001684 	.word	0x20001684
 8004d70:	4002006c 	.word	0x4002006c
 8004d74:	200016e4 	.word	0x200016e4
 8004d78:	40020080 	.word	0x40020080
 8004d7c:	48000400 	.word	0x48000400
 8004d80:	20001744 	.word	0x20001744
 8004d84:	40020008 	.word	0x40020008
 8004d88:	200017a4 	.word	0x200017a4
 8004d8c:	40020094 	.word	0x40020094
 8004d90:	48000800 	.word	0x48000800
 8004d94:	20001804 	.word	0x20001804
 8004d98:	4002001c 	.word	0x4002001c

08004d9c <uchar4_to_float>:
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
    tmp.char4_value[1]=value[1];
    tmp.char4_value[2]=value[2];
    tmp.char4_value[3]=value[3];
    return tmp.float_value;
 8004d9c:	6803      	ldr	r3, [r0, #0]
 8004d9e:	ee00 3a10 	vmov	s0, r3
}
 8004da2:	4770      	bx	lr

08004da4 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
    Float_char4 tmp;
    tmp.float_value=float_value;
    value[0]=tmp.char4_value[0];
 8004da4:	ee10 3a10 	vmov	r3, s0
 8004da8:	6003      	str	r3, [r0, #0]
    value[1]=tmp.char4_value[1];
    value[2]=tmp.char4_value[2];
    value[3]=tmp.char4_value[3];
}
 8004daa:	4770      	bx	lr
 8004dac:	0000      	movs	r0, r0
	...

08004db0 <normalizeAngle>:
}

long map(long x, long in_min, long in_max, long out_min, long out_max) { return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; }

float normalizeAngle(float angle_rad)
{
 8004db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    while (angle_rad > M_PI) {
 8004db4:	ee10 0a10 	vmov	r0, s0
{
 8004db8:	ed2d 8b02 	vpush	{d8}
 8004dbc:	ee10 6a10 	vmov	r6, s0
    while (angle_rad > M_PI) {
 8004dc0:	f7fb fbea 	bl	8000598 <__aeabi_f2d>
 8004dc4:	a328      	add	r3, pc, #160	; (adr r3, 8004e68 <normalizeAngle+0xb8>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	4604      	mov	r4, r0
 8004dcc:	460d      	mov	r5, r1
 8004dce:	f7fb fecb 	bl	8000b68 <__aeabi_dcmpgt>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d043      	beq.n	8004e5e <normalizeAngle+0xae>
      angle_rad -= 2.0f * M_PI;
 8004dd6:	f20f 0998 	addw	r9, pc, #152	; 0x98
 8004dda:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad > M_PI) {
 8004dde:	a722      	add	r7, pc, #136	; (adr r7, 8004e68 <normalizeAngle+0xb8>)
 8004de0:	e9d7 6700 	ldrd	r6, r7, [r7]
      angle_rad -= 2.0f * M_PI;
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb fa74 	bl	80002d8 <__aeabi_dsub>
 8004df0:	f7fb ff22 	bl	8000c38 <__aeabi_d2f>
 8004df4:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8004df8:	f7fb fbce 	bl	8000598 <__aeabi_f2d>
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	463b      	mov	r3, r7
 8004e00:	4604      	mov	r4, r0
 8004e02:	460d      	mov	r5, r1
 8004e04:	f7fb feb0 	bl	8000b68 <__aeabi_dcmpgt>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d1eb      	bne.n	8004de4 <normalizeAngle+0x34>
    }
    while (angle_rad < -M_PI) {
 8004e0c:	a31a      	add	r3, pc, #104	; (adr r3, 8004e78 <normalizeAngle+0xc8>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f7fb fe89 	bl	8000b2c <__aeabi_dcmplt>
 8004e1a:	b1d0      	cbz	r0, 8004e52 <normalizeAngle+0xa2>
      angle_rad += 2.0f * M_PI;
 8004e1c:	f20f 0950 	addw	r9, pc, #80	; 0x50
 8004e20:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad < -M_PI) {
 8004e24:	a714      	add	r7, pc, #80	; (adr r7, 8004e78 <normalizeAngle+0xc8>)
 8004e26:	e9d7 6700 	ldrd	r6, r7, [r7]
      angle_rad += 2.0f * M_PI;
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fa53 	bl	80002dc <__adddf3>
 8004e36:	f7fb feff 	bl	8000c38 <__aeabi_d2f>
 8004e3a:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8004e3e:	f7fb fbab 	bl	8000598 <__aeabi_f2d>
 8004e42:	4632      	mov	r2, r6
 8004e44:	463b      	mov	r3, r7
 8004e46:	4604      	mov	r4, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	f7fb fe6f 	bl	8000b2c <__aeabi_dcmplt>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d1eb      	bne.n	8004e2a <normalizeAngle+0x7a>
    }
    return angle_rad;
}
 8004e52:	eeb0 0a48 	vmov.f32	s0, s16
 8004e56:	ecbd 8b02 	vpop	{d8}
 8004e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (angle_rad > M_PI) {
 8004e5e:	ee08 6a10 	vmov	s16, r6
 8004e62:	e7d3      	b.n	8004e0c <normalizeAngle+0x5c>
 8004e64:	f3af 8000 	nop.w
 8004e68:	54442d18 	.word	0x54442d18
 8004e6c:	400921fb 	.word	0x400921fb
 8004e70:	54442d18 	.word	0x54442d18
 8004e74:	401921fb 	.word	0x401921fb
 8004e78:	54442d18 	.word	0x54442d18
 8004e7c:	c00921fb 	.word	0xc00921fb

08004e80 <getAngleDiff>:

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8004e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while (angle_rad > M_PI) {
 8004e84:	ee10 0a10 	vmov	r0, s0
{
 8004e88:	ed2d 8b04 	vpush	{d8-d9}
 8004e8c:	eeb0 8a40 	vmov.f32	s16, s0
 8004e90:	eef0 8a60 	vmov.f32	s17, s1
    while (angle_rad > M_PI) {
 8004e94:	f7fb fb80 	bl	8000598 <__aeabi_f2d>
 8004e98:	a35f      	add	r3, pc, #380	; (adr r3, 8005018 <getAngleDiff+0x198>)
 8004e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	460f      	mov	r7, r1
 8004ea2:	f7fb fe61 	bl	8000b68 <__aeabi_dcmpgt>
 8004ea6:	b1d0      	cbz	r0, 8004ede <getAngleDiff+0x5e>
      angle_rad -= 2.0f * M_PI;
 8004ea8:	f20f 1974 	addw	r9, pc, #372	; 0x174
 8004eac:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad > M_PI) {
 8004eb0:	a559      	add	r5, pc, #356	; (adr r5, 8005018 <getAngleDiff+0x198>)
 8004eb2:	e9d5 4500 	ldrd	r4, r5, [r5]
      angle_rad -= 2.0f * M_PI;
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	464b      	mov	r3, r9
 8004eba:	4630      	mov	r0, r6
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb fa0b 	bl	80002d8 <__aeabi_dsub>
 8004ec2:	f7fb feb9 	bl	8000c38 <__aeabi_d2f>
 8004ec6:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8004eca:	f7fb fb65 	bl	8000598 <__aeabi_f2d>
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	f7fb fe47 	bl	8000b68 <__aeabi_dcmpgt>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d1eb      	bne.n	8004eb6 <getAngleDiff+0x36>
    while (angle_rad < -M_PI) {
 8004ede:	a352      	add	r3, pc, #328	; (adr r3, 8005028 <getAngleDiff+0x1a8>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	f7fb fe20 	bl	8000b2c <__aeabi_dcmplt>
 8004eec:	b1d0      	cbz	r0, 8004f24 <getAngleDiff+0xa4>
      angle_rad += 2.0f * M_PI;
 8004eee:	f20f 1930 	addw	r9, pc, #304	; 0x130
 8004ef2:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad < -M_PI) {
 8004ef6:	a54c      	add	r5, pc, #304	; (adr r5, 8005028 <getAngleDiff+0x1a8>)
 8004ef8:	e9d5 4500 	ldrd	r4, r5, [r5]
      angle_rad += 2.0f * M_PI;
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	4630      	mov	r0, r6
 8004f02:	4639      	mov	r1, r7
 8004f04:	f7fb f9ea 	bl	80002dc <__adddf3>
 8004f08:	f7fb fe96 	bl	8000c38 <__aeabi_d2f>
 8004f0c:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8004f10:	f7fb fb42 	bl	8000598 <__aeabi_f2d>
 8004f14:	4622      	mov	r2, r4
 8004f16:	462b      	mov	r3, r5
 8004f18:	4606      	mov	r6, r0
 8004f1a:	460f      	mov	r7, r1
 8004f1c:	f7fb fe06 	bl	8000b2c <__aeabi_dcmplt>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d1eb      	bne.n	8004efc <getAngleDiff+0x7c>
    while (angle_rad > M_PI) {
 8004f24:	ee18 0a90 	vmov	r0, s17
 8004f28:	f7fb fb36 	bl	8000598 <__aeabi_f2d>
 8004f2c:	a33a      	add	r3, pc, #232	; (adr r3, 8005018 <getAngleDiff+0x198>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	4604      	mov	r4, r0
 8004f34:	460d      	mov	r5, r1
 8004f36:	f7fb fe17 	bl	8000b68 <__aeabi_dcmpgt>
 8004f3a:	b1d8      	cbz	r0, 8004f74 <getAngleDiff+0xf4>
      angle_rad -= 2.0f * M_PI;
 8004f3c:	f20f 09e0 	addw	r9, pc, #224	; 0xe0
 8004f40:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad > M_PI) {
 8004f44:	f20f 0bd0 	addw	fp, pc, #208	; 0xd0
 8004f48:	e9db ab00 	ldrd	sl, fp, [fp]
      angle_rad -= 2.0f * M_PI;
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	4620      	mov	r0, r4
 8004f52:	4629      	mov	r1, r5
 8004f54:	f7fb f9c0 	bl	80002d8 <__aeabi_dsub>
 8004f58:	f7fb fe6e 	bl	8000c38 <__aeabi_d2f>
 8004f5c:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8004f60:	f7fb fb1a 	bl	8000598 <__aeabi_f2d>
 8004f64:	4652      	mov	r2, sl
 8004f66:	465b      	mov	r3, fp
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	f7fb fdfc 	bl	8000b68 <__aeabi_dcmpgt>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d1eb      	bne.n	8004f4c <getAngleDiff+0xcc>
    while (angle_rad < -M_PI) {
 8004f74:	a32c      	add	r3, pc, #176	; (adr r3, 8005028 <getAngleDiff+0x1a8>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f7fb fdd5 	bl	8000b2c <__aeabi_dcmplt>
 8004f82:	b1d8      	cbz	r0, 8004fbc <getAngleDiff+0x13c>
      angle_rad += 2.0f * M_PI;
 8004f84:	f20f 0998 	addw	r9, pc, #152	; 0x98
 8004f88:	e9d9 8900 	ldrd	r8, r9, [r9]
    while (angle_rad < -M_PI) {
 8004f8c:	f20f 0b98 	addw	fp, pc, #152	; 0x98
 8004f90:	e9db ab00 	ldrd	sl, fp, [fp]
      angle_rad += 2.0f * M_PI;
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7fb f99e 	bl	80002dc <__adddf3>
 8004fa0:	f7fb fe4a 	bl	8000c38 <__aeabi_d2f>
 8004fa4:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8004fa8:	f7fb faf6 	bl	8000598 <__aeabi_f2d>
 8004fac:	4652      	mov	r2, sl
 8004fae:	465b      	mov	r3, fp
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	f7fb fdba 	bl	8000b2c <__aeabi_dcmplt>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d1eb      	bne.n	8004f94 <getAngleDiff+0x114>
    angle_rad1 = normalizeAngle(angle_rad1);
    angle_rad2 = normalizeAngle(angle_rad2);
    if (fabs(angle_rad1 - angle_rad2) > M_PI) {
 8004fbc:	ee38 9a68 	vsub.f32	s18, s16, s17
 8004fc0:	eef0 7ac9 	vabs.f32	s15, s18
 8004fc4:	ee17 0a90 	vmov	r0, s15
 8004fc8:	f7fb fae6 	bl	8000598 <__aeabi_f2d>
 8004fcc:	a312      	add	r3, pc, #72	; (adr r3, 8005018 <getAngleDiff+0x198>)
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f7fb fdc9 	bl	8000b68 <__aeabi_dcmpgt>
 8004fd6:	b198      	cbz	r0, 8005000 <getAngleDiff+0x180>
      if (angle_rad1 > angle_rad2) {
 8004fd8:	eef4 8ac8 	vcmpe.f32	s17, s16
 8004fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8004fe0:	a30f      	add	r3, pc, #60	; (adr r3, 8005020 <getAngleDiff+0x1a0>)
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	4639      	mov	r1, r7
      if (angle_rad1 > angle_rad2) {
 8004fea:	d40f      	bmi.n	800500c <getAngleDiff+0x18c>
      } else {
        return (angle_rad1 + 2 * M_PI) - angle_rad2;
 8004fec:	f7fb f976 	bl	80002dc <__adddf3>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	462b      	mov	r3, r5
 8004ff4:	f7fb f970 	bl	80002d8 <__aeabi_dsub>
 8004ff8:	f7fb fe1e 	bl	8000c38 <__aeabi_d2f>
 8004ffc:	ee09 0a10 	vmov	s18, r0
      }
    } else {
      return angle_rad1 - angle_rad2;
    }
}
 8005000:	eeb0 0a49 	vmov.f32	s0, s18
 8005004:	ecbd 8b04 	vpop	{d8-d9}
 8005008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return angle_rad1 - (angle_rad2 + 2 * M_PI);
 800500c:	f7fb f964 	bl	80002d8 <__aeabi_dsub>
 8005010:	e7ee      	b.n	8004ff0 <getAngleDiff+0x170>
 8005012:	bf00      	nop
 8005014:	f3af 8000 	nop.w
 8005018:	54442d18 	.word	0x54442d18
 800501c:	400921fb 	.word	0x400921fb
 8005020:	54442d18 	.word	0x54442d18
 8005024:	401921fb 	.word	0x401921fb
 8005028:	54442d18 	.word	0x54442d18
 800502c:	c00921fb 	.word	0xc00921fb

08005030 <decode_SW>:

uint8_t decode_SW(uint16_t sw_raw_data)
{
    int data;
    if (sw_raw_data < 100) {
 8005030:	2863      	cmp	r0, #99	; 0x63
 8005032:	d906      	bls.n	8005042 <decode_SW+0x12>
      data = 0b00010000;  // C
    } else if (sw_raw_data < 500 && sw_raw_data > 100) {
 8005034:	f1a0 0365 	sub.w	r3, r0, #101	; 0x65
 8005038:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 800503c:	d803      	bhi.n	8005046 <decode_SW+0x16>
 800503e:	2002      	movs	r0, #2
 8005040:	4770      	bx	lr
 8005042:	2010      	movs	r0, #16
 8005044:	4770      	bx	lr
      data = 0b00000010;  // B
    } else if (sw_raw_data < 2000 && sw_raw_data > 500) {
 8005046:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 800504a:	1883      	adds	r3, r0, r2
 800504c:	b29b      	uxth	r3, r3
 800504e:	f240 52da 	movw	r2, #1498	; 0x5da
 8005052:	4293      	cmp	r3, r2
 8005054:	d910      	bls.n	8005078 <decode_SW+0x48>
      data = 0b00000100;  // R
    } else if (sw_raw_data < 3000 && sw_raw_data > 2000) {
 8005056:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
 800505a:	18c3      	adds	r3, r0, r3
 800505c:	b29b      	uxth	r3, r3
 800505e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8005062:	4293      	cmp	r3, r2
 8005064:	d90a      	bls.n	800507c <decode_SW+0x4c>
      data = 0b00000001;  // F
    } else if (sw_raw_data < 4000 && sw_raw_data > 3000) {
 8005066:	f6a0 30b9 	subw	r0, r0, #3001	; 0xbb9
 800506a:	b280      	uxth	r0, r0
 800506c:	4290      	cmp	r0, r2
 800506e:	bf8c      	ite	hi
 8005070:	2000      	movhi	r0, #0
 8005072:	2001      	movls	r0, #1
      data = 0b00001000;  // L
    } else {
      data = 0b00000000;
    }
    return data;
 8005074:	00c0      	lsls	r0, r0, #3
 8005076:	4770      	bx	lr
 8005078:	2004      	movs	r0, #4
 800507a:	4770      	bx	lr
 800507c:	2001      	movs	r0, #1
}
 800507e:	4770      	bx	lr

08005080 <two_to_float>:

float two_to_float(uint8_t data[2]) { return (float)((data[0] << 8 | data[1]) - 32767.0) / 32767.0; }
 8005080:	b508      	push	{r3, lr}
 8005082:	8800      	ldrh	r0, [r0, #0]
 8005084:	ba40      	rev16	r0, r0
 8005086:	b280      	uxth	r0, r0
 8005088:	f7fb fa74 	bl	8000574 <__aeabi_i2d>
 800508c:	a30a      	add	r3, pc, #40	; (adr r3, 80050b8 <two_to_float+0x38>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fb f921 	bl	80002d8 <__aeabi_dsub>
 8005096:	f7fb fdcf 	bl	8000c38 <__aeabi_d2f>
 800509a:	f7fb fa7d 	bl	8000598 <__aeabi_f2d>
 800509e:	a308      	add	r3, pc, #32	; (adr r3, 80050c0 <two_to_float+0x40>)
 80050a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a4:	f7fb fad0 	bl	8000648 <__aeabi_dmul>
 80050a8:	f7fb fdc6 	bl	8000c38 <__aeabi_d2f>
 80050ac:	ee00 0a10 	vmov	s0, r0
 80050b0:	bd08      	pop	{r3, pc}
 80050b2:	bf00      	nop
 80050b4:	f3af 8000 	nop.w
 80050b8:	00000000 	.word	0x00000000
 80050bc:	40dfffc0 	.word	0x40dfffc0
 80050c0:	00400080 	.word	0x00400080
 80050c4:	3f000020 	.word	0x3f000020

080050c8 <two_to_int>:
float two_to_int(uint8_t data[2]) { return ((data[0] << 8 | data[1]) - 32767.0); }
 80050c8:	b508      	push	{r3, lr}
 80050ca:	8800      	ldrh	r0, [r0, #0]
 80050cc:	ba40      	rev16	r0, r0
 80050ce:	b280      	uxth	r0, r0
 80050d0:	f7fb fa50 	bl	8000574 <__aeabi_i2d>
 80050d4:	a304      	add	r3, pc, #16	; (adr r3, 80050e8 <two_to_int+0x20>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb f8fd 	bl	80002d8 <__aeabi_dsub>
 80050de:	f7fb fdab 	bl	8000c38 <__aeabi_d2f>
 80050e2:	ee00 0a10 	vmov	s0, r0
 80050e6:	bd08      	pop	{r3, pc}
 80050e8:	00000000 	.word	0x00000000
 80050ec:	40dfffc0 	.word	0x40dfffc0

080050f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050f0:	480d      	ldr	r0, [pc, #52]	; (8005128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050f4:	480d      	ldr	r0, [pc, #52]	; (800512c <LoopForever+0x6>)
  ldr r1, =_edata
 80050f6:	490e      	ldr	r1, [pc, #56]	; (8005130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050f8:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <LoopForever+0xe>)
  movs r3, #0
 80050fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80050fc:	e002      	b.n	8005104 <LoopCopyDataInit>

080050fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005102:	3304      	adds	r3, #4

08005104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005108:	d3f9      	bcc.n	80050fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800510a:	4a0b      	ldr	r2, [pc, #44]	; (8005138 <LoopForever+0x12>)
  ldr r4, =_ebss
 800510c:	4c0b      	ldr	r4, [pc, #44]	; (800513c <LoopForever+0x16>)
  movs r3, #0
 800510e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005110:	e001      	b.n	8005116 <LoopFillZerobss>

08005112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005114:	3204      	adds	r2, #4

08005116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005118:	d3fb      	bcc.n	8005112 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800511a:	f7ff fb33 	bl	8004784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800511e:	f005 fb11 	bl	800a744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005122:	f7fe ff7d 	bl	8004020 <main>

08005126 <LoopForever>:

LoopForever:
    b LoopForever
 8005126:	e7fe      	b.n	8005126 <LoopForever>
  ldr   r0, =_estack
 8005128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800512c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005130:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8005134:	0800df40 	.word	0x0800df40
  ldr r2, =_sbss
 8005138:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800513c:	20001b6c 	.word	0x20001b6c

08005140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005140:	e7fe      	b.n	8005140 <ADC1_2_IRQHandler>
	...

08005144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005144:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005146:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <HAL_InitTick+0x40>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	b90b      	cbnz	r3, 8005150 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800514c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800514e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005150:	490d      	ldr	r1, [pc, #52]	; (8005188 <HAL_InitTick+0x44>)
 8005152:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005156:	4605      	mov	r5, r0
 8005158:	fbb2 f3f3 	udiv	r3, r2, r3
 800515c:	6808      	ldr	r0, [r1, #0]
 800515e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005162:	f000 fe19 	bl	8005d98 <HAL_SYSTICK_Config>
 8005166:	4604      	mov	r4, r0
 8005168:	2800      	cmp	r0, #0
 800516a:	d1ef      	bne.n	800514c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800516c:	2d0f      	cmp	r5, #15
 800516e:	d8ed      	bhi.n	800514c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005170:	4602      	mov	r2, r0
 8005172:	4629      	mov	r1, r5
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	f000 fdc2 	bl	8005d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <HAL_InitTick+0x48>)
 800517e:	4620      	mov	r0, r4
 8005180:	601d      	str	r5, [r3, #0]
}
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20000008 	.word	0x20000008
 8005188:	20000004 	.word	0x20000004
 800518c:	2000000c 	.word	0x2000000c

08005190 <HAL_Init>:
{
 8005190:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005192:	2003      	movs	r0, #3
 8005194:	f000 fda2 	bl	8005cdc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005198:	2000      	movs	r0, #0
 800519a:	f7ff ffd3 	bl	8005144 <HAL_InitTick>
 800519e:	b110      	cbz	r0, 80051a6 <HAL_Init+0x16>
    status = HAL_ERROR;
 80051a0:	2401      	movs	r4, #1
}
 80051a2:	4620      	mov	r0, r4
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	4604      	mov	r4, r0
    HAL_MspInit();
 80051a8:	f7ff fa28 	bl	80045fc <HAL_MspInit>
}
 80051ac:	4620      	mov	r0, r4
 80051ae:	bd10      	pop	{r4, pc}

080051b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80051b0:	4a03      	ldr	r2, [pc, #12]	; (80051c0 <HAL_IncTick+0x10>)
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_IncTick+0x14>)
 80051b4:	6813      	ldr	r3, [r2, #0]
 80051b6:	6809      	ldr	r1, [r1, #0]
 80051b8:	440b      	add	r3, r1
 80051ba:	6013      	str	r3, [r2, #0]
}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20001a18 	.word	0x20001a18
 80051c4:	20000008 	.word	0x20000008

080051c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80051cc:	f7fd fe2a 	bl	8002e24 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051d0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80051d2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80051d4:	d002      	beq.n	80051dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80051d6:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <HAL_Delay+0x20>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051dc:	f7fd fe22 	bl	8002e24 <HAL_GetTick>
 80051e0:	1b43      	subs	r3, r0, r5
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	d3fa      	bcc.n	80051dc <HAL_Delay+0x14>
  {
  }
}
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20000008 	.word	0x20000008

080051ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051ec:	b530      	push	{r4, r5, lr}
 80051ee:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f000 80d4 	beq.w	80053a2 <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051fa:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80051fc:	4604      	mov	r4, r0
 80051fe:	2d00      	cmp	r5, #0
 8005200:	f000 809d 	beq.w	800533e <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005204:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	009d      	lsls	r5, r3, #2
 800520a:	d505      	bpl.n	8005218 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800520c:	6893      	ldr	r3, [r2, #8]
 800520e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005212:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005216:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005218:	6893      	ldr	r3, [r2, #8]
 800521a:	00d8      	lsls	r0, r3, #3
 800521c:	d419      	bmi.n	8005252 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800521e:	4b7e      	ldr	r3, [pc, #504]	; (8005418 <HAL_ADC_Init+0x22c>)
 8005220:	487e      	ldr	r0, [pc, #504]	; (800541c <HAL_ADC_Init+0x230>)
 8005222:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005224:	6891      	ldr	r1, [r2, #8]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	fba0 0303 	umull	r0, r3, r0, r3
 800522c:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8005230:	099b      	lsrs	r3, r3, #6
 8005232:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005236:	3301      	adds	r3, #1
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800523e:	6091      	str	r1, [r2, #8]
 8005240:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005242:	9b01      	ldr	r3, [sp, #4]
 8005244:	b12b      	cbz	r3, 8005252 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	3b01      	subs	r3, #1
 800524a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800524c:	9b01      	ldr	r3, [sp, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f9      	bne.n	8005246 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005252:	6893      	ldr	r3, [r2, #8]
 8005254:	00d9      	lsls	r1, r3, #3
 8005256:	d464      	bmi.n	8005322 <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005258:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800525a:	f043 0310 	orr.w	r3, r3, #16
 800525e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005260:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005262:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005264:	4303      	orrs	r3, r0
 8005266:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005268:	6893      	ldr	r3, [r2, #8]
 800526a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800526e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005270:	d15e      	bne.n	8005330 <HAL_ADC_Init+0x144>
 8005272:	06db      	lsls	r3, r3, #27
 8005274:	d45c      	bmi.n	8005330 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005276:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005278:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800527c:	f043 0302 	orr.w	r3, r3, #2
 8005280:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005282:	6893      	ldr	r3, [r2, #8]
 8005284:	07dd      	lsls	r5, r3, #31
 8005286:	d419      	bmi.n	80052bc <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005288:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800528c:	4b64      	ldr	r3, [pc, #400]	; (8005420 <HAL_ADC_Init+0x234>)
 800528e:	f000 80a0 	beq.w	80053d2 <HAL_ADC_Init+0x1e6>
 8005292:	429a      	cmp	r2, r3
 8005294:	f000 80a5 	beq.w	80053e2 <HAL_ADC_Init+0x1f6>
 8005298:	4962      	ldr	r1, [pc, #392]	; (8005424 <HAL_ADC_Init+0x238>)
 800529a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529e:	6889      	ldr	r1, [r1, #8]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	430b      	orrs	r3, r1
 80052a4:	4960      	ldr	r1, [pc, #384]	; (8005428 <HAL_ADC_Init+0x23c>)
 80052a6:	6889      	ldr	r1, [r1, #8]
 80052a8:	430b      	orrs	r3, r1
 80052aa:	07d9      	lsls	r1, r3, #31
 80052ac:	d406      	bmi.n	80052bc <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80052ae:	495f      	ldr	r1, [pc, #380]	; (800542c <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80052b0:	688b      	ldr	r3, [r1, #8]
 80052b2:	6865      	ldr	r5, [r4, #4]
 80052b4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80052b8:	432b      	orrs	r3, r5
 80052ba:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80052bc:	68e5      	ldr	r5, [r4, #12]
 80052be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80052c0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80052c4:	432b      	orrs	r3, r5
 80052c6:	68a5      	ldr	r5, [r4, #8]
 80052c8:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052ca:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052cc:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80052ce:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052d6:	d05f      	beq.n	8005398 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80052da:	b121      	cbz	r1, 80052e6 <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80052dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052de:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80052e2:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052e4:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80052e6:	68d5      	ldr	r5, [r2, #12]
 80052e8:	4951      	ldr	r1, [pc, #324]	; (8005430 <HAL_ADC_Init+0x244>)
 80052ea:	4029      	ands	r1, r5
 80052ec:	4319      	orrs	r1, r3
 80052ee:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80052f0:	6913      	ldr	r3, [r2, #16]
 80052f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052f4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052fc:	6893      	ldr	r3, [r2, #8]
 80052fe:	075b      	lsls	r3, r3, #29
 8005300:	d523      	bpl.n	800534a <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005302:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005304:	6963      	ldr	r3, [r4, #20]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d04e      	beq.n	80053a8 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800530a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800530c:	f023 030f 	bic.w	r3, r3, #15
 8005310:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005312:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800531e:	b003      	add	sp, #12
 8005320:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005322:	6893      	ldr	r3, [r2, #8]
 8005324:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005328:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800532c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800532e:	d0a0      	beq.n	8005272 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005330:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005332:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005334:	f043 0310 	orr.w	r3, r3, #16
 8005338:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800533a:	b003      	add	sp, #12
 800533c:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800533e:	f7fb fff9 	bl	8001334 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005342:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005344:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005348:	e75c      	b.n	8005204 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800534a:	6893      	ldr	r3, [r2, #8]
 800534c:	071d      	lsls	r5, r3, #28
 800534e:	d4d9      	bmi.n	8005304 <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005350:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005352:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005356:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005358:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800535c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800535e:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005362:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005366:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8005368:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800536a:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800536c:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 800536e:	bb19      	cbnz	r1, 80053b8 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005374:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005376:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800537a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800537e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005382:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8005386:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800538a:	2b01      	cmp	r3, #1
 800538c:	d032      	beq.n	80053f4 <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800538e:	6913      	ldr	r3, [r2, #16]
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6113      	str	r3, [r2, #16]
 8005396:	e7b5      	b.n	8005304 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005398:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800539a:	3901      	subs	r1, #1
 800539c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80053a0:	e79a      	b.n	80052d8 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 80053a2:	2001      	movs	r0, #1
}
 80053a4:	b003      	add	sp, #12
 80053a6:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80053aa:	6a23      	ldr	r3, [r4, #32]
 80053ac:	f021 010f 	bic.w	r1, r1, #15
 80053b0:	3b01      	subs	r3, #1
 80053b2:	430b      	orrs	r3, r1
 80053b4:	6313      	str	r3, [r2, #48]	; 0x30
 80053b6:	e7ac      	b.n	8005312 <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80053b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053bc:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80053be:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80053c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053ca:	430b      	orrs	r3, r1
 80053cc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80053d0:	e7d9      	b.n	8005386 <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053d2:	6891      	ldr	r1, [r2, #8]
 80053d4:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053d6:	430b      	orrs	r3, r1
 80053d8:	07db      	lsls	r3, r3, #31
 80053da:	f53f af6f 	bmi.w	80052bc <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80053de:	4915      	ldr	r1, [pc, #84]	; (8005434 <HAL_ADC_Init+0x248>)
 80053e0:	e766      	b.n	80052b0 <HAL_ADC_Init+0xc4>
 80053e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	07d9      	lsls	r1, r3, #31
 80053ee:	f53f af65 	bmi.w	80052bc <HAL_ADC_Init+0xd0>
 80053f2:	e7f4      	b.n	80053de <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 80053f4:	6911      	ldr	r1, [r2, #16]
 80053f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053f8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80053fa:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80053fe:	f021 0104 	bic.w	r1, r1, #4
 8005402:	432b      	orrs	r3, r5
 8005404:	430b      	orrs	r3, r1
 8005406:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005408:	430b      	orrs	r3, r1
 800540a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800540c:	430b      	orrs	r3, r1
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6113      	str	r3, [r2, #16]
 8005414:	e776      	b.n	8005304 <HAL_ADC_Init+0x118>
 8005416:	bf00      	nop
 8005418:	20000004 	.word	0x20000004
 800541c:	053e2d63 	.word	0x053e2d63
 8005420:	50000100 	.word	0x50000100
 8005424:	50000400 	.word	0x50000400
 8005428:	50000600 	.word	0x50000600
 800542c:	50000700 	.word	0x50000700
 8005430:	fff04007 	.word	0xfff04007
 8005434:	50000300 	.word	0x50000300

08005438 <HAL_ADC_ConvCpltCallback>:
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop

0800543c <HAL_ADC_ConvHalfCpltCallback>:
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop

08005440 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005440:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005442:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005444:	f7ff fffa 	bl	800543c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005448:	bd08      	pop	{r3, pc}
 800544a:	bf00      	nop

0800544c <HAL_ADC_ErrorCallback>:
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005450:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005452:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005454:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8005458:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800545a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800545c:	d11d      	bne.n	800549a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800545e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005464:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005466:	680a      	ldr	r2, [r1, #0]
 8005468:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800546c:	68ca      	ldr	r2, [r1, #12]
 800546e:	d01b      	beq.n	80054a8 <ADC_DMAConvCplt+0x58>
 8005470:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005474:	d10d      	bne.n	8005492 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005476:	68ca      	ldr	r2, [r1, #12]
 8005478:	0494      	lsls	r4, r2, #18
 800547a:	d40a      	bmi.n	8005492 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800547c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800547e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005482:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005484:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005486:	04d1      	lsls	r1, r2, #19
 8005488:	d403      	bmi.n	8005492 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800548a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ffd0 	bl	8005438 <HAL_ADC_ConvCpltCallback>
}
 8005498:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800549a:	06d2      	lsls	r2, r2, #27
 800549c:	d40a      	bmi.n	80054b4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80054a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054a8:	0790      	lsls	r0, r2, #30
 80054aa:	d5e7      	bpl.n	800547c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff ffc3 	bl	8005438 <HAL_ADC_ConvCpltCallback>
 80054b2:	e7f1      	b.n	8005498 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ffc9 	bl	800544c <HAL_ADC_ErrorCallback>
}
 80054ba:	bd10      	pop	{r4, pc}

080054bc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80054be:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80054c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054c8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054d0:	f7ff ffbc 	bl	800544c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054d4:	bd08      	pop	{r3, pc}
 80054d6:	bf00      	nop

080054d8 <HAL_ADC_ConfigChannel>:
{
 80054d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80054da:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80054de:	b083      	sub	sp, #12
 80054e0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80054e2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80054e4:	f04f 0000 	mov.w	r0, #0
 80054e8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80054ea:	f000 8174 	beq.w	80057d6 <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054ee:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80054f0:	2001      	movs	r0, #1
 80054f2:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054f6:	6894      	ldr	r4, [r2, #8]
 80054f8:	0766      	lsls	r6, r4, #29
 80054fa:	d45e      	bmi.n	80055ba <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80054fc:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80054fe:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005502:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005506:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 800550a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800550c:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005510:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005514:	f854 500e 	ldr.w	r5, [r4, lr]
 8005518:	261f      	movs	r6, #31
 800551a:	fa00 f00c 	lsl.w	r0, r0, ip
 800551e:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005522:	ea25 0c0c 	bic.w	ip, r5, ip
 8005526:	ea40 000c 	orr.w	r0, r0, ip
 800552a:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800552e:	6890      	ldr	r0, [r2, #8]
 8005530:	0745      	lsls	r5, r0, #29
 8005532:	d572      	bpl.n	800561a <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005534:	6890      	ldr	r0, [r2, #8]
 8005536:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005538:	6894      	ldr	r4, [r2, #8]
 800553a:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800553e:	4604      	mov	r4, r0
 8005540:	d10c      	bne.n	800555c <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005542:	4dbd      	ldr	r5, [pc, #756]	; (8005838 <HAL_ADC_ConfigChannel+0x360>)
 8005544:	68ce      	ldr	r6, [r1, #12]
 8005546:	42ae      	cmp	r6, r5
 8005548:	f000 80eb 	beq.w	8005722 <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 800554c:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8005550:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005554:	ea21 0100 	bic.w	r1, r1, r0
 8005558:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800555c:	49b7      	ldr	r1, [pc, #732]	; (800583c <HAL_ADC_ConfigChannel+0x364>)
 800555e:	420c      	tst	r4, r1
 8005560:	d059      	beq.n	8005616 <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005562:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005566:	f000 8134 	beq.w	80057d2 <HAL_ADC_ConfigChannel+0x2fa>
 800556a:	4db5      	ldr	r5, [pc, #724]	; (8005840 <HAL_ADC_ConfigChannel+0x368>)
 800556c:	49b5      	ldr	r1, [pc, #724]	; (8005844 <HAL_ADC_ConfigChannel+0x36c>)
 800556e:	48b6      	ldr	r0, [pc, #728]	; (8005848 <HAL_ADC_ConfigChannel+0x370>)
 8005570:	42aa      	cmp	r2, r5
 8005572:	bf18      	it	ne
 8005574:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005576:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005578:	49b4      	ldr	r1, [pc, #720]	; (800584c <HAL_ADC_ConfigChannel+0x374>)
 800557a:	428c      	cmp	r4, r1
 800557c:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8005580:	d024      	beq.n	80055cc <HAL_ADC_ConfigChannel+0xf4>
 8005582:	49b3      	ldr	r1, [pc, #716]	; (8005850 <HAL_ADC_ConfigChannel+0x378>)
 8005584:	428c      	cmp	r4, r1
 8005586:	d021      	beq.n	80055cc <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005588:	49b2      	ldr	r1, [pc, #712]	; (8005854 <HAL_ADC_ConfigChannel+0x37c>)
 800558a:	428c      	cmp	r4, r1
 800558c:	f040 8139 	bne.w	8005802 <HAL_ADC_ConfigChannel+0x32a>
 8005590:	01c4      	lsls	r4, r0, #7
 8005592:	d440      	bmi.n	8005616 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005594:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005598:	f000 8215 	beq.w	80059c6 <HAL_ADC_ConfigChannel+0x4ee>
 800559c:	4ca8      	ldr	r4, [pc, #672]	; (8005840 <HAL_ADC_ConfigChannel+0x368>)
 800559e:	49a9      	ldr	r1, [pc, #676]	; (8005844 <HAL_ADC_ConfigChannel+0x36c>)
 80055a0:	48a9      	ldr	r0, [pc, #676]	; (8005848 <HAL_ADC_ConfigChannel+0x370>)
 80055a2:	42a2      	cmp	r2, r4
 80055a4:	bf18      	it	ne
 80055a6:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055a8:	688a      	ldr	r2, [r1, #8]
 80055aa:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80055ae:	432a      	orrs	r2, r5
 80055b0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055b4:	2000      	movs	r0, #0
 80055b6:	608a      	str	r2, [r1, #8]
}
 80055b8:	e003      	b.n	80055c2 <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055bc:	f042 0220 	orr.w	r2, r2, #32
 80055c0:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80055c8:	b003      	add	sp, #12
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055cc:	0201      	lsls	r1, r0, #8
 80055ce:	d422      	bmi.n	8005616 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055d0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80055d4:	f000 8113 	beq.w	80057fe <HAL_ADC_ConfigChannel+0x326>
 80055d8:	499f      	ldr	r1, [pc, #636]	; (8005858 <HAL_ADC_ConfigChannel+0x380>)
 80055da:	428a      	cmp	r2, r1
 80055dc:	d11b      	bne.n	8005616 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055de:	489a      	ldr	r0, [pc, #616]	; (8005848 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055e0:	4a9e      	ldr	r2, [pc, #632]	; (800585c <HAL_ADC_ConfigChannel+0x384>)
 80055e2:	4c9f      	ldr	r4, [pc, #636]	; (8005860 <HAL_ADC_ConfigChannel+0x388>)
 80055e4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055e6:	6881      	ldr	r1, [r0, #8]
 80055e8:	0992      	lsrs	r2, r2, #6
 80055ea:	fba4 4202 	umull	r4, r2, r4, r2
 80055ee:	0992      	lsrs	r2, r2, #6
 80055f0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80055f4:	3201      	adds	r2, #1
 80055f6:	4329      	orrs	r1, r5
 80055f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80055fc:	0092      	lsls	r2, r2, #2
 80055fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005602:	6081      	str	r1, [r0, #8]
 8005604:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005606:	9a01      	ldr	r2, [sp, #4]
 8005608:	b12a      	cbz	r2, 8005616 <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 800560a:	9a01      	ldr	r2, [sp, #4]
 800560c:	3a01      	subs	r2, #1
 800560e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005610:	9a01      	ldr	r2, [sp, #4]
 8005612:	2a00      	cmp	r2, #0
 8005614:	d1f9      	bne.n	800560a <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005616:	2000      	movs	r0, #0
 8005618:	e7d3      	b.n	80055c2 <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800561a:	6890      	ldr	r0, [r2, #8]
 800561c:	0700      	lsls	r0, r0, #28
 800561e:	d47e      	bmi.n	800571e <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005620:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005622:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005624:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8005628:	f000 8120 	beq.w	800586c <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800562c:	0dee      	lsrs	r6, r5, #23
 800562e:	f102 0c14 	add.w	ip, r2, #20
 8005632:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8005636:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800563a:	f85c 4006 	ldr.w	r4, [ip, r6]
 800563e:	2707      	movs	r7, #7
 8005640:	40a8      	lsls	r0, r5
 8005642:	fa07 f505 	lsl.w	r5, r7, r5
 8005646:	ea24 0405 	bic.w	r4, r4, r5
 800564a:	4320      	orrs	r0, r4
 800564c:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005650:	6950      	ldr	r0, [r2, #20]
 8005652:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005656:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005658:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800565c:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800565e:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005660:	d02d      	beq.n	80056be <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005662:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005666:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800566a:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 800566c:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8005670:	4f7c      	ldr	r7, [pc, #496]	; (8005864 <HAL_ADC_ConfigChannel+0x38c>)
 8005672:	4086      	lsls	r6, r0
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	ea0c 0707 	and.w	r7, ip, r7
 800567a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800567e:	4338      	orrs	r0, r7
 8005680:	4330      	orrs	r0, r6
 8005682:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005686:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800568a:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800568c:	698e      	ldr	r6, [r1, #24]
 800568e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005692:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8005696:	4330      	orrs	r0, r6
 8005698:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800569c:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800569e:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 80056a0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80056a4:	f1a5 0501 	sub.w	r5, r5, #1
 80056a8:	fab5 f585 	clz	r5, r5
 80056ac:	096d      	lsrs	r5, r5, #5
 80056ae:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80056b2:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 80056b6:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80056ba:	6808      	ldr	r0, [r1, #0]
}
 80056bc:	e73c      	b.n	8005538 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056be:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056c0:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80056c2:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80056c4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056c8:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	f040 80df 	bne.w	8005890 <HAL_ADC_ConfigChannel+0x3b8>
 80056d2:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056d6:	42ac      	cmp	r4, r5
 80056d8:	f000 813d 	beq.w	8005956 <HAL_ADC_ConfigChannel+0x47e>
 80056dc:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80056de:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056e0:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056e4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80056e8:	f102 0764 	add.w	r7, r2, #100	; 0x64
 80056ec:	42ae      	cmp	r6, r5
 80056ee:	f000 8158 	beq.w	80059a2 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056f2:	68a6      	ldr	r6, [r4, #8]
 80056f4:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056f6:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056fa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80056fe:	42ae      	cmp	r6, r5
 8005700:	f000 813d 	beq.w	800597e <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005704:	68e6      	ldr	r6, [r4, #12]
 8005706:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005708:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800570c:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8005710:	42a5      	cmp	r5, r4
 8005712:	f47f af11 	bne.w	8005538 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8005716:	6838      	ldr	r0, [r7, #0]
 8005718:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800571c:	6038      	str	r0, [r7, #0]
 800571e:	6808      	ldr	r0, [r1, #0]
}
 8005720:	e70a      	b.n	8005538 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 8005722:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005726:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800572a:	432c      	orrs	r4, r5
 800572c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005730:	2d00      	cmp	r5, #0
 8005732:	d053      	beq.n	80057dc <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005734:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005738:	2c00      	cmp	r4, #0
 800573a:	f000 80e8 	beq.w	800590e <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800573e:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005742:	3401      	adds	r4, #1
 8005744:	f004 041f 	and.w	r4, r4, #31
 8005748:	2c09      	cmp	r4, #9
 800574a:	f240 80e0 	bls.w	800590e <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005752:	2c00      	cmp	r4, #0
 8005754:	f000 813d 	beq.w	80059d2 <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8005758:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800575c:	3401      	adds	r4, #1
 800575e:	06a4      	lsls	r4, r4, #26
 8005760:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005768:	2d00      	cmp	r5, #0
 800576a:	f000 8130 	beq.w	80059ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800576e:	fab5 f585 	clz	r5, r5
 8005772:	3501      	adds	r5, #1
 8005774:	f005 051f 	and.w	r5, r5, #31
 8005778:	2601      	movs	r6, #1
 800577a:	fa06 f505 	lsl.w	r5, r6, r5
 800577e:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005784:	2800      	cmp	r0, #0
 8005786:	f000 8120 	beq.w	80059ca <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 800578a:	fab0 f080 	clz	r0, r0
 800578e:	1c45      	adds	r5, r0, #1
 8005790:	f005 051f 	and.w	r5, r5, #31
 8005794:	2003      	movs	r0, #3
 8005796:	f06f 061d 	mvn.w	r6, #29
 800579a:	fb10 6005 	smlabb	r0, r0, r5, r6
 800579e:	0500      	lsls	r0, r0, #20
 80057a0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057a4:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80057a6:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80057a8:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80057aa:	f005 0504 	and.w	r5, r5, #4
 80057ae:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80057b2:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80057b6:	fa04 fc00 	lsl.w	ip, r4, r0
 80057ba:	f04f 0e07 	mov.w	lr, #7
 80057be:	5974      	ldr	r4, [r6, r5]
 80057c0:	fa0e f000 	lsl.w	r0, lr, r0
 80057c4:	ea24 0000 	bic.w	r0, r4, r0
 80057c8:	ea40 000c 	orr.w	r0, r0, ip
 80057cc:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057ce:	680c      	ldr	r4, [r1, #0]
}
 80057d0:	e6c4      	b.n	800555c <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057d2:	491c      	ldr	r1, [pc, #112]	; (8005844 <HAL_ADC_ConfigChannel+0x36c>)
 80057d4:	e6cf      	b.n	8005576 <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 80057d6:	2002      	movs	r0, #2
}
 80057d8:	b003      	add	sp, #12
 80057da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057dc:	0e80      	lsrs	r0, r0, #26
 80057de:	3001      	adds	r0, #1
 80057e0:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057e4:	2d09      	cmp	r5, #9
 80057e6:	f200 8084 	bhi.w	80058f2 <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057ea:	0684      	lsls	r4, r0, #26
 80057ec:	2001      	movs	r0, #1
 80057ee:	40a8      	lsls	r0, r5
 80057f0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80057f4:	4304      	orrs	r4, r0
 80057f6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80057fa:	0500      	lsls	r0, r0, #20
 80057fc:	e7d2      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057fe:	4811      	ldr	r0, [pc, #68]	; (8005844 <HAL_ADC_ConfigChannel+0x36c>)
 8005800:	e6ee      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005802:	4919      	ldr	r1, [pc, #100]	; (8005868 <HAL_ADC_ConfigChannel+0x390>)
 8005804:	428c      	cmp	r4, r1
 8005806:	f47f af06 	bne.w	8005616 <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800580a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800580e:	f47f af02 	bne.w	8005616 <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005812:	490b      	ldr	r1, [pc, #44]	; (8005840 <HAL_ADC_ConfigChannel+0x368>)
 8005814:	428a      	cmp	r2, r1
 8005816:	f43f aefe 	beq.w	8005616 <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800581a:	4c0b      	ldr	r4, [pc, #44]	; (8005848 <HAL_ADC_ConfigChannel+0x370>)
 800581c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8005820:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005824:	bf18      	it	ne
 8005826:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005828:	688a      	ldr	r2, [r1, #8]
 800582a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800582e:	432a      	orrs	r2, r5
 8005830:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005834:	608a      	str	r2, [r1, #8]
}
 8005836:	e6c4      	b.n	80055c2 <HAL_ADC_ConfigChannel+0xea>
 8005838:	407f0000 	.word	0x407f0000
 800583c:	80080000 	.word	0x80080000
 8005840:	50000100 	.word	0x50000100
 8005844:	50000300 	.word	0x50000300
 8005848:	50000700 	.word	0x50000700
 800584c:	c3210000 	.word	0xc3210000
 8005850:	90c00010 	.word	0x90c00010
 8005854:	c7520000 	.word	0xc7520000
 8005858:	50000600 	.word	0x50000600
 800585c:	20000004 	.word	0x20000004
 8005860:	053e2d63 	.word	0x053e2d63
 8005864:	03fff000 	.word	0x03fff000
 8005868:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800586c:	0de8      	lsrs	r0, r5, #23
 800586e:	f000 0004 	and.w	r0, r0, #4
 8005872:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 8005876:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800587a:	2607      	movs	r6, #7
 800587c:	40ae      	lsls	r6, r5
 800587e:	5825      	ldr	r5, [r4, r0]
 8005880:	ea25 0506 	bic.w	r5, r5, r6
 8005884:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005886:	6950      	ldr	r0, [r2, #20]
 8005888:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800588c:	6150      	str	r0, [r2, #20]
}
 800588e:	e6e3      	b.n	8005658 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005894:	b11d      	cbz	r5, 800589e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005896:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800589a:	42ac      	cmp	r4, r5
 800589c:	d05b      	beq.n	8005956 <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800589e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80058a0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058a2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058a6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80058aa:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058b2:	b11d      	cbz	r5, 80058bc <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80058b4:	fab5 f585 	clz	r5, r5
 80058b8:	42ae      	cmp	r6, r5
 80058ba:	d072      	beq.n	80059a2 <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058bc:	68a5      	ldr	r5, [r4, #8]
 80058be:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058c0:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058c4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058cc:	b11d      	cbz	r5, 80058d6 <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 80058ce:	fab5 f585 	clz	r5, r5
 80058d2:	42ae      	cmp	r6, r5
 80058d4:	d053      	beq.n	800597e <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058d6:	68e5      	ldr	r5, [r4, #12]
 80058d8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058da:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058de:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	f43f ae26 	beq.w	8005538 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 80058ec:	fab5 f585 	clz	r5, r5
 80058f0:	e70e      	b.n	8005710 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058f2:	0684      	lsls	r4, r0, #26
 80058f4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80058f8:	381e      	subs	r0, #30
 80058fa:	2601      	movs	r6, #1
 80058fc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005900:	0500      	lsls	r0, r0, #20
 8005902:	fa06 f505 	lsl.w	r5, r6, r5
 8005906:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800590a:	432c      	orrs	r4, r5
 800590c:	e74a      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005912:	2c00      	cmp	r4, #0
 8005914:	d065      	beq.n	80059e2 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8005916:	fab4 f484 	clz	r4, r4
 800591a:	3401      	adds	r4, #1
 800591c:	06a4      	lsls	r4, r4, #26
 800591e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005926:	2d00      	cmp	r5, #0
 8005928:	d059      	beq.n	80059de <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 800592a:	fab5 f585 	clz	r5, r5
 800592e:	3501      	adds	r5, #1
 8005930:	f005 051f 	and.w	r5, r5, #31
 8005934:	2601      	movs	r6, #1
 8005936:	fa06 f505 	lsl.w	r5, r6, r5
 800593a:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005940:	2800      	cmp	r0, #0
 8005942:	d049      	beq.n	80059d8 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8005944:	fab0 f080 	clz	r0, r0
 8005948:	3001      	adds	r0, #1
 800594a:	f000 001f 	and.w	r0, r0, #31
 800594e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005952:	0500      	lsls	r0, r0, #20
 8005954:	e726      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 8005956:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005958:	4614      	mov	r4, r2
 800595a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800595e:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005962:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005964:	6808      	ldr	r0, [r1, #0]
 8005966:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005968:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800596c:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005970:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005974:	2d00      	cmp	r5, #0
 8005976:	d19a      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x3d6>
 8005978:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800597c:	e6b6      	b.n	80056ec <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 800597e:	6838      	ldr	r0, [r7, #0]
 8005980:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005984:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005986:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005988:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800598a:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800598e:	68e4      	ldr	r4, [r4, #12]
 8005990:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005994:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005998:	2d00      	cmp	r5, #0
 800599a:	d1a2      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x40a>
 800599c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80059a0:	e6b6      	b.n	8005710 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 80059a2:	6838      	ldr	r0, [r7, #0]
 80059a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80059a8:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059aa:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059ac:	6808      	ldr	r0, [r1, #0]
 80059ae:	68a6      	ldr	r6, [r4, #8]
 80059b0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059b4:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80059b8:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059bc:	2d00      	cmp	r5, #0
 80059be:	d183      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x3f0>
 80059c0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80059c4:	e69b      	b.n	80056fe <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059c6:	4908      	ldr	r1, [pc, #32]	; (80059e8 <HAL_ADC_ConfigChannel+0x510>)
 80059c8:	e5ee      	b.n	80055a8 <HAL_ADC_ConfigChannel+0xd0>
 80059ca:	4808      	ldr	r0, [pc, #32]	; (80059ec <HAL_ADC_ConfigChannel+0x514>)
 80059cc:	e6ea      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x2cc>
 80059ce:	2502      	movs	r5, #2
 80059d0:	e6d5      	b.n	800577e <HAL_ADC_ConfigChannel+0x2a6>
 80059d2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80059d6:	e6c5      	b.n	8005764 <HAL_ADC_ConfigChannel+0x28c>
 80059d8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80059dc:	e6e2      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x2cc>
 80059de:	2502      	movs	r5, #2
 80059e0:	e7ab      	b.n	800593a <HAL_ADC_ConfigChannel+0x462>
 80059e2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80059e6:	e79c      	b.n	8005922 <HAL_ADC_ConfigChannel+0x44a>
 80059e8:	50000300 	.word	0x50000300
 80059ec:	fe500000 	.word	0xfe500000

080059f0 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059f0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	07d2      	lsls	r2, r2, #31
 80059f6:	d501      	bpl.n	80059fc <ADC_Enable+0xc>
  return HAL_OK;
 80059f8:	2000      	movs	r0, #0
}
 80059fa:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80059fc:	6899      	ldr	r1, [r3, #8]
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <ADC_Enable+0x70>)
 8005a00:	4211      	tst	r1, r2
{
 8005a02:	b570      	push	{r4, r5, r6, lr}
 8005a04:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a06:	d008      	beq.n	8005a1a <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a08:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005a0a:	f043 0310 	orr.w	r3, r3, #16
 8005a0e:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a10:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8005a12:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a14:	4303      	orrs	r3, r0
 8005a16:	6633      	str	r3, [r6, #96]	; 0x60
}
 8005a18:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	4d11      	ldr	r5, [pc, #68]	; (8005a64 <ADC_Enable+0x74>)
 8005a1e:	402a      	ands	r2, r5
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005a26:	f7fd f9fd 	bl	8002e24 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a2a:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005a2c:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	07d0      	lsls	r0, r2, #31
 8005a32:	d413      	bmi.n	8005a5c <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	07d1      	lsls	r1, r2, #31
 8005a38:	d404      	bmi.n	8005a44 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	402a      	ands	r2, r5
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a44:	f7fd f9ee 	bl	8002e24 <HAL_GetTick>
 8005a48:	1b03      	subs	r3, r0, r4
 8005a4a:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a4c:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a4e:	d9ee      	bls.n	8005a2e <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	07d2      	lsls	r2, r2, #31
 8005a54:	d5d8      	bpl.n	8005a08 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	07d0      	lsls	r0, r2, #31
 8005a5a:	d5eb      	bpl.n	8005a34 <ADC_Enable+0x44>
  return HAL_OK;
 8005a5c:	2000      	movs	r0, #0
}
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	8000003f 	.word	0x8000003f
 8005a64:	7fffffc0 	.word	0x7fffffc0

08005a68 <HAL_ADC_Start_DMA>:
{
 8005a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a6c:	6805      	ldr	r5, [r0, #0]
 8005a6e:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 8005a72:	4604      	mov	r4, r0
 8005a74:	460e      	mov	r6, r1
 8005a76:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a78:	d022      	beq.n	8005ac0 <HAL_ADC_Start_DMA+0x58>
 8005a7a:	4a39      	ldr	r2, [pc, #228]	; (8005b60 <HAL_ADC_Start_DMA+0xf8>)
 8005a7c:	4839      	ldr	r0, [pc, #228]	; (8005b64 <HAL_ADC_Start_DMA+0xfc>)
 8005a7e:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <HAL_ADC_Start_DMA+0x100>)
 8005a80:	4295      	cmp	r5, r2
 8005a82:	bf08      	it	eq
 8005a84:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a86:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a88:	68ab      	ldr	r3, [r5, #8]
 8005a8a:	075b      	lsls	r3, r3, #29
 8005a8c:	d415      	bmi.n	8005aba <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 8005a8e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d011      	beq.n	8005aba <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005a96:	4b35      	ldr	r3, [pc, #212]	; (8005b6c <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8005a98:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005a9a:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a9c:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8005aa0:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_ADC_Start_DMA+0x5c>
 8005aa6:	f240 2321 	movw	r3, #545	; 0x221
 8005aaa:	fa23 f308 	lsr.w	r3, r3, r8
 8005aae:	4003      	ands	r3, r0
 8005ab0:	d108      	bne.n	8005ac4 <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 8005ab2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8005ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8005aba:	2002      	movs	r0, #2
}
 8005abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ac0:	4829      	ldr	r0, [pc, #164]	; (8005b68 <HAL_ADC_Start_DMA+0x100>)
 8005ac2:	e7e0      	b.n	8005a86 <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f7ff ff93 	bl	80059f0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d13f      	bne.n	8005b4e <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 8005ace:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ad0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8005ad2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ade:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ae0:	4b1f      	ldr	r3, [pc, #124]	; (8005b60 <HAL_ADC_Start_DMA+0xf8>)
 8005ae2:	4299      	cmp	r1, r3
 8005ae4:	d038      	beq.n	8005b58 <HAL_ADC_Start_DMA+0xf0>
 8005ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d034      	beq.n	8005b58 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005aee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005af0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005af4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005af6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005af8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005afa:	4d1d      	ldr	r5, [pc, #116]	; (8005b70 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005afc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b00:	bf1c      	itt	ne
 8005b02:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8005b04:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005b08:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b0a:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b0c:	4d19      	ldr	r5, [pc, #100]	; (8005b74 <HAL_ADC_Start_DMA+0x10c>)
 8005b0e:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b10:	4d19      	ldr	r5, [pc, #100]	; (8005b78 <HAL_ADC_Start_DMA+0x110>)
 8005b12:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b14:	251c      	movs	r5, #28
 8005b16:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8005b18:	2500      	movs	r5, #0
 8005b1a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b1e:	684d      	ldr	r5, [r1, #4]
 8005b20:	f045 0510 	orr.w	r5, r5, #16
 8005b24:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b26:	68cd      	ldr	r5, [r1, #12]
 8005b28:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b30:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b32:	3140      	adds	r1, #64	; 0x40
 8005b34:	f000 f9e0 	bl	8005ef8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b38:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005b3a:	6893      	ldr	r3, [r2, #8]
 8005b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b44:	f043 0304 	orr.w	r3, r3, #4
 8005b48:	6093      	str	r3, [r2, #8]
}
 8005b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8005b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b58:	f1b8 0f00 	cmp.w	r8, #0
 8005b5c:	d1cb      	bne.n	8005af6 <HAL_ADC_Start_DMA+0x8e>
 8005b5e:	e7c6      	b.n	8005aee <HAL_ADC_Start_DMA+0x86>
 8005b60:	50000100 	.word	0x50000100
 8005b64:	50000700 	.word	0x50000700
 8005b68:	50000300 	.word	0x50000300
 8005b6c:	50000600 	.word	0x50000600
 8005b70:	08005451 	.word	0x08005451
 8005b74:	08005441 	.word	0x08005441
 8005b78:	080054bd 	.word	0x080054bd

08005b7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b7c:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b7e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b82:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8005b84:	2a01      	cmp	r2, #1
{
 8005b86:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8005b88:	d056      	beq.n	8005c38 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b8a:	6802      	ldr	r2, [r0, #0]
 8005b8c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005b8e:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8005b90:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b92:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005b96:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005b98:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005b9c:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8005ba0:	4d48      	ldr	r5, [pc, #288]	; (8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005ba2:	42aa      	cmp	r2, r5
 8005ba4:	d046      	beq.n	8005c34 <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ba8:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bac:	f042 0220 	orr.w	r2, r2, #32
 8005bb0:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005bb2:	b01d      	add	sp, #116	; 0x74
 8005bb4:	bc70      	pop	{r4, r5, r6}
 8005bb6:	4770      	bx	lr
 8005bb8:	4843      	ldr	r0, [pc, #268]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bba:	6880      	ldr	r0, [r0, #8]
 8005bbc:	0740      	lsls	r0, r0, #29
 8005bbe:	d50b      	bpl.n	8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8005bc0:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bc4:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005bc8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bca:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005bd2:	b01d      	add	sp, #116	; 0x74
 8005bd4:	bc70      	pop	{r4, r5, r6}
 8005bd6:	4770      	bx	lr
 8005bd8:	6890      	ldr	r0, [r2, #8]
 8005bda:	0744      	lsls	r4, r0, #29
 8005bdc:	d4f1      	bmi.n	8005bc2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bde:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005be2:	d02d      	beq.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8005be4:	4838      	ldr	r0, [pc, #224]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005be6:	4282      	cmp	r2, r0
 8005be8:	d02a      	beq.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	d058      	beq.n	8005ca0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005bee:	4837      	ldr	r0, [pc, #220]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005bf0:	684c      	ldr	r4, [r1, #4]
 8005bf2:	6882      	ldr	r2, [r0, #8]
 8005bf4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005bf8:	4322      	orrs	r2, r4
 8005bfa:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8005bfe:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8005c02:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c04:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005c06:	6894      	ldr	r4, [r2, #8]
 8005c08:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005c0c:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c0e:	4322      	orrs	r2, r4
 8005c10:	4c2f      	ldr	r4, [pc, #188]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005c12:	68a4      	ldr	r4, [r4, #8]
 8005c14:	4322      	orrs	r2, r4
 8005c16:	43d2      	mvns	r2, r2
 8005c18:	f002 0201 	and.w	r2, r2, #1
 8005c1c:	b142      	cbz	r2, 8005c30 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 8005c1e:	6884      	ldr	r4, [r0, #8]
 8005c20:	688a      	ldr	r2, [r1, #8]
 8005c22:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8005c26:	4332      	orrs	r2, r6
 8005c28:	f021 010f 	bic.w	r1, r1, #15
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c30:	2000      	movs	r0, #0
 8005c32:	e7cb      	b.n	8005bcc <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8005c34:	4827      	ldr	r0, [pc, #156]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005c36:	e7c0      	b.n	8005bba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8005c38:	2002      	movs	r0, #2
}
 8005c3a:	b01d      	add	sp, #116	; 0x74
 8005c3c:	bc70      	pop	{r4, r5, r6}
 8005c3e:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c40:	b1ae      	cbz	r6, 8005c6e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005c42:	4825      	ldr	r0, [pc, #148]	; (8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005c44:	684c      	ldr	r4, [r1, #4]
 8005c46:	6882      	ldr	r2, [r0, #8]
 8005c48:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c4c:	4322      	orrs	r2, r4
 8005c4e:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8005c52:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8005c56:	6082      	str	r2, [r0, #8]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005c5a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c5e:	6880      	ldr	r0, [r0, #8]
 8005c60:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c62:	4302      	orrs	r2, r0
 8005c64:	43d2      	mvns	r2, r2
 8005c66:	481c      	ldr	r0, [pc, #112]	; (8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005c68:	f002 0201 	and.w	r2, r2, #1
 8005c6c:	e7d6      	b.n	8005c1c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005c6e:	491a      	ldr	r1, [pc, #104]	; (8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005c70:	688a      	ldr	r2, [r1, #8]
 8005c72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c76:	608a      	str	r2, [r1, #8]
 8005c78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c7c:	4a12      	ldr	r2, [pc, #72]	; (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8005c7e:	6880      	ldr	r0, [r0, #8]
 8005c80:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c82:	4915      	ldr	r1, [pc, #84]	; (8005cd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005c84:	4302      	orrs	r2, r0
 8005c86:	43d2      	mvns	r2, r2
 8005c88:	f002 0201 	and.w	r2, r2, #1
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d0cf      	beq.n	8005c30 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c90:	688a      	ldr	r2, [r1, #8]
 8005c92:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005c96:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c9a:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c9c:	608a      	str	r2, [r1, #8]
 8005c9e:	e795      	b.n	8005bcc <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ca0:	490a      	ldr	r1, [pc, #40]	; (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ca2:	4808      	ldr	r0, [pc, #32]	; (8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8005ca4:	688a      	ldr	r2, [r1, #8]
 8005ca6:	4c0b      	ldr	r4, [pc, #44]	; (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005ca8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005cac:	608a      	str	r2, [r1, #8]
 8005cae:	6880      	ldr	r0, [r0, #8]
 8005cb0:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cb2:	4302      	orrs	r2, r0
 8005cb4:	4806      	ldr	r0, [pc, #24]	; (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005cb6:	6880      	ldr	r0, [r0, #8]
 8005cb8:	4302      	orrs	r2, r0
 8005cba:	43d2      	mvns	r2, r2
 8005cbc:	f002 0201 	and.w	r2, r2, #1
 8005cc0:	e7e4      	b.n	8005c8c <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8005cc2:	bf00      	nop
 8005cc4:	50000400 	.word	0x50000400
 8005cc8:	50000100 	.word	0x50000100
 8005ccc:	50000700 	.word	0x50000700
 8005cd0:	50000600 	.word	0x50000600
 8005cd4:	50000500 	.word	0x50000500
 8005cd8:	50000300 	.word	0x50000300

08005cdc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cdc:	4907      	ldr	r1, [pc, #28]	; (8005cfc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005cde:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ce2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cea:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cec:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005cf6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	e000ed00 	.word	0xe000ed00

08005d00 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_NVIC_SetPriority+0x74>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d08:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d0a:	f1c3 0e07 	rsb	lr, r3, #7
 8005d0e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d12:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d16:	bf28      	it	cs
 8005d18:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d1c:	f1bc 0f06 	cmp.w	ip, #6
 8005d20:	d91b      	bls.n	8005d5a <HAL_NVIC_SetPriority+0x5a>
 8005d22:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d24:	f04f 3cff 	mov.w	ip, #4294967295
 8005d28:	fa0c fc03 	lsl.w	ip, ip, r3
 8005d2c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d30:	f04f 3cff 	mov.w	ip, #4294967295
 8005d34:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005d38:	ea21 010c 	bic.w	r1, r1, ip
 8005d3c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005d3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d40:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005d44:	db0c      	blt.n	8005d60 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d46:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005d4a:	0109      	lsls	r1, r1, #4
 8005d4c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005d50:	b2c9      	uxtb	r1, r1
 8005d52:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d5a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	e7e7      	b.n	8005d30 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <HAL_NVIC_SetPriority+0x78>)
 8005d62:	f000 000f 	and.w	r0, r0, #15
 8005d66:	0109      	lsls	r1, r1, #4
 8005d68:	4403      	add	r3, r0
 8005d6a:	b2c9      	uxtb	r1, r1
 8005d6c:	7619      	strb	r1, [r3, #24]
 8005d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d72:	bf00      	nop
 8005d74:	e000ed00 	.word	0xe000ed00
 8005d78:	e000ecfc 	.word	0xe000ecfc

08005d7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	db07      	blt.n	8005d90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <HAL_NVIC_EnableIRQ+0x18>)
 8005d82:	0941      	lsrs	r1, r0, #5
 8005d84:	2301      	movs	r3, #1
 8005d86:	f000 001f 	and.w	r0, r0, #31
 8005d8a:	4083      	lsls	r3, r0
 8005d8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	e000e100 	.word	0xe000e100

08005d98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d98:	3801      	subs	r0, #1
 8005d9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005d9e:	d210      	bcs.n	8005dc2 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005da0:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005da2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da6:	4c08      	ldr	r4, [pc, #32]	; (8005dc8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005da8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005daa:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8005dae:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005db2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005db4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005db6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005db8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8005dba:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dbe:	6119      	str	r1, [r3, #16]
 8005dc0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	e000ed00 	.word	0xe000ed00

08005dcc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d078      	beq.n	8005ec2 <HAL_DMA_Init+0xf6>
{
 8005dd0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005dd2:	4b3d      	ldr	r3, [pc, #244]	; (8005ec8 <HAL_DMA_Init+0xfc>)
 8005dd4:	6804      	ldr	r4, [r0, #0]
 8005dd6:	429c      	cmp	r4, r3
 8005dd8:	d95f      	bls.n	8005e9a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005dda:	4a3c      	ldr	r2, [pc, #240]	; (8005ecc <HAL_DMA_Init+0x100>)
 8005ddc:	4b3c      	ldr	r3, [pc, #240]	; (8005ed0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8005dde:	493d      	ldr	r1, [pc, #244]	; (8005ed4 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005de0:	4422      	add	r2, r4
 8005de2:	fba3 3202 	umull	r3, r2, r3, r2
 8005de6:	0912      	lsrs	r2, r2, #4
 8005de8:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dea:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005dec:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8005df2:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005df4:	4e36      	ldr	r6, [pc, #216]	; (8005ed0 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005df6:	4f34      	ldr	r7, [pc, #208]	; (8005ec8 <HAL_DMA_Init+0xfc>)
 8005df8:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dfc:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8005dfe:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6941      	ldr	r1, [r0, #20]
 8005e04:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e06:	6981      	ldr	r1, [r0, #24]
 8005e08:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8005e0a:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e0c:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e10:	69c1      	ldr	r1, [r0, #28]
 8005e12:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e14:	b2e1      	uxtb	r1, r4
 8005e16:	3908      	subs	r1, #8
 8005e18:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e1c:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e1e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e22:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8005e24:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8005e28:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e2a:	4e2b      	ldr	r6, [pc, #172]	; (8005ed8 <HAL_DMA_Init+0x10c>)
 8005e2c:	4b2b      	ldr	r3, [pc, #172]	; (8005edc <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e2e:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e32:	42bc      	cmp	r4, r7
 8005e34:	bf98      	it	ls
 8005e36:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e38:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e3c:	4c28      	ldr	r4, [pc, #160]	; (8005ee0 <HAL_DMA_Init+0x114>)
 8005e3e:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e40:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e44:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e46:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e4a:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e4c:	6484      	str	r4, [r0, #72]	; 0x48
 8005e4e:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e52:	d02b      	beq.n	8005eac <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e54:	6845      	ldr	r5, [r0, #4]
 8005e56:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e58:	3d01      	subs	r5, #1
 8005e5a:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e5c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e60:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e64:	d828      	bhi.n	8005eb8 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e66:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e68:	4d1f      	ldr	r5, [pc, #124]	; (8005ee8 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e6a:	4a20      	ldr	r2, [pc, #128]	; (8005eec <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e6c:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005e6e:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e70:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005e72:	f004 041f 	and.w	r4, r4, #31
 8005e76:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e7a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e7c:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005e80:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e82:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e84:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e86:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005e88:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e8a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005e8c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005e90:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8005e94:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005e96:	4618      	mov	r0, r3
}
 8005e98:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_DMA_Init+0x124>)
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8005e9e:	4915      	ldr	r1, [pc, #84]	; (8005ef4 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005ea0:	4422      	add	r2, r4
 8005ea2:	fba3 3202 	umull	r3, r2, r3, r2
 8005ea6:	0912      	lsrs	r2, r2, #4
 8005ea8:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8005eaa:	e79e      	b.n	8005dea <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005eac:	2400      	movs	r4, #0
 8005eae:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005eb0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eb4:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005eb8:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005eba:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ebe:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005ec0:	e7e1      	b.n	8005e86 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8005ec2:	2001      	movs	r0, #1
}
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40020407 	.word	0x40020407
 8005ecc:	bffdfbf8 	.word	0xbffdfbf8
 8005ed0:	cccccccd 	.word	0xcccccccd
 8005ed4:	40020400 	.word	0x40020400
 8005ed8:	40020800 	.word	0x40020800
 8005edc:	40020820 	.word	0x40020820
 8005ee0:	40020880 	.word	0x40020880
 8005ee4:	1000823f 	.word	0x1000823f
 8005ee8:	40020940 	.word	0x40020940
 8005eec:	40020900 	.word	0x40020900
 8005ef0:	bffdfff8 	.word	0xbffdfff8
 8005ef4:	40020000 	.word	0x40020000

08005ef8 <HAL_DMA_Start_IT>:
{
 8005ef8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8005efa:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8005efe:	2c01      	cmp	r4, #1
 8005f00:	d051      	beq.n	8005fa6 <HAL_DMA_Start_IT+0xae>
 8005f02:	2401      	movs	r4, #1
 8005f04:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8005f08:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8005f0c:	2c01      	cmp	r4, #1
 8005f0e:	d005      	beq.n	8005f1c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8005f10:	2300      	movs	r3, #0
 8005f12:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8005f16:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8005f18:	2002      	movs	r0, #2
}
 8005f1a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f1c:	2402      	movs	r4, #2
 8005f1e:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f22:	2400      	movs	r4, #0
 8005f24:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005f26:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f28:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8005f2a:	6825      	ldr	r5, [r4, #0]
 8005f2c:	f025 0501 	bic.w	r5, r5, #1
 8005f30:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f32:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8005f36:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8005f38:	b115      	cbz	r5, 8005f40 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f3a:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8005f3e:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f40:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8005f42:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005f44:	f006 0c1f 	and.w	ip, r6, #31
 8005f48:	2601      	movs	r6, #1
 8005f4a:	fa06 f60c 	lsl.w	r6, r6, ip
 8005f4e:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8005f50:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f52:	6883      	ldr	r3, [r0, #8]
 8005f54:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8005f56:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8005f58:	bf0b      	itete	eq
 8005f5a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005f5c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005f5e:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005f60:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8005f62:	b1bb      	cbz	r3, 8005f94 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	f043 030e 	orr.w	r3, r3, #14
 8005f6a:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f6c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	03d2      	lsls	r2, r2, #15
 8005f72:	d503      	bpl.n	8005f7c <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005f7c:	b11d      	cbz	r5, 8005f86 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f7e:	682b      	ldr	r3, [r5, #0]
 8005f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f84:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005f8e:	6023      	str	r3, [r4, #0]
}
 8005f90:	bcf0      	pop	{r4, r5, r6, r7}
 8005f92:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	f023 0304 	bic.w	r3, r3, #4
 8005f9a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f043 030a 	orr.w	r3, r3, #10
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	e7e2      	b.n	8005f6c <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8005fa6:	2002      	movs	r0, #2
}
 8005fa8:	bcf0      	pop	{r4, r5, r6, r7}
 8005faa:	4770      	bx	lr

08005fac <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fac:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005fb0:	2a02      	cmp	r2, #2
{
 8005fb2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fb4:	d009      	beq.n	8005fca <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8005fba:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005fbc:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8005fbe:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005fc0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005fc8:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fca:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fcc:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8005fce:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fd0:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd2:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fd4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd6:	f020 000e 	bic.w	r0, r0, #14
 8005fda:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005fe2:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8005fe4:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fe6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8005fe8:	f020 0001 	bic.w	r0, r0, #1
 8005fec:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fee:	f001 011f 	and.w	r1, r1, #31
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ff6:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ffa:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ffc:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005ffe:	b138      	cbz	r0, 8006010 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006000:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006002:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800600a:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800600c:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800600e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006010:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8006012:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006014:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800601c:	bc30      	pop	{r4, r5}
 800601e:	4770      	bx	lr

08006020 <HAL_DMA_Abort_IT>:
{
 8006020:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006022:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8006026:	2b02      	cmp	r3, #2
 8006028:	d009      	beq.n	800603e <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 800602a:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800602c:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 800602e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006030:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006032:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006036:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 800603a:	4618      	mov	r0, r3
}
 800603c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800603e:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006040:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006042:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006046:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006048:	f021 010e 	bic.w	r1, r1, #14
 800604c:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	f021 0101 	bic.w	r1, r1, #1
 8006054:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006056:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006058:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800605a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800605e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006060:	f002 021f 	and.w	r2, r2, #31
 8006064:	2301      	movs	r3, #1
 8006066:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006068:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800606c:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800606e:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006070:	b132      	cbz	r2, 8006080 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006072:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006074:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800607e:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8006080:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006082:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8006084:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006086:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800608a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800608e:	b113      	cbz	r3, 8006096 <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8006090:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	4620      	mov	r0, r4
}
 8006094:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	4618      	mov	r0, r3
}
 8006098:	bd38      	pop	{r3, r4, r5, pc}
 800609a:	bf00      	nop

0800609c <HAL_DMA_IRQHandler>:
{
 800609c:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800609e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060a0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80060a2:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060a4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80060a6:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2204      	movs	r2, #4
 80060ae:	409a      	lsls	r2, r3
 80060b0:	420a      	tst	r2, r1
 80060b2:	d00e      	beq.n	80060d2 <HAL_DMA_IRQHandler+0x36>
 80060b4:	f014 0f04 	tst.w	r4, #4
 80060b8:	d00b      	beq.n	80060d2 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	069b      	lsls	r3, r3, #26
 80060be:	d403      	bmi.n	80060c8 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	f023 0304 	bic.w	r3, r3, #4
 80060c6:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80060c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80060ca:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80060cc:	b1cb      	cbz	r3, 8006102 <HAL_DMA_IRQHandler+0x66>
}
 80060ce:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80060d0:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060d2:	2202      	movs	r2, #2
 80060d4:	409a      	lsls	r2, r3
 80060d6:	420a      	tst	r2, r1
 80060d8:	d015      	beq.n	8006106 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 80060da:	f014 0f02 	tst.w	r4, #2
 80060de:	d012      	beq.n	8006106 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	0699      	lsls	r1, r3, #26
 80060e4:	d406      	bmi.n	80060f4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	f023 030a 	bic.w	r3, r3, #10
 80060ec:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 80060f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80060f6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80060f8:	2100      	movs	r1, #0
 80060fa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <HAL_DMA_IRQHandler+0x32>
}
 8006102:	bc70      	pop	{r4, r5, r6}
 8006104:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006106:	2208      	movs	r2, #8
 8006108:	409a      	lsls	r2, r3
 800610a:	420a      	tst	r2, r1
 800610c:	d0f9      	beq.n	8006102 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 800610e:	0722      	lsls	r2, r4, #28
 8006110:	d5f7      	bpl.n	8006102 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006112:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006114:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006116:	f022 020e 	bic.w	r2, r2, #14
 800611a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800611c:	2201      	movs	r2, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8006122:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006124:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006126:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006128:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800612c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8006130:	2900      	cmp	r1, #0
 8006132:	d0e6      	beq.n	8006102 <HAL_DMA_IRQHandler+0x66>
}
 8006134:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006136:	4708      	bx	r1

08006138 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006138:	2800      	cmp	r0, #0
 800613a:	f000 814c 	beq.w	80063d6 <HAL_FDCAN_Init+0x29e>
{
 800613e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006142:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006146:	4604      	mov	r4, r0
 8006148:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800614c:	2b00      	cmp	r3, #0
 800614e:	d073      	beq.n	8006238 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	6993      	ldr	r3, [r2, #24]
 8006154:	f023 0310 	bic.w	r3, r3, #16
 8006158:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800615a:	f7fc fe63 	bl	8002e24 <HAL_GetTick>
 800615e:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006160:	e004      	b.n	800616c <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006162:	f7fc fe5f 	bl	8002e24 <HAL_GetTick>
 8006166:	1b43      	subs	r3, r0, r5
 8006168:	2b0a      	cmp	r3, #10
 800616a:	d85b      	bhi.n	8006224 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	0711      	lsls	r1, r2, #28
 8006172:	d4f6      	bmi.n	8006162 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800617c:	f7fc fe52 	bl	8002e24 <HAL_GetTick>
 8006180:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006182:	e004      	b.n	800618e <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006184:	f7fc fe4e 	bl	8002e24 <HAL_GetTick>
 8006188:	1b40      	subs	r0, r0, r5
 800618a:	280a      	cmp	r0, #10
 800618c:	d84a      	bhi.n	8006224 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	07d2      	lsls	r2, r2, #31
 8006194:	d5f6      	bpl.n	8006184 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006196:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006198:	4998      	ldr	r1, [pc, #608]	; (80063fc <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800619a:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 800619e:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80061a0:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80061a2:	f000 8113 	beq.w	80063cc <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80061a6:	7c22      	ldrb	r2, [r4, #16]
 80061a8:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	bf0c      	ite	eq
 80061ae:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80061b2:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 80061b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80061b8:	7c62      	ldrb	r2, [r4, #17]
 80061ba:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	bf0c      	ite	eq
 80061c0:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80061c4:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 80061c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80061ca:	7ca2      	ldrb	r2, [r4, #18]
 80061cc:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	bf0c      	ite	eq
 80061d2:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061d6:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 80061da:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80061e0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80061e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061e6:	4302      	orrs	r2, r0
 80061e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80061f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80061f2:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80061f4:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80061f6:	f022 0210 	bic.w	r2, r2, #16
 80061fa:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80061fc:	d021      	beq.n	8006242 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80061fe:	b321      	cbz	r1, 800624a <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006200:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006202:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006204:	f000 80f5 	beq.w	80063f2 <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006208:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800620c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800620e:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006210:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006212:	f042 0210 	orr.w	r2, r2, #16
 8006216:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006218:	d117      	bne.n	800624a <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	f042 0220 	orr.w	r2, r2, #32
 8006220:	619a      	str	r2, [r3, #24]
 8006222:	e012      	b.n	800624a <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006224:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006226:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800622e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006232:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006238:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 800623c:	f7fb fb18 	bl	8001870 <HAL_FDCAN_MspInit>
 8006240:	e786      	b.n	8006150 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	f042 0204 	orr.w	r2, r2, #4
 8006248:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800624a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800624e:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006250:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006252:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006254:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006258:	6a21      	ldr	r1, [r4, #32]
 800625a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800625c:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800625e:	6961      	ldr	r1, [r4, #20]
 8006260:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006262:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006266:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800626a:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800626c:	d10e      	bne.n	800628c <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800626e:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006272:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006274:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006276:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006278:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800627a:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800627c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006280:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006282:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006284:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006286:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800628a:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800628c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006290:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006292:	495b      	ldr	r1, [pc, #364]	; (8006400 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006294:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 8006296:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006298:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 800629c:	f000 809d 	beq.w	80063da <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80062a0:	4a58      	ldr	r2, [pc, #352]	; (8006404 <HAL_FDCAN_Init+0x2cc>)
 80062a2:	4e59      	ldr	r6, [pc, #356]	; (8006408 <HAL_FDCAN_Init+0x2d0>)
 80062a4:	4f59      	ldr	r7, [pc, #356]	; (800640c <HAL_FDCAN_Init+0x2d4>)
 80062a6:	4d5a      	ldr	r5, [pc, #360]	; (8006410 <HAL_FDCAN_Init+0x2d8>)
 80062a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf18      	it	ne
 80062b0:	4691      	movne	r9, r2
 80062b2:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 80062b6:	f1a2 0218 	sub.w	r2, r2, #24
 80062ba:	f101 0110 	add.w	r1, r1, #16
 80062be:	bf18      	it	ne
 80062c0:	4616      	movne	r6, r2
 80062c2:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 80062c6:	bf14      	ite	ne
 80062c8:	4617      	movne	r7, r2
 80062ca:	468e      	moveq	lr, r1
 80062cc:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 80062d0:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 80062d4:	bf14      	ite	ne
 80062d6:	4696      	movne	lr, r2
 80062d8:	4688      	moveq	r8, r1
 80062da:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 80062de:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 80062e2:	bf14      	ite	ne
 80062e4:	4690      	movne	r8, r2
 80062e6:	468c      	moveq	ip, r1
 80062e8:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 80062ec:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 80062f0:	bf14      	ite	ne
 80062f2:	4694      	movne	ip, r2
 80062f4:	46a9      	moveq	r9, r5
 80062f6:	f502 7254 	add.w	r2, r2, #848	; 0x350
 80062fa:	bf18      	it	ne
 80062fc:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80062fe:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006302:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006304:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006306:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 800630a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800630e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006312:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006316:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006318:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800631c:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8006320:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8006324:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006328:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800632c:	1a89      	subs	r1, r1, r2
 800632e:	1c53      	adds	r3, r2, #1
 8006330:	4563      	cmp	r3, ip
 8006332:	ea4f 0391 	mov.w	r3, r1, lsr #2
 8006336:	f103 0301 	add.w	r3, r3, #1
 800633a:	bf98      	it	ls
 800633c:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800633e:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006342:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006346:	bf88      	it	hi
 8006348:	2501      	movhi	r5, #1
 800634a:	f3c2 0380 	ubfx	r3, r2, #2, #1
 800634e:	d81a      	bhi.n	8006386 <HAL_FDCAN_Init+0x24e>
 8006350:	2917      	cmp	r1, #23
 8006352:	bf8c      	ite	hi
 8006354:	2100      	movhi	r1, #0
 8006356:	2101      	movls	r1, #1
 8006358:	b9a9      	cbnz	r1, 8006386 <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800635a:	4616      	mov	r6, r2
 800635c:	b10b      	cbz	r3, 8006362 <HAL_FDCAN_Init+0x22a>
 800635e:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006362:	1aed      	subs	r5, r5, r3
 8006364:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006368:	086a      	lsrs	r2, r5, #1
 800636a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800636e:	2000      	movs	r0, #0
 8006370:	2100      	movs	r1, #0
 8006372:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006376:	429a      	cmp	r2, r3
 8006378:	d1fb      	bne.n	8006372 <HAL_FDCAN_Init+0x23a>
 800637a:	f025 0301 	bic.w	r3, r5, #1
 800637e:	429d      	cmp	r5, r3
 8006380:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8006384:	d01a      	beq.n	80063bc <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006386:	4611      	mov	r1, r2
 8006388:	2300      	movs	r3, #0
 800638a:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800638e:	458c      	cmp	ip, r1
 8006390:	d914      	bls.n	80063bc <HAL_FDCAN_Init+0x284>
 8006392:	f102 0108 	add.w	r1, r2, #8
 8006396:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006398:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800639a:	d90f      	bls.n	80063bc <HAL_FDCAN_Init+0x284>
 800639c:	f102 010c 	add.w	r1, r2, #12
 80063a0:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80063a2:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063a4:	d90a      	bls.n	80063bc <HAL_FDCAN_Init+0x284>
 80063a6:	f102 0110 	add.w	r1, r2, #16
 80063aa:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80063ac:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063ae:	d905      	bls.n	80063bc <HAL_FDCAN_Init+0x284>
 80063b0:	f102 0114 	add.w	r1, r2, #20
 80063b4:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80063b6:	6113      	str	r3, [r2, #16]
 80063b8:	bf88      	it	hi
 80063ba:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 80063bc:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80063be:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80063c0:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80063c2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 80063c6:	65a0      	str	r0, [r4, #88]	; 0x58
}
 80063c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80063cc:	4a11      	ldr	r2, [pc, #68]	; (8006414 <HAL_FDCAN_Init+0x2dc>)
 80063ce:	6861      	ldr	r1, [r4, #4]
 80063d0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 80063d4:	e6e7      	b.n	80061a6 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 80063d6:	2001      	movs	r0, #1
}
 80063d8:	4770      	bx	lr
 80063da:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8006424 <HAL_FDCAN_Init+0x2ec>
 80063de:	4e0e      	ldr	r6, [pc, #56]	; (8006418 <HAL_FDCAN_Init+0x2e0>)
 80063e0:	4f0e      	ldr	r7, [pc, #56]	; (800641c <HAL_FDCAN_Init+0x2e4>)
 80063e2:	f8df e044 	ldr.w	lr, [pc, #68]	; 8006428 <HAL_FDCAN_Init+0x2f0>
 80063e6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800642c <HAL_FDCAN_Init+0x2f4>
 80063ea:	f8df c044 	ldr.w	ip, [pc, #68]	; 8006430 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 80063ee:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <HAL_FDCAN_Init+0x2e8>)
 80063f0:	e785      	b.n	80062fe <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80063f2:	f042 0220 	orr.w	r2, r2, #32
 80063f6:	619a      	str	r2, [r3, #24]
 80063f8:	e727      	b.n	800624a <HAL_FDCAN_Init+0x112>
 80063fa:	bf00      	nop
 80063fc:	40006400 	.word	0x40006400
 8006400:	40006800 	.word	0x40006800
 8006404:	4000a678 	.word	0x4000a678
 8006408:	4000ad00 	.word	0x4000ad00
 800640c:	4000ac28 	.word	0x4000ac28
 8006410:	4000ad18 	.word	0x4000ad18
 8006414:	40006000 	.word	0x40006000
 8006418:	4000a9b0 	.word	0x4000a9b0
 800641c:	4000a8d8 	.word	0x4000a8d8
 8006420:	4000a750 	.word	0x4000a750
 8006424:	4000a9c8 	.word	0x4000a9c8
 8006428:	4000a800 	.word	0x4000a800
 800642c:	4000a7c0 	.word	0x4000a7c0
 8006430:	4000aaa0 	.word	0x4000aaa0

08006434 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006434:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006438:	3a01      	subs	r2, #1
 800643a:	2a01      	cmp	r2, #1
{
 800643c:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800643e:	d905      	bls.n	800644c <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006440:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006442:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006446:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006448:	661a      	str	r2, [r3, #96]	; 0x60
}
 800644a:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800644c:	6808      	ldr	r0, [r1, #0]
{
 800644e:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006450:	b978      	cbnz	r0, 8006472 <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 8006452:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006456:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006458:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 800645c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800645e:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006460:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006462:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 8006464:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 800646a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 800646e:	bc30      	pop	{r4, r5}
 8006470:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006472:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006474:	688a      	ldr	r2, [r1, #8]
 8006476:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006478:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800647a:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800647e:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006482:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006486:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 800648a:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 800648e:	2000      	movs	r0, #0
}
 8006490:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8006492:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8006496:	4770      	bx	lr

08006498 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006498:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800649c:	2a01      	cmp	r2, #1
{
 800649e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80064a0:	d005      	beq.n	80064ae <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80064a2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80064a4:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 80064a8:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80064aa:	661a      	str	r2, [r3, #96]	; 0x60
}
 80064ac:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80064ae:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80064b0:	2202      	movs	r2, #2
 80064b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80064b6:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80064b8:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 80064c0:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80064c2:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop

080064c8 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80064c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80064ca:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80064ce:	2b02      	cmp	r3, #2
{
 80064d0:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80064d2:	d10c      	bne.n	80064ee <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80064d4:	6805      	ldr	r5, [r0, #0]
 80064d6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 80064da:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 80064de:	d00d      	beq.n	80064fc <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80064e0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80064e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80064e6:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80064e8:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 80064ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80064ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80064f0:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 80064f4:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80064f6:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 80064fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80064fc:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006500:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006502:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006506:	2b00      	cmp	r3, #0
 8006508:	d139      	bne.n	800657e <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 800650a:	688b      	ldr	r3, [r1, #8]
 800650c:	690f      	ldr	r7, [r1, #16]
 800650e:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006510:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006512:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006516:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 800651a:	4303      	orrs	r3, r0
 800651c:	6948      	ldr	r0, [r1, #20]
 800651e:	6a0c      	ldr	r4, [r1, #32]
 8006520:	4303      	orrs	r3, r0
 8006522:	68c8      	ldr	r0, [r1, #12]
 8006524:	4303      	orrs	r3, r0
 8006526:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800652a:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 800652e:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006532:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006536:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800653a:	4c15      	ldr	r4, [pc, #84]	; (8006590 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 800653c:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800653e:	89cb      	ldrh	r3, [r1, #14]
 8006540:	5ce3      	ldrb	r3, [r4, r3]
 8006542:	b1a3      	cbz	r3, 800656e <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006544:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006546:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006548:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800654a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 800654e:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006550:	433b      	orrs	r3, r7
 8006552:	7857      	ldrb	r7, [r2, #1]
 8006554:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006558:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800655c:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006560:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006562:	89cb      	ldrh	r3, [r1, #14]
 8006564:	5ce3      	ldrb	r3, [r4, r3]
 8006566:	459c      	cmp	ip, r3
 8006568:	f102 0204 	add.w	r2, r2, #4
 800656c:	d3ea      	bcc.n	8006544 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800656e:	2301      	movs	r3, #1
 8006570:	40b3      	lsls	r3, r6
 8006572:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 8006576:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006578:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 800657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 800657e:	690b      	ldr	r3, [r1, #16]
 8006580:	6808      	ldr	r0, [r1, #0]
 8006582:	ea43 0700 	orr.w	r7, r3, r0
 8006586:	688b      	ldr	r3, [r1, #8]
 8006588:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800658a:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 800658e:	e7c2      	b.n	8006516 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006590:	0800d994 	.word	0x0800d994

08006594 <HAL_FDCAN_GetRxMessage>:
{
 8006594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006596:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006598:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 800659c:	2802      	cmp	r0, #2
 800659e:	d10d      	bne.n	80065bc <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80065a0:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80065a2:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80065a6:	d00f      	beq.n	80065c8 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80065a8:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 80065ac:	0700      	lsls	r0, r0, #28
 80065ae:	d160      	bne.n	8006672 <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80065b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80065b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 80065b6:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80065b8:	6623      	str	r3, [r4, #96]	; 0x60
}
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80065bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80065be:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 80065c2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80065c4:	6623      	str	r3, [r4, #96]	; 0x60
}
 80065c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80065c8:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 80065cc:	0705      	lsls	r5, r0, #28
 80065ce:	d0ef      	beq.n	80065b0 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80065d0:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80065d4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80065d6:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80065da:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 80065de:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80065e2:	6828      	ldr	r0, [r5, #0]
 80065e4:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 80065e8:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d150      	bne.n	8006690 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80065ee:	6828      	ldr	r0, [r5, #0]
 80065f0:	f3c0 408a 	ubfx	r0, r0, #18, #11
 80065f4:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80065f6:	6828      	ldr	r0, [r5, #0]
 80065f8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80065fc:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80065fe:	6828      	ldr	r0, [r5, #0]
 8006600:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006604:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006606:	88a8      	ldrh	r0, [r5, #4]
 8006608:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800660a:	6868      	ldr	r0, [r5, #4]
 800660c:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8006610:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006612:	686e      	ldr	r6, [r5, #4]
 8006614:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8006618:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800661a:	686e      	ldr	r6, [r5, #4]
 800661c:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8006620:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006622:	79ee      	ldrb	r6, [r5, #7]
 8006624:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006628:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800662a:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800662c:	4e1a      	ldr	r6, [pc, #104]	; (8006698 <HAL_FDCAN_GetRxMessage+0x104>)
 800662e:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006632:	6868      	ldr	r0, [r5, #4]
 8006634:	0fc0      	lsrs	r0, r0, #31
 8006636:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006638:	f1be 0f00 	cmp.w	lr, #0
 800663c:	d011      	beq.n	8006662 <HAL_FDCAN_GetRxMessage+0xce>
 800663e:	3b01      	subs	r3, #1
 8006640:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006644:	46f4      	mov	ip, lr
 8006646:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 800664a:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800664e:	89d0      	ldrh	r0, [r2, #14]
 8006650:	f1ac 0c06 	sub.w	ip, ip, #6
 8006654:	5c30      	ldrb	r0, [r6, r0]
 8006656:	ebac 0c05 	sub.w	ip, ip, r5
 800665a:	4560      	cmp	r0, ip
 800665c:	d8f2      	bhi.n	8006644 <HAL_FDCAN_GetRxMessage+0xb0>
 800665e:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006662:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006664:	bf0c      	ite	eq
 8006666:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 800666a:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 800666e:	2000      	movs	r0, #0
}
 8006670:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006672:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006676:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006678:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800667c:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006680:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006684:	6828      	ldr	r0, [r5, #0]
 8006686:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 800668a:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800668c:	2800      	cmp	r0, #0
 800668e:	d0ae      	beq.n	80065ee <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006690:	6828      	ldr	r0, [r5, #0]
 8006692:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006696:	e7ad      	b.n	80065f4 <HAL_FDCAN_GetRxMessage+0x60>
 8006698:	0800d994 	.word	0x0800d994

0800669c <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800669c:	6803      	ldr	r3, [r0, #0]
 800669e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 80066a2:	f000 0007 	and.w	r0, r0, #7
 80066a6:	4770      	bx	lr

080066a8 <HAL_FDCAN_ActivateNotification>:
{
 80066a8:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80066aa:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80066ae:	3801      	subs	r0, #1
 80066b0:	2801      	cmp	r0, #1
 80066b2:	d905      	bls.n	80066c0 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80066b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066b6:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80066ba:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80066bc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80066be:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 80066c0:	681b      	ldr	r3, [r3, #0]
{
 80066c2:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80066c4:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 80066c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80066ca:	d03d      	beq.n	8006748 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80066cc:	07c4      	lsls	r4, r0, #31
 80066ce:	d43b      	bmi.n	8006748 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80066d0:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80066d2:	f044 0401 	orr.w	r4, r4, #1
 80066d6:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80066d8:	b1cd      	cbz	r5, 800670e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80066da:	07c5      	lsls	r5, r0, #31
 80066dc:	d517      	bpl.n	800670e <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80066de:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80066e0:	f040 0002 	orr.w	r0, r0, #2
 80066e4:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80066e6:	060c      	lsls	r4, r1, #24
 80066e8:	d504      	bpl.n	80066f4 <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80066ea:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 80066ee:	4310      	orrs	r0, r2
 80066f0:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80066f4:	05c8      	lsls	r0, r1, #23
 80066f6:	d504      	bpl.n	8006702 <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80066f8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80066fc:	4302      	orrs	r2, r0
 80066fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006702:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006704:	430a      	orrs	r2, r1
    return HAL_OK;
 8006706:	2000      	movs	r0, #0
}
 8006708:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
}
 800670c:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800670e:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006712:	d001      	beq.n	8006718 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006714:	0784      	lsls	r4, r0, #30
 8006716:	d4e2      	bmi.n	80066de <HAL_FDCAN_ActivateNotification+0x36>
 8006718:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 800671c:	d131      	bne.n	8006782 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800671e:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006722:	d001      	beq.n	8006728 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006724:	0704      	lsls	r4, r0, #28
 8006726:	d4da      	bmi.n	80066de <HAL_FDCAN_ActivateNotification+0x36>
 8006728:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 800672c:	d001      	beq.n	8006732 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800672e:	06c5      	lsls	r5, r0, #27
 8006730:	d4d5      	bmi.n	80066de <HAL_FDCAN_ActivateNotification+0x36>
 8006732:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006736:	d001      	beq.n	800673c <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006738:	0684      	lsls	r4, r0, #26
 800673a:	d4d0      	bmi.n	80066de <HAL_FDCAN_ActivateNotification+0x36>
 800673c:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006740:	d0d1      	beq.n	80066e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006742:	0645      	lsls	r5, r0, #25
 8006744:	d5cf      	bpl.n	80066e6 <HAL_FDCAN_ActivateNotification+0x3e>
 8006746:	e7ca      	b.n	80066de <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006748:	f011 0f38 	tst.w	r1, #56	; 0x38
 800674c:	d001      	beq.n	8006752 <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800674e:	0784      	lsls	r4, r0, #30
 8006750:	d5be      	bpl.n	80066d0 <HAL_FDCAN_ActivateNotification+0x28>
 8006752:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006756:	d117      	bne.n	8006788 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006758:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 800675c:	d001      	beq.n	8006762 <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800675e:	0704      	lsls	r4, r0, #28
 8006760:	d5b6      	bpl.n	80066d0 <HAL_FDCAN_ActivateNotification+0x28>
 8006762:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006766:	d001      	beq.n	800676c <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006768:	06c4      	lsls	r4, r0, #27
 800676a:	d5b1      	bpl.n	80066d0 <HAL_FDCAN_ActivateNotification+0x28>
 800676c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006770:	d001      	beq.n	8006776 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006772:	0684      	lsls	r4, r0, #26
 8006774:	d5ac      	bpl.n	80066d0 <HAL_FDCAN_ActivateNotification+0x28>
 8006776:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 800677a:	d0ad      	beq.n	80066d8 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800677c:	0644      	lsls	r4, r0, #25
 800677e:	d4ab      	bmi.n	80066d8 <HAL_FDCAN_ActivateNotification+0x30>
 8006780:	e7a6      	b.n	80066d0 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006782:	0745      	lsls	r5, r0, #29
 8006784:	d4ab      	bmi.n	80066de <HAL_FDCAN_ActivateNotification+0x36>
 8006786:	e7ca      	b.n	800671e <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006788:	0744      	lsls	r4, r0, #29
 800678a:	d5a1      	bpl.n	80066d0 <HAL_FDCAN_ActivateNotification+0x28>
 800678c:	e7e4      	b.n	8006758 <HAL_FDCAN_ActivateNotification+0xb0>
 800678e:	bf00      	nop

08006790 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <HAL_FDCAN_RxFifo1Callback>:
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop

08006798 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop

0800679c <HAL_FDCAN_TxBufferCompleteCallback>:
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop

080067a0 <HAL_FDCAN_TxBufferAbortCallback>:
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop

080067a4 <HAL_FDCAN_TimestampWraparoundCallback>:
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop

080067a8 <HAL_FDCAN_TimeoutOccurredCallback>:
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop

080067ac <HAL_FDCAN_HighPriorityMessageCallback>:
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <HAL_FDCAN_ErrorCallback>:
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <HAL_FDCAN_ErrorStatusCallback>:
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <HAL_FDCAN_IRQHandler>:
{
 80067b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80067c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067c2:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80067c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80067c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80067ca:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80067cc:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 80067d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80067d2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80067d4:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 80067d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80067d8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 80067da:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 80067dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067de:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80067e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067e2:	0652      	lsls	r2, r2, #25
{
 80067e4:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 80067e6:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 80067ea:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 80067ee:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 80067f2:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80067f6:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80067fa:	d502      	bpl.n	8006802 <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80067fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067fe:	0651      	lsls	r1, r2, #25
 8006800:	d473      	bmi.n	80068ea <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006804:	05d2      	lsls	r2, r2, #23
 8006806:	d502      	bpl.n	800680e <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800680a:	05d0      	lsls	r0, r2, #23
 800680c:	d45d      	bmi.n	80068ca <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 800680e:	f1b9 0f00 	cmp.w	r9, #0
 8006812:	d14a      	bne.n	80068aa <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8006814:	f1b8 0f00 	cmp.w	r8, #0
 8006818:	d137      	bne.n	800688a <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 800681a:	2f00      	cmp	r7, #0
 800681c:	d13e      	bne.n	800689c <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800681e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006820:	0591      	lsls	r1, r2, #22
 8006822:	d502      	bpl.n	800682a <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006826:	0592      	lsls	r2, r2, #22
 8006828:	d475      	bmi.n	8006916 <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800682a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800682c:	0617      	lsls	r7, r2, #24
 800682e:	d502      	bpl.n	8006836 <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006832:	0610      	lsls	r0, r2, #24
 8006834:	d477      	bmi.n	8006926 <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006838:	0491      	lsls	r1, r2, #18
 800683a:	d502      	bpl.n	8006842 <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800683c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800683e:	0492      	lsls	r2, r2, #18
 8006840:	d459      	bmi.n	80068f6 <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006844:	0417      	lsls	r7, r2, #16
 8006846:	d502      	bpl.n	800684e <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800684a:	0410      	lsls	r0, r2, #16
 800684c:	d45b      	bmi.n	8006906 <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800684e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006850:	0451      	lsls	r1, r2, #17
 8006852:	d509      	bpl.n	8006868 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006856:	0452      	lsls	r2, r2, #17
 8006858:	d506      	bpl.n	8006868 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800685a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800685e:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006860:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006866:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006868:	b94e      	cbnz	r6, 800687e <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 800686a:	b125      	cbz	r5, 8006876 <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006870:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006872:	432b      	orrs	r3, r5
 8006874:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006876:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006878:	bb13      	cbnz	r3, 80068c0 <HAL_FDCAN_IRQHandler+0x108>
}
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800687e:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006880:	4631      	mov	r1, r6
 8006882:	4620      	mov	r0, r4
 8006884:	f7ff ff96 	bl	80067b4 <HAL_FDCAN_ErrorStatusCallback>
 8006888:	e7ef      	b.n	800686a <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800688a:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800688e:	4641      	mov	r1, r8
 8006890:	4620      	mov	r0, r4
 8006892:	f7fd fce5 	bl	8004260 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006896:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006898:	2f00      	cmp	r7, #0
 800689a:	d0c0      	beq.n	800681e <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800689c:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800689e:	4639      	mov	r1, r7
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7ff ff77 	bl	8006794 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	e7b9      	b.n	800681e <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80068aa:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80068ae:	4649      	mov	r1, r9
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff ff6d 	bl	8006790 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80068b6:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 80068b8:	f1b8 0f00 	cmp.w	r8, #0
 80068bc:	d0ad      	beq.n	800681a <HAL_FDCAN_IRQHandler+0x62>
 80068be:	e7e4      	b.n	800688a <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80068c0:	4620      	mov	r0, r4
 80068c2:	f7ff ff75 	bl	80067b0 <HAL_FDCAN_ErrorCallback>
}
 80068c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80068ca:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80068ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80068d2:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80068d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068d8:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80068da:	4620      	mov	r0, r4
 80068dc:	f7ff ff60 	bl	80067a0 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80068e0:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80068e2:	f1b9 0f00 	cmp.w	r9, #0
 80068e6:	d095      	beq.n	8006814 <HAL_FDCAN_IRQHandler+0x5c>
 80068e8:	e7df      	b.n	80068aa <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80068ea:	2240      	movs	r2, #64	; 0x40
 80068ec:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80068ee:	f7ff ff5d 	bl	80067ac <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	e785      	b.n	8006802 <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80068f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068fa:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80068fc:	4620      	mov	r0, r4
 80068fe:	f7ff ff51 	bl	80067a4 <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	e79d      	b.n	8006842 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006906:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800690a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800690c:	4620      	mov	r0, r4
 800690e:	f7ff ff4b 	bl	80067a8 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	e79b      	b.n	800684e <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800691c:	4620      	mov	r0, r4
 800691e:	f7ff ff3b 	bl	8006798 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	e781      	b.n	800682a <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006926:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800692a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800692e:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006930:	2280      	movs	r2, #128	; 0x80
 8006932:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006934:	4620      	mov	r0, r4
 8006936:	f7ff ff31 	bl	800679c <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	e77b      	b.n	8006836 <HAL_FDCAN_IRQHandler+0x7e>
 800693e:	bf00      	nop

08006940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006944:	680c      	ldr	r4, [r1, #0]
{
 8006946:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006948:	2c00      	cmp	r4, #0
 800694a:	d07d      	beq.n	8006a48 <HAL_GPIO_Init+0x108>
 800694c:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006950:	4e71      	ldr	r6, [pc, #452]	; (8006b18 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8006952:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006954:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006958:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800695a:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 800695e:	ea17 0a04 	ands.w	sl, r7, r4
 8006962:	d06b      	beq.n	8006a3c <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006964:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006968:	f001 0203 	and.w	r2, r1, #3
 800696c:	1e55      	subs	r5, r2, #1
 800696e:	2d01      	cmp	r5, #1
 8006970:	d96d      	bls.n	8006a4e <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006972:	2a03      	cmp	r2, #3
 8006974:	f040 80b1 	bne.w	8006ada <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006978:	fa02 f20c 	lsl.w	r2, r2, ip
 800697c:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 800697e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006980:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006982:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006984:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006988:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800698a:	d057      	beq.n	8006a3c <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800698c:	4d63      	ldr	r5, [pc, #396]	; (8006b1c <HAL_GPIO_Init+0x1dc>)
 800698e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	662a      	str	r2, [r5, #96]	; 0x60
 8006996:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006998:	f002 0201 	and.w	r2, r2, #1
 800699c:	9203      	str	r2, [sp, #12]
 800699e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80069a0:	f023 0203 	bic.w	r2, r3, #3
 80069a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80069a8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069ac:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80069b0:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069b2:	00bf      	lsls	r7, r7, #2
 80069b4:	f04f 080f 	mov.w	r8, #15
 80069b8:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069bc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069c0:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069c4:	d01a      	beq.n	80069fc <HAL_GPIO_Init+0xbc>
 80069c6:	4d56      	ldr	r5, [pc, #344]	; (8006b20 <HAL_GPIO_Init+0x1e0>)
 80069c8:	42a8      	cmp	r0, r5
 80069ca:	f000 8092 	beq.w	8006af2 <HAL_GPIO_Init+0x1b2>
 80069ce:	4d55      	ldr	r5, [pc, #340]	; (8006b24 <HAL_GPIO_Init+0x1e4>)
 80069d0:	42a8      	cmp	r0, r5
 80069d2:	f000 8093 	beq.w	8006afc <HAL_GPIO_Init+0x1bc>
 80069d6:	4d54      	ldr	r5, [pc, #336]	; (8006b28 <HAL_GPIO_Init+0x1e8>)
 80069d8:	42a8      	cmp	r0, r5
 80069da:	f000 8083 	beq.w	8006ae4 <HAL_GPIO_Init+0x1a4>
 80069de:	4d53      	ldr	r5, [pc, #332]	; (8006b2c <HAL_GPIO_Init+0x1ec>)
 80069e0:	42a8      	cmp	r0, r5
 80069e2:	f000 8092 	beq.w	8006b0a <HAL_GPIO_Init+0x1ca>
 80069e6:	4d52      	ldr	r5, [pc, #328]	; (8006b30 <HAL_GPIO_Init+0x1f0>)
 80069e8:	42a8      	cmp	r0, r5
 80069ea:	bf0c      	ite	eq
 80069ec:	f04f 0805 	moveq.w	r8, #5
 80069f0:	f04f 0806 	movne.w	r8, #6
 80069f4:	fa08 f707 	lsl.w	r7, r8, r7
 80069f8:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069fc:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8006a00:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8006a02:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a06:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8006a08:	bf54      	ite	pl
 8006a0a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006a0c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8006a10:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8006a12:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a14:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8006a16:	bf54      	ite	pl
 8006a18:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006a1a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8006a1e:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8006a20:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a22:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8006a24:	bf54      	ite	pl
 8006a26:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006a28:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8006a2c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006a2e:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a30:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8006a32:	bf54      	ite	pl
 8006a34:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006a36:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8006a3a:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8006a3c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a3e:	fa34 f203 	lsrs.w	r2, r4, r3
 8006a42:	f10c 0c02 	add.w	ip, ip, #2
 8006a46:	d188      	bne.n	800695a <HAL_GPIO_Init+0x1a>
  }
}
 8006a48:	b005      	add	sp, #20
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006a4e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a52:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a56:	f04f 0803 	mov.w	r8, #3
 8006a5a:	fa08 f80c 	lsl.w	r8, r8, ip
 8006a5e:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a62:	fa05 f50c 	lsl.w	r5, r5, ip
 8006a66:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8006a6a:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a6c:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8006a70:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a74:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a78:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8006a7c:	409f      	lsls	r7, r3
 8006a7e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006a82:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006a84:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a86:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a8a:	f8de 7008 	ldr.w	r7, [lr, #8]
 8006a8e:	fa07 f70c 	lsl.w	r7, r7, ip
 8006a92:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a96:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006a98:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a9a:	fa02 f20c 	lsl.w	r2, r2, ip
 8006a9e:	f47f af6e 	bne.w	800697e <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8006aa2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8006aa6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006aaa:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006aae:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8006ab2:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ab4:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ab8:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006abc:	fa07 f708 	lsl.w	r7, r7, r8
 8006ac0:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ac2:	270f      	movs	r7, #15
 8006ac4:	fa07 f808 	lsl.w	r8, r7, r8
 8006ac8:	9f00      	ldr	r7, [sp, #0]
 8006aca:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ace:	9f01      	ldr	r7, [sp, #4]
 8006ad0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8006ad4:	f8c9 7020 	str.w	r7, [r9, #32]
 8006ad8:	e751      	b.n	800697e <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ada:	2503      	movs	r5, #3
 8006adc:	fa05 f50c 	lsl.w	r5, r5, ip
 8006ae0:	43ed      	mvns	r5, r5
 8006ae2:	e7cf      	b.n	8006a84 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ae4:	f04f 0803 	mov.w	r8, #3
 8006ae8:	fa08 f707 	lsl.w	r7, r8, r7
 8006aec:	ea49 0907 	orr.w	r9, r9, r7
 8006af0:	e784      	b.n	80069fc <HAL_GPIO_Init+0xbc>
 8006af2:	fa0b f707 	lsl.w	r7, fp, r7
 8006af6:	ea49 0907 	orr.w	r9, r9, r7
 8006afa:	e77f      	b.n	80069fc <HAL_GPIO_Init+0xbc>
 8006afc:	f04f 0802 	mov.w	r8, #2
 8006b00:	fa08 f707 	lsl.w	r7, r8, r7
 8006b04:	ea49 0907 	orr.w	r9, r9, r7
 8006b08:	e778      	b.n	80069fc <HAL_GPIO_Init+0xbc>
 8006b0a:	f04f 0804 	mov.w	r8, #4
 8006b0e:	fa08 f707 	lsl.w	r7, r8, r7
 8006b12:	ea49 0907 	orr.w	r9, r9, r7
 8006b16:	e771      	b.n	80069fc <HAL_GPIO_Init+0xbc>
 8006b18:	40010400 	.word	0x40010400
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	48000400 	.word	0x48000400
 8006b24:	48000800 	.word	0x48000800
 8006b28:	48000c00 	.word	0x48000c00
 8006b2c:	48001000 	.word	0x48001000
 8006b30:	48001400 	.word	0x48001400

08006b34 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b34:	6903      	ldr	r3, [r0, #16]
 8006b36:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006b38:	bf14      	ite	ne
 8006b3a:	2001      	movne	r0, #1
 8006b3c:	2000      	moveq	r0, #0
 8006b3e:	4770      	bx	lr

08006b40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b40:	b10a      	cbz	r2, 8006b46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b42:	6181      	str	r1, [r0, #24]
 8006b44:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b46:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop

08006b4c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b4c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b4e:	ea01 0203 	and.w	r2, r1, r3
 8006b52:	ea21 0103 	bic.w	r1, r1, r3
 8006b56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b5a:	6181      	str	r1, [r0, #24]
}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b60:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8006b62:	6951      	ldr	r1, [r2, #20]
 8006b64:	4201      	tst	r1, r0
 8006b66:	d100      	bne.n	8006b6a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006b68:	4770      	bx	lr
{
 8006b6a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b6c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b6e:	f7fc fbe3 	bl	8003338 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b72:	bd08      	pop	{r3, pc}
 8006b74:	40010400 	.word	0x40010400

08006b78 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b78:	4a37      	ldr	r2, [pc, #220]	; (8006c58 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b7a:	b960      	cbnz	r0, 8006b96 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b7c:	6813      	ldr	r3, [r2, #0]
 8006b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b86:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b8a:	d01d      	beq.n	8006bc8 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006b94:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b96:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006b9a:	d007      	beq.n	8006bac <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006ba6:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ba8:	6013      	str	r3, [r2, #0]
}
 8006baa:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bac:	6813      	ldr	r3, [r2, #0]
 8006bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bb6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bba:	d02b      	beq.n	8006c14 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006bc0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bc2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006bc6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bd0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bd2:	4822      	ldr	r0, [pc, #136]	; (8006c5c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006bd4:	4922      	ldr	r1, [pc, #136]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bde:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006be0:	6803      	ldr	r3, [r0, #0]
 8006be2:	2032      	movs	r0, #50	; 0x32
 8006be4:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006be8:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bea:	fba1 1303 	umull	r1, r3, r1, r3
 8006bee:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bf0:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bf2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bf6:	d506      	bpl.n	8006c06 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006bf8:	e000      	b.n	8006bfc <HAL_PWREx_ControlVoltageScaling+0x84>
 8006bfa:	b123      	cbz	r3, 8006c06 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006bfc:	6951      	ldr	r1, [r2, #20]
 8006bfe:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006c00:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c04:	d4f9      	bmi.n	8006bfa <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c06:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8006c0c:	bf54      	ite	pl
 8006c0e:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8006c10:	2003      	movmi	r0, #3
 8006c12:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c1c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c1e:	480f      	ldr	r0, [pc, #60]	; (8006c5c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006c20:	490f      	ldr	r1, [pc, #60]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c2a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c2c:	6803      	ldr	r3, [r0, #0]
 8006c2e:	2032      	movs	r0, #50	; 0x32
 8006c30:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c34:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c36:	fba1 1303 	umull	r1, r3, r1, r3
 8006c3a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c3c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c3e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c42:	d5e0      	bpl.n	8006c06 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006c44:	e001      	b.n	8006c4a <HAL_PWREx_ControlVoltageScaling+0xd2>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0dd      	beq.n	8006c06 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006c4a:	6951      	ldr	r1, [r2, #20]
 8006c4c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006c4e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c52:	d5d8      	bpl.n	8006c06 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006c54:	e7f7      	b.n	8006c46 <HAL_PWREx_ControlVoltageScaling+0xce>
 8006c56:	bf00      	nop
 8006c58:	40007000 	.word	0x40007000
 8006c5c:	20000004 	.word	0x20000004
 8006c60:	431bde83 	.word	0x431bde83

08006c64 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006c64:	4a02      	ldr	r2, [pc, #8]	; (8006c70 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8006c66:	6893      	ldr	r3, [r2, #8]
 8006c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c6c:	6093      	str	r3, [r2, #8]
}
 8006c6e:	4770      	bx	lr
 8006c70:	40007000 	.word	0x40007000

08006c74 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c74:	2800      	cmp	r0, #0
 8006c76:	f000 81c3 	beq.w	8007000 <HAL_RCC_OscConfig+0x38c>
{
 8006c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c7e:	6803      	ldr	r3, [r0, #0]
 8006c80:	07d9      	lsls	r1, r3, #31
{
 8006c82:	b082      	sub	sp, #8
 8006c84:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c86:	d52d      	bpl.n	8006ce4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c88:	49a6      	ldr	r1, [pc, #664]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006c8a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c8c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c8e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006c92:	2a0c      	cmp	r2, #12
 8006c94:	f000 810a 	beq.w	8006eac <HAL_RCC_OscConfig+0x238>
 8006c98:	2a08      	cmp	r2, #8
 8006c9a:	f000 810c 	beq.w	8006eb6 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca4:	f000 8133 	beq.w	8006f0e <HAL_RCC_OscConfig+0x29a>
 8006ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cac:	f000 819b 	beq.w	8006fe6 <HAL_RCC_OscConfig+0x372>
 8006cb0:	4d9c      	ldr	r5, [pc, #624]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006cb2:	682a      	ldr	r2, [r5, #0]
 8006cb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006cb8:	602a      	str	r2, [r5, #0]
 8006cba:	682a      	ldr	r2, [r5, #0]
 8006cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cc0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 8128 	bne.w	8006f18 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fc f8ac 	bl	8002e24 <HAL_GetTick>
 8006ccc:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cce:	e005      	b.n	8006cdc <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd0:	f7fc f8a8 	bl	8002e24 <HAL_GetTick>
 8006cd4:	1b80      	subs	r0, r0, r6
 8006cd6:	2864      	cmp	r0, #100	; 0x64
 8006cd8:	f200 8142 	bhi.w	8006f60 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	039f      	lsls	r7, r3, #14
 8006ce0:	d4f6      	bmi.n	8006cd0 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	079e      	lsls	r6, r3, #30
 8006ce6:	d528      	bpl.n	8006d3a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ce8:	4a8e      	ldr	r2, [pc, #568]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006cea:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cec:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cee:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006cf2:	2b0c      	cmp	r3, #12
 8006cf4:	f000 80ec 	beq.w	8006ed0 <HAL_RCC_OscConfig+0x25c>
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	f000 80ee 	beq.w	8006eda <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cfe:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d00:	4d88      	ldr	r5, [pc, #544]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 811d 	beq.w	8006f42 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fc f888 	bl	8002e24 <HAL_GetTick>
 8006d14:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d16:	e005      	b.n	8006d24 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d18:	f7fc f884 	bl	8002e24 <HAL_GetTick>
 8006d1c:	1b80      	subs	r0, r0, r6
 8006d1e:	2802      	cmp	r0, #2
 8006d20:	f200 811e 	bhi.w	8006f60 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	0558      	lsls	r0, r3, #21
 8006d28:	d5f6      	bpl.n	8006d18 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2a:	686b      	ldr	r3, [r5, #4]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d36:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	071a      	lsls	r2, r3, #28
 8006d3c:	d519      	bpl.n	8006d72 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d3e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d40:	4d78      	ldr	r5, [pc, #480]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 809e 	beq.w	8006e84 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8006d48:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fc f866 	bl	8002e24 <HAL_GetTick>
 8006d58:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d5a:	e005      	b.n	8006d68 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d5c:	f7fc f862 	bl	8002e24 <HAL_GetTick>
 8006d60:	1b80      	subs	r0, r0, r6
 8006d62:	2802      	cmp	r0, #2
 8006d64:	f200 80fc 	bhi.w	8006f60 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d68:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006d6c:	079f      	lsls	r7, r3, #30
 8006d6e:	d5f5      	bpl.n	8006d5c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	0759      	lsls	r1, r3, #29
 8006d74:	d541      	bpl.n	8006dfa <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d76:	4b6b      	ldr	r3, [pc, #428]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d7a:	00d2      	lsls	r2, r2, #3
 8006d7c:	f100 80f4 	bmi.w	8006f68 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d86:	659a      	str	r2, [r3, #88]	; 0x58
 8006d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006d92:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d94:	4e64      	ldr	r6, [pc, #400]	; (8006f28 <HAL_RCC_OscConfig+0x2b4>)
 8006d96:	6833      	ldr	r3, [r6, #0]
 8006d98:	05df      	lsls	r7, r3, #23
 8006d9a:	f140 8113 	bpl.w	8006fc4 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	f000 80e3 	beq.w	8006f6c <HAL_RCC_OscConfig+0x2f8>
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	f000 8169 	beq.w	800707e <HAL_RCC_OscConfig+0x40a>
 8006dac:	4e5d      	ldr	r6, [pc, #372]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006dae:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006db2:	f022 0201 	bic.w	r2, r2, #1
 8006db6:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8006dba:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006dbe:	f022 0204 	bic.w	r2, r2, #4
 8006dc2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 80d7 	bne.w	8006f7a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dcc:	f7fc f82a 	bl	8002e24 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006dd4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dd6:	e005      	b.n	8006de4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd8:	f7fc f824 	bl	8002e24 <HAL_GetTick>
 8006ddc:	1bc0      	subs	r0, r0, r7
 8006dde:	4540      	cmp	r0, r8
 8006de0:	f200 80be 	bhi.w	8006f60 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006de4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8006de8:	079a      	lsls	r2, r3, #30
 8006dea:	d4f5      	bmi.n	8006dd8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dec:	b125      	cbz	r5, 8006df8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dee:	4a4d      	ldr	r2, [pc, #308]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006df0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	069b      	lsls	r3, r3, #26
 8006dfc:	d518      	bpl.n	8006e30 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dfe:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e00:	4d48      	ldr	r5, [pc, #288]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80ca 	beq.w	8006f9c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8006e08:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006e0c:	f043 0301 	orr.w	r3, r3, #1
 8006e10:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e14:	f7fc f806 	bl	8002e24 <HAL_GetTick>
 8006e18:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e1a:	e005      	b.n	8006e28 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e1c:	f7fc f802 	bl	8002e24 <HAL_GetTick>
 8006e20:	1b80      	subs	r0, r0, r6
 8006e22:	2802      	cmp	r0, #2
 8006e24:	f200 809c 	bhi.w	8006f60 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e28:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006e2c:	079f      	lsls	r7, r3, #30
 8006e2e:	d5f5      	bpl.n	8006e1c <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e30:	69e0      	ldr	r0, [r4, #28]
 8006e32:	b318      	cbz	r0, 8006e7c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e34:	4d3b      	ldr	r5, [pc, #236]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006e36:	68ab      	ldr	r3, [r5, #8]
 8006e38:	f003 030c 	and.w	r3, r3, #12
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	f000 812c 	beq.w	800709a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e42:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e44:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e4a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e4c:	f000 80da 	beq.w	8007004 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e50:	68eb      	ldr	r3, [r5, #12]
 8006e52:	f023 0303 	bic.w	r3, r3, #3
 8006e56:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e58:	68eb      	ldr	r3, [r5, #12]
 8006e5a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e62:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fb ffde 	bl	8002e24 <HAL_GetTick>
 8006e68:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e6a:	e004      	b.n	8006e76 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fb ffda 	bl	8002e24 <HAL_GetTick>
 8006e70:	1b00      	subs	r0, r0, r4
 8006e72:	2802      	cmp	r0, #2
 8006e74:	d874      	bhi.n	8006f60 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	019b      	lsls	r3, r3, #6
 8006e7a:	d4f7      	bmi.n	8006e6c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006e7c:	2000      	movs	r0, #0
}
 8006e7e:	b002      	add	sp, #8
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006e84:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006e90:	f7fb ffc8 	bl	8002e24 <HAL_GetTick>
 8006e94:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e96:	e004      	b.n	8006ea2 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e98:	f7fb ffc4 	bl	8002e24 <HAL_GetTick>
 8006e9c:	1b80      	subs	r0, r0, r6
 8006e9e:	2802      	cmp	r0, #2
 8006ea0:	d85e      	bhi.n	8006f60 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ea2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006ea6:	0798      	lsls	r0, r3, #30
 8006ea8:	d4f6      	bmi.n	8006e98 <HAL_RCC_OscConfig+0x224>
 8006eaa:	e761      	b.n	8006d70 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eac:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006eb0:	2903      	cmp	r1, #3
 8006eb2:	f47f aef4 	bne.w	8006c9e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	0392      	lsls	r2, r2, #14
 8006ebc:	f57f af12 	bpl.w	8006ce4 <HAL_RCC_OscConfig+0x70>
 8006ec0:	6862      	ldr	r2, [r4, #4]
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	f47f af0e 	bne.w	8006ce4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006ec8:	2001      	movs	r0, #1
}
 8006eca:	b002      	add	sp, #8
 8006ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ed0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ed4:	2a02      	cmp	r2, #2
 8006ed6:	f47f af12 	bne.w	8006cfe <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	055d      	lsls	r5, r3, #21
 8006ee0:	d502      	bpl.n	8006ee8 <HAL_RCC_OscConfig+0x274>
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0ef      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee8:	4a0e      	ldr	r2, [pc, #56]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006eea:	6920      	ldr	r0, [r4, #16]
 8006eec:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006eee:	490f      	ldr	r1, [pc, #60]	; (8006f2c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ef4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006ef8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006efa:	6808      	ldr	r0, [r1, #0]
 8006efc:	f7fe f922 	bl	8005144 <HAL_InitTick>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d1e1      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	071a      	lsls	r2, r3, #28
 8006f08:	f57f af33 	bpl.w	8006d72 <HAL_RCC_OscConfig+0xfe>
 8006f0c:	e717      	b.n	8006d3e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f0e:	4a05      	ldr	r2, [pc, #20]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
 8006f10:	6813      	ldr	r3, [r2, #0]
 8006f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f16:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006f18:	f7fb ff84 	bl	8002e24 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f1c:	4e01      	ldr	r6, [pc, #4]	; (8006f24 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006f1e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f20:	e00b      	b.n	8006f3a <HAL_RCC_OscConfig+0x2c6>
 8006f22:	bf00      	nop
 8006f24:	40021000 	.word	0x40021000
 8006f28:	40007000 	.word	0x40007000
 8006f2c:	2000000c 	.word	0x2000000c
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f30:	f7fb ff78 	bl	8002e24 <HAL_GetTick>
 8006f34:	1b40      	subs	r0, r0, r5
 8006f36:	2864      	cmp	r0, #100	; 0x64
 8006f38:	d812      	bhi.n	8006f60 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f3a:	6833      	ldr	r3, [r6, #0]
 8006f3c:	039b      	lsls	r3, r3, #14
 8006f3e:	d5f7      	bpl.n	8006f30 <HAL_RCC_OscConfig+0x2bc>
 8006f40:	e6cf      	b.n	8006ce2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006f4a:	f7fb ff6b 	bl	8002e24 <HAL_GetTick>
 8006f4e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	0559      	lsls	r1, r3, #21
 8006f54:	d5d6      	bpl.n	8006f04 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f56:	f7fb ff65 	bl	8002e24 <HAL_GetTick>
 8006f5a:	1b80      	subs	r0, r0, r6
 8006f5c:	2802      	cmp	r0, #2
 8006f5e:	d9f7      	bls.n	8006f50 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8006f60:	2003      	movs	r0, #3
}
 8006f62:	b002      	add	sp, #8
 8006f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006f68:	2500      	movs	r5, #0
 8006f6a:	e713      	b.n	8006d94 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f6c:	4a65      	ldr	r2, [pc, #404]	; (8007104 <HAL_RCC_OscConfig+0x490>)
 8006f6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006f7a:	f7fb ff53 	bl	8002e24 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f7e:	4f61      	ldr	r7, [pc, #388]	; (8007104 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006f80:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f82:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f86:	e004      	b.n	8006f92 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f88:	f7fb ff4c 	bl	8002e24 <HAL_GetTick>
 8006f8c:	1b80      	subs	r0, r0, r6
 8006f8e:	4540      	cmp	r0, r8
 8006f90:	d8e6      	bhi.n	8006f60 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f96:	0799      	lsls	r1, r3, #30
 8006f98:	d5f6      	bpl.n	8006f88 <HAL_RCC_OscConfig+0x314>
 8006f9a:	e727      	b.n	8006dec <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006f9c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006fa8:	f7fb ff3c 	bl	8002e24 <HAL_GetTick>
 8006fac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fae:	e004      	b.n	8006fba <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fb0:	f7fb ff38 	bl	8002e24 <HAL_GetTick>
 8006fb4:	1b80      	subs	r0, r0, r6
 8006fb6:	2802      	cmp	r0, #2
 8006fb8:	d8d2      	bhi.n	8006f60 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fba:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006fbe:	0798      	lsls	r0, r3, #30
 8006fc0:	d4f6      	bmi.n	8006fb0 <HAL_RCC_OscConfig+0x33c>
 8006fc2:	e735      	b.n	8006e30 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fc4:	6833      	ldr	r3, [r6, #0]
 8006fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006fcc:	f7fb ff2a 	bl	8002e24 <HAL_GetTick>
 8006fd0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fd2:	6833      	ldr	r3, [r6, #0]
 8006fd4:	05d8      	lsls	r0, r3, #23
 8006fd6:	f53f aee2 	bmi.w	8006d9e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fda:	f7fb ff23 	bl	8002e24 <HAL_GetTick>
 8006fde:	1bc0      	subs	r0, r0, r7
 8006fe0:	2802      	cmp	r0, #2
 8006fe2:	d9f6      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x35e>
 8006fe4:	e7bc      	b.n	8006f60 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fe6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fea:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ffc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ffe:	e78b      	b.n	8006f18 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007000:	2001      	movs	r0, #1
}
 8007002:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007004:	f7fb ff0e 	bl	8002e24 <HAL_GetTick>
 8007008:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800700a:	e004      	b.n	8007016 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800700c:	f7fb ff0a 	bl	8002e24 <HAL_GetTick>
 8007010:	1b80      	subs	r0, r0, r6
 8007012:	2802      	cmp	r0, #2
 8007014:	d8a4      	bhi.n	8006f60 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007016:	682b      	ldr	r3, [r5, #0]
 8007018:	0199      	lsls	r1, r3, #6
 800701a:	d4f7      	bmi.n	800700c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800701c:	68e9      	ldr	r1, [r5, #12]
 800701e:	4b3a      	ldr	r3, [pc, #232]	; (8007108 <HAL_RCC_OscConfig+0x494>)
 8007020:	6a22      	ldr	r2, [r4, #32]
 8007022:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007024:	4e37      	ldr	r6, [pc, #220]	; (8007104 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007026:	400b      	ands	r3, r1
 8007028:	4313      	orrs	r3, r2
 800702a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800702e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007032:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8007036:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800703a:	3801      	subs	r0, #1
 800703c:	0849      	lsrs	r1, r1, #1
 800703e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007042:	3901      	subs	r1, #1
 8007044:	0852      	lsrs	r2, r2, #1
 8007046:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800704a:	3a01      	subs	r2, #1
 800704c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007050:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007052:	682b      	ldr	r3, [r5, #0]
 8007054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007058:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800705a:	68eb      	ldr	r3, [r5, #12]
 800705c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007060:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007062:	f7fb fedf 	bl	8002e24 <HAL_GetTick>
 8007066:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007068:	e005      	b.n	8007076 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800706a:	f7fb fedb 	bl	8002e24 <HAL_GetTick>
 800706e:	1b00      	subs	r0, r0, r4
 8007070:	2802      	cmp	r0, #2
 8007072:	f63f af75 	bhi.w	8006f60 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007076:	6833      	ldr	r3, [r6, #0]
 8007078:	019a      	lsls	r2, r3, #6
 800707a:	d5f6      	bpl.n	800706a <HAL_RCC_OscConfig+0x3f6>
 800707c:	e6fe      	b.n	8006e7c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800707e:	4b21      	ldr	r3, [pc, #132]	; (8007104 <HAL_RCC_OscConfig+0x490>)
 8007080:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007084:	f042 0204 	orr.w	r2, r2, #4
 8007088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800708c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007090:	f042 0201 	orr.w	r2, r2, #1
 8007094:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007098:	e76f      	b.n	8006f7a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800709a:	2801      	cmp	r0, #1
 800709c:	f43f aeef 	beq.w	8006e7e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 80070a0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a2:	6a22      	ldr	r2, [r4, #32]
 80070a4:	f003 0103 	and.w	r1, r3, #3
 80070a8:	4291      	cmp	r1, r2
 80070aa:	f47f af0d 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070b4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80070ba:	f47f af05 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80070c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070c4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80070c8:	f47f aefe 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80070ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070d2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80070d6:	f47f aef7 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80070dc:	0852      	lsrs	r2, r2, #1
 80070de:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80070e2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070e4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80070e8:	f47f aeee 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80070ee:	0852      	lsrs	r2, r2, #1
 80070f0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80070f4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070f6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80070fa:	bf14      	ite	ne
 80070fc:	2001      	movne	r0, #1
 80070fe:	2000      	moveq	r0, #0
 8007100:	e6bd      	b.n	8006e7e <HAL_RCC_OscConfig+0x20a>
 8007102:	bf00      	nop
 8007104:	40021000 	.word	0x40021000
 8007108:	019f800c 	.word	0x019f800c

0800710c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800710c:	4b18      	ldr	r3, [pc, #96]	; (8007170 <HAL_RCC_GetSysClockFreq+0x64>)
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	f002 020c 	and.w	r2, r2, #12
 8007114:	2a04      	cmp	r2, #4
 8007116:	d026      	beq.n	8007166 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	f002 020c 	and.w	r2, r2, #12
 800711e:	2a08      	cmp	r2, #8
 8007120:	d023      	beq.n	800716a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	f002 020c 	and.w	r2, r2, #12
 8007128:	2a0c      	cmp	r2, #12
 800712a:	d001      	beq.n	8007130 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800712c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800712e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007130:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007132:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007134:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007136:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800713a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800713c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007140:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007144:	bf0c      	ite	eq
 8007146:	4b0b      	ldreq	r3, [pc, #44]	; (8007174 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007148:	4b0b      	ldrne	r3, [pc, #44]	; (8007178 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800714a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800714c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007150:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <HAL_RCC_GetSysClockFreq+0x64>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800715c:	3301      	adds	r3, #1
 800715e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007160:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007164:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007166:	4804      	ldr	r0, [pc, #16]	; (8007178 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007168:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800716a:	4802      	ldr	r0, [pc, #8]	; (8007174 <HAL_RCC_GetSysClockFreq+0x68>)
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40021000 	.word	0x40021000
 8007174:	007a1200 	.word	0x007a1200
 8007178:	00f42400 	.word	0x00f42400

0800717c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800717c:	2800      	cmp	r0, #0
 800717e:	f000 80ee 	beq.w	800735e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007182:	4a78      	ldr	r2, [pc, #480]	; (8007364 <HAL_RCC_ClockConfig+0x1e8>)
{
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	428b      	cmp	r3, r1
 8007190:	460d      	mov	r5, r1
 8007192:	4604      	mov	r4, r0
 8007194:	d20c      	bcs.n	80071b0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007196:	6813      	ldr	r3, [r2, #0]
 8007198:	f023 030f 	bic.w	r3, r3, #15
 800719c:	430b      	orrs	r3, r1
 800719e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a0:	6813      	ldr	r3, [r2, #0]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	428b      	cmp	r3, r1
 80071a8:	d002      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80071aa:	2001      	movs	r0, #1
}
 80071ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	07df      	lsls	r7, r3, #31
 80071b4:	d569      	bpl.n	800728a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071b6:	6867      	ldr	r7, [r4, #4]
 80071b8:	2f03      	cmp	r7, #3
 80071ba:	f000 80a0 	beq.w	80072fe <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071be:	4b6a      	ldr	r3, [pc, #424]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071c2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c4:	f000 8097 	beq.w	80072f6 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071c8:	055b      	lsls	r3, r3, #21
 80071ca:	d5ee      	bpl.n	80071aa <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80071cc:	f7ff ff9e 	bl	800710c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80071d0:	4b66      	ldr	r3, [pc, #408]	; (800736c <HAL_RCC_ClockConfig+0x1f0>)
 80071d2:	4298      	cmp	r0, r3
 80071d4:	f240 80c0 	bls.w	8007358 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071d8:	4a63      	ldr	r2, [pc, #396]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 80071da:	6893      	ldr	r3, [r2, #8]
 80071dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80071e6:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071ea:	4e5f      	ldr	r6, [pc, #380]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 80071ec:	68b3      	ldr	r3, [r6, #8]
 80071ee:	f023 0303 	bic.w	r3, r3, #3
 80071f2:	433b      	orrs	r3, r7
 80071f4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80071f6:	f7fb fe15 	bl	8002e24 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071fa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80071fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007200:	e004      	b.n	800720c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007202:	f7fb fe0f 	bl	8002e24 <HAL_GetTick>
 8007206:	1bc0      	subs	r0, r0, r7
 8007208:	4540      	cmp	r0, r8
 800720a:	d871      	bhi.n	80072f0 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800720c:	68b3      	ldr	r3, [r6, #8]
 800720e:	6862      	ldr	r2, [r4, #4]
 8007210:	f003 030c 	and.w	r3, r3, #12
 8007214:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007218:	d1f3      	bne.n	8007202 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	079f      	lsls	r7, r3, #30
 800721e:	d436      	bmi.n	800728e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8007220:	f1b9 0f00 	cmp.w	r9, #0
 8007224:	d003      	beq.n	800722e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007226:	68b3      	ldr	r3, [r6, #8]
 8007228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800722c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800722e:	4e4d      	ldr	r6, [pc, #308]	; (8007364 <HAL_RCC_ClockConfig+0x1e8>)
 8007230:	6833      	ldr	r3, [r6, #0]
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	42ab      	cmp	r3, r5
 8007238:	d846      	bhi.n	80072c8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	075a      	lsls	r2, r3, #29
 800723e:	d506      	bpl.n	800724e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007240:	4949      	ldr	r1, [pc, #292]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	688a      	ldr	r2, [r1, #8]
 8007246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800724a:	4302      	orrs	r2, r0
 800724c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800724e:	071b      	lsls	r3, r3, #28
 8007250:	d507      	bpl.n	8007262 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007252:	4a45      	ldr	r2, [pc, #276]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 8007254:	6921      	ldr	r1, [r4, #16]
 8007256:	6893      	ldr	r3, [r2, #8]
 8007258:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800725c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007260:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007262:	f7ff ff53 	bl	800710c <HAL_RCC_GetSysClockFreq>
 8007266:	4a40      	ldr	r2, [pc, #256]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 8007268:	4c41      	ldr	r4, [pc, #260]	; (8007370 <HAL_RCC_ClockConfig+0x1f4>)
 800726a:	6892      	ldr	r2, [r2, #8]
 800726c:	4941      	ldr	r1, [pc, #260]	; (8007374 <HAL_RCC_ClockConfig+0x1f8>)
 800726e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007272:	4603      	mov	r3, r0
 8007274:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007276:	4840      	ldr	r0, [pc, #256]	; (8007378 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007278:	f002 021f 	and.w	r2, r2, #31
 800727c:	40d3      	lsrs	r3, r2
 800727e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007280:	6800      	ldr	r0, [r0, #0]
}
 8007282:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007286:	f7fd bf5d 	b.w	8005144 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800728a:	079e      	lsls	r6, r3, #30
 800728c:	d5cf      	bpl.n	800722e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728e:	0758      	lsls	r0, r3, #29
 8007290:	d504      	bpl.n	800729c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007292:	4935      	ldr	r1, [pc, #212]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 8007294:	688a      	ldr	r2, [r1, #8]
 8007296:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800729a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800729c:	0719      	lsls	r1, r3, #28
 800729e:	d506      	bpl.n	80072ae <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80072a0:	4a31      	ldr	r2, [pc, #196]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 80072a2:	6893      	ldr	r3, [r2, #8]
 80072a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072a8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072ac:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ae:	4a2e      	ldr	r2, [pc, #184]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 80072b0:	68a1      	ldr	r1, [r4, #8]
 80072b2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072b4:	4e2b      	ldr	r6, [pc, #172]	; (8007364 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072be:	6833      	ldr	r3, [r6, #0]
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	42ab      	cmp	r3, r5
 80072c6:	d9b8      	bls.n	800723a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072c8:	6833      	ldr	r3, [r6, #0]
 80072ca:	f023 030f 	bic.w	r3, r3, #15
 80072ce:	432b      	orrs	r3, r5
 80072d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80072d2:	f7fb fda7 	bl	8002e24 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80072da:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	42ab      	cmp	r3, r5
 80072e4:	d0a9      	beq.n	800723a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e6:	f7fb fd9d 	bl	8002e24 <HAL_GetTick>
 80072ea:	1bc0      	subs	r0, r0, r7
 80072ec:	4540      	cmp	r0, r8
 80072ee:	d9f5      	bls.n	80072dc <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80072f0:	2003      	movs	r0, #3
}
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072f6:	039a      	lsls	r2, r3, #14
 80072f8:	f53f af68 	bmi.w	80071cc <HAL_RCC_ClockConfig+0x50>
 80072fc:	e755      	b.n	80071aa <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072fe:	4a1a      	ldr	r2, [pc, #104]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
 8007300:	6811      	ldr	r1, [r2, #0]
 8007302:	0188      	lsls	r0, r1, #6
 8007304:	f57f af51 	bpl.w	80071aa <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007308:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800730a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800730c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800730e:	4e17      	ldr	r6, [pc, #92]	; (800736c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007310:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8007314:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007316:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800731a:	bf0c      	ite	eq
 800731c:	4817      	ldreq	r0, [pc, #92]	; (800737c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800731e:	4818      	ldrne	r0, [pc, #96]	; (8007380 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007320:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007322:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007326:	4810      	ldr	r0, [pc, #64]	; (8007368 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007328:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800732c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007330:	68c1      	ldr	r1, [r0, #12]
 8007332:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007336:	3101      	adds	r1, #1
 8007338:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800733a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800733e:	42b2      	cmp	r2, r6
 8007340:	d90a      	bls.n	8007358 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007342:	6882      	ldr	r2, [r0, #8]
 8007344:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007348:	f43f af46 	beq.w	80071d8 <HAL_RCC_ClockConfig+0x5c>
 800734c:	0799      	lsls	r1, r3, #30
 800734e:	d503      	bpl.n	8007358 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007350:	68a3      	ldr	r3, [r4, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f43f af40 	beq.w	80071d8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007358:	f04f 0900 	mov.w	r9, #0
 800735c:	e745      	b.n	80071ea <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800735e:	2001      	movs	r0, #1
}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40022000 	.word	0x40022000
 8007368:	40021000 	.word	0x40021000
 800736c:	04c4b400 	.word	0x04c4b400
 8007370:	0800d97c 	.word	0x0800d97c
 8007374:	20000004 	.word	0x20000004
 8007378:	2000000c 	.word	0x2000000c
 800737c:	007a1200 	.word	0x007a1200
 8007380:	00f42400 	.word	0x00f42400

08007384 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007386:	4a06      	ldr	r2, [pc, #24]	; (80073a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007388:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800738a:	4906      	ldr	r1, [pc, #24]	; (80073a4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800738c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007390:	6808      	ldr	r0, [r1, #0]
 8007392:	5cd3      	ldrb	r3, [r2, r3]
 8007394:	f003 031f 	and.w	r3, r3, #31
}
 8007398:	40d8      	lsrs	r0, r3
 800739a:	4770      	bx	lr
 800739c:	40021000 	.word	0x40021000
 80073a0:	0800d98c 	.word	0x0800d98c
 80073a4:	20000004 	.word	0x20000004

080073a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80073aa:	4a06      	ldr	r2, [pc, #24]	; (80073c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80073ac:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80073ae:	4906      	ldr	r1, [pc, #24]	; (80073c8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073b0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	5cd3      	ldrb	r3, [r2, r3]
 80073b8:	f003 031f 	and.w	r3, r3, #31
}
 80073bc:	40d8      	lsrs	r0, r3
 80073be:	4770      	bx	lr
 80073c0:	40021000 	.word	0x40021000
 80073c4:	0800d98c 	.word	0x0800d98c
 80073c8:	20000004 	.word	0x20000004

080073cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073d0:	6803      	ldr	r3, [r0, #0]
{
 80073d2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073d4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80073d8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073da:	d056      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073dc:	4bac      	ldr	r3, [pc, #688]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073e0:	00d5      	lsls	r5, r2, #3
 80073e2:	f140 813e 	bpl.w	8007662 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 80073e6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073e8:	4daa      	ldr	r5, [pc, #680]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80073ea:	682b      	ldr	r3, [r5, #0]
 80073ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073f2:	f7fb fd17 	bl	8002e24 <HAL_GetTick>
 80073f6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073f8:	e005      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fa:	f7fb fd13 	bl	8002e24 <HAL_GetTick>
 80073fe:	1b83      	subs	r3, r0, r6
 8007400:	2b02      	cmp	r3, #2
 8007402:	f200 8139 	bhi.w	8007678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007406:	682b      	ldr	r3, [r5, #0]
 8007408:	05d8      	lsls	r0, r3, #23
 800740a:	d5f6      	bpl.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800740c:	4da0      	ldr	r5, [pc, #640]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800740e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007412:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007416:	d027      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8007418:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800741a:	429a      	cmp	r2, r3
 800741c:	d025      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800741e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007422:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800742a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800742e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007436:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800743a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800743e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8007440:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007444:	f140 8148 	bpl.w	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fb fcec 	bl	8002e24 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800744c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007450:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007452:	e005      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007454:	f7fb fce6 	bl	8002e24 <HAL_GetTick>
 8007458:	1b80      	subs	r0, r0, r6
 800745a:	4540      	cmp	r0, r8
 800745c:	f200 810c 	bhi.w	8007678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007460:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007464:	079b      	lsls	r3, r3, #30
 8007466:	d5f5      	bpl.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007468:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800746a:	4989      	ldr	r1, [pc, #548]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800746c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007470:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800747a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800747c:	b127      	cbz	r7, 8007488 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800747e:	4a84      	ldr	r2, [pc, #528]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007480:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007486:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	07dd      	lsls	r5, r3, #31
 800748c:	d508      	bpl.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800748e:	4980      	ldr	r1, [pc, #512]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007490:	6865      	ldr	r5, [r4, #4]
 8007492:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007496:	f022 0203 	bic.w	r2, r2, #3
 800749a:	432a      	orrs	r2, r5
 800749c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074a0:	0799      	lsls	r1, r3, #30
 80074a2:	d508      	bpl.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074a4:	497a      	ldr	r1, [pc, #488]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074a6:	68a5      	ldr	r5, [r4, #8]
 80074a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074ac:	f022 020c 	bic.w	r2, r2, #12
 80074b0:	432a      	orrs	r2, r5
 80074b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074b6:	075a      	lsls	r2, r3, #29
 80074b8:	d508      	bpl.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074ba:	4975      	ldr	r1, [pc, #468]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074bc:	68e5      	ldr	r5, [r4, #12]
 80074be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074c2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80074c6:	432a      	orrs	r2, r5
 80074c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074cc:	071f      	lsls	r7, r3, #28
 80074ce:	d508      	bpl.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074d0:	496f      	ldr	r1, [pc, #444]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074d2:	6925      	ldr	r5, [r4, #16]
 80074d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80074dc:	432a      	orrs	r2, r5
 80074de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074e2:	06de      	lsls	r6, r3, #27
 80074e4:	d508      	bpl.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074e6:	496a      	ldr	r1, [pc, #424]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074e8:	6965      	ldr	r5, [r4, #20]
 80074ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80074f2:	432a      	orrs	r2, r5
 80074f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074f8:	069d      	lsls	r5, r3, #26
 80074fa:	d508      	bpl.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074fc:	4964      	ldr	r1, [pc, #400]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80074fe:	69a5      	ldr	r5, [r4, #24]
 8007500:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007504:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007508:	432a      	orrs	r2, r5
 800750a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800750e:	0659      	lsls	r1, r3, #25
 8007510:	d508      	bpl.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007512:	495f      	ldr	r1, [pc, #380]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007514:	69e5      	ldr	r5, [r4, #28]
 8007516:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800751a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800751e:	432a      	orrs	r2, r5
 8007520:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007524:	061a      	lsls	r2, r3, #24
 8007526:	d508      	bpl.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007528:	4959      	ldr	r1, [pc, #356]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800752a:	6a25      	ldr	r5, [r4, #32]
 800752c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007530:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007534:	432a      	orrs	r2, r5
 8007536:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800753a:	05df      	lsls	r7, r3, #23
 800753c:	d508      	bpl.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800753e:	4954      	ldr	r1, [pc, #336]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007540:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007542:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007546:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800754a:	432a      	orrs	r2, r5
 800754c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007550:	039e      	lsls	r6, r3, #14
 8007552:	d508      	bpl.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007554:	494e      	ldr	r1, [pc, #312]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007556:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007558:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800755c:	f022 0203 	bic.w	r2, r2, #3
 8007560:	432a      	orrs	r2, r5
 8007562:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007566:	059d      	lsls	r5, r3, #22
 8007568:	d508      	bpl.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800756a:	4949      	ldr	r1, [pc, #292]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800756c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800756e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007572:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007576:	432a      	orrs	r2, r5
 8007578:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800757c:	0559      	lsls	r1, r3, #21
 800757e:	d50b      	bpl.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007580:	4943      	ldr	r1, [pc, #268]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007582:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007584:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007588:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800758c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800758e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007592:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007596:	d071      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007598:	051a      	lsls	r2, r3, #20
 800759a:	d50b      	bpl.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800759c:	493c      	ldr	r1, [pc, #240]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800759e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80075a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80075a4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80075a8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80075aa:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80075b2:	d068      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075b4:	04df      	lsls	r7, r3, #19
 80075b6:	d50b      	bpl.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075b8:	4935      	ldr	r1, [pc, #212]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80075bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80075c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80075c4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075c6:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075ce:	d063      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075d0:	049e      	lsls	r6, r3, #18
 80075d2:	d50b      	bpl.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075d4:	492e      	ldr	r1, [pc, #184]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075d6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80075d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80075dc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80075e0:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075e2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075ea:	d05a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075ec:	045d      	lsls	r5, r3, #17
 80075ee:	d50b      	bpl.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075f0:	4927      	ldr	r1, [pc, #156]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80075f2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80075f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80075f8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80075fc:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075fe:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007602:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007606:	d051      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007608:	0419      	lsls	r1, r3, #16
 800760a:	d50b      	bpl.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800760c:	4920      	ldr	r1, [pc, #128]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800760e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007610:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007618:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800761a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800761e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007622:	d048      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007624:	03da      	lsls	r2, r3, #15
 8007626:	d50b      	bpl.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007628:	4919      	ldr	r1, [pc, #100]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800762a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800762c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007630:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007634:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007636:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800763a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800763e:	d03f      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007640:	035b      	lsls	r3, r3, #13
 8007642:	d50b      	bpl.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007644:	4a12      	ldr	r2, [pc, #72]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007646:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007648:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800764c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007650:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007652:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007656:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800765a:	d036      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 800765c:	b002      	add	sp, #8
 800765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007662:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007664:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007668:	659a      	str	r2, [r3, #88]	; 0x58
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007674:	2701      	movs	r7, #1
 8007676:	e6b7      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8007678:	2003      	movs	r0, #3
 800767a:	e6ff      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800767c:	68ca      	ldr	r2, [r1, #12]
 800767e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007682:	60ca      	str	r2, [r1, #12]
 8007684:	e788      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007686:	68ca      	ldr	r2, [r1, #12]
 8007688:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800768c:	60ca      	str	r2, [r1, #12]
 800768e:	e791      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007690:	40021000 	.word	0x40021000
 8007694:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007698:	68ca      	ldr	r2, [r1, #12]
 800769a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800769e:	60ca      	str	r2, [r1, #12]
 80076a0:	e796      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076a2:	68ca      	ldr	r2, [r1, #12]
 80076a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80076a8:	60ca      	str	r2, [r1, #12]
 80076aa:	e79f      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076ac:	68ca      	ldr	r2, [r1, #12]
 80076ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80076b2:	60ca      	str	r2, [r1, #12]
 80076b4:	e7a8      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076b6:	68ca      	ldr	r2, [r1, #12]
 80076b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80076bc:	60ca      	str	r2, [r1, #12]
 80076be:	e7b1      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076c0:	68ca      	ldr	r2, [r1, #12]
 80076c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80076c6:	60ca      	str	r2, [r1, #12]
 80076c8:	e7ba      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076ca:	68d3      	ldr	r3, [r2, #12]
 80076cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d0:	60d3      	str	r3, [r2, #12]
}
 80076d2:	b002      	add	sp, #8
 80076d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d8:	4613      	mov	r3, r2
 80076da:	e6c6      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x9e>

080076dc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80076dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e0:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076e2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80076e4:	4617      	mov	r7, r2
 80076e6:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 80076e8:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80076ec:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076ee:	f7fb fb99 	bl	8002e24 <HAL_GetTick>
 80076f2:	442f      	add	r7, r5
 80076f4:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80076f6:	f7fb fb95 	bl	8002e24 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076fa:	4b31      	ldr	r3, [pc, #196]	; (80077c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076fc:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007704:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007708:	0d1b      	lsrs	r3, r3, #20
 800770a:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 800770e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007710:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007712:	4622      	mov	r2, r4
 8007714:	1c69      	adds	r1, r5, #1
 8007716:	6893      	ldr	r3, [r2, #8]
 8007718:	d110      	bne.n	800773c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 800771a:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800771e:	d009      	beq.n	8007734 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007720:	7b23      	ldrb	r3, [r4, #12]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007728:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 800772c:	6893      	ldr	r3, [r2, #8]
 800772e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007732:	d1f5      	bne.n	8007720 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8007734:	2000      	movs	r0, #0
}
 8007736:	b002      	add	sp, #8
 8007738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800773c:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007740:	d0f8      	beq.n	8007734 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8007742:	7b23      	ldrb	r3, [r4, #12]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800774a:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800774e:	f7fb fb69 	bl	8002e24 <HAL_GetTick>
 8007752:	eba0 0008 	sub.w	r0, r0, r8
 8007756:	42b8      	cmp	r0, r7
 8007758:	d209      	bcs.n	800776e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 800775a:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800775c:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800775e:	2b00      	cmp	r3, #0
      count--;
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007766:	bf08      	it	eq
 8007768:	2700      	moveq	r7, #0
      count--;
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	e7d2      	b.n	8007714 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800776e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007772:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007774:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007778:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800777c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800777e:	d013      	beq.n	80077a8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007780:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007782:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007786:	d107      	bne.n	8007798 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007796:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007798:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800779a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800779c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80077a0:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80077a4:	2003      	movs	r0, #3
 80077a6:	e7c6      	b.n	8007736 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a8:	68b2      	ldr	r2, [r6, #8]
 80077aa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80077ae:	d002      	beq.n	80077b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077b0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80077b4:	d1e4      	bne.n	8007780 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e7df      	b.n	8007780 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 80077c0:	20000004 	.word	0x20000004

080077c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80077d0:	eb01 0902 	add.w	r9, r1, r2
{
 80077d4:	460e      	mov	r6, r1
 80077d6:	4617      	mov	r7, r2
 80077d8:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80077da:	f7fb fb23 	bl	8002e24 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077de:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8007900 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80077e2:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 80077e6:	f7fb fb1d 	bl	8002e24 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077ea:	f8d8 3000 	ldr.w	r3, [r8]
 80077ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80077f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80077f6:	0d1b      	lsrs	r3, r3, #20
 80077f8:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 80077fc:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077fe:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8007800:	1c70      	adds	r0, r6, #1
 8007802:	682c      	ldr	r4, [r5, #0]
 8007804:	d120      	bne.n	8007848 <SPI_EndRxTxTransaction+0x84>
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800780c:	d1fb      	bne.n	8007806 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800780e:	f7fb fb09 	bl	8002e24 <HAL_GetTick>
 8007812:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007816:	f7fb fb05 	bl	8002e24 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800781a:	f8d8 3000 	ldr.w	r3, [r8]
 800781e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007822:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8007826:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007828:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800782a:	1c71      	adds	r1, r6, #1
 800782c:	682c      	ldr	r4, [r5, #0]
 800782e:	d11f      	bne.n	8007870 <SPI_EndRxTxTransaction+0xac>
 8007830:	68a3      	ldr	r3, [r4, #8]
 8007832:	061a      	lsls	r2, r3, #24
 8007834:	d4fc      	bmi.n	8007830 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007836:	463a      	mov	r2, r7
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	f7ff ff4e 	bl	80076dc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007840:	bb48      	cbnz	r0, 8007896 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007842:	b005      	add	sp, #20
 8007844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007848:	68a3      	ldr	r3, [r4, #8]
 800784a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 800784e:	d0de      	beq.n	800780e <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007850:	f7fb fae8 	bl	8002e24 <HAL_GetTick>
 8007854:	eba0 000b 	sub.w	r0, r0, fp
 8007858:	4550      	cmp	r0, sl
 800785a:	d222      	bcs.n	80078a2 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 800785c:	9a02      	ldr	r2, [sp, #8]
      count--;
 800785e:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8007860:	2a00      	cmp	r2, #0
      count--;
 8007862:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007866:	bf08      	it	eq
 8007868:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800786c:	9302      	str	r3, [sp, #8]
 800786e:	e7c7      	b.n	8007800 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007870:	68a3      	ldr	r3, [r4, #8]
 8007872:	061b      	lsls	r3, r3, #24
 8007874:	d5df      	bpl.n	8007836 <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007876:	f7fb fad5 	bl	8002e24 <HAL_GetTick>
 800787a:	eba0 0008 	sub.w	r0, r0, r8
 800787e:	4548      	cmp	r0, r9
 8007880:	d20f      	bcs.n	80078a2 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007882:	9a03      	ldr	r2, [sp, #12]
      count--;
 8007884:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8007886:	2a00      	cmp	r2, #0
      count--;
 8007888:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800788c:	bf08      	it	eq
 800788e:	f04f 0900 	moveq.w	r9, #0
      count--;
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	e7c9      	b.n	800782a <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007896:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007898:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 800789c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800789e:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 80078a0:	e7cf      	b.n	8007842 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a2:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078a6:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078b0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b2:	d019      	beq.n	80078e8 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80078b6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80078ba:	d107      	bne.n	80078cc <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078ca:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80078d4:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d6:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80078da:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80078dc:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e0:	662b      	str	r3, [r5, #96]	; 0x60
}
 80078e2:	b005      	add	sp, #20
 80078e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e8:	68aa      	ldr	r2, [r5, #8]
 80078ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80078ee:	d002      	beq.n	80078f6 <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078f0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80078f4:	d1de      	bne.n	80078b4 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e7d9      	b.n	80078b4 <SPI_EndRxTxTransaction+0xf0>
 8007900:	20000004 	.word	0x20000004

08007904 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007904:	2800      	cmp	r0, #0
 8007906:	d077      	beq.n	80079f8 <HAL_SPI_Init+0xf4>
{
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800790c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800790e:	4604      	mov	r4, r0
 8007910:	2e00      	cmp	r6, #0
 8007912:	d058      	beq.n	80079c6 <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007914:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007916:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800791a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800791e:	2200      	movs	r2, #0
 8007920:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007922:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007926:	2b00      	cmp	r3, #0
 8007928:	d059      	beq.n	80079de <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 800792a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800792c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800792e:	2302      	movs	r3, #2
 8007930:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007934:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007936:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800793a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793e:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007940:	d947      	bls.n	80079d2 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007942:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8007946:	d159      	bne.n	80079fc <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007948:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800794a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800794c:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007950:	6862      	ldr	r2, [r4, #4]
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800795c:	431a      	orrs	r2, r3
 800795e:	6923      	ldr	r3, [r4, #16]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	4313      	orrs	r3, r2
 8007966:	6962      	ldr	r2, [r4, #20]
 8007968:	f002 0201 	and.w	r2, r2, #1
 800796c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800796e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007970:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800797c:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800797e:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007982:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007986:	69a6      	ldr	r6, [r4, #24]
 8007988:	6a23      	ldr	r3, [r4, #32]
 800798a:	f003 0780 	and.w	r7, r3, #128	; 0x80
 800798e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007992:	4313      	orrs	r3, r2
 8007994:	ea43 0308 	orr.w	r3, r3, r8
 8007998:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800799a:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800799c:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800799e:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079a2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079a4:	ea4e 0306 	orr.w	r3, lr, r6
 80079a8:	ea43 030c 	orr.w	r3, r3, ip
 80079ac:	4303      	orrs	r3, r0
 80079ae:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079b0:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079b2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80079b8:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079ba:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079bc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80079be:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 80079c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079c6:	6843      	ldr	r3, [r0, #4]
 80079c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079cc:	d0a5      	beq.n	800791a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079ce:	61c6      	str	r6, [r0, #28]
 80079d0:	e7a3      	b.n	800791a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079d2:	d00b      	beq.n	80079ec <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079d8:	2500      	movs	r5, #0
 80079da:	62a5      	str	r5, [r4, #40]	; 0x28
 80079dc:	e7b8      	b.n	8007950 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 80079de:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80079e2:	4620      	mov	r0, r4
 80079e4:	f7fc fdd0 	bl	8004588 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80079ea:	e79e      	b.n	800792a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079ec:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079f2:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 80079f6:	e7ab      	b.n	8007950 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80079f8:	2001      	movs	r0, #1
}
 80079fa:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7eb      	b.n	80079d8 <HAL_SPI_Init+0xd4>

08007a00 <HAL_SPI_TransmitReceive>:
{
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007a06:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8007a0a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8007a0c:	2801      	cmp	r0, #1
 8007a0e:	f000 8097 	beq.w	8007b40 <HAL_SPI_TransmitReceive+0x140>
 8007a12:	461f      	mov	r7, r3
 8007a14:	2301      	movs	r3, #1
 8007a16:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8007a1a:	4689      	mov	r9, r1
 8007a1c:	4690      	mov	r8, r2
 8007a1e:	f7fb fa01 	bl	8002e24 <HAL_GetTick>
 8007a22:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8007a24:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007a28:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a2a:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8007a2c:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a2e:	d010      	beq.n	8007a52 <HAL_SPI_TransmitReceive+0x52>
 8007a30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a34:	d008      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8007a36:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007a38:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8007a3a:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8007a3c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007a40:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a48:	68a2      	ldr	r2, [r4, #8]
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	d1f3      	bne.n	8007a36 <HAL_SPI_TransmitReceive+0x36>
 8007a4e:	2904      	cmp	r1, #4
 8007a50:	d1f1      	bne.n	8007a36 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a52:	f1b9 0f00 	cmp.w	r9, #0
 8007a56:	d076      	beq.n	8007b46 <HAL_SPI_TransmitReceive+0x146>
 8007a58:	f1b8 0f00 	cmp.w	r8, #0
 8007a5c:	d073      	beq.n	8007b46 <HAL_SPI_TransmitReceive+0x146>
 8007a5e:	2f00      	cmp	r7, #0
 8007a60:	d071      	beq.n	8007b46 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a62:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a66:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a68:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a6c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a6e:	bf1c      	itt	ne
 8007a70:	2205      	movne	r2, #5
 8007a72:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a76:	2200      	movs	r2, #0
 8007a78:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8007a7a:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a7e:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8007a80:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 8007a88:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a8a:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 8007a8c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a90:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a94:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a96:	d858      	bhi.n	8007b4a <HAL_SPI_TransmitReceive+0x14a>
 8007a98:	2f01      	cmp	r7, #1
 8007a9a:	f000 8124 	beq.w	8007ce6 <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a9e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007aa2:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	0649      	lsls	r1, r1, #25
 8007aa8:	f100 80e3 	bmi.w	8007c72 <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 8007aac:	6811      	ldr	r1, [r2, #0]
 8007aae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007ab2:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80df 	beq.w	8007c78 <HAL_SPI_TransmitReceive+0x278>
 8007aba:	2f01      	cmp	r7, #1
 8007abc:	f000 80dc 	beq.w	8007c78 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 8007ac0:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ac2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	b92b      	cbnz	r3, 8007ad4 <HAL_SPI_TransmitReceive+0xd4>
 8007ac8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 8086 	beq.w	8007be0 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ad4:	6822      	ldr	r2, [r4, #0]
 8007ad6:	6893      	ldr	r3, [r2, #8]
 8007ad8:	0799      	lsls	r1, r3, #30
 8007ada:	d505      	bpl.n	8007ae8 <HAL_SPI_TransmitReceive+0xe8>
 8007adc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	b113      	cbz	r3, 8007ae8 <HAL_SPI_TransmitReceive+0xe8>
 8007ae2:	2f00      	cmp	r7, #0
 8007ae4:	f040 80e4 	bne.w	8007cb0 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ae8:	6893      	ldr	r3, [r2, #8]
 8007aea:	f013 0301 	ands.w	r3, r3, #1
 8007aee:	d01e      	beq.n	8007b2e <HAL_SPI_TransmitReceive+0x12e>
 8007af0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007af4:	b289      	uxth	r1, r1
 8007af6:	b1d1      	cbz	r1, 8007b2e <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8007af8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007afc:	b289      	uxth	r1, r1
 8007afe:	2901      	cmp	r1, #1
 8007b00:	f240 80c8 	bls.w	8007c94 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b04:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b06:	68d0      	ldr	r0, [r2, #12]
 8007b08:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b0c:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007b0e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007b12:	3902      	subs	r1, #2
 8007b14:	b289      	uxth	r1, r1
 8007b16:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007b1a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007b1e:	b289      	uxth	r1, r1
 8007b20:	2901      	cmp	r1, #1
        txallowed = 1U;
 8007b22:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 8007b24:	d803      	bhi.n	8007b2e <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b26:	6853      	ldr	r3, [r2, #4]
 8007b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b2c:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b2e:	f7fb f979 	bl	8002e24 <HAL_GetTick>
 8007b32:	1b43      	subs	r3, r0, r5
 8007b34:	42b3      	cmp	r3, r6
 8007b36:	d3c4      	bcc.n	8007ac2 <HAL_SPI_TransmitReceive+0xc2>
 8007b38:	1c73      	adds	r3, r6, #1
 8007b3a:	d0c2      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8007b3c:	2003      	movs	r0, #3
 8007b3e:	e77b      	b.n	8007a38 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8007b40:	2002      	movs	r0, #2
}
 8007b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8007b46:	2001      	movs	r0, #1
 8007b48:	e776      	b.n	8007a38 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b4a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007b4e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b50:	6811      	ldr	r1, [r2, #0]
 8007b52:	0648      	lsls	r0, r1, #25
 8007b54:	d403      	bmi.n	8007b5e <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 8007b56:	6811      	ldr	r1, [r2, #0]
 8007b58:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007b5c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d161      	bne.n	8007c26 <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b62:	4649      	mov	r1, r9
 8007b64:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007b68:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8007b6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b6c:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007b74:	1c72      	adds	r2, r6, #1
{
 8007b76:	f04f 0701 	mov.w	r7, #1
 8007b7a:	d028      	beq.n	8007bce <HAL_SPI_TransmitReceive+0x1ce>
 8007b7c:	e04e      	b.n	8007c1c <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	6893      	ldr	r3, [r2, #8]
 8007b82:	079b      	lsls	r3, r3, #30
 8007b84:	d50d      	bpl.n	8007ba2 <HAL_SPI_TransmitReceive+0x1a2>
 8007b86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	b153      	cbz	r3, 8007ba2 <HAL_SPI_TransmitReceive+0x1a2>
 8007b8c:	b14f      	cbz	r7, 8007ba2 <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b90:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007b94:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8007b96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b98:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8007b9e:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8007ba0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ba2:	6893      	ldr	r3, [r2, #8]
 8007ba4:	f013 0301 	ands.w	r3, r3, #1
 8007ba8:	d00f      	beq.n	8007bca <HAL_SPI_TransmitReceive+0x1ca>
 8007baa:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007bae:	b289      	uxth	r1, r1
 8007bb0:	b159      	cbz	r1, 8007bca <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bb2:	68d1      	ldr	r1, [r2, #12]
 8007bb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007bb6:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8007bba:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8007bbc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bc0:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bca:	f7fb f92b 	bl	8002e24 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1d3      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x17e>
 8007bd6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1ce      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007be0:	462a      	mov	r2, r5
 8007be2:	4631      	mov	r1, r6
 8007be4:	4620      	mov	r0, r4
 8007be6:	f7ff fded 	bl	80077c4 <SPI_EndRxTxTransaction>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f43f af24 	beq.w	8007a38 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	e71f      	b.n	8007a38 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0ee      	beq.n	8007be0 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	6893      	ldr	r3, [r2, #8]
 8007c06:	0798      	lsls	r0, r3, #30
 8007c08:	d422      	bmi.n	8007c50 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c0a:	6893      	ldr	r3, [r2, #8]
 8007c0c:	f013 0301 	ands.w	r3, r3, #1
 8007c10:	d10c      	bne.n	8007c2c <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c12:	f7fb f907 	bl	8002e24 <HAL_GetTick>
 8007c16:	1b40      	subs	r0, r0, r5
 8007c18:	42b0      	cmp	r0, r6
 8007c1a:	d28f      	bcs.n	8007b3c <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1ee      	bne.n	8007c02 <HAL_SPI_TransmitReceive+0x202>
 8007c24:	e7e8      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c26:	2f01      	cmp	r7, #1
 8007c28:	d1a4      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x174>
 8007c2a:	e79a      	b.n	8007b62 <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c2c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007c30:	b289      	uxth	r1, r1
 8007c32:	2900      	cmp	r1, #0
 8007c34:	d0ed      	beq.n	8007c12 <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c36:	68d1      	ldr	r1, [r2, #12]
 8007c38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c3a:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8007c3e:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8007c40:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c44:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007c46:	3b01      	subs	r3, #1
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8007c4e:	e7e0      	b.n	8007c12 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0d8      	beq.n	8007c0a <HAL_SPI_TransmitReceive+0x20a>
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	d0d6      	beq.n	8007c0a <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c5e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007c62:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c64:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007c66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8007c6c:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8007c6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007c70:	e7cb      	b.n	8007c0a <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f47f af24 	bne.w	8007ac0 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8007c78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d93a      	bls.n	8007cf6 <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c80:	4649      	mov	r1, r9
 8007c82:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007c86:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8007c88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c8a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c8c:	3b02      	subs	r3, #2
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007c92:	e715      	b.n	8007ac0 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 8007c94:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c98:	7b12      	ldrb	r2, [r2, #12]
 8007c9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007c9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007ca2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8007cae:	e73e      	b.n	8007b2e <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8007cb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8007cb8:	d909      	bls.n	8007cce <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cba:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007cbe:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007cc4:	3b02      	subs	r3, #2
 8007cc6:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8007cc8:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 8007cca:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007ccc:	e70c      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8007cd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8007cd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8007cd6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8007cd8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8007cda:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8007cdc:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8007cde:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ce0:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 8007ce2:	2700      	movs	r7, #0
 8007ce4:	e700      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ce6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8007cea:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cec:	6811      	ldr	r1, [r2, #0]
 8007cee:	0649      	lsls	r1, r1, #25
 8007cf0:	f57f aedc 	bpl.w	8007aac <HAL_SPI_TransmitReceive+0xac>
 8007cf4:	e7c0      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007cf6:	f899 3000 	ldrb.w	r3, [r9]
 8007cfa:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8007cfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8007cfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007d00:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8007d02:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8007d04:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8007d06:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007d08:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007d0a:	e6d9      	b.n	8007ac0 <HAL_SPI_TransmitReceive+0xc0>

08007d0c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0c:	6a03      	ldr	r3, [r0, #32]
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d14:	6a03      	ldr	r3, [r0, #32]
{
 8007d16:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d1a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007d26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007d2a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007d2e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d30:	4d15      	ldr	r5, [pc, #84]	; (8007d88 <TIM_OC1_SetConfig+0x7c>)
 8007d32:	42a8      	cmp	r0, r5
 8007d34:	d013      	beq.n	8007d5e <TIM_OC1_SetConfig+0x52>
 8007d36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007d3a:	42a8      	cmp	r0, r5
 8007d3c:	d00f      	beq.n	8007d5e <TIM_OC1_SetConfig+0x52>
 8007d3e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007d42:	42a8      	cmp	r0, r5
 8007d44:	d00b      	beq.n	8007d5e <TIM_OC1_SetConfig+0x52>
 8007d46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d4a:	42a8      	cmp	r0, r5
 8007d4c:	d007      	beq.n	8007d5e <TIM_OC1_SetConfig+0x52>
 8007d4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d52:	42a8      	cmp	r0, r5
 8007d54:	d003      	beq.n	8007d5e <TIM_OC1_SetConfig+0x52>
 8007d56:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007d5a:	42a8      	cmp	r0, r5
 8007d5c:	d10d      	bne.n	8007d7a <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d5e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d60:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007d64:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d66:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d6a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d6e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d72:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d76:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d7a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007d7c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007d7e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007d80:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007d82:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007d84:	6203      	str	r3, [r0, #32]
}
 8007d86:	4770      	bx	lr
 8007d88:	40012c00 	.word	0x40012c00

08007d8c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d8c:	6a03      	ldr	r3, [r0, #32]
 8007d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d92:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d94:	6a03      	ldr	r3, [r0, #32]
{
 8007d96:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007da2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007da6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007da8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8007daa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007db2:	4d1c      	ldr	r5, [pc, #112]	; (8007e24 <TIM_OC3_SetConfig+0x98>)
 8007db4:	42a8      	cmp	r0, r5
 8007db6:	d017      	beq.n	8007de8 <TIM_OC3_SetConfig+0x5c>
 8007db8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007dbc:	42a8      	cmp	r0, r5
 8007dbe:	d013      	beq.n	8007de8 <TIM_OC3_SetConfig+0x5c>
 8007dc0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007dc4:	42a8      	cmp	r0, r5
 8007dc6:	d025      	beq.n	8007e14 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc8:	4d17      	ldr	r5, [pc, #92]	; (8007e28 <TIM_OC3_SetConfig+0x9c>)
 8007dca:	42a8      	cmp	r0, r5
 8007dcc:	d013      	beq.n	8007df6 <TIM_OC3_SetConfig+0x6a>
 8007dce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007dd2:	42a8      	cmp	r0, r5
 8007dd4:	d00f      	beq.n	8007df6 <TIM_OC3_SetConfig+0x6a>
 8007dd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007dda:	42a8      	cmp	r0, r5
 8007ddc:	d00b      	beq.n	8007df6 <TIM_OC3_SetConfig+0x6a>
 8007dde:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007de2:	42a8      	cmp	r0, r5
 8007de4:	d10f      	bne.n	8007e06 <TIM_OC3_SetConfig+0x7a>
 8007de6:	e006      	b.n	8007df6 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007de8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007df6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dfa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dfe:	ea46 0c05 	orr.w	ip, r6, r5
 8007e02:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e06:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007e08:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007e0a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007e0c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007e0e:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007e10:	6203      	str	r3, [r0, #32]
}
 8007e12:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e14:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e22:	e7d1      	b.n	8007dc8 <TIM_OC3_SetConfig+0x3c>
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40014000 	.word	0x40014000

08007e2c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e2c:	6a03      	ldr	r3, [r0, #32]
 8007e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e32:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e34:	6a03      	ldr	r3, [r0, #32]
{
 8007e36:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e3a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007e42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007e54:	4d1c      	ldr	r5, [pc, #112]	; (8007ec8 <TIM_OC4_SetConfig+0x9c>)
 8007e56:	42a8      	cmp	r0, r5
 8007e58:	d017      	beq.n	8007e8a <TIM_OC4_SetConfig+0x5e>
 8007e5a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007e5e:	42a8      	cmp	r0, r5
 8007e60:	d013      	beq.n	8007e8a <TIM_OC4_SetConfig+0x5e>
 8007e62:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8007e66:	42a8      	cmp	r0, r5
 8007e68:	d025      	beq.n	8007eb6 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6a:	4d18      	ldr	r5, [pc, #96]	; (8007ecc <TIM_OC4_SetConfig+0xa0>)
 8007e6c:	42a8      	cmp	r0, r5
 8007e6e:	d013      	beq.n	8007e98 <TIM_OC4_SetConfig+0x6c>
 8007e70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e74:	42a8      	cmp	r0, r5
 8007e76:	d00f      	beq.n	8007e98 <TIM_OC4_SetConfig+0x6c>
 8007e78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007e7c:	42a8      	cmp	r0, r5
 8007e7e:	d00b      	beq.n	8007e98 <TIM_OC4_SetConfig+0x6c>
 8007e80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007e84:	42a8      	cmp	r0, r5
 8007e86:	d10f      	bne.n	8007ea8 <TIM_OC4_SetConfig+0x7c>
 8007e88:	e006      	b.n	8007e98 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e8a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007e8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e98:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007e9c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ea0:	ea46 0c05 	orr.w	ip, r6, r5
 8007ea4:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ea8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007eaa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007eac:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007eae:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8007eb0:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007eb2:	6203      	str	r3, [r0, #32]
}
 8007eb4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007eb6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007eb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ebc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec4:	e7d1      	b.n	8007e6a <TIM_OC4_SetConfig+0x3e>
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40014000 	.word	0x40014000

08007ed0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f000 808c 	beq.w	8007fee <HAL_TIM_Base_Init+0x11e>
{
 8007ed6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ed8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007edc:	4604      	mov	r4, r0
 8007ede:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d078      	beq.n	8007fd8 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee8:	4944      	ldr	r1, [pc, #272]	; (8007ffc <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007eea:	2302      	movs	r3, #2
 8007eec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007ef2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef4:	d05c      	beq.n	8007fb0 <HAL_TIM_Base_Init+0xe0>
 8007ef6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007efa:	d02c      	beq.n	8007f56 <HAL_TIM_Base_Init+0x86>
 8007efc:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007f00:	428a      	cmp	r2, r1
 8007f02:	d028      	beq.n	8007f56 <HAL_TIM_Base_Init+0x86>
 8007f04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f08:	428a      	cmp	r2, r1
 8007f0a:	d024      	beq.n	8007f56 <HAL_TIM_Base_Init+0x86>
 8007f0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f10:	428a      	cmp	r2, r1
 8007f12:	d020      	beq.n	8007f56 <HAL_TIM_Base_Init+0x86>
 8007f14:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8007f18:	428a      	cmp	r2, r1
 8007f1a:	d049      	beq.n	8007fb0 <HAL_TIM_Base_Init+0xe0>
 8007f1c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8007f20:	428a      	cmp	r2, r1
 8007f22:	d066      	beq.n	8007ff2 <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f24:	4936      	ldr	r1, [pc, #216]	; (8008000 <HAL_TIM_Base_Init+0x130>)
 8007f26:	428a      	cmp	r2, r1
 8007f28:	d05b      	beq.n	8007fe2 <HAL_TIM_Base_Init+0x112>
 8007f2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f2e:	428a      	cmp	r2, r1
 8007f30:	d057      	beq.n	8007fe2 <HAL_TIM_Base_Init+0x112>
 8007f32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f36:	428a      	cmp	r2, r1
 8007f38:	d053      	beq.n	8007fe2 <HAL_TIM_Base_Init+0x112>
 8007f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f3e:	428a      	cmp	r2, r1
 8007f40:	d04f      	beq.n	8007fe2 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f42:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f44:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f4a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007f4c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007f4e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f50:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007f52:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f54:	e010      	b.n	8007f78 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007f56:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f58:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007f5e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f64:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f66:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f6c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f6e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007f70:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007f72:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f74:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007f76:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007f84:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007f88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007f8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007f9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fa0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007fa4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007fa8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007fac:	2000      	movs	r0, #0
}
 8007fae:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007fb0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fb2:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007fb8:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fbe:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fc0:	69a1      	ldr	r1, [r4, #24]
 8007fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fc6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007fc8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007fce:	6863      	ldr	r3, [r4, #4]
 8007fd0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007fd2:	6963      	ldr	r3, [r4, #20]
 8007fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fd6:	e7cf      	b.n	8007f78 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8007fd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007fdc:	f7fc fc8e 	bl	80048fc <HAL_TIM_Base_MspInit>
 8007fe0:	e781      	b.n	8007ee6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fea:	4303      	orrs	r3, r0
 8007fec:	e7e9      	b.n	8007fc2 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8007fee:	2001      	movs	r0, #1
}
 8007ff0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007ff2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007ff8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ffa:	e793      	b.n	8007f24 <HAL_TIM_Base_Init+0x54>
 8007ffc:	40012c00 	.word	0x40012c00
 8008000:	40014000 	.word	0x40014000

08008004 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008004:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008008:	2b01      	cmp	r3, #1
 800800a:	d132      	bne.n	8008072 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800800c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800e:	491b      	ldr	r1, [pc, #108]	; (800807c <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	2202      	movs	r2, #2
 8008012:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008016:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008018:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800801a:	f042 0201 	orr.w	r2, r2, #1
 800801e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008020:	d019      	beq.n	8008056 <HAL_TIM_Base_Start_IT+0x52>
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008026:	d016      	beq.n	8008056 <HAL_TIM_Base_Start_IT+0x52>
 8008028:	4a15      	ldr	r2, [pc, #84]	; (8008080 <HAL_TIM_Base_Start_IT+0x7c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d013      	beq.n	8008056 <HAL_TIM_Base_Start_IT+0x52>
 800802e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008032:	4293      	cmp	r3, r2
 8008034:	d00f      	beq.n	8008056 <HAL_TIM_Base_Start_IT+0x52>
 8008036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800803a:	4293      	cmp	r3, r2
 800803c:	d00b      	beq.n	8008056 <HAL_TIM_Base_Start_IT+0x52>
 800803e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008042:	4293      	cmp	r3, r2
 8008044:	d007      	beq.n	8008056 <HAL_TIM_Base_Start_IT+0x52>
 8008046:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <HAL_TIM_Base_Start_IT+0x52>
 800804e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008052:	4293      	cmp	r3, r2
 8008054:	d107      	bne.n	8008066 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008056:	6899      	ldr	r1, [r3, #8]
 8008058:	4a0a      	ldr	r2, [pc, #40]	; (8008084 <HAL_TIM_Base_Start_IT+0x80>)
 800805a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805c:	2a06      	cmp	r2, #6
 800805e:	d00a      	beq.n	8008076 <HAL_TIM_Base_Start_IT+0x72>
 8008060:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008064:	d007      	beq.n	8008076 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800806c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	4770      	bx	lr
    return HAL_ERROR;
 8008072:	2001      	movs	r0, #1
 8008074:	4770      	bx	lr
  return HAL_OK;
 8008076:	2000      	movs	r0, #0
}
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40012c00 	.word	0x40012c00
 8008080:	40000400 	.word	0x40000400
 8008084:	00010007 	.word	0x00010007

08008088 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008088:	2800      	cmp	r0, #0
 800808a:	f000 808c 	beq.w	80081a6 <HAL_TIM_PWM_Init+0x11e>
{
 800808e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008090:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008094:	4604      	mov	r4, r0
 8008096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800809a:	2b00      	cmp	r3, #0
 800809c:	d078      	beq.n	8008190 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080a0:	4944      	ldr	r1, [pc, #272]	; (80081b4 <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80080a2:	2302      	movs	r3, #2
 80080a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080a8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80080aa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080ac:	d05c      	beq.n	8008168 <HAL_TIM_PWM_Init+0xe0>
 80080ae:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80080b2:	d02c      	beq.n	800810e <HAL_TIM_PWM_Init+0x86>
 80080b4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80080b8:	428a      	cmp	r2, r1
 80080ba:	d028      	beq.n	800810e <HAL_TIM_PWM_Init+0x86>
 80080bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080c0:	428a      	cmp	r2, r1
 80080c2:	d024      	beq.n	800810e <HAL_TIM_PWM_Init+0x86>
 80080c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080c8:	428a      	cmp	r2, r1
 80080ca:	d020      	beq.n	800810e <HAL_TIM_PWM_Init+0x86>
 80080cc:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80080d0:	428a      	cmp	r2, r1
 80080d2:	d049      	beq.n	8008168 <HAL_TIM_PWM_Init+0xe0>
 80080d4:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80080d8:	428a      	cmp	r2, r1
 80080da:	d066      	beq.n	80081aa <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080dc:	4936      	ldr	r1, [pc, #216]	; (80081b8 <HAL_TIM_PWM_Init+0x130>)
 80080de:	428a      	cmp	r2, r1
 80080e0:	d05b      	beq.n	800819a <HAL_TIM_PWM_Init+0x112>
 80080e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080e6:	428a      	cmp	r2, r1
 80080e8:	d057      	beq.n	800819a <HAL_TIM_PWM_Init+0x112>
 80080ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080ee:	428a      	cmp	r2, r1
 80080f0:	d053      	beq.n	800819a <HAL_TIM_PWM_Init+0x112>
 80080f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080f6:	428a      	cmp	r2, r1
 80080f8:	d04f      	beq.n	800819a <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080fa:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080fc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008102:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008104:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8008106:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008108:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800810a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800810c:	e010      	b.n	8008130 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800810e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008110:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008116:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800811c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800811e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008124:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008126:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008128:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800812a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800812c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800812e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008130:	2301      	movs	r3, #1
 8008132:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008134:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008138:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800813c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008140:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008144:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800814c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008150:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008154:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008158:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800815c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008164:	2000      	movs	r0, #0
}
 8008166:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008168:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800816c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008170:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008176:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008178:	69a1      	ldr	r1, [r4, #24]
 800817a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008180:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008182:	68e3      	ldr	r3, [r4, #12]
 8008184:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800818a:	6963      	ldr	r3, [r4, #20]
 800818c:	6313      	str	r3, [r2, #48]	; 0x30
 800818e:	e7cf      	b.n	8008130 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008190:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008194:	f7fc fb9c 	bl	80048d0 <HAL_TIM_PWM_MspInit>
 8008198:	e781      	b.n	800809e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800819a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800819c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800819e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081a2:	4303      	orrs	r3, r0
 80081a4:	e7e9      	b.n	800817a <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 80081a6:	2001      	movs	r0, #1
}
 80081a8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80081aa:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80081b0:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081b2:	e793      	b.n	80080dc <HAL_TIM_PWM_Init+0x54>
 80081b4:	40012c00 	.word	0x40012c00
 80081b8:	40014000 	.word	0x40014000

080081bc <HAL_TIM_PWM_Start>:
 80081bc:	2910      	cmp	r1, #16
 80081be:	d80a      	bhi.n	80081d6 <HAL_TIM_PWM_Start+0x1a>
 80081c0:	e8df f001 	tbb	[pc, r1]
 80081c4:	09090961 	.word	0x09090961
 80081c8:	09090967 	.word	0x09090967
 80081cc:	0909096f 	.word	0x0909096f
 80081d0:	09090974 	.word	0x09090974
 80081d4:	7d          	.byte	0x7d
 80081d5:	00          	.byte	0x00
 80081d6:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d157      	bne.n	800828e <HAL_TIM_PWM_Start+0xd2>
 80081de:	2910      	cmp	r1, #16
 80081e0:	d80a      	bhi.n	80081f8 <HAL_TIM_PWM_Start+0x3c>
 80081e2:	e8df f001 	tbb	[pc, r1]
 80081e6:	0993      	.short	0x0993
 80081e8:	095a0909 	.word	0x095a0909
 80081ec:	097c0909 	.word	0x097c0909
 80081f0:	09780909 	.word	0x09780909
 80081f4:	0909      	.short	0x0909
 80081f6:	74          	.byte	0x74
 80081f7:	00          	.byte	0x00
 80081f8:	2302      	movs	r3, #2
 80081fa:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80081fe:	6803      	ldr	r3, [r0, #0]
 8008200:	2201      	movs	r2, #1
 8008202:	6a18      	ldr	r0, [r3, #32]
 8008204:	f001 011f 	and.w	r1, r1, #31
 8008208:	fa02 f101 	lsl.w	r1, r2, r1
 800820c:	ea20 0001 	bic.w	r0, r0, r1
 8008210:	6218      	str	r0, [r3, #32]
 8008212:	6a18      	ldr	r0, [r3, #32]
 8008214:	4a3f      	ldr	r2, [pc, #252]	; (8008314 <HAL_TIM_PWM_Start+0x158>)
 8008216:	4301      	orrs	r1, r0
 8008218:	4293      	cmp	r3, r2
 800821a:	6219      	str	r1, [r3, #32]
 800821c:	d063      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x12a>
 800821e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008222:	4293      	cmp	r3, r2
 8008224:	d06d      	beq.n	8008302 <HAL_TIM_PWM_Start+0x146>
 8008226:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800822a:	4293      	cmp	r3, r2
 800822c:	d069      	beq.n	8008302 <HAL_TIM_PWM_Start+0x146>
 800822e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008232:	4293      	cmp	r3, r2
 8008234:	d065      	beq.n	8008302 <HAL_TIM_PWM_Start+0x146>
 8008236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800823a:	4293      	cmp	r3, r2
 800823c:	d061      	beq.n	8008302 <HAL_TIM_PWM_Start+0x146>
 800823e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008242:	4293      	cmp	r3, r2
 8008244:	d05d      	beq.n	8008302 <HAL_TIM_PWM_Start+0x146>
 8008246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824a:	d050      	beq.n	80082ee <HAL_TIM_PWM_Start+0x132>
 800824c:	4a32      	ldr	r2, [pc, #200]	; (8008318 <HAL_TIM_PWM_Start+0x15c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d04d      	beq.n	80082ee <HAL_TIM_PWM_Start+0x132>
 8008252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008256:	4293      	cmp	r3, r2
 8008258:	d049      	beq.n	80082ee <HAL_TIM_PWM_Start+0x132>
 800825a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800825e:	4293      	cmp	r3, r2
 8008260:	d045      	beq.n	80082ee <HAL_TIM_PWM_Start+0x132>
 8008262:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008266:	4293      	cmp	r3, r2
 8008268:	d041      	beq.n	80082ee <HAL_TIM_PWM_Start+0x132>
 800826a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800826e:	4293      	cmp	r3, r2
 8008270:	d03d      	beq.n	80082ee <HAL_TIM_PWM_Start+0x132>
 8008272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008276:	4293      	cmp	r3, r2
 8008278:	d039      	beq.n	80082ee <HAL_TIM_PWM_Start+0x132>
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	2000      	movs	r0, #0
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	4770      	bx	lr
 8008286:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800828a:	2b01      	cmp	r3, #1
 800828c:	d03e      	beq.n	800830c <HAL_TIM_PWM_Start+0x150>
 800828e:	2001      	movs	r0, #1
 8008290:	4770      	bx	lr
 8008292:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008296:	2b01      	cmp	r3, #1
 8008298:	d1f9      	bne.n	800828e <HAL_TIM_PWM_Start+0xd2>
 800829a:	2302      	movs	r3, #2
 800829c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80082a0:	e7ad      	b.n	80081fe <HAL_TIM_PWM_Start+0x42>
 80082a2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d099      	beq.n	80081de <HAL_TIM_PWM_Start+0x22>
 80082aa:	e7f0      	b.n	800828e <HAL_TIM_PWM_Start+0xd2>
 80082ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80082b0:	3b01      	subs	r3, #1
 80082b2:	bf18      	it	ne
 80082b4:	2301      	movne	r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d091      	beq.n	80081de <HAL_TIM_PWM_Start+0x22>
 80082ba:	2001      	movs	r0, #1
 80082bc:	4770      	bx	lr
 80082be:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80082c2:	3b01      	subs	r3, #1
 80082c4:	bf18      	it	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d088      	beq.n	80081de <HAL_TIM_PWM_Start+0x22>
 80082cc:	e7f5      	b.n	80082ba <HAL_TIM_PWM_Start+0xfe>
 80082ce:	2302      	movs	r3, #2
 80082d0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80082d4:	e793      	b.n	80081fe <HAL_TIM_PWM_Start+0x42>
 80082d6:	2302      	movs	r3, #2
 80082d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80082dc:	e78f      	b.n	80081fe <HAL_TIM_PWM_Start+0x42>
 80082de:	2302      	movs	r3, #2
 80082e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80082e4:	e78b      	b.n	80081fe <HAL_TIM_PWM_Start+0x42>
 80082e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082ec:	645a      	str	r2, [r3, #68]	; 0x44
 80082ee:	6899      	ldr	r1, [r3, #8]
 80082f0:	4a0a      	ldr	r2, [pc, #40]	; (800831c <HAL_TIM_PWM_Start+0x160>)
 80082f2:	400a      	ands	r2, r1
 80082f4:	2a06      	cmp	r2, #6
 80082f6:	d002      	beq.n	80082fe <HAL_TIM_PWM_Start+0x142>
 80082f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80082fc:	d1bd      	bne.n	800827a <HAL_TIM_PWM_Start+0xbe>
 80082fe:	2000      	movs	r0, #0
 8008300:	4770      	bx	lr
 8008302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008308:	645a      	str	r2, [r3, #68]	; 0x44
 800830a:	e79c      	b.n	8008246 <HAL_TIM_PWM_Start+0x8a>
 800830c:	2302      	movs	r3, #2
 800830e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8008312:	e774      	b.n	80081fe <HAL_TIM_PWM_Start+0x42>
 8008314:	40012c00 	.word	0x40012c00
 8008318:	40000400 	.word	0x40000400
 800831c:	00010007 	.word	0x00010007

08008320 <HAL_TIM_OC_DelayElapsedCallback>:
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop

08008324 <HAL_TIM_IC_CaptureCallback>:
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop

08008328 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <HAL_TIM_TriggerCallback>:
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop

08008330 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008330:	6803      	ldr	r3, [r0, #0]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	0791      	lsls	r1, r2, #30
{
 8008336:	b510      	push	{r4, lr}
 8008338:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800833a:	d503      	bpl.n	8008344 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	0792      	lsls	r2, r2, #30
 8008340:	f100 808a 	bmi.w	8008458 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	0752      	lsls	r2, r2, #29
 8008348:	d502      	bpl.n	8008350 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800834a:	68da      	ldr	r2, [r3, #12]
 800834c:	0750      	lsls	r0, r2, #29
 800834e:	d470      	bmi.n	8008432 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008350:	691a      	ldr	r2, [r3, #16]
 8008352:	0711      	lsls	r1, r2, #28
 8008354:	d502      	bpl.n	800835c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	0712      	lsls	r2, r2, #28
 800835a:	d458      	bmi.n	800840e <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800835c:	691a      	ldr	r2, [r3, #16]
 800835e:	06d1      	lsls	r1, r2, #27
 8008360:	d502      	bpl.n	8008368 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	06d2      	lsls	r2, r2, #27
 8008366:	d43e      	bmi.n	80083e6 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	07d0      	lsls	r0, r2, #31
 800836c:	d503      	bpl.n	8008376 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	07d1      	lsls	r1, r2, #31
 8008372:	f100 808a 	bmi.w	800848a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	0612      	lsls	r2, r2, #24
 800837a:	d503      	bpl.n	8008384 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	0610      	lsls	r0, r2, #24
 8008380:	f100 808b 	bmi.w	800849a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	05d1      	lsls	r1, r2, #23
 8008388:	d503      	bpl.n	8008392 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	0612      	lsls	r2, r2, #24
 800838e:	f100 808c 	bmi.w	80084aa <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	0650      	lsls	r0, r2, #25
 8008396:	d503      	bpl.n	80083a0 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	0651      	lsls	r1, r2, #25
 800839c:	f100 808d 	bmi.w	80084ba <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	0692      	lsls	r2, r2, #26
 80083a4:	d503      	bpl.n	80083ae <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	0690      	lsls	r0, r2, #26
 80083aa:	f100 808e 	bmi.w	80084ca <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	02d1      	lsls	r1, r2, #11
 80083b2:	d503      	bpl.n	80083bc <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	02d2      	lsls	r2, r2, #11
 80083b8:	f100 808f 	bmi.w	80084da <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	0290      	lsls	r0, r2, #10
 80083c0:	d503      	bpl.n	80083ca <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	0291      	lsls	r1, r2, #10
 80083c6:	f100 8090 	bmi.w	80084ea <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	0252      	lsls	r2, r2, #9
 80083ce:	d503      	bpl.n	80083d8 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	0250      	lsls	r0, r2, #9
 80083d4:	f100 8091 	bmi.w	80084fa <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	0211      	lsls	r1, r2, #8
 80083dc:	d502      	bpl.n	80083e4 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	0212      	lsls	r2, r2, #8
 80083e2:	d44a      	bmi.n	800847a <HAL_TIM_IRQHandler+0x14a>
}
 80083e4:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083e6:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083ea:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083ec:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80083f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083f8:	f040 8090 	bne.w	800851c <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fc:	f7ff ff90 	bl	8008320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008400:	4620      	mov	r0, r4
 8008402:	f7ff ff91 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008406:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008408:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840a:	7722      	strb	r2, [r4, #28]
 800840c:	e7ac      	b.n	8008368 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800840e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008412:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008414:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008416:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800841c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800841e:	d17a      	bne.n	8008516 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008420:	f7ff ff7e 	bl	8008320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff ff7f 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800842c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842e:	7722      	strb	r2, [r4, #28]
 8008430:	e794      	b.n	800835c <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008432:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008436:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008438:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800843a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008442:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008444:	d164      	bne.n	8008510 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008446:	f7ff ff6b 	bl	8008320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800844a:	4620      	mov	r0, r4
 800844c:	f7ff ff6c 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008450:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008452:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008454:	7722      	strb	r2, [r4, #28]
 8008456:	e77b      	b.n	8008350 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008458:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800845c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800845e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008460:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	0799      	lsls	r1, r3, #30
 8008466:	d150      	bne.n	800850a <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008468:	f7ff ff5a 	bl	8008320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800846c:	4620      	mov	r0, r4
 800846e:	f7ff ff5b 	bl	8008328 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008472:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008474:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008476:	7722      	strb	r2, [r4, #28]
 8008478:	e764      	b.n	8008344 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800847a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800847e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008480:	611a      	str	r2, [r3, #16]
}
 8008482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008486:	f000 ba11 	b.w	80088ac <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800848a:	f06f 0201 	mvn.w	r2, #1
 800848e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008490:	4620      	mov	r0, r4
 8008492:	f7fb f9ad 	bl	80037f0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	e76d      	b.n	8008376 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800849a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800849e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 f9f9 	bl	8008898 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	e76c      	b.n	8008384 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 f9f3 	bl	800889c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	e76b      	b.n	8008392 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084be:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7ff ff33 	bl	800832c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	e76a      	b.n	80083a0 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084ca:	f06f 0220 	mvn.w	r2, #32
 80084ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 f9df 	bl	8008894 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	e769      	b.n	80083ae <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80084da:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80084de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 f9dd 	bl	80088a0 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	e768      	b.n	80083bc <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80084ea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80084ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 f9d7 	bl	80088a4 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	e767      	b.n	80083ca <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80084fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80084fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008500:	4620      	mov	r0, r4
 8008502:	f000 f9d1 	bl	80088a8 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	e766      	b.n	80083d8 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 800850a:	f7ff ff0b 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 800850e:	e7b0      	b.n	8008472 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8008510:	f7ff ff08 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8008514:	e79c      	b.n	8008450 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8008516:	f7ff ff05 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 800851a:	e786      	b.n	800842a <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 800851c:	f7ff ff02 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8008520:	e771      	b.n	8008406 <HAL_TIM_IRQHandler+0xd6>
 8008522:	bf00      	nop

08008524 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008524:	6a03      	ldr	r3, [r0, #32]
 8008526:	f023 0310 	bic.w	r3, r3, #16
 800852a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800852c:	6a03      	ldr	r3, [r0, #32]
{
 800852e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008530:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008532:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008534:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008536:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800853a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800853e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008542:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008544:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008548:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800854c:	4d1c      	ldr	r5, [pc, #112]	; (80085c0 <TIM_OC2_SetConfig+0x9c>)
 800854e:	42a8      	cmp	r0, r5
 8008550:	d017      	beq.n	8008582 <TIM_OC2_SetConfig+0x5e>
 8008552:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008556:	42a8      	cmp	r0, r5
 8008558:	d013      	beq.n	8008582 <TIM_OC2_SetConfig+0x5e>
 800855a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800855e:	42a8      	cmp	r0, r5
 8008560:	d025      	beq.n	80085ae <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	4d18      	ldr	r5, [pc, #96]	; (80085c4 <TIM_OC2_SetConfig+0xa0>)
 8008564:	42a8      	cmp	r0, r5
 8008566:	d013      	beq.n	8008590 <TIM_OC2_SetConfig+0x6c>
 8008568:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800856c:	42a8      	cmp	r0, r5
 800856e:	d00f      	beq.n	8008590 <TIM_OC2_SetConfig+0x6c>
 8008570:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008574:	42a8      	cmp	r0, r5
 8008576:	d00b      	beq.n	8008590 <TIM_OC2_SetConfig+0x6c>
 8008578:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800857c:	42a8      	cmp	r0, r5
 800857e:	d10f      	bne.n	80085a0 <TIM_OC2_SetConfig+0x7c>
 8008580:	e006      	b.n	8008590 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008582:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008588:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800858c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008590:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008594:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008598:	ea46 0c05 	orr.w	ip, r6, r5
 800859c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80085a0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80085a2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80085a4:	6182      	str	r2, [r0, #24]
}
 80085a6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80085a8:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80085aa:	6203      	str	r3, [r0, #32]
}
 80085ac:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80085b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80085b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085bc:	e7d1      	b.n	8008562 <TIM_OC2_SetConfig+0x3e>
 80085be:	bf00      	nop
 80085c0:	40012c00 	.word	0x40012c00
 80085c4:	40014000 	.word	0x40014000

080085c8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80085c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	f000 80ff 	beq.w	80087d0 <HAL_TIM_PWM_ConfigChannel+0x208>
 80085d2:	2301      	movs	r3, #1
{
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80085da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80085de:	2a14      	cmp	r2, #20
 80085e0:	d80c      	bhi.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x34>
 80085e2:	e8df f002 	tbb	[pc, r2]
 80085e6:	0b59      	.short	0x0b59
 80085e8:	0b6e0b0b 	.word	0x0b6e0b0b
 80085ec:	0b840b0b 	.word	0x0b840b0b
 80085f0:	0b990b0b 	.word	0x0b990b0b
 80085f4:	0baf0b0b 	.word	0x0baf0b0b
 80085f8:	0b0b      	.short	0x0b0b
 80085fa:	11          	.byte	0x11
 80085fb:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80085fc:	2300      	movs	r3, #0
  switch (Channel)
 80085fe:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8008600:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008604:	4610      	mov	r0, r2
 8008606:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008608:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800860a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800860c:	6a1a      	ldr	r2, [r3, #32]
 800860e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008612:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008614:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008616:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008618:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800861a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800861e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008622:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008626:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008628:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800862c:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008630:	4e69      	ldr	r6, [pc, #420]	; (80087d8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008632:	42b3      	cmp	r3, r6
 8008634:	d013      	beq.n	800865e <HAL_TIM_PWM_ConfigChannel+0x96>
 8008636:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800863a:	42b3      	cmp	r3, r6
 800863c:	d00f      	beq.n	800865e <HAL_TIM_PWM_ConfigChannel+0x96>
 800863e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008642:	42b3      	cmp	r3, r6
 8008644:	d00b      	beq.n	800865e <HAL_TIM_PWM_ConfigChannel+0x96>
 8008646:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800864a:	42b3      	cmp	r3, r6
 800864c:	d007      	beq.n	800865e <HAL_TIM_PWM_ConfigChannel+0x96>
 800864e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008652:	42b3      	cmp	r3, r6
 8008654:	d003      	beq.n	800865e <HAL_TIM_PWM_ConfigChannel+0x96>
 8008656:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800865a:	42b3      	cmp	r3, r6
 800865c:	d104      	bne.n	8008668 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800865e:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008660:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008664:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008668:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800866a:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800866c:	6869      	ldr	r1, [r5, #4]
 800866e:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008670:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008674:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800867c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800867e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008682:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008684:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008686:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800868a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800868c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800868e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008690:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008694:	4610      	mov	r0, r2
 8008696:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008698:	6800      	ldr	r0, [r0, #0]
 800869a:	f7ff fb37 	bl	8007d0c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800869e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086a0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086a2:	f043 0308 	orr.w	r3, r3, #8
 80086a6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086a8:	6983      	ldr	r3, [r0, #24]
 80086aa:	f023 0304 	bic.w	r3, r3, #4
 80086ae:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086b0:	6983      	ldr	r3, [r0, #24]
 80086b2:	430b      	orrs	r3, r1
 80086b4:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80086b6:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80086b8:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80086ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80086be:	4610      	mov	r0, r2
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086c2:	6800      	ldr	r0, [r0, #0]
 80086c4:	f7ff ff2e 	bl	8008524 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086c8:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086ca:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80086d0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086d2:	6983      	ldr	r3, [r0, #24]
 80086d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086d8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086da:	6983      	ldr	r3, [r0, #24]
 80086dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80086e0:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80086e2:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80086e4:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80086e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80086ea:	4610      	mov	r0, r2
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ee:	6800      	ldr	r0, [r0, #0]
 80086f0:	f7ff fb4c 	bl	8007d8c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086f4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086f6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086f8:	f043 0308 	orr.w	r3, r3, #8
 80086fc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086fe:	69c3      	ldr	r3, [r0, #28]
 8008700:	f023 0304 	bic.w	r3, r3, #4
 8008704:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008706:	69c3      	ldr	r3, [r0, #28]
 8008708:	430b      	orrs	r3, r1
 800870a:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800870c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008710:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008714:	4610      	mov	r0, r2
 8008716:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008718:	6800      	ldr	r0, [r0, #0]
 800871a:	f7ff fb87 	bl	8007e2c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800871e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008720:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008726:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008728:	69c3      	ldr	r3, [r0, #28]
 800872a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800872e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008730:	69c3      	ldr	r3, [r0, #28]
 8008732:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008736:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008738:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800873a:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800873c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008740:	4610      	mov	r0, r2
 8008742:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008744:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008746:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008748:	6a1a      	ldr	r2, [r3, #32]
 800874a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800874e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008750:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008752:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008754:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008756:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800875a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800875e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008760:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008762:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008766:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800876a:	4e1b      	ldr	r6, [pc, #108]	; (80087d8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800876c:	42b3      	cmp	r3, r6
 800876e:	d013      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008770:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008774:	42b3      	cmp	r3, r6
 8008776:	d00f      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008778:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800877c:	42b3      	cmp	r3, r6
 800877e:	d00b      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008780:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008784:	42b3      	cmp	r3, r6
 8008786:	d007      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008788:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800878c:	42b3      	cmp	r3, r6
 800878e:	d003      	beq.n	8008798 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008790:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008794:	42b3      	cmp	r3, r6
 8008796:	d104      	bne.n	80087a2 <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008798:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800879a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800879e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80087a2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80087a4:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80087a6:	6869      	ldr	r1, [r5, #4]
 80087a8:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80087aa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087ae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087b0:	f042 0208 	orr.w	r2, r2, #8
 80087b4:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087b6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80087b8:	f021 0104 	bic.w	r1, r1, #4
 80087bc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80087c0:	4301      	orrs	r1, r0
 80087c2:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80087c4:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80087c6:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80087c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80087cc:	4610      	mov	r0, r2
 80087ce:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80087d0:	2202      	movs	r2, #2
}
 80087d2:	4610      	mov	r0, r2
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	40012c00 	.word	0x40012c00

080087dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d051      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 80087e4:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087e8:	4d28      	ldr	r5, [pc, #160]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80087ea:	2302      	movs	r3, #2
 80087ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f0:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80087f2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80087f4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f6:	d03b      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80087f8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80087fc:	42aa      	cmp	r2, r5
 80087fe:	d032      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008800:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008804:	42aa      	cmp	r2, r5
 8008806:	d02e      	beq.n	8008866 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008808:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800880a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800880e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008812:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008814:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008818:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881a:	d016      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800881c:	4b1c      	ldr	r3, [pc, #112]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800881e:	429a      	cmp	r2, r3
 8008820:	d013      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008826:	429a      	cmp	r2, r3
 8008828:	d00f      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800882a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800882e:	429a      	cmp	r2, r3
 8008830:	d00b      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008832:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008836:	429a      	cmp	r2, r3
 8008838:	d007      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800883a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800883e:	429a      	cmp	r2, r3
 8008840:	d003      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008846:	429a      	cmp	r2, r3
 8008848:	d104      	bne.n	8008854 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800884c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008850:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008852:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008854:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008856:	2201      	movs	r2, #1
 8008858:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800885c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008860:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008862:	4618      	mov	r0, r3
}
 8008864:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008866:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008868:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800886c:	432b      	orrs	r3, r5
 800886e:	e7cb      	b.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8008870:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008872:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008876:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008878:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800887c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800887e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008882:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008884:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008886:	e7e0      	b.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008888:	2002      	movs	r0, #2
}
 800888a:	4770      	bx	lr
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40000400 	.word	0x40000400

08008894 <HAL_TIMEx_CommutCallback>:
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop

08008898 <HAL_TIMEx_BreakCallback>:
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop

0800889c <HAL_TIMEx_Break2Callback>:
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop

080088a0 <HAL_TIMEx_EncoderIndexCallback>:
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop

080088a4 <HAL_TIMEx_DirectionChangeCallback>:
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <HAL_TIMEx_IndexErrorCallback>:
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop

080088ac <HAL_TIMEx_TransitionErrorCallback>:
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop

080088b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088b2:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 80088b6:	2e20      	cmp	r6, #32
 80088b8:	d141      	bne.n	800893e <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ba:	2900      	cmp	r1, #0
 80088bc:	d03d      	beq.n	800893a <HAL_UART_Transmit_DMA+0x8a>
 80088be:	2a00      	cmp	r2, #0
 80088c0:	d03b      	beq.n	800893a <HAL_UART_Transmit_DMA+0x8a>
 80088c2:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80088c4:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 80088c8:	2801      	cmp	r0, #1
 80088ca:	d038      	beq.n	800893e <HAL_UART_Transmit_DMA+0x8e>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 80088cc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 80088ce:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d2:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80088d4:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088d6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 80088dc:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 80088de:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 80088e2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80088ea:	b190      	cbz	r0, 8008912 <HAL_UART_Transmit_DMA+0x62>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80088ec:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008954 <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80088f0:	6387      	str	r7, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80088f2:	4613      	mov	r3, r2
 80088f4:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80088f6:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80088fa:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8008958 <HAL_UART_Transmit_DMA+0xa8>
 80088fe:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008902:	f8df c058 	ldr.w	ip, [pc, #88]	; 800895c <HAL_UART_Transmit_DMA+0xac>
 8008906:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800890a:	3228      	adds	r2, #40	; 0x28
 800890c:	f7fd faf4 	bl	8005ef8 <HAL_DMA_Start_IT>
 8008910:	b9b8      	cbnz	r0, 8008942 <HAL_UART_Transmit_DMA+0x92>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 8008916:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008918:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800891a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	f102 0308 	add.w	r3, r2, #8
 8008922:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	f102 0008 	add.w	r0, r2, #8
 800892e:	e840 3100 	strex	r1, r3, [r0]
 8008932:	2900      	cmp	r1, #0
 8008934:	d1f3      	bne.n	800891e <HAL_UART_Transmit_DMA+0x6e>

    return HAL_OK;
 8008936:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800893a:	2001      	movs	r0, #1
}
 800893c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800893e:	2002      	movs	r0, #2
}
 8008940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008942:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8008944:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008948:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 800894c:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 800894e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8008952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008954:	08008961 	.word	0x08008961
 8008958:	080089a9 	.word	0x080089a9
 800895c:	080089bd 	.word	0x080089bd

08008960 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008960:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008962:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008964:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f013 0320 	ands.w	r3, r3, #32
 800896c:	d117      	bne.n	800899e <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800896e:	6802      	ldr	r2, [r0, #0]
 8008970:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	f102 0308 	add.w	r3, r2, #8
 8008978:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800897c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	f102 0008 	add.w	r0, r2, #8
 8008984:	e840 3100 	strex	r1, r3, [r0]
 8008988:	2900      	cmp	r1, #0
 800898a:	d1f3      	bne.n	8008974 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	e842 3100 	strex	r1, r3, [r2]
 8008998:	2900      	cmp	r1, #0
 800899a:	d1f7      	bne.n	800898c <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800899c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800899e:	f7fb faef 	bl	8003f80 <HAL_UART_TxCpltCallback>
}
 80089a2:	bd08      	pop	{r3, pc}

080089a4 <HAL_UART_TxHalfCpltCallback>:
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop

080089a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089a8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80089aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80089ac:	f7ff fffa 	bl	80089a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b0:	bd08      	pop	{r3, pc}
 80089b2:	bf00      	nop

080089b4 <HAL_UART_RxHalfCpltCallback>:
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop

080089b8 <HAL_UART_ErrorCallback>:
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop

080089bc <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089bc:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80089be:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80089c0:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 80089c4:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80089c6:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	0612      	lsls	r2, r2, #24
 80089ce:	d501      	bpl.n	80089d4 <UART_DMAError+0x18>
 80089d0:	2921      	cmp	r1, #33	; 0x21
 80089d2:	d00d      	beq.n	80089f0 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	0652      	lsls	r2, r2, #25
 80089d8:	d501      	bpl.n	80089de <UART_DMAError+0x22>
 80089da:	2c22      	cmp	r4, #34	; 0x22
 80089dc:	d023      	beq.n	8008a26 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089de:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80089e2:	f043 0310 	orr.w	r3, r3, #16
 80089e6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ea:	f7ff ffe5 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ee:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80089fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	e843 2100 	strex	r1, r2, [r3]
 8008a02:	2900      	cmp	r1, #0
 8008a04:	d1f7      	bne.n	80089f6 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	f103 0208 	add.w	r2, r3, #8
 8008a0a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a0e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	f103 0c08 	add.w	ip, r3, #8
 8008a16:	e84c 2100 	strex	r1, r2, [ip]
 8008a1a:	2900      	cmp	r1, #0
 8008a1c:	d1f3      	bne.n	8008a06 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8008a24:	e7d6      	b.n	80089d4 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	e843 2100 	strex	r1, r2, [r3]
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	d1f7      	bne.n	8008a2c <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a3c:	4c13      	ldr	r4, [pc, #76]	; (8008a8c <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	f103 0208 	add.w	r2, r3, #8
 8008a42:	e852 2f00 	ldrex	r2, [r2]
 8008a46:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	f103 0c08 	add.w	ip, r3, #8
 8008a4c:	e84c 2100 	strex	r1, r2, [ip]
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d1f4      	bne.n	8008a3e <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a54:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008a56:	2a01      	cmp	r2, #1
 8008a58:	d006      	beq.n	8008a68 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a5a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8008a62:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a64:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8008a66:	e7ba      	b.n	80089de <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a6c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	e843 2100 	strex	r1, r2, [r3]
 8008a74:	2900      	cmp	r1, #0
 8008a76:	d0f0      	beq.n	8008a5a <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	e853 2f00 	ldrex	r2, [r3]
 8008a7c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	e843 2100 	strex	r1, r2, [r3]
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d1ef      	bne.n	8008a68 <UART_DMAError+0xac>
 8008a88:	e7e7      	b.n	8008a5a <UART_DMAError+0x9e>
 8008a8a:	bf00      	nop
 8008a8c:	effffffe 	.word	0xeffffffe

08008a90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a90:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a92:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a9a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a9e:	f7ff ff8b 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aa2:	bd08      	pop	{r3, pc}

08008aa4 <HAL_UARTEx_RxEventCallback>:
}
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop

08008aa8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008aa8:	6803      	ldr	r3, [r0, #0]
 8008aaa:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008aac:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008aae:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8008ab2:	ea12 0f0c 	tst.w	r2, ip
{
 8008ab6:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ab8:	689d      	ldr	r5, [r3, #8]
{
 8008aba:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008abc:	f000 80eb 	beq.w	8008c96 <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ac0:	489a      	ldr	r0, [pc, #616]	; (8008d2c <HAL_UART_IRQHandler+0x284>)
 8008ac2:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ac6:	489a      	ldr	r0, [pc, #616]	; (8008d30 <HAL_UART_IRQHandler+0x288>)
 8008ac8:	4008      	ands	r0, r1
 8008aca:	ea50 000c 	orrs.w	r0, r0, ip
 8008ace:	d155      	bne.n	8008b7c <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008ad2:	2801      	cmp	r0, #1
 8008ad4:	d022      	beq.n	8008b1c <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ad6:	02d6      	lsls	r6, r2, #11
 8008ad8:	d502      	bpl.n	8008ae0 <HAL_UART_IRQHandler+0x38>
 8008ada:	0268      	lsls	r0, r5, #9
 8008adc:	f100 8104 	bmi.w	8008ce8 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ae0:	0616      	lsls	r6, r2, #24
 8008ae2:	d506      	bpl.n	8008af2 <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ae4:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ae8:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008aec:	4328      	orrs	r0, r5
 8008aee:	f040 80f3 	bne.w	8008cd8 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008af2:	0650      	lsls	r0, r2, #25
 8008af4:	d534      	bpl.n	8008b60 <HAL_UART_IRQHandler+0xb8>
 8008af6:	064e      	lsls	r6, r1, #25
 8008af8:	d532      	bpl.n	8008b60 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	e843 2100 	strex	r1, r2, [r3]
 8008b06:	2900      	cmp	r1, #0
 8008b08:	d1f7      	bne.n	8008afa <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b0a:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b0c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008b0e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8008b12:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b14:	4620      	mov	r0, r4
 8008b16:	f7fb fa33 	bl	8003f80 <HAL_UART_TxCpltCallback>
}
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b1c:	06d6      	lsls	r6, r2, #27
 8008b1e:	d5da      	bpl.n	8008ad6 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b20:	06c8      	lsls	r0, r1, #27
 8008b22:	d5d8      	bpl.n	8008ad6 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b24:	2210      	movs	r2, #16
 8008b26:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	0651      	lsls	r1, r2, #25
 8008b2c:	f140 8106 	bpl.w	8008d3c <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b30:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008b32:	6801      	ldr	r1, [r0, #0]
 8008b34:	684a      	ldr	r2, [r1, #4]
 8008b36:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d0ee      	beq.n	8008b1a <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b3c:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008b40:	4295      	cmp	r5, r2
 8008b42:	d9ea      	bls.n	8008b1a <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8008b44:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b48:	680a      	ldr	r2, [r1, #0]
 8008b4a:	0692      	lsls	r2, r2, #26
 8008b4c:	f140 812b 	bpl.w	8008da6 <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b50:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008b54:	1ae9      	subs	r1, r5, r3
 8008b56:	4620      	mov	r0, r4
 8008b58:	b289      	uxth	r1, r1
 8008b5a:	f7ff ffa3 	bl	8008aa4 <HAL_UARTEx_RxEventCallback>
}
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b60:	0215      	lsls	r5, r2, #8
 8008b62:	d502      	bpl.n	8008b6a <HAL_UART_IRQHandler+0xc2>
 8008b64:	0048      	lsls	r0, r1, #1
 8008b66:	f100 80dc 	bmi.w	8008d22 <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b6a:	01d3      	lsls	r3, r2, #7
 8008b6c:	d5d5      	bpl.n	8008b1a <HAL_UART_IRQHandler+0x72>
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	dad3      	bge.n	8008b1a <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b72:	4620      	mov	r0, r4
}
 8008b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b78:	f000 bdb4 	b.w	80096e4 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b7c:	07d0      	lsls	r0, r2, #31
 8008b7e:	d509      	bpl.n	8008b94 <HAL_UART_IRQHandler+0xec>
 8008b80:	05ce      	lsls	r6, r1, #23
 8008b82:	d507      	bpl.n	8008b94 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b84:	2001      	movs	r0, #1
 8008b86:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b88:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008b8c:	f040 0001 	orr.w	r0, r0, #1
 8008b90:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b94:	0790      	lsls	r0, r2, #30
 8008b96:	f140 8090 	bpl.w	8008cba <HAL_UART_IRQHandler+0x212>
 8008b9a:	07ee      	lsls	r6, r5, #31
 8008b9c:	d50a      	bpl.n	8008bb4 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b9e:	2002      	movs	r0, #2
 8008ba0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ba2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008ba6:	f040 0004 	orr.w	r0, r0, #4
 8008baa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bae:	0750      	lsls	r0, r2, #29
 8008bb0:	f100 8089 	bmi.w	8008cc6 <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bb4:	0716      	lsls	r6, r2, #28
 8008bb6:	d50c      	bpl.n	8008bd2 <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bb8:	f001 0020 	and.w	r0, r1, #32
 8008bbc:	ea50 000c 	orrs.w	r0, r0, ip
 8008bc0:	d007      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bc2:	2008      	movs	r0, #8
 8008bc4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bc6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008bca:	f040 0008 	orr.w	r0, r0, #8
 8008bce:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bd2:	0510      	lsls	r0, r2, #20
 8008bd4:	d50a      	bpl.n	8008bec <HAL_UART_IRQHandler+0x144>
 8008bd6:	014e      	lsls	r6, r1, #5
 8008bd8:	d508      	bpl.n	8008bec <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008bde:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008be0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008be4:	f040 0020 	orr.w	r0, r0, #32
 8008be8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bec:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d092      	beq.n	8008b1a <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bf4:	0690      	lsls	r0, r2, #26
 8008bf6:	d50a      	bpl.n	8008c0e <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bf8:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bfc:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8008c00:	4329      	orrs	r1, r5
 8008c02:	d004      	beq.n	8008c0e <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 8008c04:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8008c06:	b112      	cbz	r2, 8008c0e <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c0c:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8008c0e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c12:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c14:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c18:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008c1c:	ea52 0501 	orrs.w	r5, r2, r1
 8008c20:	f000 80f2 	beq.w	8008e08 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	e843 2100 	strex	r1, r2, [r3]
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d1f7      	bne.n	8008c24 <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c34:	483f      	ldr	r0, [pc, #252]	; (8008d34 <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	f103 0208 	add.w	r2, r3, #8
 8008c3a:	e852 2f00 	ldrex	r2, [r2]
 8008c3e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	f103 0508 	add.w	r5, r3, #8
 8008c44:	e845 2100 	strex	r1, r2, [r5]
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	d1f4      	bne.n	8008c36 <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c4c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008c4e:	2a01      	cmp	r2, #1
 8008c50:	d052      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c52:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008c54:	2120      	movs	r1, #32
 8008c56:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5a:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c5c:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8008c5e:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c60:	064a      	lsls	r2, r1, #25
 8008c62:	d55a      	bpl.n	8008d1a <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	f103 0208 	add.w	r2, r3, #8
 8008c68:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	f103 0008 	add.w	r0, r3, #8
 8008c74:	e840 2100 	strex	r1, r2, [r0]
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d1f3      	bne.n	8008c64 <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 8008c7c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d04b      	beq.n	8008d1a <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c82:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <HAL_UART_IRQHandler+0x290>)
 8008c84:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c86:	f7fd f9cb 	bl	8006020 <HAL_DMA_Abort_IT>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f af45 	beq.w	8008b1a <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c90:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008c92:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c94:	e00e      	b.n	8008cb4 <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c96:	0696      	lsls	r6, r2, #26
 8008c98:	f57f af1a 	bpl.w	8008ad0 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c9c:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ca0:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 8008ca4:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8008ca8:	f43f af12 	beq.w	8008ad0 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8008cac:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f43f af33 	beq.w	8008b1a <HAL_UART_IRQHandler+0x72>
}
 8008cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cb8:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cba:	0756      	lsls	r6, r2, #29
 8008cbc:	f57f af7a 	bpl.w	8008bb4 <HAL_UART_IRQHandler+0x10c>
 8008cc0:	07e8      	lsls	r0, r5, #31
 8008cc2:	f57f af77 	bpl.w	8008bb4 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cc6:	2004      	movs	r0, #4
 8008cc8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008cce:	f040 0002 	orr.w	r0, r0, #2
 8008cd2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8008cd6:	e76d      	b.n	8008bb4 <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 8008cd8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f43f af1d 	beq.w	8008b1a <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8008ce0:	4620      	mov	r0, r4
}
 8008ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8008ce6:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ce8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008cec:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cee:	621a      	str	r2, [r3, #32]
}
 8008cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008cf4:	f000 bcf4 	b.w	80096e0 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	e843 2100 	strex	r1, r2, [r3]
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d0a4      	beq.n	8008c52 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	e853 2f00 	ldrex	r2, [r3]
 8008d0c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	e843 2100 	strex	r1, r2, [r3]
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d1ef      	bne.n	8008cf8 <HAL_UART_IRQHandler+0x250>
 8008d18:	e79b      	b.n	8008c52 <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff fe4c 	bl	80089b8 <HAL_UART_ErrorCallback>
}
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d22:	4620      	mov	r0, r4
}
 8008d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d28:	f000 bcde 	b.w	80096e8 <HAL_UARTEx_TxFifoEmptyCallback>
 8008d2c:	10000001 	.word	0x10000001
 8008d30:	04000120 	.word	0x04000120
 8008d34:	effffffe 	.word	0xeffffffe
 8008d38:	08008a91 	.word	0x08008a91
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d3c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8008d40:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d44:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8008d48:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d4a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008d4c:	2a00      	cmp	r2, #0
 8008d4e:	f43f aee4 	beq.w	8008b1a <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d52:	1a41      	subs	r1, r0, r1
 8008d54:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008d56:	2900      	cmp	r1, #0
 8008d58:	f43f aedf 	beq.w	8008b1a <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d64:	e843 2000 	strex	r0, r2, [r3]
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d1f7      	bne.n	8008d5c <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d6c:	4d29      	ldr	r5, [pc, #164]	; (8008e14 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	f103 0208 	add.w	r2, r3, #8
 8008d72:	e852 2f00 	ldrex	r2, [r2]
 8008d76:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	f103 0c08 	add.w	ip, r3, #8
 8008d7c:	e84c 2000 	strex	r0, r2, [ip]
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d1f4      	bne.n	8008d6e <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8008d8a:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8c:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d92:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	e843 2000 	strex	r0, r2, [r3]
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d1f7      	bne.n	8008d8e <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f7ff fe80 	bl	8008aa4 <HAL_UARTEx_RxEventCallback>
}
 8008da4:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	e843 2100 	strex	r1, r2, [r3]
 8008db2:	2900      	cmp	r1, #0
 8008db4:	d1f7      	bne.n	8008da6 <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	f103 0208 	add.w	r2, r3, #8
 8008dba:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dbe:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	f103 0508 	add.w	r5, r3, #8
 8008dc6:	e845 2100 	strex	r1, r2, [r5]
 8008dca:	2900      	cmp	r1, #0
 8008dcc:	d1f3      	bne.n	8008db6 <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	f103 0208 	add.w	r2, r3, #8
 8008dd2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	f103 0508 	add.w	r5, r3, #8
 8008dde:	e845 2100 	strex	r1, r2, [r5]
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d1f3      	bne.n	8008dce <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 8008de6:	2220      	movs	r2, #32
 8008de8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	e843 2100 	strex	r1, r2, [r3]
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	d1f7      	bne.n	8008dee <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dfe:	f7fd f8d5 	bl	8005fac <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e02:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008e06:	e6a3      	b.n	8008b50 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7ff fdd5 	bl	80089b8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	effffffe 	.word	0xeffffffe

08008e18 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e18:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8008e1a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d002      	beq.n	8008e28 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e22:	f7ff fdc7 	bl	80089b4 <HAL_UART_RxHalfCpltCallback>
}
 8008e26:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e28:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8008e2c:	0849      	lsrs	r1, r1, #1
 8008e2e:	f7ff fe39 	bl	8008aa4 <HAL_UARTEx_RxEventCallback>
}
 8008e32:	bd08      	pop	{r3, pc}

08008e34 <UART_DMAReceiveCplt>:
{
 8008e34:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008e36:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e38:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	f012 0220 	ands.w	r2, r2, #32
 8008e40:	d128      	bne.n	8008e94 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8008e42:	6803      	ldr	r3, [r0, #0]
 8008e44:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	e843 2100 	strex	r1, r2, [r3]
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d1f7      	bne.n	8008e48 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	f103 0208 	add.w	r2, r3, #8
 8008e5c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e60:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	f103 0c08 	add.w	ip, r3, #8
 8008e68:	e84c 2100 	strex	r1, r2, [ip]
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	d1f3      	bne.n	8008e58 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	f103 0208 	add.w	r2, r3, #8
 8008e74:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	f103 0c08 	add.w	ip, r3, #8
 8008e80:	e84c 2100 	strex	r1, r2, [ip]
 8008e84:	2900      	cmp	r1, #0
 8008e86:	d1f3      	bne.n	8008e70 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008e90:	2a01      	cmp	r2, #1
 8008e92:	d005      	beq.n	8008ea0 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d013      	beq.n	8008ec2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008e9a:	f7fa ff45 	bl	8003d28 <HAL_UART_RxCpltCallback>
}
 8008e9e:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	e843 2100 	strex	r1, r2, [r3]
 8008eac:	2900      	cmp	r1, #0
 8008eae:	d0f1      	beq.n	8008e94 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	e853 2f00 	ldrex	r2, [r3]
 8008eb4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	e843 2100 	strex	r1, r2, [r3]
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d1ef      	bne.n	8008ea0 <UART_DMAReceiveCplt+0x6c>
 8008ec0:	e7e8      	b.n	8008e94 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ec2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8008ec6:	f7ff fded 	bl	8008aa4 <HAL_UARTEx_RxEventCallback>
}
 8008eca:	bd08      	pop	{r3, pc}

08008ecc <UART_SetConfig>:
{
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ed0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ed2:	6882      	ldr	r2, [r0, #8]
 8008ed4:	6900      	ldr	r0, [r0, #16]
 8008ed6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ed8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eda:	4302      	orrs	r2, r0
 8008edc:	430a      	orrs	r2, r1
 8008ede:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ee0:	49b2      	ldr	r1, [pc, #712]	; (80091ac <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ee2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ee4:	4029      	ands	r1, r5
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	68e1      	ldr	r1, [r4, #12]
 8008eee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008ef2:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ef4:	49ae      	ldr	r1, [pc, #696]	; (80091b0 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ef6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ef8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008efa:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008efc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008efe:	f000 8081 	beq.w	8009004 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8008f02:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f04:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008f08:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8008f0c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f16:	f022 020f 	bic.w	r2, r2, #15
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f1e:	4aa5      	ldr	r2, [pc, #660]	; (80091b4 <UART_SetConfig+0x2e8>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d027      	beq.n	8008f74 <UART_SetConfig+0xa8>
 8008f24:	4aa4      	ldr	r2, [pc, #656]	; (80091b8 <UART_SetConfig+0x2ec>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d04b      	beq.n	8008fc2 <UART_SetConfig+0xf6>
 8008f2a:	4aa4      	ldr	r2, [pc, #656]	; (80091bc <UART_SetConfig+0x2f0>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	f000 8111 	beq.w	8009154 <UART_SetConfig+0x288>
 8008f32:	4aa3      	ldr	r2, [pc, #652]	; (80091c0 <UART_SetConfig+0x2f4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	f000 80b9 	beq.w	80090ac <UART_SetConfig+0x1e0>
 8008f3a:	4aa2      	ldr	r2, [pc, #648]	; (80091c4 <UART_SetConfig+0x2f8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d111      	bne.n	8008f64 <UART_SetConfig+0x98>
 8008f40:	4ba1      	ldr	r3, [pc, #644]	; (80091c8 <UART_SetConfig+0x2fc>)
 8008f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f4e:	f000 8126 	beq.w	800919e <UART_SetConfig+0x2d2>
 8008f52:	f200 80d5 	bhi.w	8009100 <UART_SetConfig+0x234>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 80d9 	beq.w	800910e <UART_SetConfig+0x242>
 8008f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f60:	f000 80b0 	beq.w	80090c4 <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 8008f64:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8008f66:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008f68:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8008f6c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008f70:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f74:	4b94      	ldr	r3, [pc, #592]	; (80091c8 <UART_SetConfig+0x2fc>)
 8008f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	f240 808d 	bls.w	80090a0 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008f8a:	f000 8103 	beq.w	8009194 <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f8e:	f7fe fa0b 	bl	80073a8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f000 80dc 	beq.w	8009150 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	4b8b      	ldr	r3, [pc, #556]	; (80091cc <UART_SetConfig+0x300>)
 8008f9e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008fa2:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fa6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008faa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008fae:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb2:	f1a3 0210 	sub.w	r2, r3, #16
 8008fb6:	428a      	cmp	r2, r1
 8008fb8:	d8d4      	bhi.n	8008f64 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	60d3      	str	r3, [r2, #12]
 8008fc0:	e7d1      	b.n	8008f66 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fc2:	4b81      	ldr	r3, [pc, #516]	; (80091c8 <UART_SetConfig+0x2fc>)
 8008fc4:	4a82      	ldr	r2, [pc, #520]	; (80091d0 <UART_SetConfig+0x304>)
 8008fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fca:	f003 030c 	and.w	r3, r3, #12
 8008fce:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008fd4:	d07c      	beq.n	80090d0 <UART_SetConfig+0x204>
    switch (clocksource)
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d8c4      	bhi.n	8008f64 <UART_SetConfig+0x98>
 8008fda:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <UART_SetConfig+0x114>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08009109 	.word	0x08009109
 8008fe4:	08008f8f 	.word	0x08008f8f
 8008fe8:	0800918b 	.word	0x0800918b
 8008fec:	08008f65 	.word	0x08008f65
 8008ff0:	080090cb 	.word	0x080090cb
 8008ff4:	08008f65 	.word	0x08008f65
 8008ff8:	08008f65 	.word	0x08008f65
 8008ffc:	08008f65 	.word	0x08008f65
 8009000:	0800917b 	.word	0x0800917b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009004:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009008:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800900c:	4311      	orrs	r1, r2
 800900e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009012:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009014:	486c      	ldr	r0, [pc, #432]	; (80091c8 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009016:	f022 020f 	bic.w	r2, r2, #15
 800901a:	430a      	orrs	r2, r1
 800901c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800901e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009022:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800902a:	f000 80ac 	beq.w	8009186 <UART_SetConfig+0x2ba>
 800902e:	d80b      	bhi.n	8009048 <UART_SetConfig+0x17c>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d038      	beq.n	80090a6 <UART_SetConfig+0x1da>
 8009034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009038:	d194      	bne.n	8008f64 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 800903a:	f7fe f867 	bl	800710c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800903e:	2800      	cmp	r0, #0
 8009040:	f000 8086 	beq.w	8009150 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009044:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009046:	e004      	b.n	8009052 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800904c:	d18a      	bne.n	8008f64 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 800904e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009052:	4b5e      	ldr	r3, [pc, #376]	; (80091cc <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009054:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009056:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800905a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800905e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009062:	4299      	cmp	r1, r3
 8009064:	f63f af7e 	bhi.w	8008f64 <UART_SetConfig+0x98>
 8009068:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800906c:	f63f af7a 	bhi.w	8008f64 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009070:	2300      	movs	r3, #0
 8009072:	4619      	mov	r1, r3
 8009074:	f7f7 fe30 	bl	8000cd8 <__aeabi_uldivmod>
 8009078:	086a      	lsrs	r2, r5, #1
 800907a:	0203      	lsls	r3, r0, #8
 800907c:	0209      	lsls	r1, r1, #8
 800907e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009082:	1898      	adds	r0, r3, r2
 8009084:	f141 0100 	adc.w	r1, r1, #0
 8009088:	462a      	mov	r2, r5
 800908a:	2300      	movs	r3, #0
 800908c:	f7f7 fe24 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009090:	4a50      	ldr	r2, [pc, #320]	; (80091d4 <UART_SetConfig+0x308>)
 8009092:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8009096:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009098:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800909a:	f63f af63 	bhi.w	8008f64 <UART_SetConfig+0x98>
 800909e:	e78c      	b.n	8008fba <UART_SetConfig+0xee>
 80090a0:	4a4d      	ldr	r2, [pc, #308]	; (80091d8 <UART_SetConfig+0x30c>)
 80090a2:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80090a4:	e794      	b.n	8008fd0 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 80090a6:	f7fe f96d 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
        break;
 80090aa:	e7c8      	b.n	800903e <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ac:	4b46      	ldr	r3, [pc, #280]	; (80091c8 <UART_SetConfig+0x2fc>)
 80090ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80090b6:	2b80      	cmp	r3, #128	; 0x80
 80090b8:	d071      	beq.n	800919e <UART_SetConfig+0x2d2>
 80090ba:	d861      	bhi.n	8009180 <UART_SetConfig+0x2b4>
 80090bc:	b33b      	cbz	r3, 800910e <UART_SetConfig+0x242>
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	f47f af50 	bne.w	8008f64 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80090c8:	d061      	beq.n	800918e <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 80090ca:	f7fe f81f 	bl	800710c <HAL_RCC_GetSysClockFreq>
        break;
 80090ce:	e760      	b.n	8008f92 <UART_SetConfig+0xc6>
    switch (clocksource)
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	f63f af47 	bhi.w	8008f64 <UART_SetConfig+0x98>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <UART_SetConfig+0x210>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	08009115 	.word	0x08009115
 80090e0:	08009195 	.word	0x08009195
 80090e4:	0800919b 	.word	0x0800919b
 80090e8:	08008f65 	.word	0x08008f65
 80090ec:	0800918f 	.word	0x0800918f
 80090f0:	08008f65 	.word	0x08008f65
 80090f4:	08008f65 	.word	0x08008f65
 80090f8:	08008f65 	.word	0x08008f65
 80090fc:	0800911d 	.word	0x0800911d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009104:	d036      	beq.n	8009174 <UART_SetConfig+0x2a8>
 8009106:	e72d      	b.n	8008f64 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009108:	f7fe f93c 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
        break;
 800910c:	e741      	b.n	8008f92 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800910e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009112:	d1f9      	bne.n	8009108 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009114:	f7fe f936 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009118:	b1d0      	cbz	r0, 8009150 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800911a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800911c:	6862      	ldr	r2, [r4, #4]
 800911e:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <UART_SetConfig+0x300>)
 8009120:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8009124:	fbb0 f0f1 	udiv	r0, r0, r1
 8009128:	0853      	lsrs	r3, r2, #1
 800912a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800912e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009132:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009136:	f1a3 0210 	sub.w	r2, r3, #16
 800913a:	428a      	cmp	r2, r1
 800913c:	f63f af12 	bhi.w	8008f64 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009140:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009144:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009146:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009148:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800914c:	4313      	orrs	r3, r2
 800914e:	60cb      	str	r3, [r1, #12]
 8009150:	2000      	movs	r0, #0
 8009152:	e708      	b.n	8008f66 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009154:	4b1c      	ldr	r3, [pc, #112]	; (80091c8 <UART_SetConfig+0x2fc>)
 8009156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800915e:	2b20      	cmp	r3, #32
 8009160:	d01d      	beq.n	800919e <UART_SetConfig+0x2d2>
 8009162:	d804      	bhi.n	800916e <UART_SetConfig+0x2a2>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0d2      	beq.n	800910e <UART_SetConfig+0x242>
 8009168:	2b10      	cmp	r3, #16
 800916a:	d0ab      	beq.n	80090c4 <UART_SetConfig+0x1f8>
 800916c:	e6fa      	b.n	8008f64 <UART_SetConfig+0x98>
 800916e:	2b30      	cmp	r3, #48	; 0x30
 8009170:	f47f aef8 	bne.w	8008f64 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009174:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009178:	d0d0      	beq.n	800911c <UART_SetConfig+0x250>
    switch (clocksource)
 800917a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800917e:	e70c      	b.n	8008f9a <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009180:	2bc0      	cmp	r3, #192	; 0xc0
 8009182:	d0f7      	beq.n	8009174 <UART_SetConfig+0x2a8>
 8009184:	e6ee      	b.n	8008f64 <UART_SetConfig+0x98>
 8009186:	4815      	ldr	r0, [pc, #84]	; (80091dc <UART_SetConfig+0x310>)
 8009188:	e763      	b.n	8009052 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 800918a:	4814      	ldr	r0, [pc, #80]	; (80091dc <UART_SetConfig+0x310>)
 800918c:	e705      	b.n	8008f9a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800918e:	f7fd ffbd 	bl	800710c <HAL_RCC_GetSysClockFreq>
        break;
 8009192:	e7c1      	b.n	8009118 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009194:	f7fe f908 	bl	80073a8 <HAL_RCC_GetPCLK2Freq>
        break;
 8009198:	e7be      	b.n	8009118 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 800919a:	4810      	ldr	r0, [pc, #64]	; (80091dc <UART_SetConfig+0x310>)
 800919c:	e7be      	b.n	800911c <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800919e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80091a2:	480e      	ldr	r0, [pc, #56]	; (80091dc <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091a4:	f47f aef9 	bne.w	8008f9a <UART_SetConfig+0xce>
 80091a8:	e7b8      	b.n	800911c <UART_SetConfig+0x250>
 80091aa:	bf00      	nop
 80091ac:	cfff69f3 	.word	0xcfff69f3
 80091b0:	40008000 	.word	0x40008000
 80091b4:	40013800 	.word	0x40013800
 80091b8:	40004400 	.word	0x40004400
 80091bc:	40004800 	.word	0x40004800
 80091c0:	40004c00 	.word	0x40004c00
 80091c4:	40005000 	.word	0x40005000
 80091c8:	40021000 	.word	0x40021000
 80091cc:	0800d9b8 	.word	0x0800d9b8
 80091d0:	0800d9a8 	.word	0x0800d9a8
 80091d4:	000ffcff 	.word	0x000ffcff
 80091d8:	0800d9a4 	.word	0x0800d9a4
 80091dc:	00f42400 	.word	0x00f42400

080091e0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091e2:	07da      	lsls	r2, r3, #31
{
 80091e4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091e6:	d506      	bpl.n	80091f6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091e8:	6801      	ldr	r1, [r0, #0]
 80091ea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80091ec:	684a      	ldr	r2, [r1, #4]
 80091ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80091f2:	4322      	orrs	r2, r4
 80091f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091f6:	079c      	lsls	r4, r3, #30
 80091f8:	d506      	bpl.n	8009208 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091fa:	6801      	ldr	r1, [r0, #0]
 80091fc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80091fe:	684a      	ldr	r2, [r1, #4]
 8009200:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009204:	4322      	orrs	r2, r4
 8009206:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009208:	0759      	lsls	r1, r3, #29
 800920a:	d506      	bpl.n	800921a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800920c:	6801      	ldr	r1, [r0, #0]
 800920e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009210:	684a      	ldr	r2, [r1, #4]
 8009212:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009216:	4322      	orrs	r2, r4
 8009218:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800921a:	071a      	lsls	r2, r3, #28
 800921c:	d506      	bpl.n	800922c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800921e:	6801      	ldr	r1, [r0, #0]
 8009220:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009222:	684a      	ldr	r2, [r1, #4]
 8009224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009228:	4322      	orrs	r2, r4
 800922a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800922c:	06dc      	lsls	r4, r3, #27
 800922e:	d506      	bpl.n	800923e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009230:	6801      	ldr	r1, [r0, #0]
 8009232:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009234:	688a      	ldr	r2, [r1, #8]
 8009236:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800923a:	4322      	orrs	r2, r4
 800923c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800923e:	0699      	lsls	r1, r3, #26
 8009240:	d506      	bpl.n	8009250 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009242:	6801      	ldr	r1, [r0, #0]
 8009244:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009246:	688a      	ldr	r2, [r1, #8]
 8009248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800924c:	4322      	orrs	r2, r4
 800924e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009250:	065a      	lsls	r2, r3, #25
 8009252:	d509      	bpl.n	8009268 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009254:	6801      	ldr	r1, [r0, #0]
 8009256:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009258:	684a      	ldr	r2, [r1, #4]
 800925a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800925e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009260:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009264:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009266:	d00b      	beq.n	8009280 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009268:	061b      	lsls	r3, r3, #24
 800926a:	d506      	bpl.n	800927a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800926c:	6802      	ldr	r2, [r0, #0]
 800926e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009270:	6853      	ldr	r3, [r2, #4]
 8009272:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009276:	430b      	orrs	r3, r1
 8009278:	6053      	str	r3, [r2, #4]
}
 800927a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009280:	684a      	ldr	r2, [r1, #4]
 8009282:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009284:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009288:	4322      	orrs	r2, r4
 800928a:	604a      	str	r2, [r1, #4]
 800928c:	e7ec      	b.n	8009268 <UART_AdvFeatureConfig+0x88>
 800928e:	bf00      	nop

08009290 <UART_WaitOnFlagUntilTimeout>:
{
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009298:	6804      	ldr	r4, [r0, #0]
{
 800929a:	4607      	mov	r7, r0
 800929c:	460e      	mov	r6, r1
 800929e:	4615      	mov	r5, r2
 80092a0:	4699      	mov	r9, r3
 80092a2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80092a6:	d10a      	bne.n	80092be <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a8:	69e3      	ldr	r3, [r4, #28]
 80092aa:	ea36 0303 	bics.w	r3, r6, r3
 80092ae:	bf0c      	ite	eq
 80092b0:	2301      	moveq	r3, #1
 80092b2:	2300      	movne	r3, #0
 80092b4:	429d      	cmp	r5, r3
 80092b6:	d0f7      	beq.n	80092a8 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 80092b8:	2000      	movs	r0, #0
}
 80092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092be:	69e2      	ldr	r2, [r4, #28]
 80092c0:	ea36 0202 	bics.w	r2, r6, r2
 80092c4:	bf0c      	ite	eq
 80092c6:	2301      	moveq	r3, #1
 80092c8:	2300      	movne	r3, #0
 80092ca:	42ab      	cmp	r3, r5
 80092cc:	d1f4      	bne.n	80092b8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ce:	f7f9 fda9 	bl	8002e24 <HAL_GetTick>
 80092d2:	eba0 0009 	sub.w	r0, r0, r9
 80092d6:	4540      	cmp	r0, r8
 80092d8:	d833      	bhi.n	8009342 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092da:	f1b8 0f00 	cmp.w	r8, #0
 80092de:	d030      	beq.n	8009342 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092e0:	683c      	ldr	r4, [r7, #0]
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	0758      	lsls	r0, r3, #29
 80092e6:	4622      	mov	r2, r4
 80092e8:	d5db      	bpl.n	80092a2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092ea:	69e3      	ldr	r3, [r4, #28]
 80092ec:	0519      	lsls	r1, r3, #20
 80092ee:	d5d8      	bpl.n	80092a2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f4:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	e844 3100 	strex	r1, r3, [r4]
 8009302:	b139      	cbz	r1, 8009314 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	e852 3f00 	ldrex	r3, [r2]
 8009308:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	e842 3100 	strex	r1, r3, [r2]
 8009310:	2900      	cmp	r1, #0
 8009312:	d1f7      	bne.n	8009304 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009314:	f102 0308 	add.w	r3, r2, #8
 8009318:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	f102 0008 	add.w	r0, r2, #8
 8009324:	e840 3100 	strex	r1, r3, [r0]
 8009328:	2900      	cmp	r1, #0
 800932a:	d1f3      	bne.n	8009314 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800932c:	2320      	movs	r3, #32
 800932e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009332:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800933a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800933c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009340:	e7bb      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0x2a>
 8009342:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	e842 3100 	strex	r1, r3, [r2]
 8009350:	2900      	cmp	r1, #0
 8009352:	d1f7      	bne.n	8009344 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	f102 0308 	add.w	r3, r2, #8
 8009358:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	f102 0008 	add.w	r0, r2, #8
 8009364:	e840 3100 	strex	r1, r3, [r0]
 8009368:	2900      	cmp	r1, #0
 800936a:	d1f3      	bne.n	8009354 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800936c:	2320      	movs	r3, #32
 800936e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009372:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800937a:	2003      	movs	r0, #3
 800937c:	e79d      	b.n	80092ba <UART_WaitOnFlagUntilTimeout+0x2a>
 800937e:	bf00      	nop

08009380 <HAL_UART_Transmit>:
{
 8009380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009384:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8009386:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800938a:	2820      	cmp	r0, #32
{
 800938c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800938e:	f040 8090 	bne.w	80094b2 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8009392:	4689      	mov	r9, r1
 8009394:	2900      	cmp	r1, #0
 8009396:	d048      	beq.n	800942a <HAL_UART_Transmit+0xaa>
 8009398:	4614      	mov	r4, r2
 800939a:	2a00      	cmp	r2, #0
 800939c:	d045      	beq.n	800942a <HAL_UART_Transmit+0xaa>
 800939e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80093a0:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	f000 8084 	beq.w	80094b2 <HAL_UART_Transmit+0x132>
 80093aa:	2301      	movs	r3, #1
 80093ac:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b0:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093b4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b6:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 80093be:	f7f9 fd31 	bl	8002e24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c2:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80093c4:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80093cc:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 80093d0:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093d2:	d072      	beq.n	80094ba <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 80093d4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 80093d8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80093da:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80093dc:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 80093e0:	b1b3      	cbz	r3, 8009410 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e2:	682c      	ldr	r4, [r5, #0]
 80093e4:	1c71      	adds	r1, r6, #1
 80093e6:	d124      	bne.n	8009432 <HAL_UART_Transmit+0xb2>
 80093e8:	69e2      	ldr	r2, [r4, #28]
 80093ea:	0612      	lsls	r2, r2, #24
 80093ec:	d5fc      	bpl.n	80093e8 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 80093ee:	f1b9 0f00 	cmp.w	r9, #0
 80093f2:	d059      	beq.n	80094a8 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093f4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80093f8:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80093fa:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29b      	uxth	r3, r3
 8009402:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009406:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e9      	bne.n	80093e4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009410:	9600      	str	r6, [sp, #0]
 8009412:	463b      	mov	r3, r7
 8009414:	2200      	movs	r2, #0
 8009416:	2140      	movs	r1, #64	; 0x40
 8009418:	4628      	mov	r0, r5
 800941a:	f7ff ff39 	bl	8009290 <UART_WaitOnFlagUntilTimeout>
 800941e:	2800      	cmp	r0, #0
 8009420:	d171      	bne.n	8009506 <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8009422:	2320      	movs	r3, #32
 8009424:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8009428:	e000      	b.n	800942c <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800942a:	2001      	movs	r0, #1
}
 800942c:	b003      	add	sp, #12
 800942e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009432:	69e3      	ldr	r3, [r4, #28]
 8009434:	061b      	lsls	r3, r3, #24
 8009436:	d4da      	bmi.n	80093ee <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009438:	f7f9 fcf4 	bl	8002e24 <HAL_GetTick>
 800943c:	1bc0      	subs	r0, r0, r7
 800943e:	4286      	cmp	r6, r0
 8009440:	d341      	bcc.n	80094c6 <HAL_UART_Transmit+0x146>
 8009442:	2e00      	cmp	r6, #0
 8009444:	d03f      	beq.n	80094c6 <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009446:	682c      	ldr	r4, [r5, #0]
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	0752      	lsls	r2, r2, #29
 800944c:	4623      	mov	r3, r4
 800944e:	d5c9      	bpl.n	80093e4 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009450:	69e2      	ldr	r2, [r4, #28]
 8009452:	0510      	lsls	r0, r2, #20
 8009454:	d5c6      	bpl.n	80093e4 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800945a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009460:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	e844 2100 	strex	r1, r2, [r4]
 8009468:	b139      	cbz	r1, 800947a <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	e853 2f00 	ldrex	r2, [r3]
 800946e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	e843 2100 	strex	r1, r2, [r3]
 8009476:	2900      	cmp	r1, #0
 8009478:	d1f7      	bne.n	800946a <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	f103 0208 	add.w	r2, r3, #8
 800947e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009482:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	f103 0008 	add.w	r0, r3, #8
 800948a:	e840 2100 	strex	r1, r2, [r0]
 800948e:	2900      	cmp	r1, #0
 8009490:	d1f3      	bne.n	800947a <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8009492:	2320      	movs	r3, #32
 8009494:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009498:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800949c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 80094a0:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094a2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 80094a6:	e7c1      	b.n	800942c <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094a8:	f838 3b02 	ldrh.w	r3, [r8], #2
 80094ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b0:	e7a2      	b.n	80093f8 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 80094b2:	2002      	movs	r0, #2
}
 80094b4:	b003      	add	sp, #12
 80094b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ba:	692b      	ldr	r3, [r5, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d189      	bne.n	80093d4 <HAL_UART_Transmit+0x54>
 80094c0:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80094c2:	4699      	mov	r9, r3
 80094c4:	e786      	b.n	80093d4 <HAL_UART_Transmit+0x54>
 80094c6:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	e843 2100 	strex	r1, r2, [r3]
 80094d4:	2900      	cmp	r1, #0
 80094d6:	d1f7      	bne.n	80094c8 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	f103 0208 	add.w	r2, r3, #8
 80094dc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	f103 0008 	add.w	r0, r3, #8
 80094e8:	e840 2100 	strex	r1, r2, [r0]
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d1f3      	bne.n	80094d8 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 80094f0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80094f2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80094f4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80094f8:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80094fc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8009500:	b003      	add	sp, #12
 8009502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8009506:	2003      	movs	r0, #3
 8009508:	e790      	b.n	800942c <HAL_UART_Transmit+0xac>
 800950a:	bf00      	nop

0800950c <HAL_UART_Init>:
  if (huart == NULL)
 800950c:	2800      	cmp	r0, #0
 800950e:	d066      	beq.n	80095de <HAL_UART_Init+0xd2>
{
 8009510:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8009512:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8009516:	b082      	sub	sp, #8
 8009518:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800951a:	2b00      	cmp	r3, #0
 800951c:	d04c      	beq.n	80095b8 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800951e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009520:	2324      	movs	r3, #36	; 0x24
 8009522:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8009526:	6813      	ldr	r3, [r2, #0]
 8009528:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800952c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800952e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009530:	f7ff fccc 	bl	8008ecc <UART_SetConfig>
 8009534:	2801      	cmp	r0, #1
 8009536:	d03c      	beq.n	80095b2 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800953a:	2b00      	cmp	r3, #0
 800953c:	d135      	bne.n	80095aa <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	6859      	ldr	r1, [r3, #4]
 8009542:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8009546:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009548:	6899      	ldr	r1, [r3, #8]
 800954a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800954e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009550:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009552:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8009554:	f041 0101 	orr.w	r1, r1, #1
 8009558:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800955e:	f7f9 fc61 	bl	8002e24 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8009568:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800956a:	d40e      	bmi.n	800958a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	075b      	lsls	r3, r3, #29
 8009570:	d427      	bmi.n	80095c2 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009572:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009574:	2220      	movs	r2, #32
 8009576:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800957a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800957e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8009582:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009584:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009586:	b002      	add	sp, #8
 8009588:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800958a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	462a      	mov	r2, r5
 8009592:	4603      	mov	r3, r0
 8009594:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009598:	4620      	mov	r0, r4
 800959a:	f7ff fe79 	bl	8009290 <UART_WaitOnFlagUntilTimeout>
 800959e:	b9e0      	cbnz	r0, 80095da <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	075b      	lsls	r3, r3, #29
 80095a6:	d40c      	bmi.n	80095c2 <HAL_UART_Init+0xb6>
 80095a8:	e7e3      	b.n	8009572 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 80095aa:	4620      	mov	r0, r4
 80095ac:	f7ff fe18 	bl	80091e0 <UART_AdvFeatureConfig>
 80095b0:	e7c5      	b.n	800953e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 80095b2:	2001      	movs	r0, #1
}
 80095b4:	b002      	add	sp, #8
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80095b8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80095bc:	f7fb fa9a 	bl	8004af4 <HAL_UART_MspInit>
 80095c0:	e7ad      	b.n	800951e <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	2200      	movs	r2, #0
 80095ca:	4633      	mov	r3, r6
 80095cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7ff fe5d 	bl	8009290 <UART_WaitOnFlagUntilTimeout>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d0cb      	beq.n	8009572 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 80095da:	2003      	movs	r0, #3
 80095dc:	e7d3      	b.n	8009586 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 80095de:	2001      	movs	r0, #1
}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop

080095e4 <UART_Start_Receive_DMA>:
{
 80095e4:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095e6:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e8:	2500      	movs	r5, #0
 80095ea:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 80095ee:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80095f0:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 80095f2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095f6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 80095fa:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80095fc:	b168      	cbz	r0, 800961a <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095fe:	4e20      	ldr	r6, [pc, #128]	; (8009680 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8009600:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009602:	4613      	mov	r3, r2
 8009604:	460a      	mov	r2, r1
 8009606:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009608:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800960a:	4e1e      	ldr	r6, [pc, #120]	; (8009684 <UART_Start_Receive_DMA+0xa0>)
 800960c:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800960e:	4e1e      	ldr	r6, [pc, #120]	; (8009688 <UART_Start_Receive_DMA+0xa4>)
 8009610:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009612:	3124      	adds	r1, #36	; 0x24
 8009614:	f7fc fc70 	bl	8005ef8 <HAL_DMA_Start_IT>
 8009618:	bb40      	cbnz	r0, 800966c <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800961a:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 800961c:	2200      	movs	r2, #0
 800961e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009622:	b14b      	cbz	r3, 8009638 <UART_Start_Receive_DMA+0x54>
 8009624:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800962a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	e843 2100 	strex	r1, r2, [r3]
 8009632:	2900      	cmp	r1, #0
 8009634:	d1f7      	bne.n	8009626 <UART_Start_Receive_DMA+0x42>
 8009636:	e000      	b.n	800963a <UART_Start_Receive_DMA+0x56>
 8009638:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	f103 0208 	add.w	r2, r3, #8
 800963e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009642:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	f103 0008 	add.w	r0, r3, #8
 800964a:	e840 2100 	strex	r1, r2, [r0]
 800964e:	2900      	cmp	r1, #0
 8009650:	d1f3      	bne.n	800963a <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009652:	f103 0208 	add.w	r2, r3, #8
 8009656:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800965a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	f103 0108 	add.w	r1, r3, #8
 8009662:	e841 2000 	strex	r0, r2, [r1]
 8009666:	2800      	cmp	r0, #0
 8009668:	d1f3      	bne.n	8009652 <UART_Start_Receive_DMA+0x6e>
}
 800966a:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800966c:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800966e:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8009670:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009674:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 8009678:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800967a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	08008e35 	.word	0x08008e35
 8009684:	08008e19 	.word	0x08008e19
 8009688:	080089bd 	.word	0x080089bd

0800968c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800968c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009690:	2b20      	cmp	r3, #32
 8009692:	d120      	bne.n	80096d6 <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8009694:	b1e9      	cbz	r1, 80096d2 <HAL_UART_Receive_DMA+0x46>
 8009696:	b1e2      	cbz	r2, 80096d2 <HAL_UART_Receive_DMA+0x46>
    __HAL_LOCK(huart);
 8009698:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800969c:	2b01      	cmp	r3, #1
 800969e:	d01a      	beq.n	80096d6 <HAL_UART_Receive_DMA+0x4a>
{
 80096a0:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096a2:	4b0e      	ldr	r3, [pc, #56]	; (80096dc <HAL_UART_Receive_DMA+0x50>)
 80096a4:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 80096a6:	2501      	movs	r5, #1
 80096a8:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096ac:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ae:	f04f 0500 	mov.w	r5, #0
 80096b2:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096b4:	d00a      	beq.n	80096cc <HAL_UART_Receive_DMA+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096b6:	6863      	ldr	r3, [r4, #4]
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	d507      	bpl.n	80096cc <HAL_UART_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	e844 3500 	strex	r5, r3, [r4]
 80096c8:	2d00      	cmp	r5, #0
 80096ca:	d1f7      	bne.n	80096bc <HAL_UART_Receive_DMA+0x30>
}
 80096cc:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80096ce:	f7ff bf89 	b.w	80095e4 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80096d2:	2001      	movs	r0, #1
 80096d4:	4770      	bx	lr
    return HAL_BUSY;
 80096d6:	2002      	movs	r0, #2
}
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40008000 	.word	0x40008000

080096e0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop

080096e4 <HAL_UARTEx_RxFifoFullCallback>:
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop

080096e8 <HAL_UARTEx_TxFifoEmptyCallback>:
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop

080096ec <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d017      	beq.n	8009724 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80096f6:	2324      	movs	r3, #36	; 0x24
{
 80096f8:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80096fa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096fe:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009700:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009702:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8009704:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009708:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800970c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800970e:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009710:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009712:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8009716:	2220      	movs	r2, #32
 8009718:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800971c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8009720:	4618      	mov	r0, r3
}
 8009722:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009724:	2002      	movs	r0, #2
}
 8009726:	4770      	bx	lr

08009728 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009728:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800972c:	2a01      	cmp	r2, #1
 800972e:	d037      	beq.n	80097a0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8009730:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009732:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009734:	2024      	movs	r0, #36	; 0x24
{
 8009736:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009738:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800973c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800973e:	6810      	ldr	r0, [r2, #0]
 8009740:	f020 0001 	bic.w	r0, r0, #1
 8009744:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009746:	6890      	ldr	r0, [r2, #8]
 8009748:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800974c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800974e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009750:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009752:	b310      	cbz	r0, 800979a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009754:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009756:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8009758:	4d12      	ldr	r5, [pc, #72]	; (80097a4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800975a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800975e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009762:	4911      	ldr	r1, [pc, #68]	; (80097a8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009764:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009768:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800976c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009770:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009774:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009776:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009778:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800977c:	fbb1 f1f5 	udiv	r1, r1, r5
 8009780:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009784:	2100      	movs	r1, #0
 8009786:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800978a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800978c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800978e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009792:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009794:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009798:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800979a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800979c:	4608      	mov	r0, r1
 800979e:	e7ef      	b.n	8009780 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80097a0:	2002      	movs	r0, #2
}
 80097a2:	4770      	bx	lr
 80097a4:	0800d9d0 	.word	0x0800d9d0
 80097a8:	0800d9d8 	.word	0x0800d9d8

080097ac <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80097ac:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80097b0:	2a01      	cmp	r2, #1
 80097b2:	d037      	beq.n	8009824 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80097b4:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097b6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80097b8:	2024      	movs	r0, #36	; 0x24
{
 80097ba:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80097bc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097c0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80097c2:	6810      	ldr	r0, [r2, #0]
 80097c4:	f020 0001 	bic.w	r0, r0, #1
 80097c8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097ca:	6890      	ldr	r0, [r2, #8]
 80097cc:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80097d0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097d2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097d4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097d6:	b310      	cbz	r0, 800981e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097d8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097da:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80097dc:	4d12      	ldr	r5, [pc, #72]	; (8009828 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097de:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097e2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097e6:	4911      	ldr	r1, [pc, #68]	; (800982c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80097e8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097ec:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80097f0:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80097f4:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097f8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097fa:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097fc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009800:	fbb1 f1f5 	udiv	r1, r1, r5
 8009804:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009808:	2100      	movs	r1, #0
 800980a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800980e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009810:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009812:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009816:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009818:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800981c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800981e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009820:	4608      	mov	r0, r1
 8009822:	e7ef      	b.n	8009804 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009824:	2002      	movs	r0, #2
}
 8009826:	4770      	bx	lr
 8009828:	0800d9d0 	.word	0x0800d9d0
 800982c:	0800d9d8 	.word	0x0800d9d8

08009830 <__cvt>:
 8009830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	ec55 4b10 	vmov	r4, r5, d0
 8009838:	2d00      	cmp	r5, #0
 800983a:	460e      	mov	r6, r1
 800983c:	4619      	mov	r1, r3
 800983e:	462b      	mov	r3, r5
 8009840:	bfbb      	ittet	lt
 8009842:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009846:	461d      	movlt	r5, r3
 8009848:	2300      	movge	r3, #0
 800984a:	232d      	movlt	r3, #45	; 0x2d
 800984c:	700b      	strb	r3, [r1, #0]
 800984e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009850:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009854:	4691      	mov	r9, r2
 8009856:	f023 0820 	bic.w	r8, r3, #32
 800985a:	bfbc      	itt	lt
 800985c:	4622      	movlt	r2, r4
 800985e:	4614      	movlt	r4, r2
 8009860:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009864:	d005      	beq.n	8009872 <__cvt+0x42>
 8009866:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800986a:	d100      	bne.n	800986e <__cvt+0x3e>
 800986c:	3601      	adds	r6, #1
 800986e:	2102      	movs	r1, #2
 8009870:	e000      	b.n	8009874 <__cvt+0x44>
 8009872:	2103      	movs	r1, #3
 8009874:	ab03      	add	r3, sp, #12
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	ab02      	add	r3, sp, #8
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	ec45 4b10 	vmov	d0, r4, r5
 8009880:	4653      	mov	r3, sl
 8009882:	4632      	mov	r2, r6
 8009884:	f001 f80c 	bl	800a8a0 <_dtoa_r>
 8009888:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800988c:	4607      	mov	r7, r0
 800988e:	d102      	bne.n	8009896 <__cvt+0x66>
 8009890:	f019 0f01 	tst.w	r9, #1
 8009894:	d022      	beq.n	80098dc <__cvt+0xac>
 8009896:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800989a:	eb07 0906 	add.w	r9, r7, r6
 800989e:	d110      	bne.n	80098c2 <__cvt+0x92>
 80098a0:	783b      	ldrb	r3, [r7, #0]
 80098a2:	2b30      	cmp	r3, #48	; 0x30
 80098a4:	d10a      	bne.n	80098bc <__cvt+0x8c>
 80098a6:	2200      	movs	r2, #0
 80098a8:	2300      	movs	r3, #0
 80098aa:	4620      	mov	r0, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	f7f7 f933 	bl	8000b18 <__aeabi_dcmpeq>
 80098b2:	b918      	cbnz	r0, 80098bc <__cvt+0x8c>
 80098b4:	f1c6 0601 	rsb	r6, r6, #1
 80098b8:	f8ca 6000 	str.w	r6, [sl]
 80098bc:	f8da 3000 	ldr.w	r3, [sl]
 80098c0:	4499      	add	r9, r3
 80098c2:	2200      	movs	r2, #0
 80098c4:	2300      	movs	r3, #0
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f7 f925 	bl	8000b18 <__aeabi_dcmpeq>
 80098ce:	b108      	cbz	r0, 80098d4 <__cvt+0xa4>
 80098d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80098d4:	2230      	movs	r2, #48	; 0x30
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	454b      	cmp	r3, r9
 80098da:	d307      	bcc.n	80098ec <__cvt+0xbc>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098e0:	1bdb      	subs	r3, r3, r7
 80098e2:	4638      	mov	r0, r7
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	b004      	add	sp, #16
 80098e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ec:	1c59      	adds	r1, r3, #1
 80098ee:	9103      	str	r1, [sp, #12]
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	e7f0      	b.n	80098d6 <__cvt+0xa6>

080098f4 <__exponent>:
 80098f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098f6:	4603      	mov	r3, r0
 80098f8:	2900      	cmp	r1, #0
 80098fa:	bfb8      	it	lt
 80098fc:	4249      	neglt	r1, r1
 80098fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009902:	bfb4      	ite	lt
 8009904:	222d      	movlt	r2, #45	; 0x2d
 8009906:	222b      	movge	r2, #43	; 0x2b
 8009908:	2909      	cmp	r1, #9
 800990a:	7042      	strb	r2, [r0, #1]
 800990c:	dd2a      	ble.n	8009964 <__exponent+0x70>
 800990e:	f10d 0207 	add.w	r2, sp, #7
 8009912:	4617      	mov	r7, r2
 8009914:	260a      	movs	r6, #10
 8009916:	4694      	mov	ip, r2
 8009918:	fb91 f5f6 	sdiv	r5, r1, r6
 800991c:	fb06 1415 	mls	r4, r6, r5, r1
 8009920:	3430      	adds	r4, #48	; 0x30
 8009922:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009926:	460c      	mov	r4, r1
 8009928:	2c63      	cmp	r4, #99	; 0x63
 800992a:	f102 32ff 	add.w	r2, r2, #4294967295
 800992e:	4629      	mov	r1, r5
 8009930:	dcf1      	bgt.n	8009916 <__exponent+0x22>
 8009932:	3130      	adds	r1, #48	; 0x30
 8009934:	f1ac 0402 	sub.w	r4, ip, #2
 8009938:	f802 1c01 	strb.w	r1, [r2, #-1]
 800993c:	1c41      	adds	r1, r0, #1
 800993e:	4622      	mov	r2, r4
 8009940:	42ba      	cmp	r2, r7
 8009942:	d30a      	bcc.n	800995a <__exponent+0x66>
 8009944:	f10d 0209 	add.w	r2, sp, #9
 8009948:	eba2 020c 	sub.w	r2, r2, ip
 800994c:	42bc      	cmp	r4, r7
 800994e:	bf88      	it	hi
 8009950:	2200      	movhi	r2, #0
 8009952:	4413      	add	r3, r2
 8009954:	1a18      	subs	r0, r3, r0
 8009956:	b003      	add	sp, #12
 8009958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800995e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009962:	e7ed      	b.n	8009940 <__exponent+0x4c>
 8009964:	2330      	movs	r3, #48	; 0x30
 8009966:	3130      	adds	r1, #48	; 0x30
 8009968:	7083      	strb	r3, [r0, #2]
 800996a:	70c1      	strb	r1, [r0, #3]
 800996c:	1d03      	adds	r3, r0, #4
 800996e:	e7f1      	b.n	8009954 <__exponent+0x60>

08009970 <_printf_float>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	ed2d 8b02 	vpush	{d8}
 8009978:	b08d      	sub	sp, #52	; 0x34
 800997a:	460c      	mov	r4, r1
 800997c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009980:	4616      	mov	r6, r2
 8009982:	461f      	mov	r7, r3
 8009984:	4605      	mov	r5, r0
 8009986:	f000 fe8d 	bl	800a6a4 <_localeconv_r>
 800998a:	f8d0 a000 	ldr.w	sl, [r0]
 800998e:	4650      	mov	r0, sl
 8009990:	f7f6 fc96 	bl	80002c0 <strlen>
 8009994:	2300      	movs	r3, #0
 8009996:	930a      	str	r3, [sp, #40]	; 0x28
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	9305      	str	r3, [sp, #20]
 800999c:	f8d8 3000 	ldr.w	r3, [r8]
 80099a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099a4:	3307      	adds	r3, #7
 80099a6:	f023 0307 	bic.w	r3, r3, #7
 80099aa:	f103 0208 	add.w	r2, r3, #8
 80099ae:	f8c8 2000 	str.w	r2, [r8]
 80099b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099ba:	9307      	str	r3, [sp, #28]
 80099bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80099c0:	ee08 0a10 	vmov	s16, r0
 80099c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80099c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099cc:	4b9e      	ldr	r3, [pc, #632]	; (8009c48 <_printf_float+0x2d8>)
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	f7f7 f8d3 	bl	8000b7c <__aeabi_dcmpun>
 80099d6:	bb88      	cbnz	r0, 8009a3c <_printf_float+0xcc>
 80099d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099dc:	4b9a      	ldr	r3, [pc, #616]	; (8009c48 <_printf_float+0x2d8>)
 80099de:	f04f 32ff 	mov.w	r2, #4294967295
 80099e2:	f7f7 f8ad 	bl	8000b40 <__aeabi_dcmple>
 80099e6:	bb48      	cbnz	r0, 8009a3c <_printf_float+0xcc>
 80099e8:	2200      	movs	r2, #0
 80099ea:	2300      	movs	r3, #0
 80099ec:	4640      	mov	r0, r8
 80099ee:	4649      	mov	r1, r9
 80099f0:	f7f7 f89c 	bl	8000b2c <__aeabi_dcmplt>
 80099f4:	b110      	cbz	r0, 80099fc <_printf_float+0x8c>
 80099f6:	232d      	movs	r3, #45	; 0x2d
 80099f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099fc:	4a93      	ldr	r2, [pc, #588]	; (8009c4c <_printf_float+0x2dc>)
 80099fe:	4b94      	ldr	r3, [pc, #592]	; (8009c50 <_printf_float+0x2e0>)
 8009a00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a04:	bf94      	ite	ls
 8009a06:	4690      	movls	r8, r2
 8009a08:	4698      	movhi	r8, r3
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	9b05      	ldr	r3, [sp, #20]
 8009a10:	f023 0304 	bic.w	r3, r3, #4
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	f04f 0900 	mov.w	r9, #0
 8009a1a:	9700      	str	r7, [sp, #0]
 8009a1c:	4633      	mov	r3, r6
 8009a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a20:	4621      	mov	r1, r4
 8009a22:	4628      	mov	r0, r5
 8009a24:	f000 f9da 	bl	8009ddc <_printf_common>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	f040 8090 	bne.w	8009b4e <_printf_float+0x1de>
 8009a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a32:	b00d      	add	sp, #52	; 0x34
 8009a34:	ecbd 8b02 	vpop	{d8}
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	464b      	mov	r3, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	4649      	mov	r1, r9
 8009a44:	f7f7 f89a 	bl	8000b7c <__aeabi_dcmpun>
 8009a48:	b140      	cbz	r0, 8009a5c <_printf_float+0xec>
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfbc      	itt	lt
 8009a50:	232d      	movlt	r3, #45	; 0x2d
 8009a52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a56:	4a7f      	ldr	r2, [pc, #508]	; (8009c54 <_printf_float+0x2e4>)
 8009a58:	4b7f      	ldr	r3, [pc, #508]	; (8009c58 <_printf_float+0x2e8>)
 8009a5a:	e7d1      	b.n	8009a00 <_printf_float+0x90>
 8009a5c:	6863      	ldr	r3, [r4, #4]
 8009a5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a62:	9206      	str	r2, [sp, #24]
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	d13f      	bne.n	8009ae8 <_printf_float+0x178>
 8009a68:	2306      	movs	r3, #6
 8009a6a:	6063      	str	r3, [r4, #4]
 8009a6c:	9b05      	ldr	r3, [sp, #20]
 8009a6e:	6861      	ldr	r1, [r4, #4]
 8009a70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a74:	2300      	movs	r3, #0
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	ab0a      	add	r3, sp, #40	; 0x28
 8009a7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a7e:	ab09      	add	r3, sp, #36	; 0x24
 8009a80:	ec49 8b10 	vmov	d0, r8, r9
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	6022      	str	r2, [r4, #0]
 8009a88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f7ff fecf 	bl	8009830 <__cvt>
 8009a92:	9b06      	ldr	r3, [sp, #24]
 8009a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a96:	2b47      	cmp	r3, #71	; 0x47
 8009a98:	4680      	mov	r8, r0
 8009a9a:	d108      	bne.n	8009aae <_printf_float+0x13e>
 8009a9c:	1cc8      	adds	r0, r1, #3
 8009a9e:	db02      	blt.n	8009aa6 <_printf_float+0x136>
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	dd41      	ble.n	8009b2a <_printf_float+0x1ba>
 8009aa6:	f1ab 0302 	sub.w	r3, fp, #2
 8009aaa:	fa5f fb83 	uxtb.w	fp, r3
 8009aae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ab2:	d820      	bhi.n	8009af6 <_printf_float+0x186>
 8009ab4:	3901      	subs	r1, #1
 8009ab6:	465a      	mov	r2, fp
 8009ab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009abc:	9109      	str	r1, [sp, #36]	; 0x24
 8009abe:	f7ff ff19 	bl	80098f4 <__exponent>
 8009ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac4:	1813      	adds	r3, r2, r0
 8009ac6:	2a01      	cmp	r2, #1
 8009ac8:	4681      	mov	r9, r0
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	dc02      	bgt.n	8009ad4 <_printf_float+0x164>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	07d2      	lsls	r2, r2, #31
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_float+0x168>
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d09c      	beq.n	8009a1a <_printf_float+0xaa>
 8009ae0:	232d      	movs	r3, #45	; 0x2d
 8009ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae6:	e798      	b.n	8009a1a <_printf_float+0xaa>
 8009ae8:	9a06      	ldr	r2, [sp, #24]
 8009aea:	2a47      	cmp	r2, #71	; 0x47
 8009aec:	d1be      	bne.n	8009a6c <_printf_float+0xfc>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1bc      	bne.n	8009a6c <_printf_float+0xfc>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e7b9      	b.n	8009a6a <_printf_float+0xfa>
 8009af6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009afa:	d118      	bne.n	8009b2e <_printf_float+0x1be>
 8009afc:	2900      	cmp	r1, #0
 8009afe:	6863      	ldr	r3, [r4, #4]
 8009b00:	dd0b      	ble.n	8009b1a <_printf_float+0x1aa>
 8009b02:	6121      	str	r1, [r4, #16]
 8009b04:	b913      	cbnz	r3, 8009b0c <_printf_float+0x19c>
 8009b06:	6822      	ldr	r2, [r4, #0]
 8009b08:	07d0      	lsls	r0, r2, #31
 8009b0a:	d502      	bpl.n	8009b12 <_printf_float+0x1a2>
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	440b      	add	r3, r1
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b14:	f04f 0900 	mov.w	r9, #0
 8009b18:	e7de      	b.n	8009ad8 <_printf_float+0x168>
 8009b1a:	b913      	cbnz	r3, 8009b22 <_printf_float+0x1b2>
 8009b1c:	6822      	ldr	r2, [r4, #0]
 8009b1e:	07d2      	lsls	r2, r2, #31
 8009b20:	d501      	bpl.n	8009b26 <_printf_float+0x1b6>
 8009b22:	3302      	adds	r3, #2
 8009b24:	e7f4      	b.n	8009b10 <_printf_float+0x1a0>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e7f2      	b.n	8009b10 <_printf_float+0x1a0>
 8009b2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b30:	4299      	cmp	r1, r3
 8009b32:	db05      	blt.n	8009b40 <_printf_float+0x1d0>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	6121      	str	r1, [r4, #16]
 8009b38:	07d8      	lsls	r0, r3, #31
 8009b3a:	d5ea      	bpl.n	8009b12 <_printf_float+0x1a2>
 8009b3c:	1c4b      	adds	r3, r1, #1
 8009b3e:	e7e7      	b.n	8009b10 <_printf_float+0x1a0>
 8009b40:	2900      	cmp	r1, #0
 8009b42:	bfd4      	ite	le
 8009b44:	f1c1 0202 	rsble	r2, r1, #2
 8009b48:	2201      	movgt	r2, #1
 8009b4a:	4413      	add	r3, r2
 8009b4c:	e7e0      	b.n	8009b10 <_printf_float+0x1a0>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	055a      	lsls	r2, r3, #21
 8009b52:	d407      	bmi.n	8009b64 <_printf_float+0x1f4>
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	4642      	mov	r2, r8
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d12c      	bne.n	8009bbc <_printf_float+0x24c>
 8009b62:	e764      	b.n	8009a2e <_printf_float+0xbe>
 8009b64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b68:	f240 80e0 	bls.w	8009d2c <_printf_float+0x3bc>
 8009b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b70:	2200      	movs	r2, #0
 8009b72:	2300      	movs	r3, #0
 8009b74:	f7f6 ffd0 	bl	8000b18 <__aeabi_dcmpeq>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d034      	beq.n	8009be6 <_printf_float+0x276>
 8009b7c:	4a37      	ldr	r2, [pc, #220]	; (8009c5c <_printf_float+0x2ec>)
 8009b7e:	2301      	movs	r3, #1
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f af51 	beq.w	8009a2e <_printf_float+0xbe>
 8009b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b90:	429a      	cmp	r2, r3
 8009b92:	db02      	blt.n	8009b9a <_printf_float+0x22a>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	07d8      	lsls	r0, r3, #31
 8009b98:	d510      	bpl.n	8009bbc <_printf_float+0x24c>
 8009b9a:	ee18 3a10 	vmov	r3, s16
 8009b9e:	4652      	mov	r2, sl
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f af41 	beq.w	8009a2e <_printf_float+0xbe>
 8009bac:	f04f 0800 	mov.w	r8, #0
 8009bb0:	f104 091a 	add.w	r9, r4, #26
 8009bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	4543      	cmp	r3, r8
 8009bba:	dc09      	bgt.n	8009bd0 <_printf_float+0x260>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	079b      	lsls	r3, r3, #30
 8009bc0:	f100 8107 	bmi.w	8009dd2 <_printf_float+0x462>
 8009bc4:	68e0      	ldr	r0, [r4, #12]
 8009bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc8:	4298      	cmp	r0, r3
 8009bca:	bfb8      	it	lt
 8009bcc:	4618      	movlt	r0, r3
 8009bce:	e730      	b.n	8009a32 <_printf_float+0xc2>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	464a      	mov	r2, r9
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47b8      	blx	r7
 8009bda:	3001      	adds	r0, #1
 8009bdc:	f43f af27 	beq.w	8009a2e <_printf_float+0xbe>
 8009be0:	f108 0801 	add.w	r8, r8, #1
 8009be4:	e7e6      	b.n	8009bb4 <_printf_float+0x244>
 8009be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dc39      	bgt.n	8009c60 <_printf_float+0x2f0>
 8009bec:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <_printf_float+0x2ec>)
 8009bee:	2301      	movs	r3, #1
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b8      	blx	r7
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	f43f af19 	beq.w	8009a2e <_printf_float+0xbe>
 8009bfc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c00:	4313      	orrs	r3, r2
 8009c02:	d102      	bne.n	8009c0a <_printf_float+0x29a>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	07d9      	lsls	r1, r3, #31
 8009c08:	d5d8      	bpl.n	8009bbc <_printf_float+0x24c>
 8009c0a:	ee18 3a10 	vmov	r3, s16
 8009c0e:	4652      	mov	r2, sl
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	f43f af09 	beq.w	8009a2e <_printf_float+0xbe>
 8009c1c:	f04f 0900 	mov.w	r9, #0
 8009c20:	f104 0a1a 	add.w	sl, r4, #26
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	425b      	negs	r3, r3
 8009c28:	454b      	cmp	r3, r9
 8009c2a:	dc01      	bgt.n	8009c30 <_printf_float+0x2c0>
 8009c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2e:	e792      	b.n	8009b56 <_printf_float+0x1e6>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4652      	mov	r2, sl
 8009c34:	4631      	mov	r1, r6
 8009c36:	4628      	mov	r0, r5
 8009c38:	47b8      	blx	r7
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	f43f aef7 	beq.w	8009a2e <_printf_float+0xbe>
 8009c40:	f109 0901 	add.w	r9, r9, #1
 8009c44:	e7ee      	b.n	8009c24 <_printf_float+0x2b4>
 8009c46:	bf00      	nop
 8009c48:	7fefffff 	.word	0x7fefffff
 8009c4c:	0800d9e0 	.word	0x0800d9e0
 8009c50:	0800d9e4 	.word	0x0800d9e4
 8009c54:	0800d9e8 	.word	0x0800d9e8
 8009c58:	0800d9ec 	.word	0x0800d9ec
 8009c5c:	0800d9f0 	.word	0x0800d9f0
 8009c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c64:	429a      	cmp	r2, r3
 8009c66:	bfa8      	it	ge
 8009c68:	461a      	movge	r2, r3
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	4691      	mov	r9, r2
 8009c6e:	dc37      	bgt.n	8009ce0 <_printf_float+0x370>
 8009c70:	f04f 0b00 	mov.w	fp, #0
 8009c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c78:	f104 021a 	add.w	r2, r4, #26
 8009c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	eba3 0309 	sub.w	r3, r3, r9
 8009c84:	455b      	cmp	r3, fp
 8009c86:	dc33      	bgt.n	8009cf0 <_printf_float+0x380>
 8009c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	db3b      	blt.n	8009d08 <_printf_float+0x398>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	07da      	lsls	r2, r3, #31
 8009c94:	d438      	bmi.n	8009d08 <_printf_float+0x398>
 8009c96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c9a:	eba2 0903 	sub.w	r9, r2, r3
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	1ad2      	subs	r2, r2, r3
 8009ca2:	4591      	cmp	r9, r2
 8009ca4:	bfa8      	it	ge
 8009ca6:	4691      	movge	r9, r2
 8009ca8:	f1b9 0f00 	cmp.w	r9, #0
 8009cac:	dc35      	bgt.n	8009d1a <_printf_float+0x3aa>
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cb6:	f104 0a1a 	add.w	sl, r4, #26
 8009cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cbe:	1a9b      	subs	r3, r3, r2
 8009cc0:	eba3 0309 	sub.w	r3, r3, r9
 8009cc4:	4543      	cmp	r3, r8
 8009cc6:	f77f af79 	ble.w	8009bbc <_printf_float+0x24c>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f aeaa 	beq.w	8009a2e <_printf_float+0xbe>
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	e7ec      	b.n	8009cba <_printf_float+0x34a>
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	d1c0      	bne.n	8009c70 <_printf_float+0x300>
 8009cee:	e69e      	b.n	8009a2e <_printf_float+0xbe>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	9205      	str	r2, [sp, #20]
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f ae97 	beq.w	8009a2e <_printf_float+0xbe>
 8009d00:	9a05      	ldr	r2, [sp, #20]
 8009d02:	f10b 0b01 	add.w	fp, fp, #1
 8009d06:	e7b9      	b.n	8009c7c <_printf_float+0x30c>
 8009d08:	ee18 3a10 	vmov	r3, s16
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	d1be      	bne.n	8009c96 <_printf_float+0x326>
 8009d18:	e689      	b.n	8009a2e <_printf_float+0xbe>
 8009d1a:	9a05      	ldr	r2, [sp, #20]
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	4442      	add	r2, r8
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	d1c1      	bne.n	8009cae <_printf_float+0x33e>
 8009d2a:	e680      	b.n	8009a2e <_printf_float+0xbe>
 8009d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d2e:	2a01      	cmp	r2, #1
 8009d30:	dc01      	bgt.n	8009d36 <_printf_float+0x3c6>
 8009d32:	07db      	lsls	r3, r3, #31
 8009d34:	d53a      	bpl.n	8009dac <_printf_float+0x43c>
 8009d36:	2301      	movs	r3, #1
 8009d38:	4642      	mov	r2, r8
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	f43f ae74 	beq.w	8009a2e <_printf_float+0xbe>
 8009d46:	ee18 3a10 	vmov	r3, s16
 8009d4a:	4652      	mov	r2, sl
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b8      	blx	r7
 8009d52:	3001      	adds	r0, #1
 8009d54:	f43f ae6b 	beq.w	8009a2e <_printf_float+0xbe>
 8009d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009d64:	f7f6 fed8 	bl	8000b18 <__aeabi_dcmpeq>
 8009d68:	b9d8      	cbnz	r0, 8009da2 <_printf_float+0x432>
 8009d6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d6e:	f108 0201 	add.w	r2, r8, #1
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d10e      	bne.n	8009d9a <_printf_float+0x42a>
 8009d7c:	e657      	b.n	8009a2e <_printf_float+0xbe>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4652      	mov	r2, sl
 8009d82:	4631      	mov	r1, r6
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b8      	blx	r7
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f43f ae50 	beq.w	8009a2e <_printf_float+0xbe>
 8009d8e:	f108 0801 	add.w	r8, r8, #1
 8009d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d94:	3b01      	subs	r3, #1
 8009d96:	4543      	cmp	r3, r8
 8009d98:	dcf1      	bgt.n	8009d7e <_printf_float+0x40e>
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009da0:	e6da      	b.n	8009b58 <_printf_float+0x1e8>
 8009da2:	f04f 0800 	mov.w	r8, #0
 8009da6:	f104 0a1a 	add.w	sl, r4, #26
 8009daa:	e7f2      	b.n	8009d92 <_printf_float+0x422>
 8009dac:	2301      	movs	r3, #1
 8009dae:	4642      	mov	r2, r8
 8009db0:	e7df      	b.n	8009d72 <_printf_float+0x402>
 8009db2:	2301      	movs	r3, #1
 8009db4:	464a      	mov	r2, r9
 8009db6:	4631      	mov	r1, r6
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b8      	blx	r7
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	f43f ae36 	beq.w	8009a2e <_printf_float+0xbe>
 8009dc2:	f108 0801 	add.w	r8, r8, #1
 8009dc6:	68e3      	ldr	r3, [r4, #12]
 8009dc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dca:	1a5b      	subs	r3, r3, r1
 8009dcc:	4543      	cmp	r3, r8
 8009dce:	dcf0      	bgt.n	8009db2 <_printf_float+0x442>
 8009dd0:	e6f8      	b.n	8009bc4 <_printf_float+0x254>
 8009dd2:	f04f 0800 	mov.w	r8, #0
 8009dd6:	f104 0919 	add.w	r9, r4, #25
 8009dda:	e7f4      	b.n	8009dc6 <_printf_float+0x456>

08009ddc <_printf_common>:
 8009ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de0:	4616      	mov	r6, r2
 8009de2:	4699      	mov	r9, r3
 8009de4:	688a      	ldr	r2, [r1, #8]
 8009de6:	690b      	ldr	r3, [r1, #16]
 8009de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dec:	4293      	cmp	r3, r2
 8009dee:	bfb8      	it	lt
 8009df0:	4613      	movlt	r3, r2
 8009df2:	6033      	str	r3, [r6, #0]
 8009df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009df8:	4607      	mov	r7, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	b10a      	cbz	r2, 8009e02 <_printf_common+0x26>
 8009dfe:	3301      	adds	r3, #1
 8009e00:	6033      	str	r3, [r6, #0]
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	0699      	lsls	r1, r3, #26
 8009e06:	bf42      	ittt	mi
 8009e08:	6833      	ldrmi	r3, [r6, #0]
 8009e0a:	3302      	addmi	r3, #2
 8009e0c:	6033      	strmi	r3, [r6, #0]
 8009e0e:	6825      	ldr	r5, [r4, #0]
 8009e10:	f015 0506 	ands.w	r5, r5, #6
 8009e14:	d106      	bne.n	8009e24 <_printf_common+0x48>
 8009e16:	f104 0a19 	add.w	sl, r4, #25
 8009e1a:	68e3      	ldr	r3, [r4, #12]
 8009e1c:	6832      	ldr	r2, [r6, #0]
 8009e1e:	1a9b      	subs	r3, r3, r2
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	dc26      	bgt.n	8009e72 <_printf_common+0x96>
 8009e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e28:	1e13      	subs	r3, r2, #0
 8009e2a:	6822      	ldr	r2, [r4, #0]
 8009e2c:	bf18      	it	ne
 8009e2e:	2301      	movne	r3, #1
 8009e30:	0692      	lsls	r2, r2, #26
 8009e32:	d42b      	bmi.n	8009e8c <_printf_common+0xb0>
 8009e34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e38:	4649      	mov	r1, r9
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	47c0      	blx	r8
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d01e      	beq.n	8009e80 <_printf_common+0xa4>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	6922      	ldr	r2, [r4, #16]
 8009e46:	f003 0306 	and.w	r3, r3, #6
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	bf02      	ittt	eq
 8009e4e:	68e5      	ldreq	r5, [r4, #12]
 8009e50:	6833      	ldreq	r3, [r6, #0]
 8009e52:	1aed      	subeq	r5, r5, r3
 8009e54:	68a3      	ldr	r3, [r4, #8]
 8009e56:	bf0c      	ite	eq
 8009e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e5c:	2500      	movne	r5, #0
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	bfc4      	itt	gt
 8009e62:	1a9b      	subgt	r3, r3, r2
 8009e64:	18ed      	addgt	r5, r5, r3
 8009e66:	2600      	movs	r6, #0
 8009e68:	341a      	adds	r4, #26
 8009e6a:	42b5      	cmp	r5, r6
 8009e6c:	d11a      	bne.n	8009ea4 <_printf_common+0xc8>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	e008      	b.n	8009e84 <_printf_common+0xa8>
 8009e72:	2301      	movs	r3, #1
 8009e74:	4652      	mov	r2, sl
 8009e76:	4649      	mov	r1, r9
 8009e78:	4638      	mov	r0, r7
 8009e7a:	47c0      	blx	r8
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	d103      	bne.n	8009e88 <_printf_common+0xac>
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295
 8009e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e88:	3501      	adds	r5, #1
 8009e8a:	e7c6      	b.n	8009e1a <_printf_common+0x3e>
 8009e8c:	18e1      	adds	r1, r4, r3
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	2030      	movs	r0, #48	; 0x30
 8009e92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e96:	4422      	add	r2, r4
 8009e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ea0:	3302      	adds	r3, #2
 8009ea2:	e7c7      	b.n	8009e34 <_printf_common+0x58>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	4638      	mov	r0, r7
 8009eac:	47c0      	blx	r8
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d0e6      	beq.n	8009e80 <_printf_common+0xa4>
 8009eb2:	3601      	adds	r6, #1
 8009eb4:	e7d9      	b.n	8009e6a <_printf_common+0x8e>
	...

08009eb8 <_printf_i>:
 8009eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ebc:	7e0f      	ldrb	r7, [r1, #24]
 8009ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ec0:	2f78      	cmp	r7, #120	; 0x78
 8009ec2:	4691      	mov	r9, r2
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	469a      	mov	sl, r3
 8009eca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ece:	d807      	bhi.n	8009ee0 <_printf_i+0x28>
 8009ed0:	2f62      	cmp	r7, #98	; 0x62
 8009ed2:	d80a      	bhi.n	8009eea <_printf_i+0x32>
 8009ed4:	2f00      	cmp	r7, #0
 8009ed6:	f000 80d4 	beq.w	800a082 <_printf_i+0x1ca>
 8009eda:	2f58      	cmp	r7, #88	; 0x58
 8009edc:	f000 80c0 	beq.w	800a060 <_printf_i+0x1a8>
 8009ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ee8:	e03a      	b.n	8009f60 <_printf_i+0xa8>
 8009eea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eee:	2b15      	cmp	r3, #21
 8009ef0:	d8f6      	bhi.n	8009ee0 <_printf_i+0x28>
 8009ef2:	a101      	add	r1, pc, #4	; (adr r1, 8009ef8 <_printf_i+0x40>)
 8009ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ef8:	08009f51 	.word	0x08009f51
 8009efc:	08009f65 	.word	0x08009f65
 8009f00:	08009ee1 	.word	0x08009ee1
 8009f04:	08009ee1 	.word	0x08009ee1
 8009f08:	08009ee1 	.word	0x08009ee1
 8009f0c:	08009ee1 	.word	0x08009ee1
 8009f10:	08009f65 	.word	0x08009f65
 8009f14:	08009ee1 	.word	0x08009ee1
 8009f18:	08009ee1 	.word	0x08009ee1
 8009f1c:	08009ee1 	.word	0x08009ee1
 8009f20:	08009ee1 	.word	0x08009ee1
 8009f24:	0800a069 	.word	0x0800a069
 8009f28:	08009f91 	.word	0x08009f91
 8009f2c:	0800a023 	.word	0x0800a023
 8009f30:	08009ee1 	.word	0x08009ee1
 8009f34:	08009ee1 	.word	0x08009ee1
 8009f38:	0800a08b 	.word	0x0800a08b
 8009f3c:	08009ee1 	.word	0x08009ee1
 8009f40:	08009f91 	.word	0x08009f91
 8009f44:	08009ee1 	.word	0x08009ee1
 8009f48:	08009ee1 	.word	0x08009ee1
 8009f4c:	0800a02b 	.word	0x0800a02b
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	1d1a      	adds	r2, r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	602a      	str	r2, [r5, #0]
 8009f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f60:	2301      	movs	r3, #1
 8009f62:	e09f      	b.n	800a0a4 <_printf_i+0x1ec>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	0607      	lsls	r7, r0, #24
 8009f6a:	f103 0104 	add.w	r1, r3, #4
 8009f6e:	6029      	str	r1, [r5, #0]
 8009f70:	d501      	bpl.n	8009f76 <_printf_i+0xbe>
 8009f72:	681e      	ldr	r6, [r3, #0]
 8009f74:	e003      	b.n	8009f7e <_printf_i+0xc6>
 8009f76:	0646      	lsls	r6, r0, #25
 8009f78:	d5fb      	bpl.n	8009f72 <_printf_i+0xba>
 8009f7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f7e:	2e00      	cmp	r6, #0
 8009f80:	da03      	bge.n	8009f8a <_printf_i+0xd2>
 8009f82:	232d      	movs	r3, #45	; 0x2d
 8009f84:	4276      	negs	r6, r6
 8009f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f8a:	485a      	ldr	r0, [pc, #360]	; (800a0f4 <_printf_i+0x23c>)
 8009f8c:	230a      	movs	r3, #10
 8009f8e:	e012      	b.n	8009fb6 <_printf_i+0xfe>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	1d19      	adds	r1, r3, #4
 8009f96:	6029      	str	r1, [r5, #0]
 8009f98:	0605      	lsls	r5, r0, #24
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_i+0xe8>
 8009f9c:	681e      	ldr	r6, [r3, #0]
 8009f9e:	e002      	b.n	8009fa6 <_printf_i+0xee>
 8009fa0:	0641      	lsls	r1, r0, #25
 8009fa2:	d5fb      	bpl.n	8009f9c <_printf_i+0xe4>
 8009fa4:	881e      	ldrh	r6, [r3, #0]
 8009fa6:	4853      	ldr	r0, [pc, #332]	; (800a0f4 <_printf_i+0x23c>)
 8009fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8009faa:	bf0c      	ite	eq
 8009fac:	2308      	moveq	r3, #8
 8009fae:	230a      	movne	r3, #10
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fb6:	6865      	ldr	r5, [r4, #4]
 8009fb8:	60a5      	str	r5, [r4, #8]
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	bfa2      	ittt	ge
 8009fbe:	6821      	ldrge	r1, [r4, #0]
 8009fc0:	f021 0104 	bicge.w	r1, r1, #4
 8009fc4:	6021      	strge	r1, [r4, #0]
 8009fc6:	b90e      	cbnz	r6, 8009fcc <_printf_i+0x114>
 8009fc8:	2d00      	cmp	r5, #0
 8009fca:	d04b      	beq.n	800a064 <_printf_i+0x1ac>
 8009fcc:	4615      	mov	r5, r2
 8009fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8009fd6:	5dc7      	ldrb	r7, [r0, r7]
 8009fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fdc:	4637      	mov	r7, r6
 8009fde:	42bb      	cmp	r3, r7
 8009fe0:	460e      	mov	r6, r1
 8009fe2:	d9f4      	bls.n	8009fce <_printf_i+0x116>
 8009fe4:	2b08      	cmp	r3, #8
 8009fe6:	d10b      	bne.n	800a000 <_printf_i+0x148>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	07de      	lsls	r6, r3, #31
 8009fec:	d508      	bpl.n	800a000 <_printf_i+0x148>
 8009fee:	6923      	ldr	r3, [r4, #16]
 8009ff0:	6861      	ldr	r1, [r4, #4]
 8009ff2:	4299      	cmp	r1, r3
 8009ff4:	bfde      	ittt	le
 8009ff6:	2330      	movle	r3, #48	; 0x30
 8009ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a000:	1b52      	subs	r2, r2, r5
 800a002:	6122      	str	r2, [r4, #16]
 800a004:	f8cd a000 	str.w	sl, [sp]
 800a008:	464b      	mov	r3, r9
 800a00a:	aa03      	add	r2, sp, #12
 800a00c:	4621      	mov	r1, r4
 800a00e:	4640      	mov	r0, r8
 800a010:	f7ff fee4 	bl	8009ddc <_printf_common>
 800a014:	3001      	adds	r0, #1
 800a016:	d14a      	bne.n	800a0ae <_printf_i+0x1f6>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	b004      	add	sp, #16
 800a01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	f043 0320 	orr.w	r3, r3, #32
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	4833      	ldr	r0, [pc, #204]	; (800a0f8 <_printf_i+0x240>)
 800a02c:	2778      	movs	r7, #120	; 0x78
 800a02e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	6829      	ldr	r1, [r5, #0]
 800a036:	061f      	lsls	r7, r3, #24
 800a038:	f851 6b04 	ldr.w	r6, [r1], #4
 800a03c:	d402      	bmi.n	800a044 <_printf_i+0x18c>
 800a03e:	065f      	lsls	r7, r3, #25
 800a040:	bf48      	it	mi
 800a042:	b2b6      	uxthmi	r6, r6
 800a044:	07df      	lsls	r7, r3, #31
 800a046:	bf48      	it	mi
 800a048:	f043 0320 	orrmi.w	r3, r3, #32
 800a04c:	6029      	str	r1, [r5, #0]
 800a04e:	bf48      	it	mi
 800a050:	6023      	strmi	r3, [r4, #0]
 800a052:	b91e      	cbnz	r6, 800a05c <_printf_i+0x1a4>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	f023 0320 	bic.w	r3, r3, #32
 800a05a:	6023      	str	r3, [r4, #0]
 800a05c:	2310      	movs	r3, #16
 800a05e:	e7a7      	b.n	8009fb0 <_printf_i+0xf8>
 800a060:	4824      	ldr	r0, [pc, #144]	; (800a0f4 <_printf_i+0x23c>)
 800a062:	e7e4      	b.n	800a02e <_printf_i+0x176>
 800a064:	4615      	mov	r5, r2
 800a066:	e7bd      	b.n	8009fe4 <_printf_i+0x12c>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	6826      	ldr	r6, [r4, #0]
 800a06c:	6961      	ldr	r1, [r4, #20]
 800a06e:	1d18      	adds	r0, r3, #4
 800a070:	6028      	str	r0, [r5, #0]
 800a072:	0635      	lsls	r5, r6, #24
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	d501      	bpl.n	800a07c <_printf_i+0x1c4>
 800a078:	6019      	str	r1, [r3, #0]
 800a07a:	e002      	b.n	800a082 <_printf_i+0x1ca>
 800a07c:	0670      	lsls	r0, r6, #25
 800a07e:	d5fb      	bpl.n	800a078 <_printf_i+0x1c0>
 800a080:	8019      	strh	r1, [r3, #0]
 800a082:	2300      	movs	r3, #0
 800a084:	6123      	str	r3, [r4, #16]
 800a086:	4615      	mov	r5, r2
 800a088:	e7bc      	b.n	800a004 <_printf_i+0x14c>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	1d1a      	adds	r2, r3, #4
 800a08e:	602a      	str	r2, [r5, #0]
 800a090:	681d      	ldr	r5, [r3, #0]
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	2100      	movs	r1, #0
 800a096:	4628      	mov	r0, r5
 800a098:	f7f6 f8c2 	bl	8000220 <memchr>
 800a09c:	b108      	cbz	r0, 800a0a2 <_printf_i+0x1ea>
 800a09e:	1b40      	subs	r0, r0, r5
 800a0a0:	6060      	str	r0, [r4, #4]
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ac:	e7aa      	b.n	800a004 <_printf_i+0x14c>
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	462a      	mov	r2, r5
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	4640      	mov	r0, r8
 800a0b6:	47d0      	blx	sl
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d0ad      	beq.n	800a018 <_printf_i+0x160>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	079b      	lsls	r3, r3, #30
 800a0c0:	d413      	bmi.n	800a0ea <_printf_i+0x232>
 800a0c2:	68e0      	ldr	r0, [r4, #12]
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	4298      	cmp	r0, r3
 800a0c8:	bfb8      	it	lt
 800a0ca:	4618      	movlt	r0, r3
 800a0cc:	e7a6      	b.n	800a01c <_printf_i+0x164>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	4632      	mov	r2, r6
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	47d0      	blx	sl
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d09d      	beq.n	800a018 <_printf_i+0x160>
 800a0dc:	3501      	adds	r5, #1
 800a0de:	68e3      	ldr	r3, [r4, #12]
 800a0e0:	9903      	ldr	r1, [sp, #12]
 800a0e2:	1a5b      	subs	r3, r3, r1
 800a0e4:	42ab      	cmp	r3, r5
 800a0e6:	dcf2      	bgt.n	800a0ce <_printf_i+0x216>
 800a0e8:	e7eb      	b.n	800a0c2 <_printf_i+0x20a>
 800a0ea:	2500      	movs	r5, #0
 800a0ec:	f104 0619 	add.w	r6, r4, #25
 800a0f0:	e7f5      	b.n	800a0de <_printf_i+0x226>
 800a0f2:	bf00      	nop
 800a0f4:	0800d9f2 	.word	0x0800d9f2
 800a0f8:	0800da03 	.word	0x0800da03

0800a0fc <std>:
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	b510      	push	{r4, lr}
 800a100:	4604      	mov	r4, r0
 800a102:	e9c0 3300 	strd	r3, r3, [r0]
 800a106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a10a:	6083      	str	r3, [r0, #8]
 800a10c:	8181      	strh	r1, [r0, #12]
 800a10e:	6643      	str	r3, [r0, #100]	; 0x64
 800a110:	81c2      	strh	r2, [r0, #14]
 800a112:	6183      	str	r3, [r0, #24]
 800a114:	4619      	mov	r1, r3
 800a116:	2208      	movs	r2, #8
 800a118:	305c      	adds	r0, #92	; 0x5c
 800a11a:	f000 fabb 	bl	800a694 <memset>
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <std+0x38>)
 800a120:	6263      	str	r3, [r4, #36]	; 0x24
 800a122:	4b05      	ldr	r3, [pc, #20]	; (800a138 <std+0x3c>)
 800a124:	62a3      	str	r3, [r4, #40]	; 0x28
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <std+0x40>)
 800a128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a12a:	4b05      	ldr	r3, [pc, #20]	; (800a140 <std+0x44>)
 800a12c:	6224      	str	r4, [r4, #32]
 800a12e:	6323      	str	r3, [r4, #48]	; 0x30
 800a130:	bd10      	pop	{r4, pc}
 800a132:	bf00      	nop
 800a134:	0800a4e5 	.word	0x0800a4e5
 800a138:	0800a507 	.word	0x0800a507
 800a13c:	0800a53f 	.word	0x0800a53f
 800a140:	0800a563 	.word	0x0800a563

0800a144 <stdio_exit_handler>:
 800a144:	4a02      	ldr	r2, [pc, #8]	; (800a150 <stdio_exit_handler+0xc>)
 800a146:	4903      	ldr	r1, [pc, #12]	; (800a154 <stdio_exit_handler+0x10>)
 800a148:	4803      	ldr	r0, [pc, #12]	; (800a158 <stdio_exit_handler+0x14>)
 800a14a:	f000 b869 	b.w	800a220 <_fwalk_sglue>
 800a14e:	bf00      	nop
 800a150:	20000010 	.word	0x20000010
 800a154:	0800c3c1 	.word	0x0800c3c1
 800a158:	2000001c 	.word	0x2000001c

0800a15c <cleanup_stdio>:
 800a15c:	6841      	ldr	r1, [r0, #4]
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <cleanup_stdio+0x34>)
 800a160:	4299      	cmp	r1, r3
 800a162:	b510      	push	{r4, lr}
 800a164:	4604      	mov	r4, r0
 800a166:	d001      	beq.n	800a16c <cleanup_stdio+0x10>
 800a168:	f002 f92a 	bl	800c3c0 <_fflush_r>
 800a16c:	68a1      	ldr	r1, [r4, #8]
 800a16e:	4b09      	ldr	r3, [pc, #36]	; (800a194 <cleanup_stdio+0x38>)
 800a170:	4299      	cmp	r1, r3
 800a172:	d002      	beq.n	800a17a <cleanup_stdio+0x1e>
 800a174:	4620      	mov	r0, r4
 800a176:	f002 f923 	bl	800c3c0 <_fflush_r>
 800a17a:	68e1      	ldr	r1, [r4, #12]
 800a17c:	4b06      	ldr	r3, [pc, #24]	; (800a198 <cleanup_stdio+0x3c>)
 800a17e:	4299      	cmp	r1, r3
 800a180:	d004      	beq.n	800a18c <cleanup_stdio+0x30>
 800a182:	4620      	mov	r0, r4
 800a184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a188:	f002 b91a 	b.w	800c3c0 <_fflush_r>
 800a18c:	bd10      	pop	{r4, pc}
 800a18e:	bf00      	nop
 800a190:	20001a1c 	.word	0x20001a1c
 800a194:	20001a84 	.word	0x20001a84
 800a198:	20001aec 	.word	0x20001aec

0800a19c <global_stdio_init.part.0>:
 800a19c:	b510      	push	{r4, lr}
 800a19e:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <global_stdio_init.part.0+0x30>)
 800a1a0:	4c0b      	ldr	r4, [pc, #44]	; (800a1d0 <global_stdio_init.part.0+0x34>)
 800a1a2:	4a0c      	ldr	r2, [pc, #48]	; (800a1d4 <global_stdio_init.part.0+0x38>)
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2104      	movs	r1, #4
 800a1ac:	f7ff ffa6 	bl	800a0fc <std>
 800a1b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	2109      	movs	r1, #9
 800a1b8:	f7ff ffa0 	bl	800a0fc <std>
 800a1bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c6:	2112      	movs	r1, #18
 800a1c8:	f7ff bf98 	b.w	800a0fc <std>
 800a1cc:	20001b54 	.word	0x20001b54
 800a1d0:	20001a1c 	.word	0x20001a1c
 800a1d4:	0800a145 	.word	0x0800a145

0800a1d8 <__sfp_lock_acquire>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	; (800a1e0 <__sfp_lock_acquire+0x8>)
 800a1da:	f000 bad7 	b.w	800a78c <__retarget_lock_acquire_recursive>
 800a1de:	bf00      	nop
 800a1e0:	20001b5d 	.word	0x20001b5d

0800a1e4 <__sfp_lock_release>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	; (800a1ec <__sfp_lock_release+0x8>)
 800a1e6:	f000 bad2 	b.w	800a78e <__retarget_lock_release_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	20001b5d 	.word	0x20001b5d

0800a1f0 <__sinit>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	f7ff fff0 	bl	800a1d8 <__sfp_lock_acquire>
 800a1f8:	6a23      	ldr	r3, [r4, #32]
 800a1fa:	b11b      	cbz	r3, 800a204 <__sinit+0x14>
 800a1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a200:	f7ff bff0 	b.w	800a1e4 <__sfp_lock_release>
 800a204:	4b04      	ldr	r3, [pc, #16]	; (800a218 <__sinit+0x28>)
 800a206:	6223      	str	r3, [r4, #32]
 800a208:	4b04      	ldr	r3, [pc, #16]	; (800a21c <__sinit+0x2c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1f5      	bne.n	800a1fc <__sinit+0xc>
 800a210:	f7ff ffc4 	bl	800a19c <global_stdio_init.part.0>
 800a214:	e7f2      	b.n	800a1fc <__sinit+0xc>
 800a216:	bf00      	nop
 800a218:	0800a15d 	.word	0x0800a15d
 800a21c:	20001b54 	.word	0x20001b54

0800a220 <_fwalk_sglue>:
 800a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a224:	4607      	mov	r7, r0
 800a226:	4688      	mov	r8, r1
 800a228:	4614      	mov	r4, r2
 800a22a:	2600      	movs	r6, #0
 800a22c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a230:	f1b9 0901 	subs.w	r9, r9, #1
 800a234:	d505      	bpl.n	800a242 <_fwalk_sglue+0x22>
 800a236:	6824      	ldr	r4, [r4, #0]
 800a238:	2c00      	cmp	r4, #0
 800a23a:	d1f7      	bne.n	800a22c <_fwalk_sglue+0xc>
 800a23c:	4630      	mov	r0, r6
 800a23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d907      	bls.n	800a258 <_fwalk_sglue+0x38>
 800a248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a24c:	3301      	adds	r3, #1
 800a24e:	d003      	beq.n	800a258 <_fwalk_sglue+0x38>
 800a250:	4629      	mov	r1, r5
 800a252:	4638      	mov	r0, r7
 800a254:	47c0      	blx	r8
 800a256:	4306      	orrs	r6, r0
 800a258:	3568      	adds	r5, #104	; 0x68
 800a25a:	e7e9      	b.n	800a230 <_fwalk_sglue+0x10>

0800a25c <iprintf>:
 800a25c:	b40f      	push	{r0, r1, r2, r3}
 800a25e:	b507      	push	{r0, r1, r2, lr}
 800a260:	4906      	ldr	r1, [pc, #24]	; (800a27c <iprintf+0x20>)
 800a262:	ab04      	add	r3, sp, #16
 800a264:	6808      	ldr	r0, [r1, #0]
 800a266:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26a:	6881      	ldr	r1, [r0, #8]
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	f001 ff07 	bl	800c080 <_vfiprintf_r>
 800a272:	b003      	add	sp, #12
 800a274:	f85d eb04 	ldr.w	lr, [sp], #4
 800a278:	b004      	add	sp, #16
 800a27a:	4770      	bx	lr
 800a27c:	20000068 	.word	0x20000068

0800a280 <_puts_r>:
 800a280:	6a03      	ldr	r3, [r0, #32]
 800a282:	b570      	push	{r4, r5, r6, lr}
 800a284:	6884      	ldr	r4, [r0, #8]
 800a286:	4605      	mov	r5, r0
 800a288:	460e      	mov	r6, r1
 800a28a:	b90b      	cbnz	r3, 800a290 <_puts_r+0x10>
 800a28c:	f7ff ffb0 	bl	800a1f0 <__sinit>
 800a290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a292:	07db      	lsls	r3, r3, #31
 800a294:	d405      	bmi.n	800a2a2 <_puts_r+0x22>
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	0598      	lsls	r0, r3, #22
 800a29a:	d402      	bmi.n	800a2a2 <_puts_r+0x22>
 800a29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a29e:	f000 fa75 	bl	800a78c <__retarget_lock_acquire_recursive>
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	0719      	lsls	r1, r3, #28
 800a2a6:	d513      	bpl.n	800a2d0 <_puts_r+0x50>
 800a2a8:	6923      	ldr	r3, [r4, #16]
 800a2aa:	b18b      	cbz	r3, 800a2d0 <_puts_r+0x50>
 800a2ac:	3e01      	subs	r6, #1
 800a2ae:	68a3      	ldr	r3, [r4, #8]
 800a2b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	60a3      	str	r3, [r4, #8]
 800a2b8:	b9e9      	cbnz	r1, 800a2f6 <_puts_r+0x76>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	da2e      	bge.n	800a31c <_puts_r+0x9c>
 800a2be:	4622      	mov	r2, r4
 800a2c0:	210a      	movs	r1, #10
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f000 f951 	bl	800a56a <__swbuf_r>
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d007      	beq.n	800a2dc <_puts_r+0x5c>
 800a2cc:	250a      	movs	r5, #10
 800a2ce:	e007      	b.n	800a2e0 <_puts_r+0x60>
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f000 f986 	bl	800a5e4 <__swsetup_r>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d0e7      	beq.n	800a2ac <_puts_r+0x2c>
 800a2dc:	f04f 35ff 	mov.w	r5, #4294967295
 800a2e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2e2:	07da      	lsls	r2, r3, #31
 800a2e4:	d405      	bmi.n	800a2f2 <_puts_r+0x72>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	059b      	lsls	r3, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_puts_r+0x72>
 800a2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ee:	f000 fa4e 	bl	800a78e <__retarget_lock_release_recursive>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	da04      	bge.n	800a304 <_puts_r+0x84>
 800a2fa:	69a2      	ldr	r2, [r4, #24]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	dc06      	bgt.n	800a30e <_puts_r+0x8e>
 800a300:	290a      	cmp	r1, #10
 800a302:	d004      	beq.n	800a30e <_puts_r+0x8e>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	6022      	str	r2, [r4, #0]
 800a30a:	7019      	strb	r1, [r3, #0]
 800a30c:	e7cf      	b.n	800a2ae <_puts_r+0x2e>
 800a30e:	4622      	mov	r2, r4
 800a310:	4628      	mov	r0, r5
 800a312:	f000 f92a 	bl	800a56a <__swbuf_r>
 800a316:	3001      	adds	r0, #1
 800a318:	d1c9      	bne.n	800a2ae <_puts_r+0x2e>
 800a31a:	e7df      	b.n	800a2dc <_puts_r+0x5c>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	250a      	movs	r5, #10
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	6022      	str	r2, [r4, #0]
 800a324:	701d      	strb	r5, [r3, #0]
 800a326:	e7db      	b.n	800a2e0 <_puts_r+0x60>

0800a328 <puts>:
 800a328:	4b02      	ldr	r3, [pc, #8]	; (800a334 <puts+0xc>)
 800a32a:	4601      	mov	r1, r0
 800a32c:	6818      	ldr	r0, [r3, #0]
 800a32e:	f7ff bfa7 	b.w	800a280 <_puts_r>
 800a332:	bf00      	nop
 800a334:	20000068 	.word	0x20000068

0800a338 <setbuf>:
 800a338:	fab1 f281 	clz	r2, r1
 800a33c:	0952      	lsrs	r2, r2, #5
 800a33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a342:	0052      	lsls	r2, r2, #1
 800a344:	f000 b800 	b.w	800a348 <setvbuf>

0800a348 <setvbuf>:
 800a348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a34c:	461d      	mov	r5, r3
 800a34e:	4b54      	ldr	r3, [pc, #336]	; (800a4a0 <setvbuf+0x158>)
 800a350:	681f      	ldr	r7, [r3, #0]
 800a352:	4604      	mov	r4, r0
 800a354:	460e      	mov	r6, r1
 800a356:	4690      	mov	r8, r2
 800a358:	b127      	cbz	r7, 800a364 <setvbuf+0x1c>
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	b913      	cbnz	r3, 800a364 <setvbuf+0x1c>
 800a35e:	4638      	mov	r0, r7
 800a360:	f7ff ff46 	bl	800a1f0 <__sinit>
 800a364:	f1b8 0f02 	cmp.w	r8, #2
 800a368:	d006      	beq.n	800a378 <setvbuf+0x30>
 800a36a:	f1b8 0f01 	cmp.w	r8, #1
 800a36e:	f200 8094 	bhi.w	800a49a <setvbuf+0x152>
 800a372:	2d00      	cmp	r5, #0
 800a374:	f2c0 8091 	blt.w	800a49a <setvbuf+0x152>
 800a378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a37a:	07da      	lsls	r2, r3, #31
 800a37c:	d405      	bmi.n	800a38a <setvbuf+0x42>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	059b      	lsls	r3, r3, #22
 800a382:	d402      	bmi.n	800a38a <setvbuf+0x42>
 800a384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a386:	f000 fa01 	bl	800a78c <__retarget_lock_acquire_recursive>
 800a38a:	4621      	mov	r1, r4
 800a38c:	4638      	mov	r0, r7
 800a38e:	f002 f817 	bl	800c3c0 <_fflush_r>
 800a392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a394:	b141      	cbz	r1, 800a3a8 <setvbuf+0x60>
 800a396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a39a:	4299      	cmp	r1, r3
 800a39c:	d002      	beq.n	800a3a4 <setvbuf+0x5c>
 800a39e:	4638      	mov	r0, r7
 800a3a0:	f001 f870 	bl	800b484 <_free_r>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61a3      	str	r3, [r4, #24]
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	0618      	lsls	r0, r3, #24
 800a3b2:	d503      	bpl.n	800a3bc <setvbuf+0x74>
 800a3b4:	6921      	ldr	r1, [r4, #16]
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f001 f864 	bl	800b484 <_free_r>
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a3c2:	f023 0303 	bic.w	r3, r3, #3
 800a3c6:	f1b8 0f02 	cmp.w	r8, #2
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	d05f      	beq.n	800a48e <setvbuf+0x146>
 800a3ce:	ab01      	add	r3, sp, #4
 800a3d0:	466a      	mov	r2, sp
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	f002 f81b 	bl	800c410 <__swhatbuf_r>
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	4318      	orrs	r0, r3
 800a3de:	81a0      	strh	r0, [r4, #12]
 800a3e0:	bb2d      	cbnz	r5, 800a42e <setvbuf+0xe6>
 800a3e2:	9d00      	ldr	r5, [sp, #0]
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f001 f899 	bl	800b51c <malloc>
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d150      	bne.n	800a492 <setvbuf+0x14a>
 800a3f0:	f8dd 9000 	ldr.w	r9, [sp]
 800a3f4:	45a9      	cmp	r9, r5
 800a3f6:	d13e      	bne.n	800a476 <setvbuf+0x12e>
 800a3f8:	f04f 35ff 	mov.w	r5, #4294967295
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	60a2      	str	r2, [r4, #8]
 800a400:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	6122      	str	r2, [r4, #16]
 800a408:	2201      	movs	r2, #1
 800a40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a40e:	6162      	str	r2, [r4, #20]
 800a410:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a412:	f043 0302 	orr.w	r3, r3, #2
 800a416:	07d1      	lsls	r1, r2, #31
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	d404      	bmi.n	800a426 <setvbuf+0xde>
 800a41c:	059b      	lsls	r3, r3, #22
 800a41e:	d402      	bmi.n	800a426 <setvbuf+0xde>
 800a420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a422:	f000 f9b4 	bl	800a78e <__retarget_lock_release_recursive>
 800a426:	4628      	mov	r0, r5
 800a428:	b003      	add	sp, #12
 800a42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42e:	2e00      	cmp	r6, #0
 800a430:	d0d8      	beq.n	800a3e4 <setvbuf+0x9c>
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	b913      	cbnz	r3, 800a43c <setvbuf+0xf4>
 800a436:	4638      	mov	r0, r7
 800a438:	f7ff feda 	bl	800a1f0 <__sinit>
 800a43c:	f1b8 0f01 	cmp.w	r8, #1
 800a440:	bf08      	it	eq
 800a442:	89a3      	ldrheq	r3, [r4, #12]
 800a444:	6026      	str	r6, [r4, #0]
 800a446:	bf04      	itt	eq
 800a448:	f043 0301 	orreq.w	r3, r3, #1
 800a44c:	81a3      	strheq	r3, [r4, #12]
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	f013 0208 	ands.w	r2, r3, #8
 800a454:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a458:	d01d      	beq.n	800a496 <setvbuf+0x14e>
 800a45a:	07da      	lsls	r2, r3, #31
 800a45c:	bf41      	itttt	mi
 800a45e:	2200      	movmi	r2, #0
 800a460:	426d      	negmi	r5, r5
 800a462:	60a2      	strmi	r2, [r4, #8]
 800a464:	61a5      	strmi	r5, [r4, #24]
 800a466:	bf58      	it	pl
 800a468:	60a5      	strpl	r5, [r4, #8]
 800a46a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a46c:	f015 0501 	ands.w	r5, r5, #1
 800a470:	d0d4      	beq.n	800a41c <setvbuf+0xd4>
 800a472:	2500      	movs	r5, #0
 800a474:	e7d7      	b.n	800a426 <setvbuf+0xde>
 800a476:	4648      	mov	r0, r9
 800a478:	f001 f850 	bl	800b51c <malloc>
 800a47c:	4606      	mov	r6, r0
 800a47e:	2800      	cmp	r0, #0
 800a480:	d0ba      	beq.n	800a3f8 <setvbuf+0xb0>
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	464d      	mov	r5, r9
 800a48c:	e7d1      	b.n	800a432 <setvbuf+0xea>
 800a48e:	2500      	movs	r5, #0
 800a490:	e7b4      	b.n	800a3fc <setvbuf+0xb4>
 800a492:	46a9      	mov	r9, r5
 800a494:	e7f5      	b.n	800a482 <setvbuf+0x13a>
 800a496:	60a2      	str	r2, [r4, #8]
 800a498:	e7e7      	b.n	800a46a <setvbuf+0x122>
 800a49a:	f04f 35ff 	mov.w	r5, #4294967295
 800a49e:	e7c2      	b.n	800a426 <setvbuf+0xde>
 800a4a0:	20000068 	.word	0x20000068

0800a4a4 <siprintf>:
 800a4a4:	b40e      	push	{r1, r2, r3}
 800a4a6:	b500      	push	{lr}
 800a4a8:	b09c      	sub	sp, #112	; 0x70
 800a4aa:	ab1d      	add	r3, sp, #116	; 0x74
 800a4ac:	9002      	str	r0, [sp, #8]
 800a4ae:	9006      	str	r0, [sp, #24]
 800a4b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4b4:	4809      	ldr	r0, [pc, #36]	; (800a4dc <siprintf+0x38>)
 800a4b6:	9107      	str	r1, [sp, #28]
 800a4b8:	9104      	str	r1, [sp, #16]
 800a4ba:	4909      	ldr	r1, [pc, #36]	; (800a4e0 <siprintf+0x3c>)
 800a4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c0:	9105      	str	r1, [sp, #20]
 800a4c2:	6800      	ldr	r0, [r0, #0]
 800a4c4:	9301      	str	r3, [sp, #4]
 800a4c6:	a902      	add	r1, sp, #8
 800a4c8:	f001 fcb2 	bl	800be30 <_svfiprintf_r>
 800a4cc:	9b02      	ldr	r3, [sp, #8]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
 800a4d2:	b01c      	add	sp, #112	; 0x70
 800a4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4d8:	b003      	add	sp, #12
 800a4da:	4770      	bx	lr
 800a4dc:	20000068 	.word	0x20000068
 800a4e0:	ffff0208 	.word	0xffff0208

0800a4e4 <__sread>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ec:	f000 f900 	bl	800a6f0 <_read_r>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	bfab      	itete	ge
 800a4f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f8:	181b      	addge	r3, r3, r0
 800a4fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4fe:	bfac      	ite	ge
 800a500:	6563      	strge	r3, [r4, #84]	; 0x54
 800a502:	81a3      	strhlt	r3, [r4, #12]
 800a504:	bd10      	pop	{r4, pc}

0800a506 <__swrite>:
 800a506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	461f      	mov	r7, r3
 800a50c:	898b      	ldrh	r3, [r1, #12]
 800a50e:	05db      	lsls	r3, r3, #23
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4616      	mov	r6, r2
 800a516:	d505      	bpl.n	800a524 <__swrite+0x1e>
 800a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51c:	2302      	movs	r3, #2
 800a51e:	2200      	movs	r2, #0
 800a520:	f000 f8d4 	bl	800a6cc <_lseek_r>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	4632      	mov	r2, r6
 800a532:	463b      	mov	r3, r7
 800a534:	4628      	mov	r0, r5
 800a536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	f000 b8eb 	b.w	800a714 <_write_r>

0800a53e <__sseek>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a546:	f000 f8c1 	bl	800a6cc <_lseek_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	bf15      	itete	ne
 800a550:	6560      	strne	r0, [r4, #84]	; 0x54
 800a552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a55a:	81a3      	strheq	r3, [r4, #12]
 800a55c:	bf18      	it	ne
 800a55e:	81a3      	strhne	r3, [r4, #12]
 800a560:	bd10      	pop	{r4, pc}

0800a562 <__sclose>:
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f000 b8a1 	b.w	800a6ac <_close_r>

0800a56a <__swbuf_r>:
 800a56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56c:	460e      	mov	r6, r1
 800a56e:	4614      	mov	r4, r2
 800a570:	4605      	mov	r5, r0
 800a572:	b118      	cbz	r0, 800a57c <__swbuf_r+0x12>
 800a574:	6a03      	ldr	r3, [r0, #32]
 800a576:	b90b      	cbnz	r3, 800a57c <__swbuf_r+0x12>
 800a578:	f7ff fe3a 	bl	800a1f0 <__sinit>
 800a57c:	69a3      	ldr	r3, [r4, #24]
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	071a      	lsls	r2, r3, #28
 800a584:	d525      	bpl.n	800a5d2 <__swbuf_r+0x68>
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	b31b      	cbz	r3, 800a5d2 <__swbuf_r+0x68>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	6922      	ldr	r2, [r4, #16]
 800a58e:	1a98      	subs	r0, r3, r2
 800a590:	6963      	ldr	r3, [r4, #20]
 800a592:	b2f6      	uxtb	r6, r6
 800a594:	4283      	cmp	r3, r0
 800a596:	4637      	mov	r7, r6
 800a598:	dc04      	bgt.n	800a5a4 <__swbuf_r+0x3a>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4628      	mov	r0, r5
 800a59e:	f001 ff0f 	bl	800c3c0 <_fflush_r>
 800a5a2:	b9e0      	cbnz	r0, 800a5de <__swbuf_r+0x74>
 800a5a4:	68a3      	ldr	r3, [r4, #8]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	60a3      	str	r3, [r4, #8]
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	6022      	str	r2, [r4, #0]
 800a5b0:	701e      	strb	r6, [r3, #0]
 800a5b2:	6962      	ldr	r2, [r4, #20]
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d004      	beq.n	800a5c4 <__swbuf_r+0x5a>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	07db      	lsls	r3, r3, #31
 800a5be:	d506      	bpl.n	800a5ce <__swbuf_r+0x64>
 800a5c0:	2e0a      	cmp	r6, #10
 800a5c2:	d104      	bne.n	800a5ce <__swbuf_r+0x64>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f001 fefa 	bl	800c3c0 <_fflush_r>
 800a5cc:	b938      	cbnz	r0, 800a5de <__swbuf_r+0x74>
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f000 f805 	bl	800a5e4 <__swsetup_r>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d0d5      	beq.n	800a58a <__swbuf_r+0x20>
 800a5de:	f04f 37ff 	mov.w	r7, #4294967295
 800a5e2:	e7f4      	b.n	800a5ce <__swbuf_r+0x64>

0800a5e4 <__swsetup_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4b2a      	ldr	r3, [pc, #168]	; (800a690 <__swsetup_r+0xac>)
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	6818      	ldr	r0, [r3, #0]
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	b118      	cbz	r0, 800a5f8 <__swsetup_r+0x14>
 800a5f0:	6a03      	ldr	r3, [r0, #32]
 800a5f2:	b90b      	cbnz	r3, 800a5f8 <__swsetup_r+0x14>
 800a5f4:	f7ff fdfc 	bl	800a1f0 <__sinit>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5fe:	0718      	lsls	r0, r3, #28
 800a600:	d422      	bmi.n	800a648 <__swsetup_r+0x64>
 800a602:	06d9      	lsls	r1, r3, #27
 800a604:	d407      	bmi.n	800a616 <__swsetup_r+0x32>
 800a606:	2309      	movs	r3, #9
 800a608:	602b      	str	r3, [r5, #0]
 800a60a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a60e:	81a3      	strh	r3, [r4, #12]
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	e034      	b.n	800a680 <__swsetup_r+0x9c>
 800a616:	0758      	lsls	r0, r3, #29
 800a618:	d512      	bpl.n	800a640 <__swsetup_r+0x5c>
 800a61a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a61c:	b141      	cbz	r1, 800a630 <__swsetup_r+0x4c>
 800a61e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a622:	4299      	cmp	r1, r3
 800a624:	d002      	beq.n	800a62c <__swsetup_r+0x48>
 800a626:	4628      	mov	r0, r5
 800a628:	f000 ff2c 	bl	800b484 <_free_r>
 800a62c:	2300      	movs	r3, #0
 800a62e:	6363      	str	r3, [r4, #52]	; 0x34
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a636:	81a3      	strh	r3, [r4, #12]
 800a638:	2300      	movs	r3, #0
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f043 0308 	orr.w	r3, r3, #8
 800a646:	81a3      	strh	r3, [r4, #12]
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	b94b      	cbnz	r3, 800a660 <__swsetup_r+0x7c>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a656:	d003      	beq.n	800a660 <__swsetup_r+0x7c>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f001 fefe 	bl	800c45c <__smakebuf_r>
 800a660:	89a0      	ldrh	r0, [r4, #12]
 800a662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a666:	f010 0301 	ands.w	r3, r0, #1
 800a66a:	d00a      	beq.n	800a682 <__swsetup_r+0x9e>
 800a66c:	2300      	movs	r3, #0
 800a66e:	60a3      	str	r3, [r4, #8]
 800a670:	6963      	ldr	r3, [r4, #20]
 800a672:	425b      	negs	r3, r3
 800a674:	61a3      	str	r3, [r4, #24]
 800a676:	6923      	ldr	r3, [r4, #16]
 800a678:	b943      	cbnz	r3, 800a68c <__swsetup_r+0xa8>
 800a67a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a67e:	d1c4      	bne.n	800a60a <__swsetup_r+0x26>
 800a680:	bd38      	pop	{r3, r4, r5, pc}
 800a682:	0781      	lsls	r1, r0, #30
 800a684:	bf58      	it	pl
 800a686:	6963      	ldrpl	r3, [r4, #20]
 800a688:	60a3      	str	r3, [r4, #8]
 800a68a:	e7f4      	b.n	800a676 <__swsetup_r+0x92>
 800a68c:	2000      	movs	r0, #0
 800a68e:	e7f7      	b.n	800a680 <__swsetup_r+0x9c>
 800a690:	20000068 	.word	0x20000068

0800a694 <memset>:
 800a694:	4402      	add	r2, r0
 800a696:	4603      	mov	r3, r0
 800a698:	4293      	cmp	r3, r2
 800a69a:	d100      	bne.n	800a69e <memset+0xa>
 800a69c:	4770      	bx	lr
 800a69e:	f803 1b01 	strb.w	r1, [r3], #1
 800a6a2:	e7f9      	b.n	800a698 <memset+0x4>

0800a6a4 <_localeconv_r>:
 800a6a4:	4800      	ldr	r0, [pc, #0]	; (800a6a8 <_localeconv_r+0x4>)
 800a6a6:	4770      	bx	lr
 800a6a8:	2000015c 	.word	0x2000015c

0800a6ac <_close_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d06      	ldr	r5, [pc, #24]	; (800a6c8 <_close_r+0x1c>)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	f7fa f856 	bl	8004768 <_close>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d102      	bne.n	800a6c6 <_close_r+0x1a>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b103      	cbz	r3, 800a6c6 <_close_r+0x1a>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	20001b58 	.word	0x20001b58

0800a6cc <_lseek_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4d07      	ldr	r5, [pc, #28]	; (800a6ec <_lseek_r+0x20>)
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	4608      	mov	r0, r1
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	602a      	str	r2, [r5, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f7fa f850 	bl	8004780 <_lseek>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_lseek_r+0x1e>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_lseek_r+0x1e>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	20001b58 	.word	0x20001b58

0800a6f0 <_read_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d07      	ldr	r5, [pc, #28]	; (800a710 <_read_r+0x20>)
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	4608      	mov	r0, r1
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	602a      	str	r2, [r5, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f7fa f816 	bl	8004730 <_read>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_read_r+0x1e>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_read_r+0x1e>
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	20001b58 	.word	0x20001b58

0800a714 <_write_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d07      	ldr	r5, [pc, #28]	; (800a734 <_write_r+0x20>)
 800a718:	4604      	mov	r4, r0
 800a71a:	4608      	mov	r0, r1
 800a71c:	4611      	mov	r1, r2
 800a71e:	2200      	movs	r2, #0
 800a720:	602a      	str	r2, [r5, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	f7fa f812 	bl	800474c <_write>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_write_r+0x1e>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_write_r+0x1e>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	20001b58 	.word	0x20001b58

0800a738 <__errno>:
 800a738:	4b01      	ldr	r3, [pc, #4]	; (800a740 <__errno+0x8>)
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	20000068 	.word	0x20000068

0800a744 <__libc_init_array>:
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	4d0d      	ldr	r5, [pc, #52]	; (800a77c <__libc_init_array+0x38>)
 800a748:	4c0d      	ldr	r4, [pc, #52]	; (800a780 <__libc_init_array+0x3c>)
 800a74a:	1b64      	subs	r4, r4, r5
 800a74c:	10a4      	asrs	r4, r4, #2
 800a74e:	2600      	movs	r6, #0
 800a750:	42a6      	cmp	r6, r4
 800a752:	d109      	bne.n	800a768 <__libc_init_array+0x24>
 800a754:	4d0b      	ldr	r5, [pc, #44]	; (800a784 <__libc_init_array+0x40>)
 800a756:	4c0c      	ldr	r4, [pc, #48]	; (800a788 <__libc_init_array+0x44>)
 800a758:	f003 f8a0 	bl	800d89c <_init>
 800a75c:	1b64      	subs	r4, r4, r5
 800a75e:	10a4      	asrs	r4, r4, #2
 800a760:	2600      	movs	r6, #0
 800a762:	42a6      	cmp	r6, r4
 800a764:	d105      	bne.n	800a772 <__libc_init_array+0x2e>
 800a766:	bd70      	pop	{r4, r5, r6, pc}
 800a768:	f855 3b04 	ldr.w	r3, [r5], #4
 800a76c:	4798      	blx	r3
 800a76e:	3601      	adds	r6, #1
 800a770:	e7ee      	b.n	800a750 <__libc_init_array+0xc>
 800a772:	f855 3b04 	ldr.w	r3, [r5], #4
 800a776:	4798      	blx	r3
 800a778:	3601      	adds	r6, #1
 800a77a:	e7f2      	b.n	800a762 <__libc_init_array+0x1e>
 800a77c:	0800df38 	.word	0x0800df38
 800a780:	0800df38 	.word	0x0800df38
 800a784:	0800df38 	.word	0x0800df38
 800a788:	0800df3c 	.word	0x0800df3c

0800a78c <__retarget_lock_acquire_recursive>:
 800a78c:	4770      	bx	lr

0800a78e <__retarget_lock_release_recursive>:
 800a78e:	4770      	bx	lr

0800a790 <quorem>:
 800a790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	6903      	ldr	r3, [r0, #16]
 800a796:	690c      	ldr	r4, [r1, #16]
 800a798:	42a3      	cmp	r3, r4
 800a79a:	4607      	mov	r7, r0
 800a79c:	db7e      	blt.n	800a89c <quorem+0x10c>
 800a79e:	3c01      	subs	r4, #1
 800a7a0:	f101 0814 	add.w	r8, r1, #20
 800a7a4:	f100 0514 	add.w	r5, r0, #20
 800a7a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7c2:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7c6:	d331      	bcc.n	800a82c <quorem+0x9c>
 800a7c8:	f04f 0e00 	mov.w	lr, #0
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	46ac      	mov	ip, r5
 800a7d0:	46f2      	mov	sl, lr
 800a7d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7d6:	b293      	uxth	r3, r2
 800a7d8:	fb06 e303 	mla	r3, r6, r3, lr
 800a7dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7e0:	0c1a      	lsrs	r2, r3, #16
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a7e8:	f8dc a000 	ldr.w	sl, [ip]
 800a7ec:	fa13 f38a 	uxtah	r3, r3, sl
 800a7f0:	fb06 220e 	mla	r2, r6, lr, r2
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7fc:	b292      	uxth	r2, r2
 800a7fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a802:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a806:	f8bd 3000 	ldrh.w	r3, [sp]
 800a80a:	4581      	cmp	r9, r0
 800a80c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a810:	f84c 3b04 	str.w	r3, [ip], #4
 800a814:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a818:	d2db      	bcs.n	800a7d2 <quorem+0x42>
 800a81a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a81e:	b92b      	cbnz	r3, 800a82c <quorem+0x9c>
 800a820:	9b01      	ldr	r3, [sp, #4]
 800a822:	3b04      	subs	r3, #4
 800a824:	429d      	cmp	r5, r3
 800a826:	461a      	mov	r2, r3
 800a828:	d32c      	bcc.n	800a884 <quorem+0xf4>
 800a82a:	613c      	str	r4, [r7, #16]
 800a82c:	4638      	mov	r0, r7
 800a82e:	f001 f9a5 	bl	800bb7c <__mcmp>
 800a832:	2800      	cmp	r0, #0
 800a834:	db22      	blt.n	800a87c <quorem+0xec>
 800a836:	3601      	adds	r6, #1
 800a838:	4629      	mov	r1, r5
 800a83a:	2000      	movs	r0, #0
 800a83c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a840:	f8d1 c000 	ldr.w	ip, [r1]
 800a844:	b293      	uxth	r3, r2
 800a846:	1ac3      	subs	r3, r0, r3
 800a848:	0c12      	lsrs	r2, r2, #16
 800a84a:	fa13 f38c 	uxtah	r3, r3, ip
 800a84e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a852:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a856:	b29b      	uxth	r3, r3
 800a858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a85c:	45c1      	cmp	r9, r8
 800a85e:	f841 3b04 	str.w	r3, [r1], #4
 800a862:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a866:	d2e9      	bcs.n	800a83c <quorem+0xac>
 800a868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a86c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a870:	b922      	cbnz	r2, 800a87c <quorem+0xec>
 800a872:	3b04      	subs	r3, #4
 800a874:	429d      	cmp	r5, r3
 800a876:	461a      	mov	r2, r3
 800a878:	d30a      	bcc.n	800a890 <quorem+0x100>
 800a87a:	613c      	str	r4, [r7, #16]
 800a87c:	4630      	mov	r0, r6
 800a87e:	b003      	add	sp, #12
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	3b04      	subs	r3, #4
 800a888:	2a00      	cmp	r2, #0
 800a88a:	d1ce      	bne.n	800a82a <quorem+0x9a>
 800a88c:	3c01      	subs	r4, #1
 800a88e:	e7c9      	b.n	800a824 <quorem+0x94>
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	3b04      	subs	r3, #4
 800a894:	2a00      	cmp	r2, #0
 800a896:	d1f0      	bne.n	800a87a <quorem+0xea>
 800a898:	3c01      	subs	r4, #1
 800a89a:	e7eb      	b.n	800a874 <quorem+0xe4>
 800a89c:	2000      	movs	r0, #0
 800a89e:	e7ee      	b.n	800a87e <quorem+0xee>

0800a8a0 <_dtoa_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	ed2d 8b04 	vpush	{d8-d9}
 800a8a8:	69c5      	ldr	r5, [r0, #28]
 800a8aa:	b093      	sub	sp, #76	; 0x4c
 800a8ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8b0:	ec57 6b10 	vmov	r6, r7, d0
 800a8b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8b8:	9107      	str	r1, [sp, #28]
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a8be:	930d      	str	r3, [sp, #52]	; 0x34
 800a8c0:	b975      	cbnz	r5, 800a8e0 <_dtoa_r+0x40>
 800a8c2:	2010      	movs	r0, #16
 800a8c4:	f000 fe2a 	bl	800b51c <malloc>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	61e0      	str	r0, [r4, #28]
 800a8cc:	b920      	cbnz	r0, 800a8d8 <_dtoa_r+0x38>
 800a8ce:	4bae      	ldr	r3, [pc, #696]	; (800ab88 <_dtoa_r+0x2e8>)
 800a8d0:	21ef      	movs	r1, #239	; 0xef
 800a8d2:	48ae      	ldr	r0, [pc, #696]	; (800ab8c <_dtoa_r+0x2ec>)
 800a8d4:	f001 fe58 	bl	800c588 <__assert_func>
 800a8d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8dc:	6005      	str	r5, [r0, #0]
 800a8de:	60c5      	str	r5, [r0, #12]
 800a8e0:	69e3      	ldr	r3, [r4, #28]
 800a8e2:	6819      	ldr	r1, [r3, #0]
 800a8e4:	b151      	cbz	r1, 800a8fc <_dtoa_r+0x5c>
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	604a      	str	r2, [r1, #4]
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	4093      	lsls	r3, r2
 800a8ee:	608b      	str	r3, [r1, #8]
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f000 ff07 	bl	800b704 <_Bfree>
 800a8f6:	69e3      	ldr	r3, [r4, #28]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	1e3b      	subs	r3, r7, #0
 800a8fe:	bfbb      	ittet	lt
 800a900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a904:	9303      	strlt	r3, [sp, #12]
 800a906:	2300      	movge	r3, #0
 800a908:	2201      	movlt	r2, #1
 800a90a:	bfac      	ite	ge
 800a90c:	f8c8 3000 	strge.w	r3, [r8]
 800a910:	f8c8 2000 	strlt.w	r2, [r8]
 800a914:	4b9e      	ldr	r3, [pc, #632]	; (800ab90 <_dtoa_r+0x2f0>)
 800a916:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a91a:	ea33 0308 	bics.w	r3, r3, r8
 800a91e:	d11b      	bne.n	800a958 <_dtoa_r+0xb8>
 800a920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a922:	f242 730f 	movw	r3, #9999	; 0x270f
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a92c:	4333      	orrs	r3, r6
 800a92e:	f000 8593 	beq.w	800b458 <_dtoa_r+0xbb8>
 800a932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a934:	b963      	cbnz	r3, 800a950 <_dtoa_r+0xb0>
 800a936:	4b97      	ldr	r3, [pc, #604]	; (800ab94 <_dtoa_r+0x2f4>)
 800a938:	e027      	b.n	800a98a <_dtoa_r+0xea>
 800a93a:	4b97      	ldr	r3, [pc, #604]	; (800ab98 <_dtoa_r+0x2f8>)
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	3308      	adds	r3, #8
 800a940:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a942:	6013      	str	r3, [r2, #0]
 800a944:	9800      	ldr	r0, [sp, #0]
 800a946:	b013      	add	sp, #76	; 0x4c
 800a948:	ecbd 8b04 	vpop	{d8-d9}
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	4b90      	ldr	r3, [pc, #576]	; (800ab94 <_dtoa_r+0x2f4>)
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	3303      	adds	r3, #3
 800a956:	e7f3      	b.n	800a940 <_dtoa_r+0xa0>
 800a958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a95c:	2200      	movs	r2, #0
 800a95e:	ec51 0b17 	vmov	r0, r1, d7
 800a962:	eeb0 8a47 	vmov.f32	s16, s14
 800a966:	eef0 8a67 	vmov.f32	s17, s15
 800a96a:	2300      	movs	r3, #0
 800a96c:	f7f6 f8d4 	bl	8000b18 <__aeabi_dcmpeq>
 800a970:	4681      	mov	r9, r0
 800a972:	b160      	cbz	r0, 800a98e <_dtoa_r+0xee>
 800a974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a976:	2301      	movs	r3, #1
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8568 	beq.w	800b452 <_dtoa_r+0xbb2>
 800a982:	4b86      	ldr	r3, [pc, #536]	; (800ab9c <_dtoa_r+0x2fc>)
 800a984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	3b01      	subs	r3, #1
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	e7da      	b.n	800a944 <_dtoa_r+0xa4>
 800a98e:	aa10      	add	r2, sp, #64	; 0x40
 800a990:	a911      	add	r1, sp, #68	; 0x44
 800a992:	4620      	mov	r0, r4
 800a994:	eeb0 0a48 	vmov.f32	s0, s16
 800a998:	eef0 0a68 	vmov.f32	s1, s17
 800a99c:	f001 f994 	bl	800bcc8 <__d2b>
 800a9a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9a4:	4682      	mov	sl, r0
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	d07f      	beq.n	800aaaa <_dtoa_r+0x20a>
 800a9aa:	ee18 3a90 	vmov	r3, s17
 800a9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a9b6:	ec51 0b18 	vmov	r0, r1, d8
 800a9ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4b75      	ldr	r3, [pc, #468]	; (800aba0 <_dtoa_r+0x300>)
 800a9cc:	f7f5 fc84 	bl	80002d8 <__aeabi_dsub>
 800a9d0:	a367      	add	r3, pc, #412	; (adr r3, 800ab70 <_dtoa_r+0x2d0>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f7f5 fe37 	bl	8000648 <__aeabi_dmul>
 800a9da:	a367      	add	r3, pc, #412	; (adr r3, 800ab78 <_dtoa_r+0x2d8>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 fc7c 	bl	80002dc <__adddf3>
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	460f      	mov	r7, r1
 800a9ea:	f7f5 fdc3 	bl	8000574 <__aeabi_i2d>
 800a9ee:	a364      	add	r3, pc, #400	; (adr r3, 800ab80 <_dtoa_r+0x2e0>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7f5 fe28 	bl	8000648 <__aeabi_dmul>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f5 fc6c 	bl	80002dc <__adddf3>
 800aa04:	4606      	mov	r6, r0
 800aa06:	460f      	mov	r7, r1
 800aa08:	f7f6 f8ce 	bl	8000ba8 <__aeabi_d2iz>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4683      	mov	fp, r0
 800aa10:	2300      	movs	r3, #0
 800aa12:	4630      	mov	r0, r6
 800aa14:	4639      	mov	r1, r7
 800aa16:	f7f6 f889 	bl	8000b2c <__aeabi_dcmplt>
 800aa1a:	b148      	cbz	r0, 800aa30 <_dtoa_r+0x190>
 800aa1c:	4658      	mov	r0, fp
 800aa1e:	f7f5 fda9 	bl	8000574 <__aeabi_i2d>
 800aa22:	4632      	mov	r2, r6
 800aa24:	463b      	mov	r3, r7
 800aa26:	f7f6 f877 	bl	8000b18 <__aeabi_dcmpeq>
 800aa2a:	b908      	cbnz	r0, 800aa30 <_dtoa_r+0x190>
 800aa2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa30:	f1bb 0f16 	cmp.w	fp, #22
 800aa34:	d857      	bhi.n	800aae6 <_dtoa_r+0x246>
 800aa36:	4b5b      	ldr	r3, [pc, #364]	; (800aba4 <_dtoa_r+0x304>)
 800aa38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	ec51 0b18 	vmov	r0, r1, d8
 800aa44:	f7f6 f872 	bl	8000b2c <__aeabi_dcmplt>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d04e      	beq.n	800aaea <_dtoa_r+0x24a>
 800aa4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa50:	2300      	movs	r3, #0
 800aa52:	930c      	str	r3, [sp, #48]	; 0x30
 800aa54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa56:	1b5b      	subs	r3, r3, r5
 800aa58:	1e5a      	subs	r2, r3, #1
 800aa5a:	bf45      	ittet	mi
 800aa5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa60:	9305      	strmi	r3, [sp, #20]
 800aa62:	2300      	movpl	r3, #0
 800aa64:	2300      	movmi	r3, #0
 800aa66:	9206      	str	r2, [sp, #24]
 800aa68:	bf54      	ite	pl
 800aa6a:	9305      	strpl	r3, [sp, #20]
 800aa6c:	9306      	strmi	r3, [sp, #24]
 800aa6e:	f1bb 0f00 	cmp.w	fp, #0
 800aa72:	db3c      	blt.n	800aaee <_dtoa_r+0x24e>
 800aa74:	9b06      	ldr	r3, [sp, #24]
 800aa76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa7a:	445b      	add	r3, fp
 800aa7c:	9306      	str	r3, [sp, #24]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9308      	str	r3, [sp, #32]
 800aa82:	9b07      	ldr	r3, [sp, #28]
 800aa84:	2b09      	cmp	r3, #9
 800aa86:	d868      	bhi.n	800ab5a <_dtoa_r+0x2ba>
 800aa88:	2b05      	cmp	r3, #5
 800aa8a:	bfc4      	itt	gt
 800aa8c:	3b04      	subgt	r3, #4
 800aa8e:	9307      	strgt	r3, [sp, #28]
 800aa90:	9b07      	ldr	r3, [sp, #28]
 800aa92:	f1a3 0302 	sub.w	r3, r3, #2
 800aa96:	bfcc      	ite	gt
 800aa98:	2500      	movgt	r5, #0
 800aa9a:	2501      	movle	r5, #1
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	f200 8085 	bhi.w	800abac <_dtoa_r+0x30c>
 800aaa2:	e8df f003 	tbb	[pc, r3]
 800aaa6:	3b2e      	.short	0x3b2e
 800aaa8:	5839      	.short	0x5839
 800aaaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aaae:	441d      	add	r5, r3
 800aab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	bfc1      	itttt	gt
 800aab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aabc:	fa08 f803 	lslgt.w	r8, r8, r3
 800aac0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aac4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aac8:	bfd6      	itet	le
 800aaca:	f1c3 0320 	rsble	r3, r3, #32
 800aace:	ea48 0003 	orrgt.w	r0, r8, r3
 800aad2:	fa06 f003 	lslle.w	r0, r6, r3
 800aad6:	f7f5 fd3d 	bl	8000554 <__aeabi_ui2d>
 800aada:	2201      	movs	r2, #1
 800aadc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aae0:	3d01      	subs	r5, #1
 800aae2:	920e      	str	r2, [sp, #56]	; 0x38
 800aae4:	e76f      	b.n	800a9c6 <_dtoa_r+0x126>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e7b3      	b.n	800aa52 <_dtoa_r+0x1b2>
 800aaea:	900c      	str	r0, [sp, #48]	; 0x30
 800aaec:	e7b2      	b.n	800aa54 <_dtoa_r+0x1b4>
 800aaee:	9b05      	ldr	r3, [sp, #20]
 800aaf0:	eba3 030b 	sub.w	r3, r3, fp
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	f1cb 0300 	rsb	r3, fp, #0
 800aafa:	9308      	str	r3, [sp, #32]
 800aafc:	2300      	movs	r3, #0
 800aafe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab00:	e7bf      	b.n	800aa82 <_dtoa_r+0x1e2>
 800ab02:	2300      	movs	r3, #0
 800ab04:	9309      	str	r3, [sp, #36]	; 0x24
 800ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dc52      	bgt.n	800abb2 <_dtoa_r+0x312>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	9304      	str	r3, [sp, #16]
 800ab12:	461a      	mov	r2, r3
 800ab14:	920a      	str	r2, [sp, #40]	; 0x28
 800ab16:	e00b      	b.n	800ab30 <_dtoa_r+0x290>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e7f3      	b.n	800ab04 <_dtoa_r+0x264>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab22:	445b      	add	r3, fp
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	3301      	adds	r3, #1
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	bfb8      	it	lt
 800ab2e:	2301      	movlt	r3, #1
 800ab30:	69e0      	ldr	r0, [r4, #28]
 800ab32:	2100      	movs	r1, #0
 800ab34:	2204      	movs	r2, #4
 800ab36:	f102 0614 	add.w	r6, r2, #20
 800ab3a:	429e      	cmp	r6, r3
 800ab3c:	d93d      	bls.n	800abba <_dtoa_r+0x31a>
 800ab3e:	6041      	str	r1, [r0, #4]
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 fd9f 	bl	800b684 <_Balloc>
 800ab46:	9000      	str	r0, [sp, #0]
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d139      	bne.n	800abc0 <_dtoa_r+0x320>
 800ab4c:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <_dtoa_r+0x308>)
 800ab4e:	4602      	mov	r2, r0
 800ab50:	f240 11af 	movw	r1, #431	; 0x1af
 800ab54:	e6bd      	b.n	800a8d2 <_dtoa_r+0x32>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e7e1      	b.n	800ab1e <_dtoa_r+0x27e>
 800ab5a:	2501      	movs	r5, #1
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9307      	str	r3, [sp, #28]
 800ab60:	9509      	str	r5, [sp, #36]	; 0x24
 800ab62:	f04f 33ff 	mov.w	r3, #4294967295
 800ab66:	9301      	str	r3, [sp, #4]
 800ab68:	9304      	str	r3, [sp, #16]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2312      	movs	r3, #18
 800ab6e:	e7d1      	b.n	800ab14 <_dtoa_r+0x274>
 800ab70:	636f4361 	.word	0x636f4361
 800ab74:	3fd287a7 	.word	0x3fd287a7
 800ab78:	8b60c8b3 	.word	0x8b60c8b3
 800ab7c:	3fc68a28 	.word	0x3fc68a28
 800ab80:	509f79fb 	.word	0x509f79fb
 800ab84:	3fd34413 	.word	0x3fd34413
 800ab88:	0800da21 	.word	0x0800da21
 800ab8c:	0800da38 	.word	0x0800da38
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	0800da1d 	.word	0x0800da1d
 800ab98:	0800da14 	.word	0x0800da14
 800ab9c:	0800d9f1 	.word	0x0800d9f1
 800aba0:	3ff80000 	.word	0x3ff80000
 800aba4:	0800db28 	.word	0x0800db28
 800aba8:	0800da90 	.word	0x0800da90
 800abac:	2301      	movs	r3, #1
 800abae:	9309      	str	r3, [sp, #36]	; 0x24
 800abb0:	e7d7      	b.n	800ab62 <_dtoa_r+0x2c2>
 800abb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	9304      	str	r3, [sp, #16]
 800abb8:	e7ba      	b.n	800ab30 <_dtoa_r+0x290>
 800abba:	3101      	adds	r1, #1
 800abbc:	0052      	lsls	r2, r2, #1
 800abbe:	e7ba      	b.n	800ab36 <_dtoa_r+0x296>
 800abc0:	69e3      	ldr	r3, [r4, #28]
 800abc2:	9a00      	ldr	r2, [sp, #0]
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	2b0e      	cmp	r3, #14
 800abca:	f200 80a8 	bhi.w	800ad1e <_dtoa_r+0x47e>
 800abce:	2d00      	cmp	r5, #0
 800abd0:	f000 80a5 	beq.w	800ad1e <_dtoa_r+0x47e>
 800abd4:	f1bb 0f00 	cmp.w	fp, #0
 800abd8:	dd38      	ble.n	800ac4c <_dtoa_r+0x3ac>
 800abda:	4bc0      	ldr	r3, [pc, #768]	; (800aedc <_dtoa_r+0x63c>)
 800abdc:	f00b 020f 	and.w	r2, fp, #15
 800abe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800abe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800abec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800abf0:	d019      	beq.n	800ac26 <_dtoa_r+0x386>
 800abf2:	4bbb      	ldr	r3, [pc, #748]	; (800aee0 <_dtoa_r+0x640>)
 800abf4:	ec51 0b18 	vmov	r0, r1, d8
 800abf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abfc:	f7f5 fe4e 	bl	800089c <__aeabi_ddiv>
 800ac00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac04:	f008 080f 	and.w	r8, r8, #15
 800ac08:	2503      	movs	r5, #3
 800ac0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aee0 <_dtoa_r+0x640>
 800ac0e:	f1b8 0f00 	cmp.w	r8, #0
 800ac12:	d10a      	bne.n	800ac2a <_dtoa_r+0x38a>
 800ac14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac18:	4632      	mov	r2, r6
 800ac1a:	463b      	mov	r3, r7
 800ac1c:	f7f5 fe3e 	bl	800089c <__aeabi_ddiv>
 800ac20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac24:	e02b      	b.n	800ac7e <_dtoa_r+0x3de>
 800ac26:	2502      	movs	r5, #2
 800ac28:	e7ef      	b.n	800ac0a <_dtoa_r+0x36a>
 800ac2a:	f018 0f01 	tst.w	r8, #1
 800ac2e:	d008      	beq.n	800ac42 <_dtoa_r+0x3a2>
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac38:	f7f5 fd06 	bl	8000648 <__aeabi_dmul>
 800ac3c:	3501      	adds	r5, #1
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460f      	mov	r7, r1
 800ac42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac46:	f109 0908 	add.w	r9, r9, #8
 800ac4a:	e7e0      	b.n	800ac0e <_dtoa_r+0x36e>
 800ac4c:	f000 809f 	beq.w	800ad8e <_dtoa_r+0x4ee>
 800ac50:	f1cb 0600 	rsb	r6, fp, #0
 800ac54:	4ba1      	ldr	r3, [pc, #644]	; (800aedc <_dtoa_r+0x63c>)
 800ac56:	4fa2      	ldr	r7, [pc, #648]	; (800aee0 <_dtoa_r+0x640>)
 800ac58:	f006 020f 	and.w	r2, r6, #15
 800ac5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	ec51 0b18 	vmov	r0, r1, d8
 800ac68:	f7f5 fcee 	bl	8000648 <__aeabi_dmul>
 800ac6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac70:	1136      	asrs	r6, r6, #4
 800ac72:	2300      	movs	r3, #0
 800ac74:	2502      	movs	r5, #2
 800ac76:	2e00      	cmp	r6, #0
 800ac78:	d17e      	bne.n	800ad78 <_dtoa_r+0x4d8>
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1d0      	bne.n	800ac20 <_dtoa_r+0x380>
 800ac7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 8084 	beq.w	800ad92 <_dtoa_r+0x4f2>
 800ac8a:	4b96      	ldr	r3, [pc, #600]	; (800aee4 <_dtoa_r+0x644>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4640      	mov	r0, r8
 800ac90:	4649      	mov	r1, r9
 800ac92:	f7f5 ff4b 	bl	8000b2c <__aeabi_dcmplt>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d07b      	beq.n	800ad92 <_dtoa_r+0x4f2>
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d078      	beq.n	800ad92 <_dtoa_r+0x4f2>
 800aca0:	9b01      	ldr	r3, [sp, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dd39      	ble.n	800ad1a <_dtoa_r+0x47a>
 800aca6:	4b90      	ldr	r3, [pc, #576]	; (800aee8 <_dtoa_r+0x648>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	4640      	mov	r0, r8
 800acac:	4649      	mov	r1, r9
 800acae:	f7f5 fccb 	bl	8000648 <__aeabi_dmul>
 800acb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acb6:	9e01      	ldr	r6, [sp, #4]
 800acb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800acbc:	3501      	adds	r5, #1
 800acbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800acc2:	4628      	mov	r0, r5
 800acc4:	f7f5 fc56 	bl	8000574 <__aeabi_i2d>
 800acc8:	4642      	mov	r2, r8
 800acca:	464b      	mov	r3, r9
 800accc:	f7f5 fcbc 	bl	8000648 <__aeabi_dmul>
 800acd0:	4b86      	ldr	r3, [pc, #536]	; (800aeec <_dtoa_r+0x64c>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	f7f5 fb02 	bl	80002dc <__adddf3>
 800acd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800acdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace0:	9303      	str	r3, [sp, #12]
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	d158      	bne.n	800ad98 <_dtoa_r+0x4f8>
 800ace6:	4b82      	ldr	r3, [pc, #520]	; (800aef0 <_dtoa_r+0x650>)
 800ace8:	2200      	movs	r2, #0
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 faf3 	bl	80002d8 <__aeabi_dsub>
 800acf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acf6:	4680      	mov	r8, r0
 800acf8:	4689      	mov	r9, r1
 800acfa:	f7f5 ff35 	bl	8000b68 <__aeabi_dcmpgt>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f040 8296 	bne.w	800b230 <_dtoa_r+0x990>
 800ad04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad08:	4640      	mov	r0, r8
 800ad0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad0e:	4649      	mov	r1, r9
 800ad10:	f7f5 ff0c 	bl	8000b2c <__aeabi_dcmplt>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f040 8289 	bne.w	800b22c <_dtoa_r+0x98c>
 800ad1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f2c0 814e 	blt.w	800afc2 <_dtoa_r+0x722>
 800ad26:	f1bb 0f0e 	cmp.w	fp, #14
 800ad2a:	f300 814a 	bgt.w	800afc2 <_dtoa_r+0x722>
 800ad2e:	4b6b      	ldr	r3, [pc, #428]	; (800aedc <_dtoa_r+0x63c>)
 800ad30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f280 80dc 	bge.w	800aef8 <_dtoa_r+0x658>
 800ad40:	9b04      	ldr	r3, [sp, #16]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f300 80d8 	bgt.w	800aef8 <_dtoa_r+0x658>
 800ad48:	f040 826f 	bne.w	800b22a <_dtoa_r+0x98a>
 800ad4c:	4b68      	ldr	r3, [pc, #416]	; (800aef0 <_dtoa_r+0x650>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	4640      	mov	r0, r8
 800ad52:	4649      	mov	r1, r9
 800ad54:	f7f5 fc78 	bl	8000648 <__aeabi_dmul>
 800ad58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad5c:	f7f5 fefa 	bl	8000b54 <__aeabi_dcmpge>
 800ad60:	9e04      	ldr	r6, [sp, #16]
 800ad62:	4637      	mov	r7, r6
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 8245 	bne.w	800b1f4 <_dtoa_r+0x954>
 800ad6a:	9d00      	ldr	r5, [sp, #0]
 800ad6c:	2331      	movs	r3, #49	; 0x31
 800ad6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ad72:	f10b 0b01 	add.w	fp, fp, #1
 800ad76:	e241      	b.n	800b1fc <_dtoa_r+0x95c>
 800ad78:	07f2      	lsls	r2, r6, #31
 800ad7a:	d505      	bpl.n	800ad88 <_dtoa_r+0x4e8>
 800ad7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad80:	f7f5 fc62 	bl	8000648 <__aeabi_dmul>
 800ad84:	3501      	adds	r5, #1
 800ad86:	2301      	movs	r3, #1
 800ad88:	1076      	asrs	r6, r6, #1
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	e773      	b.n	800ac76 <_dtoa_r+0x3d6>
 800ad8e:	2502      	movs	r5, #2
 800ad90:	e775      	b.n	800ac7e <_dtoa_r+0x3de>
 800ad92:	9e04      	ldr	r6, [sp, #16]
 800ad94:	465f      	mov	r7, fp
 800ad96:	e792      	b.n	800acbe <_dtoa_r+0x41e>
 800ad98:	9900      	ldr	r1, [sp, #0]
 800ad9a:	4b50      	ldr	r3, [pc, #320]	; (800aedc <_dtoa_r+0x63c>)
 800ad9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ada0:	4431      	add	r1, r6
 800ada2:	9102      	str	r1, [sp, #8]
 800ada4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ada6:	eeb0 9a47 	vmov.f32	s18, s14
 800adaa:	eef0 9a67 	vmov.f32	s19, s15
 800adae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adb6:	2900      	cmp	r1, #0
 800adb8:	d044      	beq.n	800ae44 <_dtoa_r+0x5a4>
 800adba:	494e      	ldr	r1, [pc, #312]	; (800aef4 <_dtoa_r+0x654>)
 800adbc:	2000      	movs	r0, #0
 800adbe:	f7f5 fd6d 	bl	800089c <__aeabi_ddiv>
 800adc2:	ec53 2b19 	vmov	r2, r3, d9
 800adc6:	f7f5 fa87 	bl	80002d8 <__aeabi_dsub>
 800adca:	9d00      	ldr	r5, [sp, #0]
 800adcc:	ec41 0b19 	vmov	d9, r0, r1
 800add0:	4649      	mov	r1, r9
 800add2:	4640      	mov	r0, r8
 800add4:	f7f5 fee8 	bl	8000ba8 <__aeabi_d2iz>
 800add8:	4606      	mov	r6, r0
 800adda:	f7f5 fbcb 	bl	8000574 <__aeabi_i2d>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4640      	mov	r0, r8
 800ade4:	4649      	mov	r1, r9
 800ade6:	f7f5 fa77 	bl	80002d8 <__aeabi_dsub>
 800adea:	3630      	adds	r6, #48	; 0x30
 800adec:	f805 6b01 	strb.w	r6, [r5], #1
 800adf0:	ec53 2b19 	vmov	r2, r3, d9
 800adf4:	4680      	mov	r8, r0
 800adf6:	4689      	mov	r9, r1
 800adf8:	f7f5 fe98 	bl	8000b2c <__aeabi_dcmplt>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d164      	bne.n	800aeca <_dtoa_r+0x62a>
 800ae00:	4642      	mov	r2, r8
 800ae02:	464b      	mov	r3, r9
 800ae04:	4937      	ldr	r1, [pc, #220]	; (800aee4 <_dtoa_r+0x644>)
 800ae06:	2000      	movs	r0, #0
 800ae08:	f7f5 fa66 	bl	80002d8 <__aeabi_dsub>
 800ae0c:	ec53 2b19 	vmov	r2, r3, d9
 800ae10:	f7f5 fe8c 	bl	8000b2c <__aeabi_dcmplt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f040 80b6 	bne.w	800af86 <_dtoa_r+0x6e6>
 800ae1a:	9b02      	ldr	r3, [sp, #8]
 800ae1c:	429d      	cmp	r5, r3
 800ae1e:	f43f af7c 	beq.w	800ad1a <_dtoa_r+0x47a>
 800ae22:	4b31      	ldr	r3, [pc, #196]	; (800aee8 <_dtoa_r+0x648>)
 800ae24:	ec51 0b19 	vmov	r0, r1, d9
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f7f5 fc0d 	bl	8000648 <__aeabi_dmul>
 800ae2e:	4b2e      	ldr	r3, [pc, #184]	; (800aee8 <_dtoa_r+0x648>)
 800ae30:	ec41 0b19 	vmov	d9, r0, r1
 800ae34:	2200      	movs	r2, #0
 800ae36:	4640      	mov	r0, r8
 800ae38:	4649      	mov	r1, r9
 800ae3a:	f7f5 fc05 	bl	8000648 <__aeabi_dmul>
 800ae3e:	4680      	mov	r8, r0
 800ae40:	4689      	mov	r9, r1
 800ae42:	e7c5      	b.n	800add0 <_dtoa_r+0x530>
 800ae44:	ec51 0b17 	vmov	r0, r1, d7
 800ae48:	f7f5 fbfe 	bl	8000648 <__aeabi_dmul>
 800ae4c:	9b02      	ldr	r3, [sp, #8]
 800ae4e:	9d00      	ldr	r5, [sp, #0]
 800ae50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae52:	ec41 0b19 	vmov	d9, r0, r1
 800ae56:	4649      	mov	r1, r9
 800ae58:	4640      	mov	r0, r8
 800ae5a:	f7f5 fea5 	bl	8000ba8 <__aeabi_d2iz>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	f7f5 fb88 	bl	8000574 <__aeabi_i2d>
 800ae64:	3630      	adds	r6, #48	; 0x30
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	f7f5 fa33 	bl	80002d8 <__aeabi_dsub>
 800ae72:	f805 6b01 	strb.w	r6, [r5], #1
 800ae76:	9b02      	ldr	r3, [sp, #8]
 800ae78:	429d      	cmp	r5, r3
 800ae7a:	4680      	mov	r8, r0
 800ae7c:	4689      	mov	r9, r1
 800ae7e:	f04f 0200 	mov.w	r2, #0
 800ae82:	d124      	bne.n	800aece <_dtoa_r+0x62e>
 800ae84:	4b1b      	ldr	r3, [pc, #108]	; (800aef4 <_dtoa_r+0x654>)
 800ae86:	ec51 0b19 	vmov	r0, r1, d9
 800ae8a:	f7f5 fa27 	bl	80002dc <__adddf3>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7f5 fe67 	bl	8000b68 <__aeabi_dcmpgt>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d173      	bne.n	800af86 <_dtoa_r+0x6e6>
 800ae9e:	ec53 2b19 	vmov	r2, r3, d9
 800aea2:	4914      	ldr	r1, [pc, #80]	; (800aef4 <_dtoa_r+0x654>)
 800aea4:	2000      	movs	r0, #0
 800aea6:	f7f5 fa17 	bl	80002d8 <__aeabi_dsub>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	460b      	mov	r3, r1
 800aeae:	4640      	mov	r0, r8
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	f7f5 fe3b 	bl	8000b2c <__aeabi_dcmplt>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f43f af2f 	beq.w	800ad1a <_dtoa_r+0x47a>
 800aebc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aebe:	1e6b      	subs	r3, r5, #1
 800aec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aec6:	2b30      	cmp	r3, #48	; 0x30
 800aec8:	d0f8      	beq.n	800aebc <_dtoa_r+0x61c>
 800aeca:	46bb      	mov	fp, r7
 800aecc:	e04a      	b.n	800af64 <_dtoa_r+0x6c4>
 800aece:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <_dtoa_r+0x648>)
 800aed0:	f7f5 fbba 	bl	8000648 <__aeabi_dmul>
 800aed4:	4680      	mov	r8, r0
 800aed6:	4689      	mov	r9, r1
 800aed8:	e7bd      	b.n	800ae56 <_dtoa_r+0x5b6>
 800aeda:	bf00      	nop
 800aedc:	0800db28 	.word	0x0800db28
 800aee0:	0800db00 	.word	0x0800db00
 800aee4:	3ff00000 	.word	0x3ff00000
 800aee8:	40240000 	.word	0x40240000
 800aeec:	401c0000 	.word	0x401c0000
 800aef0:	40140000 	.word	0x40140000
 800aef4:	3fe00000 	.word	0x3fe00000
 800aef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aefc:	9d00      	ldr	r5, [sp, #0]
 800aefe:	4642      	mov	r2, r8
 800af00:	464b      	mov	r3, r9
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 fcc9 	bl	800089c <__aeabi_ddiv>
 800af0a:	f7f5 fe4d 	bl	8000ba8 <__aeabi_d2iz>
 800af0e:	9001      	str	r0, [sp, #4]
 800af10:	f7f5 fb30 	bl	8000574 <__aeabi_i2d>
 800af14:	4642      	mov	r2, r8
 800af16:	464b      	mov	r3, r9
 800af18:	f7f5 fb96 	bl	8000648 <__aeabi_dmul>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4630      	mov	r0, r6
 800af22:	4639      	mov	r1, r7
 800af24:	f7f5 f9d8 	bl	80002d8 <__aeabi_dsub>
 800af28:	9e01      	ldr	r6, [sp, #4]
 800af2a:	9f04      	ldr	r7, [sp, #16]
 800af2c:	3630      	adds	r6, #48	; 0x30
 800af2e:	f805 6b01 	strb.w	r6, [r5], #1
 800af32:	9e00      	ldr	r6, [sp, #0]
 800af34:	1bae      	subs	r6, r5, r6
 800af36:	42b7      	cmp	r7, r6
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	d134      	bne.n	800afa8 <_dtoa_r+0x708>
 800af3e:	f7f5 f9cd 	bl	80002dc <__adddf3>
 800af42:	4642      	mov	r2, r8
 800af44:	464b      	mov	r3, r9
 800af46:	4606      	mov	r6, r0
 800af48:	460f      	mov	r7, r1
 800af4a:	f7f5 fe0d 	bl	8000b68 <__aeabi_dcmpgt>
 800af4e:	b9c8      	cbnz	r0, 800af84 <_dtoa_r+0x6e4>
 800af50:	4642      	mov	r2, r8
 800af52:	464b      	mov	r3, r9
 800af54:	4630      	mov	r0, r6
 800af56:	4639      	mov	r1, r7
 800af58:	f7f5 fdde 	bl	8000b18 <__aeabi_dcmpeq>
 800af5c:	b110      	cbz	r0, 800af64 <_dtoa_r+0x6c4>
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	07db      	lsls	r3, r3, #31
 800af62:	d40f      	bmi.n	800af84 <_dtoa_r+0x6e4>
 800af64:	4651      	mov	r1, sl
 800af66:	4620      	mov	r0, r4
 800af68:	f000 fbcc 	bl	800b704 <_Bfree>
 800af6c:	2300      	movs	r3, #0
 800af6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af70:	702b      	strb	r3, [r5, #0]
 800af72:	f10b 0301 	add.w	r3, fp, #1
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f43f ace2 	beq.w	800a944 <_dtoa_r+0xa4>
 800af80:	601d      	str	r5, [r3, #0]
 800af82:	e4df      	b.n	800a944 <_dtoa_r+0xa4>
 800af84:	465f      	mov	r7, fp
 800af86:	462b      	mov	r3, r5
 800af88:	461d      	mov	r5, r3
 800af8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af8e:	2a39      	cmp	r2, #57	; 0x39
 800af90:	d106      	bne.n	800afa0 <_dtoa_r+0x700>
 800af92:	9a00      	ldr	r2, [sp, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d1f7      	bne.n	800af88 <_dtoa_r+0x6e8>
 800af98:	9900      	ldr	r1, [sp, #0]
 800af9a:	2230      	movs	r2, #48	; 0x30
 800af9c:	3701      	adds	r7, #1
 800af9e:	700a      	strb	r2, [r1, #0]
 800afa0:	781a      	ldrb	r2, [r3, #0]
 800afa2:	3201      	adds	r2, #1
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	e790      	b.n	800aeca <_dtoa_r+0x62a>
 800afa8:	4ba3      	ldr	r3, [pc, #652]	; (800b238 <_dtoa_r+0x998>)
 800afaa:	2200      	movs	r2, #0
 800afac:	f7f5 fb4c 	bl	8000648 <__aeabi_dmul>
 800afb0:	2200      	movs	r2, #0
 800afb2:	2300      	movs	r3, #0
 800afb4:	4606      	mov	r6, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	f7f5 fdae 	bl	8000b18 <__aeabi_dcmpeq>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d09e      	beq.n	800aefe <_dtoa_r+0x65e>
 800afc0:	e7d0      	b.n	800af64 <_dtoa_r+0x6c4>
 800afc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afc4:	2a00      	cmp	r2, #0
 800afc6:	f000 80ca 	beq.w	800b15e <_dtoa_r+0x8be>
 800afca:	9a07      	ldr	r2, [sp, #28]
 800afcc:	2a01      	cmp	r2, #1
 800afce:	f300 80ad 	bgt.w	800b12c <_dtoa_r+0x88c>
 800afd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	f000 80a5 	beq.w	800b124 <_dtoa_r+0x884>
 800afda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afde:	9e08      	ldr	r6, [sp, #32]
 800afe0:	9d05      	ldr	r5, [sp, #20]
 800afe2:	9a05      	ldr	r2, [sp, #20]
 800afe4:	441a      	add	r2, r3
 800afe6:	9205      	str	r2, [sp, #20]
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	2101      	movs	r1, #1
 800afec:	441a      	add	r2, r3
 800afee:	4620      	mov	r0, r4
 800aff0:	9206      	str	r2, [sp, #24]
 800aff2:	f000 fc3d 	bl	800b870 <__i2b>
 800aff6:	4607      	mov	r7, r0
 800aff8:	b165      	cbz	r5, 800b014 <_dtoa_r+0x774>
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	2b00      	cmp	r3, #0
 800affe:	dd09      	ble.n	800b014 <_dtoa_r+0x774>
 800b000:	42ab      	cmp	r3, r5
 800b002:	9a05      	ldr	r2, [sp, #20]
 800b004:	bfa8      	it	ge
 800b006:	462b      	movge	r3, r5
 800b008:	1ad2      	subs	r2, r2, r3
 800b00a:	9205      	str	r2, [sp, #20]
 800b00c:	9a06      	ldr	r2, [sp, #24]
 800b00e:	1aed      	subs	r5, r5, r3
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	9306      	str	r3, [sp, #24]
 800b014:	9b08      	ldr	r3, [sp, #32]
 800b016:	b1f3      	cbz	r3, 800b056 <_dtoa_r+0x7b6>
 800b018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 80a3 	beq.w	800b166 <_dtoa_r+0x8c6>
 800b020:	2e00      	cmp	r6, #0
 800b022:	dd10      	ble.n	800b046 <_dtoa_r+0x7a6>
 800b024:	4639      	mov	r1, r7
 800b026:	4632      	mov	r2, r6
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fce1 	bl	800b9f0 <__pow5mult>
 800b02e:	4652      	mov	r2, sl
 800b030:	4601      	mov	r1, r0
 800b032:	4607      	mov	r7, r0
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fc31 	bl	800b89c <__multiply>
 800b03a:	4651      	mov	r1, sl
 800b03c:	4680      	mov	r8, r0
 800b03e:	4620      	mov	r0, r4
 800b040:	f000 fb60 	bl	800b704 <_Bfree>
 800b044:	46c2      	mov	sl, r8
 800b046:	9b08      	ldr	r3, [sp, #32]
 800b048:	1b9a      	subs	r2, r3, r6
 800b04a:	d004      	beq.n	800b056 <_dtoa_r+0x7b6>
 800b04c:	4651      	mov	r1, sl
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 fcce 	bl	800b9f0 <__pow5mult>
 800b054:	4682      	mov	sl, r0
 800b056:	2101      	movs	r1, #1
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 fc09 	bl	800b870 <__i2b>
 800b05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b060:	2b00      	cmp	r3, #0
 800b062:	4606      	mov	r6, r0
 800b064:	f340 8081 	ble.w	800b16a <_dtoa_r+0x8ca>
 800b068:	461a      	mov	r2, r3
 800b06a:	4601      	mov	r1, r0
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 fcbf 	bl	800b9f0 <__pow5mult>
 800b072:	9b07      	ldr	r3, [sp, #28]
 800b074:	2b01      	cmp	r3, #1
 800b076:	4606      	mov	r6, r0
 800b078:	dd7a      	ble.n	800b170 <_dtoa_r+0x8d0>
 800b07a:	f04f 0800 	mov.w	r8, #0
 800b07e:	6933      	ldr	r3, [r6, #16]
 800b080:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b084:	6918      	ldr	r0, [r3, #16]
 800b086:	f000 fba5 	bl	800b7d4 <__hi0bits>
 800b08a:	f1c0 0020 	rsb	r0, r0, #32
 800b08e:	9b06      	ldr	r3, [sp, #24]
 800b090:	4418      	add	r0, r3
 800b092:	f010 001f 	ands.w	r0, r0, #31
 800b096:	f000 8094 	beq.w	800b1c2 <_dtoa_r+0x922>
 800b09a:	f1c0 0320 	rsb	r3, r0, #32
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	f340 8085 	ble.w	800b1ae <_dtoa_r+0x90e>
 800b0a4:	9b05      	ldr	r3, [sp, #20]
 800b0a6:	f1c0 001c 	rsb	r0, r0, #28
 800b0aa:	4403      	add	r3, r0
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	9b06      	ldr	r3, [sp, #24]
 800b0b0:	4403      	add	r3, r0
 800b0b2:	4405      	add	r5, r0
 800b0b4:	9306      	str	r3, [sp, #24]
 800b0b6:	9b05      	ldr	r3, [sp, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	dd05      	ble.n	800b0c8 <_dtoa_r+0x828>
 800b0bc:	4651      	mov	r1, sl
 800b0be:	461a      	mov	r2, r3
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fcef 	bl	800baa4 <__lshift>
 800b0c6:	4682      	mov	sl, r0
 800b0c8:	9b06      	ldr	r3, [sp, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	dd05      	ble.n	800b0da <_dtoa_r+0x83a>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fce6 	bl	800baa4 <__lshift>
 800b0d8:	4606      	mov	r6, r0
 800b0da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d072      	beq.n	800b1c6 <_dtoa_r+0x926>
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4650      	mov	r0, sl
 800b0e4:	f000 fd4a 	bl	800bb7c <__mcmp>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	da6c      	bge.n	800b1c6 <_dtoa_r+0x926>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4651      	mov	r1, sl
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 fb28 	bl	800b748 <__multadd>
 800b0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0fe:	4682      	mov	sl, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 81b0 	beq.w	800b466 <_dtoa_r+0xbc6>
 800b106:	2300      	movs	r3, #0
 800b108:	4639      	mov	r1, r7
 800b10a:	220a      	movs	r2, #10
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 fb1b 	bl	800b748 <__multadd>
 800b112:	9b01      	ldr	r3, [sp, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	4607      	mov	r7, r0
 800b118:	f300 8096 	bgt.w	800b248 <_dtoa_r+0x9a8>
 800b11c:	9b07      	ldr	r3, [sp, #28]
 800b11e:	2b02      	cmp	r3, #2
 800b120:	dc59      	bgt.n	800b1d6 <_dtoa_r+0x936>
 800b122:	e091      	b.n	800b248 <_dtoa_r+0x9a8>
 800b124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b12a:	e758      	b.n	800afde <_dtoa_r+0x73e>
 800b12c:	9b04      	ldr	r3, [sp, #16]
 800b12e:	1e5e      	subs	r6, r3, #1
 800b130:	9b08      	ldr	r3, [sp, #32]
 800b132:	42b3      	cmp	r3, r6
 800b134:	bfbf      	itttt	lt
 800b136:	9b08      	ldrlt	r3, [sp, #32]
 800b138:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b13a:	9608      	strlt	r6, [sp, #32]
 800b13c:	1af3      	sublt	r3, r6, r3
 800b13e:	bfb4      	ite	lt
 800b140:	18d2      	addlt	r2, r2, r3
 800b142:	1b9e      	subge	r6, r3, r6
 800b144:	9b04      	ldr	r3, [sp, #16]
 800b146:	bfbc      	itt	lt
 800b148:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b14a:	2600      	movlt	r6, #0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bfb7      	itett	lt
 800b150:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b154:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b158:	1a9d      	sublt	r5, r3, r2
 800b15a:	2300      	movlt	r3, #0
 800b15c:	e741      	b.n	800afe2 <_dtoa_r+0x742>
 800b15e:	9e08      	ldr	r6, [sp, #32]
 800b160:	9d05      	ldr	r5, [sp, #20]
 800b162:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b164:	e748      	b.n	800aff8 <_dtoa_r+0x758>
 800b166:	9a08      	ldr	r2, [sp, #32]
 800b168:	e770      	b.n	800b04c <_dtoa_r+0x7ac>
 800b16a:	9b07      	ldr	r3, [sp, #28]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	dc19      	bgt.n	800b1a4 <_dtoa_r+0x904>
 800b170:	9b02      	ldr	r3, [sp, #8]
 800b172:	b9bb      	cbnz	r3, 800b1a4 <_dtoa_r+0x904>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b17a:	b99b      	cbnz	r3, 800b1a4 <_dtoa_r+0x904>
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b182:	0d1b      	lsrs	r3, r3, #20
 800b184:	051b      	lsls	r3, r3, #20
 800b186:	b183      	cbz	r3, 800b1aa <_dtoa_r+0x90a>
 800b188:	9b05      	ldr	r3, [sp, #20]
 800b18a:	3301      	adds	r3, #1
 800b18c:	9305      	str	r3, [sp, #20]
 800b18e:	9b06      	ldr	r3, [sp, #24]
 800b190:	3301      	adds	r3, #1
 800b192:	9306      	str	r3, [sp, #24]
 800b194:	f04f 0801 	mov.w	r8, #1
 800b198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f47f af6f 	bne.w	800b07e <_dtoa_r+0x7de>
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	e774      	b.n	800b08e <_dtoa_r+0x7ee>
 800b1a4:	f04f 0800 	mov.w	r8, #0
 800b1a8:	e7f6      	b.n	800b198 <_dtoa_r+0x8f8>
 800b1aa:	4698      	mov	r8, r3
 800b1ac:	e7f4      	b.n	800b198 <_dtoa_r+0x8f8>
 800b1ae:	d082      	beq.n	800b0b6 <_dtoa_r+0x816>
 800b1b0:	9a05      	ldr	r2, [sp, #20]
 800b1b2:	331c      	adds	r3, #28
 800b1b4:	441a      	add	r2, r3
 800b1b6:	9205      	str	r2, [sp, #20]
 800b1b8:	9a06      	ldr	r2, [sp, #24]
 800b1ba:	441a      	add	r2, r3
 800b1bc:	441d      	add	r5, r3
 800b1be:	9206      	str	r2, [sp, #24]
 800b1c0:	e779      	b.n	800b0b6 <_dtoa_r+0x816>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	e7f4      	b.n	800b1b0 <_dtoa_r+0x910>
 800b1c6:	9b04      	ldr	r3, [sp, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dc37      	bgt.n	800b23c <_dtoa_r+0x99c>
 800b1cc:	9b07      	ldr	r3, [sp, #28]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	dd34      	ble.n	800b23c <_dtoa_r+0x99c>
 800b1d2:	9b04      	ldr	r3, [sp, #16]
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	b963      	cbnz	r3, 800b1f4 <_dtoa_r+0x954>
 800b1da:	4631      	mov	r1, r6
 800b1dc:	2205      	movs	r2, #5
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 fab2 	bl	800b748 <__multadd>
 800b1e4:	4601      	mov	r1, r0
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	f000 fcc7 	bl	800bb7c <__mcmp>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	f73f adbb 	bgt.w	800ad6a <_dtoa_r+0x4ca>
 800b1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f6:	9d00      	ldr	r5, [sp, #0]
 800b1f8:	ea6f 0b03 	mvn.w	fp, r3
 800b1fc:	f04f 0800 	mov.w	r8, #0
 800b200:	4631      	mov	r1, r6
 800b202:	4620      	mov	r0, r4
 800b204:	f000 fa7e 	bl	800b704 <_Bfree>
 800b208:	2f00      	cmp	r7, #0
 800b20a:	f43f aeab 	beq.w	800af64 <_dtoa_r+0x6c4>
 800b20e:	f1b8 0f00 	cmp.w	r8, #0
 800b212:	d005      	beq.n	800b220 <_dtoa_r+0x980>
 800b214:	45b8      	cmp	r8, r7
 800b216:	d003      	beq.n	800b220 <_dtoa_r+0x980>
 800b218:	4641      	mov	r1, r8
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fa72 	bl	800b704 <_Bfree>
 800b220:	4639      	mov	r1, r7
 800b222:	4620      	mov	r0, r4
 800b224:	f000 fa6e 	bl	800b704 <_Bfree>
 800b228:	e69c      	b.n	800af64 <_dtoa_r+0x6c4>
 800b22a:	2600      	movs	r6, #0
 800b22c:	4637      	mov	r7, r6
 800b22e:	e7e1      	b.n	800b1f4 <_dtoa_r+0x954>
 800b230:	46bb      	mov	fp, r7
 800b232:	4637      	mov	r7, r6
 800b234:	e599      	b.n	800ad6a <_dtoa_r+0x4ca>
 800b236:	bf00      	nop
 800b238:	40240000 	.word	0x40240000
 800b23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23e:	2b00      	cmp	r3, #0
 800b240:	f000 80c8 	beq.w	800b3d4 <_dtoa_r+0xb34>
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	2d00      	cmp	r5, #0
 800b24a:	dd05      	ble.n	800b258 <_dtoa_r+0x9b8>
 800b24c:	4639      	mov	r1, r7
 800b24e:	462a      	mov	r2, r5
 800b250:	4620      	mov	r0, r4
 800b252:	f000 fc27 	bl	800baa4 <__lshift>
 800b256:	4607      	mov	r7, r0
 800b258:	f1b8 0f00 	cmp.w	r8, #0
 800b25c:	d05b      	beq.n	800b316 <_dtoa_r+0xa76>
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	4620      	mov	r0, r4
 800b262:	f000 fa0f 	bl	800b684 <_Balloc>
 800b266:	4605      	mov	r5, r0
 800b268:	b928      	cbnz	r0, 800b276 <_dtoa_r+0x9d6>
 800b26a:	4b83      	ldr	r3, [pc, #524]	; (800b478 <_dtoa_r+0xbd8>)
 800b26c:	4602      	mov	r2, r0
 800b26e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b272:	f7ff bb2e 	b.w	800a8d2 <_dtoa_r+0x32>
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	3202      	adds	r2, #2
 800b27a:	0092      	lsls	r2, r2, #2
 800b27c:	f107 010c 	add.w	r1, r7, #12
 800b280:	300c      	adds	r0, #12
 800b282:	f001 f973 	bl	800c56c <memcpy>
 800b286:	2201      	movs	r2, #1
 800b288:	4629      	mov	r1, r5
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fc0a 	bl	800baa4 <__lshift>
 800b290:	9b00      	ldr	r3, [sp, #0]
 800b292:	3301      	adds	r3, #1
 800b294:	9304      	str	r3, [sp, #16]
 800b296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b29a:	4413      	add	r3, r2
 800b29c:	9308      	str	r3, [sp, #32]
 800b29e:	9b02      	ldr	r3, [sp, #8]
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	46b8      	mov	r8, r7
 800b2a6:	9306      	str	r3, [sp, #24]
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	f7ff fa6c 	bl	800a790 <quorem>
 800b2b8:	4641      	mov	r1, r8
 800b2ba:	9002      	str	r0, [sp, #8]
 800b2bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	f000 fc5b 	bl	800bb7c <__mcmp>
 800b2c6:	463a      	mov	r2, r7
 800b2c8:	9005      	str	r0, [sp, #20]
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 fc71 	bl	800bbb4 <__mdiff>
 800b2d2:	68c2      	ldr	r2, [r0, #12]
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	bb02      	cbnz	r2, 800b31a <_dtoa_r+0xa7a>
 800b2d8:	4601      	mov	r1, r0
 800b2da:	4650      	mov	r0, sl
 800b2dc:	f000 fc4e 	bl	800bb7c <__mcmp>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2e8:	f000 fa0c 	bl	800b704 <_Bfree>
 800b2ec:	9b07      	ldr	r3, [sp, #28]
 800b2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f0:	9d04      	ldr	r5, [sp, #16]
 800b2f2:	ea43 0102 	orr.w	r1, r3, r2
 800b2f6:	9b06      	ldr	r3, [sp, #24]
 800b2f8:	4319      	orrs	r1, r3
 800b2fa:	d110      	bne.n	800b31e <_dtoa_r+0xa7e>
 800b2fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b300:	d029      	beq.n	800b356 <_dtoa_r+0xab6>
 800b302:	9b05      	ldr	r3, [sp, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	dd02      	ble.n	800b30e <_dtoa_r+0xa6e>
 800b308:	9b02      	ldr	r3, [sp, #8]
 800b30a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b30e:	9b01      	ldr	r3, [sp, #4]
 800b310:	f883 9000 	strb.w	r9, [r3]
 800b314:	e774      	b.n	800b200 <_dtoa_r+0x960>
 800b316:	4638      	mov	r0, r7
 800b318:	e7ba      	b.n	800b290 <_dtoa_r+0x9f0>
 800b31a:	2201      	movs	r2, #1
 800b31c:	e7e1      	b.n	800b2e2 <_dtoa_r+0xa42>
 800b31e:	9b05      	ldr	r3, [sp, #20]
 800b320:	2b00      	cmp	r3, #0
 800b322:	db04      	blt.n	800b32e <_dtoa_r+0xa8e>
 800b324:	9907      	ldr	r1, [sp, #28]
 800b326:	430b      	orrs	r3, r1
 800b328:	9906      	ldr	r1, [sp, #24]
 800b32a:	430b      	orrs	r3, r1
 800b32c:	d120      	bne.n	800b370 <_dtoa_r+0xad0>
 800b32e:	2a00      	cmp	r2, #0
 800b330:	dded      	ble.n	800b30e <_dtoa_r+0xa6e>
 800b332:	4651      	mov	r1, sl
 800b334:	2201      	movs	r2, #1
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fbb4 	bl	800baa4 <__lshift>
 800b33c:	4631      	mov	r1, r6
 800b33e:	4682      	mov	sl, r0
 800b340:	f000 fc1c 	bl	800bb7c <__mcmp>
 800b344:	2800      	cmp	r0, #0
 800b346:	dc03      	bgt.n	800b350 <_dtoa_r+0xab0>
 800b348:	d1e1      	bne.n	800b30e <_dtoa_r+0xa6e>
 800b34a:	f019 0f01 	tst.w	r9, #1
 800b34e:	d0de      	beq.n	800b30e <_dtoa_r+0xa6e>
 800b350:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b354:	d1d8      	bne.n	800b308 <_dtoa_r+0xa68>
 800b356:	9a01      	ldr	r2, [sp, #4]
 800b358:	2339      	movs	r3, #57	; 0x39
 800b35a:	7013      	strb	r3, [r2, #0]
 800b35c:	462b      	mov	r3, r5
 800b35e:	461d      	mov	r5, r3
 800b360:	3b01      	subs	r3, #1
 800b362:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b366:	2a39      	cmp	r2, #57	; 0x39
 800b368:	d06c      	beq.n	800b444 <_dtoa_r+0xba4>
 800b36a:	3201      	adds	r2, #1
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	e747      	b.n	800b200 <_dtoa_r+0x960>
 800b370:	2a00      	cmp	r2, #0
 800b372:	dd07      	ble.n	800b384 <_dtoa_r+0xae4>
 800b374:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b378:	d0ed      	beq.n	800b356 <_dtoa_r+0xab6>
 800b37a:	9a01      	ldr	r2, [sp, #4]
 800b37c:	f109 0301 	add.w	r3, r9, #1
 800b380:	7013      	strb	r3, [r2, #0]
 800b382:	e73d      	b.n	800b200 <_dtoa_r+0x960>
 800b384:	9b04      	ldr	r3, [sp, #16]
 800b386:	9a08      	ldr	r2, [sp, #32]
 800b388:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d043      	beq.n	800b418 <_dtoa_r+0xb78>
 800b390:	4651      	mov	r1, sl
 800b392:	2300      	movs	r3, #0
 800b394:	220a      	movs	r2, #10
 800b396:	4620      	mov	r0, r4
 800b398:	f000 f9d6 	bl	800b748 <__multadd>
 800b39c:	45b8      	cmp	r8, r7
 800b39e:	4682      	mov	sl, r0
 800b3a0:	f04f 0300 	mov.w	r3, #0
 800b3a4:	f04f 020a 	mov.w	r2, #10
 800b3a8:	4641      	mov	r1, r8
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	d107      	bne.n	800b3be <_dtoa_r+0xb1e>
 800b3ae:	f000 f9cb 	bl	800b748 <__multadd>
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	9304      	str	r3, [sp, #16]
 800b3bc:	e775      	b.n	800b2aa <_dtoa_r+0xa0a>
 800b3be:	f000 f9c3 	bl	800b748 <__multadd>
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	220a      	movs	r2, #10
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 f9bc 	bl	800b748 <__multadd>
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	e7f0      	b.n	800b3b6 <_dtoa_r+0xb16>
 800b3d4:	9b04      	ldr	r3, [sp, #16]
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	9d00      	ldr	r5, [sp, #0]
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4650      	mov	r0, sl
 800b3de:	f7ff f9d7 	bl	800a790 <quorem>
 800b3e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3e6:	9b00      	ldr	r3, [sp, #0]
 800b3e8:	f805 9b01 	strb.w	r9, [r5], #1
 800b3ec:	1aea      	subs	r2, r5, r3
 800b3ee:	9b01      	ldr	r3, [sp, #4]
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	dd07      	ble.n	800b404 <_dtoa_r+0xb64>
 800b3f4:	4651      	mov	r1, sl
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	220a      	movs	r2, #10
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 f9a4 	bl	800b748 <__multadd>
 800b400:	4682      	mov	sl, r0
 800b402:	e7ea      	b.n	800b3da <_dtoa_r+0xb3a>
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	bfc8      	it	gt
 800b40a:	461d      	movgt	r5, r3
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	bfd8      	it	le
 800b410:	2501      	movle	r5, #1
 800b412:	441d      	add	r5, r3
 800b414:	f04f 0800 	mov.w	r8, #0
 800b418:	4651      	mov	r1, sl
 800b41a:	2201      	movs	r2, #1
 800b41c:	4620      	mov	r0, r4
 800b41e:	f000 fb41 	bl	800baa4 <__lshift>
 800b422:	4631      	mov	r1, r6
 800b424:	4682      	mov	sl, r0
 800b426:	f000 fba9 	bl	800bb7c <__mcmp>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	dc96      	bgt.n	800b35c <_dtoa_r+0xabc>
 800b42e:	d102      	bne.n	800b436 <_dtoa_r+0xb96>
 800b430:	f019 0f01 	tst.w	r9, #1
 800b434:	d192      	bne.n	800b35c <_dtoa_r+0xabc>
 800b436:	462b      	mov	r3, r5
 800b438:	461d      	mov	r5, r3
 800b43a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b43e:	2a30      	cmp	r2, #48	; 0x30
 800b440:	d0fa      	beq.n	800b438 <_dtoa_r+0xb98>
 800b442:	e6dd      	b.n	800b200 <_dtoa_r+0x960>
 800b444:	9a00      	ldr	r2, [sp, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	d189      	bne.n	800b35e <_dtoa_r+0xabe>
 800b44a:	f10b 0b01 	add.w	fp, fp, #1
 800b44e:	2331      	movs	r3, #49	; 0x31
 800b450:	e796      	b.n	800b380 <_dtoa_r+0xae0>
 800b452:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <_dtoa_r+0xbdc>)
 800b454:	f7ff ba99 	b.w	800a98a <_dtoa_r+0xea>
 800b458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f47f aa6d 	bne.w	800a93a <_dtoa_r+0x9a>
 800b460:	4b07      	ldr	r3, [pc, #28]	; (800b480 <_dtoa_r+0xbe0>)
 800b462:	f7ff ba92 	b.w	800a98a <_dtoa_r+0xea>
 800b466:	9b01      	ldr	r3, [sp, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	dcb5      	bgt.n	800b3d8 <_dtoa_r+0xb38>
 800b46c:	9b07      	ldr	r3, [sp, #28]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	f73f aeb1 	bgt.w	800b1d6 <_dtoa_r+0x936>
 800b474:	e7b0      	b.n	800b3d8 <_dtoa_r+0xb38>
 800b476:	bf00      	nop
 800b478:	0800da90 	.word	0x0800da90
 800b47c:	0800d9f0 	.word	0x0800d9f0
 800b480:	0800da14 	.word	0x0800da14

0800b484 <_free_r>:
 800b484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b486:	2900      	cmp	r1, #0
 800b488:	d044      	beq.n	800b514 <_free_r+0x90>
 800b48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48e:	9001      	str	r0, [sp, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f1a1 0404 	sub.w	r4, r1, #4
 800b496:	bfb8      	it	lt
 800b498:	18e4      	addlt	r4, r4, r3
 800b49a:	f000 f8e7 	bl	800b66c <__malloc_lock>
 800b49e:	4a1e      	ldr	r2, [pc, #120]	; (800b518 <_free_r+0x94>)
 800b4a0:	9801      	ldr	r0, [sp, #4]
 800b4a2:	6813      	ldr	r3, [r2, #0]
 800b4a4:	b933      	cbnz	r3, 800b4b4 <_free_r+0x30>
 800b4a6:	6063      	str	r3, [r4, #4]
 800b4a8:	6014      	str	r4, [r2, #0]
 800b4aa:	b003      	add	sp, #12
 800b4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4b0:	f000 b8e2 	b.w	800b678 <__malloc_unlock>
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d908      	bls.n	800b4ca <_free_r+0x46>
 800b4b8:	6825      	ldr	r5, [r4, #0]
 800b4ba:	1961      	adds	r1, r4, r5
 800b4bc:	428b      	cmp	r3, r1
 800b4be:	bf01      	itttt	eq
 800b4c0:	6819      	ldreq	r1, [r3, #0]
 800b4c2:	685b      	ldreq	r3, [r3, #4]
 800b4c4:	1949      	addeq	r1, r1, r5
 800b4c6:	6021      	streq	r1, [r4, #0]
 800b4c8:	e7ed      	b.n	800b4a6 <_free_r+0x22>
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	b10b      	cbz	r3, 800b4d4 <_free_r+0x50>
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	d9fa      	bls.n	800b4ca <_free_r+0x46>
 800b4d4:	6811      	ldr	r1, [r2, #0]
 800b4d6:	1855      	adds	r5, r2, r1
 800b4d8:	42a5      	cmp	r5, r4
 800b4da:	d10b      	bne.n	800b4f4 <_free_r+0x70>
 800b4dc:	6824      	ldr	r4, [r4, #0]
 800b4de:	4421      	add	r1, r4
 800b4e0:	1854      	adds	r4, r2, r1
 800b4e2:	42a3      	cmp	r3, r4
 800b4e4:	6011      	str	r1, [r2, #0]
 800b4e6:	d1e0      	bne.n	800b4aa <_free_r+0x26>
 800b4e8:	681c      	ldr	r4, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	6053      	str	r3, [r2, #4]
 800b4ee:	440c      	add	r4, r1
 800b4f0:	6014      	str	r4, [r2, #0]
 800b4f2:	e7da      	b.n	800b4aa <_free_r+0x26>
 800b4f4:	d902      	bls.n	800b4fc <_free_r+0x78>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	6003      	str	r3, [r0, #0]
 800b4fa:	e7d6      	b.n	800b4aa <_free_r+0x26>
 800b4fc:	6825      	ldr	r5, [r4, #0]
 800b4fe:	1961      	adds	r1, r4, r5
 800b500:	428b      	cmp	r3, r1
 800b502:	bf04      	itt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	6063      	str	r3, [r4, #4]
 800b50a:	bf04      	itt	eq
 800b50c:	1949      	addeq	r1, r1, r5
 800b50e:	6021      	streq	r1, [r4, #0]
 800b510:	6054      	str	r4, [r2, #4]
 800b512:	e7ca      	b.n	800b4aa <_free_r+0x26>
 800b514:	b003      	add	sp, #12
 800b516:	bd30      	pop	{r4, r5, pc}
 800b518:	20001b60 	.word	0x20001b60

0800b51c <malloc>:
 800b51c:	4b02      	ldr	r3, [pc, #8]	; (800b528 <malloc+0xc>)
 800b51e:	4601      	mov	r1, r0
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	f000 b823 	b.w	800b56c <_malloc_r>
 800b526:	bf00      	nop
 800b528:	20000068 	.word	0x20000068

0800b52c <sbrk_aligned>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4e0e      	ldr	r6, [pc, #56]	; (800b568 <sbrk_aligned+0x3c>)
 800b530:	460c      	mov	r4, r1
 800b532:	6831      	ldr	r1, [r6, #0]
 800b534:	4605      	mov	r5, r0
 800b536:	b911      	cbnz	r1, 800b53e <sbrk_aligned+0x12>
 800b538:	f001 f808 	bl	800c54c <_sbrk_r>
 800b53c:	6030      	str	r0, [r6, #0]
 800b53e:	4621      	mov	r1, r4
 800b540:	4628      	mov	r0, r5
 800b542:	f001 f803 	bl	800c54c <_sbrk_r>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d00a      	beq.n	800b560 <sbrk_aligned+0x34>
 800b54a:	1cc4      	adds	r4, r0, #3
 800b54c:	f024 0403 	bic.w	r4, r4, #3
 800b550:	42a0      	cmp	r0, r4
 800b552:	d007      	beq.n	800b564 <sbrk_aligned+0x38>
 800b554:	1a21      	subs	r1, r4, r0
 800b556:	4628      	mov	r0, r5
 800b558:	f000 fff8 	bl	800c54c <_sbrk_r>
 800b55c:	3001      	adds	r0, #1
 800b55e:	d101      	bne.n	800b564 <sbrk_aligned+0x38>
 800b560:	f04f 34ff 	mov.w	r4, #4294967295
 800b564:	4620      	mov	r0, r4
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	20001b64 	.word	0x20001b64

0800b56c <_malloc_r>:
 800b56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b570:	1ccd      	adds	r5, r1, #3
 800b572:	f025 0503 	bic.w	r5, r5, #3
 800b576:	3508      	adds	r5, #8
 800b578:	2d0c      	cmp	r5, #12
 800b57a:	bf38      	it	cc
 800b57c:	250c      	movcc	r5, #12
 800b57e:	2d00      	cmp	r5, #0
 800b580:	4607      	mov	r7, r0
 800b582:	db01      	blt.n	800b588 <_malloc_r+0x1c>
 800b584:	42a9      	cmp	r1, r5
 800b586:	d905      	bls.n	800b594 <_malloc_r+0x28>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	2600      	movs	r6, #0
 800b58e:	4630      	mov	r0, r6
 800b590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b594:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b668 <_malloc_r+0xfc>
 800b598:	f000 f868 	bl	800b66c <__malloc_lock>
 800b59c:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a0:	461c      	mov	r4, r3
 800b5a2:	bb5c      	cbnz	r4, 800b5fc <_malloc_r+0x90>
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	f7ff ffc0 	bl	800b52c <sbrk_aligned>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	d155      	bne.n	800b65e <_malloc_r+0xf2>
 800b5b2:	f8d8 4000 	ldr.w	r4, [r8]
 800b5b6:	4626      	mov	r6, r4
 800b5b8:	2e00      	cmp	r6, #0
 800b5ba:	d145      	bne.n	800b648 <_malloc_r+0xdc>
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	d048      	beq.n	800b652 <_malloc_r+0xe6>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	eb04 0903 	add.w	r9, r4, r3
 800b5ca:	f000 ffbf 	bl	800c54c <_sbrk_r>
 800b5ce:	4581      	cmp	r9, r0
 800b5d0:	d13f      	bne.n	800b652 <_malloc_r+0xe6>
 800b5d2:	6821      	ldr	r1, [r4, #0]
 800b5d4:	1a6d      	subs	r5, r5, r1
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7ff ffa7 	bl	800b52c <sbrk_aligned>
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d037      	beq.n	800b652 <_malloc_r+0xe6>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	442b      	add	r3, r5
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d038      	beq.n	800b662 <_malloc_r+0xf6>
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	42a2      	cmp	r2, r4
 800b5f4:	d12b      	bne.n	800b64e <_malloc_r+0xe2>
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	605a      	str	r2, [r3, #4]
 800b5fa:	e00f      	b.n	800b61c <_malloc_r+0xb0>
 800b5fc:	6822      	ldr	r2, [r4, #0]
 800b5fe:	1b52      	subs	r2, r2, r5
 800b600:	d41f      	bmi.n	800b642 <_malloc_r+0xd6>
 800b602:	2a0b      	cmp	r2, #11
 800b604:	d917      	bls.n	800b636 <_malloc_r+0xca>
 800b606:	1961      	adds	r1, r4, r5
 800b608:	42a3      	cmp	r3, r4
 800b60a:	6025      	str	r5, [r4, #0]
 800b60c:	bf18      	it	ne
 800b60e:	6059      	strne	r1, [r3, #4]
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	bf08      	it	eq
 800b614:	f8c8 1000 	streq.w	r1, [r8]
 800b618:	5162      	str	r2, [r4, r5]
 800b61a:	604b      	str	r3, [r1, #4]
 800b61c:	4638      	mov	r0, r7
 800b61e:	f104 060b 	add.w	r6, r4, #11
 800b622:	f000 f829 	bl	800b678 <__malloc_unlock>
 800b626:	f026 0607 	bic.w	r6, r6, #7
 800b62a:	1d23      	adds	r3, r4, #4
 800b62c:	1af2      	subs	r2, r6, r3
 800b62e:	d0ae      	beq.n	800b58e <_malloc_r+0x22>
 800b630:	1b9b      	subs	r3, r3, r6
 800b632:	50a3      	str	r3, [r4, r2]
 800b634:	e7ab      	b.n	800b58e <_malloc_r+0x22>
 800b636:	42a3      	cmp	r3, r4
 800b638:	6862      	ldr	r2, [r4, #4]
 800b63a:	d1dd      	bne.n	800b5f8 <_malloc_r+0x8c>
 800b63c:	f8c8 2000 	str.w	r2, [r8]
 800b640:	e7ec      	b.n	800b61c <_malloc_r+0xb0>
 800b642:	4623      	mov	r3, r4
 800b644:	6864      	ldr	r4, [r4, #4]
 800b646:	e7ac      	b.n	800b5a2 <_malloc_r+0x36>
 800b648:	4634      	mov	r4, r6
 800b64a:	6876      	ldr	r6, [r6, #4]
 800b64c:	e7b4      	b.n	800b5b8 <_malloc_r+0x4c>
 800b64e:	4613      	mov	r3, r2
 800b650:	e7cc      	b.n	800b5ec <_malloc_r+0x80>
 800b652:	230c      	movs	r3, #12
 800b654:	603b      	str	r3, [r7, #0]
 800b656:	4638      	mov	r0, r7
 800b658:	f000 f80e 	bl	800b678 <__malloc_unlock>
 800b65c:	e797      	b.n	800b58e <_malloc_r+0x22>
 800b65e:	6025      	str	r5, [r4, #0]
 800b660:	e7dc      	b.n	800b61c <_malloc_r+0xb0>
 800b662:	605b      	str	r3, [r3, #4]
 800b664:	deff      	udf	#255	; 0xff
 800b666:	bf00      	nop
 800b668:	20001b60 	.word	0x20001b60

0800b66c <__malloc_lock>:
 800b66c:	4801      	ldr	r0, [pc, #4]	; (800b674 <__malloc_lock+0x8>)
 800b66e:	f7ff b88d 	b.w	800a78c <__retarget_lock_acquire_recursive>
 800b672:	bf00      	nop
 800b674:	20001b5c 	.word	0x20001b5c

0800b678 <__malloc_unlock>:
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <__malloc_unlock+0x8>)
 800b67a:	f7ff b888 	b.w	800a78e <__retarget_lock_release_recursive>
 800b67e:	bf00      	nop
 800b680:	20001b5c 	.word	0x20001b5c

0800b684 <_Balloc>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	69c6      	ldr	r6, [r0, #28]
 800b688:	4604      	mov	r4, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	b976      	cbnz	r6, 800b6ac <_Balloc+0x28>
 800b68e:	2010      	movs	r0, #16
 800b690:	f7ff ff44 	bl	800b51c <malloc>
 800b694:	4602      	mov	r2, r0
 800b696:	61e0      	str	r0, [r4, #28]
 800b698:	b920      	cbnz	r0, 800b6a4 <_Balloc+0x20>
 800b69a:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <_Balloc+0x78>)
 800b69c:	4818      	ldr	r0, [pc, #96]	; (800b700 <_Balloc+0x7c>)
 800b69e:	216b      	movs	r1, #107	; 0x6b
 800b6a0:	f000 ff72 	bl	800c588 <__assert_func>
 800b6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6a8:	6006      	str	r6, [r0, #0]
 800b6aa:	60c6      	str	r6, [r0, #12]
 800b6ac:	69e6      	ldr	r6, [r4, #28]
 800b6ae:	68f3      	ldr	r3, [r6, #12]
 800b6b0:	b183      	cbz	r3, 800b6d4 <_Balloc+0x50>
 800b6b2:	69e3      	ldr	r3, [r4, #28]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ba:	b9b8      	cbnz	r0, 800b6ec <_Balloc+0x68>
 800b6bc:	2101      	movs	r1, #1
 800b6be:	fa01 f605 	lsl.w	r6, r1, r5
 800b6c2:	1d72      	adds	r2, r6, #5
 800b6c4:	0092      	lsls	r2, r2, #2
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 ff7c 	bl	800c5c4 <_calloc_r>
 800b6cc:	b160      	cbz	r0, 800b6e8 <_Balloc+0x64>
 800b6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6d2:	e00e      	b.n	800b6f2 <_Balloc+0x6e>
 800b6d4:	2221      	movs	r2, #33	; 0x21
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 ff73 	bl	800c5c4 <_calloc_r>
 800b6de:	69e3      	ldr	r3, [r4, #28]
 800b6e0:	60f0      	str	r0, [r6, #12]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e4      	bne.n	800b6b2 <_Balloc+0x2e>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	6802      	ldr	r2, [r0, #0]
 800b6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6f8:	e7f7      	b.n	800b6ea <_Balloc+0x66>
 800b6fa:	bf00      	nop
 800b6fc:	0800da21 	.word	0x0800da21
 800b700:	0800daa1 	.word	0x0800daa1

0800b704 <_Bfree>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	69c6      	ldr	r6, [r0, #28]
 800b708:	4605      	mov	r5, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	b976      	cbnz	r6, 800b72c <_Bfree+0x28>
 800b70e:	2010      	movs	r0, #16
 800b710:	f7ff ff04 	bl	800b51c <malloc>
 800b714:	4602      	mov	r2, r0
 800b716:	61e8      	str	r0, [r5, #28]
 800b718:	b920      	cbnz	r0, 800b724 <_Bfree+0x20>
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <_Bfree+0x3c>)
 800b71c:	4809      	ldr	r0, [pc, #36]	; (800b744 <_Bfree+0x40>)
 800b71e:	218f      	movs	r1, #143	; 0x8f
 800b720:	f000 ff32 	bl	800c588 <__assert_func>
 800b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b728:	6006      	str	r6, [r0, #0]
 800b72a:	60c6      	str	r6, [r0, #12]
 800b72c:	b13c      	cbz	r4, 800b73e <_Bfree+0x3a>
 800b72e:	69eb      	ldr	r3, [r5, #28]
 800b730:	6862      	ldr	r2, [r4, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b738:	6021      	str	r1, [r4, #0]
 800b73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	0800da21 	.word	0x0800da21
 800b744:	0800daa1 	.word	0x0800daa1

0800b748 <__multadd>:
 800b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74c:	690d      	ldr	r5, [r1, #16]
 800b74e:	4607      	mov	r7, r0
 800b750:	460c      	mov	r4, r1
 800b752:	461e      	mov	r6, r3
 800b754:	f101 0c14 	add.w	ip, r1, #20
 800b758:	2000      	movs	r0, #0
 800b75a:	f8dc 3000 	ldr.w	r3, [ip]
 800b75e:	b299      	uxth	r1, r3
 800b760:	fb02 6101 	mla	r1, r2, r1, r6
 800b764:	0c1e      	lsrs	r6, r3, #16
 800b766:	0c0b      	lsrs	r3, r1, #16
 800b768:	fb02 3306 	mla	r3, r2, r6, r3
 800b76c:	b289      	uxth	r1, r1
 800b76e:	3001      	adds	r0, #1
 800b770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b774:	4285      	cmp	r5, r0
 800b776:	f84c 1b04 	str.w	r1, [ip], #4
 800b77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b77e:	dcec      	bgt.n	800b75a <__multadd+0x12>
 800b780:	b30e      	cbz	r6, 800b7c6 <__multadd+0x7e>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	42ab      	cmp	r3, r5
 800b786:	dc19      	bgt.n	800b7bc <__multadd+0x74>
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	4638      	mov	r0, r7
 800b78c:	3101      	adds	r1, #1
 800b78e:	f7ff ff79 	bl	800b684 <_Balloc>
 800b792:	4680      	mov	r8, r0
 800b794:	b928      	cbnz	r0, 800b7a2 <__multadd+0x5a>
 800b796:	4602      	mov	r2, r0
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <__multadd+0x84>)
 800b79a:	480d      	ldr	r0, [pc, #52]	; (800b7d0 <__multadd+0x88>)
 800b79c:	21ba      	movs	r1, #186	; 0xba
 800b79e:	f000 fef3 	bl	800c588 <__assert_func>
 800b7a2:	6922      	ldr	r2, [r4, #16]
 800b7a4:	3202      	adds	r2, #2
 800b7a6:	f104 010c 	add.w	r1, r4, #12
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	300c      	adds	r0, #12
 800b7ae:	f000 fedd 	bl	800c56c <memcpy>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ffa5 	bl	800b704 <_Bfree>
 800b7ba:	4644      	mov	r4, r8
 800b7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	615e      	str	r6, [r3, #20]
 800b7c4:	6125      	str	r5, [r4, #16]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	0800da90 	.word	0x0800da90
 800b7d0:	0800daa1 	.word	0x0800daa1

0800b7d4 <__hi0bits>:
 800b7d4:	0c03      	lsrs	r3, r0, #16
 800b7d6:	041b      	lsls	r3, r3, #16
 800b7d8:	b9d3      	cbnz	r3, 800b810 <__hi0bits+0x3c>
 800b7da:	0400      	lsls	r0, r0, #16
 800b7dc:	2310      	movs	r3, #16
 800b7de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7e2:	bf04      	itt	eq
 800b7e4:	0200      	lsleq	r0, r0, #8
 800b7e6:	3308      	addeq	r3, #8
 800b7e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7ec:	bf04      	itt	eq
 800b7ee:	0100      	lsleq	r0, r0, #4
 800b7f0:	3304      	addeq	r3, #4
 800b7f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7f6:	bf04      	itt	eq
 800b7f8:	0080      	lsleq	r0, r0, #2
 800b7fa:	3302      	addeq	r3, #2
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	db05      	blt.n	800b80c <__hi0bits+0x38>
 800b800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b804:	f103 0301 	add.w	r3, r3, #1
 800b808:	bf08      	it	eq
 800b80a:	2320      	moveq	r3, #32
 800b80c:	4618      	mov	r0, r3
 800b80e:	4770      	bx	lr
 800b810:	2300      	movs	r3, #0
 800b812:	e7e4      	b.n	800b7de <__hi0bits+0xa>

0800b814 <__lo0bits>:
 800b814:	6803      	ldr	r3, [r0, #0]
 800b816:	f013 0207 	ands.w	r2, r3, #7
 800b81a:	d00c      	beq.n	800b836 <__lo0bits+0x22>
 800b81c:	07d9      	lsls	r1, r3, #31
 800b81e:	d422      	bmi.n	800b866 <__lo0bits+0x52>
 800b820:	079a      	lsls	r2, r3, #30
 800b822:	bf49      	itett	mi
 800b824:	085b      	lsrmi	r3, r3, #1
 800b826:	089b      	lsrpl	r3, r3, #2
 800b828:	6003      	strmi	r3, [r0, #0]
 800b82a:	2201      	movmi	r2, #1
 800b82c:	bf5c      	itt	pl
 800b82e:	6003      	strpl	r3, [r0, #0]
 800b830:	2202      	movpl	r2, #2
 800b832:	4610      	mov	r0, r2
 800b834:	4770      	bx	lr
 800b836:	b299      	uxth	r1, r3
 800b838:	b909      	cbnz	r1, 800b83e <__lo0bits+0x2a>
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	2210      	movs	r2, #16
 800b83e:	b2d9      	uxtb	r1, r3
 800b840:	b909      	cbnz	r1, 800b846 <__lo0bits+0x32>
 800b842:	3208      	adds	r2, #8
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	0719      	lsls	r1, r3, #28
 800b848:	bf04      	itt	eq
 800b84a:	091b      	lsreq	r3, r3, #4
 800b84c:	3204      	addeq	r2, #4
 800b84e:	0799      	lsls	r1, r3, #30
 800b850:	bf04      	itt	eq
 800b852:	089b      	lsreq	r3, r3, #2
 800b854:	3202      	addeq	r2, #2
 800b856:	07d9      	lsls	r1, r3, #31
 800b858:	d403      	bmi.n	800b862 <__lo0bits+0x4e>
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	f102 0201 	add.w	r2, r2, #1
 800b860:	d003      	beq.n	800b86a <__lo0bits+0x56>
 800b862:	6003      	str	r3, [r0, #0]
 800b864:	e7e5      	b.n	800b832 <__lo0bits+0x1e>
 800b866:	2200      	movs	r2, #0
 800b868:	e7e3      	b.n	800b832 <__lo0bits+0x1e>
 800b86a:	2220      	movs	r2, #32
 800b86c:	e7e1      	b.n	800b832 <__lo0bits+0x1e>
	...

0800b870 <__i2b>:
 800b870:	b510      	push	{r4, lr}
 800b872:	460c      	mov	r4, r1
 800b874:	2101      	movs	r1, #1
 800b876:	f7ff ff05 	bl	800b684 <_Balloc>
 800b87a:	4602      	mov	r2, r0
 800b87c:	b928      	cbnz	r0, 800b88a <__i2b+0x1a>
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <__i2b+0x24>)
 800b880:	4805      	ldr	r0, [pc, #20]	; (800b898 <__i2b+0x28>)
 800b882:	f240 1145 	movw	r1, #325	; 0x145
 800b886:	f000 fe7f 	bl	800c588 <__assert_func>
 800b88a:	2301      	movs	r3, #1
 800b88c:	6144      	str	r4, [r0, #20]
 800b88e:	6103      	str	r3, [r0, #16]
 800b890:	bd10      	pop	{r4, pc}
 800b892:	bf00      	nop
 800b894:	0800da90 	.word	0x0800da90
 800b898:	0800daa1 	.word	0x0800daa1

0800b89c <__multiply>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	4691      	mov	r9, r2
 800b8a2:	690a      	ldr	r2, [r1, #16]
 800b8a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	bfb8      	it	lt
 800b8ac:	460b      	movlt	r3, r1
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	bfbc      	itt	lt
 800b8b2:	464c      	movlt	r4, r9
 800b8b4:	4699      	movlt	r9, r3
 800b8b6:	6927      	ldr	r7, [r4, #16]
 800b8b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8bc:	68a3      	ldr	r3, [r4, #8]
 800b8be:	6861      	ldr	r1, [r4, #4]
 800b8c0:	eb07 060a 	add.w	r6, r7, sl
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	bfb8      	it	lt
 800b8ca:	3101      	addlt	r1, #1
 800b8cc:	f7ff feda 	bl	800b684 <_Balloc>
 800b8d0:	b930      	cbnz	r0, 800b8e0 <__multiply+0x44>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	4b44      	ldr	r3, [pc, #272]	; (800b9e8 <__multiply+0x14c>)
 800b8d6:	4845      	ldr	r0, [pc, #276]	; (800b9ec <__multiply+0x150>)
 800b8d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b8dc:	f000 fe54 	bl	800c588 <__assert_func>
 800b8e0:	f100 0514 	add.w	r5, r0, #20
 800b8e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8e8:	462b      	mov	r3, r5
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	4543      	cmp	r3, r8
 800b8ee:	d321      	bcc.n	800b934 <__multiply+0x98>
 800b8f0:	f104 0314 	add.w	r3, r4, #20
 800b8f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8f8:	f109 0314 	add.w	r3, r9, #20
 800b8fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b900:	9202      	str	r2, [sp, #8]
 800b902:	1b3a      	subs	r2, r7, r4
 800b904:	3a15      	subs	r2, #21
 800b906:	f022 0203 	bic.w	r2, r2, #3
 800b90a:	3204      	adds	r2, #4
 800b90c:	f104 0115 	add.w	r1, r4, #21
 800b910:	428f      	cmp	r7, r1
 800b912:	bf38      	it	cc
 800b914:	2204      	movcc	r2, #4
 800b916:	9201      	str	r2, [sp, #4]
 800b918:	9a02      	ldr	r2, [sp, #8]
 800b91a:	9303      	str	r3, [sp, #12]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d80c      	bhi.n	800b93a <__multiply+0x9e>
 800b920:	2e00      	cmp	r6, #0
 800b922:	dd03      	ble.n	800b92c <__multiply+0x90>
 800b924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d05b      	beq.n	800b9e4 <__multiply+0x148>
 800b92c:	6106      	str	r6, [r0, #16]
 800b92e:	b005      	add	sp, #20
 800b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	f843 2b04 	str.w	r2, [r3], #4
 800b938:	e7d8      	b.n	800b8ec <__multiply+0x50>
 800b93a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b93e:	f1ba 0f00 	cmp.w	sl, #0
 800b942:	d024      	beq.n	800b98e <__multiply+0xf2>
 800b944:	f104 0e14 	add.w	lr, r4, #20
 800b948:	46a9      	mov	r9, r5
 800b94a:	f04f 0c00 	mov.w	ip, #0
 800b94e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b952:	f8d9 1000 	ldr.w	r1, [r9]
 800b956:	fa1f fb82 	uxth.w	fp, r2
 800b95a:	b289      	uxth	r1, r1
 800b95c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b964:	f8d9 2000 	ldr.w	r2, [r9]
 800b968:	4461      	add	r1, ip
 800b96a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b96e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b976:	b289      	uxth	r1, r1
 800b978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b97c:	4577      	cmp	r7, lr
 800b97e:	f849 1b04 	str.w	r1, [r9], #4
 800b982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b986:	d8e2      	bhi.n	800b94e <__multiply+0xb2>
 800b988:	9a01      	ldr	r2, [sp, #4]
 800b98a:	f845 c002 	str.w	ip, [r5, r2]
 800b98e:	9a03      	ldr	r2, [sp, #12]
 800b990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b994:	3304      	adds	r3, #4
 800b996:	f1b9 0f00 	cmp.w	r9, #0
 800b99a:	d021      	beq.n	800b9e0 <__multiply+0x144>
 800b99c:	6829      	ldr	r1, [r5, #0]
 800b99e:	f104 0c14 	add.w	ip, r4, #20
 800b9a2:	46ae      	mov	lr, r5
 800b9a4:	f04f 0a00 	mov.w	sl, #0
 800b9a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b9ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b9b4:	4452      	add	r2, sl
 800b9b6:	b289      	uxth	r1, r1
 800b9b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9bc:	f84e 1b04 	str.w	r1, [lr], #4
 800b9c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b9cc:	fb09 110a 	mla	r1, r9, sl, r1
 800b9d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b9d4:	4567      	cmp	r7, ip
 800b9d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9da:	d8e5      	bhi.n	800b9a8 <__multiply+0x10c>
 800b9dc:	9a01      	ldr	r2, [sp, #4]
 800b9de:	50a9      	str	r1, [r5, r2]
 800b9e0:	3504      	adds	r5, #4
 800b9e2:	e799      	b.n	800b918 <__multiply+0x7c>
 800b9e4:	3e01      	subs	r6, #1
 800b9e6:	e79b      	b.n	800b920 <__multiply+0x84>
 800b9e8:	0800da90 	.word	0x0800da90
 800b9ec:	0800daa1 	.word	0x0800daa1

0800b9f0 <__pow5mult>:
 800b9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f4:	4615      	mov	r5, r2
 800b9f6:	f012 0203 	ands.w	r2, r2, #3
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	d007      	beq.n	800ba10 <__pow5mult+0x20>
 800ba00:	4c25      	ldr	r4, [pc, #148]	; (800ba98 <__pow5mult+0xa8>)
 800ba02:	3a01      	subs	r2, #1
 800ba04:	2300      	movs	r3, #0
 800ba06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba0a:	f7ff fe9d 	bl	800b748 <__multadd>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	10ad      	asrs	r5, r5, #2
 800ba12:	d03d      	beq.n	800ba90 <__pow5mult+0xa0>
 800ba14:	69f4      	ldr	r4, [r6, #28]
 800ba16:	b97c      	cbnz	r4, 800ba38 <__pow5mult+0x48>
 800ba18:	2010      	movs	r0, #16
 800ba1a:	f7ff fd7f 	bl	800b51c <malloc>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	61f0      	str	r0, [r6, #28]
 800ba22:	b928      	cbnz	r0, 800ba30 <__pow5mult+0x40>
 800ba24:	4b1d      	ldr	r3, [pc, #116]	; (800ba9c <__pow5mult+0xac>)
 800ba26:	481e      	ldr	r0, [pc, #120]	; (800baa0 <__pow5mult+0xb0>)
 800ba28:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ba2c:	f000 fdac 	bl	800c588 <__assert_func>
 800ba30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba34:	6004      	str	r4, [r0, #0]
 800ba36:	60c4      	str	r4, [r0, #12]
 800ba38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba40:	b94c      	cbnz	r4, 800ba56 <__pow5mult+0x66>
 800ba42:	f240 2171 	movw	r1, #625	; 0x271
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff ff12 	bl	800b870 <__i2b>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba52:	4604      	mov	r4, r0
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	f04f 0900 	mov.w	r9, #0
 800ba5a:	07eb      	lsls	r3, r5, #31
 800ba5c:	d50a      	bpl.n	800ba74 <__pow5mult+0x84>
 800ba5e:	4639      	mov	r1, r7
 800ba60:	4622      	mov	r2, r4
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7ff ff1a 	bl	800b89c <__multiply>
 800ba68:	4639      	mov	r1, r7
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff fe49 	bl	800b704 <_Bfree>
 800ba72:	4647      	mov	r7, r8
 800ba74:	106d      	asrs	r5, r5, #1
 800ba76:	d00b      	beq.n	800ba90 <__pow5mult+0xa0>
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	b938      	cbnz	r0, 800ba8c <__pow5mult+0x9c>
 800ba7c:	4622      	mov	r2, r4
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff ff0b 	bl	800b89c <__multiply>
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	f8c0 9000 	str.w	r9, [r0]
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	e7e4      	b.n	800ba5a <__pow5mult+0x6a>
 800ba90:	4638      	mov	r0, r7
 800ba92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba96:	bf00      	nop
 800ba98:	0800dbf0 	.word	0x0800dbf0
 800ba9c:	0800da21 	.word	0x0800da21
 800baa0:	0800daa1 	.word	0x0800daa1

0800baa4 <__lshift>:
 800baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	6849      	ldr	r1, [r1, #4]
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	4607      	mov	r7, r0
 800bab6:	4691      	mov	r9, r2
 800bab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800babc:	f108 0601 	add.w	r6, r8, #1
 800bac0:	42b3      	cmp	r3, r6
 800bac2:	db0b      	blt.n	800badc <__lshift+0x38>
 800bac4:	4638      	mov	r0, r7
 800bac6:	f7ff fddd 	bl	800b684 <_Balloc>
 800baca:	4605      	mov	r5, r0
 800bacc:	b948      	cbnz	r0, 800bae2 <__lshift+0x3e>
 800bace:	4602      	mov	r2, r0
 800bad0:	4b28      	ldr	r3, [pc, #160]	; (800bb74 <__lshift+0xd0>)
 800bad2:	4829      	ldr	r0, [pc, #164]	; (800bb78 <__lshift+0xd4>)
 800bad4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bad8:	f000 fd56 	bl	800c588 <__assert_func>
 800badc:	3101      	adds	r1, #1
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	e7ee      	b.n	800bac0 <__lshift+0x1c>
 800bae2:	2300      	movs	r3, #0
 800bae4:	f100 0114 	add.w	r1, r0, #20
 800bae8:	f100 0210 	add.w	r2, r0, #16
 800baec:	4618      	mov	r0, r3
 800baee:	4553      	cmp	r3, sl
 800baf0:	db33      	blt.n	800bb5a <__lshift+0xb6>
 800baf2:	6920      	ldr	r0, [r4, #16]
 800baf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baf8:	f104 0314 	add.w	r3, r4, #20
 800bafc:	f019 091f 	ands.w	r9, r9, #31
 800bb00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb08:	d02b      	beq.n	800bb62 <__lshift+0xbe>
 800bb0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb0e:	468a      	mov	sl, r1
 800bb10:	2200      	movs	r2, #0
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	fa00 f009 	lsl.w	r0, r0, r9
 800bb18:	4310      	orrs	r0, r2
 800bb1a:	f84a 0b04 	str.w	r0, [sl], #4
 800bb1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb22:	459c      	cmp	ip, r3
 800bb24:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb28:	d8f3      	bhi.n	800bb12 <__lshift+0x6e>
 800bb2a:	ebac 0304 	sub.w	r3, ip, r4
 800bb2e:	3b15      	subs	r3, #21
 800bb30:	f023 0303 	bic.w	r3, r3, #3
 800bb34:	3304      	adds	r3, #4
 800bb36:	f104 0015 	add.w	r0, r4, #21
 800bb3a:	4584      	cmp	ip, r0
 800bb3c:	bf38      	it	cc
 800bb3e:	2304      	movcc	r3, #4
 800bb40:	50ca      	str	r2, [r1, r3]
 800bb42:	b10a      	cbz	r2, 800bb48 <__lshift+0xa4>
 800bb44:	f108 0602 	add.w	r6, r8, #2
 800bb48:	3e01      	subs	r6, #1
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	612e      	str	r6, [r5, #16]
 800bb4e:	4621      	mov	r1, r4
 800bb50:	f7ff fdd8 	bl	800b704 <_Bfree>
 800bb54:	4628      	mov	r0, r5
 800bb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb5e:	3301      	adds	r3, #1
 800bb60:	e7c5      	b.n	800baee <__lshift+0x4a>
 800bb62:	3904      	subs	r1, #4
 800bb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb68:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb6c:	459c      	cmp	ip, r3
 800bb6e:	d8f9      	bhi.n	800bb64 <__lshift+0xc0>
 800bb70:	e7ea      	b.n	800bb48 <__lshift+0xa4>
 800bb72:	bf00      	nop
 800bb74:	0800da90 	.word	0x0800da90
 800bb78:	0800daa1 	.word	0x0800daa1

0800bb7c <__mcmp>:
 800bb7c:	b530      	push	{r4, r5, lr}
 800bb7e:	6902      	ldr	r2, [r0, #16]
 800bb80:	690c      	ldr	r4, [r1, #16]
 800bb82:	1b12      	subs	r2, r2, r4
 800bb84:	d10e      	bne.n	800bba4 <__mcmp+0x28>
 800bb86:	f100 0314 	add.w	r3, r0, #20
 800bb8a:	3114      	adds	r1, #20
 800bb8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb9c:	42a5      	cmp	r5, r4
 800bb9e:	d003      	beq.n	800bba8 <__mcmp+0x2c>
 800bba0:	d305      	bcc.n	800bbae <__mcmp+0x32>
 800bba2:	2201      	movs	r2, #1
 800bba4:	4610      	mov	r0, r2
 800bba6:	bd30      	pop	{r4, r5, pc}
 800bba8:	4283      	cmp	r3, r0
 800bbaa:	d3f3      	bcc.n	800bb94 <__mcmp+0x18>
 800bbac:	e7fa      	b.n	800bba4 <__mcmp+0x28>
 800bbae:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb2:	e7f7      	b.n	800bba4 <__mcmp+0x28>

0800bbb4 <__mdiff>:
 800bbb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb8:	460c      	mov	r4, r1
 800bbba:	4606      	mov	r6, r0
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4690      	mov	r8, r2
 800bbc2:	f7ff ffdb 	bl	800bb7c <__mcmp>
 800bbc6:	1e05      	subs	r5, r0, #0
 800bbc8:	d110      	bne.n	800bbec <__mdiff+0x38>
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7ff fd59 	bl	800b684 <_Balloc>
 800bbd2:	b930      	cbnz	r0, 800bbe2 <__mdiff+0x2e>
 800bbd4:	4b3a      	ldr	r3, [pc, #232]	; (800bcc0 <__mdiff+0x10c>)
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	f240 2137 	movw	r1, #567	; 0x237
 800bbdc:	4839      	ldr	r0, [pc, #228]	; (800bcc4 <__mdiff+0x110>)
 800bbde:	f000 fcd3 	bl	800c588 <__assert_func>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbec:	bfa4      	itt	ge
 800bbee:	4643      	movge	r3, r8
 800bbf0:	46a0      	movge	r8, r4
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbf8:	bfa6      	itte	ge
 800bbfa:	461c      	movge	r4, r3
 800bbfc:	2500      	movge	r5, #0
 800bbfe:	2501      	movlt	r5, #1
 800bc00:	f7ff fd40 	bl	800b684 <_Balloc>
 800bc04:	b920      	cbnz	r0, 800bc10 <__mdiff+0x5c>
 800bc06:	4b2e      	ldr	r3, [pc, #184]	; (800bcc0 <__mdiff+0x10c>)
 800bc08:	4602      	mov	r2, r0
 800bc0a:	f240 2145 	movw	r1, #581	; 0x245
 800bc0e:	e7e5      	b.n	800bbdc <__mdiff+0x28>
 800bc10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc14:	6926      	ldr	r6, [r4, #16]
 800bc16:	60c5      	str	r5, [r0, #12]
 800bc18:	f104 0914 	add.w	r9, r4, #20
 800bc1c:	f108 0514 	add.w	r5, r8, #20
 800bc20:	f100 0e14 	add.w	lr, r0, #20
 800bc24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc2c:	f108 0210 	add.w	r2, r8, #16
 800bc30:	46f2      	mov	sl, lr
 800bc32:	2100      	movs	r1, #0
 800bc34:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc3c:	fa11 f88b 	uxtah	r8, r1, fp
 800bc40:	b299      	uxth	r1, r3
 800bc42:	0c1b      	lsrs	r3, r3, #16
 800bc44:	eba8 0801 	sub.w	r8, r8, r1
 800bc48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc50:	fa1f f888 	uxth.w	r8, r8
 800bc54:	1419      	asrs	r1, r3, #16
 800bc56:	454e      	cmp	r6, r9
 800bc58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc5c:	f84a 3b04 	str.w	r3, [sl], #4
 800bc60:	d8e8      	bhi.n	800bc34 <__mdiff+0x80>
 800bc62:	1b33      	subs	r3, r6, r4
 800bc64:	3b15      	subs	r3, #21
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	3415      	adds	r4, #21
 800bc6e:	42a6      	cmp	r6, r4
 800bc70:	bf38      	it	cc
 800bc72:	2304      	movcc	r3, #4
 800bc74:	441d      	add	r5, r3
 800bc76:	4473      	add	r3, lr
 800bc78:	469e      	mov	lr, r3
 800bc7a:	462e      	mov	r6, r5
 800bc7c:	4566      	cmp	r6, ip
 800bc7e:	d30e      	bcc.n	800bc9e <__mdiff+0xea>
 800bc80:	f10c 0203 	add.w	r2, ip, #3
 800bc84:	1b52      	subs	r2, r2, r5
 800bc86:	f022 0203 	bic.w	r2, r2, #3
 800bc8a:	3d03      	subs	r5, #3
 800bc8c:	45ac      	cmp	ip, r5
 800bc8e:	bf38      	it	cc
 800bc90:	2200      	movcc	r2, #0
 800bc92:	4413      	add	r3, r2
 800bc94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc98:	b17a      	cbz	r2, 800bcba <__mdiff+0x106>
 800bc9a:	6107      	str	r7, [r0, #16]
 800bc9c:	e7a4      	b.n	800bbe8 <__mdiff+0x34>
 800bc9e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bca2:	fa11 f288 	uxtah	r2, r1, r8
 800bca6:	1414      	asrs	r4, r2, #16
 800bca8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcac:	b292      	uxth	r2, r2
 800bcae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcb2:	f84e 2b04 	str.w	r2, [lr], #4
 800bcb6:	1421      	asrs	r1, r4, #16
 800bcb8:	e7e0      	b.n	800bc7c <__mdiff+0xc8>
 800bcba:	3f01      	subs	r7, #1
 800bcbc:	e7ea      	b.n	800bc94 <__mdiff+0xe0>
 800bcbe:	bf00      	nop
 800bcc0:	0800da90 	.word	0x0800da90
 800bcc4:	0800daa1 	.word	0x0800daa1

0800bcc8 <__d2b>:
 800bcc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bccc:	460f      	mov	r7, r1
 800bcce:	2101      	movs	r1, #1
 800bcd0:	ec59 8b10 	vmov	r8, r9, d0
 800bcd4:	4616      	mov	r6, r2
 800bcd6:	f7ff fcd5 	bl	800b684 <_Balloc>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	b930      	cbnz	r0, 800bcec <__d2b+0x24>
 800bcde:	4602      	mov	r2, r0
 800bce0:	4b24      	ldr	r3, [pc, #144]	; (800bd74 <__d2b+0xac>)
 800bce2:	4825      	ldr	r0, [pc, #148]	; (800bd78 <__d2b+0xb0>)
 800bce4:	f240 310f 	movw	r1, #783	; 0x30f
 800bce8:	f000 fc4e 	bl	800c588 <__assert_func>
 800bcec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcf4:	bb2d      	cbnz	r5, 800bd42 <__d2b+0x7a>
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	f1b8 0300 	subs.w	r3, r8, #0
 800bcfc:	d026      	beq.n	800bd4c <__d2b+0x84>
 800bcfe:	4668      	mov	r0, sp
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	f7ff fd87 	bl	800b814 <__lo0bits>
 800bd06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd0a:	b1e8      	cbz	r0, 800bd48 <__d2b+0x80>
 800bd0c:	f1c0 0320 	rsb	r3, r0, #32
 800bd10:	fa02 f303 	lsl.w	r3, r2, r3
 800bd14:	430b      	orrs	r3, r1
 800bd16:	40c2      	lsrs	r2, r0
 800bd18:	6163      	str	r3, [r4, #20]
 800bd1a:	9201      	str	r2, [sp, #4]
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	61a3      	str	r3, [r4, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bf14      	ite	ne
 800bd24:	2202      	movne	r2, #2
 800bd26:	2201      	moveq	r2, #1
 800bd28:	6122      	str	r2, [r4, #16]
 800bd2a:	b1bd      	cbz	r5, 800bd5c <__d2b+0x94>
 800bd2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd30:	4405      	add	r5, r0
 800bd32:	603d      	str	r5, [r7, #0]
 800bd34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd38:	6030      	str	r0, [r6, #0]
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	b003      	add	sp, #12
 800bd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd46:	e7d6      	b.n	800bcf6 <__d2b+0x2e>
 800bd48:	6161      	str	r1, [r4, #20]
 800bd4a:	e7e7      	b.n	800bd1c <__d2b+0x54>
 800bd4c:	a801      	add	r0, sp, #4
 800bd4e:	f7ff fd61 	bl	800b814 <__lo0bits>
 800bd52:	9b01      	ldr	r3, [sp, #4]
 800bd54:	6163      	str	r3, [r4, #20]
 800bd56:	3020      	adds	r0, #32
 800bd58:	2201      	movs	r2, #1
 800bd5a:	e7e5      	b.n	800bd28 <__d2b+0x60>
 800bd5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd64:	6038      	str	r0, [r7, #0]
 800bd66:	6918      	ldr	r0, [r3, #16]
 800bd68:	f7ff fd34 	bl	800b7d4 <__hi0bits>
 800bd6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd70:	e7e2      	b.n	800bd38 <__d2b+0x70>
 800bd72:	bf00      	nop
 800bd74:	0800da90 	.word	0x0800da90
 800bd78:	0800daa1 	.word	0x0800daa1

0800bd7c <__ssputs_r>:
 800bd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd80:	688e      	ldr	r6, [r1, #8]
 800bd82:	461f      	mov	r7, r3
 800bd84:	42be      	cmp	r6, r7
 800bd86:	680b      	ldr	r3, [r1, #0]
 800bd88:	4682      	mov	sl, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	4690      	mov	r8, r2
 800bd8e:	d82c      	bhi.n	800bdea <__ssputs_r+0x6e>
 800bd90:	898a      	ldrh	r2, [r1, #12]
 800bd92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd96:	d026      	beq.n	800bde6 <__ssputs_r+0x6a>
 800bd98:	6965      	ldr	r5, [r4, #20]
 800bd9a:	6909      	ldr	r1, [r1, #16]
 800bd9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bda0:	eba3 0901 	sub.w	r9, r3, r1
 800bda4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bda8:	1c7b      	adds	r3, r7, #1
 800bdaa:	444b      	add	r3, r9
 800bdac:	106d      	asrs	r5, r5, #1
 800bdae:	429d      	cmp	r5, r3
 800bdb0:	bf38      	it	cc
 800bdb2:	461d      	movcc	r5, r3
 800bdb4:	0553      	lsls	r3, r2, #21
 800bdb6:	d527      	bpl.n	800be08 <__ssputs_r+0x8c>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	f7ff fbd7 	bl	800b56c <_malloc_r>
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	b360      	cbz	r0, 800be1c <__ssputs_r+0xa0>
 800bdc2:	6921      	ldr	r1, [r4, #16]
 800bdc4:	464a      	mov	r2, r9
 800bdc6:	f000 fbd1 	bl	800c56c <memcpy>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	6126      	str	r6, [r4, #16]
 800bdd8:	6165      	str	r5, [r4, #20]
 800bdda:	444e      	add	r6, r9
 800bddc:	eba5 0509 	sub.w	r5, r5, r9
 800bde0:	6026      	str	r6, [r4, #0]
 800bde2:	60a5      	str	r5, [r4, #8]
 800bde4:	463e      	mov	r6, r7
 800bde6:	42be      	cmp	r6, r7
 800bde8:	d900      	bls.n	800bdec <__ssputs_r+0x70>
 800bdea:	463e      	mov	r6, r7
 800bdec:	6820      	ldr	r0, [r4, #0]
 800bdee:	4632      	mov	r2, r6
 800bdf0:	4641      	mov	r1, r8
 800bdf2:	f000 fb6f 	bl	800c4d4 <memmove>
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	1b9b      	subs	r3, r3, r6
 800bdfa:	60a3      	str	r3, [r4, #8]
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	4433      	add	r3, r6
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	2000      	movs	r0, #0
 800be04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be08:	462a      	mov	r2, r5
 800be0a:	f000 fc03 	bl	800c614 <_realloc_r>
 800be0e:	4606      	mov	r6, r0
 800be10:	2800      	cmp	r0, #0
 800be12:	d1e0      	bne.n	800bdd6 <__ssputs_r+0x5a>
 800be14:	6921      	ldr	r1, [r4, #16]
 800be16:	4650      	mov	r0, sl
 800be18:	f7ff fb34 	bl	800b484 <_free_r>
 800be1c:	230c      	movs	r3, #12
 800be1e:	f8ca 3000 	str.w	r3, [sl]
 800be22:	89a3      	ldrh	r3, [r4, #12]
 800be24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be28:	81a3      	strh	r3, [r4, #12]
 800be2a:	f04f 30ff 	mov.w	r0, #4294967295
 800be2e:	e7e9      	b.n	800be04 <__ssputs_r+0x88>

0800be30 <_svfiprintf_r>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	4698      	mov	r8, r3
 800be36:	898b      	ldrh	r3, [r1, #12]
 800be38:	061b      	lsls	r3, r3, #24
 800be3a:	b09d      	sub	sp, #116	; 0x74
 800be3c:	4607      	mov	r7, r0
 800be3e:	460d      	mov	r5, r1
 800be40:	4614      	mov	r4, r2
 800be42:	d50e      	bpl.n	800be62 <_svfiprintf_r+0x32>
 800be44:	690b      	ldr	r3, [r1, #16]
 800be46:	b963      	cbnz	r3, 800be62 <_svfiprintf_r+0x32>
 800be48:	2140      	movs	r1, #64	; 0x40
 800be4a:	f7ff fb8f 	bl	800b56c <_malloc_r>
 800be4e:	6028      	str	r0, [r5, #0]
 800be50:	6128      	str	r0, [r5, #16]
 800be52:	b920      	cbnz	r0, 800be5e <_svfiprintf_r+0x2e>
 800be54:	230c      	movs	r3, #12
 800be56:	603b      	str	r3, [r7, #0]
 800be58:	f04f 30ff 	mov.w	r0, #4294967295
 800be5c:	e0d0      	b.n	800c000 <_svfiprintf_r+0x1d0>
 800be5e:	2340      	movs	r3, #64	; 0x40
 800be60:	616b      	str	r3, [r5, #20]
 800be62:	2300      	movs	r3, #0
 800be64:	9309      	str	r3, [sp, #36]	; 0x24
 800be66:	2320      	movs	r3, #32
 800be68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be70:	2330      	movs	r3, #48	; 0x30
 800be72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c018 <_svfiprintf_r+0x1e8>
 800be76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be7a:	f04f 0901 	mov.w	r9, #1
 800be7e:	4623      	mov	r3, r4
 800be80:	469a      	mov	sl, r3
 800be82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be86:	b10a      	cbz	r2, 800be8c <_svfiprintf_r+0x5c>
 800be88:	2a25      	cmp	r2, #37	; 0x25
 800be8a:	d1f9      	bne.n	800be80 <_svfiprintf_r+0x50>
 800be8c:	ebba 0b04 	subs.w	fp, sl, r4
 800be90:	d00b      	beq.n	800beaa <_svfiprintf_r+0x7a>
 800be92:	465b      	mov	r3, fp
 800be94:	4622      	mov	r2, r4
 800be96:	4629      	mov	r1, r5
 800be98:	4638      	mov	r0, r7
 800be9a:	f7ff ff6f 	bl	800bd7c <__ssputs_r>
 800be9e:	3001      	adds	r0, #1
 800bea0:	f000 80a9 	beq.w	800bff6 <_svfiprintf_r+0x1c6>
 800bea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea6:	445a      	add	r2, fp
 800bea8:	9209      	str	r2, [sp, #36]	; 0x24
 800beaa:	f89a 3000 	ldrb.w	r3, [sl]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 80a1 	beq.w	800bff6 <_svfiprintf_r+0x1c6>
 800beb4:	2300      	movs	r3, #0
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bebe:	f10a 0a01 	add.w	sl, sl, #1
 800bec2:	9304      	str	r3, [sp, #16]
 800bec4:	9307      	str	r3, [sp, #28]
 800bec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beca:	931a      	str	r3, [sp, #104]	; 0x68
 800becc:	4654      	mov	r4, sl
 800bece:	2205      	movs	r2, #5
 800bed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed4:	4850      	ldr	r0, [pc, #320]	; (800c018 <_svfiprintf_r+0x1e8>)
 800bed6:	f7f4 f9a3 	bl	8000220 <memchr>
 800beda:	9a04      	ldr	r2, [sp, #16]
 800bedc:	b9d8      	cbnz	r0, 800bf16 <_svfiprintf_r+0xe6>
 800bede:	06d0      	lsls	r0, r2, #27
 800bee0:	bf44      	itt	mi
 800bee2:	2320      	movmi	r3, #32
 800bee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee8:	0711      	lsls	r1, r2, #28
 800beea:	bf44      	itt	mi
 800beec:	232b      	movmi	r3, #43	; 0x2b
 800beee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef2:	f89a 3000 	ldrb.w	r3, [sl]
 800bef6:	2b2a      	cmp	r3, #42	; 0x2a
 800bef8:	d015      	beq.n	800bf26 <_svfiprintf_r+0xf6>
 800befa:	9a07      	ldr	r2, [sp, #28]
 800befc:	4654      	mov	r4, sl
 800befe:	2000      	movs	r0, #0
 800bf00:	f04f 0c0a 	mov.w	ip, #10
 800bf04:	4621      	mov	r1, r4
 800bf06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf0a:	3b30      	subs	r3, #48	; 0x30
 800bf0c:	2b09      	cmp	r3, #9
 800bf0e:	d94d      	bls.n	800bfac <_svfiprintf_r+0x17c>
 800bf10:	b1b0      	cbz	r0, 800bf40 <_svfiprintf_r+0x110>
 800bf12:	9207      	str	r2, [sp, #28]
 800bf14:	e014      	b.n	800bf40 <_svfiprintf_r+0x110>
 800bf16:	eba0 0308 	sub.w	r3, r0, r8
 800bf1a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	46a2      	mov	sl, r4
 800bf24:	e7d2      	b.n	800becc <_svfiprintf_r+0x9c>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	1d19      	adds	r1, r3, #4
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	9103      	str	r1, [sp, #12]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bfbb      	ittet	lt
 800bf32:	425b      	neglt	r3, r3
 800bf34:	f042 0202 	orrlt.w	r2, r2, #2
 800bf38:	9307      	strge	r3, [sp, #28]
 800bf3a:	9307      	strlt	r3, [sp, #28]
 800bf3c:	bfb8      	it	lt
 800bf3e:	9204      	strlt	r2, [sp, #16]
 800bf40:	7823      	ldrb	r3, [r4, #0]
 800bf42:	2b2e      	cmp	r3, #46	; 0x2e
 800bf44:	d10c      	bne.n	800bf60 <_svfiprintf_r+0x130>
 800bf46:	7863      	ldrb	r3, [r4, #1]
 800bf48:	2b2a      	cmp	r3, #42	; 0x2a
 800bf4a:	d134      	bne.n	800bfb6 <_svfiprintf_r+0x186>
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	1d1a      	adds	r2, r3, #4
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	9203      	str	r2, [sp, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	bfb8      	it	lt
 800bf58:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf5c:	3402      	adds	r4, #2
 800bf5e:	9305      	str	r3, [sp, #20]
 800bf60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c028 <_svfiprintf_r+0x1f8>
 800bf64:	7821      	ldrb	r1, [r4, #0]
 800bf66:	2203      	movs	r2, #3
 800bf68:	4650      	mov	r0, sl
 800bf6a:	f7f4 f959 	bl	8000220 <memchr>
 800bf6e:	b138      	cbz	r0, 800bf80 <_svfiprintf_r+0x150>
 800bf70:	9b04      	ldr	r3, [sp, #16]
 800bf72:	eba0 000a 	sub.w	r0, r0, sl
 800bf76:	2240      	movs	r2, #64	; 0x40
 800bf78:	4082      	lsls	r2, r0
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	3401      	adds	r4, #1
 800bf7e:	9304      	str	r3, [sp, #16]
 800bf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf84:	4825      	ldr	r0, [pc, #148]	; (800c01c <_svfiprintf_r+0x1ec>)
 800bf86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf8a:	2206      	movs	r2, #6
 800bf8c:	f7f4 f948 	bl	8000220 <memchr>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d038      	beq.n	800c006 <_svfiprintf_r+0x1d6>
 800bf94:	4b22      	ldr	r3, [pc, #136]	; (800c020 <_svfiprintf_r+0x1f0>)
 800bf96:	bb1b      	cbnz	r3, 800bfe0 <_svfiprintf_r+0x1b0>
 800bf98:	9b03      	ldr	r3, [sp, #12]
 800bf9a:	3307      	adds	r3, #7
 800bf9c:	f023 0307 	bic.w	r3, r3, #7
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	9303      	str	r3, [sp, #12]
 800bfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa6:	4433      	add	r3, r6
 800bfa8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfaa:	e768      	b.n	800be7e <_svfiprintf_r+0x4e>
 800bfac:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	e7a6      	b.n	800bf04 <_svfiprintf_r+0xd4>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	3401      	adds	r4, #1
 800bfba:	9305      	str	r3, [sp, #20]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	f04f 0c0a 	mov.w	ip, #10
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc8:	3a30      	subs	r2, #48	; 0x30
 800bfca:	2a09      	cmp	r2, #9
 800bfcc:	d903      	bls.n	800bfd6 <_svfiprintf_r+0x1a6>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0c6      	beq.n	800bf60 <_svfiprintf_r+0x130>
 800bfd2:	9105      	str	r1, [sp, #20]
 800bfd4:	e7c4      	b.n	800bf60 <_svfiprintf_r+0x130>
 800bfd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfda:	4604      	mov	r4, r0
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e7f0      	b.n	800bfc2 <_svfiprintf_r+0x192>
 800bfe0:	ab03      	add	r3, sp, #12
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	462a      	mov	r2, r5
 800bfe6:	4b0f      	ldr	r3, [pc, #60]	; (800c024 <_svfiprintf_r+0x1f4>)
 800bfe8:	a904      	add	r1, sp, #16
 800bfea:	4638      	mov	r0, r7
 800bfec:	f7fd fcc0 	bl	8009970 <_printf_float>
 800bff0:	1c42      	adds	r2, r0, #1
 800bff2:	4606      	mov	r6, r0
 800bff4:	d1d6      	bne.n	800bfa4 <_svfiprintf_r+0x174>
 800bff6:	89ab      	ldrh	r3, [r5, #12]
 800bff8:	065b      	lsls	r3, r3, #25
 800bffa:	f53f af2d 	bmi.w	800be58 <_svfiprintf_r+0x28>
 800bffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c000:	b01d      	add	sp, #116	; 0x74
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	ab03      	add	r3, sp, #12
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	462a      	mov	r2, r5
 800c00c:	4b05      	ldr	r3, [pc, #20]	; (800c024 <_svfiprintf_r+0x1f4>)
 800c00e:	a904      	add	r1, sp, #16
 800c010:	4638      	mov	r0, r7
 800c012:	f7fd ff51 	bl	8009eb8 <_printf_i>
 800c016:	e7eb      	b.n	800bff0 <_svfiprintf_r+0x1c0>
 800c018:	0800dbfc 	.word	0x0800dbfc
 800c01c:	0800dc06 	.word	0x0800dc06
 800c020:	08009971 	.word	0x08009971
 800c024:	0800bd7d 	.word	0x0800bd7d
 800c028:	0800dc02 	.word	0x0800dc02

0800c02c <__sfputc_r>:
 800c02c:	6893      	ldr	r3, [r2, #8]
 800c02e:	3b01      	subs	r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	b410      	push	{r4}
 800c034:	6093      	str	r3, [r2, #8]
 800c036:	da08      	bge.n	800c04a <__sfputc_r+0x1e>
 800c038:	6994      	ldr	r4, [r2, #24]
 800c03a:	42a3      	cmp	r3, r4
 800c03c:	db01      	blt.n	800c042 <__sfputc_r+0x16>
 800c03e:	290a      	cmp	r1, #10
 800c040:	d103      	bne.n	800c04a <__sfputc_r+0x1e>
 800c042:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c046:	f7fe ba90 	b.w	800a56a <__swbuf_r>
 800c04a:	6813      	ldr	r3, [r2, #0]
 800c04c:	1c58      	adds	r0, r3, #1
 800c04e:	6010      	str	r0, [r2, #0]
 800c050:	7019      	strb	r1, [r3, #0]
 800c052:	4608      	mov	r0, r1
 800c054:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <__sfputs_r>:
 800c05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05c:	4606      	mov	r6, r0
 800c05e:	460f      	mov	r7, r1
 800c060:	4614      	mov	r4, r2
 800c062:	18d5      	adds	r5, r2, r3
 800c064:	42ac      	cmp	r4, r5
 800c066:	d101      	bne.n	800c06c <__sfputs_r+0x12>
 800c068:	2000      	movs	r0, #0
 800c06a:	e007      	b.n	800c07c <__sfputs_r+0x22>
 800c06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c070:	463a      	mov	r2, r7
 800c072:	4630      	mov	r0, r6
 800c074:	f7ff ffda 	bl	800c02c <__sfputc_r>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d1f3      	bne.n	800c064 <__sfputs_r+0xa>
 800c07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c080 <_vfiprintf_r>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	460d      	mov	r5, r1
 800c086:	b09d      	sub	sp, #116	; 0x74
 800c088:	4614      	mov	r4, r2
 800c08a:	4698      	mov	r8, r3
 800c08c:	4606      	mov	r6, r0
 800c08e:	b118      	cbz	r0, 800c098 <_vfiprintf_r+0x18>
 800c090:	6a03      	ldr	r3, [r0, #32]
 800c092:	b90b      	cbnz	r3, 800c098 <_vfiprintf_r+0x18>
 800c094:	f7fe f8ac 	bl	800a1f0 <__sinit>
 800c098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c09a:	07d9      	lsls	r1, r3, #31
 800c09c:	d405      	bmi.n	800c0aa <_vfiprintf_r+0x2a>
 800c09e:	89ab      	ldrh	r3, [r5, #12]
 800c0a0:	059a      	lsls	r2, r3, #22
 800c0a2:	d402      	bmi.n	800c0aa <_vfiprintf_r+0x2a>
 800c0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0a6:	f7fe fb71 	bl	800a78c <__retarget_lock_acquire_recursive>
 800c0aa:	89ab      	ldrh	r3, [r5, #12]
 800c0ac:	071b      	lsls	r3, r3, #28
 800c0ae:	d501      	bpl.n	800c0b4 <_vfiprintf_r+0x34>
 800c0b0:	692b      	ldr	r3, [r5, #16]
 800c0b2:	b99b      	cbnz	r3, 800c0dc <_vfiprintf_r+0x5c>
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f7fe fa94 	bl	800a5e4 <__swsetup_r>
 800c0bc:	b170      	cbz	r0, 800c0dc <_vfiprintf_r+0x5c>
 800c0be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0c0:	07dc      	lsls	r4, r3, #31
 800c0c2:	d504      	bpl.n	800c0ce <_vfiprintf_r+0x4e>
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	b01d      	add	sp, #116	; 0x74
 800c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ce:	89ab      	ldrh	r3, [r5, #12]
 800c0d0:	0598      	lsls	r0, r3, #22
 800c0d2:	d4f7      	bmi.n	800c0c4 <_vfiprintf_r+0x44>
 800c0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0d6:	f7fe fb5a 	bl	800a78e <__retarget_lock_release_recursive>
 800c0da:	e7f3      	b.n	800c0c4 <_vfiprintf_r+0x44>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e0:	2320      	movs	r3, #32
 800c0e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0ea:	2330      	movs	r3, #48	; 0x30
 800c0ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c2a0 <_vfiprintf_r+0x220>
 800c0f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0f4:	f04f 0901 	mov.w	r9, #1
 800c0f8:	4623      	mov	r3, r4
 800c0fa:	469a      	mov	sl, r3
 800c0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c100:	b10a      	cbz	r2, 800c106 <_vfiprintf_r+0x86>
 800c102:	2a25      	cmp	r2, #37	; 0x25
 800c104:	d1f9      	bne.n	800c0fa <_vfiprintf_r+0x7a>
 800c106:	ebba 0b04 	subs.w	fp, sl, r4
 800c10a:	d00b      	beq.n	800c124 <_vfiprintf_r+0xa4>
 800c10c:	465b      	mov	r3, fp
 800c10e:	4622      	mov	r2, r4
 800c110:	4629      	mov	r1, r5
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ffa1 	bl	800c05a <__sfputs_r>
 800c118:	3001      	adds	r0, #1
 800c11a:	f000 80a9 	beq.w	800c270 <_vfiprintf_r+0x1f0>
 800c11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c120:	445a      	add	r2, fp
 800c122:	9209      	str	r2, [sp, #36]	; 0x24
 800c124:	f89a 3000 	ldrb.w	r3, [sl]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 80a1 	beq.w	800c270 <_vfiprintf_r+0x1f0>
 800c12e:	2300      	movs	r3, #0
 800c130:	f04f 32ff 	mov.w	r2, #4294967295
 800c134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c138:	f10a 0a01 	add.w	sl, sl, #1
 800c13c:	9304      	str	r3, [sp, #16]
 800c13e:	9307      	str	r3, [sp, #28]
 800c140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c144:	931a      	str	r3, [sp, #104]	; 0x68
 800c146:	4654      	mov	r4, sl
 800c148:	2205      	movs	r2, #5
 800c14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c14e:	4854      	ldr	r0, [pc, #336]	; (800c2a0 <_vfiprintf_r+0x220>)
 800c150:	f7f4 f866 	bl	8000220 <memchr>
 800c154:	9a04      	ldr	r2, [sp, #16]
 800c156:	b9d8      	cbnz	r0, 800c190 <_vfiprintf_r+0x110>
 800c158:	06d1      	lsls	r1, r2, #27
 800c15a:	bf44      	itt	mi
 800c15c:	2320      	movmi	r3, #32
 800c15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c162:	0713      	lsls	r3, r2, #28
 800c164:	bf44      	itt	mi
 800c166:	232b      	movmi	r3, #43	; 0x2b
 800c168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c16c:	f89a 3000 	ldrb.w	r3, [sl]
 800c170:	2b2a      	cmp	r3, #42	; 0x2a
 800c172:	d015      	beq.n	800c1a0 <_vfiprintf_r+0x120>
 800c174:	9a07      	ldr	r2, [sp, #28]
 800c176:	4654      	mov	r4, sl
 800c178:	2000      	movs	r0, #0
 800c17a:	f04f 0c0a 	mov.w	ip, #10
 800c17e:	4621      	mov	r1, r4
 800c180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c184:	3b30      	subs	r3, #48	; 0x30
 800c186:	2b09      	cmp	r3, #9
 800c188:	d94d      	bls.n	800c226 <_vfiprintf_r+0x1a6>
 800c18a:	b1b0      	cbz	r0, 800c1ba <_vfiprintf_r+0x13a>
 800c18c:	9207      	str	r2, [sp, #28]
 800c18e:	e014      	b.n	800c1ba <_vfiprintf_r+0x13a>
 800c190:	eba0 0308 	sub.w	r3, r0, r8
 800c194:	fa09 f303 	lsl.w	r3, r9, r3
 800c198:	4313      	orrs	r3, r2
 800c19a:	9304      	str	r3, [sp, #16]
 800c19c:	46a2      	mov	sl, r4
 800c19e:	e7d2      	b.n	800c146 <_vfiprintf_r+0xc6>
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	1d19      	adds	r1, r3, #4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	9103      	str	r1, [sp, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bfbb      	ittet	lt
 800c1ac:	425b      	neglt	r3, r3
 800c1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c1b2:	9307      	strge	r3, [sp, #28]
 800c1b4:	9307      	strlt	r3, [sp, #28]
 800c1b6:	bfb8      	it	lt
 800c1b8:	9204      	strlt	r2, [sp, #16]
 800c1ba:	7823      	ldrb	r3, [r4, #0]
 800c1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c1be:	d10c      	bne.n	800c1da <_vfiprintf_r+0x15a>
 800c1c0:	7863      	ldrb	r3, [r4, #1]
 800c1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1c4:	d134      	bne.n	800c230 <_vfiprintf_r+0x1b0>
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	1d1a      	adds	r2, r3, #4
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	9203      	str	r2, [sp, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bfb8      	it	lt
 800c1d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1d6:	3402      	adds	r4, #2
 800c1d8:	9305      	str	r3, [sp, #20]
 800c1da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c2b0 <_vfiprintf_r+0x230>
 800c1de:	7821      	ldrb	r1, [r4, #0]
 800c1e0:	2203      	movs	r2, #3
 800c1e2:	4650      	mov	r0, sl
 800c1e4:	f7f4 f81c 	bl	8000220 <memchr>
 800c1e8:	b138      	cbz	r0, 800c1fa <_vfiprintf_r+0x17a>
 800c1ea:	9b04      	ldr	r3, [sp, #16]
 800c1ec:	eba0 000a 	sub.w	r0, r0, sl
 800c1f0:	2240      	movs	r2, #64	; 0x40
 800c1f2:	4082      	lsls	r2, r0
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	3401      	adds	r4, #1
 800c1f8:	9304      	str	r3, [sp, #16]
 800c1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1fe:	4829      	ldr	r0, [pc, #164]	; (800c2a4 <_vfiprintf_r+0x224>)
 800c200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c204:	2206      	movs	r2, #6
 800c206:	f7f4 f80b 	bl	8000220 <memchr>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d03f      	beq.n	800c28e <_vfiprintf_r+0x20e>
 800c20e:	4b26      	ldr	r3, [pc, #152]	; (800c2a8 <_vfiprintf_r+0x228>)
 800c210:	bb1b      	cbnz	r3, 800c25a <_vfiprintf_r+0x1da>
 800c212:	9b03      	ldr	r3, [sp, #12]
 800c214:	3307      	adds	r3, #7
 800c216:	f023 0307 	bic.w	r3, r3, #7
 800c21a:	3308      	adds	r3, #8
 800c21c:	9303      	str	r3, [sp, #12]
 800c21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c220:	443b      	add	r3, r7
 800c222:	9309      	str	r3, [sp, #36]	; 0x24
 800c224:	e768      	b.n	800c0f8 <_vfiprintf_r+0x78>
 800c226:	fb0c 3202 	mla	r2, ip, r2, r3
 800c22a:	460c      	mov	r4, r1
 800c22c:	2001      	movs	r0, #1
 800c22e:	e7a6      	b.n	800c17e <_vfiprintf_r+0xfe>
 800c230:	2300      	movs	r3, #0
 800c232:	3401      	adds	r4, #1
 800c234:	9305      	str	r3, [sp, #20]
 800c236:	4619      	mov	r1, r3
 800c238:	f04f 0c0a 	mov.w	ip, #10
 800c23c:	4620      	mov	r0, r4
 800c23e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c242:	3a30      	subs	r2, #48	; 0x30
 800c244:	2a09      	cmp	r2, #9
 800c246:	d903      	bls.n	800c250 <_vfiprintf_r+0x1d0>
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0c6      	beq.n	800c1da <_vfiprintf_r+0x15a>
 800c24c:	9105      	str	r1, [sp, #20]
 800c24e:	e7c4      	b.n	800c1da <_vfiprintf_r+0x15a>
 800c250:	fb0c 2101 	mla	r1, ip, r1, r2
 800c254:	4604      	mov	r4, r0
 800c256:	2301      	movs	r3, #1
 800c258:	e7f0      	b.n	800c23c <_vfiprintf_r+0x1bc>
 800c25a:	ab03      	add	r3, sp, #12
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	462a      	mov	r2, r5
 800c260:	4b12      	ldr	r3, [pc, #72]	; (800c2ac <_vfiprintf_r+0x22c>)
 800c262:	a904      	add	r1, sp, #16
 800c264:	4630      	mov	r0, r6
 800c266:	f7fd fb83 	bl	8009970 <_printf_float>
 800c26a:	4607      	mov	r7, r0
 800c26c:	1c78      	adds	r0, r7, #1
 800c26e:	d1d6      	bne.n	800c21e <_vfiprintf_r+0x19e>
 800c270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c272:	07d9      	lsls	r1, r3, #31
 800c274:	d405      	bmi.n	800c282 <_vfiprintf_r+0x202>
 800c276:	89ab      	ldrh	r3, [r5, #12]
 800c278:	059a      	lsls	r2, r3, #22
 800c27a:	d402      	bmi.n	800c282 <_vfiprintf_r+0x202>
 800c27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c27e:	f7fe fa86 	bl	800a78e <__retarget_lock_release_recursive>
 800c282:	89ab      	ldrh	r3, [r5, #12]
 800c284:	065b      	lsls	r3, r3, #25
 800c286:	f53f af1d 	bmi.w	800c0c4 <_vfiprintf_r+0x44>
 800c28a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c28c:	e71c      	b.n	800c0c8 <_vfiprintf_r+0x48>
 800c28e:	ab03      	add	r3, sp, #12
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	462a      	mov	r2, r5
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <_vfiprintf_r+0x22c>)
 800c296:	a904      	add	r1, sp, #16
 800c298:	4630      	mov	r0, r6
 800c29a:	f7fd fe0d 	bl	8009eb8 <_printf_i>
 800c29e:	e7e4      	b.n	800c26a <_vfiprintf_r+0x1ea>
 800c2a0:	0800dbfc 	.word	0x0800dbfc
 800c2a4:	0800dc06 	.word	0x0800dc06
 800c2a8:	08009971 	.word	0x08009971
 800c2ac:	0800c05b 	.word	0x0800c05b
 800c2b0:	0800dc02 	.word	0x0800dc02

0800c2b4 <__sflush_r>:
 800c2b4:	898a      	ldrh	r2, [r1, #12]
 800c2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	0710      	lsls	r0, r2, #28
 800c2be:	460c      	mov	r4, r1
 800c2c0:	d458      	bmi.n	800c374 <__sflush_r+0xc0>
 800c2c2:	684b      	ldr	r3, [r1, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	dc05      	bgt.n	800c2d4 <__sflush_r+0x20>
 800c2c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dc02      	bgt.n	800c2d4 <__sflush_r+0x20>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d0f9      	beq.n	800c2ce <__sflush_r+0x1a>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2e0:	682f      	ldr	r7, [r5, #0]
 800c2e2:	6a21      	ldr	r1, [r4, #32]
 800c2e4:	602b      	str	r3, [r5, #0]
 800c2e6:	d032      	beq.n	800c34e <__sflush_r+0x9a>
 800c2e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	075a      	lsls	r2, r3, #29
 800c2ee:	d505      	bpl.n	800c2fc <__sflush_r+0x48>
 800c2f0:	6863      	ldr	r3, [r4, #4]
 800c2f2:	1ac0      	subs	r0, r0, r3
 800c2f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2f6:	b10b      	cbz	r3, 800c2fc <__sflush_r+0x48>
 800c2f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2fa:	1ac0      	subs	r0, r0, r3
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4602      	mov	r2, r0
 800c300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c302:	6a21      	ldr	r1, [r4, #32]
 800c304:	4628      	mov	r0, r5
 800c306:	47b0      	blx	r6
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	d106      	bne.n	800c31c <__sflush_r+0x68>
 800c30e:	6829      	ldr	r1, [r5, #0]
 800c310:	291d      	cmp	r1, #29
 800c312:	d82b      	bhi.n	800c36c <__sflush_r+0xb8>
 800c314:	4a29      	ldr	r2, [pc, #164]	; (800c3bc <__sflush_r+0x108>)
 800c316:	410a      	asrs	r2, r1
 800c318:	07d6      	lsls	r6, r2, #31
 800c31a:	d427      	bmi.n	800c36c <__sflush_r+0xb8>
 800c31c:	2200      	movs	r2, #0
 800c31e:	6062      	str	r2, [r4, #4]
 800c320:	04d9      	lsls	r1, r3, #19
 800c322:	6922      	ldr	r2, [r4, #16]
 800c324:	6022      	str	r2, [r4, #0]
 800c326:	d504      	bpl.n	800c332 <__sflush_r+0x7e>
 800c328:	1c42      	adds	r2, r0, #1
 800c32a:	d101      	bne.n	800c330 <__sflush_r+0x7c>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b903      	cbnz	r3, 800c332 <__sflush_r+0x7e>
 800c330:	6560      	str	r0, [r4, #84]	; 0x54
 800c332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c334:	602f      	str	r7, [r5, #0]
 800c336:	2900      	cmp	r1, #0
 800c338:	d0c9      	beq.n	800c2ce <__sflush_r+0x1a>
 800c33a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c33e:	4299      	cmp	r1, r3
 800c340:	d002      	beq.n	800c348 <__sflush_r+0x94>
 800c342:	4628      	mov	r0, r5
 800c344:	f7ff f89e 	bl	800b484 <_free_r>
 800c348:	2000      	movs	r0, #0
 800c34a:	6360      	str	r0, [r4, #52]	; 0x34
 800c34c:	e7c0      	b.n	800c2d0 <__sflush_r+0x1c>
 800c34e:	2301      	movs	r3, #1
 800c350:	4628      	mov	r0, r5
 800c352:	47b0      	blx	r6
 800c354:	1c41      	adds	r1, r0, #1
 800c356:	d1c8      	bne.n	800c2ea <__sflush_r+0x36>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0c5      	beq.n	800c2ea <__sflush_r+0x36>
 800c35e:	2b1d      	cmp	r3, #29
 800c360:	d001      	beq.n	800c366 <__sflush_r+0xb2>
 800c362:	2b16      	cmp	r3, #22
 800c364:	d101      	bne.n	800c36a <__sflush_r+0xb6>
 800c366:	602f      	str	r7, [r5, #0]
 800c368:	e7b1      	b.n	800c2ce <__sflush_r+0x1a>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c370:	81a3      	strh	r3, [r4, #12]
 800c372:	e7ad      	b.n	800c2d0 <__sflush_r+0x1c>
 800c374:	690f      	ldr	r7, [r1, #16]
 800c376:	2f00      	cmp	r7, #0
 800c378:	d0a9      	beq.n	800c2ce <__sflush_r+0x1a>
 800c37a:	0793      	lsls	r3, r2, #30
 800c37c:	680e      	ldr	r6, [r1, #0]
 800c37e:	bf08      	it	eq
 800c380:	694b      	ldreq	r3, [r1, #20]
 800c382:	600f      	str	r7, [r1, #0]
 800c384:	bf18      	it	ne
 800c386:	2300      	movne	r3, #0
 800c388:	eba6 0807 	sub.w	r8, r6, r7
 800c38c:	608b      	str	r3, [r1, #8]
 800c38e:	f1b8 0f00 	cmp.w	r8, #0
 800c392:	dd9c      	ble.n	800c2ce <__sflush_r+0x1a>
 800c394:	6a21      	ldr	r1, [r4, #32]
 800c396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c398:	4643      	mov	r3, r8
 800c39a:	463a      	mov	r2, r7
 800c39c:	4628      	mov	r0, r5
 800c39e:	47b0      	blx	r6
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	dc06      	bgt.n	800c3b2 <__sflush_r+0xfe>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b0:	e78e      	b.n	800c2d0 <__sflush_r+0x1c>
 800c3b2:	4407      	add	r7, r0
 800c3b4:	eba8 0800 	sub.w	r8, r8, r0
 800c3b8:	e7e9      	b.n	800c38e <__sflush_r+0xda>
 800c3ba:	bf00      	nop
 800c3bc:	dfbffffe 	.word	0xdfbffffe

0800c3c0 <_fflush_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	690b      	ldr	r3, [r1, #16]
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	b913      	cbnz	r3, 800c3d0 <_fflush_r+0x10>
 800c3ca:	2500      	movs	r5, #0
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	b118      	cbz	r0, 800c3da <_fflush_r+0x1a>
 800c3d2:	6a03      	ldr	r3, [r0, #32]
 800c3d4:	b90b      	cbnz	r3, 800c3da <_fflush_r+0x1a>
 800c3d6:	f7fd ff0b 	bl	800a1f0 <__sinit>
 800c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0f3      	beq.n	800c3ca <_fflush_r+0xa>
 800c3e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3e4:	07d0      	lsls	r0, r2, #31
 800c3e6:	d404      	bmi.n	800c3f2 <_fflush_r+0x32>
 800c3e8:	0599      	lsls	r1, r3, #22
 800c3ea:	d402      	bmi.n	800c3f2 <_fflush_r+0x32>
 800c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ee:	f7fe f9cd 	bl	800a78c <__retarget_lock_acquire_recursive>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f7ff ff5d 	bl	800c2b4 <__sflush_r>
 800c3fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3fc:	07da      	lsls	r2, r3, #31
 800c3fe:	4605      	mov	r5, r0
 800c400:	d4e4      	bmi.n	800c3cc <_fflush_r+0xc>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	059b      	lsls	r3, r3, #22
 800c406:	d4e1      	bmi.n	800c3cc <_fflush_r+0xc>
 800c408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40a:	f7fe f9c0 	bl	800a78e <__retarget_lock_release_recursive>
 800c40e:	e7dd      	b.n	800c3cc <_fflush_r+0xc>

0800c410 <__swhatbuf_r>:
 800c410:	b570      	push	{r4, r5, r6, lr}
 800c412:	460c      	mov	r4, r1
 800c414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c418:	2900      	cmp	r1, #0
 800c41a:	b096      	sub	sp, #88	; 0x58
 800c41c:	4615      	mov	r5, r2
 800c41e:	461e      	mov	r6, r3
 800c420:	da0d      	bge.n	800c43e <__swhatbuf_r+0x2e>
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c428:	f04f 0100 	mov.w	r1, #0
 800c42c:	bf0c      	ite	eq
 800c42e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c432:	2340      	movne	r3, #64	; 0x40
 800c434:	2000      	movs	r0, #0
 800c436:	6031      	str	r1, [r6, #0]
 800c438:	602b      	str	r3, [r5, #0]
 800c43a:	b016      	add	sp, #88	; 0x58
 800c43c:	bd70      	pop	{r4, r5, r6, pc}
 800c43e:	466a      	mov	r2, sp
 800c440:	f000 f862 	bl	800c508 <_fstat_r>
 800c444:	2800      	cmp	r0, #0
 800c446:	dbec      	blt.n	800c422 <__swhatbuf_r+0x12>
 800c448:	9901      	ldr	r1, [sp, #4]
 800c44a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c44e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c452:	4259      	negs	r1, r3
 800c454:	4159      	adcs	r1, r3
 800c456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c45a:	e7eb      	b.n	800c434 <__swhatbuf_r+0x24>

0800c45c <__smakebuf_r>:
 800c45c:	898b      	ldrh	r3, [r1, #12]
 800c45e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c460:	079d      	lsls	r5, r3, #30
 800c462:	4606      	mov	r6, r0
 800c464:	460c      	mov	r4, r1
 800c466:	d507      	bpl.n	800c478 <__smakebuf_r+0x1c>
 800c468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	6123      	str	r3, [r4, #16]
 800c470:	2301      	movs	r3, #1
 800c472:	6163      	str	r3, [r4, #20]
 800c474:	b002      	add	sp, #8
 800c476:	bd70      	pop	{r4, r5, r6, pc}
 800c478:	ab01      	add	r3, sp, #4
 800c47a:	466a      	mov	r2, sp
 800c47c:	f7ff ffc8 	bl	800c410 <__swhatbuf_r>
 800c480:	9900      	ldr	r1, [sp, #0]
 800c482:	4605      	mov	r5, r0
 800c484:	4630      	mov	r0, r6
 800c486:	f7ff f871 	bl	800b56c <_malloc_r>
 800c48a:	b948      	cbnz	r0, 800c4a0 <__smakebuf_r+0x44>
 800c48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c490:	059a      	lsls	r2, r3, #22
 800c492:	d4ef      	bmi.n	800c474 <__smakebuf_r+0x18>
 800c494:	f023 0303 	bic.w	r3, r3, #3
 800c498:	f043 0302 	orr.w	r3, r3, #2
 800c49c:	81a3      	strh	r3, [r4, #12]
 800c49e:	e7e3      	b.n	800c468 <__smakebuf_r+0xc>
 800c4a0:	89a3      	ldrh	r3, [r4, #12]
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a8:	81a3      	strh	r3, [r4, #12]
 800c4aa:	9b00      	ldr	r3, [sp, #0]
 800c4ac:	6163      	str	r3, [r4, #20]
 800c4ae:	9b01      	ldr	r3, [sp, #4]
 800c4b0:	6120      	str	r0, [r4, #16]
 800c4b2:	b15b      	cbz	r3, 800c4cc <__smakebuf_r+0x70>
 800c4b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f000 f837 	bl	800c52c <_isatty_r>
 800c4be:	b128      	cbz	r0, 800c4cc <__smakebuf_r+0x70>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	f043 0301 	orr.w	r3, r3, #1
 800c4ca:	81a3      	strh	r3, [r4, #12]
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	431d      	orrs	r5, r3
 800c4d0:	81a5      	strh	r5, [r4, #12]
 800c4d2:	e7cf      	b.n	800c474 <__smakebuf_r+0x18>

0800c4d4 <memmove>:
 800c4d4:	4288      	cmp	r0, r1
 800c4d6:	b510      	push	{r4, lr}
 800c4d8:	eb01 0402 	add.w	r4, r1, r2
 800c4dc:	d902      	bls.n	800c4e4 <memmove+0x10>
 800c4de:	4284      	cmp	r4, r0
 800c4e0:	4623      	mov	r3, r4
 800c4e2:	d807      	bhi.n	800c4f4 <memmove+0x20>
 800c4e4:	1e43      	subs	r3, r0, #1
 800c4e6:	42a1      	cmp	r1, r4
 800c4e8:	d008      	beq.n	800c4fc <memmove+0x28>
 800c4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4f2:	e7f8      	b.n	800c4e6 <memmove+0x12>
 800c4f4:	4402      	add	r2, r0
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	428a      	cmp	r2, r1
 800c4fa:	d100      	bne.n	800c4fe <memmove+0x2a>
 800c4fc:	bd10      	pop	{r4, pc}
 800c4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c506:	e7f7      	b.n	800c4f8 <memmove+0x24>

0800c508 <_fstat_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d07      	ldr	r5, [pc, #28]	; (800c528 <_fstat_r+0x20>)
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	4611      	mov	r1, r2
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	f7f8 f92b 	bl	8004770 <_fstat>
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	d102      	bne.n	800c524 <_fstat_r+0x1c>
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	b103      	cbz	r3, 800c524 <_fstat_r+0x1c>
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	bd38      	pop	{r3, r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	20001b58 	.word	0x20001b58

0800c52c <_isatty_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d06      	ldr	r5, [pc, #24]	; (800c548 <_isatty_r+0x1c>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	f7f8 f920 	bl	800477c <_isatty>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_isatty_r+0x1a>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_isatty_r+0x1a>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	20001b58 	.word	0x20001b58

0800c54c <_sbrk_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d06      	ldr	r5, [pc, #24]	; (800c568 <_sbrk_r+0x1c>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	602b      	str	r3, [r5, #0]
 800c558:	f001 f992 	bl	800d880 <_sbrk>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	d102      	bne.n	800c566 <_sbrk_r+0x1a>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	b103      	cbz	r3, 800c566 <_sbrk_r+0x1a>
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	20001b58 	.word	0x20001b58

0800c56c <memcpy>:
 800c56c:	440a      	add	r2, r1
 800c56e:	4291      	cmp	r1, r2
 800c570:	f100 33ff 	add.w	r3, r0, #4294967295
 800c574:	d100      	bne.n	800c578 <memcpy+0xc>
 800c576:	4770      	bx	lr
 800c578:	b510      	push	{r4, lr}
 800c57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c582:	4291      	cmp	r1, r2
 800c584:	d1f9      	bne.n	800c57a <memcpy+0xe>
 800c586:	bd10      	pop	{r4, pc}

0800c588 <__assert_func>:
 800c588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c58a:	4614      	mov	r4, r2
 800c58c:	461a      	mov	r2, r3
 800c58e:	4b09      	ldr	r3, [pc, #36]	; (800c5b4 <__assert_func+0x2c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4605      	mov	r5, r0
 800c594:	68d8      	ldr	r0, [r3, #12]
 800c596:	b14c      	cbz	r4, 800c5ac <__assert_func+0x24>
 800c598:	4b07      	ldr	r3, [pc, #28]	; (800c5b8 <__assert_func+0x30>)
 800c59a:	9100      	str	r1, [sp, #0]
 800c59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a0:	4906      	ldr	r1, [pc, #24]	; (800c5bc <__assert_func+0x34>)
 800c5a2:	462b      	mov	r3, r5
 800c5a4:	f000 f872 	bl	800c68c <fiprintf>
 800c5a8:	f000 f882 	bl	800c6b0 <abort>
 800c5ac:	4b04      	ldr	r3, [pc, #16]	; (800c5c0 <__assert_func+0x38>)
 800c5ae:	461c      	mov	r4, r3
 800c5b0:	e7f3      	b.n	800c59a <__assert_func+0x12>
 800c5b2:	bf00      	nop
 800c5b4:	20000068 	.word	0x20000068
 800c5b8:	0800dc17 	.word	0x0800dc17
 800c5bc:	0800dc24 	.word	0x0800dc24
 800c5c0:	0800dc52 	.word	0x0800dc52

0800c5c4 <_calloc_r>:
 800c5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5c6:	fba1 2402 	umull	r2, r4, r1, r2
 800c5ca:	b94c      	cbnz	r4, 800c5e0 <_calloc_r+0x1c>
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	9201      	str	r2, [sp, #4]
 800c5d0:	f7fe ffcc 	bl	800b56c <_malloc_r>
 800c5d4:	9a01      	ldr	r2, [sp, #4]
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	b930      	cbnz	r0, 800c5e8 <_calloc_r+0x24>
 800c5da:	4628      	mov	r0, r5
 800c5dc:	b003      	add	sp, #12
 800c5de:	bd30      	pop	{r4, r5, pc}
 800c5e0:	220c      	movs	r2, #12
 800c5e2:	6002      	str	r2, [r0, #0]
 800c5e4:	2500      	movs	r5, #0
 800c5e6:	e7f8      	b.n	800c5da <_calloc_r+0x16>
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	f7fe f853 	bl	800a694 <memset>
 800c5ee:	e7f4      	b.n	800c5da <_calloc_r+0x16>

0800c5f0 <__ascii_mbtowc>:
 800c5f0:	b082      	sub	sp, #8
 800c5f2:	b901      	cbnz	r1, 800c5f6 <__ascii_mbtowc+0x6>
 800c5f4:	a901      	add	r1, sp, #4
 800c5f6:	b142      	cbz	r2, 800c60a <__ascii_mbtowc+0x1a>
 800c5f8:	b14b      	cbz	r3, 800c60e <__ascii_mbtowc+0x1e>
 800c5fa:	7813      	ldrb	r3, [r2, #0]
 800c5fc:	600b      	str	r3, [r1, #0]
 800c5fe:	7812      	ldrb	r2, [r2, #0]
 800c600:	1e10      	subs	r0, r2, #0
 800c602:	bf18      	it	ne
 800c604:	2001      	movne	r0, #1
 800c606:	b002      	add	sp, #8
 800c608:	4770      	bx	lr
 800c60a:	4610      	mov	r0, r2
 800c60c:	e7fb      	b.n	800c606 <__ascii_mbtowc+0x16>
 800c60e:	f06f 0001 	mvn.w	r0, #1
 800c612:	e7f8      	b.n	800c606 <__ascii_mbtowc+0x16>

0800c614 <_realloc_r>:
 800c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	4680      	mov	r8, r0
 800c61a:	4614      	mov	r4, r2
 800c61c:	460e      	mov	r6, r1
 800c61e:	b921      	cbnz	r1, 800c62a <_realloc_r+0x16>
 800c620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c624:	4611      	mov	r1, r2
 800c626:	f7fe bfa1 	b.w	800b56c <_malloc_r>
 800c62a:	b92a      	cbnz	r2, 800c638 <_realloc_r+0x24>
 800c62c:	f7fe ff2a 	bl	800b484 <_free_r>
 800c630:	4625      	mov	r5, r4
 800c632:	4628      	mov	r0, r5
 800c634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c638:	f000 f841 	bl	800c6be <_malloc_usable_size_r>
 800c63c:	4284      	cmp	r4, r0
 800c63e:	4607      	mov	r7, r0
 800c640:	d802      	bhi.n	800c648 <_realloc_r+0x34>
 800c642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c646:	d812      	bhi.n	800c66e <_realloc_r+0x5a>
 800c648:	4621      	mov	r1, r4
 800c64a:	4640      	mov	r0, r8
 800c64c:	f7fe ff8e 	bl	800b56c <_malloc_r>
 800c650:	4605      	mov	r5, r0
 800c652:	2800      	cmp	r0, #0
 800c654:	d0ed      	beq.n	800c632 <_realloc_r+0x1e>
 800c656:	42bc      	cmp	r4, r7
 800c658:	4622      	mov	r2, r4
 800c65a:	4631      	mov	r1, r6
 800c65c:	bf28      	it	cs
 800c65e:	463a      	movcs	r2, r7
 800c660:	f7ff ff84 	bl	800c56c <memcpy>
 800c664:	4631      	mov	r1, r6
 800c666:	4640      	mov	r0, r8
 800c668:	f7fe ff0c 	bl	800b484 <_free_r>
 800c66c:	e7e1      	b.n	800c632 <_realloc_r+0x1e>
 800c66e:	4635      	mov	r5, r6
 800c670:	e7df      	b.n	800c632 <_realloc_r+0x1e>

0800c672 <__ascii_wctomb>:
 800c672:	b149      	cbz	r1, 800c688 <__ascii_wctomb+0x16>
 800c674:	2aff      	cmp	r2, #255	; 0xff
 800c676:	bf85      	ittet	hi
 800c678:	238a      	movhi	r3, #138	; 0x8a
 800c67a:	6003      	strhi	r3, [r0, #0]
 800c67c:	700a      	strbls	r2, [r1, #0]
 800c67e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c682:	bf98      	it	ls
 800c684:	2001      	movls	r0, #1
 800c686:	4770      	bx	lr
 800c688:	4608      	mov	r0, r1
 800c68a:	4770      	bx	lr

0800c68c <fiprintf>:
 800c68c:	b40e      	push	{r1, r2, r3}
 800c68e:	b503      	push	{r0, r1, lr}
 800c690:	4601      	mov	r1, r0
 800c692:	ab03      	add	r3, sp, #12
 800c694:	4805      	ldr	r0, [pc, #20]	; (800c6ac <fiprintf+0x20>)
 800c696:	f853 2b04 	ldr.w	r2, [r3], #4
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	f7ff fcef 	bl	800c080 <_vfiprintf_r>
 800c6a2:	b002      	add	sp, #8
 800c6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a8:	b003      	add	sp, #12
 800c6aa:	4770      	bx	lr
 800c6ac:	20000068 	.word	0x20000068

0800c6b0 <abort>:
 800c6b0:	b508      	push	{r3, lr}
 800c6b2:	2006      	movs	r0, #6
 800c6b4:	f000 f834 	bl	800c720 <raise>
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	f7f8 f833 	bl	8004724 <_exit>

0800c6be <_malloc_usable_size_r>:
 800c6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c2:	1f18      	subs	r0, r3, #4
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bfbc      	itt	lt
 800c6c8:	580b      	ldrlt	r3, [r1, r0]
 800c6ca:	18c0      	addlt	r0, r0, r3
 800c6cc:	4770      	bx	lr

0800c6ce <_raise_r>:
 800c6ce:	291f      	cmp	r1, #31
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	d904      	bls.n	800c6e2 <_raise_r+0x14>
 800c6d8:	2316      	movs	r3, #22
 800c6da:	6003      	str	r3, [r0, #0]
 800c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e0:	bd38      	pop	{r3, r4, r5, pc}
 800c6e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c6e4:	b112      	cbz	r2, 800c6ec <_raise_r+0x1e>
 800c6e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6ea:	b94b      	cbnz	r3, 800c700 <_raise_r+0x32>
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 f831 	bl	800c754 <_getpid_r>
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4601      	mov	r1, r0
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6fc:	f000 b818 	b.w	800c730 <_kill_r>
 800c700:	2b01      	cmp	r3, #1
 800c702:	d00a      	beq.n	800c71a <_raise_r+0x4c>
 800c704:	1c59      	adds	r1, r3, #1
 800c706:	d103      	bne.n	800c710 <_raise_r+0x42>
 800c708:	2316      	movs	r3, #22
 800c70a:	6003      	str	r3, [r0, #0]
 800c70c:	2001      	movs	r0, #1
 800c70e:	e7e7      	b.n	800c6e0 <_raise_r+0x12>
 800c710:	2400      	movs	r4, #0
 800c712:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c716:	4628      	mov	r0, r5
 800c718:	4798      	blx	r3
 800c71a:	2000      	movs	r0, #0
 800c71c:	e7e0      	b.n	800c6e0 <_raise_r+0x12>
	...

0800c720 <raise>:
 800c720:	4b02      	ldr	r3, [pc, #8]	; (800c72c <raise+0xc>)
 800c722:	4601      	mov	r1, r0
 800c724:	6818      	ldr	r0, [r3, #0]
 800c726:	f7ff bfd2 	b.w	800c6ce <_raise_r>
 800c72a:	bf00      	nop
 800c72c:	20000068 	.word	0x20000068

0800c730 <_kill_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4d07      	ldr	r5, [pc, #28]	; (800c750 <_kill_r+0x20>)
 800c734:	2300      	movs	r3, #0
 800c736:	4604      	mov	r4, r0
 800c738:	4608      	mov	r0, r1
 800c73a:	4611      	mov	r1, r2
 800c73c:	602b      	str	r3, [r5, #0]
 800c73e:	f7f7 ffe9 	bl	8004714 <_kill>
 800c742:	1c43      	adds	r3, r0, #1
 800c744:	d102      	bne.n	800c74c <_kill_r+0x1c>
 800c746:	682b      	ldr	r3, [r5, #0]
 800c748:	b103      	cbz	r3, 800c74c <_kill_r+0x1c>
 800c74a:	6023      	str	r3, [r4, #0]
 800c74c:	bd38      	pop	{r3, r4, r5, pc}
 800c74e:	bf00      	nop
 800c750:	20001b58 	.word	0x20001b58

0800c754 <_getpid_r>:
 800c754:	f7f7 bfdc 	b.w	8004710 <_getpid>

0800c758 <cos>:
 800c758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c75a:	ec53 2b10 	vmov	r2, r3, d0
 800c75e:	4826      	ldr	r0, [pc, #152]	; (800c7f8 <cos+0xa0>)
 800c760:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c764:	4281      	cmp	r1, r0
 800c766:	dc06      	bgt.n	800c776 <cos+0x1e>
 800c768:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c7f0 <cos+0x98>
 800c76c:	b005      	add	sp, #20
 800c76e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c772:	f000 b89d 	b.w	800c8b0 <__kernel_cos>
 800c776:	4821      	ldr	r0, [pc, #132]	; (800c7fc <cos+0xa4>)
 800c778:	4281      	cmp	r1, r0
 800c77a:	dd09      	ble.n	800c790 <cos+0x38>
 800c77c:	ee10 0a10 	vmov	r0, s0
 800c780:	4619      	mov	r1, r3
 800c782:	f7f3 fda9 	bl	80002d8 <__aeabi_dsub>
 800c786:	ec41 0b10 	vmov	d0, r0, r1
 800c78a:	b005      	add	sp, #20
 800c78c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c790:	4668      	mov	r0, sp
 800c792:	f000 fa15 	bl	800cbc0 <__ieee754_rem_pio2>
 800c796:	f000 0003 	and.w	r0, r0, #3
 800c79a:	2801      	cmp	r0, #1
 800c79c:	d00b      	beq.n	800c7b6 <cos+0x5e>
 800c79e:	2802      	cmp	r0, #2
 800c7a0:	d016      	beq.n	800c7d0 <cos+0x78>
 800c7a2:	b9e0      	cbnz	r0, 800c7de <cos+0x86>
 800c7a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7a8:	ed9d 0b00 	vldr	d0, [sp]
 800c7ac:	f000 f880 	bl	800c8b0 <__kernel_cos>
 800c7b0:	ec51 0b10 	vmov	r0, r1, d0
 800c7b4:	e7e7      	b.n	800c786 <cos+0x2e>
 800c7b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7ba:	ed9d 0b00 	vldr	d0, [sp]
 800c7be:	f000 f93f 	bl	800ca40 <__kernel_sin>
 800c7c2:	ec53 2b10 	vmov	r2, r3, d0
 800c7c6:	ee10 0a10 	vmov	r0, s0
 800c7ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7ce:	e7da      	b.n	800c786 <cos+0x2e>
 800c7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7d4:	ed9d 0b00 	vldr	d0, [sp]
 800c7d8:	f000 f86a 	bl	800c8b0 <__kernel_cos>
 800c7dc:	e7f1      	b.n	800c7c2 <cos+0x6a>
 800c7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7e2:	ed9d 0b00 	vldr	d0, [sp]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	f000 f92a 	bl	800ca40 <__kernel_sin>
 800c7ec:	e7e0      	b.n	800c7b0 <cos+0x58>
 800c7ee:	bf00      	nop
	...
 800c7f8:	3fe921fb 	.word	0x3fe921fb
 800c7fc:	7fefffff 	.word	0x7fefffff

0800c800 <sin>:
 800c800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c802:	ec53 2b10 	vmov	r2, r3, d0
 800c806:	4828      	ldr	r0, [pc, #160]	; (800c8a8 <sin+0xa8>)
 800c808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c80c:	4281      	cmp	r1, r0
 800c80e:	dc07      	bgt.n	800c820 <sin+0x20>
 800c810:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c8a0 <sin+0xa0>
 800c814:	2000      	movs	r0, #0
 800c816:	b005      	add	sp, #20
 800c818:	f85d eb04 	ldr.w	lr, [sp], #4
 800c81c:	f000 b910 	b.w	800ca40 <__kernel_sin>
 800c820:	4822      	ldr	r0, [pc, #136]	; (800c8ac <sin+0xac>)
 800c822:	4281      	cmp	r1, r0
 800c824:	dd09      	ble.n	800c83a <sin+0x3a>
 800c826:	ee10 0a10 	vmov	r0, s0
 800c82a:	4619      	mov	r1, r3
 800c82c:	f7f3 fd54 	bl	80002d8 <__aeabi_dsub>
 800c830:	ec41 0b10 	vmov	d0, r0, r1
 800c834:	b005      	add	sp, #20
 800c836:	f85d fb04 	ldr.w	pc, [sp], #4
 800c83a:	4668      	mov	r0, sp
 800c83c:	f000 f9c0 	bl	800cbc0 <__ieee754_rem_pio2>
 800c840:	f000 0003 	and.w	r0, r0, #3
 800c844:	2801      	cmp	r0, #1
 800c846:	d00c      	beq.n	800c862 <sin+0x62>
 800c848:	2802      	cmp	r0, #2
 800c84a:	d011      	beq.n	800c870 <sin+0x70>
 800c84c:	b9f0      	cbnz	r0, 800c88c <sin+0x8c>
 800c84e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c852:	ed9d 0b00 	vldr	d0, [sp]
 800c856:	2001      	movs	r0, #1
 800c858:	f000 f8f2 	bl	800ca40 <__kernel_sin>
 800c85c:	ec51 0b10 	vmov	r0, r1, d0
 800c860:	e7e6      	b.n	800c830 <sin+0x30>
 800c862:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c866:	ed9d 0b00 	vldr	d0, [sp]
 800c86a:	f000 f821 	bl	800c8b0 <__kernel_cos>
 800c86e:	e7f5      	b.n	800c85c <sin+0x5c>
 800c870:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c874:	ed9d 0b00 	vldr	d0, [sp]
 800c878:	2001      	movs	r0, #1
 800c87a:	f000 f8e1 	bl	800ca40 <__kernel_sin>
 800c87e:	ec53 2b10 	vmov	r2, r3, d0
 800c882:	ee10 0a10 	vmov	r0, s0
 800c886:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c88a:	e7d1      	b.n	800c830 <sin+0x30>
 800c88c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c890:	ed9d 0b00 	vldr	d0, [sp]
 800c894:	f000 f80c 	bl	800c8b0 <__kernel_cos>
 800c898:	e7f1      	b.n	800c87e <sin+0x7e>
 800c89a:	bf00      	nop
 800c89c:	f3af 8000 	nop.w
	...
 800c8a8:	3fe921fb 	.word	0x3fe921fb
 800c8ac:	7fefffff 	.word	0x7fefffff

0800c8b0 <__kernel_cos>:
 800c8b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	ec57 6b10 	vmov	r6, r7, d0
 800c8b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c8bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c8c0:	ed8d 1b00 	vstr	d1, [sp]
 800c8c4:	da07      	bge.n	800c8d6 <__kernel_cos+0x26>
 800c8c6:	ee10 0a10 	vmov	r0, s0
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	f7f4 f96c 	bl	8000ba8 <__aeabi_d2iz>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	f000 8088 	beq.w	800c9e6 <__kernel_cos+0x136>
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	463b      	mov	r3, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	4639      	mov	r1, r7
 800c8de:	f7f3 feb3 	bl	8000648 <__aeabi_dmul>
 800c8e2:	4b51      	ldr	r3, [pc, #324]	; (800ca28 <__kernel_cos+0x178>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	f7f3 fead 	bl	8000648 <__aeabi_dmul>
 800c8ee:	a340      	add	r3, pc, #256	; (adr r3, 800c9f0 <__kernel_cos+0x140>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	468b      	mov	fp, r1
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	f7f3 fea4 	bl	8000648 <__aeabi_dmul>
 800c900:	a33d      	add	r3, pc, #244	; (adr r3, 800c9f8 <__kernel_cos+0x148>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fce9 	bl	80002dc <__adddf3>
 800c90a:	4622      	mov	r2, r4
 800c90c:	462b      	mov	r3, r5
 800c90e:	f7f3 fe9b 	bl	8000648 <__aeabi_dmul>
 800c912:	a33b      	add	r3, pc, #236	; (adr r3, 800ca00 <__kernel_cos+0x150>)
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f7f3 fcde 	bl	80002d8 <__aeabi_dsub>
 800c91c:	4622      	mov	r2, r4
 800c91e:	462b      	mov	r3, r5
 800c920:	f7f3 fe92 	bl	8000648 <__aeabi_dmul>
 800c924:	a338      	add	r3, pc, #224	; (adr r3, 800ca08 <__kernel_cos+0x158>)
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f7f3 fcd7 	bl	80002dc <__adddf3>
 800c92e:	4622      	mov	r2, r4
 800c930:	462b      	mov	r3, r5
 800c932:	f7f3 fe89 	bl	8000648 <__aeabi_dmul>
 800c936:	a336      	add	r3, pc, #216	; (adr r3, 800ca10 <__kernel_cos+0x160>)
 800c938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93c:	f7f3 fccc 	bl	80002d8 <__aeabi_dsub>
 800c940:	4622      	mov	r2, r4
 800c942:	462b      	mov	r3, r5
 800c944:	f7f3 fe80 	bl	8000648 <__aeabi_dmul>
 800c948:	a333      	add	r3, pc, #204	; (adr r3, 800ca18 <__kernel_cos+0x168>)
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f7f3 fcc5 	bl	80002dc <__adddf3>
 800c952:	4622      	mov	r2, r4
 800c954:	462b      	mov	r3, r5
 800c956:	f7f3 fe77 	bl	8000648 <__aeabi_dmul>
 800c95a:	4622      	mov	r2, r4
 800c95c:	462b      	mov	r3, r5
 800c95e:	f7f3 fe73 	bl	8000648 <__aeabi_dmul>
 800c962:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c966:	4604      	mov	r4, r0
 800c968:	460d      	mov	r5, r1
 800c96a:	4630      	mov	r0, r6
 800c96c:	4639      	mov	r1, r7
 800c96e:	f7f3 fe6b 	bl	8000648 <__aeabi_dmul>
 800c972:	460b      	mov	r3, r1
 800c974:	4602      	mov	r2, r0
 800c976:	4629      	mov	r1, r5
 800c978:	4620      	mov	r0, r4
 800c97a:	f7f3 fcad 	bl	80002d8 <__aeabi_dsub>
 800c97e:	4b2b      	ldr	r3, [pc, #172]	; (800ca2c <__kernel_cos+0x17c>)
 800c980:	4598      	cmp	r8, r3
 800c982:	4606      	mov	r6, r0
 800c984:	460f      	mov	r7, r1
 800c986:	dc10      	bgt.n	800c9aa <__kernel_cos+0xfa>
 800c988:	4602      	mov	r2, r0
 800c98a:	460b      	mov	r3, r1
 800c98c:	4650      	mov	r0, sl
 800c98e:	4659      	mov	r1, fp
 800c990:	f7f3 fca2 	bl	80002d8 <__aeabi_dsub>
 800c994:	460b      	mov	r3, r1
 800c996:	4926      	ldr	r1, [pc, #152]	; (800ca30 <__kernel_cos+0x180>)
 800c998:	4602      	mov	r2, r0
 800c99a:	2000      	movs	r0, #0
 800c99c:	f7f3 fc9c 	bl	80002d8 <__aeabi_dsub>
 800c9a0:	ec41 0b10 	vmov	d0, r0, r1
 800c9a4:	b003      	add	sp, #12
 800c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9aa:	4b22      	ldr	r3, [pc, #136]	; (800ca34 <__kernel_cos+0x184>)
 800c9ac:	4920      	ldr	r1, [pc, #128]	; (800ca30 <__kernel_cos+0x180>)
 800c9ae:	4598      	cmp	r8, r3
 800c9b0:	bfcc      	ite	gt
 800c9b2:	4d21      	ldrgt	r5, [pc, #132]	; (800ca38 <__kernel_cos+0x188>)
 800c9b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c9b8:	2400      	movs	r4, #0
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	462b      	mov	r3, r5
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f7f3 fc8a 	bl	80002d8 <__aeabi_dsub>
 800c9c4:	4622      	mov	r2, r4
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	4689      	mov	r9, r1
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	4650      	mov	r0, sl
 800c9ce:	4659      	mov	r1, fp
 800c9d0:	f7f3 fc82 	bl	80002d8 <__aeabi_dsub>
 800c9d4:	4632      	mov	r2, r6
 800c9d6:	463b      	mov	r3, r7
 800c9d8:	f7f3 fc7e 	bl	80002d8 <__aeabi_dsub>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	e7da      	b.n	800c99c <__kernel_cos+0xec>
 800c9e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ca20 <__kernel_cos+0x170>
 800c9ea:	e7db      	b.n	800c9a4 <__kernel_cos+0xf4>
 800c9ec:	f3af 8000 	nop.w
 800c9f0:	be8838d4 	.word	0xbe8838d4
 800c9f4:	bda8fae9 	.word	0xbda8fae9
 800c9f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c9fc:	3e21ee9e 	.word	0x3e21ee9e
 800ca00:	809c52ad 	.word	0x809c52ad
 800ca04:	3e927e4f 	.word	0x3e927e4f
 800ca08:	19cb1590 	.word	0x19cb1590
 800ca0c:	3efa01a0 	.word	0x3efa01a0
 800ca10:	16c15177 	.word	0x16c15177
 800ca14:	3f56c16c 	.word	0x3f56c16c
 800ca18:	5555554c 	.word	0x5555554c
 800ca1c:	3fa55555 	.word	0x3fa55555
 800ca20:	00000000 	.word	0x00000000
 800ca24:	3ff00000 	.word	0x3ff00000
 800ca28:	3fe00000 	.word	0x3fe00000
 800ca2c:	3fd33332 	.word	0x3fd33332
 800ca30:	3ff00000 	.word	0x3ff00000
 800ca34:	3fe90000 	.word	0x3fe90000
 800ca38:	3fd20000 	.word	0x3fd20000
 800ca3c:	00000000 	.word	0x00000000

0800ca40 <__kernel_sin>:
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	ed2d 8b04 	vpush	{d8-d9}
 800ca48:	eeb0 8a41 	vmov.f32	s16, s2
 800ca4c:	eef0 8a61 	vmov.f32	s17, s3
 800ca50:	ec55 4b10 	vmov	r4, r5, d0
 800ca54:	b083      	sub	sp, #12
 800ca56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ca5e:	9001      	str	r0, [sp, #4]
 800ca60:	da06      	bge.n	800ca70 <__kernel_sin+0x30>
 800ca62:	ee10 0a10 	vmov	r0, s0
 800ca66:	4629      	mov	r1, r5
 800ca68:	f7f4 f89e 	bl	8000ba8 <__aeabi_d2iz>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d051      	beq.n	800cb14 <__kernel_sin+0xd4>
 800ca70:	4622      	mov	r2, r4
 800ca72:	462b      	mov	r3, r5
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f3 fde6 	bl	8000648 <__aeabi_dmul>
 800ca7c:	4682      	mov	sl, r0
 800ca7e:	468b      	mov	fp, r1
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4620      	mov	r0, r4
 800ca86:	4629      	mov	r1, r5
 800ca88:	f7f3 fdde 	bl	8000648 <__aeabi_dmul>
 800ca8c:	a341      	add	r3, pc, #260	; (adr r3, 800cb94 <__kernel_sin+0x154>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	4680      	mov	r8, r0
 800ca94:	4689      	mov	r9, r1
 800ca96:	4650      	mov	r0, sl
 800ca98:	4659      	mov	r1, fp
 800ca9a:	f7f3 fdd5 	bl	8000648 <__aeabi_dmul>
 800ca9e:	a33f      	add	r3, pc, #252	; (adr r3, 800cb9c <__kernel_sin+0x15c>)
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	f7f3 fc18 	bl	80002d8 <__aeabi_dsub>
 800caa8:	4652      	mov	r2, sl
 800caaa:	465b      	mov	r3, fp
 800caac:	f7f3 fdcc 	bl	8000648 <__aeabi_dmul>
 800cab0:	a33c      	add	r3, pc, #240	; (adr r3, 800cba4 <__kernel_sin+0x164>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f7f3 fc11 	bl	80002dc <__adddf3>
 800caba:	4652      	mov	r2, sl
 800cabc:	465b      	mov	r3, fp
 800cabe:	f7f3 fdc3 	bl	8000648 <__aeabi_dmul>
 800cac2:	a33a      	add	r3, pc, #232	; (adr r3, 800cbac <__kernel_sin+0x16c>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7f3 fc06 	bl	80002d8 <__aeabi_dsub>
 800cacc:	4652      	mov	r2, sl
 800cace:	465b      	mov	r3, fp
 800cad0:	f7f3 fdba 	bl	8000648 <__aeabi_dmul>
 800cad4:	a337      	add	r3, pc, #220	; (adr r3, 800cbb4 <__kernel_sin+0x174>)
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	f7f3 fbff 	bl	80002dc <__adddf3>
 800cade:	9b01      	ldr	r3, [sp, #4]
 800cae0:	4606      	mov	r6, r0
 800cae2:	460f      	mov	r7, r1
 800cae4:	b9eb      	cbnz	r3, 800cb22 <__kernel_sin+0xe2>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	4650      	mov	r0, sl
 800caec:	4659      	mov	r1, fp
 800caee:	f7f3 fdab 	bl	8000648 <__aeabi_dmul>
 800caf2:	a325      	add	r3, pc, #148	; (adr r3, 800cb88 <__kernel_sin+0x148>)
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	f7f3 fbee 	bl	80002d8 <__aeabi_dsub>
 800cafc:	4642      	mov	r2, r8
 800cafe:	464b      	mov	r3, r9
 800cb00:	f7f3 fda2 	bl	8000648 <__aeabi_dmul>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4620      	mov	r0, r4
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f7f3 fbe6 	bl	80002dc <__adddf3>
 800cb10:	4604      	mov	r4, r0
 800cb12:	460d      	mov	r5, r1
 800cb14:	ec45 4b10 	vmov	d0, r4, r5
 800cb18:	b003      	add	sp, #12
 800cb1a:	ecbd 8b04 	vpop	{d8-d9}
 800cb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb22:	4b1b      	ldr	r3, [pc, #108]	; (800cb90 <__kernel_sin+0x150>)
 800cb24:	ec51 0b18 	vmov	r0, r1, d8
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f7f3 fd8d 	bl	8000648 <__aeabi_dmul>
 800cb2e:	4632      	mov	r2, r6
 800cb30:	ec41 0b19 	vmov	d9, r0, r1
 800cb34:	463b      	mov	r3, r7
 800cb36:	4640      	mov	r0, r8
 800cb38:	4649      	mov	r1, r9
 800cb3a:	f7f3 fd85 	bl	8000648 <__aeabi_dmul>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	ec51 0b19 	vmov	r0, r1, d9
 800cb46:	f7f3 fbc7 	bl	80002d8 <__aeabi_dsub>
 800cb4a:	4652      	mov	r2, sl
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	f7f3 fd7b 	bl	8000648 <__aeabi_dmul>
 800cb52:	ec53 2b18 	vmov	r2, r3, d8
 800cb56:	f7f3 fbbf 	bl	80002d8 <__aeabi_dsub>
 800cb5a:	a30b      	add	r3, pc, #44	; (adr r3, 800cb88 <__kernel_sin+0x148>)
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	4606      	mov	r6, r0
 800cb62:	460f      	mov	r7, r1
 800cb64:	4640      	mov	r0, r8
 800cb66:	4649      	mov	r1, r9
 800cb68:	f7f3 fd6e 	bl	8000648 <__aeabi_dmul>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	4630      	mov	r0, r6
 800cb72:	4639      	mov	r1, r7
 800cb74:	f7f3 fbb2 	bl	80002dc <__adddf3>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fbaa 	bl	80002d8 <__aeabi_dsub>
 800cb84:	e7c4      	b.n	800cb10 <__kernel_sin+0xd0>
 800cb86:	bf00      	nop
 800cb88:	55555549 	.word	0x55555549
 800cb8c:	3fc55555 	.word	0x3fc55555
 800cb90:	3fe00000 	.word	0x3fe00000
 800cb94:	5acfd57c 	.word	0x5acfd57c
 800cb98:	3de5d93a 	.word	0x3de5d93a
 800cb9c:	8a2b9ceb 	.word	0x8a2b9ceb
 800cba0:	3e5ae5e6 	.word	0x3e5ae5e6
 800cba4:	57b1fe7d 	.word	0x57b1fe7d
 800cba8:	3ec71de3 	.word	0x3ec71de3
 800cbac:	19c161d5 	.word	0x19c161d5
 800cbb0:	3f2a01a0 	.word	0x3f2a01a0
 800cbb4:	1110f8a6 	.word	0x1110f8a6
 800cbb8:	3f811111 	.word	0x3f811111
 800cbbc:	00000000 	.word	0x00000000

0800cbc0 <__ieee754_rem_pio2>:
 800cbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc4:	ed2d 8b02 	vpush	{d8}
 800cbc8:	ec55 4b10 	vmov	r4, r5, d0
 800cbcc:	4bca      	ldr	r3, [pc, #808]	; (800cef8 <__ieee754_rem_pio2+0x338>)
 800cbce:	b08b      	sub	sp, #44	; 0x2c
 800cbd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cbd4:	4598      	cmp	r8, r3
 800cbd6:	4682      	mov	sl, r0
 800cbd8:	9502      	str	r5, [sp, #8]
 800cbda:	dc08      	bgt.n	800cbee <__ieee754_rem_pio2+0x2e>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2300      	movs	r3, #0
 800cbe0:	ed80 0b00 	vstr	d0, [r0]
 800cbe4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cbe8:	f04f 0b00 	mov.w	fp, #0
 800cbec:	e028      	b.n	800cc40 <__ieee754_rem_pio2+0x80>
 800cbee:	4bc3      	ldr	r3, [pc, #780]	; (800cefc <__ieee754_rem_pio2+0x33c>)
 800cbf0:	4598      	cmp	r8, r3
 800cbf2:	dc78      	bgt.n	800cce6 <__ieee754_rem_pio2+0x126>
 800cbf4:	9b02      	ldr	r3, [sp, #8]
 800cbf6:	4ec2      	ldr	r6, [pc, #776]	; (800cf00 <__ieee754_rem_pio2+0x340>)
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	ee10 0a10 	vmov	r0, s0
 800cbfe:	a3b0      	add	r3, pc, #704	; (adr r3, 800cec0 <__ieee754_rem_pio2+0x300>)
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	4629      	mov	r1, r5
 800cc06:	dd39      	ble.n	800cc7c <__ieee754_rem_pio2+0xbc>
 800cc08:	f7f3 fb66 	bl	80002d8 <__aeabi_dsub>
 800cc0c:	45b0      	cmp	r8, r6
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	d01b      	beq.n	800cc4c <__ieee754_rem_pio2+0x8c>
 800cc14:	a3ac      	add	r3, pc, #688	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x308>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	f7f3 fb5d 	bl	80002d8 <__aeabi_dsub>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	460b      	mov	r3, r1
 800cc22:	e9ca 2300 	strd	r2, r3, [sl]
 800cc26:	4620      	mov	r0, r4
 800cc28:	4629      	mov	r1, r5
 800cc2a:	f7f3 fb55 	bl	80002d8 <__aeabi_dsub>
 800cc2e:	a3a6      	add	r3, pc, #664	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x308>)
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	f7f3 fb50 	bl	80002d8 <__aeabi_dsub>
 800cc38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cc3c:	f04f 0b01 	mov.w	fp, #1
 800cc40:	4658      	mov	r0, fp
 800cc42:	b00b      	add	sp, #44	; 0x2c
 800cc44:	ecbd 8b02 	vpop	{d8}
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x310>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f7f3 fb41 	bl	80002d8 <__aeabi_dsub>
 800cc56:	a3a0      	add	r3, pc, #640	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x318>)
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	460d      	mov	r5, r1
 800cc60:	f7f3 fb3a 	bl	80002d8 <__aeabi_dsub>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	e9ca 2300 	strd	r2, r3, [sl]
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	4629      	mov	r1, r5
 800cc70:	f7f3 fb32 	bl	80002d8 <__aeabi_dsub>
 800cc74:	a398      	add	r3, pc, #608	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x318>)
 800cc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7a:	e7db      	b.n	800cc34 <__ieee754_rem_pio2+0x74>
 800cc7c:	f7f3 fb2e 	bl	80002dc <__adddf3>
 800cc80:	45b0      	cmp	r8, r6
 800cc82:	4604      	mov	r4, r0
 800cc84:	460d      	mov	r5, r1
 800cc86:	d016      	beq.n	800ccb6 <__ieee754_rem_pio2+0xf6>
 800cc88:	a38f      	add	r3, pc, #572	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x308>)
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	f7f3 fb25 	bl	80002dc <__adddf3>
 800cc92:	4602      	mov	r2, r0
 800cc94:	460b      	mov	r3, r1
 800cc96:	e9ca 2300 	strd	r2, r3, [sl]
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	f7f3 fb1b 	bl	80002d8 <__aeabi_dsub>
 800cca2:	a389      	add	r3, pc, #548	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x308>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	f7f3 fb18 	bl	80002dc <__adddf3>
 800ccac:	f04f 3bff 	mov.w	fp, #4294967295
 800ccb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ccb4:	e7c4      	b.n	800cc40 <__ieee754_rem_pio2+0x80>
 800ccb6:	a386      	add	r3, pc, #536	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x310>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	f7f3 fb0e 	bl	80002dc <__adddf3>
 800ccc0:	a385      	add	r3, pc, #532	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x318>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	460d      	mov	r5, r1
 800ccca:	f7f3 fb07 	bl	80002dc <__adddf3>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	e9ca 2300 	strd	r2, r3, [sl]
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	4629      	mov	r1, r5
 800ccda:	f7f3 fafd 	bl	80002d8 <__aeabi_dsub>
 800ccde:	a37e      	add	r3, pc, #504	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x318>)
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	e7e0      	b.n	800cca8 <__ieee754_rem_pio2+0xe8>
 800cce6:	4b87      	ldr	r3, [pc, #540]	; (800cf04 <__ieee754_rem_pio2+0x344>)
 800cce8:	4598      	cmp	r8, r3
 800ccea:	f300 80d8 	bgt.w	800ce9e <__ieee754_rem_pio2+0x2de>
 800ccee:	f000 f96d 	bl	800cfcc <fabs>
 800ccf2:	ec55 4b10 	vmov	r4, r5, d0
 800ccf6:	ee10 0a10 	vmov	r0, s0
 800ccfa:	a379      	add	r3, pc, #484	; (adr r3, 800cee0 <__ieee754_rem_pio2+0x320>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	4629      	mov	r1, r5
 800cd02:	f7f3 fca1 	bl	8000648 <__aeabi_dmul>
 800cd06:	4b80      	ldr	r3, [pc, #512]	; (800cf08 <__ieee754_rem_pio2+0x348>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f7f3 fae7 	bl	80002dc <__adddf3>
 800cd0e:	f7f3 ff4b 	bl	8000ba8 <__aeabi_d2iz>
 800cd12:	4683      	mov	fp, r0
 800cd14:	f7f3 fc2e 	bl	8000574 <__aeabi_i2d>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	ec43 2b18 	vmov	d8, r2, r3
 800cd20:	a367      	add	r3, pc, #412	; (adr r3, 800cec0 <__ieee754_rem_pio2+0x300>)
 800cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd26:	f7f3 fc8f 	bl	8000648 <__aeabi_dmul>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4620      	mov	r0, r4
 800cd30:	4629      	mov	r1, r5
 800cd32:	f7f3 fad1 	bl	80002d8 <__aeabi_dsub>
 800cd36:	a364      	add	r3, pc, #400	; (adr r3, 800cec8 <__ieee754_rem_pio2+0x308>)
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	460f      	mov	r7, r1
 800cd40:	ec51 0b18 	vmov	r0, r1, d8
 800cd44:	f7f3 fc80 	bl	8000648 <__aeabi_dmul>
 800cd48:	f1bb 0f1f 	cmp.w	fp, #31
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	460d      	mov	r5, r1
 800cd50:	dc0d      	bgt.n	800cd6e <__ieee754_rem_pio2+0x1ae>
 800cd52:	4b6e      	ldr	r3, [pc, #440]	; (800cf0c <__ieee754_rem_pio2+0x34c>)
 800cd54:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5c:	4543      	cmp	r3, r8
 800cd5e:	d006      	beq.n	800cd6e <__ieee754_rem_pio2+0x1ae>
 800cd60:	4622      	mov	r2, r4
 800cd62:	462b      	mov	r3, r5
 800cd64:	4630      	mov	r0, r6
 800cd66:	4639      	mov	r1, r7
 800cd68:	f7f3 fab6 	bl	80002d8 <__aeabi_dsub>
 800cd6c:	e00e      	b.n	800cd8c <__ieee754_rem_pio2+0x1cc>
 800cd6e:	462b      	mov	r3, r5
 800cd70:	4622      	mov	r2, r4
 800cd72:	4630      	mov	r0, r6
 800cd74:	4639      	mov	r1, r7
 800cd76:	f7f3 faaf 	bl	80002d8 <__aeabi_dsub>
 800cd7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd7e:	9303      	str	r3, [sp, #12]
 800cd80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd84:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800cd88:	2b10      	cmp	r3, #16
 800cd8a:	dc02      	bgt.n	800cd92 <__ieee754_rem_pio2+0x1d2>
 800cd8c:	e9ca 0100 	strd	r0, r1, [sl]
 800cd90:	e039      	b.n	800ce06 <__ieee754_rem_pio2+0x246>
 800cd92:	a34f      	add	r3, pc, #316	; (adr r3, 800ced0 <__ieee754_rem_pio2+0x310>)
 800cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd98:	ec51 0b18 	vmov	r0, r1, d8
 800cd9c:	f7f3 fc54 	bl	8000648 <__aeabi_dmul>
 800cda0:	4604      	mov	r4, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4630      	mov	r0, r6
 800cdaa:	4639      	mov	r1, r7
 800cdac:	f7f3 fa94 	bl	80002d8 <__aeabi_dsub>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	4689      	mov	r9, r1
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4639      	mov	r1, r7
 800cdbc:	f7f3 fa8c 	bl	80002d8 <__aeabi_dsub>
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	462b      	mov	r3, r5
 800cdc4:	f7f3 fa88 	bl	80002d8 <__aeabi_dsub>
 800cdc8:	a343      	add	r3, pc, #268	; (adr r3, 800ced8 <__ieee754_rem_pio2+0x318>)
 800cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdce:	4604      	mov	r4, r0
 800cdd0:	460d      	mov	r5, r1
 800cdd2:	ec51 0b18 	vmov	r0, r1, d8
 800cdd6:	f7f3 fc37 	bl	8000648 <__aeabi_dmul>
 800cdda:	4622      	mov	r2, r4
 800cddc:	462b      	mov	r3, r5
 800cdde:	f7f3 fa7b 	bl	80002d8 <__aeabi_dsub>
 800cde2:	4602      	mov	r2, r0
 800cde4:	460b      	mov	r3, r1
 800cde6:	4604      	mov	r4, r0
 800cde8:	460d      	mov	r5, r1
 800cdea:	4640      	mov	r0, r8
 800cdec:	4649      	mov	r1, r9
 800cdee:	f7f3 fa73 	bl	80002d8 <__aeabi_dsub>
 800cdf2:	9a03      	ldr	r2, [sp, #12]
 800cdf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b31      	cmp	r3, #49	; 0x31
 800cdfc:	dc24      	bgt.n	800ce48 <__ieee754_rem_pio2+0x288>
 800cdfe:	e9ca 0100 	strd	r0, r1, [sl]
 800ce02:	4646      	mov	r6, r8
 800ce04:	464f      	mov	r7, r9
 800ce06:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	464b      	mov	r3, r9
 800ce10:	4639      	mov	r1, r7
 800ce12:	f7f3 fa61 	bl	80002d8 <__aeabi_dsub>
 800ce16:	462b      	mov	r3, r5
 800ce18:	4622      	mov	r2, r4
 800ce1a:	f7f3 fa5d 	bl	80002d8 <__aeabi_dsub>
 800ce1e:	9b02      	ldr	r3, [sp, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce26:	f6bf af0b 	bge.w	800cc40 <__ieee754_rem_pio2+0x80>
 800ce2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ce2e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ce32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce36:	f8ca 8000 	str.w	r8, [sl]
 800ce3a:	f8ca 0008 	str.w	r0, [sl, #8]
 800ce3e:	f8ca 300c 	str.w	r3, [sl, #12]
 800ce42:	f1cb 0b00 	rsb	fp, fp, #0
 800ce46:	e6fb      	b.n	800cc40 <__ieee754_rem_pio2+0x80>
 800ce48:	a327      	add	r3, pc, #156	; (adr r3, 800cee8 <__ieee754_rem_pio2+0x328>)
 800ce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4e:	ec51 0b18 	vmov	r0, r1, d8
 800ce52:	f7f3 fbf9 	bl	8000648 <__aeabi_dmul>
 800ce56:	4604      	mov	r4, r0
 800ce58:	460d      	mov	r5, r1
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	4640      	mov	r0, r8
 800ce60:	4649      	mov	r1, r9
 800ce62:	f7f3 fa39 	bl	80002d8 <__aeabi_dsub>
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460f      	mov	r7, r1
 800ce6e:	4640      	mov	r0, r8
 800ce70:	4649      	mov	r1, r9
 800ce72:	f7f3 fa31 	bl	80002d8 <__aeabi_dsub>
 800ce76:	4622      	mov	r2, r4
 800ce78:	462b      	mov	r3, r5
 800ce7a:	f7f3 fa2d 	bl	80002d8 <__aeabi_dsub>
 800ce7e:	a31c      	add	r3, pc, #112	; (adr r3, 800cef0 <__ieee754_rem_pio2+0x330>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	4604      	mov	r4, r0
 800ce86:	460d      	mov	r5, r1
 800ce88:	ec51 0b18 	vmov	r0, r1, d8
 800ce8c:	f7f3 fbdc 	bl	8000648 <__aeabi_dmul>
 800ce90:	4622      	mov	r2, r4
 800ce92:	462b      	mov	r3, r5
 800ce94:	f7f3 fa20 	bl	80002d8 <__aeabi_dsub>
 800ce98:	4604      	mov	r4, r0
 800ce9a:	460d      	mov	r5, r1
 800ce9c:	e760      	b.n	800cd60 <__ieee754_rem_pio2+0x1a0>
 800ce9e:	4b1c      	ldr	r3, [pc, #112]	; (800cf10 <__ieee754_rem_pio2+0x350>)
 800cea0:	4598      	cmp	r8, r3
 800cea2:	dd37      	ble.n	800cf14 <__ieee754_rem_pio2+0x354>
 800cea4:	ee10 2a10 	vmov	r2, s0
 800cea8:	462b      	mov	r3, r5
 800ceaa:	4620      	mov	r0, r4
 800ceac:	4629      	mov	r1, r5
 800ceae:	f7f3 fa13 	bl	80002d8 <__aeabi_dsub>
 800ceb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ceb6:	e9ca 0100 	strd	r0, r1, [sl]
 800ceba:	e695      	b.n	800cbe8 <__ieee754_rem_pio2+0x28>
 800cebc:	f3af 8000 	nop.w
 800cec0:	54400000 	.word	0x54400000
 800cec4:	3ff921fb 	.word	0x3ff921fb
 800cec8:	1a626331 	.word	0x1a626331
 800cecc:	3dd0b461 	.word	0x3dd0b461
 800ced0:	1a600000 	.word	0x1a600000
 800ced4:	3dd0b461 	.word	0x3dd0b461
 800ced8:	2e037073 	.word	0x2e037073
 800cedc:	3ba3198a 	.word	0x3ba3198a
 800cee0:	6dc9c883 	.word	0x6dc9c883
 800cee4:	3fe45f30 	.word	0x3fe45f30
 800cee8:	2e000000 	.word	0x2e000000
 800ceec:	3ba3198a 	.word	0x3ba3198a
 800cef0:	252049c1 	.word	0x252049c1
 800cef4:	397b839a 	.word	0x397b839a
 800cef8:	3fe921fb 	.word	0x3fe921fb
 800cefc:	4002d97b 	.word	0x4002d97b
 800cf00:	3ff921fb 	.word	0x3ff921fb
 800cf04:	413921fb 	.word	0x413921fb
 800cf08:	3fe00000 	.word	0x3fe00000
 800cf0c:	0800dd54 	.word	0x0800dd54
 800cf10:	7fefffff 	.word	0x7fefffff
 800cf14:	ea4f 5628 	mov.w	r6, r8, asr #20
 800cf18:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800cf1c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800cf20:	4620      	mov	r0, r4
 800cf22:	460d      	mov	r5, r1
 800cf24:	f7f3 fe40 	bl	8000ba8 <__aeabi_d2iz>
 800cf28:	f7f3 fb24 	bl	8000574 <__aeabi_i2d>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4620      	mov	r0, r4
 800cf32:	4629      	mov	r1, r5
 800cf34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf38:	f7f3 f9ce 	bl	80002d8 <__aeabi_dsub>
 800cf3c:	4b21      	ldr	r3, [pc, #132]	; (800cfc4 <__ieee754_rem_pio2+0x404>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f7f3 fb82 	bl	8000648 <__aeabi_dmul>
 800cf44:	460d      	mov	r5, r1
 800cf46:	4604      	mov	r4, r0
 800cf48:	f7f3 fe2e 	bl	8000ba8 <__aeabi_d2iz>
 800cf4c:	f7f3 fb12 	bl	8000574 <__aeabi_i2d>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	4620      	mov	r0, r4
 800cf56:	4629      	mov	r1, r5
 800cf58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf5c:	f7f3 f9bc 	bl	80002d8 <__aeabi_dsub>
 800cf60:	4b18      	ldr	r3, [pc, #96]	; (800cfc4 <__ieee754_rem_pio2+0x404>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	f7f3 fb70 	bl	8000648 <__aeabi_dmul>
 800cf68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cf70:	2703      	movs	r7, #3
 800cf72:	2400      	movs	r4, #0
 800cf74:	2500      	movs	r5, #0
 800cf76:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800cf7a:	4622      	mov	r2, r4
 800cf7c:	462b      	mov	r3, r5
 800cf7e:	46b9      	mov	r9, r7
 800cf80:	3f01      	subs	r7, #1
 800cf82:	f7f3 fdc9 	bl	8000b18 <__aeabi_dcmpeq>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d1f5      	bne.n	800cf76 <__ieee754_rem_pio2+0x3b6>
 800cf8a:	4b0f      	ldr	r3, [pc, #60]	; (800cfc8 <__ieee754_rem_pio2+0x408>)
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	2302      	movs	r3, #2
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	4632      	mov	r2, r6
 800cf94:	464b      	mov	r3, r9
 800cf96:	4651      	mov	r1, sl
 800cf98:	a804      	add	r0, sp, #16
 800cf9a:	f000 f821 	bl	800cfe0 <__kernel_rem_pio2>
 800cf9e:	9b02      	ldr	r3, [sp, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	4683      	mov	fp, r0
 800cfa4:	f6bf ae4c 	bge.w	800cc40 <__ieee754_rem_pio2+0x80>
 800cfa8:	e9da 2100 	ldrd	r2, r1, [sl]
 800cfac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfb0:	e9ca 2300 	strd	r2, r3, [sl]
 800cfb4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cfb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfbc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cfc0:	e73f      	b.n	800ce42 <__ieee754_rem_pio2+0x282>
 800cfc2:	bf00      	nop
 800cfc4:	41700000 	.word	0x41700000
 800cfc8:	0800ddd4 	.word	0x0800ddd4

0800cfcc <fabs>:
 800cfcc:	ec51 0b10 	vmov	r0, r1, d0
 800cfd0:	ee10 2a10 	vmov	r2, s0
 800cfd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfd8:	ec43 2b10 	vmov	d0, r2, r3
 800cfdc:	4770      	bx	lr
	...

0800cfe0 <__kernel_rem_pio2>:
 800cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe4:	ed2d 8b02 	vpush	{d8}
 800cfe8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cfec:	f112 0f14 	cmn.w	r2, #20
 800cff0:	9306      	str	r3, [sp, #24]
 800cff2:	9104      	str	r1, [sp, #16]
 800cff4:	4bc2      	ldr	r3, [pc, #776]	; (800d300 <__kernel_rem_pio2+0x320>)
 800cff6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cff8:	9009      	str	r0, [sp, #36]	; 0x24
 800cffa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	9b06      	ldr	r3, [sp, #24]
 800d002:	f103 33ff 	add.w	r3, r3, #4294967295
 800d006:	bfa8      	it	ge
 800d008:	1ed4      	subge	r4, r2, #3
 800d00a:	9305      	str	r3, [sp, #20]
 800d00c:	bfb2      	itee	lt
 800d00e:	2400      	movlt	r4, #0
 800d010:	2318      	movge	r3, #24
 800d012:	fb94 f4f3 	sdivge	r4, r4, r3
 800d016:	f06f 0317 	mvn.w	r3, #23
 800d01a:	fb04 3303 	mla	r3, r4, r3, r3
 800d01e:	eb03 0a02 	add.w	sl, r3, r2
 800d022:	9b00      	ldr	r3, [sp, #0]
 800d024:	9a05      	ldr	r2, [sp, #20]
 800d026:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d2f0 <__kernel_rem_pio2+0x310>
 800d02a:	eb03 0802 	add.w	r8, r3, r2
 800d02e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d030:	1aa7      	subs	r7, r4, r2
 800d032:	ae20      	add	r6, sp, #128	; 0x80
 800d034:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d038:	2500      	movs	r5, #0
 800d03a:	4545      	cmp	r5, r8
 800d03c:	dd13      	ble.n	800d066 <__kernel_rem_pio2+0x86>
 800d03e:	9b06      	ldr	r3, [sp, #24]
 800d040:	aa20      	add	r2, sp, #128	; 0x80
 800d042:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d046:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d04a:	f04f 0800 	mov.w	r8, #0
 800d04e:	9b00      	ldr	r3, [sp, #0]
 800d050:	4598      	cmp	r8, r3
 800d052:	dc31      	bgt.n	800d0b8 <__kernel_rem_pio2+0xd8>
 800d054:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d2f0 <__kernel_rem_pio2+0x310>
 800d058:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d05c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d060:	462f      	mov	r7, r5
 800d062:	2600      	movs	r6, #0
 800d064:	e01b      	b.n	800d09e <__kernel_rem_pio2+0xbe>
 800d066:	42ef      	cmn	r7, r5
 800d068:	d407      	bmi.n	800d07a <__kernel_rem_pio2+0x9a>
 800d06a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d06e:	f7f3 fa81 	bl	8000574 <__aeabi_i2d>
 800d072:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d076:	3501      	adds	r5, #1
 800d078:	e7df      	b.n	800d03a <__kernel_rem_pio2+0x5a>
 800d07a:	ec51 0b18 	vmov	r0, r1, d8
 800d07e:	e7f8      	b.n	800d072 <__kernel_rem_pio2+0x92>
 800d080:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d084:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d088:	f7f3 fade 	bl	8000648 <__aeabi_dmul>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d094:	f7f3 f922 	bl	80002dc <__adddf3>
 800d098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d09c:	3601      	adds	r6, #1
 800d09e:	9b05      	ldr	r3, [sp, #20]
 800d0a0:	429e      	cmp	r6, r3
 800d0a2:	f1a7 0708 	sub.w	r7, r7, #8
 800d0a6:	ddeb      	ble.n	800d080 <__kernel_rem_pio2+0xa0>
 800d0a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0ac:	f108 0801 	add.w	r8, r8, #1
 800d0b0:	ecab 7b02 	vstmia	fp!, {d7}
 800d0b4:	3508      	adds	r5, #8
 800d0b6:	e7ca      	b.n	800d04e <__kernel_rem_pio2+0x6e>
 800d0b8:	9b00      	ldr	r3, [sp, #0]
 800d0ba:	aa0c      	add	r2, sp, #48	; 0x30
 800d0bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d0c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d0c8:	9c00      	ldr	r4, [sp, #0]
 800d0ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d0cc:	00e3      	lsls	r3, r4, #3
 800d0ce:	9308      	str	r3, [sp, #32]
 800d0d0:	ab98      	add	r3, sp, #608	; 0x260
 800d0d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d0da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d0de:	ab70      	add	r3, sp, #448	; 0x1c0
 800d0e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d0e4:	46c3      	mov	fp, r8
 800d0e6:	46a1      	mov	r9, r4
 800d0e8:	f1b9 0f00 	cmp.w	r9, #0
 800d0ec:	f1a5 0508 	sub.w	r5, r5, #8
 800d0f0:	dc77      	bgt.n	800d1e2 <__kernel_rem_pio2+0x202>
 800d0f2:	ec47 6b10 	vmov	d0, r6, r7
 800d0f6:	4650      	mov	r0, sl
 800d0f8:	f000 fac2 	bl	800d680 <scalbn>
 800d0fc:	ec57 6b10 	vmov	r6, r7, d0
 800d100:	2200      	movs	r2, #0
 800d102:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d106:	ee10 0a10 	vmov	r0, s0
 800d10a:	4639      	mov	r1, r7
 800d10c:	f7f3 fa9c 	bl	8000648 <__aeabi_dmul>
 800d110:	ec41 0b10 	vmov	d0, r0, r1
 800d114:	f000 fb34 	bl	800d780 <floor>
 800d118:	4b7a      	ldr	r3, [pc, #488]	; (800d304 <__kernel_rem_pio2+0x324>)
 800d11a:	ec51 0b10 	vmov	r0, r1, d0
 800d11e:	2200      	movs	r2, #0
 800d120:	f7f3 fa92 	bl	8000648 <__aeabi_dmul>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4630      	mov	r0, r6
 800d12a:	4639      	mov	r1, r7
 800d12c:	f7f3 f8d4 	bl	80002d8 <__aeabi_dsub>
 800d130:	460f      	mov	r7, r1
 800d132:	4606      	mov	r6, r0
 800d134:	f7f3 fd38 	bl	8000ba8 <__aeabi_d2iz>
 800d138:	9002      	str	r0, [sp, #8]
 800d13a:	f7f3 fa1b 	bl	8000574 <__aeabi_i2d>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4630      	mov	r0, r6
 800d144:	4639      	mov	r1, r7
 800d146:	f7f3 f8c7 	bl	80002d8 <__aeabi_dsub>
 800d14a:	f1ba 0f00 	cmp.w	sl, #0
 800d14e:	4606      	mov	r6, r0
 800d150:	460f      	mov	r7, r1
 800d152:	dd6d      	ble.n	800d230 <__kernel_rem_pio2+0x250>
 800d154:	1e61      	subs	r1, r4, #1
 800d156:	ab0c      	add	r3, sp, #48	; 0x30
 800d158:	9d02      	ldr	r5, [sp, #8]
 800d15a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d15e:	f1ca 0018 	rsb	r0, sl, #24
 800d162:	fa43 f200 	asr.w	r2, r3, r0
 800d166:	4415      	add	r5, r2
 800d168:	4082      	lsls	r2, r0
 800d16a:	1a9b      	subs	r3, r3, r2
 800d16c:	aa0c      	add	r2, sp, #48	; 0x30
 800d16e:	9502      	str	r5, [sp, #8]
 800d170:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d174:	f1ca 0217 	rsb	r2, sl, #23
 800d178:	fa43 fb02 	asr.w	fp, r3, r2
 800d17c:	f1bb 0f00 	cmp.w	fp, #0
 800d180:	dd65      	ble.n	800d24e <__kernel_rem_pio2+0x26e>
 800d182:	9b02      	ldr	r3, [sp, #8]
 800d184:	2200      	movs	r2, #0
 800d186:	3301      	adds	r3, #1
 800d188:	9302      	str	r3, [sp, #8]
 800d18a:	4615      	mov	r5, r2
 800d18c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d190:	4294      	cmp	r4, r2
 800d192:	f300 809f 	bgt.w	800d2d4 <__kernel_rem_pio2+0x2f4>
 800d196:	f1ba 0f00 	cmp.w	sl, #0
 800d19a:	dd07      	ble.n	800d1ac <__kernel_rem_pio2+0x1cc>
 800d19c:	f1ba 0f01 	cmp.w	sl, #1
 800d1a0:	f000 80c1 	beq.w	800d326 <__kernel_rem_pio2+0x346>
 800d1a4:	f1ba 0f02 	cmp.w	sl, #2
 800d1a8:	f000 80c7 	beq.w	800d33a <__kernel_rem_pio2+0x35a>
 800d1ac:	f1bb 0f02 	cmp.w	fp, #2
 800d1b0:	d14d      	bne.n	800d24e <__kernel_rem_pio2+0x26e>
 800d1b2:	4632      	mov	r2, r6
 800d1b4:	463b      	mov	r3, r7
 800d1b6:	4954      	ldr	r1, [pc, #336]	; (800d308 <__kernel_rem_pio2+0x328>)
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	f7f3 f88d 	bl	80002d8 <__aeabi_dsub>
 800d1be:	4606      	mov	r6, r0
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	2d00      	cmp	r5, #0
 800d1c4:	d043      	beq.n	800d24e <__kernel_rem_pio2+0x26e>
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d2f8 <__kernel_rem_pio2+0x318>
 800d1cc:	f000 fa58 	bl	800d680 <scalbn>
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	4639      	mov	r1, r7
 800d1d4:	ec53 2b10 	vmov	r2, r3, d0
 800d1d8:	f7f3 f87e 	bl	80002d8 <__aeabi_dsub>
 800d1dc:	4606      	mov	r6, r0
 800d1de:	460f      	mov	r7, r1
 800d1e0:	e035      	b.n	800d24e <__kernel_rem_pio2+0x26e>
 800d1e2:	4b4a      	ldr	r3, [pc, #296]	; (800d30c <__kernel_rem_pio2+0x32c>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	f7f3 fa2d 	bl	8000648 <__aeabi_dmul>
 800d1ee:	f7f3 fcdb 	bl	8000ba8 <__aeabi_d2iz>
 800d1f2:	f7f3 f9bf 	bl	8000574 <__aeabi_i2d>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	ec43 2b18 	vmov	d8, r2, r3
 800d1fe:	4b44      	ldr	r3, [pc, #272]	; (800d310 <__kernel_rem_pio2+0x330>)
 800d200:	2200      	movs	r2, #0
 800d202:	f7f3 fa21 	bl	8000648 <__aeabi_dmul>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 f863 	bl	80002d8 <__aeabi_dsub>
 800d212:	f7f3 fcc9 	bl	8000ba8 <__aeabi_d2iz>
 800d216:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d21a:	f84b 0b04 	str.w	r0, [fp], #4
 800d21e:	ec51 0b18 	vmov	r0, r1, d8
 800d222:	f7f3 f85b 	bl	80002dc <__adddf3>
 800d226:	f109 39ff 	add.w	r9, r9, #4294967295
 800d22a:	4606      	mov	r6, r0
 800d22c:	460f      	mov	r7, r1
 800d22e:	e75b      	b.n	800d0e8 <__kernel_rem_pio2+0x108>
 800d230:	d106      	bne.n	800d240 <__kernel_rem_pio2+0x260>
 800d232:	1e63      	subs	r3, r4, #1
 800d234:	aa0c      	add	r2, sp, #48	; 0x30
 800d236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d23a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d23e:	e79d      	b.n	800d17c <__kernel_rem_pio2+0x19c>
 800d240:	4b34      	ldr	r3, [pc, #208]	; (800d314 <__kernel_rem_pio2+0x334>)
 800d242:	2200      	movs	r2, #0
 800d244:	f7f3 fc86 	bl	8000b54 <__aeabi_dcmpge>
 800d248:	2800      	cmp	r0, #0
 800d24a:	d140      	bne.n	800d2ce <__kernel_rem_pio2+0x2ee>
 800d24c:	4683      	mov	fp, r0
 800d24e:	2200      	movs	r2, #0
 800d250:	2300      	movs	r3, #0
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 fc5f 	bl	8000b18 <__aeabi_dcmpeq>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	f000 80c1 	beq.w	800d3e2 <__kernel_rem_pio2+0x402>
 800d260:	1e65      	subs	r5, r4, #1
 800d262:	462b      	mov	r3, r5
 800d264:	2200      	movs	r2, #0
 800d266:	9900      	ldr	r1, [sp, #0]
 800d268:	428b      	cmp	r3, r1
 800d26a:	da6d      	bge.n	800d348 <__kernel_rem_pio2+0x368>
 800d26c:	2a00      	cmp	r2, #0
 800d26e:	f000 808a 	beq.w	800d386 <__kernel_rem_pio2+0x3a6>
 800d272:	ab0c      	add	r3, sp, #48	; 0x30
 800d274:	f1aa 0a18 	sub.w	sl, sl, #24
 800d278:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80ae 	beq.w	800d3de <__kernel_rem_pio2+0x3fe>
 800d282:	4650      	mov	r0, sl
 800d284:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d2f8 <__kernel_rem_pio2+0x318>
 800d288:	f000 f9fa 	bl	800d680 <scalbn>
 800d28c:	1c6b      	adds	r3, r5, #1
 800d28e:	00da      	lsls	r2, r3, #3
 800d290:	9205      	str	r2, [sp, #20]
 800d292:	ec57 6b10 	vmov	r6, r7, d0
 800d296:	aa70      	add	r2, sp, #448	; 0x1c0
 800d298:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d30c <__kernel_rem_pio2+0x32c>
 800d29c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d2a0:	462c      	mov	r4, r5
 800d2a2:	f04f 0800 	mov.w	r8, #0
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	f280 80d4 	bge.w	800d454 <__kernel_rem_pio2+0x474>
 800d2ac:	462c      	mov	r4, r5
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	f2c0 8102 	blt.w	800d4b8 <__kernel_rem_pio2+0x4d8>
 800d2b4:	4b18      	ldr	r3, [pc, #96]	; (800d318 <__kernel_rem_pio2+0x338>)
 800d2b6:	461e      	mov	r6, r3
 800d2b8:	ab70      	add	r3, sp, #448	; 0x1c0
 800d2ba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d2be:	1b2b      	subs	r3, r5, r4
 800d2c0:	f04f 0900 	mov.w	r9, #0
 800d2c4:	f04f 0a00 	mov.w	sl, #0
 800d2c8:	2700      	movs	r7, #0
 800d2ca:	9306      	str	r3, [sp, #24]
 800d2cc:	e0e6      	b.n	800d49c <__kernel_rem_pio2+0x4bc>
 800d2ce:	f04f 0b02 	mov.w	fp, #2
 800d2d2:	e756      	b.n	800d182 <__kernel_rem_pio2+0x1a2>
 800d2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2d8:	bb05      	cbnz	r5, 800d31c <__kernel_rem_pio2+0x33c>
 800d2da:	b123      	cbz	r3, 800d2e6 <__kernel_rem_pio2+0x306>
 800d2dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d2e0:	f8c8 3000 	str.w	r3, [r8]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	3201      	adds	r2, #1
 800d2e8:	f108 0804 	add.w	r8, r8, #4
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	e74f      	b.n	800d190 <__kernel_rem_pio2+0x1b0>
	...
 800d2fc:	3ff00000 	.word	0x3ff00000
 800d300:	0800df20 	.word	0x0800df20
 800d304:	40200000 	.word	0x40200000
 800d308:	3ff00000 	.word	0x3ff00000
 800d30c:	3e700000 	.word	0x3e700000
 800d310:	41700000 	.word	0x41700000
 800d314:	3fe00000 	.word	0x3fe00000
 800d318:	0800dee0 	.word	0x0800dee0
 800d31c:	1acb      	subs	r3, r1, r3
 800d31e:	f8c8 3000 	str.w	r3, [r8]
 800d322:	462b      	mov	r3, r5
 800d324:	e7df      	b.n	800d2e6 <__kernel_rem_pio2+0x306>
 800d326:	1e62      	subs	r2, r4, #1
 800d328:	ab0c      	add	r3, sp, #48	; 0x30
 800d32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d32e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d332:	a90c      	add	r1, sp, #48	; 0x30
 800d334:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d338:	e738      	b.n	800d1ac <__kernel_rem_pio2+0x1cc>
 800d33a:	1e62      	subs	r2, r4, #1
 800d33c:	ab0c      	add	r3, sp, #48	; 0x30
 800d33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d342:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d346:	e7f4      	b.n	800d332 <__kernel_rem_pio2+0x352>
 800d348:	a90c      	add	r1, sp, #48	; 0x30
 800d34a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d34e:	3b01      	subs	r3, #1
 800d350:	430a      	orrs	r2, r1
 800d352:	e788      	b.n	800d266 <__kernel_rem_pio2+0x286>
 800d354:	3301      	adds	r3, #1
 800d356:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d35a:	2900      	cmp	r1, #0
 800d35c:	d0fa      	beq.n	800d354 <__kernel_rem_pio2+0x374>
 800d35e:	9a08      	ldr	r2, [sp, #32]
 800d360:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d364:	446a      	add	r2, sp
 800d366:	3a98      	subs	r2, #152	; 0x98
 800d368:	9208      	str	r2, [sp, #32]
 800d36a:	9a06      	ldr	r2, [sp, #24]
 800d36c:	a920      	add	r1, sp, #128	; 0x80
 800d36e:	18a2      	adds	r2, r4, r2
 800d370:	18e3      	adds	r3, r4, r3
 800d372:	f104 0801 	add.w	r8, r4, #1
 800d376:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	9b02      	ldr	r3, [sp, #8]
 800d37e:	4543      	cmp	r3, r8
 800d380:	da04      	bge.n	800d38c <__kernel_rem_pio2+0x3ac>
 800d382:	461c      	mov	r4, r3
 800d384:	e6a2      	b.n	800d0cc <__kernel_rem_pio2+0xec>
 800d386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d388:	2301      	movs	r3, #1
 800d38a:	e7e4      	b.n	800d356 <__kernel_rem_pio2+0x376>
 800d38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d38e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d392:	f7f3 f8ef 	bl	8000574 <__aeabi_i2d>
 800d396:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d39c:	46ab      	mov	fp, r5
 800d39e:	461c      	mov	r4, r3
 800d3a0:	f04f 0900 	mov.w	r9, #0
 800d3a4:	2600      	movs	r6, #0
 800d3a6:	2700      	movs	r7, #0
 800d3a8:	9b05      	ldr	r3, [sp, #20]
 800d3aa:	4599      	cmp	r9, r3
 800d3ac:	dd06      	ble.n	800d3bc <__kernel_rem_pio2+0x3dc>
 800d3ae:	9b08      	ldr	r3, [sp, #32]
 800d3b0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d3b4:	f108 0801 	add.w	r8, r8, #1
 800d3b8:	9308      	str	r3, [sp, #32]
 800d3ba:	e7df      	b.n	800d37c <__kernel_rem_pio2+0x39c>
 800d3bc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d3c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d3c4:	f7f3 f940 	bl	8000648 <__aeabi_dmul>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	4639      	mov	r1, r7
 800d3d0:	f7f2 ff84 	bl	80002dc <__adddf3>
 800d3d4:	f109 0901 	add.w	r9, r9, #1
 800d3d8:	4606      	mov	r6, r0
 800d3da:	460f      	mov	r7, r1
 800d3dc:	e7e4      	b.n	800d3a8 <__kernel_rem_pio2+0x3c8>
 800d3de:	3d01      	subs	r5, #1
 800d3e0:	e747      	b.n	800d272 <__kernel_rem_pio2+0x292>
 800d3e2:	ec47 6b10 	vmov	d0, r6, r7
 800d3e6:	f1ca 0000 	rsb	r0, sl, #0
 800d3ea:	f000 f949 	bl	800d680 <scalbn>
 800d3ee:	ec57 6b10 	vmov	r6, r7, d0
 800d3f2:	4ba0      	ldr	r3, [pc, #640]	; (800d674 <__kernel_rem_pio2+0x694>)
 800d3f4:	ee10 0a10 	vmov	r0, s0
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	f7f3 fbaa 	bl	8000b54 <__aeabi_dcmpge>
 800d400:	b1f8      	cbz	r0, 800d442 <__kernel_rem_pio2+0x462>
 800d402:	4b9d      	ldr	r3, [pc, #628]	; (800d678 <__kernel_rem_pio2+0x698>)
 800d404:	2200      	movs	r2, #0
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 f91d 	bl	8000648 <__aeabi_dmul>
 800d40e:	f7f3 fbcb 	bl	8000ba8 <__aeabi_d2iz>
 800d412:	4680      	mov	r8, r0
 800d414:	f7f3 f8ae 	bl	8000574 <__aeabi_i2d>
 800d418:	4b96      	ldr	r3, [pc, #600]	; (800d674 <__kernel_rem_pio2+0x694>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	f7f3 f914 	bl	8000648 <__aeabi_dmul>
 800d420:	460b      	mov	r3, r1
 800d422:	4602      	mov	r2, r0
 800d424:	4639      	mov	r1, r7
 800d426:	4630      	mov	r0, r6
 800d428:	f7f2 ff56 	bl	80002d8 <__aeabi_dsub>
 800d42c:	f7f3 fbbc 	bl	8000ba8 <__aeabi_d2iz>
 800d430:	1c65      	adds	r5, r4, #1
 800d432:	ab0c      	add	r3, sp, #48	; 0x30
 800d434:	f10a 0a18 	add.w	sl, sl, #24
 800d438:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d43c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d440:	e71f      	b.n	800d282 <__kernel_rem_pio2+0x2a2>
 800d442:	4630      	mov	r0, r6
 800d444:	4639      	mov	r1, r7
 800d446:	f7f3 fbaf 	bl	8000ba8 <__aeabi_d2iz>
 800d44a:	ab0c      	add	r3, sp, #48	; 0x30
 800d44c:	4625      	mov	r5, r4
 800d44e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d452:	e716      	b.n	800d282 <__kernel_rem_pio2+0x2a2>
 800d454:	ab0c      	add	r3, sp, #48	; 0x30
 800d456:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d45a:	f7f3 f88b 	bl	8000574 <__aeabi_i2d>
 800d45e:	4632      	mov	r2, r6
 800d460:	463b      	mov	r3, r7
 800d462:	f7f3 f8f1 	bl	8000648 <__aeabi_dmul>
 800d466:	4642      	mov	r2, r8
 800d468:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d46c:	464b      	mov	r3, r9
 800d46e:	4630      	mov	r0, r6
 800d470:	4639      	mov	r1, r7
 800d472:	f7f3 f8e9 	bl	8000648 <__aeabi_dmul>
 800d476:	3c01      	subs	r4, #1
 800d478:	4606      	mov	r6, r0
 800d47a:	460f      	mov	r7, r1
 800d47c:	e713      	b.n	800d2a6 <__kernel_rem_pio2+0x2c6>
 800d47e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d482:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d486:	f7f3 f8df 	bl	8000648 <__aeabi_dmul>
 800d48a:	4602      	mov	r2, r0
 800d48c:	460b      	mov	r3, r1
 800d48e:	4648      	mov	r0, r9
 800d490:	4651      	mov	r1, sl
 800d492:	f7f2 ff23 	bl	80002dc <__adddf3>
 800d496:	3701      	adds	r7, #1
 800d498:	4681      	mov	r9, r0
 800d49a:	468a      	mov	sl, r1
 800d49c:	9b00      	ldr	r3, [sp, #0]
 800d49e:	429f      	cmp	r7, r3
 800d4a0:	dc02      	bgt.n	800d4a8 <__kernel_rem_pio2+0x4c8>
 800d4a2:	9b06      	ldr	r3, [sp, #24]
 800d4a4:	429f      	cmp	r7, r3
 800d4a6:	ddea      	ble.n	800d47e <__kernel_rem_pio2+0x49e>
 800d4a8:	9a06      	ldr	r2, [sp, #24]
 800d4aa:	ab48      	add	r3, sp, #288	; 0x120
 800d4ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d4b0:	e9c6 9a00 	strd	r9, sl, [r6]
 800d4b4:	3c01      	subs	r4, #1
 800d4b6:	e6fa      	b.n	800d2ae <__kernel_rem_pio2+0x2ce>
 800d4b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	dc0b      	bgt.n	800d4d6 <__kernel_rem_pio2+0x4f6>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	dc39      	bgt.n	800d536 <__kernel_rem_pio2+0x556>
 800d4c2:	d05d      	beq.n	800d580 <__kernel_rem_pio2+0x5a0>
 800d4c4:	9b02      	ldr	r3, [sp, #8]
 800d4c6:	f003 0007 	and.w	r0, r3, #7
 800d4ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d4ce:	ecbd 8b02 	vpop	{d8}
 800d4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d4d8:	2b03      	cmp	r3, #3
 800d4da:	d1f3      	bne.n	800d4c4 <__kernel_rem_pio2+0x4e4>
 800d4dc:	9b05      	ldr	r3, [sp, #20]
 800d4de:	9500      	str	r5, [sp, #0]
 800d4e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d4e4:	eb0d 0403 	add.w	r4, sp, r3
 800d4e8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d4ec:	46a2      	mov	sl, r4
 800d4ee:	9b00      	ldr	r3, [sp, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f1aa 0a08 	sub.w	sl, sl, #8
 800d4f6:	dc69      	bgt.n	800d5cc <__kernel_rem_pio2+0x5ec>
 800d4f8:	46aa      	mov	sl, r5
 800d4fa:	f1ba 0f01 	cmp.w	sl, #1
 800d4fe:	f1a4 0408 	sub.w	r4, r4, #8
 800d502:	f300 8083 	bgt.w	800d60c <__kernel_rem_pio2+0x62c>
 800d506:	9c05      	ldr	r4, [sp, #20]
 800d508:	ab48      	add	r3, sp, #288	; 0x120
 800d50a:	441c      	add	r4, r3
 800d50c:	2000      	movs	r0, #0
 800d50e:	2100      	movs	r1, #0
 800d510:	2d01      	cmp	r5, #1
 800d512:	f300 809a 	bgt.w	800d64a <__kernel_rem_pio2+0x66a>
 800d516:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d51a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d51e:	f1bb 0f00 	cmp.w	fp, #0
 800d522:	f040 8098 	bne.w	800d656 <__kernel_rem_pio2+0x676>
 800d526:	9b04      	ldr	r3, [sp, #16]
 800d528:	e9c3 7800 	strd	r7, r8, [r3]
 800d52c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d530:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d534:	e7c6      	b.n	800d4c4 <__kernel_rem_pio2+0x4e4>
 800d536:	9e05      	ldr	r6, [sp, #20]
 800d538:	ab48      	add	r3, sp, #288	; 0x120
 800d53a:	441e      	add	r6, r3
 800d53c:	462c      	mov	r4, r5
 800d53e:	2000      	movs	r0, #0
 800d540:	2100      	movs	r1, #0
 800d542:	2c00      	cmp	r4, #0
 800d544:	da33      	bge.n	800d5ae <__kernel_rem_pio2+0x5ce>
 800d546:	f1bb 0f00 	cmp.w	fp, #0
 800d54a:	d036      	beq.n	800d5ba <__kernel_rem_pio2+0x5da>
 800d54c:	4602      	mov	r2, r0
 800d54e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d552:	9c04      	ldr	r4, [sp, #16]
 800d554:	e9c4 2300 	strd	r2, r3, [r4]
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d560:	f7f2 feba 	bl	80002d8 <__aeabi_dsub>
 800d564:	ae4a      	add	r6, sp, #296	; 0x128
 800d566:	2401      	movs	r4, #1
 800d568:	42a5      	cmp	r5, r4
 800d56a:	da29      	bge.n	800d5c0 <__kernel_rem_pio2+0x5e0>
 800d56c:	f1bb 0f00 	cmp.w	fp, #0
 800d570:	d002      	beq.n	800d578 <__kernel_rem_pio2+0x598>
 800d572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d576:	4619      	mov	r1, r3
 800d578:	9b04      	ldr	r3, [sp, #16]
 800d57a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d57e:	e7a1      	b.n	800d4c4 <__kernel_rem_pio2+0x4e4>
 800d580:	9c05      	ldr	r4, [sp, #20]
 800d582:	ab48      	add	r3, sp, #288	; 0x120
 800d584:	441c      	add	r4, r3
 800d586:	2000      	movs	r0, #0
 800d588:	2100      	movs	r1, #0
 800d58a:	2d00      	cmp	r5, #0
 800d58c:	da09      	bge.n	800d5a2 <__kernel_rem_pio2+0x5c2>
 800d58e:	f1bb 0f00 	cmp.w	fp, #0
 800d592:	d002      	beq.n	800d59a <__kernel_rem_pio2+0x5ba>
 800d594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d598:	4619      	mov	r1, r3
 800d59a:	9b04      	ldr	r3, [sp, #16]
 800d59c:	e9c3 0100 	strd	r0, r1, [r3]
 800d5a0:	e790      	b.n	800d4c4 <__kernel_rem_pio2+0x4e4>
 800d5a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d5a6:	f7f2 fe99 	bl	80002dc <__adddf3>
 800d5aa:	3d01      	subs	r5, #1
 800d5ac:	e7ed      	b.n	800d58a <__kernel_rem_pio2+0x5aa>
 800d5ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d5b2:	f7f2 fe93 	bl	80002dc <__adddf3>
 800d5b6:	3c01      	subs	r4, #1
 800d5b8:	e7c3      	b.n	800d542 <__kernel_rem_pio2+0x562>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	e7c8      	b.n	800d552 <__kernel_rem_pio2+0x572>
 800d5c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d5c4:	f7f2 fe8a 	bl	80002dc <__adddf3>
 800d5c8:	3401      	adds	r4, #1
 800d5ca:	e7cd      	b.n	800d568 <__kernel_rem_pio2+0x588>
 800d5cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800d5d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d5d4:	9b00      	ldr	r3, [sp, #0]
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	4632      	mov	r2, r6
 800d5dc:	463b      	mov	r3, r7
 800d5de:	4640      	mov	r0, r8
 800d5e0:	4649      	mov	r1, r9
 800d5e2:	f7f2 fe7b 	bl	80002dc <__adddf3>
 800d5e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	f7f2 fe71 	bl	80002d8 <__aeabi_dsub>
 800d5f6:	4632      	mov	r2, r6
 800d5f8:	463b      	mov	r3, r7
 800d5fa:	f7f2 fe6f 	bl	80002dc <__adddf3>
 800d5fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d602:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d606:	ed8a 7b00 	vstr	d7, [sl]
 800d60a:	e770      	b.n	800d4ee <__kernel_rem_pio2+0x50e>
 800d60c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d610:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d614:	4640      	mov	r0, r8
 800d616:	4632      	mov	r2, r6
 800d618:	463b      	mov	r3, r7
 800d61a:	4649      	mov	r1, r9
 800d61c:	f7f2 fe5e 	bl	80002dc <__adddf3>
 800d620:	e9cd 0100 	strd	r0, r1, [sp]
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	4640      	mov	r0, r8
 800d62a:	4649      	mov	r1, r9
 800d62c:	f7f2 fe54 	bl	80002d8 <__aeabi_dsub>
 800d630:	4632      	mov	r2, r6
 800d632:	463b      	mov	r3, r7
 800d634:	f7f2 fe52 	bl	80002dc <__adddf3>
 800d638:	ed9d 7b00 	vldr	d7, [sp]
 800d63c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d640:	ed84 7b00 	vstr	d7, [r4]
 800d644:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d648:	e757      	b.n	800d4fa <__kernel_rem_pio2+0x51a>
 800d64a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d64e:	f7f2 fe45 	bl	80002dc <__adddf3>
 800d652:	3d01      	subs	r5, #1
 800d654:	e75c      	b.n	800d510 <__kernel_rem_pio2+0x530>
 800d656:	9b04      	ldr	r3, [sp, #16]
 800d658:	9a04      	ldr	r2, [sp, #16]
 800d65a:	601f      	str	r7, [r3, #0]
 800d65c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d660:	605c      	str	r4, [r3, #4]
 800d662:	609d      	str	r5, [r3, #8]
 800d664:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d668:	60d3      	str	r3, [r2, #12]
 800d66a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d66e:	6110      	str	r0, [r2, #16]
 800d670:	6153      	str	r3, [r2, #20]
 800d672:	e727      	b.n	800d4c4 <__kernel_rem_pio2+0x4e4>
 800d674:	41700000 	.word	0x41700000
 800d678:	3e700000 	.word	0x3e700000
 800d67c:	00000000 	.word	0x00000000

0800d680 <scalbn>:
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	ec55 4b10 	vmov	r4, r5, d0
 800d686:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d68a:	4606      	mov	r6, r0
 800d68c:	462b      	mov	r3, r5
 800d68e:	b999      	cbnz	r1, 800d6b8 <scalbn+0x38>
 800d690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d694:	4323      	orrs	r3, r4
 800d696:	d03f      	beq.n	800d718 <scalbn+0x98>
 800d698:	4b35      	ldr	r3, [pc, #212]	; (800d770 <scalbn+0xf0>)
 800d69a:	4629      	mov	r1, r5
 800d69c:	ee10 0a10 	vmov	r0, s0
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f7f2 ffd1 	bl	8000648 <__aeabi_dmul>
 800d6a6:	4b33      	ldr	r3, [pc, #204]	; (800d774 <scalbn+0xf4>)
 800d6a8:	429e      	cmp	r6, r3
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	460d      	mov	r5, r1
 800d6ae:	da10      	bge.n	800d6d2 <scalbn+0x52>
 800d6b0:	a327      	add	r3, pc, #156	; (adr r3, 800d750 <scalbn+0xd0>)
 800d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b6:	e01f      	b.n	800d6f8 <scalbn+0x78>
 800d6b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d6bc:	4291      	cmp	r1, r2
 800d6be:	d10c      	bne.n	800d6da <scalbn+0x5a>
 800d6c0:	ee10 2a10 	vmov	r2, s0
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	f7f2 fe08 	bl	80002dc <__adddf3>
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	460d      	mov	r5, r1
 800d6d0:	e022      	b.n	800d718 <scalbn+0x98>
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6d8:	3936      	subs	r1, #54	; 0x36
 800d6da:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d6de:	4296      	cmp	r6, r2
 800d6e0:	dd0d      	ble.n	800d6fe <scalbn+0x7e>
 800d6e2:	2d00      	cmp	r5, #0
 800d6e4:	a11c      	add	r1, pc, #112	; (adr r1, 800d758 <scalbn+0xd8>)
 800d6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ea:	da02      	bge.n	800d6f2 <scalbn+0x72>
 800d6ec:	a11c      	add	r1, pc, #112	; (adr r1, 800d760 <scalbn+0xe0>)
 800d6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f2:	a319      	add	r3, pc, #100	; (adr r3, 800d758 <scalbn+0xd8>)
 800d6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f8:	f7f2 ffa6 	bl	8000648 <__aeabi_dmul>
 800d6fc:	e7e6      	b.n	800d6cc <scalbn+0x4c>
 800d6fe:	1872      	adds	r2, r6, r1
 800d700:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d704:	428a      	cmp	r2, r1
 800d706:	dcec      	bgt.n	800d6e2 <scalbn+0x62>
 800d708:	2a00      	cmp	r2, #0
 800d70a:	dd08      	ble.n	800d71e <scalbn+0x9e>
 800d70c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d710:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d714:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d718:	ec45 4b10 	vmov	d0, r4, r5
 800d71c:	bd70      	pop	{r4, r5, r6, pc}
 800d71e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d722:	da08      	bge.n	800d736 <scalbn+0xb6>
 800d724:	2d00      	cmp	r5, #0
 800d726:	a10a      	add	r1, pc, #40	; (adr r1, 800d750 <scalbn+0xd0>)
 800d728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d72c:	dac0      	bge.n	800d6b0 <scalbn+0x30>
 800d72e:	a10e      	add	r1, pc, #56	; (adr r1, 800d768 <scalbn+0xe8>)
 800d730:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d734:	e7bc      	b.n	800d6b0 <scalbn+0x30>
 800d736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d73a:	3236      	adds	r2, #54	; 0x36
 800d73c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d740:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d744:	4620      	mov	r0, r4
 800d746:	4b0c      	ldr	r3, [pc, #48]	; (800d778 <scalbn+0xf8>)
 800d748:	2200      	movs	r2, #0
 800d74a:	e7d5      	b.n	800d6f8 <scalbn+0x78>
 800d74c:	f3af 8000 	nop.w
 800d750:	c2f8f359 	.word	0xc2f8f359
 800d754:	01a56e1f 	.word	0x01a56e1f
 800d758:	8800759c 	.word	0x8800759c
 800d75c:	7e37e43c 	.word	0x7e37e43c
 800d760:	8800759c 	.word	0x8800759c
 800d764:	fe37e43c 	.word	0xfe37e43c
 800d768:	c2f8f359 	.word	0xc2f8f359
 800d76c:	81a56e1f 	.word	0x81a56e1f
 800d770:	43500000 	.word	0x43500000
 800d774:	ffff3cb0 	.word	0xffff3cb0
 800d778:	3c900000 	.word	0x3c900000
 800d77c:	00000000 	.word	0x00000000

0800d780 <floor>:
 800d780:	ec51 0b10 	vmov	r0, r1, d0
 800d784:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d790:	2e13      	cmp	r6, #19
 800d792:	ee10 5a10 	vmov	r5, s0
 800d796:	ee10 8a10 	vmov	r8, s0
 800d79a:	460c      	mov	r4, r1
 800d79c:	dc31      	bgt.n	800d802 <floor+0x82>
 800d79e:	2e00      	cmp	r6, #0
 800d7a0:	da14      	bge.n	800d7cc <floor+0x4c>
 800d7a2:	a333      	add	r3, pc, #204	; (adr r3, 800d870 <floor+0xf0>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f7f2 fd98 	bl	80002dc <__adddf3>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f7f3 f9da 	bl	8000b68 <__aeabi_dcmpgt>
 800d7b4:	b138      	cbz	r0, 800d7c6 <floor+0x46>
 800d7b6:	2c00      	cmp	r4, #0
 800d7b8:	da53      	bge.n	800d862 <floor+0xe2>
 800d7ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d7be:	4325      	orrs	r5, r4
 800d7c0:	d052      	beq.n	800d868 <floor+0xe8>
 800d7c2:	4c2d      	ldr	r4, [pc, #180]	; (800d878 <floor+0xf8>)
 800d7c4:	2500      	movs	r5, #0
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	e024      	b.n	800d816 <floor+0x96>
 800d7cc:	4f2b      	ldr	r7, [pc, #172]	; (800d87c <floor+0xfc>)
 800d7ce:	4137      	asrs	r7, r6
 800d7d0:	ea01 0307 	and.w	r3, r1, r7
 800d7d4:	4303      	orrs	r3, r0
 800d7d6:	d01e      	beq.n	800d816 <floor+0x96>
 800d7d8:	a325      	add	r3, pc, #148	; (adr r3, 800d870 <floor+0xf0>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	f7f2 fd7d 	bl	80002dc <__adddf3>
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f7f3 f9bf 	bl	8000b68 <__aeabi_dcmpgt>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d0eb      	beq.n	800d7c6 <floor+0x46>
 800d7ee:	2c00      	cmp	r4, #0
 800d7f0:	bfbe      	ittt	lt
 800d7f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d7f6:	4133      	asrlt	r3, r6
 800d7f8:	18e4      	addlt	r4, r4, r3
 800d7fa:	ea24 0407 	bic.w	r4, r4, r7
 800d7fe:	2500      	movs	r5, #0
 800d800:	e7e1      	b.n	800d7c6 <floor+0x46>
 800d802:	2e33      	cmp	r6, #51	; 0x33
 800d804:	dd0b      	ble.n	800d81e <floor+0x9e>
 800d806:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d80a:	d104      	bne.n	800d816 <floor+0x96>
 800d80c:	ee10 2a10 	vmov	r2, s0
 800d810:	460b      	mov	r3, r1
 800d812:	f7f2 fd63 	bl	80002dc <__adddf3>
 800d816:	ec41 0b10 	vmov	d0, r0, r1
 800d81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d81e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d822:	f04f 37ff 	mov.w	r7, #4294967295
 800d826:	40df      	lsrs	r7, r3
 800d828:	4238      	tst	r0, r7
 800d82a:	d0f4      	beq.n	800d816 <floor+0x96>
 800d82c:	a310      	add	r3, pc, #64	; (adr r3, 800d870 <floor+0xf0>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	f7f2 fd53 	bl	80002dc <__adddf3>
 800d836:	2200      	movs	r2, #0
 800d838:	2300      	movs	r3, #0
 800d83a:	f7f3 f995 	bl	8000b68 <__aeabi_dcmpgt>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d0c1      	beq.n	800d7c6 <floor+0x46>
 800d842:	2c00      	cmp	r4, #0
 800d844:	da0a      	bge.n	800d85c <floor+0xdc>
 800d846:	2e14      	cmp	r6, #20
 800d848:	d101      	bne.n	800d84e <floor+0xce>
 800d84a:	3401      	adds	r4, #1
 800d84c:	e006      	b.n	800d85c <floor+0xdc>
 800d84e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d852:	2301      	movs	r3, #1
 800d854:	40b3      	lsls	r3, r6
 800d856:	441d      	add	r5, r3
 800d858:	45a8      	cmp	r8, r5
 800d85a:	d8f6      	bhi.n	800d84a <floor+0xca>
 800d85c:	ea25 0507 	bic.w	r5, r5, r7
 800d860:	e7b1      	b.n	800d7c6 <floor+0x46>
 800d862:	2500      	movs	r5, #0
 800d864:	462c      	mov	r4, r5
 800d866:	e7ae      	b.n	800d7c6 <floor+0x46>
 800d868:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d86c:	e7ab      	b.n	800d7c6 <floor+0x46>
 800d86e:	bf00      	nop
 800d870:	8800759c 	.word	0x8800759c
 800d874:	7e37e43c 	.word	0x7e37e43c
 800d878:	bff00000 	.word	0xbff00000
 800d87c:	000fffff 	.word	0x000fffff

0800d880 <_sbrk>:
 800d880:	4a04      	ldr	r2, [pc, #16]	; (800d894 <_sbrk+0x14>)
 800d882:	6811      	ldr	r1, [r2, #0]
 800d884:	4603      	mov	r3, r0
 800d886:	b909      	cbnz	r1, 800d88c <_sbrk+0xc>
 800d888:	4903      	ldr	r1, [pc, #12]	; (800d898 <_sbrk+0x18>)
 800d88a:	6011      	str	r1, [r2, #0]
 800d88c:	6810      	ldr	r0, [r2, #0]
 800d88e:	4403      	add	r3, r0
 800d890:	6013      	str	r3, [r2, #0]
 800d892:	4770      	bx	lr
 800d894:	20001b68 	.word	0x20001b68
 800d898:	20001b70 	.word	0x20001b70

0800d89c <_init>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	bf00      	nop
 800d8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a2:	bc08      	pop	{r3}
 800d8a4:	469e      	mov	lr, r3
 800d8a6:	4770      	bx	lr

0800d8a8 <_fini>:
 800d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8aa:	bf00      	nop
 800d8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ae:	bc08      	pop	{r3}
 800d8b0:	469e      	mov	lr, r3
 800d8b2:	4770      	bx	lr
